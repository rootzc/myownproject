cscope 15 $HOME/myownproject -q 0000009739 0003476305
	@config.h

5 
	#HAVE_ARPA_INET_H
 1

	)

11 
	#HAVE_ASSERT_PANIC
 1

	)

14 
	#HAVE_BACKTRACE
 1

	)

17 
	#HAVE_DEBUG_LOG
 1

	)

20 
	#HAVE_DLFCN_H
 1

	)

23 
	#HAVE_DUP2
 1

	)

26 
	#HAVE_EPOLL
 1

	)

32 
	#HAVE_EXECINFO_H
 1

	)

35 
	#HAVE_FCNTL_H
 1

	)

38 
	#HAVE_FLOAT_H
 1

	)

41 
	#HAVE_FORK
 1

	)

44 
	#HAVE_GETHOSTNAME
 1

	)

47 
	#HAVE_GETTIMEOFDAY
 1

	)

50 
	#HAVE_INTMAX_T
 1

	)

53 
	#HAVE_INTPTR_T
 1

	)

56 
	#HAVE_INTTYPES_H
 1

	)

59 
	#HAVE_JEMALLOC
 1

	)

65 
	#HAVE_LIBM
 1

	)

68 
	#HAVE_LIBPTHREAD
 1

	)

71 
	#HAVE_LIMITS_H
 1

	)

74 
	#HAVE_LITTLE_ENDIAN
 1

	)

77 
	#HAVE_LONG_LONG_INT
 1

	)

81 
	#HAVE_MALLOC
 1

	)

84 
	#HAVE_MEMCHR
 1

	)

87 
	#HAVE_MEMMOVE
 1

	)

90 
	#HAVE_MEMORY_H
 1

	)

93 
	#HAVE_MEMSET
 1

	)

96 
	#HAVE_NETDB_H
 1

	)

99 
	#HAVE_NETINET_IN_H
 1

	)

103 
	#HAVE_REALLOC
 1

	)

106 
	#HAVE_SOCKET
 1

	)

109 
	#HAVE_SPINLOCK
 1

	)

112 
	#HAVE_STDBOOL_H
 1

	)

115 
	#HAVE_STDDEF_H
 1

	)

118 
	#HAVE_STDINT_H
 1

	)

121 
	#HAVE_STDLIB_H
 1

	)

124 
	#HAVE_STRCHR
 1

	)

127 
	#HAVE_STRERROR
 1

	)

130 
	#HAVE_STRINGS_H
 1

	)

133 
	#HAVE_STRING_H
 1

	)

136 
	#HAVE_STRNDUP
 1

	)

139 
	#HAVE_STRTOUL
 1

	)

142 
	#HAVE_SYS_EPOLL_H
 1

	)

148 
	#HAVE_SYS_IOCTL_H
 1

	)

151 
	#HAVE_SYS_SOCKET_H
 1

	)

154 
	#HAVE_SYS_STAT_H
 1

	)

157 
	#HAVE_SYS_TIME_H
 1

	)

160 
	#HAVE_SYS_TYPES_H
 1

	)

163 
	#HAVE_SYS_UIO_H
 1

	)

166 
	#HAVE_SYS_UN_H
 1

	)

169 
	#HAVE_UINTMAX_T
 1

	)

172 
	#HAVE_UINTPTR_T
 1

	)

175 
	#HAVE_UNISTD_H
 1

	)

178 
	#HAVE_UNSIGNED_LONG_LONG_INT
 1

	)

181 
	#HAVE_VFORK
 1

	)

187 
	#HAVE_WORKING_FORK
 1

	)

190 
	#HAVE_WORKING_VFORK
 1

	)

193 
	#HAVE__BOOL
 1

	)

196 
	#LT_OBJDIR
 ".libs/"

	)

199 
	#PACKAGE
 "vúe"

	)

202 
	#PACKAGE_BUGREPORT
 "diguo58@gmaû.com"

	)

205 
	#PACKAGE_NAME
 "vúe"

	)

208 
	#PACKAGE_STRING
 "vúê1.0.0"

	)

211 
	#PACKAGE_TARNAME
 "vúe"

	)

214 
	#PACKAGE_URL
 ""

	)

217 
	#PACKAGE_VERSION
 "1.0.0"

	)

220 
	#STDC_HEADERS
 1

	)

223 
	#VERSION
 "1.0.0"

	)

226 
	#VR_VERSION_MAJOR
 1

	)

229 
	#VR_VERSION_MINOR
 0

	)

232 
	#VR_VERSION_PATCH
 0

	)

235 
	#VR_VERSION_STRING
 "1.0.0"

	)

239 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


240 #i‡
deföed
 
__BIG_ENDIAN__


241 
	#WORDS_BIGENDIAN
 1

	)

244 #i‚de‡
WORDS_BIGENDIAN


266 #i‚de‡
__˝lu•lus


	@dep/ae/ae.c

33 
	~<°dio.h
>

34 
	~<sys/time.h
>

35 
	~<sys/ty≥s.h
>

36 
	~<uni°d.h
>

37 
	~<°dlib.h
>

38 
	~<pﬁl.h
>

39 
	~<°rög.h
>

40 
	~<time.h
>

41 
	~<î∫o.h
>

43 
	~<dmÆloc.h
>

45 
	~<´.h
>

47 #ifde‡
HAVE_CONFIG_H


48 
	~<c⁄fig.h
>

53 #ifde‡
HAVE_EVENT_PORTS


54 
	~"´_evp‹t.c
"

56 #ifde‡
HAVE_EPOLL


57 
	~"´_ïﬁl.c
"

59 #ifde‡
HAVE_KQUEUE


60 
	~"´_kqueue.c
"

62 
	~"´_£À˘.c
"

67 
´EvítLo›
 *
	$´Cª©eEvítLo›
(
£tsize
) {

68 
´EvítLo›
 *
evítLo›
;

69 
i
;

71 i‡((
evítLo›
 = 
	`dÆloc
((*evítLo›))Ë=
NULL
Ë
îr
;

72 
evítLo›
->
evíts
 = 
	`dÆloc
((
´FûeEvít
)*
£tsize
);

73 
evítLo›
->
fúed
 = 
	`dÆloc
((
´FúedEvít
)*
£tsize
);

74 i‡(
evítLo›
->
evíts
 =
NULL
 ||ÉvítLo›->
fúed
 =NULLË
îr
;

75 
evítLo›
->
£tsize
 = setsize;

76 
evítLo›
->
œ°Time
 = 
	`time
(
NULL
);

77 
evítLo›
->
timeEvítHód
 = 
NULL
;

78 
evítLo›
->
timeEvítNextId
 = 0;

79 
evítLo›
->
°›
 = 0;

80 
evítLo›
->
maxfd
 = -1;

81 
evítLo›
->
bef‹e¶ìp
 = 
NULL
;

82 
evítLo›
->
bsd©a
 = 
NULL
;

83 i‡(
	`´ApiCª©e
(
evítLo›
Ë=-1Ë
îr
;

86 
i
 = 0; i < 
£tsize
; i++)

87 
evítLo›
->
evíts
[
i
].
mask
 = 
AE_NONE
;

88  
evítLo›
;

90 
îr
:

91 i‡(
evítLo›
) {

92 
	`d‰ì
(
evítLo›
->
evíts
);

93 
	`d‰ì
(
evítLo›
->
fúed
);

94 
	`d‰ì
(
evítLo›
);

96  
NULL
;

97 
	}
}

100 
	$´GëSëSize
(
´EvítLo›
 *
evítLo›
) {

101  
evítLo›
->
£tsize
;

102 
	}
}

111 
	$´ResizeSëSize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

112 
i
;

114 i‡(
£tsize
 =
evítLo›
->£tsizeË 
AE_OK
;

115 i‡(
evítLo›
->
maxfd
 >
£tsize
Ë 
AE_ERR
;

116 i‡(
	`´ApiResize
(
evítLo›
,
£tsize
Ë=-1Ë 
AE_ERR
;

118 
evítLo›
->
evíts
 = 
	`dªÆloc
”vítLo›->evíts,(
´FûeEvít
)*
£tsize
);

119 
evítLo›
->
fúed
 = 
	`dªÆloc
”vítLo›->fúed,(
´FúedEvít
)*
£tsize
);

120 
evítLo›
->
£tsize
 = setsize;

124 
i
 = 
evítLo›
->
maxfd
+1; i < 
£tsize
; i++)

125 
evítLo›
->
evíts
[
i
].
mask
 = 
AE_NONE
;

126  
AE_OK
;

127 
	}
}

129 
	$´DñëeEvítLo›
(
´EvítLo›
 *
evítLo›
) {

130 
	`´ApiFªe
(
evítLo›
);

131 
	`d‰ì
(
evítLo›
->
evíts
);

132 
	`d‰ì
(
evítLo›
->
fúed
);

133 
	`d‰ì
(
evítLo›
);

134 
	}
}

136 
	$´St›
(
´EvítLo›
 *
evítLo›
) {

137 
evítLo›
->
°›
 = 1;

138 
	}
}

140 
	$´Cª©eFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
,

141 
´FûeProc
 *
¥oc
, *
˛õ¡D©a
)

143 i‡(
fd
 >
evítLo›
->
£tsize
) {

144 i‡(
	`´ResizeSëSize
(
evítLo›
,
fd
+1000Ë!
AE_OK
) {

145  
AE_ERR
;

148 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

150 i‡(
	`´ApiAddEvít
(
evítLo›
, 
fd
, 
mask
) == -1)

151  
AE_ERR
;

152 
„
->
mask
 |= mask;

153 i‡(
mask
 & 
AE_READABLE
Ë
„
->
rfûeProc
 = 
¥oc
;

154 i‡(
mask
 & 
AE_WRITABLE
Ë
„
->
wfûeProc
 = 
¥oc
;

155 
„
->
˛õ¡D©a
 = clientData;

156 i‡(
fd
 > 
evítLo›
->
maxfd
)

157 
evítLo›
->
maxfd
 = 
fd
;

158  
AE_OK
;

159 
	}
}

161 
	$´DñëeFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
)

163 i‡(
fd
 >
evítLo›
->
£tsize
) ;

164 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

165 i‡(
„
->
mask
 =
AE_NONE
) ;

167 
	`´ApiDñEvít
(
evítLo›
, 
fd
, 
mask
);

168 
„
->
mask
 = fe->mask & (~mask);

169 i‡(
fd
 =
evítLo›
->
maxfd
 && 
„
->
mask
 =
AE_NONE
) {

171 
j
;

173 
j
 = 
evítLo›
->
maxfd
-1; j >= 0; j--)

174 i‡(
evítLo›
->
evíts
[
j
].
mask
 !
AE_NONE
) ;

175 
evítLo›
->
maxfd
 = 
j
;

177 
	}
}

179 
	$´GëFûeEvíts
(
´EvítLo›
 *
evítLo›
, 
fd
) {

180 i‡(
fd
 >
evítLo›
->
£tsize
)  0;

181 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

183  
„
->
mask
;

184 
	}
}

186 
	$´GëTime
(*
£c⁄ds
, *
mûli£c⁄ds
)

188 
timevÆ
 
tv
;

190 
	`gëtimeofday
(&
tv
, 
NULL
);

191 *
£c⁄ds
 = 
tv
.
tv_£c
;

192 *
mûli£c⁄ds
 = 
tv
.
tv_u£c
/1000;

193 
	}
}

195 
	$´AddMûli£c⁄dsToNow
(
mûli£c⁄ds
, *
£c
, *
ms
) {

196 
cur_£c
, 
cur_ms
, 
whí_£c
, 
whí_ms
;

198 
	`´GëTime
(&
cur_£c
, &
cur_ms
);

199 
whí_£c
 = 
cur_£c
 + 
mûli£c⁄ds
/1000;

200 
whí_ms
 = 
cur_ms
 + 
mûli£c⁄ds
%1000;

201 i‡(
whí_ms
 >= 1000) {

202 
whí_£c
 ++;

203 
whí_ms
 -= 1000;

205 *
£c
 = 
whí_£c
;

206 *
ms
 = 
whí_ms
;

207 
	}
}

209 
	$´Cª©eTimeEvít
(
´EvítLo›
 *
evítLo›
, 
mûli£c⁄ds
,

210 
´TimeProc
 *
¥oc
, *
˛õ¡D©a
,

211 
´EvítFöÆizîProc
 *
föÆizîProc
)

213 
id
 = 
evítLo›
->
timeEvítNextId
++;

214 
´TimeEvít
 *
ã
;

216 
ã
 = 
	`dÆloc
((*te));

217 i‡(
ã
 =
NULL
Ë 
AE_ERR
;

218 
ã
->
id
 = id;

219 
	`´AddMûli£c⁄dsToNow
(
mûli£c⁄ds
,&
ã
->
whí_£c
,&ã->
whí_ms
);

220 
ã
->
timeProc
 = 
¥oc
;

221 
ã
->
föÆizîProc
 = finalizerProc;

222 
ã
->
˛õ¡D©a
 = clientData;

223 
ã
->
√xt
 = 
evítLo›
->
timeEvítHód
;

224 
evítLo›
->
timeEvítHód
 = 
ã
;

225  
id
;

226 
	}
}

228 
	$´DñëeTimeEvít
(
´EvítLo›
 *
evítLo›
, 
id
)

230 
´TimeEvít
 *
ã
 = 
evítLo›
->
timeEvítHód
;

231 
ã
) {

232 i‡(
ã
->
id
 == id) {

233 
ã
->
id
 = 
AE_DELETED_EVENT_ID
;

234  
AE_OK
;

236 
ã
 =Åe->
√xt
;

238  
AE_ERR
;

239 
	}
}

252 
´TimeEvít
 *
	$´SórchNóª°Timî
(
´EvítLo›
 *
evítLo›
)

254 
´TimeEvít
 *
ã
 = 
evítLo›
->
timeEvítHód
;

255 
´TimeEvít
 *
√¨e°
 = 
NULL
;

257 
ã
) {

258 i‡(!
√¨e°
 || 
ã
->
whí_£c
 <Çearest->when_sec ||

259 (
ã
->
whí_£c
 =
√¨e°
->when_sec &&

260 
ã
->
whí_ms
 < 
√¨e°
->when_ms))

261 
√¨e°
 = 
ã
;

262 
ã
 =Åe->
√xt
;

264  
√¨e°
;

265 
	}
}

268 
	$¥o˚ssTimeEvíts
(
´EvítLo›
 *
evítLo›
) {

269 
¥o˚s£d
 = 0;

270 
´TimeEvít
 *
ã
, *
¥ev
;

271 
maxId
;

272 
time_t
 
now
 = 
	`time
(
NULL
);

282 i‡(
now
 < 
evítLo›
->
œ°Time
) {

283 
ã
 = 
evítLo›
->
timeEvítHód
;

284 
ã
) {

285 
ã
->
whí_£c
 = 0;

286 
ã
 =Åe->
√xt
;

289 
evítLo›
->
œ°Time
 = 
now
;

291 
¥ev
 = 
NULL
;

292 
ã
 = 
evítLo›
->
timeEvítHód
;

293 
maxId
 = 
evítLo›
->
timeEvítNextId
-1;

294 
ã
) {

295 
now_£c
, 
now_ms
;

296 
id
;

299 i‡(
ã
->
id
 =
AE_DELETED_EVENT_ID
) {

300 
´TimeEvít
 *
√xt
 = 
ã
->next;

301 i‡(
¥ev
 =
NULL
)

302 
evítLo›
->
timeEvítHód
 = 
ã
->
√xt
;

304 
¥ev
->
√xt
 = 
ã
->next;

305 i‡(
ã
->
föÆizîProc
)

306 
ã
->
	`föÆizîProc
(
evítLo›
,Åe->
˛õ¡D©a
);

307 
	`d‰ì
(
ã
);

308 
ã
 = 
√xt
;

317 i‡(
ã
->
id
 > 
maxId
) {

318 
ã
 =Åe->
√xt
;

321 
	`´GëTime
(&
now_£c
, &
now_ms
);

322 i‡(
now_£c
 > 
ã
->
whí_£c
 ||

323 (
now_£c
 =
ã
->
whí_£c
 && 
now_ms
 >ã->
whí_ms
))

325 
ªtvÆ
;

327 
id
 = 
ã
->id;

328 
ªtvÆ
 = 
ã
->
	`timeProc
(
evítLo›
, 
id
,Åe->
˛õ¡D©a
);

329 
¥o˚s£d
++;

330 i‡(
ªtvÆ
 !
AE_NOMORE
) {

331 
	`´AddMûli£c⁄dsToNow
(
ªtvÆ
,&
ã
->
whí_£c
,&ã->
whí_ms
);

333 
ã
->
id
 = 
AE_DELETED_EVENT_ID
;

336 
¥ev
 = 
ã
;

337 
ã
 =Åe->
√xt
;

339  
¥o˚s£d
;

340 
	}
}

355 
	$´Pro˚ssEvíts
(
´EvítLo›
 *
evítLo›
, 
Êags
)

357 
¥o˚s£d
 = 0, 
numevíts
;

360 i‡(!(
Êags
 & 
AE_TIME_EVENTS
Ë&& !(Êag†& 
AE_FILE_EVENTS
))  0;

366 i‡(
evítLo›
->
maxfd
 != -1 ||

367 ((
Êags
 & 
AE_TIME_EVENTS
Ë&& !(Êag†& 
AE_DONT_WAIT
))) {

368 
j
;

369 
´TimeEvít
 *
sh‹ã°
 = 
NULL
;

370 
timevÆ
 
tv
, *
tvp
;

372 i‡(
Êags
 & 
AE_TIME_EVENTS
 && !(Êag†& 
AE_DONT_WAIT
))

373 
sh‹ã°
 = 
	`´SórchNóª°Timî
(
evítLo›
);

374 i‡(
sh‹ã°
) {

375 
now_£c
, 
now_ms
;

377 
	`´GëTime
(&
now_£c
, &
now_ms
);

378 
tvp
 = &
tv
;

382 
ms
 =

383 (
sh‹ã°
->
whí_£c
 - 
now_£c
)*1000 +

384 
sh‹ã°
->
whí_ms
 - 
now_ms
;

386 i‡(
ms
 > 0) {

387 
tvp
->
tv_£c
 = 
ms
/1000;

388 
tvp
->
tv_u£c
 = (
ms
 % 1000)*1000;

390 
tvp
->
tv_£c
 = 0;

391 
tvp
->
tv_u£c
 = 0;

397 i‡(
Êags
 & 
AE_DONT_WAIT
) {

398 
tv
.
tv_£c
 =Åv.
tv_u£c
 = 0;

399 
tvp
 = &
tv
;

402 
tvp
 = 
NULL
;

406 
numevíts
 = 
	`´ApiPﬁl
(
evítLo›
, 
tvp
);

407 
j
 = 0; j < 
numevíts
; j++) {

408 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[evítLo›->
fúed
[
j
].
fd
];

409 
mask
 = 
evítLo›
->
fúed
[
j
].mask;

410 
fd
 = 
evítLo›
->
fúed
[
j
].fd;

411 
rfúed
 = 0;

416 i‡(
„
->
mask
 & mask & 
AE_READABLE
) {

417 
rfúed
 = 1;

418 
„
->
	`rfûeProc
(
evítLo›
,
fd
,„->
˛õ¡D©a
,
mask
);

420 i‡(
„
->
mask
 & mask & 
AE_WRITABLE
) {

421 i‡(!
rfúed
 || 
„
->
wfûeProc
 !„->
rfûeProc
)

422 
„
->
	`wfûeProc
(
evítLo›
,
fd
,„->
˛õ¡D©a
,
mask
);

424 
¥o˚s£d
++;

428 i‡(
Êags
 & 
AE_TIME_EVENTS
)

429 
¥o˚s£d
 +
	`¥o˚ssTimeEvíts
(
evítLo›
);

431  
¥o˚s£d
;

432 
	}
}

436 
	$´Waô
(
fd
, 
mask
, 
mûli£c⁄ds
) {

437 
pﬁlfd
 
pfd
;

438 
ªtmask
 = 0, 
ªtvÆ
;

440 
	`mem£t
(&
pfd
, 0, (pfd));

441 
pfd
.
fd
 = fd;

442 i‡(
mask
 & 
AE_READABLE
Ë
pfd
.
evíts
 |
POLLIN
;

443 i‡(
mask
 & 
AE_WRITABLE
Ë
pfd
.
evíts
 |
POLLOUT
;

445 i‡((
ªtvÆ
 = 
	`pﬁl
(&
pfd
, 1, 
mûli£c⁄ds
))== 1) {

446 i‡(
pfd
.
ªvíts
 & 
POLLIN
Ë
ªtmask
 |
AE_READABLE
;

447 i‡(
pfd
.
ªvíts
 & 
POLLOUT
Ë
ªtmask
 |
AE_WRITABLE
;

448 i‡(
pfd
.
ªvíts
 & 
POLLERR
Ë
ªtmask
 |
AE_WRITABLE
;

449 i‡(
pfd
.
ªvíts
 & 
POLLHUP
Ë
ªtmask
 |
AE_WRITABLE
;

450  
ªtmask
;

452  
ªtvÆ
;

454 
	}
}

456 
	$´Maö
(
´EvítLo›
 *
evítLo›
) {

457 
evítLo›
->
°›
 = 0;

458 !
evítLo›
->
°›
) {

459 i‡(
evítLo›
->
bef‹e¶ìp
 !
NULL
)

460 
evítLo›
->
	`bef‹e¶ìp
”vítLo›,ÉvítLo›->
bsd©a
);

461 
	`´Pro˚ssEvíts
(
evítLo›
, 
AE_ALL_EVENTS
);

463 
	}
}

465 *
	$´GëApiName
() {

466  
	`´ApiName
();

467 
	}
}

469 
	$´SëBef‹eSÀïProc
(
´EvítLo›
 *
evítLo›
, 
´Bef‹eSÀïProc
 *
bef‹e¶ìp
, *
¥iv©e_d©a
) {

470 
evítLo›
->
bef‹e¶ìp
 = beforesleep;

471 
evítLo›
->
bsd©a
 = 
¥iv©e_d©a
;

472 
	}
}

	@dep/ae/ae.c

33 
	~<°dio.h
>

34 
	~<sys/time.h
>

35 
	~<sys/ty≥s.h
>

36 
	~<uni°d.h
>

37 
	~<°dlib.h
>

38 
	~<pﬁl.h
>

39 
	~<°rög.h
>

40 
	~<time.h
>

41 
	~<î∫o.h
>

43 
	~<dmÆloc.h
>

45 
	~<´.h
>

47 #ifde‡
HAVE_CONFIG_H


48 
	~<c⁄fig.h
>

53 #ifde‡
HAVE_EVENT_PORTS


54 
	~"´_evp‹t.c
"

56 #ifde‡
HAVE_EPOLL


57 
	~"´_ïﬁl.c
"

59 #ifde‡
HAVE_KQUEUE


60 
	~"´_kqueue.c
"

62 
	~"´_£À˘.c
"

67 
´EvítLo›
 *
	$´Cª©eEvítLo›
(
£tsize
) {

68 
´EvítLo›
 *
evítLo›
;

69 
i
;

71 i‡((
evítLo›
 = 
	`dÆloc
((*evítLo›))Ë=
NULL
Ë
îr
;

72 
evítLo›
->
evíts
 = 
	`dÆloc
((
´FûeEvít
)*
£tsize
);

73 
evítLo›
->
fúed
 = 
	`dÆloc
((
´FúedEvít
)*
£tsize
);

74 i‡(
evítLo›
->
evíts
 =
NULL
 ||ÉvítLo›->
fúed
 =NULLË
îr
;

75 
evítLo›
->
£tsize
 = setsize;

76 
evítLo›
->
œ°Time
 = 
	`time
(
NULL
);

77 
evítLo›
->
timeEvítHód
 = 
NULL
;

78 
evítLo›
->
timeEvítNextId
 = 0;

79 
evítLo›
->
°›
 = 0;

80 
evítLo›
->
maxfd
 = -1;

81 
evítLo›
->
bef‹e¶ìp
 = 
NULL
;

82 
evítLo›
->
bsd©a
 = 
NULL
;

83 i‡(
	`´ApiCª©e
(
evítLo›
Ë=-1Ë
îr
;

86 
i
 = 0; i < 
£tsize
; i++)

87 
evítLo›
->
evíts
[
i
].
mask
 = 
AE_NONE
;

88  
evítLo›
;

90 
îr
:

91 i‡(
evítLo›
) {

92 
	`d‰ì
(
evítLo›
->
evíts
);

93 
	`d‰ì
(
evítLo›
->
fúed
);

94 
	`d‰ì
(
evítLo›
);

96  
NULL
;

97 
	}
}

100 
	$´GëSëSize
(
´EvítLo›
 *
evítLo›
) {

101  
evítLo›
->
£tsize
;

102 
	}
}

111 
	$´ResizeSëSize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

112 
i
;

114 i‡(
£tsize
 =
evítLo›
->£tsizeË 
AE_OK
;

115 i‡(
evítLo›
->
maxfd
 >
£tsize
Ë 
AE_ERR
;

116 i‡(
	`´ApiResize
(
evítLo›
,
£tsize
Ë=-1Ë 
AE_ERR
;

118 
evítLo›
->
evíts
 = 
	`dªÆloc
”vítLo›->evíts,(
´FûeEvít
)*
£tsize
);

119 
evítLo›
->
fúed
 = 
	`dªÆloc
”vítLo›->fúed,(
´FúedEvít
)*
£tsize
);

120 
evítLo›
->
£tsize
 = setsize;

124 
i
 = 
evítLo›
->
maxfd
+1; i < 
£tsize
; i++)

125 
evítLo›
->
evíts
[
i
].
mask
 = 
AE_NONE
;

126  
AE_OK
;

127 
	}
}

129 
	$´DñëeEvítLo›
(
´EvítLo›
 *
evítLo›
) {

130 
	`´ApiFªe
(
evítLo›
);

131 
	`d‰ì
(
evítLo›
->
evíts
);

132 
	`d‰ì
(
evítLo›
->
fúed
);

133 
	`d‰ì
(
evítLo›
);

134 
	}
}

136 
	$´St›
(
´EvítLo›
 *
evítLo›
) {

137 
evítLo›
->
°›
 = 1;

138 
	}
}

140 
	$´Cª©eFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
,

141 
´FûeProc
 *
¥oc
, *
˛õ¡D©a
)

143 i‡(
fd
 >
evítLo›
->
£tsize
) {

144 i‡(
	`´ResizeSëSize
(
evítLo›
,
fd
+1000Ë!
AE_OK
) {

145  
AE_ERR
;

148 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

150 i‡(
	`´ApiAddEvít
(
evítLo›
, 
fd
, 
mask
) == -1)

151  
AE_ERR
;

152 
„
->
mask
 |= mask;

153 i‡(
mask
 & 
AE_READABLE
Ë
„
->
rfûeProc
 = 
¥oc
;

154 i‡(
mask
 & 
AE_WRITABLE
Ë
„
->
wfûeProc
 = 
¥oc
;

155 
„
->
˛õ¡D©a
 = clientData;

156 i‡(
fd
 > 
evítLo›
->
maxfd
)

157 
evítLo›
->
maxfd
 = 
fd
;

158  
AE_OK
;

159 
	}
}

161 
	$´DñëeFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
)

163 i‡(
fd
 >
evítLo›
->
£tsize
) ;

164 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

165 i‡(
„
->
mask
 =
AE_NONE
) ;

167 
	`´ApiDñEvít
(
evítLo›
, 
fd
, 
mask
);

168 
„
->
mask
 = fe->mask & (~mask);

169 i‡(
fd
 =
evítLo›
->
maxfd
 && 
„
->
mask
 =
AE_NONE
) {

171 
j
;

173 
j
 = 
evítLo›
->
maxfd
-1; j >= 0; j--)

174 i‡(
evítLo›
->
evíts
[
j
].
mask
 !
AE_NONE
) ;

175 
evítLo›
->
maxfd
 = 
j
;

177 
	}
}

179 
	$´GëFûeEvíts
(
´EvítLo›
 *
evítLo›
, 
fd
) {

180 i‡(
fd
 >
evítLo›
->
£tsize
)  0;

181 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

183  
„
->
mask
;

184 
	}
}

186 
	$´GëTime
(*
£c⁄ds
, *
mûli£c⁄ds
)

188 
timevÆ
 
tv
;

190 
	`gëtimeofday
(&
tv
, 
NULL
);

191 *
£c⁄ds
 = 
tv
.
tv_£c
;

192 *
mûli£c⁄ds
 = 
tv
.
tv_u£c
/1000;

193 
	}
}

195 
	$´AddMûli£c⁄dsToNow
(
mûli£c⁄ds
, *
£c
, *
ms
) {

196 
cur_£c
, 
cur_ms
, 
whí_£c
, 
whí_ms
;

198 
	`´GëTime
(&
cur_£c
, &
cur_ms
);

199 
whí_£c
 = 
cur_£c
 + 
mûli£c⁄ds
/1000;

200 
whí_ms
 = 
cur_ms
 + 
mûli£c⁄ds
%1000;

201 i‡(
whí_ms
 >= 1000) {

202 
whí_£c
 ++;

203 
whí_ms
 -= 1000;

205 *
£c
 = 
whí_£c
;

206 *
ms
 = 
whí_ms
;

207 
	}
}

209 
	$´Cª©eTimeEvít
(
´EvítLo›
 *
evítLo›
, 
mûli£c⁄ds
,

210 
´TimeProc
 *
¥oc
, *
˛õ¡D©a
,

211 
´EvítFöÆizîProc
 *
föÆizîProc
)

213 
id
 = 
evítLo›
->
timeEvítNextId
++;

214 
´TimeEvít
 *
ã
;

216 
ã
 = 
	`dÆloc
((*te));

217 i‡(
ã
 =
NULL
Ë 
AE_ERR
;

218 
ã
->
id
 = id;

219 
	`´AddMûli£c⁄dsToNow
(
mûli£c⁄ds
,&
ã
->
whí_£c
,&ã->
whí_ms
);

220 
ã
->
timeProc
 = 
¥oc
;

221 
ã
->
föÆizîProc
 = finalizerProc;

222 
ã
->
˛õ¡D©a
 = clientData;

223 
ã
->
√xt
 = 
evítLo›
->
timeEvítHód
;

224 
evítLo›
->
timeEvítHód
 = 
ã
;

225  
id
;

226 
	}
}

228 
	$´DñëeTimeEvít
(
´EvítLo›
 *
evítLo›
, 
id
)

230 
´TimeEvít
 *
ã
 = 
evítLo›
->
timeEvítHód
;

231 
ã
) {

232 i‡(
ã
->
id
 == id) {

233 
ã
->
id
 = 
AE_DELETED_EVENT_ID
;

234  
AE_OK
;

236 
ã
 =Åe->
√xt
;

238  
AE_ERR
;

239 
	}
}

252 
´TimeEvít
 *
	$´SórchNóª°Timî
(
´EvítLo›
 *
evítLo›
)

254 
´TimeEvít
 *
ã
 = 
evítLo›
->
timeEvítHód
;

255 
´TimeEvít
 *
√¨e°
 = 
NULL
;

257 
ã
) {

258 i‡(!
√¨e°
 || 
ã
->
whí_£c
 <Çearest->when_sec ||

259 (
ã
->
whí_£c
 =
√¨e°
->when_sec &&

260 
ã
->
whí_ms
 < 
√¨e°
->when_ms))

261 
√¨e°
 = 
ã
;

262 
ã
 =Åe->
√xt
;

264  
√¨e°
;

265 
	}
}

268 
	$¥o˚ssTimeEvíts
(
´EvítLo›
 *
evítLo›
) {

269 
¥o˚s£d
 = 0;

270 
´TimeEvít
 *
ã
, *
¥ev
;

271 
maxId
;

272 
time_t
 
now
 = 
	`time
(
NULL
);

282 i‡(
now
 < 
evítLo›
->
œ°Time
) {

283 
ã
 = 
evítLo›
->
timeEvítHód
;

284 
ã
) {

285 
ã
->
whí_£c
 = 0;

286 
ã
 =Åe->
√xt
;

289 
evítLo›
->
œ°Time
 = 
now
;

291 
¥ev
 = 
NULL
;

292 
ã
 = 
evítLo›
->
timeEvítHód
;

293 
maxId
 = 
evítLo›
->
timeEvítNextId
-1;

294 
ã
) {

295 
now_£c
, 
now_ms
;

296 
id
;

299 i‡(
ã
->
id
 =
AE_DELETED_EVENT_ID
) {

300 
´TimeEvít
 *
√xt
 = 
ã
->next;

301 i‡(
¥ev
 =
NULL
)

302 
evítLo›
->
timeEvítHód
 = 
ã
->
√xt
;

304 
¥ev
->
√xt
 = 
ã
->next;

305 i‡(
ã
->
föÆizîProc
)

306 
ã
->
	`föÆizîProc
(
evítLo›
,Åe->
˛õ¡D©a
);

307 
	`d‰ì
(
ã
);

308 
ã
 = 
√xt
;

317 i‡(
ã
->
id
 > 
maxId
) {

318 
ã
 =Åe->
√xt
;

321 
	`´GëTime
(&
now_£c
, &
now_ms
);

322 i‡(
now_£c
 > 
ã
->
whí_£c
 ||

323 (
now_£c
 =
ã
->
whí_£c
 && 
now_ms
 >ã->
whí_ms
))

325 
ªtvÆ
;

327 
id
 = 
ã
->id;

328 
ªtvÆ
 = 
ã
->
	`timeProc
(
evítLo›
, 
id
,Åe->
˛õ¡D©a
);

329 
¥o˚s£d
++;

330 i‡(
ªtvÆ
 !
AE_NOMORE
) {

331 
	`´AddMûli£c⁄dsToNow
(
ªtvÆ
,&
ã
->
whí_£c
,&ã->
whí_ms
);

333 
ã
->
id
 = 
AE_DELETED_EVENT_ID
;

336 
¥ev
 = 
ã
;

337 
ã
 =Åe->
√xt
;

339  
¥o˚s£d
;

340 
	}
}

355 
	$´Pro˚ssEvíts
(
´EvítLo›
 *
evítLo›
, 
Êags
)

357 
¥o˚s£d
 = 0, 
numevíts
;

360 i‡(!(
Êags
 & 
AE_TIME_EVENTS
Ë&& !(Êag†& 
AE_FILE_EVENTS
))  0;

366 i‡(
evítLo›
->
maxfd
 != -1 ||

367 ((
Êags
 & 
AE_TIME_EVENTS
Ë&& !(Êag†& 
AE_DONT_WAIT
))) {

368 
j
;

369 
´TimeEvít
 *
sh‹ã°
 = 
NULL
;

370 
timevÆ
 
tv
, *
tvp
;

372 i‡(
Êags
 & 
AE_TIME_EVENTS
 && !(Êag†& 
AE_DONT_WAIT
))

373 
sh‹ã°
 = 
	`´SórchNóª°Timî
(
evítLo›
);

374 i‡(
sh‹ã°
) {

375 
now_£c
, 
now_ms
;

377 
	`´GëTime
(&
now_£c
, &
now_ms
);

378 
tvp
 = &
tv
;

382 
ms
 =

383 (
sh‹ã°
->
whí_£c
 - 
now_£c
)*1000 +

384 
sh‹ã°
->
whí_ms
 - 
now_ms
;

386 i‡(
ms
 > 0) {

387 
tvp
->
tv_£c
 = 
ms
/1000;

388 
tvp
->
tv_u£c
 = (
ms
 % 1000)*1000;

390 
tvp
->
tv_£c
 = 0;

391 
tvp
->
tv_u£c
 = 0;

397 i‡(
Êags
 & 
AE_DONT_WAIT
) {

398 
tv
.
tv_£c
 =Åv.
tv_u£c
 = 0;

399 
tvp
 = &
tv
;

402 
tvp
 = 
NULL
;

406 
numevíts
 = 
	`´ApiPﬁl
(
evítLo›
, 
tvp
);

407 
j
 = 0; j < 
numevíts
; j++) {

408 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[evítLo›->
fúed
[
j
].
fd
];

409 
mask
 = 
evítLo›
->
fúed
[
j
].mask;

410 
fd
 = 
evítLo›
->
fúed
[
j
].fd;

411 
rfúed
 = 0;

416 i‡(
„
->
mask
 & mask & 
AE_READABLE
) {

417 
rfúed
 = 1;

418 
„
->
	`rfûeProc
(
evítLo›
,
fd
,„->
˛õ¡D©a
,
mask
);

420 i‡(
„
->
mask
 & mask & 
AE_WRITABLE
) {

421 i‡(!
rfúed
 || 
„
->
wfûeProc
 !„->
rfûeProc
)

422 
„
->
	`wfûeProc
(
evítLo›
,
fd
,„->
˛õ¡D©a
,
mask
);

424 
¥o˚s£d
++;

428 i‡(
Êags
 & 
AE_TIME_EVENTS
)

429 
¥o˚s£d
 +
	`¥o˚ssTimeEvíts
(
evítLo›
);

431  
¥o˚s£d
;

432 
	}
}

436 
	$´Waô
(
fd
, 
mask
, 
mûli£c⁄ds
) {

437 
pﬁlfd
 
pfd
;

438 
ªtmask
 = 0, 
ªtvÆ
;

440 
	`mem£t
(&
pfd
, 0, (pfd));

441 
pfd
.
fd
 = fd;

442 i‡(
mask
 & 
AE_READABLE
Ë
pfd
.
evíts
 |
POLLIN
;

443 i‡(
mask
 & 
AE_WRITABLE
Ë
pfd
.
evíts
 |
POLLOUT
;

445 i‡((
ªtvÆ
 = 
	`pﬁl
(&
pfd
, 1, 
mûli£c⁄ds
))== 1) {

446 i‡(
pfd
.
ªvíts
 & 
POLLIN
Ë
ªtmask
 |
AE_READABLE
;

447 i‡(
pfd
.
ªvíts
 & 
POLLOUT
Ë
ªtmask
 |
AE_WRITABLE
;

448 i‡(
pfd
.
ªvíts
 & 
POLLERR
Ë
ªtmask
 |
AE_WRITABLE
;

449 i‡(
pfd
.
ªvíts
 & 
POLLHUP
Ë
ªtmask
 |
AE_WRITABLE
;

450  
ªtmask
;

452  
ªtvÆ
;

454 
	}
}

456 
	$´Maö
(
´EvítLo›
 *
evítLo›
) {

457 
evítLo›
->
°›
 = 0;

458 !
evítLo›
->
°›
) {

459 i‡(
evítLo›
->
bef‹e¶ìp
 !
NULL
)

460 
evítLo›
->
	`bef‹e¶ìp
”vítLo›,ÉvítLo›->
bsd©a
);

461 
	`´Pro˚ssEvíts
(
evítLo›
, 
AE_ALL_EVENTS
);

463 
	}
}

465 *
	$´GëApiName
() {

466  
	`´ApiName
();

467 
	}
}

469 
	$´SëBef‹eSÀïProc
(
´EvítLo›
 *
evítLo›
, 
´Bef‹eSÀïProc
 *
bef‹e¶ìp
, *
¥iv©e_d©a
) {

470 
evítLo›
->
bef‹e¶ìp
 = beforesleep;

471 
evítLo›
->
bsd©a
 = 
¥iv©e_d©a
;

472 
	}
}

	@dep/ae/ae.h

33 #i‚de‡
__AE_H__


34 
	#__AE_H__


	)

36 
	~<time.h
>

38 
	#AE_OK
 0

	)

39 
	#AE_ERR
 -1

	)

41 
	#AE_NONE
 0

	)

42 
	#AE_READABLE
 1

	)

43 
	#AE_WRITABLE
 2

	)

45 
	#AE_FILE_EVENTS
 1

	)

46 
	#AE_TIME_EVENTS
 2

	)

47 
	#AE_ALL_EVENTS
 (
AE_FILE_EVENTS
|
AE_TIME_EVENTS
)

	)

48 
	#AE_DONT_WAIT
 4

	)

50 
	#AE_NOMORE
 -1

	)

51 
	#AE_DELETED_EVENT_ID
 -1

	)

54 
	#AE_NOTUSED
(
V
Ë((ËV)

	)

56 
	g´EvítLo›
;

59 
	t´FûeProc
(
	t´EvítLo›
 *
	tevítLo›
, 
	tfd
, *
	t˛õ¡D©a
, 
	tmask
);

60 
	t´TimeProc
(
	t´EvítLo›
 *
	tevítLo›
, 
	tid
, *
	t˛õ¡D©a
);

61 
	t´EvítFöÆizîProc
(
	t´EvítLo›
 *
	tevítLo›
, *
	t˛õ¡D©a
);

62 
	t´Bef‹eSÀïProc
(
	t´EvítLo›
 *
	tevítLo›
, *
	t¥iv©e_d©a
);

65 
	s´FûeEvít
 {

66 
	mmask
;

67 
´FûeProc
 *
	mrfûeProc
;

68 
´FûeProc
 *
	mwfûeProc
;

69 *
	m˛õ¡D©a
;

70 } 
	t´FûeEvít
;

73 
	s´TimeEvít
 {

74 
	mid
;

75 
	mwhí_£c
;

76 
	mwhí_ms
;

77 
´TimeProc
 *
	mtimeProc
;

78 
´EvítFöÆizîProc
 *
	mföÆizîProc
;

79 *
	m˛õ¡D©a
;

80 
´TimeEvít
 *
	m√xt
;

81 } 
	t´TimeEvít
;

84 
	s´FúedEvít
 {

85 
	mfd
;

86 
	mmask
;

87 } 
	t´FúedEvít
;

90 
	s´EvítLo›
 {

91 
	mmaxfd
;

92 
	m£tsize
;

93 
	mtimeEvítNextId
;

94 
time_t
 
	mœ°Time
;

95 
´FûeEvít
 *
	mevíts
;

96 
´FúedEvít
 *
	mfúed
;

97 
´TimeEvít
 *
	mtimeEvítHód
;

98 
	m°›
;

99 *
	m≠id©a
;

100 
´Bef‹eSÀïProc
 *
	mbef‹e¶ìp
;

101 *
	mbsd©a
;

102 } 
	t´EvítLo›
;

107 
´EvítLo›
 *
´Cª©eEvítLo›
(
£tsize
);

108 
´DñëeEvítLo›
(
´EvítLo›
 *
evítLo›
);

109 
´St›
(
´EvítLo›
 *
evítLo›
);

110 
´Cª©eFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
,

111 
´FûeProc
 *
¥oc
, *
˛õ¡D©a
);

112 
´DñëeFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
);

113 
´GëFûeEvíts
(
´EvítLo›
 *
evítLo›
, 
fd
);

114 
´Cª©eTimeEvít
(
´EvítLo›
 *
evítLo›
, 
mûli£c⁄ds
,

115 
´TimeProc
 *
¥oc
, *
˛õ¡D©a
,

116 
´EvítFöÆizîProc
 *
föÆizîProc
);

117 
´DñëeTimeEvít
(
´EvítLo›
 *
evítLo›
, 
id
);

118 
´Pro˚ssEvíts
(
´EvítLo›
 *
evítLo›
, 
Êags
);

119 
´Waô
(
fd
, 
mask
, 
mûli£c⁄ds
);

120 
´Maö
(
´EvítLo›
 *
evítLo›
);

121 *
´GëApiName
();

122 
´SëBef‹eSÀïProc
(
´EvítLo›
 *
evítLo›
, 
´Bef‹eSÀïProc
 *
bef‹e¶ìp
, *
¥iv©e_d©a
);

123 
´GëSëSize
(
´EvítLo›
 *
evítLo›
);

124 
´ResizeSëSize
(
´EvítLo›
 *
evítLo›
, 
£tsize
);

	@dep/ae/ae.h

33 #i‚de‡
__AE_H__


34 
	#__AE_H__


	)

36 
	~<time.h
>

38 
	#AE_OK
 0

	)

39 
	#AE_ERR
 -1

	)

41 
	#AE_NONE
 0

	)

42 
	#AE_READABLE
 1

	)

43 
	#AE_WRITABLE
 2

	)

45 
	#AE_FILE_EVENTS
 1

	)

46 
	#AE_TIME_EVENTS
 2

	)

47 
	#AE_ALL_EVENTS
 (
AE_FILE_EVENTS
|
AE_TIME_EVENTS
)

	)

48 
	#AE_DONT_WAIT
 4

	)

50 
	#AE_NOMORE
 -1

	)

51 
	#AE_DELETED_EVENT_ID
 -1

	)

54 
	#AE_NOTUSED
(
V
Ë((ËV)

	)

56 
	g´EvítLo›
;

59 
	t´FûeProc
(
	t´EvítLo›
 *
	tevítLo›
, 
	tfd
, *
	t˛õ¡D©a
, 
	tmask
);

60 
	t´TimeProc
(
	t´EvítLo›
 *
	tevítLo›
, 
	tid
, *
	t˛õ¡D©a
);

61 
	t´EvítFöÆizîProc
(
	t´EvítLo›
 *
	tevítLo›
, *
	t˛õ¡D©a
);

62 
	t´Bef‹eSÀïProc
(
	t´EvítLo›
 *
	tevítLo›
, *
	t¥iv©e_d©a
);

65 
	s´FûeEvít
 {

66 
	mmask
;

67 
´FûeProc
 *
	mrfûeProc
;

68 
´FûeProc
 *
	mwfûeProc
;

69 *
	m˛õ¡D©a
;

70 } 
	t´FûeEvít
;

73 
	s´TimeEvít
 {

74 
	mid
;

75 
	mwhí_£c
;

76 
	mwhí_ms
;

77 
´TimeProc
 *
	mtimeProc
;

78 
´EvítFöÆizîProc
 *
	mföÆizîProc
;

79 *
	m˛õ¡D©a
;

80 
´TimeEvít
 *
	m√xt
;

81 } 
	t´TimeEvít
;

84 
	s´FúedEvít
 {

85 
	mfd
;

86 
	mmask
;

87 } 
	t´FúedEvít
;

90 
	s´EvítLo›
 {

91 
	mmaxfd
;

92 
	m£tsize
;

93 
	mtimeEvítNextId
;

94 
time_t
 
	mœ°Time
;

95 
´FûeEvít
 *
	mevíts
;

96 
´FúedEvít
 *
	mfúed
;

97 
´TimeEvít
 *
	mtimeEvítHód
;

98 
	m°›
;

99 *
	m≠id©a
;

100 
´Bef‹eSÀïProc
 *
	mbef‹e¶ìp
;

101 *
	mbsd©a
;

102 } 
	t´EvítLo›
;

107 
´EvítLo›
 *
´Cª©eEvítLo›
(
£tsize
);

108 
´DñëeEvítLo›
(
´EvítLo›
 *
evítLo›
);

109 
´St›
(
´EvítLo›
 *
evítLo›
);

110 
´Cª©eFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
,

111 
´FûeProc
 *
¥oc
, *
˛õ¡D©a
);

112 
´DñëeFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
);

113 
´GëFûeEvíts
(
´EvítLo›
 *
evítLo›
, 
fd
);

114 
´Cª©eTimeEvít
(
´EvítLo›
 *
evítLo›
, 
mûli£c⁄ds
,

115 
´TimeProc
 *
¥oc
, *
˛õ¡D©a
,

116 
´EvítFöÆizîProc
 *
föÆizîProc
);

117 
´DñëeTimeEvít
(
´EvítLo›
 *
evítLo›
, 
id
);

118 
´Pro˚ssEvíts
(
´EvítLo›
 *
evítLo›
, 
Êags
);

119 
´Waô
(
fd
, 
mask
, 
mûli£c⁄ds
);

120 
´Maö
(
´EvítLo›
 *
evítLo›
);

121 *
´GëApiName
();

122 
´SëBef‹eSÀïProc
(
´EvítLo›
 *
evítLo›
, 
´Bef‹eSÀïProc
 *
bef‹e¶ìp
, *
¥iv©e_d©a
);

123 
´GëSëSize
(
´EvítLo›
 *
evítLo›
);

124 
´ResizeSëSize
(
´EvítLo›
 *
evítLo›
, 
£tsize
);

	@dep/ae/ae_epoll.c

32 
	~<sys/ïﬁl.h
>

34 
	s´ApiSèã
 {

35 
	mïfd
;

36 
ïﬁl_evít
 *
	mevíts
;

37 } 
	t´ApiSèã
;

39 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

40 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

42 i‡(!
°©e
)  -1;

43 
°©e
->
evíts
 = 
	`dÆloc
((
ïﬁl_evít
)*
evítLo›
->
£tsize
);

44 i‡(!
°©e
->
evíts
) {

45 
	`d‰ì
(
°©e
);

48 
°©e
->
ïfd
 = 
	`ïﬁl_¸óã
(1024);

49 i‡(
°©e
->
ïfd
 == -1) {

50 
	`d‰ì
(
°©e
->
evíts
);

51 
	`d‰ì
(
°©e
);

54 
evítLo›
->
≠id©a
 = 
°©e
;

56 
	}
}

58 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

59 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

61 
°©e
->
evíts
 = 
	`dªÆloc
(°©e->evíts, (
ïﬁl_evít
)*
£tsize
);

63 
	}
}

65 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

66 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

68 
	`˛o£
(
°©e
->
ïfd
);

69 
	`d‰ì
(
°©e
->
evíts
);

70 
	`d‰ì
(
°©e
);

71 
	}
}

73 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

74 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

75 
ïﬁl_evít
 
ì
 = {0};

78 
›
 = 
evítLo›
->
evíts
[
fd
].
mask
 =
AE_NONE
 ?

79 
EPOLL_CTL_ADD
 : 
EPOLL_CTL_MOD
;

81 
ì
.
evíts
 = 0;

82 
mask
 |
evítLo›
->
evíts
[
fd
].mask;

83 i‡(
mask
 & 
AE_READABLE
Ë
ì
.
evíts
 |
EPOLLIN
;

84 i‡(
mask
 & 
AE_WRITABLE
Ë
ì
.
evíts
 |
EPOLLOUT
;

85 
ì
.
d©a
.
fd
 = fd;

86 i‡(
	`ïﬁl_˘l
(
°©e
->
ïfd
,
›
,
fd
,&
ì
) == -1)  -1;

88 
	}
}

90 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
dñmask
) {

91 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

92 
ïﬁl_evít
 
ì
 = {0};

93 
mask
 = 
evítLo›
->
evíts
[
fd
].mask & (~
dñmask
);

95 
ì
.
evíts
 = 0;

96 i‡(
mask
 & 
AE_READABLE
Ë
ì
.
evíts
 |
EPOLLIN
;

97 i‡(
mask
 & 
AE_WRITABLE
Ë
ì
.
evíts
 |
EPOLLOUT
;

98 
ì
.
d©a
.
fd
 = fd;

99 i‡(
mask
 !
AE_NONE
) {

100 
	`ïﬁl_˘l
(
°©e
->
ïfd
,
EPOLL_CTL_MOD
,
fd
,&
ì
);

104 
	`ïﬁl_˘l
(
°©e
->
ïfd
,
EPOLL_CTL_DEL
,
fd
,&
ì
);

106 
	}
}

108 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

109 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

110 
ªtvÆ
, 
numevíts
 = 0;

112 
ªtvÆ
 = 
	`ïﬁl_waô
(
°©e
->
ïfd
,°©e->
evíts
,
evítLo›
->
£tsize
,

113 
tvp
 ? (tvp->
tv_£c
*1000 +Åvp->
tv_u£c
/1000) : -1);

114 i‡(
ªtvÆ
 > 0) {

115 
j
;

117 
numevíts
 = 
ªtvÆ
;

118 
j
 = 0; j < 
numevíts
; j++) {

119 
mask
 = 0;

120 
ïﬁl_evít
 *
e
 = 
°©e
->
evíts
+
j
;

122 i‡(
e
->
evíts
 & 
EPOLLIN
Ë
mask
 |
AE_READABLE
;

123 i‡(
e
->
evíts
 & 
EPOLLOUT
Ë
mask
 |
AE_WRITABLE
;

124 i‡(
e
->
evíts
 & 
EPOLLERR
Ë
mask
 |
AE_WRITABLE
;

125 i‡(
e
->
evíts
 & 
EPOLLHUP
Ë
mask
 |
AE_WRITABLE
;

126 
evítLo›
->
fúed
[
j
].
fd
 = 
e
->
d©a
.fd;

127 
evítLo›
->
fúed
[
j
].
mask
 = mask;

130  
numevíts
;

131 
	}
}

133 *
	$´ApiName
() {

135 
	}
}

	@dep/ae/ae_epoll.c

32 
	~<sys/ïﬁl.h
>

34 
	s´ApiSèã
 {

35 
	mïfd
;

36 
ïﬁl_evít
 *
	mevíts
;

37 } 
	t´ApiSèã
;

39 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

40 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

42 i‡(!
°©e
)  -1;

43 
°©e
->
evíts
 = 
	`dÆloc
((
ïﬁl_evít
)*
evítLo›
->
£tsize
);

44 i‡(!
°©e
->
evíts
) {

45 
	`d‰ì
(
°©e
);

48 
°©e
->
ïfd
 = 
	`ïﬁl_¸óã
(1024);

49 i‡(
°©e
->
ïfd
 == -1) {

50 
	`d‰ì
(
°©e
->
evíts
);

51 
	`d‰ì
(
°©e
);

54 
evítLo›
->
≠id©a
 = 
°©e
;

56 
	}
}

58 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

59 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

61 
°©e
->
evíts
 = 
	`dªÆloc
(°©e->evíts, (
ïﬁl_evít
)*
£tsize
);

63 
	}
}

65 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

66 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

68 
	`˛o£
(
°©e
->
ïfd
);

69 
	`d‰ì
(
°©e
->
evíts
);

70 
	`d‰ì
(
°©e
);

71 
	}
}

73 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

74 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

75 
ïﬁl_evít
 
ì
 = {0};

78 
›
 = 
evítLo›
->
evíts
[
fd
].
mask
 =
AE_NONE
 ?

79 
EPOLL_CTL_ADD
 : 
EPOLL_CTL_MOD
;

81 
ì
.
evíts
 = 0;

82 
mask
 |
evítLo›
->
evíts
[
fd
].mask;

83 i‡(
mask
 & 
AE_READABLE
Ë
ì
.
evíts
 |
EPOLLIN
;

84 i‡(
mask
 & 
AE_WRITABLE
Ë
ì
.
evíts
 |
EPOLLOUT
;

85 
ì
.
d©a
.
fd
 = fd;

86 i‡(
	`ïﬁl_˘l
(
°©e
->
ïfd
,
›
,
fd
,&
ì
) == -1)  -1;

88 
	}
}

90 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
dñmask
) {

91 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

92 
ïﬁl_evít
 
ì
 = {0};

93 
mask
 = 
evítLo›
->
evíts
[
fd
].mask & (~
dñmask
);

95 
ì
.
evíts
 = 0;

96 i‡(
mask
 & 
AE_READABLE
Ë
ì
.
evíts
 |
EPOLLIN
;

97 i‡(
mask
 & 
AE_WRITABLE
Ë
ì
.
evíts
 |
EPOLLOUT
;

98 
ì
.
d©a
.
fd
 = fd;

99 i‡(
mask
 !
AE_NONE
) {

100 
	`ïﬁl_˘l
(
°©e
->
ïfd
,
EPOLL_CTL_MOD
,
fd
,&
ì
);

104 
	`ïﬁl_˘l
(
°©e
->
ïfd
,
EPOLL_CTL_DEL
,
fd
,&
ì
);

106 
	}
}

108 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

109 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

110 
ªtvÆ
, 
numevíts
 = 0;

112 
ªtvÆ
 = 
	`ïﬁl_waô
(
°©e
->
ïfd
,°©e->
evíts
,
evítLo›
->
£tsize
,

113 
tvp
 ? (tvp->
tv_£c
*1000 +Åvp->
tv_u£c
/1000) : -1);

114 i‡(
ªtvÆ
 > 0) {

115 
j
;

117 
numevíts
 = 
ªtvÆ
;

118 
j
 = 0; j < 
numevíts
; j++) {

119 
mask
 = 0;

120 
ïﬁl_evít
 *
e
 = 
°©e
->
evíts
+
j
;

122 i‡(
e
->
evíts
 & 
EPOLLIN
Ë
mask
 |
AE_READABLE
;

123 i‡(
e
->
evíts
 & 
EPOLLOUT
Ë
mask
 |
AE_WRITABLE
;

124 i‡(
e
->
evíts
 & 
EPOLLERR
Ë
mask
 |
AE_WRITABLE
;

125 i‡(
e
->
evíts
 & 
EPOLLHUP
Ë
mask
 |
AE_WRITABLE
;

126 
evítLo›
->
fúed
[
j
].
fd
 = 
e
->
d©a
.fd;

127 
evítLo›
->
fúed
[
j
].
mask
 = mask;

130  
numevíts
;

131 
	}
}

133 *
	$´ApiName
() {

135 
	}
}

	@dep/ae/ae_evport.c

31 
	~<as£π.h
>

32 
	~<î∫o.h
>

33 
	~<p‹t.h
>

34 
	~<pﬁl.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/time.h
>

39 
	~<°dio.h
>

41 
	gevp‹t_debug
 = 0;

66 
	#MAX_EVENT_BATCHSZ
 512

	)

68 
	s´ApiSèã
 {

69 
	mp‹tfd
;

70 
	m≈ídög
;

71 
	m≥ndög_fds
[
MAX_EVENT_BATCHSZ
];

72 
	m≥ndög_masks
[
MAX_EVENT_BATCHSZ
];

73 } 
	t´ApiSèã
;

75 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

76 
i
;

77 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

78 i‡(!
°©e
)  -1;

80 
°©e
->
p‹tfd
 = 
	`p‹t_¸óã
();

81 i‡(
°©e
->
p‹tfd
 == -1) {

82 
	`d‰ì
(
°©e
);

86 
°©e
->
≈ídög
 = 0;

88 
i
 = 0; i < 
MAX_EVENT_BATCHSZ
; i++) {

89 
°©e
->
≥ndög_fds
[
i
] = -1;

90 
°©e
->
≥ndög_masks
[
i
] = 
AE_NONE
;

93 
evítLo›
->
≠id©a
 = 
°©e
;

95 
	}
}

97 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

100 
	}
}

102 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

103 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

105 
	`˛o£
(
°©e
->
p‹tfd
);

106 
	`d‰ì
(
°©e
);

107 
	}
}

109 
	$´ApiLookupPídög
(
´ApiSèã
 *
°©e
, 
fd
) {

110 
i
;

112 
i
 = 0; i < 
°©e
->
≈ídög
; i++) {

113 i‡(
°©e
->
≥ndög_fds
[
i
] =
fd
)

114  (
i
);

118 
	}
}

123 
	$´ApiAssocüã
(c⁄° *
whîe
, 
p‹tfd
, 
fd
, 
mask
) {

124 
evíts
 = 0;

125 
rv
, 
îr
;

127 i‡(
mask
 & 
AE_READABLE
)

128 
evíts
 |
POLLIN
;

129 i‡(
mask
 & 
AE_WRITABLE
)

130 
evíts
 |
POLLOUT
;

132 i‡(
evp‹t_debug
)

133 
	`Ârötf
(
°dîr
, "%s:Ö‹t_assocüã(%d, 0x%xË", 
whîe
, 
fd
, 
evíts
);

135 
rv
 = 
	`p‹t_assocüã
(
p‹tfd
, 
PORT_SOURCE_FD
, 
fd
, 
evíts
,

136 (*)(
uöçå_t
)
mask
);

137 
îr
 = 
î∫o
;

139 i‡(
evp‹t_debug
)

140 
	`Ârötf
(
°dîr
, "%d (%s)\n", 
rv
,Ñv =0 ? "nÿîr‹" : 
	`°ªº‹
(
îr
));

142 i‡(
rv
 == -1) {

143 
	`Ârötf
(
°dîr
, "%s:Ö‹t_assocüã: %s\n", 
whîe
, 
	`°ªº‹
(
îr
));

145 i‡(
îr
 =
EAGAIN
)

146 
	`Ârötf
(
°dîr
, "aeApiAssociate:ÉventÖortÜimitÉxceeded.");

149  
rv
;

150 
	}
}

152 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

153 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

154 
fuŒmask
, 
pfd
;

156 i‡(
evp‹t_debug
)

157 
	`Ârötf
(
°dîr
, "´ApiAddEvít: fd %d mask 0x%x\n", 
fd
, 
mask
);

164 
fuŒmask
 = 
mask
 | 
evítLo›
->
evíts
[
fd
].mask;

165 
pfd
 = 
	`´ApiLookupPídög
(
°©e
, 
fd
);

167 i‡(
pfd
 != -1) {

174 i‡(
evp‹t_debug
)

175 
	`Ârötf
(
°dîr
, "´ApiAddEvít:áddögÅÿ≥ndög fd %d\n", 
fd
);

176 
°©e
->
≥ndög_masks
[
pfd
] |
fuŒmask
;

180  (
	`´ApiAssocüã
("´ApiAddEvít", 
°©e
->
p‹tfd
, 
fd
, 
fuŒmask
));

181 
	}
}

183 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

184 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

185 
fuŒmask
, 
pfd
;

187 i‡(
evp‹t_debug
)

188 
	`Ârötf
(
°dîr
, "dñ fd %d mask 0x%x\n", 
fd
, 
mask
);

190 
pfd
 = 
	`´ApiLookupPídög
(
°©e
, 
fd
);

192 i‡(
pfd
 != -1) {

193 i‡(
evp‹t_debug
)

194 
	`Ârötf
(
°dîr
, "dñëögÉvíà‰omÖídög fd %d\n", 
fd
);

201 
°©e
->
≥ndög_masks
[
pfd
] &~
mask
;

203 i‡(
°©e
->
≥ndög_masks
[
pfd
] =
AE_NONE
)

204 
°©e
->
≥ndög_fds
[
pfd
] = -1;

217 
fuŒmask
 = 
evítLo›
->
evíts
[
fd
].
mask
;

218 i‡(
fuŒmask
 =
AE_NONE
) {

223 i‡(
evp‹t_debug
)

224 
	`Ârötf
(
°dîr
, "´ApiDñEvít:Ö‹t_dissocüã(%d)\n", 
fd
);

226 i‡(
	`p‹t_dissocüã
(
°©e
->
p‹tfd
, 
PORT_SOURCE_FD
, 
fd
) != 0) {

227 
	`≥º‹
("aeApiDelEvent:Öort_dissociate");

228 
	`ab‹t
();

230 } i‡(
	`´ApiAssocüã
("´ApiDñEvít", 
°©e
->
p‹tfd
, 
fd
,

231 
fuŒmask
) != 0) {

239 
	`ab‹t
();

241 
	}
}

243 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

244 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

245 
time•ec
 
timeout
, *
t•
;

246 
mask
, 
i
;

247 
uöt_t
 
√víts
;

248 
p‹t_evít_t
 
evít
[
MAX_EVENT_BATCHSZ
];

255 
i
 = 0; i < 
°©e
->
≈ídög
; i++) {

256 i‡(
°©e
->
≥ndög_fds
[
i
] == -1)

260 i‡(
	`´ApiAssocüã
("´ApiPﬁl", 
°©e
->
p‹tfd
,

261 
°©e
->
≥ndög_fds
[
i
], sèã->
≥ndög_masks
[i]) != 0) {

263 
	`ab‹t
();

266 
°©e
->
≥ndög_masks
[
i
] = 
AE_NONE
;

267 
°©e
->
≥ndög_fds
[
i
] = -1;

270 
°©e
->
≈ídög
 = 0;

272 i‡(
tvp
 !
NULL
) {

273 
timeout
.
tv_£c
 = 
tvp
->tv_sec;

274 
timeout
.
tv_n£c
 = 
tvp
->
tv_u£c
 * 1000;

275 
t•
 = &
timeout
;

277 
t•
 = 
NULL
;

284 
√víts
 = 1;

285 i‡(
	`p‹t_gën
(
°©e
->
p‹tfd
, 
evít
, 
MAX_EVENT_BATCHSZ
, &
√víts
,

286 
t•
Ë=-1 && (
î∫o
 !
ETIME
 || 
√víts
 == 0)) {

287 i‡(
î∫o
 =
ETIME
 ||Éºnÿ=
EINTR
)

291 
	`≥º‹
("aeApiPoll:Öort_get");

292 
	`ab‹t
();

295 
°©e
->
≈ídög
 = 
√víts
;

297 
i
 = 0; i < 
√víts
; i++) {

298 
mask
 = 0;

299 i‡(
evít
[
i
].
p‹ãv_evíts
 & 
POLLIN
)

300 
mask
 |
AE_READABLE
;

301 i‡(
evít
[
i
].
p‹ãv_evíts
 & 
POLLOUT
)

302 
mask
 |
AE_WRITABLE
;

304 
evítLo›
->
fúed
[
i
].
fd
 = 
evít
[i].
p‹ãv_obje˘
;

305 
evítLo›
->
fúed
[
i
].
mask
 = mask;

307 i‡(
evp‹t_debug
)

308 
	`Ârötf
(
°dîr
, "aeApiPoll: fd %d mask 0x%x\n",

309 ()
evít
[
i
].
p‹ãv_obje˘
, 
mask
);

311 
°©e
->
≥ndög_fds
[
i
] = 
evít
[i].
p‹ãv_obje˘
;

312 
°©e
->
≥ndög_masks
[
i
] = (
uöçå_t
)
evít
[i].
p‹ãv_u£r
;

315  
√víts
;

316 
	}
}

318 *
	$´ApiName
() {

320 
	}
}

	@dep/ae/ae_evport.c

31 
	~<as£π.h
>

32 
	~<î∫o.h
>

33 
	~<p‹t.h
>

34 
	~<pﬁl.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/time.h
>

39 
	~<°dio.h
>

41 
	gevp‹t_debug
 = 0;

66 
	#MAX_EVENT_BATCHSZ
 512

	)

68 
	s´ApiSèã
 {

69 
	mp‹tfd
;

70 
	m≈ídög
;

71 
	m≥ndög_fds
[
MAX_EVENT_BATCHSZ
];

72 
	m≥ndög_masks
[
MAX_EVENT_BATCHSZ
];

73 } 
	t´ApiSèã
;

75 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

76 
i
;

77 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

78 i‡(!
°©e
)  -1;

80 
°©e
->
p‹tfd
 = 
	`p‹t_¸óã
();

81 i‡(
°©e
->
p‹tfd
 == -1) {

82 
	`d‰ì
(
°©e
);

86 
°©e
->
≈ídög
 = 0;

88 
i
 = 0; i < 
MAX_EVENT_BATCHSZ
; i++) {

89 
°©e
->
≥ndög_fds
[
i
] = -1;

90 
°©e
->
≥ndög_masks
[
i
] = 
AE_NONE
;

93 
evítLo›
->
≠id©a
 = 
°©e
;

95 
	}
}

97 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

100 
	}
}

102 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

103 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

105 
	`˛o£
(
°©e
->
p‹tfd
);

106 
	`d‰ì
(
°©e
);

107 
	}
}

109 
	$´ApiLookupPídög
(
´ApiSèã
 *
°©e
, 
fd
) {

110 
i
;

112 
i
 = 0; i < 
°©e
->
≈ídög
; i++) {

113 i‡(
°©e
->
≥ndög_fds
[
i
] =
fd
)

114  (
i
);

118 
	}
}

123 
	$´ApiAssocüã
(c⁄° *
whîe
, 
p‹tfd
, 
fd
, 
mask
) {

124 
evíts
 = 0;

125 
rv
, 
îr
;

127 i‡(
mask
 & 
AE_READABLE
)

128 
evíts
 |
POLLIN
;

129 i‡(
mask
 & 
AE_WRITABLE
)

130 
evíts
 |
POLLOUT
;

132 i‡(
evp‹t_debug
)

133 
	`Ârötf
(
°dîr
, "%s:Ö‹t_assocüã(%d, 0x%xË", 
whîe
, 
fd
, 
evíts
);

135 
rv
 = 
	`p‹t_assocüã
(
p‹tfd
, 
PORT_SOURCE_FD
, 
fd
, 
evíts
,

136 (*)(
uöçå_t
)
mask
);

137 
îr
 = 
î∫o
;

139 i‡(
evp‹t_debug
)

140 
	`Ârötf
(
°dîr
, "%d (%s)\n", 
rv
,Ñv =0 ? "nÿîr‹" : 
	`°ªº‹
(
îr
));

142 i‡(
rv
 == -1) {

143 
	`Ârötf
(
°dîr
, "%s:Ö‹t_assocüã: %s\n", 
whîe
, 
	`°ªº‹
(
îr
));

145 i‡(
îr
 =
EAGAIN
)

146 
	`Ârötf
(
°dîr
, "aeApiAssociate:ÉventÖortÜimitÉxceeded.");

149  
rv
;

150 
	}
}

152 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

153 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

154 
fuŒmask
, 
pfd
;

156 i‡(
evp‹t_debug
)

157 
	`Ârötf
(
°dîr
, "´ApiAddEvít: fd %d mask 0x%x\n", 
fd
, 
mask
);

164 
fuŒmask
 = 
mask
 | 
evítLo›
->
evíts
[
fd
].mask;

165 
pfd
 = 
	`´ApiLookupPídög
(
°©e
, 
fd
);

167 i‡(
pfd
 != -1) {

174 i‡(
evp‹t_debug
)

175 
	`Ârötf
(
°dîr
, "´ApiAddEvít:áddögÅÿ≥ndög fd %d\n", 
fd
);

176 
°©e
->
≥ndög_masks
[
pfd
] |
fuŒmask
;

180  (
	`´ApiAssocüã
("´ApiAddEvít", 
°©e
->
p‹tfd
, 
fd
, 
fuŒmask
));

181 
	}
}

183 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

184 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

185 
fuŒmask
, 
pfd
;

187 i‡(
evp‹t_debug
)

188 
	`Ârötf
(
°dîr
, "dñ fd %d mask 0x%x\n", 
fd
, 
mask
);

190 
pfd
 = 
	`´ApiLookupPídög
(
°©e
, 
fd
);

192 i‡(
pfd
 != -1) {

193 i‡(
evp‹t_debug
)

194 
	`Ârötf
(
°dîr
, "dñëögÉvíà‰omÖídög fd %d\n", 
fd
);

201 
°©e
->
≥ndög_masks
[
pfd
] &~
mask
;

203 i‡(
°©e
->
≥ndög_masks
[
pfd
] =
AE_NONE
)

204 
°©e
->
≥ndög_fds
[
pfd
] = -1;

217 
fuŒmask
 = 
evítLo›
->
evíts
[
fd
].
mask
;

218 i‡(
fuŒmask
 =
AE_NONE
) {

223 i‡(
evp‹t_debug
)

224 
	`Ârötf
(
°dîr
, "´ApiDñEvít:Ö‹t_dissocüã(%d)\n", 
fd
);

226 i‡(
	`p‹t_dissocüã
(
°©e
->
p‹tfd
, 
PORT_SOURCE_FD
, 
fd
) != 0) {

227 
	`≥º‹
("aeApiDelEvent:Öort_dissociate");

228 
	`ab‹t
();

230 } i‡(
	`´ApiAssocüã
("´ApiDñEvít", 
°©e
->
p‹tfd
, 
fd
,

231 
fuŒmask
) != 0) {

239 
	`ab‹t
();

241 
	}
}

243 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

244 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

245 
time•ec
 
timeout
, *
t•
;

246 
mask
, 
i
;

247 
uöt_t
 
√víts
;

248 
p‹t_evít_t
 
evít
[
MAX_EVENT_BATCHSZ
];

255 
i
 = 0; i < 
°©e
->
≈ídög
; i++) {

256 i‡(
°©e
->
≥ndög_fds
[
i
] == -1)

260 i‡(
	`´ApiAssocüã
("´ApiPﬁl", 
°©e
->
p‹tfd
,

261 
°©e
->
≥ndög_fds
[
i
], sèã->
≥ndög_masks
[i]) != 0) {

263 
	`ab‹t
();

266 
°©e
->
≥ndög_masks
[
i
] = 
AE_NONE
;

267 
°©e
->
≥ndög_fds
[
i
] = -1;

270 
°©e
->
≈ídög
 = 0;

272 i‡(
tvp
 !
NULL
) {

273 
timeout
.
tv_£c
 = 
tvp
->tv_sec;

274 
timeout
.
tv_n£c
 = 
tvp
->
tv_u£c
 * 1000;

275 
t•
 = &
timeout
;

277 
t•
 = 
NULL
;

284 
√víts
 = 1;

285 i‡(
	`p‹t_gën
(
°©e
->
p‹tfd
, 
evít
, 
MAX_EVENT_BATCHSZ
, &
√víts
,

286 
t•
Ë=-1 && (
î∫o
 !
ETIME
 || 
√víts
 == 0)) {

287 i‡(
î∫o
 =
ETIME
 ||Éºnÿ=
EINTR
)

291 
	`≥º‹
("aeApiPoll:Öort_get");

292 
	`ab‹t
();

295 
°©e
->
≈ídög
 = 
√víts
;

297 
i
 = 0; i < 
√víts
; i++) {

298 
mask
 = 0;

299 i‡(
evít
[
i
].
p‹ãv_evíts
 & 
POLLIN
)

300 
mask
 |
AE_READABLE
;

301 i‡(
evít
[
i
].
p‹ãv_evíts
 & 
POLLOUT
)

302 
mask
 |
AE_WRITABLE
;

304 
evítLo›
->
fúed
[
i
].
fd
 = 
evít
[i].
p‹ãv_obje˘
;

305 
evítLo›
->
fúed
[
i
].
mask
 = mask;

307 i‡(
evp‹t_debug
)

308 
	`Ârötf
(
°dîr
, "aeApiPoll: fd %d mask 0x%x\n",

309 ()
evít
[
i
].
p‹ãv_obje˘
, 
mask
);

311 
°©e
->
≥ndög_fds
[
i
] = 
evít
[i].
p‹ãv_obje˘
;

312 
°©e
->
≥ndög_masks
[
i
] = (
uöçå_t
)
evít
[i].
p‹ãv_u£r
;

315  
√víts
;

316 
	}
}

318 *
	$´ApiName
() {

320 
	}
}

	@dep/ae/ae_kqueue.c

32 
	~<sys/ty≥s.h
>

33 
	~<sys/evít.h
>

34 
	~<sys/time.h
>

36 
	s´ApiSèã
 {

37 
	mkqfd
;

38 
kevít
 *
	mevíts
;

39 } 
	t´ApiSèã
;

41 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

42 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

44 i‡(!
°©e
)  -1;

45 
°©e
->
evíts
 = 
	`dÆloc
((
kevít
)*
evítLo›
->
£tsize
);

46 i‡(!
°©e
->
evíts
) {

47 
	`d‰ì
(
°©e
);

50 
°©e
->
kqfd
 = 
	`kqueue
();

51 i‡(
°©e
->
kqfd
 == -1) {

52 
	`d‰ì
(
°©e
->
evíts
);

53 
	`d‰ì
(
°©e
);

56 
evítLo›
->
≠id©a
 = 
°©e
;

58 
	}
}

60 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

61 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

63 
°©e
->
evíts
 = 
	`dªÆloc
(°©e->evíts, (
kevít
)*
£tsize
);

65 
	}
}

67 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

68 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

70 
	`˛o£
(
°©e
->
kqfd
);

71 
	`d‰ì
(
°©e
->
evíts
);

72 
	`d‰ì
(
°©e
);

73 
	}
}

75 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

76 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

77 
kevít
 
ke
;

79 i‡(
mask
 & 
AE_READABLE
) {

80 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_READ
, 
EV_ADD
, 0, 0, 
NULL
);

81 i‡(
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL) == -1)  -1;

83 i‡(
mask
 & 
AE_WRITABLE
) {

84 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_WRITE
, 
EV_ADD
, 0, 0, 
NULL
);

85 i‡(
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL) == -1)  -1;

88 
	}
}

90 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

91 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

92 
kevít
 
ke
;

94 i‡(
mask
 & 
AE_READABLE
) {

95 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_READ
, 
EV_DELETE
, 0, 0, 
NULL
);

96 
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL);

98 i‡(
mask
 & 
AE_WRITABLE
) {

99 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_WRITE
, 
EV_DELETE
, 0, 0, 
NULL
);

100 
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL);

102 
	}
}

104 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

105 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

106 
ªtvÆ
, 
numevíts
 = 0;

108 i‡(
tvp
 !
NULL
) {

109 
time•ec
 
timeout
;

110 
timeout
.
tv_£c
 = 
tvp
->tv_sec;

111 
timeout
.
tv_n£c
 = 
tvp
->
tv_u£c
 * 1000;

112 
ªtvÆ
 = 
	`kevít
(
°©e
->
kqfd
, 
NULL
, 0, sèã->
evíts
, 
evítLo›
->
£tsize
,

113 &
timeout
);

115 
ªtvÆ
 = 
	`kevít
(
°©e
->
kqfd
, 
NULL
, 0, sèã->
evíts
, 
evítLo›
->
£tsize
,

116 
NULL
);

119 i‡(
ªtvÆ
 > 0) {

120 
j
;

122 
numevíts
 = 
ªtvÆ
;

123 
j
 = 0; j < 
numevíts
; j++) {

124 
mask
 = 0;

125 
kevít
 *
e
 = 
°©e
->
evíts
+
j
;

127 i‡(
e
->
fûãr
 =
EVFILT_READ
Ë
mask
 |
AE_READABLE
;

128 i‡(
e
->
fûãr
 =
EVFILT_WRITE
Ë
mask
 |
AE_WRITABLE
;

129 
evítLo›
->
fúed
[
j
].
fd
 = 
e
->
idít
;

130 
evítLo›
->
fúed
[
j
].
mask
 = mask;

133  
numevíts
;

134 
	}
}

136 *
	$´ApiName
() {

138 
	}
}

	@dep/ae/ae_kqueue.c

32 
	~<sys/ty≥s.h
>

33 
	~<sys/evít.h
>

34 
	~<sys/time.h
>

36 
	s´ApiSèã
 {

37 
	mkqfd
;

38 
kevít
 *
	mevíts
;

39 } 
	t´ApiSèã
;

41 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

42 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

44 i‡(!
°©e
)  -1;

45 
°©e
->
evíts
 = 
	`dÆloc
((
kevít
)*
evítLo›
->
£tsize
);

46 i‡(!
°©e
->
evíts
) {

47 
	`d‰ì
(
°©e
);

50 
°©e
->
kqfd
 = 
	`kqueue
();

51 i‡(
°©e
->
kqfd
 == -1) {

52 
	`d‰ì
(
°©e
->
evíts
);

53 
	`d‰ì
(
°©e
);

56 
evítLo›
->
≠id©a
 = 
°©e
;

58 
	}
}

60 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

61 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

63 
°©e
->
evíts
 = 
	`dªÆloc
(°©e->evíts, (
kevít
)*
£tsize
);

65 
	}
}

67 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

68 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

70 
	`˛o£
(
°©e
->
kqfd
);

71 
	`d‰ì
(
°©e
->
evíts
);

72 
	`d‰ì
(
°©e
);

73 
	}
}

75 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

76 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

77 
kevít
 
ke
;

79 i‡(
mask
 & 
AE_READABLE
) {

80 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_READ
, 
EV_ADD
, 0, 0, 
NULL
);

81 i‡(
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL) == -1)  -1;

83 i‡(
mask
 & 
AE_WRITABLE
) {

84 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_WRITE
, 
EV_ADD
, 0, 0, 
NULL
);

85 i‡(
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL) == -1)  -1;

88 
	}
}

90 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

91 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

92 
kevít
 
ke
;

94 i‡(
mask
 & 
AE_READABLE
) {

95 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_READ
, 
EV_DELETE
, 0, 0, 
NULL
);

96 
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL);

98 i‡(
mask
 & 
AE_WRITABLE
) {

99 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_WRITE
, 
EV_DELETE
, 0, 0, 
NULL
);

100 
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL);

102 
	}
}

104 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

105 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

106 
ªtvÆ
, 
numevíts
 = 0;

108 i‡(
tvp
 !
NULL
) {

109 
time•ec
 
timeout
;

110 
timeout
.
tv_£c
 = 
tvp
->tv_sec;

111 
timeout
.
tv_n£c
 = 
tvp
->
tv_u£c
 * 1000;

112 
ªtvÆ
 = 
	`kevít
(
°©e
->
kqfd
, 
NULL
, 0, sèã->
evíts
, 
evítLo›
->
£tsize
,

113 &
timeout
);

115 
ªtvÆ
 = 
	`kevít
(
°©e
->
kqfd
, 
NULL
, 0, sèã->
evíts
, 
evítLo›
->
£tsize
,

116 
NULL
);

119 i‡(
ªtvÆ
 > 0) {

120 
j
;

122 
numevíts
 = 
ªtvÆ
;

123 
j
 = 0; j < 
numevíts
; j++) {

124 
mask
 = 0;

125 
kevít
 *
e
 = 
°©e
->
evíts
+
j
;

127 i‡(
e
->
fûãr
 =
EVFILT_READ
Ë
mask
 |
AE_READABLE
;

128 i‡(
e
->
fûãr
 =
EVFILT_WRITE
Ë
mask
 |
AE_WRITABLE
;

129 
evítLo›
->
fúed
[
j
].
fd
 = 
e
->
idít
;

130 
evítLo›
->
fúed
[
j
].
mask
 = mask;

133  
numevíts
;

134 
	}
}

136 *
	$´ApiName
() {

138 
	}
}

	@dep/ae/ae_select.c

32 
	~<°rög.h
>

34 
	s´ApiSèã
 {

35 
fd_£t
 
	mrfds
, 
	mwfds
;

38 
fd_£t
 
	m_rfds
, 
	m_wfds
;

39 } 
	t´ApiSèã
;

41 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

42 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

44 i‡(!
°©e
)  -1;

45 
	`FD_ZERO
(&
°©e
->
rfds
);

46 
	`FD_ZERO
(&
°©e
->
wfds
);

47 
evítLo›
->
≠id©a
 = 
°©e
;

49 
	}
}

51 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

53 i‡(
£tsize
 >
FD_SETSIZE
)  -1;

55 
	}
}

57 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

58 
	`d‰ì
(
evítLo›
->
≠id©a
);

59 
	}
}

61 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

62 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

64 i‡(
mask
 & 
AE_READABLE
Ë
	`FD_SET
(
fd
,&
°©e
->
rfds
);

65 i‡(
mask
 & 
AE_WRITABLE
Ë
	`FD_SET
(
fd
,&
°©e
->
wfds
);

67 
	}
}

69 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

70 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

72 i‡(
mask
 & 
AE_READABLE
Ë
	`FD_CLR
(
fd
,&
°©e
->
rfds
);

73 i‡(
mask
 & 
AE_WRITABLE
Ë
	`FD_CLR
(
fd
,&
°©e
->
wfds
);

74 
	}
}

76 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

77 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

78 
ªtvÆ
, 
j
, 
numevíts
 = 0;

80 
	`mem˝y
(&
°©e
->
_rfds
,&°©e->
rfds
,(
fd_£t
));

81 
	`mem˝y
(&
°©e
->
_wfds
,&°©e->
wfds
,(
fd_£t
));

83 
ªtvÆ
 = 
	`£À˘
(
evítLo›
->
maxfd
+1,

84 &
°©e
->
_rfds
,&°©e->
_wfds
,
NULL
,
tvp
);

85 i‡(
ªtvÆ
 > 0) {

86 
j
 = 0; j <
evítLo›
->
maxfd
; j++) {

87 
mask
 = 0;

88 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
j
];

90 i‡(
„
->
mask
 =
AE_NONE
) ;

91 i‡(
„
->
mask
 & 
AE_READABLE
 && 
	`FD_ISSET
(
j
,&
°©e
->
_rfds
))

92 
mask
 |
AE_READABLE
;

93 i‡(
„
->
mask
 & 
AE_WRITABLE
 && 
	`FD_ISSET
(
j
,&
°©e
->
_wfds
))

94 
mask
 |
AE_WRITABLE
;

95 
evítLo›
->
fúed
[
numevíts
].
fd
 = 
j
;

96 
evítLo›
->
fúed
[
numevíts
].
mask
 = mask;

97 
numevíts
++;

100  
numevíts
;

101 
	}
}

103 *
	$´ApiName
() {

105 
	}
}

	@dep/ae/ae_select.c

32 
	~<°rög.h
>

34 
	s´ApiSèã
 {

35 
fd_£t
 
	mrfds
, 
	mwfds
;

38 
fd_£t
 
	m_rfds
, 
	m_wfds
;

39 } 
	t´ApiSèã
;

41 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

42 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

44 i‡(!
°©e
)  -1;

45 
	`FD_ZERO
(&
°©e
->
rfds
);

46 
	`FD_ZERO
(&
°©e
->
wfds
);

47 
evítLo›
->
≠id©a
 = 
°©e
;

49 
	}
}

51 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

53 i‡(
£tsize
 >
FD_SETSIZE
)  -1;

55 
	}
}

57 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

58 
	`d‰ì
(
evítLo›
->
≠id©a
);

59 
	}
}

61 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

62 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

64 i‡(
mask
 & 
AE_READABLE
Ë
	`FD_SET
(
fd
,&
°©e
->
rfds
);

65 i‡(
mask
 & 
AE_WRITABLE
Ë
	`FD_SET
(
fd
,&
°©e
->
wfds
);

67 
	}
}

69 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

70 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

72 i‡(
mask
 & 
AE_READABLE
Ë
	`FD_CLR
(
fd
,&
°©e
->
rfds
);

73 i‡(
mask
 & 
AE_WRITABLE
Ë
	`FD_CLR
(
fd
,&
°©e
->
wfds
);

74 
	}
}

76 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

77 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

78 
ªtvÆ
, 
j
, 
numevíts
 = 0;

80 
	`mem˝y
(&
°©e
->
_rfds
,&°©e->
rfds
,(
fd_£t
));

81 
	`mem˝y
(&
°©e
->
_wfds
,&°©e->
wfds
,(
fd_£t
));

83 
ªtvÆ
 = 
	`£À˘
(
evítLo›
->
maxfd
+1,

84 &
°©e
->
_rfds
,&°©e->
_wfds
,
NULL
,
tvp
);

85 i‡(
ªtvÆ
 > 0) {

86 
j
 = 0; j <
evítLo›
->
maxfd
; j++) {

87 
mask
 = 0;

88 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
j
];

90 i‡(
„
->
mask
 =
AE_NONE
) ;

91 i‡(
„
->
mask
 & 
AE_READABLE
 && 
	`FD_ISSET
(
j
,&
°©e
->
_rfds
))

92 
mask
 |
AE_READABLE
;

93 i‡(
„
->
mask
 & 
AE_WRITABLE
 && 
	`FD_ISSET
(
j
,&
°©e
->
_wfds
))

94 
mask
 |
AE_WRITABLE
;

95 
evítLo›
->
fúed
[
numevíts
].
fd
 = 
j
;

96 
evítLo›
->
fúed
[
numevíts
].
mask
 = mask;

97 
numevíts
++;

100  
numevíts
;

101 
	}
}

103 *
	$´ApiName
() {

105 
	}
}

	@dep/darray/darray.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<d¨øy.h
>

8 
d¨øy
 *

9 
	$d¨øy_¸óã
(
n
, 
size_t
 
size
)

11 
d¨øy
 *
a
;

13 
a
 = 
	`dÆloc
((*a));

14 i‡(
a
 =
NULL
) {

15  
NULL
;

18 
a
->
ñem
 = 
	`dÆloc
(
n
 * 
size
);

19 i‡(
a
->
ñem
 =
NULL
) {

20 
	`d‰ì
(
a
);

21  
NULL
;

24 
a
->
√Àm
 = 0;

25 
a
->
size
 = size;

26 
a
->
«Œoc
 = 
n
;

28  
a
;

29 
	}
}

32 
	$d¨øy_de°roy
(
d¨øy
 *
a
)

34 
	`d¨øy_deöô
(
a
);

35 
	`d‰ì
(
a
);

36 
	}
}

40 
	$d¨øy_öô
(
d¨øy
 *
a
, 
n
, 
size_t
 
size
)

42 
a
->
ñem
 = 
	`dÆloc
(
n
 * 
size
);

43 i‡(
a
->
ñem
 =
NULL
) {

47 
a
->
√Àm
 = 0;

48 
a
->
size
 = size;

49 
a
->
«Œoc
 = 
n
;

52 
	}
}

56 
	$d¨øy_deöô
(
d¨øy
 *
a
)

58 i‡(
a
->
ñem
 !
NULL
) {

59 
	`d‰ì
(
a
->
ñem
);

61 
	}
}

65 
	$d¨øy_idx
(
d¨øy
 *
a
, *
ñem
)

67 *
p
, *
q
;

68 
off
, 
idx
;

70 
p
 = 
a
->
ñem
;

71 
q
 = 
ñem
;

73 
off
 = ()(
q
 - 
p
);

75 
idx
 = 
off
 / ()
a
->
size
;

77  
idx
;

78 
	}
}

81 
	$d¨øy_push
(
d¨øy
 *
a
)

83 *
ñem
, *
√w
;

84 
size_t
 
size
;

86 i‡(
a
->
√Àm
 =a->
«Œoc
) {

89 
size
 = 
a
->sizê*á->
«Œoc
;

90 
√w
 = 
	`dªÆloc
(
a
->
ñem
, 2 * 
size
);

91 i‡(
√w
 =
NULL
) {

92  
NULL
;

95 
a
->
ñem
 = 
√w
;

96 
a
->
«Œoc
 *= 2;

99 
ñem
 = (*)
a
->ñem +á->
size
 *á->
√Àm
;

100 
a
->
√Àm
++;

102  
ñem
;

103 
	}
}

106 
	$d¨øy_p›
(
d¨øy
 *
a
)

108 *
ñem
;

110 
a
->
√Àm
--;

111 
ñem
 = (*)
a
->ñem +á->
size
 *á->
√Àm
;

113  
ñem
;

114 
	}
}

118 
	$d¨øy_gë
(
d¨øy
 *
a
, 
idx
)

120 *
ñem
;

122 
ñem
 = (*)
a
->ñem + (a->
size
 * 
idx
);

124  
ñem
;

125 
	}
}

128 
	$d¨øy_t›
(
d¨øy
 *
a
)

130  
	`d¨øy_gë
(
a
,á->
√Àm
 - 1);

131 
	}
}

134 
	$d¨øy_sw≠
(
d¨øy
 *
a
, d¨øy *
b
)

136 
d¨øy
 
tmp
;

138 
tmp
 = *
a
;

139 *
a
 = *
b
;

140 *
b
 = 
tmp
;

141 
	}
}

148 
	$d¨øy_s‹t
(
d¨øy
 *
a
, 
d¨øy_com∑ª_t
 
com∑ª
)

150 
	`qs‹t
(
a
->
ñem
,á->
√Àm
,á->
size
, 
com∑ª
);

151 
	}
}

159 
	$d¨øy_óch
(
d¨øy
 *
a
, 
d¨øy_óch_t
 
func
, *
d©a
)

161 
i
, 
√Àm
;

163 
i
 = 0, 
√Àm
 = 
	`d¨øy_n
(
a
); i <Çelem; i++) {

164 *
ñem
 = 
	`d¨øy_gë
(
a
, 
i
);

165 
ªt
;

167 
ªt
 = 
	`func
(
ñem
, 
d©a
);

168 i‡(
ªt
 != 0) {

174 
	}
}

	@dep/darray/darray.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<d¨øy.h
>

8 
d¨øy
 *

9 
	$d¨øy_¸óã
(
n
, 
size_t
 
size
)

11 
d¨øy
 *
a
;

13 
a
 = 
	`dÆloc
((*a));

14 i‡(
a
 =
NULL
) {

15  
NULL
;

18 
a
->
ñem
 = 
	`dÆloc
(
n
 * 
size
);

19 i‡(
a
->
ñem
 =
NULL
) {

20 
	`d‰ì
(
a
);

21  
NULL
;

24 
a
->
√Àm
 = 0;

25 
a
->
size
 = size;

26 
a
->
«Œoc
 = 
n
;

28  
a
;

29 
	}
}

32 
	$d¨øy_de°roy
(
d¨øy
 *
a
)

34 
	`d¨øy_deöô
(
a
);

35 
	`d‰ì
(
a
);

36 
	}
}

40 
	$d¨øy_öô
(
d¨øy
 *
a
, 
n
, 
size_t
 
size
)

42 
a
->
ñem
 = 
	`dÆloc
(
n
 * 
size
);

43 i‡(
a
->
ñem
 =
NULL
) {

47 
a
->
√Àm
 = 0;

48 
a
->
size
 = size;

49 
a
->
«Œoc
 = 
n
;

52 
	}
}

56 
	$d¨øy_deöô
(
d¨øy
 *
a
)

58 i‡(
a
->
ñem
 !
NULL
) {

59 
	`d‰ì
(
a
->
ñem
);

61 
	}
}

65 
	$d¨øy_idx
(
d¨øy
 *
a
, *
ñem
)

67 *
p
, *
q
;

68 
off
, 
idx
;

70 
p
 = 
a
->
ñem
;

71 
q
 = 
ñem
;

73 
off
 = ()(
q
 - 
p
);

75 
idx
 = 
off
 / ()
a
->
size
;

77  
idx
;

78 
	}
}

81 
	$d¨øy_push
(
d¨øy
 *
a
)

83 *
ñem
, *
√w
;

84 
size_t
 
size
;

86 i‡(
a
->
√Àm
 =a->
«Œoc
) {

89 
size
 = 
a
->sizê*á->
«Œoc
;

90 
√w
 = 
	`dªÆloc
(
a
->
ñem
, 2 * 
size
);

91 i‡(
√w
 =
NULL
) {

92  
NULL
;

95 
a
->
ñem
 = 
√w
;

96 
a
->
«Œoc
 *= 2;

99 
ñem
 = (*)
a
->ñem +á->
size
 *á->
√Àm
;

100 
a
->
√Àm
++;

102  
ñem
;

103 
	}
}

106 
	$d¨øy_p›
(
d¨øy
 *
a
)

108 *
ñem
;

110 
a
->
√Àm
--;

111 
ñem
 = (*)
a
->ñem +á->
size
 *á->
√Àm
;

113  
ñem
;

114 
	}
}

118 
	$d¨øy_gë
(
d¨øy
 *
a
, 
idx
)

120 *
ñem
;

122 
ñem
 = (*)
a
->ñem + (a->
size
 * 
idx
);

124  
ñem
;

125 
	}
}

128 
	$d¨øy_t›
(
d¨øy
 *
a
)

130  
	`d¨øy_gë
(
a
,á->
√Àm
 - 1);

131 
	}
}

134 
	$d¨øy_sw≠
(
d¨øy
 *
a
, d¨øy *
b
)

136 
d¨øy
 
tmp
;

138 
tmp
 = *
a
;

139 *
a
 = *
b
;

140 *
b
 = 
tmp
;

141 
	}
}

148 
	$d¨øy_s‹t
(
d¨øy
 *
a
, 
d¨øy_com∑ª_t
 
com∑ª
)

150 
	`qs‹t
(
a
->
ñem
,á->
√Àm
,á->
size
, 
com∑ª
);

151 
	}
}

159 
	$d¨øy_óch
(
d¨øy
 *
a
, 
d¨øy_óch_t
 
func
, *
d©a
)

161 
i
, 
√Àm
;

163 
i
 = 0, 
√Àm
 = 
	`d¨øy_n
(
a
); i <Çelem; i++) {

164 *
ñem
 = 
	`d¨øy_gë
(
a
, 
i
);

165 
ªt
;

167 
ªt
 = 
	`func
(
ñem
, 
d©a
);

168 i‡(
ªt
 != 0) {

174 
	}
}

	@dep/darray/darray.h

1 #i‚de‡
_DARRAY_H_


2 
	#_DARRAY_H_


	)

4 (*
	td¨øy_com∑ª_t
)(const *, const *);

5 (*
	td¨øy_óch_t
)(*, *);

7 
	sd¨øy
 {

8 
√Àm
;

9 *
ñem
;

10 
size_t
 
size
;

11 
«Œoc
;

12 } 
	td¨øy
;

14 
	#nuŒ_d¨øy
 { 0, 
NULL
, 0, 0 
	}

	)
}

17 
ölöe
 

18 
	$d¨øy_nuŒ
(
d¨øy
 *
a
)

20 
a
->
√Àm
 = 0;

21 
a
->
ñem
 = 
NULL
;

22 
a
->
size
 = 0;

23 
a
->
«Œoc
 = 0;

24 
	}
}

27 
ölöe
 

28 
	$d¨øy_£t
(
d¨øy
 *
a
, *
ñem
, 
size_t
 
size
, 
«Œoc
)

30 
a
->
√Àm
 = 0;

31 
a
->
ñem
 =Élem;

32 
a
->
size
 = size;

33 
a
->
«Œoc
 =Çalloc;

34 
	}
}

37 
ölöe
 

38 
	$d¨øy_n
(c⁄° 
d¨øy
 *
a
)

40  
a
->
√Àm
;

41 
	}
}

43 
d¨øy
 *
d¨øy_¸óã
(
n
, 
size_t
 
size
);

44 
d¨øy_de°roy
(
d¨øy
 *
a
);

45 
d¨øy_öô
(
d¨øy
 *
a
, 
n
, 
size_t
 
size
);

46 
d¨øy_deöô
(
d¨øy
 *
a
);

48 
d¨øy_idx
(
d¨øy
 *
a
, *
ñem
);

49 *
d¨øy_push
(
d¨øy
 *
a
);

50 *
d¨øy_p›
(
d¨øy
 *
a
);

51 *
d¨øy_gë
(
d¨øy
 *
a
, 
idx
);

52 *
d¨øy_t›
(
d¨øy
 *
a
);

53 
d¨øy_sw≠
(
d¨øy
 *
a
, d¨øy *
b
);

54 
d¨øy_s‹t
(
d¨øy
 *
a
, 
d¨øy_com∑ª_t
 
com∑ª
);

55 
d¨øy_óch
(
d¨øy
 *
a
, 
d¨øy_óch_t
 
func
, *
d©a
);

	@dep/darray/darray.h

1 #i‚de‡
_DARRAY_H_


2 
	#_DARRAY_H_


	)

4 (*
	td¨øy_com∑ª_t
)(const *, const *);

5 (*
	td¨øy_óch_t
)(*, *);

7 
	sd¨øy
 {

8 
√Àm
;

9 *
ñem
;

10 
size_t
 
size
;

11 
«Œoc
;

12 } 
	td¨øy
;

14 
	#nuŒ_d¨øy
 { 0, 
NULL
, 0, 0 
	}

	)
}

17 
ölöe
 

18 
	$d¨øy_nuŒ
(
d¨øy
 *
a
)

20 
a
->
√Àm
 = 0;

21 
a
->
ñem
 = 
NULL
;

22 
a
->
size
 = 0;

23 
a
->
«Œoc
 = 0;

24 
	}
}

27 
ölöe
 

28 
	$d¨øy_£t
(
d¨øy
 *
a
, *
ñem
, 
size_t
 
size
, 
«Œoc
)

30 
a
->
√Àm
 = 0;

31 
a
->
ñem
 =Élem;

32 
a
->
size
 = size;

33 
a
->
«Œoc
 =Çalloc;

34 
	}
}

37 
ölöe
 

38 
	$d¨øy_n
(c⁄° 
d¨øy
 *
a
)

40  
a
->
√Àm
;

41 
	}
}

43 
d¨øy
 *
d¨øy_¸óã
(
n
, 
size_t
 
size
);

44 
d¨øy_de°roy
(
d¨øy
 *
a
);

45 
d¨øy_öô
(
d¨øy
 *
a
, 
n
, 
size_t
 
size
);

46 
d¨øy_deöô
(
d¨øy
 *
a
);

48 
d¨øy_idx
(
d¨øy
 *
a
, *
ñem
);

49 *
d¨øy_push
(
d¨øy
 *
a
);

50 *
d¨øy_p›
(
d¨øy
 *
a
);

51 *
d¨øy_gë
(
d¨øy
 *
a
, 
idx
);

52 *
d¨øy_t›
(
d¨øy
 *
a
);

53 
d¨øy_sw≠
(
d¨øy
 *
a
, d¨øy *
b
);

54 
d¨øy_s‹t
(
d¨øy
 *
a
, 
d¨øy_com∑ª_t
 
com∑ª
);

55 
d¨øy_óch
(
d¨øy
 *
a
, 
d¨øy_óch_t
 
func
, *
d©a
);

	@dep/dhashkit/dcrc16.c

1 
	~<dhashkô.h
>

3 c⁄° 
uöt16_t
 
	g¸c16èb
[256] = {

38 
uöt32_t


39 
	$hash_¸c16
(c⁄° *
key
, 
size_t
 
key_Àngth
)

41 
uöt64_t
 
x
;

42 
uöt32_t
 
¸c
 = 0;

44 
x
=0; x < 
key_Àngth
; x++) {

45 
¸c
 = (¸¯<< 8Ë^ 
¸c16èb
[((¸¯>> 8Ë^ *
key
++) & 0x00ff];

48  
¸c
;

49 
	}
}

	@dep/dhashkit/dcrc16.c

1 
	~<dhashkô.h
>

3 c⁄° 
uöt16_t
 
	g¸c16èb
[256] = {

38 
uöt32_t


39 
	$hash_¸c16
(c⁄° *
key
, 
size_t
 
key_Àngth
)

41 
uöt64_t
 
x
;

42 
uöt32_t
 
¸c
 = 0;

44 
x
=0; x < 
key_Àngth
; x++) {

45 
¸c
 = (¸¯<< 8Ë^ 
¸c16èb
[((¸¯>> 8Ë^ *
key
++) & 0x00ff];

48  
¸c
;

49 
	}
}

	@dep/dhashkit/dcrc32.c

1 
	~<dhashkô.h
>

3 c⁄° 
uöt32_t
 
	g¸c32èb
[256] = {

74 
uöt32_t


75 
	$hash_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

77 
uöt64_t
 
x
;

78 
uöt32_t
 
¸c
 = 
UINT32_MAX
;

80 
x
 = 0; x < 
key_Àngth
; x++) {

81 
¸c
 = (¸¯>> 8Ë^ 
¸c32èb
[(¸¯^ (
uöt64_t
)
key
[
x
]) & 0xff];

84  ((~
¸c
) >> 16) & 0x7fff;

85 
	}
}

87 
uöt32_t


88 
	$hash_¸c32a
(c⁄° *
key
, 
size_t
 
key_Àngth
)

90 c⁄° 
uöt8_t
 *
p
 = 
key
;

91 
uöt32_t
 
¸c
;

93 
¸c
 = ~0U;

94 
key_Àngth
--) {

95 
¸c
 = 
¸c32èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

98  
¸c
 ^ ~0U;

99 
	}
}

	@dep/dhashkit/dcrc32.c

1 
	~<dhashkô.h
>

3 c⁄° 
uöt32_t
 
	g¸c32èb
[256] = {

74 
uöt32_t


75 
	$hash_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

77 
uöt64_t
 
x
;

78 
uöt32_t
 
¸c
 = 
UINT32_MAX
;

80 
x
 = 0; x < 
key_Àngth
; x++) {

81 
¸c
 = (¸¯>> 8Ë^ 
¸c32èb
[(¸¯^ (
uöt64_t
)
key
[
x
]) & 0xff];

84  ((~
¸c
) >> 16) & 0x7fff;

85 
	}
}

87 
uöt32_t


88 
	$hash_¸c32a
(c⁄° *
key
, 
size_t
 
key_Àngth
)

90 c⁄° 
uöt8_t
 *
p
 = 
key
;

91 
uöt32_t
 
¸c
;

93 
¸c
 = ~0U;

94 
key_Àngth
--) {

95 
¸c
 = 
¸c32èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

98  
¸c
 ^ ~0U;

99 
	}
}

	@dep/dhashkit/dfnv.c

1 
	~<dhashkô.h
>

3 
uöt64_t
 
	gFNV_64_INIT
 = 
UINT64_C
(0xcbf29ce484222325);

4 
uöt64_t
 
	gFNV_64_PRIME
 = 
UINT64_C
(0x100000001b3);

5 
uöt32_t
 
	gFNV_32_INIT
 = 2166136261UL;

6 
uöt32_t
 
	gFNV_32_PRIME
 = 16777619;

8 
uöt32_t


9 
	$hash_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

11 
uöt64_t
 
hash
 = 
FNV_64_INIT
;

12 
size_t
 
x
;

14 
x
 = 0; x < 
key_Àngth
; x++) {

15 
hash
 *
FNV_64_PRIME
;

16 
hash
 ^(
uöt64_t
)
key
[
x
];

19  (
uöt32_t
)
hash
;

20 
	}
}

22 
uöt32_t


23 
	$hash_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

25 
uöt32_t
 
hash
 = (uöt32_tË
FNV_64_INIT
;

26 
size_t
 
x
;

28 
x
 = 0; x < 
key_Àngth
; x++) {

29 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

30 
hash
 ^
vÆ
;

31 
hash
 *(
uöt32_t
Ë
FNV_64_PRIME
;

34  
hash
;

35 
	}
}

37 
uöt32_t


38 
	$hash_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

40 
uöt32_t
 
hash
 = 
FNV_32_INIT
;

41 
size_t
 
x
;

43 
x
 = 0; x < 
key_Àngth
; x++) {

44 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

45 
hash
 *
FNV_32_PRIME
;

46 
hash
 ^
vÆ
;

49  
hash
;

50 
	}
}

52 
uöt32_t


53 
	$hash_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

55 
uöt32_t
 
hash
 = 
FNV_32_INIT
;

56 
size_t
 
x
;

58 
x
0; x < 
key_Àngth
; x++) {

59 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

60 
hash
 ^
vÆ
;

61 
hash
 *
FNV_32_PRIME
;

64  
hash
;

65 
	}
}

	@dep/dhashkit/dfnv.c

1 
	~<dhashkô.h
>

3 
uöt64_t
 
	gFNV_64_INIT
 = 
UINT64_C
(0xcbf29ce484222325);

4 
uöt64_t
 
	gFNV_64_PRIME
 = 
UINT64_C
(0x100000001b3);

5 
uöt32_t
 
	gFNV_32_INIT
 = 2166136261UL;

6 
uöt32_t
 
	gFNV_32_PRIME
 = 16777619;

8 
uöt32_t


9 
	$hash_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

11 
uöt64_t
 
hash
 = 
FNV_64_INIT
;

12 
size_t
 
x
;

14 
x
 = 0; x < 
key_Àngth
; x++) {

15 
hash
 *
FNV_64_PRIME
;

16 
hash
 ^(
uöt64_t
)
key
[
x
];

19  (
uöt32_t
)
hash
;

20 
	}
}

22 
uöt32_t


23 
	$hash_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

25 
uöt32_t
 
hash
 = (uöt32_tË
FNV_64_INIT
;

26 
size_t
 
x
;

28 
x
 = 0; x < 
key_Àngth
; x++) {

29 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

30 
hash
 ^
vÆ
;

31 
hash
 *(
uöt32_t
Ë
FNV_64_PRIME
;

34  
hash
;

35 
	}
}

37 
uöt32_t


38 
	$hash_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

40 
uöt32_t
 
hash
 = 
FNV_32_INIT
;

41 
size_t
 
x
;

43 
x
 = 0; x < 
key_Àngth
; x++) {

44 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

45 
hash
 *
FNV_32_PRIME
;

46 
hash
 ^
vÆ
;

49  
hash
;

50 
	}
}

52 
uöt32_t


53 
	$hash_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

55 
uöt32_t
 
hash
 = 
FNV_32_INIT
;

56 
size_t
 
x
;

58 
x
0; x < 
key_Àngth
; x++) {

59 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

60 
hash
 ^
vÆ
;

61 
hash
 *
FNV_32_PRIME
;

64  
hash
;

65 
	}
}

	@dep/dhashkit/dhashkit.h

1 #i‚de‡
_DHASHKIT_H_


2 
	#_DHASHKIT_H_


	)

4 
	~<°döt.h
>

5 
	~<°dio.h
>

7 
	~<sys/ty≥s.h
>

9 
	sc⁄töuum
 {

10 
uöt32_t
 
	mödex
;

11 
uöt32_t
 
	mvÆue
;

14 
	#HASH_CODEC
(
ACTION
) \

15 
	`ACTION
–
HASH_ONE_AT_A_TIME
, 
⁄e_©_a_time
 ) \

16 
	`ACTION
–
HASH_MD5
, 
md5
 ) \

17 
	`ACTION
–
HASH_CRC16
, 
¸c16
 ) \

18 
	`ACTION
–
HASH_CRC32
, 
¸c32
 ) \

19 
	`ACTION
–
HASH_CRC32A
, 
¸c32a
 ) \

20 
	`ACTION
–
HASH_FNV1_64
, 
‚v1_64
 ) \

21 
	`ACTION
–
HASH_FNV1A_64
, 
‚v1a_64
 ) \

22 
	`ACTION
–
HASH_FNV1_32
, 
‚v1_32
 ) \

23 
	`ACTION
–
HASH_FNV1A_32
, 
‚v1a_32
 ) \

24 
	`ACTION
–
HASH_HSIEH
, 
hsõh
 ) \

25 
	`ACTION
–
HASH_MURMUR
, 
murmur
 ) \

26 
	`ACTION
–
HASH_JENKINS
, 
jíkös
 ) \

27 

	)

28 
	#DIST_CODEC
(
ACTION
) \

29 
	`ACTION
–
DIST_KETAMA
, 
këama
 ) \

30 
	`ACTION
–
DIST_MODULA
, 
moduœ
 ) \

31 
	`ACTION
–
DIST_RANDOM
, 
øndom
 ) \

32 

	)

33 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë_hash,

	)

34 
	ehash_ty≥
 {

35 
HASH_CODEC
–
DEFINE_ACTION
 )

36 
	mHASH_SENTINEL


37 } 
	thash_ty≥_t
;

38 #unde‡
DEFINE_ACTION


40 
	#DEFINE_ACTION
(
_di°
, 
_«me
Ë_di°,

	)

41 
	edi°_ty≥
 {

42 
DIST_CODEC
–
DEFINE_ACTION
 )

43 
	mDIST_SENTINEL


44 } 
	tdi°_ty≥_t
;

45 #unde‡
DEFINE_ACTION


47 
uöt32_t
 
hash_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
);

48 
md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
);

49 
uöt32_t
 
hash_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
);

50 
uöt32_t
 
hash_¸c16
(c⁄° *
key
, 
size_t
 
key_Àngth
);

51 
uöt32_t
 
hash_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

52 
uöt32_t
 
hash_¸c32a
(c⁄° *
key
, 
size_t
 
key_Àngth
);

53 
uöt32_t
 
hash_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

54 
uöt32_t
 
hash_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

55 
uöt32_t
 
hash_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

56 
uöt32_t
 
hash_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

57 
uöt32_t
 
hash_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
);

58 
uöt32_t
 
hash_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
);

59 
uöt32_t
 
hash_murmur
(c⁄° *
key
, 
size_t
 
Àngth
);

61 
uöt32_t
 
këama_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

62 
uöt32_t
 
moduœ_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

63 
uöt32_t
 
øndom_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

68 
uöt32_t
 
	m°©e
[5];

69 
uöt32_t
 
	mcou¡
[2];

70 
	mbuf„r
[64];

71 } 
	tSHA1_CTX
;

73 
SHA1Tønsf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64]);

74 
SHA1Inô
(
SHA1_CTX
* 
c⁄ãxt
);

75 
SHA1Upd©e
(
SHA1_CTX
* 
c⁄ãxt
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
);

76 
SHA1FöÆ
(
dige°
[20], 
SHA1_CTX
* 
c⁄ãxt
);

	@dep/dhashkit/dhashkit.h

1 #i‚de‡
_DHASHKIT_H_


2 
	#_DHASHKIT_H_


	)

4 
	~<°döt.h
>

5 
	~<°dio.h
>

7 
	~<sys/ty≥s.h
>

9 
	sc⁄töuum
 {

10 
uöt32_t
 
	mödex
;

11 
uöt32_t
 
	mvÆue
;

14 
	#HASH_CODEC
(
ACTION
) \

15 
	`ACTION
–
HASH_ONE_AT_A_TIME
, 
⁄e_©_a_time
 ) \

16 
	`ACTION
–
HASH_MD5
, 
md5
 ) \

17 
	`ACTION
–
HASH_CRC16
, 
¸c16
 ) \

18 
	`ACTION
–
HASH_CRC32
, 
¸c32
 ) \

19 
	`ACTION
–
HASH_CRC32A
, 
¸c32a
 ) \

20 
	`ACTION
–
HASH_FNV1_64
, 
‚v1_64
 ) \

21 
	`ACTION
–
HASH_FNV1A_64
, 
‚v1a_64
 ) \

22 
	`ACTION
–
HASH_FNV1_32
, 
‚v1_32
 ) \

23 
	`ACTION
–
HASH_FNV1A_32
, 
‚v1a_32
 ) \

24 
	`ACTION
–
HASH_HSIEH
, 
hsõh
 ) \

25 
	`ACTION
–
HASH_MURMUR
, 
murmur
 ) \

26 
	`ACTION
–
HASH_JENKINS
, 
jíkös
 ) \

27 

	)

28 
	#DIST_CODEC
(
ACTION
) \

29 
	`ACTION
–
DIST_KETAMA
, 
këama
 ) \

30 
	`ACTION
–
DIST_MODULA
, 
moduœ
 ) \

31 
	`ACTION
–
DIST_RANDOM
, 
øndom
 ) \

32 

	)

33 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë_hash,

	)

34 
	ehash_ty≥
 {

35 
HASH_CODEC
–
DEFINE_ACTION
 )

36 
	mHASH_SENTINEL


37 } 
	thash_ty≥_t
;

38 #unde‡
DEFINE_ACTION


40 
	#DEFINE_ACTION
(
_di°
, 
_«me
Ë_di°,

	)

41 
	edi°_ty≥
 {

42 
DIST_CODEC
–
DEFINE_ACTION
 )

43 
	mDIST_SENTINEL


44 } 
	tdi°_ty≥_t
;

45 #unde‡
DEFINE_ACTION


47 
uöt32_t
 
hash_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
);

48 
md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
);

49 
uöt32_t
 
hash_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
);

50 
uöt32_t
 
hash_¸c16
(c⁄° *
key
, 
size_t
 
key_Àngth
);

51 
uöt32_t
 
hash_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

52 
uöt32_t
 
hash_¸c32a
(c⁄° *
key
, 
size_t
 
key_Àngth
);

53 
uöt32_t
 
hash_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

54 
uöt32_t
 
hash_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

55 
uöt32_t
 
hash_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

56 
uöt32_t
 
hash_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

57 
uöt32_t
 
hash_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
);

58 
uöt32_t
 
hash_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
);

59 
uöt32_t
 
hash_murmur
(c⁄° *
key
, 
size_t
 
Àngth
);

61 
uöt32_t
 
këama_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

62 
uöt32_t
 
moduœ_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

63 
uöt32_t
 
øndom_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

68 
uöt32_t
 
	m°©e
[5];

69 
uöt32_t
 
	mcou¡
[2];

70 
	mbuf„r
[64];

71 } 
	tSHA1_CTX
;

73 
SHA1Tønsf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64]);

74 
SHA1Inô
(
SHA1_CTX
* 
c⁄ãxt
);

75 
SHA1Upd©e
(
SHA1_CTX
* 
c⁄ãxt
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
);

76 
SHA1FöÆ
(
dige°
[20], 
SHA1_CTX
* 
c⁄ãxt
);

	@dep/dhashkit/dhsieh.c

1 
	~<dhashkô.h
>

3 #unde‡
gë16bôs


4 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
))

5 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

8 #i‡!
deföed
 (
gë16bôs
)

9 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8)\

10 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

13 
uöt32_t


14 
	$hash_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
)

16 
uöt32_t
 
hash
 = 0, 
tmp
;

17 
ªm
;

19 i‡(
key_Àngth
 <0 || 
key
 =
NULL
) {

23 
ªm
 = 
key_Àngth
 & 3;

24 
key_Àngth
 >>= 2;

27 ;
key_Àngth
 > 0; key_length--) {

28 
hash
 +
	`gë16bôs
 (
key
);

29 
tmp
 = (
	`gë16bôs
 (
key
+2Ë<< 11Ë^ 
hash
;

30 
hash
 = (hash << 16Ë^ 
tmp
;

31 
key
 +2* (
uöt16_t
);

32 
hash
 += hash >> 11;

36 
ªm
) {

38 
hash
 +
	`gë16bôs
 (
key
);

39 
hash
 ^= hash << 16;

40 
hash
 ^(
uöt32_t
)
key
[ (
uöt16_t
)] << 18;

41 
hash
 += hash >> 11;

45 
hash
 +
	`gë16bôs
 (
key
);

46 
hash
 ^= hash << 11;

47 
hash
 += hash >> 17;

51 
hash
 +()(*
key
);

52 
hash
 ^= hash << 10;

53 
hash
 += hash >> 1;

60 
hash
 ^= hash << 3;

61 
hash
 += hash >> 5;

62 
hash
 ^= hash << 4;

63 
hash
 += hash >> 17;

64 
hash
 ^= hash << 25;

65 
hash
 += hash >> 6;

67  
hash
;

68 
	}
}

	@dep/dhashkit/dhsieh.c

1 
	~<dhashkô.h
>

3 #unde‡
gë16bôs


4 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
))

5 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

8 #i‡!
deföed
 (
gë16bôs
)

9 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8)\

10 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

13 
uöt32_t


14 
	$hash_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
)

16 
uöt32_t
 
hash
 = 0, 
tmp
;

17 
ªm
;

19 i‡(
key_Àngth
 <0 || 
key
 =
NULL
) {

23 
ªm
 = 
key_Àngth
 & 3;

24 
key_Àngth
 >>= 2;

27 ;
key_Àngth
 > 0; key_length--) {

28 
hash
 +
	`gë16bôs
 (
key
);

29 
tmp
 = (
	`gë16bôs
 (
key
+2Ë<< 11Ë^ 
hash
;

30 
hash
 = (hash << 16Ë^ 
tmp
;

31 
key
 +2* (
uöt16_t
);

32 
hash
 += hash >> 11;

36 
ªm
) {

38 
hash
 +
	`gë16bôs
 (
key
);

39 
hash
 ^= hash << 16;

40 
hash
 ^(
uöt32_t
)
key
[ (
uöt16_t
)] << 18;

41 
hash
 += hash >> 11;

45 
hash
 +
	`gë16bôs
 (
key
);

46 
hash
 ^= hash << 11;

47 
hash
 += hash >> 17;

51 
hash
 +()(*
key
);

52 
hash
 ^= hash << 10;

53 
hash
 += hash >> 1;

60 
hash
 ^= hash << 3;

61 
hash
 += hash >> 5;

62 
hash
 ^= hash << 4;

63 
hash
 += hash >> 17;

64 
hash
 ^= hash << 25;

65 
hash
 += hash >> 6;

67  
hash
;

68 
	}
}

	@dep/dhashkit/djenkins.c

1 
	~<dhashkô.h
>

3 
	#hashsize
(
n
Ë((
uöt32_t
)1<<“))

	)

4 
	#hashmask
(
n
Ë(
	`hashsize
“)-1)

	)

5 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë| ((x)>>(32-(k))))

	)

7 
	#mix
(
a
,
b
,
c
) \

9 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

10 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

11 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

12 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

13 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

14 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

15 }

	)

17 
	#föÆ
(
a
,
b
,
c
) \

19 
c
 ^
b
; c -
	`rŸ
(b,14); \

20 
a
 ^
c
;á -
	`rŸ
(c,11); \

21 
b
 ^
a
; b -
	`rŸ
(a,25); \

22 
c
 ^
b
; c -
	`rŸ
(b,16); \

23 
a
 ^
c
;á -
	`rŸ
(c,4); \

24 
b
 ^
a
; b -
	`rŸ
(a,14); \

25 
c
 ^
b
; c -
	`rŸ
(b,24); \

26 }

	)

28 
	#JENKINS_INITVAL
 13

	)

46 
uöt32_t


47 
	$hash_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
)

49 
uöt32_t
 
a
,
b
,
c
;

50 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

53 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
JENKINS_INITVAL
;

55 
u
.
±r
 = 
key
;

56 #i‚de‡
WORDS_BIGENDIAN


57 i‡((
u
.
i
 & 0x3) == 0)

59 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

62 
Àngth
 > 12)

64 
a
 +
k
[0];

65 
b
 +
k
[1];

66 
c
 +
k
[2];

67 
	`mix
(
a
,
b
,
c
);

68 
Àngth
 -= 12;

69 
k
 += 3;

82 
Àngth
)

84 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

85 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

86 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

87 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

88 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

89 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

90 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

91 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

92 4 : 
a
+=
k
[0]; ;

93 3 : 
a
+=
k
[0]&0xffffff; ;

94 2 : 
a
+=
k
[0]&0xffff; ;

95 1 : 
a
+=
k
[0]&0xff; ;

96 0 :  
c
;

97 :  
c
;

101 i‡((
u
.
i
 & 0x1) == 0)

103 c⁄° 
uöt16_t
 *
k
 = (c⁄° uöt16_à*)
key
;

104 c⁄° 
uöt8_t
 *
k8
;

107 
Àngth
 > 12)

109 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

110 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

111 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

112 
	`mix
(
a
,
b
,
c
);

113 
Àngth
 -= 12;

114 
k
 += 6;

118 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

119 
Àngth
)

121 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

122 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

123 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

125 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

126 10: 
c
+=
k
[4];

127 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

128 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

130 9 : 
c
+=
k8
[8];

131 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

132 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

134 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

135 6 : 
b
+=
k
[2];

136 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

138 5 : 
b
+=
k8
[4];

139 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

141 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

142 2 : 
a
+=
k
[0];

144 1 : 
a
+=
k8
[0];

146 0 :  
c
;

147 :  
c
;

154 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

157 
Àngth
 > 12)

159 
a
 +
k
[0];

160 
a
 +((
uöt32_t
)
k
[1])<<8;

161 
a
 +((
uöt32_t
)
k
[2])<<16;

162 
a
 +((
uöt32_t
)
k
[3])<<24;

163 
b
 +
k
[4];

164 
b
 +((
uöt32_t
)
k
[5])<<8;

165 
b
 +((
uöt32_t
)
k
[6])<<16;

166 
b
 +((
uöt32_t
)
k
[7])<<24;

167 
c
 +
k
[8];

168 
c
 +((
uöt32_t
)
k
[9])<<8;

169 
c
 +((
uöt32_t
)
k
[10])<<16;

170 
c
 +((
uöt32_t
)
k
[11])<<24;

171 
	`mix
(
a
,
b
,
c
);

172 
Àngth
 -= 12;

173 
k
 += 12;

177 
Àngth
)

179 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

180 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

181 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

182 9 : 
c
+=
k
[8];

183 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

184 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

185 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

186 5 : 
b
+=
k
[4];

187 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

188 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

189 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

190 1 : 
a
+=
k
[0];

192 0 :  
c
;

193  :  
c
;

195 #i‚de‡
WORDS_BIGENDIAN


199 
	`föÆ
(
a
,
b
,
c
);

200  
c
;

201 
	}
}

	@dep/dhashkit/djenkins.c

1 
	~<dhashkô.h
>

3 
	#hashsize
(
n
Ë((
uöt32_t
)1<<“))

	)

4 
	#hashmask
(
n
Ë(
	`hashsize
“)-1)

	)

5 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë| ((x)>>(32-(k))))

	)

7 
	#mix
(
a
,
b
,
c
) \

9 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

10 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

11 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

12 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

13 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

14 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

15 }

	)

17 
	#föÆ
(
a
,
b
,
c
) \

19 
c
 ^
b
; c -
	`rŸ
(b,14); \

20 
a
 ^
c
;á -
	`rŸ
(c,11); \

21 
b
 ^
a
; b -
	`rŸ
(a,25); \

22 
c
 ^
b
; c -
	`rŸ
(b,16); \

23 
a
 ^
c
;á -
	`rŸ
(c,4); \

24 
b
 ^
a
; b -
	`rŸ
(a,14); \

25 
c
 ^
b
; c -
	`rŸ
(b,24); \

26 }

	)

28 
	#JENKINS_INITVAL
 13

	)

46 
uöt32_t


47 
	$hash_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
)

49 
uöt32_t
 
a
,
b
,
c
;

50 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

53 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
JENKINS_INITVAL
;

55 
u
.
±r
 = 
key
;

56 #i‚de‡
WORDS_BIGENDIAN


57 i‡((
u
.
i
 & 0x3) == 0)

59 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

62 
Àngth
 > 12)

64 
a
 +
k
[0];

65 
b
 +
k
[1];

66 
c
 +
k
[2];

67 
	`mix
(
a
,
b
,
c
);

68 
Àngth
 -= 12;

69 
k
 += 3;

82 
Àngth
)

84 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

85 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

86 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

87 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

88 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

89 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

90 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

91 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

92 4 : 
a
+=
k
[0]; ;

93 3 : 
a
+=
k
[0]&0xffffff; ;

94 2 : 
a
+=
k
[0]&0xffff; ;

95 1 : 
a
+=
k
[0]&0xff; ;

96 0 :  
c
;

97 :  
c
;

101 i‡((
u
.
i
 & 0x1) == 0)

103 c⁄° 
uöt16_t
 *
k
 = (c⁄° uöt16_à*)
key
;

104 c⁄° 
uöt8_t
 *
k8
;

107 
Àngth
 > 12)

109 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

110 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

111 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

112 
	`mix
(
a
,
b
,
c
);

113 
Àngth
 -= 12;

114 
k
 += 6;

118 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

119 
Àngth
)

121 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

122 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

123 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

125 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

126 10: 
c
+=
k
[4];

127 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

128 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

130 9 : 
c
+=
k8
[8];

131 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

132 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

134 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

135 6 : 
b
+=
k
[2];

136 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

138 5 : 
b
+=
k8
[4];

139 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

141 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

142 2 : 
a
+=
k
[0];

144 1 : 
a
+=
k8
[0];

146 0 :  
c
;

147 :  
c
;

154 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

157 
Àngth
 > 12)

159 
a
 +
k
[0];

160 
a
 +((
uöt32_t
)
k
[1])<<8;

161 
a
 +((
uöt32_t
)
k
[2])<<16;

162 
a
 +((
uöt32_t
)
k
[3])<<24;

163 
b
 +
k
[4];

164 
b
 +((
uöt32_t
)
k
[5])<<8;

165 
b
 +((
uöt32_t
)
k
[6])<<16;

166 
b
 +((
uöt32_t
)
k
[7])<<24;

167 
c
 +
k
[8];

168 
c
 +((
uöt32_t
)
k
[9])<<8;

169 
c
 +((
uöt32_t
)
k
[10])<<16;

170 
c
 +((
uöt32_t
)
k
[11])<<24;

171 
	`mix
(
a
,
b
,
c
);

172 
Àngth
 -= 12;

173 
k
 += 12;

177 
Àngth
)

179 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

180 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

181 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

182 9 : 
c
+=
k
[8];

183 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

184 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

185 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

186 5 : 
b
+=
k
[4];

187 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

188 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

189 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

190 1 : 
a
+=
k
[0];

192 0 :  
c
;

193  :  
c
;

195 #i‚de‡
WORDS_BIGENDIAN


199 
	`föÆ
(
a
,
b
,
c
);

200  
c
;

201 
	}
}

	@dep/dhashkit/dketama.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

5 
	~<dhashkô.h
>

7 
	#KETAMA_CONTINUUM_ADDITION
 10

	)

8 
	#KETAMA_POINTS_PER_SERVER
 160

	)

9 
	#KETAMA_MAX_HOSTLEN
 86

	)

11 
uöt32_t


12 
	$këama_hash
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
uöt32_t
 
Æignmít
)

14 
ªsu…s
[16];

16 
	`md5_sig«tuª
((c⁄° *)
key
, ()
key_Àngth
, 
ªsu…s
);

18  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

19 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

20 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

21 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

22 
	}
}

25 
	$këama_ôem_cmp
(c⁄° *
t1
, c⁄° *
t2
)

27 c⁄° 
c⁄töuum
 *
˘1
 = 
t1
, *
˘2
 = 
t2
;

29 i‡(
˘1
->
vÆue
 =
˘2
->value) {

31 } i‡(
˘1
->
vÆue
 > 
˘2
->value) {

36 
	}
}

38 
uöt32_t


39 
	$këama_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

41 
c⁄töuum
 *
begö
, *
íd
, *
À·
, *
right
, *
middÀ
;

43 
	`ASSERT
(
c⁄töuum
 !
NULL
);

44 
	`ASSERT
(
nc⁄töuum
 != 0);

46 
begö
 = 
À·
 = 
c⁄töuum
;

47 
íd
 = 
right
 = 
c⁄töuum
 + 
nc⁄töuum
;

49 
À·
 < 
right
) {

50 
middÀ
 = 
À·
 + (
right
 -Üeft) / 2;

51 i‡(
middÀ
->
vÆue
 < 
hash
) {

52 
À·
 = 
middÀ
 + 1;

54 
right
 = 
middÀ
;

58 i‡(
right
 =
íd
) {

59 
right
 = 
begö
;

62  
right
->
ödex
;

63 
	}
}

	@dep/dhashkit/dketama.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

5 
	~<dhashkô.h
>

7 
	#KETAMA_CONTINUUM_ADDITION
 10

	)

8 
	#KETAMA_POINTS_PER_SERVER
 160

	)

9 
	#KETAMA_MAX_HOSTLEN
 86

	)

11 
uöt32_t


12 
	$këama_hash
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
uöt32_t
 
Æignmít
)

14 
ªsu…s
[16];

16 
	`md5_sig«tuª
((c⁄° *)
key
, ()
key_Àngth
, 
ªsu…s
);

18  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

19 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

20 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

21 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

22 
	}
}

25 
	$këama_ôem_cmp
(c⁄° *
t1
, c⁄° *
t2
)

27 c⁄° 
c⁄töuum
 *
˘1
 = 
t1
, *
˘2
 = 
t2
;

29 i‡(
˘1
->
vÆue
 =
˘2
->value) {

31 } i‡(
˘1
->
vÆue
 > 
˘2
->value) {

36 
	}
}

38 
uöt32_t


39 
	$këama_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

41 
c⁄töuum
 *
begö
, *
íd
, *
À·
, *
right
, *
middÀ
;

43 
	`ASSERT
(
c⁄töuum
 !
NULL
);

44 
	`ASSERT
(
nc⁄töuum
 != 0);

46 
begö
 = 
À·
 = 
c⁄töuum
;

47 
íd
 = 
right
 = 
c⁄töuum
 + 
nc⁄töuum
;

49 
À·
 < 
right
) {

50 
middÀ
 = 
À·
 + (
right
 -Üeft) / 2;

51 i‡(
middÀ
->
vÆue
 < 
hash
) {

52 
À·
 = 
middÀ
 + 1;

54 
right
 = 
middÀ
;

58 i‡(
right
 =
íd
) {

59 
right
 = 
begö
;

62  
right
->
ödex
;

63 
	}
}

	@dep/dhashkit/dmd5.c

1 
	~<°rög.h
>

3 
	~<dhashkô.h
>

14 
	tMD5_u32∂us
;

17 
MD5_u32∂us
 
	mlo
, 
	mhi
;

18 
MD5_u32∂us
 
	ma
, 
	mb
, 
	mc
, 
	md
;

19 
	mbuf„r
[64];

20 
MD5_u32∂us
 
	mblock
[16];

21 } 
	tMD5_CTX
;

30 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

31 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

32 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

33 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

38 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

39 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

40 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

41 (
a
Ë+(
b
);

	)

51 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__vax__
)

52 
	#SET
(
n
) \

53 (*(
MD5_u32∂us
 *)&
±r
[(
n
Ë* 4])

	)

54 
	#GET
(
n
) \

55 
	`SET
(
n
)

	)

57 
	#SET
(
n
) \

58 (
˘x
->
block
[(
n
)] = \

59 (
MD5_u32∂us
)
±r
[(
n
) * 4] | \

60 ((
MD5_u32∂us
)
±r
[(
n
) * 4 + 1] << 8) | \

61 ((
MD5_u32∂us
)
±r
[(
n
) * 4 + 2] << 16) | \

62 ((
MD5_u32∂us
)
±r
[(
n
Ë* 4 + 3] << 24))

	)

63 
	#GET
(
n
) \

64 (
˘x
->
block
[(
n
)])

	)

72 
	$body
(
MD5_CTX
 *
˘x
, *
d©a
, 
size
)

74 *
±r
;

75 
MD5_u32∂us
 
a
, 
b
, 
c
, 
d
;

76 
MD5_u32∂us
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

78 
±r
 = 
d©a
;

80 
a
 = 
˘x
->a;

81 
b
 = 
˘x
->b;

82 
c
 = 
˘x
->c;

83 
d
 = 
˘x
->d;

86 
ßved_a
 = 
a
;

87 
ßved_b
 = 
b
;

88 
ßved_c
 = 
c
;

89 
ßved_d
 = 
d
;

92 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7)

93 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12)

94 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17)

95 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22)

96 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7)

97 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12)

98 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17)

99 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22)

100 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7)

101 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12)

102 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17)

103 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22)

104 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7)

105 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12)

106 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17)

107 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22)

110 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5)

111 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9)

112 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14)

113 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20)

114 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5)

115 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9)

116 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14)

117 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20)

118 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5)

119 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9)

120 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14)

121 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20)

122 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5)

123 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9)

124 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14)

125 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20)

128 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4)

129 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11)

130 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16)

131 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23)

132 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4)

133 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11)

134 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16)

135 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23)

136 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4)

137 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11)

138 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16)

139 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23)

140 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4)

141 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11)

142 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16)

143 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23)

146 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6)

147 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10)

148 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15)

149 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21)

150 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6)

151 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10)

152 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15)

153 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21)

154 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6)

155 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10)

156 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15)

157 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21)

158 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6)

159 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10)

160 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15)

161 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21)

163 
a
 +
ßved_a
;

164 
b
 +
ßved_b
;

165 
c
 +
ßved_c
;

166 
d
 +
ßved_d
;

168 
±r
 += 64;

169 } 
size
 -= 64);

171 
˘x
->
a
 =á;

172 
˘x
->
b
 = b;

173 
˘x
->
c
 = c;

174 
˘x
->
d
 = d;

176  
±r
;

177 
	}
}

180 
	$MD5_Inô
(
MD5_CTX
 *
˘x
)

182 
˘x
->
a
 = 0x67452301;

183 
˘x
->
b
 = 0xefcdab89;

184 
˘x
->
c
 = 0x98badcfe;

185 
˘x
->
d
 = 0x10325476;

187 
˘x
->
lo
 = 0;

188 
˘x
->
hi
 = 0;

189 
	}
}

192 
	$MD5_Upd©e
(
MD5_CTX
 *
˘x
, *
d©a
, 
size
)

194 
MD5_u32∂us
 
ßved_lo
;

195 
u£d
, 
‰ì
;

197 
ßved_lo
 = 
˘x
->
lo
;

198 i‡((
˘x
->
lo
 = (
ßved_lo
 + 
size
) & 0x1fffffff) < saved_lo) {

199 
˘x
->
hi
++;

201 
˘x
->
hi
 +
size
 >> 29;

203 
u£d
 = 
ßved_lo
 & 0x3f;

205 i‡(
u£d
) {

206 
‰ì
 = 64 - 
u£d
;

208 i‡(
size
 < 
‰ì
) {

209 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

213 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

214 
d©a
 = (*)d©®+ 
‰ì
;

215 
size
 -
‰ì
;

216 
	`body
(
˘x
, ctx->
buf„r
, 64);

219 i‡(
size
 >= 64) {

220 
d©a
 = 
	`body
(
˘x
, d©a, 
size
 & ~()0x3f);

221 
size
 &= 0x3f;

224 
	`mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

225 
	}
}

228 
	$MD5_FöÆ
(*
ªsu…
, 
MD5_CTX
 *
˘x
)

230 
u£d
, 
‰ì
;

232 
u£d
 = 
˘x
->
lo
 & 0x3f;

234 
˘x
->
buf„r
[
u£d
++] = 0x80;

236 
‰ì
 = 64 - 
u£d
;

238 i‡(
‰ì
 < 8) {

239 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
‰ì
);

240 
	`body
(
˘x
, ctx->
buf„r
, 64);

241 
u£d
 = 0;

242 
‰ì
 = 64;

245 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
‰ì
 - 8);

247 
˘x
->
lo
 <<= 3;

248 
˘x
->
buf„r
[56] = ctx->
lo
;

249 
˘x
->
buf„r
[57] = ctx->
lo
 >> 8;

250 
˘x
->
buf„r
[58] = ctx->
lo
 >> 16;

251 
˘x
->
buf„r
[59] = ctx->
lo
 >> 24;

252 
˘x
->
buf„r
[60] = ctx->
hi
;

253 
˘x
->
buf„r
[61] = ctx->
hi
 >> 8;

254 
˘x
->
buf„r
[62] = ctx->
hi
 >> 16;

255 
˘x
->
buf„r
[63] = ctx->
hi
 >> 24;

257 
	`body
(
˘x
, ctx->
buf„r
, 64);

259 
ªsu…
[0] = 
˘x
->
a
;

260 
ªsu…
[1] = 
˘x
->
a
 >> 8;

261 
ªsu…
[2] = 
˘x
->
a
 >> 16;

262 
ªsu…
[3] = 
˘x
->
a
 >> 24;

263 
ªsu…
[4] = 
˘x
->
b
;

264 
ªsu…
[5] = 
˘x
->
b
 >> 8;

265 
ªsu…
[6] = 
˘x
->
b
 >> 16;

266 
ªsu…
[7] = 
˘x
->
b
 >> 24;

267 
ªsu…
[8] = 
˘x
->
c
;

268 
ªsu…
[9] = 
˘x
->
c
 >> 8;

269 
ªsu…
[10] = 
˘x
->
c
 >> 16;

270 
ªsu…
[11] = 
˘x
->
c
 >> 24;

271 
ªsu…
[12] = 
˘x
->
d
;

272 
ªsu…
[13] = 
˘x
->
d
 >> 8;

273 
ªsu…
[14] = 
˘x
->
d
 >> 16;

274 
ªsu…
[15] = 
˘x
->
d
 >> 24;

276 
	`mem£t
(
˘x
, 0, (*ctx));

277 
	}
}

284 
	$md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
)

286 
MD5_CTX
 
my_md5
;

288 
	`MD5_Inô
(&
my_md5
);

289 ()
	`MD5_Upd©e
(&
my_md5
, 
key
, 
Àngth
);

290 
	`MD5_FöÆ
(
ªsu…
, &
my_md5
);

291 
	}
}

293 
uöt32_t


294 
	$hash_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
)

296 
ªsu…s
[16];

298 
	`md5_sig«tuª
((c⁄° *)
key
, ()
key_Àngth
, 
ªsu…s
);

300  ((
uöt32_t
Ë(
ªsu…s
[3] & 0xFF) << 24) |

301 ((
uöt32_t
Ë(
ªsu…s
[2] & 0xFF) << 16) |

302 ((
uöt32_t
Ë(
ªsu…s
[1] & 0xFF) << 8) |

303 (
ªsu…s
[0] & 0xFF);

304 
	}
}

	@dep/dhashkit/dmd5.c

1 
	~<°rög.h
>

3 
	~<dhashkô.h
>

14 
	tMD5_u32∂us
;

17 
MD5_u32∂us
 
	mlo
, 
	mhi
;

18 
MD5_u32∂us
 
	ma
, 
	mb
, 
	mc
, 
	md
;

19 
	mbuf„r
[64];

20 
MD5_u32∂us
 
	mblock
[16];

21 } 
	tMD5_CTX
;

30 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

31 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

32 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

33 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

38 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

39 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

40 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

41 (
a
Ë+(
b
);

	)

51 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__vax__
)

52 
	#SET
(
n
) \

53 (*(
MD5_u32∂us
 *)&
±r
[(
n
Ë* 4])

	)

54 
	#GET
(
n
) \

55 
	`SET
(
n
)

	)

57 
	#SET
(
n
) \

58 (
˘x
->
block
[(
n
)] = \

59 (
MD5_u32∂us
)
±r
[(
n
) * 4] | \

60 ((
MD5_u32∂us
)
±r
[(
n
) * 4 + 1] << 8) | \

61 ((
MD5_u32∂us
)
±r
[(
n
) * 4 + 2] << 16) | \

62 ((
MD5_u32∂us
)
±r
[(
n
Ë* 4 + 3] << 24))

	)

63 
	#GET
(
n
) \

64 (
˘x
->
block
[(
n
)])

	)

72 
	$body
(
MD5_CTX
 *
˘x
, *
d©a
, 
size
)

74 *
±r
;

75 
MD5_u32∂us
 
a
, 
b
, 
c
, 
d
;

76 
MD5_u32∂us
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

78 
±r
 = 
d©a
;

80 
a
 = 
˘x
->a;

81 
b
 = 
˘x
->b;

82 
c
 = 
˘x
->c;

83 
d
 = 
˘x
->d;

86 
ßved_a
 = 
a
;

87 
ßved_b
 = 
b
;

88 
ßved_c
 = 
c
;

89 
ßved_d
 = 
d
;

92 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7)

93 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12)

94 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17)

95 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22)

96 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7)

97 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12)

98 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17)

99 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22)

100 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7)

101 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12)

102 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17)

103 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22)

104 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7)

105 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12)

106 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17)

107 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22)

110 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5)

111 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9)

112 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14)

113 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20)

114 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5)

115 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9)

116 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14)

117 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20)

118 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5)

119 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9)

120 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14)

121 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20)

122 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5)

123 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9)

124 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14)

125 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20)

128 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4)

129 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11)

130 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16)

131 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23)

132 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4)

133 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11)

134 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16)

135 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23)

136 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4)

137 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11)

138 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16)

139 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23)

140 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4)

141 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11)

142 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16)

143 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23)

146 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6)

147 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10)

148 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15)

149 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21)

150 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6)

151 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10)

152 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15)

153 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21)

154 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6)

155 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10)

156 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15)

157 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21)

158 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6)

159 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10)

160 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15)

161 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21)

163 
a
 +
ßved_a
;

164 
b
 +
ßved_b
;

165 
c
 +
ßved_c
;

166 
d
 +
ßved_d
;

168 
±r
 += 64;

169 } 
size
 -= 64);

171 
˘x
->
a
 =á;

172 
˘x
->
b
 = b;

173 
˘x
->
c
 = c;

174 
˘x
->
d
 = d;

176  
±r
;

177 
	}
}

180 
	$MD5_Inô
(
MD5_CTX
 *
˘x
)

182 
˘x
->
a
 = 0x67452301;

183 
˘x
->
b
 = 0xefcdab89;

184 
˘x
->
c
 = 0x98badcfe;

185 
˘x
->
d
 = 0x10325476;

187 
˘x
->
lo
 = 0;

188 
˘x
->
hi
 = 0;

189 
	}
}

192 
	$MD5_Upd©e
(
MD5_CTX
 *
˘x
, *
d©a
, 
size
)

194 
MD5_u32∂us
 
ßved_lo
;

195 
u£d
, 
‰ì
;

197 
ßved_lo
 = 
˘x
->
lo
;

198 i‡((
˘x
->
lo
 = (
ßved_lo
 + 
size
) & 0x1fffffff) < saved_lo) {

199 
˘x
->
hi
++;

201 
˘x
->
hi
 +
size
 >> 29;

203 
u£d
 = 
ßved_lo
 & 0x3f;

205 i‡(
u£d
) {

206 
‰ì
 = 64 - 
u£d
;

208 i‡(
size
 < 
‰ì
) {

209 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

213 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

214 
d©a
 = (*)d©®+ 
‰ì
;

215 
size
 -
‰ì
;

216 
	`body
(
˘x
, ctx->
buf„r
, 64);

219 i‡(
size
 >= 64) {

220 
d©a
 = 
	`body
(
˘x
, d©a, 
size
 & ~()0x3f);

221 
size
 &= 0x3f;

224 
	`mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

225 
	}
}

228 
	$MD5_FöÆ
(*
ªsu…
, 
MD5_CTX
 *
˘x
)

230 
u£d
, 
‰ì
;

232 
u£d
 = 
˘x
->
lo
 & 0x3f;

234 
˘x
->
buf„r
[
u£d
++] = 0x80;

236 
‰ì
 = 64 - 
u£d
;

238 i‡(
‰ì
 < 8) {

239 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
‰ì
);

240 
	`body
(
˘x
, ctx->
buf„r
, 64);

241 
u£d
 = 0;

242 
‰ì
 = 64;

245 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
‰ì
 - 8);

247 
˘x
->
lo
 <<= 3;

248 
˘x
->
buf„r
[56] = ctx->
lo
;

249 
˘x
->
buf„r
[57] = ctx->
lo
 >> 8;

250 
˘x
->
buf„r
[58] = ctx->
lo
 >> 16;

251 
˘x
->
buf„r
[59] = ctx->
lo
 >> 24;

252 
˘x
->
buf„r
[60] = ctx->
hi
;

253 
˘x
->
buf„r
[61] = ctx->
hi
 >> 8;

254 
˘x
->
buf„r
[62] = ctx->
hi
 >> 16;

255 
˘x
->
buf„r
[63] = ctx->
hi
 >> 24;

257 
	`body
(
˘x
, ctx->
buf„r
, 64);

259 
ªsu…
[0] = 
˘x
->
a
;

260 
ªsu…
[1] = 
˘x
->
a
 >> 8;

261 
ªsu…
[2] = 
˘x
->
a
 >> 16;

262 
ªsu…
[3] = 
˘x
->
a
 >> 24;

263 
ªsu…
[4] = 
˘x
->
b
;

264 
ªsu…
[5] = 
˘x
->
b
 >> 8;

265 
ªsu…
[6] = 
˘x
->
b
 >> 16;

266 
ªsu…
[7] = 
˘x
->
b
 >> 24;

267 
ªsu…
[8] = 
˘x
->
c
;

268 
ªsu…
[9] = 
˘x
->
c
 >> 8;

269 
ªsu…
[10] = 
˘x
->
c
 >> 16;

270 
ªsu…
[11] = 
˘x
->
c
 >> 24;

271 
ªsu…
[12] = 
˘x
->
d
;

272 
ªsu…
[13] = 
˘x
->
d
 >> 8;

273 
ªsu…
[14] = 
˘x
->
d
 >> 16;

274 
ªsu…
[15] = 
˘x
->
d
 >> 24;

276 
	`mem£t
(
˘x
, 0, (*ctx));

277 
	}
}

284 
	$md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
)

286 
MD5_CTX
 
my_md5
;

288 
	`MD5_Inô
(&
my_md5
);

289 ()
	`MD5_Upd©e
(&
my_md5
, 
key
, 
Àngth
);

290 
	`MD5_FöÆ
(
ªsu…
, &
my_md5
);

291 
	}
}

293 
uöt32_t


294 
	$hash_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
)

296 
ªsu…s
[16];

298 
	`md5_sig«tuª
((c⁄° *)
key
, ()
key_Àngth
, 
ªsu…s
);

300  ((
uöt32_t
Ë(
ªsu…s
[3] & 0xFF) << 24) |

301 ((
uöt32_t
Ë(
ªsu…s
[2] & 0xFF) << 16) |

302 ((
uöt32_t
Ë(
ªsu…s
[1] & 0xFF) << 8) |

303 (
ªsu…s
[0] & 0xFF);

304 
	}
}

	@dep/dhashkit/dmodula.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<dhashkô.h
>

6 
	#MODULA_CONTINUUM_ADDITION
 10

	)

7 
	#MODULA_POINTS_PER_SERVER
 1

	)

9 
uöt32_t


10 
	$moduœ_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

12 
c⁄töuum
 *
c
;

14 
	`ASSERT
(
c⁄töuum
 !
NULL
);

15 
	`ASSERT
(
nc⁄töuum
 != 0);

17 
c
 = 
c⁄töuum
 + 
hash
 % 
nc⁄töuum
;

19  
c
->
ödex
;

20 
	}
}

	@dep/dhashkit/dmodula.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<dhashkô.h
>

6 
	#MODULA_CONTINUUM_ADDITION
 10

	)

7 
	#MODULA_POINTS_PER_SERVER
 1

	)

9 
uöt32_t


10 
	$moduœ_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

12 
c⁄töuum
 *
c
;

14 
	`ASSERT
(
c⁄töuum
 !
NULL
);

15 
	`ASSERT
(
nc⁄töuum
 != 0);

17 
c
 = 
c⁄töuum
 + 
hash
 % 
nc⁄töuum
;

19  
c
->
ödex
;

20 
	}
}

	@dep/dhashkit/dmurmur.c

18 
	~<dhashkô.h
>

20 
uöt32_t


21 
	$hash_murmur
(c⁄° *
key
, 
size_t
 
Àngth
)

28 c⁄° 
m
 = 0x5bd1e995;

29 c⁄° 
uöt32_t
 
£ed
 = (0xdódbì‡* (uöt32_t)
Àngth
);

30 c⁄° 
r
 = 24;

35 
uöt32_t
 
h
 = 
£ed
 ^ (uöt32_t)
Àngth
;

39 c⁄° * 
d©a
 = (c⁄° *)
key
;

41 
Àngth
 >= 4) {

42 
k
 = *(*)
d©a
;

44 
k
 *
m
;

45 
k
 ^k >> 
r
;

46 
k
 *
m
;

48 
h
 *
m
;

49 
h
 ^
k
;

51 
d©a
 += 4;

52 
Àngth
 -= 4;

57 
Àngth
) {

59 
h
 ^((
uöt32_t
)
d©a
[2]) << 16;

62 
h
 ^((
uöt32_t
)
d©a
[1]) << 8;

65 
h
 ^
d©a
[0];

66 
h
 *
m
;

77 
h
 ^= h >> 13;

78 
h
 *
m
;

79 
h
 ^= h >> 15;

81  
h
;

82 
	}
}

	@dep/dhashkit/dmurmur.c

18 
	~<dhashkô.h
>

20 
uöt32_t


21 
	$hash_murmur
(c⁄° *
key
, 
size_t
 
Àngth
)

28 c⁄° 
m
 = 0x5bd1e995;

29 c⁄° 
uöt32_t
 
£ed
 = (0xdódbì‡* (uöt32_t)
Àngth
);

30 c⁄° 
r
 = 24;

35 
uöt32_t
 
h
 = 
£ed
 ^ (uöt32_t)
Àngth
;

39 c⁄° * 
d©a
 = (c⁄° *)
key
;

41 
Àngth
 >= 4) {

42 
k
 = *(*)
d©a
;

44 
k
 *
m
;

45 
k
 ^k >> 
r
;

46 
k
 *
m
;

48 
h
 *
m
;

49 
h
 ^
k
;

51 
d©a
 += 4;

52 
Àngth
 -= 4;

57 
Àngth
) {

59 
h
 ^((
uöt32_t
)
d©a
[2]) << 16;

62 
h
 ^((
uöt32_t
)
d©a
[1]) << 8;

65 
h
 ^
d©a
[0];

66 
h
 *
m
;

77 
h
 ^= h >> 13;

78 
h
 *
m
;

79 
h
 ^= h >> 15;

81  
h
;

82 
	}
}

	@dep/dhashkit/done_at_a_time.c

15 
	~<dhashkô.h
>

17 
uöt32_t


18 
	$hash_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
)

20 c⁄° *
±r
 = 
key
;

21 
uöt32_t
 
vÆue
 = 0;

23 
key_Àngth
--) {

24 
uöt32_t
 
vÆ
 = (uöt32_tË*
±r
++;

25 
vÆue
 +
vÆ
;

26 
vÆue
 += (value << 10);

27 
vÆue
 ^= (value >> 6);

29 
vÆue
 += (value << 3);

30 
vÆue
 ^= (value >> 11);

31 
vÆue
 += (value << 15);

33  
vÆue
;

34 
	}
}

	@dep/dhashkit/done_at_a_time.c

15 
	~<dhashkô.h
>

17 
uöt32_t


18 
	$hash_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
)

20 c⁄° *
±r
 = 
key
;

21 
uöt32_t
 
vÆue
 = 0;

23 
key_Àngth
--) {

24 
uöt32_t
 
vÆ
 = (uöt32_tË*
±r
++;

25 
vÆue
 +
vÆ
;

26 
vÆue
 += (value << 10);

27 
vÆue
 ^= (value >> 6);

29 
vÆue
 += (value << 3);

30 
vÆue
 ^= (value >> 11);

31 
vÆue
 += (value << 15);

33  
vÆue
;

34 
	}
}

	@dep/dhashkit/drandom.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<dhashkô.h
>

6 
	#RANDOM_CONTINUUM_ADDITION
 10

	)

7 
	#RANDOM_POINTS_PER_SERVER
 1

	)

9 
uöt32_t


10 
	$øndom_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

12 
c⁄töuum
 *
c
;

14 
	`ASSERT
(
c⁄töuum
 !
NULL
);

15 
	`ASSERT
(
nc⁄töuum
 != 0);

17 
c
 = 
c⁄töuum
 + 
	`øndom
(Ë% 
nc⁄töuum
;

19  
c
->
ödex
;

20 
	}
}

	@dep/dhashkit/drandom.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<dhashkô.h
>

6 
	#RANDOM_CONTINUUM_ADDITION
 10

	)

7 
	#RANDOM_POINTS_PER_SERVER
 1

	)

9 
uöt32_t


10 
	$øndom_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

12 
c⁄töuum
 *
c
;

14 
	`ASSERT
(
c⁄töuum
 !
NULL
);

15 
	`ASSERT
(
nc⁄töuum
 != 0);

17 
c
 = 
c⁄töuum
 + 
	`øndom
(Ë% 
nc⁄töuum
;

19  
c
->
ödex
;

20 
	}
}

	@dep/dhashkit/dsha1.c

22 
	#SHA1HANDSOFF


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°döt.h
>

28 
	~<dhashkô.h
>

30 
	#rﬁ
(
vÆue
, 
bôs
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

34 #ifde‡
VR_LITTLE_ENDIAN


35 
	#blk0
(
i
Ë(
block
->
l
[i] = (
	`rﬁ
(block->l[i],24)&0xFF00FF00) \

36 |(
	`rﬁ
(
block
->
l
[
i
],8)&0x00FF00FF))

	)

38 
	#blk0
(
i
Ë
block
->
l
[i]

	)

40 
	#blk
(
i
Ë(
block
->
l
[i&15] = 
	`rﬁ
(block->l[(i+13)&15]^block->l[(i+8)&15] \

41 ^
block
->
l
[(
i
+2)&15]^block->l[i&15],1))

	)

44 
	#R0
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk0
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

45 
	#R1
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

46 
	#R2
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0x6ED9EBA1+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

47 
	#R3
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(((w|x)&y)|(w&x))+
	`blk
(i)+0x8F1BBCDC+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

48 
	#R4
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0xCA62C1D6+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

53 
	$SHA1Tønsf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64])

55 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

57 
c
[64];

58 
uöt32_t
 
l
[16];

59 } 
	tCHAR64LONG16
;

60 #ifde‡
SHA1HANDSOFF


61 
CHAR64LONG16
 
block
[1];

62 
	`mem˝y
(
block
, 
buf„r
, 64);

69 
CHAR64LONG16
* 
block
 = (c⁄° CHAR64LONG16*)
buf„r
;

72 
a
 = 
°©e
[0];

73 
b
 = 
°©e
[1];

74 
c
 = 
°©e
[2];

75 
d
 = 
°©e
[3];

76 
e
 = 
°©e
[4];

78 
	`R0
(
a
,
b
,
c
,
d
,
e
, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);

79 
	`R0
(
b
,
c
,
d
,
e
,
a
, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);

80 
	`R0
(
c
,
d
,
e
,
a
,
b
, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);

81 
	`R0
(
d
,
e
,
a
,
b
,
c
,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);

82 
	`R1
(
e
,
a
,
b
,
c
,
d
,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);

83 
	`R2
(
a
,
b
,
c
,
d
,
e
,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);

84 
	`R2
(
b
,
c
,
d
,
e
,
a
,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);

85 
	`R2
(
c
,
d
,
e
,
a
,
b
,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);

86 
	`R2
(
d
,
e
,
a
,
b
,
c
,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);

87 
	`R2
(
e
,
a
,
b
,
c
,
d
,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);

88 
	`R3
(
a
,
b
,
c
,
d
,
e
,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);

89 
	`R3
(
b
,
c
,
d
,
e
,
a
,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);

90 
	`R3
(
c
,
d
,
e
,
a
,
b
,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);

91 
	`R3
(
d
,
e
,
a
,
b
,
c
,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);

92 
	`R3
(
e
,
a
,
b
,
c
,
d
,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);

93 
	`R4
(
a
,
b
,
c
,
d
,
e
,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);

94 
	`R4
(
b
,
c
,
d
,
e
,
a
,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);

95 
	`R4
(
c
,
d
,
e
,
a
,
b
,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);

96 
	`R4
(
d
,
e
,
a
,
b
,
c
,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);

97 
	`R4
(
e
,
a
,
b
,
c
,
d
,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);

99 
°©e
[0] +
a
;

100 
°©e
[1] +
b
;

101 
°©e
[2] +
c
;

102 
°©e
[3] +
d
;

103 
°©e
[4] +
e
;

105 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 0;

106 #ifde‡
SHA1HANDSOFF


107 
	`mem£t
(
block
, '\0', (block));

109 
	}
}

114 
	$SHA1Inô
(
SHA1_CTX
* 
c⁄ãxt
)

117 
c⁄ãxt
->
°©e
[0] = 0x67452301;

118 
c⁄ãxt
->
°©e
[1] = 0xEFCDAB89;

119 
c⁄ãxt
->
°©e
[2] = 0x98BADCFE;

120 
c⁄ãxt
->
°©e
[3] = 0x10325476;

121 
c⁄ãxt
->
°©e
[4] = 0xC3D2E1F0;

122 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

123 
	}
}

128 
	$SHA1Upd©e
(
SHA1_CTX
* 
c⁄ãxt
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
)

130 
uöt32_t
 
i
, 
j
;

132 
j
 = 
c⁄ãxt
->
cou¡
[0];

133 i‡((
c⁄ãxt
->
cou¡
[0] +
Àn
 << 3Ë< 
j
)

134 
c⁄ãxt
->
cou¡
[1]++;

135 
c⁄ãxt
->
cou¡
[1] +(
Àn
>>29);

136 
j
 = (j >> 3) & 63;

137 i‡((
j
 + 
Àn
) > 63) {

138 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, (
i
 = 64-j));

139 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

140  ; 
i
 + 63 < 
Àn
; i += 64) {

141 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, &
d©a
[
i
]);

143 
j
 = 0;

145 
i
 = 0;

146 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], &
d©a
[
i
], 
Àn
 - i);

147 
	}
}

152 
	$SHA1FöÆ
(
dige°
[20], 
SHA1_CTX
* 
c⁄ãxt
)

154 
i
;

155 
föÆcou¡
[8];

156 
c
;

164 *
f˝
 = &
föÆcou¡
[8];

166 
i
 = 0; i < 2; i++)

168 
uöt32_t
 
t
 = 
c⁄ãxt
->
cou¡
[
i
];

169 
j
;

171 
j
 = 0; j < 4; 
t
 >>= 8, j++)

172 *--
f˝
 = (Ë
t
;

175 
i
 = 0; i < 8; i++) {

176 
föÆcou¡
[
i
] = ()((
c⁄ãxt
->
cou¡
[(i >= 4 ? 0 : 1)]

177 >> ((3-(
i
 & 3)) * 8) ) & 255);

180 
c
 = 0200;

181 
	`SHA1Upd©e
(
c⁄ãxt
, &
c
, 1);

182 (
c⁄ãxt
->
cou¡
[0] & 504) != 448) {

183 
c
 = 0000;

184 
	`SHA1Upd©e
(
c⁄ãxt
, &
c
, 1);

186 
	`SHA1Upd©e
(
c⁄ãxt
, 
föÆcou¡
, 8);

187 
i
 = 0; i < 20; i++) {

188 
dige°
[
i
] = ()

189 ((
c⁄ãxt
->
°©e
[
i
>>2] >> ((3-(i & 3)) * 8) ) & 255);

192 
	`mem£t
(
c⁄ãxt
, '\0', (*context));

193 
	`mem£t
(&
föÆcou¡
, '\0', (finalcount));

194 
	}
}

	@dep/dhashkit/dsha1.c

22 
	#SHA1HANDSOFF


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°döt.h
>

28 
	~<dhashkô.h
>

30 
	#rﬁ
(
vÆue
, 
bôs
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

34 #ifde‡
VR_LITTLE_ENDIAN


35 
	#blk0
(
i
Ë(
block
->
l
[i] = (
	`rﬁ
(block->l[i],24)&0xFF00FF00) \

36 |(
	`rﬁ
(
block
->
l
[
i
],8)&0x00FF00FF))

	)

38 
	#blk0
(
i
Ë
block
->
l
[i]

	)

40 
	#blk
(
i
Ë(
block
->
l
[i&15] = 
	`rﬁ
(block->l[(i+13)&15]^block->l[(i+8)&15] \

41 ^
block
->
l
[(
i
+2)&15]^block->l[i&15],1))

	)

44 
	#R0
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk0
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

45 
	#R1
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

46 
	#R2
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0x6ED9EBA1+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

47 
	#R3
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(((w|x)&y)|(w&x))+
	`blk
(i)+0x8F1BBCDC+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

48 
	#R4
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0xCA62C1D6+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

53 
	$SHA1Tønsf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64])

55 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

57 
c
[64];

58 
uöt32_t
 
l
[16];

59 } 
	tCHAR64LONG16
;

60 #ifde‡
SHA1HANDSOFF


61 
CHAR64LONG16
 
block
[1];

62 
	`mem˝y
(
block
, 
buf„r
, 64);

69 
CHAR64LONG16
* 
block
 = (c⁄° CHAR64LONG16*)
buf„r
;

72 
a
 = 
°©e
[0];

73 
b
 = 
°©e
[1];

74 
c
 = 
°©e
[2];

75 
d
 = 
°©e
[3];

76 
e
 = 
°©e
[4];

78 
	`R0
(
a
,
b
,
c
,
d
,
e
, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);

79 
	`R0
(
b
,
c
,
d
,
e
,
a
, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);

80 
	`R0
(
c
,
d
,
e
,
a
,
b
, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);

81 
	`R0
(
d
,
e
,
a
,
b
,
c
,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);

82 
	`R1
(
e
,
a
,
b
,
c
,
d
,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);

83 
	`R2
(
a
,
b
,
c
,
d
,
e
,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);

84 
	`R2
(
b
,
c
,
d
,
e
,
a
,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);

85 
	`R2
(
c
,
d
,
e
,
a
,
b
,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);

86 
	`R2
(
d
,
e
,
a
,
b
,
c
,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);

87 
	`R2
(
e
,
a
,
b
,
c
,
d
,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);

88 
	`R3
(
a
,
b
,
c
,
d
,
e
,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);

89 
	`R3
(
b
,
c
,
d
,
e
,
a
,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);

90 
	`R3
(
c
,
d
,
e
,
a
,
b
,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);

91 
	`R3
(
d
,
e
,
a
,
b
,
c
,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);

92 
	`R3
(
e
,
a
,
b
,
c
,
d
,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);

93 
	`R4
(
a
,
b
,
c
,
d
,
e
,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);

94 
	`R4
(
b
,
c
,
d
,
e
,
a
,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);

95 
	`R4
(
c
,
d
,
e
,
a
,
b
,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);

96 
	`R4
(
d
,
e
,
a
,
b
,
c
,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);

97 
	`R4
(
e
,
a
,
b
,
c
,
d
,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);

99 
°©e
[0] +
a
;

100 
°©e
[1] +
b
;

101 
°©e
[2] +
c
;

102 
°©e
[3] +
d
;

103 
°©e
[4] +
e
;

105 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 0;

106 #ifde‡
SHA1HANDSOFF


107 
	`mem£t
(
block
, '\0', (block));

109 
	}
}

114 
	$SHA1Inô
(
SHA1_CTX
* 
c⁄ãxt
)

117 
c⁄ãxt
->
°©e
[0] = 0x67452301;

118 
c⁄ãxt
->
°©e
[1] = 0xEFCDAB89;

119 
c⁄ãxt
->
°©e
[2] = 0x98BADCFE;

120 
c⁄ãxt
->
°©e
[3] = 0x10325476;

121 
c⁄ãxt
->
°©e
[4] = 0xC3D2E1F0;

122 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

123 
	}
}

128 
	$SHA1Upd©e
(
SHA1_CTX
* 
c⁄ãxt
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
)

130 
uöt32_t
 
i
, 
j
;

132 
j
 = 
c⁄ãxt
->
cou¡
[0];

133 i‡((
c⁄ãxt
->
cou¡
[0] +
Àn
 << 3Ë< 
j
)

134 
c⁄ãxt
->
cou¡
[1]++;

135 
c⁄ãxt
->
cou¡
[1] +(
Àn
>>29);

136 
j
 = (j >> 3) & 63;

137 i‡((
j
 + 
Àn
) > 63) {

138 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, (
i
 = 64-j));

139 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

140  ; 
i
 + 63 < 
Àn
; i += 64) {

141 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, &
d©a
[
i
]);

143 
j
 = 0;

145 
i
 = 0;

146 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], &
d©a
[
i
], 
Àn
 - i);

147 
	}
}

152 
	$SHA1FöÆ
(
dige°
[20], 
SHA1_CTX
* 
c⁄ãxt
)

154 
i
;

155 
föÆcou¡
[8];

156 
c
;

164 *
f˝
 = &
föÆcou¡
[8];

166 
i
 = 0; i < 2; i++)

168 
uöt32_t
 
t
 = 
c⁄ãxt
->
cou¡
[
i
];

169 
j
;

171 
j
 = 0; j < 4; 
t
 >>= 8, j++)

172 *--
f˝
 = (Ë
t
;

175 
i
 = 0; i < 8; i++) {

176 
föÆcou¡
[
i
] = ()((
c⁄ãxt
->
cou¡
[(i >= 4 ? 0 : 1)]

177 >> ((3-(
i
 & 3)) * 8) ) & 255);

180 
c
 = 0200;

181 
	`SHA1Upd©e
(
c⁄ãxt
, &
c
, 1);

182 (
c⁄ãxt
->
cou¡
[0] & 504) != 448) {

183 
c
 = 0000;

184 
	`SHA1Upd©e
(
c⁄ãxt
, &
c
, 1);

186 
	`SHA1Upd©e
(
c⁄ãxt
, 
föÆcou¡
, 8);

187 
i
 = 0; i < 20; i++) {

188 
dige°
[
i
] = ()

189 ((
c⁄ãxt
->
°©e
[
i
>>2] >> ((3-(i & 3)) * 8) ) & 255);

192 
	`mem£t
(
c⁄ãxt
, '\0', (*context));

193 
	`mem£t
(&
föÆcou¡
, '\0', (finalcount));

194 
	}
}

	@dep/dlist/dlist.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<dli°.h
>

13 
dli°
 *
	$dli°Cª©e
()

15 
dli°
 *
li°
;

17 i‡((
li°
 = 
	`dÆloc
((*li°))Ë=
NULL
)

18  
NULL
;

19 
li°
->
hód
 =Üi°->
èû
 = 
NULL
;

20 
li°
->
Àn
 = 0;

21 
li°
->
dup
 = 
NULL
;

22 
li°
->
‰ì
 = 
NULL
;

23 
li°
->
m©ch
 = 
NULL
;

24  
li°
;

25 
	}
}

31 
	$dli°Rñó£
(
dli°
 *
li°
)

33 
Àn
;

34 
dli°Node
 *
cuºít
, *
√xt
;

36 
cuºít
 = 
li°
->
hód
;

37 
Àn
 = 
li°
->len;

38 
Àn
--) {

39 
√xt
 = 
cuºít
->next;

40 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
cuºít
->
vÆue
);

41 
	`d‰ì
(
cuºít
);

42 
cuºít
 = 
√xt
;

44 
	`d‰ì
(
li°
);

45 
	}
}

54 
dli°
 *
	$dli°AddNodeHód
(
dli°
 *
li°
, *
vÆue
)

56 
dli°Node
 *
node
;

58 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

59  
NULL
;

60 
node
->
vÆue
 = value;

61 i‡(
li°
->
Àn
 == 0) {

62 
li°
->
hód
 =Üi°->
èû
 = 
node
;

63 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

65 
node
->
¥ev
 = 
NULL
;

66 
node
->
√xt
 = 
li°
->
hód
;

67 
li°
->
hód
->
¥ev
 = 
node
;

68 
li°
->
hód
 = 
node
;

70 
li°
->
Àn
++;

71  
li°
;

72 
	}
}

81 
dli°
 *
	$dli°AddNodeTaû
(
dli°
 *
li°
, *
vÆue
)

83 
dli°Node
 *
node
;

85 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

86  
NULL
;

87 
node
->
vÆue
 = value;

88 i‡(
li°
->
Àn
 == 0) {

89 
li°
->
hód
 =Üi°->
èû
 = 
node
;

90 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

92 
node
->
¥ev
 = 
li°
->
èû
;

93 
node
->
√xt
 = 
NULL
;

94 
li°
->
èû
->
√xt
 = 
node
;

95 
li°
->
èû
 = 
node
;

97 
li°
->
Àn
++;

98  
li°
;

99 
	}
}

101 
dli°
 *
	$dli°In£πNode
(
dli°
 *
li°
, 
dli°Node
 *
ﬁd_node
, *
vÆue
, 
a·î
) {

102 
dli°Node
 *
node
;

104 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

105  
NULL
;

106 
node
->
vÆue
 = value;

107 i‡(
a·î
) {

108 
node
->
¥ev
 = 
ﬁd_node
;

109 
node
->
√xt
 = 
ﬁd_node
->next;

110 i‡(
li°
->
èû
 =
ﬁd_node
) {

111 
li°
->
èû
 = 
node
;

114 
node
->
√xt
 = 
ﬁd_node
;

115 
node
->
¥ev
 = 
ﬁd_node
->prev;

116 i‡(
li°
->
hód
 =
ﬁd_node
) {

117 
li°
->
hód
 = 
node
;

120 i‡(
node
->
¥ev
 !
NULL
) {

121 
node
->
¥ev
->
√xt
 =Çode;

123 i‡(
node
->
√xt
 !
NULL
) {

124 
node
->
√xt
->
¥ev
 =Çode;

126 
li°
->
Àn
++;

127  
li°
;

128 
	}
}

135 
	$dli°DñNode
(
dli°
 *
li°
, 
dli°Node
 *
node
)

137 i‡(
node
->
¥ev
)

138 
node
->
¥ev
->
√xt
 =Çode->next;

140 
li°
->
hód
 = 
node
->
√xt
;

141 i‡(
node
->
√xt
)

142 
node
->
√xt
->
¥ev
 =Çode->prev;

144 
li°
->
èû
 = 
node
->
¥ev
;

145 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
node
->
vÆue
);

146 
	`d‰ì
(
node
);

147 
li°
->
Àn
--;

148 
	}
}

155 
dli°Iãr
 *
	$dli°GëIãøt‹
(
dli°
 *
li°
, 
dúe˘i⁄
)

157 
dli°Iãr
 *
ôî
;

159 i‡((
ôî
 = 
	`dÆloc
((*ôî))Ë=
NULL
)  NULL;

160 i‡(
dúe˘i⁄
 =
AL_START_HEAD
)

161 
ôî
->
√xt
 = 
li°
->
hód
;

163 
ôî
->
√xt
 = 
li°
->
èû
;

164 
ôî
->
dúe˘i⁄
 = direction;

165  
ôî
;

166 
	}
}

170 
	$dli°Rñó£Iãøt‹
(
dli°Iãr
 *
ôî
) {

171 
	`d‰ì
(
ôî
);

172 
	}
}

176 
	$dli°Rewöd
(
dli°
 *
li°
, 
dli°Iãr
 *
li
) {

177 
li
->
√xt
 = 
li°
->
hód
;

178 
li
->
dúe˘i⁄
 = 
AL_START_HEAD
;

179 
	}
}

181 
	$dli°RewödTaû
(
dli°
 *
li°
, 
dli°Iãr
 *
li
) {

182 
li
->
√xt
 = 
li°
->
èû
;

183 
li
->
dúe˘i⁄
 = 
AL_START_TAIL
;

184 
	}
}

201 
dli°Node
 *
	$dli°Next
(
dli°Iãr
 *
ôî
)

203 
dli°Node
 *
cuºít
 = 
ôî
->
√xt
;

205 i‡(
cuºít
 !
NULL
) {

206 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
)

207 
ôî
->
√xt
 = 
cuºít
->next;

209 
ôî
->
√xt
 = 
cuºít
->
¥ev
;

211  
cuºít
;

212 
	}
}

223 
dli°
 *
	$dli°Dup
(
dli°
 *
‹ig
)

225 
dli°
 *
c›y
;

226 
dli°Iãr
 
ôî
;

227 
dli°Node
 *
node
;

229 i‡((
c›y
 = 
	`dli°Cª©e
()Ë=
NULL
)

230  
NULL
;

231 
c›y
->
dup
 = 
‹ig
->dup;

232 
c›y
->
‰ì
 = 
‹ig
->free;

233 
c›y
->
m©ch
 = 
‹ig
->match;

234 
	`dli°Rewöd
(
‹ig
, &
ôî
);

235 (
node
 = 
	`dli°Next
(&
ôî
)Ë!
NULL
) {

236 *
vÆue
;

238 i‡(
c›y
->
dup
) {

239 
vÆue
 = 
c›y
->
	`dup
(
node
->value);

240 i‡(
vÆue
 =
NULL
) {

241 
	`dli°Rñó£
(
c›y
);

242  
NULL
;

245 
vÆue
 = 
node
->value;

246 i‡(
	`dli°AddNodeTaû
(
c›y
, 
vÆue
Ë=
NULL
) {

247 
	`dli°Rñó£
(
c›y
);

248  
NULL
;

251  
c›y
;

252 
	}
}

264 
dli°Node
 *
	$dli°SórchKey
(
dli°
 *
li°
, *
key
)

266 
dli°Iãr
 
ôî
;

267 
dli°Node
 *
node
;

269 
	`dli°Rewöd
(
li°
, &
ôî
);

270 (
node
 = 
	`dli°Next
(&
ôî
)Ë!
NULL
) {

271 i‡(
li°
->
m©ch
) {

272 i‡(
li°
->
	`m©ch
(
node
->
vÆue
, 
key
)) {

273  
node
;

276 i‡(
key
 =
node
->
vÆue
) {

277  
node
;

281  
NULL
;

282 
	}
}

290 
dli°Node
 *
	$dli°Index
(
dli°
 *
li°
, 
ödex
) {

291 
dli°Node
 *
n
;

293 i‡(
ödex
 < 0) {

294 
ödex
 = (-index)-1;

295 
n
 = 
li°
->
èû
;

296 
ödex
-- && 
n
Ë¿n->
¥ev
;

298 
n
 = 
li°
->
hód
;

299 
ödex
-- && 
n
Ë¿n->
√xt
;

301  
n
;

302 
	}
}

306 
	$dli°RŸ©e
(
dli°
 *
li°
) {

307 
dli°Node
 *
èû
 = 
li°
->tail;

309 i‡(
	`dli°Lígth
(
li°
) <= 1) ;

312 
li°
->
èû
 =Åaû->
¥ev
;

313 
li°
->
èû
->
√xt
 = 
NULL
;

315 
li°
->
hód
->
¥ev
 = 
èû
;

316 
èû
->
¥ev
 = 
NULL
;

317 
èû
->
√xt
 = 
li°
->
hód
;

318 
li°
->
hód
 = 
èû
;

319 
	}
}

322 
dli°
 *
	$dli°Push
(
dli°
 *
li°
, *
vÆue
) {

323 
	`dli°AddNodeTaû
(
li°
, 
vÆue
);

324  
li°
;

325 
	}
}

328 *
	$dli°P›
(
dli°
 *
li°
) {

329 
dli°Node
 *
node
;

330 *
vÆue
;

332 
node
 = 
	`dli°Fú°
(
li°
);

333 i‡(
node
 =
NULL
) {

334  
NULL
;

337 
vÆue
 = 
	`dli°NodeVÆue
(
node
);

338 
	`dli°DñNode
(
li°
, 
node
);

340 i‡(
li°
->
‰ì
Ë 
NULL
;

342  
vÆue
;

343 
	}
}

	@dep/dlist/dlist.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<dli°.h
>

13 
dli°
 *
	$dli°Cª©e
()

15 
dli°
 *
li°
;

17 i‡((
li°
 = 
	`dÆloc
((*li°))Ë=
NULL
)

18  
NULL
;

19 
li°
->
hód
 =Üi°->
èû
 = 
NULL
;

20 
li°
->
Àn
 = 0;

21 
li°
->
dup
 = 
NULL
;

22 
li°
->
‰ì
 = 
NULL
;

23 
li°
->
m©ch
 = 
NULL
;

24  
li°
;

25 
	}
}

31 
	$dli°Rñó£
(
dli°
 *
li°
)

33 
Àn
;

34 
dli°Node
 *
cuºít
, *
√xt
;

36 
cuºít
 = 
li°
->
hód
;

37 
Àn
 = 
li°
->len;

38 
Àn
--) {

39 
√xt
 = 
cuºít
->next;

40 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
cuºít
->
vÆue
);

41 
	`d‰ì
(
cuºít
);

42 
cuºít
 = 
√xt
;

44 
	`d‰ì
(
li°
);

45 
	}
}

54 
dli°
 *
	$dli°AddNodeHód
(
dli°
 *
li°
, *
vÆue
)

56 
dli°Node
 *
node
;

58 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

59  
NULL
;

60 
node
->
vÆue
 = value;

61 i‡(
li°
->
Àn
 == 0) {

62 
li°
->
hód
 =Üi°->
èû
 = 
node
;

63 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

65 
node
->
¥ev
 = 
NULL
;

66 
node
->
√xt
 = 
li°
->
hód
;

67 
li°
->
hód
->
¥ev
 = 
node
;

68 
li°
->
hód
 = 
node
;

70 
li°
->
Àn
++;

71  
li°
;

72 
	}
}

81 
dli°
 *
	$dli°AddNodeTaû
(
dli°
 *
li°
, *
vÆue
)

83 
dli°Node
 *
node
;

85 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

86  
NULL
;

87 
node
->
vÆue
 = value;

88 i‡(
li°
->
Àn
 == 0) {

89 
li°
->
hód
 =Üi°->
èû
 = 
node
;

90 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

92 
node
->
¥ev
 = 
li°
->
èû
;

93 
node
->
√xt
 = 
NULL
;

94 
li°
->
èû
->
√xt
 = 
node
;

95 
li°
->
èû
 = 
node
;

97 
li°
->
Àn
++;

98  
li°
;

99 
	}
}

101 
dli°
 *
	$dli°In£πNode
(
dli°
 *
li°
, 
dli°Node
 *
ﬁd_node
, *
vÆue
, 
a·î
) {

102 
dli°Node
 *
node
;

104 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

105  
NULL
;

106 
node
->
vÆue
 = value;

107 i‡(
a·î
) {

108 
node
->
¥ev
 = 
ﬁd_node
;

109 
node
->
√xt
 = 
ﬁd_node
->next;

110 i‡(
li°
->
èû
 =
ﬁd_node
) {

111 
li°
->
èû
 = 
node
;

114 
node
->
√xt
 = 
ﬁd_node
;

115 
node
->
¥ev
 = 
ﬁd_node
->prev;

116 i‡(
li°
->
hód
 =
ﬁd_node
) {

117 
li°
->
hód
 = 
node
;

120 i‡(
node
->
¥ev
 !
NULL
) {

121 
node
->
¥ev
->
√xt
 =Çode;

123 i‡(
node
->
√xt
 !
NULL
) {

124 
node
->
√xt
->
¥ev
 =Çode;

126 
li°
->
Àn
++;

127  
li°
;

128 
	}
}

135 
	$dli°DñNode
(
dli°
 *
li°
, 
dli°Node
 *
node
)

137 i‡(
node
->
¥ev
)

138 
node
->
¥ev
->
√xt
 =Çode->next;

140 
li°
->
hód
 = 
node
->
√xt
;

141 i‡(
node
->
√xt
)

142 
node
->
√xt
->
¥ev
 =Çode->prev;

144 
li°
->
èû
 = 
node
->
¥ev
;

145 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
node
->
vÆue
);

146 
	`d‰ì
(
node
);

147 
li°
->
Àn
--;

148 
	}
}

155 
dli°Iãr
 *
	$dli°GëIãøt‹
(
dli°
 *
li°
, 
dúe˘i⁄
)

157 
dli°Iãr
 *
ôî
;

159 i‡((
ôî
 = 
	`dÆloc
((*ôî))Ë=
NULL
)  NULL;

160 i‡(
dúe˘i⁄
 =
AL_START_HEAD
)

161 
ôî
->
√xt
 = 
li°
->
hód
;

163 
ôî
->
√xt
 = 
li°
->
èû
;

164 
ôî
->
dúe˘i⁄
 = direction;

165  
ôî
;

166 
	}
}

170 
	$dli°Rñó£Iãøt‹
(
dli°Iãr
 *
ôî
) {

171 
	`d‰ì
(
ôî
);

172 
	}
}

176 
	$dli°Rewöd
(
dli°
 *
li°
, 
dli°Iãr
 *
li
) {

177 
li
->
√xt
 = 
li°
->
hód
;

178 
li
->
dúe˘i⁄
 = 
AL_START_HEAD
;

179 
	}
}

181 
	$dli°RewödTaû
(
dli°
 *
li°
, 
dli°Iãr
 *
li
) {

182 
li
->
√xt
 = 
li°
->
èû
;

183 
li
->
dúe˘i⁄
 = 
AL_START_TAIL
;

184 
	}
}

201 
dli°Node
 *
	$dli°Next
(
dli°Iãr
 *
ôî
)

203 
dli°Node
 *
cuºít
 = 
ôî
->
√xt
;

205 i‡(
cuºít
 !
NULL
) {

206 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
)

207 
ôî
->
√xt
 = 
cuºít
->next;

209 
ôî
->
√xt
 = 
cuºít
->
¥ev
;

211  
cuºít
;

212 
	}
}

223 
dli°
 *
	$dli°Dup
(
dli°
 *
‹ig
)

225 
dli°
 *
c›y
;

226 
dli°Iãr
 
ôî
;

227 
dli°Node
 *
node
;

229 i‡((
c›y
 = 
	`dli°Cª©e
()Ë=
NULL
)

230  
NULL
;

231 
c›y
->
dup
 = 
‹ig
->dup;

232 
c›y
->
‰ì
 = 
‹ig
->free;

233 
c›y
->
m©ch
 = 
‹ig
->match;

234 
	`dli°Rewöd
(
‹ig
, &
ôî
);

235 (
node
 = 
	`dli°Next
(&
ôî
)Ë!
NULL
) {

236 *
vÆue
;

238 i‡(
c›y
->
dup
) {

239 
vÆue
 = 
c›y
->
	`dup
(
node
->value);

240 i‡(
vÆue
 =
NULL
) {

241 
	`dli°Rñó£
(
c›y
);

242  
NULL
;

245 
vÆue
 = 
node
->value;

246 i‡(
	`dli°AddNodeTaû
(
c›y
, 
vÆue
Ë=
NULL
) {

247 
	`dli°Rñó£
(
c›y
);

248  
NULL
;

251  
c›y
;

252 
	}
}

264 
dli°Node
 *
	$dli°SórchKey
(
dli°
 *
li°
, *
key
)

266 
dli°Iãr
 
ôî
;

267 
dli°Node
 *
node
;

269 
	`dli°Rewöd
(
li°
, &
ôî
);

270 (
node
 = 
	`dli°Next
(&
ôî
)Ë!
NULL
) {

271 i‡(
li°
->
m©ch
) {

272 i‡(
li°
->
	`m©ch
(
node
->
vÆue
, 
key
)) {

273  
node
;

276 i‡(
key
 =
node
->
vÆue
) {

277  
node
;

281  
NULL
;

282 
	}
}

290 
dli°Node
 *
	$dli°Index
(
dli°
 *
li°
, 
ödex
) {

291 
dli°Node
 *
n
;

293 i‡(
ödex
 < 0) {

294 
ödex
 = (-index)-1;

295 
n
 = 
li°
->
èû
;

296 
ödex
-- && 
n
Ë¿n->
¥ev
;

298 
n
 = 
li°
->
hód
;

299 
ödex
-- && 
n
Ë¿n->
√xt
;

301  
n
;

302 
	}
}

306 
	$dli°RŸ©e
(
dli°
 *
li°
) {

307 
dli°Node
 *
èû
 = 
li°
->tail;

309 i‡(
	`dli°Lígth
(
li°
) <= 1) ;

312 
li°
->
èû
 =Åaû->
¥ev
;

313 
li°
->
èû
->
√xt
 = 
NULL
;

315 
li°
->
hód
->
¥ev
 = 
èû
;

316 
èû
->
¥ev
 = 
NULL
;

317 
èû
->
√xt
 = 
li°
->
hód
;

318 
li°
->
hód
 = 
èû
;

319 
	}
}

322 
dli°
 *
	$dli°Push
(
dli°
 *
li°
, *
vÆue
) {

323 
	`dli°AddNodeTaû
(
li°
, 
vÆue
);

324  
li°
;

325 
	}
}

328 *
	$dli°P›
(
dli°
 *
li°
) {

329 
dli°Node
 *
node
;

330 *
vÆue
;

332 
node
 = 
	`dli°Fú°
(
li°
);

333 i‡(
node
 =
NULL
) {

334  
NULL
;

337 
vÆue
 = 
	`dli°NodeVÆue
(
node
);

338 
	`dli°DñNode
(
li°
, 
node
);

340 i‡(
li°
->
‰ì
Ë 
NULL
;

342  
vÆue
;

343 
	}
}

	@dep/dlist/dlist.h

1 #i‚de‡
_DLIST_H__


2 
	#_DLIST_H__


	)

6 
	sdli°Node
 {

7 
dli°Node
 *
	m¥ev
;

8 
dli°Node
 *
	m√xt
;

9 *
	mvÆue
;

10 } 
	tdli°Node
;

13 
	sdli°Iãr
 {

15 
dli°Node
 *
	m√xt
;

17 
	mdúe˘i⁄
;

18 } 
	tdli°Iãr
;

20 
	sdli°
 {

21 
dli°Node
 *
	mhód
;

22 
dli°Node
 *
	mèû
;

23 *(*
	mdup
)(*
	m±r
);

24 (*
	m‰ì
)(*
	m±r
);

25 (*
	mm©ch
)(*
	m±r
, *
	mkey
);

26 
	mÀn
;

27 } 
	tdli°
;

31 
	#dli°Lígth
(
l
Ë(÷)->
Àn
)

	)

32 
	#dli°Fú°
(
l
Ë(÷)->
hód
)

	)

33 
	#dli°La°
(
l
Ë(÷)->
èû
)

	)

34 
	#dli°PªvNode
(
n
Ë(“)->
¥ev
)

	)

35 
	#dli°NextNode
(
n
Ë(“)->
√xt
)

	)

36 
	#dli°NodeVÆue
(
n
Ë(“)->
vÆue
)

	)

38 
	#dli°SëDupMëhod
(
l
,
m
Ë(÷)->
dup
 = (m))

	)

39 
	#dli°SëFªeMëhod
(
l
,
m
Ë(÷)->
‰ì
 = (m))

	)

40 
	#dli°SëM©chMëhod
(
l
,
m
Ë(÷)->
m©ch
 = (m))

	)

42 
	#dli°GëDupMëhod
(
l
Ë(÷)->
dup
)

	)

43 
	#dli°GëFªe
(
l
Ë(÷)->
‰ì
)

	)

44 
	#dli°GëM©chMëhod
(
l
Ë(÷)->
m©ch
)

	)

47 
dli°
 *
dli°Cª©e
();

48 
dli°Rñó£
(
dli°
 *
li°
);

49 
dli°
 *
dli°AddNodeHód
(dli° *
li°
, *
vÆue
);

50 
dli°
 *
dli°AddNodeTaû
(dli° *
li°
, *
vÆue
);

51 
dli°
 *
dli°In£πNode
(dli° *
li°
, 
dli°Node
 *
ﬁd_node
, *
vÆue
, 
a·î
);

52 
dli°DñNode
(
dli°
 *
li°
, 
dli°Node
 *
node
);

53 
dli°Iãr
 *
dli°GëIãøt‹
(
dli°
 *
li°
, 
dúe˘i⁄
);

54 
dli°Node
 *
dli°Next
(
dli°Iãr
 *
ôî
);

55 
dli°Rñó£Iãøt‹
(
dli°Iãr
 *
ôî
);

56 
dli°
 *
dli°Dup
(dli° *
‹ig
);

57 
dli°Node
 *
dli°SórchKey
(
dli°
 *
li°
, *
key
);

58 
dli°Node
 *
dli°Index
(
dli°
 *
li°
, 
ödex
);

59 
dli°Rewöd
(
dli°
 *
li°
, 
dli°Iãr
 *
li
);

60 
dli°RewödTaû
(
dli°
 *
li°
, 
dli°Iãr
 *
li
);

61 
dli°RŸ©e
(
dli°
 *
li°
);

62 
dli°
 *
dli°Push
(dli° *
li°
, *
vÆue
);

63 *
dli°P›
(
dli°
 *
li°
);

66 
	#AL_START_HEAD
 0

	)

67 
	#AL_START_TAIL
 1

	)

	@dep/dlist/dlist.h

1 #i‚de‡
_DLIST_H__


2 
	#_DLIST_H__


	)

6 
	sdli°Node
 {

7 
dli°Node
 *
	m¥ev
;

8 
dli°Node
 *
	m√xt
;

9 *
	mvÆue
;

10 } 
	tdli°Node
;

13 
	sdli°Iãr
 {

15 
dli°Node
 *
	m√xt
;

17 
	mdúe˘i⁄
;

18 } 
	tdli°Iãr
;

20 
	sdli°
 {

21 
dli°Node
 *
	mhód
;

22 
dli°Node
 *
	mèû
;

23 *(*
	mdup
)(*
	m±r
);

24 (*
	m‰ì
)(*
	m±r
);

25 (*
	mm©ch
)(*
	m±r
, *
	mkey
);

26 
	mÀn
;

27 } 
	tdli°
;

31 
	#dli°Lígth
(
l
Ë(÷)->
Àn
)

	)

32 
	#dli°Fú°
(
l
Ë(÷)->
hód
)

	)

33 
	#dli°La°
(
l
Ë(÷)->
èû
)

	)

34 
	#dli°PªvNode
(
n
Ë(“)->
¥ev
)

	)

35 
	#dli°NextNode
(
n
Ë(“)->
√xt
)

	)

36 
	#dli°NodeVÆue
(
n
Ë(“)->
vÆue
)

	)

38 
	#dli°SëDupMëhod
(
l
,
m
Ë(÷)->
dup
 = (m))

	)

39 
	#dli°SëFªeMëhod
(
l
,
m
Ë(÷)->
‰ì
 = (m))

	)

40 
	#dli°SëM©chMëhod
(
l
,
m
Ë(÷)->
m©ch
 = (m))

	)

42 
	#dli°GëDupMëhod
(
l
Ë(÷)->
dup
)

	)

43 
	#dli°GëFªe
(
l
Ë(÷)->
‰ì
)

	)

44 
	#dli°GëM©chMëhod
(
l
Ë(÷)->
m©ch
)

	)

47 
dli°
 *
dli°Cª©e
();

48 
dli°Rñó£
(
dli°
 *
li°
);

49 
dli°
 *
dli°AddNodeHód
(dli° *
li°
, *
vÆue
);

50 
dli°
 *
dli°AddNodeTaû
(dli° *
li°
, *
vÆue
);

51 
dli°
 *
dli°In£πNode
(dli° *
li°
, 
dli°Node
 *
ﬁd_node
, *
vÆue
, 
a·î
);

52 
dli°DñNode
(
dli°
 *
li°
, 
dli°Node
 *
node
);

53 
dli°Iãr
 *
dli°GëIãøt‹
(
dli°
 *
li°
, 
dúe˘i⁄
);

54 
dli°Node
 *
dli°Next
(
dli°Iãr
 *
ôî
);

55 
dli°Rñó£Iãøt‹
(
dli°Iãr
 *
ôî
);

56 
dli°
 *
dli°Dup
(dli° *
‹ig
);

57 
dli°Node
 *
dli°SórchKey
(
dli°
 *
li°
, *
key
);

58 
dli°Node
 *
dli°Index
(
dli°
 *
li°
, 
ödex
);

59 
dli°Rewöd
(
dli°
 *
li°
, 
dli°Iãr
 *
li
);

60 
dli°RewödTaû
(
dli°
 *
li°
, 
dli°Iãr
 *
li
);

61 
dli°RŸ©e
(
dli°
 *
li°
);

62 
dli°
 *
dli°Push
(dli° *
li°
, *
vÆue
);

63 *
dli°P›
(
dli°
 *
li°
);

66 
	#AL_START_HEAD
 0

	)

67 
	#AL_START_TAIL
 1

	)

	@dep/dlist/dlockqueue.c

1 
	~<±hªad.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<dmÆloc.h
>

7 
	~<dli°.h
>

8 
	~<dmtqueue.h
>

9 
	~<dlockqueue.h
>

11 
dlockqueue
 *
	$dlockqueue_¸óã
()

13 
dlockqueue
 *
lqueue
;

15 
lqueue
 = 
	`dÆloc
((*lqueue));

16 i‡(
lqueue
 =
NULL
) {

17  
NULL
;

20 
lqueue
->
maxÀn
 = -1;

22 
lqueue
->
maxÀn_pﬁicy
 = 
MAX_LENGTH_POLICY_REJECT
;

24 
	`±hªad_muãx_öô
(&
lqueue
->
lmuãx
,
NULL
);

26 
lqueue
->
l
 = 
	`dli°Cª©e
();

27 i‡(
lqueue
->
l
 =
NULL
) {

28 
	`dlockqueue_de°roy
(
lqueue
);

29  
NULL
;

32  
lqueue
;

33 
	}
}

35 
	$dlockqueue_push
(*
q
, *
vÆue
)

37 
dlockqueue
 *
lqueue
 = 
q
;

38 
dli°
 *
li°
;

39 
Àngth
;

41 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

42 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

44 i‡(
lqueue
->
maxÀn
 >0 && 
Àngth
 >=Üqueue->maxlen) {

46 i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_REJECT
) {

47 
Àngth
 = -1;

50 } i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_EVICT_HEAD
) {

51 
Àngth
 >
lqueue
->
maxÀn
) {

52 
dli°Node
 *
 
 = 
	`dli°Fú°
(
lqueue
->
l
);

53 
	`dli°DñNode
(
lqueue
->
l
,
 
);

54 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

56 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

57 
Àngth
 ++;

59 } i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_EVICT_END
) {

60 
Àngth
 >
lqueue
->
maxÀn
) {

61 
dli°Node
 *
 
 = 
	`dli°La°
(
lqueue
->
l
);

62 
	`dli°DñNode
(
lqueue
->
l
,
 
);

63 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

65 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

66 
Àngth
 ++;

70 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

71 
Àngth
 ++;

74 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

76 i‡(
li°
 =
NULL
) {

80  
Àngth
;

81 
	}
}

83 *
	$dlockqueue_p›
(*
q
)

85 
dlockqueue
 *
lqueue
 = 
q
;

86 
dli°Node
 *
node
;

87 *
vÆue
;

89 i‡(
lqueue
 =
NULL
 ||Üqueue->
l
 == NULL) {

90  
NULL
;

93 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

95 
node
 = 
	`dli°Fú°
(
lqueue
->
l
);

96 i‡(
node
 =
NULL
) {

98 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

99  
NULL
;

102 
vÆue
 = 
	`dli°NodeVÆue
(
node
);

104 
	`dli°DñNode
(
lqueue
->
l
, 
node
);

106 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

108  
vÆue
;

109 
	}
}

112 
	$dlockqueue_de°roy
(*
q
)

114 
dlockqueue
 *
lqueue
 = 
q
;

115 i‡(
lqueue
 =
NULL
) {

119 i‡(
lqueue
->
l
 !
NULL
) {

120 
	`dli°Rñó£
(
lqueue
->
l
);

123 
	`±hªad_muãx_de°roy
(&
lqueue
->
lmuãx
);

125 
	`d‰ì
(
lqueue
);

126 
	}
}

128 
	$dlockqueue_Àngth
(*
q
)

130 
dlockqueue
 *
lqueue
 = 
q
;

131 
Àngth
;

133 i‡(
lqueue
 =
NULL
 ||Üqueue->
l
 == NULL) {

137 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

138 
Àngth
 = 
	`dli°Lígth
(
lqueue
->
l
);

139 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

141  
Àngth
;

142 
	}
}

	@dep/dlist/dlockqueue.c

1 
	~<±hªad.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<dmÆloc.h
>

7 
	~<dli°.h
>

8 
	~<dmtqueue.h
>

9 
	~<dlockqueue.h
>

11 
dlockqueue
 *
	$dlockqueue_¸óã
()

13 
dlockqueue
 *
lqueue
;

15 
lqueue
 = 
	`dÆloc
((*lqueue));

16 i‡(
lqueue
 =
NULL
) {

17  
NULL
;

20 
lqueue
->
maxÀn
 = -1;

22 
lqueue
->
maxÀn_pﬁicy
 = 
MAX_LENGTH_POLICY_REJECT
;

24 
	`±hªad_muãx_öô
(&
lqueue
->
lmuãx
,
NULL
);

26 
lqueue
->
l
 = 
	`dli°Cª©e
();

27 i‡(
lqueue
->
l
 =
NULL
) {

28 
	`dlockqueue_de°roy
(
lqueue
);

29  
NULL
;

32  
lqueue
;

33 
	}
}

35 
	$dlockqueue_push
(*
q
, *
vÆue
)

37 
dlockqueue
 *
lqueue
 = 
q
;

38 
dli°
 *
li°
;

39 
Àngth
;

41 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

42 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

44 i‡(
lqueue
->
maxÀn
 >0 && 
Àngth
 >=Üqueue->maxlen) {

46 i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_REJECT
) {

47 
Àngth
 = -1;

50 } i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_EVICT_HEAD
) {

51 
Àngth
 >
lqueue
->
maxÀn
) {

52 
dli°Node
 *
 
 = 
	`dli°Fú°
(
lqueue
->
l
);

53 
	`dli°DñNode
(
lqueue
->
l
,
 
);

54 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

56 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

57 
Àngth
 ++;

59 } i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_EVICT_END
) {

60 
Àngth
 >
lqueue
->
maxÀn
) {

61 
dli°Node
 *
 
 = 
	`dli°La°
(
lqueue
->
l
);

62 
	`dli°DñNode
(
lqueue
->
l
,
 
);

63 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

65 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

66 
Àngth
 ++;

70 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

71 
Àngth
 ++;

74 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

76 i‡(
li°
 =
NULL
) {

80  
Àngth
;

81 
	}
}

83 *
	$dlockqueue_p›
(*
q
)

85 
dlockqueue
 *
lqueue
 = 
q
;

86 
dli°Node
 *
node
;

87 *
vÆue
;

89 i‡(
lqueue
 =
NULL
 ||Üqueue->
l
 == NULL) {

90  
NULL
;

93 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

95 
node
 = 
	`dli°Fú°
(
lqueue
->
l
);

96 i‡(
node
 =
NULL
) {

98 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

99  
NULL
;

102 
vÆue
 = 
	`dli°NodeVÆue
(
node
);

104 
	`dli°DñNode
(
lqueue
->
l
, 
node
);

106 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

108  
vÆue
;

109 
	}
}

112 
	$dlockqueue_de°roy
(*
q
)

114 
dlockqueue
 *
lqueue
 = 
q
;

115 i‡(
lqueue
 =
NULL
) {

119 i‡(
lqueue
->
l
 !
NULL
) {

120 
	`dli°Rñó£
(
lqueue
->
l
);

123 
	`±hªad_muãx_de°roy
(&
lqueue
->
lmuãx
);

125 
	`d‰ì
(
lqueue
);

126 
	}
}

128 
	$dlockqueue_Àngth
(*
q
)

130 
dlockqueue
 *
lqueue
 = 
q
;

131 
Àngth
;

133 i‡(
lqueue
 =
NULL
 ||Üqueue->
l
 == NULL) {

137 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

138 
Àngth
 = 
	`dli°Lígth
(
lqueue
->
l
);

139 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

141  
Àngth
;

142 
	}
}

	@dep/dlist/dlockqueue.h

1 #i‚de‡
_DLOCKQUEUE_H_


2 
	#_DLOCKQUEUE_H_


	)

4 
	gdli°
;

6 
	sdlockqueue
{

7 
dli°
 *
	ml
;

8 
	mmaxÀn
;

9 
	mmaxÀn_pﬁicy
;

10 
±hªad_muãx_t
 
	mlmuãx
;

11 } 
	tdlockqueue
;

13 
dlockqueue
 *
dlockqueue_¸óã
();

14 
dlockqueue_push
(*
q
, *
vÆue
);

15 *
dlockqueue_p›
(*
q
);

16 
dlockqueue_de°roy
(*
q
);

17 
dlockqueue_Àngth
(*
q
);

	@dep/dlist/dlockqueue.h

1 #i‚de‡
_DLOCKQUEUE_H_


2 
	#_DLOCKQUEUE_H_


	)

4 
	gdli°
;

6 
	sdlockqueue
{

7 
dli°
 *
	ml
;

8 
	mmaxÀn
;

9 
	mmaxÀn_pﬁicy
;

10 
±hªad_muãx_t
 
	mlmuãx
;

11 } 
	tdlockqueue
;

13 
dlockqueue
 *
dlockqueue_¸óã
();

14 
dlockqueue_push
(*
q
, *
vÆue
);

15 *
dlockqueue_p›
(*
q
);

16 
dlockqueue_de°roy
(*
q
);

17 
dlockqueue_Àngth
(*
q
);

	@dep/dlist/dmtqueue.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<dli°.h
>

6 
	~<dmtqueue.h
>

7 
	~<dlockqueue.h
>

10 
dmtqueue
 *
	$dmtqueue_¸óã
()

12 
dmtqueue
 *
q
;

14 
q
 = 
	`dÆloc
((*q));

15 i‡(
q
 =
NULL
) {

16  
NULL
;

19 
q
->
l
 = 
NULL
;

20 
q
->
lock_push
 = 
NULL
;

21 
q
->
lock_p›
 = 
NULL
;

22 
q
->
de°roy
 = 
NULL
;

23 
q
->
Àngth
 = 
NULL
;

25  
q
;

26 
	}
}

28 
	$dmtqueue_de°roy
(
dmtqueue
 *
q
)

30 i‡(
q
 =
NULL
) {

34 i‡(
q
->
de°roy
) {

35 
q
->
	`de°roy
(q->
l
);

38 
	`d‰ì
(
q
);

39 
	}
}

41 
	$dmtqueue_push
(
dmtqueue
 *
q
, *
vÆue
)

43 if(
q
 =
NULL
 || q->
l
 == NULL

44 || 
q
->
lock_push
 =
NULL
)

49  
q
->
	`lock_push
(q->
l
, 
vÆue
);

50 
	}
}

52 *
	$dmtqueue_p›
(
dmtqueue
 *
q
)

54 if(
q
 =
NULL
 || q->
l
 == NULL

55 || 
q
->
lock_p›
 =
NULL
)

57  
NULL
;

60  
q
->
	`lock_p›
(q->
l
);

61 
	}
}

63 
	$dmtqueue_em±y
(
dmtqueue
 *
q
)

65 if(
q
 =
NULL
 || q->
l
 == NULL

66 || 
q
->
Àngth
 =
NULL
)

71 if(
q
->
	`Àngth
(q->
l
) > 0)

77 
	}
}

79 
	$dmtqueue_Àngth
(
dmtqueue
 *
q
)

81 if(
q
 =
NULL
 || q->
l
 == NULL

82 || 
q
->
Àngth
 =
NULL
)

87  
q
->
	`Àngth
(q->
l
);

88 
	}
}

96 
	$dmtqueue_öô_wôh_lockqueue
(
dmtqueue
 *
q
, 
dlockqueue_‰ìfunc
 
‰ìfunc
)

98 
dlockqueue
 *
lq
;

100 i‡(
q
 =
NULL
) {

104 
lq
 = 
	`dlockqueue_¸óã
();

105 i‡(
lq
 =
NULL
) {

109 
lq
->
l
->
‰ì
 = 
‰ìfunc
;

111 
q
->
l
 = 
lq
;

112 
q
->
lock_push
 = 
dlockqueue_push
;

113 
q
->
lock_p›
 = 
dlockqueue_p›
;

114 
q
->
de°roy
 = 
dlockqueue_de°roy
;

115 
q
->
Àngth
 = 
dlockqueue_Àngth
;

118 
	}
}

	@dep/dlist/dmtqueue.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<dli°.h
>

6 
	~<dmtqueue.h
>

7 
	~<dlockqueue.h
>

10 
dmtqueue
 *
	$dmtqueue_¸óã
()

12 
dmtqueue
 *
q
;

14 
q
 = 
	`dÆloc
((*q));

15 i‡(
q
 =
NULL
) {

16  
NULL
;

19 
q
->
l
 = 
NULL
;

20 
q
->
lock_push
 = 
NULL
;

21 
q
->
lock_p›
 = 
NULL
;

22 
q
->
de°roy
 = 
NULL
;

23 
q
->
Àngth
 = 
NULL
;

25  
q
;

26 
	}
}

28 
	$dmtqueue_de°roy
(
dmtqueue
 *
q
)

30 i‡(
q
 =
NULL
) {

34 i‡(
q
->
de°roy
) {

35 
q
->
	`de°roy
(q->
l
);

38 
	`d‰ì
(
q
);

39 
	}
}

41 
	$dmtqueue_push
(
dmtqueue
 *
q
, *
vÆue
)

43 if(
q
 =
NULL
 || q->
l
 == NULL

44 || 
q
->
lock_push
 =
NULL
)

49  
q
->
	`lock_push
(q->
l
, 
vÆue
);

50 
	}
}

52 *
	$dmtqueue_p›
(
dmtqueue
 *
q
)

54 if(
q
 =
NULL
 || q->
l
 == NULL

55 || 
q
->
lock_p›
 =
NULL
)

57  
NULL
;

60  
q
->
	`lock_p›
(q->
l
);

61 
	}
}

63 
	$dmtqueue_em±y
(
dmtqueue
 *
q
)

65 if(
q
 =
NULL
 || q->
l
 == NULL

66 || 
q
->
Àngth
 =
NULL
)

71 if(
q
->
	`Àngth
(q->
l
) > 0)

77 
	}
}

79 
	$dmtqueue_Àngth
(
dmtqueue
 *
q
)

81 if(
q
 =
NULL
 || q->
l
 == NULL

82 || 
q
->
Àngth
 =
NULL
)

87  
q
->
	`Àngth
(q->
l
);

88 
	}
}

96 
	$dmtqueue_öô_wôh_lockqueue
(
dmtqueue
 *
q
, 
dlockqueue_‰ìfunc
 
‰ìfunc
)

98 
dlockqueue
 *
lq
;

100 i‡(
q
 =
NULL
) {

104 
lq
 = 
	`dlockqueue_¸óã
();

105 i‡(
lq
 =
NULL
) {

109 
lq
->
l
->
‰ì
 = 
‰ìfunc
;

111 
q
->
l
 = 
lq
;

112 
q
->
lock_push
 = 
dlockqueue_push
;

113 
q
->
lock_p›
 = 
dlockqueue_p›
;

114 
q
->
de°roy
 = 
dlockqueue_de°roy
;

115 
q
->
Àngth
 = 
dlockqueue_Àngth
;

118 
	}
}

	@dep/dlist/dmtqueue.h

1 #i‚de‡
_DMTQUEUE_H_


2 
	#_DMTQUEUE_H_


	)

4 
	#MAX_LENGTH_POLICY_REJECT
 0

	)

5 
	#MAX_LENGTH_POLICY_EVICT_HEAD
 1

	)

6 
	#MAX_LENGTH_POLICY_EVICT_END
 2

	)

10 
	sdmtqueue
{

11 *
	ml
;

12 (*
	mlock_push
)(*
	mq
, *
	mvÆue
);

13 *(*
	mlock_p›
)(*
	mq
);

14 (*
	mde°roy
)(*
	mq
);

15 (*
	mÀngth
)(*
	mq
);

16 } 
	tdmtqueue
;

18 
	#dmtqueueSëMaxÀngth
(
q
,
l
Ë((q)->l->
maxÀn
 = (l))

	)

19 
	#dmtqueueSëMaxÀngthPﬁicy
(
q
,
p
Ë((q)->
l
->
maxÀn
 = (p))

	)

21 (*
	tdmtqueue_öô
)(
	tdmtqueue
 *);

25 
dmtqueue
 *
	`dmtqueue_¸óã
();

26 
	`dmtqueue_de°roy
(
dmtqueue
 *
q
);

27 
	`dmtqueue_push
(
dmtqueue
 *
q
, *
vÆue
);

28 *
	`dmtqueue_p›
(
dmtqueue
 *
q
);

29 
	`dmtqueue_em±y
(
dmtqueue
 *
q
);

30 
	`dmtqueue_Àngth
(
dmtqueue
 *
q
);

34 (*
	tdlockqueue_‰ìfunc
)(*);

35 
	`dmtqueue_öô_wôh_lockqueue
(
dmtqueue
 *
l
, 
dlockqueue_‰ìfunc
 
‰ìfunc
);

	@dep/dlist/dmtqueue.h

1 #i‚de‡
_DMTQUEUE_H_


2 
	#_DMTQUEUE_H_


	)

4 
	#MAX_LENGTH_POLICY_REJECT
 0

	)

5 
	#MAX_LENGTH_POLICY_EVICT_HEAD
 1

	)

6 
	#MAX_LENGTH_POLICY_EVICT_END
 2

	)

10 
	sdmtqueue
{

11 *
	ml
;

12 (*
	mlock_push
)(*
	mq
, *
	mvÆue
);

13 *(*
	mlock_p›
)(*
	mq
);

14 (*
	mde°roy
)(*
	mq
);

15 (*
	mÀngth
)(*
	mq
);

16 } 
	tdmtqueue
;

18 
	#dmtqueueSëMaxÀngth
(
q
,
l
Ë((q)->l->
maxÀn
 = (l))

	)

19 
	#dmtqueueSëMaxÀngthPﬁicy
(
q
,
p
Ë((q)->
l
->
maxÀn
 = (p))

	)

21 (*
	tdmtqueue_öô
)(
	tdmtqueue
 *);

25 
dmtqueue
 *
	`dmtqueue_¸óã
();

26 
	`dmtqueue_de°roy
(
dmtqueue
 *
q
);

27 
	`dmtqueue_push
(
dmtqueue
 *
q
, *
vÆue
);

28 *
	`dmtqueue_p›
(
dmtqueue
 *
q
);

29 
	`dmtqueue_em±y
(
dmtqueue
 *
q
);

30 
	`dmtqueue_Àngth
(
dmtqueue
 *
q
);

34 (*
	tdlockqueue_‰ìfunc
)(*);

35 
	`dmtqueue_öô_wôh_lockqueue
(
dmtqueue
 *
l
, 
dlockqueue_‰ìfunc
 
‰ìfunc
);

	@dep/dmalloc/dmalloc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<±hªad.h
>

7 
	~<uni°d.h
>

9 
	~<dutû.h
>

10 
	~<dlog.h
>

12 
	~<dmÆloc.h
>

15 
size_t
 
	gu£d_mem‹y
 = 0;

16 
±hªad_muãx_t
 
	gu£d_mem‹y_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

18 #i‡
deföed
(
__ATOMIC_RELAXED
)

19 
	#upd©e_u£d_mem_°©_add
(
__n
Ë
	`__©omic_add_„tch
(&
u£d_mem‹y
, (__n), 
__ATOMIC_RELAXED
)

	)

20 
	#upd©e_u£d_mem_°©_sub
(
__n
Ë
	`__©omic_sub_„tch
(&
u£d_mem‹y
, (__n), 
__ATOMIC_RELAXED
)

	)

21 *
	$mÆloc_lock_ty≥
(Ë{ "__ATOMIC_RELAXED";
	}
}

22 #ñi‡
deföed
(
HAVE_ATOMIC
)

23 
	#upd©e_u£d_mem_°©_add
(
__n
Ë
	`__sync_add_™d_„tch
(&
u£d_mem‹y
, (__n))

	)

24 
	#upd©e_u£d_mem_°©_sub
(
__n
Ë
	`__sync_sub_™d_„tch
(&
u£d_mem‹y
, (__n))

	)

25 *
	$mÆloc_lock_ty≥
(Ë{ "HAVE_ATOMIC";
	}
}

27 
	#upd©e_u£d_mem_°©_add
(
__n
) do { \

28 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
); \

29 
u£d_mem‹y
 +(
__n
); \

30 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
); \

31 } 0)

	)

33 
	#upd©e_u£d_mem_°©_sub
(
__n
) do { \

34 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
); \

35 
u£d_mem‹y
 -(
__n
); \

36 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
); \

37 } 0)

	)

39 *
	$mÆloc_lock_ty≥
(Ë{ "±hªad_muãx_t";
	}
}

42 
	#upd©e_dmÆloc_°©_Æloc
(
__n
) do { \

43 
size_t
 
_n
 = (
__n
); \

44 i‡(
_n
&(()-1)) _n += ()-(_n&(()-1)); \

45 
	`upd©e_u£d_mem_°©_add
(
_n
); \

46 } 0)

	)

48 
	#upd©e_dmÆloc_°©_‰ì
(
__n
) do { \

49 
size_t
 
_n
 = (
__n
); \

50 i‡(
_n
&(()-1)) _n += ()-(_n&(()-1)); \

51 
	`upd©e_u£d_mem_°©_sub
(
_n
); \

52 } 0)

	)

54 #ifde‡
HAVE_MALLOC_SIZE


55 
	#PREFIX_SIZE
 (0)

	)

57 #i‡
deföed
(
__sun
Ë|| deföed(
__•¨c
Ë|| deföed(
__•¨c__
)

58 
	#PREFIX_SIZE
 (())

	)

60 
	#PREFIX_SIZE
 ((
size_t
))

	)

67 #i‚de‡
HAVE_MALLOC_SIZE


68 
size_t
 
	$dmÆloc_size
(*
±r
) {

69 *
ªÆ±r
 = (*)
±r
-
PREFIX_SIZE
;

70 
size_t
 
size
 = *((size_t*)
ªÆ±r
);

73 i‡(
size
&(()-1)) size += ()-(size&(()-1));

74  
size
+
PREFIX_SIZE
;

75 
	}
}

79 
	$_dÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

81 *
p
;

83 
	`ASSERT
(
size
 != 0);

85 #ifde‡
DUSE_JEMALLOC


86 
p
 = 
	`je_mÆloc
(
size
+
PREFIX_SIZE
);

88 
p
 = 
	`mÆloc
(
size
+
PREFIX_SIZE
);

90 i‡(
p
 =
NULL
) {

91 
	`log_îr‹
("mÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

93 #ifde‡
HAVE_MALLOC_SIZE


94 
	`upd©e_dmÆloc_°©_Æloc
(
	`dmÆloc_size
(
p
));

95  
p
;

97 *((
size_t
*)
p
Ë
size
;

98 
	`upd©e_dmÆloc_°©_Æloc
(
size
+
PREFIX_SIZE
);

99  (*)
p
+
PREFIX_SIZE
;

101 
	`log_debug
(
LOG_VVERB
, "mÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

104  
p
;

105 
	}
}

108 
	$_dzÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

110 *
p
;

112 
p
 = 
	`_dÆloc
(
size
, 
«me
, 
löe
);

113 i‡(
p
 !
NULL
) {

114 
	`mem£t
(
p
, 0, 
size
);

117  
p
;

118 
	}
}

121 
	$_dˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
)

123  
	`_dzÆloc
(
nmemb
 * 
size
, 
«me
, 
löe
);

124 
	}
}

127 
	$_dªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
)

129 #i‚de‡
HAVE_MALLOC_SIZE


130 *
ªÆp
;

132 *
p
;

133 
size_t
 
ﬁdsize
;

135 
	`ASSERT
(
size
 != 0);

137 i‡(
±r
 =
NULL
Ë 
	`_dÆloc
(
size
, 
«me
, 
löe
);

139 #ifde‡
HAVE_MALLOC_SIZE


140 
ﬁdsize
 = 
	`dmÆloc_size
(
±r
);

141 #ifde‡
DUSE_JEMALLOC


142 
p
 = 
	`je_ªÆloc
(
±r
, 
size
);

144 
p
 = 
	`ªÆloc
(
±r
, 
size
);

147 
ªÆp
 = (*)
±r
-
PREFIX_SIZE
;

148 
ﬁdsize
 = *((
size_t
*)
ªÆp
);

149 #ifde‡
DUSE_JEMALLOC


150 
p
 = 
	`je_ªÆloc
(
±r
, 
size
+
PREFIX_SIZE
);

152 
p
 = 
	`ªÆloc
(
±r
, 
size
+
PREFIX_SIZE
);

155 i‡(
p
 =
NULL
) {

156 
	`log_îr‹
("ªÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

157  
NULL
;

159 
	`log_debug
(
LOG_VVERB
, "ªÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

160 #ifde‡
HAVE_MALLOC_SIZE


161 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
);

162 
	`upd©e_dmÆloc_°©_Æloc
(
	`dmÆloc_size
(
p
));

163  
p
;

165 *((
size_t
*)
p
Ë
size
;

166 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
);

167 
	`upd©e_dmÆloc_°©_Æloc
(
size
);

168  
p
+
PREFIX_SIZE
;

172  
NULL
;

173 
	}
}

176 
	$_d‰ì
(*
±r
, c⁄° *
«me
, 
löe
)

178 #i‚de‡
HAVE_MALLOC_SIZE


179 *
ªÆp
;

180 
size_t
 
ﬁdsize
;

183 
	`ASSERT
(
±r
 !
NULL
);

184 
	`log_debug
(
LOG_VVERB
, "‰ì(%pË@ %s:%d", 
±r
, 
«me
, 
löe
);

186 #ifde‡
HAVE_MALLOC_SIZE


187 
	`upd©e_dmÆloc_°©_‰ì
(
	`dmÆloc_size
(
±r
));

188 #ifde‡
DUSE_JEMALLOC


189 
	`je_‰ì
(
±r
);

191 
	`‰ì
(
±r
);

194 
ªÆp
 = (*)
±r
-
PREFIX_SIZE
;

195 
ﬁdsize
 = *((
size_t
*)
ªÆp
);

196 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
+
PREFIX_SIZE
);

197 
	`‰ì
(
ªÆp
);

198 #ifde‡
DUSE_JEMALLOC


199 
	`je_‰ì
(
ªÆp
);

201 
	`‰ì
(
ªÆp
);

204 
	}
}

206 
size_t


207 
	$dÆloc_u£d_mem‹y
()

209 
size_t
 
um
;

211 #i‡
	`deföed
(
__ATOMIC_RELAXED
Ë|| deföed(
HAVE_ATOMIC
)

212 
um
 = 
	`upd©e_u£d_mem_°©_add
(0);

214 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
);

215 
um
 = 
u£d_mem‹y
;

216 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
);

219  
um
;

220 
	}
}

235 
size_t
 
	$dÆloc_gë_mem‹y_size
() {

236 #i‡
	`deföed
(
__unix__
Ë|| deföed(
__unix
Ë|| deföed(
unix
) || \

237 (
	`deföed
(
__APPLE__
Ë&& deföed(
__MACH__
))

238 #i‡
	`deföed
(
CTL_HW
Ë&& (deföed(
HW_MEMSIZE
Ë|| deföed(
HW_PHYSMEM64
))

239 
mib
[2];

240 
mib
[0] = 
CTL_HW
;

241 #i‡
	`deföed
(
HW_MEMSIZE
)

242 
mib
[1] = 
HW_MEMSIZE
;

243 #ñi‡
	`deföed
(
HW_PHYSMEM64
)

244 
mib
[1] = 
HW_PHYSMEM64
;

246 
öt64_t
 
size
 = 0;

247 
size_t
 
Àn
 = (
size
);

248 i‡(
	`sys˘l
–
mib
, 2, &
size
, &
Àn
, 
NULL
, 0) == 0)

249  (
size_t
)
size
;

252 #ñi‡
	`deföed
(
_SC_PHYS_PAGES
Ë&& deföed(
_SC_PAGESIZE
)

254  (
size_t
)
	`sysc⁄f
(
_SC_PHYS_PAGES
Ë* (size_t)sysc⁄f(
_SC_PAGESIZE
);

256 #ñi‡
	`deföed
(
CTL_HW
Ë&& (deföed(
HW_PHYSMEM
Ë|| deföed(
HW_REALMEM
))

258 
mib
[2];

259 
mib
[0] = 
CTL_HW
;

260 #i‡
	`deföed
(
HW_REALMEM
)

261 
mib
[1] = 
HW_REALMEM
;

262 #ñi‡
	`deföed
(
HW_PYSMEM
)

263 
mib
[1] = 
HW_PHYSMEM
;

265 
size
 = 0;

266 
size_t
 
Àn
 = (
size
);

267 i‡(
	`sys˘l
(
mib
, 2, &
size
, &
Àn
, 
NULL
, 0) == 0)

268  (
size_t
)
size
;

275 
	}
}

287 #i‡
deföed
(
HAVE_PROC_STAT
)

288 
	~<uni°d.h
>

289 
	~<sys/ty≥s.h
>

290 
	~<sys/°©.h
>

291 
	~<f˙é.h
>

293 
size_t
 
	$dÆloc_gë_rss
() {

294 
∑ge
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

295 
size_t
 
rss
;

296 
buf
[4096];

297 
fûíame
[256];

298 
fd
, 
cou¡
;

299 *
p
, *
x
;

301 
	`¢¥ötf
(
fûíame
,256,"/¥oc/%d/°©",
	`gëpid
());

302 i‡((
fd
 = 
	`›í
(
fûíame
,
O_RDONLY
)) == -1)  0;

303 i‡(
	`ªad
(
fd
,
buf
,4096) <= 0) {

304 
	`˛o£
(
fd
);

307 
	`˛o£
(
fd
);

309 
p
 = 
buf
;

310 
cou¡
 = 23;

311 
p
 && 
cou¡
--) {

312 
p
 = 
	`°rchr
(p,' ');

313 i‡(
p
)Ö++;

315 i‡(!
p
)  0;

316 
x
 = 
	`°rchr
(
p
,' ');

317 i‡(!
x
)  0;

318 *
x
 = '\0';

320 
rss
 = 
	`°πﬁl
(
p
,
NULL
,10);

321 
rss
 *
∑ge
;

322  
rss
;

323 
	}
}

324 #ñi‡
deföed
(
HAVE_TASKINFO
)

325 
	~<uni°d.h
>

326 
	~<°dio.h
>

327 
	~<°dlib.h
>

328 
	~<sys/ty≥s.h
>

329 
	~<sys/sys˘l.h
>

330 
	~<mach/èsk.h
>

331 
	~<mach/mach_öô.h
>

333 
size_t
 
	$dÆloc_gë_rss
() {

334 
èsk_t
 
èsk
 = 
MACH_PORT_NULL
;

335 
èsk_basic_öfo
 
t_öfo
;

336 
mach_msg_ty≥_numbî_t
 
t_öfo_cou¡
 = 
TASK_BASIC_INFO_COUNT
;

338 i‡(
	`èsk_f‹_pid
(
	`cuºít_èsk
(), 
	`gëpid
(), &
èsk
Ë!
KERN_SUCCESS
)

340 
	`èsk_öfo
(
èsk
, 
TASK_BASIC_INFO
, (
èsk_öfo_t
)&
t_öfo
, &
t_öfo_cou¡
);

342  
t_öfo
.
ªsidít_size
;

343 
	}
}

345 
size_t
 
	$dÆloc_gë_rss
() {

351  
	`dÆloc_u£d_mem‹y
();

352 
	}
}

356 
	$dÆloc_gë_‰agmíèti⁄_øtio
(
size_t
 
rss
) {

357  ()
rss
/
	`dÆloc_u£d_mem‹y
();

358 
	}
}

	@dep/dmalloc/dmalloc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<±hªad.h
>

7 
	~<uni°d.h
>

9 
	~<dutû.h
>

10 
	~<dlog.h
>

12 
	~<dmÆloc.h
>

15 
size_t
 
	gu£d_mem‹y
 = 0;

16 
±hªad_muãx_t
 
	gu£d_mem‹y_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

18 #i‡
deföed
(
__ATOMIC_RELAXED
)

19 
	#upd©e_u£d_mem_°©_add
(
__n
Ë
	`__©omic_add_„tch
(&
u£d_mem‹y
, (__n), 
__ATOMIC_RELAXED
)

	)

20 
	#upd©e_u£d_mem_°©_sub
(
__n
Ë
	`__©omic_sub_„tch
(&
u£d_mem‹y
, (__n), 
__ATOMIC_RELAXED
)

	)

21 *
	$mÆloc_lock_ty≥
(Ë{ "__ATOMIC_RELAXED";
	}
}

22 #ñi‡
deföed
(
HAVE_ATOMIC
)

23 
	#upd©e_u£d_mem_°©_add
(
__n
Ë
	`__sync_add_™d_„tch
(&
u£d_mem‹y
, (__n))

	)

24 
	#upd©e_u£d_mem_°©_sub
(
__n
Ë
	`__sync_sub_™d_„tch
(&
u£d_mem‹y
, (__n))

	)

25 *
	$mÆloc_lock_ty≥
(Ë{ "HAVE_ATOMIC";
	}
}

27 
	#upd©e_u£d_mem_°©_add
(
__n
) do { \

28 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
); \

29 
u£d_mem‹y
 +(
__n
); \

30 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
); \

31 } 0)

	)

33 
	#upd©e_u£d_mem_°©_sub
(
__n
) do { \

34 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
); \

35 
u£d_mem‹y
 -(
__n
); \

36 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
); \

37 } 0)

	)

39 *
	$mÆloc_lock_ty≥
(Ë{ "±hªad_muãx_t";
	}
}

42 
	#upd©e_dmÆloc_°©_Æloc
(
__n
) do { \

43 
size_t
 
_n
 = (
__n
); \

44 i‡(
_n
&(()-1)) _n += ()-(_n&(()-1)); \

45 
	`upd©e_u£d_mem_°©_add
(
_n
); \

46 } 0)

	)

48 
	#upd©e_dmÆloc_°©_‰ì
(
__n
) do { \

49 
size_t
 
_n
 = (
__n
); \

50 i‡(
_n
&(()-1)) _n += ()-(_n&(()-1)); \

51 
	`upd©e_u£d_mem_°©_sub
(
_n
); \

52 } 0)

	)

54 #ifde‡
HAVE_MALLOC_SIZE


55 
	#PREFIX_SIZE
 (0)

	)

57 #i‡
deföed
(
__sun
Ë|| deföed(
__•¨c
Ë|| deföed(
__•¨c__
)

58 
	#PREFIX_SIZE
 (())

	)

60 
	#PREFIX_SIZE
 ((
size_t
))

	)

67 #i‚de‡
HAVE_MALLOC_SIZE


68 
size_t
 
	$dmÆloc_size
(*
±r
) {

69 *
ªÆ±r
 = (*)
±r
-
PREFIX_SIZE
;

70 
size_t
 
size
 = *((size_t*)
ªÆ±r
);

73 i‡(
size
&(()-1)) size += ()-(size&(()-1));

74  
size
+
PREFIX_SIZE
;

75 
	}
}

79 
	$_dÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

81 *
p
;

83 
	`ASSERT
(
size
 != 0);

85 #ifde‡
DUSE_JEMALLOC


86 
p
 = 
	`je_mÆloc
(
size
+
PREFIX_SIZE
);

88 
p
 = 
	`mÆloc
(
size
+
PREFIX_SIZE
);

90 i‡(
p
 =
NULL
) {

91 
	`log_îr‹
("mÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

93 #ifde‡
HAVE_MALLOC_SIZE


94 
	`upd©e_dmÆloc_°©_Æloc
(
	`dmÆloc_size
(
p
));

95  
p
;

97 *((
size_t
*)
p
Ë
size
;

98 
	`upd©e_dmÆloc_°©_Æloc
(
size
+
PREFIX_SIZE
);

99  (*)
p
+
PREFIX_SIZE
;

101 
	`log_debug
(
LOG_VVERB
, "mÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

104  
p
;

105 
	}
}

108 
	$_dzÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

110 *
p
;

112 
p
 = 
	`_dÆloc
(
size
, 
«me
, 
löe
);

113 i‡(
p
 !
NULL
) {

114 
	`mem£t
(
p
, 0, 
size
);

117  
p
;

118 
	}
}

121 
	$_dˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
)

123  
	`_dzÆloc
(
nmemb
 * 
size
, 
«me
, 
löe
);

124 
	}
}

127 
	$_dªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
)

129 #i‚de‡
HAVE_MALLOC_SIZE


130 *
ªÆp
;

132 *
p
;

133 
size_t
 
ﬁdsize
;

135 
	`ASSERT
(
size
 != 0);

137 i‡(
±r
 =
NULL
Ë 
	`_dÆloc
(
size
, 
«me
, 
löe
);

139 #ifde‡
HAVE_MALLOC_SIZE


140 
ﬁdsize
 = 
	`dmÆloc_size
(
±r
);

141 #ifde‡
DUSE_JEMALLOC


142 
p
 = 
	`je_ªÆloc
(
±r
, 
size
);

144 
p
 = 
	`ªÆloc
(
±r
, 
size
);

147 
ªÆp
 = (*)
±r
-
PREFIX_SIZE
;

148 
ﬁdsize
 = *((
size_t
*)
ªÆp
);

149 #ifde‡
DUSE_JEMALLOC


150 
p
 = 
	`je_ªÆloc
(
±r
, 
size
+
PREFIX_SIZE
);

152 
p
 = 
	`ªÆloc
(
±r
, 
size
+
PREFIX_SIZE
);

155 i‡(
p
 =
NULL
) {

156 
	`log_îr‹
("ªÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

157  
NULL
;

159 
	`log_debug
(
LOG_VVERB
, "ªÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

160 #ifde‡
HAVE_MALLOC_SIZE


161 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
);

162 
	`upd©e_dmÆloc_°©_Æloc
(
	`dmÆloc_size
(
p
));

163  
p
;

165 *((
size_t
*)
p
Ë
size
;

166 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
);

167 
	`upd©e_dmÆloc_°©_Æloc
(
size
);

168  
p
+
PREFIX_SIZE
;

172  
NULL
;

173 
	}
}

176 
	$_d‰ì
(*
±r
, c⁄° *
«me
, 
löe
)

178 #i‚de‡
HAVE_MALLOC_SIZE


179 *
ªÆp
;

180 
size_t
 
ﬁdsize
;

183 
	`ASSERT
(
±r
 !
NULL
);

184 
	`log_debug
(
LOG_VVERB
, "‰ì(%pË@ %s:%d", 
±r
, 
«me
, 
löe
);

186 #ifde‡
HAVE_MALLOC_SIZE


187 
	`upd©e_dmÆloc_°©_‰ì
(
	`dmÆloc_size
(
±r
));

188 #ifde‡
DUSE_JEMALLOC


189 
	`je_‰ì
(
±r
);

191 
	`‰ì
(
±r
);

194 
ªÆp
 = (*)
±r
-
PREFIX_SIZE
;

195 
ﬁdsize
 = *((
size_t
*)
ªÆp
);

196 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
+
PREFIX_SIZE
);

197 
	`‰ì
(
ªÆp
);

198 #ifde‡
DUSE_JEMALLOC


199 
	`je_‰ì
(
ªÆp
);

201 
	`‰ì
(
ªÆp
);

204 
	}
}

206 
size_t


207 
	$dÆloc_u£d_mem‹y
()

209 
size_t
 
um
;

211 #i‡
	`deföed
(
__ATOMIC_RELAXED
Ë|| deföed(
HAVE_ATOMIC
)

212 
um
 = 
	`upd©e_u£d_mem_°©_add
(0);

214 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
);

215 
um
 = 
u£d_mem‹y
;

216 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
);

219  
um
;

220 
	}
}

235 
size_t
 
	$dÆloc_gë_mem‹y_size
() {

236 #i‡
	`deföed
(
__unix__
Ë|| deföed(
__unix
Ë|| deföed(
unix
) || \

237 (
	`deföed
(
__APPLE__
Ë&& deföed(
__MACH__
))

238 #i‡
	`deföed
(
CTL_HW
Ë&& (deföed(
HW_MEMSIZE
Ë|| deföed(
HW_PHYSMEM64
))

239 
mib
[2];

240 
mib
[0] = 
CTL_HW
;

241 #i‡
	`deföed
(
HW_MEMSIZE
)

242 
mib
[1] = 
HW_MEMSIZE
;

243 #ñi‡
	`deföed
(
HW_PHYSMEM64
)

244 
mib
[1] = 
HW_PHYSMEM64
;

246 
öt64_t
 
size
 = 0;

247 
size_t
 
Àn
 = (
size
);

248 i‡(
	`sys˘l
–
mib
, 2, &
size
, &
Àn
, 
NULL
, 0) == 0)

249  (
size_t
)
size
;

252 #ñi‡
	`deföed
(
_SC_PHYS_PAGES
Ë&& deföed(
_SC_PAGESIZE
)

254  (
size_t
)
	`sysc⁄f
(
_SC_PHYS_PAGES
Ë* (size_t)sysc⁄f(
_SC_PAGESIZE
);

256 #ñi‡
	`deföed
(
CTL_HW
Ë&& (deföed(
HW_PHYSMEM
Ë|| deföed(
HW_REALMEM
))

258 
mib
[2];

259 
mib
[0] = 
CTL_HW
;

260 #i‡
	`deföed
(
HW_REALMEM
)

261 
mib
[1] = 
HW_REALMEM
;

262 #ñi‡
	`deföed
(
HW_PYSMEM
)

263 
mib
[1] = 
HW_PHYSMEM
;

265 
size
 = 0;

266 
size_t
 
Àn
 = (
size
);

267 i‡(
	`sys˘l
(
mib
, 2, &
size
, &
Àn
, 
NULL
, 0) == 0)

268  (
size_t
)
size
;

275 
	}
}

287 #i‡
deföed
(
HAVE_PROC_STAT
)

288 
	~<uni°d.h
>

289 
	~<sys/ty≥s.h
>

290 
	~<sys/°©.h
>

291 
	~<f˙é.h
>

293 
size_t
 
	$dÆloc_gë_rss
() {

294 
∑ge
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

295 
size_t
 
rss
;

296 
buf
[4096];

297 
fûíame
[256];

298 
fd
, 
cou¡
;

299 *
p
, *
x
;

301 
	`¢¥ötf
(
fûíame
,256,"/¥oc/%d/°©",
	`gëpid
());

302 i‡((
fd
 = 
	`›í
(
fûíame
,
O_RDONLY
)) == -1)  0;

303 i‡(
	`ªad
(
fd
,
buf
,4096) <= 0) {

304 
	`˛o£
(
fd
);

307 
	`˛o£
(
fd
);

309 
p
 = 
buf
;

310 
cou¡
 = 23;

311 
p
 && 
cou¡
--) {

312 
p
 = 
	`°rchr
(p,' ');

313 i‡(
p
)Ö++;

315 i‡(!
p
)  0;

316 
x
 = 
	`°rchr
(
p
,' ');

317 i‡(!
x
)  0;

318 *
x
 = '\0';

320 
rss
 = 
	`°πﬁl
(
p
,
NULL
,10);

321 
rss
 *
∑ge
;

322  
rss
;

323 
	}
}

324 #ñi‡
deföed
(
HAVE_TASKINFO
)

325 
	~<uni°d.h
>

326 
	~<°dio.h
>

327 
	~<°dlib.h
>

328 
	~<sys/ty≥s.h
>

329 
	~<sys/sys˘l.h
>

330 
	~<mach/èsk.h
>

331 
	~<mach/mach_öô.h
>

333 
size_t
 
	$dÆloc_gë_rss
() {

334 
èsk_t
 
èsk
 = 
MACH_PORT_NULL
;

335 
èsk_basic_öfo
 
t_öfo
;

336 
mach_msg_ty≥_numbî_t
 
t_öfo_cou¡
 = 
TASK_BASIC_INFO_COUNT
;

338 i‡(
	`èsk_f‹_pid
(
	`cuºít_èsk
(), 
	`gëpid
(), &
èsk
Ë!
KERN_SUCCESS
)

340 
	`èsk_öfo
(
èsk
, 
TASK_BASIC_INFO
, (
èsk_öfo_t
)&
t_öfo
, &
t_öfo_cou¡
);

342  
t_öfo
.
ªsidít_size
;

343 
	}
}

345 
size_t
 
	$dÆloc_gë_rss
() {

351  
	`dÆloc_u£d_mem‹y
();

352 
	}
}

356 
	$dÆloc_gë_‰agmíèti⁄_øtio
(
size_t
 
rss
) {

357  ()
rss
/
	`dÆloc_u£d_mem‹y
();

358 
	}
}

	@dep/dmalloc/dmalloc.h

1 #i‚de‡
_DMALLOC_H_


2 
	#_DMALLOC_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 #ifde‡
HAVE_JEMALLOC


11 
	#DUSE_JEMALLOC
 1

	)

20 #i‡
deföed
(
DUSE_JEMALLOC
)

21 
	#DMALLOC_LIB
 ("jemÆloc-" 
	`__x°r
(
JEMALLOC_VERSION_MAJOR
Ë"." __x°r(
JEMALLOC_VERSION_MINOR
Ë"." __x°r(
JEMALLOC_VERSION_BUGFIX
))

	)

22 
	~<jemÆloc/jemÆloc.h
>

23 #i‡(
JEMALLOC_VERSION_MAJOR
 =2 && 
JEMALLOC_VERSION_MINOR
 >= 1) || (JEMALLOC_VERSION_MAJOR > 2)

24 
	#HAVE_MALLOC_SIZE
 1

	)

25 
	#dmÆloc_size
(
p
Ë
	`je_mÆloc_ußbÀ_size
’)

	)

29 #ñi‡
deföed
(
__APPLE__
)

30 
	~<mÆloc/mÆloc.h
>

31 
	#HAVE_MALLOC_SIZE
 1

	)

32 
	#dmÆloc_size
(
p
Ë
	`mÆloc_size
’)

	)

35 #i‚de‡
DMALLOC_LIB


36 
	#DMALLOC_LIB
 "libc"

	)

39 
	#dÆloc
(
_s
) \

40 
	`_dÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

42 
	#dzÆloc
(
_s
) \

43 
	`_dzÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

45 
	#dˇŒoc
(
_n
, 
_s
) \

46 
	`_dˇŒoc
((
size_t
)(
_n
), (size_t)(
_s
), 
__FILE__
, 
__LINE__
)

	)

48 
	#dªÆloc
(
_p
, 
_s
) \

49 
	`_dªÆloc
(
_p
, (
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

51 
	#d‰ì
(
_p
) do { \

52 
	`_d‰ì
(
_p
, 
__FILE__
, 
__LINE__
); \

53 } 0)

	)

55 *
dmÆloc_lock_ty≥
();

57 #i‚de‡
HAVE_MALLOC_SIZE


58 
size_t
 
dmÆloc_size
(*
±r
);

61 *
_dÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

62 *
_dzÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

63 *
_dˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
);

64 *
_dªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
);

65 
_d‰ì
(*
±r
, c⁄° *
«me
, 
löe
);

67 
size_t
 
dÆloc_u£d_mem‹y
();

69 
size_t
 
dÆloc_gë_mem‹y_size
();

71 
size_t
 
dÆloc_gë_rss
();

72 
dÆloc_gë_‰agmíèti⁄_øtio
(
size_t
 
rss
);

	@dep/dmalloc/dmalloc.h

1 #i‚de‡
_DMALLOC_H_


2 
	#_DMALLOC_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 #ifde‡
HAVE_JEMALLOC


11 
	#DUSE_JEMALLOC
 1

	)

20 #i‡
deföed
(
DUSE_JEMALLOC
)

21 
	#DMALLOC_LIB
 ("jemÆloc-" 
	`__x°r
(
JEMALLOC_VERSION_MAJOR
Ë"." __x°r(
JEMALLOC_VERSION_MINOR
Ë"." __x°r(
JEMALLOC_VERSION_BUGFIX
))

	)

22 
	~<jemÆloc/jemÆloc.h
>

23 #i‡(
JEMALLOC_VERSION_MAJOR
 =2 && 
JEMALLOC_VERSION_MINOR
 >= 1) || (JEMALLOC_VERSION_MAJOR > 2)

24 
	#HAVE_MALLOC_SIZE
 1

	)

25 
	#dmÆloc_size
(
p
Ë
	`je_mÆloc_ußbÀ_size
’)

	)

29 #ñi‡
deföed
(
__APPLE__
)

30 
	~<mÆloc/mÆloc.h
>

31 
	#HAVE_MALLOC_SIZE
 1

	)

32 
	#dmÆloc_size
(
p
Ë
	`mÆloc_size
’)

	)

35 #i‚de‡
DMALLOC_LIB


36 
	#DMALLOC_LIB
 "libc"

	)

39 
	#dÆloc
(
_s
) \

40 
	`_dÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

42 
	#dzÆloc
(
_s
) \

43 
	`_dzÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

45 
	#dˇŒoc
(
_n
, 
_s
) \

46 
	`_dˇŒoc
((
size_t
)(
_n
), (size_t)(
_s
), 
__FILE__
, 
__LINE__
)

	)

48 
	#dªÆloc
(
_p
, 
_s
) \

49 
	`_dªÆloc
(
_p
, (
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

51 
	#d‰ì
(
_p
) do { \

52 
	`_d‰ì
(
_p
, 
__FILE__
, 
__LINE__
); \

53 } 0)

	)

55 *
dmÆloc_lock_ty≥
();

57 #i‚de‡
HAVE_MALLOC_SIZE


58 
size_t
 
dmÆloc_size
(*
±r
);

61 *
_dÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

62 *
_dzÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

63 *
_dˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
);

64 *
_dªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
);

65 
_d‰ì
(*
±r
, c⁄° *
«me
, 
löe
);

67 
size_t
 
dÆloc_u£d_mem‹y
();

69 
size_t
 
dÆloc_gë_mem‹y_size
();

71 
size_t
 
dÆloc_gë_rss
();

72 
dÆloc_gë_‰agmíèti⁄_øtio
(
size_t
 
rss
);

	@dep/himemcached-0.1.0/himcdep/sds.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<˘y≥.h
>

35 
	~<as£π.h
>

37 
	~"sds.h
"

51 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

52 
sdshdr
 *
sh
;

54 i‡(
öô
) {

55 
sh
 = 
	`mÆloc
( *sh+
öôÀn
+1);

57 
sh
 = 
	`ˇŒoc
( *sh+
öôÀn
+1,1);

59 i‡(
sh
 =
NULL
)  NULL;

60 
sh
->
Àn
 = 
öôÀn
;

61 
sh
->
‰ì
 = 0;

62 i‡(
öôÀn
 && 
öô
)

63 
	`mem˝y
(
sh
->
buf
, 
öô
, 
öôÀn
);

64 
sh
->
buf
[
öôÀn
] = '\0';

65  (*)
sh
->
buf
;

66 
	}
}

70 
sds
 
	$sd£m±y
() {

71  
	`sd¢ewÀn
("",0);

72 
	}
}

75 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

76 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

77  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

78 
	}
}

81 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

82  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

83 
	}
}

86 
	$sds‰ì
(
sds
 
s
) {

87 i‡(
s
 =
NULL
) ;

88 
	`‰ì
(
s
-(
sdshdr
));

89 
	}
}

105 
	$sdsupd©ñí
(
sds
 
s
) {

106 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

107 
ªÆÀn
 = 
	`°æí
(
s
);

108 
sh
->
‰ì
 +(sh->
Àn
-
ªÆÀn
);

109 
sh
->
Àn
 = 
ªÆÀn
;

110 
	}
}

116 
	$sds˛ór
(
sds
 
s
) {

117 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

118 
sh
->
‰ì
 +sh->
Àn
;

119 
sh
->
Àn
 = 0;

120 
sh
->
buf
[0] = '\0';

121 
	}
}

129 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

130 
sdshdr
 *
sh
, *
√wsh
;

131 
size_t
 
‰ì
 = 
	`sdßvaû
(
s
);

132 
size_t
 
Àn
, 
√wÀn
;

134 i‡(
‰ì
 >
addÀn
Ë 
s
;

135 
Àn
 = 
	`sd¶í
(
s
);

136 
sh
 = (*Ë(
s
- *sh);

137 
√wÀn
 = (
Àn
+
addÀn
);

138 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

139 
√wÀn
 *= 2;

141 
√wÀn
 +
SDS_MAX_PREALLOC
;

142 
√wsh
 = 
	`ªÆloc
(
sh
,  *√wsh+
√wÀn
+1);

143 i‡(
√wsh
 =
NULL
)  NULL;

145 
√wsh
->
‰ì
 = 
√wÀn
 - 
Àn
;

146  
√wsh
->
buf
;

147 
	}
}

155 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

156 
sdshdr
 *
sh
;

158 
sh
 = (*Ë(
s
- *sh);

159 
sh
 = 
	`ªÆloc
(sh,  *sh+sh->
Àn
+1);

160 
sh
->
‰ì
 = 0;

161  
sh
->
buf
;

162 
	}
}

171 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

172 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

174  (*
sh
)+sh->
Àn
+sh->
‰ì
+1;

175 
	}
}

200 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

201 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

203 
	`as£π
(
sh
->
‰ì
 >
ö¸
);

204 
sh
->
Àn
 +
ö¸
;

205 
sh
->
‰ì
 -
ö¸
;

206 
	`as£π
(
sh
->
‰ì
 >= 0);

207 
s
[
sh
->
Àn
] = '\0';

208 
	}
}

215 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

216 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

217 
size_t
 
tŸÀn
, 
cuæí
 = 
sh
->
Àn
;

219 i‡(
Àn
 <
cuæí
Ë 
s
;

220 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

221 i‡(
s
 =
NULL
)  NULL;

224 
sh
 = (*)(
s
- *sh);

225 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

226 
tŸÀn
 = 
sh
->
Àn
+sh->
‰ì
;

227 
sh
->
Àn
 =Üen;

228 
sh
->
‰ì
 = 
tŸÀn
-sh->
Àn
;

229  
s
;

230 
	}
}

237 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

238 
sdshdr
 *
sh
;

239 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

241 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

242 i‡(
s
 =
NULL
)  NULL;

243 
sh
 = (*Ë(
s
- *sh);

244 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

245 
sh
->
Àn
 = 
cuæí
+len;

246 
sh
->
‰ì
 = sh->‰ì-
Àn
;

247 
s
[
cuæí
+
Àn
] = '\0';

248  
s
;

249 
	}
}

255 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

256  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

257 
	}
}

263 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

264  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

265 
	}
}

269 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

270 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

271 
size_t
 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

273 i‡(
tŸÀn
 < 
Àn
) {

274 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
sh
->len);

275 i‡(
s
 =
NULL
)  NULL;

276 
sh
 = (*Ë(
s
- *sh);

277 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

279 
	`mem˝y
(
s
, 
t
, 
Àn
);

280 
s
[
Àn
] = '\0';

281 
sh
->
Àn
 =Üen;

282 
sh
->
‰ì
 = 
tŸÀn
-
Àn
;

283  
s
;

284 
	}
}

288 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

289  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

290 
	}
}

298 
	#SDS_LLSTR_SIZE
 21

	)

299 
	$sd¶l2°r
(*
s
, 
vÆue
) {

300 *
p
, 
aux
;

301 
v
;

302 
size_t
 
l
;

306 
v
 = (
vÆue
 < 0) ? -value : value;

307 
p
 = 
s
;

309 *
p
++ = '0'+(
v
%10);

310 
v
 /= 10;

311 } 
v
);

312 i‡(
vÆue
 < 0Ë*
p
++ = '-';

315 
l
 = 
p
-
s
;

316 *
p
 = '\0';

319 
p
--;

320 
s
 < 
p
) {

321 
aux
 = *
s
;

322 *
s
 = *
p
;

323 *
p
 = 
aux
;

324 
s
++;

325 
p
--;

327  
l
;

328 
	}
}

331 
	$sdsuŒ2°r
(*
s
, 
v
) {

332 *
p
, 
aux
;

333 
size_t
 
l
;

337 
p
 = 
s
;

339 *
p
++ = '0'+(
v
%10);

340 
v
 /= 10;

341 } 
v
);

344 
l
 = 
p
-
s
;

345 *
p
 = '\0';

348 
p
--;

349 
s
 < 
p
) {

350 
aux
 = *
s
;

351 *
s
 = *
p
;

352 *
p
 = 
aux
;

353 
s
++;

354 
p
--;

356  
l
;

357 
	}
}

360 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

361 
va_li°
 
˝y
;

362 *
buf
, *
t
;

363 
size_t
 
buÊí
 = 16;

366 
buf
 = 
	`mÆloc
(
buÊí
);

367 i‡(
buf
 =
NULL
)  NULL;

368 
buf
[
buÊí
-2] = '\0';

369 
	`va_c›y
(
˝y
,
≠
);

370 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

371 i‡(
buf
[
buÊí
-2] != '\0') {

372 
	`‰ì
(
buf
);

373 
buÊí
 *= 2;

378 
t
 = 
	`sdsˇt
(
s
, 
buf
);

379 
	`‰ì
(
buf
);

380  
t
;

381 
	}
}

399 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

400 
va_li°
 
≠
;

401 *
t
;

402 
	`va_°¨t
(
≠
, 
fmt
);

403 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

404 
	`va_íd
(
≠
);

405  
t
;

406 
	}
}

425 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

426 
sdshdr
 *
sh
 = (*Ë(
s
-((sdshdr)));

427 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

428 c⁄° *
f
 = 
fmt
;

429 
i
;

430 
va_li°
 
≠
;

432 
	`va_°¨t
(
≠
,
fmt
);

433 
f
 = 
fmt
;

434 
i
 = 
öôÀn
;

435 *
f
) {

436 
√xt
, *
°r
;

437 
l
;

438 
num
;

439 
unum
;

442 i‡(
sh
->
‰ì
 == 0) {

443 
s
 = 
	`sdsMakeRoomF‹
(s,1);

444 
sh
 = (*Ë(
s
-((
sdshdr
)));

447 *
f
) {

449 
√xt
 = *(
f
+1);

450 
f
++;

451 
√xt
) {

454 
°r
 = 
	`va_¨g
(
≠
,*);

455 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

456 i‡(
sh
->
‰ì
 < 
l
) {

457 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

458 
sh
 = (*Ë(
s
-((
sdshdr
)));

460 
	`mem˝y
(
s
+
i
,
°r
,
l
);

461 
sh
->
Àn
 +
l
;

462 
sh
->
‰ì
 -
l
;

463 
i
 +
l
;

467 i‡(
√xt
 == 'i')

468 
num
 = 
	`va_¨g
(
≠
,);

470 
num
 = 
	`va_¨g
(
≠
,);

472 
buf
[
SDS_LLSTR_SIZE
];

473 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

474 i‡(
sh
->
‰ì
 < 
l
) {

475 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

476 
sh
 = (*Ë(
s
-((
sdshdr
)));

478 
	`mem˝y
(
s
+
i
,
buf
,
l
);

479 
sh
->
Àn
 +
l
;

480 
sh
->
‰ì
 -
l
;

481 
i
 +
l
;

487 i‡(
√xt
 == 'u')

488 
unum
 = 
	`va_¨g
(
≠
,);

489 if(
√xt
 == 'U')

490 
unum
 = 
	`va_¨g
(
≠
,);

492 
unum
 = ()
	`va_¨g
(
≠
,
size_t
);

494 
buf
[
SDS_LLSTR_SIZE
];

495 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

496 i‡(
sh
->
‰ì
 < 
l
) {

497 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

498 
sh
 = (*Ë(
s
-((
sdshdr
)));

500 
	`mem˝y
(
s
+
i
,
buf
,
l
);

501 
sh
->
Àn
 +
l
;

502 
sh
->
‰ì
 -
l
;

503 
i
 +
l
;

507 
s
[
i
++] = 
√xt
;

508 
sh
->
Àn
 += 1;

509 
sh
->
‰ì
 -= 1;

514 
s
[
i
++] = *
f
;

515 
sh
->
Àn
 += 1;

516 
sh
->
‰ì
 -= 1;

519 
f
++;

521 
	`va_íd
(
≠
);

524 
s
[
i
] = '\0';

525  
s
;

526 
	}
}

543 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

544 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

545 *
°¨t
, *
íd
, *
•
, *
ï
;

546 
size_t
 
Àn
;

548 
•
 = 
°¨t
 = 
s
;

549 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

550 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

551 
ï
 > 
°¨t
 && 
	`°rchr
(
c£t
, *ep))Ép--;

552 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

553 i‡(
sh
->
buf
 !
•
Ë
	`memmove
(sh->buf, sp, 
Àn
);

554 
sh
->
buf
[
Àn
] = '\0';

555 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-len);

556 
sh
->
Àn
 =Üen;

557 
	}
}

575 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

576 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

577 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

579 i‡(
Àn
 == 0) ;

580 i‡(
°¨t
 < 0) {

581 
°¨t
 = 
Àn
+start;

582 i‡(
°¨t
 < 0) start = 0;

584 i‡(
íd
 < 0) {

585 
íd
 = 
Àn
+end;

586 i‡(
íd
 < 0)Énd = 0;

588 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

589 i‡(
√wÀn
 != 0) {

590 i‡(
°¨t
 >(sig√d)
Àn
) {

591 
√wÀn
 = 0;

592 } i‡(
íd
 >(sig√d)
Àn
) {

593 
íd
 = 
Àn
-1;

594 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

597 
°¨t
 = 0;

599 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
sh
->
buf
, sh->buf+start,Çewlen);

600 
sh
->
buf
[
√wÀn
] = 0;

601 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-
√wÀn
);

602 
sh
->
Àn
 = 
√wÀn
;

603 
	}
}

606 
	$sd°ﬁowî
(
sds
 
s
) {

607 
Àn
 = 
	`sd¶í
(
s
), 
j
;

609 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

610 
	}
}

613 
	$sd°ouµî
(
sds
 
s
) {

614 
Àn
 = 
	`sd¶í
(
s
), 
j
;

616 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

617 
	}
}

630 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

631 
size_t
 
l1
, 
l2
, 
möÀn
;

632 
cmp
;

634 
l1
 = 
	`sd¶í
(
s1
);

635 
l2
 = 
	`sd¶í
(
s2
);

636 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

637 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

638 i‡(
cmp
 =0Ë 
l1
-
l2
;

639  
cmp
;

640 
	}
}

658 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

659 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

660 
sds
 *
tokís
;

662 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

664 
tokís
 = 
	`mÆloc
((
sds
)*
¶Ÿs
);

665 i‡(
tokís
 =
NULL
)  NULL;

667 i‡(
Àn
 == 0) {

668 *
cou¡
 = 0;

669  
tokís
;

671 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

673 i‡(
¶Ÿs
 < 
ñemíts
+2) {

674 
sds
 *
√wtokís
;

676 
¶Ÿs
 *= 2;

677 
√wtokís
 = 
	`ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

678 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

679 
tokís
 = 
√wtokís
;

682 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

683 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

684 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

685 
ñemíts
++;

686 
°¨t
 = 
j
+
£∂í
;

687 
j
 = j+
£∂í
-1;

691 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

692 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

693 
ñemíts
++;

694 *
cou¡
 = 
ñemíts
;

695  
tokís
;

697 
˛ónup
:

699 
i
;

700 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

701 
	`‰ì
(
tokís
);

702 *
cou¡
 = 0;

703  
NULL
;

705 
	}
}

708 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

709 i‡(!
tokís
) ;

710 
cou¡
--)

711 
	`sds‰ì
(
tokís
[
cou¡
]);

712 
	`‰ì
(
tokís
);

713 
	}
}

719 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

720 
buf
[32], *
p
;

721 
v
;

723 
v
 = (
vÆue
 < 0) ? -value : value;

724 
p
 = 
buf
+31;

726 *
p
-- = '0'+(
v
%10);

727 
v
 /= 10;

728 } 
v
);

729 i‡(
vÆue
 < 0Ë*
p
-- = '-';

730 
p
++;

731  
	`sd¢ewÀn
(
p
,32-’-
buf
));

732 
	}
}

740 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

741 
s
 = 
	`sdsˇéí
(s,"\"",1);

742 
Àn
--) {

743 *
p
) {

746 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

748 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

749 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

750 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

751 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

752 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

754 i‡(
	`i•röt
(*
p
))

755 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

757 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

760 
p
++;

762  
	`sdsˇéí
(
s
,"\"",1);

763 
	}
}

767 
	$is_hex_digô
(
c
) {

768  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

769 (
c
 >= 'A' && c <= 'F');

770 
	}
}

774 
	$hex_digô_to_öt
(
c
) {

775 
c
) {

794 
	}
}

815 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

816 c⁄° *
p
 = 
löe
;

817 *
cuºít
 = 
NULL
;

818 **
ve˘‹
 = 
NULL
;

820 *
¨gc
 = 0;

823 *
p
 && 
	`is•a˚
(*p))Ö++;

824 i‡(*
p
) {

826 
öq
=0;

827 
ösq
=0;

828 
d⁄e
=0;

830 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

831 !
d⁄e
) {

832 i‡(
öq
) {

833 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

834 
	`is_hex_digô
(*(
p
+2)) &&

835 
	`is_hex_digô
(*(
p
+3)))

837 
byã
;

839 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

840 
	`hex_digô_to_öt
(*(
p
+3));

841 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

842 
p
 += 3;

843 } i‡(*
p
 == '\\' && *(p+1)) {

844 
c
;

846 
p
++;

847 *
p
) {

848 'n': 
c
 = '\n'; ;

849 'r': 
c
 = '\r'; ;

850 't': 
c
 = '\t'; ;

851 'b': 
c
 = '\b'; ;

852 'a': 
c
 = '\a'; ;

853 : 
c
 = *
p
; ;

855 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

856 } i‡(*
p
 == '"') {

859 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

860 
d⁄e
=1;

861 } i‡(!*
p
) {

863 
îr
;

865 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

867 } i‡(
ösq
) {

868 i‡(*
p
 == '\\' && *(p+1) == '\'') {

869 
p
++;

870 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

871 } i‡(*
p
 == '\'') {

874 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

875 
d⁄e
=1;

876 } i‡(!*
p
) {

878 
îr
;

880 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

883 *
p
) {

889 
d⁄e
=1;

892 
öq
=1;

895 
ösq
=1;

898 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

902 i‡(*
p
)Ö++;

905 
ve˘‹
 = 
	`ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

906 
ve˘‹
[*
¨gc
] = 
cuºít
;

907 (*
¨gc
)++;

908 
cuºít
 = 
NULL
;

911 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`mÆloc
((*));

912  
ve˘‹
;

916 
îr
:

917 (*
¨gc
)--)

918 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

919 
	`‰ì
(
ve˘‹
);

920 i‡(
cuºít
Ë
	`sds‰ì
(current);

921 *
¨gc
 = 0;

922  
NULL
;

923 
	}
}

934 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

935 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

937 
j
 = 0; j < 
l
; j++) {

938 
i
 = 0; i < 
£éí
; i++) {

939 i‡(
s
[
j
] =
‰om
[
i
]) {

940 
s
[
j
] = 
to
[
i
];

945  
s
;

946 
	}
}

950 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
) {

951 
sds
 
joö
 = 
	`sd£m±y
();

952 
j
;

954 
j
 = 0; j < 
¨gc
; j++) {

955 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

956 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

958  
joö
;

959 
	}
}

962 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

963 
sds
 
joö
 = 
	`sd£m±y
();

964 
j
;

966 
j
 = 0; j < 
¨gc
; j++) {

967 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

968 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

970  
joö
;

971 
	}
}

973 #ifde‡
SDS_TEST_MAIN


974 
	~<°dio.h
>

975 
	~"ã°hñp.h
"

977 
	$maö
() {

979 
sdshdr
 *
sh
;

980 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

982 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

983 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

985 
	`sds‰ì
(
x
);

986 
x
 = 
	`sd¢ewÀn
("foo",2);

987 
	`ã°_c⁄d
("Createá string with specifiedÜength",

988 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

990 
x
 = 
	`sdsˇt
(x,"bar");

991 
	`ã°_c⁄d
("Strings concatenation",

992 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

994 
x
 = 
	`sds˝y
(x,"a");

995 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

996 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

998 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

999 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1000 
	`sd¶í
(
x
) == 33 &&

1001 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1003 
	`sds‰ì
(
x
);

1004 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1005 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1006 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) ==0)

1008 
	`sds‰ì
(
x
);

1009 
x
 = 
	`sd¢ew
("xxciaoyyy");

1010 
	`sd°rim
(
x
,"xy");

1011 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1012 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1014 
y
 = 
	`sdsdup
(
x
);

1015 
	`sd§™ge
(
y
,1,1);

1016 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1017 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1019 
	`sds‰ì
(
y
);

1020 
y
 = 
	`sdsdup
(
x
);

1021 
	`sd§™ge
(
y
,1,-1);

1022 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1023 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1025 
	`sds‰ì
(
y
);

1026 
y
 = 
	`sdsdup
(
x
);

1027 
	`sd§™ge
(
y
,-2,-1);

1028 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1029 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1031 
	`sds‰ì
(
y
);

1032 
y
 = 
	`sdsdup
(
x
);

1033 
	`sd§™ge
(
y
,2,1);

1034 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1035 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1037 
	`sds‰ì
(
y
);

1038 
y
 = 
	`sdsdup
(
x
);

1039 
	`sd§™ge
(
y
,1,100);

1040 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1041 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1043 
	`sds‰ì
(
y
);

1044 
y
 = 
	`sdsdup
(
x
);

1045 
	`sd§™ge
(
y
,100,100);

1046 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1047 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1049 
	`sds‰ì
(
y
);

1050 
	`sds‰ì
(
x
);

1051 
x
 = 
	`sd¢ew
("foo");

1052 
y
 = 
	`sd¢ew
("foa");

1053 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1055 
	`sds‰ì
(
y
);

1056 
	`sds‰ì
(
x
);

1057 
x
 = 
	`sd¢ew
("bar");

1058 
y
 = 
	`sd¢ew
("bar");

1059 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1061 
	`sds‰ì
(
y
);

1062 
	`sds‰ì
(
x
);

1063 
x
 = 
	`sd¢ew
("aar");

1064 
y
 = 
	`sd¢ew
("bar");

1065 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1067 
	`sds‰ì
(
y
);

1068 
	`sds‰ì
(
x
);

1069 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1070 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1071 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1072 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1075 
ﬁd‰ì
;

1077 
	`sds‰ì
(
x
);

1078 
x
 = 
	`sd¢ew
("0");

1079 
sh
 = (*Ë(
x
-((
sdshdr
)));

1080 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
sh
->
Àn
 =1 && sh->
‰ì
 == 0);

1081 
x
 = 
	`sdsMakeRoomF‹
(x,1);

1082 
sh
 = (*Ë(
x
-((
sdshdr
)));

1083 
	`ã°_c⁄d
("sdsMakeRoomF‹()", 
sh
->
Àn
 =1 && sh->
‰ì
 > 0);

1084 
ﬁd‰ì
 = 
sh
->
‰ì
;

1085 
x
[1] = '1';

1086 
	`sdsIn¸Lí
(
x
,1);

1087 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- c⁄ã¡", 
x
[0] == '0' && x[1] == '1');

1088 
	`ã°_c⁄d
("sdsIn¸Lí(Ë--Üí", 
sh
->
Àn
 == 2);

1089 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- fªe", 
sh
->
‰ì
 =
ﬁd‰ì
-1);

1092 
	`ã°_ªp‹t
()

1094 
	}
}

	@dep/himemcached-0.1.0/himcdep/sds.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<˘y≥.h
>

35 
	~<as£π.h
>

37 
	~"sds.h
"

51 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

52 
sdshdr
 *
sh
;

54 i‡(
öô
) {

55 
sh
 = 
	`mÆloc
( *sh+
öôÀn
+1);

57 
sh
 = 
	`ˇŒoc
( *sh+
öôÀn
+1,1);

59 i‡(
sh
 =
NULL
)  NULL;

60 
sh
->
Àn
 = 
öôÀn
;

61 
sh
->
‰ì
 = 0;

62 i‡(
öôÀn
 && 
öô
)

63 
	`mem˝y
(
sh
->
buf
, 
öô
, 
öôÀn
);

64 
sh
->
buf
[
öôÀn
] = '\0';

65  (*)
sh
->
buf
;

66 
	}
}

70 
sds
 
	$sd£m±y
() {

71  
	`sd¢ewÀn
("",0);

72 
	}
}

75 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

76 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

77  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

78 
	}
}

81 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

82  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

83 
	}
}

86 
	$sds‰ì
(
sds
 
s
) {

87 i‡(
s
 =
NULL
) ;

88 
	`‰ì
(
s
-(
sdshdr
));

89 
	}
}

105 
	$sdsupd©ñí
(
sds
 
s
) {

106 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

107 
ªÆÀn
 = 
	`°æí
(
s
);

108 
sh
->
‰ì
 +(sh->
Àn
-
ªÆÀn
);

109 
sh
->
Àn
 = 
ªÆÀn
;

110 
	}
}

116 
	$sds˛ór
(
sds
 
s
) {

117 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

118 
sh
->
‰ì
 +sh->
Àn
;

119 
sh
->
Àn
 = 0;

120 
sh
->
buf
[0] = '\0';

121 
	}
}

129 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

130 
sdshdr
 *
sh
, *
√wsh
;

131 
size_t
 
‰ì
 = 
	`sdßvaû
(
s
);

132 
size_t
 
Àn
, 
√wÀn
;

134 i‡(
‰ì
 >
addÀn
Ë 
s
;

135 
Àn
 = 
	`sd¶í
(
s
);

136 
sh
 = (*Ë(
s
- *sh);

137 
√wÀn
 = (
Àn
+
addÀn
);

138 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

139 
√wÀn
 *= 2;

141 
√wÀn
 +
SDS_MAX_PREALLOC
;

142 
√wsh
 = 
	`ªÆloc
(
sh
,  *√wsh+
√wÀn
+1);

143 i‡(
√wsh
 =
NULL
)  NULL;

145 
√wsh
->
‰ì
 = 
√wÀn
 - 
Àn
;

146  
√wsh
->
buf
;

147 
	}
}

155 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

156 
sdshdr
 *
sh
;

158 
sh
 = (*Ë(
s
- *sh);

159 
sh
 = 
	`ªÆloc
(sh,  *sh+sh->
Àn
+1);

160 
sh
->
‰ì
 = 0;

161  
sh
->
buf
;

162 
	}
}

171 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

172 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

174  (*
sh
)+sh->
Àn
+sh->
‰ì
+1;

175 
	}
}

200 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

201 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

203 
	`as£π
(
sh
->
‰ì
 >
ö¸
);

204 
sh
->
Àn
 +
ö¸
;

205 
sh
->
‰ì
 -
ö¸
;

206 
	`as£π
(
sh
->
‰ì
 >= 0);

207 
s
[
sh
->
Àn
] = '\0';

208 
	}
}

215 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

216 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

217 
size_t
 
tŸÀn
, 
cuæí
 = 
sh
->
Àn
;

219 i‡(
Àn
 <
cuæí
Ë 
s
;

220 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

221 i‡(
s
 =
NULL
)  NULL;

224 
sh
 = (*)(
s
- *sh);

225 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

226 
tŸÀn
 = 
sh
->
Àn
+sh->
‰ì
;

227 
sh
->
Àn
 =Üen;

228 
sh
->
‰ì
 = 
tŸÀn
-sh->
Àn
;

229  
s
;

230 
	}
}

237 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

238 
sdshdr
 *
sh
;

239 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

241 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

242 i‡(
s
 =
NULL
)  NULL;

243 
sh
 = (*Ë(
s
- *sh);

244 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

245 
sh
->
Àn
 = 
cuæí
+len;

246 
sh
->
‰ì
 = sh->‰ì-
Àn
;

247 
s
[
cuæí
+
Àn
] = '\0';

248  
s
;

249 
	}
}

255 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

256  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

257 
	}
}

263 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

264  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

265 
	}
}

269 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

270 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

271 
size_t
 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

273 i‡(
tŸÀn
 < 
Àn
) {

274 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
sh
->len);

275 i‡(
s
 =
NULL
)  NULL;

276 
sh
 = (*Ë(
s
- *sh);

277 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

279 
	`mem˝y
(
s
, 
t
, 
Àn
);

280 
s
[
Àn
] = '\0';

281 
sh
->
Àn
 =Üen;

282 
sh
->
‰ì
 = 
tŸÀn
-
Àn
;

283  
s
;

284 
	}
}

288 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

289  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

290 
	}
}

298 
	#SDS_LLSTR_SIZE
 21

	)

299 
	$sd¶l2°r
(*
s
, 
vÆue
) {

300 *
p
, 
aux
;

301 
v
;

302 
size_t
 
l
;

306 
v
 = (
vÆue
 < 0) ? -value : value;

307 
p
 = 
s
;

309 *
p
++ = '0'+(
v
%10);

310 
v
 /= 10;

311 } 
v
);

312 i‡(
vÆue
 < 0Ë*
p
++ = '-';

315 
l
 = 
p
-
s
;

316 *
p
 = '\0';

319 
p
--;

320 
s
 < 
p
) {

321 
aux
 = *
s
;

322 *
s
 = *
p
;

323 *
p
 = 
aux
;

324 
s
++;

325 
p
--;

327  
l
;

328 
	}
}

331 
	$sdsuŒ2°r
(*
s
, 
v
) {

332 *
p
, 
aux
;

333 
size_t
 
l
;

337 
p
 = 
s
;

339 *
p
++ = '0'+(
v
%10);

340 
v
 /= 10;

341 } 
v
);

344 
l
 = 
p
-
s
;

345 *
p
 = '\0';

348 
p
--;

349 
s
 < 
p
) {

350 
aux
 = *
s
;

351 *
s
 = *
p
;

352 *
p
 = 
aux
;

353 
s
++;

354 
p
--;

356  
l
;

357 
	}
}

360 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

361 
va_li°
 
˝y
;

362 *
buf
, *
t
;

363 
size_t
 
buÊí
 = 16;

366 
buf
 = 
	`mÆloc
(
buÊí
);

367 i‡(
buf
 =
NULL
)  NULL;

368 
buf
[
buÊí
-2] = '\0';

369 
	`va_c›y
(
˝y
,
≠
);

370 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

371 i‡(
buf
[
buÊí
-2] != '\0') {

372 
	`‰ì
(
buf
);

373 
buÊí
 *= 2;

378 
t
 = 
	`sdsˇt
(
s
, 
buf
);

379 
	`‰ì
(
buf
);

380  
t
;

381 
	}
}

399 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

400 
va_li°
 
≠
;

401 *
t
;

402 
	`va_°¨t
(
≠
, 
fmt
);

403 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

404 
	`va_íd
(
≠
);

405  
t
;

406 
	}
}

425 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

426 
sdshdr
 *
sh
 = (*Ë(
s
-((sdshdr)));

427 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

428 c⁄° *
f
 = 
fmt
;

429 
i
;

430 
va_li°
 
≠
;

432 
	`va_°¨t
(
≠
,
fmt
);

433 
f
 = 
fmt
;

434 
i
 = 
öôÀn
;

435 *
f
) {

436 
√xt
, *
°r
;

437 
l
;

438 
num
;

439 
unum
;

442 i‡(
sh
->
‰ì
 == 0) {

443 
s
 = 
	`sdsMakeRoomF‹
(s,1);

444 
sh
 = (*Ë(
s
-((
sdshdr
)));

447 *
f
) {

449 
√xt
 = *(
f
+1);

450 
f
++;

451 
√xt
) {

454 
°r
 = 
	`va_¨g
(
≠
,*);

455 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

456 i‡(
sh
->
‰ì
 < 
l
) {

457 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

458 
sh
 = (*Ë(
s
-((
sdshdr
)));

460 
	`mem˝y
(
s
+
i
,
°r
,
l
);

461 
sh
->
Àn
 +
l
;

462 
sh
->
‰ì
 -
l
;

463 
i
 +
l
;

467 i‡(
√xt
 == 'i')

468 
num
 = 
	`va_¨g
(
≠
,);

470 
num
 = 
	`va_¨g
(
≠
,);

472 
buf
[
SDS_LLSTR_SIZE
];

473 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

474 i‡(
sh
->
‰ì
 < 
l
) {

475 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

476 
sh
 = (*Ë(
s
-((
sdshdr
)));

478 
	`mem˝y
(
s
+
i
,
buf
,
l
);

479 
sh
->
Àn
 +
l
;

480 
sh
->
‰ì
 -
l
;

481 
i
 +
l
;

487 i‡(
√xt
 == 'u')

488 
unum
 = 
	`va_¨g
(
≠
,);

489 if(
√xt
 == 'U')

490 
unum
 = 
	`va_¨g
(
≠
,);

492 
unum
 = ()
	`va_¨g
(
≠
,
size_t
);

494 
buf
[
SDS_LLSTR_SIZE
];

495 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

496 i‡(
sh
->
‰ì
 < 
l
) {

497 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

498 
sh
 = (*Ë(
s
-((
sdshdr
)));

500 
	`mem˝y
(
s
+
i
,
buf
,
l
);

501 
sh
->
Àn
 +
l
;

502 
sh
->
‰ì
 -
l
;

503 
i
 +
l
;

507 
s
[
i
++] = 
√xt
;

508 
sh
->
Àn
 += 1;

509 
sh
->
‰ì
 -= 1;

514 
s
[
i
++] = *
f
;

515 
sh
->
Àn
 += 1;

516 
sh
->
‰ì
 -= 1;

519 
f
++;

521 
	`va_íd
(
≠
);

524 
s
[
i
] = '\0';

525  
s
;

526 
	}
}

543 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

544 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

545 *
°¨t
, *
íd
, *
•
, *
ï
;

546 
size_t
 
Àn
;

548 
•
 = 
°¨t
 = 
s
;

549 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

550 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

551 
ï
 > 
°¨t
 && 
	`°rchr
(
c£t
, *ep))Ép--;

552 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

553 i‡(
sh
->
buf
 !
•
Ë
	`memmove
(sh->buf, sp, 
Àn
);

554 
sh
->
buf
[
Àn
] = '\0';

555 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-len);

556 
sh
->
Àn
 =Üen;

557 
	}
}

575 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

576 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

577 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

579 i‡(
Àn
 == 0) ;

580 i‡(
°¨t
 < 0) {

581 
°¨t
 = 
Àn
+start;

582 i‡(
°¨t
 < 0) start = 0;

584 i‡(
íd
 < 0) {

585 
íd
 = 
Àn
+end;

586 i‡(
íd
 < 0)Énd = 0;

588 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

589 i‡(
√wÀn
 != 0) {

590 i‡(
°¨t
 >(sig√d)
Àn
) {

591 
√wÀn
 = 0;

592 } i‡(
íd
 >(sig√d)
Àn
) {

593 
íd
 = 
Àn
-1;

594 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

597 
°¨t
 = 0;

599 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
sh
->
buf
, sh->buf+start,Çewlen);

600 
sh
->
buf
[
√wÀn
] = 0;

601 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-
√wÀn
);

602 
sh
->
Àn
 = 
√wÀn
;

603 
	}
}

606 
	$sd°ﬁowî
(
sds
 
s
) {

607 
Àn
 = 
	`sd¶í
(
s
), 
j
;

609 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

610 
	}
}

613 
	$sd°ouµî
(
sds
 
s
) {

614 
Àn
 = 
	`sd¶í
(
s
), 
j
;

616 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

617 
	}
}

630 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

631 
size_t
 
l1
, 
l2
, 
möÀn
;

632 
cmp
;

634 
l1
 = 
	`sd¶í
(
s1
);

635 
l2
 = 
	`sd¶í
(
s2
);

636 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

637 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

638 i‡(
cmp
 =0Ë 
l1
-
l2
;

639  
cmp
;

640 
	}
}

658 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

659 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

660 
sds
 *
tokís
;

662 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

664 
tokís
 = 
	`mÆloc
((
sds
)*
¶Ÿs
);

665 i‡(
tokís
 =
NULL
)  NULL;

667 i‡(
Àn
 == 0) {

668 *
cou¡
 = 0;

669  
tokís
;

671 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

673 i‡(
¶Ÿs
 < 
ñemíts
+2) {

674 
sds
 *
√wtokís
;

676 
¶Ÿs
 *= 2;

677 
√wtokís
 = 
	`ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

678 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

679 
tokís
 = 
√wtokís
;

682 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

683 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

684 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

685 
ñemíts
++;

686 
°¨t
 = 
j
+
£∂í
;

687 
j
 = j+
£∂í
-1;

691 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

692 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

693 
ñemíts
++;

694 *
cou¡
 = 
ñemíts
;

695  
tokís
;

697 
˛ónup
:

699 
i
;

700 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

701 
	`‰ì
(
tokís
);

702 *
cou¡
 = 0;

703  
NULL
;

705 
	}
}

708 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

709 i‡(!
tokís
) ;

710 
cou¡
--)

711 
	`sds‰ì
(
tokís
[
cou¡
]);

712 
	`‰ì
(
tokís
);

713 
	}
}

719 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

720 
buf
[32], *
p
;

721 
v
;

723 
v
 = (
vÆue
 < 0) ? -value : value;

724 
p
 = 
buf
+31;

726 *
p
-- = '0'+(
v
%10);

727 
v
 /= 10;

728 } 
v
);

729 i‡(
vÆue
 < 0Ë*
p
-- = '-';

730 
p
++;

731  
	`sd¢ewÀn
(
p
,32-’-
buf
));

732 
	}
}

740 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

741 
s
 = 
	`sdsˇéí
(s,"\"",1);

742 
Àn
--) {

743 *
p
) {

746 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

748 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

749 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

750 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

751 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

752 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

754 i‡(
	`i•röt
(*
p
))

755 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

757 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

760 
p
++;

762  
	`sdsˇéí
(
s
,"\"",1);

763 
	}
}

767 
	$is_hex_digô
(
c
) {

768  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

769 (
c
 >= 'A' && c <= 'F');

770 
	}
}

774 
	$hex_digô_to_öt
(
c
) {

775 
c
) {

794 
	}
}

815 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

816 c⁄° *
p
 = 
löe
;

817 *
cuºít
 = 
NULL
;

818 **
ve˘‹
 = 
NULL
;

820 *
¨gc
 = 0;

823 *
p
 && 
	`is•a˚
(*p))Ö++;

824 i‡(*
p
) {

826 
öq
=0;

827 
ösq
=0;

828 
d⁄e
=0;

830 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

831 !
d⁄e
) {

832 i‡(
öq
) {

833 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

834 
	`is_hex_digô
(*(
p
+2)) &&

835 
	`is_hex_digô
(*(
p
+3)))

837 
byã
;

839 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

840 
	`hex_digô_to_öt
(*(
p
+3));

841 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

842 
p
 += 3;

843 } i‡(*
p
 == '\\' && *(p+1)) {

844 
c
;

846 
p
++;

847 *
p
) {

848 'n': 
c
 = '\n'; ;

849 'r': 
c
 = '\r'; ;

850 't': 
c
 = '\t'; ;

851 'b': 
c
 = '\b'; ;

852 'a': 
c
 = '\a'; ;

853 : 
c
 = *
p
; ;

855 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

856 } i‡(*
p
 == '"') {

859 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

860 
d⁄e
=1;

861 } i‡(!*
p
) {

863 
îr
;

865 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

867 } i‡(
ösq
) {

868 i‡(*
p
 == '\\' && *(p+1) == '\'') {

869 
p
++;

870 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

871 } i‡(*
p
 == '\'') {

874 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

875 
d⁄e
=1;

876 } i‡(!*
p
) {

878 
îr
;

880 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

883 *
p
) {

889 
d⁄e
=1;

892 
öq
=1;

895 
ösq
=1;

898 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

902 i‡(*
p
)Ö++;

905 
ve˘‹
 = 
	`ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

906 
ve˘‹
[*
¨gc
] = 
cuºít
;

907 (*
¨gc
)++;

908 
cuºít
 = 
NULL
;

911 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`mÆloc
((*));

912  
ve˘‹
;

916 
îr
:

917 (*
¨gc
)--)

918 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

919 
	`‰ì
(
ve˘‹
);

920 i‡(
cuºít
Ë
	`sds‰ì
(current);

921 *
¨gc
 = 0;

922  
NULL
;

923 
	}
}

934 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

935 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

937 
j
 = 0; j < 
l
; j++) {

938 
i
 = 0; i < 
£éí
; i++) {

939 i‡(
s
[
j
] =
‰om
[
i
]) {

940 
s
[
j
] = 
to
[
i
];

945  
s
;

946 
	}
}

950 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
) {

951 
sds
 
joö
 = 
	`sd£m±y
();

952 
j
;

954 
j
 = 0; j < 
¨gc
; j++) {

955 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

956 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

958  
joö
;

959 
	}
}

962 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

963 
sds
 
joö
 = 
	`sd£m±y
();

964 
j
;

966 
j
 = 0; j < 
¨gc
; j++) {

967 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

968 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

970  
joö
;

971 
	}
}

973 #ifde‡
SDS_TEST_MAIN


974 
	~<°dio.h
>

975 
	~"ã°hñp.h
"

977 
	$maö
() {

979 
sdshdr
 *
sh
;

980 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

982 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

983 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

985 
	`sds‰ì
(
x
);

986 
x
 = 
	`sd¢ewÀn
("foo",2);

987 
	`ã°_c⁄d
("Createá string with specifiedÜength",

988 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

990 
x
 = 
	`sdsˇt
(x,"bar");

991 
	`ã°_c⁄d
("Strings concatenation",

992 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

994 
x
 = 
	`sds˝y
(x,"a");

995 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

996 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

998 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

999 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1000 
	`sd¶í
(
x
) == 33 &&

1001 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1003 
	`sds‰ì
(
x
);

1004 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1005 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1006 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) ==0)

1008 
	`sds‰ì
(
x
);

1009 
x
 = 
	`sd¢ew
("xxciaoyyy");

1010 
	`sd°rim
(
x
,"xy");

1011 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1012 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1014 
y
 = 
	`sdsdup
(
x
);

1015 
	`sd§™ge
(
y
,1,1);

1016 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1017 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1019 
	`sds‰ì
(
y
);

1020 
y
 = 
	`sdsdup
(
x
);

1021 
	`sd§™ge
(
y
,1,-1);

1022 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1023 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1025 
	`sds‰ì
(
y
);

1026 
y
 = 
	`sdsdup
(
x
);

1027 
	`sd§™ge
(
y
,-2,-1);

1028 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1029 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1031 
	`sds‰ì
(
y
);

1032 
y
 = 
	`sdsdup
(
x
);

1033 
	`sd§™ge
(
y
,2,1);

1034 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1035 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1037 
	`sds‰ì
(
y
);

1038 
y
 = 
	`sdsdup
(
x
);

1039 
	`sd§™ge
(
y
,1,100);

1040 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1041 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1043 
	`sds‰ì
(
y
);

1044 
y
 = 
	`sdsdup
(
x
);

1045 
	`sd§™ge
(
y
,100,100);

1046 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1047 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1049 
	`sds‰ì
(
y
);

1050 
	`sds‰ì
(
x
);

1051 
x
 = 
	`sd¢ew
("foo");

1052 
y
 = 
	`sd¢ew
("foa");

1053 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1055 
	`sds‰ì
(
y
);

1056 
	`sds‰ì
(
x
);

1057 
x
 = 
	`sd¢ew
("bar");

1058 
y
 = 
	`sd¢ew
("bar");

1059 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1061 
	`sds‰ì
(
y
);

1062 
	`sds‰ì
(
x
);

1063 
x
 = 
	`sd¢ew
("aar");

1064 
y
 = 
	`sd¢ew
("bar");

1065 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1067 
	`sds‰ì
(
y
);

1068 
	`sds‰ì
(
x
);

1069 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1070 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1071 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1072 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1075 
ﬁd‰ì
;

1077 
	`sds‰ì
(
x
);

1078 
x
 = 
	`sd¢ew
("0");

1079 
sh
 = (*Ë(
x
-((
sdshdr
)));

1080 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
sh
->
Àn
 =1 && sh->
‰ì
 == 0);

1081 
x
 = 
	`sdsMakeRoomF‹
(x,1);

1082 
sh
 = (*Ë(
x
-((
sdshdr
)));

1083 
	`ã°_c⁄d
("sdsMakeRoomF‹()", 
sh
->
Àn
 =1 && sh->
‰ì
 > 0);

1084 
ﬁd‰ì
 = 
sh
->
‰ì
;

1085 
x
[1] = '1';

1086 
	`sdsIn¸Lí
(
x
,1);

1087 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- c⁄ã¡", 
x
[0] == '0' && x[1] == '1');

1088 
	`ã°_c⁄d
("sdsIn¸Lí(Ë--Üí", 
sh
->
Àn
 == 2);

1089 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- fªe", 
sh
->
‰ì
 =
ﬁd‰ì
-1);

1092 
	`ã°_ªp‹t
()

1094 
	}
}

	@dep/himemcached-0.1.0/himcdep/sds.h

31 #i‚de‡
__SDS_H


32 
	#__SDS_H


	)

34 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

36 
	~<sys/ty≥s.h
>

37 
	~<°d¨g.h
>

38 #ifde‡
_MSC_VER


39 
	~"wö32.h
"

42 *
	tsds
;

44 
	ssdshdr
 {

45 
	mÀn
;

46 
	m‰ì
;

47 
	mbuf
[];

50 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

51 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

52  
sh
->
Àn
;

53 
	}
}

55 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

56 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

57  
sh
->
‰ì
;

58 
	}
}

60 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

61 
sds
 
sd¢ew
(c⁄° *
öô
);

62 
sds
 
sd£m±y
();

63 
size_t
 
sd¶í
(c⁄° 
sds
 
s
);

64 
sds
 
sdsdup
(c⁄° sd†
s
);

65 
sds‰ì
(
sds
 
s
);

66 
size_t
 
sdßvaû
(c⁄° 
sds
 
s
);

67 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

68 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

69 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

70 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

71 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

72 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

74 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

75 #ifde‡
__GNUC__


76 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

77 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

79 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

82 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

83 
	`sd°rim
(
sds
 
s
, c⁄° *
c£t
);

84 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

85 
	`sdsupd©ñí
(
sds
 
s
);

86 
	`sds˛ór
(
sds
 
s
);

87 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

88 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

89 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

90 
	`sd°ﬁowî
(
sds
 
s
);

91 
	`sd°ouµî
(
sds
 
s
);

92 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

93 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

94 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

95 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

96 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
);

97 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

100 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

101 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

102 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

103 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

	@dep/himemcached-0.1.0/himcdep/sds.h

31 #i‚de‡
__SDS_H


32 
	#__SDS_H


	)

34 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

36 
	~<sys/ty≥s.h
>

37 
	~<°d¨g.h
>

38 #ifde‡
_MSC_VER


39 
	~"wö32.h
"

42 *
	tsds
;

44 
	ssdshdr
 {

45 
	mÀn
;

46 
	m‰ì
;

47 
	mbuf
[];

50 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

51 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

52  
sh
->
Àn
;

53 
	}
}

55 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

56 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

57  
sh
->
‰ì
;

58 
	}
}

60 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

61 
sds
 
sd¢ew
(c⁄° *
öô
);

62 
sds
 
sd£m±y
();

63 
size_t
 
sd¶í
(c⁄° 
sds
 
s
);

64 
sds
 
sdsdup
(c⁄° sd†
s
);

65 
sds‰ì
(
sds
 
s
);

66 
size_t
 
sdßvaû
(c⁄° 
sds
 
s
);

67 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

68 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

69 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

70 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

71 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

72 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

74 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

75 #ifde‡
__GNUC__


76 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

77 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

79 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

82 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

83 
	`sd°rim
(
sds
 
s
, c⁄° *
c£t
);

84 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

85 
	`sdsupd©ñí
(
sds
 
s
);

86 
	`sds˛ór
(
sds
 
s
);

87 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

88 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

89 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

90 
	`sd°ﬁowî
(
sds
 
s
);

91 
	`sd°ouµî
(
sds
 
s
);

92 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

93 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

94 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

95 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

96 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
);

97 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

100 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

101 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

102 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

103 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

	@dep/himemcached-0.1.0/himcread.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

3 #i‚de‡
_MSC_VER


4 
	~<uni°d.h
>

6 
	~<as£π.h
>

7 
	~<î∫o.h
>

8 
	~<˘y≥.h
>

10 
	~"him¸ód.h
"

11 
	~"himcdï/sds.h
"

13 
	#PARSE_OK
 0

	)

14 
	#PARSE_ERROR
 1

	)

15 
	#PARSE_AGAIN
 3

	)

17 
	#RSP_TYPE_UNKNOWN
 0

	)

18 
	#RSP_TYPE_NUM
 1

	)

19 
	#RSP_TYPE_STORED
 2

	)

20 
	#RSP_TYPE_NOT_STORED
 3

	)

21 
	#RSP_TYPE_EXISTS
 4

	)

22 
	#RSP_TYPE_NOT_FOUND
 5

	)

23 
	#RSP_TYPE_END
 6

	)

24 
	#RSP_TYPE_VALUE
 7

	)

25 
	#RSP_TYPE_DELETED
 8

	)

26 
	#RSP_TYPE_ERROR
 9

	)

27 
	#RSP_TYPE_CLIENT_ERROR
 10

	)

28 
	#RSP_TYPE_SERVER_ERROR
 11

	)

30 
memˇchedRódîRe£t
(
mcRódî
 *
r
);

32 
	$__memˇchedRódîSëEº‹
(
mcRódî
 *
r
, 
ty≥
, c⁄° *
°r
) {

33 
size_t
 
Àn
;

35 
	`memˇchedRódîRe£t
(
r
);

38 i‡(
r
->
buf
 !
NULL
) {

39 
	`sds‰ì
(
r
->
buf
);

40 
r
->
buf
 = 
NULL
;

41 
r
->
pos
 =Ñ->
Àn
 = 0;

45 
r
->
îr
 = 
ty≥
;

46 
Àn
 = 
	`°æí
(
°r
);

47 
Àn
 =Üí < ((
r
->
îr°r
)-1) ?Üen : ((r->errstr)-1);

48 
	`mem˝y
(
r
->
îr°r
,
°r
,
Àn
);

49 
r
->
îr°r
[
Àn
] = '\0';

50 
	}
}

52 
size_t
 
	$chπos
(*
buf
, 
size_t
 
size
, 
byã
)

54 
size_t
 
Àn
 = 0;

56 
byã
) {

59 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\%c\"",
byã
);

61 '\n': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\n\""); ;

62 '\r': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\r\""); ;

63 '\t': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\t\""); ;

64 '\a': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\a\""); ;

65 '\b': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\b\""); ;

67 i‡(
	`i•röt
(
byã
))

68 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"%c\"",
byã
);

70 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\x%02x\"",()
byã
);

74  
Àn
;

75 
	}
}

77 
	$__memˇchedRódîSëEº‹PrŸocﬁByã
(
mcRódî
 *
r
, 
byã
) {

78 
cbuf
[8], 
sbuf
[128];

80 
	`chπos
(
cbuf
,(cbuf),
byã
);

81 
	`¢¥ötf
(
sbuf
,(sbuf),

82 "PrŸocﬁÉº‹, gŸ %†a†ª∂yÅy≥ byã", 
cbuf
);

83 
	`__memˇchedRódîSëEº‹
(
r
,
MC_ERR_PROTOCOL
,
sbuf
);

84 
	}
}

86 
	$__memˇchedRódîSëEº‹OOM
(
mcRódî
 *
r
) {

87 
	`__memˇchedRódîSëEº‹
(
r
,
MC_ERR_OOM
,"Out of memory");

88 
	}
}

90 
	$ñemítAºayCª©e
(
mcRódî
 *
r
)

92 
	`as£π
(
r
->
Æloc_Àn
 == 0);

93 
	`as£π
(
r
->
ñemít
 =
NULL
);

94 
	`as£π
(
r
->
ñemíts
 == 0);

96 
r
->
ñemít
 = 
	`mÆloc
(10*(*));

97 i‡(
r
->
ñemít
 =
NULL
) {

98 
	`__memˇchedRódîSëEº‹OOM
(
r
);

99  
MC_ERR
;

101 
r
->
Æloc_Àn
 = 10;

102 
r
->
ñemíts
 = 0;

104  
MC_OK
;

105 
	}
}

107 
	$ñemítAºayDe°roy
(
mcRódî
 *
r
)

109 
i
;

111 i‡(
r
->
ñemít
 =
NULL
)

114 i‡(
r
->
‚
 &&Ñ->‚->
‰ìObje˘
) {

115 
i
 = 0; i < 
r
->
ñemíts
; i ++) {

116 i‡(
r
->
ñemít
[
i
])

117 
r
->
‚
->
	`‰ìObje˘
‘->
ñemít
[
i
]);

120 
	`‰ì
(
r
->
ñemít
);

121 
r
->
ñemít
 = 
NULL
;

122 
r
->
ñemíts
 = 0;

123 
r
->
Æloc_Àn
 = 0;

125  
MC_OK
;

126 
	}
}

128 
	#EXPAND_MAX_SIZE_PER_TIME
 300

	)

129 
	$ñemítAºayEx∑nd
(
mcRódî
 *
r
)

131 
size_t
 
√w_Àngth
;

132 i‡(
r
->
Æloc_Àn
 <= 150) {

133 
√w_Àngth
 = 
r
->
Æloc_Àn
*2;

134 } i‡(
r
->
Æloc_Àn
 <= 500) {

135 
√w_Àngth
 = 
r
->
Æloc_Àn
+
EXPAND_MAX_SIZE_PER_TIME
;

137 
r
->
ñemít
 = 
	`ªÆloc
‘->ñemít,
√w_Àngth
*(*));

138 i‡(
r
->
ñemít
 =
NULL
) {

139 
	`__memˇchedRódîSëEº‹OOM
(
r
);

140  
MC_ERR
;

142 
r
->
Æloc_Àn
 = 
√w_Àngth
;

144  
MC_OK
;

145 
	}
}

147 
	$ñemítAºayAdd
(
mcRódî
 *
r
, *
ª∂y
)

149 
	`as£π
(
r
->
ñemíts
 <r->
Æloc_Àn
);

150 i‡(
r
->
ñemíts
 =r->
Æloc_Àn
) {

151 i‡(
	`ñemítAºayEx∑nd
(
r
Ë!
MC_OK
)

152  
MC_ERR
;

154 
r
->
ñemít
[r->
ñemíts
++] = 
ª∂y
;

156  
MC_OK
;

157 
	}
}

159 
	$memˇchedP¨£Re•⁄£
(
mcRódî
 *
r
)

161 *
obj
;

162 *
p
, *
m
;

163 
ch
;

165 
SW_START
,

166 
SW_RSP_NUM
,

167 
SW_RSP_STR
,

168 
SW_SPACES_BEFORE_KEY
,

169 
SW_KEY
,

170 
SW_SPACES_BEFORE_FLAGS
,

171 
SW_FLAGS
,

172 
SW_SPACES_BEFORE_VLEN
,

173 
SW_VLEN
,

174 
SW_RUNTO_VAL
,

175 
SW_VAL
,

176 
SW_VAL_LF
,

177 
SW_END
,

178 
SW_RUNTO_CRLF
,

179 
SW_CRLF
,

180 
SW_ALMOST_DONE
,

181 
SW_SENTINEL


182 } 
°©e
;

184 
°©e
 = 
r
->state;

186 
	`as£π
(
°©e
 >
SW_START
 && sèã < 
SW_SENTINEL
);

189 
	`as£π
(
r
->
buf
 !
NULL
);

190 
	`as£π
(
r
->
pos
 <Ñ->
Àn
);

192 
p
 = 
r
->
buf
+r->
pos
;Ö <r->buf+r->
Àn
;Ö++) {

193 
ch
 = *
p
;

195 
°©e
) {

196 
SW_START
:

197 i‡(
	`isdigô
(
ch
)) {

198 
°©e
 = 
SW_RSP_NUM
;

200 
°©e
 = 
SW_RSP_STR
;

202 
p
 =Ö - 1;

206 
SW_RSP_NUM
:

207 i‡(
r
->
tokí
 =
NULL
) {

209 
r
->
tokí
 = 
p
;

212 i‡(
	`isdigô
(
ch
)) {

214 
r
->
öãgî
 =Ñ->öãgî*10 + ()(
ch
-'0');

215 } i‡(
ch
 == ' ' || ch == '\r') {

217 
r
->
tokí
 = 
NULL
;

218 
r
->
öãgî
 = 0;

219 
r
->
ty≥
 = 
RSP_TYPE_NUM
;

220 
p
 =Ö - 1;

221 
°©e
 = 
SW_CRLF
;

223 
îr‹
;

228 
SW_RSP_STR
:

229 i‡(
r
->
tokí
 =
NULL
) {

231 
r
->
tokí
 = 
p
;

234 i‡(
ch
 == ' ' || ch == '\r') {

236 
m
 = 
r
->
tokí
;

238 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

239 
	`as£π
(
r
->
°r
 =
NULL
 &&Ñ->
°æí
 == 0);

241 
p
 - 
m
) {

243 i‡(!
	`°∫cmp
(
m
,"END\r",4)) {

244 
r
->
ty≥
 = 
RSP_TYPE_END
;

251 i‡(!
	`°∫cmp
(
m
,"VALUE",5)) {

256 
r
->
ty≥
 = 
RSP_TYPE_VALUE
;

260 i‡(!
	`°∫cmp
(
m
,"ERROR",5)) {

261 
r
->
ty≥
 = 
RSP_TYPE_ERROR
;

268 i‡(!
	`°∫cmp
(
m
,"STORED",6)) {

269 
r
->
ty≥
 = 
RSP_TYPE_STORED
;

271 
r
->
°r
 = 
m
;

272 
r
->
°æí
 = 6;

276 i‡(!
	`°∫cmp
(
m
,"EXISTS",6)) {

277 
r
->
ty≥
 = 
RSP_TYPE_EXISTS
;

279 
r
->
°r
 = 
m
;

280 
r
->
°æí
 = 6;

287 i‡(!
	`°∫cmp
(
m
,"DELETED",7)) {

288 
r
->
ty≥
 = 
RSP_TYPE_DELETED
;

290 
r
->
°r
 = 
m
;

291 
r
->
°æí
 = 7;

298 i‡(!
	`°∫cmp
(
m
,"NOT_FOUND",9)) {

299 
r
->
ty≥
 = 
RSP_TYPE_NOT_FOUND
;

301 
r
->
°r
 = 
m
;

302 
r
->
°æí
 = 9;

309 i‡(!
	`°∫cmp
(
m
,"NOT_STORED",10)) {

310 
r
->
ty≥
 = 
RSP_TYPE_NOT_STORED
;

312 
r
->
°r
 = 
m
;

313 
r
->
°æí
 = 10;

320 i‡(!
	`°∫cmp
(
m
,"CLIENT_ERROR",12)) {

321 
r
->
ty≥
 = 
RSP_TYPE_CLIENT_ERROR
;

325 i‡(!
	`°∫cmp
(
m
,"SERVER_ERROR",12)) {

326 
r
->
ty≥
 = 
RSP_TYPE_SERVER_ERROR
;

333 
r
->
ty≥
) {

334 
RSP_TYPE_UNKNOWN
:

335 
îr‹
;

337 
RSP_TYPE_STORED
:

338 
RSP_TYPE_NOT_STORED
:

339 
RSP_TYPE_EXISTS
:

340 
RSP_TYPE_NOT_FOUND
:

341 
RSP_TYPE_DELETED
:

342 
°©e
 = 
SW_CRLF
;

345 
RSP_TYPE_END
:

346 
°©e
 = 
SW_CRLF
;

349 
RSP_TYPE_VALUE
:

350 
°©e
 = 
SW_SPACES_BEFORE_KEY
;

353 
RSP_TYPE_ERROR
:

354 
°©e
 = 
SW_CRLF
;

357 
RSP_TYPE_CLIENT_ERROR
:

358 
RSP_TYPE_SERVER_ERROR
:

359 
r
->
tokí
 = 
NULL
;

360 
°©e
 = 
SW_RUNTO_CRLF
;

364 
	`NOT_REACHED
();

367 
p
 =Ö - 1;

372 
SW_SPACES_BEFORE_KEY
:

373 i‡(
ch
 != ' ') {

374 
°©e
 = 
SW_KEY
;

375 
p
 =Ö - 1;

376 
r
->
tokí
 = 
NULL
;

381 
SW_KEY
:

382 i‡(
r
->
tokí
 =
NULL
) {

383 
r
->
tokí
 = 
p
;

386 i‡(
ch
 == ' ') {

387 
	`as£π
(
r
->
°r
 =
NULL
 &&Ñ->
°æí
 == 0);

388 
m
 = 
r
->
tokí
;

389 
r
->
tokí
 = 
NULL
;

390 
°©e
 = 
SW_SPACES_BEFORE_FLAGS
;

391 
r
->
°æí
 = 
p
-
m
;

392 
r
->
°r
 = 
m
;

397 
SW_SPACES_BEFORE_FLAGS
:

398 i‡(
ch
 != ' ') {

399 i‡(!
	`isdigô
(
ch
)) {

400 
îr‹
;

402 
°©e
 = 
SW_FLAGS
;

403 
p
 =Ö - 1;

404 
r
->
kÊags
 = 0;

409 
SW_FLAGS
:

410 i‡(
	`isdigô
(
ch
)) {

412 
r
->
kÊags
 =Ñ->kÊags*10 + ()(
ch
-'0');

413 } i‡(
ch
 == ' ') {

416 
°©e
 = 
SW_SPACES_BEFORE_VLEN
;

418 
îr‹
;

423 
SW_SPACES_BEFORE_VLEN
:

424 i‡(
ch
 != ' ') {

425 i‡(!
	`isdigô
(
ch
)) {

426 
îr‹
;

428 
p
 =Ö - 1;

429 
°©e
 = 
SW_VLEN
;

430 
r
->
öãgî
 = 0;

435 
SW_VLEN
:

436 i‡(
	`isdigô
(
ch
)) {

437 
r
->
öãgî
 =Ñ->öãgî*10 + ()(
ch
-'0');

438 } i‡(
ch
 == ' ' || ch == '\r') {

440 
p
 =Ö - 1;

442 
°©e
 = 
SW_RUNTO_CRLF
;

444 
îr‹
;

449 
SW_RUNTO_VAL
:

450 
ch
) {

453 
°©e
 = 
SW_VAL
;

454 
r
->
tokí
 = 
NULL
;

458 
îr‹
;

463 
SW_VAL
:

464 i‡(
r
->
tokí
 =
NULL
) {

466 
r
->
tokí
 = 
p
;

469 
m
 = 
r
->
tokí
 +Ñ->
öãgî
;

470 i‡(
m
 > 
r
->
buf
+r->
Àn
) {

471 
p
 = 
r
->
buf
 +Ñ->
Àn
;

475 *
m
) {

478 
p
 = 
m
;

479 
°©e
 = 
SW_VAL_LF
;

483 
îr‹
;

488 
SW_VAL_LF
:

489 
ch
) {

492 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

493 
obj
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_STRING
,r->
°r
,r->
°æí
,

494 
r
->
tokí
,r->
öãgî
,r->
kÊags
,r->
kvîsi⁄
);

496 
obj
 = (*)
MC_REPLY_STRING
;

497 i‡(
r
->
ñemít
) {

498 
	`as£π
(
r
->
subª∂y
 =
NULL
);

499 
	`ñemítAºayAdd
(
r
,r->
subª∂y
);

500 } i‡(
r
->
subª∂y
) {

501 
	`ñemítAºayCª©e
(
r
);

502 
	`ñemítAºayAdd
(
r
,r->
subª∂y
);

503 
r
->
subª∂y
 = 
NULL
;

504 
	`ñemítAºayAdd
(
r
,
obj
);

506 
r
->
subª∂y
 = 
obj
;

509 
r
->
tokí
 = 
NULL
;

510 
r
->
°r
 = 
NULL
;

511 
r
->
°æí
 = 0;

512 
r
->
kÊags
 = 0;

513 
r
->
kvîsi⁄
 = -1;

514 
°©e
 = 
SW_RSP_STR
;

518 
îr‹
;

523 
SW_END
:

524 i‡(
r
->
tokí
 =
NULL
) {

525 i‡(
ch
 != 'E') {

526 
îr‹
;

529 
r
->
tokí
 = 
p
;

530 } i‡(
ch
 == '\r') {

532 
m
 = 
r
->
tokí
;

533 
r
->
tokí
 = 
NULL
;

535 
p
 - 
m
) {

537 i‡(!
	`°∫cmp
(
m
,"END\r",4)) {

538 
°©e
 = 
SW_ALMOST_DONE
;

543 
îr‹
;

549 
SW_RUNTO_CRLF
:

550 
ch
) {

552 i‡(
r
->
ty≥
 =
RSP_TYPE_VALUE
) {

553 
°©e
 = 
SW_RUNTO_VAL
;

555 i‡(
r
->
ty≥
 =
RSP_TYPE_CLIENT_ERROR
 ||

556 
r
->
ty≥
 =
RSP_TYPE_SERVER_ERROR
) {

557 
m
 = 
r
->
tokí
;

558 
r
->
tokí
 = 
NULL
;

559 
r
->
°æí
 = 
p
-
m
;

560 
r
->
°r
 = 
m
;

562 
°©e
 = 
SW_ALMOST_DONE
;

573 
SW_CRLF
:

574 
ch
) {

579 
°©e
 = 
SW_ALMOST_DONE
;

583 
îr‹
;

588 
SW_ALMOST_DONE
:

589 
ch
) {

592 
d⁄e
;

595 
îr‹
;

600 
SW_SENTINEL
:

602 
	`NOT_REACHED
();

608 
	`as£π
(
p
 =
r
->
buf
+r->
Àn
);

609 
r
->
pos
 =Ñ->
Àn
;

610 
r
->
°©e
 = state;

612 
r
->
ªsu…
 = 
PARSE_AGAIN
;

616 
d⁄e
:

617 
r
->
pos
 = 
p
-r->
buf
+1;

618 
	`as£π
(
r
->
pos
 <r->
Àn
);

619 
r
->
°©e
 = 
SW_START
;

620 
r
->
tokí
 = 
NULL
;

621 
r
->
ªsu…
 = 
PARSE_OK
;

625 
îr‹
:

626 
r
->
ªsu…
 = 
PARSE_ERROR
;

627 
r
->
°©e
 = state;

628 
î∫o
 = 
EINVAL
;

629 
	}
}

631 
mcRódî
 *
	$memˇchedRódîCª©eWôhFun˘i⁄s
(
mcRïlyObje˘Fun˘i⁄s
 *
‚
)

633 
mcRódî
 *
r
;

635 
r
 = 
	`ˇŒoc
((
mcRódî
),1);

636 i‡(
r
 =
NULL
)

637  
NULL
;

639 
r
->
îr
 = 0;

640 
r
->
îr°r
[0] = '\0';

641 
r
->
buf
 = 
	`sd£m±y
();

642 
r
->
maxbuf
 = 
MC_READER_MAX_BUF
;

643 i‡(
r
->
buf
 =
NULL
) {

644 
	`‰ì
(
r
);

645  
NULL
;

648 
r
->
subª∂y
 = 
NULL
;

649 
r
->
Æloc_Àn
 = 0;

650 
r
->
ñemíts
 = 0;

651 
r
->
ñemít
 = 
NULL
;

653 
r
->
°©e
 = 0;

654 
r
->
tokí
 = 
NULL
;

656 
r
->
°r
 = 
NULL
;

657 
r
->
°æí
 = 0;

658 
r
->
kÊags
 = 0;

659 
r
->
kvîsi⁄
 = -1;

660 
r
->
öãgî
 = 0;

661 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

662 
r
->
ªsu…
 = 
PARSE_OK
;

664 
r
->
‚
 = fn;

666  
r
;

667 
	}
}

669 
	$memˇchedRódîFªe
(
mcRódî
 *
r
)

671 
	`memˇchedRódîRe£t
(
r
);

673 i‡(
r
->
buf
 !
NULL
)

674 
	`sds‰ì
(
r
->
buf
);

675 
	`‰ì
(
r
);

676 
	}
}

678 
	$memˇchedRódîFìd
(
mcRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
)

680 
sds
 
√wbuf
;

683 i‡(
r
->
îr
)

684  
MC_ERR
;

687 i‡(
buf
 !
NULL
 && 
Àn
 >= 1) {

689 i‡(
r
->
Àn
 =0 &&Ñ->
maxbuf
 !0 && 
	`sdßvaû
‘->
buf
) >Ñ->maxbuf) {

690 
	`sds‰ì
(
r
->
buf
);

691 
r
->
buf
 = 
	`sd£m±y
();

692 
r
->
pos
 = 0;

695 
	`as£π
(
r
->
buf
 !
NULL
);

698 
√wbuf
 = 
	`sdsˇéí
(
r
->
buf
,buf,
Àn
);

699 i‡(
√wbuf
 =
NULL
) {

700 
	`__memˇchedRódîSëEº‹OOM
(
r
);

701  
MC_ERR
;

704 
r
->
buf
 = 
√wbuf
;

705 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

708  
MC_OK
;

709 
	}
}

711 
	$memˇchedRódîRe£t
(
mcRódî
 *
r
)

713 
r
->
°r
 = 
NULL
;

714 
r
->
°æí
 = 0;

715 
r
->
kÊags
 = 0;

716 
r
->
kvîsi⁄
 = -1;

718 
r
->
°©e
 = 0;

719 
r
->
tokí
 = 0;

721 
r
->
öãgî
 = 0;

723 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

724 
r
->
ªsu…
 = 
PARSE_OK
;

726 i‡(
r
->
subª∂y
 !
NULL
) {

727 i‡(
r
->
‚
 &&Ñ->‚->
‰ìObje˘
)

728 
r
->
‚
->
	`‰ìObje˘
‘->
subª∂y
);

730 
r
->
subª∂y
 = 
NULL
;

733 
	`ñemítAºayDe°roy
(
r
);

735 
r
->
îr
 = 0;

736 
r
->
îr°r
[0] = '\0';

737 
	}
}

739 *
	$gëRïlyFromRódî
(
mcRódî
 *
r
)

741 *
ª∂y
;

743 
r
->
ty≥
) {

744 
RSP_TYPE_VALUE
:

745 i‡(
r
->
ñemít
) {

746 
	`as£π
(
r
->
subª∂y
 =
NULL
);

747 i‡(
r
->
‚
 &&Ñ->‚->
¸óãAºay
) {

748 
ª∂y
 = 
r
->
‚
->
	`¸óãAºay
‘->
ñemíts
,r->
ñemít
);

749 
r
->
ñemít
 = 
NULL
;

750 
r
->
ñemíts
 = 0;

751 
r
->
Æloc_Àn
 = 0;

753 
ª∂y
 = (*)
MC_REPLY_ARRAY
;

755 } i‡(
r
->
subª∂y
) {

756 
ª∂y
 = 
r
->
subª∂y
;

759 
RSP_TYPE_NUM
:

760 i‡(
r
->
‚
 &&Ñ->‚->
¸óãI¡egî
)

761 
ª∂y
 = 
r
->
‚
->
	`¸óãI¡egî
‘->
öãgî
);

763 
ª∂y
 = (*)
MC_REPLY_INTEGER
;

765 
RSP_TYPE_END
:

766 i‡(
r
->
‚
 &&Ñ->‚->
¸óãNû
)

767 
ª∂y
 = 
r
->
‚
->
	`¸óãNû
();

769 
ª∂y
 = (*)
MC_REPLY_NIL
;

771 
RSP_TYPE_CLIENT_ERROR
:

772 
RSP_TYPE_SERVER_ERROR
:

773 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

774 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_ERROR
,

775 
NULL
,0,
r
->
°r
,r->
°æí
,0,0);

777 
ª∂y
 = (*)
MC_REPLY_ERROR
;

779 
RSP_TYPE_ERROR
:

780 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

781 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_ERROR
,

782 
NULL
,0,"",0,0,0);

784 
ª∂y
 = (*)
MC_REPLY_ERROR
;

786 
RSP_TYPE_STORED
:

787 
RSP_TYPE_NOT_STORED
:

788 
RSP_TYPE_EXISTS
:

789 
RSP_TYPE_NOT_FOUND
:

790 
RSP_TYPE_DELETED
:

791 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

792 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_STATUS
,

793 
NULL
,0,
r
->
°r
,r->
°æí
,0,0);

795 
ª∂y
 = (*)
MC_REPLY_STATUS
;

798 
ª∂y
 = 
NULL
;

802  
ª∂y
;

803 
	}
}

805 
	$memˇchedRódîGëRïly
(
mcRódî
 *
r
, **
ª∂y
) {

807 i‡(
ª∂y
 !
NULL
)

808 *
ª∂y
 = 
NULL
;

811 i‡(
r
->
îr
)

812  
MC_ERR
;

815 i‡(
r
->
Àn
 == 0)

816  
MC_OK
;

818 
	`memˇchedP¨£Re•⁄£
(
r
);

821 i‡(
r
->
îr
)

822  
MC_ERR
;

831 i‡(
r
->
ªsu…
 =
PARSE_OK
) {

832 i‡(
ª∂y
 !
NULL
) {

833 *
ª∂y
 = 
	`gëRïlyFromRódî
(
r
);

835 
	`memˇchedRódîRe£t
(
r
);

840 i‡(
r
->
pos
 >1024 &&Ñ->
tokí
 =
NULL
 &&Ñ->
°r
 == NULL) {

841 
	`sd§™ge
(
r
->
buf
,r->
pos
,-1);

842 
r
->
pos
 = 0;

843 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

846  
MC_OK
;

847 
	}
}

	@dep/himemcached-0.1.0/himcread.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

3 #i‚de‡
_MSC_VER


4 
	~<uni°d.h
>

6 
	~<as£π.h
>

7 
	~<î∫o.h
>

8 
	~<˘y≥.h
>

10 
	~"him¸ód.h
"

11 
	~"himcdï/sds.h
"

13 
	#PARSE_OK
 0

	)

14 
	#PARSE_ERROR
 1

	)

15 
	#PARSE_AGAIN
 3

	)

17 
	#RSP_TYPE_UNKNOWN
 0

	)

18 
	#RSP_TYPE_NUM
 1

	)

19 
	#RSP_TYPE_STORED
 2

	)

20 
	#RSP_TYPE_NOT_STORED
 3

	)

21 
	#RSP_TYPE_EXISTS
 4

	)

22 
	#RSP_TYPE_NOT_FOUND
 5

	)

23 
	#RSP_TYPE_END
 6

	)

24 
	#RSP_TYPE_VALUE
 7

	)

25 
	#RSP_TYPE_DELETED
 8

	)

26 
	#RSP_TYPE_ERROR
 9

	)

27 
	#RSP_TYPE_CLIENT_ERROR
 10

	)

28 
	#RSP_TYPE_SERVER_ERROR
 11

	)

30 
memˇchedRódîRe£t
(
mcRódî
 *
r
);

32 
	$__memˇchedRódîSëEº‹
(
mcRódî
 *
r
, 
ty≥
, c⁄° *
°r
) {

33 
size_t
 
Àn
;

35 
	`memˇchedRódîRe£t
(
r
);

38 i‡(
r
->
buf
 !
NULL
) {

39 
	`sds‰ì
(
r
->
buf
);

40 
r
->
buf
 = 
NULL
;

41 
r
->
pos
 =Ñ->
Àn
 = 0;

45 
r
->
îr
 = 
ty≥
;

46 
Àn
 = 
	`°æí
(
°r
);

47 
Àn
 =Üí < ((
r
->
îr°r
)-1) ?Üen : ((r->errstr)-1);

48 
	`mem˝y
(
r
->
îr°r
,
°r
,
Àn
);

49 
r
->
îr°r
[
Àn
] = '\0';

50 
	}
}

52 
size_t
 
	$chπos
(*
buf
, 
size_t
 
size
, 
byã
)

54 
size_t
 
Àn
 = 0;

56 
byã
) {

59 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\%c\"",
byã
);

61 '\n': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\n\""); ;

62 '\r': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\r\""); ;

63 '\t': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\t\""); ;

64 '\a': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\a\""); ;

65 '\b': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\b\""); ;

67 i‡(
	`i•röt
(
byã
))

68 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"%c\"",
byã
);

70 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\x%02x\"",()
byã
);

74  
Àn
;

75 
	}
}

77 
	$__memˇchedRódîSëEº‹PrŸocﬁByã
(
mcRódî
 *
r
, 
byã
) {

78 
cbuf
[8], 
sbuf
[128];

80 
	`chπos
(
cbuf
,(cbuf),
byã
);

81 
	`¢¥ötf
(
sbuf
,(sbuf),

82 "PrŸocﬁÉº‹, gŸ %†a†ª∂yÅy≥ byã", 
cbuf
);

83 
	`__memˇchedRódîSëEº‹
(
r
,
MC_ERR_PROTOCOL
,
sbuf
);

84 
	}
}

86 
	$__memˇchedRódîSëEº‹OOM
(
mcRódî
 *
r
) {

87 
	`__memˇchedRódîSëEº‹
(
r
,
MC_ERR_OOM
,"Out of memory");

88 
	}
}

90 
	$ñemítAºayCª©e
(
mcRódî
 *
r
)

92 
	`as£π
(
r
->
Æloc_Àn
 == 0);

93 
	`as£π
(
r
->
ñemít
 =
NULL
);

94 
	`as£π
(
r
->
ñemíts
 == 0);

96 
r
->
ñemít
 = 
	`mÆloc
(10*(*));

97 i‡(
r
->
ñemít
 =
NULL
) {

98 
	`__memˇchedRódîSëEº‹OOM
(
r
);

99  
MC_ERR
;

101 
r
->
Æloc_Àn
 = 10;

102 
r
->
ñemíts
 = 0;

104  
MC_OK
;

105 
	}
}

107 
	$ñemítAºayDe°roy
(
mcRódî
 *
r
)

109 
i
;

111 i‡(
r
->
ñemít
 =
NULL
)

114 i‡(
r
->
‚
 &&Ñ->‚->
‰ìObje˘
) {

115 
i
 = 0; i < 
r
->
ñemíts
; i ++) {

116 i‡(
r
->
ñemít
[
i
])

117 
r
->
‚
->
	`‰ìObje˘
‘->
ñemít
[
i
]);

120 
	`‰ì
(
r
->
ñemít
);

121 
r
->
ñemít
 = 
NULL
;

122 
r
->
ñemíts
 = 0;

123 
r
->
Æloc_Àn
 = 0;

125  
MC_OK
;

126 
	}
}

128 
	#EXPAND_MAX_SIZE_PER_TIME
 300

	)

129 
	$ñemítAºayEx∑nd
(
mcRódî
 *
r
)

131 
size_t
 
√w_Àngth
;

132 i‡(
r
->
Æloc_Àn
 <= 150) {

133 
√w_Àngth
 = 
r
->
Æloc_Àn
*2;

134 } i‡(
r
->
Æloc_Àn
 <= 500) {

135 
√w_Àngth
 = 
r
->
Æloc_Àn
+
EXPAND_MAX_SIZE_PER_TIME
;

137 
r
->
ñemít
 = 
	`ªÆloc
‘->ñemít,
√w_Àngth
*(*));

138 i‡(
r
->
ñemít
 =
NULL
) {

139 
	`__memˇchedRódîSëEº‹OOM
(
r
);

140  
MC_ERR
;

142 
r
->
Æloc_Àn
 = 
√w_Àngth
;

144  
MC_OK
;

145 
	}
}

147 
	$ñemítAºayAdd
(
mcRódî
 *
r
, *
ª∂y
)

149 
	`as£π
(
r
->
ñemíts
 <r->
Æloc_Àn
);

150 i‡(
r
->
ñemíts
 =r->
Æloc_Àn
) {

151 i‡(
	`ñemítAºayEx∑nd
(
r
Ë!
MC_OK
)

152  
MC_ERR
;

154 
r
->
ñemít
[r->
ñemíts
++] = 
ª∂y
;

156  
MC_OK
;

157 
	}
}

159 
	$memˇchedP¨£Re•⁄£
(
mcRódî
 *
r
)

161 *
obj
;

162 *
p
, *
m
;

163 
ch
;

165 
SW_START
,

166 
SW_RSP_NUM
,

167 
SW_RSP_STR
,

168 
SW_SPACES_BEFORE_KEY
,

169 
SW_KEY
,

170 
SW_SPACES_BEFORE_FLAGS
,

171 
SW_FLAGS
,

172 
SW_SPACES_BEFORE_VLEN
,

173 
SW_VLEN
,

174 
SW_RUNTO_VAL
,

175 
SW_VAL
,

176 
SW_VAL_LF
,

177 
SW_END
,

178 
SW_RUNTO_CRLF
,

179 
SW_CRLF
,

180 
SW_ALMOST_DONE
,

181 
SW_SENTINEL


182 } 
°©e
;

184 
°©e
 = 
r
->state;

186 
	`as£π
(
°©e
 >
SW_START
 && sèã < 
SW_SENTINEL
);

189 
	`as£π
(
r
->
buf
 !
NULL
);

190 
	`as£π
(
r
->
pos
 <Ñ->
Àn
);

192 
p
 = 
r
->
buf
+r->
pos
;Ö <r->buf+r->
Àn
;Ö++) {

193 
ch
 = *
p
;

195 
°©e
) {

196 
SW_START
:

197 i‡(
	`isdigô
(
ch
)) {

198 
°©e
 = 
SW_RSP_NUM
;

200 
°©e
 = 
SW_RSP_STR
;

202 
p
 =Ö - 1;

206 
SW_RSP_NUM
:

207 i‡(
r
->
tokí
 =
NULL
) {

209 
r
->
tokí
 = 
p
;

212 i‡(
	`isdigô
(
ch
)) {

214 
r
->
öãgî
 =Ñ->öãgî*10 + ()(
ch
-'0');

215 } i‡(
ch
 == ' ' || ch == '\r') {

217 
r
->
tokí
 = 
NULL
;

218 
r
->
öãgî
 = 0;

219 
r
->
ty≥
 = 
RSP_TYPE_NUM
;

220 
p
 =Ö - 1;

221 
°©e
 = 
SW_CRLF
;

223 
îr‹
;

228 
SW_RSP_STR
:

229 i‡(
r
->
tokí
 =
NULL
) {

231 
r
->
tokí
 = 
p
;

234 i‡(
ch
 == ' ' || ch == '\r') {

236 
m
 = 
r
->
tokí
;

238 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

239 
	`as£π
(
r
->
°r
 =
NULL
 &&Ñ->
°æí
 == 0);

241 
p
 - 
m
) {

243 i‡(!
	`°∫cmp
(
m
,"END\r",4)) {

244 
r
->
ty≥
 = 
RSP_TYPE_END
;

251 i‡(!
	`°∫cmp
(
m
,"VALUE",5)) {

256 
r
->
ty≥
 = 
RSP_TYPE_VALUE
;

260 i‡(!
	`°∫cmp
(
m
,"ERROR",5)) {

261 
r
->
ty≥
 = 
RSP_TYPE_ERROR
;

268 i‡(!
	`°∫cmp
(
m
,"STORED",6)) {

269 
r
->
ty≥
 = 
RSP_TYPE_STORED
;

271 
r
->
°r
 = 
m
;

272 
r
->
°æí
 = 6;

276 i‡(!
	`°∫cmp
(
m
,"EXISTS",6)) {

277 
r
->
ty≥
 = 
RSP_TYPE_EXISTS
;

279 
r
->
°r
 = 
m
;

280 
r
->
°æí
 = 6;

287 i‡(!
	`°∫cmp
(
m
,"DELETED",7)) {

288 
r
->
ty≥
 = 
RSP_TYPE_DELETED
;

290 
r
->
°r
 = 
m
;

291 
r
->
°æí
 = 7;

298 i‡(!
	`°∫cmp
(
m
,"NOT_FOUND",9)) {

299 
r
->
ty≥
 = 
RSP_TYPE_NOT_FOUND
;

301 
r
->
°r
 = 
m
;

302 
r
->
°æí
 = 9;

309 i‡(!
	`°∫cmp
(
m
,"NOT_STORED",10)) {

310 
r
->
ty≥
 = 
RSP_TYPE_NOT_STORED
;

312 
r
->
°r
 = 
m
;

313 
r
->
°æí
 = 10;

320 i‡(!
	`°∫cmp
(
m
,"CLIENT_ERROR",12)) {

321 
r
->
ty≥
 = 
RSP_TYPE_CLIENT_ERROR
;

325 i‡(!
	`°∫cmp
(
m
,"SERVER_ERROR",12)) {

326 
r
->
ty≥
 = 
RSP_TYPE_SERVER_ERROR
;

333 
r
->
ty≥
) {

334 
RSP_TYPE_UNKNOWN
:

335 
îr‹
;

337 
RSP_TYPE_STORED
:

338 
RSP_TYPE_NOT_STORED
:

339 
RSP_TYPE_EXISTS
:

340 
RSP_TYPE_NOT_FOUND
:

341 
RSP_TYPE_DELETED
:

342 
°©e
 = 
SW_CRLF
;

345 
RSP_TYPE_END
:

346 
°©e
 = 
SW_CRLF
;

349 
RSP_TYPE_VALUE
:

350 
°©e
 = 
SW_SPACES_BEFORE_KEY
;

353 
RSP_TYPE_ERROR
:

354 
°©e
 = 
SW_CRLF
;

357 
RSP_TYPE_CLIENT_ERROR
:

358 
RSP_TYPE_SERVER_ERROR
:

359 
r
->
tokí
 = 
NULL
;

360 
°©e
 = 
SW_RUNTO_CRLF
;

364 
	`NOT_REACHED
();

367 
p
 =Ö - 1;

372 
SW_SPACES_BEFORE_KEY
:

373 i‡(
ch
 != ' ') {

374 
°©e
 = 
SW_KEY
;

375 
p
 =Ö - 1;

376 
r
->
tokí
 = 
NULL
;

381 
SW_KEY
:

382 i‡(
r
->
tokí
 =
NULL
) {

383 
r
->
tokí
 = 
p
;

386 i‡(
ch
 == ' ') {

387 
	`as£π
(
r
->
°r
 =
NULL
 &&Ñ->
°æí
 == 0);

388 
m
 = 
r
->
tokí
;

389 
r
->
tokí
 = 
NULL
;

390 
°©e
 = 
SW_SPACES_BEFORE_FLAGS
;

391 
r
->
°æí
 = 
p
-
m
;

392 
r
->
°r
 = 
m
;

397 
SW_SPACES_BEFORE_FLAGS
:

398 i‡(
ch
 != ' ') {

399 i‡(!
	`isdigô
(
ch
)) {

400 
îr‹
;

402 
°©e
 = 
SW_FLAGS
;

403 
p
 =Ö - 1;

404 
r
->
kÊags
 = 0;

409 
SW_FLAGS
:

410 i‡(
	`isdigô
(
ch
)) {

412 
r
->
kÊags
 =Ñ->kÊags*10 + ()(
ch
-'0');

413 } i‡(
ch
 == ' ') {

416 
°©e
 = 
SW_SPACES_BEFORE_VLEN
;

418 
îr‹
;

423 
SW_SPACES_BEFORE_VLEN
:

424 i‡(
ch
 != ' ') {

425 i‡(!
	`isdigô
(
ch
)) {

426 
îr‹
;

428 
p
 =Ö - 1;

429 
°©e
 = 
SW_VLEN
;

430 
r
->
öãgî
 = 0;

435 
SW_VLEN
:

436 i‡(
	`isdigô
(
ch
)) {

437 
r
->
öãgî
 =Ñ->öãgî*10 + ()(
ch
-'0');

438 } i‡(
ch
 == ' ' || ch == '\r') {

440 
p
 =Ö - 1;

442 
°©e
 = 
SW_RUNTO_CRLF
;

444 
îr‹
;

449 
SW_RUNTO_VAL
:

450 
ch
) {

453 
°©e
 = 
SW_VAL
;

454 
r
->
tokí
 = 
NULL
;

458 
îr‹
;

463 
SW_VAL
:

464 i‡(
r
->
tokí
 =
NULL
) {

466 
r
->
tokí
 = 
p
;

469 
m
 = 
r
->
tokí
 +Ñ->
öãgî
;

470 i‡(
m
 > 
r
->
buf
+r->
Àn
) {

471 
p
 = 
r
->
buf
 +Ñ->
Àn
;

475 *
m
) {

478 
p
 = 
m
;

479 
°©e
 = 
SW_VAL_LF
;

483 
îr‹
;

488 
SW_VAL_LF
:

489 
ch
) {

492 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

493 
obj
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_STRING
,r->
°r
,r->
°æí
,

494 
r
->
tokí
,r->
öãgî
,r->
kÊags
,r->
kvîsi⁄
);

496 
obj
 = (*)
MC_REPLY_STRING
;

497 i‡(
r
->
ñemít
) {

498 
	`as£π
(
r
->
subª∂y
 =
NULL
);

499 
	`ñemítAºayAdd
(
r
,r->
subª∂y
);

500 } i‡(
r
->
subª∂y
) {

501 
	`ñemítAºayCª©e
(
r
);

502 
	`ñemítAºayAdd
(
r
,r->
subª∂y
);

503 
r
->
subª∂y
 = 
NULL
;

504 
	`ñemítAºayAdd
(
r
,
obj
);

506 
r
->
subª∂y
 = 
obj
;

509 
r
->
tokí
 = 
NULL
;

510 
r
->
°r
 = 
NULL
;

511 
r
->
°æí
 = 0;

512 
r
->
kÊags
 = 0;

513 
r
->
kvîsi⁄
 = -1;

514 
°©e
 = 
SW_RSP_STR
;

518 
îr‹
;

523 
SW_END
:

524 i‡(
r
->
tokí
 =
NULL
) {

525 i‡(
ch
 != 'E') {

526 
îr‹
;

529 
r
->
tokí
 = 
p
;

530 } i‡(
ch
 == '\r') {

532 
m
 = 
r
->
tokí
;

533 
r
->
tokí
 = 
NULL
;

535 
p
 - 
m
) {

537 i‡(!
	`°∫cmp
(
m
,"END\r",4)) {

538 
°©e
 = 
SW_ALMOST_DONE
;

543 
îr‹
;

549 
SW_RUNTO_CRLF
:

550 
ch
) {

552 i‡(
r
->
ty≥
 =
RSP_TYPE_VALUE
) {

553 
°©e
 = 
SW_RUNTO_VAL
;

555 i‡(
r
->
ty≥
 =
RSP_TYPE_CLIENT_ERROR
 ||

556 
r
->
ty≥
 =
RSP_TYPE_SERVER_ERROR
) {

557 
m
 = 
r
->
tokí
;

558 
r
->
tokí
 = 
NULL
;

559 
r
->
°æí
 = 
p
-
m
;

560 
r
->
°r
 = 
m
;

562 
°©e
 = 
SW_ALMOST_DONE
;

573 
SW_CRLF
:

574 
ch
) {

579 
°©e
 = 
SW_ALMOST_DONE
;

583 
îr‹
;

588 
SW_ALMOST_DONE
:

589 
ch
) {

592 
d⁄e
;

595 
îr‹
;

600 
SW_SENTINEL
:

602 
	`NOT_REACHED
();

608 
	`as£π
(
p
 =
r
->
buf
+r->
Àn
);

609 
r
->
pos
 =Ñ->
Àn
;

610 
r
->
°©e
 = state;

612 
r
->
ªsu…
 = 
PARSE_AGAIN
;

616 
d⁄e
:

617 
r
->
pos
 = 
p
-r->
buf
+1;

618 
	`as£π
(
r
->
pos
 <r->
Àn
);

619 
r
->
°©e
 = 
SW_START
;

620 
r
->
tokí
 = 
NULL
;

621 
r
->
ªsu…
 = 
PARSE_OK
;

625 
îr‹
:

626 
r
->
ªsu…
 = 
PARSE_ERROR
;

627 
r
->
°©e
 = state;

628 
î∫o
 = 
EINVAL
;

629 
	}
}

631 
mcRódî
 *
	$memˇchedRódîCª©eWôhFun˘i⁄s
(
mcRïlyObje˘Fun˘i⁄s
 *
‚
)

633 
mcRódî
 *
r
;

635 
r
 = 
	`ˇŒoc
((
mcRódî
),1);

636 i‡(
r
 =
NULL
)

637  
NULL
;

639 
r
->
îr
 = 0;

640 
r
->
îr°r
[0] = '\0';

641 
r
->
buf
 = 
	`sd£m±y
();

642 
r
->
maxbuf
 = 
MC_READER_MAX_BUF
;

643 i‡(
r
->
buf
 =
NULL
) {

644 
	`‰ì
(
r
);

645  
NULL
;

648 
r
->
subª∂y
 = 
NULL
;

649 
r
->
Æloc_Àn
 = 0;

650 
r
->
ñemíts
 = 0;

651 
r
->
ñemít
 = 
NULL
;

653 
r
->
°©e
 = 0;

654 
r
->
tokí
 = 
NULL
;

656 
r
->
°r
 = 
NULL
;

657 
r
->
°æí
 = 0;

658 
r
->
kÊags
 = 0;

659 
r
->
kvîsi⁄
 = -1;

660 
r
->
öãgî
 = 0;

661 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

662 
r
->
ªsu…
 = 
PARSE_OK
;

664 
r
->
‚
 = fn;

666  
r
;

667 
	}
}

669 
	$memˇchedRódîFªe
(
mcRódî
 *
r
)

671 
	`memˇchedRódîRe£t
(
r
);

673 i‡(
r
->
buf
 !
NULL
)

674 
	`sds‰ì
(
r
->
buf
);

675 
	`‰ì
(
r
);

676 
	}
}

678 
	$memˇchedRódîFìd
(
mcRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
)

680 
sds
 
√wbuf
;

683 i‡(
r
->
îr
)

684  
MC_ERR
;

687 i‡(
buf
 !
NULL
 && 
Àn
 >= 1) {

689 i‡(
r
->
Àn
 =0 &&Ñ->
maxbuf
 !0 && 
	`sdßvaû
‘->
buf
) >Ñ->maxbuf) {

690 
	`sds‰ì
(
r
->
buf
);

691 
r
->
buf
 = 
	`sd£m±y
();

692 
r
->
pos
 = 0;

695 
	`as£π
(
r
->
buf
 !
NULL
);

698 
√wbuf
 = 
	`sdsˇéí
(
r
->
buf
,buf,
Àn
);

699 i‡(
√wbuf
 =
NULL
) {

700 
	`__memˇchedRódîSëEº‹OOM
(
r
);

701  
MC_ERR
;

704 
r
->
buf
 = 
√wbuf
;

705 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

708  
MC_OK
;

709 
	}
}

711 
	$memˇchedRódîRe£t
(
mcRódî
 *
r
)

713 
r
->
°r
 = 
NULL
;

714 
r
->
°æí
 = 0;

715 
r
->
kÊags
 = 0;

716 
r
->
kvîsi⁄
 = -1;

718 
r
->
°©e
 = 0;

719 
r
->
tokí
 = 0;

721 
r
->
öãgî
 = 0;

723 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

724 
r
->
ªsu…
 = 
PARSE_OK
;

726 i‡(
r
->
subª∂y
 !
NULL
) {

727 i‡(
r
->
‚
 &&Ñ->‚->
‰ìObje˘
)

728 
r
->
‚
->
	`‰ìObje˘
‘->
subª∂y
);

730 
r
->
subª∂y
 = 
NULL
;

733 
	`ñemítAºayDe°roy
(
r
);

735 
r
->
îr
 = 0;

736 
r
->
îr°r
[0] = '\0';

737 
	}
}

739 *
	$gëRïlyFromRódî
(
mcRódî
 *
r
)

741 *
ª∂y
;

743 
r
->
ty≥
) {

744 
RSP_TYPE_VALUE
:

745 i‡(
r
->
ñemít
) {

746 
	`as£π
(
r
->
subª∂y
 =
NULL
);

747 i‡(
r
->
‚
 &&Ñ->‚->
¸óãAºay
) {

748 
ª∂y
 = 
r
->
‚
->
	`¸óãAºay
‘->
ñemíts
,r->
ñemít
);

749 
r
->
ñemít
 = 
NULL
;

750 
r
->
ñemíts
 = 0;

751 
r
->
Æloc_Àn
 = 0;

753 
ª∂y
 = (*)
MC_REPLY_ARRAY
;

755 } i‡(
r
->
subª∂y
) {

756 
ª∂y
 = 
r
->
subª∂y
;

759 
RSP_TYPE_NUM
:

760 i‡(
r
->
‚
 &&Ñ->‚->
¸óãI¡egî
)

761 
ª∂y
 = 
r
->
‚
->
	`¸óãI¡egî
‘->
öãgî
);

763 
ª∂y
 = (*)
MC_REPLY_INTEGER
;

765 
RSP_TYPE_END
:

766 i‡(
r
->
‚
 &&Ñ->‚->
¸óãNû
)

767 
ª∂y
 = 
r
->
‚
->
	`¸óãNû
();

769 
ª∂y
 = (*)
MC_REPLY_NIL
;

771 
RSP_TYPE_CLIENT_ERROR
:

772 
RSP_TYPE_SERVER_ERROR
:

773 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

774 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_ERROR
,

775 
NULL
,0,
r
->
°r
,r->
°æí
,0,0);

777 
ª∂y
 = (*)
MC_REPLY_ERROR
;

779 
RSP_TYPE_ERROR
:

780 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

781 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_ERROR
,

782 
NULL
,0,"",0,0,0);

784 
ª∂y
 = (*)
MC_REPLY_ERROR
;

786 
RSP_TYPE_STORED
:

787 
RSP_TYPE_NOT_STORED
:

788 
RSP_TYPE_EXISTS
:

789 
RSP_TYPE_NOT_FOUND
:

790 
RSP_TYPE_DELETED
:

791 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

792 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_STATUS
,

793 
NULL
,0,
r
->
°r
,r->
°æí
,0,0);

795 
ª∂y
 = (*)
MC_REPLY_STATUS
;

798 
ª∂y
 = 
NULL
;

802  
ª∂y
;

803 
	}
}

805 
	$memˇchedRódîGëRïly
(
mcRódî
 *
r
, **
ª∂y
) {

807 i‡(
ª∂y
 !
NULL
)

808 *
ª∂y
 = 
NULL
;

811 i‡(
r
->
îr
)

812  
MC_ERR
;

815 i‡(
r
->
Àn
 == 0)

816  
MC_OK
;

818 
	`memˇchedP¨£Re•⁄£
(
r
);

821 i‡(
r
->
îr
)

822  
MC_ERR
;

831 i‡(
r
->
ªsu…
 =
PARSE_OK
) {

832 i‡(
ª∂y
 !
NULL
) {

833 *
ª∂y
 = 
	`gëRïlyFromRódî
(
r
);

835 
	`memˇchedRódîRe£t
(
r
);

840 i‡(
r
->
pos
 >1024 &&Ñ->
tokí
 =
NULL
 &&Ñ->
°r
 == NULL) {

841 
	`sd§™ge
(
r
->
buf
,r->
pos
,-1);

842 
r
->
pos
 = 0;

843 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

846  
MC_OK
;

847 
	}
}

	@dep/himemcached-0.1.0/himcread.h

1 #i‚de‡
_HIMC_READ_H_


2 
	#_HIMC_READ_H_


	)

3 
	~<°dio.h
>

5 
	~<him¸ód.h
>

7 
	#MC_ERR
 -1

	)

8 
	#MC_OK
 0

	)

14 
	#MC_ERR_IO
 1

	)

15 
	#MC_ERR_EOF
 3

	)

16 
	#MC_ERR_PROTOCOL
 4

	)

17 
	#MC_ERR_OOM
 5

	)

18 
	#MC_ERR_OTHER
 2

	)

20 
	#MC_REPLY_STRING
 1

	)

21 
	#MC_REPLY_ARRAY
 2

	)

22 
	#MC_REPLY_INTEGER
 3

	)

23 
	#MC_REPLY_NIL
 4

	)

24 
	#MC_REPLY_STATUS
 5

	)

25 
	#MC_REPLY_ERROR
 6

	)

27 
	#MC_READER_MAX_BUF
 (1024*16Ë

	)

29 #ifde‡
__˝lu•lus


33 
	smcRïlyObje˘Fun˘i⁄s
 {

34 *(*
¸óãSåög
)(, *, 
size_t
, *, size_t, , );

35 *(*
¸óãAºay
)(
size_t
, **);

36 *(*
¸óãI¡egî
)();

37 *(*
¸óãNû
)();

38 (*
‰ìObje˘
)(*);

39 } 
	tmcRïlyObje˘Fun˘i⁄s
;

41 
	smcRódî
 {

42 
îr
;

43 
îr°r
[128];

45 *
buf
;

46 
size_t
 
pos
;

47 
size_t
 
Àn
;

48 
size_t
 
maxbuf
;

50 *
subª∂y
;

51 
size_t
 
Æloc_Àn
;

52 
size_t
 
ñemíts
;

53 **
ñemít
;

55 *
°r
;

56 
size_t
 
°æí
;

57 
kÊags
;

58 
kvîsi⁄
;

60 
°©e
;

61 *
tokí
;

63 
öãgî
;

65 
ty≥
;

66 
ªsu…
;

68 
mcRïlyObje˘Fun˘i⁄s
 *
‚
;

69 *
¥ivd©a
;

70 } 
	tmcRódî
;

73 
mcRódî
 *
memˇchedRódîCª©eWôhFun˘i⁄s
(
mcRïlyObje˘Fun˘i⁄s
 *
‚
);

74 
memˇchedRódîFªe
(
mcRódî
 *
r
);

75 
memˇchedRódîFìd
(
mcRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
);

76 
memˇchedRódîGëRïly
(
mcRódî
 *
r
, **
ª∂y
);

78 #ifde‡
__˝lu•lus


	@dep/himemcached-0.1.0/himcread.h

1 #i‚de‡
_HIMC_READ_H_


2 
	#_HIMC_READ_H_


	)

3 
	~<°dio.h
>

5 
	~<him¸ód.h
>

7 
	#MC_ERR
 -1

	)

8 
	#MC_OK
 0

	)

14 
	#MC_ERR_IO
 1

	)

15 
	#MC_ERR_EOF
 3

	)

16 
	#MC_ERR_PROTOCOL
 4

	)

17 
	#MC_ERR_OOM
 5

	)

18 
	#MC_ERR_OTHER
 2

	)

20 
	#MC_REPLY_STRING
 1

	)

21 
	#MC_REPLY_ARRAY
 2

	)

22 
	#MC_REPLY_INTEGER
 3

	)

23 
	#MC_REPLY_NIL
 4

	)

24 
	#MC_REPLY_STATUS
 5

	)

25 
	#MC_REPLY_ERROR
 6

	)

27 
	#MC_READER_MAX_BUF
 (1024*16Ë

	)

29 #ifde‡
__˝lu•lus


33 
	smcRïlyObje˘Fun˘i⁄s
 {

34 *(*
¸óãSåög
)(, *, 
size_t
, *, size_t, , );

35 *(*
¸óãAºay
)(
size_t
, **);

36 *(*
¸óãI¡egî
)();

37 *(*
¸óãNû
)();

38 (*
‰ìObje˘
)(*);

39 } 
	tmcRïlyObje˘Fun˘i⁄s
;

41 
	smcRódî
 {

42 
îr
;

43 
îr°r
[128];

45 *
buf
;

46 
size_t
 
pos
;

47 
size_t
 
Àn
;

48 
size_t
 
maxbuf
;

50 *
subª∂y
;

51 
size_t
 
Æloc_Àn
;

52 
size_t
 
ñemíts
;

53 **
ñemít
;

55 *
°r
;

56 
size_t
 
°æí
;

57 
kÊags
;

58 
kvîsi⁄
;

60 
°©e
;

61 *
tokí
;

63 
öãgî
;

65 
ty≥
;

66 
ªsu…
;

68 
mcRïlyObje˘Fun˘i⁄s
 *
‚
;

69 *
¥ivd©a
;

70 } 
	tmcRódî
;

73 
mcRódî
 *
memˇchedRódîCª©eWôhFun˘i⁄s
(
mcRïlyObje˘Fun˘i⁄s
 *
‚
);

74 
memˇchedRódîFªe
(
mcRódî
 *
r
);

75 
memˇchedRódîFìd
(
mcRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
);

76 
memˇchedRódîGëRïly
(
mcRódî
 *
r
, **
ª∂y
);

78 #ifde‡
__˝lu•lus


	@dep/himemcached-0.1.0/himemcached.c

1 
	~<°dlib.h
>

2 
	~<î∫o.h
>

3 
	~<as£π.h
>

5 
	~"himemˇched.h
"

7 
	#REQ_TYPE_UNKNOWN
 0

	)

8 
	#REQ_TYPE_STORAGE
 1

	)

9 
	#REQ_TYPE_CAS
 2

	)

10 
	#REQ_TYPE_RETRIEVAL
 3

	)

11 
	#REQ_TYPE_ARITHMETIC
 4

	)

12 
	#REQ_TYPE_DELETE
 5

	)

14 
mcRïly
 *
¸óãRïlyObje˘
(
ty≥
);

15 *
¸óãSåögObje˘
(
ty≥
, *
key
, 
size_t
 
keyÀn
, *
°r
, size_à
Àn
, 
Êags
, 
vîsi⁄
);

16 *
¸óãAºayObje˘
(
size_t
 
ñemíts
, **
ñemít
);

17 *
¸óãI¡egîObje˘
(
vÆue
);

18 *
¸óãNûObje˘
();

22 
mcRïlyObje˘Fun˘i⁄s
 
	gdeÁu…Fun˘i⁄s
 = {

23 
¸óãSåögObje˘
,

24 
¸óãAºayObje˘
,

25 
¸óãI¡egîObje˘
,

26 
¸óãNûObje˘
,

27 
‰ìMcRïlyObje˘


31 
mcRïly
 *
	$¸óãRïlyObje˘
(
ty≥
) {

32 
mcRïly
 *
r
 = 
	`ˇŒoc
(1,(*r));

34 i‡(
r
 =
NULL
)

35  
NULL
;

37 
r
->
ty≥
 =Åype;

39  
r
;

40 
	}
}

43 
	$‰ìMcRïlyObje˘
(*
ª∂y
) {

44 
mcRïly
 *
r
 = 
ª∂y
;

45 
size_t
 
j
;

47 i‡(
r
 =
NULL
)

50 
r
->
ty≥
) {

51 
MC_REPLY_INTEGER
:

52 
MC_REPLY_NIL
:

54 
MC_REPLY_ARRAY
:

55 i‡(
r
->
ñemít
 !
NULL
) {

56 
j
 = 0; j < 
r
->
ñemíts
; j++)

57 i‡(
r
->
ñemít
[
j
] !
NULL
)

58 
	`‰ìMcRïlyObje˘
(
r
->
ñemít
[
j
]);

59 
	`‰ì
(
r
->
ñemít
);

62 
MC_REPLY_ERROR
:

63 
MC_REPLY_STATUS
:

64 
MC_REPLY_STRING
:

65 i‡(
r
->
key
 !
NULL
)

66 
	`‰ì
(
r
->
key
);

67 i‡(
r
->
°r
 !
NULL
)

68 
	`‰ì
(
r
->
°r
);

71 
	`as£π
(0);

74 
	`‰ì
(
r
);

75 
	}
}

77 *
	$¸óãSåögObje˘
(
ty≥
, *
key
, 
size_t
 
keyÀn
, *
°r
, size_à
Àn
, 
Êags
, 
vîsi⁄
) {

78 
mcRïly
 *
r
, *
∑ª¡
;

79 *
buf
;

81 
	`as£π
(
ty≥
 =
MC_REPLY_ERROR
 ||

82 
ty≥
 =
MC_REPLY_STATUS
 ||

83 
ty≥
 =
MC_REPLY_STRING
);

85 
r
 = 
	`¸óãRïlyObje˘
(
ty≥
);

86 i‡(
r
 =
NULL
)

87  
NULL
;

89 i‡(
key
 !
NULL
) {

90 
r
->
key
 = 
	`mÆloc
(
keyÀn
+1);

91 i‡(
r
->
key
 =
NULL
) {

92 
	`‰ìMcRïlyObje˘
(
r
);

93  
NULL
;

95 i‡(
keyÀn
 > 0)

97 
	`mem˝y
(
r
->
key
,key,
keyÀn
);

98 
r
->
key
[
keyÀn
] = '\0';

99 
r
->
keyÀn
 = keylen;

102 
buf
 = 
	`mÆloc
(
Àn
+1);

103 i‡(
buf
 =
NULL
) {

104 
	`‰ìMcRïlyObje˘
(
r
);

105  
NULL
;

107 i‡(
Àn
 > 0)

109 
	`mem˝y
(
buf
,
°r
,
Àn
);

110 
buf
[
Àn
] = '\0';

111 
r
->
°r
 = 
buf
;

112 
r
->
Àn
 =Üen;

114 
r
->
Êags
 = flags;

115 
r
->
vîsi⁄
 = version;

117  
r
;

118 
	}
}

120 *
	$¸óãAºayObje˘
(
size_t
 
ñemíts
, **
ñemít
) {

121 
mcRïly
 *
r
;

123 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_ARRAY
);

124 i‡(
r
 =
NULL
)

125  
NULL
;

127 
r
->
ñemíts
 =Élements;

128 
r
->
ñemít
 = (
mcRïly
 **)element;

130  
r
;

131 
	}
}

133 *
	$¸óãI¡egîObje˘
(
vÆue
) {

134 
mcRïly
 *
r
;

136 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_INTEGER
);

137 i‡(
r
 =
NULL
)

138  
NULL
;

140 
r
->
öãgî
 = 
vÆue
;

142  
r
;

143 
	}
}

145 *
	$¸óãNûObje˘
() {

146 
mcRïly
 *
r
;

148 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_NIL
);

149 i‡(
r
 =
NULL
)

150  
NULL
;

152  
r
;

153 
	}
}

155 
	$__memˇchedSëEº‹
(
mcC⁄ãxt
 *
c
, 
ty≥
, c⁄° *
°r
) {

156 
size_t
 
Àn
;

158 
c
->
îr
 = 
ty≥
;

159 i‡(
°r
 !
NULL
) {

160 
Àn
 = 
	`°æí
(
°r
);

161 
Àn
 =Üí < ((
c
->
îr°r
)-1) ?Üen : ((c->errstr)-1);

162 
	`mem˝y
(
c
->
îr°r
,
°r
,
Àn
);

163 
c
->
îr°r
[
Àn
] = '\0';

166 
	`as£π
(
ty≥
 =
MC_ERR_IO
);

169 
	}
}

181 
	$memˇchedBuf„rWrôe
(
mcC⁄ãxt
 *
c
, *
d⁄e
) {

182 
nwrôãn
;

185 i‡(
c
->
îr
)

186  
MC_ERR
;

188 i‡(
	`sd¶í
(
c
->
obuf
) > 0) {

189 
nwrôãn
 = 
	`wrôe
(
c
->
fd
,c->
obuf
,
	`sd¶í
(c->obuf));

190 i‡(
nwrôãn
 == -1) {

191 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
MC_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

194 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_IO
,
NULL
);

195  
MC_ERR
;

197 } i‡(
nwrôãn
 > 0) {

198 i‡(
nwrôãn
 =(sig√d)
	`sd¶í
(
c
->
obuf
)) {

199 
	`sds‰ì
(
c
->
obuf
);

200 
c
->
obuf
 = 
	`sd£m±y
();

202 
	`sd§™ge
(
c
->
obuf
,
nwrôãn
,-1);

206 i‡(
d⁄e
 !
NULL
Ë*d⁄ê(
	`sd¶í
(
c
->
obuf
) == 0);

207  
MC_OK
;

208 
	}
}

212 
	$memˇchedGëRïlyFromRódî
(
mcC⁄ãxt
 *
c
, **
ª∂y
) {

213 i‡(
	`memˇchedRódîGëRïly
(
c
->
ªadî
,
ª∂y
Ë=
MC_ERR
) {

214 
	`__memˇchedSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

215  
MC_ERR
;

217  
MC_OK
;

218 
	}
}

220 
	$memˇchedGëRïly
(
mcC⁄ãxt
 *
c
, **
ª∂y
) {

221 
wd⁄e
 = 0;

222 *
aux
 = 
NULL
;

225 i‡(
	`memˇchedGëRïlyFromRódî
(
c
,&
aux
Ë=
MC_ERR
)

226  
MC_ERR
;

229 i‡(
aux
 =
NULL
 && 
c
->
Êags
 & 
MC_BLOCK
) {

232 i‡(
	`memˇchedBuf„rWrôe
(
c
,&
wd⁄e
Ë=
MC_ERR
)

233  
MC_ERR
;

234 } !
wd⁄e
);

238 i‡(
	`memˇchedBuf„rRód
(
c
Ë=
MC_ERR
)

239  
MC_ERR
;

240 i‡(
	`memˇchedGëRïlyFromRódî
(
c
,&
aux
Ë=
MC_ERR
)

241  
MC_ERR
;

242 } 
aux
 =
NULL
);

246 i‡(
ª∂y
 !
NULL
Ë*ª∂y = 
aux
;

247  
MC_OK
;

248 
	}
}

250 
mcRódî
 *
	$memˇchedRódîCª©e
() {

251  
	`memˇchedRódîCª©eWôhFun˘i⁄s
(&
deÁu…Fun˘i⁄s
);

252 
	}
}

254 
mcC⁄ãxt
 *
	$memˇchedC⁄ãxtInô
() {

255 
mcC⁄ãxt
 *
c
;

257 
c
 = 
	`ˇŒoc
(1,(
mcC⁄ãxt
));

258 i‡(
c
 =
NULL
)

259  
NULL
;

261 
c
->
îr
 = 0;

262 
c
->
îr°r
[0] = '\0';

263 
c
->
obuf
 = 
	`sd£m±y
();

264 
c
->
ªadî
 = 
	`memˇchedRódîCª©e
();

265 
c
->
t˝
.
ho°
 = 
NULL
;

266 
c
->
t˝
.
sour˚_addr
 = 
NULL
;

267 
c
->
unix_sock
.
∑th
 = 
NULL
;

268 
c
->
timeout
 = 
NULL
;

270 i‡(
c
->
obuf
 =
NULL
 || c->
ªadî
 == NULL) {

271 
	`memˇchedFªe
(
c
);

272  
NULL
;

275  
c
;

276 
	}
}

278 
	$memˇchedFªe
(
mcC⁄ãxt
 *
c
) {

279 i‡(
c
 =
NULL
)

281 i‡(
c
->
fd
 > 0)

282 
	`˛o£
(
c
->
fd
);

283 i‡(
c
->
obuf
 !
NULL
)

284 
	`sds‰ì
(
c
->
obuf
);

285 i‡(
c
->
ªadî
 !
NULL
)

286 
	`memˇchedRódîFªe
(
c
->
ªadî
);

287 i‡(
c
->
t˝
.
ho°
)

288 
	`‰ì
(
c
->
t˝
.
ho°
);

289 i‡(
c
->
t˝
.
sour˚_addr
)

290 
	`‰ì
(
c
->
t˝
.
sour˚_addr
);

291 i‡(
c
->
unix_sock
.
∑th
)

292 
	`‰ì
(
c
->
unix_sock
.
∑th
);

293 i‡(
c
->
timeout
)

294 
	`‰ì
(
c
->
timeout
);

295 
	`‰ì
(
c
);

296 
	}
}

303 
	$memˇchedBuf„rRód
(
mcC⁄ãxt
 *
c
) {

304 
buf
[1024*16];

305 
ƒód
;

308 i‡(
c
->
îr
)

309  
MC_ERR
;

311 
ƒód
 = 
	`ªad
(
c
->
fd
,
buf
,(buf));

312 i‡(
ƒód
 == -1) {

313 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
MC_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

316 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_IO
,
NULL
);

317  
MC_ERR
;

319 } i‡(
ƒód
 == 0) {

320 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_EOF
,"Server closedÅhe connection");

321  
MC_ERR
;

323 i‡(
	`memˇchedRódîFìd
(
c
->
ªadî
,
buf
,
ƒód
Ë!
MC_OK
) {

324 
	`__memˇchedSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

325  
MC_ERR
;

328  
MC_OK
;

329 
	}
}

331 
	$gëReque°Ty≥FromSåög
(*
°r
, 
size_t
 
Àn
)

333 i‡(
°r
 =
NULL
 || 
Àn
 == 0)

336 i‡(
Àn
 == 3) {

337 i‡(!
	`°∫ˇ£cmp
(
°r
,"set",3) ||

338 !
	`°∫ˇ£cmp
(
°r
,"add",3)) {

339  
REQ_TYPE_STORAGE
;

340 } i‡(!
	`°∫ˇ£cmp
(
°r
,"cas",3)) {

341  
REQ_TYPE_CAS
;

342 } i‡(!
	`°∫ˇ£cmp
(
°r
,"get",3)) {

343  
REQ_TYPE_RETRIEVAL
;

347 } i‡(
Àn
 == 4) {

348 i‡(!
	`°∫ˇ£cmp
(
°r
,"gets",4)) {

349  
REQ_TYPE_RETRIEVAL
;

350 } i‡(!
	`°∫ˇ£cmp
(
°r
,"incr",4) ||

351 !
	`°∫ˇ£cmp
(
°r
,"decr",4)) {

352  
REQ_TYPE_ARITHMETIC
;

356 } i‡(
Àn
 == 6) {

357 i‡(!
	`°∫ˇ£cmp
(
°r
,"append",6)) {

358  
REQ_TYPE_STORAGE
;

359 } i‡(!
	`°∫ˇ£cmp
(
°r
,"delete",6)) {

360  
REQ_TYPE_DELETE
;

364 } i‡(
Àn
 == 7) {

365 i‡(!
	`°∫ˇ£cmp
(
°r
,"replace",7) ||

366 !
	`°∫ˇ£cmp
(
°r
,"prepend",7)) {

367  
REQ_TYPE_STORAGE
;

374 
	}
}

376 
	#ARGUMENTLEN
(
_¨gty≥
,
_¨gv
,
_¨gvÀn
,
_idx
) \

377 (
_¨gty≥
==0?
	`sd¶í
(
_¨gv
[
_idx
]):(
_¨gvÀn
==
NULL
?
	`°æí
(_¨gv[_idx]):_¨gvÀn[_idx]))

	)

384 
	$checkCmdVÆidAndGëTŸÆLí
(
cmdty≥
, 
¨gty≥
, 
¨gc
, **
¨gv
, 
size_t
 *
¨gvÀn
)

386 
size_t
 
Àn
;

387 
tŸÀn
, 
j
;

389 
cmdty≥
) {

390 
REQ_TYPE_STORAGE
:

391 i‡(
¨gc
 != 6 &&árgc != 7) {

394 i‡(
¨gc
 =7 && (
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,5) != 7 ||

395 
	`°∫ˇ£cmp
(
¨gv
[5],"noreply",7))) {

399 
tŸÀn
 = 0;

400 
j
 = 0; j < 
¨gc
-1; j ++) {

401 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

403 
tŸÀn
 +2 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

405 
REQ_TYPE_CAS
:

406 i‡(
¨gc
 != 7 &&árgc != 8) {

409 i‡(
¨gc
 =8 && (
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,6) != 7 ||

410 
	`°∫ˇ£cmp
(
¨gv
[6],"noreply",7))) {

414 
tŸÀn
 = 0;

415 
j
 = 0; j < 
¨gc
-1; j ++) {

416 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

418 
tŸÀn
 +2 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

420 
REQ_TYPE_ARITHMETIC
:

421 i‡(
¨gc
 != 3) {

424 
tŸÀn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,0) + 1 +

425 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,1) + 1 +

426 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,2) + 2;

428 
REQ_TYPE_RETRIEVAL
:

429 i‡(
¨gc
 <= 1) {

433 
tŸÀn
 = 0;

434 
j
 = 0; j < 
¨gc
-1; j ++) {

435 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

437 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

439 
REQ_TYPE_DELETE
:

440 i‡(
¨gc
 != 2 &&árgc != 3) {

444 
tŸÀn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,0) + 1 +

445 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,1);

446 i‡(
¨gc
 == 3) {

447 i‡(
	`°∫ˇ£cmp
(
¨gv
[2],"noreply",7)) {

450 
tŸÀn
 +1 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,2);

452 
tŸÀn
 += 2;

455 
tŸÀn
 = -1;

459  
tŸÀn
;

460 
	}
}

463 
	$gíîicMemˇchedComm™d
(
cmdty≥
, *
cmd
, 
¨gty≥
, 
¨gc
, **
¨gv
, 
size_t
 *
¨gvÀn
)

465 
j
;

466 
size_t
 
Àn
;

467 
pos
 = 0;

469 
cmdty≥
) {

470 
REQ_TYPE_STORAGE
:

471 
REQ_TYPE_CAS
:

472 
j
 = 0; j < 
¨gc
-1; j ++) {

473 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
);

474 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

475 
pos
 +()
Àn
;

476 
cmd
[
pos
++] = ' ';

478 
cmd
[
pos
++] = '\r';

479 
cmd
[
pos
++] = '\n';

480 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1);

481 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
¨gc
-1],
Àn
);

482 
pos
 +()
Àn
;

483 
cmd
[
pos
++] = '\r';

484 
cmd
[
pos
++] = '\n';

486 
REQ_TYPE_ARITHMETIC
:

487 
REQ_TYPE_RETRIEVAL
:

488 
REQ_TYPE_DELETE
:

489 
j
 = 0; j < 
¨gc
-1; j ++) {

490 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
);

491 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

492 
pos
 +
Àn
;

493 
cmd
[
pos
++] = ' ';

495 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1);

496 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
¨gc
-1],
Àn
);

497 
pos
 +()
Àn
;

498 
cmd
[
pos
++] = '\r';

499 
cmd
[
pos
++] = '\n';

502 
pos
 = -1;

506  
pos
;

507 
	}
}

512 
	$memˇchedF‹m©Comm™dSdsArgv
(**
èrgë
, 
¨gc
, c⁄° 
sds
 *
¨gv
) {

513 *
cmd
 = 
NULL
;

514 
pos
;

515 
tŸÀn
;

516 
ty≥
;

519 i‡(
èrgë
 =
NULL
 || 
¨gc
 < 1)

522 
ty≥
 = 
	`gëReque°Ty≥FromSåög
(
¨gv
[0], 
	`sd¶í
(argv[0]));

523 i‡(
ty≥
 < 0)

524 
f‹m©_îr
;

526 
tŸÀn
 = 
	`checkCmdVÆidAndGëTŸÆLí
(
ty≥
, 0, 
¨gc
, 
¨gv
, 
NULL
);

527 i‡(
tŸÀn
 < 0) {

528 
f‹m©_îr
;

532 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

533 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

535 
pos
 = 
	`gíîicMemˇchedComm™d
(
ty≥
, 
cmd
, 0, 
¨gc
, 
¨gv
, 
NULL
);

536 i‡(
pos
 < 0Ë
f‹m©_îr
;

538 
	`as£π
(
pos
 =
tŸÀn
);

539 
cmd
[
pos
] = '\0';

541 *
èrgë
 = 
cmd
;

542  
tŸÀn
;

544 
f‹m©_îr
:

545 i‡(
cmd
Ë
	`‰ì
(cmd);

548 
mem‹y_îr
:

550 
	}
}

552 
	$memˇchedvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

554 c⁄° *
c
 = 
f‹m©
;

555 *
cmd
 = 
NULL
;

556 
pos
;

557 
sds
 
cuørg
, 
√w¨g
;

558 
touched
 = 0;

559 **
cuørgv
 = 
NULL
, **
√w¨gv
 = NULL;

560 
¨gc
 = 0;

561 
tŸÀn
;

562 
îr‹_ty≥
 = 0;

563 
j
;

566 i‡(
èrgë
 =
NULL
)

570 
cuørg
 = 
	`sd£m±y
();

571 i‡(
cuørg
 =
NULL
)

574 *
c
 != '\0') {

575 i‡(*
c
 != '%' || c[1] == '\0') {

576 i‡(*
c
 == ' ') {

577 i‡(
touched
) {

578 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

579 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

580 
cuørgv
 = 
√w¨gv
;

581 
cuørgv
[
¨gc
++] = 
cuørg
;

584 
cuørg
 = 
	`sd£m±y
();

585 i‡(
cuørg
 =
NULL
Ë
mem‹y_îr
;

586 
touched
 = 0;

589 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
c
,1);

590 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

591 
cuørg
 = 
√w¨g
;

592 
touched
 = 1;

595 *
¨g
;

596 
size_t
 
size
;

599 
√w¨g
 = 
cuørg
;

601 
c
[1]) {

603 
¨g
 = 
	`va_¨g
(
≠
,*);

604 
size
 = 
	`°æí
(
¨g
);

605 i‡(
size
 > 0)

606 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

609 
¨g
 = 
	`va_¨g
(
≠
,*);

610 
size
 = 
	`va_¨g
(
≠
,
size_t
);

611 i‡(
size
 > 0)

612 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

615 
√w¨g
 = 
	`sdsˇt
(
cuørg
,"%");

620 c⁄° 
ötfmts
[] = "diouxX";

621 c⁄° 
Êags
[] = "#0-+ ";

622 
_f‹m©
[16];

623 c⁄° *
_p
 = 
c
+1;

624 
size_t
 
_l
 = 0;

625 
va_li°
 
_˝y
;

628 *
_p
 !'\0' && 
	`°rchr
(
Êags
,*_pË!
NULL
) _p++;

631 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

634 i‡(*
_p
 == '.') {

635 
_p
++;

636 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

640 
	`va_c›y
(
_˝y
,
≠
);

643 i‡(
	`°rchr
(
ötfmts
,*
_p
Ë!
NULL
) {

644 
	`va_¨g
(
≠
,);

645 
fmt_vÆid
;

649 i‡(
	`°rchr
("eEfFgGaA",*
_p
Ë!
NULL
) {

650 
	`va_¨g
(
≠
,);

651 
fmt_vÆid
;

655 i‡(
_p
[0] == 'h' && _p[1] == 'h') {

656 
_p
 += 2;

657 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

658 
	`va_¨g
(
≠
,);

659 
fmt_vÆid
;

661 
fmt_övÆid
;

665 i‡(
_p
[0] == 'h') {

666 
_p
 += 1;

667 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

668 
	`va_¨g
(
≠
,);

669 
fmt_vÆid
;

671 
fmt_övÆid
;

675 i‡(
_p
[0] == 'l' && _p[1] == 'l') {

676 
_p
 += 2;

677 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

678 
	`va_¨g
(
≠
,);

679 
fmt_vÆid
;

681 
fmt_övÆid
;

685 i‡(
_p
[0] == 'l') {

686 
_p
 += 1;

687 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

688 
	`va_¨g
(
≠
,);

689 
fmt_vÆid
;

691 
fmt_övÆid
;

694 
fmt_övÆid
:

695 
	`va_íd
(
_˝y
);

696 
f‹m©_îr
;

698 
fmt_vÆid
:

699 
_l
 = (
_p
+1)-
c
;

700 i‡(
_l
 < (
_f‹m©
)-2) {

701 
	`mem˝y
(
_f‹m©
,
c
,
_l
);

702 
_f‹m©
[
_l
] = '\0';

703 
√w¨g
 = 
	`sdsˇtv¥ötf
(
cuørg
,
_f‹m©
,
_˝y
);

707 
c
 = 
_p
-1;

710 
	`va_íd
(
_˝y
);

715 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

716 
cuørg
 = 
√w¨g
;

718 
touched
 = 1;

719 
c
++;

721 
c
++;

725 i‡(
touched
) {

726 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

727 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

728 
cuørgv
 = 
√w¨gv
;

729 
cuørgv
[
¨gc
++] = 
cuørg
;

731 
	`sds‰ì
(
cuørg
);

735 
cuørg
 = 
NULL
;

737 
tŸÀn
 = 
	`memˇchedF‹m©Comm™dSdsArgv
(&
cmd
, 
¨gc
,
cuørgv
);

738 i‡(
tŸÀn
 < 0) {

739 
îr‹_ty≥
 = 
tŸÀn
;

740 
˛ónup
;

743 
	`‰ì
(
cuørgv
);

744 *
èrgë
 = 
cmd
;

745  
tŸÀn
;

747 
f‹m©_îr
:

748 
îr‹_ty≥
 = -2;

749 
˛ónup
;

751 
mem‹y_îr
:

752 
îr‹_ty≥
 = -1;

753 
˛ónup
;

755 
˛ónup
:

756 i‡(
cuørgv
) {

757 
¨gc
--)

758 
	`sds‰ì
(
cuørgv
[
¨gc
]);

759 
	`‰ì
(
cuørgv
);

762 
	`sds‰ì
(
cuørg
);

766 i‡(
cmd
 !
NULL
)

767 
	`‰ì
(
cmd
);

769  
îr‹_ty≥
;

770 
	}
}

784 
	$memˇchedF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...) {

785 
va_li°
 
≠
;

786 
Àn
;

787 
	`va_°¨t
(
≠
,
f‹m©
);

788 
Àn
 = 
	`memˇchedvF‹m©Comm™d
(
èrgë
,
f‹m©
,
≠
);

789 
	`va_íd
(
≠
);

793 i‡(
Àn
 < 0)

794 
Àn
 = -1;

796  
Àn
;

797 
	}
}

804 
	$memˇchedF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

805 *
cmd
 = 
NULL
;

806 
pos
;

807 
tŸÀn
;

808 
ty≥
;

811 i‡(
èrgë
 =
NULL
 || 
¨gc
 < 1)

814 
ty≥
 = 
	`gëReque°Ty≥FromSåög
(
¨gv
[0], 
¨gvÀn
==
NULL
?
	`°æí
(argv[0]):argvlen[0]);

815 i‡(
ty≥
 < 0) {

816 
f‹m©_îr
;

819 
tŸÀn
 = 
	`checkCmdVÆidAndGëTŸÆLí
(
ty≥
, 1, 
¨gc
, 
¨gv
, 
¨gvÀn
);

820 i‡(
tŸÀn
 < 0) {

821 
f‹m©_îr
;

825 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

826 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

828 
pos
 = 
	`gíîicMemˇchedComm™d
(
ty≥
, 
cmd
, 1, 
¨gc
, 
¨gv
, 
¨gvÀn
);

829 i‡(
pos
 < 0) {

830 
f‹m©_îr
;

833 
	`as£π
(
pos
 =
tŸÀn
);

834 
cmd
[
pos
] = '\0';

836 *
èrgë
 = 
cmd
;

837  
tŸÀn
;

839 
f‹m©_îr
:

840 i‡(
cmd
Ë
	`‰ì
(cmd);

843 
mem‹y_îr
:

845 
	}
}

	@dep/himemcached-0.1.0/himemcached.c

1 
	~<°dlib.h
>

2 
	~<î∫o.h
>

3 
	~<as£π.h
>

5 
	~"himemˇched.h
"

7 
	#REQ_TYPE_UNKNOWN
 0

	)

8 
	#REQ_TYPE_STORAGE
 1

	)

9 
	#REQ_TYPE_CAS
 2

	)

10 
	#REQ_TYPE_RETRIEVAL
 3

	)

11 
	#REQ_TYPE_ARITHMETIC
 4

	)

12 
	#REQ_TYPE_DELETE
 5

	)

14 
mcRïly
 *
¸óãRïlyObje˘
(
ty≥
);

15 *
¸óãSåögObje˘
(
ty≥
, *
key
, 
size_t
 
keyÀn
, *
°r
, size_à
Àn
, 
Êags
, 
vîsi⁄
);

16 *
¸óãAºayObje˘
(
size_t
 
ñemíts
, **
ñemít
);

17 *
¸óãI¡egîObje˘
(
vÆue
);

18 *
¸óãNûObje˘
();

22 
mcRïlyObje˘Fun˘i⁄s
 
	gdeÁu…Fun˘i⁄s
 = {

23 
¸óãSåögObje˘
,

24 
¸óãAºayObje˘
,

25 
¸óãI¡egîObje˘
,

26 
¸óãNûObje˘
,

27 
‰ìMcRïlyObje˘


31 
mcRïly
 *
	$¸óãRïlyObje˘
(
ty≥
) {

32 
mcRïly
 *
r
 = 
	`ˇŒoc
(1,(*r));

34 i‡(
r
 =
NULL
)

35  
NULL
;

37 
r
->
ty≥
 =Åype;

39  
r
;

40 
	}
}

43 
	$‰ìMcRïlyObje˘
(*
ª∂y
) {

44 
mcRïly
 *
r
 = 
ª∂y
;

45 
size_t
 
j
;

47 i‡(
r
 =
NULL
)

50 
r
->
ty≥
) {

51 
MC_REPLY_INTEGER
:

52 
MC_REPLY_NIL
:

54 
MC_REPLY_ARRAY
:

55 i‡(
r
->
ñemít
 !
NULL
) {

56 
j
 = 0; j < 
r
->
ñemíts
; j++)

57 i‡(
r
->
ñemít
[
j
] !
NULL
)

58 
	`‰ìMcRïlyObje˘
(
r
->
ñemít
[
j
]);

59 
	`‰ì
(
r
->
ñemít
);

62 
MC_REPLY_ERROR
:

63 
MC_REPLY_STATUS
:

64 
MC_REPLY_STRING
:

65 i‡(
r
->
key
 !
NULL
)

66 
	`‰ì
(
r
->
key
);

67 i‡(
r
->
°r
 !
NULL
)

68 
	`‰ì
(
r
->
°r
);

71 
	`as£π
(0);

74 
	`‰ì
(
r
);

75 
	}
}

77 *
	$¸óãSåögObje˘
(
ty≥
, *
key
, 
size_t
 
keyÀn
, *
°r
, size_à
Àn
, 
Êags
, 
vîsi⁄
) {

78 
mcRïly
 *
r
, *
∑ª¡
;

79 *
buf
;

81 
	`as£π
(
ty≥
 =
MC_REPLY_ERROR
 ||

82 
ty≥
 =
MC_REPLY_STATUS
 ||

83 
ty≥
 =
MC_REPLY_STRING
);

85 
r
 = 
	`¸óãRïlyObje˘
(
ty≥
);

86 i‡(
r
 =
NULL
)

87  
NULL
;

89 i‡(
key
 !
NULL
) {

90 
r
->
key
 = 
	`mÆloc
(
keyÀn
+1);

91 i‡(
r
->
key
 =
NULL
) {

92 
	`‰ìMcRïlyObje˘
(
r
);

93  
NULL
;

95 i‡(
keyÀn
 > 0)

97 
	`mem˝y
(
r
->
key
,key,
keyÀn
);

98 
r
->
key
[
keyÀn
] = '\0';

99 
r
->
keyÀn
 = keylen;

102 
buf
 = 
	`mÆloc
(
Àn
+1);

103 i‡(
buf
 =
NULL
) {

104 
	`‰ìMcRïlyObje˘
(
r
);

105  
NULL
;

107 i‡(
Àn
 > 0)

109 
	`mem˝y
(
buf
,
°r
,
Àn
);

110 
buf
[
Àn
] = '\0';

111 
r
->
°r
 = 
buf
;

112 
r
->
Àn
 =Üen;

114 
r
->
Êags
 = flags;

115 
r
->
vîsi⁄
 = version;

117  
r
;

118 
	}
}

120 *
	$¸óãAºayObje˘
(
size_t
 
ñemíts
, **
ñemít
) {

121 
mcRïly
 *
r
;

123 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_ARRAY
);

124 i‡(
r
 =
NULL
)

125  
NULL
;

127 
r
->
ñemíts
 =Élements;

128 
r
->
ñemít
 = (
mcRïly
 **)element;

130  
r
;

131 
	}
}

133 *
	$¸óãI¡egîObje˘
(
vÆue
) {

134 
mcRïly
 *
r
;

136 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_INTEGER
);

137 i‡(
r
 =
NULL
)

138  
NULL
;

140 
r
->
öãgî
 = 
vÆue
;

142  
r
;

143 
	}
}

145 *
	$¸óãNûObje˘
() {

146 
mcRïly
 *
r
;

148 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_NIL
);

149 i‡(
r
 =
NULL
)

150  
NULL
;

152  
r
;

153 
	}
}

155 
	$__memˇchedSëEº‹
(
mcC⁄ãxt
 *
c
, 
ty≥
, c⁄° *
°r
) {

156 
size_t
 
Àn
;

158 
c
->
îr
 = 
ty≥
;

159 i‡(
°r
 !
NULL
) {

160 
Àn
 = 
	`°æí
(
°r
);

161 
Àn
 =Üí < ((
c
->
îr°r
)-1) ?Üen : ((c->errstr)-1);

162 
	`mem˝y
(
c
->
îr°r
,
°r
,
Àn
);

163 
c
->
îr°r
[
Àn
] = '\0';

166 
	`as£π
(
ty≥
 =
MC_ERR_IO
);

169 
	}
}

181 
	$memˇchedBuf„rWrôe
(
mcC⁄ãxt
 *
c
, *
d⁄e
) {

182 
nwrôãn
;

185 i‡(
c
->
îr
)

186  
MC_ERR
;

188 i‡(
	`sd¶í
(
c
->
obuf
) > 0) {

189 
nwrôãn
 = 
	`wrôe
(
c
->
fd
,c->
obuf
,
	`sd¶í
(c->obuf));

190 i‡(
nwrôãn
 == -1) {

191 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
MC_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

194 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_IO
,
NULL
);

195  
MC_ERR
;

197 } i‡(
nwrôãn
 > 0) {

198 i‡(
nwrôãn
 =(sig√d)
	`sd¶í
(
c
->
obuf
)) {

199 
	`sds‰ì
(
c
->
obuf
);

200 
c
->
obuf
 = 
	`sd£m±y
();

202 
	`sd§™ge
(
c
->
obuf
,
nwrôãn
,-1);

206 i‡(
d⁄e
 !
NULL
Ë*d⁄ê(
	`sd¶í
(
c
->
obuf
) == 0);

207  
MC_OK
;

208 
	}
}

212 
	$memˇchedGëRïlyFromRódî
(
mcC⁄ãxt
 *
c
, **
ª∂y
) {

213 i‡(
	`memˇchedRódîGëRïly
(
c
->
ªadî
,
ª∂y
Ë=
MC_ERR
) {

214 
	`__memˇchedSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

215  
MC_ERR
;

217  
MC_OK
;

218 
	}
}

220 
	$memˇchedGëRïly
(
mcC⁄ãxt
 *
c
, **
ª∂y
) {

221 
wd⁄e
 = 0;

222 *
aux
 = 
NULL
;

225 i‡(
	`memˇchedGëRïlyFromRódî
(
c
,&
aux
Ë=
MC_ERR
)

226  
MC_ERR
;

229 i‡(
aux
 =
NULL
 && 
c
->
Êags
 & 
MC_BLOCK
) {

232 i‡(
	`memˇchedBuf„rWrôe
(
c
,&
wd⁄e
Ë=
MC_ERR
)

233  
MC_ERR
;

234 } !
wd⁄e
);

238 i‡(
	`memˇchedBuf„rRód
(
c
Ë=
MC_ERR
)

239  
MC_ERR
;

240 i‡(
	`memˇchedGëRïlyFromRódî
(
c
,&
aux
Ë=
MC_ERR
)

241  
MC_ERR
;

242 } 
aux
 =
NULL
);

246 i‡(
ª∂y
 !
NULL
Ë*ª∂y = 
aux
;

247  
MC_OK
;

248 
	}
}

250 
mcRódî
 *
	$memˇchedRódîCª©e
() {

251  
	`memˇchedRódîCª©eWôhFun˘i⁄s
(&
deÁu…Fun˘i⁄s
);

252 
	}
}

254 
mcC⁄ãxt
 *
	$memˇchedC⁄ãxtInô
() {

255 
mcC⁄ãxt
 *
c
;

257 
c
 = 
	`ˇŒoc
(1,(
mcC⁄ãxt
));

258 i‡(
c
 =
NULL
)

259  
NULL
;

261 
c
->
îr
 = 0;

262 
c
->
îr°r
[0] = '\0';

263 
c
->
obuf
 = 
	`sd£m±y
();

264 
c
->
ªadî
 = 
	`memˇchedRódîCª©e
();

265 
c
->
t˝
.
ho°
 = 
NULL
;

266 
c
->
t˝
.
sour˚_addr
 = 
NULL
;

267 
c
->
unix_sock
.
∑th
 = 
NULL
;

268 
c
->
timeout
 = 
NULL
;

270 i‡(
c
->
obuf
 =
NULL
 || c->
ªadî
 == NULL) {

271 
	`memˇchedFªe
(
c
);

272  
NULL
;

275  
c
;

276 
	}
}

278 
	$memˇchedFªe
(
mcC⁄ãxt
 *
c
) {

279 i‡(
c
 =
NULL
)

281 i‡(
c
->
fd
 > 0)

282 
	`˛o£
(
c
->
fd
);

283 i‡(
c
->
obuf
 !
NULL
)

284 
	`sds‰ì
(
c
->
obuf
);

285 i‡(
c
->
ªadî
 !
NULL
)

286 
	`memˇchedRódîFªe
(
c
->
ªadî
);

287 i‡(
c
->
t˝
.
ho°
)

288 
	`‰ì
(
c
->
t˝
.
ho°
);

289 i‡(
c
->
t˝
.
sour˚_addr
)

290 
	`‰ì
(
c
->
t˝
.
sour˚_addr
);

291 i‡(
c
->
unix_sock
.
∑th
)

292 
	`‰ì
(
c
->
unix_sock
.
∑th
);

293 i‡(
c
->
timeout
)

294 
	`‰ì
(
c
->
timeout
);

295 
	`‰ì
(
c
);

296 
	}
}

303 
	$memˇchedBuf„rRód
(
mcC⁄ãxt
 *
c
) {

304 
buf
[1024*16];

305 
ƒód
;

308 i‡(
c
->
îr
)

309  
MC_ERR
;

311 
ƒód
 = 
	`ªad
(
c
->
fd
,
buf
,(buf));

312 i‡(
ƒód
 == -1) {

313 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
MC_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

316 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_IO
,
NULL
);

317  
MC_ERR
;

319 } i‡(
ƒód
 == 0) {

320 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_EOF
,"Server closedÅhe connection");

321  
MC_ERR
;

323 i‡(
	`memˇchedRódîFìd
(
c
->
ªadî
,
buf
,
ƒód
Ë!
MC_OK
) {

324 
	`__memˇchedSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

325  
MC_ERR
;

328  
MC_OK
;

329 
	}
}

331 
	$gëReque°Ty≥FromSåög
(*
°r
, 
size_t
 
Àn
)

333 i‡(
°r
 =
NULL
 || 
Àn
 == 0)

336 i‡(
Àn
 == 3) {

337 i‡(!
	`°∫ˇ£cmp
(
°r
,"set",3) ||

338 !
	`°∫ˇ£cmp
(
°r
,"add",3)) {

339  
REQ_TYPE_STORAGE
;

340 } i‡(!
	`°∫ˇ£cmp
(
°r
,"cas",3)) {

341  
REQ_TYPE_CAS
;

342 } i‡(!
	`°∫ˇ£cmp
(
°r
,"get",3)) {

343  
REQ_TYPE_RETRIEVAL
;

347 } i‡(
Àn
 == 4) {

348 i‡(!
	`°∫ˇ£cmp
(
°r
,"gets",4)) {

349  
REQ_TYPE_RETRIEVAL
;

350 } i‡(!
	`°∫ˇ£cmp
(
°r
,"incr",4) ||

351 !
	`°∫ˇ£cmp
(
°r
,"decr",4)) {

352  
REQ_TYPE_ARITHMETIC
;

356 } i‡(
Àn
 == 6) {

357 i‡(!
	`°∫ˇ£cmp
(
°r
,"append",6)) {

358  
REQ_TYPE_STORAGE
;

359 } i‡(!
	`°∫ˇ£cmp
(
°r
,"delete",6)) {

360  
REQ_TYPE_DELETE
;

364 } i‡(
Àn
 == 7) {

365 i‡(!
	`°∫ˇ£cmp
(
°r
,"replace",7) ||

366 !
	`°∫ˇ£cmp
(
°r
,"prepend",7)) {

367  
REQ_TYPE_STORAGE
;

374 
	}
}

376 
	#ARGUMENTLEN
(
_¨gty≥
,
_¨gv
,
_¨gvÀn
,
_idx
) \

377 (
_¨gty≥
==0?
	`sd¶í
(
_¨gv
[
_idx
]):(
_¨gvÀn
==
NULL
?
	`°æí
(_¨gv[_idx]):_¨gvÀn[_idx]))

	)

384 
	$checkCmdVÆidAndGëTŸÆLí
(
cmdty≥
, 
¨gty≥
, 
¨gc
, **
¨gv
, 
size_t
 *
¨gvÀn
)

386 
size_t
 
Àn
;

387 
tŸÀn
, 
j
;

389 
cmdty≥
) {

390 
REQ_TYPE_STORAGE
:

391 i‡(
¨gc
 != 6 &&árgc != 7) {

394 i‡(
¨gc
 =7 && (
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,5) != 7 ||

395 
	`°∫ˇ£cmp
(
¨gv
[5],"noreply",7))) {

399 
tŸÀn
 = 0;

400 
j
 = 0; j < 
¨gc
-1; j ++) {

401 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

403 
tŸÀn
 +2 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

405 
REQ_TYPE_CAS
:

406 i‡(
¨gc
 != 7 &&árgc != 8) {

409 i‡(
¨gc
 =8 && (
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,6) != 7 ||

410 
	`°∫ˇ£cmp
(
¨gv
[6],"noreply",7))) {

414 
tŸÀn
 = 0;

415 
j
 = 0; j < 
¨gc
-1; j ++) {

416 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

418 
tŸÀn
 +2 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

420 
REQ_TYPE_ARITHMETIC
:

421 i‡(
¨gc
 != 3) {

424 
tŸÀn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,0) + 1 +

425 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,1) + 1 +

426 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,2) + 2;

428 
REQ_TYPE_RETRIEVAL
:

429 i‡(
¨gc
 <= 1) {

433 
tŸÀn
 = 0;

434 
j
 = 0; j < 
¨gc
-1; j ++) {

435 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

437 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

439 
REQ_TYPE_DELETE
:

440 i‡(
¨gc
 != 2 &&árgc != 3) {

444 
tŸÀn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,0) + 1 +

445 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,1);

446 i‡(
¨gc
 == 3) {

447 i‡(
	`°∫ˇ£cmp
(
¨gv
[2],"noreply",7)) {

450 
tŸÀn
 +1 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,2);

452 
tŸÀn
 += 2;

455 
tŸÀn
 = -1;

459  
tŸÀn
;

460 
	}
}

463 
	$gíîicMemˇchedComm™d
(
cmdty≥
, *
cmd
, 
¨gty≥
, 
¨gc
, **
¨gv
, 
size_t
 *
¨gvÀn
)

465 
j
;

466 
size_t
 
Àn
;

467 
pos
 = 0;

469 
cmdty≥
) {

470 
REQ_TYPE_STORAGE
:

471 
REQ_TYPE_CAS
:

472 
j
 = 0; j < 
¨gc
-1; j ++) {

473 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
);

474 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

475 
pos
 +()
Àn
;

476 
cmd
[
pos
++] = ' ';

478 
cmd
[
pos
++] = '\r';

479 
cmd
[
pos
++] = '\n';

480 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1);

481 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
¨gc
-1],
Àn
);

482 
pos
 +()
Àn
;

483 
cmd
[
pos
++] = '\r';

484 
cmd
[
pos
++] = '\n';

486 
REQ_TYPE_ARITHMETIC
:

487 
REQ_TYPE_RETRIEVAL
:

488 
REQ_TYPE_DELETE
:

489 
j
 = 0; j < 
¨gc
-1; j ++) {

490 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
);

491 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

492 
pos
 +
Àn
;

493 
cmd
[
pos
++] = ' ';

495 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1);

496 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
¨gc
-1],
Àn
);

497 
pos
 +()
Àn
;

498 
cmd
[
pos
++] = '\r';

499 
cmd
[
pos
++] = '\n';

502 
pos
 = -1;

506  
pos
;

507 
	}
}

512 
	$memˇchedF‹m©Comm™dSdsArgv
(**
èrgë
, 
¨gc
, c⁄° 
sds
 *
¨gv
) {

513 *
cmd
 = 
NULL
;

514 
pos
;

515 
tŸÀn
;

516 
ty≥
;

519 i‡(
èrgë
 =
NULL
 || 
¨gc
 < 1)

522 
ty≥
 = 
	`gëReque°Ty≥FromSåög
(
¨gv
[0], 
	`sd¶í
(argv[0]));

523 i‡(
ty≥
 < 0)

524 
f‹m©_îr
;

526 
tŸÀn
 = 
	`checkCmdVÆidAndGëTŸÆLí
(
ty≥
, 0, 
¨gc
, 
¨gv
, 
NULL
);

527 i‡(
tŸÀn
 < 0) {

528 
f‹m©_îr
;

532 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

533 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

535 
pos
 = 
	`gíîicMemˇchedComm™d
(
ty≥
, 
cmd
, 0, 
¨gc
, 
¨gv
, 
NULL
);

536 i‡(
pos
 < 0Ë
f‹m©_îr
;

538 
	`as£π
(
pos
 =
tŸÀn
);

539 
cmd
[
pos
] = '\0';

541 *
èrgë
 = 
cmd
;

542  
tŸÀn
;

544 
f‹m©_îr
:

545 i‡(
cmd
Ë
	`‰ì
(cmd);

548 
mem‹y_îr
:

550 
	}
}

552 
	$memˇchedvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

554 c⁄° *
c
 = 
f‹m©
;

555 *
cmd
 = 
NULL
;

556 
pos
;

557 
sds
 
cuørg
, 
√w¨g
;

558 
touched
 = 0;

559 **
cuørgv
 = 
NULL
, **
√w¨gv
 = NULL;

560 
¨gc
 = 0;

561 
tŸÀn
;

562 
îr‹_ty≥
 = 0;

563 
j
;

566 i‡(
èrgë
 =
NULL
)

570 
cuørg
 = 
	`sd£m±y
();

571 i‡(
cuørg
 =
NULL
)

574 *
c
 != '\0') {

575 i‡(*
c
 != '%' || c[1] == '\0') {

576 i‡(*
c
 == ' ') {

577 i‡(
touched
) {

578 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

579 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

580 
cuørgv
 = 
√w¨gv
;

581 
cuørgv
[
¨gc
++] = 
cuørg
;

584 
cuørg
 = 
	`sd£m±y
();

585 i‡(
cuørg
 =
NULL
Ë
mem‹y_îr
;

586 
touched
 = 0;

589 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
c
,1);

590 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

591 
cuørg
 = 
√w¨g
;

592 
touched
 = 1;

595 *
¨g
;

596 
size_t
 
size
;

599 
√w¨g
 = 
cuørg
;

601 
c
[1]) {

603 
¨g
 = 
	`va_¨g
(
≠
,*);

604 
size
 = 
	`°æí
(
¨g
);

605 i‡(
size
 > 0)

606 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

609 
¨g
 = 
	`va_¨g
(
≠
,*);

610 
size
 = 
	`va_¨g
(
≠
,
size_t
);

611 i‡(
size
 > 0)

612 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

615 
√w¨g
 = 
	`sdsˇt
(
cuørg
,"%");

620 c⁄° 
ötfmts
[] = "diouxX";

621 c⁄° 
Êags
[] = "#0-+ ";

622 
_f‹m©
[16];

623 c⁄° *
_p
 = 
c
+1;

624 
size_t
 
_l
 = 0;

625 
va_li°
 
_˝y
;

628 *
_p
 !'\0' && 
	`°rchr
(
Êags
,*_pË!
NULL
) _p++;

631 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

634 i‡(*
_p
 == '.') {

635 
_p
++;

636 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

640 
	`va_c›y
(
_˝y
,
≠
);

643 i‡(
	`°rchr
(
ötfmts
,*
_p
Ë!
NULL
) {

644 
	`va_¨g
(
≠
,);

645 
fmt_vÆid
;

649 i‡(
	`°rchr
("eEfFgGaA",*
_p
Ë!
NULL
) {

650 
	`va_¨g
(
≠
,);

651 
fmt_vÆid
;

655 i‡(
_p
[0] == 'h' && _p[1] == 'h') {

656 
_p
 += 2;

657 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

658 
	`va_¨g
(
≠
,);

659 
fmt_vÆid
;

661 
fmt_övÆid
;

665 i‡(
_p
[0] == 'h') {

666 
_p
 += 1;

667 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

668 
	`va_¨g
(
≠
,);

669 
fmt_vÆid
;

671 
fmt_övÆid
;

675 i‡(
_p
[0] == 'l' && _p[1] == 'l') {

676 
_p
 += 2;

677 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

678 
	`va_¨g
(
≠
,);

679 
fmt_vÆid
;

681 
fmt_övÆid
;

685 i‡(
_p
[0] == 'l') {

686 
_p
 += 1;

687 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

688 
	`va_¨g
(
≠
,);

689 
fmt_vÆid
;

691 
fmt_övÆid
;

694 
fmt_övÆid
:

695 
	`va_íd
(
_˝y
);

696 
f‹m©_îr
;

698 
fmt_vÆid
:

699 
_l
 = (
_p
+1)-
c
;

700 i‡(
_l
 < (
_f‹m©
)-2) {

701 
	`mem˝y
(
_f‹m©
,
c
,
_l
);

702 
_f‹m©
[
_l
] = '\0';

703 
√w¨g
 = 
	`sdsˇtv¥ötf
(
cuørg
,
_f‹m©
,
_˝y
);

707 
c
 = 
_p
-1;

710 
	`va_íd
(
_˝y
);

715 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

716 
cuørg
 = 
√w¨g
;

718 
touched
 = 1;

719 
c
++;

721 
c
++;

725 i‡(
touched
) {

726 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

727 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

728 
cuørgv
 = 
√w¨gv
;

729 
cuørgv
[
¨gc
++] = 
cuørg
;

731 
	`sds‰ì
(
cuørg
);

735 
cuørg
 = 
NULL
;

737 
tŸÀn
 = 
	`memˇchedF‹m©Comm™dSdsArgv
(&
cmd
, 
¨gc
,
cuørgv
);

738 i‡(
tŸÀn
 < 0) {

739 
îr‹_ty≥
 = 
tŸÀn
;

740 
˛ónup
;

743 
	`‰ì
(
cuørgv
);

744 *
èrgë
 = 
cmd
;

745  
tŸÀn
;

747 
f‹m©_îr
:

748 
îr‹_ty≥
 = -2;

749 
˛ónup
;

751 
mem‹y_îr
:

752 
îr‹_ty≥
 = -1;

753 
˛ónup
;

755 
˛ónup
:

756 i‡(
cuørgv
) {

757 
¨gc
--)

758 
	`sds‰ì
(
cuørgv
[
¨gc
]);

759 
	`‰ì
(
cuørgv
);

762 
	`sds‰ì
(
cuørg
);

766 i‡(
cmd
 !
NULL
)

767 
	`‰ì
(
cmd
);

769  
îr‹_ty≥
;

770 
	}
}

784 
	$memˇchedF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...) {

785 
va_li°
 
≠
;

786 
Àn
;

787 
	`va_°¨t
(
≠
,
f‹m©
);

788 
Àn
 = 
	`memˇchedvF‹m©Comm™d
(
èrgë
,
f‹m©
,
≠
);

789 
	`va_íd
(
≠
);

793 i‡(
Àn
 < 0)

794 
Àn
 = -1;

796  
Àn
;

797 
	}
}

804 
	$memˇchedF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

805 *
cmd
 = 
NULL
;

806 
pos
;

807 
tŸÀn
;

808 
ty≥
;

811 i‡(
èrgë
 =
NULL
 || 
¨gc
 < 1)

814 
ty≥
 = 
	`gëReque°Ty≥FromSåög
(
¨gv
[0], 
¨gvÀn
==
NULL
?
	`°æí
(argv[0]):argvlen[0]);

815 i‡(
ty≥
 < 0) {

816 
f‹m©_îr
;

819 
tŸÀn
 = 
	`checkCmdVÆidAndGëTŸÆLí
(
ty≥
, 1, 
¨gc
, 
¨gv
, 
¨gvÀn
);

820 i‡(
tŸÀn
 < 0) {

821 
f‹m©_îr
;

825 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

826 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

828 
pos
 = 
	`gíîicMemˇchedComm™d
(
ty≥
, 
cmd
, 1, 
¨gc
, 
¨gv
, 
¨gvÀn
);

829 i‡(
pos
 < 0) {

830 
f‹m©_îr
;

833 
	`as£π
(
pos
 =
tŸÀn
);

834 
cmd
[
pos
] = '\0';

836 *
èrgë
 = 
cmd
;

837  
tŸÀn
;

839 
f‹m©_îr
:

840 i‡(
cmd
Ë
	`‰ì
(cmd);

843 
mem‹y_îr
:

845 
	}
}

	@dep/himemcached-0.1.0/himemcached.h

1 #i‚de‡
_HIMEMCACHED_H_


2 
	#_HIMEMCACHED_H_


	)

4 
	~"him¸ód.h
"

5 
	~"himcdï/sds.h
"

7 
	#HIMC_MAJOR
 0

	)

8 
	#HIMC_MINOR
 13

	)

9 
	#HIMC_PATCH
 1

	)

13 
	#MC_BLOCK
 0x1

	)

17 
	#MC_CONNECTED
 0x2

	)

23 
	#MC_DISCONNECTING
 0x4

	)

27 
	#MC_FREEING
 0x8

	)

30 
	#MC_IN_CALLBACK
 0x10

	)

33 
	#MC_SUBSCRIBED
 0x20

	)

36 
	#MC_MONITORING
 0x40

	)

39 
	#MC_REUSEADDR
 0x80

	)

41 
	#MC_KEEPALIVE_INTERVAL
 15

	)

45 
	#MC_CONNECT_RETRIES
 10

	)

48 
	smcRïly
 {

49 
	mty≥
;

50 
	möãgî
;

51 
	mkeyÀn
;

52 *
	mkey
;

53 
	mÀn
;

54 *
	m°r
;

55 
	mÊags
;

56 
	mvîsi⁄
;

57 
size_t
 
	mñemíts
;

58 
mcRïly
 **
	mñemít
;

59 } 
	tmcRïly
;

61 
mcRódî
 *
memˇchedRódîCª©e
();

64 
‰ìMcRïlyObje˘
(*
ª∂y
);

66 
	emcC⁄√˘i⁄Ty≥
 {

67 
	mMC_CONN_TCP
,

68 
	mMC_CONN_UNIX
,

72 
	smcC⁄ãxt
 {

73 
	mîr
;

74 
	mîr°r
[128];

75 
	mfd
;

76 
	mÊags
;

77 *
	mobuf
;

78 
mcRódî
 *
	mªadî
;

80 
mcC⁄√˘i⁄Ty≥
 
	mc⁄√˘i⁄_ty≥
;

81 
timevÆ
 *
	mtimeout
;

84 *
	mho°
;

85 *
	msour˚_addr
;

86 
	mp‹t
;

87 } 
	mt˝
;

90 *
	m∑th
;

91 } 
	munix_sock
;

92 } 
	tmcC⁄ãxt
;

94 
memˇchedBuf„rWrôe
(
mcC⁄ãxt
 *
c
, *
d⁄e
);

95 
memˇchedBuf„rRód
(
mcC⁄ãxt
 *
c
);

97 
memˇchedGëRïlyFromRódî
(
mcC⁄ãxt
 *
c
, **
ª∂y
);

98 
memˇchedGëRïly
(
mcC⁄ãxt
 *
c
, **
ª∂y
);

100 
mcC⁄ãxt
 *
memˇchedC⁄ãxtInô
();

101 
memˇchedFªe
(
mcC⁄ãxt
 *
c
) ;

103 
memˇchedF‹m©Comm™dSdsArgv
(**
èrgë
, 
¨gc
, c⁄° 
sds
 *
¨gv
);

104 
memˇchedvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

105 
memˇchedF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...);

106 
memˇchedF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

	@dep/himemcached-0.1.0/himemcached.h

1 #i‚de‡
_HIMEMCACHED_H_


2 
	#_HIMEMCACHED_H_


	)

4 
	~"him¸ód.h
"

5 
	~"himcdï/sds.h
"

7 
	#HIMC_MAJOR
 0

	)

8 
	#HIMC_MINOR
 13

	)

9 
	#HIMC_PATCH
 1

	)

13 
	#MC_BLOCK
 0x1

	)

17 
	#MC_CONNECTED
 0x2

	)

23 
	#MC_DISCONNECTING
 0x4

	)

27 
	#MC_FREEING
 0x8

	)

30 
	#MC_IN_CALLBACK
 0x10

	)

33 
	#MC_SUBSCRIBED
 0x20

	)

36 
	#MC_MONITORING
 0x40

	)

39 
	#MC_REUSEADDR
 0x80

	)

41 
	#MC_KEEPALIVE_INTERVAL
 15

	)

45 
	#MC_CONNECT_RETRIES
 10

	)

48 
	smcRïly
 {

49 
	mty≥
;

50 
	möãgî
;

51 
	mkeyÀn
;

52 *
	mkey
;

53 
	mÀn
;

54 *
	m°r
;

55 
	mÊags
;

56 
	mvîsi⁄
;

57 
size_t
 
	mñemíts
;

58 
mcRïly
 **
	mñemít
;

59 } 
	tmcRïly
;

61 
mcRódî
 *
memˇchedRódîCª©e
();

64 
‰ìMcRïlyObje˘
(*
ª∂y
);

66 
	emcC⁄√˘i⁄Ty≥
 {

67 
	mMC_CONN_TCP
,

68 
	mMC_CONN_UNIX
,

72 
	smcC⁄ãxt
 {

73 
	mîr
;

74 
	mîr°r
[128];

75 
	mfd
;

76 
	mÊags
;

77 *
	mobuf
;

78 
mcRódî
 *
	mªadî
;

80 
mcC⁄√˘i⁄Ty≥
 
	mc⁄√˘i⁄_ty≥
;

81 
timevÆ
 *
	mtimeout
;

84 *
	mho°
;

85 *
	msour˚_addr
;

86 
	mp‹t
;

87 } 
	mt˝
;

90 *
	m∑th
;

91 } 
	munix_sock
;

92 } 
	tmcC⁄ãxt
;

94 
memˇchedBuf„rWrôe
(
mcC⁄ãxt
 *
c
, *
d⁄e
);

95 
memˇchedBuf„rRód
(
mcC⁄ãxt
 *
c
);

97 
memˇchedGëRïlyFromRódî
(
mcC⁄ãxt
 *
c
, **
ª∂y
);

98 
memˇchedGëRïly
(
mcC⁄ãxt
 *
c
, **
ª∂y
);

100 
mcC⁄ãxt
 *
memˇchedC⁄ãxtInô
();

101 
memˇchedFªe
(
mcC⁄ãxt
 *
c
) ;

103 
memˇchedF‹m©Comm™dSdsArgv
(**
èrgë
, 
¨gc
, c⁄° 
sds
 *
¨gv
);

104 
memˇchedvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

105 
memˇchedF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...);

106 
memˇchedF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

	@dep/hiredis-0.13.3/adapters/ae.h

31 #i‚de‡
__HIREDIS_AE_H__


32 
	#__HIREDIS_AE_H__


	)

33 
	~<sys/ty≥s.h
>

34 
	~<´.h
>

35 
	~"../húedis.h
"

36 
	~"../async.h
"

38 
	sªdisAeEvíts
 {

39 
ªdisAsyncC⁄ãxt
 *
	mc⁄ãxt
;

40 
´EvítLo›
 *
	mlo›
;

41 
	mfd
;

42 
	mªadög
, 
	mwrôög
;

43 } 
	tªdisAeEvíts
;

45 
	$ªdisAeRódEvít
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

46 (()
ñ
); (()
fd
); (()
mask
);

48 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

49 
	`ªdisAsyncH™dÀRód
(
e
->
c⁄ãxt
);

50 
	}
}

52 
	$ªdisAeWrôeEvít
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

53 (()
ñ
); (()
fd
); (()
mask
);

55 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

56 
	`ªdisAsyncH™dÀWrôe
(
e
->
c⁄ãxt
);

57 
	}
}

59 
	$ªdisAeAddRód
(*
¥ivd©a
) {

60 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

61 
´EvítLo›
 *
lo›
 = 
e
->loop;

62 i‡(!
e
->
ªadög
) {

63 
e
->
ªadög
 = 1;

64 
	`´Cª©eFûeEvít
(
lo›
,
e
->
fd
,
AE_READABLE
,
ªdisAeRódEvít
,e);

66 
	}
}

68 
	$ªdisAeDñRód
(*
¥ivd©a
) {

69 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

70 
´EvítLo›
 *
lo›
 = 
e
->loop;

71 i‡(
e
->
ªadög
) {

72 
e
->
ªadög
 = 0;

73 
	`´DñëeFûeEvít
(
lo›
,
e
->
fd
,
AE_READABLE
);

75 
	}
}

77 
	$ªdisAeAddWrôe
(*
¥ivd©a
) {

78 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

79 
´EvítLo›
 *
lo›
 = 
e
->loop;

80 i‡(!
e
->
wrôög
) {

81 
e
->
wrôög
 = 1;

82 
	`´Cª©eFûeEvít
(
lo›
,
e
->
fd
,
AE_WRITABLE
,
ªdisAeWrôeEvít
,e);

84 
	}
}

86 
	$ªdisAeDñWrôe
(*
¥ivd©a
) {

87 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

88 
´EvítLo›
 *
lo›
 = 
e
->loop;

89 i‡(
e
->
wrôög
) {

90 
e
->
wrôög
 = 0;

91 
	`´DñëeFûeEvít
(
lo›
,
e
->
fd
,
AE_WRITABLE
);

93 
	}
}

95 
	$ªdisAeCÀ™up
(*
¥ivd©a
) {

96 
ªdisAeEvíts
 *
e
 = (ªdisAeEvíts*)
¥ivd©a
;

97 
	`ªdisAeDñRód
(
¥ivd©a
);

98 
	`ªdisAeDñWrôe
(
¥ivd©a
);

99 
	`‰ì
(
e
);

100 
	}
}

102 
	$ªdisAeAâach
(
´EvítLo›
 *
lo›
, 
ªdisAsyncC⁄ãxt
 *
ac
) {

103 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

104 
ªdisAeEvíts
 *
e
;

107 i‡(
ac
->
ev
.
d©a
 !
NULL
)

108  
REDIS_ERR
;

111 
e
 = (
ªdisAeEvíts
*)
	`mÆloc
((*e));

112 
e
->
c⁄ãxt
 = 
ac
;

113 
e
->
lo›
 =Üoop;

114 
e
->
fd
 = 
c
->fd;

115 
e
->
ªadög
 =É->
wrôög
 = 0;

118 
ac
->
ev
.
addRód
 = 
ªdisAeAddRód
;

119 
ac
->
ev
.
dñRód
 = 
ªdisAeDñRód
;

120 
ac
->
ev
.
addWrôe
 = 
ªdisAeAddWrôe
;

121 
ac
->
ev
.
dñWrôe
 = 
ªdisAeDñWrôe
;

122 
ac
->
ev
.
˛ónup
 = 
ªdisAeCÀ™up
;

123 
ac
->
ev
.
d©a
 = 
e
;

125  
REDIS_OK
;

126 
	}
}

	@dep/hiredis-0.13.3/adapters/glib.h

1 #i‚de‡
__HIREDIS_GLIB_H__


2 
	#__HIREDIS_GLIB_H__


	)

4 
	~<glib.h
>

6 
	~"../húedis.h
"

7 
	~"../async.h
"

11 
GSour˚
 
	msour˚
;

12 
ªdisAsyncC⁄ãxt
 *
	mac
;

13 
GPﬁlFD
 
	mpﬁl_fd
;

14 } 
	tRedisSour˚
;

17 
	$ªdis_sour˚_add_ªad
 (
gpoöãr
 
d©a
)

19 
RedisSour˚
 *
sour˚
 = (RedisSour˚ *)
d©a
;

20 
	`g_ªtu∫_if_Áû
(
sour˚
);

21 
sour˚
->
pﬁl_fd
.
evíts
 |
G_IO_IN
;

22 
	`g_maö_c⁄ãxt_wakeup
(
	`g_sour˚_gë_c⁄ãxt
((
GSour˚
 *)
d©a
));

23 
	}
}

26 
	$ªdis_sour˚_dñ_ªad
 (
gpoöãr
 
d©a
)

28 
RedisSour˚
 *
sour˚
 = (RedisSour˚ *)
d©a
;

29 
	`g_ªtu∫_if_Áû
(
sour˚
);

30 
sour˚
->
pﬁl_fd
.
evíts
 &~
G_IO_IN
;

31 
	`g_maö_c⁄ãxt_wakeup
(
	`g_sour˚_gë_c⁄ãxt
((
GSour˚
 *)
d©a
));

32 
	}
}

35 
	$ªdis_sour˚_add_wrôe
 (
gpoöãr
 
d©a
)

37 
RedisSour˚
 *
sour˚
 = (RedisSour˚ *)
d©a
;

38 
	`g_ªtu∫_if_Áû
(
sour˚
);

39 
sour˚
->
pﬁl_fd
.
evíts
 |
G_IO_OUT
;

40 
	`g_maö_c⁄ãxt_wakeup
(
	`g_sour˚_gë_c⁄ãxt
((
GSour˚
 *)
d©a
));

41 
	}
}

44 
	$ªdis_sour˚_dñ_wrôe
 (
gpoöãr
 
d©a
)

46 
RedisSour˚
 *
sour˚
 = (RedisSour˚ *)
d©a
;

47 
	`g_ªtu∫_if_Áû
(
sour˚
);

48 
sour˚
->
pﬁl_fd
.
evíts
 &~
G_IO_OUT
;

49 
	`g_maö_c⁄ãxt_wakeup
(
	`g_sour˚_gë_c⁄ãxt
((
GSour˚
 *)
d©a
));

50 
	}
}

53 
	$ªdis_sour˚_˛ónup
 (
gpoöãr
 
d©a
)

55 
RedisSour˚
 *
sour˚
 = (RedisSour˚ *)
d©a
;

57 
	`g_ªtu∫_if_Áû
(
sour˚
);

59 
	`ªdis_sour˚_dñ_ªad
(
sour˚
);

60 
	`ªdis_sour˚_dñ_wrôe
(
sour˚
);

65 i‡(
sour˚
->
pﬁl_fd
.
fd
 >= 0) {

66 
	`g_sour˚_ªmove_pﬁl
((
GSour˚
 *)
d©a
, &
sour˚
->
pﬁl_fd
);

67 
sour˚
->
pﬁl_fd
.
fd
 = -1;

69 
	}
}

71 
gboﬁón


72 
	$ªdis_sour˚_¥ï¨e
 (
GSour˚
 *
sour˚
,

73 
göt
 *
timeout_
)

75 
RedisSour˚
 *
ªdis
 = (RedisSour˚ *)
sour˚
;

76 *
timeout_
 = -1;

77  !!(
ªdis
->
pﬁl_fd
.
evíts
 &Ñedis->pﬁl_fd.
ªvíts
);

78 
	}
}

80 
gboﬁón


81 
	$ªdis_sour˚_check
 (
GSour˚
 *
sour˚
)

83 
RedisSour˚
 *
ªdis
 = (RedisSour˚ *)
sour˚
;

84  !!(
ªdis
->
pﬁl_fd
.
evíts
 &Ñedis->pﬁl_fd.
ªvíts
);

85 
	}
}

87 
gboﬁón


88 
	$ªdis_sour˚_di•©ch
 (
GSour˚
 *
sour˚
,

89 
GSour˚Func
 
ˇŒback
,

90 
gpoöãr
 
u£r_d©a
)

92 
RedisSour˚
 *
ªdis
 = (RedisSour˚ *)
sour˚
;

94 i‡((
ªdis
->
pﬁl_fd
.
ªvíts
 & 
G_IO_OUT
)) {

95 
	`ªdisAsyncH™dÀWrôe
(
ªdis
->
ac
);

96 
ªdis
->
pﬁl_fd
.
ªvíts
 &~
G_IO_OUT
;

99 i‡((
ªdis
->
pﬁl_fd
.
ªvíts
 & 
G_IO_IN
)) {

100 
	`ªdisAsyncH™dÀRód
(
ªdis
->
ac
);

101 
ªdis
->
pﬁl_fd
.
ªvíts
 &~
G_IO_IN
;

104 i‡(
ˇŒback
) {

105  
	`ˇŒback
(
u£r_d©a
);

108  
TRUE
;

109 
	}
}

112 
	$ªdis_sour˚_föÆize
 (
GSour˚
 *
sour˚
)

114 
RedisSour˚
 *
ªdis
 = (RedisSour˚ *)
sour˚
;

116 i‡(
ªdis
->
pﬁl_fd
.
fd
 >= 0) {

117 
	`g_sour˚_ªmove_pﬁl
(
sour˚
, &
ªdis
->
pﬁl_fd
);

118 
ªdis
->
pﬁl_fd
.
fd
 = -1;

120 
	}
}

122 
GSour˚
 *

123 
	$ªdis_sour˚_√w
 (
ªdisAsyncC⁄ãxt
 *
ac
)

125 
GSour˚Funcs
 
sour˚_funcs
 = {

126 .
¥ï¨e
 = 
ªdis_sour˚_¥ï¨e
,

127 .
check
 = 
ªdis_sour˚_check
,

128 .
di•©ch
 = 
ªdis_sour˚_di•©ch
,

129 .
föÆize
 = 
ªdis_sour˚_föÆize
,

131 
ªdisC⁄ãxt
 *
c
 = &
ac
->c;

132 
RedisSour˚
 *
sour˚
;

134 
	`g_ªtu∫_vÆ_if_Áû
(
ac
 !
NULL
, NULL);

136 
sour˚
 = (
RedisSour˚
 *)
	`g_sour˚_√w
(&
sour˚_funcs
,  *source);

137 
sour˚
->
ac
 =ác;

138 
sour˚
->
pﬁl_fd
.
fd
 = 
c
->fd;

139 
sour˚
->
pﬁl_fd
.
evíts
 = 0;

140 
sour˚
->
pﬁl_fd
.
ªvíts
 = 0;

141 
	`g_sour˚_add_pﬁl
((
GSour˚
 *)
sour˚
, &sour˚->
pﬁl_fd
);

143 
ac
->
ev
.
addRód
 = 
ªdis_sour˚_add_ªad
;

144 
ac
->
ev
.
dñRód
 = 
ªdis_sour˚_dñ_ªad
;

145 
ac
->
ev
.
addWrôe
 = 
ªdis_sour˚_add_wrôe
;

146 
ac
->
ev
.
dñWrôe
 = 
ªdis_sour˚_dñ_wrôe
;

147 
ac
->
ev
.
˛ónup
 = 
ªdis_sour˚_˛ónup
;

148 
ac
->
ev
.
d©a
 = 
sour˚
;

150  (
GSour˚
 *)
sour˚
;

151 
	}
}

	@dep/hiredis-0.13.3/adapters/ivykis.h

1 #i‚de‡
__HIREDIS_IVYKIS_H__


2 
	#__HIREDIS_IVYKIS_H__


	)

3 
	~<iv.h
>

4 
	~"../húedis.h
"

5 
	~"../async.h
"

7 
	sªdisIvykisEvíts
 {

8 
ªdisAsyncC⁄ãxt
 *
	mc⁄ãxt
;

9 
iv_fd
 
	mfd
;

10 } 
	tªdisIvykisEvíts
;

12 
	$ªdisIvykisRódEvít
(*
¨g
) {

13 
ªdisAsyncC⁄ãxt
 *
c⁄ãxt
 = (ªdisAsyncC⁄ãxà*)
¨g
;

14 
	`ªdisAsyncH™dÀRód
(
c⁄ãxt
);

15 
	}
}

17 
	$ªdisIvykisWrôeEvít
(*
¨g
) {

18 
ªdisAsyncC⁄ãxt
 *
c⁄ãxt
 = (ªdisAsyncC⁄ãxà*)
¨g
;

19 
	`ªdisAsyncH™dÀWrôe
(
c⁄ãxt
);

20 
	}
}

22 
	$ªdisIvykisAddRód
(*
¥ivd©a
) {

23 
ªdisIvykisEvíts
 *
e
 = (ªdisIvykisEvíts*)
¥ivd©a
;

24 
	`iv_fd_£t_h™dÀr_ö
(&
e
->
fd
, 
ªdisIvykisRódEvít
);

25 
	}
}

27 
	$ªdisIvykisDñRód
(*
¥ivd©a
) {

28 
ªdisIvykisEvíts
 *
e
 = (ªdisIvykisEvíts*)
¥ivd©a
;

29 
	`iv_fd_£t_h™dÀr_ö
(&
e
->
fd
, 
NULL
);

30 
	}
}

32 
	$ªdisIvykisAddWrôe
(*
¥ivd©a
) {

33 
ªdisIvykisEvíts
 *
e
 = (ªdisIvykisEvíts*)
¥ivd©a
;

34 
	`iv_fd_£t_h™dÀr_out
(&
e
->
fd
, 
ªdisIvykisWrôeEvít
);

35 
	}
}

37 
	$ªdisIvykisDñWrôe
(*
¥ivd©a
) {

38 
ªdisIvykisEvíts
 *
e
 = (ªdisIvykisEvíts*)
¥ivd©a
;

39 
	`iv_fd_£t_h™dÀr_out
(&
e
->
fd
, 
NULL
);

40 
	}
}

42 
	$ªdisIvykisCÀ™up
(*
¥ivd©a
) {

43 
ªdisIvykisEvíts
 *
e
 = (ªdisIvykisEvíts*)
¥ivd©a
;

45 
	`iv_fd_uƒegi°î
(&
e
->
fd
);

46 
	`‰ì
(
e
);

47 
	}
}

49 
	$ªdisIvykisAâach
(
ªdisAsyncC⁄ãxt
 *
ac
) {

50 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

51 
ªdisIvykisEvíts
 *
e
;

54 i‡(
ac
->
ev
.
d©a
 !
NULL
)

55  
REDIS_ERR
;

58 
e
 = (
ªdisIvykisEvíts
*)
	`mÆloc
((*e));

59 
e
->
c⁄ãxt
 = 
ac
;

62 
ac
->
ev
.
addRód
 = 
ªdisIvykisAddRód
;

63 
ac
->
ev
.
dñRód
 = 
ªdisIvykisDñRód
;

64 
ac
->
ev
.
addWrôe
 = 
ªdisIvykisAddWrôe
;

65 
ac
->
ev
.
dñWrôe
 = 
ªdisIvykisDñWrôe
;

66 
ac
->
ev
.
˛ónup
 = 
ªdisIvykisCÀ™up
;

67 
ac
->
ev
.
d©a
 = 
e
;

70 
	`IV_FD_INIT
(&
e
->
fd
);

71 
e
->
fd
.fd = 
c
->fd;

72 
e
->
fd
.
h™dÀr_ö
 = 
ªdisIvykisRódEvít
;

73 
e
->
fd
.
h™dÀr_out
 = 
ªdisIvykisWrôeEvít
;

74 
e
->
fd
.
h™dÀr_îr
 = 
NULL
;

75 
e
->
fd
.
cookõ
 =É->
c⁄ãxt
;

77 
	`iv_fd_ªgi°î
(&
e
->
fd
);

79  
REDIS_OK
;

80 
	}
}

	@dep/hiredis-0.13.3/adapters/libev.h

31 #i‚de‡
__HIREDIS_LIBEV_H__


32 
	#__HIREDIS_LIBEV_H__


	)

33 
	~<°dlib.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<ev.h
>

36 
	~"../húedis.h
"

37 
	~"../async.h
"

39 
	sªdisLibevEvíts
 {

40 
ªdisAsyncC⁄ãxt
 *
	mc⁄ãxt
;

41 
ev_lo›
 *
	mlo›
;

42 
	mªadög
, 
	mwrôög
;

43 
ev_io
 
	mªv
, 
	mwev
;

44 } 
	tªdisLibevEvíts
;

46 
	$ªdisLibevRódEvít
(
EV_P_
 
ev_io
 *
w©chî
, 
ªvíts
) {

47 #i‡
EV_MULTIPLICITY


48 (()
lo›
);

50 (()
ªvíts
);

52 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
w©chî
->
d©a
;

53 
	`ªdisAsyncH™dÀRód
(
e
->
c⁄ãxt
);

54 
	}
}

56 
	$ªdisLibevWrôeEvít
(
EV_P_
 
ev_io
 *
w©chî
, 
ªvíts
) {

57 #i‡
EV_MULTIPLICITY


58 (()
lo›
);

60 (()
ªvíts
);

62 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
w©chî
->
d©a
;

63 
	`ªdisAsyncH™dÀWrôe
(
e
->
c⁄ãxt
);

64 
	}
}

66 
	$ªdisLibevAddRód
(*
¥ivd©a
) {

67 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
¥ivd©a
;

68 
ev_lo›
 *
lo›
 = 
e
->loop;

69 (()
lo›
);

70 i‡(!
e
->
ªadög
) {

71 
e
->
ªadög
 = 1;

72 
	`ev_io_°¨t
(
EV_A_
 &
e
->
ªv
);

74 
	}
}

76 
	$ªdisLibevDñRód
(*
¥ivd©a
) {

77 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
¥ivd©a
;

78 
ev_lo›
 *
lo›
 = 
e
->loop;

79 (()
lo›
);

80 i‡(
e
->
ªadög
) {

81 
e
->
ªadög
 = 0;

82 
	`ev_io_°›
(
EV_A_
 &
e
->
ªv
);

84 
	}
}

86 
	$ªdisLibevAddWrôe
(*
¥ivd©a
) {

87 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
¥ivd©a
;

88 
ev_lo›
 *
lo›
 = 
e
->loop;

89 (()
lo›
);

90 i‡(!
e
->
wrôög
) {

91 
e
->
wrôög
 = 1;

92 
	`ev_io_°¨t
(
EV_A_
 &
e
->
wev
);

94 
	}
}

96 
	$ªdisLibevDñWrôe
(*
¥ivd©a
) {

97 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
¥ivd©a
;

98 
ev_lo›
 *
lo›
 = 
e
->loop;

99 (()
lo›
);

100 i‡(
e
->
wrôög
) {

101 
e
->
wrôög
 = 0;

102 
	`ev_io_°›
(
EV_A_
 &
e
->
wev
);

104 
	}
}

106 
	$ªdisLibevCÀ™up
(*
¥ivd©a
) {

107 
ªdisLibevEvíts
 *
e
 = (ªdisLibevEvíts*)
¥ivd©a
;

108 
	`ªdisLibevDñRód
(
¥ivd©a
);

109 
	`ªdisLibevDñWrôe
(
¥ivd©a
);

110 
	`‰ì
(
e
);

111 
	}
}

113 
	$ªdisLibevAâach
(
EV_P_
 
ªdisAsyncC⁄ãxt
 *
ac
) {

114 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

115 
ªdisLibevEvíts
 *
e
;

118 i‡(
ac
->
ev
.
d©a
 !
NULL
)

119  
REDIS_ERR
;

122 
e
 = (
ªdisLibevEvíts
*)
	`mÆloc
((*e));

123 
e
->
c⁄ãxt
 = 
ac
;

124 #i‡
EV_MULTIPLICITY


125 
e
->
lo›
 =Üoop;

127 
e
->
lo›
 = 
NULL
;

129 
e
->
ªadög
 =É->
wrôög
 = 0;

130 
e
->
ªv
.
d©a
 =É;

131 
e
->
wev
.
d©a
 =É;

134 
ac
->
ev
.
addRód
 = 
ªdisLibevAddRód
;

135 
ac
->
ev
.
dñRód
 = 
ªdisLibevDñRód
;

136 
ac
->
ev
.
addWrôe
 = 
ªdisLibevAddWrôe
;

137 
ac
->
ev
.
dñWrôe
 = 
ªdisLibevDñWrôe
;

138 
ac
->
ev
.
˛ónup
 = 
ªdisLibevCÀ™up
;

139 
ac
->
ev
.
d©a
 = 
e
;

142 
	`ev_io_öô
(&
e
->
ªv
,
ªdisLibevRódEvít
,
c
->
fd
,
EV_READ
);

143 
	`ev_io_öô
(&
e
->
wev
,
ªdisLibevWrôeEvít
,
c
->
fd
,
EV_WRITE
);

144  
REDIS_OK
;

145 
	}
}

	@dep/hiredis-0.13.3/adapters/libevent.h

31 #i‚de‡
__HIREDIS_LIBEVENT_H__


32 
	#__HIREDIS_LIBEVENT_H__


	)

33 
	~<evít.h
>

34 
	~"../húedis.h
"

35 
	~"../async.h
"

37 
	sªdisLibevítEvíts
 {

38 
ªdisAsyncC⁄ãxt
 *
	mc⁄ãxt
;

39 
evít
 
	mªv
, 
	mwev
;

40 } 
	tªdisLibevítEvíts
;

42 
	$ªdisLibevítRódEvít
(
fd
, 
evít
, *
¨g
) {

43 (()
fd
); (()
evít
);

44 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¨g
;

45 
	`ªdisAsyncH™dÀRód
(
e
->
c⁄ãxt
);

46 
	}
}

48 
	$ªdisLibevítWrôeEvít
(
fd
, 
evít
, *
¨g
) {

49 (()
fd
); (()
evít
);

50 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¨g
;

51 
	`ªdisAsyncH™dÀWrôe
(
e
->
c⁄ãxt
);

52 
	}
}

54 
	$ªdisLibevítAddRód
(*
¥ivd©a
) {

55 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¥ivd©a
;

56 
	`evít_add
(&
e
->
ªv
,
NULL
);

57 
	}
}

59 
	$ªdisLibevítDñRód
(*
¥ivd©a
) {

60 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¥ivd©a
;

61 
	`evít_dñ
(&
e
->
ªv
);

62 
	}
}

64 
	$ªdisLibevítAddWrôe
(*
¥ivd©a
) {

65 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¥ivd©a
;

66 
	`evít_add
(&
e
->
wev
,
NULL
);

67 
	}
}

69 
	$ªdisLibevítDñWrôe
(*
¥ivd©a
) {

70 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¥ivd©a
;

71 
	`evít_dñ
(&
e
->
wev
);

72 
	}
}

74 
	$ªdisLibevítCÀ™up
(*
¥ivd©a
) {

75 
ªdisLibevítEvíts
 *
e
 = (ªdisLibevítEvíts*)
¥ivd©a
;

76 
	`evít_dñ
(&
e
->
ªv
);

77 
	`evít_dñ
(&
e
->
wev
);

78 
	`‰ì
(
e
);

79 
	}
}

81 
	$ªdisLibevítAâach
(
ªdisAsyncC⁄ãxt
 *
ac
, 
evít_ba£
 *
ba£
) {

82 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

83 
ªdisLibevítEvíts
 *
e
;

86 i‡(
ac
->
ev
.
d©a
 !
NULL
)

87  
REDIS_ERR
;

90 
e
 = (
ªdisLibevítEvíts
*)
	`mÆloc
((*e));

91 
e
->
c⁄ãxt
 = 
ac
;

94 
ac
->
ev
.
addRód
 = 
ªdisLibevítAddRód
;

95 
ac
->
ev
.
dñRód
 = 
ªdisLibevítDñRód
;

96 
ac
->
ev
.
addWrôe
 = 
ªdisLibevítAddWrôe
;

97 
ac
->
ev
.
dñWrôe
 = 
ªdisLibevítDñWrôe
;

98 
ac
->
ev
.
˛ónup
 = 
ªdisLibevítCÀ™up
;

99 
ac
->
ev
.
d©a
 = 
e
;

102 
	`evít_£t
(&
e
->
ªv
,
c
->
fd
,
EV_READ
,
ªdisLibevítRódEvít
,e);

103 
	`evít_£t
(&
e
->
wev
,
c
->
fd
,
EV_WRITE
,
ªdisLibevítWrôeEvít
,e);

104 
	`evít_ba£_£t
(
ba£
,&
e
->
ªv
);

105 
	`evít_ba£_£t
(
ba£
,&
e
->
wev
);

106  
REDIS_OK
;

107 
	}
}

	@dep/hiredis-0.13.3/adapters/libuv.h

1 #i‚de‡
__HIREDIS_LIBUV_H__


2 
	#__HIREDIS_LIBUV_H__


	)

3 
	~<°dlib.h
>

4 
	~<uv.h
>

5 
	~"../húedis.h
"

6 
	~"../async.h
"

7 
	~<°rög.h
>

9 
	sªdisLibuvEvíts
 {

10 
ªdisAsyncC⁄ãxt
* 
	mc⁄ãxt
;

11 
uv_pﬁl_t
 
	mh™dÀ
;

12 
	mevíts
;

13 } 
	tªdisLibuvEvíts
;

16 
	$ªdisLibuvPﬁl
(
uv_pﬁl_t
* 
h™dÀ
, 
°©us
, 
evíts
) {

17 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
h™dÀ
->
d©a
;

19 i‡(
°©us
 != 0) {

23 i‡(
evíts
 & 
UV_READABLE
) {

24 
	`ªdisAsyncH™dÀRód
(
p
->
c⁄ãxt
);

26 i‡(
evíts
 & 
UV_WRITABLE
) {

27 
	`ªdisAsyncH™dÀWrôe
(
p
->
c⁄ãxt
);

29 
	}
}

32 
	$ªdisLibuvAddRód
(*
¥ivd©a
) {

33 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
¥ivd©a
;

35 
p
->
evíts
 |
UV_READABLE
;

37 
	`uv_pﬁl_°¨t
(&
p
->
h™dÀ
,Ö->
evíts
, 
ªdisLibuvPﬁl
);

38 
	}
}

41 
	$ªdisLibuvDñRód
(*
¥ivd©a
) {

42 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
¥ivd©a
;

44 
p
->
evíts
 &~
UV_READABLE
;

46 i‡(
p
->
evíts
) {

47 
	`uv_pﬁl_°¨t
(&
p
->
h™dÀ
,Ö->
evíts
, 
ªdisLibuvPﬁl
);

49 
	`uv_pﬁl_°›
(&
p
->
h™dÀ
);

51 
	}
}

54 
	$ªdisLibuvAddWrôe
(*
¥ivd©a
) {

55 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
¥ivd©a
;

57 
p
->
evíts
 |
UV_WRITABLE
;

59 
	`uv_pﬁl_°¨t
(&
p
->
h™dÀ
,Ö->
evíts
, 
ªdisLibuvPﬁl
);

60 
	}
}

63 
	$ªdisLibuvDñWrôe
(*
¥ivd©a
) {

64 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
¥ivd©a
;

66 
p
->
evíts
 &~
UV_WRITABLE
;

68 i‡(
p
->
evíts
) {

69 
	`uv_pﬁl_°¨t
(&
p
->
h™dÀ
,Ö->
evíts
, 
ªdisLibuvPﬁl
);

71 
	`uv_pﬁl_°›
(&
p
->
h™dÀ
);

73 
	}
}

76 
	$⁄_˛o£
(
uv_h™dÀ_t
* 
h™dÀ
) {

77 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
h™dÀ
->
d©a
;

79 
	`‰ì
(
p
);

80 
	}
}

83 
	$ªdisLibuvCÀ™up
(*
¥ivd©a
) {

84 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
¥ivd©a
;

86 
	`uv_˛o£
((
uv_h™dÀ_t
*)&
p
->
h™dÀ
, 
⁄_˛o£
);

87 
	}
}

90 
	$ªdisLibuvAâach
(
ªdisAsyncC⁄ãxt
* 
ac
, 
uv_lo›_t
* 
lo›
) {

91 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

93 i‡(
ac
->
ev
.
d©a
 !
NULL
) {

94  
REDIS_ERR
;

97 
ac
->
ev
.
addRód
 = 
ªdisLibuvAddRód
;

98 
ac
->
ev
.
dñRód
 = 
ªdisLibuvDñRód
;

99 
ac
->
ev
.
addWrôe
 = 
ªdisLibuvAddWrôe
;

100 
ac
->
ev
.
dñWrôe
 = 
ªdisLibuvDñWrôe
;

101 
ac
->
ev
.
˛ónup
 = 
ªdisLibuvCÀ™up
;

103 
ªdisLibuvEvíts
* 
p
 = (ªdisLibuvEvíts*)
	`mÆloc
((*p));

105 i‡(!
p
) {

106  
REDIS_ERR
;

109 
	`mem£t
(
p
, 0, (*p));

111 i‡(
	`uv_pﬁl_öô
(
lo›
, &
p
->
h™dÀ
, 
c
->
fd
) != 0) {

112  
REDIS_ERR
;

115 
ac
->
ev
.
d©a
 = 
p
;

116 
p
->
h™dÀ
.
d©a
 =Ö;

117 
p
->
c⁄ãxt
 = 
ac
;

119  
REDIS_OK
;

120 
	}
}

	@dep/hiredis-0.13.3/adapters/macosx.h

6 #i‚de‡
__HIREDIS_MACOSX_H__


7 
	#__HIREDIS_MACOSX_H__


	)

9 
	~<C‹eFound©i⁄/C‹eFound©i⁄.h
>

11 
	~"../húedis.h
"

12 
	~"../async.h
"

15 
ªdisAsyncC⁄ãxt
 *
	mc⁄ãxt
;

16 
CFSockëRef
 
	msockëRef
;

17 
CFRunLo›Sour˚Ref
 
	msour˚Ref
;

18 } 
	tRedisRunLo›
;

20 
	$‰ìRedisRunLo›
(
RedisRunLo›
* 
ªdisRunLo›
) {

21 if–
ªdisRunLo›
 !
NULL
 ) {

22 if–
ªdisRunLo›
->
sour˚Ref
 !
NULL
 ) {

23 
	`CFRunLo›Sour˚InvÆid©e
(
ªdisRunLo›
->
sour˚Ref
);

24 
	`CFRñó£
(
ªdisRunLo›
->
sour˚Ref
);

26 if–
ªdisRunLo›
->
sockëRef
 !
NULL
 ) {

27 
	`CFSockëInvÆid©e
(
ªdisRunLo›
->
sockëRef
);

28 
	`CFRñó£
(
ªdisRunLo›
->
sockëRef
);

30 
	`‰ì
(
ªdisRunLo›
);

32  
REDIS_ERR
;

33 
	}
}

35 
	$ªdisMacOSAddRód
(*
¥ivd©a
) {

36 
RedisRunLo›
 *
ªdisRunLo›
 = (RedisRunLo›*)
¥ivd©a
;

37 
	`CFSockëE«bÀCÆlBacks
(
ªdisRunLo›
->
sockëRef
, 
kCFSockëRódCÆlBack
);

38 
	}
}

40 
	$ªdisMacOSDñRód
(*
¥ivd©a
) {

41 
RedisRunLo›
 *
ªdisRunLo›
 = (RedisRunLo›*)
¥ivd©a
;

42 
	`CFSockëDißbÀCÆlBacks
(
ªdisRunLo›
->
sockëRef
, 
kCFSockëRódCÆlBack
);

43 
	}
}

45 
	$ªdisMacOSAddWrôe
(*
¥ivd©a
) {

46 
RedisRunLo›
 *
ªdisRunLo›
 = (RedisRunLo›*)
¥ivd©a
;

47 
	`CFSockëE«bÀCÆlBacks
(
ªdisRunLo›
->
sockëRef
, 
kCFSockëWrôeCÆlBack
);

48 
	}
}

50 
	$ªdisMacOSDñWrôe
(*
¥ivd©a
) {

51 
RedisRunLo›
 *
ªdisRunLo›
 = (RedisRunLo›*)
¥ivd©a
;

52 
	`CFSockëDißbÀCÆlBacks
(
ªdisRunLo›
->
sockëRef
, 
kCFSockëWrôeCÆlBack
);

53 
	}
}

55 
	$ªdisMacOSCÀ™up
(*
¥ivd©a
) {

56 
RedisRunLo›
 *
ªdisRunLo›
 = (RedisRunLo›*)
¥ivd©a
;

57 
	`‰ìRedisRunLo›
(
ªdisRunLo›
);

58 
	}
}

60 
	$ªdisMacOSAsyncCÆlback
(
CFSockëRef
 
__unu£d
 
s
, 
CFSockëCÆlBackTy≥
 
ˇŒbackTy≥
, 
CFD©aRef
 __unu£d 
addªss
, c⁄° __unu£d *
d©a
, *
öfo
) {

61 
ªdisAsyncC⁄ãxt
* 
c⁄ãxt
 = (ªdisAsyncC⁄ãxt*Ë
öfo
;

63 
ˇŒbackTy≥
) {

64 
kCFSockëRódCÆlBack
:

65 
	`ªdisAsyncH™dÀRód
(
c⁄ãxt
);

68 
kCFSockëWrôeCÆlBack
:

69 
	`ªdisAsyncH™dÀWrôe
(
c⁄ãxt
);

75 
	}
}

77 
	$ªdisMacOSAâach
(
ªdisAsyncC⁄ãxt
 *
ªdisAsyncCtx
, 
CFRunLo›Ref
 
runLo›
) {

78 
ªdisC⁄ãxt
 *
ªdisCtx
 = &(
ªdisAsyncCtx
->
c
);

81 if–
ªdisAsyncCtx
->
ev
.
d©a
 !
NULL
 )  
REDIS_ERR
;

83 
RedisRunLo›
* 
ªdisRunLo›
 = (RedisRunLo›*Ë
	`ˇŒoc
(1, (RedisRunLoop));

84 if–!
ªdisRunLo›
 )  
REDIS_ERR
;

87 
ªdisRunLo›
->
c⁄ãxt
 = 
ªdisAsyncCtx
;

89 
ªdisAsyncCtx
->
ev
.
addRód
 = 
ªdisMacOSAddRód
;

90 
ªdisAsyncCtx
->
ev
.
dñRód
 = 
ªdisMacOSDñRód
;

91 
ªdisAsyncCtx
->
ev
.
addWrôe
 = 
ªdisMacOSAddWrôe
;

92 
ªdisAsyncCtx
->
ev
.
dñWrôe
 = 
ªdisMacOSDñWrôe
;

93 
ªdisAsyncCtx
->
ev
.
˛ónup
 = 
ªdisMacOSCÀ™up
;

94 
ªdisAsyncCtx
->
ev
.
d©a
 = 
ªdisRunLo›
;

97 
CFSockëC⁄ãxt
 
sockëCtx
 = { 0, 
ªdisAsyncCtx
, 
NULL
, NULL, NULL };

99 
ªdisRunLo›
->
sockëRef
 = 
	`CFSockëCª©eWôhN©ive
(
NULL
, 
ªdisCtx
->
fd
,

100 
kCFSockëRódCÆlBack
 | 
kCFSockëWrôeCÆlBack
,

101 
ªdisMacOSAsyncCÆlback
,

102 &
sockëCtx
);

103 if–!
ªdisRunLo›
->
sockëRef
 )  
	`‰ìRedisRunLo›
(redisRunLoop);

105 
ªdisRunLo›
->
sour˚Ref
 = 
	`CFSockëCª©eRunLo›Sour˚
(
NULL
,ÑedisRunLo›->
sockëRef
, 0);

106 if–!
ªdisRunLo›
->
sour˚Ref
 )  
	`‰ìRedisRunLo›
(redisRunLoop);

108 
	`CFRunLo›AddSour˚
(
runLo›
, 
ªdisRunLo›
->
sour˚Ref
, 
kCFRunLo›DeÁu…Mode
);

110  
REDIS_OK
;

111 
	}
}

	@dep/hiredis-0.13.3/adapters/qt.h

26 #i‚de‡
__HIREDIS_QT_H__


27 
	#__HIREDIS_QT_H__


	)

28 
	~<QSockëNŸifõr
>

29 
	~"../async.h
"

31 
RedisQtAddRód
(*);

32 
RedisQtDñRód
(*);

33 
RedisQtAddWrôe
(*);

34 
RedisQtDñWrôe
(*);

35 
RedisQtCÀ™up
(*);

37 ˛as†
	cRedisQtAd≠ãr
 : 
public
 
QObje˘
 {

39 
Q_OBJECT


41 
‰õnd


42 
	$RedisQtAddRód
(* 
ad≠ãr
) {

43 
RedisQtAd≠ãr
 * 
a
 = 
°©ic_ˇ°
<RedisQtAd≠ã∏*>(
ad≠ãr
);

44 
a
->
	`addRód
();

47 
‰õnd


48 
	$RedisQtDñRód
(* 
ad≠ãr
) {

49 
RedisQtAd≠ãr
 * 
a
 = 
°©ic_ˇ°
<RedisQtAd≠ã∏*>(
ad≠ãr
);

50 
a
->
	`dñRód
();

51 
	}
}

53 
‰õnd


54 
	$RedisQtAddWrôe
(* 
ad≠ãr
) {

55 
RedisQtAd≠ãr
 * 
a
 = 
°©ic_ˇ°
<RedisQtAd≠ã∏*>(
ad≠ãr
);

56 
a
->
	`addWrôe
();

57 
	}
}

59 
‰õnd


60 
	$RedisQtDñWrôe
(* 
ad≠ãr
) {

61 
RedisQtAd≠ãr
 * 
a
 = 
°©ic_ˇ°
<RedisQtAd≠ã∏*>(
ad≠ãr
);

62 
a
->
	`dñWrôe
();

63 
	}
}

65 
‰õnd


66 
	$RedisQtCÀ™up
(* 
ad≠ãr
) {

67 
RedisQtAd≠ãr
 * 
a
 = 
°©ic_ˇ°
<RedisQtAd≠ã∏*>(
ad≠ãr
);

68 
a
->
	`˛ónup
();

69 
	}
}

71 
	gpublic
:

72 
	$RedisQtAd≠ãr
(
QObje˘
 * 
∑ª¡
 = 0)

73 : 
	`QObje˘
(
∑ª¡
), 
	`m_˘x
(0), 
	`m_ªad
(0), 
	$m_wrôe
(0Ë{ 
	}
}

75 ~
	$RedisQtAd≠ãr
() {

76 i‡(
m_˘x
 != 0) {

77 
m_˘x
->
ev
.
d©a
 = 
NULL
;

79 
	}
}

81 
	$£tC⁄ãxt
(
ªdisAsyncC⁄ãxt
 * 
ac
) {

82 i‡(
ac
->
ev
.
d©a
 !
NULL
) {

83  
REDIS_ERR
;

85 
m_˘x
 = 
ac
;

86 
m_˘x
->
ev
.
d©a
 = 
this
;

87 
m_˘x
->
ev
.
addRód
 = 
RedisQtAddRód
;

88 
m_˘x
->
ev
.
dñRód
 = 
RedisQtDñRód
;

89 
m_˘x
->
ev
.
addWrôe
 = 
RedisQtAddWrôe
;

90 
m_˘x
->
ev
.
dñWrôe
 = 
RedisQtDñWrôe
;

91 
m_˘x
->
ev
.
˛ónup
 = 
RedisQtCÀ™up
;

92  
REDIS_OK
;

93 
	}
}

95 
	g¥iv©e
:

96 
	$addRód
() {

97 i‡(
m_ªad
) ;

98 
m_ªad
 = 
√w
 
	`QSockëNŸifõr
(
m_˘x
->
c
.
fd
, 
QSockëNŸifõr
::
Ród
, 0);

99 
	`c⁄√˘
(
m_ªad
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
this
, 
	`SLOT
(
	`ªad
()));

100 
	}
}

102 
	$dñRód
() {

103 i‡(!
m_ªad
) ;

104 
dñëe
 
m_ªad
;

105 
m_ªad
 = 0;

106 
	}
}

108 
	$addWrôe
() {

109 i‡(
m_wrôe
) ;

110 
m_wrôe
 = 
√w
 
	`QSockëNŸifõr
(
m_˘x
->
c
.
fd
, 
QSockëNŸifõr
::
Wrôe
, 0);

111 
	`c⁄√˘
(
m_wrôe
, 
	`SIGNAL
(
	`a˘iv©ed
()), 
this
, 
	`SLOT
(
	`wrôe
()));

112 
	}
}

114 
	$dñWrôe
() {

115 i‡(!
m_wrôe
) ;

116 
dñëe
 
m_wrôe
;

117 
m_wrôe
 = 0;

118 
	}
}

120 
	$˛ónup
() {

121 
	`dñRód
();

122 
	`dñWrôe
();

123 
	}
}

125 
¥iv©e
 
	g¶Ÿs
:

126 
	$ªad
(Ë{ 
	`ªdisAsyncH™dÀRód
(
m_˘x
); 
	}
}

127 
	$wrôe
(Ë{ 
	`ªdisAsyncH™dÀWrôe
(
m_˘x
); 
	}
}

129 
	g¥iv©e
:

130 
ªdisAsyncC⁄ãxt
 * 
m_˘x
;

131 
QSockëNŸifõr
 * 
	gm_ªad
;

132 
QSockëNŸifõr
 * 
	gm_wrôe
;

	@dep/hiredis-0.13.3/async.c

32 
	~"fma¸os.h
"

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<°rögs.h
>

36 
	~<as£π.h
>

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~"async.h
"

40 
	~"√t.h
"

41 
	~"di˘.c
"

42 
	~"sds.h
"

44 
	#_EL_ADD_READ
(
˘x
) do { \

45 i‡((
˘x
)->
ev
.
addRód
Ë(˘x)->ev.
	`addRód
((˘x)->ev.
d©a
); \

46 } 0)

	)

47 
	#_EL_DEL_READ
(
˘x
) do { \

48 i‡((
˘x
)->
ev
.
dñRód
Ë(˘x)->ev.
	`dñRód
((˘x)->ev.
d©a
); \

49 } 0)

	)

50 
	#_EL_ADD_WRITE
(
˘x
) do { \

51 i‡((
˘x
)->
ev
.
addWrôe
Ë(˘x)->ev.
	`addWrôe
((˘x)->ev.
d©a
); \

52 } 0)

	)

53 
	#_EL_DEL_WRITE
(
˘x
) do { \

54 i‡((
˘x
)->
ev
.
dñWrôe
Ë(˘x)->ev.
	`dñWrôe
((˘x)->ev.
d©a
); \

55 } 0)

	)

56 
	#_EL_CLEANUP
(
˘x
) do { \

57 i‡((
˘x
)->
ev
.
˛ónup
Ë(˘x)->ev.
	`˛ónup
((˘x)->ev.
d©a
); \

58 } 0);

	)

61 
__ªdisAµídComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
cmd
, 
size_t
 
Àn
);

64 
	$ˇŒbackHash
(c⁄° *
key
) {

65  
	`di˘GíHashFun˘i⁄
((c⁄° *)
key
,

66 
	`sd¶í
((c⁄° 
sds
)
key
));

67 
	}
}

69 *
	$ˇŒbackVÆDup
(*
¥ivd©a
, c⁄° *
§c
) {

70 ((Ë
¥ivd©a
);

71 
ªdisCÆlback
 *
dup
 = 
	`mÆloc
((*dup));

72 
	`mem˝y
(
dup
,
§c
,(*dup));

73  
dup
;

74 
	}
}

76 
	$ˇŒbackKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
) {

77 
l1
, 
l2
;

78 ((Ë
¥ivd©a
);

80 
l1
 = 
	`sd¶í
((c⁄° 
sds
)
key1
);

81 
l2
 = 
	`sd¶í
((c⁄° 
sds
)
key2
);

82 i‡(
l1
 !
l2
)  0;

83  
	`memcmp
(
key1
,
key2
,
l1
) == 0;

84 
	}
}

86 
	$ˇŒbackKeyDe°ru˘‹
(*
¥ivd©a
, *
key
) {

87 ((Ë
¥ivd©a
);

88 
	`sds‰ì
((
sds
)
key
);

89 
	}
}

91 
	$ˇŒbackVÆDe°ru˘‹
(*
¥ivd©a
, *
vÆ
) {

92 ((Ë
¥ivd©a
);

93 
	`‰ì
(
vÆ
);

94 
	}
}

96 
di˘Ty≥
 
	gˇŒbackDi˘
 = {

97 
ˇŒbackHash
,

98 
NULL
,

99 
ˇŒbackVÆDup
,

100 
ˇŒbackKeyCom∑ª
,

101 
ˇŒbackKeyDe°ru˘‹
,

102 
ˇŒbackVÆDe°ru˘‹


105 
ªdisAsyncC⁄ãxt
 *
	$ªdisAsyncInôülize
(
ªdisC⁄ãxt
 *
c
) {

106 
ªdisAsyncC⁄ãxt
 *
ac
;

108 
ac
 = 
	`ªÆloc
(
c
,(
ªdisAsyncC⁄ãxt
));

109 i‡(
ac
 =
NULL
)

110  
NULL
;

112 
c
 = &(
ac
->c);

117 
c
->
Êags
 &~
REDIS_CONNECTED
;

119 
ac
->
îr
 = 0;

120 
ac
->
îr°r
 = 
NULL
;

121 
ac
->
d©a
 = 
NULL
;

123 
ac
->
ev
.
d©a
 = 
NULL
;

124 
ac
->
ev
.
addRód
 = 
NULL
;

125 
ac
->
ev
.
dñRód
 = 
NULL
;

126 
ac
->
ev
.
addWrôe
 = 
NULL
;

127 
ac
->
ev
.
dñWrôe
 = 
NULL
;

128 
ac
->
ev
.
˛ónup
 = 
NULL
;

130 
ac
->
⁄C⁄√˘
 = 
NULL
;

131 
ac
->
⁄Disc⁄√˘
 = 
NULL
;

133 
ac
->
ª∂õs
.
hód
 = 
NULL
;

134 
ac
->
ª∂õs
.
èû
 = 
NULL
;

135 
ac
->
sub
.
övÆid
.
hód
 = 
NULL
;

136 
ac
->
sub
.
övÆid
.
èû
 = 
NULL
;

137 
ac
->
sub
.
ch™√ls
 = 
	`di˘Cª©e
(&
ˇŒbackDi˘
,
NULL
);

138 
ac
->
sub
.
∑âîns
 = 
	`di˘Cª©e
(&
ˇŒbackDi˘
,
NULL
);

139  
ac
;

140 
	}
}

144 
	$__ªdisAsyncC›yEº‹
(
ªdisAsyncC⁄ãxt
 *
ac
) {

145 i‡(!
ac
)

148 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

149 
ac
->
îr
 = 
c
->err;

150 
ac
->
îr°r
 = 
c
->errstr;

151 
	}
}

153 
ªdisAsyncC⁄ãxt
 *
	$ªdisAsyncC⁄√˘
(c⁄° *
ù
, 
p‹t
) {

154 
ªdisC⁄ãxt
 *
c
;

155 
ªdisAsyncC⁄ãxt
 *
ac
;

157 
c
 = 
	`ªdisC⁄√˘N⁄Block
(
ù
,
p‹t
);

158 i‡(
c
 =
NULL
)

159  
NULL
;

161 
ac
 = 
	`ªdisAsyncInôülize
(
c
);

162 i‡(
ac
 =
NULL
) {

163 
	`ªdisFªe
(
c
);

164  
NULL
;

167 
	`__ªdisAsyncC›yEº‹
(
ac
);

168  
ac
;

169 
	}
}

171 
ªdisAsyncC⁄ãxt
 *
	$ªdisAsyncC⁄√˘Böd
(c⁄° *
ù
, 
p‹t
,

172 c⁄° *
sour˚_addr
) {

173 
ªdisC⁄ãxt
 *
c
 = 
	`ªdisC⁄√˘BödN⁄Block
(
ù
,
p‹t
,
sour˚_addr
);

174 
ªdisAsyncC⁄ãxt
 *
ac
 = 
	`ªdisAsyncInôülize
(
c
);

175 
	`__ªdisAsyncC›yEº‹
(
ac
);

176  
ac
;

177 
	}
}

179 
ªdisAsyncC⁄ãxt
 *
	$ªdisAsyncC⁄√˘BödWôhReu£
(c⁄° *
ù
, 
p‹t
,

180 c⁄° *
sour˚_addr
) {

181 
ªdisC⁄ãxt
 *
c
 = 
	`ªdisC⁄√˘BödN⁄BlockWôhReu£
(
ù
,
p‹t
,
sour˚_addr
);

182 
ªdisAsyncC⁄ãxt
 *
ac
 = 
	`ªdisAsyncInôülize
(
c
);

183 
	`__ªdisAsyncC›yEº‹
(
ac
);

184  
ac
;

185 
	}
}

187 
ªdisAsyncC⁄ãxt
 *
	$ªdisAsyncC⁄√˘Unix
(c⁄° *
∑th
) {

188 
ªdisC⁄ãxt
 *
c
;

189 
ªdisAsyncC⁄ãxt
 *
ac
;

191 
c
 = 
	`ªdisC⁄√˘UnixN⁄Block
(
∑th
);

192 i‡(
c
 =
NULL
)

193  
NULL
;

195 
ac
 = 
	`ªdisAsyncInôülize
(
c
);

196 i‡(
ac
 =
NULL
) {

197 
	`ªdisFªe
(
c
);

198  
NULL
;

201 
	`__ªdisAsyncC›yEº‹
(
ac
);

202  
ac
;

203 
	}
}

205 
	$ªdisAsyncSëC⁄√˘CÆlback
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisC⁄√˘CÆlback
 *
‚
) {

206 i‡(
ac
->
⁄C⁄√˘
 =
NULL
) {

207 
ac
->
⁄C⁄√˘
 = 
‚
;

212 
	`_EL_ADD_WRITE
(
ac
);

213  
REDIS_OK
;

215  
REDIS_ERR
;

216 
	}
}

218 
	$ªdisAsyncSëDisc⁄√˘CÆlback
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisDisc⁄√˘CÆlback
 *
‚
) {

219 i‡(
ac
->
⁄Disc⁄√˘
 =
NULL
) {

220 
ac
->
⁄Disc⁄√˘
 = 
‚
;

221  
REDIS_OK
;

223  
REDIS_ERR
;

224 
	}
}

227 
	$__ªdisPushCÆlback
(
ªdisCÆlbackLi°
 *
li°
, 
ªdisCÆlback
 *
sour˚
) {

228 
ªdisCÆlback
 *
cb
;

231 
cb
 = 
	`mÆloc
((*cb));

232 i‡(
cb
 =
NULL
)

233  
REDIS_ERR_OOM
;

235 i‡(
sour˚
 !
NULL
) {

236 
	`mem˝y
(
cb
,
sour˚
,(*cb));

237 
cb
->
√xt
 = 
NULL
;

241 i‡(
li°
->
hód
 =
NULL
)

242 
li°
->
hód
 = 
cb
;

243 i‡(
li°
->
èû
 !
NULL
)

244 
li°
->
èû
->
√xt
 = 
cb
;

245 
li°
->
èû
 = 
cb
;

246  
REDIS_OK
;

247 
	}
}

249 
	$__ªdisShi·CÆlback
(
ªdisCÆlbackLi°
 *
li°
, 
ªdisCÆlback
 *
èrgë
) {

250 
ªdisCÆlback
 *
cb
 = 
li°
->
hód
;

251 i‡(
cb
 !
NULL
) {

252 
li°
->
hód
 = 
cb
->
√xt
;

253 i‡(
cb
 =
li°
->
èû
)

254 
li°
->
èû
 = 
NULL
;

257 i‡(
èrgë
 !
NULL
)

258 
	`mem˝y
(
èrgë
,
cb
,(*cb));

259 
	`‰ì
(
cb
);

260  
REDIS_OK
;

262  
REDIS_ERR
;

263 
	}
}

265 
	$__ªdisRunCÆlback
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlback
 *
cb
, 
ªdisRïly
 *
ª∂y
) {

266 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

267 i‡(
cb
->
‚
 !
NULL
) {

268 
c
->
Êags
 |
REDIS_IN_CALLBACK
;

269 
cb
->
	`‚
(
ac
,
ª∂y
,cb->
¥ivd©a
);

270 
c
->
Êags
 &~
REDIS_IN_CALLBACK
;

272 
	}
}

275 
	$__ªdisAsyncFªe
(
ªdisAsyncC⁄ãxt
 *
ac
) {

276 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

277 
ªdisCÆlback
 
cb
;

278 
di˘Iãøt‹
 *
ô
;

279 
di˘E¡ry
 *
de
;

282 
	`__ªdisShi·CÆlback
(&
ac
->
ª∂õs
,&
cb
Ë=
REDIS_OK
)

283 
	`__ªdisRunCÆlback
(
ac
,&
cb
,
NULL
);

286 
	`__ªdisShi·CÆlback
(&
ac
->
sub
.
övÆid
,&
cb
Ë=
REDIS_OK
)

287 
	`__ªdisRunCÆlback
(
ac
,&
cb
,
NULL
);

290 
ô
 = 
	`di˘GëIãøt‹
(
ac
->
sub
.
ch™√ls
);

291 (
de
 = 
	`di˘Next
(
ô
)Ë!
NULL
)

292 
	`__ªdisRunCÆlback
(
ac
,
	`di˘GëE¡ryVÆ
(
de
),
NULL
);

293 
	`di˘Rñó£Iãøt‹
(
ô
);

294 
	`di˘Rñó£
(
ac
->
sub
.
ch™√ls
);

296 
ô
 = 
	`di˘GëIãøt‹
(
ac
->
sub
.
∑âîns
);

297 (
de
 = 
	`di˘Next
(
ô
)Ë!
NULL
)

298 
	`__ªdisRunCÆlback
(
ac
,
	`di˘GëE¡ryVÆ
(
de
),
NULL
);

299 
	`di˘Rñó£Iãøt‹
(
ô
);

300 
	`di˘Rñó£
(
ac
->
sub
.
∑âîns
);

303 
	`_EL_CLEANUP
(
ac
);

307 i‡(
ac
->
⁄Disc⁄√˘
 && (
c
->
Êags
 & 
REDIS_CONNECTED
)) {

308 i‡(
c
->
Êags
 & 
REDIS_FREEING
) {

309 
ac
->
	`⁄Disc⁄√˘
◊c,
REDIS_OK
);

311 
ac
->
	`⁄Disc⁄√˘
◊c,◊c->
îr
 =0Ë? 
REDIS_OK
 : 
REDIS_ERR
);

316 
	`ªdisFªe
(
c
);

317 
	}
}

323 
	$ªdisAsyncFªe
(
ªdisAsyncC⁄ãxt
 *
ac
) {

324 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

325 
c
->
Êags
 |
REDIS_FREEING
;

326 i‡(!(
c
->
Êags
 & 
REDIS_IN_CALLBACK
))

327 
	`__ªdisAsyncFªe
(
ac
);

328 
	}
}

331 
	$__ªdisAsyncDisc⁄√˘
(
ªdisAsyncC⁄ãxt
 *
ac
) {

332 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

335 
	`__ªdisAsyncC›yEº‹
(
ac
);

337 i‡(
ac
->
îr
 == 0) {

339 
	`as£π
(
	`__ªdisShi·CÆlback
(&
ac
->
ª∂õs
,
NULL
Ë=
REDIS_ERR
);

343 
c
->
Êags
 |
REDIS_DISCONNECTING
;

348 
	`__ªdisAsyncFªe
(
ac
);

349 
	}
}

357 
	$ªdisAsyncDisc⁄√˘
(
ªdisAsyncC⁄ãxt
 *
ac
) {

358 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

359 
c
->
Êags
 |
REDIS_DISCONNECTING
;

360 i‡(!(
c
->
Êags
 & 
REDIS_IN_CALLBACK
Ë&& 
ac
->
ª∂õs
.
hód
 =
NULL
)

361 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

362 
	}
}

364 
	$__ªdisGëSubs¸ibeCÆlback
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisRïly
 *
ª∂y
, 
ªdisCÆlback
 *
d°cb
) {

365 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

366 
di˘
 *
ˇŒbacks
;

367 
di˘E¡ry
 *
de
;

368 
pv¨ü¡
;

369 *
°y≥
;

370 
sds
 
¢ame
;

374 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_ARRAY
) {

375 
	`as£π
(
ª∂y
->
ñemíts
 >= 2);

376 
	`as£π
(
ª∂y
->
ñemít
[0]->
ty≥
 =
REDIS_REPLY_STRING
);

377 
°y≥
 = 
ª∂y
->
ñemít
[0]->
°r
;

378 
pv¨ü¡
 = (
	`tﬁowî
(
°y≥
[0]) == 'p') ? 1 : 0;

380 i‡(
pv¨ü¡
)

381 
ˇŒbacks
 = 
ac
->
sub
.
∑âîns
;

383 
ˇŒbacks
 = 
ac
->
sub
.
ch™√ls
;

386 
	`as£π
(
ª∂y
->
ñemít
[1]->
ty≥
 =
REDIS_REPLY_STRING
);

387 
¢ame
 = 
	`sd¢ewÀn
(
ª∂y
->
ñemít
[1]->
°r
,ª∂y->ñemít[1]->
Àn
);

388 
de
 = 
	`di˘Föd
(
ˇŒbacks
,
¢ame
);

389 i‡(
de
 !
NULL
) {

390 
	`mem˝y
(
d°cb
,
	`di˘GëE¡ryVÆ
(
de
),(*dstcb));

393 i‡(
	`°rˇ£cmp
(
°y≥
+
pv¨ü¡
,"unsubscribe") == 0) {

394 
	`di˘Dñëe
(
ˇŒbacks
,
¢ame
);

398 
	`as£π
(
ª∂y
->
ñemít
[2]->
ty≥
 =
REDIS_REPLY_INTEGER
);

399 i‡(
ª∂y
->
ñemít
[2]->
öãgî
 == 0)

400 
c
->
Êags
 &~
REDIS_SUBSCRIBED
;

403 
	`sds‰ì
(
¢ame
);

406 
	`__ªdisShi·CÆlback
(&
ac
->
sub
.
övÆid
,
d°cb
);

408  
REDIS_OK
;

409 
	}
}

411 
	$ªdisPro˚ssCÆlbacks
(
ªdisAsyncC⁄ãxt
 *
ac
) {

412 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

413 
ªdisCÆlback
 
cb
 = {
NULL
, NULL, NULL};

414 *
ª∂y
 = 
NULL
;

415 
°©us
;

417 (
°©us
 = 
	`ªdisGëRïly
(
c
,&
ª∂y
)Ë=
REDIS_OK
) {

418 i‡(
ª∂y
 =
NULL
) {

421 i‡(
c
->
Êags
 & 
REDIS_DISCONNECTING
 && 
	`sd¶í
(c->
obuf
) == 0

422 && 
ac
->
ª∂õs
.
hód
 =
NULL
) {

423 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

428 if(
c
->
Êags
 & 
REDIS_MONITORING
) {

429 
	`__ªdisPushCÆlback
(&
ac
->
ª∂õs
,&
cb
);

439 i‡(
	`__ªdisShi·CÆlback
(&
ac
->
ª∂õs
,&
cb
Ë!
REDIS_OK
) {

455 i‡(((
ªdisRïly
*)
ª∂y
)->
ty≥
 =
REDIS_REPLY_ERROR
) {

456 
c
->
îr
 = 
REDIS_ERR_OTHER
;

457 
	`¢¥ötf
(
c
->
îr°r
,(c->îr°r),"%s",((
ªdisRïly
*)
ª∂y
)->
°r
);

458 
c
->
ªadî
->
‚
->
	`‰ìObje˘
(
ª∂y
);

459 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

463 
	`as£π
((
c
->
Êags
 & 
REDIS_SUBSCRIBED
 || c->Êag†& 
REDIS_MONITORING
));

464 if(
c
->
Êags
 & 
REDIS_SUBSCRIBED
)

465 
	`__ªdisGëSubs¸ibeCÆlback
(
ac
,
ª∂y
,&
cb
);

468 i‡(
cb
.
‚
 !
NULL
) {

469 
	`__ªdisRunCÆlback
(
ac
,&
cb
,
ª∂y
);

470 
c
->
ªadî
->
‚
->
	`‰ìObje˘
(
ª∂y
);

473 i‡(
c
->
Êags
 & 
REDIS_FREEING
) {

474 
	`__ªdisAsyncFªe
(
ac
);

482 
c
->
ªadî
->
‚
->
	`‰ìObje˘
(
ª∂y
);

487 i‡(
°©us
 !
REDIS_OK
)

488 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

489 
	}
}

494 
	$__ªdisAsyncH™dÀC⁄√˘
(
ªdisAsyncC⁄ãxt
 *
ac
) {

495 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

497 i‡(
	`ªdisCheckSockëEº‹
(
c
Ë=
REDIS_ERR
) {

499 i‡(
î∫o
 =
EINPROGRESS
)

500  
REDIS_OK
;

502 i‡(
ac
->
⁄C⁄√˘
Ëac->
	`⁄C⁄√˘
◊c,
REDIS_ERR
);

503 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

504  
REDIS_ERR
;

508 
c
->
Êags
 |
REDIS_CONNECTED
;

509 i‡(
ac
->
⁄C⁄√˘
Ëac->
	`⁄C⁄√˘
◊c,
REDIS_OK
);

510  
REDIS_OK
;

511 
	}
}

516 
	$ªdisAsyncH™dÀRód
(
ªdisAsyncC⁄ãxt
 *
ac
) {

517 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

519 i‡(!(
c
->
Êags
 & 
REDIS_CONNECTED
)) {

521 i‡(
	`__ªdisAsyncH™dÀC⁄√˘
(
ac
Ë!
REDIS_OK
)

524 i‡(!(
c
->
Êags
 & 
REDIS_CONNECTED
))

528 i‡(
	`ªdisBuf„rRód
(
c
Ë=
REDIS_ERR
) {

529 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

532 
	`_EL_ADD_READ
(
ac
);

533 
	`ªdisPro˚ssCÆlbacks
(
ac
);

535 
	}
}

537 
	$ªdisAsyncH™dÀWrôe
(
ªdisAsyncC⁄ãxt
 *
ac
) {

538 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

539 
d⁄e
 = 0;

541 i‡(!(
c
->
Êags
 & 
REDIS_CONNECTED
)) {

543 i‡(
	`__ªdisAsyncH™dÀC⁄√˘
(
ac
Ë!
REDIS_OK
)

546 i‡(!(
c
->
Êags
 & 
REDIS_CONNECTED
))

550 i‡(
	`ªdisBuf„rWrôe
(
c
,&
d⁄e
Ë=
REDIS_ERR
) {

551 
	`__ªdisAsyncDisc⁄√˘
(
ac
);

554 i‡(!
d⁄e
)

555 
	`_EL_ADD_WRITE
(
ac
);

557 
	`_EL_DEL_WRITE
(
ac
);

560 
	`_EL_ADD_READ
(
ac
);

562 
	}
}

566 c⁄° *
	$√xtArgumít
(c⁄° *
°¨t
, c⁄° **
°r
, 
size_t
 *
Àn
) {

567 c⁄° *
p
 = 
°¨t
;

568 i‡(
p
[0] != '$') {

569 
p
 = 
	`°rchr
(p,'$');

570 i‡(
p
 =
NULL
)  NULL;

573 *
Àn
 = ()
	`°πﬁ
(
p
+1,
NULL
,10);

574 
p
 = 
	`°rchr
(p,'\r');

575 
	`as£π
(
p
);

576 *
°r
 = 
p
+2;

577  
p
+2+(*
Àn
)+2;

578 
	}
}

583 
	$__ªdisAsyncComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
cmd
, 
size_t
 
Àn
) {

584 
ªdisC⁄ãxt
 *
c
 = &(
ac
->c);

585 
ªdisCÆlback
 
cb
;

586 
pv¨ü¡
, 
ha¢ext
;

587 c⁄° *
c°r
, *
a°r
;

588 
size_t
 
˛í
, 
Æí
;

589 c⁄° *
p
;

590 
sds
 
¢ame
;

591 
ªt
;

594 i‡(
c
->
Êags
 & (
REDIS_DISCONNECTING
 | 
REDIS_FREEING
)Ë 
REDIS_ERR
;

597 
cb
.
‚
 = fn;

598 
cb
.
¥ivd©a
 =Örivdata;

601 
p
 = 
	`√xtArgumít
(
cmd
,&
c°r
,&
˛í
);

602 
	`as£π
(
p
 !
NULL
);

603 
ha¢ext
 = (
p
[0] == '$');

604 
pv¨ü¡
 = (
	`tﬁowî
(
c°r
[0]) == 'p') ? 1 : 0;

605 
c°r
 +
pv¨ü¡
;

606 
˛í
 -
pv¨ü¡
;

608 i‡(
ha¢ext
 && 
	`°∫ˇ£cmp
(
c°r
,"subscribe\r\n",11) == 0) {

609 
c
->
Êags
 |
REDIS_SUBSCRIBED
;

612 (
p
 = 
	`√xtArgumít
’,&
a°r
,&
Æí
)Ë!
NULL
) {

613 
¢ame
 = 
	`sd¢ewÀn
(
a°r
,
Æí
);

614 i‡(
pv¨ü¡
)

615 
ªt
 = 
	`di˘Rïœ˚
(
ac
->
sub
.
∑âîns
,
¢ame
,&
cb
);

617 
ªt
 = 
	`di˘Rïœ˚
(
ac
->
sub
.
ch™√ls
,
¢ame
,&
cb
);

619 i‡(
ªt
 =0Ë
	`sds‰ì
(
¢ame
);

621 } i‡(
	`°∫ˇ£cmp
(
c°r
,"unsubscribe\r\n",13) == 0) {

624 i‡(!(
c
->
Êags
 & 
REDIS_SUBSCRIBED
)Ë 
REDIS_ERR
;

629 } if(
	`°∫ˇ£cmp
(
c°r
,"monitor\r\n",9) == 0) {

631 
c
->
Êags
 |
REDIS_MONITORING
;

632 
	`__ªdisPushCÆlback
(&
ac
->
ª∂õs
,&
cb
);

634 i‡(
c
->
Êags
 & 
REDIS_SUBSCRIBED
)

637 
	`__ªdisPushCÆlback
(&
ac
->
sub
.
övÆid
,&
cb
);

639 
	`__ªdisPushCÆlback
(&
ac
->
ª∂õs
,&
cb
);

642 
	`__ªdisAµídComm™d
(
c
,
cmd
,
Àn
);

645 
	`_EL_ADD_WRITE
(
ac
);

647  
REDIS_OK
;

648 
	}
}

650 
	$ªdisvAsyncComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

651 *
cmd
;

652 
Àn
;

653 
°©us
;

654 
Àn
 = 
	`ªdisvF‹m©Comm™d
(&
cmd
,
f‹m©
,
≠
);

657 i‡(
Àn
 < 0)

658  
REDIS_ERR
;

660 
°©us
 = 
	`__ªdisAsyncComm™d
(
ac
,
‚
,
¥ivd©a
,
cmd
,
Àn
);

661 
	`‰ì
(
cmd
);

662  
°©us
;

663 
	}
}

665 
	$ªdisAsyncComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
f‹m©
, ...) {

666 
va_li°
 
≠
;

667 
°©us
;

668 
	`va_°¨t
(
≠
,
f‹m©
);

669 
°©us
 = 
	`ªdisvAsyncComm™d
(
ac
,
‚
,
¥ivd©a
,
f‹m©
,
≠
);

670 
	`va_íd
(
≠
);

671  
°©us
;

672 
	}
}

674 
	$ªdisAsyncComm™dArgv
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

675 
sds
 
cmd
;

676 
Àn
;

677 
°©us
;

678 
Àn
 = 
	`ªdisF‹m©SdsComm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
¨gvÀn
);

679 
°©us
 = 
	`__ªdisAsyncComm™d
(
ac
,
‚
,
¥ivd©a
,
cmd
,
Àn
);

680 
	`sds‰ì
(
cmd
);

681  
°©us
;

682 
	}
}

684 
	$ªdisAsyncF‹m©ãdComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
cmd
, 
size_t
 
Àn
) {

685 
°©us
 = 
	`__ªdisAsyncComm™d
(
ac
,
‚
,
¥ivd©a
,
cmd
,
Àn
);

686  
°©us
;

687 
	}
}

	@dep/hiredis-0.13.3/async.h

32 #i‚de‡
__HIREDIS_ASYNC_H


33 
	#__HIREDIS_ASYNC_H


	)

34 
	~"húedis.h
"

36 #ifde‡
__˝lu•lus


40 
ªdisAsyncC⁄ãxt
;

41 
di˘
;

44 (
ªdisCÆlbackFn
)(
	tªdisAsyncC⁄ãxt
*, *, *);

45 
	sªdisCÆlback
 {

46 
ªdisCÆlback
 *
√xt
;

47 
ªdisCÆlbackFn
 *
‚
;

48 *
¥ivd©a
;

49 } 
	tªdisCÆlback
;

52 
	sªdisCÆlbackLi°
 {

53 
ªdisCÆlback
 *
hód
, *
èû
;

54 } 
	tªdisCÆlbackLi°
;

57 (
ªdisDisc⁄√˘CÆlback
)(c⁄° 
	tªdisAsyncC⁄ãxt
*, 
	t°©us
);

58 (
ªdisC⁄√˘CÆlback
)(c⁄° 
	tªdisAsyncC⁄ãxt
*, 
	t°©us
);

61 
	sªdisAsyncC⁄ãxt
 {

63 
ªdisC⁄ãxt
 
c
;

66 
îr
;

67 *
îr°r
;

70 *
d©a
;

74 *
d©a
;

78 (*
addRód
)(*
¥ivd©a
);

79 (*
dñRód
)(*
¥ivd©a
);

80 (*
addWrôe
)(*
¥ivd©a
);

81 (*
dñWrôe
)(*
¥ivd©a
);

82 (*
˛ónup
)(*
¥ivd©a
);

83 } 
ev
;

87 
ªdisDisc⁄√˘CÆlback
 *
⁄Disc⁄√˘
;

90 
ªdisC⁄√˘CÆlback
 *
⁄C⁄√˘
;

93 
ªdisCÆlbackLi°
 
ª∂õs
;

97 
ªdisCÆlbackLi°
 
övÆid
;

98 
di˘
 *
ch™√ls
;

99 
di˘
 *
∑âîns
;

100 } 
sub
;

101 } 
	tªdisAsyncC⁄ãxt
;

104 
ªdisAsyncC⁄ãxt
 *
ªdisAsyncC⁄√˘
(c⁄° *
ù
, 
p‹t
);

105 
ªdisAsyncC⁄ãxt
 *
ªdisAsyncC⁄√˘Böd
(c⁄° *
ù
, 
p‹t
, c⁄° *
sour˚_addr
);

106 
ªdisAsyncC⁄ãxt
 *
ªdisAsyncC⁄√˘BödWôhReu£
(c⁄° *
ù
, 
p‹t
,

107 c⁄° *
sour˚_addr
);

108 
ªdisAsyncC⁄ãxt
 *
ªdisAsyncC⁄√˘Unix
(c⁄° *
∑th
);

109 
ªdisAsyncSëC⁄√˘CÆlback
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisC⁄√˘CÆlback
 *
‚
);

110 
ªdisAsyncSëDisc⁄√˘CÆlback
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisDisc⁄√˘CÆlback
 *
‚
);

111 
ªdisAsyncDisc⁄√˘
(
ªdisAsyncC⁄ãxt
 *
ac
);

112 
ªdisAsyncFªe
(
ªdisAsyncC⁄ãxt
 *
ac
);

115 
ªdisAsyncH™dÀRód
(
ªdisAsyncC⁄ãxt
 *
ac
);

116 
ªdisAsyncH™dÀWrôe
(
ªdisAsyncC⁄ãxt
 *
ac
);

120 
ªdisvAsyncComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

121 
ªdisAsyncComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
f‹m©
, ...);

122 
ªdisAsyncComm™dArgv
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

123 
ªdisAsyncF‹m©ãdComm™d
(
ªdisAsyncC⁄ãxt
 *
ac
, 
ªdisCÆlbackFn
 *
‚
, *
¥ivd©a
, c⁄° *
cmd
, 
size_t
 
Àn
);

125 #ifde‡
__˝lu•lus


	@dep/hiredis-0.13.3/dict.c

36 
	~"fma¸os.h
"

37 
	~<°dlib.h
>

38 
	~<as£π.h
>

39 
	~<limôs.h
>

40 
	~"di˘.h
"

44 
_di˘Ex∑ndIfNìded
(
di˘
 *
ht
);

45 
_di˘NextPowî
(
size
);

46 
_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
);

47 
_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

53 
	$di˘GíHashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

54 
hash
 = 5381;

56 
Àn
--)

57 
hash
 = ((hash << 5Ë+ hashË+ (*
buf
++);

58  
hash
;

59 
	}
}

65 
	$_di˘Re£t
(
di˘
 *
ht
) {

66 
ht
->
èbÀ
 = 
NULL
;

67 
ht
->
size
 = 0;

68 
ht
->
sizemask
 = 0;

69 
ht
->
u£d
 = 0;

70 
	}
}

73 
di˘
 *
	$di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
) {

74 
di˘
 *
ht
 = 
	`mÆloc
((*ht));

75 
	`_di˘Inô
(
ht
,
ty≥
,
¥ivD©aPå
);

76  
ht
;

77 
	}
}

80 
	$_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
) {

81 
	`_di˘Re£t
(
ht
);

82 
ht
->
ty≥
 =Åype;

83 
ht
->
¥ivd©a
 = 
¥ivD©aPå
;

84  
DICT_OK
;

85 
	}
}

88 
	$di˘Ex∑nd
(
di˘
 *
ht
, 
size
) {

89 
di˘
 
n
;

90 
ªÆsize
 = 
	`_di˘NextPowî
(
size
), 
i
;

94 i‡(
ht
->
u£d
 > 
size
)

95  
DICT_ERR
;

97 
	`_di˘Inô
(&
n
, 
ht
->
ty≥
, ht->
¥ivd©a
);

98 
n
.
size
 = 
ªÆsize
;

99 
n
.
sizemask
 = 
ªÆsize
-1;

100 
n
.
èbÀ
 = 
	`ˇŒoc
(
ªÆsize
,(
di˘E¡ry
*));

105 
n
.
u£d
 = 
ht
->used;

106 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

107 
di˘E¡ry
 *
he
, *
√xtHe
;

109 i‡(
ht
->
èbÀ
[
i
] =
NULL
) ;

112 
he
 = 
ht
->
èbÀ
[
i
];

113 
he
) {

114 
h
;

116 
√xtHe
 = 
he
->
√xt
;

118 
h
 = 
	`di˘HashKey
(
ht
, 
he
->
key
Ë& 
n
.
sizemask
;

119 
he
->
√xt
 = 
n
.
èbÀ
[
h
];

120 
n
.
èbÀ
[
h
] = 
he
;

121 
ht
->
u£d
--;

123 
he
 = 
√xtHe
;

126 
	`as£π
(
ht
->
u£d
 == 0);

127 
	`‰ì
(
ht
->
èbÀ
);

130 *
ht
 = 
n
;

131  
DICT_OK
;

132 
	}
}

135 
	$di˘Add
(
di˘
 *
ht
, *
key
, *
vÆ
) {

136 
ödex
;

137 
di˘E¡ry
 *
íåy
;

141 i‡((
ödex
 = 
	`_di˘KeyIndex
(
ht
, 
key
)) == -1)

142  
DICT_ERR
;

145 
íåy
 = 
	`mÆloc
((*entry));

146 
íåy
->
√xt
 = 
ht
->
èbÀ
[
ödex
];

147 
ht
->
èbÀ
[
ödex
] = 
íåy
;

150 
	`di˘SëHashKey
(
ht
, 
íåy
, 
key
);

151 
	`di˘SëHashVÆ
(
ht
, 
íåy
, 
vÆ
);

152 
ht
->
u£d
++;

153  
DICT_OK
;

154 
	}
}

160 
	$di˘Rïœ˚
(
di˘
 *
ht
, *
key
, *
vÆ
) {

161 
di˘E¡ry
 *
íåy
, 
auxíåy
;

165 i‡(
	`di˘Add
(
ht
, 
key
, 
vÆ
Ë=
DICT_OK
)

168 
íåy
 = 
	`di˘Föd
(
ht
, 
key
);

175 
auxíåy
 = *
íåy
;

176 
	`di˘SëHashVÆ
(
ht
, 
íåy
, 
vÆ
);

177 
	`di˘FªeE¡ryVÆ
(
ht
, &
auxíåy
);

179 
	}
}

182 
	$di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
) {

183 
h
;

184 
di˘E¡ry
 *
de
, *
¥evde
;

186 i‡(
ht
->
size
 == 0)

187  
DICT_ERR
;

188 
h
 = 
	`di˘HashKey
(
ht
, 
key
Ë& ht->
sizemask
;

189 
de
 = 
ht
->
èbÀ
[
h
];

191 
¥evde
 = 
NULL
;

192 
de
) {

193 i‡(
	`di˘Com∑ªHashKeys
(
ht
,
key
,
de
->key)) {

195 i‡(
¥evde
)

196 
¥evde
->
√xt
 = 
de
->next;

198 
ht
->
èbÀ
[
h
] = 
de
->
√xt
;

200 
	`di˘FªeE¡ryKey
(
ht
,
de
);

201 
	`di˘FªeE¡ryVÆ
(
ht
,
de
);

202 
	`‰ì
(
de
);

203 
ht
->
u£d
--;

204  
DICT_OK
;

206 
¥evde
 = 
de
;

207 
de
 = de->
√xt
;

209  
DICT_ERR
;

210 
	}
}

213 
	$_di˘CÀ¨
(
di˘
 *
ht
) {

214 
i
;

217 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

218 
di˘E¡ry
 *
he
, *
√xtHe
;

220 i‡((
he
 = 
ht
->
èbÀ
[
i
]Ë=
NULL
) ;

221 
he
) {

222 
√xtHe
 = 
he
->
√xt
;

223 
	`di˘FªeE¡ryKey
(
ht
, 
he
);

224 
	`di˘FªeE¡ryVÆ
(
ht
, 
he
);

225 
	`‰ì
(
he
);

226 
ht
->
u£d
--;

227 
he
 = 
√xtHe
;

231 
	`‰ì
(
ht
->
èbÀ
);

233 
	`_di˘Re£t
(
ht
);

234  
DICT_OK
;

235 
	}
}

238 
	$di˘Rñó£
(
di˘
 *
ht
) {

239 
	`_di˘CÀ¨
(
ht
);

240 
	`‰ì
(
ht
);

241 
	}
}

243 
di˘E¡ry
 *
	$di˘Föd
(
di˘
 *
ht
, c⁄° *
key
) {

244 
di˘E¡ry
 *
he
;

245 
h
;

247 i‡(
ht
->
size
 =0Ë 
NULL
;

248 
h
 = 
	`di˘HashKey
(
ht
, 
key
Ë& ht->
sizemask
;

249 
he
 = 
ht
->
èbÀ
[
h
];

250 
he
) {

251 i‡(
	`di˘Com∑ªHashKeys
(
ht
, 
key
, 
he
->key))

252  
he
;

253 
he
 = he->
√xt
;

255  
NULL
;

256 
	}
}

258 
di˘Iãøt‹
 *
	$di˘GëIãøt‹
(
di˘
 *
ht
) {

259 
di˘Iãøt‹
 *
ôî
 = 
	`mÆloc
((*iter));

261 
ôî
->
ht
 = ht;

262 
ôî
->
ödex
 = -1;

263 
ôî
->
íåy
 = 
NULL
;

264 
ôî
->
√xtE¡ry
 = 
NULL
;

265  
ôî
;

266 
	}
}

268 
di˘E¡ry
 *
	$di˘Next
(
di˘Iãøt‹
 *
ôî
) {

270 i‡(
ôî
->
íåy
 =
NULL
) {

271 
ôî
->
ödex
++;

272 i‡(
ôî
->
ödex
 >=

273 (sig√d)
ôî
->
ht
->
size
) ;

274 
ôî
->
íåy
 = iãr->
ht
->
èbÀ
[ôî->
ödex
];

276 
ôî
->
íåy
 = iãr->
√xtE¡ry
;

278 i‡(
ôî
->
íåy
) {

281 
ôî
->
√xtE¡ry
 = iãr->
íåy
->
√xt
;

282  
ôî
->
íåy
;

285  
NULL
;

286 
	}
}

288 
	$di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
) {

289 
	`‰ì
(
ôî
);

290 
	}
}

295 
	$_di˘Ex∑ndIfNìded
(
di˘
 *
ht
) {

298 i‡(
ht
->
size
 == 0)

299  
	`di˘Ex∑nd
(
ht
, 
DICT_HT_INITIAL_SIZE
);

300 i‡(
ht
->
u£d
 =ht->
size
)

301  
	`di˘Ex∑nd
(
ht
, ht->
size
*2);

302  
DICT_OK
;

303 
	}
}

306 
	$_di˘NextPowî
(
size
) {

307 
i
 = 
DICT_HT_INITIAL_SIZE
;

309 i‡(
size
 >
LONG_MAX
)  LONG_MAX;

311 i‡(
i
 >
size
)

312  
i
;

313 
i
 *= 2;

315 
	}
}

320 
	$_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
) {

321 
h
;

322 
di˘E¡ry
 *
he
;

325 i‡(
	`_di˘Ex∑ndIfNìded
(
ht
Ë=
DICT_ERR
)

328 
h
 = 
	`di˘HashKey
(
ht
, 
key
Ë& ht->
sizemask
;

330 
he
 = 
ht
->
èbÀ
[
h
];

331 
he
) {

332 i‡(
	`di˘Com∑ªHashKeys
(
ht
, 
key
, 
he
->key))

334 
he
 = he->
√xt
;

336  
h
;

337 
	}
}

	@dep/hiredis-0.13.3/dict.h

36 #i‚de‡
__DICT_H


37 
	#__DICT_H


	)

39 
	#DICT_OK
 0

	)

40 
	#DICT_ERR
 1

	)

43 
	#DICT_NOTUSED
(
V
Ë((ËV)

	)

45 
	sdi˘E¡ry
 {

46 *
	mkey
;

47 *
	mvÆ
;

48 
di˘E¡ry
 *
	m√xt
;

49 } 
	tdi˘E¡ry
;

51 
	sdi˘Ty≥
 {

52 (*
	mhashFun˘i⁄
)(c⁄° *
	mkey
);

53 *(*
	mkeyDup
)(*
	m¥ivd©a
, c⁄° *
	mkey
);

54 *(*
	mvÆDup
)(*
	m¥ivd©a
, c⁄° *
	mobj
);

55 (*
	mkeyCom∑ª
)(*
	m¥ivd©a
, c⁄° *
	mkey1
, c⁄° *
	mkey2
);

56 (*
	mkeyDe°ru˘‹
)(*
	m¥ivd©a
, *
	mkey
);

57 (*
	mvÆDe°ru˘‹
)(*
	m¥ivd©a
, *
	mobj
);

58 } 
	tdi˘Ty≥
;

60 
	sdi˘
 {

61 
di˘E¡ry
 **
	mèbÀ
;

62 
di˘Ty≥
 *
	mty≥
;

63 
	msize
;

64 
	msizemask
;

65 
	mu£d
;

66 *
	m¥ivd©a
;

67 } 
	tdi˘
;

69 
	sdi˘Iãøt‹
 {

70 
di˘
 *
	mht
;

71 
	mödex
;

72 
di˘E¡ry
 *
	míåy
, *
	m√xtE¡ry
;

73 } 
	tdi˘Iãøt‹
;

76 
	#DICT_HT_INITIAL_SIZE
 4

	)

79 
	#di˘FªeE¡ryVÆ
(
ht
, 
íåy
) \

80 i‡((
ht
)->
ty≥
->
vÆDe°ru˘‹
) \

81 (
ht
)->
ty≥
->
	`vÆDe°ru˘‹
((ht)->
¥ivd©a
, (
íåy
)->
vÆ
)

	)

83 
	#di˘SëHashVÆ
(
ht
, 
íåy
, 
_vÆ_
) do { \

84 i‡((
ht
)->
ty≥
->
vÆDup
) \

85 
íåy
->
vÆ
 = (
ht
)->
ty≥
->
	`vÆDup
((ht)->
¥ivd©a
, 
_vÆ_
); \

87 
íåy
->
vÆ
 = (
_vÆ_
); \

88 } 0)

	)

90 
	#di˘FªeE¡ryKey
(
ht
, 
íåy
) \

91 i‡((
ht
)->
ty≥
->
keyDe°ru˘‹
) \

92 (
ht
)->
ty≥
->
	`keyDe°ru˘‹
((ht)->
¥ivd©a
, (
íåy
)->
key
)

	)

94 
	#di˘SëHashKey
(
ht
, 
íåy
, 
_key_
) do { \

95 i‡((
ht
)->
ty≥
->
keyDup
) \

96 
íåy
->
key
 = (
ht
)->
ty≥
->
	`keyDup
((ht)->
¥ivd©a
, 
_key_
); \

98 
íåy
->
key
 = (
_key_
); \

99 } 0)

	)

101 
	#di˘Com∑ªHashKeys
(
ht
, 
key1
, 
key2
) \

102 (((
ht
)->
ty≥
->
keyCom∑ª
) ? \

103 (
ht
)->
ty≥
->
	`keyCom∑ª
((ht)->
¥ivd©a
, 
key1
, 
key2
) : \

104 (
key1
Ë=(
key2
))

	)

106 
	#di˘HashKey
(
ht
, 
key
Ë(ht)->
ty≥
->
	`hashFun˘i⁄
(key)

	)

108 
	#di˘GëE¡ryKey
(
he
Ë((he)->
key
)

	)

109 
	#di˘GëE¡ryVÆ
(
he
Ë((he)->
vÆ
)

	)

110 
	#di˘SlŸs
(
ht
Ë((ht)->
size
)

	)

111 
	#di˘Size
(
ht
Ë((ht)->
u£d
)

	)

114 
di˘GíHashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

115 
di˘
 *
di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

116 
di˘Ex∑nd
(
di˘
 *
ht
, 
size
);

117 
di˘Add
(
di˘
 *
ht
, *
key
, *
vÆ
);

118 
di˘Rïœ˚
(
di˘
 *
ht
, *
key
, *
vÆ
);

119 
di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
);

120 
di˘Rñó£
(
di˘
 *
ht
);

121 
di˘E¡ry
 * 
di˘Föd
(
di˘
 *
ht
, c⁄° *
key
);

122 
di˘Iãøt‹
 *
di˘GëIãøt‹
(
di˘
 *
ht
);

123 
di˘E¡ry
 *
di˘Next
(
di˘Iãøt‹
 *
ôî
);

124 
di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
);

	@dep/hiredis-0.13.3/examples/example-ae.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

6 
	~<húedis.h
>

7 
	~<async.h
>

8 
	~<ad≠ãrs/´.h
>

11 
´EvítLo›
 *
	glo›
;

13 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

14 
ªdisRïly
 *
ª∂y
 = 
r
;

15 i‡(
ª∂y
 =
NULL
) ;

16 
	`¥ötf
("¨gv[%s]: %s\n", (*)
¥ivd©a
, 
ª∂y
->
°r
);

19 
	`ªdisAsyncDisc⁄√˘
(
c
);

20 
	}
}

22 
	$c⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

23 i‡(
°©us
 !
REDIS_OK
) {

24 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

25 
	`´St›
(
lo›
);

29 
	`¥ötf
("Connected...\n");

30 
	}
}

32 
	$disc⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

33 i‡(
°©us
 !
REDIS_OK
) {

34 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

35 
	`´St›
(
lo›
);

39 
	`¥ötf
("Disconnected...\n");

40 
	`´St›
(
lo›
);

41 
	}
}

43 
	$maö
 (
¨gc
, **
¨gv
) {

44 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

46 
ªdisAsyncC⁄ãxt
 *
c
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

47 i‡(
c
->
îr
) {

49 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

53 
lo›
 = 
	`´Cª©eEvítLo›
(64);

54 
	`ªdisAeAâach
(
lo›
, 
c
);

55 
	`ªdisAsyncSëC⁄√˘CÆlback
(
c
,
c⁄√˘CÆlback
);

56 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
c
,
disc⁄√˘CÆlback
);

57 
	`ªdisAsyncComm™d
(
c
, 
NULL
, NULL, "SET key %b", 
¨gv
[
¨gc
-1], 
	`°æí
(argv[argc-1]));

58 
	`ªdisAsyncComm™d
(
c
, 
gëCÆlback
, (*)"end-1", "GET key");

59 
	`´Maö
(
lo›
);

61 
	}
}

	@dep/hiredis-0.13.3/examples/example-glib.c

1 
	~<°dlib.h
>

3 
	~<húedis.h
>

4 
	~<async.h
>

5 
	~<ad≠ãrs/glib.h
>

7 
GMaöLo›
 *
	gmaölo›
;

10 
	$c⁄√˘_cb
 (c⁄° 
ªdisAsyncC⁄ãxt
 *
ac
 
G_GNUC_UNUSED
,

11 
°©us
)

13 i‡(
°©us
 !
REDIS_OK
) {

14 
	`g_¥öãº
("FaûedÅÿc⁄√˘: %s\n", 
ac
->
îr°r
);

15 
	`g_maö_lo›_quô
(
maölo›
);

17 
	`g_¥öãº
("Connected...\n");

19 
	}
}

22 
	$disc⁄√˘_cb
 (c⁄° 
ªdisAsyncC⁄ãxt
 *
ac
 
G_GNUC_UNUSED
,

23 
°©us
)

25 i‡(
°©us
 !
REDIS_OK
) {

26 
	`g_îr‹
("FaûedÅÿdisc⁄√˘: %s", 
ac
->
îr°r
);

28 
	`g_¥öãº
("Disconnected...\n");

29 
	`g_maö_lo›_quô
(
maölo›
);

31 
	}
}

34 
	$comm™d_cb
(
ªdisAsyncC⁄ãxt
 *
ac
,

35 
gpoöãr
 
r
,

36 
gpoöãr
 
u£r_d©a
 
G_GNUC_UNUSED
)

38 
ªdisRïly
 *
ª∂y
 = 
r
;

40 i‡(
ª∂y
) {

41 
	`g_¥öt
("REPLY: %s\n", 
ª∂y
->
°r
);

44 
	`ªdisAsyncDisc⁄√˘
(
ac
);

45 
	}
}

47 
göt


48 
	$maö
 (
göt
 
¨gc
 
G_GNUC_UNUSED
,

49 
gch¨
 *
¨gv
[] 
G_GNUC_UNUSED
)

51 
ªdisAsyncC⁄ãxt
 *
ac
;

52 
GMaöC⁄ãxt
 *
c⁄ãxt
 = 
NULL
;

53 
GSour˚
 *
sour˚
;

55 
ac
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

56 i‡(
ac
->
îr
) {

57 
	`g_¥öãº
("%s\n", 
ac
->
îr°r
);

58 
	`exô
(
EXIT_FAILURE
);

61 
sour˚
 = 
	`ªdis_sour˚_√w
(
ac
);

62 
maölo›
 = 
	`g_maö_lo›_√w
(
c⁄ãxt
, 
FALSE
);

63 
	`g_sour˚_©èch
(
sour˚
, 
c⁄ãxt
);

65 
	`ªdisAsyncSëC⁄√˘CÆlback
(
ac
, 
c⁄√˘_cb
);

66 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
ac
, 
disc⁄√˘_cb
);

67 
	`ªdisAsyncComm™d
(
ac
, 
comm™d_cb
, 
NULL
, "SET key 1234");

68 
	`ªdisAsyncComm™d
(
ac
, 
comm™d_cb
, 
NULL
, "GET key");

70 
	`g_maö_lo›_run
(
maölo›
);

72  
EXIT_SUCCESS
;

73 
	}
}

	@dep/hiredis-0.13.3/examples/example-ivykis.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

6 
	~<húedis.h
>

7 
	~<async.h
>

8 
	~<ad≠ãrs/ivykis.h
>

10 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

11 
ªdisRïly
 *
ª∂y
 = 
r
;

12 i‡(
ª∂y
 =
NULL
) ;

13 
	`¥ötf
("¨gv[%s]: %s\n", (*)
¥ivd©a
, 
ª∂y
->
°r
);

16 
	`ªdisAsyncDisc⁄√˘
(
c
);

17 
	}
}

19 
	$c⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

20 i‡(
°©us
 !
REDIS_OK
) {

21 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

24 
	`¥ötf
("Connected...\n");

25 
	}
}

27 
	$disc⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

28 i‡(
°©us
 !
REDIS_OK
) {

29 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

32 
	`¥ötf
("Disconnected...\n");

33 
	}
}

35 
	$maö
 (
¨gc
, **
¨gv
) {

36 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

38 
	`iv_öô
();

40 
ªdisAsyncC⁄ãxt
 *
c
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

41 i‡(
c
->
îr
) {

43 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

47 
	`ªdisIvykisAâach
(
c
);

48 
	`ªdisAsyncSëC⁄√˘CÆlback
(
c
,
c⁄√˘CÆlback
);

49 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
c
,
disc⁄√˘CÆlback
);

50 
	`ªdisAsyncComm™d
(
c
, 
NULL
, NULL, "SET key %b", 
¨gv
[
¨gc
-1], 
	`°æí
(argv[argc-1]));

51 
	`ªdisAsyncComm™d
(
c
, 
gëCÆlback
, (*)"end-1", "GET key");

53 
	`iv_maö
();

55 
	`iv_deöô
();

58 
	}
}

	@dep/hiredis-0.13.3/examples/example-libev.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

6 
	~<húedis.h
>

7 
	~<async.h
>

8 
	~<ad≠ãrs/libev.h
>

10 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

11 
ªdisRïly
 *
ª∂y
 = 
r
;

12 i‡(
ª∂y
 =
NULL
) ;

13 
	`¥ötf
("¨gv[%s]: %s\n", (*)
¥ivd©a
, 
ª∂y
->
°r
);

16 
	`ªdisAsyncDisc⁄√˘
(
c
);

17 
	}
}

19 
	$c⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

20 i‡(
°©us
 !
REDIS_OK
) {

21 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

24 
	`¥ötf
("Connected...\n");

25 
	}
}

27 
	$disc⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

28 i‡(
°©us
 !
REDIS_OK
) {

29 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

32 
	`¥ötf
("Disconnected...\n");

33 
	}
}

35 
	$maö
 (
¨gc
, **
¨gv
) {

36 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

38 
ªdisAsyncC⁄ãxt
 *
c
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

39 i‡(
c
->
îr
) {

41 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

45 
	`ªdisLibevAâach
(
EV_DEFAULT_
 
c
);

46 
	`ªdisAsyncSëC⁄√˘CÆlback
(
c
,
c⁄√˘CÆlback
);

47 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
c
,
disc⁄√˘CÆlback
);

48 
	`ªdisAsyncComm™d
(
c
, 
NULL
, NULL, "SET key %b", 
¨gv
[
¨gc
-1], 
	`°æí
(argv[argc-1]));

49 
	`ªdisAsyncComm™d
(
c
, 
gëCÆlback
, (*)"end-1", "GET key");

50 
	`ev_lo›
(
EV_DEFAULT_
 0);

52 
	}
}

	@dep/hiredis-0.13.3/examples/example-libevent.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

6 
	~<húedis.h
>

7 
	~<async.h
>

8 
	~<ad≠ãrs/libevít.h
>

10 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

11 
ªdisRïly
 *
ª∂y
 = 
r
;

12 i‡(
ª∂y
 =
NULL
) ;

13 
	`¥ötf
("¨gv[%s]: %s\n", (*)
¥ivd©a
, 
ª∂y
->
°r
);

16 
	`ªdisAsyncDisc⁄√˘
(
c
);

17 
	}
}

19 
	$c⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

20 i‡(
°©us
 !
REDIS_OK
) {

21 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

24 
	`¥ötf
("Connected...\n");

25 
	}
}

27 
	$disc⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

28 i‡(
°©us
 !
REDIS_OK
) {

29 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

32 
	`¥ötf
("Disconnected...\n");

33 
	}
}

35 
	$maö
 (
¨gc
, **
¨gv
) {

36 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

37 
evít_ba£
 *
ba£
 = 
	`evít_ba£_√w
();

39 
ªdisAsyncC⁄ãxt
 *
c
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

40 i‡(
c
->
îr
) {

42 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

46 
	`ªdisLibevítAâach
(
c
,
ba£
);

47 
	`ªdisAsyncSëC⁄√˘CÆlback
(
c
,
c⁄√˘CÆlback
);

48 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
c
,
disc⁄√˘CÆlback
);

49 
	`ªdisAsyncComm™d
(
c
, 
NULL
, NULL, "SET key %b", 
¨gv
[
¨gc
-1], 
	`°æí
(argv[argc-1]));

50 
	`ªdisAsyncComm™d
(
c
, 
gëCÆlback
, (*)"end-1", "GET key");

51 
	`evít_ba£_di•©ch
(
ba£
);

53 
	}
}

	@dep/hiredis-0.13.3/examples/example-libuv.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

6 
	~<húedis.h
>

7 
	~<async.h
>

8 
	~<ad≠ãrs/libuv.h
>

10 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

11 
ªdisRïly
 *
ª∂y
 = 
r
;

12 i‡(
ª∂y
 =
NULL
) ;

13 
	`¥ötf
("¨gv[%s]: %s\n", (*)
¥ivd©a
, 
ª∂y
->
°r
);

16 
	`ªdisAsyncDisc⁄√˘
(
c
);

17 
	}
}

19 
	$c⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

20 i‡(
°©us
 !
REDIS_OK
) {

21 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

24 
	`¥ötf
("Connected...\n");

25 
	}
}

27 
	$disc⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

28 i‡(
°©us
 !
REDIS_OK
) {

29 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

32 
	`¥ötf
("Disconnected...\n");

33 
	}
}

35 
	$maö
 (
¨gc
, **
¨gv
) {

36 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

37 
uv_lo›_t
* 
lo›
 = 
	`uv_deÁu…_lo›
();

39 
ªdisAsyncC⁄ãxt
 *
c
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

40 i‡(
c
->
îr
) {

42 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

46 
	`ªdisLibuvAâach
(
c
,
lo›
);

47 
	`ªdisAsyncSëC⁄√˘CÆlback
(
c
,
c⁄√˘CÆlback
);

48 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
c
,
disc⁄√˘CÆlback
);

49 
	`ªdisAsyncComm™d
(
c
, 
NULL
, NULL, "SET key %b", 
¨gv
[
¨gc
-1], 
	`°æí
(argv[argc-1]));

50 
	`ªdisAsyncComm™d
(
c
, 
gëCÆlback
, (*)"end-1", "GET key");

51 
	`uv_run
(
lo›
, 
UV_RUN_DEFAULT
);

53 
	}
}

	@dep/hiredis-0.13.3/examples/example-macosx.c

6 
	~<°dio.h
>

8 
	~<húedis.h
>

9 
	~<async.h
>

10 
	~<ad≠ãrs/macosx.h
>

12 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

13 
ªdisRïly
 *
ª∂y
 = 
r
;

14 i‡(
ª∂y
 =
NULL
) ;

15 
	`¥ötf
("¨gv[%s]: %s\n", (*)
¥ivd©a
, 
ª∂y
->
°r
);

18 
	`ªdisAsyncDisc⁄√˘
(
c
);

19 
	}
}

21 
	$c⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

22 i‡(
°©us
 !
REDIS_OK
) {

23 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

26 
	`¥ötf
("Connected...\n");

27 
	}
}

29 
	$disc⁄√˘CÆlback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

30 i‡(
°©us
 !
REDIS_OK
) {

31 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

34 
	`CFRunLo›St›
(
	`CFRunLo›GëCuºít
());

35 
	`¥ötf
("Disconnected...\n");

36 
	}
}

38 
	$maö
 (
¨gc
, **
¨gv
) {

39 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

41 
CFRunLo›Ref
 
lo›
 = 
	`CFRunLo›GëCuºít
();

42 if–!
lo›
 ) {

43 
	`¥ötf
("Error: Cannot get currentÑunÜoop\n");

47 
ªdisAsyncC⁄ãxt
 *
c
 = 
	`ªdisAsyncC⁄√˘
("127.0.0.1", 6379);

48 i‡(
c
->
îr
) {

50 
	`¥ötf
("Eº‹: %s\n", 
c
->
îr°r
);

54 
	`ªdisMacOSAâach
(
c
, 
lo›
);

56 
	`ªdisAsyncSëC⁄√˘CÆlback
(
c
,
c⁄√˘CÆlback
);

57 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
c
,
disc⁄√˘CÆlback
);

59 
	`ªdisAsyncComm™d
(
c
, 
NULL
, NULL, "SET key %b", 
¨gv
[
¨gc
-1], 
	`°æí
(argv[argc-1]));

60 
	`ªdisAsyncComm™d
(
c
, 
gëCÆlback
, (*)"end-1", "GET key");

62 
	`CFRunLo›Run
();

65 
	}
}

	@dep/hiredis-0.13.3/examples/example-qt.cpp

1 
	~<io°ªam
>

2 
usög
 
«me•a˚
 
	g°d
;

4 
	~<QC‹eAµliˇti⁄
>

5 
	~<QTimî
>

7 
	~"exam∂e-qt.h
"

9 
	$gëCÆlback
(
ªdisAsyncC⁄ãxt
 *, * 
r
, * 
¥ivd©a
) {

11 
ªdisRïly
 * 
ª∂y
 = 
°©ic_ˇ°
<ªdisRïly *>(
r
);

12 
Exam∂eQt
 * 
ex
 = 
°©ic_ˇ°
<Exam∂eQà*>(
¥ivd©a
);

13 i‡(
ª∂y
 =
nuŒ±r
 || 
ex
 ==Çullptr) ;

15 
cout
 << "key: " << 
ª∂y
->
°r
 << 
ídl
;

17 
ex
->
	`föish
();

18 
	}
}

20 
	gExam∂eQt
::
	$run
() {

22 
m_˘x
 = 
	`ªdisAsyncC⁄√˘
("localhost", 6379);

24 i‡(
m_˘x
->
îr
) {

25 
˚º
 << "Eº‹: " << 
m_˘x
->
îr°r
 << 
ídl
;

26 
	`ªdisAsyncFªe
(
m_˘x
);

27 
emô
 
	`föished
();

30 
m_ad≠ãr
.
	`£tC⁄ãxt
(
m_˘x
);

32 
	`ªdisAsyncComm™d
(
m_˘x
, 
NULL
, NULL, "SET key %s", 
m_vÆue
);

33 
	`ªdisAsyncComm™d
(
m_˘x
, 
gëCÆlback
, 
this
, "GET key");

34 
	}
}

36 
	$maö
 (
¨gc
, **
¨gv
) {

38 
QC‹eAµliˇti⁄
 
	`≠p
(
¨gc
, 
¨gv
);

40 
Exam∂eQt
 
	`exam∂e
(
¨gv
[
¨gc
-1]);

42 
QObje˘
::
	`c⁄√˘
(&
exam∂e
, 
	`SIGNAL
(
	`föished
()), &
≠p
, 
	`SLOT
(
	`quô
()));

43 
QTimî
::
	`sögÀShŸ
(0, &
exam∂e
, 
	`SLOT
(
	`run
()));

45  
≠p
.
	`exec
();

46 
	}
}

	@dep/hiredis-0.13.3/examples/example-qt.h

1 #i‚de‡
__HIREDIS_EXAMPLE_QT_H


2 
	#__HIREDIS_EXAMPLE_QT_H


	)

4 
	~<ad≠ãrs/qt.h
>

6 ˛as†
	cExam∂eQt
 : 
public
 
QObje˘
 {

8 
Q_OBJECT


10 
public
:

11 
	$Exam∂eQt
(c⁄° * 
vÆue
, 
QObje˘
 * 
∑ª¡
 = 0)

12 : 
	`QObje˘
(
∑ª¡
), 
	$m_vÆue
(
vÆue
) {}

14 
sig«ls
:

15 
	`föished
();

17 
public
 
¶Ÿs
:

18 
	`run
();

20 
¥iv©e
:

21 
	$föish
(Ë{ 
emô
 
	`föished
(); 
	}
}

23 
	g¥iv©e
:

24 c⁄° * 
m_vÆue
;

25 
ªdisAsyncC⁄ãxt
 * 
	gm_˘x
;

26 
RedisQtAd≠ãr
 
	gm_ad≠ãr
;

28 
‰õnd


29 
gëCÆlback
(
ªdisAsyncC⁄ãxt
 *, *, *);

	@dep/hiredis-0.13.3/examples/example.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<húedis.h
>

7 
	$maö
(
¨gc
, **
¨gv
) {

8 
j
;

9 
ªdisC⁄ãxt
 *
c
;

10 
ªdisRïly
 *
ª∂y
;

11 c⁄° *
ho°«me
 = (
¨gc
 > 1Ë? 
¨gv
[1] : "127.0.0.1";

12 
p‹t
 = (
¨gc
 > 2Ë? 
	`©oi
(
¨gv
[2]) : 6379;

14 
timevÆ
 
timeout
 = { 1, 500000 };

15 
c
 = 
	`ªdisC⁄√˘WôhTimeout
(
ho°«me
, 
p‹t
, 
timeout
);

16 i‡(
c
 =
NULL
 || c->
îr
) {

17 i‡(
c
) {

18 
	`¥ötf
("C⁄√˘i⁄Éº‹: %s\n", 
c
->
îr°r
);

19 
	`ªdisFªe
(
c
);

21 
	`¥ötf
("ConnectionÉrror: can'tállocateÑedis context\n");

23 
	`exô
(1);

27 
ª∂y
 = 
	`ªdisComm™d
(
c
,"PING");

28 
	`¥ötf
("PING: %s\n", 
ª∂y
->
°r
);

29 
	`‰ìRïlyObje˘
(
ª∂y
);

32 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SET %s %s", "foo", "hello world");

33 
	`¥ötf
("SET: %s\n", 
ª∂y
->
°r
);

34 
	`‰ìRïlyObje˘
(
ª∂y
);

37 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SET %b %b", "b¨", (
size_t
) 3, "hello", (size_t) 5);

38 
	`¥ötf
("SET (bö¨y API): %s\n", 
ª∂y
->
°r
);

39 
	`‰ìRïlyObje˘
(
ª∂y
);

42 
ª∂y
 = 
	`ªdisComm™d
(
c
,"GET foo");

43 
	`¥ötf
("GET foo: %s\n", 
ª∂y
->
°r
);

44 
	`‰ìRïlyObje˘
(
ª∂y
);

46 
ª∂y
 = 
	`ªdisComm™d
(
c
,"INCR counter");

47 
	`¥ötf
("INCR cou¡î: %Œd\n", 
ª∂y
->
öãgî
);

48 
	`‰ìRïlyObje˘
(
ª∂y
);

50 
ª∂y
 = 
	`ªdisComm™d
(
c
,"INCR counter");

51 
	`¥ötf
("INCR cou¡î: %Œd\n", 
ª∂y
->
öãgî
);

52 
	`‰ìRïlyObje˘
(
ª∂y
);

55 
ª∂y
 = 
	`ªdisComm™d
(
c
,"DEL mylist");

56 
	`‰ìRïlyObje˘
(
ª∂y
);

57 
j
 = 0; j < 10; j++) {

58 
buf
[64];

60 
	`¢¥ötf
(
buf
,64,"%d",
j
);

61 
ª∂y
 = 
	`ªdisComm™d
(
c
,"LPUSH myli°ÉÀmít-%s", 
buf
);

62 
	`‰ìRïlyObje˘
(
ª∂y
);

66 
ª∂y
 = 
	`ªdisComm™d
(
c
,"LRANGE mylist 0 -1");

67 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_ARRAY
) {

68 
j
 = 0; j < 
ª∂y
->
ñemíts
; j++) {

69 
	`¥ötf
("%uË%s\n", 
j
, 
ª∂y
->
ñemít
[j]->
°r
);

72 
	`‰ìRïlyObje˘
(
ª∂y
);

75 
	`ªdisFªe
(
c
);

78 
	}
}

	@dep/hiredis-0.13.3/fmacros.h

1 #i‚de‡
__HIREDIS_FMACRO_H


2 
	#__HIREDIS_FMACRO_H


	)

4 #i‡
deföed
(
__löux__
)

5 
	#_BSD_SOURCE


	)

6 
	#_DEFAULT_SOURCE


	)

9 #i‡
deföed
(
__sun__
)

10 
	#_POSIX_C_SOURCE
 200112L

	)

11 #ñi‡
deföed
(
__löux__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
)

12 
	#_XOPEN_SOURCE
 600

	)

14 
	#_XOPEN_SOURCE


	)

17 #i‡
__APPLE__
 && 
__MACH__


18 
	#_OSX


	)

	@dep/hiredis-0.13.3/hiredis.c

34 
	~"fma¸os.h
"

35 
	~<°rög.h
>

36 
	~<°dlib.h
>

37 
	~<uni°d.h
>

38 
	~<as£π.h
>

39 
	~<î∫o.h
>

40 
	~<˘y≥.h
>

42 
	~"húedis.h
"

43 
	~"√t.h
"

44 
	~"sds.h
"

46 
ªdisRïly
 *
¸óãRïlyObje˘
(
ty≥
);

47 *
¸óãSåögObje˘
(c⁄° 
ªdisRódTask
 *
èsk
, *
°r
, 
size_t
 
Àn
);

48 *
¸óãAºayObje˘
(c⁄° 
ªdisRódTask
 *
èsk
, 
ñemíts
);

49 *
¸óãI¡egîObje˘
(c⁄° 
ªdisRódTask
 *
èsk
, 
vÆue
);

50 *
¸óãNûObje˘
(c⁄° 
ªdisRódTask
 *
èsk
);

54 
ªdisRïlyObje˘Fun˘i⁄s
 
	gdeÁu…Fun˘i⁄s
 = {

55 
¸óãSåögObje˘
,

56 
¸óãAºayObje˘
,

57 
¸óãI¡egîObje˘
,

58 
¸óãNûObje˘
,

59 
‰ìRïlyObje˘


63 
ªdisRïly
 *
	$¸óãRïlyObje˘
(
ty≥
) {

64 
ªdisRïly
 *
r
 = 
	`ˇŒoc
(1,(*r));

66 i‡(
r
 =
NULL
)

67  
NULL
;

69 
r
->
ty≥
 =Åype;

70  
r
;

71 
	}
}

74 
	$‰ìRïlyObje˘
(*
ª∂y
) {

75 
ªdisRïly
 *
r
 = 
ª∂y
;

76 
size_t
 
j
;

78 i‡(
r
 =
NULL
)

81 
r
->
ty≥
) {

82 
REDIS_REPLY_INTEGER
:

84 
REDIS_REPLY_ARRAY
:

85 i‡(
r
->
ñemít
 !
NULL
) {

86 
j
 = 0; j < 
r
->
ñemíts
; j++)

87 i‡(
r
->
ñemít
[
j
] !
NULL
)

88 
	`‰ìRïlyObje˘
(
r
->
ñemít
[
j
]);

89 
	`‰ì
(
r
->
ñemít
);

92 
REDIS_REPLY_ERROR
:

93 
REDIS_REPLY_STATUS
:

94 
REDIS_REPLY_STRING
:

95 i‡(
r
->
°r
 !
NULL
)

96 
	`‰ì
(
r
->
°r
);

99 
	`‰ì
(
r
);

100 
	}
}

102 *
	$¸óãSåögObje˘
(c⁄° 
ªdisRódTask
 *
èsk
, *
°r
, 
size_t
 
Àn
) {

103 
ªdisRïly
 *
r
, *
∑ª¡
;

104 *
buf
;

106 
r
 = 
	`¸óãRïlyObje˘
(
èsk
->
ty≥
);

107 i‡(
r
 =
NULL
)

108  
NULL
;

110 
buf
 = 
	`mÆloc
(
Àn
+1);

111 i‡(
buf
 =
NULL
) {

112 
	`‰ìRïlyObje˘
(
r
);

113  
NULL
;

116 
	`as£π
(
èsk
->
ty≥
 =
REDIS_REPLY_ERROR
 ||

117 
èsk
->
ty≥
 =
REDIS_REPLY_STATUS
 ||

118 
èsk
->
ty≥
 =
REDIS_REPLY_STRING
);

121 
	`mem˝y
(
buf
,
°r
,
Àn
);

122 
buf
[
Àn
] = '\0';

123 
r
->
°r
 = 
buf
;

124 
r
->
Àn
 =Üen;

126 i‡(
èsk
->
∑ª¡
) {

127 
∑ª¡
 = 
èsk
->∑ª¡->
obj
;

128 
	`as£π
(
∑ª¡
->
ty≥
 =
REDIS_REPLY_ARRAY
);

129 
∑ª¡
->
ñemít
[
èsk
->
idx
] = 
r
;

131  
r
;

132 
	}
}

134 *
	$¸óãAºayObje˘
(c⁄° 
ªdisRódTask
 *
èsk
, 
ñemíts
) {

135 
ªdisRïly
 *
r
, *
∑ª¡
;

137 
r
 = 
	`¸óãRïlyObje˘
(
REDIS_REPLY_ARRAY
);

138 i‡(
r
 =
NULL
)

139  
NULL
;

141 i‡(
ñemíts
 > 0) {

142 
r
->
ñemít
 = 
	`ˇŒoc
(
ñemíts
,(
ªdisRïly
*));

143 i‡(
r
->
ñemít
 =
NULL
) {

144 
	`‰ìRïlyObje˘
(
r
);

145  
NULL
;

149 
r
->
ñemíts
 =Élements;

151 i‡(
èsk
->
∑ª¡
) {

152 
∑ª¡
 = 
èsk
->∑ª¡->
obj
;

153 
	`as£π
(
∑ª¡
->
ty≥
 =
REDIS_REPLY_ARRAY
);

154 
∑ª¡
->
ñemít
[
èsk
->
idx
] = 
r
;

156  
r
;

157 
	}
}

159 *
	$¸óãI¡egîObje˘
(c⁄° 
ªdisRódTask
 *
èsk
, 
vÆue
) {

160 
ªdisRïly
 *
r
, *
∑ª¡
;

162 
r
 = 
	`¸óãRïlyObje˘
(
REDIS_REPLY_INTEGER
);

163 i‡(
r
 =
NULL
)

164  
NULL
;

166 
r
->
öãgî
 = 
vÆue
;

168 i‡(
èsk
->
∑ª¡
) {

169 
∑ª¡
 = 
èsk
->∑ª¡->
obj
;

170 
	`as£π
(
∑ª¡
->
ty≥
 =
REDIS_REPLY_ARRAY
);

171 
∑ª¡
->
ñemít
[
èsk
->
idx
] = 
r
;

173  
r
;

174 
	}
}

176 *
	$¸óãNûObje˘
(c⁄° 
ªdisRódTask
 *
èsk
) {

177 
ªdisRïly
 *
r
, *
∑ª¡
;

179 
r
 = 
	`¸óãRïlyObje˘
(
REDIS_REPLY_NIL
);

180 i‡(
r
 =
NULL
)

181  
NULL
;

183 i‡(
èsk
->
∑ª¡
) {

184 
∑ª¡
 = 
èsk
->∑ª¡->
obj
;

185 
	`as£π
(
∑ª¡
->
ty≥
 =
REDIS_REPLY_ARRAY
);

186 
∑ª¡
->
ñemít
[
èsk
->
idx
] = 
r
;

188  
r
;

189 
	}
}

193 
uöt32_t
 
	$cou¡Digôs
(
uöt64_t
 
v
) {

194 
uöt32_t
 
ªsu…
 = 1;

196 i‡(
v
 < 10Ë 
ªsu…
;

197 i‡(
v
 < 100Ë 
ªsu…
 + 1;

198 i‡(
v
 < 1000Ë 
ªsu…
 + 2;

199 i‡(
v
 < 10000Ë 
ªsu…
 + 3;

200 
v
 /= 10000U;

201 
ªsu…
 += 4;

203 
	}
}

206 
size_t
 
	$bulkÀn
(
size_t
 
Àn
) {

207  1+
	`cou¡Digôs
(
Àn
)+2+len+2;

208 
	}
}

210 
	$ªdisvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

211 c⁄° *
c
 = 
f‹m©
;

212 *
cmd
 = 
NULL
;

213 
pos
;

214 
sds
 
cuørg
, 
√w¨g
;

215 
touched
 = 0;

216 **
cuørgv
 = 
NULL
, **
√w¨gv
 = NULL;

217 
¨gc
 = 0;

218 
tŸÀn
 = 0;

219 
îr‹_ty≥
 = 0;

220 
j
;

223 i‡(
èrgë
 =
NULL
)

227 
cuørg
 = 
	`sd£m±y
();

228 i‡(
cuørg
 =
NULL
)

231 *
c
 != '\0') {

232 i‡(*
c
 != '%' || c[1] == '\0') {

233 i‡(*
c
 == ' ') {

234 i‡(
touched
) {

235 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

236 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

237 
cuørgv
 = 
√w¨gv
;

238 
cuørgv
[
¨gc
++] = 
cuørg
;

239 
tŸÀn
 +
	`bulkÀn
(
	`sd¶í
(
cuørg
));

242 
cuørg
 = 
	`sd£m±y
();

243 i‡(
cuørg
 =
NULL
Ë
mem‹y_îr
;

244 
touched
 = 0;

247 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
c
,1);

248 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

249 
cuørg
 = 
√w¨g
;

250 
touched
 = 1;

253 *
¨g
;

254 
size_t
 
size
;

257 
√w¨g
 = 
cuørg
;

259 
c
[1]) {

261 
¨g
 = 
	`va_¨g
(
≠
,*);

262 
size
 = 
	`°æí
(
¨g
);

263 i‡(
size
 > 0)

264 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

267 
¨g
 = 
	`va_¨g
(
≠
,*);

268 
size
 = 
	`va_¨g
(
≠
,
size_t
);

269 i‡(
size
 > 0)

270 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

273 
√w¨g
 = 
	`sdsˇt
(
cuørg
,"%");

278 c⁄° 
ötfmts
[] = "diouxX";

279 c⁄° 
Êags
[] = "#0-+ ";

280 
_f‹m©
[16];

281 c⁄° *
_p
 = 
c
+1;

282 
size_t
 
_l
 = 0;

283 
va_li°
 
_˝y
;

286 *
_p
 !'\0' && 
	`°rchr
(
Êags
,*_pË!
NULL
) _p++;

289 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

292 i‡(*
_p
 == '.') {

293 
_p
++;

294 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

298 
	`va_c›y
(
_˝y
,
≠
);

301 i‡(
	`°rchr
(
ötfmts
,*
_p
Ë!
NULL
) {

302 
	`va_¨g
(
≠
,);

303 
fmt_vÆid
;

307 i‡(
	`°rchr
("eEfFgGaA",*
_p
Ë!
NULL
) {

308 
	`va_¨g
(
≠
,);

309 
fmt_vÆid
;

313 i‡(
_p
[0] == 'h' && _p[1] == 'h') {

314 
_p
 += 2;

315 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

316 
	`va_¨g
(
≠
,);

317 
fmt_vÆid
;

319 
fmt_övÆid
;

323 i‡(
_p
[0] == 'h') {

324 
_p
 += 1;

325 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

326 
	`va_¨g
(
≠
,);

327 
fmt_vÆid
;

329 
fmt_övÆid
;

333 i‡(
_p
[0] == 'l' && _p[1] == 'l') {

334 
_p
 += 2;

335 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

336 
	`va_¨g
(
≠
,);

337 
fmt_vÆid
;

339 
fmt_övÆid
;

343 i‡(
_p
[0] == 'l') {

344 
_p
 += 1;

345 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

346 
	`va_¨g
(
≠
,);

347 
fmt_vÆid
;

349 
fmt_övÆid
;

352 
fmt_övÆid
:

353 
	`va_íd
(
_˝y
);

354 
f‹m©_îr
;

356 
fmt_vÆid
:

357 
_l
 = (
_p
+1)-
c
;

358 i‡(
_l
 < (
_f‹m©
)-2) {

359 
	`mem˝y
(
_f‹m©
,
c
,
_l
);

360 
_f‹m©
[
_l
] = '\0';

361 
√w¨g
 = 
	`sdsˇtv¥ötf
(
cuørg
,
_f‹m©
,
_˝y
);

365 
c
 = 
_p
-1;

368 
	`va_íd
(
_˝y
);

373 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

374 
cuørg
 = 
√w¨g
;

376 
touched
 = 1;

377 
c
++;

379 
c
++;

383 i‡(
touched
) {

384 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

385 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

386 
cuørgv
 = 
√w¨gv
;

387 
cuørgv
[
¨gc
++] = 
cuørg
;

388 
tŸÀn
 +
	`bulkÀn
(
	`sd¶í
(
cuørg
));

390 
	`sds‰ì
(
cuørg
);

394 
cuørg
 = 
NULL
;

397 
tŸÀn
 +1+
	`cou¡Digôs
(
¨gc
)+2;

400 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

401 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

403 
pos
 = 
	`•rötf
(
cmd
,"*%d\r\n",
¨gc
);

404 
j
 = 0; j < 
¨gc
; j++) {

405 
pos
 +
	`•rötf
(
cmd
+pos,"$%zu\r\n",
	`sd¶í
(
cuørgv
[
j
]));

406 
	`mem˝y
(
cmd
+
pos
,
cuørgv
[
j
],
	`sd¶í
(curargv[j]));

407 
pos
 +
	`sd¶í
(
cuørgv
[
j
]);

408 
	`sds‰ì
(
cuørgv
[
j
]);

409 
cmd
[
pos
++] = '\r';

410 
cmd
[
pos
++] = '\n';

412 
	`as£π
(
pos
 =
tŸÀn
);

413 
cmd
[
pos
] = '\0';

415 
	`‰ì
(
cuørgv
);

416 *
èrgë
 = 
cmd
;

417  
tŸÀn
;

419 
f‹m©_îr
:

420 
îr‹_ty≥
 = -2;

421 
˛ónup
;

423 
mem‹y_îr
:

424 
îr‹_ty≥
 = -1;

425 
˛ónup
;

427 
˛ónup
:

428 i‡(
cuørgv
) {

429 
¨gc
--)

430 
	`sds‰ì
(
cuørgv
[
¨gc
]);

431 
	`‰ì
(
cuørgv
);

434 
	`sds‰ì
(
cuørg
);

438 i‡(
cmd
 !
NULL
)

439 
	`‰ì
(
cmd
);

441  
îr‹_ty≥
;

442 
	}
}

456 
	$ªdisF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...) {

457 
va_li°
 
≠
;

458 
Àn
;

459 
	`va_°¨t
(
≠
,
f‹m©
);

460 
Àn
 = 
	`ªdisvF‹m©Comm™d
(
èrgë
,
f‹m©
,
≠
);

461 
	`va_íd
(
≠
);

465 i‡(
Àn
 < 0)

466 
Àn
 = -1;

468  
Àn
;

469 
	}
}

477 
	$ªdisF‹m©SdsComm™dArgv
(
sds
 *
èrgë
, 
¨gc
, c⁄° **
¨gv
,

478 c⁄° 
size_t
 *
¨gvÀn
)

480 
sds
 
cmd
;

481 
tŸÀn
;

482 
j
;

483 
size_t
 
Àn
;

486 i‡(
èrgë
 =
NULL
)

490 
tŸÀn
 = 1+
	`cou¡Digôs
(
¨gc
)+2;

491 
j
 = 0; j < 
¨gc
; j++) {

492 
Àn
 = 
¨gvÀn
 ?árgvÀn[
j
] : 
	`°æí
(
¨gv
[j]);

493 
tŸÀn
 +
	`bulkÀn
(
Àn
);

497 
cmd
 = 
	`sd£m±y
();

498 i‡(
cmd
 =
NULL
)

502 
cmd
 = 
	`sdsMakeRoomF‹
(cmd, 
tŸÀn
);

503 i‡(
cmd
 =
NULL
)

507 
cmd
 = 
	`sdsˇtfmt
(cmd, "*%i\r\n", 
¨gc
);

508 
j
=0; j < 
¨gc
; j++) {

509 
Àn
 = 
¨gvÀn
 ?árgvÀn[
j
] : 
	`°æí
(
¨gv
[j]);

510 
cmd
 = 
	`sdsˇtfmt
(cmd, "$%T\r\n", 
Àn
);

511 
cmd
 = 
	`sdsˇéí
(cmd, 
¨gv
[
j
], 
Àn
);

512 
cmd
 = 
	`sdsˇéí
(cmd, "\r\n", ("\r\n")-1);

515 
	`as£π
(
	`sd¶í
(
cmd
)==
tŸÀn
);

517 *
èrgë
 = 
cmd
;

518  
tŸÀn
;

519 
	}
}

521 
	$ªdisFªeSdsComm™d
(
sds
 
cmd
) {

522 
	`sds‰ì
(
cmd
);

523 
	}
}

530 
	$ªdisF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

531 *
cmd
 = 
NULL
;

532 
pos
;

533 
size_t
 
Àn
;

534 
tŸÀn
, 
j
;

537 i‡(
èrgë
 =
NULL
)

541 
tŸÀn
 = 1+
	`cou¡Digôs
(
¨gc
)+2;

542 
j
 = 0; j < 
¨gc
; j++) {

543 
Àn
 = 
¨gvÀn
 ?árgvÀn[
j
] : 
	`°æí
(
¨gv
[j]);

544 
tŸÀn
 +
	`bulkÀn
(
Àn
);

548 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

549 i‡(
cmd
 =
NULL
)

552 
pos
 = 
	`•rötf
(
cmd
,"*%d\r\n",
¨gc
);

553 
j
 = 0; j < 
¨gc
; j++) {

554 
Àn
 = 
¨gvÀn
 ?árgvÀn[
j
] : 
	`°æí
(
¨gv
[j]);

555 
pos
 +
	`•rötf
(
cmd
+pos,"$%zu\r\n",
Àn
);

556 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

557 
pos
 +
Àn
;

558 
cmd
[
pos
++] = '\r';

559 
cmd
[
pos
++] = '\n';

561 
	`as£π
(
pos
 =
tŸÀn
);

562 
cmd
[
pos
] = '\0';

564 *
èrgë
 = 
cmd
;

565  
tŸÀn
;

566 
	}
}

568 
	$ªdisFªeComm™d
(*
cmd
) {

569 
	`‰ì
(
cmd
);

570 
	}
}

572 
	$__ªdisSëEº‹
(
ªdisC⁄ãxt
 *
c
, 
ty≥
, c⁄° *
°r
) {

573 
size_t
 
Àn
;

575 
c
->
îr
 = 
ty≥
;

576 i‡(
°r
 !
NULL
) {

577 
Àn
 = 
	`°æí
(
°r
);

578 
Àn
 =Üí < ((
c
->
îr°r
)-1) ?Üen : ((c->errstr)-1);

579 
	`mem˝y
(
c
->
îr°r
,
°r
,
Àn
);

580 
c
->
îr°r
[
Àn
] = '\0';

583 
	`as£π
(
ty≥
 =
REDIS_ERR_IO
);

584 
	`__ªdis_°ªº‹_r
(
î∫o
, 
c
->
îr°r
, (c->errstr));

586 
	}
}

588 
ªdisRódî
 *
	$ªdisRódîCª©e
() {

589  
	`ªdisRódîCª©eWôhFun˘i⁄s
(&
deÁu…Fun˘i⁄s
);

590 
	}
}

592 
ªdisC⁄ãxt
 *
	$ªdisC⁄ãxtInô
() {

593 
ªdisC⁄ãxt
 *
c
;

595 
c
 = 
	`ˇŒoc
(1,(
ªdisC⁄ãxt
));

596 i‡(
c
 =
NULL
)

597  
NULL
;

599 
c
->
îr
 = 0;

600 
c
->
îr°r
[0] = '\0';

601 
c
->
obuf
 = 
	`sd£m±y
();

602 
c
->
ªadî
 = 
	`ªdisRódîCª©e
();

603 
c
->
t˝
.
ho°
 = 
NULL
;

604 
c
->
t˝
.
sour˚_addr
 = 
NULL
;

605 
c
->
unix_sock
.
∑th
 = 
NULL
;

606 
c
->
timeout
 = 
NULL
;

608 i‡(
c
->
obuf
 =
NULL
 || c->
ªadî
 == NULL) {

609 
	`ªdisFªe
(
c
);

610  
NULL
;

613  
c
;

614 
	}
}

616 
	$ªdisFªe
(
ªdisC⁄ãxt
 *
c
) {

617 i‡(
c
 =
NULL
)

619 i‡(
c
->
fd
 > 0)

620 
	`˛o£
(
c
->
fd
);

621 i‡(
c
->
obuf
 !
NULL
)

622 
	`sds‰ì
(
c
->
obuf
);

623 i‡(
c
->
ªadî
 !
NULL
)

624 
	`ªdisRódîFªe
(
c
->
ªadî
);

625 i‡(
c
->
t˝
.
ho°
)

626 
	`‰ì
(
c
->
t˝
.
ho°
);

627 i‡(
c
->
t˝
.
sour˚_addr
)

628 
	`‰ì
(
c
->
t˝
.
sour˚_addr
);

629 i‡(
c
->
unix_sock
.
∑th
)

630 
	`‰ì
(
c
->
unix_sock
.
∑th
);

631 i‡(
c
->
timeout
)

632 
	`‰ì
(
c
->
timeout
);

633 
	`‰ì
(
c
);

634 
	}
}

636 
	$ªdisFªeKìpFd
(
ªdisC⁄ãxt
 *
c
) {

637 
fd
 = 
c
->fd;

638 
c
->
fd
 = -1;

639 
	`ªdisFªe
(
c
);

640  
fd
;

641 
	}
}

643 
	$ªdisRec⁄√˘
(
ªdisC⁄ãxt
 *
c
) {

644 
c
->
îr
 = 0;

645 
	`mem£t
(
c
->
îr°r
, '\0', 
	`°æí
(c->errstr));

647 i‡(
c
->
fd
 > 0) {

648 
	`˛o£
(
c
->
fd
);

651 
	`sds‰ì
(
c
->
obuf
);

652 
	`ªdisRódîFªe
(
c
->
ªadî
);

654 
c
->
obuf
 = 
	`sd£m±y
();

655 
c
->
ªadî
 = 
	`ªdisRódîCª©e
();

657 i‡(
c
->
c⁄√˘i⁄_ty≥
 =
REDIS_CONN_TCP
) {

658  
	`ªdisC⁄ãxtC⁄√˘BödT˝
(
c
, c->
t˝
.
ho°
, c->t˝.
p‹t
,

659 
c
->
timeout
, c->
t˝
.
sour˚_addr
);

660 } i‡(
c
->
c⁄√˘i⁄_ty≥
 =
REDIS_CONN_UNIX
) {

661  
	`ªdisC⁄ãxtC⁄√˘Unix
(
c
, c->
unix_sock
.
∑th
, c->
timeout
);

665 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,"NotÉnough informationÅoÑeconnect");

668  
REDIS_ERR
;

669 
	}
}

674 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘
(c⁄° *
ù
, 
p‹t
) {

675 
ªdisC⁄ãxt
 *
c
;

677 
c
 = 
	`ªdisC⁄ãxtInô
();

678 i‡(
c
 =
NULL
)

679  
NULL
;

681 
c
->
Êags
 |
REDIS_BLOCK
;

682 
	`ªdisC⁄ãxtC⁄√˘T˝
(
c
,
ù
,
p‹t
,
NULL
);

683  
c
;

684 
	}
}

686 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘WôhTimeout
(c⁄° *
ù
, 
p‹t
, c⁄° 
timevÆ
 
tv
) {

687 
ªdisC⁄ãxt
 *
c
;

689 
c
 = 
	`ªdisC⁄ãxtInô
();

690 i‡(
c
 =
NULL
)

691  
NULL
;

693 
c
->
Êags
 |
REDIS_BLOCK
;

694 
	`ªdisC⁄ãxtC⁄√˘T˝
(
c
,
ù
,
p‹t
,&
tv
);

695  
c
;

696 
	}
}

698 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘N⁄Block
(c⁄° *
ù
, 
p‹t
) {

699 
ªdisC⁄ãxt
 *
c
;

701 
c
 = 
	`ªdisC⁄ãxtInô
();

702 i‡(
c
 =
NULL
)

703  
NULL
;

705 
c
->
Êags
 &~
REDIS_BLOCK
;

706 
	`ªdisC⁄ãxtC⁄√˘T˝
(
c
,
ù
,
p‹t
,
NULL
);

707  
c
;

708 
	}
}

710 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘BödN⁄Block
(c⁄° *
ù
, 
p‹t
,

711 c⁄° *
sour˚_addr
) {

712 
ªdisC⁄ãxt
 *
c
 = 
	`ªdisC⁄ãxtInô
();

713 
c
->
Êags
 &~
REDIS_BLOCK
;

714 
	`ªdisC⁄ãxtC⁄√˘BödT˝
(
c
,
ù
,
p‹t
,
NULL
,
sour˚_addr
);

715  
c
;

716 
	}
}

718 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘BödN⁄BlockWôhReu£
(c⁄° *
ù
, 
p‹t
,

719 c⁄° *
sour˚_addr
) {

720 
ªdisC⁄ãxt
 *
c
 = 
	`ªdisC⁄ãxtInô
();

721 
c
->
Êags
 &~
REDIS_BLOCK
;

722 
c
->
Êags
 |
REDIS_REUSEADDR
;

723 
	`ªdisC⁄ãxtC⁄√˘BödT˝
(
c
,
ù
,
p‹t
,
NULL
,
sour˚_addr
);

724  
c
;

725 
	}
}

727 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘Unix
(c⁄° *
∑th
) {

728 
ªdisC⁄ãxt
 *
c
;

730 
c
 = 
	`ªdisC⁄ãxtInô
();

731 i‡(
c
 =
NULL
)

732  
NULL
;

734 
c
->
Êags
 |
REDIS_BLOCK
;

735 
	`ªdisC⁄ãxtC⁄√˘Unix
(
c
,
∑th
,
NULL
);

736  
c
;

737 
	}
}

739 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘UnixWôhTimeout
(c⁄° *
∑th
, c⁄° 
timevÆ
 
tv
) {

740 
ªdisC⁄ãxt
 *
c
;

742 
c
 = 
	`ªdisC⁄ãxtInô
();

743 i‡(
c
 =
NULL
)

744  
NULL
;

746 
c
->
Êags
 |
REDIS_BLOCK
;

747 
	`ªdisC⁄ãxtC⁄√˘Unix
(
c
,
∑th
,&
tv
);

748  
c
;

749 
	}
}

751 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘UnixN⁄Block
(c⁄° *
∑th
) {

752 
ªdisC⁄ãxt
 *
c
;

754 
c
 = 
	`ªdisC⁄ãxtInô
();

755 i‡(
c
 =
NULL
)

756  
NULL
;

758 
c
->
Êags
 &~
REDIS_BLOCK
;

759 
	`ªdisC⁄ãxtC⁄√˘Unix
(
c
,
∑th
,
NULL
);

760  
c
;

761 
	}
}

763 
ªdisC⁄ãxt
 *
	$ªdisC⁄√˘Fd
(
fd
) {

764 
ªdisC⁄ãxt
 *
c
;

766 
c
 = 
	`ªdisC⁄ãxtInô
();

767 i‡(
c
 =
NULL
)

768  
NULL
;

770 
c
->
fd
 = fd;

771 
c
->
Êags
 |
REDIS_BLOCK
 | 
REDIS_CONNECTED
;

772  
c
;

773 
	}
}

776 
	$ªdisSëTimeout
(
ªdisC⁄ãxt
 *
c
, c⁄° 
timevÆ
 
tv
) {

777 i‡(
c
->
Êags
 & 
REDIS_BLOCK
)

778  
	`ªdisC⁄ãxtSëTimeout
(
c
,
tv
);

779  
REDIS_ERR
;

780 
	}
}

783 
	$ªdisE«bÀKìpAlive
(
ªdisC⁄ãxt
 *
c
) {

784 i‡(
	`ªdisKìpAlive
(
c
, 
REDIS_KEEPALIVE_INTERVAL
Ë!
REDIS_OK
)

785  
REDIS_ERR
;

786  
REDIS_OK
;

787 
	}
}

794 
	$ªdisBuf„rRód
(
ªdisC⁄ãxt
 *
c
) {

795 
buf
[1024*16];

796 
ƒód
;

799 i‡(
c
->
îr
)

800  
REDIS_ERR
;

802 
ƒód
 = 
	`ªad
(
c
->
fd
,
buf
,(buf));

803 i‡(
ƒód
 == -1) {

804 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
REDIS_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

807 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_IO
,
NULL
);

808  
REDIS_ERR
;

810 } i‡(
ƒód
 == 0) {

811 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_EOF
,"Server closedÅhe connection");

812  
REDIS_ERR
;

814 i‡(
	`ªdisRódîFìd
(
c
->
ªadî
,
buf
,
ƒód
Ë!
REDIS_OK
) {

815 
	`__ªdisSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

816  
REDIS_ERR
;

819  
REDIS_OK
;

820 
	}
}

831 
	$ªdisBuf„rWrôe
(
ªdisC⁄ãxt
 *
c
, *
d⁄e
) {

832 
nwrôãn
;

835 i‡(
c
->
îr
)

836  
REDIS_ERR
;

838 i‡(
	`sd¶í
(
c
->
obuf
) > 0) {

839 
nwrôãn
 = 
	`wrôe
(
c
->
fd
,c->
obuf
,
	`sd¶í
(c->obuf));

840 i‡(
nwrôãn
 == -1) {

841 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
REDIS_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

844 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_IO
,
NULL
);

845  
REDIS_ERR
;

847 } i‡(
nwrôãn
 > 0) {

848 i‡(
nwrôãn
 =(sig√d)
	`sd¶í
(
c
->
obuf
)) {

849 
	`sds‰ì
(
c
->
obuf
);

850 
c
->
obuf
 = 
	`sd£m±y
();

852 
	`sd§™ge
(
c
->
obuf
,
nwrôãn
,-1);

856 i‡(
d⁄e
 !
NULL
Ë*d⁄ê(
	`sd¶í
(
c
->
obuf
) == 0);

857  
REDIS_OK
;

858 
	}
}

862 
	$ªdisGëRïlyFromRódî
(
ªdisC⁄ãxt
 *
c
, **
ª∂y
) {

863 i‡(
	`ªdisRódîGëRïly
(
c
->
ªadî
,
ª∂y
Ë=
REDIS_ERR
) {

864 
	`__ªdisSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

865  
REDIS_ERR
;

867  
REDIS_OK
;

868 
	}
}

870 
	$ªdisGëRïly
(
ªdisC⁄ãxt
 *
c
, **
ª∂y
) {

871 
wd⁄e
 = 0;

872 *
aux
 = 
NULL
;

875 i‡(
	`ªdisGëRïlyFromRódî
(
c
,&
aux
Ë=
REDIS_ERR
)

876  
REDIS_ERR
;

879 i‡(
aux
 =
NULL
 && 
c
->
Êags
 & 
REDIS_BLOCK
) {

882 i‡(
	`ªdisBuf„rWrôe
(
c
,&
wd⁄e
Ë=
REDIS_ERR
)

883  
REDIS_ERR
;

884 } !
wd⁄e
);

888 i‡(
	`ªdisBuf„rRód
(
c
Ë=
REDIS_ERR
)

889  
REDIS_ERR
;

890 i‡(
	`ªdisGëRïlyFromRódî
(
c
,&
aux
Ë=
REDIS_ERR
)

891  
REDIS_ERR
;

892 } 
aux
 =
NULL
);

896 i‡(
ª∂y
 !
NULL
Ë*ª∂y = 
aux
;

897  
REDIS_OK
;

898 
	}
}

907 
	$__ªdisAµídComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
cmd
, 
size_t
 
Àn
) {

908 
sds
 
√wbuf
;

910 
√wbuf
 = 
	`sdsˇéí
(
c
->
obuf
,
cmd
,
Àn
);

911 i‡(
√wbuf
 =
NULL
) {

912 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OOM
,"Out of memory");

913  
REDIS_ERR
;

916 
c
->
obuf
 = 
√wbuf
;

917  
REDIS_OK
;

918 
	}
}

920 
	$ªdisAµídF‹m©ãdComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
cmd
, 
size_t
 
Àn
) {

922 i‡(
	`__ªdisAµídComm™d
(
c
, 
cmd
, 
Àn
Ë!
REDIS_OK
) {

923  
REDIS_ERR
;

926  
REDIS_OK
;

927 
	}
}

929 
	$ªdisvAµídComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

930 *
cmd
;

931 
Àn
;

933 
Àn
 = 
	`ªdisvF‹m©Comm™d
(&
cmd
,
f‹m©
,
≠
);

934 i‡(
Àn
 == -1) {

935 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OOM
,"Out of memory");

936  
REDIS_ERR
;

937 } i‡(
Àn
 == -2) {

938 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,"Invalid format string");

939  
REDIS_ERR
;

942 i‡(
	`__ªdisAµídComm™d
(
c
,
cmd
,
Àn
Ë!
REDIS_OK
) {

943 
	`‰ì
(
cmd
);

944  
REDIS_ERR
;

947 
	`‰ì
(
cmd
);

948  
REDIS_OK
;

949 
	}
}

951 
	$ªdisAµídComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, ...) {

952 
va_li°
 
≠
;

953 
ªt
;

955 
	`va_°¨t
(
≠
,
f‹m©
);

956 
ªt
 = 
	`ªdisvAµídComm™d
(
c
,
f‹m©
,
≠
);

957 
	`va_íd
(
≠
);

958  
ªt
;

959 
	}
}

961 
	$ªdisAµídComm™dArgv
(
ªdisC⁄ãxt
 *
c
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

962 
sds
 
cmd
;

963 
Àn
;

965 
Àn
 = 
	`ªdisF‹m©SdsComm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
¨gvÀn
);

966 i‡(
Àn
 == -1) {

967 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OOM
,"Out of memory");

968  
REDIS_ERR
;

971 i‡(
	`__ªdisAµídComm™d
(
c
,
cmd
,
Àn
Ë!
REDIS_OK
) {

972 
	`sds‰ì
(
cmd
);

973  
REDIS_ERR
;

976 
	`sds‰ì
(
cmd
);

977  
REDIS_OK
;

978 
	}
}

991 *
	$__ªdisBlockF‹Rïly
(
ªdisC⁄ãxt
 *
c
) {

992 *
ª∂y
;

994 i‡(
c
->
Êags
 & 
REDIS_BLOCK
) {

995 i‡(
	`ªdisGëRïly
(
c
,&
ª∂y
Ë!
REDIS_OK
)

996  
NULL
;

997  
ª∂y
;

999  
NULL
;

1000 
	}
}

1002 *
	$ªdisvComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

1003 i‡(
	`ªdisvAµídComm™d
(
c
,
f‹m©
,
≠
Ë!
REDIS_OK
)

1004  
NULL
;

1005  
	`__ªdisBlockF‹Rïly
(
c
);

1006 
	}
}

1008 *
	$ªdisComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, ...) {

1009 
va_li°
 
≠
;

1010 *
ª∂y
 = 
NULL
;

1011 
	`va_°¨t
(
≠
,
f‹m©
);

1012 
ª∂y
 = 
	`ªdisvComm™d
(
c
,
f‹m©
,
≠
);

1013 
	`va_íd
(
≠
);

1014  
ª∂y
;

1015 
	}
}

1017 *
	$ªdisComm™dArgv
(
ªdisC⁄ãxt
 *
c
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

1018 i‡(
	`ªdisAµídComm™dArgv
(
c
,
¨gc
,
¨gv
,
¨gvÀn
Ë!
REDIS_OK
)

1019  
NULL
;

1020  
	`__ªdisBlockF‹Rïly
(
c
);

1021 
	}
}

	@dep/hiredis-0.13.3/hiredis.h

34 #i‚de‡
__HIREDIS_H


35 
	#__HIREDIS_H


	)

36 
	~"ªad.h
"

37 
	~<°d¨g.h
>

38 
	~<sys/time.h
>

39 
	~<°döt.h
>

40 
	~"sds.h
"

42 
	#HIREDIS_MAJOR
 0

	)

43 
	#HIREDIS_MINOR
 13

	)

44 
	#HIREDIS_PATCH
 3

	)

45 
	#HIREDIS_SONAME
 0.13

	)

49 
	#REDIS_BLOCK
 0x1

	)

53 
	#REDIS_CONNECTED
 0x2

	)

59 
	#REDIS_DISCONNECTING
 0x4

	)

63 
	#REDIS_FREEING
 0x8

	)

66 
	#REDIS_IN_CALLBACK
 0x10

	)

69 
	#REDIS_SUBSCRIBED
 0x20

	)

72 
	#REDIS_MONITORING
 0x40

	)

75 
	#REDIS_REUSEADDR
 0x80

	)

77 
	#REDIS_KEEPALIVE_INTERVAL
 15

	)

81 
	#REDIS_CONNECT_RETRIES
 10

	)

86 #i‚de‡
_GNU_SOURCE


88 
	#__ªdis_°ªº‹_r
(
î∫o
, 
buf
, 
Àn
) \

90 
	`°ªº‹_r
((
î∫o
), (
buf
), (
Àn
)); \

91 } 0)

	)

94 
	#__ªdis_°ªº‹_r
(
î∫o
, 
buf
, 
Àn
) \

96 *
îr_°r
 = 
	`°ªº‹_r
((
î∫o
), (
buf
), (
Àn
)); \

100 i‡(
îr_°r
 !(
buf
)) { \

101 
buf
[(
Àn
)] = '\0'; \

102 
	`°∫ˇt
((
buf
), 
îr_°r
, ((
Àn
) - 1)); \

104 } 0)

	)

107 #ifde‡
__˝lu•lus


112 
	sªdisRïly
 {

113 
ty≥
;

114 
öãgî
;

115 
Àn
;

116 *
°r
;

117 
size_t
 
ñemíts
;

118 
ªdisRïly
 **
ñemít
;

119 } 
	tªdisRïly
;

121 
ªdisRódî
 *
ªdisRódîCª©e
();

124 
‰ìRïlyObje˘
(*
ª∂y
);

127 
ªdisvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

128 
ªdisF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...);

129 
ªdisF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

130 
ªdisF‹m©SdsComm™dArgv
(
sds
 *
èrgë
, 
¨gc
, c⁄° ** 
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

131 
ªdisFªeComm™d
(*
cmd
);

132 
ªdisFªeSdsComm™d
(
sds
 
cmd
);

134 
	eªdisC⁄√˘i⁄Ty≥
 {

135 
REDIS_CONN_TCP
,

136 
REDIS_CONN_UNIX
,

140 
	sªdisC⁄ãxt
 {

141 
îr
;

142 
îr°r
[128];

143 
fd
;

144 
Êags
;

145 *
obuf
;

146 
ªdisRódî
 *
ªadî
;

148 
ªdisC⁄√˘i⁄Ty≥
 
c⁄√˘i⁄_ty≥
;

149 
timevÆ
 *
timeout
;

152 *
ho°
;

153 *
sour˚_addr
;

154 
p‹t
;

155 } 
t˝
;

158 *
∑th
;

159 } 
unix_sock
;

161 } 
	tªdisC⁄ãxt
;

163 
ªdisC⁄ãxt
 *
ªdisC⁄√˘
(c⁄° *
ù
, 
p‹t
);

164 
ªdisC⁄ãxt
 *
ªdisC⁄√˘WôhTimeout
(c⁄° *
ù
, 
p‹t
, c⁄° 
timevÆ
 
tv
);

165 
ªdisC⁄ãxt
 *
ªdisC⁄√˘N⁄Block
(c⁄° *
ù
, 
p‹t
);

166 
ªdisC⁄ãxt
 *
ªdisC⁄√˘BödN⁄Block
(c⁄° *
ù
, 
p‹t
,

167 c⁄° *
sour˚_addr
);

168 
ªdisC⁄ãxt
 *
ªdisC⁄√˘BödN⁄BlockWôhReu£
(c⁄° *
ù
, 
p‹t
,

169 c⁄° *
sour˚_addr
);

170 
ªdisC⁄ãxt
 *
ªdisC⁄√˘Unix
(c⁄° *
∑th
);

171 
ªdisC⁄ãxt
 *
ªdisC⁄√˘UnixWôhTimeout
(c⁄° *
∑th
, c⁄° 
timevÆ
 
tv
);

172 
ªdisC⁄ãxt
 *
ªdisC⁄√˘UnixN⁄Block
(c⁄° *
∑th
);

173 
ªdisC⁄ãxt
 *
ªdisC⁄√˘Fd
(
fd
);

184 
ªdisRec⁄√˘
(
ªdisC⁄ãxt
 *
c
);

186 
ªdisSëTimeout
(
ªdisC⁄ãxt
 *
c
, c⁄° 
timevÆ
 
tv
);

187 
ªdisE«bÀKìpAlive
(
ªdisC⁄ãxt
 *
c
);

188 
ªdisFªe
(
ªdisC⁄ãxt
 *
c
);

189 
ªdisFªeKìpFd
(
ªdisC⁄ãxt
 *
c
);

190 
ªdisBuf„rRód
(
ªdisC⁄ãxt
 *
c
);

191 
ªdisBuf„rWrôe
(
ªdisC⁄ãxt
 *
c
, *
d⁄e
);

197 
ªdisGëRïly
(
ªdisC⁄ãxt
 *
c
, **
ª∂y
);

198 
ªdisGëRïlyFromRódî
(
ªdisC⁄ãxt
 *
c
, **
ª∂y
);

202 
ªdisAµídF‹m©ãdComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
cmd
, 
size_t
 
Àn
);

206 
ªdisvAµídComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

207 
ªdisAµídComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, ...);

208 
ªdisAµídComm™dArgv
(
ªdisC⁄ãxt
 *
c
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

215 *
ªdisvComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

216 *
ªdisComm™d
(
ªdisC⁄ãxt
 *
c
, c⁄° *
f‹m©
, ...);

217 *
ªdisComm™dArgv
(
ªdisC⁄ãxt
 *
c
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

219 #ifde‡
__˝lu•lus


	@dep/hiredis-0.13.3/net.c

35 
	~"fma¸os.h
"

36 
	~<sys/ty≥s.h
>

37 
	~<sys/sockë.h
>

38 
	~<sys/£À˘.h
>

39 
	~<sys/un.h
>

40 
	~<√töë/ö.h
>

41 
	~<√töë/t˝.h
>

42 
	~<¨∑/öë.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<°rög.h
>

46 
	~<√tdb.h
>

47 
	~<î∫o.h
>

48 
	~<°d¨g.h
>

49 
	~<°dio.h
>

50 
	~<pﬁl.h
>

51 
	~<limôs.h
>

52 
	~<°dlib.h
>

54 
	~"√t.h
"

55 
	~"sds.h
"

58 
__ªdisSëEº‹
(
ªdisC⁄ãxt
 *
c
, 
ty≥
, c⁄° *
°r
);

60 
	$ªdisC⁄ãxtClo£Fd
(
ªdisC⁄ãxt
 *
c
) {

61 i‡(
c
 && c->
fd
 >= 0) {

62 
	`˛o£
(
c
->
fd
);

63 
c
->
fd
 = -1;

65 
	}
}

67 
	$__ªdisSëEº‹FromEºno
(
ªdisC⁄ãxt
 *
c
, 
ty≥
, c⁄° *
¥efix
) {

68 
buf
[128] = { 0 };

69 
size_t
 
Àn
 = 0;

71 i‡(
¥efix
 !
NULL
)

72 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%s: ",
¥efix
);

73 
	`__ªdis_°ªº‹_r
(
î∫o
, (*)(
buf
 + 
Àn
), (buf) -Üen);

74 
	`__ªdisSëEº‹
(
c
,
ty≥
,
buf
);

75 
	}
}

77 
	$ªdisSëReu£Addr
(
ªdisC⁄ãxt
 *
c
) {

78 
⁄
 = 1;

79 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, (on)) == -1) {

80 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,
NULL
);

81 
	`ªdisC⁄ãxtClo£Fd
(
c
);

82  
REDIS_ERR
;

84  
REDIS_OK
;

85 
	}
}

87 
	$ªdisCª©eSockë
(
ªdisC⁄ãxt
 *
c
, 
ty≥
) {

88 
s
;

89 i‡((
s
 = 
	`sockë
(
ty≥
, 
SOCK_STREAM
, 0)) == -1) {

90 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,
NULL
);

91  
REDIS_ERR
;

93 
c
->
fd
 = 
s
;

94 i‡(
ty≥
 =
AF_INET
) {

95 i‡(
	`ªdisSëReu£Addr
(
c
Ë=
REDIS_ERR
) {

96  
REDIS_ERR
;

99  
REDIS_OK
;

100 
	}
}

102 
	$ªdisSëBlockög
(
ªdisC⁄ãxt
 *
c
, 
blockög
) {

103 
Êags
;

108 i‡((
Êags
 = 
	`f˙é
(
c
->
fd
, 
F_GETFL
)) == -1) {

109 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,"fcntl(F_GETFL)");

110 
	`ªdisC⁄ãxtClo£Fd
(
c
);

111  
REDIS_ERR
;

114 i‡(
blockög
)

115 
Êags
 &~
O_NONBLOCK
;

117 
Êags
 |
O_NONBLOCK
;

119 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
Êags
) == -1) {

120 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,"fcntl(F_SETFL)");

121 
	`ªdisC⁄ãxtClo£Fd
(
c
);

122  
REDIS_ERR
;

124  
REDIS_OK
;

125 
	}
}

127 
	$ªdisKìpAlive
(
ªdisC⁄ãxt
 *
c
, 
öãrvÆ
) {

128 
vÆ
 = 1;

129 
fd
 = 
c
->fd;

131 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
vÆ
, (val)) == -1){

132 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
	`°ªº‹
(
î∫o
));

133  
REDIS_ERR
;

136 
vÆ
 = 
öãrvÆ
;

138 #ifde‡
_OSX


139 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_KEEPALIVE
, &
vÆ
, (val)) < 0) {

140 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
	`°ªº‹
(
î∫o
));

141  
REDIS_ERR
;

144 #i‡
	`deföed
(
__GLIBC__
Ë&& !deföed(
__FªeBSD_kî√l__
)

145 
vÆ
 = 
öãrvÆ
;

146 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
, &
vÆ
, (val)) < 0) {

147 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
	`°ªº‹
(
î∫o
));

148  
REDIS_ERR
;

151 
vÆ
 = 
öãrvÆ
/3;

152 i‡(
vÆ
 == 0) val = 1;

153 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
, &
vÆ
, (val)) < 0) {

154 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
	`°ªº‹
(
î∫o
));

155  
REDIS_ERR
;

158 
vÆ
 = 3;

159 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
, &
vÆ
, (val)) < 0) {

160 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
	`°ªº‹
(
î∫o
));

161  
REDIS_ERR
;

166  
REDIS_OK
;

167 
	}
}

169 
	$ªdisSëT˝NoDñay
(
ªdisC⁄ãxt
 *
c
) {

170 
yes
 = 1;

171 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
yes
, (yes)) == -1) {

172 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,"setsockopt(TCP_NODELAY)");

173 
	`ªdisC⁄ãxtClo£Fd
(
c
);

174  
REDIS_ERR
;

176  
REDIS_OK
;

177 
	}
}

179 
	#__MAX_MSEC
 (((
LONG_MAX
Ë- 999Ë/ 1000)

	)

181 
	$ªdisC⁄ãxtWaôRódy
(
ªdisC⁄ãxt
 *
c
, c⁄° 
timevÆ
 *
timeout
) {

182 
pﬁlfd
 
wfd
[1];

183 
m£c
;

185 
m£c
 = -1;

186 
wfd
[0].
fd
 = 
c
->fd;

187 
wfd
[0].
evíts
 = 
POLLOUT
;

190 i‡(
timeout
 !
NULL
) {

191 i‡(
timeout
->
tv_u£c
 > 1000000 ||Åimeout->
tv_£c
 > 
__MAX_MSEC
) {

192 
	`__ªdisSëEº‹FromEºno
(
c
, 
REDIS_ERR_IO
, 
NULL
);

193 
	`ªdisC⁄ãxtClo£Fd
(
c
);

194  
REDIS_ERR
;

197 
m£c
 = (
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 999) / 1000);

199 i‡(
m£c
 < 0 || m£¯> 
INT_MAX
) {

200 
m£c
 = 
INT_MAX
;

204 i‡(
î∫o
 =
EINPROGRESS
) {

205 
ªs
;

207 i‡((
ªs
 = 
	`pﬁl
(
wfd
, 1, 
m£c
)) == -1) {

208 
	`__ªdisSëEº‹FromEºno
(
c
, 
REDIS_ERR_IO
, "poll(2)");

209 
	`ªdisC⁄ãxtClo£Fd
(
c
);

210  
REDIS_ERR
;

211 } i‡(
ªs
 == 0) {

212 
î∫o
 = 
ETIMEDOUT
;

213 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,
NULL
);

214 
	`ªdisC⁄ãxtClo£Fd
(
c
);

215  
REDIS_ERR
;

218 i‡(
	`ªdisCheckSockëEº‹
(
c
Ë!
REDIS_OK
)

219  
REDIS_ERR
;

221  
REDIS_OK
;

224 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,
NULL
);

225 
	`ªdisC⁄ãxtClo£Fd
(
c
);

226  
REDIS_ERR
;

227 
	}
}

229 
	$ªdisCheckSockëEº‹
(
ªdisC⁄ãxt
 *
c
) {

230 
îr
 = 0;

231 
sockÀn_t
 
îæí
 = (
îr
);

233 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
îæí
) == -1) {

234 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,"getsockopt(SO_ERROR)");

235  
REDIS_ERR
;

238 i‡(
îr
) {

239 
î∫o
 = 
îr
;

240 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,
NULL
);

241  
REDIS_ERR
;

244  
REDIS_OK
;

245 
	}
}

247 
	$ªdisC⁄ãxtSëTimeout
(
ªdisC⁄ãxt
 *
c
, c⁄° 
timevÆ
 
tv
) {

248 i‡(
	`£tsock›t
(
c
->
fd
,
SOL_SOCKET
,
SO_RCVTIMEO
,&
tv
,(tv)) == -1) {

249 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,"setsockopt(SO_RCVTIMEO)");

250  
REDIS_ERR
;

252 i‡(
	`£tsock›t
(
c
->
fd
,
SOL_SOCKET
,
SO_SNDTIMEO
,&
tv
,(tv)) == -1) {

253 
	`__ªdisSëEº‹FromEºno
(
c
,
REDIS_ERR_IO
,"setsockopt(SO_SNDTIMEO)");

254  
REDIS_ERR
;

256  
REDIS_OK
;

257 
	}
}

259 
	$_ªdisC⁄ãxtC⁄√˘T˝
(
ªdisC⁄ãxt
 *
c
, c⁄° *
addr
, 
p‹t
,

260 c⁄° 
timevÆ
 *
timeout
,

261 c⁄° *
sour˚_addr
) {

262 
s
, 
rv
, 
n
;

263 
_p‹t
[6];

264 
addröfo
 
höts
, *
£rvöfo
, *
b£rvöfo
, *
p
, *
b
;

265 
blockög
 = (
c
->
Êags
 & 
REDIS_BLOCK
);

266 
ªu£addr
 = (
c
->
Êags
 & 
REDIS_REUSEADDR
);

267 
ªu£s
 = 0;

269 
c
->
c⁄√˘i⁄_ty≥
 = 
REDIS_CONN_TCP
;

270 
c
->
t˝
.
p‹t
 =Öort;

279 i‡(
c
->
t˝
.
ho°
 !
addr
) {

280 i‡(
c
->
t˝
.
ho°
)

281 
	`‰ì
(
c
->
t˝
.
ho°
);

283 
c
->
t˝
.
ho°
 = 
	`°rdup
(
addr
);

286 i‡(
timeout
) {

287 i‡(
c
->
timeout
 !=Åimeout) {

288 i‡(
c
->
timeout
 =
NULL
)

289 
c
->
timeout
 = 
	`mÆloc
((
timevÆ
));

291 
	`mem˝y
(
c
->
timeout
,Åimeout, (
timevÆ
));

294 i‡(
c
->
timeout
)

295 
	`‰ì
(
c
->
timeout
);

296 
c
->
timeout
 = 
NULL
;

299 i‡(
sour˚_addr
 =
NULL
) {

300 
	`‰ì
(
c
->
t˝
.
sour˚_addr
);

301 
c
->
t˝
.
sour˚_addr
 = 
NULL
;

302 } i‡(
c
->
t˝
.
sour˚_addr
 != source_addr) {

303 
	`‰ì
(
c
->
t˝
.
sour˚_addr
);

304 
c
->
t˝
.
sour˚_addr
 = 
	`°rdup
(source_addr);

307 
	`¢¥ötf
(
_p‹t
, 6, "%d", 
p‹t
);

308 
	`mem£t
(&
höts
,0,(hints));

309 
höts
.
ai_Ámûy
 = 
AF_INET
;

310 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

317 i‡((
rv
 = 
	`gëaddröfo
(
c
->
t˝
.
ho°
,
_p‹t
,&
höts
,&
£rvöfo
)) != 0) {

318 
höts
.
ai_Ámûy
 = 
AF_INET6
;

319 i‡((
rv
 = 
	`gëaddröfo
(
addr
,
_p‹t
,&
höts
,&
£rvöfo
)) != 0) {

320 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
	`gai_°ªº‹
(
rv
));

321  
REDIS_ERR
;

324 
p
 = 
£rvöfo
;Ö !
NULL
;Ö =Ö->
ai_√xt
) {

325 
addºëry
:

326 i‡((
s
 = 
	`sockë
(
p
->
ai_Ámûy
,p->
ai_sockty≥
,p->
ai_¥Ÿocﬁ
)) == -1)

329 
c
->
fd
 = 
s
;

330 i‡(
	`ªdisSëBlockög
(
c
,0Ë!
REDIS_OK
)

331 
îr‹
;

332 i‡(
c
->
t˝
.
sour˚_addr
) {

333 
bound
 = 0;

335 i‡((
rv
 = 
	`gëaddröfo
(
c
->
t˝
.
sour˚_addr
, 
NULL
, &
höts
, &
b£rvöfo
)) != 0) {

336 
buf
[128];

337 
	`¢¥ötf
(
buf
,(buf),"C™'àgëáddr: %s",
	`gai_°ªº‹
(
rv
));

338 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
buf
);

339 
îr‹
;

342 i‡(
ªu£addr
) {

343 
n
 = 1;

344 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
n
,

345 (
n
)) < 0) {

346 
îr‹
;

350 
b
 = 
b£rvöfo
; b !
NULL
; b = b->
ai_√xt
) {

351 i‡(
	`böd
(
s
,
b
->
ai_addr
,b->
ai_addæí
) != -1) {

352 
bound
 = 1;

356 
	`‰ìaddröfo
(
b£rvöfo
);

357 i‡(!
bound
) {

358 
buf
[128];

359 
	`¢¥ötf
(
buf
,(buf),"C™'àböd sockë: %s",
	`°ªº‹
(
î∫o
));

360 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
buf
);

361 
îr‹
;

364 i‡(
	`c⁄√˘
(
s
,
p
->
ai_addr
,p->
ai_addæí
) == -1) {

365 i‡(
î∫o
 =
EHOSTUNREACH
) {

366 
	`ªdisC⁄ãxtClo£Fd
(
c
);

368 } i‡(
î∫o
 =
EINPROGRESS
 && !
blockög
) {

370 } i‡(
î∫o
 =
EADDRNOTAVAIL
 && 
ªu£addr
) {

371 i‡(++
ªu£s
 >
REDIS_CONNECT_RETRIES
) {

372 
îr‹
;

374 
addºëry
;

377 i‡(
	`ªdisC⁄ãxtWaôRódy
(
c
,c->
timeout
Ë!
REDIS_OK
)

378 
îr‹
;

381 i‡(
blockög
 && 
	`ªdisSëBlockög
(
c
,1Ë!
REDIS_OK
)

382 
îr‹
;

383 i‡(
	`ªdisSëT˝NoDñay
(
c
Ë!
REDIS_OK
)

384 
îr‹
;

386 
c
->
Êags
 |
REDIS_CONNECTED
;

387 
rv
 = 
REDIS_OK
;

388 
íd
;

390 i‡(
p
 =
NULL
) {

391 
buf
[128];

392 
	`¢¥ötf
(
buf
,(buf),"C™'à¸óã sockë: %s",
	`°ªº‹
(
î∫o
));

393 
	`__ªdisSëEº‹
(
c
,
REDIS_ERR_OTHER
,
buf
);

394 
îr‹
;

397 
îr‹
:

398 
rv
 = 
REDIS_ERR
;

399 
íd
:

400 
	`‰ìaddröfo
(
£rvöfo
);

401  
rv
;

402 
	}
}

404 
	$ªdisC⁄ãxtC⁄√˘T˝
(
ªdisC⁄ãxt
 *
c
, c⁄° *
addr
, 
p‹t
,

405 c⁄° 
timevÆ
 *
timeout
) {

406  
	`_ªdisC⁄ãxtC⁄√˘T˝
(
c
, 
addr
, 
p‹t
, 
timeout
, 
NULL
);

407 
	}
}

409 
	$ªdisC⁄ãxtC⁄√˘BödT˝
(
ªdisC⁄ãxt
 *
c
, c⁄° *
addr
, 
p‹t
,

410 c⁄° 
timevÆ
 *
timeout
,

411 c⁄° *
sour˚_addr
) {

412  
	`_ªdisC⁄ãxtC⁄√˘T˝
(
c
, 
addr
, 
p‹t
, 
timeout
, 
sour˚_addr
);

413 
	}
}

415 
	$ªdisC⁄ãxtC⁄√˘Unix
(
ªdisC⁄ãxt
 *
c
, c⁄° *
∑th
, c⁄° 
timevÆ
 *
timeout
) {

416 
blockög
 = (
c
->
Êags
 & 
REDIS_BLOCK
);

417 
sockaddr_un
 
ß
;

419 i‡(
	`ªdisCª©eSockë
(
c
,
AF_LOCAL
) < 0)

420  
REDIS_ERR
;

421 i‡(
	`ªdisSëBlockög
(
c
,0Ë!
REDIS_OK
)

422  
REDIS_ERR
;

424 
c
->
c⁄√˘i⁄_ty≥
 = 
REDIS_CONN_UNIX
;

425 i‡(
c
->
unix_sock
.
∑th
 !=Öath)

426 
c
->
unix_sock
.
∑th
 = 
	`°rdup
(path);

428 i‡(
timeout
) {

429 i‡(
c
->
timeout
 !=Åimeout) {

430 i‡(
c
->
timeout
 =
NULL
)

431 
c
->
timeout
 = 
	`mÆloc
((
timevÆ
));

433 
	`mem˝y
(
c
->
timeout
,Åimeout, (
timevÆ
));

436 i‡(
c
->
timeout
)

437 
	`‰ì
(
c
->
timeout
);

438 
c
->
timeout
 = 
NULL
;

441 
ß
.
sun_Ámûy
 = 
AF_LOCAL
;

442 
	`°∫˝y
(
ß
.
sun_∑th
,
∑th
,(sa.sun_path)-1);

443 i‡(
	`c⁄√˘
(
c
->
fd
, (
sockaddr
*)&
ß
, (sa)) == -1) {

444 i‡(
î∫o
 =
EINPROGRESS
 && !
blockög
) {

447 i‡(
	`ªdisC⁄ãxtWaôRódy
(
c
,c->
timeout
Ë!
REDIS_OK
)

448  
REDIS_ERR
;

453 i‡(
blockög
 && 
	`ªdisSëBlockög
(
c
,1Ë!
REDIS_OK
)

454  
REDIS_ERR
;

456 
c
->
Êags
 |
REDIS_CONNECTED
;

457  
REDIS_OK
;

458 
	}
}

	@dep/hiredis-0.13.3/net.h

35 #i‚de‡
__NET_H


36 
	#__NET_H


	)

38 
	~"húedis.h
"

40 #i‡
deföed
(
__sun
)

41 
	#AF_LOCAL
 
AF_UNIX


	)

44 
ªdisCheckSockëEº‹
(
ªdisC⁄ãxt
 *
c
);

45 
ªdisC⁄ãxtSëTimeout
(
ªdisC⁄ãxt
 *
c
, c⁄° 
timevÆ
 
tv
);

46 
ªdisC⁄ãxtC⁄√˘T˝
(
ªdisC⁄ãxt
 *
c
, c⁄° *
addr
, 
p‹t
, c⁄° 
timevÆ
 *
timeout
);

47 
ªdisC⁄ãxtC⁄√˘BödT˝
(
ªdisC⁄ãxt
 *
c
, c⁄° *
addr
, 
p‹t
,

48 c⁄° 
timevÆ
 *
timeout
,

49 c⁄° *
sour˚_addr
);

50 
ªdisC⁄ãxtC⁄√˘Unix
(
ªdisC⁄ãxt
 *
c
, c⁄° *
∑th
, c⁄° 
timevÆ
 *
timeout
);

51 
ªdisKìpAlive
(
ªdisC⁄ãxt
 *
c
, 
öãrvÆ
);

	@dep/hiredis-0.13.3/read.c

33 
	~"fma¸os.h
"

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

36 #i‚de‡
_MSC_VER


37 
	~<uni°d.h
>

39 
	~<as£π.h
>

40 
	~<î∫o.h
>

41 
	~<˘y≥.h
>

43 
	~"ªad.h
"

44 
	~"sds.h
"

46 
	$__ªdisRódîSëEº‹
(
ªdisRódî
 *
r
, 
ty≥
, c⁄° *
°r
) {

47 
size_t
 
Àn
;

49 i‡(
r
->
ª∂y
 !
NULL
 &&Ñ->
‚
 &&Ñ->‚->
‰ìObje˘
) {

50 
r
->
‚
->
	`‰ìObje˘
‘->
ª∂y
);

51 
r
->
ª∂y
 = 
NULL
;

55 i‡(
r
->
buf
 !
NULL
) {

56 
	`sds‰ì
(
r
->
buf
);

57 
r
->
buf
 = 
NULL
;

58 
r
->
pos
 =Ñ->
Àn
 = 0;

62 
r
->
ridx
 = -1;

65 
r
->
îr
 = 
ty≥
;

66 
Àn
 = 
	`°æí
(
°r
);

67 
Àn
 =Üí < ((
r
->
îr°r
)-1) ?Üen : ((r->errstr)-1);

68 
	`mem˝y
(
r
->
îr°r
,
°r
,
Àn
);

69 
r
->
îr°r
[
Àn
] = '\0';

70 
	}
}

72 
size_t
 
	$chπos
(*
buf
, 
size_t
 
size
, 
byã
) {

73 
size_t
 
Àn
 = 0;

75 
byã
) {

78 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\%c\"",
byã
);

80 '\n': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\n\""); ;

81 '\r': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\r\""); ;

82 '\t': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\t\""); ;

83 '\a': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\a\""); ;

84 '\b': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\b\""); ;

86 i‡(
	`i•röt
(
byã
))

87 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"%c\"",
byã
);

89 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\x%02x\"",()
byã
);

93  
Àn
;

94 
	}
}

96 
	$__ªdisRódîSëEº‹PrŸocﬁByã
(
ªdisRódî
 *
r
, 
byã
) {

97 
cbuf
[8], 
sbuf
[128];

99 
	`chπos
(
cbuf
,(cbuf),
byã
);

100 
	`¢¥ötf
(
sbuf
,(sbuf),

101 "PrŸocﬁÉº‹, gŸ %†a†ª∂yÅy≥ byã", 
cbuf
);

102 
	`__ªdisRódîSëEº‹
(
r
,
REDIS_ERR_PROTOCOL
,
sbuf
);

103 
	}
}

105 
	$__ªdisRódîSëEº‹OOM
(
ªdisRódî
 *
r
) {

106 
	`__ªdisRódîSëEº‹
(
r
,
REDIS_ERR_OOM
,"Out of memory");

107 
	}
}

109 *
	$ªadByãs
(
ªdisRódî
 *
r
, 
byãs
) {

110 *
p
;

111 i‡(
r
->
Àn
-r->
pos
 >
byãs
) {

112 
p
 = 
r
->
buf
+r->
pos
;

113 
r
->
pos
 +
byãs
;

114  
p
;

116  
NULL
;

117 
	}
}

120 *
	$£ekNewlöe
(*
s
, 
size_t
 
Àn
) {

121 
pos
 = 0;

122 
_Àn
 = 
Àn
-1;

128 
pos
 < 
_Àn
) {

129 
pos
 < 
_Àn
 && 
s
[pos] != '\r')Öos++;

130 i‡(
s
[
pos
] != '\r') {

132  
NULL
;

134 i‡(
s
[
pos
+1] == '\n') {

136  
s
+
pos
;

139 
pos
++;

143  
NULL
;

144 
	}
}

148 
	$ªadL⁄gL⁄g
(*
s
) {

149 
v
 = 0;

150 
dec
, 
mu…
 = 1;

151 
c
;

153 i‡(*
s
 == '-') {

154 
mu…
 = -1;

155 
s
++;

156 } i‡(*
s
 == '+') {

157 
mu…
 = 1;

158 
s
++;

161 (
c
 = *(
s
++)) != '\r') {

162 
dec
 = 
c
 - '0';

163 i‡(
dec
 >= 0 && dec < 10) {

164 
v
 *= 10;

165 
v
 +
dec
;

172  
mu…
*
v
;

173 
	}
}

175 *
	$ªadLöe
(
ªdisRódî
 *
r
, *
_Àn
) {

176 *
p
, *
s
;

177 
Àn
;

179 
p
 = 
r
->
buf
+r->
pos
;

180 
s
 = 
	`£ekNewlöe
(
p
,(
r
->
Àn
-r->
pos
));

181 i‡(
s
 !
NULL
) {

182 
Àn
 = 
s
-(
r
->
buf
+r->
pos
);

183 
r
->
pos
 +
Àn
+2;

184 i‡(
_Àn
Ë*_À¿
Àn
;

185  
p
;

187  
NULL
;

188 
	}
}

190 
	$moveToNextTask
(
ªdisRódî
 *
r
) {

191 
ªdisRódTask
 *
cur
, *
¥v
;

192 
r
->
ridx
 >= 0) {

194 i‡(
r
->
ridx
 == 0) {

195 
r
->
ridx
--;

199 
cur
 = &(
r
->
r°ack
[r->
ridx
]);

200 
¥v
 = &(
r
->
r°ack
[r->
ridx
-1]);

201 
	`as£π
(
¥v
->
ty≥
 =
REDIS_REPLY_ARRAY
);

202 i‡(
cur
->
idx
 =
¥v
->
ñemíts
-1) {

203 
r
->
ridx
--;

206 
	`as£π
(
cur
->
idx
 < 
¥v
->
ñemíts
);

207 
cur
->
ty≥
 = -1;

208 
cur
->
ñemíts
 = -1;

209 
cur
->
idx
++;

213 
	}
}

215 
	$¥o˚ssLöeIãm
(
ªdisRódî
 *
r
) {

216 
ªdisRódTask
 *
cur
 = &(
r
->
r°ack
[r->
ridx
]);

217 *
obj
;

218 *
p
;

219 
Àn
;

221 i‡((
p
 = 
	`ªadLöe
(
r
,&
Àn
)Ë!
NULL
) {

222 i‡(
cur
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

223 i‡(
r
->
‚
 &&Ñ->‚->
¸óãI¡egî
)

224 
obj
 = 
r
->
‚
->
	`¸óãI¡egî
(
cur
,
	`ªadL⁄gL⁄g
(
p
));

226 
obj
 = (*)
REDIS_REPLY_INTEGER
;

229 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

230 
obj
 = 
r
->
‚
->
	`¸óãSåög
(
cur
,
p
,
Àn
);

232 
obj
 = (*)(
size_t
)(
cur
->
ty≥
);

235 i‡(
obj
 =
NULL
) {

236 
	`__ªdisRódîSëEº‹OOM
(
r
);

237  
REDIS_ERR
;

241 i‡(
r
->
ridx
 =0Ër->
ª∂y
 = 
obj
;

242 
	`moveToNextTask
(
r
);

243  
REDIS_OK
;

246  
REDIS_ERR
;

247 
	}
}

249 
	$¥o˚ssBulkIãm
(
ªdisRódî
 *
r
) {

250 
ªdisRódTask
 *
cur
 = &(
r
->
r°ack
[r->
ridx
]);

251 *
obj
 = 
NULL
;

252 *
p
, *
s
;

253 
Àn
;

254 
byãÀn
;

255 
suc˚ss
 = 0;

257 
p
 = 
r
->
buf
+r->
pos
;

258 
s
 = 
	`£ekNewlöe
(
p
,
r
->
Àn
-r->
pos
);

259 i‡(
s
 !
NULL
) {

260 
p
 = 
r
->
buf
+r->
pos
;

261 
byãÀn
 = 
s
-(
r
->
buf
+r->
pos
)+2;

262 
Àn
 = 
	`ªadL⁄gL⁄g
(
p
);

264 i‡(
Àn
 < 0) {

266 i‡(
r
->
‚
 &&Ñ->‚->
¸óãNû
)

267 
obj
 = 
r
->
‚
->
	`¸óãNû
(
cur
);

269 
obj
 = (*)
REDIS_REPLY_NIL
;

270 
suc˚ss
 = 1;

273 
byãÀn
 +
Àn
+2;

274 i‡(
r
->
pos
+
byãÀn
 <r->
Àn
) {

275 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

276 
obj
 = 
r
->
‚
->
	`¸óãSåög
(
cur
,
s
+2,
Àn
);

278 
obj
 = (*)
REDIS_REPLY_STRING
;

279 
suc˚ss
 = 1;

284 i‡(
suc˚ss
) {

285 i‡(
obj
 =
NULL
) {

286 
	`__ªdisRódîSëEº‹OOM
(
r
);

287  
REDIS_ERR
;

290 
r
->
pos
 +
byãÀn
;

293 i‡(
r
->
ridx
 =0Ër->
ª∂y
 = 
obj
;

294 
	`moveToNextTask
(
r
);

295  
REDIS_OK
;

299  
REDIS_ERR
;

300 
	}
}

302 
	$¥o˚ssMu…iBulkIãm
(
ªdisRódî
 *
r
) {

303 
ªdisRódTask
 *
cur
 = &(
r
->
r°ack
[r->
ridx
]);

304 *
obj
;

305 *
p
;

306 
ñemíts
;

307 
roŸ
 = 0;

310 i‡(
r
->
ridx
 == 8) {

311 
	`__ªdisRódîSëEº‹
(
r
,
REDIS_ERR_PROTOCOL
,

313  
REDIS_ERR
;

316 i‡((
p
 = 
	`ªadLöe
(
r
,
NULL
)) != NULL) {

317 
ñemíts
 = 
	`ªadL⁄gL⁄g
(
p
);

318 
roŸ
 = (
r
->
ridx
 == 0);

320 i‡(
ñemíts
 == -1) {

321 i‡(
r
->
‚
 &&Ñ->‚->
¸óãNû
)

322 
obj
 = 
r
->
‚
->
	`¸óãNû
(
cur
);

324 
obj
 = (*)
REDIS_REPLY_NIL
;

326 i‡(
obj
 =
NULL
) {

327 
	`__ªdisRódîSëEº‹OOM
(
r
);

328  
REDIS_ERR
;

331 
	`moveToNextTask
(
r
);

333 i‡(
r
->
‚
 &&Ñ->‚->
¸óãAºay
)

334 
obj
 = 
r
->
‚
->
	`¸óãAºay
(
cur
,
ñemíts
);

336 
obj
 = (*)
REDIS_REPLY_ARRAY
;

338 i‡(
obj
 =
NULL
) {

339 
	`__ªdisRódîSëEº‹OOM
(
r
);

340  
REDIS_ERR
;

344 i‡(
ñemíts
 > 0) {

345 
cur
->
ñemíts
 =Élements;

346 
cur
->
obj
 = obj;

347 
r
->
ridx
++;

348 
r
->
r°ack
[r->
ridx
].
ty≥
 = -1;

349 
r
->
r°ack
[r->
ridx
].
ñemíts
 = -1;

350 
r
->
r°ack
[r->
ridx
].
idx
 = 0;

351 
r
->
r°ack
[r->
ridx
].
obj
 = 
NULL
;

352 
r
->
r°ack
[r->
ridx
].
∑ª¡
 = 
cur
;

353 
r
->
r°ack
[r->
ridx
].
¥ivd©a
 =Ñ->privdata;

355 
	`moveToNextTask
(
r
);

360 i‡(
roŸ
Ë
r
->
ª∂y
 = 
obj
;

361  
REDIS_OK
;

364  
REDIS_ERR
;

365 
	}
}

367 
	$¥o˚ssIãm
(
ªdisRódî
 *
r
) {

368 
ªdisRódTask
 *
cur
 = &(
r
->
r°ack
[r->
ridx
]);

369 *
p
;

372 i‡(
cur
->
ty≥
 < 0) {

373 i‡((
p
 = 
	`ªadByãs
(
r
,1)Ë!
NULL
) {

374 
p
[0]) {

376 
cur
->
ty≥
 = 
REDIS_REPLY_ERROR
;

379 
cur
->
ty≥
 = 
REDIS_REPLY_STATUS
;

382 
cur
->
ty≥
 = 
REDIS_REPLY_INTEGER
;

385 
cur
->
ty≥
 = 
REDIS_REPLY_STRING
;

388 
cur
->
ty≥
 = 
REDIS_REPLY_ARRAY
;

391 
	`__ªdisRódîSëEº‹PrŸocﬁByã
(
r
,*
p
);

392  
REDIS_ERR
;

396  
REDIS_ERR
;

401 
cur
->
ty≥
) {

402 
REDIS_REPLY_ERROR
:

403 
REDIS_REPLY_STATUS
:

404 
REDIS_REPLY_INTEGER
:

405  
	`¥o˚ssLöeIãm
(
r
);

406 
REDIS_REPLY_STRING
:

407  
	`¥o˚ssBulkIãm
(
r
);

408 
REDIS_REPLY_ARRAY
:

409  
	`¥o˚ssMu…iBulkIãm
(
r
);

411 
	`as£π
(
NULL
);

412  
REDIS_ERR
;

414 
	}
}

416 
ªdisRódî
 *
	$ªdisRódîCª©eWôhFun˘i⁄s
(
ªdisRïlyObje˘Fun˘i⁄s
 *
‚
) {

417 
ªdisRódî
 *
r
;

419 
r
 = 
	`ˇŒoc
((
ªdisRódî
),1);

420 i‡(
r
 =
NULL
)

421  
NULL
;

423 
r
->
îr
 = 0;

424 
r
->
îr°r
[0] = '\0';

425 
r
->
‚
 = fn;

426 
r
->
buf
 = 
	`sd£m±y
();

427 
r
->
maxbuf
 = 
REDIS_READER_MAX_BUF
;

428 i‡(
r
->
buf
 =
NULL
) {

429 
	`‰ì
(
r
);

430  
NULL
;

433 
r
->
ridx
 = -1;

434  
r
;

435 
	}
}

437 
	$ªdisRódîFªe
(
ªdisRódî
 *
r
) {

438 i‡(
r
->
ª∂y
 !
NULL
 &&Ñ->
‚
 &&Ñ->‚->
‰ìObje˘
)

439 
r
->
‚
->
	`‰ìObje˘
‘->
ª∂y
);

440 i‡(
r
->
buf
 !
NULL
)

441 
	`sds‰ì
(
r
->
buf
);

442 
	`‰ì
(
r
);

443 
	}
}

445 
	$ªdisRódîFìd
(
ªdisRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
) {

446 
sds
 
√wbuf
;

449 i‡(
r
->
îr
)

450  
REDIS_ERR
;

453 i‡(
buf
 !
NULL
 && 
Àn
 >= 1) {

455 i‡(
r
->
Àn
 =0 &&Ñ->
maxbuf
 !0 && 
	`sdßvaû
‘->
buf
) >Ñ->maxbuf) {

456 
	`sds‰ì
(
r
->
buf
);

457 
r
->
buf
 = 
	`sd£m±y
();

458 
r
->
pos
 = 0;

461 
	`as£π
(
r
->
buf
 !
NULL
);

464 
√wbuf
 = 
	`sdsˇéí
(
r
->
buf
,buf,
Àn
);

465 i‡(
√wbuf
 =
NULL
) {

466 
	`__ªdisRódîSëEº‹OOM
(
r
);

467  
REDIS_ERR
;

470 
r
->
buf
 = 
√wbuf
;

471 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

474  
REDIS_OK
;

475 
	}
}

477 
	$ªdisRódîGëRïly
(
ªdisRódî
 *
r
, **
ª∂y
) {

479 i‡(
ª∂y
 !
NULL
)

480 *
ª∂y
 = 
NULL
;

483 i‡(
r
->
îr
)

484  
REDIS_ERR
;

487 i‡(
r
->
Àn
 == 0)

488  
REDIS_OK
;

491 i‡(
r
->
ridx
 == -1) {

492 
r
->
r°ack
[0].
ty≥
 = -1;

493 
r
->
r°ack
[0].
ñemíts
 = -1;

494 
r
->
r°ack
[0].
idx
 = -1;

495 
r
->
r°ack
[0].
obj
 = 
NULL
;

496 
r
->
r°ack
[0].
∑ª¡
 = 
NULL
;

497 
r
->
r°ack
[0].
¥ivd©a
 =Ñ->privdata;

498 
r
->
ridx
 = 0;

502 
r
->
ridx
 >= 0)

503 i‡(
	`¥o˚ssIãm
(
r
Ë!
REDIS_OK
)

507 i‡(
r
->
îr
)

508  
REDIS_ERR
;

512 i‡(
r
->
pos
 >= 1024) {

513 
	`sd§™ge
(
r
->
buf
,r->
pos
,-1);

514 
r
->
pos
 = 0;

515 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

519 i‡(
r
->
ridx
 == -1) {

520 i‡(
ª∂y
 !
NULL
)

521 *
ª∂y
 = 
r
->reply;

522 
r
->
ª∂y
 = 
NULL
;

524  
REDIS_OK
;

525 
	}
}

	@dep/hiredis-0.13.3/read.h

33 #i‚de‡
__HIREDIS_READ_H


34 
	#__HIREDIS_READ_H


	)

35 
	~<°dio.h
>

37 
	#REDIS_ERR
 -1

	)

38 
	#REDIS_OK
 0

	)

44 
	#REDIS_ERR_IO
 1

	)

45 
	#REDIS_ERR_EOF
 3

	)

46 
	#REDIS_ERR_PROTOCOL
 4

	)

47 
	#REDIS_ERR_OOM
 5

	)

48 
	#REDIS_ERR_OTHER
 2

	)

50 
	#REDIS_REPLY_STRING
 1

	)

51 
	#REDIS_REPLY_ARRAY
 2

	)

52 
	#REDIS_REPLY_INTEGER
 3

	)

53 
	#REDIS_REPLY_NIL
 4

	)

54 
	#REDIS_REPLY_STATUS
 5

	)

55 
	#REDIS_REPLY_ERROR
 6

	)

57 
	#REDIS_READER_MAX_BUF
 (1024*16Ë

	)

59 #ifde‡
__˝lu•lus


63 
	sªdisRódTask
 {

64 
ty≥
;

65 
ñemíts
;

66 
idx
;

67 *
obj
;

68 
ªdisRódTask
 *
∑ª¡
;

69 *
¥ivd©a
;

70 } 
	tªdisRódTask
;

72 
	sªdisRïlyObje˘Fun˘i⁄s
 {

73 *(*
¸óãSåög
)(c⁄° 
ªdisRódTask
*, *, 
size_t
);

74 *(*
¸óãAºay
)(c⁄° 
ªdisRódTask
*, );

75 *(*
¸óãI¡egî
)(c⁄° 
ªdisRódTask
*, );

76 *(*
¸óãNû
)(c⁄° 
ªdisRódTask
*);

77 (*
‰ìObje˘
)(*);

78 } 
	tªdisRïlyObje˘Fun˘i⁄s
;

80 
	sªdisRódî
 {

81 
îr
;

82 
îr°r
[128];

84 *
buf
;

85 
size_t
 
pos
;

86 
size_t
 
Àn
;

87 
size_t
 
maxbuf
;

89 
ªdisRódTask
 
r°ack
[9];

90 
ridx
;

91 *
ª∂y
;

93 
ªdisRïlyObje˘Fun˘i⁄s
 *
‚
;

94 *
¥ivd©a
;

95 } 
	tªdisRódî
;

98 
ªdisRódî
 *
ªdisRódîCª©eWôhFun˘i⁄s
(
ªdisRïlyObje˘Fun˘i⁄s
 *
‚
);

99 
ªdisRódîFªe
(
ªdisRódî
 *
r
);

100 
ªdisRódîFìd
(
ªdisRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
);

101 
ªdisRódîGëRïly
(
ªdisRódî
 *
r
, **
ª∂y
);

104 
	#ªdisRïlyRódîCª©e
 
ªdisRódîCª©e


	)

105 
	#ªdisRïlyRódîFªe
 
ªdisRódîFªe


	)

106 
	#ªdisRïlyRódîFìd
 
ªdisRódîFìd


	)

107 
	#ªdisRïlyRódîGëRïly
 
ªdisRódîGëRïly


	)

108 
	#ªdisRïlyRódîSëPrivd©a
(
_r
, 
_p
Ë()(((
ªdisRódî
*)(_r))->
¥ivd©a
 = (_p))

	)

109 
	#ªdisRïlyRódîGëObje˘
(
_r
Ë(((
ªdisRódî
*)(_r))->
ª∂y
)

	)

110 
	#ªdisRïlyRódîGëEº‹
(
_r
Ë(((
ªdisRódî
*)(_r))->
îr°r
)

	)

112 #ifde‡
__˝lu•lus


	@dep/hiredis-0.13.3/sds.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<˘y≥.h
>

35 
	~<as£π.h
>

37 
	~"sds.h
"

51 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

52 
sdshdr
 *
sh
;

54 i‡(
öô
) {

55 
sh
 = 
	`mÆloc
( *sh+
öôÀn
+1);

57 
sh
 = 
	`ˇŒoc
( *sh+
öôÀn
+1,1);

59 i‡(
sh
 =
NULL
)  NULL;

60 
sh
->
Àn
 = 
öôÀn
;

61 
sh
->
‰ì
 = 0;

62 i‡(
öôÀn
 && 
öô
)

63 
	`mem˝y
(
sh
->
buf
, 
öô
, 
öôÀn
);

64 
sh
->
buf
[
öôÀn
] = '\0';

65  (*)
sh
->
buf
;

66 
	}
}

70 
sds
 
	$sd£m±y
() {

71  
	`sd¢ewÀn
("",0);

72 
	}
}

75 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

76 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

77  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

78 
	}
}

81 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

82  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

83 
	}
}

86 
	$sds‰ì
(
sds
 
s
) {

87 i‡(
s
 =
NULL
) ;

88 
	`‰ì
(
s
-(
sdshdr
));

89 
	}
}

105 
	$sdsupd©ñí
(
sds
 
s
) {

106 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

107 
ªÆÀn
 = 
	`°æí
(
s
);

108 
sh
->
‰ì
 +(sh->
Àn
-
ªÆÀn
);

109 
sh
->
Àn
 = 
ªÆÀn
;

110 
	}
}

116 
	$sds˛ór
(
sds
 
s
) {

117 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

118 
sh
->
‰ì
 +sh->
Àn
;

119 
sh
->
Àn
 = 0;

120 
sh
->
buf
[0] = '\0';

121 
	}
}

129 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

130 
sdshdr
 *
sh
, *
√wsh
;

131 
size_t
 
‰ì
 = 
	`sdßvaû
(
s
);

132 
size_t
 
Àn
, 
√wÀn
;

134 i‡(
‰ì
 >
addÀn
Ë 
s
;

135 
Àn
 = 
	`sd¶í
(
s
);

136 
sh
 = (*Ë(
s
- *sh);

137 
√wÀn
 = (
Àn
+
addÀn
);

138 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

139 
√wÀn
 *= 2;

141 
√wÀn
 +
SDS_MAX_PREALLOC
;

142 
√wsh
 = 
	`ªÆloc
(
sh
,  *√wsh+
√wÀn
+1);

143 i‡(
√wsh
 =
NULL
)  NULL;

145 
√wsh
->
‰ì
 = 
√wÀn
 - 
Àn
;

146  
√wsh
->
buf
;

147 
	}
}

155 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

156 
sdshdr
 *
sh
;

158 
sh
 = (*Ë(
s
- *sh);

159 
sh
 = 
	`ªÆloc
(sh,  *sh+sh->
Àn
+1);

160 
sh
->
‰ì
 = 0;

161  
sh
->
buf
;

162 
	}
}

171 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

172 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

174  (*
sh
)+sh->
Àn
+sh->
‰ì
+1;

175 
	}
}

200 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

201 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

203 
	`as£π
(
sh
->
‰ì
 >
ö¸
);

204 
sh
->
Àn
 +
ö¸
;

205 
sh
->
‰ì
 -
ö¸
;

206 
	`as£π
(
sh
->
‰ì
 >= 0);

207 
s
[
sh
->
Àn
] = '\0';

208 
	}
}

215 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

216 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

217 
size_t
 
tŸÀn
, 
cuæí
 = 
sh
->
Àn
;

219 i‡(
Àn
 <
cuæí
Ë 
s
;

220 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

221 i‡(
s
 =
NULL
)  NULL;

224 
sh
 = (*)(
s
- *sh);

225 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

226 
tŸÀn
 = 
sh
->
Àn
+sh->
‰ì
;

227 
sh
->
Àn
 =Üen;

228 
sh
->
‰ì
 = 
tŸÀn
-sh->
Àn
;

229  
s
;

230 
	}
}

237 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

238 
sdshdr
 *
sh
;

239 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

241 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

242 i‡(
s
 =
NULL
)  NULL;

243 
sh
 = (*Ë(
s
- *sh);

244 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

245 
sh
->
Àn
 = 
cuæí
+len;

246 
sh
->
‰ì
 = sh->‰ì-
Àn
;

247 
s
[
cuæí
+
Àn
] = '\0';

248  
s
;

249 
	}
}

255 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

256  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

257 
	}
}

263 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

264  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

265 
	}
}

269 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

270 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

271 
size_t
 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

273 i‡(
tŸÀn
 < 
Àn
) {

274 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
sh
->len);

275 i‡(
s
 =
NULL
)  NULL;

276 
sh
 = (*Ë(
s
- *sh);

277 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

279 
	`mem˝y
(
s
, 
t
, 
Àn
);

280 
s
[
Àn
] = '\0';

281 
sh
->
Àn
 =Üen;

282 
sh
->
‰ì
 = 
tŸÀn
-
Àn
;

283  
s
;

284 
	}
}

288 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

289  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

290 
	}
}

298 
	#SDS_LLSTR_SIZE
 21

	)

299 
	$sd¶l2°r
(*
s
, 
vÆue
) {

300 *
p
, 
aux
;

301 
v
;

302 
size_t
 
l
;

306 
v
 = (
vÆue
 < 0) ? -value : value;

307 
p
 = 
s
;

309 *
p
++ = '0'+(
v
%10);

310 
v
 /= 10;

311 } 
v
);

312 i‡(
vÆue
 < 0Ë*
p
++ = '-';

315 
l
 = 
p
-
s
;

316 *
p
 = '\0';

319 
p
--;

320 
s
 < 
p
) {

321 
aux
 = *
s
;

322 *
s
 = *
p
;

323 *
p
 = 
aux
;

324 
s
++;

325 
p
--;

327  
l
;

328 
	}
}

331 
	$sdsuŒ2°r
(*
s
, 
v
) {

332 *
p
, 
aux
;

333 
size_t
 
l
;

337 
p
 = 
s
;

339 *
p
++ = '0'+(
v
%10);

340 
v
 /= 10;

341 } 
v
);

344 
l
 = 
p
-
s
;

345 *
p
 = '\0';

348 
p
--;

349 
s
 < 
p
) {

350 
aux
 = *
s
;

351 *
s
 = *
p
;

352 *
p
 = 
aux
;

353 
s
++;

354 
p
--;

356  
l
;

357 
	}
}

360 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

361 
va_li°
 
˝y
;

362 *
buf
, *
t
;

363 
size_t
 
buÊí
 = 16;

366 
buf
 = 
	`mÆloc
(
buÊí
);

367 i‡(
buf
 =
NULL
)  NULL;

368 
buf
[
buÊí
-2] = '\0';

369 
	`va_c›y
(
˝y
,
≠
);

370 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

371 i‡(
buf
[
buÊí
-2] != '\0') {

372 
	`‰ì
(
buf
);

373 
buÊí
 *= 2;

378 
t
 = 
	`sdsˇt
(
s
, 
buf
);

379 
	`‰ì
(
buf
);

380  
t
;

381 
	}
}

399 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

400 
va_li°
 
≠
;

401 *
t
;

402 
	`va_°¨t
(
≠
, 
fmt
);

403 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

404 
	`va_íd
(
≠
);

405  
t
;

406 
	}
}

425 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

426 
sdshdr
 *
sh
 = (*Ë(
s
-((sdshdr)));

427 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

428 c⁄° *
f
 = 
fmt
;

429 
i
;

430 
va_li°
 
≠
;

432 
	`va_°¨t
(
≠
,
fmt
);

433 
f
 = 
fmt
;

434 
i
 = 
öôÀn
;

435 *
f
) {

436 
√xt
, *
°r
;

437 
l
;

438 
num
;

439 
unum
;

442 i‡(
sh
->
‰ì
 == 0) {

443 
s
 = 
	`sdsMakeRoomF‹
(s,1);

444 
sh
 = (*Ë(
s
-((
sdshdr
)));

447 *
f
) {

449 
√xt
 = *(
f
+1);

450 
f
++;

451 
√xt
) {

454 
°r
 = 
	`va_¨g
(
≠
,*);

455 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

456 i‡(
sh
->
‰ì
 < 
l
) {

457 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

458 
sh
 = (*Ë(
s
-((
sdshdr
)));

460 
	`mem˝y
(
s
+
i
,
°r
,
l
);

461 
sh
->
Àn
 +
l
;

462 
sh
->
‰ì
 -
l
;

463 
i
 +
l
;

467 i‡(
√xt
 == 'i')

468 
num
 = 
	`va_¨g
(
≠
,);

470 
num
 = 
	`va_¨g
(
≠
,);

472 
buf
[
SDS_LLSTR_SIZE
];

473 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

474 i‡(
sh
->
‰ì
 < 
l
) {

475 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

476 
sh
 = (*Ë(
s
-((
sdshdr
)));

478 
	`mem˝y
(
s
+
i
,
buf
,
l
);

479 
sh
->
Àn
 +
l
;

480 
sh
->
‰ì
 -
l
;

481 
i
 +
l
;

487 i‡(
√xt
 == 'u')

488 
unum
 = 
	`va_¨g
(
≠
,);

489 if(
√xt
 == 'U')

490 
unum
 = 
	`va_¨g
(
≠
,);

492 
unum
 = ()
	`va_¨g
(
≠
,
size_t
);

494 
buf
[
SDS_LLSTR_SIZE
];

495 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

496 i‡(
sh
->
‰ì
 < 
l
) {

497 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

498 
sh
 = (*Ë(
s
-((
sdshdr
)));

500 
	`mem˝y
(
s
+
i
,
buf
,
l
);

501 
sh
->
Àn
 +
l
;

502 
sh
->
‰ì
 -
l
;

503 
i
 +
l
;

507 
s
[
i
++] = 
√xt
;

508 
sh
->
Àn
 += 1;

509 
sh
->
‰ì
 -= 1;

514 
s
[
i
++] = *
f
;

515 
sh
->
Àn
 += 1;

516 
sh
->
‰ì
 -= 1;

519 
f
++;

521 
	`va_íd
(
≠
);

524 
s
[
i
] = '\0';

525  
s
;

526 
	}
}

543 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

544 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

545 *
°¨t
, *
íd
, *
•
, *
ï
;

546 
size_t
 
Àn
;

548 
•
 = 
°¨t
 = 
s
;

549 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

550 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

551 
ï
 > 
°¨t
 && 
	`°rchr
(
c£t
, *ep))Ép--;

552 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

553 i‡(
sh
->
buf
 !
•
Ë
	`memmove
(sh->buf, sp, 
Àn
);

554 
sh
->
buf
[
Àn
] = '\0';

555 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-len);

556 
sh
->
Àn
 =Üen;

557 
	}
}

575 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

576 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

577 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

579 i‡(
Àn
 == 0) ;

580 i‡(
°¨t
 < 0) {

581 
°¨t
 = 
Àn
+start;

582 i‡(
°¨t
 < 0) start = 0;

584 i‡(
íd
 < 0) {

585 
íd
 = 
Àn
+end;

586 i‡(
íd
 < 0)Énd = 0;

588 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

589 i‡(
√wÀn
 != 0) {

590 i‡(
°¨t
 >(sig√d)
Àn
) {

591 
√wÀn
 = 0;

592 } i‡(
íd
 >(sig√d)
Àn
) {

593 
íd
 = 
Àn
-1;

594 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

597 
°¨t
 = 0;

599 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
sh
->
buf
, sh->buf+start,Çewlen);

600 
sh
->
buf
[
√wÀn
] = 0;

601 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-
√wÀn
);

602 
sh
->
Àn
 = 
√wÀn
;

603 
	}
}

606 
	$sd°ﬁowî
(
sds
 
s
) {

607 
Àn
 = 
	`sd¶í
(
s
), 
j
;

609 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

610 
	}
}

613 
	$sd°ouµî
(
sds
 
s
) {

614 
Àn
 = 
	`sd¶í
(
s
), 
j
;

616 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

617 
	}
}

630 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

631 
size_t
 
l1
, 
l2
, 
möÀn
;

632 
cmp
;

634 
l1
 = 
	`sd¶í
(
s1
);

635 
l2
 = 
	`sd¶í
(
s2
);

636 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

637 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

638 i‡(
cmp
 =0Ë 
l1
-
l2
;

639  
cmp
;

640 
	}
}

658 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

659 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

660 
sds
 *
tokís
;

662 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

664 
tokís
 = 
	`mÆloc
((
sds
)*
¶Ÿs
);

665 i‡(
tokís
 =
NULL
)  NULL;

667 i‡(
Àn
 == 0) {

668 *
cou¡
 = 0;

669  
tokís
;

671 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

673 i‡(
¶Ÿs
 < 
ñemíts
+2) {

674 
sds
 *
√wtokís
;

676 
¶Ÿs
 *= 2;

677 
√wtokís
 = 
	`ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

678 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

679 
tokís
 = 
√wtokís
;

682 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

683 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

684 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

685 
ñemíts
++;

686 
°¨t
 = 
j
+
£∂í
;

687 
j
 = j+
£∂í
-1;

691 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

692 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

693 
ñemíts
++;

694 *
cou¡
 = 
ñemíts
;

695  
tokís
;

697 
˛ónup
:

699 
i
;

700 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

701 
	`‰ì
(
tokís
);

702 *
cou¡
 = 0;

703  
NULL
;

705 
	}
}

708 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

709 i‡(!
tokís
) ;

710 
cou¡
--)

711 
	`sds‰ì
(
tokís
[
cou¡
]);

712 
	`‰ì
(
tokís
);

713 
	}
}

719 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

720 
buf
[32], *
p
;

721 
v
;

723 
v
 = (
vÆue
 < 0) ? -value : value;

724 
p
 = 
buf
+31;

726 *
p
-- = '0'+(
v
%10);

727 
v
 /= 10;

728 } 
v
);

729 i‡(
vÆue
 < 0Ë*
p
-- = '-';

730 
p
++;

731  
	`sd¢ewÀn
(
p
,32-’-
buf
));

732 
	}
}

740 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

741 
s
 = 
	`sdsˇéí
(s,"\"",1);

742 
Àn
--) {

743 *
p
) {

746 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

748 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

749 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

750 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

751 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

752 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

754 i‡(
	`i•röt
(*
p
))

755 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

757 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

760 
p
++;

762  
	`sdsˇéí
(
s
,"\"",1);

763 
	}
}

767 
	$is_hex_digô
(
c
) {

768  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

769 (
c
 >= 'A' && c <= 'F');

770 
	}
}

774 
	$hex_digô_to_öt
(
c
) {

775 
c
) {

794 
	}
}

815 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

816 c⁄° *
p
 = 
löe
;

817 *
cuºít
 = 
NULL
;

818 **
ve˘‹
 = 
NULL
;

820 *
¨gc
 = 0;

823 *
p
 && 
	`is•a˚
(*p))Ö++;

824 i‡(*
p
) {

826 
öq
=0;

827 
ösq
=0;

828 
d⁄e
=0;

830 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

831 !
d⁄e
) {

832 i‡(
öq
) {

833 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

834 
	`is_hex_digô
(*(
p
+2)) &&

835 
	`is_hex_digô
(*(
p
+3)))

837 
byã
;

839 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

840 
	`hex_digô_to_öt
(*(
p
+3));

841 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

842 
p
 += 3;

843 } i‡(*
p
 == '\\' && *(p+1)) {

844 
c
;

846 
p
++;

847 *
p
) {

848 'n': 
c
 = '\n'; ;

849 'r': 
c
 = '\r'; ;

850 't': 
c
 = '\t'; ;

851 'b': 
c
 = '\b'; ;

852 'a': 
c
 = '\a'; ;

853 : 
c
 = *
p
; ;

855 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

856 } i‡(*
p
 == '"') {

859 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

860 
d⁄e
=1;

861 } i‡(!*
p
) {

863 
îr
;

865 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

867 } i‡(
ösq
) {

868 i‡(*
p
 == '\\' && *(p+1) == '\'') {

869 
p
++;

870 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

871 } i‡(*
p
 == '\'') {

874 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

875 
d⁄e
=1;

876 } i‡(!*
p
) {

878 
îr
;

880 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

883 *
p
) {

889 
d⁄e
=1;

892 
öq
=1;

895 
ösq
=1;

898 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

902 i‡(*
p
)Ö++;

905 
ve˘‹
 = 
	`ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

906 
ve˘‹
[*
¨gc
] = 
cuºít
;

907 (*
¨gc
)++;

908 
cuºít
 = 
NULL
;

911 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`mÆloc
((*));

912  
ve˘‹
;

916 
îr
:

917 (*
¨gc
)--)

918 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

919 
	`‰ì
(
ve˘‹
);

920 i‡(
cuºít
Ë
	`sds‰ì
(current);

921 *
¨gc
 = 0;

922  
NULL
;

923 
	}
}

934 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

935 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

937 
j
 = 0; j < 
l
; j++) {

938 
i
 = 0; i < 
£éí
; i++) {

939 i‡(
s
[
j
] =
‰om
[
i
]) {

940 
s
[
j
] = 
to
[
i
];

945  
s
;

946 
	}
}

950 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
) {

951 
sds
 
joö
 = 
	`sd£m±y
();

952 
j
;

954 
j
 = 0; j < 
¨gc
; j++) {

955 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

956 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

958  
joö
;

959 
	}
}

962 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

963 
sds
 
joö
 = 
	`sd£m±y
();

964 
j
;

966 
j
 = 0; j < 
¨gc
; j++) {

967 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

968 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

970  
joö
;

971 
	}
}

973 #ifde‡
SDS_TEST_MAIN


974 
	~<°dio.h
>

975 
	~"ã°hñp.h
"

977 
	$maö
() {

979 
sdshdr
 *
sh
;

980 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

982 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

983 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

985 
	`sds‰ì
(
x
);

986 
x
 = 
	`sd¢ewÀn
("foo",2);

987 
	`ã°_c⁄d
("Createá string with specifiedÜength",

988 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

990 
x
 = 
	`sdsˇt
(x,"bar");

991 
	`ã°_c⁄d
("Strings concatenation",

992 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

994 
x
 = 
	`sds˝y
(x,"a");

995 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

996 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

998 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

999 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1000 
	`sd¶í
(
x
) == 33 &&

1001 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1003 
	`sds‰ì
(
x
);

1004 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1005 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1006 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) ==0)

1008 
	`sds‰ì
(
x
);

1009 
x
 = 
	`sd¢ew
("xxciaoyyy");

1010 
	`sd°rim
(
x
,"xy");

1011 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1012 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1014 
y
 = 
	`sdsdup
(
x
);

1015 
	`sd§™ge
(
y
,1,1);

1016 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1017 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1019 
	`sds‰ì
(
y
);

1020 
y
 = 
	`sdsdup
(
x
);

1021 
	`sd§™ge
(
y
,1,-1);

1022 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1023 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1025 
	`sds‰ì
(
y
);

1026 
y
 = 
	`sdsdup
(
x
);

1027 
	`sd§™ge
(
y
,-2,-1);

1028 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1029 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1031 
	`sds‰ì
(
y
);

1032 
y
 = 
	`sdsdup
(
x
);

1033 
	`sd§™ge
(
y
,2,1);

1034 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1035 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1037 
	`sds‰ì
(
y
);

1038 
y
 = 
	`sdsdup
(
x
);

1039 
	`sd§™ge
(
y
,1,100);

1040 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1041 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1043 
	`sds‰ì
(
y
);

1044 
y
 = 
	`sdsdup
(
x
);

1045 
	`sd§™ge
(
y
,100,100);

1046 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1047 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1049 
	`sds‰ì
(
y
);

1050 
	`sds‰ì
(
x
);

1051 
x
 = 
	`sd¢ew
("foo");

1052 
y
 = 
	`sd¢ew
("foa");

1053 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1055 
	`sds‰ì
(
y
);

1056 
	`sds‰ì
(
x
);

1057 
x
 = 
	`sd¢ew
("bar");

1058 
y
 = 
	`sd¢ew
("bar");

1059 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1061 
	`sds‰ì
(
y
);

1062 
	`sds‰ì
(
x
);

1063 
x
 = 
	`sd¢ew
("aar");

1064 
y
 = 
	`sd¢ew
("bar");

1065 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1067 
	`sds‰ì
(
y
);

1068 
	`sds‰ì
(
x
);

1069 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1070 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1071 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1072 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1075 
ﬁd‰ì
;

1077 
	`sds‰ì
(
x
);

1078 
x
 = 
	`sd¢ew
("0");

1079 
sh
 = (*Ë(
x
-((
sdshdr
)));

1080 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
sh
->
Àn
 =1 && sh->
‰ì
 == 0);

1081 
x
 = 
	`sdsMakeRoomF‹
(x,1);

1082 
sh
 = (*Ë(
x
-((
sdshdr
)));

1083 
	`ã°_c⁄d
("sdsMakeRoomF‹()", 
sh
->
Àn
 =1 && sh->
‰ì
 > 0);

1084 
ﬁd‰ì
 = 
sh
->
‰ì
;

1085 
x
[1] = '1';

1086 
	`sdsIn¸Lí
(
x
,1);

1087 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- c⁄ã¡", 
x
[0] == '0' && x[1] == '1');

1088 
	`ã°_c⁄d
("sdsIn¸Lí(Ë--Üí", 
sh
->
Àn
 == 2);

1089 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- fªe", 
sh
->
‰ì
 =
ﬁd‰ì
-1);

1092 
	`ã°_ªp‹t
()

1094 
	}
}

	@dep/hiredis-0.13.3/sds.h

31 #i‚de‡
__SDS_H


32 
	#__SDS_H


	)

34 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

36 
	~<sys/ty≥s.h
>

37 
	~<°d¨g.h
>

38 #ifde‡
_MSC_VER


39 
	~"wö32.h
"

42 *
	tsds
;

44 
	ssdshdr
 {

45 
	mÀn
;

46 
	m‰ì
;

47 
	mbuf
[];

50 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

51 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

52  
sh
->
Àn
;

53 
	}
}

55 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

56 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

57  
sh
->
‰ì
;

58 
	}
}

60 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

61 
sds
 
sd¢ew
(c⁄° *
öô
);

62 
sds
 
sd£m±y
();

63 
size_t
 
sd¶í
(c⁄° 
sds
 
s
);

64 
sds
 
sdsdup
(c⁄° sd†
s
);

65 
sds‰ì
(
sds
 
s
);

66 
size_t
 
sdßvaû
(c⁄° 
sds
 
s
);

67 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

68 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

69 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

70 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

71 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

72 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

74 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

75 #ifde‡
__GNUC__


76 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

77 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

79 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

82 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

83 
	`sd°rim
(
sds
 
s
, c⁄° *
c£t
);

84 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

85 
	`sdsupd©ñí
(
sds
 
s
);

86 
	`sds˛ór
(
sds
 
s
);

87 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

88 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

89 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

90 
	`sd°ﬁowî
(
sds
 
s
);

91 
	`sd°ouµî
(
sds
 
s
);

92 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

93 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

94 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

95 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

96 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
);

97 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

100 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

101 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

102 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

103 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

	@dep/hiredis-0.13.3/test.c

1 
	~"fma¸os.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<°rögs.h
>

6 
	~<sys/time.h
>

7 
	~<as£π.h
>

8 
	~<uni°d.h
>

9 
	~<sig«l.h
>

10 
	~<î∫o.h
>

11 
	~<limôs.h
>

13 
	~"húedis.h
"

14 
	~"√t.h
"

16 
	ec⁄√˘i⁄_ty≥
 {

17 
	mCONN_TCP
,

18 
	mCONN_UNIX
,

19 
	mCONN_FD


22 
	sc⁄fig
 {

23 
c⁄√˘i⁄_ty≥
 
	mty≥
;

26 c⁄° *
	mho°
;

27 
	mp‹t
;

28 
timevÆ
 
	mtimeout
;

29 } 
	mt˝
;

32 c⁄° *
	m∑th
;

33 } 
	munix
;

37 
	gã°s
 = 0, 
	gÁûs
 = 0;

38 
	#ã°
(
_s
Ë{ 
	`¥ötf
("#%02d ", ++
ã°s
);Örötf(_s); }

	)

39 
	#ã°_c⁄d
(
_c
Ëif(_cË
	`¥ötf
("\033[0;32mPASSED\033[0;0m\n"); {¥ötf("\033[0;31mFAILED\033[0;0m\n"); 
Áûs
++;}

	)

41 
	$u£c
() {

42 
timevÆ
 
tv
;

43 
	`gëtimeofday
(&
tv
,
NULL
);

44  ((()
tv
.
tv_£c
)*1000000)+tv.
tv_u£c
;

45 
	}
}

49 #ifde‡
NDEBUG


50 #unde‡
as£π


51 
	#as£π
(
e
Ë()”)

	)

54 
ªdisC⁄ãxt
 *
	$£À˘_d©aba£
(
ªdisC⁄ãxt
 *
c
) {

55 
ªdisRïly
 *
ª∂y
;

58 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SELECT 9");

59 
	`as£π
(
ª∂y
 !
NULL
);

60 
	`‰ìRïlyObje˘
(
ª∂y
);

63 
ª∂y
 = 
	`ªdisComm™d
(
c
,"DBSIZE");

64 
	`as£π
(
ª∂y
 !
NULL
);

65 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&Ñïly->
öãgî
 == 0) {

67 
	`‰ìRïlyObje˘
(
ª∂y
);

69 
	`¥ötf
("Database #9 isÇotÉmpty,Åest canÇot continue\n");

70 
	`exô
(1);

73  
c
;

74 
	}
}

76 
	$disc⁄√˘
(
ªdisC⁄ãxt
 *
c
, 
kìp_fd
) {

77 
ªdisRïly
 *
ª∂y
;

80 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SELECT 9");

81 
	`as£π
(
ª∂y
 !
NULL
);

82 
	`‰ìRïlyObje˘
(
ª∂y
);

83 
ª∂y
 = 
	`ªdisComm™d
(
c
,"FLUSHDB");

84 
	`as£π
(
ª∂y
 !
NULL
);

85 
	`‰ìRïlyObje˘
(
ª∂y
);

88 i‡(
kìp_fd
)

89  
	`ªdisFªeKìpFd
(
c
);

90 
	`ªdisFªe
(
c
);

92 
	}
}

94 
ªdisC⁄ãxt
 *
	$c⁄√˘
(
c⁄fig
 config) {

95 
ªdisC⁄ãxt
 *
c
 = 
NULL
;

97 i‡(
c⁄fig
.
ty≥
 =
CONN_TCP
) {

98 
c
 = 
	`ªdisC⁄√˘
(
c⁄fig
.
t˝
.
ho°
, c⁄fig.t˝.
p‹t
);

99 } i‡(
c⁄fig
.
ty≥
 =
CONN_UNIX
) {

100 
c
 = 
	`ªdisC⁄√˘Unix
(
c⁄fig
.
unix
.
∑th
);

101 } i‡(
c⁄fig
.
ty≥
 =
CONN_FD
) {

103 
ªdisC⁄ãxt
 *
dummy_˘x
 = 
	`ªdisC⁄√˘Unix
(
c⁄fig
.
unix
.
∑th
);

104 i‡(
dummy_˘x
) {

105 
fd
 = 
	`disc⁄√˘
(
dummy_˘x
, 1);

106 
	`¥ötf
("C⁄√˘ögÅÿöhîôed fd %d\n", 
fd
);

107 
c
 = 
	`ªdisC⁄√˘Fd
(
fd
);

110 
	`as£π
(
NULL
);

113 i‡(
c
 =
NULL
) {

114 
	`¥ötf
("ConnectionÉrror: can'tállocateÑedis context\n");

115 
	`exô
(1);

116 } i‡(
c
->
îr
) {

117 
	`¥ötf
("C⁄√˘i⁄Éº‹: %s\n", 
c
->
îr°r
);

118 
	`ªdisFªe
(
c
);

119 
	`exô
(1);

122  
	`£À˘_d©aba£
(
c
);

123 
	}
}

125 
	$ã°_f‹m©_comm™ds
() {

126 *
cmd
;

127 
Àn
;

129 
	`ã°
("Format command without interpolation: ");

130 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET foo bar");

131 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nb¨\r\n",
Àn
) == 0 &&

132 
Àn
 == 4+4+(3+2)+4+(3+2)+4+(3+2));

133 
	`‰ì
(
cmd
);

135 
	`ã°
("Format command with %%s string interpolation: ");

136 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET %s %s","foo","bar");

137 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nb¨\r\n",
Àn
) == 0 &&

138 
Àn
 == 4+4+(3+2)+4+(3+2)+4+(3+2));

139 
	`‰ì
(
cmd
);

141 
	`ã°
("Format command with %%sándánÉmpty string: ");

142 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET %s %s","foo","");

143 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$0\r\n\r\n",
Àn
) == 0 &&

144 
Àn
 == 4+4+(3+2)+4+(3+2)+4+(0+2));

145 
	`‰ì
(
cmd
);

147 
	`ã°
("Format command withánÉmpty string in betweenÖroper interpolations: ");

148 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET %s %s","","foo");

149 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$0\r\n\r\n$3\r\nfoo\r\n",
Àn
) == 0 &&

150 
Àn
 == 4+4+(3+2)+4+(0+2)+4+(3+2));

151 
	`‰ì
(
cmd
);

153 
	`ã°
("Format command with %%b string interpolation: ");

154 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET %b %b","foo",(
size_t
)3,"b\0r",(size_t)3);

155 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nb\0r\r\n",
Àn
) == 0 &&

156 
Àn
 == 4+4+(3+2)+4+(3+2)+4+(3+2));

157 
	`‰ì
(
cmd
);

159 
	`ã°
("Format command with %%bándánÉmpty string: ");

160 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET %b %b","foo",(
size_t
)3,"",(size_t)0);

161 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$0\r\n\r\n",
Àn
) == 0 &&

162 
Àn
 == 4+4+(3+2)+4+(3+2)+4+(0+2));

163 
	`‰ì
(
cmd
);

165 
	`ã°
("Format command withÜiteral %%: ");

166 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET %% %%");

167 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$1\r\n%\r\n$1\r\n%\r\n",
Àn
) == 0 &&

168 
Àn
 == 4+4+(3+2)+4+(1+2)+4+(1+2));

169 
	`‰ì
(
cmd
);

174 
	#INTEGER_WIDTH_TEST
(
fmt
, 
ty≥
) do { \

175 
ty≥
 
vÆue
 = 123; \

176 
	`ã°
("Format command withÖrintf-delegation (" #type "): "); \

177 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"key:%08" 
fmt
 " så:%s", 
vÆue
, "hello"); \

178 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*2\r\n$12\r\nkey:00000123\r\n$9\r\n°r:hñlo\r\n",
Àn
) == 0 && \

179 
Àn
 == 4+5+(12+2)+4+(9+2)); \

180 
	`‰ì
(
cmd
); \

181 } 0)

	)

183 
	#FLOAT_WIDTH_TEST
(
ty≥
) do { \

184 
ty≥
 
vÆue
 = 123.0; \

185 
	`ã°
("Format command withÖrintf-delegation (" #type "): "); \

186 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"key:%08.3‡°r:%s", 
vÆue
, "hello"); \

187 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*2\r\n$12\r\nkey:0123.000\r\n$9\r\n°r:hñlo\r\n",
Àn
) == 0 && \

188 
Àn
 == 4+5+(12+2)+4+(9+2)); \

189 
	`‰ì
(
cmd
); \

190 } 0)

	)

192 
	`INTEGER_WIDTH_TEST
("d", );

193 
	`INTEGER_WIDTH_TEST
("hhd", );

194 
	`INTEGER_WIDTH_TEST
("hd", );

195 
	`INTEGER_WIDTH_TEST
("ld", );

196 
	`INTEGER_WIDTH_TEST
("lld", );

197 
	`INTEGER_WIDTH_TEST
("u", );

198 
	`INTEGER_WIDTH_TEST
("hhu", );

199 
	`INTEGER_WIDTH_TEST
("hu", );

200 
	`INTEGER_WIDTH_TEST
("lu", );

201 
	`INTEGER_WIDTH_TEST
("llu", );

202 
	`FLOAT_WIDTH_TEST
();

203 
	`FLOAT_WIDTH_TEST
();

205 
	`ã°
("Format command with invalidÖrintf format: ");

206 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"key:%08∞%b",(*)1234,"foo",(
size_t
)3);

207 
	`ã°_c⁄d
(
Àn
 == -1);

209 c⁄° *
¨gv
[3];

210 
¨gv
[0] = "SET";

211 
¨gv
[1] = "foo\0xxx";

212 
¨gv
[2] = "bar";

213 
size_t
 
Àns
[3] = { 3, 7, 3 };

214 
¨gc
 = 3;

216 
	`ã°
("Format command byÖassingárgc/argv withoutÜengths: ");

217 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

218 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$3\r\nfoo\r\n$3\r\nb¨\r\n",
Àn
) == 0 &&

219 
Àn
 == 4+4+(3+2)+4+(3+2)+4+(3+2));

220 
	`‰ì
(
cmd
);

222 
	`ã°
("Format command byÖassingárgc/argv withÜengths: ");

223 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
Àns
);

224 
	`ã°_c⁄d
(
	`°∫cmp
(
cmd
,"*3\r\n$3\r\nSET\r\n$7\r\nfoo\0xxx\r\n$3\r\nb¨\r\n",
Àn
) == 0 &&

225 
Àn
 == 4+4+(3+2)+4+(7+2)+4+(3+2));

226 
	`‰ì
(
cmd
);

227 
	}
}

229 
	$ã°_≠≥nd_f‹m©ãd_comm™ds
(
c⁄fig
 config) {

230 
ªdisC⁄ãxt
 *
c
;

231 
ªdisRïly
 *
ª∂y
;

232 *
cmd
;

233 
Àn
;

235 
c
 = 
	`c⁄√˘
(
c⁄fig
);

237 
	`ã°
("Append format command: ");

239 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
, "SET foo bar");

241 
	`ã°_c⁄d
(
	`ªdisAµídF‹m©ãdComm™d
(
c
, 
cmd
, 
Àn
Ë=
REDIS_OK
);

243 
	`as£π
(
	`ªdisGëRïly
(
c
, (*)&
ª∂y
Ë=
REDIS_OK
);

245 
	`‰ì
(
cmd
);

246 
	`‰ìRïlyObje˘
(
ª∂y
);

248 
	`disc⁄√˘
(
c
, 0);

249 
	}
}

251 
	$ã°_ª∂y_ªadî
() {

252 
ªdisRódî
 *
ªadî
;

253 *
ª∂y
;

254 
ªt
;

255 
i
;

257 
	`ã°
("Error handling inÑeplyÖarser: ");

258 
ªadî
 = 
	`ªdisRódîCª©e
();

259 
	`ªdisRódîFìd
(
ªadî
,(*)"@foo\r\n",6);

260 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,
NULL
);

261 
	`ã°_c⁄d
(
ªt
 =
REDIS_ERR
 &&

262 
	`°rˇ£cmp
(
ªadî
->
îr°r
,"ProtocolÉrror, got \"@\"ásÑeplyÅype byte") == 0);

263 
	`ªdisRódîFªe
(
ªadî
);

267 
	`ã°
("Memory cleanup inÑeplyÖarser: ");

268 
ªadî
 = 
	`ªdisRódîCª©e
();

269 
	`ªdisRódîFìd
(
ªadî
,(*)"*2\r\n",4);

270 
	`ªdisRódîFìd
(
ªadî
,(*)"$5\r\nhello\r\n",11);

271 
	`ªdisRódîFìd
(
ªadî
,(*)"@foo\r\n",6);

272 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,
NULL
);

273 
	`ã°_c⁄d
(
ªt
 =
REDIS_ERR
 &&

274 
	`°rˇ£cmp
(
ªadî
->
îr°r
,"ProtocolÉrror, got \"@\"ásÑeplyÅype byte") == 0);

275 
	`ªdisRódîFªe
(
ªadî
);

277 
	`ã°
("SetÉrror onÇested multi bulks with depth > 7: ");

278 
ªadî
 = 
	`ªdisRódîCª©e
();

280 
i
 = 0; i < 9; i++) {

281 
	`ªdisRódîFìd
(
ªadî
,(*)"*1\r\n",4);

284 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,
NULL
);

285 
	`ã°_c⁄d
(
ªt
 =
REDIS_ERR
 &&

286 
	`°∫ˇ£cmp
(
ªadî
->
îr°r
,"No support for",14) == 0);

287 
	`ªdisRódîFªe
(
ªadî
);

289 
	`ã°
("Works with NULL functions forÑeply: ");

290 
ªadî
 = 
	`ªdisRódîCª©e
();

291 
ªadî
->
‚
 = 
NULL
;

292 
	`ªdisRódîFìd
(
ªadî
,(*)"+OK\r\n",5);

293 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,&
ª∂y
);

294 
	`ã°_c⁄d
(
ªt
 =
REDIS_OK
 && 
ª∂y
 =(*)
REDIS_REPLY_STATUS
);

295 
	`ªdisRódîFªe
(
ªadî
);

297 
	`ã°
("Works whená singleÇewline (\\r\\n) coversÅwo callsÅo feed: ");

298 
ªadî
 = 
	`ªdisRódîCª©e
();

299 
ªadî
->
‚
 = 
NULL
;

300 
	`ªdisRódîFìd
(
ªadî
,(*)"+OK\r",4);

301 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,&
ª∂y
);

302 
	`as£π
(
ªt
 =
REDIS_OK
 && 
ª∂y
 =
NULL
);

303 
	`ªdisRódîFìd
(
ªadî
,(*)"\n",1);

304 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,&
ª∂y
);

305 
	`ã°_c⁄d
(
ªt
 =
REDIS_OK
 && 
ª∂y
 =(*)
REDIS_REPLY_STATUS
);

306 
	`ªdisRódîFªe
(
ªadî
);

308 
	`ã°
("Don'tÑeset stateáfterÖrotocolÉrror: ");

309 
ªadî
 = 
	`ªdisRódîCª©e
();

310 
ªadî
->
‚
 = 
NULL
;

311 
	`ªdisRódîFìd
(
ªadî
,(*)"x",1);

312 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,&
ª∂y
);

313 
	`as£π
(
ªt
 =
REDIS_ERR
);

314 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,&
ª∂y
);

315 
	`ã°_c⁄d
(
ªt
 =
REDIS_ERR
 && 
ª∂y
 =
NULL
);

316 
	`ªdisRódîFªe
(
ªadî
);

319 
	`ã°
("Don't doÉmptyállocation forÉmpty multi bulk: ");

320 
ªadî
 = 
	`ªdisRódîCª©e
();

321 
	`ªdisRódîFìd
(
ªadî
,(*)"*0\r\n",4);

322 
ªt
 = 
	`ªdisRódîGëRïly
(
ªadî
,&
ª∂y
);

323 
	`ã°_c⁄d
(
ªt
 =
REDIS_OK
 &&

324 ((
ªdisRïly
*)
ª∂y
)->
ty≥
 =
REDIS_REPLY_ARRAY
 &&

325 ((
ªdisRïly
*)
ª∂y
)->
ñemíts
 == 0);

326 
	`‰ìRïlyObje˘
(
ª∂y
);

327 
	`ªdisRódîFªe
(
ªadî
);

328 
	}
}

330 
	$ã°_‰ì_nuŒ
() {

331 *
ªdisC⁄ãxt
 = 
NULL
;

332 *
ª∂y
 = 
NULL
;

334 
	`ã°
("Don't fail whenÑedisFree isÖassedá NULL value: ");

335 
	`ªdisFªe
(
ªdisC⁄ãxt
);

336 
	`ã°_c⁄d
(
ªdisC⁄ãxt
 =
NULL
);

338 
	`ã°
("Don't fail when freeReplyObject isÖassedá NULL value: ");

339 
	`‰ìRïlyObje˘
(
ª∂y
);

340 
	`ã°_c⁄d
(
ª∂y
 =
NULL
);

341 
	}
}

343 
	$ã°_blockög_c⁄√˘i⁄_îr‹s
() {

344 
ªdisC⁄ãxt
 *
c
;

346 
	`ã°
("ReturnsÉrror when host cannot beÑesolved: ");

347 
c
 = 
	`ªdisC⁄√˘
((*)"idontexist.test", 6379);

348 
	`ã°_c⁄d
(
c
->
îr
 =
REDIS_ERR_OTHER
 &&

349 (
	`°rcmp
(
c
->
îr°r
,"Name or serviceÇot known") == 0 ||

350 
	`°rcmp
(
c
->
îr°r
,"Can'tÑesolve: idontexist.test") == 0 ||

351 
	`°rcmp
(
c
->
îr°r
,"nodenameÇor servnameÖrovided, orÇot known") == 0 ||

352 
	`°rcmp
(
c
->
îr°r
,"Noáddressássociated with hostname") == 0 ||

353 
	`°rcmp
(
c
->
îr°r
,"Temporary failure inÇameÑesolution") == 0 ||

354 
	`°rcmp
(
c
->
îr°r
,"hostnameÇor servnameÖrovided, orÇot known") == 0 ||

355 
	`°rcmp
(
c
->
îr°r
,"noáddressássociated withÇame") == 0));

356 
	`ªdisFªe
(
c
);

358 
	`ã°
("ReturnsÉrror whenÅheÖort isÇot open: ");

359 
c
 = 
	`ªdisC⁄√˘
((*)"localhost", 1);

360 
	`ã°_c⁄d
(
c
->
îr
 =
REDIS_ERR_IO
 &&

361 
	`°rcmp
(
c
->
îr°r
,"ConnectionÑefused") == 0);

362 
	`ªdisFªe
(
c
);

364 
	`ã°
("ReturnsÉrror whenÅhe unix socketÖath doesn'táccept connections: ");

365 
c
 = 
	`ªdisC⁄√˘Unix
((*)"/tmp/idontexist.sock");

366 
	`ã°_c⁄d
(
c
->
îr
 =
REDIS_ERR_IO
);

367 
	`ªdisFªe
(
c
);

368 
	}
}

370 
	$ã°_blockög_c⁄√˘i⁄
(
c⁄fig
 config) {

371 
ªdisC⁄ãxt
 *
c
;

372 
ªdisRïly
 *
ª∂y
;

374 
c
 = 
	`c⁄√˘
(
c⁄fig
);

376 
	`ã°
("IsábleÅo deliver commands: ");

377 
ª∂y
 = 
	`ªdisComm™d
(
c
,"PING");

378 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_STATUS
 &&

379 
	`°rˇ£cmp
(
ª∂y
->
°r
,"pong") == 0)

380 
	`‰ìRïlyObje˘
(
ª∂y
);

382 
	`ã°
("IsáábleÅo send commands verbatim: ");

383 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SET foo bar");

384 
	`ã°_c⁄d
 (
ª∂y
->
ty≥
 =
REDIS_REPLY_STATUS
 &&

385 
	`°rˇ£cmp
(
ª∂y
->
°r
,"ok") == 0)

386 
	`‰ìRïlyObje˘
(
ª∂y
);

388 
	`ã°
("%%s String interpolation works: ");

389 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SET %s %s","foo","hello world");

390 
	`‰ìRïlyObje˘
(
ª∂y
);

391 
ª∂y
 = 
	`ªdisComm™d
(
c
,"GET foo");

392 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_STRING
 &&

393 
	`°rcmp
(
ª∂y
->
°r
,"hello world") == 0);

394 
	`‰ìRïlyObje˘
(
ª∂y
);

396 
	`ã°
("%%b String interpolation works: ");

397 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SET %b %b","foo",(
size_t
)3,"hello\x00world",(size_t)11);

398 
	`‰ìRïlyObje˘
(
ª∂y
);

399 
ª∂y
 = 
	`ªdisComm™d
(
c
,"GET foo");

400 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_STRING
 &&

401 
	`memcmp
(
ª∂y
->
°r
,"hello\x00world",11) == 0)

403 
	`ã°
("BinaryÑeplyÜength is correct: ");

404 
	`ã°_c⁄d
(
ª∂y
->
Àn
 == 11)

405 
	`‰ìRïlyObje˘
(
ª∂y
);

407 
	`ã°
("CanÖarseÇilÑeplies: ");

408 
ª∂y
 = 
	`ªdisComm™d
(
c
,"GETÇokey");

409 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_NIL
)

410 
	`‰ìRïlyObje˘
(
ª∂y
);

413 
	`ã°
("CanÖarse integerÑeplies: ");

414 
ª∂y
 = 
	`ªdisComm™d
(
c
,"INCR mycounter");

415 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&Ñïly->
öãgî
 == 1)

416 
	`‰ìRïlyObje˘
(
ª∂y
);

418 
	`ã°
("CanÖarse multi bulkÑeplies: ");

419 
	`‰ìRïlyObje˘
(
	`ªdisComm™d
(
c
,"LPUSH mylist foo"));

420 
	`‰ìRïlyObje˘
(
	`ªdisComm™d
(
c
,"LPUSH mylist bar"));

421 
ª∂y
 = 
	`ªdisComm™d
(
c
,"LRANGE mylist 0 -1");

422 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_ARRAY
 &&

423 
ª∂y
->
ñemíts
 == 2 &&

424 !
	`memcmp
(
ª∂y
->
ñemít
[0]->
°r
,"bar",3) &&

425 !
	`memcmp
(
ª∂y
->
ñemít
[1]->
°r
,"foo",3))

426 
	`‰ìRïlyObje˘
(
ª∂y
);

430 
	`ã°
("Can handleÇested multi bulkÑeplies: ");

431 
	`‰ìRïlyObje˘
(
	`ªdisComm™d
(
c
,"MULTI"));

432 
	`‰ìRïlyObje˘
(
	`ªdisComm™d
(
c
,"LRANGE mylist 0 -1"));

433 
	`‰ìRïlyObje˘
(
	`ªdisComm™d
(
c
,"PING"));

434 
ª∂y
 = (
	`ªdisComm™d
(
c
,"EXEC"));

435 
	`ã°_c⁄d
(
ª∂y
->
ty≥
 =
REDIS_REPLY_ARRAY
 &&

436 
ª∂y
->
ñemíts
 == 2 &&

437 
ª∂y
->
ñemít
[0]->
ty≥
 =
REDIS_REPLY_ARRAY
 &&

438 
ª∂y
->
ñemít
[0]->
ñemíts
 == 2 &&

439 !
	`memcmp
(
ª∂y
->
ñemít
[0]->ñemít[0]->
°r
,"bar",3) &&

440 !
	`memcmp
(
ª∂y
->
ñemít
[0]->ñemít[1]->
°r
,"foo",3) &&

441 
ª∂y
->
ñemít
[1]->
ty≥
 =
REDIS_REPLY_STATUS
 &&

442 
	`°rˇ£cmp
(
ª∂y
->
ñemít
[1]->
°r
,"pong") == 0);

443 
	`‰ìRïlyObje˘
(
ª∂y
);

445 
	`disc⁄√˘
(
c
, 0);

446 
	}
}

448 
	$ã°_blockög_c⁄√˘i⁄_timeouts
(
c⁄fig
 config) {

449 
ªdisC⁄ãxt
 *
c
;

450 
ªdisRïly
 *
ª∂y
;

451 
ssize_t
 
s
;

452 c⁄° *
cmd
 = "DEBUG SLEEP 3\r\n";

453 
timevÆ
 
tv
;

455 
c
 = 
	`c⁄√˘
(
c⁄fig
);

456 
	`ã°
("Successfully completesá command whenÅheÅimeout isÇotÉxceeded: ");

457 
ª∂y
 = 
	`ªdisComm™d
(
c
,"SET foo fast");

458 
	`‰ìRïlyObje˘
(
ª∂y
);

459 
tv
.
tv_£c
 = 0;

460 
tv
.
tv_u£c
 = 10000;

461 
	`ªdisSëTimeout
(
c
, 
tv
);

462 
ª∂y
 = 
	`ªdisComm™d
(
c
, "GET foo");

463 
	`ã°_c⁄d
(
ª∂y
 !
NULL
 &&Ñïly->
ty≥
 =
REDIS_REPLY_STRING
 && 
	`memcmp
‘ïly->
°r
, "fast", 4) == 0);

464 
	`‰ìRïlyObje˘
(
ª∂y
);

465 
	`disc⁄√˘
(
c
, 0);

467 
c
 = 
	`c⁄√˘
(
c⁄fig
);

468 
	`ã°
("DoesÇotÑeturnáÑeply whenÅhe commandÅimes out: ");

469 
s
 = 
	`wrôe
(
c
->
fd
, 
cmd
, 
	`°æí
(cmd));

470 
tv
.
tv_£c
 = 0;

471 
tv
.
tv_u£c
 = 10000;

472 
	`ªdisSëTimeout
(
c
, 
tv
);

473 
ª∂y
 = 
	`ªdisComm™d
(
c
, "GET foo");

474 
	`ã°_c⁄d
(
s
 > 0 && 
ª∂y
 =
NULL
 && 
c
->
îr
 =
REDIS_ERR_IO
 && 
	`°rcmp
(c->
îr°r
, "ResourceÅemporarily unavailable") == 0);

475 
	`‰ìRïlyObje˘
(
ª∂y
);

477 
	`ã°
("ReconnectÖroperlyÑeconnectsáfteráÅimeout: ");

478 
	`ªdisRec⁄√˘
(
c
);

479 
ª∂y
 = 
	`ªdisComm™d
(
c
, "PING");

480 
	`ã°_c⁄d
(
ª∂y
 !
NULL
 &&Ñïly->
ty≥
 =
REDIS_REPLY_STATUS
 && 
	`°rcmp
‘ïly->
°r
, "PONG") == 0);

481 
	`‰ìRïlyObje˘
(
ª∂y
);

483 
	`ã°
("ReconnectÖroperly uses ownedÖarameters: ");

484 
c⁄fig
.
t˝
.
ho°
 = "foo";

485 
c⁄fig
.
unix
.
∑th
 = "foo";

486 
	`ªdisRec⁄√˘
(
c
);

487 
ª∂y
 = 
	`ªdisComm™d
(
c
, "PING");

488 
	`ã°_c⁄d
(
ª∂y
 !
NULL
 &&Ñïly->
ty≥
 =
REDIS_REPLY_STATUS
 && 
	`°rcmp
‘ïly->
°r
, "PONG") == 0);

489 
	`‰ìRïlyObje˘
(
ª∂y
);

491 
	`disc⁄√˘
(
c
, 0);

492 
	}
}

494 
	$ã°_blockög_io_îr‹s
(
c⁄fig
 config) {

495 
ªdisC⁄ãxt
 *
c
;

496 
ªdisRïly
 *
ª∂y
;

497 *
_ª∂y
;

498 
maj‹
, 
mö‹
;

501 
c
 = 
	`c⁄√˘
(
c⁄fig
);

504 c⁄° *
fõld
 = "redis_version:";

505 *
p
, *
ïå
;

507 
ª∂y
 = 
	`ªdisComm™d
(
c
,"INFO");

508 
p
 = 
	`°r°r
(
ª∂y
->
°r
,
fõld
);

509 
maj‹
 = 
	`°πﬁ
(
p
+
	`°æí
(
fõld
),&
ïå
,10);

510 
p
 = 
ïå
+1;

511 
mö‹
 = 
	`°πﬁ
(
p
,&
ïå
,10);

512 
	`‰ìRïlyObje˘
(
ª∂y
);

515 
	`ã°
("Returns I/OÉrror whenÅhe connection isÜost: ");

516 
ª∂y
 = 
	`ªdisComm™d
(
c
,"QUIT");

517 i‡(
maj‹
 > 2 || (maj‹ =2 && 
mö‹
 > 0)) {

520 
	`ã°_c⁄d
(
	`°rˇ£cmp
(
ª∂y
->
°r
,"OK") == 0 &&

521 
	`ªdisGëRïly
(
c
,&
_ª∂y
Ë=
REDIS_ERR
);

522 
	`‰ìRïlyObje˘
(
ª∂y
);

524 
	`ã°_c⁄d
(
ª∂y
 =
NULL
);

532 
	`as£π
(
c
->
îr
 =
REDIS_ERR_EOF
 &&

533 
	`°rcmp
(
c
->
îr°r
,"Server closedÅhe connection") == 0);

534 
	`ªdisFªe
(
c
);

536 
c
 = 
	`c⁄√˘
(
c⁄fig
);

537 
	`ã°
("Returns I/OÉrror on socketÅimeout: ");

538 
timevÆ
 
tv
 = { 0, 1000 };

539 
	`as£π
(
	`ªdisSëTimeout
(
c
,
tv
Ë=
REDIS_OK
);

540 
	`ã°_c⁄d
(
	`ªdisGëRïly
(
c
,&
_ª∂y
Ë=
REDIS_ERR
 &&

541 
c
->
îr
 =
REDIS_ERR_IO
 && 
î∫o
 =
EAGAIN
);

542 
	`ªdisFªe
(
c
);

543 
	}
}

545 
	$ã°_övÆid_timeout_îr‹s
(
c⁄fig
 config) {

546 
ªdisC⁄ãxt
 *
c
;

548 
	`ã°
("SetÉrror whenán invalidÅimeout usec value is givenÅoÑedisConnectWithTimeout: ");

550 
c⁄fig
.
t˝
.
timeout
.
tv_£c
 = 0;

551 
c⁄fig
.
t˝
.
timeout
.
tv_u£c
 = 10000001;

553 
c
 = 
	`ªdisC⁄√˘WôhTimeout
(
c⁄fig
.
t˝
.
ho°
, c⁄fig.t˝.
p‹t
, c⁄fig.t˝.
timeout
);

555 
	`ã°_c⁄d
(
c
->
îr
 =
REDIS_ERR_IO
);

556 
	`ªdisFªe
(
c
);

558 
	`ã°
("SetÉrror whenán invalidÅimeout sec value is givenÅoÑedisConnectWithTimeout: ");

560 
c⁄fig
.
t˝
.
timeout
.
tv_£c
 = (((
LONG_MAX
) - 999) / 1000) + 1;

561 
c⁄fig
.
t˝
.
timeout
.
tv_u£c
 = 0;

563 
c
 = 
	`ªdisC⁄√˘WôhTimeout
(
c⁄fig
.
t˝
.
ho°
, c⁄fig.t˝.
p‹t
, c⁄fig.t˝.
timeout
);

565 
	`ã°_c⁄d
(
c
->
îr
 =
REDIS_ERR_IO
);

566 
	`ªdisFªe
(
c
);

567 
	}
}

569 
	$ã°_throughput
(
c⁄fig
 config) {

570 
ªdisC⁄ãxt
 *
c
 = 
	`c⁄√˘
(
c⁄fig
);

571 
ªdisRïly
 **
ª∂õs
;

572 
i
, 
num
;

573 
t1
, 
t2
;

575 
	`ã°
("Throughput:\n");

576 
i
 = 0; i < 500; i++)

577 
	`‰ìRïlyObje˘
(
	`ªdisComm™d
(
c
,"LPUSH mylist foo"));

579 
num
 = 1000;

580 
ª∂õs
 = 
	`mÆloc
((
ªdisRïly
*)*
num
);

581 
t1
 = 
	`u£c
();

582 
i
 = 0; i < 
num
; i++) {

583 
ª∂õs
[
i
] = 
	`ªdisComm™d
(
c
,"PING");

584 
	`as£π
(
ª∂õs
[
i
] !
NULL
 &&Ñïlõs[i]->
ty≥
 =
REDIS_REPLY_STATUS
);

586 
t2
 = 
	`u£c
();

587 
i
 = 0; i < 
num
; i++Ë
	`‰ìRïlyObje˘
(
ª∂õs
[i]);

588 
	`‰ì
(
ª∂õs
);

589 
	`¥ötf
("\t(%dx PING: %.3fs)\n", 
num
, (
t2
-
t1
)/1000000.0);

591 
ª∂õs
 = 
	`mÆloc
((
ªdisRïly
*)*
num
);

592 
t1
 = 
	`u£c
();

593 
i
 = 0; i < 
num
; i++) {

594 
ª∂õs
[
i
] = 
	`ªdisComm™d
(
c
,"LRANGE mylist 0 499");

595 
	`as£π
(
ª∂õs
[
i
] !
NULL
 &&Ñïlõs[i]->
ty≥
 =
REDIS_REPLY_ARRAY
);

596 
	`as£π
(
ª∂õs
[
i
] !
NULL
 &&Ñïlõs[i]->
ñemíts
 == 500);

598 
t2
 = 
	`u£c
();

599 
i
 = 0; i < 
num
; i++Ë
	`‰ìRïlyObje˘
(
ª∂õs
[i]);

600 
	`‰ì
(
ª∂õs
);

601 
	`¥ötf
("\t(%dx LRANGE wôh 500ÉÀmíts: %.3fs)\n", 
num
, (
t2
-
t1
)/1000000.0);

603 
num
 = 10000;

604 
ª∂õs
 = 
	`mÆloc
((
ªdisRïly
*)*
num
);

605 
i
 = 0; i < 
num
; i++)

606 
	`ªdisAµídComm™d
(
c
,"PING");

607 
t1
 = 
	`u£c
();

608 
i
 = 0; i < 
num
; i++) {

609 
	`as£π
(
	`ªdisGëRïly
(
c
, (*)&
ª∂õs
[
i
]Ë=
REDIS_OK
);

610 
	`as£π
(
ª∂õs
[
i
] !
NULL
 &&Ñïlõs[i]->
ty≥
 =
REDIS_REPLY_STATUS
);

612 
t2
 = 
	`u£c
();

613 
i
 = 0; i < 
num
; i++Ë
	`‰ìRïlyObje˘
(
ª∂õs
[i]);

614 
	`‰ì
(
ª∂õs
);

615 
	`¥ötf
("\t(%dx PING (pùñöed): %.3fs)\n", 
num
, (
t2
-
t1
)/1000000.0);

617 
ª∂õs
 = 
	`mÆloc
((
ªdisRïly
*)*
num
);

618 
i
 = 0; i < 
num
; i++)

619 
	`ªdisAµídComm™d
(
c
,"LRANGE mylist 0 499");

620 
t1
 = 
	`u£c
();

621 
i
 = 0; i < 
num
; i++) {

622 
	`as£π
(
	`ªdisGëRïly
(
c
, (*)&
ª∂õs
[
i
]Ë=
REDIS_OK
);

623 
	`as£π
(
ª∂õs
[
i
] !
NULL
 &&Ñïlõs[i]->
ty≥
 =
REDIS_REPLY_ARRAY
);

624 
	`as£π
(
ª∂õs
[
i
] !
NULL
 &&Ñïlõs[i]->
ñemíts
 == 500);

626 
t2
 = 
	`u£c
();

627 
i
 = 0; i < 
num
; i++Ë
	`‰ìRïlyObje˘
(
ª∂õs
[i]);

628 
	`‰ì
(
ª∂õs
);

629 
	`¥ötf
("\t(%dx LRANGE wôh 500ÉÀmít†’ùñöed): %.3fs)\n", 
num
, (
t2
-
t1
)/1000000.0);

631 
	`disc⁄√˘
(
c
, 0);

632 
	}
}

733 
	$maö
(
¨gc
, **
¨gv
) {

734 
c⁄fig
 
cfg
 = {

735 .
t˝
 = {

736 .
ho°
 = "127.0.0.1",

737 .
p‹t
 = 6379

739 .
unix
 = {

740 .
∑th
 = "/tmp/redis.sock"

743 
throughput
 = 1;

744 
ã°_öhîô_fd
 = 1;

747 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

750 
¨gv
++; 
¨gc
--;

751 
¨gc
) {

752 i‡(
¨gc
 >2 && !
	`°rcmp
(
¨gv
[0],"-h")) {

753 
¨gv
++; 
¨gc
--;

754 
cfg
.
t˝
.
ho°
 = 
¨gv
[0];

755 } i‡(
¨gc
 >2 && !
	`°rcmp
(
¨gv
[0],"-p")) {

756 
¨gv
++; 
¨gc
--;

757 
cfg
.
t˝
.
p‹t
 = 
	`©oi
(
¨gv
[0]);

758 } i‡(
¨gc
 >2 && !
	`°rcmp
(
¨gv
[0],"-s")) {

759 
¨gv
++; 
¨gc
--;

760 
cfg
.
unix
.
∑th
 = 
¨gv
[0];

761 } i‡(
¨gc
 >1 && !
	`°rcmp
(
¨gv
[0],"--skip-throughput")) {

762 
throughput
 = 0;

763 } i‡(
¨gc
 >1 && !
	`°rcmp
(
¨gv
[0],"--skip-inherit-fd")) {

764 
ã°_öhîô_fd
 = 0;

766 
	`Ârötf
(
°dîr
, "InvÆidárgumít: %s\n", 
¨gv
[0]);

767 
	`exô
(1);

769 
¨gv
++; 
¨gc
--;

772 
	`ã°_f‹m©_comm™ds
();

773 
	`ã°_ª∂y_ªadî
();

774 
	`ã°_blockög_c⁄√˘i⁄_îr‹s
();

775 
	`ã°_‰ì_nuŒ
();

777 
	`¥ötf
("\nTe°ögágaö° TCP c⁄√˘i⁄ (%s:%d):\n", 
cfg
.
t˝
.
ho°
, cfg.t˝.
p‹t
);

778 
cfg
.
ty≥
 = 
CONN_TCP
;

779 
	`ã°_blockög_c⁄√˘i⁄
(
cfg
);

780 
	`ã°_blockög_c⁄√˘i⁄_timeouts
(
cfg
);

781 
	`ã°_blockög_io_îr‹s
(
cfg
);

782 
	`ã°_övÆid_timeout_îr‹s
(
cfg
);

783 
	`ã°_≠≥nd_f‹m©ãd_comm™ds
(
cfg
);

784 i‡(
throughput
Ë
	`ã°_throughput
(
cfg
);

786 
	`¥ötf
("\nTe°ögágaö° Unix sockë c⁄√˘i⁄ (%s):\n", 
cfg
.
unix
.
∑th
);

787 
cfg
.
ty≥
 = 
CONN_UNIX
;

788 
	`ã°_blockög_c⁄√˘i⁄
(
cfg
);

789 
	`ã°_blockög_c⁄√˘i⁄_timeouts
(
cfg
);

790 
	`ã°_blockög_io_îr‹s
(
cfg
);

791 i‡(
throughput
Ë
	`ã°_throughput
(
cfg
);

793 i‡(
ã°_öhîô_fd
) {

794 
	`¥ötf
("\nTe°ögágaö° inhîôed fd (%s):\n", 
cfg
.
unix
.
∑th
);

795 
cfg
.
ty≥
 = 
CONN_FD
;

796 
	`ã°_blockög_c⁄√˘i⁄
(
cfg
);

800 i‡(
Áûs
) {

801 
	`¥ötf
("*** %d TESTS FAILED ***\n", 
Áûs
);

805 
	`¥ötf
("ALL TESTS PASSED\n");

807 
	}
}

	@dep/hiredis-0.13.3/win32.h

1 #i‚de‡
_WIN32_HELPER_INCLUDE


2 
	#_WIN32_HELPER_INCLUDE


	)

3 #ifde‡
_MSC_VER


5 #i‚de‡
ölöe


6 
	#ölöe
 
__ölöe


	)

9 #i‚de‡
va_c›y


10 
	#va_c›y
(
d
,
s
Ë((dË(s))

	)

13 #i‚de‡
¢¥ötf


14 
	#¢¥ötf
 
c99_¢¥ötf


	)

16 
__ölöe
 
	$c99_v¢¥ötf
(* 
°r
, 
size_t
 
size
, c⁄° * 
f‹m©
, 
va_li°
 
≠
)

18 
cou¡
 = -1;

20 i‡(
size
 != 0)

21 
cou¡
 = 
	`_v¢¥ötf_s
(
°r
, 
size
, 
_TRUNCATE
, 
f‹m©
, 
≠
);

22 i‡(
cou¡
 == -1)

23 
cou¡
 = 
	`_vs˝rötf
(
f‹m©
, 
≠
);

25  
cou¡
;

26 
	}
}

28 
__ölöe
 
	$c99_¢¥ötf
(* 
°r
, 
size_t
 
size
, c⁄° * 
f‹m©
, ...)

30 
cou¡
;

31 
va_li°
 
≠
;

33 
	`va_°¨t
(
≠
, 
f‹m©
);

34 
cou¡
 = 
	`c99_v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
≠
);

35 
	`va_íd
(
≠
);

37  
cou¡
;

38 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/arena.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
	#LARGE_MINCLASS
 (
	`ZU
(1Ë<< 
LG_LARGE_MINCLASS
)

	)

7 
	#LG_RUN_MAXREGS
 (
LG_PAGE
 - 
LG_TINY_MIN
)

	)

8 
	#RUN_MAXREGS
 (1U << 
LG_RUN_MAXREGS
)

	)

14 
	#REDZONE_MINSIZE
 16

	)

24 
	#LG_DIRTY_MULT_DEFAULT
 3

	)

27 
	mpurge_mode_øtio
 = 0,

28 
	mpurge_mode_deˇy
 = 1,

30 
	mpurge_mode_limô
 = 2

31 } 
	tpurge_mode_t
;

32 
	#PURGE_DEFAULT
 
purge_mode_øtio


	)

34 
	#DECAY_TIME_DEFAULT
 10

	)

36 
	#DECAY_NTICKS_PER_UPDATE
 1000

	)

38 
¨ía_runs_dúty_lök_s
 
	t¨ía_runs_dúty_lök_t
;

39 
¨ía_avaû_löks_s
 
	t¨ía_avaû_löks_t
;

40 
¨ía_run_s
 
	t¨ía_run_t
;

41 
¨ía_chunk_m≠_bôs_s
 
	t¨ía_chunk_m≠_bôs_t
;

42 
¨ía_chunk_m≠_misc_s
 
	t¨ía_chunk_m≠_misc_t
;

43 
¨ía_chunk_s
 
	t¨ía_chunk_t
;

44 
¨ía_bö_öfo_s
 
	t¨ía_bö_öfo_t
;

45 
¨ía_bö_s
 
	t¨ía_bö_t
;

46 
¨ía_s
 
	t¨ía_t
;

47 
¨ía_td©a_s
 
	t¨ía_td©a_t
;

51 #ifde‡
JEMALLOC_H_STRUCTS


53 #ifde‡
JEMALLOC_ARENA_STRUCTS_A


54 
	s¨ía_run_s
 {

56 
szöd_t
 
	mbööd
;

59 
	mn‰ì
;

62 
bôm≠_t
 
	mbôm≠
[
BITMAP_GROUPS_MAX
];

66 
	s¨ía_chunk_m≠_bôs_s
 {

125 
size_t
 
	mbôs
;

126 
	#CHUNK_MAP_ALLOCATED
 ((
size_t
)0x01U)

	)

127 
	#CHUNK_MAP_LARGE
 ((
size_t
)0x02U)

	)

128 
	#CHUNK_MAP_STATE_MASK
 ((
size_t
)0x3U)

	)

130 
	#CHUNK_MAP_DECOMMITTED
 ((
size_t
)0x04U)

	)

131 
	#CHUNK_MAP_UNZEROED
 ((
size_t
)0x08U)

	)

132 
	#CHUNK_MAP_DIRTY
 ((
size_t
)0x10U)

	)

133 
	#CHUNK_MAP_FLAGS_MASK
 ((
size_t
)0x1cU)

	)

135 
	#CHUNK_MAP_BININD_SHIFT
 5

	)

136 
	#BININD_INVALID
 ((
size_t
)0xffU)

	)

137 
	#CHUNK_MAP_BININD_MASK
 (
BININD_INVALID
 << 
CHUNK_MAP_BININD_SHIFT
)

	)

138 
	#CHUNK_MAP_BININD_INVALID
 
CHUNK_MAP_BININD_MASK


	)

140 
	#CHUNK_MAP_RUNIND_SHIFT
 (
CHUNK_MAP_BININD_SHIFT
 + 8)

	)

141 
	#CHUNK_MAP_SIZE_SHIFT
 (
CHUNK_MAP_RUNIND_SHIFT
 - 
LG_PAGE
)

	)

142 
	#CHUNK_MAP_SIZE_MASK
 \

143 (~(
CHUNK_MAP_BININD_MASK
 | 
CHUNK_MAP_FLAGS_MASK
 | 
CHUNK_MAP_STATE_MASK
))

	)

146 
	s¨ía_runs_dúty_lök_s
 {

147 
qr
(
¨ía_runs_dúty_lök_t
Ë
	mrd_lök
;

155 
	s¨ía_chunk_m≠_misc_s
 {

163 
phn
(
¨ía_chunk_m≠_misc_t
Ë
	mph_lök
;

167 
¨ía_runs_dúty_lök_t
 
	mrd
;

171 *
	m¥of_t˘x_pun
;

172 
¥of_t˘x_t
 *
	m¥of_t˘x
;

176 
¨ía_run_t
 
	mrun
;

179 
	$ph
(
	t¨ía_chunk_m≠_misc_t
Ë
	t¨ía_run_hóp_t
;

182 #ifde‡
JEMALLOC_ARENA_STRUCTS_B


184 
	s¨ía_chunk_s
 {

190 
exã¡_node_t
 
node
;

198 
¨ía_chunk_m≠_bôs_t
 
m≠_bôs
[1];

234 
	s¨ía_bö_öfo_s
 {

236 
size_t
 
ªg_size
;

239 
size_t
 
ªdz⁄e_size
;

242 
size_t
 
ªg_öãrvÆ
;

245 
size_t
 
run_size
;

248 
uöt32_t
 
ƒegs
;

254 
bôm≠_öfo_t
 
bôm≠_öfo
;

257 
uöt32_t
 
ªg0_off£t
;

260 
	s¨ía_bö_s
 {

267 
mÆloc_muãx_t
 
lock
;

273 
¨ía_run_t
 *
runcur
;

282 
¨ía_run_hóp_t
 
runs
;

285 
mÆloc_bö_°©s_t
 
°©s
;

288 
	s¨ía_s
 {

290 
öd
;

304 
¡hªads
[2];

313 
mÆloc_muãx_t
 
lock
;

315 
¨ía_°©s_t
 
°©s
;

321 
	`ql_hód
(
tˇche_t
Ë
tˇche_ql
;

323 
uöt64_t
 
¥of_accumbyãs
;

329 
uöt64_t
 
off£t_°©e
;

331 
dss_¥ec_t
 
dss_¥ec
;

335 
	`ql_hód
(
exã¡_node_t
Ë
achunks
;

347 
¨ía_chunk_t
 *
•¨e
;

350 
ssize_t
 
lg_dúty_mu…
;

353 
boﬁ
 
purgög
;

356 
size_t
 
«˘ive
;

364 
size_t
 
ndúty
;

394 
¨ía_runs_dúty_lök_t
 
runs_dúty
;

395 
exã¡_node_t
 
chunks_ˇche
;

402 
ssize_t
 
deˇy_time
;

404 
n°ime_t
 
deˇy_öãrvÆ
;

412 
n°ime_t
 
deˇy_ïoch
;

414 
uöt64_t
 
deˇy_jôãr_°©e
;

422 
n°ime_t
 
deˇy_dódlöe
;

429 
size_t
 
deˇy_ndúty
;

435 
size_t
 
deˇy_backlog_≈ages_limô
;

442 
size_t
 
deˇy_backlog
[
SMOOTHSTEP_NSTEPS
];

445 
	`ql_hód
(
exã¡_node_t
Ë
huge
;

447 
mÆloc_muãx_t
 
huge_mtx
;

456 
exã¡_åì_t
 
chunks_szad_ˇched
;

457 
exã¡_åì_t
 
chunks_ad_ˇched
;

458 
exã¡_åì_t
 
chunks_szad_ªèöed
;

459 
exã¡_åì_t
 
chunks_ad_ªèöed
;

461 
mÆloc_muãx_t
 
chunks_mtx
;

463 
	`ql_hód
(
exã¡_node_t
Ë
node_ˇche
;

464 
mÆloc_muãx_t
 
node_ˇche_mtx
;

467 
chunk_hooks_t
 
chunk_hooks
;

470 
¨ía_bö_t
 
bös
[
NBINS
];

476 
¨ía_run_hóp_t
 
runs_avaû
[1];

480 
	s¨ía_td©a_s
 {

481 
tickî_t
 
deˇy_tickî
;

487 #ifde‡
JEMALLOC_H_EXTERNS


489 c⁄° 
size_t
 
œrge_∑d
 =

490 #ifde‡
JEMALLOC_CACHE_OBLIVIOUS


491 
PAGE


497 
purge_mode_t
 
›t_purge
;

498 c⁄° *
purge_mode_«mes
[];

499 
ssize_t
 
›t_lg_dúty_mu…
;

500 
ssize_t
 
›t_deˇy_time
;

502 
¨ía_bö_öfo_t
 
¨ía_bö_öfo
[
NBINS
];

504 
size_t
 
m≠_büs
;

505 
size_t
 
m≠_misc_off£t
;

506 
size_t
 
¨ía_maxrun
;

507 
size_t
 
œrge_max˛ass
;

508 
size_t
 
run_qu™tize_max
;

509 
∆˛as£s
;

510 
nh˛as£s
;

512 #ifde‡
JEMALLOC_JET


513 
	$size_t
 (
	trun_qu™tize_t
)(
	tsize_t
);

514 
run_qu™tize_t
 *
run_qu™tize_Êo‹
;

515 
run_qu™tize_t
 *
run_qu™tize_˚û
;

517 
	`¨ía_chunk_ˇche_maybe_ö£π
(
¨ía_t
 *
¨ía
, 
exã¡_node_t
 *
node
,

518 
boﬁ
 
ˇche
);

519 
	`¨ía_chunk_ˇche_maybe_ªmove
(
¨ía_t
 *
¨ía
, 
exã¡_node_t
 *
node
,

520 
boﬁ
 
ˇche
);

521 
exã¡_node_t
 *
	`¨ía_node_Æloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

522 
	`¨ía_node_dÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
exã¡_node_t
 *
node
);

523 *
	`¨ía_chunk_Æloc_huge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
,

524 
size_t
 
Æignmít
, 
boﬁ
 *
zîo
);

525 
	`¨ía_chunk_dÆloc_huge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
chunk
,

526 
size_t
 
usize
);

527 
	`¨ía_chunk_øŒoc_huge_simû¨
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

528 *
chunk
, 
size_t
 
ﬁdsize
, size_à
usize
);

529 
	`¨ía_chunk_øŒoc_huge_shrök
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

530 *
chunk
, 
size_t
 
ﬁdsize
, size_à
usize
);

531 
boﬁ
 
	`¨ía_chunk_øŒoc_huge_ex∑nd
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

532 *
chunk
, 
size_t
 
ﬁdsize
, size_à
usize
, 
boﬁ
 *
zîo
);

533 
ssize_t
 
	`¨ía_lg_dúty_mu…_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

534 
boﬁ
 
	`¨ía_lg_dúty_mu…_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

535 
ssize_t
 
lg_dúty_mu…
);

536 
ssize_t
 
	`¨ía_deˇy_time_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

537 
boﬁ
 
	`¨ía_deˇy_time_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
ssize_t
 
deˇy_time
);

538 
	`¨ía_purge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
boﬁ
 
Æl
);

539 
	`¨ía_maybe_purge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

540 
	`¨ía_ª£t
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
);

541 
	`¨ía_tˇche_fûl_smÆl
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

542 
tˇche_bö_t
 *
tbö
, 
szöd_t
 
bööd
, 
uöt64_t
 
¥of_accumbyãs
);

543 
	`¨ía_Æloc_junk_smÆl
(*
±r
, 
¨ía_bö_öfo_t
 *
bö_öfo
,

544 
boﬁ
 
zîo
);

545 #ifde‡
JEMALLOC_JET


546 (
	t¨ía_ªdz⁄e_c‹ru±i⁄_t
)(*, 
	tsize_t
, 
	tboﬁ
, size_t,

547 
	tuöt8_t
);

548 
¨ía_ªdz⁄e_c‹ru±i⁄_t
 *
¨ía_ªdz⁄e_c‹ru±i⁄
;

549 (
	t¨ía_dÆloc_junk_smÆl_t
)(*, 
	t¨ía_bö_öfo_t
 *);

550 
¨ía_dÆloc_junk_smÆl_t
 *
¨ía_dÆloc_junk_smÆl
;

552 
	`¨ía_dÆloc_junk_smÆl
(*
±r
, 
¨ía_bö_öfo_t
 *
bö_öfo
);

554 
	`¨ía_qu¨™töe_junk_smÆl
(*
±r
, 
size_t
 
usize
);

555 *
	`¨ía_mÆloc_œrge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
szöd_t
 
öd
,

556 
boﬁ
 
zîo
);

557 *
	`¨ía_mÆloc_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
size
,

558 
szöd_t
 
öd
, 
boﬁ
 
zîo
);

559 *
	`¨ía_∑Œoc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
,

560 
size_t
 
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
);

561 
	`¨ía_¥of_¥omŸed
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
size
);

562 
	`¨ía_dÆloc_bö_junked_locked
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

563 
¨ía_chunk_t
 *
chunk
, *
±r
, 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
);

564 
	`¨ía_dÆloc_bö
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

565 *
±r
, 
size_t
 
∑geöd
, 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
);

566 
	`¨ía_dÆloc_smÆl
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

567 *
±r
, 
size_t
 
∑geöd
);

568 #ifde‡
JEMALLOC_JET


569 (
	t¨ía_dÆloc_junk_œrge_t
)(*, 
	tsize_t
);

570 
¨ía_dÆloc_junk_œrge_t
 *
¨ía_dÆloc_junk_œrge
;

572 
	`¨ía_dÆloc_junk_œrge
(*
±r
, 
size_t
 
usize
);

574 
	`¨ía_dÆloc_œrge_junked_locked
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

575 
¨ía_chunk_t
 *
chunk
, *
±r
);

576 
	`¨ía_dÆloc_œrge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

577 *
±r
);

578 #ifde‡
JEMALLOC_JET


579 (
	t¨ía_øŒoc_junk_œrge_t
)(*, 
	tsize_t
, size_t);

580 
¨ía_øŒoc_junk_œrge_t
 *
¨ía_øŒoc_junk_œrge
;

582 
boﬁ
 
	`¨ía_øŒoc_no_move
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
,

583 
size_t
 
size
, size_à
exåa
, 
boﬁ
 
zîo
);

584 *
	`¨ía_øŒoc
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, *
±r
, 
size_t
 
ﬁdsize
,

585 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
);

586 
dss_¥ec_t
 
	`¨ía_dss_¥ec_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

587 
boﬁ
 
	`¨ía_dss_¥ec_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
dss_¥ec_t
 
dss_¥ec
);

588 
ssize_t
 
	`¨ía_lg_dúty_mu…_deÁu…_gë
();

589 
boﬁ
 
	`¨ía_lg_dúty_mu…_deÁu…_£t
(
ssize_t
 
lg_dúty_mu…
);

590 
ssize_t
 
	`¨ía_deˇy_time_deÁu…_gë
();

591 
boﬁ
 
	`¨ía_deˇy_time_deÁu…_£t
(
ssize_t
 
deˇy_time
);

592 
	`¨ía_basic_°©s_mîge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

593 *
¡hªads
, c⁄° **
dss
, 
ssize_t
 *
lg_dúty_mu…
,

594 
ssize_t
 *
deˇy_time
, 
size_t
 *
«˘ive
, size_à*
ndúty
);

595 
	`¨ía_°©s_mîge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
¡hªads
,

596 c⁄° **
dss
, 
ssize_t
 *
lg_dúty_mu…
, ssize_à*
deˇy_time
,

597 
size_t
 *
«˘ive
, size_à*
ndúty
, 
¨ía_°©s_t
 *
a°©s
,

598 
mÆloc_bö_°©s_t
 *
b°©s
, 
mÆloc_œrge_°©s_t
 *
l°©s
,

599 
mÆloc_huge_°©s_t
 *
h°©s
);

600 
	`¨ía_¡hªads_gë
(
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
);

601 
	`¨ía_¡hªads_öc
(
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
);

602 
	`¨ía_¡hªads_dec
(
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
);

603 
¨ía_t
 *
	`¨ía_√w
(
tsdn_t
 *
tsdn
, 
öd
);

604 
boﬁ
 
	`¨ía_boŸ
();

605 
	`¨ía_¥ef‹k0
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

606 
	`¨ía_¥ef‹k1
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

607 
	`¨ía_¥ef‹k2
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

608 
	`¨ía_¥ef‹k3
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

609 
	`¨ía_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

610 
	`¨ía_po°f‹k_chûd
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

614 #ifde‡
JEMALLOC_H_INLINES


616 #i‚de‡
JEMALLOC_ENABLE_INLINE


617 
¨ía_chunk_m≠_bôs_t
 *
	`¨ía_bô£lm_gë_muèbÀ
(
¨ía_chunk_t
 *
chunk
,

618 
size_t
 
∑geöd
);

619 c⁄° 
¨ía_chunk_m≠_bôs_t
 *
	`¨ía_bô£lm_gë_c⁄°
(

620 c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
);

621 
¨ía_chunk_m≠_misc_t
 *
	`¨ía_mis˚lm_gë_muèbÀ
(
¨ía_chunk_t
 *
chunk
,

622 
size_t
 
∑geöd
);

623 c⁄° 
¨ía_chunk_m≠_misc_t
 *
	`¨ía_mis˚lm_gë_c⁄°
(

624 c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
);

625 
size_t
 
	`¨ía_mis˚lm_to_∑geöd
(c⁄° 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
);

626 *
	`¨ía_mis˚lm_to_Ωages
(c⁄° 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
);

627 
¨ía_chunk_m≠_misc_t
 *
	`¨ía_rd_to_mis˚lm
(
¨ía_runs_dúty_lök_t
 *
rd
);

628 
¨ía_chunk_m≠_misc_t
 *
	`¨ía_run_to_mis˚lm
(
¨ía_run_t
 *
run
);

629 
size_t
 *
	`¨ía_m≠bô•_gë_muèbÀ
(
¨ía_chunk_t
 *
chunk
, size_à
∑geöd
);

630 c⁄° 
size_t
 *
	`¨ía_m≠bô•_gë_c⁄°
(c⁄° 
¨ía_chunk_t
 *
chunk
,

631 
size_t
 
∑geöd
);

632 
size_t
 
	`¨ía_m≠bô•_ªad
(c⁄° size_à*
m≠bô•
);

633 
size_t
 
	`¨ía_m≠bôs_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, size_à
∑geöd
);

634 
size_t
 
	`¨ía_m≠bôs_size_decode
(size_à
m≠bôs
);

635 
size_t
 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
,

636 
size_t
 
∑geöd
);

637 
size_t
 
	`¨ía_m≠bôs_œrge_size_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
,

638 
size_t
 
∑geöd
);

639 
size_t
 
	`¨ía_m≠bôs_smÆl_runöd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
,

640 
size_t
 
∑geöd
);

641 
szöd_t
 
	`¨ía_m≠bôs_bööd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
);

642 
size_t
 
	`¨ía_m≠bôs_dúty_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, size_à
∑geöd
);

643 
size_t
 
	`¨ía_m≠bôs_unzî€d_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, size_à
∑geöd
);

644 
size_t
 
	`¨ía_m≠bôs_decommôãd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
,

645 
size_t
 
∑geöd
);

646 
size_t
 
	`¨ía_m≠bôs_œrge_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, size_à
∑geöd
);

647 
size_t
 
	`¨ía_m≠bôs_Æloˇãd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, size_à
∑geöd
);

648 
	`¨ía_m≠bô•_wrôe
(
size_t
 *
m≠bô•
, size_à
m≠bôs
);

649 
size_t
 
	`¨ía_m≠bôs_size_ícode
(size_à
size
);

650 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

651 
size_t
 
size
, size_à
Êags
);

652 
	`¨ía_m≠bôs_u«Œoˇãd_size_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

653 
size_t
 
size
);

654 
	`¨ía_m≠bôs_öã∫Æ_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

655 
size_t
 
Êags
);

656 
	`¨ía_m≠bôs_œrge_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

657 
size_t
 
size
, size_à
Êags
);

658 
	`¨ía_m≠bôs_œrge_bööd_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

659 
szöd_t
 
bööd
);

660 
	`¨ía_m≠bôs_smÆl_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

661 
size_t
 
runöd
, 
szöd_t
 
bööd
, size_à
Êags
);

662 
	`¨ía_mëad©a_Æloˇãd_add
(
¨ía_t
 *
¨ía
, 
size_t
 
size
);

663 
	`¨ía_mëad©a_Æloˇãd_sub
(
¨ía_t
 *
¨ía
, 
size_t
 
size
);

664 
size_t
 
	`¨ía_mëad©a_Æloˇãd_gë
(
¨ía_t
 *
¨ía
);

665 
boﬁ
 
	`¨ía_¥of_accum_im∂
(
¨ía_t
 *
¨ía
, 
uöt64_t
 
accumbyãs
);

666 
boﬁ
 
	`¨ía_¥of_accum_locked
(
¨ía_t
 *
¨ía
, 
uöt64_t
 
accumbyãs
);

667 
boﬁ
 
	`¨ía_¥of_accum
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
uöt64_t
 
accumbyãs
);

668 
szöd_t
 
	`¨ía_±r_smÆl_bööd_gë
(c⁄° *
±r
, 
size_t
 
m≠bôs
);

669 
szöd_t
 
	`¨ía_bö_ödex
(
¨ía_t
 *
¨ía
, 
¨ía_bö_t
 *
bö
);

670 
size_t
 
	`¨ía_run_ªgöd
(
¨ía_run_t
 *
run
, 
¨ía_bö_öfo_t
 *
bö_öfo
,

671 c⁄° *
±r
);

672 
¥of_t˘x_t
 *
	`¨ía_¥of_t˘x_gë
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

673 
	`¨ía_¥of_t˘x_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

674 
¥of_t˘x_t
 *
t˘x
);

675 
	`¨ía_¥of_t˘x_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

676 c⁄° *
ﬁd_±r
, 
¥of_t˘x_t
 *
ﬁd_t˘x
);

677 
	`¨ía_deˇy_ticks
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¡icks
);

678 
	`¨ía_deˇy_tick
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

679 *
	`¨ía_mÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
szöd_t
 
öd
,

680 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
, boﬁ 
¶ow_∑th
);

681 
¨ía_t
 *
	`¨ía_ØŒoc
(c⁄° *
±r
);

682 
size_t
 
	`¨ía_ßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
boﬁ
 
demŸe
);

683 
	`¨ía_dÆloc
(
tsdn_t
 *
tsdn
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
);

684 
	`¨ía_sdÆloc
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
size
, 
tˇche_t
 *
tˇche
,

685 
boﬁ
 
¶ow_∑th
);

688 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_ARENA_C_
))

689 #ifde‡
JEMALLOC_ARENA_INLINE_A


690 
JEMALLOC_ALWAYS_INLINE
 
¨ía_chunk_m≠_bôs_t
 *

691 
	$¨ía_bô£lm_gë_muèbÀ
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

694 
	`as£π
(
∑geöd
 >
m≠_büs
);

695 
	`as£π
(
∑geöd
 < 
chunk_≈ages
);

697  (&
chunk
->
m≠_bôs
[
∑geöd
-
m≠_büs
]);

698 
	}
}

700 
JEMALLOC_ALWAYS_INLINE
 c⁄° 
¨ía_chunk_m≠_bôs_t
 *

701 
	$¨ía_bô£lm_gë_c⁄°
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

704  (
	`¨ía_bô£lm_gë_muèbÀ
((
¨ía_chunk_t
 *)
chunk
, 
∑geöd
));

705 
	}
}

707 
JEMALLOC_ALWAYS_INLINE
 
¨ía_chunk_m≠_misc_t
 *

708 
	$¨ía_mis˚lm_gë_muèbÀ
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

711 
	`as£π
(
∑geöd
 >
m≠_büs
);

712 
	`as£π
(
∑geöd
 < 
chunk_≈ages
);

714  ((
¨ía_chunk_m≠_misc_t
 *)((
uöçå_t
)
chunk
 +

715 (
uöçå_t
)
m≠_misc_off£t
Ë+ 
∑geöd
-
m≠_büs
);

716 
	}
}

718 
JEMALLOC_ALWAYS_INLINE
 c⁄° 
¨ía_chunk_m≠_misc_t
 *

719 
	$¨ía_mis˚lm_gë_c⁄°
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

722  (
	`¨ía_mis˚lm_gë_muèbÀ
((
¨ía_chunk_t
 *)
chunk
, 
∑geöd
));

723 
	}
}

725 
JEMALLOC_ALWAYS_INLINE
 
size_t


726 
	$¨ía_mis˚lm_to_∑geöd
(c⁄° 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
)

728 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(
mis˚lm
);

729 
size_t
 
∑geöd
 = ((
uöçå_t
)
mis˚lm
 - ((uöçå_t)
chunk
 +

730 
m≠_misc_off£t
)Ë/ (
¨ía_chunk_m≠_misc_t
Ë+ 
m≠_büs
;

732 
	`as£π
(
∑geöd
 >
m≠_büs
);

733 
	`as£π
(
∑geöd
 < 
chunk_≈ages
);

735  (
∑geöd
);

736 
	}
}

738 
JEMALLOC_ALWAYS_INLINE
 *

739 
	$¨ía_mis˚lm_to_Ωages
(c⁄° 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
)

741 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(
mis˚lm
);

742 
size_t
 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

744  ((*)((
uöçå_t
)
chunk
 + (
∑geöd
 << 
LG_PAGE
)));

745 
	}
}

747 
JEMALLOC_ALWAYS_INLINE
 
¨ía_chunk_m≠_misc_t
 *

748 
	$¨ía_rd_to_mis˚lm
(
¨ía_runs_dúty_lök_t
 *
rd
)

750 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = (arena_chunk_map_misc_t

751 *)((
uöçå_t
)
rd
 - 
	`off£tof
(
¨ía_chunk_m≠_misc_t
,Ñd));

753 
	`as£π
(
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
Ë>
m≠_büs
);

754 
	`as£π
(
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
Ë< 
chunk_≈ages
);

756  (
mis˚lm
);

757 
	}
}

759 
JEMALLOC_ALWAYS_INLINE
 
¨ía_chunk_m≠_misc_t
 *

760 
	$¨ía_run_to_mis˚lm
(
¨ía_run_t
 *
run
)

762 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = (arena_chunk_map_misc_t

763 *)((
uöçå_t
)
run
 - 
	`off£tof
(
¨ía_chunk_m≠_misc_t
,Ñun));

765 
	`as£π
(
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
Ë>
m≠_büs
);

766 
	`as£π
(
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
Ë< 
chunk_≈ages
);

768  (
mis˚lm
);

769 
	}
}

771 
JEMALLOC_ALWAYS_INLINE
 
size_t
 *

772 
	$¨ía_m≠bô•_gë_muèbÀ
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

775  (&
	`¨ía_bô£lm_gë_muèbÀ
(
chunk
, 
∑geöd
)->
bôs
);

776 
	}
}

778 
JEMALLOC_ALWAYS_INLINE
 c⁄° 
size_t
 *

779 
	$¨ía_m≠bô•_gë_c⁄°
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

782  (
	`¨ía_m≠bô•_gë_muèbÀ
((
¨ía_chunk_t
 *)
chunk
, 
∑geöd
));

783 
	}
}

785 
JEMALLOC_ALWAYS_INLINE
 
size_t


786 
	$¨ía_m≠bô•_ªad
(c⁄° 
size_t
 *
m≠bô•
)

789  (*
m≠bô•
);

790 
	}
}

792 
JEMALLOC_ALWAYS_INLINE
 
size_t


793 
	$¨ía_m≠bôs_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

796  (
	`¨ía_m≠bô•_ªad
(
	`¨ía_m≠bô•_gë_c⁄°
(
chunk
, 
∑geöd
)));

797 
	}
}

799 
JEMALLOC_ALWAYS_INLINE
 
size_t


800 
	$¨ía_m≠bôs_size_decode
(
size_t
 
m≠bôs
)

802 
size_t
 
size
;

804 #i‡
CHUNK_MAP_SIZE_SHIFT
 > 0

805 
size
 = (
m≠bôs
 & 
CHUNK_MAP_SIZE_MASK
Ë>> 
CHUNK_MAP_SIZE_SHIFT
;

806 #ñi‡
CHUNK_MAP_SIZE_SHIFT
 == 0

807 
size
 = 
m≠bôs
 & 
CHUNK_MAP_SIZE_MASK
;

809 
size
 = (
m≠bôs
 & 
CHUNK_MAP_SIZE_MASK
Ë<< -
CHUNK_MAP_SIZE_SHIFT
;

812  (
size
);

813 
	}
}

815 
JEMALLOC_ALWAYS_INLINE
 
size_t


816 
	$¨ía_m≠bôs_u«Œoˇãd_size_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

818 
size_t
 
m≠bôs
;

820 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

821 
	`as£π
((
m≠bôs
 & (
CHUNK_MAP_LARGE
|
CHUNK_MAP_ALLOCATED
)) == 0);

822  (
	`¨ía_m≠bôs_size_decode
(
m≠bôs
));

823 
	}
}

825 
JEMALLOC_ALWAYS_INLINE
 
size_t


826 
	$¨ía_m≠bôs_œrge_size_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

828 
size_t
 
m≠bôs
;

830 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

831 
	`as£π
((
m≠bôs
 & (
CHUNK_MAP_LARGE
|
CHUNK_MAP_ALLOCATED
)) ==

832 (
CHUNK_MAP_LARGE
|
CHUNK_MAP_ALLOCATED
));

833  (
	`¨ía_m≠bôs_size_decode
(
m≠bôs
));

834 
	}
}

836 
JEMALLOC_ALWAYS_INLINE
 
size_t


837 
	$¨ía_m≠bôs_smÆl_runöd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

839 
size_t
 
m≠bôs
;

841 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

842 
	`as£π
((
m≠bôs
 & (
CHUNK_MAP_LARGE
|
CHUNK_MAP_ALLOCATED
)) ==

843 
CHUNK_MAP_ALLOCATED
);

844  (
m≠bôs
 >> 
CHUNK_MAP_RUNIND_SHIFT
);

845 
	}
}

847 
JEMALLOC_ALWAYS_INLINE
 
szöd_t


848 
	$¨ía_m≠bôs_bööd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

850 
size_t
 
m≠bôs
;

851 
szöd_t
 
bööd
;

853 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

854 
bööd
 = (
m≠bôs
 & 
CHUNK_MAP_BININD_MASK
Ë>> 
CHUNK_MAP_BININD_SHIFT
;

855 
	`as£π
(
bööd
 < 
NBINS
 || bööd =
BININD_INVALID
);

856  (
bööd
);

857 
	}
}

859 
JEMALLOC_ALWAYS_INLINE
 
size_t


860 
	$¨ía_m≠bôs_dúty_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

862 
size_t
 
m≠bôs
;

864 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

865 
	`as£π
((
m≠bôs
 & 
CHUNK_MAP_DECOMMITTED
) == 0 || (mapbits &

866 (
CHUNK_MAP_DIRTY
|
CHUNK_MAP_UNZEROED
)) == 0);

867  (
m≠bôs
 & 
CHUNK_MAP_DIRTY
);

868 
	}
}

870 
JEMALLOC_ALWAYS_INLINE
 
size_t


871 
	$¨ía_m≠bôs_unzî€d_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

873 
size_t
 
m≠bôs
;

875 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

876 
	`as£π
((
m≠bôs
 & 
CHUNK_MAP_DECOMMITTED
) == 0 || (mapbits &

877 (
CHUNK_MAP_DIRTY
|
CHUNK_MAP_UNZEROED
)) == 0);

878  (
m≠bôs
 & 
CHUNK_MAP_UNZEROED
);

879 
	}
}

881 
JEMALLOC_ALWAYS_INLINE
 
size_t


882 
	$¨ía_m≠bôs_decommôãd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

884 
size_t
 
m≠bôs
;

886 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

887 
	`as£π
((
m≠bôs
 & 
CHUNK_MAP_DECOMMITTED
) == 0 || (mapbits &

888 (
CHUNK_MAP_DIRTY
|
CHUNK_MAP_UNZEROED
)) == 0);

889  (
m≠bôs
 & 
CHUNK_MAP_DECOMMITTED
);

890 
	}
}

892 
JEMALLOC_ALWAYS_INLINE
 
size_t


893 
	$¨ía_m≠bôs_œrge_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

895 
size_t
 
m≠bôs
;

897 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

898  (
m≠bôs
 & 
CHUNK_MAP_LARGE
);

899 
	}
}

901 
JEMALLOC_ALWAYS_INLINE
 
size_t


902 
	$¨ía_m≠bôs_Æloˇãd_gë
(c⁄° 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
)

904 
size_t
 
m≠bôs
;

906 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

907  (
m≠bôs
 & 
CHUNK_MAP_ALLOCATED
);

908 
	}
}

910 
JEMALLOC_ALWAYS_INLINE
 

911 
	$¨ía_m≠bô•_wrôe
(
size_t
 *
m≠bô•
, size_à
m≠bôs
)

914 *
m≠bô•
 = 
m≠bôs
;

915 
	}
}

917 
JEMALLOC_ALWAYS_INLINE
 
size_t


918 
	$¨ía_m≠bôs_size_ícode
(
size_t
 
size
)

920 
size_t
 
m≠bôs
;

922 #i‡
CHUNK_MAP_SIZE_SHIFT
 > 0

923 
m≠bôs
 = 
size
 << 
CHUNK_MAP_SIZE_SHIFT
;

924 #ñi‡
CHUNK_MAP_SIZE_SHIFT
 == 0

925 
m≠bôs
 = 
size
;

927 
m≠bôs
 = 
size
 >> -
CHUNK_MAP_SIZE_SHIFT
;

930 
	`as£π
((
m≠bôs
 & ~
CHUNK_MAP_SIZE_MASK
) == 0);

931  (
m≠bôs
);

932 
	}
}

934 
JEMALLOC_ALWAYS_INLINE
 

935 
	$¨ía_m≠bôs_u«Œoˇãd_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
, size_à
size
,

936 
size_t
 
Êags
)

938 
size_t
 *
m≠bô•
 = 
	`¨ía_m≠bô•_gë_muèbÀ
(
chunk
, 
∑geöd
);

940 
	`as£π
((
size
 & 
PAGE_MASK
) == 0);

941 
	`as£π
((
Êags
 & 
CHUNK_MAP_FLAGS_MASK
) == flags);

942 
	`as£π
((
Êags
 & 
CHUNK_MAP_DECOMMITTED
) == 0 || (flags &

943 (
CHUNK_MAP_DIRTY
|
CHUNK_MAP_UNZEROED
)) == 0);

944 
	`¨ía_m≠bô•_wrôe
(
m≠bô•
, 
	`¨ía_m≠bôs_size_ícode
(
size
) |

945 
CHUNK_MAP_BININD_INVALID
 | 
Êags
);

946 
	}
}

948 
JEMALLOC_ALWAYS_INLINE
 

949 
	$¨ía_m≠bôs_u«Œoˇãd_size_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

950 
size_t
 
size
)

952 
size_t
 *
m≠bô•
 = 
	`¨ía_m≠bô•_gë_muèbÀ
(
chunk
, 
∑geöd
);

953 
size_t
 
m≠bôs
 = 
	`¨ía_m≠bô•_ªad
(
m≠bô•
);

955 
	`as£π
((
size
 & 
PAGE_MASK
) == 0);

956 
	`as£π
((
m≠bôs
 & (
CHUNK_MAP_LARGE
|
CHUNK_MAP_ALLOCATED
)) == 0);

957 
	`¨ía_m≠bô•_wrôe
(
m≠bô•
, 
	`¨ía_m≠bôs_size_ícode
(
size
) |

958 (
m≠bôs
 & ~
CHUNK_MAP_SIZE_MASK
));

959 
	}
}

961 
JEMALLOC_ALWAYS_INLINE
 

962 
	$¨ía_m≠bôs_öã∫Æ_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
, size_à
Êags
)

964 
size_t
 *
m≠bô•
 = 
	`¨ía_m≠bô•_gë_muèbÀ
(
chunk
, 
∑geöd
);

966 
	`as£π
((
Êags
 & 
CHUNK_MAP_UNZEROED
) == flags);

967 
	`¨ía_m≠bô•_wrôe
(
m≠bô•
, 
Êags
);

968 
	}
}

970 
JEMALLOC_ALWAYS_INLINE
 

971 
	$¨ía_m≠bôs_œrge_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
, size_à
size
,

972 
size_t
 
Êags
)

974 
size_t
 *
m≠bô•
 = 
	`¨ía_m≠bô•_gë_muèbÀ
(
chunk
, 
∑geöd
);

976 
	`as£π
((
size
 & 
PAGE_MASK
) == 0);

977 
	`as£π
((
Êags
 & 
CHUNK_MAP_FLAGS_MASK
) == flags);

978 
	`as£π
((
Êags
 & 
CHUNK_MAP_DECOMMITTED
) == 0 || (flags &

979 (
CHUNK_MAP_DIRTY
|
CHUNK_MAP_UNZEROED
)) == 0);

980 
	`¨ía_m≠bô•_wrôe
(
m≠bô•
, 
	`¨ía_m≠bôs_size_ícode
(
size
) |

981 
CHUNK_MAP_BININD_INVALID
 | 
Êags
 | 
CHUNK_MAP_LARGE
 |

982 
CHUNK_MAP_ALLOCATED
);

983 
	}
}

985 
JEMALLOC_ALWAYS_INLINE
 

986 
	$¨ía_m≠bôs_œrge_bööd_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

987 
szöd_t
 
bööd
)

989 
size_t
 *
m≠bô•
 = 
	`¨ía_m≠bô•_gë_muèbÀ
(
chunk
, 
∑geöd
);

990 
size_t
 
m≠bôs
 = 
	`¨ía_m≠bô•_ªad
(
m≠bô•
);

992 
	`as£π
(
bööd
 <
BININD_INVALID
);

993 
	`as£π
(
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
Ë=
LARGE_MINCLASS
 +

994 
œrge_∑d
);

995 
	`¨ía_m≠bô•_wrôe
(
m≠bô•
, (
m≠bôs
 & ~
CHUNK_MAP_BININD_MASK
) |

996 (
bööd
 << 
CHUNK_MAP_BININD_SHIFT
));

997 
	}
}

999 
JEMALLOC_ALWAYS_INLINE
 

1000 
	$¨ía_m≠bôs_smÆl_£t
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
, size_à
runöd
,

1001 
szöd_t
 
bööd
, 
size_t
 
Êags
)

1003 
size_t
 *
m≠bô•
 = 
	`¨ía_m≠bô•_gë_muèbÀ
(
chunk
, 
∑geöd
);

1005 
	`as£π
(
bööd
 < 
BININD_INVALID
);

1006 
	`as£π
(
∑geöd
 - 
runöd
 >
m≠_büs
);

1007 
	`as£π
((
Êags
 & 
CHUNK_MAP_UNZEROED
) == flags);

1008 
	`¨ía_m≠bô•_wrôe
(
m≠bô•
, (
runöd
 << 
CHUNK_MAP_RUNIND_SHIFT
) |

1009 (
bööd
 << 
CHUNK_MAP_BININD_SHIFT
Ë| 
Êags
 | 
CHUNK_MAP_ALLOCATED
);

1010 
	}
}

1012 
JEMALLOC_INLINE
 

1013 
	$¨ía_mëad©a_Æloˇãd_add
(
¨ía_t
 *
¨ía
, 
size_t
 
size
)

1016 
	`©omic_add_z
(&
¨ía
->
°©s
.
mëad©a_Æloˇãd
, 
size
);

1017 
	}
}

1019 
JEMALLOC_INLINE
 

1020 
	$¨ía_mëad©a_Æloˇãd_sub
(
¨ía_t
 *
¨ía
, 
size_t
 
size
)

1023 
	`©omic_sub_z
(&
¨ía
->
°©s
.
mëad©a_Æloˇãd
, 
size
);

1024 
	}
}

1026 
JEMALLOC_INLINE
 
size_t


1027 
	$¨ía_mëad©a_Æloˇãd_gë
(
¨ía_t
 *
¨ía
)

1030  (
	`©omic_ªad_z
(&
¨ía
->
°©s
.
mëad©a_Æloˇãd
));

1031 
	}
}

1033 
JEMALLOC_INLINE
 
boﬁ


1034 
	$¨ía_¥of_accum_im∂
(
¨ía_t
 *
¨ía
, 
uöt64_t
 
accumbyãs
)

1037 
	`ˇs£π
(
c⁄fig_¥of
);

1038 
	`as£π
(
¥of_öãrvÆ
 != 0);

1040 
¨ía
->
¥of_accumbyãs
 +
accumbyãs
;

1041 i‡(
¨ía
->
¥of_accumbyãs
 >
¥of_öãrvÆ
) {

1042 
¨ía
->
¥of_accumbyãs
 -
¥of_öãrvÆ
;

1043  (
åue
);

1045  (
Ál£
);

1046 
	}
}

1048 
JEMALLOC_INLINE
 
boﬁ


1049 
	$¨ía_¥of_accum_locked
(
¨ía_t
 *
¨ía
, 
uöt64_t
 
accumbyãs
)

1052 
	`ˇs£π
(
c⁄fig_¥of
);

1054 i‡(
	`likñy
(
¥of_öãrvÆ
 == 0))

1055  (
Ál£
);

1056  (
	`¨ía_¥of_accum_im∂
(
¨ía
, 
accumbyãs
));

1057 
	}
}

1059 
JEMALLOC_INLINE
 
boﬁ


1060 
	$¨ía_¥of_accum
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
uöt64_t
 
accumbyãs
)

1063 
	`ˇs£π
(
c⁄fig_¥of
);

1065 i‡(
	`likñy
(
¥of_öãrvÆ
 == 0))

1066  (
Ál£
);

1069 
boﬁ
 
ªt
;

1071 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1072 
ªt
 = 
	`¨ía_¥of_accum_im∂
(
¨ía
, 
accumbyãs
);

1073 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1074  (
ªt
);

1076 
	}
}

1078 
JEMALLOC_ALWAYS_INLINE
 
szöd_t


1079 
	$¨ía_±r_smÆl_bööd_gë
(c⁄° *
±r
, 
size_t
 
m≠bôs
)

1081 
szöd_t
 
bööd
;

1083 
bööd
 = (
m≠bôs
 & 
CHUNK_MAP_BININD_MASK
Ë>> 
CHUNK_MAP_BININD_SHIFT
;

1085 i‡(
c⁄fig_debug
) {

1086 
¨ía_chunk_t
 *
chunk
;

1087 
¨ía_t
 *
¨ía
;

1088 
size_t
 
∑geöd
;

1089 
size_t
 
a˘uÆ_m≠bôs
;

1090 
size_t
 
Ωages_öd
;

1091 c⁄° 
¨ía_run_t
 *
run
;

1092 
¨ía_bö_t
 *
bö
;

1093 
szöd_t
 
run_bööd
, 
a˘uÆ_bööd
;

1094 
¨ía_bö_öfo_t
 *
bö_öfo
;

1095 c⁄° 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

1096 c⁄° *
Ωages
;

1098 
	`as£π
(
bööd
 !
BININD_INVALID
);

1099 
	`as£π
(
bööd
 < 
NBINS
);

1100 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1101 
¨ía
 = 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
);

1102 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

1103 
a˘uÆ_m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

1104 
	`as£π
(
m≠bôs
 =
a˘uÆ_m≠bôs
);

1105 
	`as£π
(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) == 0);

1106 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) != 0);

1107 
Ωages_öd
 = 
∑geöd
 - 
	`¨ía_m≠bôs_smÆl_runöd_gë
(
chunk
,

1108 
∑geöd
);

1109 
mis˚lm
 = 
	`¨ía_mis˚lm_gë_c⁄°
(
chunk
, 
Ωages_öd
);

1110 
run
 = &
mis˚lm
->run;

1111 
run_bööd
 = 
run
->
bööd
;

1112 
bö
 = &
¨ía
->
bös
[
run_bööd
];

1113 
a˘uÆ_bööd
 = (
szöd_t
)(
bö
 - 
¨ía
->
bös
);

1114 
	`as£π
(
run_bööd
 =
a˘uÆ_bööd
);

1115 
bö_öfo
 = &
¨ía_bö_öfo
[
a˘uÆ_bööd
];

1116 
Ωages
 = 
	`¨ía_mis˚lm_to_Ωages
(
mis˚lm
);

1117 
	`as£π
(((
uöçå_t
)
±r
 - ((uöçå_t)
Ωages
 +

1118 (
uöçå_t
)
bö_öfo
->
ªg0_off£t
)Ë% bö_öfo->
ªg_öãrvÆ


1122  (
bööd
);

1123 
	}
}

1126 #ifde‡
JEMALLOC_ARENA_INLINE_B


1127 
JEMALLOC_INLINE
 
szöd_t


1128 
	$¨ía_bö_ödex
(
¨ía_t
 *
¨ía
, 
¨ía_bö_t
 *
bö
)

1130 
szöd_t
 
bööd
 = (szöd_t)(
bö
 - 
¨ía
->
bös
);

1131 
	`as£π
(
bööd
 < 
NBINS
);

1132  (
bööd
);

1133 
	}
}

1135 
JEMALLOC_INLINE
 
size_t


1136 
	$¨ía_run_ªgöd
(
¨ía_run_t
 *
run
, 
¨ía_bö_öfo_t
 *
bö_öfo
, c⁄° *
±r
)

1138 
size_t
 
diff
, 
öãrvÆ
, 
shi·
, 
ªgöd
;

1139 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

1140 *
Ωages
 = 
	`¨ía_mis˚lm_to_Ωages
(
mis˚lm
);

1146 
	`as£π
((
uöçå_t
)
±r
 >(uöçå_t)
Ωages
 +

1147 (
uöçå_t
)
bö_öfo
->
ªg0_off£t
);

1153 
diff
 = (
size_t
)((
uöçå_t
)
±r
 - (uöçå_t)
Ωages
 -

1154 
bö_öfo
->
ªg0_off£t
);

1157 
öãrvÆ
 = 
bö_öfo
->
ªg_öãrvÆ
;

1158 
shi·
 = 
	`ffs_zu
(
öãrvÆ
) - 1;

1159 
diff
 >>
shi·
;

1160 
öãrvÆ
 >>
shi·
;

1162 i‡(
öãrvÆ
 == 1) {

1164 
ªgöd
 = 
diff
;

1180 
	#SIZE_INV_SHIFT
 (((
size_t
Ë<< 3Ë- 
LG_RUN_MAXREGS
)

	)

1181 
	#SIZE_INV
(
s
Ë(((
	`ZU
(1Ë<< 
SIZE_INV_SHIFT
Ë/ (s)Ë+ 1)

	)

1182 c⁄° 
size_t
 
öãrvÆ_övs
[] = {

1183 
	`SIZE_INV
(3),

1184 
	`SIZE_INV
(4), SIZE_INV(5), SIZE_INV(6), SIZE_INV(7),

1185 
	`SIZE_INV
(8), SIZE_INV(9), SIZE_INV(10), SIZE_INV(11),

1186 
	`SIZE_INV
(12), SIZE_INV(13), SIZE_INV(14), SIZE_INV(15),

1187 
	`SIZE_INV
(16), SIZE_INV(17), SIZE_INV(18), SIZE_INV(19),

1188 
	`SIZE_INV
(20), SIZE_INV(21), SIZE_INV(22), SIZE_INV(23),

1189 
	`SIZE_INV
(24), SIZE_INV(25), SIZE_INV(26), SIZE_INV(27),

1190 
	`SIZE_INV
(28), SIZE_INV(29), SIZE_INV(30), SIZE_INV(31)

1193 i‡(
	`likñy
(
öãrvÆ
 <(((
öãrvÆ_övs
Ë/ (
size_t
))

1195 
ªgöd
 = (
diff
 * 
öãrvÆ_övs
[
öãrvÆ
 - 3]) >>

1196 
SIZE_INV_SHIFT
;

1198 
ªgöd
 = 
diff
 / 
öãrvÆ
;

1199 #unde‡
SIZE_INV


1200 #unde‡
SIZE_INV_SHIFT


1202 
	`as£π
(
diff
 =
ªgöd
 * 
öãrvÆ
);

1203 
	`as£π
(
ªgöd
 < 
bö_öfo
->
ƒegs
);

1205  (
ªgöd
);

1206 
	}
}

1208 
JEMALLOC_INLINE
 
¥of_t˘x_t
 *

1209 
	$¨ía_¥of_t˘x_gë
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

1211 
¥of_t˘x_t
 *
ªt
;

1212 
¨ía_chunk_t
 *
chunk
;

1214 
	`ˇs£π
(
c⁄fig_¥of
);

1215 
	`as£π
(
±r
 !
NULL
);

1217 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1218 i‡(
	`likñy
(
chunk
 !
±r
)) {

1219 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

1220 
size_t
 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

1221 
	`as£π
((
m≠bôs
 & 
CHUNK_MAP_ALLOCATED
) != 0);

1222 i‡(
	`likñy
((
m≠bôs
 & 
CHUNK_MAP_LARGE
) == 0))

1223 
ªt
 = (
¥of_t˘x_t
 *)(
uöçå_t
)1U;

1225 
¨ía_chunk_m≠_misc_t
 *
ñm
 =

1226 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
);

1227 
ªt
 = 
	`©omic_ªad_p
(&
ñm
->
¥of_t˘x_pun
);

1230 
ªt
 = 
	`huge_¥of_t˘x_gë
(
tsdn
, 
±r
);

1232  (
ªt
);

1233 
	}
}

1235 
JEMALLOC_INLINE
 

1236 
	$¨ía_¥of_t˘x_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

1237 
¥of_t˘x_t
 *
t˘x
)

1239 
¨ía_chunk_t
 *
chunk
;

1241 
	`ˇs£π
(
c⁄fig_¥of
);

1242 
	`as£π
(
±r
 !
NULL
);

1244 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1245 i‡(
	`likñy
(
chunk
 !
±r
)) {

1246 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

1248 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) != 0);

1250 i‡(
	`u∆ikñy
(
usize
 > 
SMALL_MAXCLASS
 || (
uöçå_t
)
t˘x
 >

1251 (
uöçå_t
)1U)) {

1252 
¨ía_chunk_m≠_misc_t
 *
ñm
;

1254 
	`as£π
(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) != 0);

1256 
ñm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
);

1257 
	`©omic_wrôe_p
(&
ñm
->
¥of_t˘x_pun
, 
t˘x
);

1265 
	`as£π
(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) == 0);

1268 
	`huge_¥of_t˘x_£t
(
tsdn
, 
±r
, 
t˘x
);

1269 
	}
}

1271 
JEMALLOC_INLINE
 

1272 
	$¨ía_¥of_t˘x_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

1273 c⁄° *
ﬁd_±r
, 
¥of_t˘x_t
 *
ﬁd_t˘x
)

1276 
	`ˇs£π
(
c⁄fig_¥of
);

1277 
	`as£π
(
±r
 !
NULL
);

1279 i‡(
	`u∆ikñy
(
usize
 > 
SMALL_MAXCLASS
 || (
±r
 =
ﬁd_±r
 &&

1280 (
uöçå_t
)
ﬁd_t˘x
 > (uintptr_t)1U))) {

1281 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(
±r
);

1282 i‡(
	`likñy
(
chunk
 !
±r
)) {

1283 
size_t
 
∑geöd
;

1284 
¨ía_chunk_m≠_misc_t
 *
ñm
;

1286 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
) >>

1287 
LG_PAGE
;

1288 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) !=

1290 
	`as£π
(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) != 0);

1292 
ñm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
);

1293 
	`©omic_wrôe_p
(&
ñm
->
¥of_t˘x_pun
,

1294 (
¥of_t˘x_t
 *)(
uöçå_t
)1U);

1296 
	`huge_¥of_t˘x_ª£t
(
tsdn
, 
±r
);

1298 
	}
}

1300 
JEMALLOC_ALWAYS_INLINE
 

1301 
	$¨ía_deˇy_ticks
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¡icks
)

1303 
tsd_t
 *
tsd
;

1304 
tickî_t
 *
deˇy_tickî
;

1306 i‡(
	`u∆ikñy
(
	`tsdn_nuŒ
(
tsdn
)))

1308 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

1309 
deˇy_tickî
 = 
	`deˇy_tickî_gë
(
tsd
, 
¨ía
->
öd
);

1310 i‡(
	`u∆ikñy
(
deˇy_tickî
 =
NULL
))

1312 i‡(
	`u∆ikñy
(
	`tickî_ticks
(
deˇy_tickî
, 
¡icks
)))

1313 
	`¨ía_purge
(
tsdn
, 
¨ía
, 
Ál£
);

1314 
	}
}

1316 
JEMALLOC_ALWAYS_INLINE
 

1317 
	$¨ía_deˇy_tick
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

1320 
	`¨ía_deˇy_ticks
(
tsdn
, 
¨ía
, 1);

1321 
	}
}

1323 
JEMALLOC_ALWAYS_INLINE
 *

1324 
	$¨ía_mÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
,

1325 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
)

1328 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
tˇche
 =
NULL
);

1329 
	`as£π
(
size
 != 0);

1331 i‡(
	`likñy
(
tˇche
 !
NULL
)) {

1332 i‡(
	`likñy
(
size
 <
SMALL_MAXCLASS
)) {

1333  (
	`tˇche_Æloc_smÆl
(
	`tsdn_tsd
(
tsdn
), 
¨ía
,

1334 
tˇche
, 
size
, 
öd
, 
zîo
, 
¶ow_∑th
));

1336 i‡(
	`likñy
(
size
 <
tˇche_max˛ass
)) {

1337  (
	`tˇche_Æloc_œrge
(
	`tsdn_tsd
(
tsdn
), 
¨ía
,

1338 
tˇche
, 
size
, 
öd
, 
zîo
, 
¶ow_∑th
));

1341 
	`as£π
(
size
 > 
tˇche_max˛ass
);

1344  (
	`¨ía_mÆloc_h¨d
(
tsdn
, 
¨ía
, 
size
, 
öd
, 
zîo
));

1345 
	}
}

1347 
JEMALLOC_ALWAYS_INLINE
 
¨ía_t
 *

1348 
	$¨ía_ØŒoc
(c⁄° *
±r
)

1350 
¨ía_chunk_t
 *
chunk
;

1352 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1353 i‡(
	`likñy
(
chunk
 !
±r
))

1354  (
	`exã¡_node_¨ía_gë
(&
chunk
->
node
));

1356  (
	`huge_ØŒoc
(
±r
));

1357 
	}
}

1360 
JEMALLOC_ALWAYS_INLINE
 
size_t


1361 
	$¨ía_ßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
boﬁ
 
demŸe
)

1363 
size_t
 
ªt
;

1364 
¨ía_chunk_t
 *
chunk
;

1365 
size_t
 
∑geöd
;

1366 
szöd_t
 
bööd
;

1368 
	`as£π
(
±r
 !
NULL
);

1370 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1371 i‡(
	`likñy
(
chunk
 !
±r
)) {

1372 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

1373 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) != 0);

1374 
bööd
 = 
	`¨ía_m≠bôs_bööd_gë
(
chunk
, 
∑geöd
);

1375 i‡(
	`u∆ikñy
(
bööd
 =
BININD_INVALID
 || (
c⁄fig_¥of
 && !
demŸe


1376 && 
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) != 0))) {

1383 
	`as£π
(
c⁄fig_ˇche_oblivious
 || ((
uöçå_t
)
±r
 &

1384 
PAGE_MASK
) == 0);

1385 
ªt
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
) -

1386 
œrge_∑d
;

1387 
	`as£π
(
ªt
 != 0);

1388 
	`as£π
(
∑geöd
 + ((
ªt
+
œrge_∑d
)>>
LG_PAGE
) <=

1389 
chunk_≈ages
);

1390 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
) ==

1391 
	`¨ía_m≠bôs_dúty_gë
(
chunk
,

1392 
∑geöd
+((
ªt
+
œrge_∑d
)>>
LG_PAGE
)-1));

1398 
	`as£π
(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) != 0 ||

1399 
	`¨ía_±r_smÆl_bööd_gë
(
±r
,

1400 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
)Ë=
bööd
);

1401 
ªt
 = 
	`ödex2size
(
bööd
);

1404 
ªt
 = 
	`huge_ßŒoc
(
tsdn
, 
±r
);

1406  (
ªt
);

1407 
	}
}

1409 
JEMALLOC_ALWAYS_INLINE
 

1410 
	$¨ía_dÆloc
(
tsdn_t
 *
tsdn
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
)

1412 
¨ía_chunk_t
 *
chunk
;

1413 
size_t
 
∑geöd
, 
m≠bôs
;

1415 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
tˇche
 =
NULL
);

1416 
	`as£π
(
±r
 !
NULL
);

1418 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1419 i‡(
	`likñy
(
chunk
 !
±r
)) {

1420 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

1421 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

1422 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) != 0);

1423 i‡(
	`likñy
((
m≠bôs
 & 
CHUNK_MAP_LARGE
) == 0)) {

1425 i‡(
	`likñy
(
tˇche
 !
NULL
)) {

1426 
szöd_t
 
bööd
 = 
	`¨ía_±r_smÆl_bööd_gë
(
±r
,

1427 
m≠bôs
);

1428 
	`tˇche_dÆloc_smÆl
(
	`tsdn_tsd
(
tsdn
), 
tˇche
, 
±r
,

1429 
bööd
, 
¶ow_∑th
);

1431 
	`¨ía_dÆloc_smÆl
(
tsdn
,

1432 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
), chunk,

1433 
±r
, 
∑geöd
);

1436 
size_t
 
size
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
,

1437 
∑geöd
);

1439 
	`as£π
(
c⁄fig_ˇche_oblivious
 || ((
uöçå_t
)
±r
 &

1440 
PAGE_MASK
) == 0);

1442 i‡(
	`likñy
(
tˇche
 !
NULL
Ë&& 
size
 - 
œrge_∑d
 <=

1443 
tˇche_max˛ass
) {

1444 
	`tˇche_dÆloc_œrge
(
	`tsdn_tsd
(
tsdn
), 
tˇche
, 
±r
,

1445 
size
 - 
œrge_∑d
, 
¶ow_∑th
);

1447 
	`¨ía_dÆloc_œrge
(
tsdn
,

1448 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
), chunk,

1449 
±r
);

1453 
	`huge_dÆloc
(
tsdn
, 
±r
);

1454 
	}
}

1456 
JEMALLOC_ALWAYS_INLINE
 

1457 
	$¨ía_sdÆloc
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
size
, 
tˇche_t
 *
tˇche
,

1458 
boﬁ
 
¶ow_∑th
)

1460 
¨ía_chunk_t
 *
chunk
;

1462 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
tˇche
 =
NULL
);

1464 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

1465 i‡(
	`likñy
(
chunk
 !
±r
)) {

1466 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

1467 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
) >>

1468 
LG_PAGE
;

1469 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) !=

1471 i‡(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) != 0) {

1476 
size
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
,

1477 
∑geöd
Ë- 
œrge_∑d
;

1480 
	`as£π
(
	`s2u
(
size
Ë=s2u(
	`¨ía_ßŒoc
(
tsdn
, 
±r
, 
Ál£
)));

1482 i‡(
	`likñy
(
size
 <
SMALL_MAXCLASS
)) {

1484 i‡(
	`likñy
(
tˇche
 !
NULL
)) {

1485 
szöd_t
 
bööd
 = 
	`size2ödex
(
size
);

1486 
	`tˇche_dÆloc_smÆl
(
	`tsdn_tsd
(
tsdn
), 
tˇche
, 
±r
,

1487 
bööd
, 
¶ow_∑th
);

1489 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 -

1490 (
uöçå_t
)
chunk
Ë>> 
LG_PAGE
;

1491 
	`¨ía_dÆloc_smÆl
(
tsdn
,

1492 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
), chunk,

1493 
±r
, 
∑geöd
);

1496 
	`as£π
(
c⁄fig_ˇche_oblivious
 || ((
uöçå_t
)
±r
 &

1497 
PAGE_MASK
) == 0);

1499 i‡(
	`likñy
(
tˇche
 !
NULL
Ë&& 
size
 <
tˇche_max˛ass
) {

1500 
	`tˇche_dÆloc_œrge
(
	`tsdn_tsd
(
tsdn
), 
tˇche
, 
±r
,

1501 
size
, 
¶ow_∑th
);

1503 
	`¨ía_dÆloc_œrge
(
tsdn
,

1504 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
), chunk,

1505 
±r
);

1509 
	`huge_dÆloc
(
tsdn
, 
±r
);

1510 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/assert.h

5 #i‚de‡
as£π


6 
	#as£π
(
e
) do { \

7 i‡(
	`u∆ikñy
(
c⁄fig_debug
 && !(
e
))) { \

8 
	`mÆloc_¥ötf
( \

10 
__FILE__
, 
__LINE__
, #e); \

11 
	`ab‹t
(); \

13 } 0)

	)

16 #i‚de‡
nŸ_ªached


17 
	#nŸ_ªached
() do { \

18 i‡(
c⁄fig_debug
) { \

19 
	`mÆloc_¥ötf
( \

21 
__FILE__
, 
__LINE__
); \

22 
	`ab‹t
(); \

24 
	`uƒóchabÀ
(); \

25 } 0)

	)

28 #i‚de‡
nŸ_im∂emíãd


29 
	#nŸ_im∂emíãd
() do { \

30 i‡(
c⁄fig_debug
) { \

31 
	`mÆloc_¥ötf
("<jemalloc>: %s:%d: Not implemented\n", \

32 
__FILE__
, 
__LINE__
); \

33 
	`ab‹t
(); \

35 } 0)

	)

38 #i‚de‡
as£π_nŸ_im∂emíãd


39 
	#as£π_nŸ_im∂emíãd
(
e
) do { \

40 i‡(
	`u∆ikñy
(
c⁄fig_debug
 && !(
e
))) \

41 
	`nŸ_im∂emíãd
(); \

42 } 0)

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/atomic.h

2 #ifde‡
JEMALLOC_H_TYPES


6 #ifde‡
JEMALLOC_H_STRUCTS


10 #ifde‡
JEMALLOC_H_EXTERNS


12 
	#©omic_ªad_uöt64
(
p
Ë
	`©omic_add_uöt64
’, 0)

	)

13 
	#©omic_ªad_uöt32
(
p
Ë
	`©omic_add_uöt32
’, 0)

	)

14 
	#©omic_ªad_p
(
p
Ë
	`©omic_add_p
’, 
NULL
)

	)

15 
	#©omic_ªad_z
(
p
Ë
	`©omic_add_z
’, 0)

	)

16 
	#©omic_ªad_u
(
p
Ë
	`©omic_add_u
’, 0)

	)

20 #ifde‡
JEMALLOC_H_INLINES


43 #i‚de‡
JEMALLOC_ENABLE_INLINE


44 
uöt64_t
 
©omic_add_uöt64
(uöt64_à*
p
, uöt64_à
x
);

45 
uöt64_t
 
©omic_sub_uöt64
(uöt64_à*
p
, uöt64_à
x
);

46 
boﬁ
 
©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
);

47 
©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
);

48 
uöt32_t
 
©omic_add_uöt32
(uöt32_à*
p
, uöt32_à
x
);

49 
uöt32_t
 
©omic_sub_uöt32
(uöt32_à*
p
, uöt32_à
x
);

50 
boﬁ
 
©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
);

51 
©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
);

52 *
©omic_add_p
(**
p
, *
x
);

53 *
©omic_sub_p
(**
p
, *
x
);

54 
boﬁ
 
©omic_ˇs_p
(**
p
, *
c
, *
s
);

55 
©omic_wrôe_p
(**
p
, c⁄° *
x
);

56 
size_t
 
©omic_add_z
(size_à*
p
, size_à
x
);

57 
size_t
 
©omic_sub_z
(size_à*
p
, size_à
x
);

58 
boﬁ
 
©omic_ˇs_z
(
size_t
 *
p
, size_à
c
, size_à
s
);

59 
©omic_wrôe_z
(
size_t
 *
p
, size_à
x
);

60 
©omic_add_u
(*
p
, 
x
);

61 
©omic_sub_u
(*
p
, 
x
);

62 
boﬁ
 
©omic_ˇs_u
(*
p
, 
c
, 
s
);

63 
©omic_wrôe_u
(*
p
, 
x
);

66 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_ATOMIC_C_
))

69 #i‡(
LG_SIZEOF_PTR
 =3 || 
LG_SIZEOF_INT
 == 3)

70 #i‡(
deföed
(
__amd64__
Ë|| deföed(
__x86_64__
))

71 
JEMALLOC_INLINE
 
uöt64_t


72 
	$©omic_add_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

74 
uöt64_t
 
t
 = 
x
;

76 
asm
 volatile (

78 : "+r" (
t
), "=m" (*
p
)

79 : "m" (*
p
)

82  (
t
 + 
x
);

83 
	}
}

85 
JEMALLOC_INLINE
 
uöt64_t


86 
	$©omic_sub_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

88 
uöt64_t
 
t
;

90 
x
 = (
uöt64_t
)(-(
öt64_t
)x);

91 
t
 = 
x
;

92 
asm
 volatile (

94 : "+r" (
t
), "=m" (*
p
)

95 : "m" (*
p
)

98  (
t
 + 
x
);

99 
	}
}

101 
JEMALLOC_INLINE
 
boﬁ


102 
	$©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
)

104 
uöt8_t
 
suc˚ss
;

106 
asm
 volatile (

109 : "=m" (*
p
), "˜" (
suc˚ss
)

110 : "m" (*
p
), "a" (
c
), "r" (
s
)

114  (!(
boﬁ
)
suc˚ss
);

115 
	}
}

117 
JEMALLOC_INLINE
 

118 
	$©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

121 
asm
 volatile (

123 : "=m" (*
p
), "+r" (
x
)

124 : "m" (*
p
)

127 
	}
}

128 #ñi‡(
deföed
(
JEMALLOC_C11ATOMICS
))

129 
JEMALLOC_INLINE
 
uöt64_t


130 
	$©omic_add_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

132 vﬁ©ûê
©omic_uöt_Àa°64_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°64_à*)
p
;

133  (
	`©omic_„tch_add
(
a
, 
x
) + x);

134 
	}
}

136 
JEMALLOC_INLINE
 
uöt64_t


137 
	$©omic_sub_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

139 vﬁ©ûê
©omic_uöt_Àa°64_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°64_à*)
p
;

140  (
	`©omic_„tch_sub
(
a
, 
x
) - x);

141 
	}
}

143 
JEMALLOC_INLINE
 
boﬁ


144 
	$©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
)

146 vﬁ©ûê
©omic_uöt_Àa°64_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°64_à*)
p
;

147  (!
	`©omic_com∑ª_exch™ge_°r⁄g
(
a
, &
c
, 
s
));

148 
	}
}

150 
JEMALLOC_INLINE
 

151 
	$©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

153 vﬁ©ûê
©omic_uöt_Àa°64_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°64_à*)
p
;

154 
	`©omic_°‹e
(
a
, 
x
);

155 
	}
}

156 #ñi‡(
deföed
(
JEMALLOC_ATOMIC9
))

157 
JEMALLOC_INLINE
 
uöt64_t


158 
	$©omic_add_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

165 
	`as£π
((
uöt64_t
) == ());

167  (
	`©omic_„tchadd_l⁄g
(
p
, ()
x
) + x);

168 
	}
}

170 
JEMALLOC_INLINE
 
uöt64_t


171 
	$©omic_sub_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

174 
	`as£π
((
uöt64_t
) == ());

176  (
	`©omic_„tchadd_l⁄g
(
p
, ()(-()
x
)) - x);

177 
	}
}

179 
JEMALLOC_INLINE
 
boﬁ


180 
	$©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
)

183 
	`as£π
((
uöt64_t
) == ());

185  (!
	`©omic_cmp£t_l⁄g
(
p
, ()
c
, ()
s
));

186 
	}
}

188 
JEMALLOC_INLINE
 

189 
	$©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

192 
	`as£π
((
uöt64_t
) == ());

194 
	`©omic_°‹e_ªl_l⁄g
(
p
, 
x
);

195 
	}
}

196 #ñi‡(
deföed
(
JEMALLOC_OSATOMIC
))

197 
JEMALLOC_INLINE
 
uöt64_t


198 
	$©omic_add_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

201  (
	`OSAtomicAdd64
((
öt64_t
)
x
, (öt64_à*)
p
));

202 
	}
}

204 
JEMALLOC_INLINE
 
uöt64_t


205 
	$©omic_sub_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

208  (
	`OSAtomicAdd64
(-((
öt64_t
)
x
), (öt64_à*)
p
));

209 
	}
}

211 
JEMALLOC_INLINE
 
boﬁ


212 
	$©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
)

215  (!
	`OSAtomicCom∑ªAndSw≠64
(
c
, 
s
, (
öt64_t
 *)
p
));

216 
	}
}

218 
JEMALLOC_INLINE
 

219 
	$©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

221 
uöt64_t
 
o
;

225 
o
 = 
	`©omic_ªad_uöt64
(
p
);

226 } 
	`©omic_ˇs_uöt64
(
p
, 
o
, 
x
));

227 
	}
}

228 #ñi‡(
deföed
(
_MSC_VER
))

229 
JEMALLOC_INLINE
 
uöt64_t


230 
	$©omic_add_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

233  (
	`I¡îlockedExch™geAdd64
(
p
, 
x
) + x);

234 
	}
}

236 
JEMALLOC_INLINE
 
uöt64_t


237 
	$©omic_sub_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

240  (
	`I¡îlockedExch™geAdd64
(
p
, -((
öt64_t
)
x
)) - x);

241 
	}
}

243 
JEMALLOC_INLINE
 
boﬁ


244 
	$©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
)

246 
uöt64_t
 
o
;

248 
o
 = 
	`I¡îlockedCom∑ªExch™ge64
(
p
, 
s
, 
c
);

249  (
o
 !
c
);

250 
	}
}

252 
JEMALLOC_INLINE
 

253 
	$©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

256 
	`I¡îlockedExch™ge64
(
p
, 
x
);

257 
	}
}

258 #ñi‡(
deföed
(
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8
) || \

259 
	$deföed
(
JE_FORCE_SYNC_COMPARE_AND_SWAP_8
))

260 
JEMALLOC_INLINE
 
uöt64_t


261 
	$©omic_add_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

264  (
	`__sync_add_™d_„tch
(
p
, 
x
));

265 
	}
}

267 
JEMALLOC_INLINE
 
uöt64_t


268 
	$©omic_sub_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

271  (
	`__sync_sub_™d_„tch
(
p
, 
x
));

272 
	}
}

274 
JEMALLOC_INLINE
 
boﬁ


275 
	$©omic_ˇs_uöt64
(
uöt64_t
 *
p
, uöt64_à
c
, uöt64_à
s
)

278  (!
	`__sync_boﬁ_com∑ª_™d_sw≠
(
p
, 
c
, 
s
));

279 
	}
}

281 
JEMALLOC_INLINE
 

282 
	$©omic_wrôe_uöt64
(
uöt64_t
 *
p
, uöt64_à
x
)

285 
	`__sync_lock_ã°_™d_£t
(
p
, 
x
);

286 
	}
}

294 #i‡(
deföed
(
__i386__
Ë|| deföed(
__amd64__
Ë|| deföed(
__x86_64__
))

295 
JEMALLOC_INLINE
 
uöt32_t


296 
	$©omic_add_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

298 
uöt32_t
 
t
 = 
x
;

300 
asm
 volatile (

302 : "+r" (
t
), "=m" (*
p
)

303 : "m" (*
p
)

306  (
t
 + 
x
);

307 
	}
}

309 
JEMALLOC_INLINE
 
uöt32_t


310 
	$©omic_sub_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

312 
uöt32_t
 
t
;

314 
x
 = (
uöt32_t
)(-(
öt32_t
)x);

315 
t
 = 
x
;

316 
asm
 volatile (

318 : "+r" (
t
), "=m" (*
p
)

319 : "m" (*
p
)

322  (
t
 + 
x
);

323 
	}
}

325 
JEMALLOC_INLINE
 
boﬁ


326 
	$©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
)

328 
uöt8_t
 
suc˚ss
;

330 
asm
 volatile (

333 : "=m" (*
p
), "˜" (
suc˚ss
)

334 : "m" (*
p
), "a" (
c
), "r" (
s
)

338  (!(
boﬁ
)
suc˚ss
);

339 
	}
}

341 
JEMALLOC_INLINE
 

342 
	$©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

345 
asm
 volatile (

347 : "=m" (*
p
), "+r" (
x
)

348 : "m" (*
p
)

351 
	}
}

352 #ñi‡(
deföed
(
JEMALLOC_C11ATOMICS
))

353 
JEMALLOC_INLINE
 
uöt32_t


354 
	$©omic_add_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

356 vﬁ©ûê
©omic_uöt_Àa°32_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°32_à*)
p
;

357  (
	`©omic_„tch_add
(
a
, 
x
) + x);

358 
	}
}

360 
JEMALLOC_INLINE
 
uöt32_t


361 
	$©omic_sub_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

363 vﬁ©ûê
©omic_uöt_Àa°32_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°32_à*)
p
;

364  (
	`©omic_„tch_sub
(
a
, 
x
) - x);

365 
	}
}

367 
JEMALLOC_INLINE
 
boﬁ


368 
	$©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
)

370 vﬁ©ûê
©omic_uöt_Àa°32_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°32_à*)
p
;

371  (!
	`©omic_com∑ª_exch™ge_°r⁄g
(
a
, &
c
, 
s
));

372 
	}
}

374 
JEMALLOC_INLINE
 

375 
	$©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

377 vﬁ©ûê
©omic_uöt_Àa°32_t
 *
a
 = (vﬁ©ûê©omic_uöt_Àa°32_à*)
p
;

378 
	`©omic_°‹e
(
a
, 
x
);

379 
	}
}

380 #ñi‡(
deföed
(
JEMALLOC_ATOMIC9
))

381 
JEMALLOC_INLINE
 
uöt32_t


382 
	$©omic_add_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

385  (
	`©omic_„tchadd_32
(
p
, 
x
) + x);

386 
	}
}

388 
JEMALLOC_INLINE
 
uöt32_t


389 
	$©omic_sub_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

392  (
	`©omic_„tchadd_32
(
p
, (
uöt32_t
)(-(
öt32_t
)
x
)) - x);

393 
	}
}

395 
JEMALLOC_INLINE
 
boﬁ


396 
	$©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
)

399  (!
	`©omic_cmp£t_32
(
p
, 
c
, 
s
));

400 
	}
}

402 
JEMALLOC_INLINE
 

403 
	$©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

406 
	`©omic_°‹e_ªl_32
(
p
, 
x
);

407 
	}
}

408 #ñi‡(
deföed
(
JEMALLOC_OSATOMIC
))

409 
JEMALLOC_INLINE
 
uöt32_t


410 
	$©omic_add_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

413  (
	`OSAtomicAdd32
((
öt32_t
)
x
, (öt32_à*)
p
));

414 
	}
}

416 
JEMALLOC_INLINE
 
uöt32_t


417 
	$©omic_sub_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

420  (
	`OSAtomicAdd32
(-((
öt32_t
)
x
), (öt32_à*)
p
));

421 
	}
}

423 
JEMALLOC_INLINE
 
boﬁ


424 
	$©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
)

427  (!
	`OSAtomicCom∑ªAndSw≠32
(
c
, 
s
, (
öt32_t
 *)
p
));

428 
	}
}

430 
JEMALLOC_INLINE
 

431 
	$©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

433 
uöt32_t
 
o
;

437 
o
 = 
	`©omic_ªad_uöt32
(
p
);

438 } 
	`©omic_ˇs_uöt32
(
p
, 
o
, 
x
));

439 
	}
}

440 #ñi‡(
deföed
(
_MSC_VER
))

441 
JEMALLOC_INLINE
 
uöt32_t


442 
	$©omic_add_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

445  (
	`I¡îlockedExch™geAdd
(
p
, 
x
) + x);

446 
	}
}

448 
JEMALLOC_INLINE
 
uöt32_t


449 
	$©omic_sub_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

452  (
	`I¡îlockedExch™geAdd
(
p
, -((
öt32_t
)
x
)) - x);

453 
	}
}

455 
JEMALLOC_INLINE
 
boﬁ


456 
	$©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
)

458 
uöt32_t
 
o
;

460 
o
 = 
	`I¡îlockedCom∑ªExch™ge
(
p
, 
s
, 
c
);

461  (
o
 !
c
);

462 
	}
}

464 
JEMALLOC_INLINE
 

465 
	$©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

468 
	`I¡îlockedExch™ge
(
p
, 
x
);

469 
	}
}

470 #ñi‡(
deföed
(
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
) || \

471 
	$deföed
(
JE_FORCE_SYNC_COMPARE_AND_SWAP_4
))

472 
JEMALLOC_INLINE
 
uöt32_t


473 
	$©omic_add_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

476  (
	`__sync_add_™d_„tch
(
p
, 
x
));

477 
	}
}

479 
JEMALLOC_INLINE
 
uöt32_t


480 
	$©omic_sub_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

483  (
	`__sync_sub_™d_„tch
(
p
, 
x
));

484 
	}
}

486 
JEMALLOC_INLINE
 
boﬁ


487 
	$©omic_ˇs_uöt32
(
uöt32_t
 *
p
, uöt32_à
c
, uöt32_à
s
)

490  (!
	`__sync_boﬁ_com∑ª_™d_sw≠
(
p
, 
c
, 
s
));

491 
	}
}

493 
JEMALLOC_INLINE
 

494 
	$©omic_wrôe_uöt32
(
uöt32_t
 *
p
, uöt32_à
x
)

497 
	`__sync_lock_ã°_™d_£t
(
p
, 
x
);

498 
	}
}

505 
JEMALLOC_INLINE
 *

506 
	$©omic_add_p
(**
p
, *
x
)

509 #i‡(
LG_SIZEOF_PTR
 == 3)

510  ((*)
	`©omic_add_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
x
));

511 #ñi‡(
LG_SIZEOF_PTR
 == 2)

512  ((*)
	`©omic_add_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
x
));

514 
	}
}

516 
JEMALLOC_INLINE
 *

517 
	$©omic_sub_p
(**
p
, *
x
)

520 #i‡(
LG_SIZEOF_PTR
 == 3)

521  ((*)
	`©omic_add_uöt64
((
uöt64_t
 *)
p
,

522 (
uöt64_t
)-((
öt64_t
)
x
)));

523 #ñi‡(
LG_SIZEOF_PTR
 == 2)

524  ((*)
	`©omic_add_uöt32
((
uöt32_t
 *)
p
,

525 (
uöt32_t
)-((
öt32_t
)
x
)));

527 
	}
}

529 
JEMALLOC_INLINE
 
boﬁ


530 
	$©omic_ˇs_p
(**
p
, *
c
, *
s
)

533 #i‡(
LG_SIZEOF_PTR
 == 3)

534  (
	`©omic_ˇs_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
c
, (uöt64_t)
s
));

535 #ñi‡(
LG_SIZEOF_PTR
 == 2)

536  (
	`©omic_ˇs_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
c
, (uöt32_t)
s
));

538 
	}
}

540 
JEMALLOC_INLINE
 

541 
	$©omic_wrôe_p
(**
p
, c⁄° *
x
)

544 #i‡(
LG_SIZEOF_PTR
 == 3)

545 
	`©omic_wrôe_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
x
);

546 #ñi‡(
LG_SIZEOF_PTR
 == 2)

547 
	`©omic_wrôe_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
x
);

549 
	}
}

553 
JEMALLOC_INLINE
 
size_t


554 
	$©omic_add_z
(
size_t
 *
p
, size_à
x
)

557 #i‡(
LG_SIZEOF_PTR
 == 3)

558  ((
size_t
)
	`©omic_add_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
x
));

559 #ñi‡(
LG_SIZEOF_PTR
 == 2)

560  ((
size_t
)
	`©omic_add_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
x
));

562 
	}
}

564 
JEMALLOC_INLINE
 
size_t


565 
	$©omic_sub_z
(
size_t
 *
p
, size_à
x
)

568 #i‡(
LG_SIZEOF_PTR
 == 3)

569  ((
size_t
)
	`©omic_add_uöt64
((
uöt64_t
 *)
p
,

570 (
uöt64_t
)-((
öt64_t
)
x
)));

571 #ñi‡(
LG_SIZEOF_PTR
 == 2)

572  ((
size_t
)
	`©omic_add_uöt32
((
uöt32_t
 *)
p
,

573 (
uöt32_t
)-((
öt32_t
)
x
)));

575 
	}
}

577 
JEMALLOC_INLINE
 
boﬁ


578 
	$©omic_ˇs_z
(
size_t
 *
p
, size_à
c
, size_à
s
)

581 #i‡(
LG_SIZEOF_PTR
 == 3)

582  (
	`©omic_ˇs_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
c
, (uöt64_t)
s
));

583 #ñi‡(
LG_SIZEOF_PTR
 == 2)

584  (
	`©omic_ˇs_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
c
, (uöt32_t)
s
));

586 
	}
}

588 
JEMALLOC_INLINE
 

589 
	$©omic_wrôe_z
(
size_t
 *
p
, size_à
x
)

592 #i‡(
LG_SIZEOF_PTR
 == 3)

593 
	`©omic_wrôe_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
x
);

594 #ñi‡(
LG_SIZEOF_PTR
 == 2)

595 
	`©omic_wrôe_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
x
);

597 
	}
}

601 
JEMALLOC_INLINE
 

602 
	$©omic_add_u
(*
p
, 
x
)

605 #i‡(
LG_SIZEOF_INT
 == 3)

606  (()
	`©omic_add_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
x
));

607 #ñi‡(
LG_SIZEOF_INT
 == 2)

608  (()
	`©omic_add_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
x
));

610 
	}
}

612 
JEMALLOC_INLINE
 

613 
	$©omic_sub_u
(*
p
, 
x
)

616 #i‡(
LG_SIZEOF_INT
 == 3)

617  (()
	`©omic_add_uöt64
((
uöt64_t
 *)
p
,

618 (
uöt64_t
)-((
öt64_t
)
x
)));

619 #ñi‡(
LG_SIZEOF_INT
 == 2)

620  (()
	`©omic_add_uöt32
((
uöt32_t
 *)
p
,

621 (
uöt32_t
)-((
öt32_t
)
x
)));

623 
	}
}

625 
JEMALLOC_INLINE
 
boﬁ


626 
	$©omic_ˇs_u
(*
p
, 
c
, 
s
)

629 #i‡(
LG_SIZEOF_INT
 == 3)

630  (
	`©omic_ˇs_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
c
, (uöt64_t)
s
));

631 #ñi‡(
LG_SIZEOF_INT
 == 2)

632  (
	`©omic_ˇs_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
c
, (uöt32_t)
s
));

634 
	}
}

636 
JEMALLOC_INLINE
 

637 
	$©omic_wrôe_u
(*
p
, 
x
)

640 #i‡(
LG_SIZEOF_INT
 == 3)

641 
	`©omic_wrôe_uöt64
((
uöt64_t
 *)
p
, (uöt64_t)
x
);

642 #ñi‡(
LG_SIZEOF_INT
 == 2)

643 
	`©omic_wrôe_uöt32
((
uöt32_t
 *)
p
, (uöt32_t)
x
);

645 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/base.h

2 #ifde‡
JEMALLOC_H_TYPES


6 #ifde‡
JEMALLOC_H_STRUCTS


10 #ifde‡
JEMALLOC_H_EXTERNS


12 *
ba£_Æloc
(
tsdn_t
 *
tsdn
, 
size_t
 
size
);

13 
ba£_°©s_gë
(
tsdn_t
 *
tsdn
, 
size_t
 *
Æloˇãd
, size_à*
ªsidít
,

14 
size_t
 *
m≠≥d
);

15 
boﬁ
 
ba£_boŸ
();

16 
ba£_¥ef‹k
(
tsdn_t
 *
tsdn
);

17 
ba£_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
);

18 
ba£_po°f‹k_chûd
(
tsdn_t
 *
tsdn
);

22 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/bitmap.h

2 #ifde‡
JEMALLOC_H_TYPES


5 
	#LG_BITMAP_MAXBITS
 
LG_RUN_MAXREGS


	)

6 
	#BITMAP_MAXBITS
 (
	`ZU
(1Ë<< 
LG_BITMAP_MAXBITS
)

	)

8 
bôm≠_Àvñ_s
 
	tbôm≠_Àvñ_t
;

9 
bôm≠_öfo_s
 
	tbôm≠_öfo_t
;

10 
	tbôm≠_t
;

11 
	#LG_SIZEOF_BITMAP
 
LG_SIZEOF_LONG


	)

14 
	#LG_BITMAP_GROUP_NBITS
 (
LG_SIZEOF_BITMAP
 + 3)

	)

15 
	#BITMAP_GROUP_NBITS
 (
	`ZU
(1Ë<< 
LG_BITMAP_GROUP_NBITS
)

	)

16 
	#BITMAP_GROUP_NBITS_MASK
 (
BITMAP_GROUP_NBITS
-1)

	)

23 #i‡
LG_BITMAP_MAXBITS
 - 
LG_BITMAP_GROUP_NBITS
 > 3

24 
	#USE_TREE


	)

28 
	#BITMAP_BITS2GROUPS
(
nbôs
) \

29 ((
nbôs
 + 
BITMAP_GROUP_NBITS_MASK
Ë>> 
LG_BITMAP_GROUP_NBITS
)

	)

34 
	#BITMAP_GROUPS_L0
(
nbôs
) \

35 
	`BITMAP_BITS2GROUPS
(
nbôs
)

	)

36 
	#BITMAP_GROUPS_L1
(
nbôs
) \

37 
	`BITMAP_BITS2GROUPS
(BITMAP_BITS2GROUPS(
nbôs
))

	)

38 
	#BITMAP_GROUPS_L2
(
nbôs
) \

39 
	`BITMAP_BITS2GROUPS
(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS((
nbôs
))))

	)

40 
	#BITMAP_GROUPS_L3
(
nbôs
) \

41 
	`BITMAP_BITS2GROUPS
(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS( \

42 
	`BITMAP_BITS2GROUPS
((
nbôs
)))))

	)

48 
	#BITMAP_GROUPS_1_LEVEL
(
nbôs
) \

49 
	`BITMAP_GROUPS_L0
(
nbôs
)

	)

50 
	#BITMAP_GROUPS_2_LEVEL
(
nbôs
) \

51 (
	`BITMAP_GROUPS_1_LEVEL
(
nbôs
Ë+ 
	`BITMAP_GROUPS_L1
“bôs))

	)

52 
	#BITMAP_GROUPS_3_LEVEL
(
nbôs
) \

53 (
	`BITMAP_GROUPS_2_LEVEL
(
nbôs
Ë+ 
	`BITMAP_GROUPS_L2
“bôs))

	)

54 
	#BITMAP_GROUPS_4_LEVEL
(
nbôs
) \

55 (
	`BITMAP_GROUPS_3_LEVEL
(
nbôs
Ë+ 
	`BITMAP_GROUPS_L3
“bôs))

	)

60 #ifde‡
USE_TREE


62 #i‡
LG_BITMAP_MAXBITS
 <
LG_BITMAP_GROUP_NBITS


63 
	#BITMAP_GROUPS_MAX
 
	`BITMAP_GROUPS_1_LEVEL
(
BITMAP_MAXBITS
)

	)

64 #ñi‡
LG_BITMAP_MAXBITS
 <
LG_BITMAP_GROUP_NBITS
 * 2

65 
	#BITMAP_GROUPS_MAX
 
	`BITMAP_GROUPS_2_LEVEL
(
BITMAP_MAXBITS
)

	)

66 #ñi‡
LG_BITMAP_MAXBITS
 <
LG_BITMAP_GROUP_NBITS
 * 3

67 
	#BITMAP_GROUPS_MAX
 
	`BITMAP_GROUPS_3_LEVEL
(
BITMAP_MAXBITS
)

	)

68 #ñi‡
LG_BITMAP_MAXBITS
 <
LG_BITMAP_GROUP_NBITS
 * 4

69 
	#BITMAP_GROUPS_MAX
 
	`BITMAP_GROUPS_4_LEVEL
(
BITMAP_MAXBITS
)

	)

75 
	#BITMAP_MAX_LEVELS
 \

76 (
LG_BITMAP_MAXBITS
 / 
LG_SIZEOF_BITMAP
) \

77 + !!(
LG_BITMAP_MAXBITS
 % 
LG_SIZEOF_BITMAP
)

	)

81 
	#BITMAP_GROUPS_MAX
 
	`BITMAP_BITS2GROUPS
(
BITMAP_MAXBITS
)

	)

87 #ifde‡
JEMALLOC_H_STRUCTS


89 
	sbôm≠_Àvñ_s
 {

91 
size_t
 
	mgroup_off£t
;

94 
	sbôm≠_öfo_s
 {

96 
size_t
 
	mnbôs
;

98 #ifde‡
USE_TREE


100 
	m∆evñs
;

106 
bôm≠_Àvñ_t
 
	mÀvñs
[
BITMAP_MAX_LEVELS
+1];

109 
size_t
 
	mngroups
;

115 #ifde‡
JEMALLOC_H_EXTERNS


117 
bôm≠_öfo_öô
(
bôm≠_öfo_t
 *
böfo
, 
size_t
 
nbôs
);

118 
bôm≠_öô
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
);

119 
size_t
 
bôm≠_size
(c⁄° 
bôm≠_öfo_t
 *
böfo
);

123 #ifde‡
JEMALLOC_H_INLINES


125 #i‚de‡
JEMALLOC_ENABLE_INLINE


126 
boﬁ
 
bôm≠_fuŒ
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
);

127 
boﬁ
 
bôm≠_gë
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
, 
size_t
 
bô
);

128 
bôm≠_£t
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
, 
size_t
 
bô
);

129 
size_t
 
bôm≠_sfu
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
);

130 
bôm≠_un£t
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
, 
size_t
 
bô
);

133 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_BITMAP_C_
))

134 
JEMALLOC_INLINE
 
boﬁ


135 
	$bôm≠_fuŒ
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
)

137 #ifde‡
USE_TREE


138 
size_t
 
rgoff
 = 
böfo
->
Àvñs
[böfo->
∆evñs
].
group_off£t
 - 1;

139 
bôm≠_t
 
rg
 = 
bôm≠
[
rgoff
];

141  (
rg
 == 0);

143 
size_t
 
i
;

145 
i
 = 0; i < 
böfo
->
ngroups
; i++) {

146 i‡(
bôm≠
[
i
] != 0)

147  (
Ál£
);

149  (
åue
);

151 
	}
}

153 
JEMALLOC_INLINE
 
boﬁ


154 
	$bôm≠_gë
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
, 
size_t
 
bô
)

156 
size_t
 
goff
;

157 
bôm≠_t
 
g
;

159 
	`as£π
(
bô
 < 
böfo
->
nbôs
);

160 
goff
 = 
bô
 >> 
LG_BITMAP_GROUP_NBITS
;

161 
g
 = 
bôm≠
[
goff
];

162  (!(
g
 & (
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
))));

163 
	}
}

165 
JEMALLOC_INLINE
 

166 
	$bôm≠_£t
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
, 
size_t
 
bô
)

168 
size_t
 
goff
;

169 
bôm≠_t
 *
gp
;

170 
bôm≠_t
 
g
;

172 
	`as£π
(
bô
 < 
böfo
->
nbôs
);

173 
	`as£π
(!
	`bôm≠_gë
(
bôm≠
, 
böfo
, 
bô
));

174 
goff
 = 
bô
 >> 
LG_BITMAP_GROUP_NBITS
;

175 
gp
 = &
bôm≠
[
goff
];

176 
g
 = *
gp
;

177 
	`as£π
(
g
 & (
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
)));

178 
g
 ^
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
);

179 *
gp
 = 
g
;

180 
	`as£π
(
	`bôm≠_gë
(
bôm≠
, 
böfo
, 
bô
));

181 #ifde‡
USE_TREE


183 i‡(
g
 == 0) {

184 
i
;

185 
i
 = 1; i < 
böfo
->
∆evñs
; i++) {

186 
bô
 = 
goff
;

187 
goff
 = 
bô
 >> 
LG_BITMAP_GROUP_NBITS
;

188 
gp
 = &
bôm≠
[
böfo
->
Àvñs
[
i
].
group_off£t
 + 
goff
];

189 
g
 = *
gp
;

190 
	`as£π
(
g
 & (
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
)));

191 
g
 ^
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
);

192 *
gp
 = 
g
;

193 i‡(
g
 != 0)

198 
	}
}

201 
JEMALLOC_INLINE
 
size_t


202 
	$bôm≠_sfu
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
)

204 
size_t
 
bô
;

205 
bôm≠_t
 
g
;

206 
i
;

208 
	`as£π
(!
	`bôm≠_fuŒ
(
bôm≠
, 
böfo
));

210 #ifde‡
USE_TREE


211 
i
 = 
böfo
->
∆evñs
 - 1;

212 
g
 = 
bôm≠
[
böfo
->
Àvñs
[
i
].
group_off£t
];

213 
bô
 = 
	`ffs_lu
(
g
) - 1;

214 
i
 > 0) {

215 
i
--;

216 
g
 = 
bôm≠
[
böfo
->
Àvñs
[
i
].
group_off£t
 + 
bô
];

217 
bô
 = (bô << 
LG_BITMAP_GROUP_NBITS
Ë+ (
	`ffs_lu
(
g
) - 1);

220 
i
 = 0;

221 
g
 = 
bôm≠
[0];

222 (
bô
 = 
	`ffs_lu
(
g
)) == 0) {

223 
i
++;

224 
g
 = 
bôm≠
[
i
];

226 
bô
 = (
i
 << 
LG_BITMAP_GROUP_NBITS
) + (bit - 1);

228 
	`bôm≠_£t
(
bôm≠
, 
böfo
, 
bô
);

229  (
bô
);

230 
	}
}

232 
JEMALLOC_INLINE
 

233 
	$bôm≠_un£t
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
, 
size_t
 
bô
)

235 
size_t
 
goff
;

236 
bôm≠_t
 *
gp
;

237 
bôm≠_t
 
g
;

238 
UNUSED
 
boﬁ
 
¥›ag©e
;

240 
	`as£π
(
bô
 < 
böfo
->
nbôs
);

241 
	`as£π
(
	`bôm≠_gë
(
bôm≠
, 
böfo
, 
bô
));

242 
goff
 = 
bô
 >> 
LG_BITMAP_GROUP_NBITS
;

243 
gp
 = &
bôm≠
[
goff
];

244 
g
 = *
gp
;

245 
¥›ag©e
 = (
g
 == 0);

246 
	`as£π
((
g
 & (
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
))) == 0);

247 
g
 ^
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
);

248 *
gp
 = 
g
;

249 
	`as£π
(!
	`bôm≠_gë
(
bôm≠
, 
böfo
, 
bô
));

250 #ifde‡
USE_TREE


252 i‡(
¥›ag©e
) {

253 
i
;

254 
i
 = 1; i < 
böfo
->
∆evñs
; i++) {

255 
bô
 = 
goff
;

256 
goff
 = 
bô
 >> 
LG_BITMAP_GROUP_NBITS
;

257 
gp
 = &
bôm≠
[
böfo
->
Àvñs
[
i
].
group_off£t
 + 
goff
];

258 
g
 = *
gp
;

259 
¥›ag©e
 = (
g
 == 0);

260 
	`as£π
((
g
 & (
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
)))

262 
g
 ^
	`ZU
(1Ë<< (
bô
 & 
BITMAP_GROUP_NBITS_MASK
);

263 *
gp
 = 
g
;

264 i‡(!
¥›ag©e
)

269 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/chunk.h

2 #ifde‡
JEMALLOC_H_TYPES


8 
	#LG_CHUNK_DEFAULT
 21

	)

11 
	#CHUNK_ADDR2BASE
(
a
) \

12 ((*)((
uöçå_t
)(
a
Ë& ~
chunksize_mask
))

	)

15 
	#CHUNK_ADDR2OFFSET
(
a
) \

16 ((
size_t
)((
uöçå_t
)(
a
Ë& 
chunksize_mask
))

	)

19 
	#CHUNK_CEILING
(
s
) \

20 (((
s
Ë+ 
chunksize_mask
Ë& ~chunksize_mask)

	)

22 
	#CHUNK_HOOKS_INITIALIZER
 { \

23 
NULL
, \

24 
NULL
, \

25 
NULL
, \

26 
NULL
, \

27 
NULL
, \

28 
NULL
, \

29 
NULL
 \

30 }

	)

34 #ifde‡
JEMALLOC_H_STRUCTS


38 #ifde‡
JEMALLOC_H_EXTERNS


40 
size_t
 
›t_lg_chunk
;

41 c⁄° *
›t_dss
;

43 
πªe_t
 
chunks_πªe
;

45 
size_t
 
chunksize
;

46 
size_t
 
chunksize_mask
;

47 
size_t
 
chunk_≈ages
;

49 c⁄° 
chunk_hooks_t
 
chunk_hooks_deÁu…
;

51 
chunk_hooks_t
 
chunk_hooks_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

52 
chunk_hooks_t
 
chunk_hooks_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

53 c⁄° 
chunk_hooks_t
 *
chunk_hooks
);

55 
boﬁ
 
chunk_ªgi°î
(
tsdn_t
 *
tsdn
, c⁄° *
chunk
,

56 c⁄° 
exã¡_node_t
 *
node
);

57 
chunk_dîegi°î
(c⁄° *
chunk
, c⁄° 
exã¡_node_t
 *
node
);

58 *
chunk_Æloc_ba£
(
size_t
 
size
);

59 *
chunk_Æloc_ˇche
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

60 
chunk_hooks_t
 *
chunk_hooks
, *
√w_addr
, 
size_t
 
size
, size_à
Æignmít
,

61 
boﬁ
 *
zîo
, boﬁ 
dÆloc_node
);

62 *
chunk_Æloc_wøµî
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

63 
chunk_hooks_t
 *
chunk_hooks
, *
√w_addr
, 
size_t
 
size
, size_à
Æignmít
,

64 
boﬁ
 *
zîo
, boﬁ *
commô
);

65 
chunk_dÆloc_ˇche
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

66 
chunk_hooks_t
 *
chunk_hooks
, *
chunk
, 
size_t
 
size
, 
boﬁ
 
commôãd
);

67 
chunk_dÆloc_wøµî
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

68 
chunk_hooks_t
 *
chunk_hooks
, *
chunk
, 
size_t
 
size
, 
boﬁ
 
zî€d
,

69 
boﬁ
 
commôãd
);

70 
boﬁ
 
chunk_purge_wøµî
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

71 
chunk_hooks_t
 *
chunk_hooks
, *
chunk
, 
size_t
 
size
, size_à
off£t
,

72 
size_t
 
Àngth
);

73 
boﬁ
 
chunk_boŸ
();

74 
chunk_¥ef‹k
(
tsdn_t
 *
tsdn
);

75 
chunk_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
);

76 
chunk_po°f‹k_chûd
(
tsdn_t
 *
tsdn
);

80 #ifde‡
JEMALLOC_H_INLINES


82 #i‚de‡
JEMALLOC_ENABLE_INLINE


83 
exã¡_node_t
 *
chunk_lookup
(c⁄° *
chunk
, 
boﬁ
 
dïídít
);

86 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_CHUNK_C_
))

87 
JEMALLOC_INLINE
 
exã¡_node_t
 *

88 
	$chunk_lookup
(c⁄° *
±r
, 
boﬁ
 
dïídít
)

91  (
	`πªe_gë
(&
chunks_πªe
, (
uöçå_t
)
±r
, 
dïídít
));

92 
	}
}

98 
	~"jemÆloc/öã∫Æ/chunk_dss.h
"

99 
	~"jemÆloc/öã∫Æ/chunk_mm≠.h
"

	@dep/jemalloc-4.2.0/include/jemalloc/internal/chunk_dss.h

2 #ifde‡
JEMALLOC_H_TYPES


5 
	mdss_¥ec_dißbÀd
 = 0,

6 
	mdss_¥ec_¥im¨y
 = 1,

7 
	mdss_¥ec_£c⁄d¨y
 = 2,

9 
	mdss_¥ec_limô
 = 3

10 } 
	tdss_¥ec_t
;

11 
	#DSS_PREC_DEFAULT
 
dss_¥ec_£c⁄d¨y


	)

12 
	#DSS_DEFAULT
 "£c⁄d¨y"

	)

16 #ifde‡
JEMALLOC_H_STRUCTS


18 c⁄° *
dss_¥ec_«mes
[];

22 #ifde‡
JEMALLOC_H_EXTERNS


24 
dss_¥ec_t
 
chunk_dss_¥ec_gë
(
tsdn_t
 *
tsdn
);

25 
boﬁ
 
chunk_dss_¥ec_£t
(
tsdn_t
 *
tsdn
, 
dss_¥ec_t
 
dss_¥ec
);

26 *
chunk_Æloc_dss
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
√w_addr
,

27 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
);

28 
boﬁ
 
chunk_ö_dss
(
tsdn_t
 *
tsdn
, *
chunk
);

29 
boﬁ
 
chunk_dss_boŸ
();

30 
chunk_dss_¥ef‹k
(
tsdn_t
 *
tsdn
);

31 
chunk_dss_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
);

32 
chunk_dss_po°f‹k_chûd
(
tsdn_t
 *
tsdn
);

36 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/chunk_mmap.h

2 #ifde‡
JEMALLOC_H_TYPES


6 #ifde‡
JEMALLOC_H_STRUCTS


10 #ifde‡
JEMALLOC_H_EXTERNS


12 *
chunk_Æloc_mm≠
(*
√w_addr
, 
size_t
 
size
, size_à
Æignmít
,

13 
boﬁ
 *
zîo
, boﬁ *
commô
);

14 
boﬁ
 
chunk_dÆloc_mm≠
(*
chunk
, 
size_t
 
size
);

18 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/ckh.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
ckh_s
 
	tckh_t
;

5 
ckhc_s
 
	tckhc_t
;

8 
	tckh_hash_t
 (c⁄° *, 
	tsize_t
[2]);

9 
boﬁ
 
	tckh_keycomp_t
 (const *, const *);

20 
	#LG_CKH_BUCKET_CELLS
 (
LG_CACHELINE
 - 
LG_SIZEOF_PTR
 - 1)

	)

24 #ifde‡
JEMALLOC_H_STRUCTS


27 
	sckhc_s
 {

28 c⁄° *
	mkey
;

29 c⁄° *
	md©a
;

32 
	sckh_s
 {

33 #ifde‡
CKH_COUNT


35 
uöt64_t
 
	mngrows
;

36 
uöt64_t
 
	mnshröks
;

37 
uöt64_t
 
	mnshrökÁûs
;

38 
uöt64_t
 
	mnö£πs
;

39 
uöt64_t
 
	mƒñocs
;

43 
uöt64_t
 
	m¥ng_°©e
;

46 
size_t
 
	mcou¡
;

52 
	mlg_möbuckës
;

53 
	mlg_curbuckës
;

56 
ckh_hash_t
 *
	mhash
;

57 
ckh_keycomp_t
 *
	mkeycomp
;

60 
ckhc_t
 *
	mèb
;

65 #ifde‡
JEMALLOC_H_EXTERNS


67 
boﬁ
 
ckh_√w
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
, 
size_t
 
möôems
, 
ckh_hash_t
 *
hash
,

68 
ckh_keycomp_t
 *
keycomp
);

69 
ckh_dñëe
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
);

70 
size_t
 
ckh_cou¡
(
ckh_t
 *
ckh
);

71 
boﬁ
 
ckh_ôî
(
ckh_t
 *
ckh
, 
size_t
 *
èböd
, **
key
, **
d©a
);

72 
boﬁ
 
ckh_ö£π
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
, c⁄° *
key
, c⁄° *
d©a
);

73 
boﬁ
 
ckh_ªmove
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
, c⁄° *
£¨chkey
, **
key
,

74 **
d©a
);

75 
boﬁ
 
ckh_£¨ch
(
ckh_t
 *
ckh
, c⁄° *
£¨chkey
, **
key
, **
d©a
);

76 
ckh_°rög_hash
(c⁄° *
key
, 
size_t
 
r_hash
[2]);

77 
boﬁ
 
ckh_°rög_keycomp
(c⁄° *
k1
, c⁄° *
k2
);

78 
ckh_poöãr_hash
(c⁄° *
key
, 
size_t
 
r_hash
[2]);

79 
boﬁ
 
ckh_poöãr_keycomp
(c⁄° *
k1
, c⁄° *
k2
);

83 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/ctl.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
˘l_node_s
 
	t˘l_node_t
;

5 
˘l_«med_node_s
 
	t˘l_«med_node_t
;

6 
˘l_ödexed_node_s
 
	t˘l_ödexed_node_t
;

7 
˘l_¨ía_°©s_s
 
	t˘l_¨ía_°©s_t
;

8 
˘l_°©s_s
 
	t˘l_°©s_t
;

12 #ifde‡
JEMALLOC_H_STRUCTS


14 
	s˘l_node_s
 {

15 
boﬁ
 
	m«med
;

18 
	s˘l_«med_node_s
 {

19 
˘l_node_s
 
	mnode
;

20 c⁄° *
	m«me
;

22 
	mnchûdªn
;

23 c⁄° 
˘l_node_t
 *
	mchûdªn
;

24 (*
	m˘l
)(
	mtsd_t
 *, c⁄° 
	msize_t
 *, size_t, *,

25 
	msize_t
 *, *, size_t);

28 
	s˘l_ödexed_node_s
 {

29 
˘l_node_s
 
	mnode
;

30 c⁄° 
	m˘l_«med_node_t
 *(*
	mödex
)(
	mtsdn_t
 *, c⁄° 
	msize_t
 *, size_t,

31 
	msize_t
);

34 
	s˘l_¨ía_°©s_s
 {

35 
boﬁ
 
	möôülized
;

36 
	m¡hªads
;

37 c⁄° *
	mdss
;

38 
ssize_t
 
	mlg_dúty_mu…
;

39 
ssize_t
 
	mdeˇy_time
;

40 
size_t
 
	m∑˘ive
;

41 
size_t
 
	mpdúty
;

45 
¨ía_°©s_t
 
	ma°©s
;

48 
size_t
 
	mÆloˇãd_smÆl
;

49 
uöt64_t
 
	mnmÆloc_smÆl
;

50 
uöt64_t
 
	mndÆloc_smÆl
;

51 
uöt64_t
 
	mƒeque°s_smÆl
;

53 
mÆloc_bö_°©s_t
 
	mb°©s
[
NBINS
];

54 
mÆloc_œrge_°©s_t
 *
	ml°©s
;

55 
mÆloc_huge_°©s_t
 *
	mh°©s
;

58 
	s˘l_°©s_s
 {

59 
size_t
 
	mÆloˇãd
;

60 
size_t
 
	ma˘ive
;

61 
size_t
 
	mmëad©a
;

62 
size_t
 
	mªsidít
;

63 
size_t
 
	mm≠≥d
;

64 
size_t
 
	mªèöed
;

65 
	m«ª«s
;

66 
˘l_¨ía_°©s_t
 *
	m¨ías
;

71 #ifde‡
JEMALLOC_H_EXTERNS


73 
˘l_by«me
(
tsd_t
 *
tsd
, c⁄° *
«me
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
,

74 *
√wp
, 
size_t
 
√wÀn
);

75 
˘l_«mëomib
(
tsdn_t
 *
tsdn
, c⁄° *
«me
, 
size_t
 *
mibp
,

76 
size_t
 *
mibÀ≈
);

78 
˘l_bymib
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

79 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

80 
boﬁ
 
˘l_boŸ
();

81 
˘l_¥ef‹k
(
tsdn_t
 *
tsdn
);

82 
˘l_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
);

83 
˘l_po°f‹k_chûd
(
tsdn_t
 *
tsdn
);

85 
	#xmÆl˘l
(
«me
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
) do { \

86 i‡(
	`je_mÆl˘l
(
«me
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
) \

88 
	`mÆloc_¥ötf
( \

90 
«me
); \

91 
	`ab‹t
(); \

93 } 0)

	)

95 
	#xmÆl˘ amëomib
(
«me
, 
mibp
, 
mibÀ≈
) do { \

96 i‡(
	`je_mÆl˘ amëomib
(
«me
, 
mibp
, 
mibÀ≈
) != 0) { \

97 
	`mÆloc_¥ötf
("<jemalloc>: Failure in " \

98 "xmÆl˘ amëomib(\"%s\", ...)\n", 
«me
); \

99 
	`ab‹t
(); \

101 } 0)

	)

103 
	#xmÆl˘lbymib
(
mib
, 
mibÀn
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
) do { \

104 i‡(
	`je_mÆl˘lbymib
(
mib
, 
mibÀn
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, \

105 
√wÀn
) != 0) { \

106 
	`mÆloc_wrôe
( \

108 
	`ab‹t
(); \

110 } 0)

	)

114 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/extent.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
exã¡_node_s
 
	texã¡_node_t
;

8 #ifde‡
JEMALLOC_H_STRUCTS


11 
	sexã¡_node_s
 {

13 
¨ía_t
 *
	mí_¨ía
;

16 *
	mí_addr
;

19 
size_t
 
	mí_size
;

25 
boﬁ
 
	mí_zî€d
;

32 
boﬁ
 
	mí_commôãd
;

38 
boﬁ
 
	mí_achunk
;

41 
¥of_t˘x_t
 *
	mí_¥of_t˘x
;

44 
¨ía_runs_dúty_lök_t
 
	mrd
;

45 
qr
(
exã¡_node_t
Ë
	mcc_lök
;

49 
rb_node
(
exã¡_node_t
Ë
	mszad_lök
;

52 
ql_ñm
(
exã¡_node_t
Ë
	mql_lök
;

56 
rb_node
(
exã¡_node_t
Ë
	mad_lök
;

58 
	$rb_åì
(
	texã¡_node_t
Ë
	texã¡_åì_t
;

62 #ifde‡
JEMALLOC_H_EXTERNS


64 
	$rb_¥Ÿo
(, 
exã¡_åì_szad_
, 
exã¡_åì_t
, 
exã¡_node_t
)

66 
	$rb_¥Ÿo
(, 
exã¡_åì_ad_
, 
exã¡_åì_t
, 
exã¡_node_t
)

70 #ifde‡
JEMALLOC_H_INLINES


72 #i‚de‡
JEMALLOC_ENABLE_INLINE


73 
¨ía_t
 *
	`exã¡_node_¨ía_gë
(c⁄° 
exã¡_node_t
 *
node
);

74 *
	`exã¡_node_addr_gë
(c⁄° 
exã¡_node_t
 *
node
);

75 
size_t
 
	`exã¡_node_size_gë
(c⁄° 
exã¡_node_t
 *
node
);

76 
boﬁ
 
	`exã¡_node_zî€d_gë
(c⁄° 
exã¡_node_t
 *
node
);

77 
boﬁ
 
	`exã¡_node_commôãd_gë
(c⁄° 
exã¡_node_t
 *
node
);

78 
boﬁ
 
	`exã¡_node_achunk_gë
(c⁄° 
exã¡_node_t
 *
node
);

79 
¥of_t˘x_t
 *
	`exã¡_node_¥of_t˘x_gë
(c⁄° 
exã¡_node_t
 *
node
);

80 
	`exã¡_node_¨ía_£t
(
exã¡_node_t
 *
node
, 
¨ía_t
 *
¨ía
);

81 
	`exã¡_node_addr_£t
(
exã¡_node_t
 *
node
, *
addr
);

82 
	`exã¡_node_size_£t
(
exã¡_node_t
 *
node
, 
size_t
 
size
);

83 
	`exã¡_node_zî€d_£t
(
exã¡_node_t
 *
node
, 
boﬁ
 
zî€d
);

84 
	`exã¡_node_commôãd_£t
(
exã¡_node_t
 *
node
, 
boﬁ
 
commôãd
);

85 
	`exã¡_node_achunk_£t
(
exã¡_node_t
 *
node
, 
boﬁ
 
achunk
);

86 
	`exã¡_node_¥of_t˘x_£t
(
exã¡_node_t
 *
node
, 
¥of_t˘x_t
 *
t˘x
);

87 
	`exã¡_node_öô
(
exã¡_node_t
 *
node
, 
¨ía_t
 *
¨ía
, *
addr
,

88 
size_t
 
size
, 
boﬁ
 
zî€d
, boﬁ 
commôãd
);

89 
	`exã¡_node_dúty_lökage_öô
(
exã¡_node_t
 *
node
);

90 
	`exã¡_node_dúty_ö£π
(
exã¡_node_t
 *
node
,

91 
¨ía_runs_dúty_lök_t
 *
runs_dúty
, 
exã¡_node_t
 *
chunks_dúty
);

92 
	`exã¡_node_dúty_ªmove
(
exã¡_node_t
 *
node
);

95 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_EXTENT_C_
))

96 
JEMALLOC_INLINE
 
¨ía_t
 *

97 
	$exã¡_node_¨ía_gë
(c⁄° 
exã¡_node_t
 *
node
)

100  (
node
->
í_¨ía
);

101 
	}
}

103 
JEMALLOC_INLINE
 *

104 
	$exã¡_node_addr_gë
(c⁄° 
exã¡_node_t
 *
node
)

107  (
node
->
í_addr
);

108 
	}
}

110 
JEMALLOC_INLINE
 
size_t


111 
	$exã¡_node_size_gë
(c⁄° 
exã¡_node_t
 *
node
)

114  (
node
->
í_size
);

115 
	}
}

117 
JEMALLOC_INLINE
 
boﬁ


118 
	$exã¡_node_zî€d_gë
(c⁄° 
exã¡_node_t
 *
node
)

121  (
node
->
í_zî€d
);

122 
	}
}

124 
JEMALLOC_INLINE
 
boﬁ


125 
	$exã¡_node_commôãd_gë
(c⁄° 
exã¡_node_t
 *
node
)

128 
	`as£π
(!
node
->
í_achunk
);

129  (
node
->
í_commôãd
);

130 
	}
}

132 
JEMALLOC_INLINE
 
boﬁ


133 
	$exã¡_node_achunk_gë
(c⁄° 
exã¡_node_t
 *
node
)

136  (
node
->
í_achunk
);

137 
	}
}

139 
JEMALLOC_INLINE
 
¥of_t˘x_t
 *

140 
	$exã¡_node_¥of_t˘x_gë
(c⁄° 
exã¡_node_t
 *
node
)

143  (
node
->
í_¥of_t˘x
);

144 
	}
}

146 
JEMALLOC_INLINE
 

147 
	$exã¡_node_¨ía_£t
(
exã¡_node_t
 *
node
, 
¨ía_t
 *
¨ía
)

150 
node
->
í_¨ía
 = 
¨ía
;

151 
	}
}

153 
JEMALLOC_INLINE
 

154 
	$exã¡_node_addr_£t
(
exã¡_node_t
 *
node
, *
addr
)

157 
node
->
í_addr
 = 
addr
;

158 
	}
}

160 
JEMALLOC_INLINE
 

161 
	$exã¡_node_size_£t
(
exã¡_node_t
 *
node
, 
size_t
 
size
)

164 
node
->
í_size
 = 
size
;

165 
	}
}

167 
JEMALLOC_INLINE
 

168 
	$exã¡_node_zî€d_£t
(
exã¡_node_t
 *
node
, 
boﬁ
 
zî€d
)

171 
node
->
í_zî€d
 = 
zî€d
;

172 
	}
}

174 
JEMALLOC_INLINE
 

175 
	$exã¡_node_commôãd_£t
(
exã¡_node_t
 *
node
, 
boﬁ
 
commôãd
)

178 
node
->
í_commôãd
 = 
commôãd
;

179 
	}
}

181 
JEMALLOC_INLINE
 

182 
	$exã¡_node_achunk_£t
(
exã¡_node_t
 *
node
, 
boﬁ
 
achunk
)

185 
node
->
í_achunk
 = 
achunk
;

186 
	}
}

188 
JEMALLOC_INLINE
 

189 
	$exã¡_node_¥of_t˘x_£t
(
exã¡_node_t
 *
node
, 
¥of_t˘x_t
 *
t˘x
)

192 
node
->
í_¥of_t˘x
 = 
t˘x
;

193 
	}
}

195 
JEMALLOC_INLINE
 

196 
	$exã¡_node_öô
(
exã¡_node_t
 *
node
, 
¨ía_t
 *
¨ía
, *
addr
, 
size_t
 
size
,

197 
boﬁ
 
zî€d
, boﬁ 
commôãd
)

200 
	`exã¡_node_¨ía_£t
(
node
, 
¨ía
);

201 
	`exã¡_node_addr_£t
(
node
, 
addr
);

202 
	`exã¡_node_size_£t
(
node
, 
size
);

203 
	`exã¡_node_zî€d_£t
(
node
, 
zî€d
);

204 
	`exã¡_node_commôãd_£t
(
node
, 
commôãd
);

205 
	`exã¡_node_achunk_£t
(
node
, 
Ál£
);

206 i‡(
c⁄fig_¥of
)

207 
	`exã¡_node_¥of_t˘x_£t
(
node
, 
NULL
);

208 
	}
}

210 
JEMALLOC_INLINE
 

211 
	$exã¡_node_dúty_lökage_öô
(
exã¡_node_t
 *
node
)

214 
	`qr_√w
(&
node
->
rd
, 
rd_lök
);

215 
	`qr_√w
(
node
, 
cc_lök
);

216 
	}
}

218 
JEMALLOC_INLINE
 

219 
	$exã¡_node_dúty_ö£π
(
exã¡_node_t
 *
node
,

220 
¨ía_runs_dúty_lök_t
 *
runs_dúty
, 
exã¡_node_t
 *
chunks_dúty
)

223 
	`qr_mñd
(
runs_dúty
, &
node
->
rd
, 
rd_lök
);

224 
	`qr_mñd
(
chunks_dúty
, 
node
, 
cc_lök
);

225 
	}
}

227 
JEMALLOC_INLINE
 

228 
	$exã¡_node_dúty_ªmove
(
exã¡_node_t
 *
node
)

231 
	`qr_ªmove
(&
node
->
rd
, 
rd_lök
);

232 
	`qr_ªmove
(
node
, 
cc_lök
);

233 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/hash.h

7 #ifde‡
JEMALLOC_H_TYPES


11 #ifde‡
JEMALLOC_H_STRUCTS


15 #ifde‡
JEMALLOC_H_EXTERNS


19 #ifde‡
JEMALLOC_H_INLINES


21 #i‚de‡
JEMALLOC_ENABLE_INLINE


22 
uöt32_t
 
hash_x86_32
(c⁄° *
key
, 
Àn
, uöt32_à
£ed
);

23 
hash_x86_128
(c⁄° *
key
, c⁄° 
Àn
, 
uöt32_t
 
£ed
,

24 
uöt64_t
 
r_out
[2]);

25 
hash_x64_128
(c⁄° *
key
, c⁄° 
Àn
, c⁄° 
uöt32_t
 
£ed
,

26 
uöt64_t
 
r_out
[2]);

27 
hash
(c⁄° *
key
, 
size_t
 
Àn
, c⁄° 
uöt32_t
 
£ed
,

28 
size_t
 
r_hash
[2]);

31 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_HASH_C_
))

34 
JEMALLOC_INLINE
 
uöt32_t


35 
	$hash_rŸl_32
(
uöt32_t
 
x
, 
öt8_t
 
r
)

38  ((
x
 << 
r
) | (x >> (32 -Ñ)));

39 
	}
}

41 
JEMALLOC_INLINE
 
uöt64_t


42 
	$hash_rŸl_64
(
uöt64_t
 
x
, 
öt8_t
 
r
)

45  ((
x
 << 
r
) | (x >> (64 -Ñ)));

46 
	}
}

48 
JEMALLOC_INLINE
 
uöt32_t


49 
	$hash_gë_block_32
(c⁄° 
uöt32_t
 *
p
, 
i
)

53 i‡(
	`u∆ikñy
((
uöçå_t
)
p
 & ((
uöt32_t
)-1)) != 0) {

54 
uöt32_t
 
ªt
;

56 
	`mem˝y
(&
ªt
, (
uöt8_t
 *)(
p
 + 
i
), (
uöt32_t
));

57  (
ªt
);

60  (
p
[
i
]);

61 
	}
}

63 
JEMALLOC_INLINE
 
uöt64_t


64 
	$hash_gë_block_64
(c⁄° 
uöt64_t
 *
p
, 
i
)

68 i‡(
	`u∆ikñy
((
uöçå_t
)
p
 & ((
uöt64_t
)-1)) != 0) {

69 
uöt64_t
 
ªt
;

71 
	`mem˝y
(&
ªt
, (
uöt8_t
 *)(
p
 + 
i
), (
uöt64_t
));

72  (
ªt
);

75  (
p
[
i
]);

76 
	}
}

78 
JEMALLOC_INLINE
 
uöt32_t


79 
	$hash_fmix_32
(
uöt32_t
 
h
)

82 
h
 ^= h >> 16;

83 
h
 *= 0x85ebca6b;

84 
h
 ^= h >> 13;

85 
h
 *= 0xc2b2ae35;

86 
h
 ^= h >> 16;

88  (
h
);

89 
	}
}

91 
JEMALLOC_INLINE
 
uöt64_t


92 
	$hash_fmix_64
(
uöt64_t
 
k
)

95 
k
 ^= k >> 33;

96 
k
 *
	`KQU
(0xff51afd7ed558ccd);

97 
k
 ^= k >> 33;

98 
k
 *
	`KQU
(0xc4ceb9fe1a85ec53);

99 
k
 ^= k >> 33;

101  (
k
);

102 
	}
}

104 
JEMALLOC_INLINE
 
uöt32_t


105 
	$hash_x86_32
(c⁄° *
key
, 
Àn
, 
uöt32_t
 
£ed
)

107 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*Ë
key
;

108 c⁄° 
nblocks
 = 
Àn
 / 4;

110 
uöt32_t
 
h1
 = 
£ed
;

112 c⁄° 
uöt32_t
 
c1
 = 0xcc9e2d51;

113 c⁄° 
uöt32_t
 
c2
 = 0x1b873593;

117 c⁄° 
uöt32_t
 *
blocks
 = (c⁄° uöt32_à*Ë(
d©a
 + 
nblocks
*4);

118 
i
;

120 
i
 = -
nblocks
; i; i++) {

121 
uöt32_t
 
k1
 = 
	`hash_gë_block_32
(
blocks
, 
i
);

123 
k1
 *
c1
;

124 
k1
 = 
	`hash_rŸl_32
(k1, 15);

125 
k1
 *
c2
;

127 
h1
 ^
k1
;

128 
h1
 = 
	`hash_rŸl_32
(h1, 13);

129 
h1
 = h1*5 + 0xe6546b64;

135 c⁄° 
uöt8_t
 *
èû
 = (c⁄° uöt8_à*Ë(
d©a
 + 
nblocks
*4);

137 
uöt32_t
 
k1
 = 0;

139 
Àn
 & 3) {

140 3: 
k1
 ^
èû
[2] << 16;

141 2: 
k1
 ^
èû
[1] << 8;

142 1: 
k1
 ^
èû
[0]; k1 *
c1
; k1 = 
	`hash_rŸl_32
(k1, 15);

143 
k1
 *
c2
; 
h1
 ^= k1;

148 
h1
 ^
Àn
;

150 
h1
 = 
	`hash_fmix_32
(h1);

152  (
h1
);

153 
	}
}

155 
UNUSED
 
JEMALLOC_INLINE
 

156 
	$hash_x86_128
(c⁄° *
key
, c⁄° 
Àn
, 
uöt32_t
 
£ed
,

157 
uöt64_t
 
r_out
[2])

159 c⁄° 
uöt8_t
 * 
d©a
 = (c⁄° uöt8_à*Ë
key
;

160 c⁄° 
nblocks
 = 
Àn
 / 16;

162 
uöt32_t
 
h1
 = 
£ed
;

163 
uöt32_t
 
h2
 = 
£ed
;

164 
uöt32_t
 
h3
 = 
£ed
;

165 
uöt32_t
 
h4
 = 
£ed
;

167 c⁄° 
uöt32_t
 
c1
 = 0x239b961b;

168 c⁄° 
uöt32_t
 
c2
 = 0xab0e9789;

169 c⁄° 
uöt32_t
 
c3
 = 0x38b34ae5;

170 c⁄° 
uöt32_t
 
c4
 = 0xa1e38b93;

174 c⁄° 
uöt32_t
 *
blocks
 = (c⁄° uöt32_à*Ë(
d©a
 + 
nblocks
*16);

175 
i
;

177 
i
 = -
nblocks
; i; i++) {

178 
uöt32_t
 
k1
 = 
	`hash_gë_block_32
(
blocks
, 
i
*4 + 0);

179 
uöt32_t
 
k2
 = 
	`hash_gë_block_32
(
blocks
, 
i
*4 + 1);

180 
uöt32_t
 
k3
 = 
	`hash_gë_block_32
(
blocks
, 
i
*4 + 2);

181 
uöt32_t
 
k4
 = 
	`hash_gë_block_32
(
blocks
, 
i
*4 + 3);

183 
k1
 *
c1
; k1 = 
	`hash_rŸl_32
(k1, 15); k1 *
c2
; 
h1
 ^= k1;

185 
h1
 = 
	`hash_rŸl_32
(h1, 19); h1 +
h2
;

186 
h1
 = h1*5 + 0x561ccd1b;

188 
k2
 *
c2
; k2 = 
	`hash_rŸl_32
(k2, 16); k2 *
c3
; 
h2
 ^= k2;

190 
h2
 = 
	`hash_rŸl_32
(h2, 17); h2 +
h3
;

191 
h2
 = h2*5 + 0x0bcaa747;

193 
k3
 *
c3
; k3 = 
	`hash_rŸl_32
(k3, 17); k3 *
c4
; 
h3
 ^= k3;

195 
h3
 = 
	`hash_rŸl_32
(h3, 15); h3 +
h4
;

196 
h3
 = h3*5 + 0x96cd1c35;

198 
k4
 *
c4
; k4 = 
	`hash_rŸl_32
(k4, 18); k4 *
c1
; 
h4
 ^= k4;

200 
h4
 = 
	`hash_rŸl_32
(h4, 13); h4 +
h1
;

201 
h4
 = h4*5 + 0x32ac3b17;

207 c⁄° 
uöt8_t
 *
èû
 = (c⁄° uöt8_à*Ë(
d©a
 + 
nblocks
*16);

208 
uöt32_t
 
k1
 = 0;

209 
uöt32_t
 
k2
 = 0;

210 
uöt32_t
 
k3
 = 0;

211 
uöt32_t
 
k4
 = 0;

213 
Àn
 & 15) {

214 15: 
k4
 ^
èû
[14] << 16;

215 14: 
k4
 ^
èû
[13] << 8;

216 13: 
k4
 ^
èû
[12] << 0;

217 
k4
 *
c4
; k4 = 
	`hash_rŸl_32
(k4, 18); k4 *
c1
; 
h4
 ^= k4;

219 12: 
k3
 ^
èû
[11] << 24;

220 11: 
k3
 ^
èû
[10] << 16;

221 10: 
k3
 ^
èû
[ 9] << 8;

222 9: 
k3
 ^
èû
[ 8] << 0;

223 
k3
 *
c3
; k3 = 
	`hash_rŸl_32
(k3, 17); k3 *
c4
; 
h3
 ^= k3;

225 8: 
k2
 ^
èû
[ 7] << 24;

226 7: 
k2
 ^
èû
[ 6] << 16;

227 6: 
k2
 ^
èû
[ 5] << 8;

228 5: 
k2
 ^
èû
[ 4] << 0;

229 
k2
 *
c2
; k2 = 
	`hash_rŸl_32
(k2, 16); k2 *
c3
; 
h2
 ^= k2;

231 4: 
k1
 ^
èû
[ 3] << 24;

232 3: 
k1
 ^
èû
[ 2] << 16;

233 2: 
k1
 ^
èû
[ 1] << 8;

234 1: 
k1
 ^
èû
[ 0] << 0;

235 
k1
 *
c1
; k1 = 
	`hash_rŸl_32
(k1, 15); k1 *
c2
; 
h1
 ^= k1;

240 
h1
 ^
Àn
; 
h2
 ^Àn; 
h3
 ^Àn; 
h4
 ^=Üen;

242 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

243 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

245 
h1
 = 
	`hash_fmix_32
(h1);

246 
h2
 = 
	`hash_fmix_32
(h2);

247 
h3
 = 
	`hash_fmix_32
(h3);

248 
h4
 = 
	`hash_fmix_32
(h4);

250 
h1
 +
h2
; h1 +
h3
; h1 +
h4
;

251 
h2
 +
h1
; 
h3
 +h1; 
h4
 += h1;

253 
r_out
[0] = (((
uöt64_t
Ë
h2
Ë<< 32Ë| 
h1
;

254 
r_out
[1] = (((
uöt64_t
Ë
h4
Ë<< 32Ë| 
h3
;

255 
	}
}

257 
UNUSED
 
JEMALLOC_INLINE
 

258 
	$hash_x64_128
(c⁄° *
key
, c⁄° 
Àn
, c⁄° 
uöt32_t
 
£ed
,

259 
uöt64_t
 
r_out
[2])

261 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*Ë
key
;

262 c⁄° 
nblocks
 = 
Àn
 / 16;

264 
uöt64_t
 
h1
 = 
£ed
;

265 
uöt64_t
 
h2
 = 
£ed
;

267 c⁄° 
uöt64_t
 
c1
 = 
	`KQU
(0x87c37b91114253d5);

268 c⁄° 
uöt64_t
 
c2
 = 
	`KQU
(0x4cf5ad432745937f);

272 c⁄° 
uöt64_t
 *
blocks
 = (c⁄° uöt64_à*Ë(
d©a
);

273 
i
;

275 
i
 = 0; i < 
nblocks
; i++) {

276 
uöt64_t
 
k1
 = 
	`hash_gë_block_64
(
blocks
, 
i
*2 + 0);

277 
uöt64_t
 
k2
 = 
	`hash_gë_block_64
(
blocks
, 
i
*2 + 1);

279 
k1
 *
c1
; k1 = 
	`hash_rŸl_64
(k1, 31); k1 *
c2
; 
h1
 ^= k1;

281 
h1
 = 
	`hash_rŸl_64
(h1, 27); h1 +
h2
;

282 
h1
 = h1*5 + 0x52dce729;

284 
k2
 *
c2
; k2 = 
	`hash_rŸl_64
(k2, 33); k2 *
c1
; 
h2
 ^= k2;

286 
h2
 = 
	`hash_rŸl_64
(h2, 31); h2 +
h1
;

287 
h2
 = h2*5 + 0x38495ab5;

293 c⁄° 
uöt8_t
 *
èû
 = (c⁄° uöt8_t*)(
d©a
 + 
nblocks
*16);

294 
uöt64_t
 
k1
 = 0;

295 
uöt64_t
 
k2
 = 0;

297 
Àn
 & 15) {

298 15: 
k2
 ^((
uöt64_t
)(
èû
[14])) << 48;

299 14: 
k2
 ^((
uöt64_t
)(
èû
[13])) << 40;

300 13: 
k2
 ^((
uöt64_t
)(
èû
[12])) << 32;

301 12: 
k2
 ^((
uöt64_t
)(
èû
[11])) << 24;

302 11: 
k2
 ^((
uöt64_t
)(
èû
[10])) << 16;

303 10: 
k2
 ^((
uöt64_t
)(
èû
[ 9])) << 8;

304 9: 
k2
 ^((
uöt64_t
)(
èû
[ 8])) << 0;

305 
k2
 *
c2
; k2 = 
	`hash_rŸl_64
(k2, 33); k2 *
c1
; 
h2
 ^= k2;

307 8: 
k1
 ^((
uöt64_t
)(
èû
[ 7])) << 56;

308 7: 
k1
 ^((
uöt64_t
)(
èû
[ 6])) << 48;

309 6: 
k1
 ^((
uöt64_t
)(
èû
[ 5])) << 40;

310 5: 
k1
 ^((
uöt64_t
)(
èû
[ 4])) << 32;

311 4: 
k1
 ^((
uöt64_t
)(
èû
[ 3])) << 24;

312 3: 
k1
 ^((
uöt64_t
)(
èû
[ 2])) << 16;

313 2: 
k1
 ^((
uöt64_t
)(
èû
[ 1])) << 8;

314 1: 
k1
 ^((
uöt64_t
)(
èû
[ 0])) << 0;

315 
k1
 *
c1
; k1 = 
	`hash_rŸl_64
(k1, 31); k1 *
c2
; 
h1
 ^= k1;

320 
h1
 ^
Àn
; 
h2
 ^=Üen;

322 
h1
 +
h2
;

323 
h2
 +
h1
;

325 
h1
 = 
	`hash_fmix_64
(h1);

326 
h2
 = 
	`hash_fmix_64
(h2);

328 
h1
 +
h2
;

329 
h2
 +
h1
;

331 
r_out
[0] = 
h1
;

332 
r_out
[1] = 
h2
;

333 
	}
}

337 
JEMALLOC_INLINE
 

338 
	$hash
(c⁄° *
key
, 
size_t
 
Àn
, c⁄° 
uöt32_t
 
£ed
, size_à
r_hash
[2])

341 
	`as£π
(
Àn
 <
INT_MAX
);

343 #i‡(
LG_SIZEOF_PTR
 =3 && !
	`deföed
(
JEMALLOC_BIG_ENDIAN
))

344 
	`hash_x64_128
(
key
, ()
Àn
, 
£ed
, (
uöt64_t
 *)
r_hash
);

347 
uöt64_t
 
hashes
[2];

348 
	`hash_x86_128
(
key
, ()
Àn
, 
£ed
, 
hashes
);

349 
r_hash
[0] = (
size_t
)
hashes
[0];

350 
r_hash
[1] = (
size_t
)
hashes
[1];

353 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/huge.h

2 #ifde‡
JEMALLOC_H_TYPES


6 #ifde‡
JEMALLOC_H_STRUCTS


10 #ifde‡
JEMALLOC_H_EXTERNS


12 *
huge_mÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
, 
boﬁ
 
zîo
);

13 *
huge_∑Œoc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
,

14 
size_t
 
Æignmít
, 
boﬁ
 
zîo
);

15 
boﬁ
 
huge_øŒoc_no_move
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
,

16 
size_t
 
usize_mö
, size_à
usize_max
, 
boﬁ
 
zîo
);

17 *
huge_øŒoc
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, *
±r
, 
size_t
 
ﬁdsize
,

18 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
);

19 #ifde‡
JEMALLOC_JET


20 (
	thuge_dÆloc_junk_t
)(
	ttsdn_t
 *, *, 
	tsize_t
);

21 
huge_dÆloc_junk_t
 *
huge_dÆloc_junk
;

23 
	`huge_dÆloc
(
tsdn_t
 *
tsdn
, *
±r
);

24 
¨ía_t
 *
	`huge_ØŒoc
(c⁄° *
±r
);

25 
size_t
 
	`huge_ßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

26 
¥of_t˘x_t
 *
	`huge_¥of_t˘x_gë
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

27 
	`huge_¥of_t˘x_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
¥of_t˘x_t
 *
t˘x
);

28 
	`huge_¥of_t˘x_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

32 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal.h

1 #i‚de‡
JEMALLOC_INTERNAL_H


2 
	#JEMALLOC_INTERNAL_H


	)

4 
	~"jemÆloc_öã∫Æ_defs.h
"

5 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ_de˛s.h
"

7 #ifde‡
JEMALLOC_UTRACE


8 
	~<sys/kåa˚.h
>

11 
	#JEMALLOC_NO_DEMANGLE


	)

12 #ifde‡
JEMALLOC_JET


13 
	#JEMALLOC_N
(
n
Ë
jë_
##
	)
n

14 
	~"jemÆloc/öã∫Æ/public_«me•a˚.h
"

15 
	#JEMALLOC_NO_RENAME


	)

16 
	~"../jemÆloc.h
"

17 #unde‡
JEMALLOC_NO_RENAME


19 
	#JEMALLOC_N
(
n
Ë
je_
##
	)
n

20 
	~"../jemÆloc.h
"

22 
	~"jemÆloc/öã∫Æ/¥iv©e_«me•a˚.h
"

24 c⁄° 
boﬁ
 
	gc⁄fig_debug
 =

25 #ifde‡
JEMALLOC_DEBUG


26 
åue


28 
Ál£


31 c⁄° 
boﬁ
 
	ghave_dss
 =

32 #ifde‡
JEMALLOC_DSS


33 
åue


35 
Ál£


38 c⁄° 
boﬁ
 
	gc⁄fig_fûl
 =

39 #ifde‡
JEMALLOC_FILL


40 
åue


42 
Ál£


45 c⁄° 
boﬁ
 
	gc⁄fig_œzy_lock
 =

46 #ifde‡
JEMALLOC_LAZY_LOCK


47 
åue


49 
Ál£


52 c⁄° * c⁄° 
	gc⁄fig_mÆloc_c⁄f
 = 
JEMALLOC_CONFIG_MALLOC_CONF
;

53 c⁄° 
boﬁ
 
	gc⁄fig_¥of
 =

54 #ifde‡
JEMALLOC_PROF


55 
åue


57 
Ál£


60 c⁄° 
boﬁ
 
	gc⁄fig_¥of_libgcc
 =

61 #ifde‡
JEMALLOC_PROF_LIBGCC


62 
åue


64 
Ál£


67 c⁄° 
boﬁ
 
	gc⁄fig_¥of_libunwöd
 =

68 #ifde‡
JEMALLOC_PROF_LIBUNWIND


69 
åue


71 
Ál£


74 c⁄° 
boﬁ
 
	gm≠s_cﬂÀs˚
 =

75 #ifde‡
JEMALLOC_MAPS_COALESCE


76 
åue


78 
Ál£


81 c⁄° 
boﬁ
 
	gc⁄fig_munm≠
 =

82 #ifde‡
JEMALLOC_MUNMAP


83 
åue


85 
Ál£


88 c⁄° 
boﬁ
 
	gc⁄fig_°©s
 =

89 #ifde‡
JEMALLOC_STATS


90 
åue


92 
Ál£


95 c⁄° 
boﬁ
 
	gc⁄fig_tˇche
 =

96 #ifde‡
JEMALLOC_TCACHE


97 
åue


99 
Ál£


102 c⁄° 
boﬁ
 
	gc⁄fig_és
 =

103 #ifde‡
JEMALLOC_TLS


104 
åue


106 
Ál£


109 c⁄° 
boﬁ
 
	gc⁄fig_uåa˚
 =

110 #ifde‡
JEMALLOC_UTRACE


111 
åue


113 
Ál£


116 c⁄° 
boﬁ
 
	gc⁄fig_vÆgröd
 =

117 #ifde‡
JEMALLOC_VALGRIND


118 
åue


120 
Ál£


123 c⁄° 
boﬁ
 
	gc⁄fig_xmÆloc
 =

124 #ifde‡
JEMALLOC_XMALLOC


125 
åue


127 
Ál£


130 c⁄° 
boﬁ
 
	gc⁄fig_ivßŒoc
 =

131 #ifde‡
JEMALLOC_IVSALLOC


132 
åue


134 
Ál£


137 c⁄° 
boﬁ
 
	gc⁄fig_ˇche_oblivious
 =

138 #ifde‡
JEMALLOC_CACHE_OBLIVIOUS


139 
åue


141 
Ál£


145 #ifde‡
JEMALLOC_C11ATOMICS


146 
	~<°d©omic.h
>

149 #ifde‡
JEMALLOC_ATOMIC9


150 
	~<machöe/©omic.h
>

153 #i‡(
deföed
(
JEMALLOC_OSATOMIC
Ë|| deföed(
JEMALLOC_OSSPIN
))

154 
	~<libkîn/OSAtomic.h
>

157 #ifde‡
JEMALLOC_ZONE


158 
	~<mach/mach_îr‹.h
>

159 
	~<mach/mach_öô.h
>

160 
	~<mach/vm_m≠.h
>

161 
	~<mÆloc/mÆloc.h
>

164 
	~"jemÆloc/öã∫Æ/ph.h
"

165 
	#RB_COMPACT


	)

166 
	~"jemÆloc/öã∫Æ/rb.h
"

167 
	~"jemÆloc/öã∫Æ/qr.h
"

168 
	~"jemÆloc/öã∫Æ/ql.h
"

184 
	#JEMALLOC_H_TYPES


	)

186 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ_ma¸os.h
"

189 
	tszöd_t
;

202 
	#MALLOCX_ARENA_MASK
 (()~0xfffff)

	)

203 
	#MALLOCX_ARENA_MAX
 0xf„

	)

204 
	#MALLOCX_TCACHE_MASK
 (()~0xfff000ffU)

	)

205 
	#MALLOCX_TCACHE_MAX
 0xffd

	)

206 
	#MALLOCX_LG_ALIGN_MASK
 (()0x3f)

	)

208 
	#MALLOCX_ALIGN_GET_SPECIFIED
(
Êags
) \

209 (
	`ZU
(1Ë<< (
Êags
 & 
MALLOCX_LG_ALIGN_MASK
))

	)

210 
	#MALLOCX_ALIGN_GET
(
Êags
) \

211 (
	`MALLOCX_ALIGN_GET_SPECIFIED
(
Êags
Ë& (
SIZE_T_MAX
-1))

	)

212 
	#MALLOCX_ZERO_GET
(
Êags
) \

213 ((
boﬁ
)(
Êags
 & 
MALLOCX_ZERO
))

	)

215 
	#MALLOCX_TCACHE_GET
(
Êags
) \

216 ((()((
Êags
 & 
MALLOCX_TCACHE_MASK
Ë>> 8)Ë- 2)

	)

217 
	#MALLOCX_ARENA_GET
(
Êags
) \

218 ((()((()
Êags
Ë>> 20)Ë- 1)

	)

221 
	#TINY_MIN
 (1U << 
LG_TINY_MIN
)

	)

227 #i‚de‡
LG_QUANTUM


228 #i‡(
deföed
(
__i386__
Ë|| deföed(
_M_IX86
))

229 
	#LG_QUANTUM
 4

	)

231 #ifde‡
__ü64__


232 
	#LG_QUANTUM
 4

	)

234 #ifde‡
__Æpha__


235 
	#LG_QUANTUM
 4

	)

237 #i‡(
deföed
(
__•¨c64__
Ë|| deföed(
__•¨cv9
))

238 
	#LG_QUANTUM
 4

	)

240 #i‡(
deföed
(
__amd64__
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_X64
))

241 
	#LG_QUANTUM
 4

	)

243 #ifde‡
__¨m__


244 
	#LG_QUANTUM
 3

	)

246 #ifde‡
__Ørch64__


247 
	#LG_QUANTUM
 4

	)

249 #ifde‡
__hµa__


250 
	#LG_QUANTUM
 4

	)

252 #ifde‡
__mùs__


253 
	#LG_QUANTUM
 3

	)

255 #ifde‡
__‹1k__


256 
	#LG_QUANTUM
 3

	)

258 #ifde‡
__powîpc__


259 
	#LG_QUANTUM
 4

	)

261 #ifde‡
__riscv__


262 
	#LG_QUANTUM
 4

	)

264 #ifde‡
__s390__


265 
	#LG_QUANTUM
 4

	)

267 #ifde‡
__SH4__


268 
	#LG_QUANTUM
 4

	)

270 #ifde‡
__tûe__


271 
	#LG_QUANTUM
 4

	)

273 #ifde‡
__À32__


274 
	#LG_QUANTUM
 4

	)

276 #i‚de‡
LG_QUANTUM


282 
	#QUANTUM
 ((
size_t
)(1U << 
LG_QUANTUM
))

	)

283 
	#QUANTUM_MASK
 (
QUANTUM
 - 1)

	)

286 
	#QUANTUM_CEILING
(
a
) \

287 (((
a
Ë+ 
QUANTUM_MASK
Ë& ~QUANTUM_MASK)

	)

289 
	#LONG
 ((
size_t
)(1U << 
LG_SIZEOF_LONG
))

	)

290 
	#LONG_MASK
 (
LONG
 - 1)

	)

293 
	#LONG_CEILING
(
a
) \

294 (((
a
Ë+ 
LONG_MASK
Ë& ~LONG_MASK)

	)

296 
	#SIZEOF_PTR
 (1U << 
LG_SIZEOF_PTR
)

	)

297 
	#PTR_MASK
 (
SIZEOF_PTR
 - 1)

	)

300 
	#PTR_CEILING
(
a
) \

301 (((
a
Ë+ 
PTR_MASK
Ë& ~PTR_MASK)

	)

310 
	#LG_CACHELINE
 6

	)

311 
	#CACHELINE
 64

	)

312 
	#CACHELINE_MASK
 (
CACHELINE
 - 1)

	)

315 
	#CACHELINE_CEILING
(
s
) \

316 (((
s
Ë+ 
CACHELINE_MASK
Ë& ~CACHELINE_MASK)

	)

319 #ifde‡
PAGE_MASK


320 #unde‡
PAGE_MASK


322 
	#PAGE
 ((
size_t
)(1U << 
LG_PAGE
))

	)

323 
	#PAGE_MASK
 ((
size_t
)(
PAGE
 - 1))

	)

326 
	#PAGE_ADDR2BASE
(
a
) \

327 ((*)((
uöçå_t
)(
a
Ë& ~
PAGE_MASK
))

	)

330 
	#PAGE_CEILING
(
s
) \

331 (((
s
Ë+ 
PAGE_MASK
Ë& ~PAGE_MASK)

	)

334 
	#ALIGNMENT_ADDR2BASE
(
a
, 
Æignmít
) \

335 ((*)((
uöçå_t
)(
a
Ë& (-(
Æignmít
))))

	)

338 
	#ALIGNMENT_ADDR2OFFSET
(
a
, 
Æignmít
) \

339 ((
size_t
)((
uöçå_t
)(
a
Ë& (
Æignmít
 - 1)))

	)

342 
	#ALIGNMENT_CEILING
(
s
, 
Æignmít
) \

343 (((
s
Ë+ (
Æignmít
 - 1)Ë& (-◊lignmít)))

	)

346 #i‡
__STDC_VERSION__
 < 199901L

347 #ifde‡
_MSC_VER


348 
	~<mÆloc.h
>

349 
	#Æloˇ
 
_Æloˇ


	)

351 #ifde‡
JEMALLOC_HAS_ALLOCA_H


352 
	~<Æloˇ.h
>

354 
	~<°dlib.h
>

357 
	#VARIABLE_ARRAY
(
ty≥
, 
«me
, 
cou¡
) \

358 
ty≥
 *
«me
 = 
	`Æloˇ
(—y≥Ë* (
cou¡
))

	)

360 
	#VARIABLE_ARRAY
(
ty≥
, 
«me
, 
cou¡
Ëty≥Çame[(cou¡)]

	)

363 
	~"jemÆloc/öã∫Æ/n°ime.h
"

364 
	~"jemÆloc/öã∫Æ/vÆgröd.h
"

365 
	~"jemÆloc/öã∫Æ/utû.h
"

366 
	~"jemÆloc/öã∫Æ/©omic.h
"

367 
	~"jemÆloc/öã∫Æ/¥ng.h
"

368 
	~"jemÆloc/öã∫Æ/tickî.h
"

369 
	~"jemÆloc/öã∫Æ/ckh.h
"

370 
	~"jemÆloc/öã∫Æ/size_˛as£s.h
"

371 
	~"jemÆloc/öã∫Æ/smoŸh°ï.h
"

372 
	~"jemÆloc/öã∫Æ/°©s.h
"

373 
	~"jemÆloc/öã∫Æ/˘l.h
"

374 
	~"jemÆloc/öã∫Æ/wô√ss.h
"

375 
	~"jemÆloc/öã∫Æ/muãx.h
"

376 
	~"jemÆloc/öã∫Æ/tsd.h
"

377 
	~"jemÆloc/öã∫Æ/mb.h
"

378 
	~"jemÆloc/öã∫Æ/exã¡.h
"

379 
	~"jemÆloc/öã∫Æ/¨ía.h
"

380 
	~"jemÆloc/öã∫Æ/bôm≠.h
"

381 
	~"jemÆloc/öã∫Æ/ba£.h
"

382 
	~"jemÆloc/öã∫Æ/πªe.h
"

383 
	~"jemÆloc/öã∫Æ/∑ges.h
"

384 
	~"jemÆloc/öã∫Æ/chunk.h
"

385 
	~"jemÆloc/öã∫Æ/huge.h
"

386 
	~"jemÆloc/öã∫Æ/tˇche.h
"

387 
	~"jemÆloc/öã∫Æ/hash.h
"

388 
	~"jemÆloc/öã∫Æ/qu¨™töe.h
"

389 
	~"jemÆloc/öã∫Æ/¥of.h
"

391 #unde‡
JEMALLOC_H_TYPES


393 
	#JEMALLOC_H_STRUCTS


	)

395 
	~"jemÆloc/öã∫Æ/n°ime.h
"

396 
	~"jemÆloc/öã∫Æ/vÆgröd.h
"

397 
	~"jemÆloc/öã∫Æ/utû.h
"

398 
	~"jemÆloc/öã∫Æ/©omic.h
"

399 
	~"jemÆloc/öã∫Æ/¥ng.h
"

400 
	~"jemÆloc/öã∫Æ/tickî.h
"

401 
	~"jemÆloc/öã∫Æ/ckh.h
"

402 
	~"jemÆloc/öã∫Æ/size_˛as£s.h
"

403 
	~"jemÆloc/öã∫Æ/smoŸh°ï.h
"

404 
	~"jemÆloc/öã∫Æ/°©s.h
"

405 
	~"jemÆloc/öã∫Æ/˘l.h
"

406 
	~"jemÆloc/öã∫Æ/wô√ss.h
"

407 
	~"jemÆloc/öã∫Æ/muãx.h
"

408 
	~"jemÆloc/öã∫Æ/mb.h
"

409 
	~"jemÆloc/öã∫Æ/bôm≠.h
"

410 
	#JEMALLOC_ARENA_STRUCTS_A


	)

411 
	~"jemÆloc/öã∫Æ/¨ía.h
"

412 #unde‡
JEMALLOC_ARENA_STRUCTS_A


413 
	~"jemÆloc/öã∫Æ/exã¡.h
"

414 
	#JEMALLOC_ARENA_STRUCTS_B


	)

415 
	~"jemÆloc/öã∫Æ/¨ía.h
"

416 #unde‡
JEMALLOC_ARENA_STRUCTS_B


417 
	~"jemÆloc/öã∫Æ/ba£.h
"

418 
	~"jemÆloc/öã∫Æ/πªe.h
"

419 
	~"jemÆloc/öã∫Æ/∑ges.h
"

420 
	~"jemÆloc/öã∫Æ/chunk.h
"

421 
	~"jemÆloc/öã∫Æ/huge.h
"

422 
	~"jemÆloc/öã∫Æ/tˇche.h
"

423 
	~"jemÆloc/öã∫Æ/hash.h
"

424 
	~"jemÆloc/öã∫Æ/qu¨™töe.h
"

425 
	~"jemÆloc/öã∫Æ/¥of.h
"

427 
	~"jemÆloc/öã∫Æ/tsd.h
"

429 #unde‡
JEMALLOC_H_STRUCTS


431 
	#JEMALLOC_H_EXTERNS


	)

433 
boﬁ
 
›t_ab‹t
;

434 c⁄° *
›t_junk
;

435 
boﬁ
 
›t_junk_Æloc
;

436 
boﬁ
 
›t_junk_‰ì
;

437 
size_t
 
›t_qu¨™töe
;

438 
boﬁ
 
›t_ªdz⁄e
;

439 
boﬁ
 
›t_uåa˚
;

440 
boﬁ
 
›t_xmÆloc
;

441 
boﬁ
 
›t_zîo
;

442 
›t_«ª«s
;

444 
boﬁ
 
ö_vÆgröd
;

447 
n˝us
;

450 
«ª«s_auto
;

456 
¨ía_t
 **
¨ías
;

462 
size_t
 c⁄° 
ödex2size_èb
[
NSIZES
+1];

468 
uöt8_t
 c⁄° 
size2ödex_èb
[];

470 *
a0mÆloc
(
size_t
 
size
);

471 
a0dÆloc
(*
±r
);

472 *
boŸ°øp_mÆloc
(
size_t
 
size
);

473 *
boŸ°øp_ˇŒoc
(
size_t
 
num
, size_à
size
);

474 
boŸ°øp_‰ì
(*
±r
);

475 
«ª«s_tŸÆ_gë
();

476 
¨ía_t
 *
¨ía_öô
(
tsdn_t
 *
tsdn
, 
öd
);

477 
¨ía_td©a_t
 *
¨ía_td©a_gë_h¨d
(
tsd_t
 *
tsd
, 
öd
);

478 
¨ía_t
 *
¨ía_choo£_h¨d
(
tsd_t
 *
tsd
, 
boﬁ
 
öã∫Æ
);

479 
¨ía_migøã
(
tsd_t
 *
tsd
, 
ﬁdöd
, 
√wöd
);

480 
thªad_Æloˇãd_˛ónup
(
tsd_t
 *
tsd
);

481 
thªad_dóŒoˇãd_˛ónup
(
tsd_t
 *
tsd
);

482 
üª«_˛ónup
(
tsd_t
 *
tsd
);

483 
¨ía_˛ónup
(
tsd_t
 *
tsd
);

484 
¨ías_td©a_˛ónup
(
tsd_t
 *
tsd
);

485 
«ª«s_td©a_˛ónup
(
tsd_t
 *
tsd
);

486 
¨ías_td©a_by∑ss_˛ónup
(
tsd_t
 *
tsd
);

487 
jemÆloc_¥ef‹k
();

488 
jemÆloc_po°f‹k_∑ª¡
();

489 
jemÆloc_po°f‹k_chûd
();

491 
	~"jemÆloc/öã∫Æ/n°ime.h
"

492 
	~"jemÆloc/öã∫Æ/vÆgröd.h
"

493 
	~"jemÆloc/öã∫Æ/utû.h
"

494 
	~"jemÆloc/öã∫Æ/©omic.h
"

495 
	~"jemÆloc/öã∫Æ/¥ng.h
"

496 
	~"jemÆloc/öã∫Æ/tickî.h
"

497 
	~"jemÆloc/öã∫Æ/ckh.h
"

498 
	~"jemÆloc/öã∫Æ/size_˛as£s.h
"

499 
	~"jemÆloc/öã∫Æ/smoŸh°ï.h
"

500 
	~"jemÆloc/öã∫Æ/°©s.h
"

501 
	~"jemÆloc/öã∫Æ/˘l.h
"

502 
	~"jemÆloc/öã∫Æ/wô√ss.h
"

503 
	~"jemÆloc/öã∫Æ/muãx.h
"

504 
	~"jemÆloc/öã∫Æ/mb.h
"

505 
	~"jemÆloc/öã∫Æ/bôm≠.h
"

506 
	~"jemÆloc/öã∫Æ/exã¡.h
"

507 
	~"jemÆloc/öã∫Æ/¨ía.h
"

508 
	~"jemÆloc/öã∫Æ/ba£.h
"

509 
	~"jemÆloc/öã∫Æ/πªe.h
"

510 
	~"jemÆloc/öã∫Æ/∑ges.h
"

511 
	~"jemÆloc/öã∫Æ/chunk.h
"

512 
	~"jemÆloc/öã∫Æ/huge.h
"

513 
	~"jemÆloc/öã∫Æ/tˇche.h
"

514 
	~"jemÆloc/öã∫Æ/hash.h
"

515 
	~"jemÆloc/öã∫Æ/qu¨™töe.h
"

516 
	~"jemÆloc/öã∫Æ/¥of.h
"

517 
	~"jemÆloc/öã∫Æ/tsd.h
"

519 #unde‡
JEMALLOC_H_EXTERNS


521 
	#JEMALLOC_H_INLINES


	)

523 
	~"jemÆloc/öã∫Æ/n°ime.h
"

524 
	~"jemÆloc/öã∫Æ/vÆgröd.h
"

525 
	~"jemÆloc/öã∫Æ/utû.h
"

526 
	~"jemÆloc/öã∫Æ/©omic.h
"

527 
	~"jemÆloc/öã∫Æ/¥ng.h
"

528 
	~"jemÆloc/öã∫Æ/tickî.h
"

529 
	~"jemÆloc/öã∫Æ/ckh.h
"

530 
	~"jemÆloc/öã∫Æ/size_˛as£s.h
"

531 
	~"jemÆloc/öã∫Æ/smoŸh°ï.h
"

532 
	~"jemÆloc/öã∫Æ/°©s.h
"

533 
	~"jemÆloc/öã∫Æ/˘l.h
"

534 
	~"jemÆloc/öã∫Æ/tsd.h
"

535 
	~"jemÆloc/öã∫Æ/wô√ss.h
"

536 
	~"jemÆloc/öã∫Æ/muãx.h
"

537 
	~"jemÆloc/öã∫Æ/mb.h
"

538 
	~"jemÆloc/öã∫Æ/exã¡.h
"

539 
	~"jemÆloc/öã∫Æ/ba£.h
"

540 
	~"jemÆloc/öã∫Æ/πªe.h
"

541 
	~"jemÆloc/öã∫Æ/∑ges.h
"

542 
	~"jemÆloc/öã∫Æ/chunk.h
"

543 
	~"jemÆloc/öã∫Æ/huge.h
"

545 #i‚de‡
JEMALLOC_ENABLE_INLINE


546 
szöd_t
 
size2ödex_compuã
(
size_t
 
size
);

547 
szöd_t
 
size2ödex_lookup
(
size_t
 
size
);

548 
szöd_t
 
size2ödex
(
size_t
 
size
);

549 
size_t
 
ödex2size_compuã
(
szöd_t
 
ödex
);

550 
size_t
 
ödex2size_lookup
(
szöd_t
 
ödex
);

551 
size_t
 
ödex2size
(
szöd_t
 
ödex
);

552 
size_t
 
s2u_compuã
(size_à
size
);

553 
size_t
 
s2u_lookup
(size_à
size
);

554 
size_t
 
s2u
(size_à
size
);

555 
size_t
 
ß2u
(size_à
size
, size_à
Æignmít
);

556 
¨ía_t
 *
¨ía_choo£_im∂
(
tsd_t
 *
tsd
,áª«_à*
¨ía
, 
boﬁ
 
öã∫Æ
);

557 
¨ía_t
 *
¨ía_choo£
(
tsd_t
 *
tsd
,áª«_à*
¨ía
);

558 
¨ía_t
 *
¨ía_ichoo£
(
tsdn_t
 *
tsdn
,áª«_à*
¨ía
);

559 
¨ía_td©a_t
 *
¨ía_td©a_gë
(
tsd_t
 *
tsd
, 
öd
,

560 
boﬁ
 
ª‰esh_if_missög
);

561 
¨ía_t
 *
¨ía_gë
(
tsdn_t
 *
tsdn
, 
öd
, 
boﬁ
 
öô_if_missög
);

562 
tickî_t
 *
deˇy_tickî_gë
(
tsd_t
 *
tsd
, 
öd
);

565 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_C_
))

566 
JEMALLOC_INLINE
 
szöd_t


567 
	$size2ödex_compuã
(
size_t
 
size
)

570 #i‡(
NTBINS
 != 0)

571 i‡(
size
 <(
	`ZU
(1Ë<< 
LG_TINY_MAXCLASS
)) {

572 
szöd_t
 
lg_tmö
 = 
LG_TINY_MAXCLASS
 - 
NTBINS
 + 1;

573 
szöd_t
 
lg_˚û
 = 
	`lg_Êo‹
(
	`pow2_˚û_zu
(
size
));

574  (
lg_˚û
 < 
lg_tmö
 ? 0 :Üg_ceil -Üg_tmin);

578 
szöd_t
 
x
 = 
	`u∆ikñy
(
	`ZI
(
size
) < 0) ? ((size<<1) ?

579 (
	`ZU
(1)<<(
LG_SIZEOF_PTR
+3)) : ((ZU(1)<<(LG_SIZEOF_PTR+3))-1))

580 : 
	`lg_Êo‹
((
size
<<1)-1);

581 
szöd_t
 
shi·
 = (
x
 < 
LG_SIZE_CLASS_GROUP
 + 
LG_QUANTUM
) ? 0 :

582 
x
 - (
LG_SIZE_CLASS_GROUP
 + 
LG_QUANTUM
);

583 
szöd_t
 
gΩ
 = 
shi·
 << 
LG_SIZE_CLASS_GROUP
;

585 
szöd_t
 
lg_dñè
 = (
x
 < 
LG_SIZE_CLASS_GROUP
 + 
LG_QUANTUM
 + 1)

586 ? 
LG_QUANTUM
 : 
x
 - 
LG_SIZE_CLASS_GROUP
 - 1;

588 
size_t
 
dñè_övî£_mask
 = 
	`ZI
(-1Ë<< 
lg_dñè
;

589 
szöd_t
 
mod
 = ((((
size
-1Ë& 
dñè_övî£_mask
Ë>> 
lg_dñè
)) &

590 ((
	`ZU
(1Ë<< 
LG_SIZE_CLASS_GROUP
) - 1);

592 
szöd_t
 
ödex
 = 
NTBINS
 + 
gΩ
 + 
mod
;

593  (
ödex
);

595 
	}
}

597 
JEMALLOC_ALWAYS_INLINE
 
szöd_t


598 
	$size2ödex_lookup
(
size_t
 
size
)

601 
	`as£π
(
size
 <
LOOKUP_MAXCLASS
);

603 
szöd_t
 
ªt
 = (
size2ödex_èb
[(
size
-1Ë>> 
LG_TINY_MIN
]);

604 
	`as£π
(
ªt
 =
	`size2ödex_compuã
(
size
));

605  (
ªt
);

607 
	}
}

609 
JEMALLOC_ALWAYS_INLINE
 
szöd_t


610 
	$size2ödex
(
size_t
 
size
)

613 
	`as£π
(
size
 > 0);

614 i‡(
	`likñy
(
size
 <
LOOKUP_MAXCLASS
))

615  (
	`size2ödex_lookup
(
size
));

616  (
	`size2ödex_compuã
(
size
));

617 
	}
}

619 
JEMALLOC_INLINE
 
size_t


620 
	$ödex2size_compuã
(
szöd_t
 
ödex
)

623 #i‡(
NTBINS
 > 0)

624 i‡(
ödex
 < 
NTBINS
)

625  (
	`ZU
(1Ë<< (
LG_TINY_MAXCLASS
 - 
NTBINS
 + 1 + 
ödex
));

628 
size_t
 
ªdu˚d_ödex
 = 
ödex
 - 
NTBINS
;

629 
size_t
 
gΩ
 = 
ªdu˚d_ödex
 >> 
LG_SIZE_CLASS_GROUP
;

630 
size_t
 
mod
 = 
ªdu˚d_ödex
 & ((
	`ZU
(1Ë<< 
LG_SIZE_CLASS_GROUP
) -

633 
size_t
 
gΩ_size_mask
 = ~((!!
gΩ
)-1);

634 
size_t
 
gΩ_size
 = ((
	`ZU
(1Ë<< (
LG_QUANTUM
 +

635 (
LG_SIZE_CLASS_GROUP
-1))Ë<< 
gΩ
Ë& 
gΩ_size_mask
;

637 
size_t
 
shi·
 = (
gΩ
 == 0) ? 1 : grp;

638 
size_t
 
lg_dñè
 = 
shi·
 + (
LG_QUANTUM
-1);

639 
size_t
 
mod_size
 = (
mod
+1Ë<< 
lg_dñè
;

641 
size_t
 
usize
 = 
gΩ_size
 + 
mod_size
;

642  (
usize
);

644 
	}
}

646 
JEMALLOC_ALWAYS_INLINE
 
size_t


647 
	$ödex2size_lookup
(
szöd_t
 
ödex
)

649 
size_t
 
ªt
 = (size_t)
ödex2size_èb
[
ödex
];

650 
	`as£π
(
ªt
 =
	`ödex2size_compuã
(
ödex
));

651  (
ªt
);

652 
	}
}

654 
JEMALLOC_ALWAYS_INLINE
 
size_t


655 
	$ödex2size
(
szöd_t
 
ödex
)

658 
	`as£π
(
ödex
 < 
NSIZES
);

659  (
	`ödex2size_lookup
(
ödex
));

660 
	}
}

662 
JEMALLOC_ALWAYS_INLINE
 
size_t


663 
	$s2u_compuã
(
size_t
 
size
)

666 #i‡(
NTBINS
 > 0)

667 i‡(
size
 <(
	`ZU
(1Ë<< 
LG_TINY_MAXCLASS
)) {

668 
size_t
 
lg_tmö
 = 
LG_TINY_MAXCLASS
 - 
NTBINS
 + 1;

669 
size_t
 
lg_˚û
 = 
	`lg_Êo‹
(
	`pow2_˚û_zu
(
size
));

670  (
lg_˚û
 < 
lg_tmö
 ? (
	`ZU
(1) <<Üg_tmin) :

671 (
	`ZU
(1Ë<< 
lg_˚û
));

675 
size_t
 
x
 = 
	`u∆ikñy
(
	`ZI
(
size
) < 0) ? ((size<<1) ?

676 (
	`ZU
(1)<<(
LG_SIZEOF_PTR
+3)) : ((ZU(1)<<(LG_SIZEOF_PTR+3))-1))

677 : 
	`lg_Êo‹
((
size
<<1)-1);

678 
size_t
 
lg_dñè
 = (
x
 < 
LG_SIZE_CLASS_GROUP
 + 
LG_QUANTUM
 + 1)

679 ? 
LG_QUANTUM
 : 
x
 - 
LG_SIZE_CLASS_GROUP
 - 1;

680 
size_t
 
dñè
 = 
	`ZU
(1Ë<< 
lg_dñè
;

681 
size_t
 
dñè_mask
 = 
dñè
 - 1;

682 
size_t
 
usize
 = (
size
 + 
dñè_mask
) & ~delta_mask;

683  (
usize
);

685 
	}
}

687 
JEMALLOC_ALWAYS_INLINE
 
size_t


688 
	$s2u_lookup
(
size_t
 
size
)

690 
size_t
 
ªt
 = 
	`ödex2size_lookup
(
	`size2ödex_lookup
(
size
));

692 
	`as£π
(
ªt
 =
	`s2u_compuã
(
size
));

693  (
ªt
);

694 
	}
}

700 
JEMALLOC_ALWAYS_INLINE
 
size_t


701 
	$s2u
(
size_t
 
size
)

704 
	`as£π
(
size
 > 0);

705 i‡(
	`likñy
(
size
 <
LOOKUP_MAXCLASS
))

706  (
	`s2u_lookup
(
size
));

707  (
	`s2u_compuã
(
size
));

708 
	}
}

714 
JEMALLOC_ALWAYS_INLINE
 
size_t


715 
	$ß2u
(
size_t
 
size
, size_à
Æignmít
)

717 
size_t
 
usize
;

719 
	`as£π
(
Æignmít
 != 0 && ((alignment - 1) &álignment) == 0);

722 i‡(
size
 <
SMALL_MAXCLASS
 && 
Æignmít
 < 
PAGE
) {

737 
usize
 = 
	`s2u
(
	`ALIGNMENT_CEILING
(
size
, 
Æignmít
));

738 i‡(
usize
 < 
LARGE_MINCLASS
)

739  (
usize
);

743 i‡(
	`likñy
(
size
 <
œrge_max˛ass
Ë&&Üikñy(
Æignmít
 < 
chunksize
)) {

748 
Æignmít
 = 
	`PAGE_CEILING
(alignment);

751 
usize
 = (
size
 <
LARGE_MINCLASS
Ë? LARGE_MINCLASS : 
	`s2u
(size);

757 i‡(
usize
 + 
œrge_∑d
 + 
Æignmít
 <
¨ía_maxrun
)

758  (
usize
);

763 i‡(
	`u∆ikñy
(
Æignmít
 > 
HUGE_MAXCLASS
))

770 
Æignmít
 = 
	`CHUNK_CEILING
(alignment);

773 i‡(
size
 <
chunksize
)

774 
usize
 = 
chunksize
;

776 
usize
 = 
	`s2u
(
size
);

777 i‡(
usize
 < 
size
) {

787 i‡(
usize
 + 
Æignmít
 < usize) {

791  (
usize
);

792 
	}
}

795 
JEMALLOC_INLINE
 
¨ía_t
 *

796 
	$¨ía_choo£_im∂
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
)

798 
¨ía_t
 *
ªt
;

800 i‡(
¨ía
 !
NULL
)

801  (
¨ía
);

803 
ªt
 = 
öã∫Æ
 ? 
	`tsd_üª«_gë
(
tsd
Ë: 
	`tsd_¨ía_gë
(tsd);

804 i‡(
	`u∆ikñy
(
ªt
 =
NULL
))

805 
ªt
 = 
	`¨ía_choo£_h¨d
(
tsd
, 
öã∫Æ
);

807  (
ªt
);

808 
	}
}

810 
JEMALLOC_INLINE
 
¨ía_t
 *

811 
	$¨ía_choo£
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
)

814  (
	`¨ía_choo£_im∂
(
tsd
, 
¨ía
, 
Ál£
));

815 
	}
}

817 
JEMALLOC_INLINE
 
¨ía_t
 *

818 
	$¨ía_ichoo£
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

821 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
¨ía
 !
NULL
);

823 i‡(!
	`tsdn_nuŒ
(
tsdn
))

824  (
	`¨ía_choo£_im∂
(
	`tsdn_tsd
(
tsdn
), 
NULL
, 
åue
));

825  (
¨ía
);

826 
	}
}

828 
JEMALLOC_INLINE
 
¨ía_td©a_t
 *

829 
	$¨ía_td©a_gë
(
tsd_t
 *
tsd
, 
öd
, 
boﬁ
 
ª‰esh_if_missög
)

831 
¨ía_td©a_t
 *
td©a
;

832 
¨ía_td©a_t
 *
¨ías_td©a
 = 
	`tsd_¨ías_td©a_gë
(
tsd
);

834 i‡(
	`u∆ikñy
(
¨ías_td©a
 =
NULL
)) {

836  (
	`¨ía_td©a_gë_h¨d
(
tsd
, 
öd
));

838 i‡(
	`u∆ikñy
(
öd
 >
	`tsd_«ª«s_td©a_gë
(
tsd
))) {

843  (
ª‰esh_if_missög
 ? 
	`¨ía_td©a_gë_h¨d
(
tsd
, 
öd
) :

844 
NULL
);

847 
td©a
 = &
¨ías_td©a
[
öd
];

848 i‡(
	`likñy
(
td©a
 !
NULL
Ë|| !
ª‰esh_if_missög
)

849  (
td©a
);

850  (
	`¨ía_td©a_gë_h¨d
(
tsd
, 
öd
));

851 
	}
}

853 
JEMALLOC_INLINE
 
¨ía_t
 *

854 
	$¨ía_gë
(
tsdn_t
 *
tsdn
, 
öd
, 
boﬁ
 
öô_if_missög
)

856 
¨ía_t
 *
ªt
;

858 
	`as£π
(
öd
 <
MALLOCX_ARENA_MAX
);

860 
ªt
 = 
¨ías
[
öd
];

861 i‡(
	`u∆ikñy
(
ªt
 =
NULL
)) {

862 
ªt
 = 
	`©omic_ªad_p
((*)&
¨ías
[
öd
]);

863 i‡(
öô_if_missög
 && 
	`u∆ikñy
(
ªt
 =
NULL
))

864 
ªt
 = 
	`¨ía_öô
(
tsdn
, 
öd
);

866  (
ªt
);

867 
	}
}

869 
JEMALLOC_INLINE
 
tickî_t
 *

870 
	$deˇy_tickî_gë
(
tsd_t
 *
tsd
, 
öd
)

872 
¨ía_td©a_t
 *
td©a
;

874 
td©a
 = 
	`¨ía_td©a_gë
(
tsd
, 
öd
, 
åue
);

875 i‡(
	`u∆ikñy
(
td©a
 =
NULL
))

876  (
NULL
);

877  (&
td©a
->
deˇy_tickî
);

878 
	}
}

881 
	~"jemÆloc/öã∫Æ/bôm≠.h
"

886 
	#JEMALLOC_ARENA_INLINE_A


	)

887 
	~"jemÆloc/öã∫Æ/¨ía.h
"

888 #unde‡
JEMALLOC_ARENA_INLINE_A


889 
	~"jemÆloc/öã∫Æ/tˇche.h
"

890 
	#JEMALLOC_ARENA_INLINE_B


	)

891 
	~"jemÆloc/öã∫Æ/¨ía.h
"

892 #unde‡
JEMALLOC_ARENA_INLINE_B


893 
	~"jemÆloc/öã∫Æ/hash.h
"

894 
	~"jemÆloc/öã∫Æ/qu¨™töe.h
"

896 #i‚de‡
JEMALLOC_ENABLE_INLINE


897 
¨ía_t
 *
üÆloc
(c⁄° *
±r
);

898 
size_t
 
ißŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
boﬁ
 
demŸe
);

899 *
üŒocztm
(
tsdn_t
 *
tsdn
, 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
,

900 
tˇche_t
 *
tˇche
, 
boﬁ
 
is_mëad©a
, 
¨ía_t
 *
¨ía
, boﬁ 
¶ow_∑th
);

901 *
üŒoc
(
tsd_t
 *
tsd
, 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
,

902 
boﬁ
 
¶ow_∑th
);

903 *
ùÆlocztm
(
tsdn_t
 *
tsdn
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
,

904 
tˇche_t
 *
tˇche
, 
boﬁ
 
is_mëad©a
, 
¨ía_t
 *
¨ía
);

905 *
ùÆlo˘
(
tsdn_t
 *
tsdn
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
,

906 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
);

907 *
ùÆloc
(
tsd_t
 *
tsd
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
);

908 
size_t
 
ivßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
boﬁ
 
demŸe
);

909 
size_t
 
u2rz
(size_à
usize
);

910 
size_t
 
p2rz
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

911 
idÆlo˘m
(
tsdn_t
 *
tsdn
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
is_mëad©a
,

912 
boﬁ
 
¶ow_∑th
);

913 
idÆloc
(
tsd_t
 *
tsd
, *
±r
);

914 
iqÆloc
(
tsd_t
 *
tsd
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
);

915 
isdÆlo˘
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
size
, 
tˇche_t
 *
tˇche
,

916 
boﬁ
 
¶ow_∑th
);

917 
isqÆloc
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
size
, 
tˇche_t
 *
tˇche
,

918 
boﬁ
 
¶ow_∑th
);

919 *
úÆlo˘_ªÆign
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

920 
size_t
 
exåa
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
,

921 
¨ía_t
 *
¨ía
);

922 *
úÆlo˘
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

923 
size_t
 
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
);

924 *
úÆloc
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

925 
size_t
 
Æignmít
, 
boﬁ
 
zîo
);

926 
boﬁ
 
ixÆloc
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

927 
size_t
 
exåa
, size_à
Æignmít
, 
boﬁ
 
zîo
);

930 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_C_
))

931 
JEMALLOC_ALWAYS_INLINE
 
¨ía_t
 *

932 
	$üÆloc
(c⁄° *
±r
)

935 
	`as£π
(
±r
 !
NULL
);

937  (
	`¨ía_ØŒoc
(
±r
));

938 
	}
}

946 
JEMALLOC_ALWAYS_INLINE
 
size_t


947 
	$ißŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
boﬁ
 
demŸe
)

950 
	`as£π
(
±r
 !
NULL
);

952 
	`as£π
(
c⁄fig_¥of
 || !
demŸe
);

954  (
	`¨ía_ßŒoc
(
tsdn
, 
±r
, 
demŸe
));

955 
	}
}

957 
JEMALLOC_ALWAYS_INLINE
 *

958 
	$üŒocztm
(
tsdn_t
 *
tsdn
, 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
,

959 
boﬁ
 
is_mëad©a
, 
¨ía_t
 *
¨ía
, boﬁ 
¶ow_∑th
)

961 *
ªt
;

963 
	`as£π
(
size
 != 0);

964 
	`as£π
(!
is_mëad©a
 || 
tˇche
 =
NULL
);

965 
	`as£π
(!
is_mëad©a
 || 
¨ía
 =
NULL
 ||áª«->
öd
 < 
«ª«s_auto
);

967 
ªt
 = 
	`¨ía_mÆloc
(
tsdn
, 
¨ía
, 
size
, 
öd
, 
zîo
, 
tˇche
, 
¶ow_∑th
);

968 i‡(
c⁄fig_°©s
 && 
is_mëad©a
 && 
	`likñy
(
ªt
 !
NULL
)) {

969 
	`¨ía_mëad©a_Æloˇãd_add
(
	`üÆloc
(
ªt
),

970 
	`ißŒoc
(
tsdn
, 
ªt
, 
c⁄fig_¥of
));

972  (
ªt
);

973 
	}
}

975 
JEMALLOC_ALWAYS_INLINE
 *

976 
	$üŒoc
(
tsd_t
 *
tsd
, 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
, boﬁ 
¶ow_∑th
)

979  (
	`üŒocztm
(
	`tsd_tsdn
(
tsd
), 
size
, 
öd
, 
zîo
, 
	`tˇche_gë
—sd, 
åue
),

980 
Ál£
, 
NULL
, 
¶ow_∑th
));

981 
	}
}

983 
JEMALLOC_ALWAYS_INLINE
 *

984 
	$ùÆlocztm
(
tsdn_t
 *
tsdn
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
,

985 
tˇche_t
 *
tˇche
, 
boﬁ
 
is_mëad©a
, 
¨ía_t
 *
¨ía
)

987 *
ªt
;

989 
	`as£π
(
usize
 != 0);

990 
	`as£π
(
usize
 =
	`ß2u
(usize, 
Æignmít
));

991 
	`as£π
(!
is_mëad©a
 || 
tˇche
 =
NULL
);

992 
	`as£π
(!
is_mëad©a
 || 
¨ía
 =
NULL
 ||áª«->
öd
 < 
«ª«s_auto
);

994 
ªt
 = 
	`¨ía_∑Œoc
(
tsdn
, 
¨ía
, 
usize
, 
Æignmít
, 
zîo
, 
tˇche
);

995 
	`as£π
(
	`ALIGNMENT_ADDR2BASE
(
ªt
, 
Æignmít
) ==Ñet);

996 i‡(
c⁄fig_°©s
 && 
is_mëad©a
 && 
	`likñy
(
ªt
 !
NULL
)) {

997 
	`¨ía_mëad©a_Æloˇãd_add
(
	`üÆloc
(
ªt
), 
	`ißŒoc
(
tsdn
,Ñet,

998 
c⁄fig_¥of
));

1000  (
ªt
);

1001 
	}
}

1003 
JEMALLOC_ALWAYS_INLINE
 *

1004 
	$ùÆlo˘
(
tsdn_t
 *
tsdn
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
,

1005 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
)

1008  (
	`ùÆlocztm
(
tsdn
, 
usize
, 
Æignmít
, 
zîo
, 
tˇche
, 
Ál£
, 
¨ía
));

1009 
	}
}

1011 
JEMALLOC_ALWAYS_INLINE
 *

1012 
	$ùÆloc
(
tsd_t
 *
tsd
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
)

1015  (
	`ùÆlocztm
(
	`tsd_tsdn
(
tsd
), 
usize
, 
Æignmít
, 
zîo
,

1016 
	`tˇche_gë
(
tsd
, 
åue
), 
Ál£
, 
NULL
));

1017 
	}
}

1019 
JEMALLOC_ALWAYS_INLINE
 
size_t


1020 
	$ivßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
boﬁ
 
demŸe
)

1022 
exã¡_node_t
 *
node
;

1025 
node
 = 
	`chunk_lookup
(
±r
, 
Ál£
);

1026 i‡(
node
 =
NULL
)

1029 
	`as£π
(
	`exã¡_node_addr_gë
(
node
Ë=
±r
 ||

1030 
	`exã¡_node_achunk_gë
(
node
));

1032  (
	`ißŒoc
(
tsdn
, 
±r
, 
demŸe
));

1033 
	}
}

1035 
JEMALLOC_INLINE
 
size_t


1036 
	$u2rz
(
size_t
 
usize
)

1038 
size_t
 
ªt
;

1040 i‡(
usize
 <
SMALL_MAXCLASS
) {

1041 
szöd_t
 
bööd
 = 
	`size2ödex
(
usize
);

1042 
ªt
 = 
¨ía_bö_öfo
[
bööd
].
ªdz⁄e_size
;

1044 
ªt
 = 0;

1046  (
ªt
);

1047 
	}
}

1049 
JEMALLOC_INLINE
 
size_t


1050 
	$p2rz
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

1052 
size_t
 
usize
 = 
	`ißŒoc
(
tsdn
, 
±r
, 
Ál£
);

1054  (
	`u2rz
(
usize
));

1055 
	}
}

1057 
JEMALLOC_ALWAYS_INLINE
 

1058 
	$idÆlo˘m
(
tsdn_t
 *
tsdn
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
is_mëad©a
,

1059 
boﬁ
 
¶ow_∑th
)

1062 
	`as£π
(
±r
 !
NULL
);

1063 
	`as£π
(!
is_mëad©a
 || 
tˇche
 =
NULL
);

1064 
	`as£π
(!
is_mëad©a
 || 
	`üÆloc
(
±r
)->
öd
 < 
«ª«s_auto
);

1065 i‡(
c⁄fig_°©s
 && 
is_mëad©a
) {

1066 
	`¨ía_mëad©a_Æloˇãd_sub
(
	`üÆloc
(
±r
), 
	`ißŒoc
(
tsdn
,Ötr,

1067 
c⁄fig_¥of
));

1070 
	`¨ía_dÆloc
(
tsdn
, 
±r
, 
tˇche
, 
¶ow_∑th
);

1071 
	}
}

1073 
JEMALLOC_ALWAYS_INLINE
 

1074 
	$idÆloc
(
tsd_t
 *
tsd
, *
±r
)

1077 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
±r
, 
	`tˇche_gë
—sd, 
Ál£
), fÆ£, 
åue
);

1078 
	}
}

1080 
JEMALLOC_ALWAYS_INLINE
 

1081 
	$iqÆloc
(
tsd_t
 *
tsd
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
)

1084 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_qu¨™töe
))

1085 
	`qu¨™töe
(
tsd
, 
±r
);

1087 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
±r
, 
tˇche
, 
Ál£
, 
¶ow_∑th
);

1088 
	}
}

1090 
JEMALLOC_ALWAYS_INLINE
 

1091 
	$isdÆlo˘
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
size
, 
tˇche_t
 *
tˇche
,

1092 
boﬁ
 
¶ow_∑th
)

1095 
	`¨ía_sdÆloc
(
tsdn
, 
±r
, 
size
, 
tˇche
, 
¶ow_∑th
);

1096 
	}
}

1098 
JEMALLOC_ALWAYS_INLINE
 

1099 
	$isqÆloc
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
size
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
)

1102 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_qu¨™töe
))

1103 
	`qu¨™töe
(
tsd
, 
±r
);

1105 
	`isdÆlo˘
(
	`tsd_tsdn
(
tsd
), 
±r
, 
size
, 
tˇche
, 
¶ow_∑th
);

1106 
	}
}

1108 
JEMALLOC_ALWAYS_INLINE
 *

1109 
	$úÆlo˘_ªÆign
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

1110 
size_t
 
exåa
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
)

1112 *
p
;

1113 
size_t
 
usize
, 
c›ysize
;

1115 
usize
 = 
	`ß2u
(
size
 + 
exåa
, 
Æignmít
);

1116 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
))

1117  (
NULL
);

1118 
p
 = 
	`ùÆlo˘
(
	`tsd_tsdn
(
tsd
), 
usize
, 
Æignmít
, 
zîo
, 
tˇche
, 
¨ía
);

1119 i‡(
p
 =
NULL
) {

1120 i‡(
exåa
 == 0)

1121  (
NULL
);

1123 
usize
 = 
	`ß2u
(
size
, 
Æignmít
);

1124 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
))

1125  (
NULL
);

1126 
p
 = 
	`ùÆlo˘
(
	`tsd_tsdn
(
tsd
), 
usize
, 
Æignmít
, 
zîo
, 
tˇche
,

1127 
¨ía
);

1128 i‡(
p
 =
NULL
)

1129  (
NULL
);

1135 
c›ysize
 = (
size
 < 
ﬁdsize
) ? size : oldsize;

1136 
	`mem˝y
(
p
, 
±r
, 
c›ysize
);

1137 
	`isqÆloc
(
tsd
, 
±r
, 
ﬁdsize
, 
tˇche
, 
åue
);

1138  (
p
);

1139 
	}
}

1141 
JEMALLOC_ALWAYS_INLINE
 *

1142 
	$úÆlo˘
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
, size_à
Æignmít
,

1143 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
)

1146 
	`as£π
(
±r
 !
NULL
);

1147 
	`as£π
(
size
 != 0);

1149 i‡(
Æignmít
 !0 && ((
uöçå_t
)
±r
 & ((uintptr_t)alignment-1))

1155  (
	`úÆlo˘_ªÆign
(
tsd
, 
±r
, 
ﬁdsize
, 
size
, 0, 
Æignmít
,

1156 
zîo
, 
tˇche
, 
¨ía
));

1159  (
	`¨ía_øŒoc
(
tsd
, 
¨ía
, 
±r
, 
ﬁdsize
, 
size
, 
Æignmít
, 
zîo
,

1160 
tˇche
));

1161 
	}
}

1163 
JEMALLOC_ALWAYS_INLINE
 *

1164 
	$úÆloc
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
, size_à
Æignmít
,

1165 
boﬁ
 
zîo
)

1168  (
	`úÆlo˘
(
tsd
, 
±r
, 
ﬁdsize
, 
size
, 
Æignmít
, 
zîo
,

1169 
	`tˇche_gë
(
tsd
, 
åue
), 
NULL
));

1170 
	}
}

1172 
JEMALLOC_ALWAYS_INLINE
 
boﬁ


1173 
	$ixÆloc
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
, size_à
exåa
,

1174 
size_t
 
Æignmít
, 
boﬁ
 
zîo
)

1177 
	`as£π
(
±r
 !
NULL
);

1178 
	`as£π
(
size
 != 0);

1180 i‡(
Æignmít
 !0 && ((
uöçå_t
)
±r
 & ((uintptr_t)alignment-1))

1183  (
åue
);

1186  (
	`¨ía_øŒoc_no_move
(
tsdn
, 
±r
, 
ﬁdsize
, 
size
, 
exåa
, 
zîo
));

1187 
	}
}

1190 
	~"jemÆloc/öã∫Æ/¥of.h
"

1192 #unde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal_decls.h

1 #i‚de‡
JEMALLOC_INTERNAL_DECLS_H


2 
	#JEMALLOC_INTERNAL_DECLS_H


	)

4 
	~<m©h.h
>

5 #ifde‡
_WIN32


6 
	~<wödows.h
>

7 
	~"msvc_com∑t/wödows_exåa.h
"

10 
	~<sys/∑øm.h
>

11 
	~<sys/mm™.h
>

12 #i‡!
deföed
(
__≤a˛__
Ë&& !deföed(
__«tive_˛õ¡__
)

13 
	~<sys/sysˇŒ.h
>

14 #i‡!
deföed
(
SYS_wrôe
Ë&& deföed(
__NR_wrôe
)

15 
	#SYS_wrôe
 
__NR_wrôe


	)

17 
	~<sys/uio.h
>

19 
	~<±hªad.h
>

20 
	~<î∫o.h
>

21 
	~<sys/time.h
>

23 
	~<sys/ty≥s.h
>

25 
	~<limôs.h
>

26 #i‚de‡
SIZE_T_MAX


27 
	#SIZE_T_MAX
 
SIZE_MAX


	)

29 
	~<°d¨g.h
>

30 
	~<°dboﬁ.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°döt.h
>

34 
	~<°ddef.h
>

35 #i‚de‡
off£tof


36 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
)&((—y≥ *)
NULL
)->membî))

	)

38 
	~<°rög.h
>

39 
	~<°rögs.h
>

40 
	~<˘y≥.h
>

41 #ifde‡
_MSC_VER


42 
	~<io.h
>

43 
öçå_t
 
	tssize_t
;

44 
	#PATH_MAX
 1024

	)

45 
	#STDERR_FILENO
 2

	)

46 
	#__func__
 
__FUNCTION__


	)

47 #ifde‡
JEMALLOC_HAS_RESTRICT


48 
	#ª°ri˘
 
__ª°ri˘


	)

51 #¥agm®
w¨nög
(
dißbÀ
: 4996)

52 #i‡
_MSC_VER
 < 1800

54 
	$isbœnk
(
c
)

57  (
c
 == '\t' || c == ' ');

58 
	}
}

61 
	~<uni°d.h
>

63 
	~<f˙é.h
>

	@dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal_defs.h

2 #i‚de‡
JEMALLOC_INTERNAL_DEFS_H_


3 
	#JEMALLOC_INTERNAL_DEFS_H_


	)

9 
	#JEMALLOC_PREFIX
 "je_"

	)

10 
	#JEMALLOC_CPREFIX
 "JE_"

	)

18 
	#JEMALLOC_PRIVATE_NAMESPACE
 
je_


	)

24 
	#CPU_SPINWAIT
 
__asm__
 vﬁ©ûe("∑u£")

	)

57 
	#JEMALLOC_HAVE_BUILTIN_CLZ


	)

62 
	#JEMALLOC_HAVE_MADVISE


	)

73 
	#JEMALLOC_HAVE_SECURE_GETENV


	)

94 
	#JEMALLOC_THREADED_INIT


	)

104 
	#JEMALLOC_TLS_MODEL
 
	`__©åibuã__
((
	`és_modñ
("öôül-exec")))

	)

107 
	#JEMALLOC_CC_SILENCE


	)

119 
	#JEMALLOC_STATS


	)

138 
	#JEMALLOC_TCACHE


	)

144 
	#JEMALLOC_DSS


	)

147 
	#JEMALLOC_FILL


	)

162 
	#LG_TINY_MIN
 3

	)

171 
	#LG_PAGE
 12

	)

180 
	#JEMALLOC_MAPS_COALESCE


	)

190 
	#JEMALLOC_TLS


	)

196 
	#JEMALLOC_INTERNAL_FFSLL
 
__buûtö_ff¶l


	)

197 
	#JEMALLOC_INTERNAL_FFSL
 
__buûtö_ff¶


	)

198 
	#JEMALLOC_INTERNAL_FFS
 
__buûtö_ffs


	)

210 
	#JEMALLOC_CACHE_OBLIVIOUS


	)

225 
	#JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY


	)

237 
	#JEMALLOC_PURGE_MADVISE_DONTNEED


	)

241 
	#JEMALLOC_HAS_ALLOCA_H
 1

	)

244 
	#JEMALLOC_HAS_RESTRICT
 1

	)

250 
	#LG_SIZEOF_INT
 2

	)

253 
	#LG_SIZEOF_LONG
 3

	)

256 
	#LG_SIZEOF_LONG_LONG
 3

	)

259 
	#LG_SIZEOF_INTMAX_T
 3

	)

262 
	#JEMALLOC_GLIBC_MALLOC_HOOK


	)

265 
	#JEMALLOC_GLIBC_MEMALIGN_HOOK


	)

268 
	#JEMALLOC_HAVE_PTHREAD_MUTEX_ADAPTIVE_NP


	)

277 
	#JEMALLOC_CONFIG_MALLOC_CONF
 ""

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal_macros.h

10 #i‡
deföed
(
JEMALLOC_DEBUG
Ë|| deföed(
JEMALLOC_CODE_COVERAGE
)

12 
	#JEMALLOC_ALWAYS_INLINE


	)

13 
	#JEMALLOC_ALWAYS_INLINE_C
 

	)

14 
	#JEMALLOC_INLINE


	)

15 
	#JEMALLOC_INLINE_C
 

	)

16 
	#ölöe


	)

18 
	#JEMALLOC_ENABLE_INLINE


	)

19 #ifde‡
JEMALLOC_HAVE_ATTR


20 
	#JEMALLOC_ALWAYS_INLINE
 \

21 
ölöe
 
	`JEMALLOC_ATTR
(
unu£d
ËJEMALLOC_ATTR(
Æways_ölöe
)

	)

22 
	#JEMALLOC_ALWAYS_INLINE_C
 \

23 
ölöe
 
	`JEMALLOC_ATTR
(
Æways_ölöe
)

	)

25 
	#JEMALLOC_ALWAYS_INLINE
 
ölöe


	)

26 
	#JEMALLOC_ALWAYS_INLINE_C
 
ölöe


	)

28 
	#JEMALLOC_INLINE
 
ölöe


	)

29 
	#JEMALLOC_INLINE_C
 
ölöe


	)

30 #ifde‡
_MSC_VER


31 
	#ölöe
 
_ölöe


	)

35 #ifde‡
JEMALLOC_CC_SILENCE


36 
	#UNUSED
 
	`JEMALLOC_ATTR
(
unu£d
)

	)

38 
	#UNUSED


	)

41 
	#ZU
(
z
Ë((
size_t
)z)

	)

42 
	#ZI
(
z
Ë((
ssize_t
)z)

	)

43 
	#QU
(
q
Ë((
uöt64_t
)q)

	)

44 
	#QI
(
q
Ë((
öt64_t
)q)

	)

46 
	#KZU
(
z
Ë
	`ZU
(z##
ULL
)

	)

47 
	#KZI
(
z
Ë
	`ZI
(z##
LL
)

	)

48 
	#KQU
(
q
Ë
	`QU
(q##
ULL
)

	)

49 
	#KQI
(
q
Ë
	`QI
(q##
LL
)

	)

51 #i‚de‡
__DECONST


52 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° *)(v¨))

	)

55 #i‚de‡
JEMALLOC_HAS_RESTRICT


56 
	#ª°ri˘


	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/mb.h

2 #ifde‡
JEMALLOC_H_TYPES


6 #ifde‡
JEMALLOC_H_STRUCTS


10 #ifde‡
JEMALLOC_H_EXTERNS


14 #ifde‡
JEMALLOC_H_INLINES


16 #i‚de‡
JEMALLOC_ENABLE_INLINE


17 
mb_wrôe
();

20 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_MB_C_
))

21 #ifde‡
__i386__


31 
JEMALLOC_INLINE
 

32 
	$mb_wrôe
()

37 
asm
 volatile ("pusha;"

50 
asm
 volatile ("nop;"

56 
	}
}

57 #ñi‡(
deföed
(
__amd64__
Ë|| deföed(
__x86_64__
))

58 
JEMALLOC_INLINE
 

59 
	$mb_wrôe
()

62 
asm
 volatile ("sfence"

67 
	}
}

68 #ñi‡
deföed
(
__powîpc__
)

69 
JEMALLOC_INLINE
 

70 
	$mb_wrôe
()

73 
asm
 volatile ("eieio"

78 
	}
}

79 #ñi‡
deföed
(
__•¨c64__
)

80 
JEMALLOC_INLINE
 

81 
	$mb_wrôe
()

84 
asm
 volatile ("membar #StoreStore"

89 
	}
}

90 #ñi‡
deföed
(
__tûe__
)

91 
JEMALLOC_INLINE
 

92 
	$mb_wrôe
()

95 
	`__sync_synchr⁄ize
();

96 
	}
}

102 
JEMALLOC_INLINE
 

103 
	$mb_wrôe
()

105 
mÆloc_muãx_t
 
mtx
;

107 
	`mÆloc_muãx_öô
(&
mtx
, "mb", 
WITNESS_RANK_OMIT
);

108 
	`mÆloc_muãx_lock
(
NULL
, &
mtx
);

109 
	`mÆloc_muãx_u∆ock
(
NULL
, &
mtx
);

110 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/mutex.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
mÆloc_muãx_s
 
	tmÆloc_muãx_t
;

6 #ifde‡
_WIN32


7 
	#MALLOC_MUTEX_INITIALIZER


	)

8 #ñi‡(
deföed
(
JEMALLOC_OSSPIN
))

9 
	#MALLOC_MUTEX_INITIALIZER
 {0, 
	`WITNESS_INITIALIZER
(
WITNESS_RANK_OMIT
)}

	)

10 #ñi‡(
deföed
(
JEMALLOC_MUTEX_INIT_CB
))

11 
	#MALLOC_MUTEX_INITIALIZER
 \

12 {
PTHREAD_MUTEX_INITIALIZER
, 
NULL
, 
	`WITNESS_INITIALIZER
(
WITNESS_RANK_OMIT
)}

	)

14 #i‡(
deföed
(
JEMALLOC_HAVE_PTHREAD_MUTEX_ADAPTIVE_NP
) && \

15 
	$deföed
(
PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
))

16 
	#MALLOC_MUTEX_TYPE
 
PTHREAD_MUTEX_ADAPTIVE_NP


	)

17 
	#MALLOC_MUTEX_INITIALIZER
 \

18 {
PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
, \

19 
	`WITNESS_INITIALIZER
(
WITNESS_RANK_OMIT
)
	}

	)
}

21 
	#MALLOC_MUTEX_TYPE
 
PTHREAD_MUTEX_DEFAULT


	)

22 
	#MALLOC_MUTEX_INITIALIZER
 \

23 {
PTHREAD_MUTEX_INITIALIZER
, 
	`WITNESS_INITIALIZER
(
WITNESS_RANK_OMIT
)}

	)

29 #ifde‡
JEMALLOC_H_STRUCTS


31 
	smÆloc_muãx_s
 {

32 #ifde‡
_WIN32


33 #i‡
_WIN32_WINNT
 >= 0x0600

34 
SRWLOCK
 
	mlock
;

36 
CRITICAL_SECTION
 
	mlock
;

38 #ñi‡(
deföed
(
JEMALLOC_OSSPIN
))

39 
OSSpöLock
 
	mlock
;

40 #ñi‡(
deföed
(
JEMALLOC_MUTEX_INIT_CB
))

41 
±hªad_muãx_t
 
	mlock
;

42 
mÆloc_muãx_t
 *
	mpo°p⁄ed_√xt
;

44 
±hªad_muãx_t
 
	mlock
;

46 
wô√ss_t
 
	mwô√ss
;

51 #ifde‡
JEMALLOC_H_EXTERNS


53 #ifde‡
JEMALLOC_LAZY_LOCK


54 
boﬁ
 
i°hªaded
;

56 #unde‡
i°hªaded


57 
	#i°hªaded
 
åue


	)

60 
boﬁ
 
mÆloc_muãx_öô
(
mÆloc_muãx_t
 *
muãx
, c⁄° *
«me
,

61 
wô√ss_ønk_t
 
ønk
);

62 
mÆloc_muãx_¥ef‹k
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

63 
mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

64 
mÆloc_muãx_po°f‹k_chûd
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

65 
boﬁ
 
mÆloc_muãx_boŸ
();

69 #ifde‡
JEMALLOC_H_INLINES


71 #i‚de‡
JEMALLOC_ENABLE_INLINE


72 
mÆloc_muãx_lock
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

73 
mÆloc_muãx_u∆ock
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

74 
mÆloc_muãx_as£π_ow√r
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

75 
mÆloc_muãx_as£π_nŸ_ow√r
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
);

78 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_MUTEX_C_
))

79 
JEMALLOC_INLINE
 

80 
	$mÆloc_muãx_lock
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

83 i‡(
i°hªaded
) {

84 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
muãx
->
wô√ss
);

85 #ifde‡
_WIN32


86 #i‡
_WIN32_WINNT
 >= 0x0600

87 
	`AcquúeSRWLockEx˛usive
(&
muãx
->
lock
);

89 
	`E¡îCrôiˇlSe˘i⁄
(&
muãx
->
lock
);

91 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

92 
	`OSSpöLockLock
(&
muãx
->
lock
);

94 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

96 
	`wô√ss_lock
(
tsdn
, &
muãx
->
wô√ss
);

98 
	}
}

100 
JEMALLOC_INLINE
 

101 
	$mÆloc_muãx_u∆ock
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

104 i‡(
i°hªaded
) {

105 
	`wô√ss_u∆ock
(
tsdn
, &
muãx
->
wô√ss
);

106 #ifde‡
_WIN32


107 #i‡
_WIN32_WINNT
 >= 0x0600

108 
	`Rñó£SRWLockEx˛usive
(&
muãx
->
lock
);

110 
	`LóveCrôiˇlSe˘i⁄
(&
muãx
->
lock
);

112 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

113 
	`OSSpöLockU∆ock
(&
muãx
->
lock
);

115 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

118 
	}
}

120 
JEMALLOC_INLINE
 

121 
	$mÆloc_muãx_as£π_ow√r
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

124 i‡(
i°hªaded
)

125 
	`wô√ss_as£π_ow√r
(
tsdn
, &
muãx
->
wô√ss
);

126 
	}
}

128 
JEMALLOC_INLINE
 

129 
	$mÆloc_muãx_as£π_nŸ_ow√r
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

132 i‡(
i°hªaded
)

133 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
muãx
->
wô√ss
);

134 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/nstime.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
	#JEMALLOC_CLOCK_GETTIME
 
	`deföed
(
_POSIX_MONOTONIC_CLOCK
) \

5 && 
_POSIX_MONOTONIC_CLOCK
 >0

	)

7 
n°ime_s
 
	tn°ime_t
;

10 
	#NSTIME_SEC_MAX
 
	`KQU
(18446744072)

	)

14 #ifde‡
JEMALLOC_H_STRUCTS


16 
	sn°ime_s
 {

17 
uöt64_t
 
	mns
;

22 #ifde‡
JEMALLOC_H_EXTERNS


24 
n°ime_öô
(
n°ime_t
 *
time
, 
uöt64_t
 
ns
);

25 
n°ime_öô2
(
n°ime_t
 *
time
, 
uöt64_t
 
£c
, uöt64_à
n£c
);

26 
uöt64_t
 
n°ime_ns
(c⁄° 
n°ime_t
 *
time
);

27 
uöt64_t
 
n°ime_£c
(c⁄° 
n°ime_t
 *
time
);

28 
uöt64_t
 
n°ime_n£c
(c⁄° 
n°ime_t
 *
time
);

29 
n°ime_c›y
(
n°ime_t
 *
time
, c⁄°Ç°ime_à*
sour˚
);

30 
n°ime_com∑ª
(c⁄° 
n°ime_t
 *
a
, c⁄°Ç°ime_à*
b
);

31 
n°ime_add
(
n°ime_t
 *
time
, c⁄°Ç°ime_à*
addíd
);

32 
n°ime_subåa˘
(
n°ime_t
 *
time
, c⁄°Ç°ime_à*
subåahíd
);

33 
n°ime_imu…ùly
(
n°ime_t
 *
time
, 
uöt64_t
 
mu…ùlõr
);

34 
n°ime_idivide
(
n°ime_t
 *
time
, 
uöt64_t
 
divis‹
);

35 
uöt64_t
 
n°ime_divide
(c⁄° 
n°ime_t
 *
time
, c⁄°Ç°ime_à*
divis‹
);

36 #ifde‡
JEMALLOC_JET


37 
	$boﬁ
 (
	tn°ime_upd©e_t
)(
	tn°ime_t
 *);

38 
n°ime_upd©e_t
 *
n°ime_upd©e
;

40 
boﬁ
 
	`n°ime_upd©e
(
n°ime_t
 *
time
);

45 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/pages.h

2 #ifde‡
JEMALLOC_H_TYPES


6 #ifde‡
JEMALLOC_H_STRUCTS


10 #ifde‡
JEMALLOC_H_EXTERNS


12 *
∑ges_m≠
(*
addr
, 
size_t
 
size
, 
boﬁ
 *
commô
);

13 
∑ges_unm≠
(*
addr
, 
size_t
 
size
);

14 *
∑ges_åim
(*
addr
, 
size_t
 
Æloc_size
, size_à
Àadsize
,

15 
size_t
 
size
, 
boﬁ
 *
commô
);

16 
boﬁ
 
∑ges_commô
(*
addr
, 
size_t
 
size
);

17 
boﬁ
 
∑ges_decommô
(*
addr
, 
size_t
 
size
);

18 
boﬁ
 
∑ges_purge
(*
addr
, 
size_t
 
size
);

19 
∑ges_boŸ
();

23 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/ph.h

15 #i‚de‡
PH_H_


16 
	#PH_H_


	)

19 
	#phn
(
a_ty≥
) \

21 
a_ty≥
 *
phn_¥ev
; \

22 
a_ty≥
 *
phn_√xt
; \

23 
a_ty≥
 *
phn_lchûd
; \

24 }

	)

27 
	#ph
(
a_ty≥
) \

29 
a_ty≥
 *
ph_roŸ
; \

30 }

	)

33 
	#phn_lchûd_gë
(
a_ty≥
, 
a_fõld
, 
a_phn
) \

34 (
a_phn
->
a_fõld
.
phn_lchûd
)

	)

35 
	#phn_lchûd_£t
(
a_ty≥
, 
a_fõld
, 
a_phn
, 
a_lchûd
) do { \

36 
a_phn
->
a_fõld
.
phn_lchûd
 = 
a_lchûd
; \

37 } 0)

	)

39 
	#phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
a_phn
) \

40 (
a_phn
->
a_fõld
.
phn_√xt
)

	)

41 
	#phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
a_phn
, 
a_¥ev
) do { \

42 
a_phn
->
a_fõld
.
phn_¥ev
 = 
a_¥ev
; \

43 } 0)

	)

45 
	#phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
a_phn
) \

46 (
a_phn
->
a_fõld
.
phn_¥ev
)

	)

47 
	#phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
a_phn
, 
a_√xt
) do { \

48 
a_phn
->
a_fõld
.
phn_√xt
 = 
a_√xt
; \

49 } 0)

	)

51 
	#phn_mîge_‹dîed
(
a_ty≥
, 
a_fõld
, 
a_phn0
, 
a_phn1
, 
a_cmp
) do { \

52 
a_ty≥
 *
phn0chûd
; \

54 
	`as£π
(
a_phn0
 !
NULL
); \

55 
	`as£π
(
a_phn1
 !
NULL
); \

56 
	`as£π
(
	`a_cmp
(
a_phn0
, 
a_phn1
) <= 0); \

58 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
a_phn1
, 
a_phn0
); \

59 
phn0chûd
 = 
	`phn_lchûd_gë
(
a_ty≥
, 
a_fõld
, 
a_phn0
); \

60 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
a_phn1
, 
phn0chûd
); \

61 i‡(
phn0chûd
 !
NULL
) \

62 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn0chûd
, 
a_phn1
); \

63 
	`phn_lchûd_£t
(
a_ty≥
, 
a_fõld
, 
a_phn0
, 
a_phn1
); \

64 } 0)

	)

66 
	#phn_mîge
(
a_ty≥
, 
a_fõld
, 
a_phn0
, 
a_phn1
, 
a_cmp
, 
r_phn
) do { \

67 i‡(
a_phn0
 =
NULL
) \

68 
r_phn
 = 
a_phn1
; \

69 i‡(
a_phn1
 =
NULL
) \

70 
r_phn
 = 
a_phn0
; \

71 i‡(
	`a_cmp
(
a_phn0
, 
a_phn1
) < 0) { \

72 
	`phn_mîge_‹dîed
(
a_ty≥
, 
a_fõld
, 
a_phn0
, 
a_phn1
, \

73 
a_cmp
); \

74 
r_phn
 = 
a_phn0
; \

76 
	`phn_mîge_‹dîed
(
a_ty≥
, 
a_fõld
, 
a_phn1
, 
a_phn0
, \

77 
a_cmp
); \

78 
r_phn
 = 
a_phn1
; \

80 } 0)

	)

82 
	#ph_mîge_siblögs
(
a_ty≥
, 
a_fõld
, 
a_phn
, 
a_cmp
, 
r_phn
) do { \

83 
a_ty≥
 *
hód
 = 
NULL
; \

84 
a_ty≥
 *
èû
 = 
NULL
; \

85 
a_ty≥
 *
phn0
 = 
a_phn
; \

86 
a_ty≥
 *
phn1
 = 
	`phn_√xt_gë
◊_ty≥, 
a_fõld
, 
phn0
); \

96 i‡(
phn1
 !
NULL
) { \

97 
a_ty≥
 *
phƒe°
 = 
	`phn_√xt_gë
◊_ty≥, 
a_fõld
, 
phn1
); \

98 i‡(
phƒe°
 !
NULL
) \

99 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phƒe°
, 
NULL
); \

100 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn0
, 
NULL
); \

101 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn0
, 
NULL
); \

102 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn1
, 
NULL
); \

103 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn1
, 
NULL
); \

104 
	`phn_mîge
(
a_ty≥
, 
a_fõld
, 
phn0
, 
phn1
, 
a_cmp
,Öhn0); \

105 
hód
 = 
èû
 = 
phn0
; \

106 
phn0
 = 
phƒe°
; \

107 
phn0
 !
NULL
) { \

108 
phn1
 = 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn0
); \

109 i‡(
phn1
 !
NULL
) { \

110 
phƒe°
 = 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, \

111 
phn1
); \

112 i‡(
phƒe°
 !
NULL
) { \

113 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, \

114 
phƒe°
, 
NULL
); \

116 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn0
, \

117 
NULL
); \

118 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn0
, \

119 
NULL
); \

120 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn1
, \

121 
NULL
); \

122 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn1
, \

123 
NULL
); \

124 
	`phn_mîge
(
a_ty≥
, 
a_fõld
, 
phn0
, 
phn1
, \

125 
a_cmp
, 
phn0
); \

126 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
èû
, \

127 
phn0
); \

128 
èû
 = 
phn0
; \

129 
phn0
 = 
phƒe°
; \

131 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
èû
, \

132 
phn0
); \

133 
èû
 = 
phn0
; \

134 
phn0
 = 
NULL
; \

137 
phn0
 = 
hód
; \

138 
phn1
 = 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn0
); \

139 i‡(
phn1
 !
NULL
) { \

140 
åue
) { \

141 
hód
 = 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, \

142 
phn1
); \

143 
	`as£π
(
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, \

144 
phn0
Ë=
NULL
); \

145 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn0
, \

146 
NULL
); \

147 
	`as£π
(
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, \

148 
phn1
Ë=
NULL
); \

149 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn1
, \

150 
NULL
); \

151 
	`phn_mîge
(
a_ty≥
, 
a_fõld
, 
phn0
, 
phn1
, \

152 
a_cmp
, 
phn0
); \

153 i‡(
hód
 =
NULL
) \

155 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
èû
, \

156 
phn0
); \

157 
èû
 = 
phn0
; \

158 
phn0
 = 
hód
; \

159 
phn1
 = 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, \

160 
phn0
); \

164 
r_phn
 = 
phn0
; \

165 } 0)

	)

167 
	#ph_mîge_aux
(
a_ty≥
, 
a_fõld
, 
a_ph
, 
a_cmp
) do { \

168 
a_ty≥
 *
phn
 = 
	`phn_√xt_gë
◊_ty≥, 
a_fõld
, 
a_ph
->
ph_roŸ
); \

169 i‡(
phn
 !
NULL
) { \

170 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
a_ph
->
ph_roŸ
, 
NULL
); \

171 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
a_ph
->
ph_roŸ
, 
NULL
); \

172 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn
, 
NULL
); \

173 
	`ph_mîge_siblögs
(
a_ty≥
, 
a_fõld
, 
phn
, 
a_cmp
,Öhn); \

174 
	`as£π
(
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
Ë=
NULL
); \

175 
	`phn_mîge
(
a_ty≥
, 
a_fõld
, 
a_ph
->
ph_roŸ
, 
phn
, 
a_cmp
, \

176 
a_ph
->
ph_roŸ
); \

178 } 0)

	)

180 
	#ph_mîge_chûdªn
(
a_ty≥
, 
a_fõld
, 
a_phn
, 
a_cmp
, 
r_phn
) do { \

181 
a_ty≥
 *
lchûd
 = 
	`phn_lchûd_gë
◊_ty≥, 
a_fõld
, 
a_phn
); \

182 i‡(
lchûd
 =
NULL
) \

183 
r_phn
 = 
NULL
; \

185 
	`ph_mîge_siblögs
(
a_ty≥
, 
a_fõld
, 
lchûd
, 
a_cmp
, \

186 
r_phn
); \

188 } 0)

	)

194 
	#ph_¥Ÿo
(
a_©å
, 
a_¥efix
, 
a_ph_ty≥
, 
a_ty≥
) \

195 
a_©å
 
a_¥efix
##
	`√w
(
a_ph_ty≥
 *
ph
); \

196 
a_©å
 
boﬁ
 
a_¥efix
##
	`em±y
(
a_ph_ty≥
 *
ph
); \

197 
a_©å
 
a_ty≥
 *
a_¥efix
##
	`fú°
(
a_ph_ty≥
 *
ph
); \

198 
a_©å
 
a_¥efix
##
	`ö£π
(
a_ph_ty≥
 *
ph
, 
a_ty≥
 *
phn
); \

199 
a_©å
 
a_ty≥
 *
a_¥efix
##
	`ªmove_fú°
(
a_ph_ty≥
 *
ph
); \

200 
a_©å
 
a_¥efix
##
	`ªmove
(
a_ph_ty≥
 *
ph
, 
a_ty≥
 *
phn
);

	)

206 
	#ph_gí
(
a_©å
, 
a_¥efix
, 
a_ph_ty≥
, 
a_ty≥
, 
a_fõld
, 
a_cmp
) \

207 
a_©å
 \

208 
a_¥efix
##
	`√w
(
a_ph_ty≥
 *
ph
) \

211 
	`mem£t
(
ph
, 0, (
	`ph
(
a_ty≥
))); \

213 
a_©å
 
boﬁ
 \

214 
a_¥efix
##
	`em±y
(
a_ph_ty≥
 *
ph
) \

217  (
ph
->
ph_roŸ
 =
NULL
); \

219 
a_©å
 
a_ty≥
 * \

220 
a_¥efix
##
	`fú°
(
a_ph_ty≥
 *
ph
) \

223 i‡(
ph
->
ph_roŸ
 =
NULL
) \

224  (
NULL
); \

225 
	`ph_mîge_aux
(
a_ty≥
, 
a_fõld
, 
ph
, 
a_cmp
); \

226  (
ph
->
ph_roŸ
); \

228 
a_©å
 \

229 
a_¥efix
##
	`ö£π
(
a_ph_ty≥
 *
ph
, 
a_ty≥
 *
phn
) \

232 
	`mem£t
(&
phn
->
a_fõld
, 0, (
	`phn
(
a_ty≥
))); \

242 i‡(
ph
->
ph_roŸ
 =
NULL
) \

243 
ph
->
ph_roŸ
 = 
phn
; \

245 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
phn
, 
	`phn_√xt_gë
(a_type, \

246 
a_fõld
, 
ph
->
ph_roŸ
)); \

247 i‡(
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
ph
->
ph_roŸ
) != \

248 
NULL
) { \

249 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, \

250 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
ph
->
ph_roŸ
), \

251 
phn
); \

253 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
phn
, 
ph
->
ph_roŸ
); \

254 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
ph
->
ph_roŸ
, 
phn
); \

257 
a_©å
 
a_ty≥
 * \

258 
a_¥efix
##
	`ªmove_fú°
(
a_ph_ty≥
 *
ph
) \

260 
a_ty≥
 *
ªt
; \

262 i‡(
ph
->
ph_roŸ
 =
NULL
) \

263  (
NULL
); \

264 
	`ph_mîge_aux
(
a_ty≥
, 
a_fõld
, 
ph
, 
a_cmp
); \

266 
ªt
 = 
ph
->
ph_roŸ
; \

268 
	`ph_mîge_chûdªn
(
a_ty≥
, 
a_fõld
, 
ph
->
ph_roŸ
, 
a_cmp
, \

269 
ph
->
ph_roŸ
); \

271  (
ªt
); \

273 
a_©å
 \

274 
a_¥efix
##
	`ªmove
(
a_ph_ty≥
 *
ph
, 
a_ty≥
 *
phn
) \

276 
a_ty≥
 *
ª∂a˚
, *
∑ª¡
; \

282 i‡(
ph
->
ph_roŸ
 =
phn
) { \

283 
	`ph_mîge_aux
(
a_ty≥
, 
a_fõld
, 
ph
, 
a_cmp
); \

284 i‡(
ph
->
ph_roŸ
 =
phn
) { \

285 
	`ph_mîge_chûdªn
(
a_ty≥
, 
a_fõld
, 
ph
->
ph_roŸ
, \

286 
a_cmp
, 
ph
->
ph_roŸ
); \

292 i‡((
∑ª¡
 = 
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
)Ë!
NULL
) { \

293 i‡(
	`phn_lchûd_gë
(
a_ty≥
, 
a_fõld
, 
∑ª¡
Ë!
phn
) \

294 
∑ª¡
 = 
NULL
; \

297 
	`ph_mîge_chûdªn
(
a_ty≥
, 
a_fõld
, 
phn
, 
a_cmp
, 
ª∂a˚
); \

299 i‡(
ª∂a˚
 !
NULL
) { \

300 i‡(
∑ª¡
 !
NULL
) { \

301 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
ª∂a˚
, 
∑ª¡
); \

302 
	`phn_lchûd_£t
(
a_ty≥
, 
a_fõld
, 
∑ª¡
, \

303 
ª∂a˚
); \

305 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
ª∂a˚
, \

306 
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
)); \

307 i‡(
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
) != \

308 
NULL
) { \

309 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, \

310 
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
), \

311 
ª∂a˚
); \

314 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, 
ª∂a˚
, \

315 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
)); \

316 i‡(
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
Ë!
NULL
) { \

317 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, \

318 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
), \

319 
ª∂a˚
); \

322 i‡(
∑ª¡
 !
NULL
) { \

323 
a_ty≥
 *
√xt
 = 
	`phn_√xt_gë
◊_ty≥, 
a_fõld
, \

324 
phn
); \

325 
	`phn_lchûd_£t
(
a_ty≥
, 
a_fõld
, 
∑ª¡
, 
√xt
); \

326 i‡(
√xt
 !
NULL
) { \

327 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, 
√xt
, \

328 
∑ª¡
); \

331 
	`as£π
(
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
) != \

332 
NULL
); \

333 
	`phn_√xt_£t
(
a_ty≥
, 
a_fõld
, \

334 
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
), \

335 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
)); \

337 i‡(
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
Ë!
NULL
) { \

338 
	`phn_¥ev_£t
(
a_ty≥
, 
a_fõld
, \

339 
	`phn_√xt_gë
(
a_ty≥
, 
a_fõld
, 
phn
), \

340 
	`phn_¥ev_gë
(
a_ty≥
, 
a_fõld
, 
phn
)); \

343 }

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/private_namespace.h

1 
	#a0dÆloc
 
	`JEMALLOC_N
(
a0dÆloc
)

	)

2 
	#a0mÆloc
 
	`JEMALLOC_N
(
a0mÆloc
)

	)

3 
	#¨ía_ØŒoc
 
	`JEMALLOC_N
(
¨ía_ØŒoc
)

	)

4 
	#¨ía_Æloc_junk_smÆl
 
	`JEMALLOC_N
(
¨ía_Æloc_junk_smÆl
)

	)

5 
	#¨ía_basic_°©s_mîge
 
	`JEMALLOC_N
(
¨ía_basic_°©s_mîge
)

	)

6 
	#¨ía_bö_ödex
 
	`JEMALLOC_N
(
¨ía_bö_ödex
)

	)

7 
	#¨ía_bö_öfo
 
	`JEMALLOC_N
(
¨ía_bö_öfo
)

	)

8 
	#¨ía_bô£lm_gë_c⁄°
 
	`JEMALLOC_N
(
¨ía_bô£lm_gë_c⁄°
)

	)

9 
	#¨ía_bô£lm_gë_muèbÀ
 
	`JEMALLOC_N
(
¨ía_bô£lm_gë_muèbÀ
)

	)

10 
	#¨ía_boŸ
 
	`JEMALLOC_N
(
¨ía_boŸ
)

	)

11 
	#¨ía_choo£
 
	`JEMALLOC_N
(
¨ía_choo£
)

	)

12 
	#¨ía_choo£_h¨d
 
	`JEMALLOC_N
(
¨ía_choo£_h¨d
)

	)

13 
	#¨ía_choo£_im∂
 
	`JEMALLOC_N
(
¨ía_choo£_im∂
)

	)

14 
	#¨ía_chunk_Æloc_huge
 
	`JEMALLOC_N
(
¨ía_chunk_Æloc_huge
)

	)

15 
	#¨ía_chunk_ˇche_maybe_ö£π
 
	`JEMALLOC_N
(
¨ía_chunk_ˇche_maybe_ö£π
)

	)

16 
	#¨ía_chunk_ˇche_maybe_ªmove
 
	`JEMALLOC_N
(
¨ía_chunk_ˇche_maybe_ªmove
)

	)

17 
	#¨ía_chunk_dÆloc_huge
 
	`JEMALLOC_N
(
¨ía_chunk_dÆloc_huge
)

	)

18 
	#¨ía_chunk_øŒoc_huge_ex∑nd
 
	`JEMALLOC_N
(
¨ía_chunk_øŒoc_huge_ex∑nd
)

	)

19 
	#¨ía_chunk_øŒoc_huge_shrök
 
	`JEMALLOC_N
(
¨ía_chunk_øŒoc_huge_shrök
)

	)

20 
	#¨ía_chunk_øŒoc_huge_simû¨
 
	`JEMALLOC_N
(
¨ía_chunk_øŒoc_huge_simû¨
)

	)

21 
	#¨ía_˛ónup
 
	`JEMALLOC_N
(
¨ía_˛ónup
)

	)

22 
	#¨ía_dÆloc
 
	`JEMALLOC_N
(
¨ía_dÆloc
)

	)

23 
	#¨ía_dÆloc_bö
 
	`JEMALLOC_N
(
¨ía_dÆloc_bö
)

	)

24 
	#¨ía_dÆloc_bö_junked_locked
 
	`JEMALLOC_N
(
¨ía_dÆloc_bö_junked_locked
)

	)

25 
	#¨ía_dÆloc_junk_œrge
 
	`JEMALLOC_N
(
¨ía_dÆloc_junk_œrge
)

	)

26 
	#¨ía_dÆloc_junk_smÆl
 
	`JEMALLOC_N
(
¨ía_dÆloc_junk_smÆl
)

	)

27 
	#¨ía_dÆloc_œrge
 
	`JEMALLOC_N
(
¨ía_dÆloc_œrge
)

	)

28 
	#¨ía_dÆloc_œrge_junked_locked
 
	`JEMALLOC_N
(
¨ía_dÆloc_œrge_junked_locked
)

	)

29 
	#¨ía_dÆloc_smÆl
 
	`JEMALLOC_N
(
¨ía_dÆloc_smÆl
)

	)

30 
	#¨ía_deˇy_tick
 
	`JEMALLOC_N
(
¨ía_deˇy_tick
)

	)

31 
	#¨ía_deˇy_ticks
 
	`JEMALLOC_N
(
¨ía_deˇy_ticks
)

	)

32 
	#¨ía_deˇy_time_deÁu…_gë
 
	`JEMALLOC_N
(
¨ía_deˇy_time_deÁu…_gë
)

	)

33 
	#¨ía_deˇy_time_deÁu…_£t
 
	`JEMALLOC_N
(
¨ía_deˇy_time_deÁu…_£t
)

	)

34 
	#¨ía_deˇy_time_gë
 
	`JEMALLOC_N
(
¨ía_deˇy_time_gë
)

	)

35 
	#¨ía_deˇy_time_£t
 
	`JEMALLOC_N
(
¨ía_deˇy_time_£t
)

	)

36 
	#¨ía_dss_¥ec_gë
 
	`JEMALLOC_N
(
¨ía_dss_¥ec_gë
)

	)

37 
	#¨ía_dss_¥ec_£t
 
	`JEMALLOC_N
(
¨ía_dss_¥ec_£t
)

	)

38 
	#¨ía_gë
 
	`JEMALLOC_N
(
¨ía_gë
)

	)

39 
	#¨ía_ichoo£
 
	`JEMALLOC_N
(
¨ía_ichoo£
)

	)

40 
	#¨ía_öô
 
	`JEMALLOC_N
(
¨ía_öô
)

	)

41 
	#¨ía_lg_dúty_mu…_deÁu…_gë
 
	`JEMALLOC_N
(
¨ía_lg_dúty_mu…_deÁu…_gë
)

	)

42 
	#¨ía_lg_dúty_mu…_deÁu…_£t
 
	`JEMALLOC_N
(
¨ía_lg_dúty_mu…_deÁu…_£t
)

	)

43 
	#¨ía_lg_dúty_mu…_gë
 
	`JEMALLOC_N
(
¨ía_lg_dúty_mu…_gë
)

	)

44 
	#¨ía_lg_dúty_mu…_£t
 
	`JEMALLOC_N
(
¨ía_lg_dúty_mu…_£t
)

	)

45 
	#¨ía_mÆloc
 
	`JEMALLOC_N
(
¨ía_mÆloc
)

	)

46 
	#¨ía_mÆloc_h¨d
 
	`JEMALLOC_N
(
¨ía_mÆloc_h¨d
)

	)

47 
	#¨ía_mÆloc_œrge
 
	`JEMALLOC_N
(
¨ía_mÆloc_œrge
)

	)

48 
	#¨ía_m≠bôs_Æloˇãd_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_Æloˇãd_gë
)

	)

49 
	#¨ía_m≠bôs_bööd_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_bööd_gë
)

	)

50 
	#¨ía_m≠bôs_decommôãd_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_decommôãd_gë
)

	)

51 
	#¨ía_m≠bôs_dúty_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_dúty_gë
)

	)

52 
	#¨ía_m≠bôs_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_gë
)

	)

53 
	#¨ía_m≠bôs_öã∫Æ_£t
 
	`JEMALLOC_N
(
¨ía_m≠bôs_öã∫Æ_£t
)

	)

54 
	#¨ía_m≠bôs_œrge_bööd_£t
 
	`JEMALLOC_N
(
¨ía_m≠bôs_œrge_bööd_£t
)

	)

55 
	#¨ía_m≠bôs_œrge_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_œrge_gë
)

	)

56 
	#¨ía_m≠bôs_œrge_£t
 
	`JEMALLOC_N
(
¨ía_m≠bôs_œrge_£t
)

	)

57 
	#¨ía_m≠bôs_œrge_size_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_œrge_size_gë
)

	)

58 
	#¨ía_m≠bôs_size_decode
 
	`JEMALLOC_N
(
¨ía_m≠bôs_size_decode
)

	)

59 
	#¨ía_m≠bôs_size_ícode
 
	`JEMALLOC_N
(
¨ía_m≠bôs_size_ícode
)

	)

60 
	#¨ía_m≠bôs_smÆl_runöd_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_smÆl_runöd_gë
)

	)

61 
	#¨ía_m≠bôs_smÆl_£t
 
	`JEMALLOC_N
(
¨ía_m≠bôs_smÆl_£t
)

	)

62 
	#¨ía_m≠bôs_u«Œoˇãd_£t
 
	`JEMALLOC_N
(
¨ía_m≠bôs_u«Œoˇãd_£t
)

	)

63 
	#¨ía_m≠bôs_u«Œoˇãd_size_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_u«Œoˇãd_size_gë
)

	)

64 
	#¨ía_m≠bôs_u«Œoˇãd_size_£t
 
	`JEMALLOC_N
(
¨ía_m≠bôs_u«Œoˇãd_size_£t
)

	)

65 
	#¨ía_m≠bôs_unzî€d_gë
 
	`JEMALLOC_N
(
¨ía_m≠bôs_unzî€d_gë
)

	)

66 
	#¨ía_m≠bô•_gë_c⁄°
 
	`JEMALLOC_N
(
¨ía_m≠bô•_gë_c⁄°
)

	)

67 
	#¨ía_m≠bô•_gë_muèbÀ
 
	`JEMALLOC_N
(
¨ía_m≠bô•_gë_muèbÀ
)

	)

68 
	#¨ía_m≠bô•_ªad
 
	`JEMALLOC_N
(
¨ía_m≠bô•_ªad
)

	)

69 
	#¨ía_m≠bô•_wrôe
 
	`JEMALLOC_N
(
¨ía_m≠bô•_wrôe
)

	)

70 
	#¨ía_maxrun
 
	`JEMALLOC_N
(
¨ía_maxrun
)

	)

71 
	#¨ía_maybe_purge
 
	`JEMALLOC_N
(
¨ía_maybe_purge
)

	)

72 
	#¨ía_mëad©a_Æloˇãd_add
 
	`JEMALLOC_N
(
¨ía_mëad©a_Æloˇãd_add
)

	)

73 
	#¨ía_mëad©a_Æloˇãd_gë
 
	`JEMALLOC_N
(
¨ía_mëad©a_Æloˇãd_gë
)

	)

74 
	#¨ía_mëad©a_Æloˇãd_sub
 
	`JEMALLOC_N
(
¨ía_mëad©a_Æloˇãd_sub
)

	)

75 
	#¨ía_migøã
 
	`JEMALLOC_N
(
¨ía_migøã
)

	)

76 
	#¨ía_mis˚lm_gë_c⁄°
 
	`JEMALLOC_N
(
¨ía_mis˚lm_gë_c⁄°
)

	)

77 
	#¨ía_mis˚lm_gë_muèbÀ
 
	`JEMALLOC_N
(
¨ía_mis˚lm_gë_muèbÀ
)

	)

78 
	#¨ía_mis˚lm_to_∑geöd
 
	`JEMALLOC_N
(
¨ía_mis˚lm_to_∑geöd
)

	)

79 
	#¨ía_mis˚lm_to_Ωages
 
	`JEMALLOC_N
(
¨ía_mis˚lm_to_Ωages
)

	)

80 
	#¨ía_√w
 
	`JEMALLOC_N
(
¨ía_√w
)

	)

81 
	#¨ía_node_Æloc
 
	`JEMALLOC_N
(
¨ía_node_Æloc
)

	)

82 
	#¨ía_node_dÆloc
 
	`JEMALLOC_N
(
¨ía_node_dÆloc
)

	)

83 
	#¨ía_¡hªads_dec
 
	`JEMALLOC_N
(
¨ía_¡hªads_dec
)

	)

84 
	#¨ía_¡hªads_gë
 
	`JEMALLOC_N
(
¨ía_¡hªads_gë
)

	)

85 
	#¨ía_¡hªads_öc
 
	`JEMALLOC_N
(
¨ía_¡hªads_öc
)

	)

86 
	#¨ía_∑Œoc
 
	`JEMALLOC_N
(
¨ía_∑Œoc
)

	)

87 
	#¨ía_po°f‹k_chûd
 
	`JEMALLOC_N
(
¨ía_po°f‹k_chûd
)

	)

88 
	#¨ía_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
¨ía_po°f‹k_∑ª¡
)

	)

89 
	#¨ía_¥ef‹k0
 
	`JEMALLOC_N
(
¨ía_¥ef‹k0
)

	)

90 
	#¨ía_¥ef‹k1
 
	`JEMALLOC_N
(
¨ía_¥ef‹k1
)

	)

91 
	#¨ía_¥ef‹k2
 
	`JEMALLOC_N
(
¨ía_¥ef‹k2
)

	)

92 
	#¨ía_¥ef‹k3
 
	`JEMALLOC_N
(
¨ía_¥ef‹k3
)

	)

93 
	#¨ía_¥of_accum
 
	`JEMALLOC_N
(
¨ía_¥of_accum
)

	)

94 
	#¨ía_¥of_accum_im∂
 
	`JEMALLOC_N
(
¨ía_¥of_accum_im∂
)

	)

95 
	#¨ía_¥of_accum_locked
 
	`JEMALLOC_N
(
¨ía_¥of_accum_locked
)

	)

96 
	#¨ía_¥of_¥omŸed
 
	`JEMALLOC_N
(
¨ía_¥of_¥omŸed
)

	)

97 
	#¨ía_¥of_t˘x_gë
 
	`JEMALLOC_N
(
¨ía_¥of_t˘x_gë
)

	)

98 
	#¨ía_¥of_t˘x_ª£t
 
	`JEMALLOC_N
(
¨ía_¥of_t˘x_ª£t
)

	)

99 
	#¨ía_¥of_t˘x_£t
 
	`JEMALLOC_N
(
¨ía_¥of_t˘x_£t
)

	)

100 
	#¨ía_±r_smÆl_bööd_gë
 
	`JEMALLOC_N
(
¨ía_±r_smÆl_bööd_gë
)

	)

101 
	#¨ía_purge
 
	`JEMALLOC_N
(
¨ía_purge
)

	)

102 
	#¨ía_qu¨™töe_junk_smÆl
 
	`JEMALLOC_N
(
¨ía_qu¨™töe_junk_smÆl
)

	)

103 
	#¨ía_øŒoc
 
	`JEMALLOC_N
(
¨ía_øŒoc
)

	)

104 
	#¨ía_øŒoc_junk_œrge
 
	`JEMALLOC_N
(
¨ía_øŒoc_junk_œrge
)

	)

105 
	#¨ía_øŒoc_no_move
 
	`JEMALLOC_N
(
¨ía_øŒoc_no_move
)

	)

106 
	#¨ía_rd_to_mis˚lm
 
	`JEMALLOC_N
(
¨ía_rd_to_mis˚lm
)

	)

107 
	#¨ía_ªdz⁄e_c‹ru±i⁄
 
	`JEMALLOC_N
(
¨ía_ªdz⁄e_c‹ru±i⁄
)

	)

108 
	#¨ía_ª£t
 
	`JEMALLOC_N
(
¨ía_ª£t
)

	)

109 
	#¨ía_run_ªgöd
 
	`JEMALLOC_N
(
¨ía_run_ªgöd
)

	)

110 
	#¨ía_run_to_mis˚lm
 
	`JEMALLOC_N
(
¨ía_run_to_mis˚lm
)

	)

111 
	#¨ía_ßŒoc
 
	`JEMALLOC_N
(
¨ía_ßŒoc
)

	)

112 
	#¨ía_sdÆloc
 
	`JEMALLOC_N
(
¨ía_sdÆloc
)

	)

113 
	#¨ía_°©s_mîge
 
	`JEMALLOC_N
(
¨ía_°©s_mîge
)

	)

114 
	#¨ía_tˇche_fûl_smÆl
 
	`JEMALLOC_N
(
¨ía_tˇche_fûl_smÆl
)

	)

115 
	#¨ía_td©a_gë
 
	`JEMALLOC_N
(
¨ía_td©a_gë
)

	)

116 
	#¨ía_td©a_gë_h¨d
 
	`JEMALLOC_N
(
¨ía_td©a_gë_h¨d
)

	)

117 
	#¨ías
 
	`JEMALLOC_N
(
¨ías
)

	)

118 
	#¨ías_td©a_by∑ss_˛ónup
 
	`JEMALLOC_N
(
¨ías_td©a_by∑ss_˛ónup
)

	)

119 
	#¨ías_td©a_˛ónup
 
	`JEMALLOC_N
(
¨ías_td©a_˛ónup
)

	)

120 
	#©omic_add_p
 
	`JEMALLOC_N
(
©omic_add_p
)

	)

121 
	#©omic_add_u
 
	`JEMALLOC_N
(
©omic_add_u
)

	)

122 
	#©omic_add_uöt32
 
	`JEMALLOC_N
(
©omic_add_uöt32
)

	)

123 
	#©omic_add_uöt64
 
	`JEMALLOC_N
(
©omic_add_uöt64
)

	)

124 
	#©omic_add_z
 
	`JEMALLOC_N
(
©omic_add_z
)

	)

125 
	#©omic_ˇs_p
 
	`JEMALLOC_N
(
©omic_ˇs_p
)

	)

126 
	#©omic_ˇs_u
 
	`JEMALLOC_N
(
©omic_ˇs_u
)

	)

127 
	#©omic_ˇs_uöt32
 
	`JEMALLOC_N
(
©omic_ˇs_uöt32
)

	)

128 
	#©omic_ˇs_uöt64
 
	`JEMALLOC_N
(
©omic_ˇs_uöt64
)

	)

129 
	#©omic_ˇs_z
 
	`JEMALLOC_N
(
©omic_ˇs_z
)

	)

130 
	#©omic_sub_p
 
	`JEMALLOC_N
(
©omic_sub_p
)

	)

131 
	#©omic_sub_u
 
	`JEMALLOC_N
(
©omic_sub_u
)

	)

132 
	#©omic_sub_uöt32
 
	`JEMALLOC_N
(
©omic_sub_uöt32
)

	)

133 
	#©omic_sub_uöt64
 
	`JEMALLOC_N
(
©omic_sub_uöt64
)

	)

134 
	#©omic_sub_z
 
	`JEMALLOC_N
(
©omic_sub_z
)

	)

135 
	#©omic_wrôe_p
 
	`JEMALLOC_N
(
©omic_wrôe_p
)

	)

136 
	#©omic_wrôe_u
 
	`JEMALLOC_N
(
©omic_wrôe_u
)

	)

137 
	#©omic_wrôe_uöt32
 
	`JEMALLOC_N
(
©omic_wrôe_uöt32
)

	)

138 
	#©omic_wrôe_uöt64
 
	`JEMALLOC_N
(
©omic_wrôe_uöt64
)

	)

139 
	#©omic_wrôe_z
 
	`JEMALLOC_N
(
©omic_wrôe_z
)

	)

140 
	#ba£_Æloc
 
	`JEMALLOC_N
(
ba£_Æloc
)

	)

141 
	#ba£_boŸ
 
	`JEMALLOC_N
(
ba£_boŸ
)

	)

142 
	#ba£_po°f‹k_chûd
 
	`JEMALLOC_N
(
ba£_po°f‹k_chûd
)

	)

143 
	#ba£_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
ba£_po°f‹k_∑ª¡
)

	)

144 
	#ba£_¥ef‹k
 
	`JEMALLOC_N
(
ba£_¥ef‹k
)

	)

145 
	#ba£_°©s_gë
 
	`JEMALLOC_N
(
ba£_°©s_gë
)

	)

146 
	#bôm≠_fuŒ
 
	`JEMALLOC_N
(
bôm≠_fuŒ
)

	)

147 
	#bôm≠_gë
 
	`JEMALLOC_N
(
bôm≠_gë
)

	)

148 
	#bôm≠_öfo_öô
 
	`JEMALLOC_N
(
bôm≠_öfo_öô
)

	)

149 
	#bôm≠_öô
 
	`JEMALLOC_N
(
bôm≠_öô
)

	)

150 
	#bôm≠_£t
 
	`JEMALLOC_N
(
bôm≠_£t
)

	)

151 
	#bôm≠_sfu
 
	`JEMALLOC_N
(
bôm≠_sfu
)

	)

152 
	#bôm≠_size
 
	`JEMALLOC_N
(
bôm≠_size
)

	)

153 
	#bôm≠_un£t
 
	`JEMALLOC_N
(
bôm≠_un£t
)

	)

154 
	#boŸ°øp_ˇŒoc
 
	`JEMALLOC_N
(
boŸ°øp_ˇŒoc
)

	)

155 
	#boŸ°øp_‰ì
 
	`JEMALLOC_N
(
boŸ°øp_‰ì
)

	)

156 
	#boŸ°øp_mÆloc
 
	`JEMALLOC_N
(
boŸ°øp_mÆloc
)

	)

157 
	#bt_öô
 
	`JEMALLOC_N
(
bt_öô
)

	)

158 
	#bu„º‹
 
	`JEMALLOC_N
(
bu„º‹
)

	)

159 
	#chunk_Æloc_ba£
 
	`JEMALLOC_N
(
chunk_Æloc_ba£
)

	)

160 
	#chunk_Æloc_ˇche
 
	`JEMALLOC_N
(
chunk_Æloc_ˇche
)

	)

161 
	#chunk_Æloc_dss
 
	`JEMALLOC_N
(
chunk_Æloc_dss
)

	)

162 
	#chunk_Æloc_mm≠
 
	`JEMALLOC_N
(
chunk_Æloc_mm≠
)

	)

163 
	#chunk_Æloc_wøµî
 
	`JEMALLOC_N
(
chunk_Æloc_wøµî
)

	)

164 
	#chunk_boŸ
 
	`JEMALLOC_N
(
chunk_boŸ
)

	)

165 
	#chunk_dÆloc_ˇche
 
	`JEMALLOC_N
(
chunk_dÆloc_ˇche
)

	)

166 
	#chunk_dÆloc_mm≠
 
	`JEMALLOC_N
(
chunk_dÆloc_mm≠
)

	)

167 
	#chunk_dÆloc_wøµî
 
	`JEMALLOC_N
(
chunk_dÆloc_wøµî
)

	)

168 
	#chunk_dîegi°î
 
	`JEMALLOC_N
(
chunk_dîegi°î
)

	)

169 
	#chunk_dss_boŸ
 
	`JEMALLOC_N
(
chunk_dss_boŸ
)

	)

170 
	#chunk_dss_po°f‹k_chûd
 
	`JEMALLOC_N
(
chunk_dss_po°f‹k_chûd
)

	)

171 
	#chunk_dss_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
chunk_dss_po°f‹k_∑ª¡
)

	)

172 
	#chunk_dss_¥ec_gë
 
	`JEMALLOC_N
(
chunk_dss_¥ec_gë
)

	)

173 
	#chunk_dss_¥ec_£t
 
	`JEMALLOC_N
(
chunk_dss_¥ec_£t
)

	)

174 
	#chunk_dss_¥ef‹k
 
	`JEMALLOC_N
(
chunk_dss_¥ef‹k
)

	)

175 
	#chunk_hooks_deÁu…
 
	`JEMALLOC_N
(
chunk_hooks_deÁu…
)

	)

176 
	#chunk_hooks_gë
 
	`JEMALLOC_N
(
chunk_hooks_gë
)

	)

177 
	#chunk_hooks_£t
 
	`JEMALLOC_N
(
chunk_hooks_£t
)

	)

178 
	#chunk_ö_dss
 
	`JEMALLOC_N
(
chunk_ö_dss
)

	)

179 
	#chunk_lookup
 
	`JEMALLOC_N
(
chunk_lookup
)

	)

180 
	#chunk_≈ages
 
	`JEMALLOC_N
(
chunk_≈ages
)

	)

181 
	#chunk_po°f‹k_chûd
 
	`JEMALLOC_N
(
chunk_po°f‹k_chûd
)

	)

182 
	#chunk_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
chunk_po°f‹k_∑ª¡
)

	)

183 
	#chunk_¥ef‹k
 
	`JEMALLOC_N
(
chunk_¥ef‹k
)

	)

184 
	#chunk_purge_wøµî
 
	`JEMALLOC_N
(
chunk_purge_wøµî
)

	)

185 
	#chunk_ªgi°î
 
	`JEMALLOC_N
(
chunk_ªgi°î
)

	)

186 
	#chunks_πªe
 
	`JEMALLOC_N
(
chunks_πªe
)

	)

187 
	#chunksize
 
	`JEMALLOC_N
(
chunksize
)

	)

188 
	#chunksize_mask
 
	`JEMALLOC_N
(
chunksize_mask
)

	)

189 
	#ckh_cou¡
 
	`JEMALLOC_N
(
ckh_cou¡
)

	)

190 
	#ckh_dñëe
 
	`JEMALLOC_N
(
ckh_dñëe
)

	)

191 
	#ckh_ö£π
 
	`JEMALLOC_N
(
ckh_ö£π
)

	)

192 
	#ckh_ôî
 
	`JEMALLOC_N
(
ckh_ôî
)

	)

193 
	#ckh_√w
 
	`JEMALLOC_N
(
ckh_√w
)

	)

194 
	#ckh_poöãr_hash
 
	`JEMALLOC_N
(
ckh_poöãr_hash
)

	)

195 
	#ckh_poöãr_keycomp
 
	`JEMALLOC_N
(
ckh_poöãr_keycomp
)

	)

196 
	#ckh_ªmove
 
	`JEMALLOC_N
(
ckh_ªmove
)

	)

197 
	#ckh_£¨ch
 
	`JEMALLOC_N
(
ckh_£¨ch
)

	)

198 
	#ckh_°rög_hash
 
	`JEMALLOC_N
(
ckh_°rög_hash
)

	)

199 
	#ckh_°rög_keycomp
 
	`JEMALLOC_N
(
ckh_°rög_keycomp
)

	)

200 
	#˘l_boŸ
 
	`JEMALLOC_N
(
˘l_boŸ
)

	)

201 
	#˘l_bymib
 
	`JEMALLOC_N
(
˘l_bymib
)

	)

202 
	#˘l_by«me
 
	`JEMALLOC_N
(
˘l_by«me
)

	)

203 
	#˘l_«mëomib
 
	`JEMALLOC_N
(
˘l_«mëomib
)

	)

204 
	#˘l_po°f‹k_chûd
 
	`JEMALLOC_N
(
˘l_po°f‹k_chûd
)

	)

205 
	#˘l_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
˘l_po°f‹k_∑ª¡
)

	)

206 
	#˘l_¥ef‹k
 
	`JEMALLOC_N
(
˘l_¥ef‹k
)

	)

207 
	#deˇy_tickî_gë
 
	`JEMALLOC_N
(
deˇy_tickî_gë
)

	)

208 
	#dss_¥ec_«mes
 
	`JEMALLOC_N
(
dss_¥ec_«mes
)

	)

209 
	#exã¡_node_achunk_gë
 
	`JEMALLOC_N
(
exã¡_node_achunk_gë
)

	)

210 
	#exã¡_node_achunk_£t
 
	`JEMALLOC_N
(
exã¡_node_achunk_£t
)

	)

211 
	#exã¡_node_addr_gë
 
	`JEMALLOC_N
(
exã¡_node_addr_gë
)

	)

212 
	#exã¡_node_addr_£t
 
	`JEMALLOC_N
(
exã¡_node_addr_£t
)

	)

213 
	#exã¡_node_¨ía_gë
 
	`JEMALLOC_N
(
exã¡_node_¨ía_gë
)

	)

214 
	#exã¡_node_¨ía_£t
 
	`JEMALLOC_N
(
exã¡_node_¨ía_£t
)

	)

215 
	#exã¡_node_commôãd_gë
 
	`JEMALLOC_N
(
exã¡_node_commôãd_gë
)

	)

216 
	#exã¡_node_commôãd_£t
 
	`JEMALLOC_N
(
exã¡_node_commôãd_£t
)

	)

217 
	#exã¡_node_dúty_ö£π
 
	`JEMALLOC_N
(
exã¡_node_dúty_ö£π
)

	)

218 
	#exã¡_node_dúty_lökage_öô
 
	`JEMALLOC_N
(
exã¡_node_dúty_lökage_öô
)

	)

219 
	#exã¡_node_dúty_ªmove
 
	`JEMALLOC_N
(
exã¡_node_dúty_ªmove
)

	)

220 
	#exã¡_node_öô
 
	`JEMALLOC_N
(
exã¡_node_öô
)

	)

221 
	#exã¡_node_¥of_t˘x_gë
 
	`JEMALLOC_N
(
exã¡_node_¥of_t˘x_gë
)

	)

222 
	#exã¡_node_¥of_t˘x_£t
 
	`JEMALLOC_N
(
exã¡_node_¥of_t˘x_£t
)

	)

223 
	#exã¡_node_size_gë
 
	`JEMALLOC_N
(
exã¡_node_size_gë
)

	)

224 
	#exã¡_node_size_£t
 
	`JEMALLOC_N
(
exã¡_node_size_£t
)

	)

225 
	#exã¡_node_zî€d_gë
 
	`JEMALLOC_N
(
exã¡_node_zî€d_gë
)

	)

226 
	#exã¡_node_zî€d_£t
 
	`JEMALLOC_N
(
exã¡_node_zî€d_£t
)

	)

227 
	#exã¡_åì_ad_de°roy
 
	`JEMALLOC_N
(
exã¡_åì_ad_de°roy
)

	)

228 
	#exã¡_åì_ad_de°roy_ªcur£
 
	`JEMALLOC_N
(
exã¡_åì_ad_de°roy_ªcur£
)

	)

229 
	#exã¡_åì_ad_em±y
 
	`JEMALLOC_N
(
exã¡_åì_ad_em±y
)

	)

230 
	#exã¡_åì_ad_fú°
 
	`JEMALLOC_N
(
exã¡_åì_ad_fú°
)

	)

231 
	#exã¡_åì_ad_ö£π
 
	`JEMALLOC_N
(
exã¡_åì_ad_ö£π
)

	)

232 
	#exã¡_åì_ad_ôî
 
	`JEMALLOC_N
(
exã¡_åì_ad_ôî
)

	)

233 
	#exã¡_åì_ad_ôî_ªcur£
 
	`JEMALLOC_N
(
exã¡_åì_ad_ôî_ªcur£
)

	)

234 
	#exã¡_åì_ad_ôî_°¨t
 
	`JEMALLOC_N
(
exã¡_åì_ad_ôî_°¨t
)

	)

235 
	#exã¡_åì_ad_œ°
 
	`JEMALLOC_N
(
exã¡_åì_ad_œ°
)

	)

236 
	#exã¡_åì_ad_√w
 
	`JEMALLOC_N
(
exã¡_åì_ad_√w
)

	)

237 
	#exã¡_åì_ad_√xt
 
	`JEMALLOC_N
(
exã¡_åì_ad_√xt
)

	)

238 
	#exã¡_åì_ad_n£¨ch
 
	`JEMALLOC_N
(
exã¡_åì_ad_n£¨ch
)

	)

239 
	#exã¡_åì_ad_¥ev
 
	`JEMALLOC_N
(
exã¡_åì_ad_¥ev
)

	)

240 
	#exã¡_åì_ad_p£¨ch
 
	`JEMALLOC_N
(
exã¡_åì_ad_p£¨ch
)

	)

241 
	#exã¡_åì_ad_ªmove
 
	`JEMALLOC_N
(
exã¡_åì_ad_ªmove
)

	)

242 
	#exã¡_åì_ad_ªvî£_ôî
 
	`JEMALLOC_N
(
exã¡_åì_ad_ªvî£_ôî
)

	)

243 
	#exã¡_åì_ad_ªvî£_ôî_ªcur£
 
	`JEMALLOC_N
(
exã¡_åì_ad_ªvî£_ôî_ªcur£
)

	)

244 
	#exã¡_åì_ad_ªvî£_ôî_°¨t
 
	`JEMALLOC_N
(
exã¡_åì_ad_ªvî£_ôî_°¨t
)

	)

245 
	#exã¡_åì_ad_£¨ch
 
	`JEMALLOC_N
(
exã¡_åì_ad_£¨ch
)

	)

246 
	#exã¡_åì_szad_de°roy
 
	`JEMALLOC_N
(
exã¡_åì_szad_de°roy
)

	)

247 
	#exã¡_åì_szad_de°roy_ªcur£
 
	`JEMALLOC_N
(
exã¡_åì_szad_de°roy_ªcur£
)

	)

248 
	#exã¡_åì_szad_em±y
 
	`JEMALLOC_N
(
exã¡_åì_szad_em±y
)

	)

249 
	#exã¡_åì_szad_fú°
 
	`JEMALLOC_N
(
exã¡_åì_szad_fú°
)

	)

250 
	#exã¡_åì_szad_ö£π
 
	`JEMALLOC_N
(
exã¡_åì_szad_ö£π
)

	)

251 
	#exã¡_åì_szad_ôî
 
	`JEMALLOC_N
(
exã¡_åì_szad_ôî
)

	)

252 
	#exã¡_åì_szad_ôî_ªcur£
 
	`JEMALLOC_N
(
exã¡_åì_szad_ôî_ªcur£
)

	)

253 
	#exã¡_åì_szad_ôî_°¨t
 
	`JEMALLOC_N
(
exã¡_åì_szad_ôî_°¨t
)

	)

254 
	#exã¡_åì_szad_œ°
 
	`JEMALLOC_N
(
exã¡_åì_szad_œ°
)

	)

255 
	#exã¡_åì_szad_√w
 
	`JEMALLOC_N
(
exã¡_åì_szad_√w
)

	)

256 
	#exã¡_åì_szad_√xt
 
	`JEMALLOC_N
(
exã¡_åì_szad_√xt
)

	)

257 
	#exã¡_åì_szad_n£¨ch
 
	`JEMALLOC_N
(
exã¡_åì_szad_n£¨ch
)

	)

258 
	#exã¡_åì_szad_¥ev
 
	`JEMALLOC_N
(
exã¡_åì_szad_¥ev
)

	)

259 
	#exã¡_åì_szad_p£¨ch
 
	`JEMALLOC_N
(
exã¡_åì_szad_p£¨ch
)

	)

260 
	#exã¡_åì_szad_ªmove
 
	`JEMALLOC_N
(
exã¡_åì_szad_ªmove
)

	)

261 
	#exã¡_åì_szad_ªvî£_ôî
 
	`JEMALLOC_N
(
exã¡_åì_szad_ªvî£_ôî
)

	)

262 
	#exã¡_åì_szad_ªvî£_ôî_ªcur£
 
	`JEMALLOC_N
(
exã¡_åì_szad_ªvî£_ôî_ªcur£
)

	)

263 
	#exã¡_åì_szad_ªvî£_ôî_°¨t
 
	`JEMALLOC_N
(
exã¡_åì_szad_ªvî£_ôî_°¨t
)

	)

264 
	#exã¡_åì_szad_£¨ch
 
	`JEMALLOC_N
(
exã¡_åì_szad_£¨ch
)

	)

265 
	#ffs_Œu
 
	`JEMALLOC_N
(
ffs_Œu
)

	)

266 
	#ffs_lu
 
	`JEMALLOC_N
(
ffs_lu
)

	)

267 
	#ffs_u
 
	`JEMALLOC_N
(
ffs_u
)

	)

268 
	#ffs_u32
 
	`JEMALLOC_N
(
ffs_u32
)

	)

269 
	#ffs_u64
 
	`JEMALLOC_N
(
ffs_u64
)

	)

270 
	#ffs_zu
 
	`JEMALLOC_N
(
ffs_zu
)

	)

271 
	#gë_î∫o
 
	`JEMALLOC_N
(
gë_î∫o
)

	)

272 
	#hash
 
	`JEMALLOC_N
(
hash
)

	)

273 
	#hash_fmix_32
 
	`JEMALLOC_N
(
hash_fmix_32
)

	)

274 
	#hash_fmix_64
 
	`JEMALLOC_N
(
hash_fmix_64
)

	)

275 
	#hash_gë_block_32
 
	`JEMALLOC_N
(
hash_gë_block_32
)

	)

276 
	#hash_gë_block_64
 
	`JEMALLOC_N
(
hash_gë_block_64
)

	)

277 
	#hash_rŸl_32
 
	`JEMALLOC_N
(
hash_rŸl_32
)

	)

278 
	#hash_rŸl_64
 
	`JEMALLOC_N
(
hash_rŸl_64
)

	)

279 
	#hash_x64_128
 
	`JEMALLOC_N
(
hash_x64_128
)

	)

280 
	#hash_x86_128
 
	`JEMALLOC_N
(
hash_x86_128
)

	)

281 
	#hash_x86_32
 
	`JEMALLOC_N
(
hash_x86_32
)

	)

282 
	#huge_ØŒoc
 
	`JEMALLOC_N
(
huge_ØŒoc
)

	)

283 
	#huge_dÆloc
 
	`JEMALLOC_N
(
huge_dÆloc
)

	)

284 
	#huge_dÆloc_junk
 
	`JEMALLOC_N
(
huge_dÆloc_junk
)

	)

285 
	#huge_mÆloc
 
	`JEMALLOC_N
(
huge_mÆloc
)

	)

286 
	#huge_∑Œoc
 
	`JEMALLOC_N
(
huge_∑Œoc
)

	)

287 
	#huge_¥of_t˘x_gë
 
	`JEMALLOC_N
(
huge_¥of_t˘x_gë
)

	)

288 
	#huge_¥of_t˘x_ª£t
 
	`JEMALLOC_N
(
huge_¥of_t˘x_ª£t
)

	)

289 
	#huge_¥of_t˘x_£t
 
	`JEMALLOC_N
(
huge_¥of_t˘x_£t
)

	)

290 
	#huge_øŒoc
 
	`JEMALLOC_N
(
huge_øŒoc
)

	)

291 
	#huge_øŒoc_no_move
 
	`JEMALLOC_N
(
huge_øŒoc_no_move
)

	)

292 
	#huge_ßŒoc
 
	`JEMALLOC_N
(
huge_ßŒoc
)

	)

293 
	#üÆloc
 
	`JEMALLOC_N
(
üÆloc
)

	)

294 
	#üŒoc
 
	`JEMALLOC_N
(
üŒoc
)

	)

295 
	#üŒocztm
 
	`JEMALLOC_N
(
üŒocztm
)

	)

296 
	#üª«_˛ónup
 
	`JEMALLOC_N
(
üª«_˛ónup
)

	)

297 
	#idÆloc
 
	`JEMALLOC_N
(
idÆloc
)

	)

298 
	#idÆlo˘m
 
	`JEMALLOC_N
(
idÆlo˘m
)

	)

299 
	#ö_vÆgröd
 
	`JEMALLOC_N
(
ö_vÆgröd
)

	)

300 
	#ödex2size
 
	`JEMALLOC_N
(
ödex2size
)

	)

301 
	#ödex2size_compuã
 
	`JEMALLOC_N
(
ödex2size_compuã
)

	)

302 
	#ödex2size_lookup
 
	`JEMALLOC_N
(
ödex2size_lookup
)

	)

303 
	#ödex2size_èb
 
	`JEMALLOC_N
(
ödex2size_èb
)

	)

304 
	#ùÆloc
 
	`JEMALLOC_N
(
ùÆloc
)

	)

305 
	#ùÆlo˘
 
	`JEMALLOC_N
(
ùÆlo˘
)

	)

306 
	#ùÆlocztm
 
	`JEMALLOC_N
(
ùÆlocztm
)

	)

307 
	#iqÆloc
 
	`JEMALLOC_N
(
iqÆloc
)

	)

308 
	#úÆloc
 
	`JEMALLOC_N
(
úÆloc
)

	)

309 
	#úÆlo˘
 
	`JEMALLOC_N
(
úÆlo˘
)

	)

310 
	#úÆlo˘_ªÆign
 
	`JEMALLOC_N
(
úÆlo˘_ªÆign
)

	)

311 
	#ißŒoc
 
	`JEMALLOC_N
(
ißŒoc
)

	)

312 
	#isdÆlo˘
 
	`JEMALLOC_N
(
isdÆlo˘
)

	)

313 
	#isqÆloc
 
	`JEMALLOC_N
(
isqÆloc
)

	)

314 
	#i°hªaded
 
	`JEMALLOC_N
(
i°hªaded
)

	)

315 
	#ivßŒoc
 
	`JEMALLOC_N
(
ivßŒoc
)

	)

316 
	#ixÆloc
 
	`JEMALLOC_N
(
ixÆloc
)

	)

317 
	#jemÆloc_po°f‹k_chûd
 
	`JEMALLOC_N
(
jemÆloc_po°f‹k_chûd
)

	)

318 
	#jemÆloc_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
jemÆloc_po°f‹k_∑ª¡
)

	)

319 
	#jemÆloc_¥ef‹k
 
	`JEMALLOC_N
(
jemÆloc_¥ef‹k
)

	)

320 
	#œrge_max˛ass
 
	`JEMALLOC_N
(
œrge_max˛ass
)

	)

321 
	#lg_Êo‹
 
	`JEMALLOC_N
(
lg_Êo‹
)

	)

322 
	#lg_¥of_ßm∂e
 
	`JEMALLOC_N
(
lg_¥of_ßm∂e
)

	)

323 
	#mÆloc_˝rötf
 
	`JEMALLOC_N
(
mÆloc_˝rötf
)

	)

324 
	#mÆloc_muãx_as£π_nŸ_ow√r
 
	`JEMALLOC_N
(
mÆloc_muãx_as£π_nŸ_ow√r
)

	)

325 
	#mÆloc_muãx_as£π_ow√r
 
	`JEMALLOC_N
(
mÆloc_muãx_as£π_ow√r
)

	)

326 
	#mÆloc_muãx_boŸ
 
	`JEMALLOC_N
(
mÆloc_muãx_boŸ
)

	)

327 
	#mÆloc_muãx_öô
 
	`JEMALLOC_N
(
mÆloc_muãx_öô
)

	)

328 
	#mÆloc_muãx_lock
 
	`JEMALLOC_N
(
mÆloc_muãx_lock
)

	)

329 
	#mÆloc_muãx_po°f‹k_chûd
 
	`JEMALLOC_N
(
mÆloc_muãx_po°f‹k_chûd
)

	)

330 
	#mÆloc_muãx_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
mÆloc_muãx_po°f‹k_∑ª¡
)

	)

331 
	#mÆloc_muãx_¥ef‹k
 
	`JEMALLOC_N
(
mÆloc_muãx_¥ef‹k
)

	)

332 
	#mÆloc_muãx_u∆ock
 
	`JEMALLOC_N
(
mÆloc_muãx_u∆ock
)

	)

333 
	#mÆloc_¥ötf
 
	`JEMALLOC_N
(
mÆloc_¥ötf
)

	)

334 
	#mÆloc_¢¥ötf
 
	`JEMALLOC_N
(
mÆloc_¢¥ötf
)

	)

335 
	#mÆloc_°πoumax
 
	`JEMALLOC_N
(
mÆloc_°πoumax
)

	)

336 
	#mÆloc_tsd_boŸ0
 
	`JEMALLOC_N
(
mÆloc_tsd_boŸ0
)

	)

337 
	#mÆloc_tsd_boŸ1
 
	`JEMALLOC_N
(
mÆloc_tsd_boŸ1
)

	)

338 
	#mÆloc_tsd_˛ónup_ªgi°î
 
	`JEMALLOC_N
(
mÆloc_tsd_˛ónup_ªgi°î
)

	)

339 
	#mÆloc_tsd_dÆloc
 
	`JEMALLOC_N
(
mÆloc_tsd_dÆloc
)

	)

340 
	#mÆloc_tsd_mÆloc
 
	`JEMALLOC_N
(
mÆloc_tsd_mÆloc
)

	)

341 
	#mÆloc_tsd_no_˛ónup
 
	`JEMALLOC_N
(
mÆloc_tsd_no_˛ónup
)

	)

342 
	#mÆloc_v˝rötf
 
	`JEMALLOC_N
(
mÆloc_v˝rötf
)

	)

343 
	#mÆloc_v¢¥ötf
 
	`JEMALLOC_N
(
mÆloc_v¢¥ötf
)

	)

344 
	#mÆloc_wrôe
 
	`JEMALLOC_N
(
mÆloc_wrôe
)

	)

345 
	#m≠_büs
 
	`JEMALLOC_N
(
m≠_büs
)

	)

346 
	#m≠_misc_off£t
 
	`JEMALLOC_N
(
m≠_misc_off£t
)

	)

347 
	#mb_wrôe
 
	`JEMALLOC_N
(
mb_wrôe
)

	)

348 
	#«ª«s_auto
 
	`JEMALLOC_N
(
«ª«s_auto
)

	)

349 
	#«ª«s_td©a_˛ónup
 
	`JEMALLOC_N
(
«ª«s_td©a_˛ónup
)

	)

350 
	#«ª«s_tŸÆ_gë
 
	`JEMALLOC_N
(
«ª«s_tŸÆ_gë
)

	)

351 
	#n˝us
 
	`JEMALLOC_N
(
n˝us
)

	)

352 
	#nhbös
 
	`JEMALLOC_N
(
nhbös
)

	)

353 
	#nh˛as£s
 
	`JEMALLOC_N
(
nh˛as£s
)

	)

354 
	#∆˛as£s
 
	`JEMALLOC_N
(
∆˛as£s
)

	)

355 
	#n°ime_add
 
	`JEMALLOC_N
(
n°ime_add
)

	)

356 
	#n°ime_com∑ª
 
	`JEMALLOC_N
(
n°ime_com∑ª
)

	)

357 
	#n°ime_c›y
 
	`JEMALLOC_N
(
n°ime_c›y
)

	)

358 
	#n°ime_divide
 
	`JEMALLOC_N
(
n°ime_divide
)

	)

359 
	#n°ime_idivide
 
	`JEMALLOC_N
(
n°ime_idivide
)

	)

360 
	#n°ime_imu…ùly
 
	`JEMALLOC_N
(
n°ime_imu…ùly
)

	)

361 
	#n°ime_öô
 
	`JEMALLOC_N
(
n°ime_öô
)

	)

362 
	#n°ime_öô2
 
	`JEMALLOC_N
(
n°ime_öô2
)

	)

363 
	#n°ime_ns
 
	`JEMALLOC_N
(
n°ime_ns
)

	)

364 
	#n°ime_n£c
 
	`JEMALLOC_N
(
n°ime_n£c
)

	)

365 
	#n°ime_£c
 
	`JEMALLOC_N
(
n°ime_£c
)

	)

366 
	#n°ime_subåa˘
 
	`JEMALLOC_N
(
n°ime_subåa˘
)

	)

367 
	#n°ime_upd©e
 
	`JEMALLOC_N
(
n°ime_upd©e
)

	)

368 
	#›t_ab‹t
 
	`JEMALLOC_N
(
›t_ab‹t
)

	)

369 
	#›t_deˇy_time
 
	`JEMALLOC_N
(
›t_deˇy_time
)

	)

370 
	#›t_dss
 
	`JEMALLOC_N
(
›t_dss
)

	)

371 
	#›t_junk
 
	`JEMALLOC_N
(
›t_junk
)

	)

372 
	#›t_junk_Æloc
 
	`JEMALLOC_N
(
›t_junk_Æloc
)

	)

373 
	#›t_junk_‰ì
 
	`JEMALLOC_N
(
›t_junk_‰ì
)

	)

374 
	#›t_lg_chunk
 
	`JEMALLOC_N
(
›t_lg_chunk
)

	)

375 
	#›t_lg_dúty_mu…
 
	`JEMALLOC_N
(
›t_lg_dúty_mu…
)

	)

376 
	#›t_lg_¥of_öãrvÆ
 
	`JEMALLOC_N
(
›t_lg_¥of_öãrvÆ
)

	)

377 
	#›t_lg_¥of_ßm∂e
 
	`JEMALLOC_N
(
›t_lg_¥of_ßm∂e
)

	)

378 
	#›t_lg_tˇche_max
 
	`JEMALLOC_N
(
›t_lg_tˇche_max
)

	)

379 
	#›t_«ª«s
 
	`JEMALLOC_N
(
›t_«ª«s
)

	)

380 
	#›t_¥of
 
	`JEMALLOC_N
(
›t_¥of
)

	)

381 
	#›t_¥of_accum
 
	`JEMALLOC_N
(
›t_¥of_accum
)

	)

382 
	#›t_¥of_a˘ive
 
	`JEMALLOC_N
(
›t_¥of_a˘ive
)

	)

383 
	#›t_¥of_föÆ
 
	`JEMALLOC_N
(
›t_¥of_föÆ
)

	)

384 
	#›t_¥of_gdump
 
	`JEMALLOC_N
(
›t_¥of_gdump
)

	)

385 
	#›t_¥of_Àak
 
	`JEMALLOC_N
(
›t_¥of_Àak
)

	)

386 
	#›t_¥of_¥efix
 
	`JEMALLOC_N
(
›t_¥of_¥efix
)

	)

387 
	#›t_¥of_thªad_a˘ive_öô
 
	`JEMALLOC_N
(
›t_¥of_thªad_a˘ive_öô
)

	)

388 
	#›t_purge
 
	`JEMALLOC_N
(
›t_purge
)

	)

389 
	#›t_qu¨™töe
 
	`JEMALLOC_N
(
›t_qu¨™töe
)

	)

390 
	#›t_ªdz⁄e
 
	`JEMALLOC_N
(
›t_ªdz⁄e
)

	)

391 
	#›t_°©s_¥öt
 
	`JEMALLOC_N
(
›t_°©s_¥öt
)

	)

392 
	#›t_tˇche
 
	`JEMALLOC_N
(
›t_tˇche
)

	)

393 
	#›t_uåa˚
 
	`JEMALLOC_N
(
›t_uåa˚
)

	)

394 
	#›t_xmÆloc
 
	`JEMALLOC_N
(
›t_xmÆloc
)

	)

395 
	#›t_zîo
 
	`JEMALLOC_N
(
›t_zîo
)

	)

396 
	#p2rz
 
	`JEMALLOC_N
(
p2rz
)

	)

397 
	#∑ges_boŸ
 
	`JEMALLOC_N
(
∑ges_boŸ
)

	)

398 
	#∑ges_commô
 
	`JEMALLOC_N
(
∑ges_commô
)

	)

399 
	#∑ges_decommô
 
	`JEMALLOC_N
(
∑ges_decommô
)

	)

400 
	#∑ges_m≠
 
	`JEMALLOC_N
(
∑ges_m≠
)

	)

401 
	#∑ges_purge
 
	`JEMALLOC_N
(
∑ges_purge
)

	)

402 
	#∑ges_åim
 
	`JEMALLOC_N
(
∑ges_åim
)

	)

403 
	#∑ges_unm≠
 
	`JEMALLOC_N
(
∑ges_unm≠
)

	)

404 
	#pow2_˚û_u32
 
	`JEMALLOC_N
(
pow2_˚û_u32
)

	)

405 
	#pow2_˚û_u64
 
	`JEMALLOC_N
(
pow2_˚û_u64
)

	)

406 
	#pow2_˚û_zu
 
	`JEMALLOC_N
(
pow2_˚û_zu
)

	)

407 
	#¥ng_lg_ønge
 
	`JEMALLOC_N
(
¥ng_lg_ønge
)

	)

408 
	#¥ng_ønge
 
	`JEMALLOC_N
(
¥ng_ønge
)

	)

409 
	#¥of_a˘ive
 
	`JEMALLOC_N
(
¥of_a˘ive
)

	)

410 
	#¥of_a˘ive_gë
 
	`JEMALLOC_N
(
¥of_a˘ive_gë
)

	)

411 
	#¥of_a˘ive_gë_u∆ocked
 
	`JEMALLOC_N
(
¥of_a˘ive_gë_u∆ocked
)

	)

412 
	#¥of_a˘ive_£t
 
	`JEMALLOC_N
(
¥of_a˘ive_£t
)

	)

413 
	#¥of_Æloc_¥ï
 
	`JEMALLOC_N
(
¥of_Æloc_¥ï
)

	)

414 
	#¥of_Æloc_rﬁlback
 
	`JEMALLOC_N
(
¥of_Æloc_rﬁlback
)

	)

415 
	#¥of_backåa˚
 
	`JEMALLOC_N
(
¥of_backåa˚
)

	)

416 
	#¥of_boŸ0
 
	`JEMALLOC_N
(
¥of_boŸ0
)

	)

417 
	#¥of_boŸ1
 
	`JEMALLOC_N
(
¥of_boŸ1
)

	)

418 
	#¥of_boŸ2
 
	`JEMALLOC_N
(
¥of_boŸ2
)

	)

419 
	#¥of_bt_cou¡
 
	`JEMALLOC_N
(
¥of_bt_cou¡
)

	)

420 
	#¥of_dump_hódî
 
	`JEMALLOC_N
(
¥of_dump_hódî
)

	)

421 
	#¥of_dump_›í
 
	`JEMALLOC_N
(
¥of_dump_›í
)

	)

422 
	#¥of_‰ì
 
	`JEMALLOC_N
(
¥of_‰ì
)

	)

423 
	#¥of_‰ì_ßm∂ed_obje˘
 
	`JEMALLOC_N
(
¥of_‰ì_ßm∂ed_obje˘
)

	)

424 
	#¥of_gdump
 
	`JEMALLOC_N
(
¥of_gdump
)

	)

425 
	#¥of_gdump_gë
 
	`JEMALLOC_N
(
¥of_gdump_gë
)

	)

426 
	#¥of_gdump_gë_u∆ocked
 
	`JEMALLOC_N
(
¥of_gdump_gë_u∆ocked
)

	)

427 
	#¥of_gdump_£t
 
	`JEMALLOC_N
(
¥of_gdump_£t
)

	)

428 
	#¥of_gdump_vÆ
 
	`JEMALLOC_N
(
¥of_gdump_vÆ
)

	)

429 
	#¥of_idump
 
	`JEMALLOC_N
(
¥of_idump
)

	)

430 
	#¥of_öãrvÆ
 
	`JEMALLOC_N
(
¥of_öãrvÆ
)

	)

431 
	#¥of_lookup
 
	`JEMALLOC_N
(
¥of_lookup
)

	)

432 
	#¥of_mÆloc
 
	`JEMALLOC_N
(
¥of_mÆloc
)

	)

433 
	#¥of_mÆloc_ßm∂e_obje˘
 
	`JEMALLOC_N
(
¥of_mÆloc_ßm∂e_obje˘
)

	)

434 
	#¥of_mdump
 
	`JEMALLOC_N
(
¥of_mdump
)

	)

435 
	#¥of_po°f‹k_chûd
 
	`JEMALLOC_N
(
¥of_po°f‹k_chûd
)

	)

436 
	#¥of_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
¥of_po°f‹k_∑ª¡
)

	)

437 
	#¥of_¥ef‹k0
 
	`JEMALLOC_N
(
¥of_¥ef‹k0
)

	)

438 
	#¥of_¥ef‹k1
 
	`JEMALLOC_N
(
¥of_¥ef‹k1
)

	)

439 
	#¥of_ªÆloc
 
	`JEMALLOC_N
(
¥of_ªÆloc
)

	)

440 
	#¥of_ª£t
 
	`JEMALLOC_N
(
¥of_ª£t
)

	)

441 
	#¥of_ßm∂e_accum_upd©e
 
	`JEMALLOC_N
(
¥of_ßm∂e_accum_upd©e
)

	)

442 
	#¥of_ßm∂e_thªshﬁd_upd©e
 
	`JEMALLOC_N
(
¥of_ßm∂e_thªshﬁd_upd©e
)

	)

443 
	#¥of_t˘x_gë
 
	`JEMALLOC_N
(
¥of_t˘x_gë
)

	)

444 
	#¥of_t˘x_ª£t
 
	`JEMALLOC_N
(
¥of_t˘x_ª£t
)

	)

445 
	#¥of_t˘x_£t
 
	`JEMALLOC_N
(
¥of_t˘x_£t
)

	)

446 
	#¥of_td©a_˛ónup
 
	`JEMALLOC_N
(
¥of_td©a_˛ónup
)

	)

447 
	#¥of_td©a_cou¡
 
	`JEMALLOC_N
(
¥of_td©a_cou¡
)

	)

448 
	#¥of_td©a_gë
 
	`JEMALLOC_N
(
¥of_td©a_gë
)

	)

449 
	#¥of_td©a_öô
 
	`JEMALLOC_N
(
¥of_td©a_öô
)

	)

450 
	#¥of_td©a_ªöô
 
	`JEMALLOC_N
(
¥of_td©a_ªöô
)

	)

451 
	#¥of_thªad_a˘ive_gë
 
	`JEMALLOC_N
(
¥of_thªad_a˘ive_gë
)

	)

452 
	#¥of_thªad_a˘ive_öô_gë
 
	`JEMALLOC_N
(
¥of_thªad_a˘ive_öô_gë
)

	)

453 
	#¥of_thªad_a˘ive_öô_£t
 
	`JEMALLOC_N
(
¥of_thªad_a˘ive_öô_£t
)

	)

454 
	#¥of_thªad_a˘ive_£t
 
	`JEMALLOC_N
(
¥of_thªad_a˘ive_£t
)

	)

455 
	#¥of_thªad_«me_gë
 
	`JEMALLOC_N
(
¥of_thªad_«me_gë
)

	)

456 
	#¥of_thªad_«me_£t
 
	`JEMALLOC_N
(
¥of_thªad_«me_£t
)

	)

457 
	#purge_mode_«mes
 
	`JEMALLOC_N
(
purge_mode_«mes
)

	)

458 
	#qu¨™töe
 
	`JEMALLOC_N
(
qu¨™töe
)

	)

459 
	#qu¨™töe_Æloc_hook
 
	`JEMALLOC_N
(
qu¨™töe_Æloc_hook
)

	)

460 
	#qu¨™töe_Æloc_hook_w‹k
 
	`JEMALLOC_N
(
qu¨™töe_Æloc_hook_w‹k
)

	)

461 
	#qu¨™töe_˛ónup
 
	`JEMALLOC_N
(
qu¨™töe_˛ónup
)

	)

462 
	#ªgi°î_z⁄e
 
	`JEMALLOC_N
(
ªgi°î_z⁄e
)

	)

463 
	#πªe_chûd_ªad
 
	`JEMALLOC_N
(
πªe_chûd_ªad
)

	)

464 
	#πªe_chûd_ªad_h¨d
 
	`JEMALLOC_N
(
πªe_chûd_ªad_h¨d
)

	)

465 
	#πªe_chûd_åyªad
 
	`JEMALLOC_N
(
πªe_chûd_åyªad
)

	)

466 
	#πªe_dñëe
 
	`JEMALLOC_N
(
πªe_dñëe
)

	)

467 
	#πªe_gë
 
	`JEMALLOC_N
(
πªe_gë
)

	)

468 
	#πªe_√w
 
	`JEMALLOC_N
(
πªe_√w
)

	)

469 
	#πªe_node_vÆid
 
	`JEMALLOC_N
(
πªe_node_vÆid
)

	)

470 
	#πªe_£t
 
	`JEMALLOC_N
(
πªe_£t
)

	)

471 
	#πªe_°¨t_Àvñ
 
	`JEMALLOC_N
(
πªe_°¨t_Àvñ
)

	)

472 
	#πªe_subkey
 
	`JEMALLOC_N
(
πªe_subkey
)

	)

473 
	#πªe_subåì_ªad
 
	`JEMALLOC_N
(
πªe_subåì_ªad
)

	)

474 
	#πªe_subåì_ªad_h¨d
 
	`JEMALLOC_N
(
πªe_subåì_ªad_h¨d
)

	)

475 
	#πªe_subåì_åyªad
 
	`JEMALLOC_N
(
πªe_subåì_åyªad
)

	)

476 
	#πªe_vÆ_ªad
 
	`JEMALLOC_N
(
πªe_vÆ_ªad
)

	)

477 
	#πªe_vÆ_wrôe
 
	`JEMALLOC_N
(
πªe_vÆ_wrôe
)

	)

478 
	#run_qu™tize_˚û
 
	`JEMALLOC_N
(
run_qu™tize_˚û
)

	)

479 
	#run_qu™tize_Êo‹
 
	`JEMALLOC_N
(
run_qu™tize_Êo‹
)

	)

480 
	#run_qu™tize_max
 
	`JEMALLOC_N
(
run_qu™tize_max
)

	)

481 
	#s2u
 
	`JEMALLOC_N
(
s2u
)

	)

482 
	#s2u_compuã
 
	`JEMALLOC_N
(
s2u_compuã
)

	)

483 
	#s2u_lookup
 
	`JEMALLOC_N
(
s2u_lookup
)

	)

484 
	#ß2u
 
	`JEMALLOC_N
(
ß2u
)

	)

485 
	#£t_î∫o
 
	`JEMALLOC_N
(
£t_î∫o
)

	)

486 
	#size2ödex
 
	`JEMALLOC_N
(
size2ödex
)

	)

487 
	#size2ödex_compuã
 
	`JEMALLOC_N
(
size2ödex_compuã
)

	)

488 
	#size2ödex_lookup
 
	`JEMALLOC_N
(
size2ödex_lookup
)

	)

489 
	#size2ödex_èb
 
	`JEMALLOC_N
(
size2ödex_èb
)

	)

490 
	#°©s_ˇ˘ive
 
	`JEMALLOC_N
(
°©s_ˇ˘ive
)

	)

491 
	#°©s_ˇ˘ive_add
 
	`JEMALLOC_N
(
°©s_ˇ˘ive_add
)

	)

492 
	#°©s_ˇ˘ive_gë
 
	`JEMALLOC_N
(
°©s_ˇ˘ive_gë
)

	)

493 
	#°©s_ˇ˘ive_sub
 
	`JEMALLOC_N
(
°©s_ˇ˘ive_sub
)

	)

494 
	#°©s_¥öt
 
	`JEMALLOC_N
(
°©s_¥öt
)

	)

495 
	#tˇche_Æloc_ósy
 
	`JEMALLOC_N
(
tˇche_Æloc_ósy
)

	)

496 
	#tˇche_Æloc_œrge
 
	`JEMALLOC_N
(
tˇche_Æloc_œrge
)

	)

497 
	#tˇche_Æloc_smÆl
 
	`JEMALLOC_N
(
tˇche_Æloc_smÆl
)

	)

498 
	#tˇche_Æloc_smÆl_h¨d
 
	`JEMALLOC_N
(
tˇche_Æloc_smÆl_h¨d
)

	)

499 
	#tˇche_¨ía_ªassocüã
 
	`JEMALLOC_N
(
tˇche_¨ía_ªassocüã
)

	)

500 
	#tˇche_bö_Êush_œrge
 
	`JEMALLOC_N
(
tˇche_bö_Êush_œrge
)

	)

501 
	#tˇche_bö_Êush_smÆl
 
	`JEMALLOC_N
(
tˇche_bö_Êush_smÆl
)

	)

502 
	#tˇche_bö_öfo
 
	`JEMALLOC_N
(
tˇche_bö_öfo
)

	)

503 
	#tˇche_boŸ
 
	`JEMALLOC_N
(
tˇche_boŸ
)

	)

504 
	#tˇche_˛ónup
 
	`JEMALLOC_N
(
tˇche_˛ónup
)

	)

505 
	#tˇche_¸óã
 
	`JEMALLOC_N
(
tˇche_¸óã
)

	)

506 
	#tˇche_dÆloc_œrge
 
	`JEMALLOC_N
(
tˇche_dÆloc_œrge
)

	)

507 
	#tˇche_dÆloc_smÆl
 
	`JEMALLOC_N
(
tˇche_dÆloc_smÆl
)

	)

508 
	#tˇche_íabÀd_˛ónup
 
	`JEMALLOC_N
(
tˇche_íabÀd_˛ónup
)

	)

509 
	#tˇche_íabÀd_gë
 
	`JEMALLOC_N
(
tˇche_íabÀd_gë
)

	)

510 
	#tˇche_íabÀd_£t
 
	`JEMALLOC_N
(
tˇche_íabÀd_£t
)

	)

511 
	#tˇche_evít
 
	`JEMALLOC_N
(
tˇche_evít
)

	)

512 
	#tˇche_evít_h¨d
 
	`JEMALLOC_N
(
tˇche_evít_h¨d
)

	)

513 
	#tˇche_Êush
 
	`JEMALLOC_N
(
tˇche_Êush
)

	)

514 
	#tˇche_gë
 
	`JEMALLOC_N
(
tˇche_gë
)

	)

515 
	#tˇche_gë_h¨d
 
	`JEMALLOC_N
(
tˇche_gë_h¨d
)

	)

516 
	#tˇche_max˛ass
 
	`JEMALLOC_N
(
tˇche_max˛ass
)

	)

517 
	#tˇche_ßŒoc
 
	`JEMALLOC_N
(
tˇche_ßŒoc
)

	)

518 
	#tˇche_°©s_mîge
 
	`JEMALLOC_N
(
tˇche_°©s_mîge
)

	)

519 
	#tˇches
 
	`JEMALLOC_N
(
tˇches
)

	)

520 
	#tˇches_¸óã
 
	`JEMALLOC_N
(
tˇches_¸óã
)

	)

521 
	#tˇches_de°roy
 
	`JEMALLOC_N
(
tˇches_de°roy
)

	)

522 
	#tˇches_Êush
 
	`JEMALLOC_N
(
tˇches_Êush
)

	)

523 
	#tˇches_gë
 
	`JEMALLOC_N
(
tˇches_gë
)

	)

524 
	#thªad_Æloˇãd_˛ónup
 
	`JEMALLOC_N
(
thªad_Æloˇãd_˛ónup
)

	)

525 
	#thªad_dóŒoˇãd_˛ónup
 
	`JEMALLOC_N
(
thªad_dóŒoˇãd_˛ónup
)

	)

526 
	#tickî_c›y
 
	`JEMALLOC_N
(
tickî_c›y
)

	)

527 
	#tickî_öô
 
	`JEMALLOC_N
(
tickî_öô
)

	)

528 
	#tickî_ªad
 
	`JEMALLOC_N
(
tickî_ªad
)

	)

529 
	#tickî_tick
 
	`JEMALLOC_N
(
tickî_tick
)

	)

530 
	#tickî_ticks
 
	`JEMALLOC_N
(
tickî_ticks
)

	)

531 
	#tsd_¨ía_gë
 
	`JEMALLOC_N
(
tsd_¨ía_gë
)

	)

532 
	#tsd_¨ía_£t
 
	`JEMALLOC_N
(
tsd_¨ía_£t
)

	)

533 
	#tsd_¨í≠_gë
 
	`JEMALLOC_N
(
tsd_¨í≠_gë
)

	)

534 
	#tsd_¨ías_td©a_by∑ss_gë
 
	`JEMALLOC_N
(
tsd_¨ías_td©a_by∑ss_gë
)

	)

535 
	#tsd_¨ías_td©a_by∑ss_£t
 
	`JEMALLOC_N
(
tsd_¨ías_td©a_by∑ss_£t
)

	)

536 
	#tsd_¨ías_td©a_by∑s•_gë
 
	`JEMALLOC_N
(
tsd_¨ías_td©a_by∑s•_gë
)

	)

537 
	#tsd_¨ías_td©a_gë
 
	`JEMALLOC_N
(
tsd_¨ías_td©a_gë
)

	)

538 
	#tsd_¨ías_td©a_£t
 
	`JEMALLOC_N
(
tsd_¨ías_td©a_£t
)

	)

539 
	#tsd_¨ías_td©≠_gë
 
	`JEMALLOC_N
(
tsd_¨ías_td©≠_gë
)

	)

540 
	#tsd_boŸ
 
	`JEMALLOC_N
(
tsd_boŸ
)

	)

541 
	#tsd_boŸ0
 
	`JEMALLOC_N
(
tsd_boŸ0
)

	)

542 
	#tsd_boŸ1
 
	`JEMALLOC_N
(
tsd_boŸ1
)

	)

543 
	#tsd_boŸed
 
	`JEMALLOC_N
(
tsd_boŸed
)

	)

544 
	#tsd_boŸed_gë
 
	`JEMALLOC_N
(
tsd_boŸed_gë
)

	)

545 
	#tsd_˛ónup
 
	`JEMALLOC_N
(
tsd_˛ónup
)

	)

546 
	#tsd_˛ónup_wøµî
 
	`JEMALLOC_N
(
tsd_˛ónup_wøµî
)

	)

547 
	#tsd_„tch
 
	`JEMALLOC_N
(
tsd_„tch
)

	)

548 
	#tsd_gë
 
	`JEMALLOC_N
(
tsd_gë
)

	)

549 
	#tsd_üª«_gë
 
	`JEMALLOC_N
(
tsd_üª«_gë
)

	)

550 
	#tsd_üª«_£t
 
	`JEMALLOC_N
(
tsd_üª«_£t
)

	)

551 
	#tsd_üª«p_gë
 
	`JEMALLOC_N
(
tsd_üª«p_gë
)

	)

552 
	#tsd_öôülized
 
	`JEMALLOC_N
(
tsd_öôülized
)

	)

553 
	#tsd_öô_check_ªcursi⁄
 
	`JEMALLOC_N
(
tsd_öô_check_ªcursi⁄
)

	)

554 
	#tsd_öô_föish
 
	`JEMALLOC_N
(
tsd_öô_föish
)

	)

555 
	#tsd_öô_hód
 
	`JEMALLOC_N
(
tsd_öô_hód
)

	)

556 
	#tsd_«ª«s_td©a_gë
 
	`JEMALLOC_N
(
tsd_«ª«s_td©a_gë
)

	)

557 
	#tsd_«ª«s_td©a_£t
 
	`JEMALLOC_N
(
tsd_«ª«s_td©a_£t
)

	)

558 
	#tsd_«ª«s_td©≠_gë
 
	`JEMALLOC_N
(
tsd_«ª«s_td©≠_gë
)

	)

559 
	#tsd_wøµî_gë
 
	`JEMALLOC_N
(
tsd_wøµî_gë
)

	)

560 
	#tsd_wøµî_£t
 
	`JEMALLOC_N
(
tsd_wøµî_£t
)

	)

561 
	#tsd_nomöÆ
 
	`JEMALLOC_N
(
tsd_nomöÆ
)

	)

562 
	#tsd_¥of_td©a_gë
 
	`JEMALLOC_N
(
tsd_¥of_td©a_gë
)

	)

563 
	#tsd_¥of_td©a_£t
 
	`JEMALLOC_N
(
tsd_¥of_td©a_£t
)

	)

564 
	#tsd_¥of_td©≠_gë
 
	`JEMALLOC_N
(
tsd_¥of_td©≠_gë
)

	)

565 
	#tsd_qu¨™töe_gë
 
	`JEMALLOC_N
(
tsd_qu¨™töe_gë
)

	)

566 
	#tsd_qu¨™töe_£t
 
	`JEMALLOC_N
(
tsd_qu¨™töe_£t
)

	)

567 
	#tsd_qu¨™töï_gë
 
	`JEMALLOC_N
(
tsd_qu¨™töï_gë
)

	)

568 
	#tsd_£t
 
	`JEMALLOC_N
(
tsd_£t
)

	)

569 
	#tsd_tˇche_íabÀd_gë
 
	`JEMALLOC_N
(
tsd_tˇche_íabÀd_gë
)

	)

570 
	#tsd_tˇche_íabÀd_£t
 
	`JEMALLOC_N
(
tsd_tˇche_íabÀd_£t
)

	)

571 
	#tsd_tˇche_íabÀdp_gë
 
	`JEMALLOC_N
(
tsd_tˇche_íabÀdp_gë
)

	)

572 
	#tsd_tˇche_gë
 
	`JEMALLOC_N
(
tsd_tˇche_gë
)

	)

573 
	#tsd_tˇche_£t
 
	`JEMALLOC_N
(
tsd_tˇche_£t
)

	)

574 
	#tsd_tˇchï_gë
 
	`JEMALLOC_N
(
tsd_tˇchï_gë
)

	)

575 
	#tsd_thªad_Æloˇãd_gë
 
	`JEMALLOC_N
(
tsd_thªad_Æloˇãd_gë
)

	)

576 
	#tsd_thªad_Æloˇãd_£t
 
	`JEMALLOC_N
(
tsd_thªad_Æloˇãd_£t
)

	)

577 
	#tsd_thªad_Æloˇãdp_gë
 
	`JEMALLOC_N
(
tsd_thªad_Æloˇãdp_gë
)

	)

578 
	#tsd_thªad_dóŒoˇãd_gë
 
	`JEMALLOC_N
(
tsd_thªad_dóŒoˇãd_gë
)

	)

579 
	#tsd_thªad_dóŒoˇãd_£t
 
	`JEMALLOC_N
(
tsd_thªad_dóŒoˇãd_£t
)

	)

580 
	#tsd_thªad_dóŒoˇãdp_gë
 
	`JEMALLOC_N
(
tsd_thªad_dóŒoˇãdp_gë
)

	)

581 
	#tsd_és
 
	`JEMALLOC_N
(
tsd_és
)

	)

582 
	#tsd_tsd
 
	`JEMALLOC_N
(
tsd_tsd
)

	)

583 
	#tsd_tsdn
 
	`JEMALLOC_N
(
tsd_tsdn
)

	)

584 
	#tsd_wô√ss_f‹k_gë
 
	`JEMALLOC_N
(
tsd_wô√ss_f‹k_gë
)

	)

585 
	#tsd_wô√ss_f‹k_£t
 
	`JEMALLOC_N
(
tsd_wô√ss_f‹k_£t
)

	)

586 
	#tsd_wô√ss_f‹kp_gë
 
	`JEMALLOC_N
(
tsd_wô√ss_f‹kp_gë
)

	)

587 
	#tsd_wô√s£s_gë
 
	`JEMALLOC_N
(
tsd_wô√s£s_gë
)

	)

588 
	#tsd_wô√s£s_£t
 
	`JEMALLOC_N
(
tsd_wô√s£s_£t
)

	)

589 
	#tsd_wô√s£•_gë
 
	`JEMALLOC_N
(
tsd_wô√s£•_gë
)

	)

590 
	#tsdn_„tch
 
	`JEMALLOC_N
(
tsdn_„tch
)

	)

591 
	#tsdn_nuŒ
 
	`JEMALLOC_N
(
tsdn_nuŒ
)

	)

592 
	#tsdn_tsd
 
	`JEMALLOC_N
(
tsdn_tsd
)

	)

593 
	#u2rz
 
	`JEMALLOC_N
(
u2rz
)

	)

594 
	#vÆgröd_‰ìlike_block
 
	`JEMALLOC_N
(
vÆgröd_‰ìlike_block
)

	)

595 
	#vÆgröd_make_mem_deföed
 
	`JEMALLOC_N
(
vÆgröd_make_mem_deföed
)

	)

596 
	#vÆgröd_make_mem_nﬂc˚ss
 
	`JEMALLOC_N
(
vÆgröd_make_mem_nﬂc˚ss
)

	)

597 
	#vÆgröd_make_mem_undeföed
 
	`JEMALLOC_N
(
vÆgröd_make_mem_undeföed
)

	)

598 
	#wô√ss_as£π_lockÀss
 
	`JEMALLOC_N
(
wô√ss_as£π_lockÀss
)

	)

599 
	#wô√ss_as£π_nŸ_ow√r
 
	`JEMALLOC_N
(
wô√ss_as£π_nŸ_ow√r
)

	)

600 
	#wô√ss_as£π_ow√r
 
	`JEMALLOC_N
(
wô√ss_as£π_ow√r
)

	)

601 
	#wô√ss_f‹k_˛ónup
 
	`JEMALLOC_N
(
wô√ss_f‹k_˛ónup
)

	)

602 
	#wô√ss_öô
 
	`JEMALLOC_N
(
wô√ss_öô
)

	)

603 
	#wô√ss_lock
 
	`JEMALLOC_N
(
wô√ss_lock
)

	)

604 
	#wô√ss_lock_îr‹
 
	`JEMALLOC_N
(
wô√ss_lock_îr‹
)

	)

605 
	#wô√ss_lockÀss_îr‹
 
	`JEMALLOC_N
(
wô√ss_lockÀss_îr‹
)

	)

606 
	#wô√ss_nŸ_ow√r_îr‹
 
	`JEMALLOC_N
(
wô√ss_nŸ_ow√r_îr‹
)

	)

607 
	#wô√ss_ow√r_îr‹
 
	`JEMALLOC_N
(
wô√ss_ow√r_îr‹
)

	)

608 
	#wô√ss_po°f‹k_chûd
 
	`JEMALLOC_N
(
wô√ss_po°f‹k_chûd
)

	)

609 
	#wô√ss_po°f‹k_∑ª¡
 
	`JEMALLOC_N
(
wô√ss_po°f‹k_∑ª¡
)

	)

610 
	#wô√ss_¥ef‹k
 
	`JEMALLOC_N
(
wô√ss_¥ef‹k
)

	)

611 
	#wô√ss_u∆ock
 
	`JEMALLOC_N
(
wô√ss_u∆ock
)

	)

612 
	#wô√s£s_˛ónup
 
	`JEMALLOC_N
(
wô√s£s_˛ónup
)

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/private_unnamespace.h

1 #unde‡
a0dÆloc


2 #unde‡
a0mÆloc


3 #unde‡
¨ía_ØŒoc


4 #unde‡
¨ía_Æloc_junk_smÆl


5 #unde‡
¨ía_basic_°©s_mîge


6 #unde‡
¨ía_bö_ödex


7 #unde‡
¨ía_bö_öfo


8 #unde‡
¨ía_bô£lm_gë_c⁄°


9 #unde‡
¨ía_bô£lm_gë_muèbÀ


10 #unde‡
¨ía_boŸ


11 #unde‡
¨ía_choo£


12 #unde‡
¨ía_choo£_h¨d


13 #unde‡
¨ía_choo£_im∂


14 #unde‡
¨ía_chunk_Æloc_huge


15 #unde‡
¨ía_chunk_ˇche_maybe_ö£π


16 #unde‡
¨ía_chunk_ˇche_maybe_ªmove


17 #unde‡
¨ía_chunk_dÆloc_huge


18 #unde‡
¨ía_chunk_øŒoc_huge_ex∑nd


19 #unde‡
¨ía_chunk_øŒoc_huge_shrök


20 #unde‡
¨ía_chunk_øŒoc_huge_simû¨


21 #unde‡
¨ía_˛ónup


22 #unde‡
¨ía_dÆloc


23 #unde‡
¨ía_dÆloc_bö


24 #unde‡
¨ía_dÆloc_bö_junked_locked


25 #unde‡
¨ía_dÆloc_junk_œrge


26 #unde‡
¨ía_dÆloc_junk_smÆl


27 #unde‡
¨ía_dÆloc_œrge


28 #unde‡
¨ía_dÆloc_œrge_junked_locked


29 #unde‡
¨ía_dÆloc_smÆl


30 #unde‡
¨ía_deˇy_tick


31 #unde‡
¨ía_deˇy_ticks


32 #unde‡
¨ía_deˇy_time_deÁu…_gë


33 #unde‡
¨ía_deˇy_time_deÁu…_£t


34 #unde‡
¨ía_deˇy_time_gë


35 #unde‡
¨ía_deˇy_time_£t


36 #unde‡
¨ía_dss_¥ec_gë


37 #unde‡
¨ía_dss_¥ec_£t


38 #unde‡
¨ía_gë


39 #unde‡
¨ía_ichoo£


40 #unde‡
¨ía_öô


41 #unde‡
¨ía_lg_dúty_mu…_deÁu…_gë


42 #unde‡
¨ía_lg_dúty_mu…_deÁu…_£t


43 #unde‡
¨ía_lg_dúty_mu…_gë


44 #unde‡
¨ía_lg_dúty_mu…_£t


45 #unde‡
¨ía_mÆloc


46 #unde‡
¨ía_mÆloc_h¨d


47 #unde‡
¨ía_mÆloc_œrge


48 #unde‡
¨ía_m≠bôs_Æloˇãd_gë


49 #unde‡
¨ía_m≠bôs_bööd_gë


50 #unde‡
¨ía_m≠bôs_decommôãd_gë


51 #unde‡
¨ía_m≠bôs_dúty_gë


52 #unde‡
¨ía_m≠bôs_gë


53 #unde‡
¨ía_m≠bôs_öã∫Æ_£t


54 #unde‡
¨ía_m≠bôs_œrge_bööd_£t


55 #unde‡
¨ía_m≠bôs_œrge_gë


56 #unde‡
¨ía_m≠bôs_œrge_£t


57 #unde‡
¨ía_m≠bôs_œrge_size_gë


58 #unde‡
¨ía_m≠bôs_size_decode


59 #unde‡
¨ía_m≠bôs_size_ícode


60 #unde‡
¨ía_m≠bôs_smÆl_runöd_gë


61 #unde‡
¨ía_m≠bôs_smÆl_£t


62 #unde‡
¨ía_m≠bôs_u«Œoˇãd_£t


63 #unde‡
¨ía_m≠bôs_u«Œoˇãd_size_gë


64 #unde‡
¨ía_m≠bôs_u«Œoˇãd_size_£t


65 #unde‡
¨ía_m≠bôs_unzî€d_gë


66 #unde‡
¨ía_m≠bô•_gë_c⁄°


67 #unde‡
¨ía_m≠bô•_gë_muèbÀ


68 #unde‡
¨ía_m≠bô•_ªad


69 #unde‡
¨ía_m≠bô•_wrôe


70 #unde‡
¨ía_maxrun


71 #unde‡
¨ía_maybe_purge


72 #unde‡
¨ía_mëad©a_Æloˇãd_add


73 #unde‡
¨ía_mëad©a_Æloˇãd_gë


74 #unde‡
¨ía_mëad©a_Æloˇãd_sub


75 #unde‡
¨ía_migøã


76 #unde‡
¨ía_mis˚lm_gë_c⁄°


77 #unde‡
¨ía_mis˚lm_gë_muèbÀ


78 #unde‡
¨ía_mis˚lm_to_∑geöd


79 #unde‡
¨ía_mis˚lm_to_Ωages


80 #unde‡
¨ía_√w


81 #unde‡
¨ía_node_Æloc


82 #unde‡
¨ía_node_dÆloc


83 #unde‡
¨ía_¡hªads_dec


84 #unde‡
¨ía_¡hªads_gë


85 #unde‡
¨ía_¡hªads_öc


86 #unde‡
¨ía_∑Œoc


87 #unde‡
¨ía_po°f‹k_chûd


88 #unde‡
¨ía_po°f‹k_∑ª¡


89 #unde‡
¨ía_¥ef‹k0


90 #unde‡
¨ía_¥ef‹k1


91 #unde‡
¨ía_¥ef‹k2


92 #unde‡
¨ía_¥ef‹k3


93 #unde‡
¨ía_¥of_accum


94 #unde‡
¨ía_¥of_accum_im∂


95 #unde‡
¨ía_¥of_accum_locked


96 #unde‡
¨ía_¥of_¥omŸed


97 #unde‡
¨ía_¥of_t˘x_gë


98 #unde‡
¨ía_¥of_t˘x_ª£t


99 #unde‡
¨ía_¥of_t˘x_£t


100 #unde‡
¨ía_±r_smÆl_bööd_gë


101 #unde‡
¨ía_purge


102 #unde‡
¨ía_qu¨™töe_junk_smÆl


103 #unde‡
¨ía_øŒoc


104 #unde‡
¨ía_øŒoc_junk_œrge


105 #unde‡
¨ía_øŒoc_no_move


106 #unde‡
¨ía_rd_to_mis˚lm


107 #unde‡
¨ía_ªdz⁄e_c‹ru±i⁄


108 #unde‡
¨ía_ª£t


109 #unde‡
¨ía_run_ªgöd


110 #unde‡
¨ía_run_to_mis˚lm


111 #unde‡
¨ía_ßŒoc


112 #unde‡
¨ía_sdÆloc


113 #unde‡
¨ía_°©s_mîge


114 #unde‡
¨ía_tˇche_fûl_smÆl


115 #unde‡
¨ía_td©a_gë


116 #unde‡
¨ía_td©a_gë_h¨d


117 #unde‡
¨ías


118 #unde‡
¨ías_td©a_by∑ss_˛ónup


119 #unde‡
¨ías_td©a_˛ónup


120 #unde‡
©omic_add_p


121 #unde‡
©omic_add_u


122 #unde‡
©omic_add_uöt32


123 #unde‡
©omic_add_uöt64


124 #unde‡
©omic_add_z


125 #unde‡
©omic_ˇs_p


126 #unde‡
©omic_ˇs_u


127 #unde‡
©omic_ˇs_uöt32


128 #unde‡
©omic_ˇs_uöt64


129 #unde‡
©omic_ˇs_z


130 #unde‡
©omic_sub_p


131 #unde‡
©omic_sub_u


132 #unde‡
©omic_sub_uöt32


133 #unde‡
©omic_sub_uöt64


134 #unde‡
©omic_sub_z


135 #unde‡
©omic_wrôe_p


136 #unde‡
©omic_wrôe_u


137 #unde‡
©omic_wrôe_uöt32


138 #unde‡
©omic_wrôe_uöt64


139 #unde‡
©omic_wrôe_z


140 #unde‡
ba£_Æloc


141 #unde‡
ba£_boŸ


142 #unde‡
ba£_po°f‹k_chûd


143 #unde‡
ba£_po°f‹k_∑ª¡


144 #unde‡
ba£_¥ef‹k


145 #unde‡
ba£_°©s_gë


146 #unde‡
bôm≠_fuŒ


147 #unde‡
bôm≠_gë


148 #unde‡
bôm≠_öfo_öô


149 #unde‡
bôm≠_öô


150 #unde‡
bôm≠_£t


151 #unde‡
bôm≠_sfu


152 #unde‡
bôm≠_size


153 #unde‡
bôm≠_un£t


154 #unde‡
boŸ°øp_ˇŒoc


155 #unde‡
boŸ°øp_‰ì


156 #unde‡
boŸ°øp_mÆloc


157 #unde‡
bt_öô


158 #unde‡
bu„º‹


159 #unde‡
chunk_Æloc_ba£


160 #unde‡
chunk_Æloc_ˇche


161 #unde‡
chunk_Æloc_dss


162 #unde‡
chunk_Æloc_mm≠


163 #unde‡
chunk_Æloc_wøµî


164 #unde‡
chunk_boŸ


165 #unde‡
chunk_dÆloc_ˇche


166 #unde‡
chunk_dÆloc_mm≠


167 #unde‡
chunk_dÆloc_wøµî


168 #unde‡
chunk_dîegi°î


169 #unde‡
chunk_dss_boŸ


170 #unde‡
chunk_dss_po°f‹k_chûd


171 #unde‡
chunk_dss_po°f‹k_∑ª¡


172 #unde‡
chunk_dss_¥ec_gë


173 #unde‡
chunk_dss_¥ec_£t


174 #unde‡
chunk_dss_¥ef‹k


175 #unde‡
chunk_hooks_deÁu…


176 #unde‡
chunk_hooks_gë


177 #unde‡
chunk_hooks_£t


178 #unde‡
chunk_ö_dss


179 #unde‡
chunk_lookup


180 #unde‡
chunk_≈ages


181 #unde‡
chunk_po°f‹k_chûd


182 #unde‡
chunk_po°f‹k_∑ª¡


183 #unde‡
chunk_¥ef‹k


184 #unde‡
chunk_purge_wøµî


185 #unde‡
chunk_ªgi°î


186 #unde‡
chunks_πªe


187 #unde‡
chunksize


188 #unde‡
chunksize_mask


189 #unde‡
ckh_cou¡


190 #unde‡
ckh_dñëe


191 #unde‡
ckh_ö£π


192 #unde‡
ckh_ôî


193 #unde‡
ckh_√w


194 #unde‡
ckh_poöãr_hash


195 #unde‡
ckh_poöãr_keycomp


196 #unde‡
ckh_ªmove


197 #unde‡
ckh_£¨ch


198 #unde‡
ckh_°rög_hash


199 #unde‡
ckh_°rög_keycomp


200 #unde‡
˘l_boŸ


201 #unde‡
˘l_bymib


202 #unde‡
˘l_by«me


203 #unde‡
˘l_«mëomib


204 #unde‡
˘l_po°f‹k_chûd


205 #unde‡
˘l_po°f‹k_∑ª¡


206 #unde‡
˘l_¥ef‹k


207 #unde‡
deˇy_tickî_gë


208 #unde‡
dss_¥ec_«mes


209 #unde‡
exã¡_node_achunk_gë


210 #unde‡
exã¡_node_achunk_£t


211 #unde‡
exã¡_node_addr_gë


212 #unde‡
exã¡_node_addr_£t


213 #unde‡
exã¡_node_¨ía_gë


214 #unde‡
exã¡_node_¨ía_£t


215 #unde‡
exã¡_node_commôãd_gë


216 #unde‡
exã¡_node_commôãd_£t


217 #unde‡
exã¡_node_dúty_ö£π


218 #unde‡
exã¡_node_dúty_lökage_öô


219 #unde‡
exã¡_node_dúty_ªmove


220 #unde‡
exã¡_node_öô


221 #unde‡
exã¡_node_¥of_t˘x_gë


222 #unde‡
exã¡_node_¥of_t˘x_£t


223 #unde‡
exã¡_node_size_gë


224 #unde‡
exã¡_node_size_£t


225 #unde‡
exã¡_node_zî€d_gë


226 #unde‡
exã¡_node_zî€d_£t


227 #unde‡
exã¡_åì_ad_de°roy


228 #unde‡
exã¡_åì_ad_de°roy_ªcur£


229 #unde‡
exã¡_åì_ad_em±y


230 #unde‡
exã¡_åì_ad_fú°


231 #unde‡
exã¡_åì_ad_ö£π


232 #unde‡
exã¡_åì_ad_ôî


233 #unde‡
exã¡_åì_ad_ôî_ªcur£


234 #unde‡
exã¡_åì_ad_ôî_°¨t


235 #unde‡
exã¡_åì_ad_œ°


236 #unde‡
exã¡_åì_ad_√w


237 #unde‡
exã¡_åì_ad_√xt


238 #unde‡
exã¡_åì_ad_n£¨ch


239 #unde‡
exã¡_åì_ad_¥ev


240 #unde‡
exã¡_åì_ad_p£¨ch


241 #unde‡
exã¡_åì_ad_ªmove


242 #unde‡
exã¡_åì_ad_ªvî£_ôî


243 #unde‡
exã¡_åì_ad_ªvî£_ôî_ªcur£


244 #unde‡
exã¡_åì_ad_ªvî£_ôî_°¨t


245 #unde‡
exã¡_åì_ad_£¨ch


246 #unde‡
exã¡_åì_szad_de°roy


247 #unde‡
exã¡_åì_szad_de°roy_ªcur£


248 #unde‡
exã¡_åì_szad_em±y


249 #unde‡
exã¡_åì_szad_fú°


250 #unde‡
exã¡_åì_szad_ö£π


251 #unde‡
exã¡_åì_szad_ôî


252 #unde‡
exã¡_åì_szad_ôî_ªcur£


253 #unde‡
exã¡_åì_szad_ôî_°¨t


254 #unde‡
exã¡_åì_szad_œ°


255 #unde‡
exã¡_åì_szad_√w


256 #unde‡
exã¡_åì_szad_√xt


257 #unde‡
exã¡_åì_szad_n£¨ch


258 #unde‡
exã¡_åì_szad_¥ev


259 #unde‡
exã¡_åì_szad_p£¨ch


260 #unde‡
exã¡_åì_szad_ªmove


261 #unde‡
exã¡_åì_szad_ªvî£_ôî


262 #unde‡
exã¡_åì_szad_ªvî£_ôî_ªcur£


263 #unde‡
exã¡_åì_szad_ªvî£_ôî_°¨t


264 #unde‡
exã¡_åì_szad_£¨ch


265 #unde‡
ffs_Œu


266 #unde‡
ffs_lu


267 #unde‡
ffs_u


268 #unde‡
ffs_u32


269 #unde‡
ffs_u64


270 #unde‡
ffs_zu


271 #unde‡
gë_î∫o


272 #unde‡
hash


273 #unde‡
hash_fmix_32


274 #unde‡
hash_fmix_64


275 #unde‡
hash_gë_block_32


276 #unde‡
hash_gë_block_64


277 #unde‡
hash_rŸl_32


278 #unde‡
hash_rŸl_64


279 #unde‡
hash_x64_128


280 #unde‡
hash_x86_128


281 #unde‡
hash_x86_32


282 #unde‡
huge_ØŒoc


283 #unde‡
huge_dÆloc


284 #unde‡
huge_dÆloc_junk


285 #unde‡
huge_mÆloc


286 #unde‡
huge_∑Œoc


287 #unde‡
huge_¥of_t˘x_gë


288 #unde‡
huge_¥of_t˘x_ª£t


289 #unde‡
huge_¥of_t˘x_£t


290 #unde‡
huge_øŒoc


291 #unde‡
huge_øŒoc_no_move


292 #unde‡
huge_ßŒoc


293 #unde‡
üÆloc


294 #unde‡
üŒoc


295 #unde‡
üŒocztm


296 #unde‡
üª«_˛ónup


297 #unde‡
idÆloc


298 #unde‡
idÆlo˘m


299 #unde‡
ö_vÆgröd


300 #unde‡
ödex2size


301 #unde‡
ödex2size_compuã


302 #unde‡
ödex2size_lookup


303 #unde‡
ödex2size_èb


304 #unde‡
ùÆloc


305 #unde‡
ùÆlo˘


306 #unde‡
ùÆlocztm


307 #unde‡
iqÆloc


308 #unde‡
úÆloc


309 #unde‡
úÆlo˘


310 #unde‡
úÆlo˘_ªÆign


311 #unde‡
ißŒoc


312 #unde‡
isdÆlo˘


313 #unde‡
isqÆloc


314 #unde‡
i°hªaded


315 #unde‡
ivßŒoc


316 #unde‡
ixÆloc


317 #unde‡
jemÆloc_po°f‹k_chûd


318 #unde‡
jemÆloc_po°f‹k_∑ª¡


319 #unde‡
jemÆloc_¥ef‹k


320 #unde‡
œrge_max˛ass


321 #unde‡
lg_Êo‹


322 #unde‡
lg_¥of_ßm∂e


323 #unde‡
mÆloc_˝rötf


324 #unde‡
mÆloc_muãx_as£π_nŸ_ow√r


325 #unde‡
mÆloc_muãx_as£π_ow√r


326 #unde‡
mÆloc_muãx_boŸ


327 #unde‡
mÆloc_muãx_öô


328 #unde‡
mÆloc_muãx_lock


329 #unde‡
mÆloc_muãx_po°f‹k_chûd


330 #unde‡
mÆloc_muãx_po°f‹k_∑ª¡


331 #unde‡
mÆloc_muãx_¥ef‹k


332 #unde‡
mÆloc_muãx_u∆ock


333 #unde‡
mÆloc_¥ötf


334 #unde‡
mÆloc_¢¥ötf


335 #unde‡
mÆloc_°πoumax


336 #unde‡
mÆloc_tsd_boŸ0


337 #unde‡
mÆloc_tsd_boŸ1


338 #unde‡
mÆloc_tsd_˛ónup_ªgi°î


339 #unde‡
mÆloc_tsd_dÆloc


340 #unde‡
mÆloc_tsd_mÆloc


341 #unde‡
mÆloc_tsd_no_˛ónup


342 #unde‡
mÆloc_v˝rötf


343 #unde‡
mÆloc_v¢¥ötf


344 #unde‡
mÆloc_wrôe


345 #unde‡
m≠_büs


346 #unde‡
m≠_misc_off£t


347 #unde‡
mb_wrôe


348 #unde‡
«ª«s_auto


349 #unde‡
«ª«s_td©a_˛ónup


350 #unde‡
«ª«s_tŸÆ_gë


351 #unde‡
n˝us


352 #unde‡
nhbös


353 #unde‡
nh˛as£s


354 #unde‡
∆˛as£s


355 #unde‡
n°ime_add


356 #unde‡
n°ime_com∑ª


357 #unde‡
n°ime_c›y


358 #unde‡
n°ime_divide


359 #unde‡
n°ime_idivide


360 #unde‡
n°ime_imu…ùly


361 #unde‡
n°ime_öô


362 #unde‡
n°ime_öô2


363 #unde‡
n°ime_ns


364 #unde‡
n°ime_n£c


365 #unde‡
n°ime_£c


366 #unde‡
n°ime_subåa˘


367 #unde‡
n°ime_upd©e


368 #unde‡
›t_ab‹t


369 #unde‡
›t_deˇy_time


370 #unde‡
›t_dss


371 #unde‡
›t_junk


372 #unde‡
›t_junk_Æloc


373 #unde‡
›t_junk_‰ì


374 #unde‡
›t_lg_chunk


375 #unde‡
›t_lg_dúty_mu…


376 #unde‡
›t_lg_¥of_öãrvÆ


377 #unde‡
›t_lg_¥of_ßm∂e


378 #unde‡
›t_lg_tˇche_max


379 #unde‡
›t_«ª«s


380 #unde‡
›t_¥of


381 #unde‡
›t_¥of_accum


382 #unde‡
›t_¥of_a˘ive


383 #unde‡
›t_¥of_föÆ


384 #unde‡
›t_¥of_gdump


385 #unde‡
›t_¥of_Àak


386 #unde‡
›t_¥of_¥efix


387 #unde‡
›t_¥of_thªad_a˘ive_öô


388 #unde‡
›t_purge


389 #unde‡
›t_qu¨™töe


390 #unde‡
›t_ªdz⁄e


391 #unde‡
›t_°©s_¥öt


392 #unde‡
›t_tˇche


393 #unde‡
›t_uåa˚


394 #unde‡
›t_xmÆloc


395 #unde‡
›t_zîo


396 #unde‡
p2rz


397 #unde‡
∑ges_boŸ


398 #unde‡
∑ges_commô


399 #unde‡
∑ges_decommô


400 #unde‡
∑ges_m≠


401 #unde‡
∑ges_purge


402 #unde‡
∑ges_åim


403 #unde‡
∑ges_unm≠


404 #unde‡
pow2_˚û_u32


405 #unde‡
pow2_˚û_u64


406 #unde‡
pow2_˚û_zu


407 #unde‡
¥ng_lg_ønge


408 #unde‡
¥ng_ønge


409 #unde‡
¥of_a˘ive


410 #unde‡
¥of_a˘ive_gë


411 #unde‡
¥of_a˘ive_gë_u∆ocked


412 #unde‡
¥of_a˘ive_£t


413 #unde‡
¥of_Æloc_¥ï


414 #unde‡
¥of_Æloc_rﬁlback


415 #unde‡
¥of_backåa˚


416 #unde‡
¥of_boŸ0


417 #unde‡
¥of_boŸ1


418 #unde‡
¥of_boŸ2


419 #unde‡
¥of_bt_cou¡


420 #unde‡
¥of_dump_hódî


421 #unde‡
¥of_dump_›í


422 #unde‡
¥of_‰ì


423 #unde‡
¥of_‰ì_ßm∂ed_obje˘


424 #unde‡
¥of_gdump


425 #unde‡
¥of_gdump_gë


426 #unde‡
¥of_gdump_gë_u∆ocked


427 #unde‡
¥of_gdump_£t


428 #unde‡
¥of_gdump_vÆ


429 #unde‡
¥of_idump


430 #unde‡
¥of_öãrvÆ


431 #unde‡
¥of_lookup


432 #unde‡
¥of_mÆloc


433 #unde‡
¥of_mÆloc_ßm∂e_obje˘


434 #unde‡
¥of_mdump


435 #unde‡
¥of_po°f‹k_chûd


436 #unde‡
¥of_po°f‹k_∑ª¡


437 #unde‡
¥of_¥ef‹k0


438 #unde‡
¥of_¥ef‹k1


439 #unde‡
¥of_ªÆloc


440 #unde‡
¥of_ª£t


441 #unde‡
¥of_ßm∂e_accum_upd©e


442 #unde‡
¥of_ßm∂e_thªshﬁd_upd©e


443 #unde‡
¥of_t˘x_gë


444 #unde‡
¥of_t˘x_ª£t


445 #unde‡
¥of_t˘x_£t


446 #unde‡
¥of_td©a_˛ónup


447 #unde‡
¥of_td©a_cou¡


448 #unde‡
¥of_td©a_gë


449 #unde‡
¥of_td©a_öô


450 #unde‡
¥of_td©a_ªöô


451 #unde‡
¥of_thªad_a˘ive_gë


452 #unde‡
¥of_thªad_a˘ive_öô_gë


453 #unde‡
¥of_thªad_a˘ive_öô_£t


454 #unde‡
¥of_thªad_a˘ive_£t


455 #unde‡
¥of_thªad_«me_gë


456 #unde‡
¥of_thªad_«me_£t


457 #unde‡
purge_mode_«mes


458 #unde‡
qu¨™töe


459 #unde‡
qu¨™töe_Æloc_hook


460 #unde‡
qu¨™töe_Æloc_hook_w‹k


461 #unde‡
qu¨™töe_˛ónup


462 #unde‡
ªgi°î_z⁄e


463 #unde‡
πªe_chûd_ªad


464 #unde‡
πªe_chûd_ªad_h¨d


465 #unde‡
πªe_chûd_åyªad


466 #unde‡
πªe_dñëe


467 #unde‡
πªe_gë


468 #unde‡
πªe_√w


469 #unde‡
πªe_node_vÆid


470 #unde‡
πªe_£t


471 #unde‡
πªe_°¨t_Àvñ


472 #unde‡
πªe_subkey


473 #unde‡
πªe_subåì_ªad


474 #unde‡
πªe_subåì_ªad_h¨d


475 #unde‡
πªe_subåì_åyªad


476 #unde‡
πªe_vÆ_ªad


477 #unde‡
πªe_vÆ_wrôe


478 #unde‡
run_qu™tize_˚û


479 #unde‡
run_qu™tize_Êo‹


480 #unde‡
run_qu™tize_max


481 #unde‡
s2u


482 #unde‡
s2u_compuã


483 #unde‡
s2u_lookup


484 #unde‡
ß2u


485 #unde‡
£t_î∫o


486 #unde‡
size2ödex


487 #unde‡
size2ödex_compuã


488 #unde‡
size2ödex_lookup


489 #unde‡
size2ödex_èb


490 #unde‡
°©s_ˇ˘ive


491 #unde‡
°©s_ˇ˘ive_add


492 #unde‡
°©s_ˇ˘ive_gë


493 #unde‡
°©s_ˇ˘ive_sub


494 #unde‡
°©s_¥öt


495 #unde‡
tˇche_Æloc_ósy


496 #unde‡
tˇche_Æloc_œrge


497 #unde‡
tˇche_Æloc_smÆl


498 #unde‡
tˇche_Æloc_smÆl_h¨d


499 #unde‡
tˇche_¨ía_ªassocüã


500 #unde‡
tˇche_bö_Êush_œrge


501 #unde‡
tˇche_bö_Êush_smÆl


502 #unde‡
tˇche_bö_öfo


503 #unde‡
tˇche_boŸ


504 #unde‡
tˇche_˛ónup


505 #unde‡
tˇche_¸óã


506 #unde‡
tˇche_dÆloc_œrge


507 #unde‡
tˇche_dÆloc_smÆl


508 #unde‡
tˇche_íabÀd_˛ónup


509 #unde‡
tˇche_íabÀd_gë


510 #unde‡
tˇche_íabÀd_£t


511 #unde‡
tˇche_evít


512 #unde‡
tˇche_evít_h¨d


513 #unde‡
tˇche_Êush


514 #unde‡
tˇche_gë


515 #unde‡
tˇche_gë_h¨d


516 #unde‡
tˇche_max˛ass


517 #unde‡
tˇche_ßŒoc


518 #unde‡
tˇche_°©s_mîge


519 #unde‡
tˇches


520 #unde‡
tˇches_¸óã


521 #unde‡
tˇches_de°roy


522 #unde‡
tˇches_Êush


523 #unde‡
tˇches_gë


524 #unde‡
thªad_Æloˇãd_˛ónup


525 #unde‡
thªad_dóŒoˇãd_˛ónup


526 #unde‡
tickî_c›y


527 #unde‡
tickî_öô


528 #unde‡
tickî_ªad


529 #unde‡
tickî_tick


530 #unde‡
tickî_ticks


531 #unde‡
tsd_¨ía_gë


532 #unde‡
tsd_¨ía_£t


533 #unde‡
tsd_¨í≠_gë


534 #unde‡
tsd_¨ías_td©a_by∑ss_gë


535 #unde‡
tsd_¨ías_td©a_by∑ss_£t


536 #unde‡
tsd_¨ías_td©a_by∑s•_gë


537 #unde‡
tsd_¨ías_td©a_gë


538 #unde‡
tsd_¨ías_td©a_£t


539 #unde‡
tsd_¨ías_td©≠_gë


540 #unde‡
tsd_boŸ


541 #unde‡
tsd_boŸ0


542 #unde‡
tsd_boŸ1


543 #unde‡
tsd_boŸed


544 #unde‡
tsd_boŸed_gë


545 #unde‡
tsd_˛ónup


546 #unde‡
tsd_˛ónup_wøµî


547 #unde‡
tsd_„tch


548 #unde‡
tsd_gë


549 #unde‡
tsd_üª«_gë


550 #unde‡
tsd_üª«_£t


551 #unde‡
tsd_üª«p_gë


552 #unde‡
tsd_öôülized


553 #unde‡
tsd_öô_check_ªcursi⁄


554 #unde‡
tsd_öô_föish


555 #unde‡
tsd_öô_hód


556 #unde‡
tsd_«ª«s_td©a_gë


557 #unde‡
tsd_«ª«s_td©a_£t


558 #unde‡
tsd_«ª«s_td©≠_gë


559 #unde‡
tsd_wøµî_gë


560 #unde‡
tsd_wøµî_£t


561 #unde‡
tsd_nomöÆ


562 #unde‡
tsd_¥of_td©a_gë


563 #unde‡
tsd_¥of_td©a_£t


564 #unde‡
tsd_¥of_td©≠_gë


565 #unde‡
tsd_qu¨™töe_gë


566 #unde‡
tsd_qu¨™töe_£t


567 #unde‡
tsd_qu¨™töï_gë


568 #unde‡
tsd_£t


569 #unde‡
tsd_tˇche_íabÀd_gë


570 #unde‡
tsd_tˇche_íabÀd_£t


571 #unde‡
tsd_tˇche_íabÀdp_gë


572 #unde‡
tsd_tˇche_gë


573 #unde‡
tsd_tˇche_£t


574 #unde‡
tsd_tˇchï_gë


575 #unde‡
tsd_thªad_Æloˇãd_gë


576 #unde‡
tsd_thªad_Æloˇãd_£t


577 #unde‡
tsd_thªad_Æloˇãdp_gë


578 #unde‡
tsd_thªad_dóŒoˇãd_gë


579 #unde‡
tsd_thªad_dóŒoˇãd_£t


580 #unde‡
tsd_thªad_dóŒoˇãdp_gë


581 #unde‡
tsd_és


582 #unde‡
tsd_tsd


583 #unde‡
tsd_tsdn


584 #unde‡
tsd_wô√ss_f‹k_gë


585 #unde‡
tsd_wô√ss_f‹k_£t


586 #unde‡
tsd_wô√ss_f‹kp_gë


587 #unde‡
tsd_wô√s£s_gë


588 #unde‡
tsd_wô√s£s_£t


589 #unde‡
tsd_wô√s£•_gë


590 #unde‡
tsdn_„tch


591 #unde‡
tsdn_nuŒ


592 #unde‡
tsdn_tsd


593 #unde‡
u2rz


594 #unde‡
vÆgröd_‰ìlike_block


595 #unde‡
vÆgröd_make_mem_deföed


596 #unde‡
vÆgröd_make_mem_nﬂc˚ss


597 #unde‡
vÆgröd_make_mem_undeföed


598 #unde‡
wô√ss_as£π_lockÀss


599 #unde‡
wô√ss_as£π_nŸ_ow√r


600 #unde‡
wô√ss_as£π_ow√r


601 #unde‡
wô√ss_f‹k_˛ónup


602 #unde‡
wô√ss_öô


603 #unde‡
wô√ss_lock


604 #unde‡
wô√ss_lock_îr‹


605 #unde‡
wô√ss_lockÀss_îr‹


606 #unde‡
wô√ss_nŸ_ow√r_îr‹


607 #unde‡
wô√ss_ow√r_îr‹


608 #unde‡
wô√ss_po°f‹k_chûd


609 #unde‡
wô√ss_po°f‹k_∑ª¡


610 #unde‡
wô√ss_¥ef‹k


611 #unde‡
wô√ss_u∆ock


612 #unde‡
wô√s£s_˛ónup


	@dep/jemalloc-4.2.0/include/jemalloc/internal/prng.h

2 #ifde‡
JEMALLOC_H_TYPES


22 
	#PRNG_A
 
	`UINT64_C
(6364136223846793005)

	)

23 
	#PRNG_C
 
	`UINT64_C
(1442695040888963407)

	)

27 #ifde‡
JEMALLOC_H_STRUCTS


31 #ifde‡
JEMALLOC_H_EXTERNS


35 #ifde‡
JEMALLOC_H_INLINES


37 #i‚de‡
JEMALLOC_ENABLE_INLINE


38 
uöt64_t
 
¥ng_lg_ønge
(uöt64_à*
°©e
, 
lg_ønge
);

39 
uöt64_t
 
¥ng_ønge
(uöt64_à*
°©e
, uöt64_à
ønge
);

42 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_PRNG_C_
))

43 
JEMALLOC_ALWAYS_INLINE
 
uöt64_t


44 
	$¥ng_lg_ønge
(
uöt64_t
 *
°©e
, 
lg_ønge
)

46 
uöt64_t
 
ªt
;

48 
	`as£π
(
lg_ønge
 > 0);

49 
	`as£π
(
lg_ønge
 <= 64);

51 
ªt
 = (*
°©e
 * 
PRNG_A
Ë+ 
PRNG_C
;

52 *
°©e
 = 
ªt
;

53 
ªt
 >>(64 - 
lg_ønge
);

55  (
ªt
);

56 
	}
}

58 
JEMALLOC_ALWAYS_INLINE
 
uöt64_t


59 
	$¥ng_ønge
(
uöt64_t
 *
°©e
, uöt64_à
ønge
)

61 
uöt64_t
 
ªt
;

62 
lg_ønge
;

64 
	`as£π
(
ønge
 > 1);

67 
lg_ønge
 = 
	`ffs_u64
(
	`pow2_˚û_u64
(
ønge
)) - 1;

71 
ªt
 = 
	`¥ng_lg_ønge
(
°©e
, 
lg_ønge
);

72 } 
ªt
 >
ønge
);

74  (
ªt
);

75 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/prof.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
¥of_bt_s
 
	t¥of_bt_t
;

5 
¥of_˙t_s
 
	t¥of_˙t_t
;

6 
¥of_t˘x_s
 
	t¥of_t˘x_t
;

7 
¥of_g˘x_s
 
	t¥of_g˘x_t
;

8 
¥of_td©a_s
 
	t¥of_td©a_t
;

11 #ifde‡
JEMALLOC_PROF


12 
	#PROF_PREFIX_DEFAULT
 "jïrof"

	)

14 
	#PROF_PREFIX_DEFAULT
 ""

	)

16 
	#LG_PROF_SAMPLE_DEFAULT
 19

	)

17 
	#LG_PROF_INTERVAL_DEFAULT
 -1

	)

24 
	#PROF_BT_MAX
 128

	)

27 
	#PROF_CKH_MINITEMS
 64

	)

30 
	#PROF_DUMP_BUFSIZE
 65536

	)

33 
	#PROF_PRINTF_BUFSIZE
 128

	)

39 
	#PROF_NCTX_LOCKS
 1024

	)

45 
	#PROF_NTDATA_LOCKS
 256

	)

51 
	#PROF_TDATA_STATE_REINCARNATED
 ((
¥of_td©a_t
 *)(
uöçå_t
)1)

	)

52 
	#PROF_TDATA_STATE_PURGATORY
 ((
¥of_td©a_t
 *)(
uöçå_t
)2)

	)

53 
	#PROF_TDATA_STATE_MAX
 
PROF_TDATA_STATE_PURGATORY


	)

57 #ifde‡
JEMALLOC_H_STRUCTS


59 
	s¥of_bt_s
 {

61 **
	mvec
;

62 
	mÀn
;

65 #ifde‡
JEMALLOC_PROF_LIBGCC


68 
¥of_bt_t
 *
	mbt
;

69 
	mmax
;

70 } 
	t¥of_unwöd_d©a_t
;

73 
	s¥of_˙t_s
 {

75 
uöt64_t
 
	mcurobjs
;

76 
uöt64_t
 
	mcurbyãs
;

77 
uöt64_t
 
	maccumobjs
;

78 
uöt64_t
 
	maccumbyãs
;

82 
	m¥of_t˘x_°©e_öôülizög
,

83 
	m¥of_t˘x_°©e_nomöÆ
,

84 
	m¥of_t˘x_°©e_dumpög
,

85 
	m¥of_t˘x_°©e_purg©‹y


86 } 
	t¥of_t˘x_°©e_t
;

88 
	s¥of_t˘x_s
 {

90 
¥of_td©a_t
 *
	mtd©a
;

96 
uöt64_t
 
	mthr_uid
;

97 
uöt64_t
 
	mthr_dis¸im
;

100 
¥of_˙t_t
 
	m˙ts
;

103 
¥of_g˘x_t
 *
	mg˘x
;

118 
uöt64_t
 
	mt˘x_uid
;

121 
rb_node
(
¥of_t˘x_t
Ë
	mt˘x_lök
;

127 
boﬁ
 
	m¥ï¨ed
;

130 
¥of_t˘x_°©e_t
 
	m°©e
;

136 
¥of_˙t_t
 
	mdump_˙ts
;

138 
	$rb_åì
(
	t¥of_t˘x_t
Ë
	t¥of_t˘x_åì_t
;

140 
	s¥of_g˘x_s
 {

142 
mÆloc_muãx_t
 *
lock
;

154 
∆imbo
;

160 
¥of_t˘x_åì_t
 
t˘xs
;

163 
	`rb_node
(
¥of_g˘x_t
Ë
dump_lök
;

166 
¥of_˙t_t
 
˙t_summed
;

169 
¥of_bt_t
 
bt
;

172 *
vec
[1];

174 
	$rb_åì
(
	t¥of_g˘x_t
Ë
	t¥of_g˘x_åì_t
;

176 
	s¥of_td©a_s
 {

177 
mÆloc_muãx_t
 *
lock
;

180 
uöt64_t
 
thr_uid
;

186 
uöt64_t
 
thr_dis¸im
;

189 *
thªad_«me
;

191 
boﬁ
 
©èched
;

192 
boﬁ
 
expúed
;

194 
	`rb_node
(
¥of_td©a_t
Ë
td©a_lök
;

201 
uöt64_t
 
t˘x_uid_√xt
;

209 
ckh_t
 
bt2t˘x
;

212 
uöt64_t
 
¥ng_°©e
;

213 
uöt64_t
 
byãs_u¡û_ßm∂e
;

216 
boﬁ
 
íq
;

217 
boﬁ
 
íq_idump
;

218 
boﬁ
 
íq_gdump
;

226 
boﬁ
 
dumpög
;

232 
boﬁ
 
a˘ive
;

235 
¥of_˙t_t
 
˙t_summed
;

238 *
vec
[
PROF_BT_MAX
];

240 
	$rb_åì
(
	t¥of_td©a_t
Ë
	t¥of_td©a_åì_t
;

244 #ifde‡
JEMALLOC_H_EXTERNS


246 
boﬁ
 
›t_¥of
;

247 
boﬁ
 
›t_¥of_a˘ive
;

248 
boﬁ
 
›t_¥of_thªad_a˘ive_öô
;

249 
size_t
 
›t_lg_¥of_ßm∂e
;

250 
ssize_t
 
›t_lg_¥of_öãrvÆ
;

251 
boﬁ
 
›t_¥of_gdump
;

252 
boﬁ
 
›t_¥of_föÆ
;

253 
boﬁ
 
›t_¥of_Àak
;

254 
boﬁ
 
›t_¥of_accum
;

255 
›t_¥of_¥efix
[

257 #ifde‡
JEMALLOC_PROF


258 
PATH_MAX
 +

263 
boﬁ
 
¥of_a˘ive
;

266 
boﬁ
 
¥of_gdump_vÆ
;

275 
uöt64_t
 
¥of_öãrvÆ
;

281 
size_t
 
lg_¥of_ßm∂e
;

283 
	`¥of_Æloc_rﬁlback
(
tsd_t
 *
tsd
, 
¥of_t˘x_t
 *
t˘x
, 
boﬁ
 
upd©ed
);

284 
	`¥of_mÆloc_ßm∂e_obje˘
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

285 
¥of_t˘x_t
 *
t˘x
);

286 
	`¥of_‰ì_ßm∂ed_obje˘
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
¥of_t˘x_t
 *
t˘x
);

287 
	`bt_öô
(
¥of_bt_t
 *
bt
, **
vec
);

288 
	`¥of_backåa˚
(
¥of_bt_t
 *
bt
);

289 
¥of_t˘x_t
 *
	`¥of_lookup
(
tsd_t
 *
tsd
, 
¥of_bt_t
 *
bt
);

290 #ifde‡
JEMALLOC_JET


291 
size_t
 
	`¥of_td©a_cou¡
();

292 
size_t
 
	`¥of_bt_cou¡
();

293 c⁄° 
¥of_˙t_t
 *
	`¥of_˙t_Æl
();

294 (
	t¥of_dump_›í_t
)(
	tboﬁ
, const *);

295 
¥of_dump_›í_t
 *
¥of_dump_›í
;

296 
	$boﬁ
 (
	t¥of_dump_hódî_t
)(
	ttsdn_t
 *, 
	tboﬁ
, c⁄° 
	t¥of_˙t_t
 *);

297 
¥of_dump_hódî_t
 *
¥of_dump_hódî
;

299 
	`¥of_idump
(
tsdn_t
 *
tsdn
);

300 
boﬁ
 
	`¥of_mdump
(
tsd_t
 *
tsd
, c⁄° *
fûíame
);

301 
	`¥of_gdump
(
tsdn_t
 *
tsdn
);

302 
¥of_td©a_t
 *
	`¥of_td©a_öô
(
tsdn_t
 *
tsdn
);

303 
¥of_td©a_t
 *
	`¥of_td©a_ªöô
(
tsd_t
 *
tsd
,Örof_td©a_à*
td©a
);

304 
	`¥of_ª£t
(
tsdn_t
 *
tsdn
, 
size_t
 
lg_ßm∂e
);

305 
	`¥of_td©a_˛ónup
(
tsd_t
 *
tsd
);

306 
boﬁ
 
	`¥of_a˘ive_gë
(
tsdn_t
 *
tsdn
);

307 
boﬁ
 
	`¥of_a˘ive_£t
(
tsdn_t
 *
tsdn
, boﬁ 
a˘ive
);

308 c⁄° *
	`¥of_thªad_«me_gë
(
tsd_t
 *
tsd
);

309 
	`¥of_thªad_«me_£t
(
tsd_t
 *
tsd
, c⁄° *
thªad_«me
);

310 
boﬁ
 
	`¥of_thªad_a˘ive_gë
(
tsd_t
 *
tsd
);

311 
boﬁ
 
	`¥of_thªad_a˘ive_£t
(
tsd_t
 *
tsd
, boﬁ 
a˘ive
);

312 
boﬁ
 
	`¥of_thªad_a˘ive_öô_gë
(
tsdn_t
 *
tsdn
);

313 
boﬁ
 
	`¥of_thªad_a˘ive_öô_£t
(
tsdn_t
 *
tsdn
, boﬁ 
a˘ive_öô
);

314 
boﬁ
 
	`¥of_gdump_gë
(
tsdn_t
 *
tsdn
);

315 
boﬁ
 
	`¥of_gdump_£t
(
tsdn_t
 *
tsdn
, boﬁ 
a˘ive
);

316 
	`¥of_boŸ0
();

317 
	`¥of_boŸ1
();

318 
boﬁ
 
	`¥of_boŸ2
(
tsdn_t
 *
tsdn
);

319 
	`¥of_¥ef‹k0
(
tsdn_t
 *
tsdn
);

320 
	`¥of_¥ef‹k1
(
tsdn_t
 *
tsdn
);

321 
	`¥of_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
);

322 
	`¥of_po°f‹k_chûd
(
tsdn_t
 *
tsdn
);

323 
	`¥of_ßm∂e_thªshﬁd_upd©e
(
¥of_td©a_t
 *
td©a
);

327 #ifde‡
JEMALLOC_H_INLINES


329 #i‚de‡
JEMALLOC_ENABLE_INLINE


330 
boﬁ
 
	`¥of_a˘ive_gë_u∆ocked
();

331 
boﬁ
 
	`¥of_gdump_gë_u∆ocked
();

332 
¥of_td©a_t
 *
	`¥of_td©a_gë
(
tsd_t
 *
tsd
, 
boﬁ
 
¸óã
);

333 
¥of_t˘x_t
 *
	`¥of_t˘x_gë
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

334 
	`¥of_t˘x_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

335 
¥of_t˘x_t
 *
t˘x
);

336 
	`¥of_t˘x_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

337 c⁄° *
ﬁd_±r
, 
¥of_t˘x_t
 *
t˘x
);

338 
boﬁ
 
	`¥of_ßm∂e_accum_upd©e
(
tsd_t
 *
tsd
, 
size_t
 
usize
, boﬁ 
commô
,

339 
¥of_td©a_t
 **
td©a_out
);

340 
¥of_t˘x_t
 *
	`¥of_Æloc_¥ï
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
boﬁ
 
¥of_a˘ive
,

341 
boﬁ
 
upd©e
);

342 
	`¥of_mÆloc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

343 
¥of_t˘x_t
 *
t˘x
);

344 
	`¥of_ªÆloc
(
tsd_t
 *
tsd
, c⁄° *
±r
, 
size_t
 
usize
,

345 
¥of_t˘x_t
 *
t˘x
, 
boﬁ
 
¥of_a˘ive
, boﬁ 
upd©ed
, c⁄° *
ﬁd_±r
,

346 
size_t
 
ﬁd_usize
, 
¥of_t˘x_t
 *
ﬁd_t˘x
);

347 
	`¥of_‰ì
(
tsd_t
 *
tsd
, c⁄° *
±r
, 
size_t
 
usize
);

350 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_PROF_C_
))

351 
JEMALLOC_ALWAYS_INLINE
 
boﬁ


352 
	$¥of_a˘ive_gë_u∆ocked
()

361  (
¥of_a˘ive
);

362 
	}
}

364 
JEMALLOC_ALWAYS_INLINE
 
boﬁ


365 
	$¥of_gdump_gë_u∆ocked
()

373  (
¥of_gdump_vÆ
);

374 
	}
}

376 
JEMALLOC_ALWAYS_INLINE
 
¥of_td©a_t
 *

377 
	$¥of_td©a_gë
(
tsd_t
 *
tsd
, 
boﬁ
 
¸óã
)

379 
¥of_td©a_t
 *
td©a
;

381 
	`ˇs£π
(
c⁄fig_¥of
);

383 
td©a
 = 
	`tsd_¥of_td©a_gë
(
tsd
);

384 i‡(
¸óã
) {

385 i‡(
	`u∆ikñy
(
td©a
 =
NULL
)) {

386 i‡(
	`tsd_nomöÆ
(
tsd
)) {

387 
td©a
 = 
	`¥of_td©a_öô
(
	`tsd_tsdn
(
tsd
));

388 
	`tsd_¥of_td©a_£t
(
tsd
, 
td©a
);

390 } i‡(
	`u∆ikñy
(
td©a
->
expúed
)) {

391 
td©a
 = 
	`¥of_td©a_ªöô
(
tsd
,Ådata);

392 
	`tsd_¥of_td©a_£t
(
tsd
, 
td©a
);

394 
	`as£π
(
td©a
 =
NULL
 ||Åd©a->
©èched
);

397  (
td©a
);

398 
	}
}

400 
JEMALLOC_ALWAYS_INLINE
 
¥of_t˘x_t
 *

401 
	$¥of_t˘x_gë
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

404 
	`ˇs£π
(
c⁄fig_¥of
);

405 
	`as£π
(
±r
 !
NULL
);

407  (
	`¨ía_¥of_t˘x_gë
(
tsdn
, 
±r
));

408 
	}
}

410 
JEMALLOC_ALWAYS_INLINE
 

411 
	$¥of_t˘x_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
, 
¥of_t˘x_t
 *
t˘x
)

414 
	`ˇs£π
(
c⁄fig_¥of
);

415 
	`as£π
(
±r
 !
NULL
);

417 
	`¨ía_¥of_t˘x_£t
(
tsdn
, 
±r
, 
usize
, 
t˘x
);

418 
	}
}

420 
JEMALLOC_ALWAYS_INLINE
 

421 
	$¥of_t˘x_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
, c⁄° *
ﬁd_±r
,

422 
¥of_t˘x_t
 *
ﬁd_t˘x
)

425 
	`ˇs£π
(
c⁄fig_¥of
);

426 
	`as£π
(
±r
 !
NULL
);

428 
	`¨ía_¥of_t˘x_ª£t
(
tsdn
, 
±r
, 
usize
, 
ﬁd_±r
, 
ﬁd_t˘x
);

429 
	}
}

431 
JEMALLOC_ALWAYS_INLINE
 
boﬁ


432 
	$¥of_ßm∂e_accum_upd©e
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
boﬁ
 
upd©e
,

433 
¥of_td©a_t
 **
td©a_out
)

435 
¥of_td©a_t
 *
td©a
;

437 
	`ˇs£π
(
c⁄fig_¥of
);

439 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

440 i‡(
	`u∆ikñy
((
uöçå_t
)
td©a
 <(uöçå_t)
PROF_TDATA_STATE_MAX
))

441 
td©a
 = 
NULL
;

443 i‡(
td©a_out
 !
NULL
)

444 *
td©a_out
 = 
td©a
;

446 i‡(
	`u∆ikñy
(
td©a
 =
NULL
))

447  (
åue
);

449 i‡(
	`likñy
(
td©a
->
byãs_u¡û_ßm∂e
 >
usize
)) {

450 i‡(
upd©e
)

451 
td©a
->
byãs_u¡û_ßm∂e
 -
usize
;

452  (
åue
);

455 i‡(
upd©e
)

456 
	`¥of_ßm∂e_thªshﬁd_upd©e
(
td©a
);

457  (!
td©a
->
a˘ive
);

459 
	}
}

461 
JEMALLOC_ALWAYS_INLINE
 
¥of_t˘x_t
 *

462 
	$¥of_Æloc_¥ï
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
boﬁ
 
¥of_a˘ive
, boﬁ 
upd©e
)

464 
¥of_t˘x_t
 *
ªt
;

465 
¥of_td©a_t
 *
td©a
;

466 
¥of_bt_t
 
bt
;

468 
	`as£π
(
usize
 =
	`s2u
(usize));

470 i‡(!
¥of_a˘ive
 || 
	`likñy
(
	`¥of_ßm∂e_accum_upd©e
(
tsd
, 
usize
, 
upd©e
,

471 &
td©a
)))

472 
ªt
 = (
¥of_t˘x_t
 *)(
uöçå_t
)1U;

474 
	`bt_öô
(&
bt
, 
td©a
->
vec
);

475 
	`¥of_backåa˚
(&
bt
);

476 
ªt
 = 
	`¥of_lookup
(
tsd
, &
bt
);

479  (
ªt
);

480 
	}
}

482 
JEMALLOC_ALWAYS_INLINE
 

483 
	$¥of_mÆloc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
, 
¥of_t˘x_t
 *
t˘x
)

486 
	`ˇs£π
(
c⁄fig_¥of
);

487 
	`as£π
(
±r
 !
NULL
);

488 
	`as£π
(
usize
 =
	`ißŒoc
(
tsdn
, 
±r
, 
åue
));

490 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 > (uintptr_t)1U))

491 
	`¥of_mÆloc_ßm∂e_obje˘
(
tsdn
, 
±r
, 
usize
, 
t˘x
);

493 
	`¥of_t˘x_£t
(
tsdn
, 
±r
, 
usize
, (
¥of_t˘x_t
 *)(
uöçå_t
)1U);

494 
	}
}

496 
JEMALLOC_ALWAYS_INLINE
 

497 
	$¥of_ªÆloc
(
tsd_t
 *
tsd
, c⁄° *
±r
, 
size_t
 
usize
, 
¥of_t˘x_t
 *
t˘x
,

498 
boﬁ
 
¥of_a˘ive
, boﬁ 
upd©ed
, c⁄° *
ﬁd_±r
, 
size_t
 
ﬁd_usize
,

499 
¥of_t˘x_t
 *
ﬁd_t˘x
)

501 
boﬁ
 
ßm∂ed
, 
ﬁd_ßm∂ed
;

503 
	`ˇs£π
(
c⁄fig_¥of
);

504 
	`as£π
(
±r
 !
NULL
 || (
uöçå_t
)
t˘x
 <= (uintptr_t)1U);

506 i‡(
¥of_a˘ive
 && !
upd©ed
 && 
±r
 !
NULL
) {

507 
	`as£π
(
usize
 =
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
åue
));

508 i‡(
	`¥of_ßm∂e_accum_upd©e
(
tsd
, 
usize
, 
åue
, 
NULL
)) {

516 
t˘x
 = (
¥of_t˘x_t
 *)(
uöçå_t
)1U;

520 
ßm∂ed
 = ((
uöçå_t
)
t˘x
 > (uintptr_t)1U);

521 
ﬁd_ßm∂ed
 = ((
uöçå_t
)
ﬁd_t˘x
 > (uintptr_t)1U);

523 i‡(
	`u∆ikñy
(
ßm∂ed
))

524 
	`¥of_mÆloc_ßm∂e_obje˘
(
	`tsd_tsdn
(
tsd
), 
±r
, 
usize
, 
t˘x
);

526 
	`¥of_t˘x_ª£t
(
	`tsd_tsdn
(
tsd
), 
±r
, 
usize
, 
ﬁd_±r
, 
ﬁd_t˘x
);

528 i‡(
	`u∆ikñy
(
ﬁd_ßm∂ed
))

529 
	`¥of_‰ì_ßm∂ed_obje˘
(
tsd
, 
ﬁd_usize
, 
ﬁd_t˘x
);

530 
	}
}

532 
JEMALLOC_ALWAYS_INLINE
 

533 
	$¥of_‰ì
(
tsd_t
 *
tsd
, c⁄° *
±r
, 
size_t
 
usize
)

535 
¥of_t˘x_t
 *
t˘x
 = 
	`¥of_t˘x_gë
(
	`tsd_tsdn
(
tsd
), 
±r
);

537 
	`ˇs£π
(
c⁄fig_¥of
);

538 
	`as£π
(
usize
 =
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
åue
));

540 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 > (uintptr_t)1U))

541 
	`¥of_‰ì_ßm∂ed_obje˘
(
tsd
, 
usize
, 
t˘x
);

542 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/public_namespace.h

1 
	#je_mÆloc_c⁄f
 
	`JEMALLOC_N
(
mÆloc_c⁄f
)

	)

2 
	#je_mÆloc_mesßge
 
	`JEMALLOC_N
(
mÆloc_mesßge
)

	)

3 
	#je_mÆloc
 
	`JEMALLOC_N
(
mÆloc
)

	)

4 
	#je_ˇŒoc
 
	`JEMALLOC_N
(
ˇŒoc
)

	)

5 
	#je_posix_memÆign
 
	`JEMALLOC_N
(
posix_memÆign
)

	)

6 
	#je_Æig√d_Æloc
 
	`JEMALLOC_N
(
Æig√d_Æloc
)

	)

7 
	#je_ªÆloc
 
	`JEMALLOC_N
(
ªÆloc
)

	)

8 
	#je_‰ì
 
	`JEMALLOC_N
(
‰ì
)

	)

9 
	#je_mÆlocx
 
	`JEMALLOC_N
(
mÆlocx
)

	)

10 
	#je_øŒocx
 
	`JEMALLOC_N
(
øŒocx
)

	)

11 
	#je_xÆlocx
 
	`JEMALLOC_N
(
xÆlocx
)

	)

12 
	#je_ßŒocx
 
	`JEMALLOC_N
(
ßŒocx
)

	)

13 
	#je_dÆlocx
 
	`JEMALLOC_N
(
dÆlocx
)

	)

14 
	#je_sdÆlocx
 
	`JEMALLOC_N
(
sdÆlocx
)

	)

15 
	#je_«Œocx
 
	`JEMALLOC_N
(
«Œocx
)

	)

16 
	#je_mÆl˘l
 
	`JEMALLOC_N
(
mÆl˘l
)

	)

17 
	#je_mÆl˘ amëomib
 
	`JEMALLOC_N
(
mÆl˘ amëomib
)

	)

18 
	#je_mÆl˘lbymib
 
	`JEMALLOC_N
(
mÆl˘lbymib
)

	)

19 
	#je_mÆloc_°©s_¥öt
 
	`JEMALLOC_N
(
mÆloc_°©s_¥öt
)

	)

20 
	#je_mÆloc_ußbÀ_size
 
	`JEMALLOC_N
(
mÆloc_ußbÀ_size
)

	)

21 
	#je_memÆign
 
	`JEMALLOC_N
(
memÆign
)

	)

22 
	#je_vÆloc
 
	`JEMALLOC_N
(
vÆloc
)

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/public_unnamespace.h

1 #unde‡
je_mÆloc_c⁄f


2 #unde‡
je_mÆloc_mesßge


3 #unde‡
je_mÆloc


4 #unde‡
je_ˇŒoc


5 #unde‡
je_posix_memÆign


6 #unde‡
je_Æig√d_Æloc


7 #unde‡
je_ªÆloc


8 #unde‡
je_‰ì


9 #unde‡
je_mÆlocx


10 #unde‡
je_øŒocx


11 #unde‡
je_xÆlocx


12 #unde‡
je_ßŒocx


13 #unde‡
je_dÆlocx


14 #unde‡
je_sdÆlocx


15 #unde‡
je_«Œocx


16 #unde‡
je_mÆl˘l


17 #unde‡
je_mÆl˘ amëomib


18 #unde‡
je_mÆl˘lbymib


19 #unde‡
je_mÆloc_°©s_¥öt


20 #unde‡
je_mÆloc_ußbÀ_size


21 #unde‡
je_memÆign


22 #unde‡
je_vÆloc


	@dep/jemalloc-4.2.0/include/jemalloc/internal/ql.h

2 
	#ql_hód
(
a_ty≥
) \

4 
a_ty≥
 *
qlh_fú°
; \

5 }

	)

7 
	#ql_hód_öôülizî
(
a_hód
Ë{
NULL
}

	)

9 
	#ql_ñm
(
a_ty≥
Ë
	`qr
◊_ty≥)

	)

12 
	#ql_√w
(
a_hód
) do { \

13 (
a_hód
)->
qlh_fú°
 = 
NULL
; \

14 } 0)

	)

16 
	#ql_ñm_√w
(
a_ñm
, 
a_fõld
Ë
	`qr_√w
(◊_ñm),á_fõld)

	)

18 
	#ql_fú°
(
a_hód
Ë(◊_hód)->
qlh_fú°
)

	)

20 
	#ql_œ°
(
a_hód
, 
a_fõld
) \

21 ((
	`ql_fú°
(
a_hód
Ë!
NULL
) \

22 ? 
	`qr_¥ev
(
	`ql_fú°
(
a_hód
), 
a_fõld
Ë: 
NULL
)

	)

24 
	#ql_√xt
(
a_hód
, 
a_ñm
, 
a_fõld
) \

25 ((
	`ql_œ°
(
a_hód
, 
a_fõld
Ë!(
a_ñm
)) \

26 ? 
	`qr_√xt
((
a_ñm
), 
a_fõld
Ë: 
NULL
)

	)

28 
	#ql_¥ev
(
a_hód
, 
a_ñm
, 
a_fõld
) \

29 ((
	`ql_fú°
(
a_hód
Ë!(
a_ñm
)Ë? 
	`qr_¥ev
(◊_ñm), 
a_fõld
) \

30 : 
NULL
)

	)

32 
	#ql_bef‹e_ö£π
(
a_hód
, 
a_qÀlm
, 
a_ñm
, 
a_fõld
) do { \

33 
	`qr_bef‹e_ö£π
((
a_qÀlm
), (
a_ñm
), 
a_fõld
); \

34 i‡(
	`ql_fú°
(
a_hód
Ë=(
a_qÀlm
)) { \

35 
	`ql_fú°
(
a_hód
Ë(
a_ñm
); \

37 } 0)

	)

39 
	#ql_a·î_ö£π
(
a_qÀlm
, 
a_ñm
, 
a_fõld
) \

40 
	`qr_a·î_ö£π
((
a_qÀlm
), (
a_ñm
), 
a_fõld
)

	)

42 
	#ql_hód_ö£π
(
a_hód
, 
a_ñm
, 
a_fõld
) do { \

43 i‡(
	`ql_fú°
(
a_hód
Ë!
NULL
) { \

44 
	`qr_bef‹e_ö£π
(
	`ql_fú°
(
a_hód
), (
a_ñm
), 
a_fõld
); \

46 
	`ql_fú°
(
a_hód
Ë(
a_ñm
); \

47 } 0)

	)

49 
	#ql_èû_ö£π
(
a_hód
, 
a_ñm
, 
a_fõld
) do { \

50 i‡(
	`ql_fú°
(
a_hód
Ë!
NULL
) { \

51 
	`qr_bef‹e_ö£π
(
	`ql_fú°
(
a_hód
), (
a_ñm
), 
a_fõld
); \

53 
	`ql_fú°
(
a_hód
Ë
	`qr_√xt
((
a_ñm
), 
a_fõld
); \

54 } 0)

	)

56 
	#ql_ªmove
(
a_hód
, 
a_ñm
, 
a_fõld
) do { \

57 i‡(
	`ql_fú°
(
a_hód
Ë=(
a_ñm
)) { \

58 
	`ql_fú°
(
a_hód
Ë
	`qr_√xt
(ql_fú°◊_hód), 
a_fõld
); \

60 i‡(
	`ql_fú°
(
a_hód
Ë!(
a_ñm
)) { \

61 
	`qr_ªmove
((
a_ñm
), 
a_fõld
); \

63 
	`ql_fú°
(
a_hód
Ë
NULL
; \

65 } 0)

	)

67 
	#ql_hód_ªmove
(
a_hód
, 
a_ty≥
, 
a_fõld
) do { \

68 
a_ty≥
 *
t
 = 
	`ql_fú°
(
a_hód
); \

69 
	`ql_ªmove
((
a_hód
), 
t
, 
a_fõld
); \

70 } 0)

	)

72 
	#ql_èû_ªmove
(
a_hód
, 
a_ty≥
, 
a_fõld
) do { \

73 
a_ty≥
 *
t
 = 
	`ql_œ°
(
a_hód
, 
a_fõld
); \

74 
	`ql_ªmove
((
a_hód
), 
t
, 
a_fõld
); \

75 } 0)

	)

77 
	#ql_f‹óch
(
a_v¨
, 
a_hód
, 
a_fõld
) \

78 
	`qr_f‹óch
((
a_v¨
), 
	`ql_fú°
(
a_hód
), 
a_fõld
)

	)

80 
	#ql_ªvî£_f‹óch
(
a_v¨
, 
a_hód
, 
a_fõld
) \

81 
	`qr_ªvî£_f‹óch
((
a_v¨
), 
	`ql_fú°
(
a_hód
), 
a_fõld
)

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/qr.h

2 
	#qr
(
a_ty≥
) \

4 
a_ty≥
 *
qª_√xt
; \

5 
a_ty≥
 *
qª_¥ev
; \

6 }

	)

9 
	#qr_√w
(
a_qr
, 
a_fõld
) do { \

10 (
a_qr
)->
a_fõld
.
qª_√xt
 = (a_qr); \

11 (
a_qr
)->
a_fõld
.
qª_¥ev
 = (a_qr); \

12 } 0)

	)

14 
	#qr_√xt
(
a_qr
, 
a_fõld
Ë(◊_qr)->a_fõld.
qª_√xt
)

	)

16 
	#qr_¥ev
(
a_qr
, 
a_fõld
Ë(◊_qr)->a_fõld.
qª_¥ev
)

	)

18 
	#qr_bef‹e_ö£π
(
a_qªlm
, 
a_qr
, 
a_fõld
) do { \

19 (
a_qr
)->
a_fõld
.
qª_¥ev
 = (
a_qªlm
)->a_field.qre_prev; \

20 (
a_qr
)->
a_fõld
.
qª_√xt
 = (
a_qªlm
); \

21 (
a_qr
)->
a_fõld
.
qª_¥ev
->a_fõld.
qª_√xt
 = (a_qr); \

22 (
a_qªlm
)->
a_fõld
.
qª_¥ev
 = (
a_qr
); \

23 } 0)

	)

25 
	#qr_a·î_ö£π
(
a_qªlm
, 
a_qr
, 
a_fõld
) \

28 (
a_qr
)->
a_fõld
.
qª_√xt
 = (
a_qªlm
)->a_field.qre_next; \

29 (
a_qr
)->
a_fõld
.
qª_¥ev
 = (
a_qªlm
); \

30 (
a_qr
)->
a_fõld
.
qª_√xt
->a_fõld.
qª_¥ev
 = (a_qr); \

31 (
a_qªlm
)->
a_fõld
.
qª_√xt
 = (
a_qr
); \

32 } 0)

	)

34 
	#qr_mñd
(
a_qr_a
, 
a_qr_b
, 
a_fõld
) do { \

35 *
t
; \

36 (
a_qr_a
)->
a_fõld
.
qª_¥ev
->a_fõld.
qª_√xt
 = (
a_qr_b
); \

37 (
a_qr_b
)->
a_fõld
.
qª_¥ev
->a_fõld.
qª_√xt
 = (
a_qr_a
); \

38 
t
 = (
a_qr_a
)->
a_fõld
.
qª_¥ev
; \

39 (
a_qr_a
)->
a_fõld
.
qª_¥ev
 = (
a_qr_b
)->a_field.qre_prev; \

40 (
a_qr_b
)->
a_fõld
.
qª_¥ev
 = 
t
; \

41 } 0)

	)

47 
	#qr_•lô
(
a_qr_a
, 
a_qr_b
, 
a_fõld
) \

48 
	`qr_mñd
((
a_qr_a
), (
a_qr_b
), 
a_fõld
)

	)

50 
	#qr_ªmove
(
a_qr
, 
a_fõld
) do { \

51 (
a_qr
)->
a_fõld
.
qª_¥ev
->a_fõld.
qª_√xt
 \

52 (
a_qr
)->
a_fõld
.
qª_√xt
; \

53 (
a_qr
)->
a_fõld
.
qª_√xt
->a_fõld.
qª_¥ev
 \

54 (
a_qr
)->
a_fõld
.
qª_¥ev
; \

55 (
a_qr
)->
a_fõld
.
qª_√xt
 = (a_qr); \

56 (
a_qr
)->
a_fõld
.
qª_¥ev
 = (a_qr); \

57 } 0)

	)

59 
	#qr_f‹óch
(
v¨
, 
a_qr
, 
a_fõld
) \

60 (
v¨
Ë(
a_qr
); \

61 (
v¨
Ë!
NULL
; \

62 (
v¨
Ë(((v¨)->
a_fõld
.
qª_√xt
 !(
a_qr
)) \

63 ? (
v¨
)->
a_fõld
.
qª_√xt
 : 
NULL
))

	)

65 
	#qr_ªvî£_f‹óch
(
v¨
, 
a_qr
, 
a_fõld
) \

66 (
v¨
Ë((
a_qr
Ë!
NULL
Ë? 
	`qr_¥ev
◊_qr, 
a_fõld
) : NULL; \

67 (
v¨
Ë!
NULL
; \

68 (
v¨
Ë(((v¨Ë!(
a_qr
)) \

69 ? (
v¨
)->
a_fõld
.
qª_¥ev
 : 
NULL
))

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/quarantine.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
qu¨™töe_obj_s
 
	tqu¨™töe_obj_t
;

5 
qu¨™töe_s
 
	tqu¨™töe_t
;

8 
	#JEMALLOC_VALGRIND_QUARANTINE_DEFAULT
 (
	`ZU
(1Ë<< 24)

	)

12 #ifde‡
JEMALLOC_H_STRUCTS


14 
	squ¨™töe_obj_s
 {

15 *
	m±r
;

16 
size_t
 
	musize
;

19 
	squ¨™töe_s
 {

20 
size_t
 
	mcurbyãs
;

21 
size_t
 
	mcurobjs
;

22 
size_t
 
	mfú°
;

23 
	#LG_MAXOBJS_INIT
 10

	)

24 
size_t
 
	mlg_maxobjs
;

25 
qu¨™töe_obj_t
 
	mobjs
[1];

30 #ifde‡
JEMALLOC_H_EXTERNS


32 
qu¨™töe_Æloc_hook_w‹k
(
tsd_t
 *
tsd
);

33 
qu¨™töe
(
tsd_t
 *
tsd
, *
±r
);

34 
qu¨™töe_˛ónup
(
tsd_t
 *
tsd
);

38 #ifde‡
JEMALLOC_H_INLINES


40 #i‚de‡
JEMALLOC_ENABLE_INLINE


41 
qu¨™töe_Æloc_hook
();

44 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_QUARANTINE_C_
))

45 
JEMALLOC_ALWAYS_INLINE
 

46 
	$qu¨™töe_Æloc_hook
()

48 
tsd_t
 *
tsd
;

50 
	`as£π
(
c⁄fig_fûl
 && 
›t_qu¨™töe
);

52 
tsd
 = 
	`tsd_„tch
();

53 i‡(
	`tsd_qu¨™töe_gë
(
tsd
Ë=
NULL
)

54 
	`qu¨™töe_Æloc_hook_w‹k
(
tsd
);

55 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/rb.h

22 #i‚de‡
RB_H_


23 
	#RB_H_


	)

25 #ifde‡
RB_COMPACT


27 
	#rb_node
(
a_ty≥
) \

29 
a_ty≥
 *
rbn_À·
; \

30 
a_ty≥
 *
rbn_right_ªd
; \

31 }

	)

33 
	#rb_node
(
a_ty≥
) \

35 
a_ty≥
 *
rbn_À·
; \

36 
a_ty≥
 *
rbn_right
; \

37 
boﬁ
 
rbn_ªd
; \

38 }

	)

42 
	#rb_åì
(
a_ty≥
) \

44 
a_ty≥
 *
rbt_roŸ
; \

45 }

	)

48 
	#rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
a_node
) \

49 ((
a_node
)->
a_fõld
.
rbn_À·
)

	)

50 
	#rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
a_node
, 
a_À·
) do { \

51 (
a_node
)->
a_fõld
.
rbn_À·
 = 
a_À·
; \

52 } 0)

	)

54 #ifde‡
RB_COMPACT


56 
	#rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
a_node
) \

57 ((
a_ty≥
 *Ë(((
öçå_t
Ë(
a_node
)->
a_fõld
.
rbn_right_ªd
) \

58 & ((
ssize_t
)-2)))

	)

59 
	#rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
a_node
, 
a_right
) do { \

60 (
a_node
)->
a_fõld
.
rbn_right_ªd
 = (
a_ty≥
 *Ë(((
uöçå_t
Ë
a_right
) \

61 | (((
uöçå_t
Ë(
a_node
)->
a_fõld
.
rbn_right_ªd
Ë& ((
size_t
)1))); \

62 } 0)

	)

65 
	#rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
a_node
) \

66 ((
boﬁ
Ë(((
uöçå_t
Ë(
a_node
)->
a_fõld
.
rbn_right_ªd
) \

67 & ((
size_t
)1)))

	)

68 
	#rbä_cﬁ‹_£t
(
a_ty≥
, 
a_fõld
, 
a_node
, 
a_ªd
) do { \

69 (
a_node
)->
a_fõld
.
rbn_right_ªd
 = (
a_ty≥
 *Ë((((
öçå_t
) \

70 (
a_node
)->
a_fõld
.
rbn_right_ªd
Ë& ((
ssize_t
)-2)) \

71 | ((
ssize_t
)
a_ªd
)); \

72 } 0)

	)

73 
	#rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
a_node
) do { \

74 (
a_node
)->
a_fõld
.
rbn_right_ªd
 = (
a_ty≥
 *Ë(((
uöçå_t
) \

75 (
a_node
)->
a_fõld
.
rbn_right_ªd
Ë| ((
size_t
)1)); \

76 } 0)

	)

77 
	#rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
a_node
) do { \

78 (
a_node
)->
a_fõld
.
rbn_right_ªd
 = (
a_ty≥
 *Ë(((
öçå_t
) \

79 (
a_node
)->
a_fõld
.
rbn_right_ªd
Ë& ((
ssize_t
)-2)); \

80 } 0)

	)

83 
	#rbt_node_√w
(
a_ty≥
, 
a_fõld
, 
a_rbt
, 
a_node
) do { \

85 
	`as£π
(((
uöçå_t
)(
a_node
) & 0x1) == 0); \

86 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, (
a_node
), 
NULL
); \

87 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, (
a_node
), 
NULL
); \

88 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, (
a_node
)); \

89 } 0)

	)

92 
	#rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
a_node
) \

93 ((
a_node
)->
a_fõld
.
rbn_right
)

	)

94 
	#rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
a_node
, 
a_right
) do { \

95 (
a_node
)->
a_fõld
.
rbn_right
 = 
a_right
; \

96 } 0)

	)

99 
	#rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
a_node
) \

100 ((
a_node
)->
a_fõld
.
rbn_ªd
)

	)

101 
	#rbä_cﬁ‹_£t
(
a_ty≥
, 
a_fõld
, 
a_node
, 
a_ªd
) do { \

102 (
a_node
)->
a_fõld
.
rbn_ªd
 = (
a_ªd
); \

103 } 0)

	)

104 
	#rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
a_node
) do { \

105 (
a_node
)->
a_fõld
.
rbn_ªd
 = 
åue
; \

106 } 0)

	)

107 
	#rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
a_node
) do { \

108 (
a_node
)->
a_fõld
.
rbn_ªd
 = 
Ál£
; \

109 } 0)

	)

112 
	#rbt_node_√w
(
a_ty≥
, 
a_fõld
, 
a_rbt
, 
a_node
) do { \

113 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, (
a_node
), 
NULL
); \

114 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, (
a_node
), 
NULL
); \

115 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, (
a_node
)); \

116 } 0)

	)

120 
	#rb_√w
(
a_ty≥
, 
a_fõld
, 
a_rbt
) do { \

121 (
a_rbt
)->
rbt_roŸ
 = 
NULL
; \

122 } 0)

	)

125 
	#rbä_fú°
(
a_ty≥
, 
a_fõld
, 
a_rbt
, 
a_roŸ
, 
r_node
) do { \

126 (
r_node
Ë(
a_roŸ
); \

127 i‡((
r_node
Ë!
NULL
) { \

129 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, (
r_node
)Ë!
NULL
; \

130 (
r_node
Ë
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, (r_node))) { \

133 } 0)

	)

135 
	#rbä_œ°
(
a_ty≥
, 
a_fõld
, 
a_rbt
, 
a_roŸ
, 
r_node
) do { \

136 (
r_node
Ë(
a_roŸ
); \

137 i‡((
r_node
Ë!
NULL
) { \

138 ; 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, (
r_node
)Ë!
NULL
; \

139 (
r_node
Ë
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, (r_node))) { \

142 } 0)

	)

144 
	#rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
a_node
, 
r_node
) do { \

145 (
r_node
Ë
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, (
a_node
)); \

146 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, (
a_node
), \

147 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, (
r_node
))); \

148 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, (
r_node
), (
a_node
)); \

149 } 0)

	)

151 
	#rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
a_node
, 
r_node
) do { \

152 (
r_node
Ë
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, (
a_node
)); \

153 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, (
a_node
), \

154 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, (
r_node
))); \

155 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, (
r_node
), (
a_node
)); \

156 } 0)

	)

163 
	#rb_¥Ÿo
(
a_©å
, 
a_¥efix
, 
a_rbt_ty≥
, 
a_ty≥
) \

164 
a_©å
 \

165 
a_¥efix
##
	`√w
(
a_rbt_ty≥
 *
rbåì
); \

166 
a_©å
 
boﬁ
 \

167 
a_¥efix
##
	`em±y
(
a_rbt_ty≥
 *
rbåì
); \

168 
a_©å
 
a_ty≥
 * \

169 
a_¥efix
##
	`fú°
(
a_rbt_ty≥
 *
rbåì
); \

170 
a_©å
 
a_ty≥
 * \

171 
a_¥efix
##
	`œ°
(
a_rbt_ty≥
 *
rbåì
); \

172 
a_©å
 
a_ty≥
 * \

173 
a_¥efix
##
	`√xt
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
); \

174 
a_©å
 
a_ty≥
 * \

175 
a_¥efix
##
	`¥ev
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
); \

176 
a_©å
 
a_ty≥
 * \

177 
a_¥efix
##
	`£¨ch
(
a_rbt_ty≥
 *
rbåì
, c⁄° 
a_ty≥
 *
key
); \

178 
a_©å
 
a_ty≥
 * \

179 
a_¥efix
##
	`n£¨ch
(
a_rbt_ty≥
 *
rbåì
, c⁄° 
a_ty≥
 *
key
); \

180 
a_©å
 
a_ty≥
 * \

181 
a_¥efix
##
	`p£¨ch
(
a_rbt_ty≥
 *
rbåì
, c⁄° 
a_ty≥
 *
key
); \

182 
a_©å
 \

183 
a_¥efix
##
	`ö£π
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
); \

184 
a_©å
 \

185 
a_¥efix
##
	`ªmove
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
); \

186 
a_©å
 
a_ty≥
 * \

187 
a_¥efix
##
	`ôî
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
°¨t
,á_ty≥ *(*
cb
)( \

188 
a_rbt_ty≥
 *, 
a_ty≥
 *, *), *
¨g
); \

189 
a_©å
 
a_ty≥
 * \

190 
a_¥efix
##
	`ªvî£_ôî
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
°¨t
, \

191 
a_ty≥
 *(*
cb
)(
a_rbt_ty≥
 *,á_ty≥ *, *), *
¨g
); \

192 
a_©å
 \

193 
a_¥efix
##
	`de°roy
(
a_rbt_ty≥
 *
rbåì
, (*
cb
)(
a_ty≥
 *, *), \

194 *
¨g
);

	)

338 
	#rb_gí
(
a_©å
, 
a_¥efix
, 
a_rbt_ty≥
, 
a_ty≥
, 
a_fõld
, 
a_cmp
) \

339 
a_©å
 \

340 
a_¥efix
##
	`√w
(
a_rbt_ty≥
 *
rbåì
) { \

341 
	`rb_√w
(
a_ty≥
, 
a_fõld
, 
rbåì
); \

343 
a_©å
 
boﬁ
 \

344 
a_¥efix
##
	`em±y
(
a_rbt_ty≥
 *
rbåì
) { \

345  (
rbåì
->
rbt_roŸ
 =
NULL
); \

347 
a_©å
 
a_ty≥
 * \

348 
a_¥efix
##
	`fú°
(
a_rbt_ty≥
 *
rbåì
) { \

349 
a_ty≥
 *
ªt
; \

350 
	`rbä_fú°
(
a_ty≥
, 
a_fõld
, 
rbåì
,Ñbåì->
rbt_roŸ
, 
ªt
); \

351  (
ªt
); \

353 
a_©å
 
a_ty≥
 * \

354 
a_¥efix
##
	`œ°
(
a_rbt_ty≥
 *
rbåì
) { \

355 
a_ty≥
 *
ªt
; \

356 
	`rbä_œ°
(
a_ty≥
, 
a_fõld
, 
rbåì
,Ñbåì->
rbt_roŸ
, 
ªt
); \

357  (
ªt
); \

359 
a_©å
 
a_ty≥
 * \

360 
a_¥efix
##
	`√xt
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
) { \

361 
a_ty≥
 *
ªt
; \

362 i‡(
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
node
Ë!
NULL
) { \

363 
	`rbä_fú°
(
a_ty≥
, 
a_fõld
, 
rbåì
, 
	`rbä_right_gë
(a_type, \

364 
a_fõld
, 
node
), 
ªt
); \

366 
a_ty≥
 *
äode
 = 
rbåì
->
rbt_roŸ
; \

367 
	`as£π
(
äode
 !
NULL
); \

368 
ªt
 = 
NULL
; \

369 
åue
) { \

370 
cmp
 = (
a_cmp
)(
node
, 
äode
); \

371 i‡(
cmp
 < 0) { \

372 
ªt
 = 
äode
; \

373 
äode
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

374 } i‡(
cmp
 > 0) { \

375 
äode
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

379 
	`as£π
(
äode
 !
NULL
); \

382  (
ªt
); \

384 
a_©å
 
a_ty≥
 * \

385 
a_¥efix
##
	`¥ev
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
) { \

386 
a_ty≥
 *
ªt
; \

387 i‡(
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
Ë!
NULL
) { \

388 
	`rbä_œ°
(
a_ty≥
, 
a_fõld
, 
rbåì
, 
	`rbä_À·_gë
(a_type, \

389 
a_fõld
, 
node
), 
ªt
); \

391 
a_ty≥
 *
äode
 = 
rbåì
->
rbt_roŸ
; \

392 
	`as£π
(
äode
 !
NULL
); \

393 
ªt
 = 
NULL
; \

394 
åue
) { \

395 
cmp
 = (
a_cmp
)(
node
, 
äode
); \

396 i‡(
cmp
 < 0) { \

397 
äode
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

398 } i‡(
cmp
 > 0) { \

399 
ªt
 = 
äode
; \

400 
äode
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

404 
	`as£π
(
äode
 !
NULL
); \

407  (
ªt
); \

409 
a_©å
 
a_ty≥
 * \

410 
a_¥efix
##
	`£¨ch
(
a_rbt_ty≥
 *
rbåì
, c⁄° 
a_ty≥
 *
key
) { \

411 
a_ty≥
 *
ªt
; \

412 
cmp
; \

413 
ªt
 = 
rbåì
->
rbt_roŸ
; \

414 
ªt
 !
NULL
 \

415 && (
cmp
 = (
a_cmp
)(
key
, 
ªt
)) != 0) { \

416 i‡(
cmp
 < 0) { \

417 
ªt
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
,Ñet); \

419 
ªt
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
,Ñet); \

422  (
ªt
); \

424 
a_©å
 
a_ty≥
 * \

425 
a_¥efix
##
	`n£¨ch
(
a_rbt_ty≥
 *
rbåì
, c⁄° 
a_ty≥
 *
key
) { \

426 
a_ty≥
 *
ªt
; \

427 
a_ty≥
 *
äode
 = 
rbåì
->
rbt_roŸ
; \

428 
ªt
 = 
NULL
; \

429 
äode
 !
NULL
) { \

430 
cmp
 = (
a_cmp
)(
key
, 
äode
); \

431 i‡(
cmp
 < 0) { \

432 
ªt
 = 
äode
; \

433 
äode
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

434 } i‡(
cmp
 > 0) { \

435 
äode
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

437 
ªt
 = 
äode
; \

441  (
ªt
); \

443 
a_©å
 
a_ty≥
 * \

444 
a_¥efix
##
	`p£¨ch
(
a_rbt_ty≥
 *
rbåì
, c⁄° 
a_ty≥
 *
key
) { \

445 
a_ty≥
 *
ªt
; \

446 
a_ty≥
 *
äode
 = 
rbåì
->
rbt_roŸ
; \

447 
ªt
 = 
NULL
; \

448 
äode
 !
NULL
) { \

449 
cmp
 = (
a_cmp
)(
key
, 
äode
); \

450 i‡(
cmp
 < 0) { \

451 
äode
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

452 } i‡(
cmp
 > 0) { \

453 
ªt
 = 
äode
; \

454 
äode
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
,Ånode); \

456 
ªt
 = 
äode
; \

460  (
ªt
); \

462 
a_©å
 \

463 
a_¥efix
##
	`ö£π
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
) { \

465 
a_ty≥
 *
node
; \

466 
cmp
; \

467 } 
∑th
[(*Ë<< 4], *
∑thp
; \

468 
	`rbt_node_√w
(
a_ty≥
, 
a_fõld
, 
rbåì
, 
node
); \

470 
∑th
->
node
 = 
rbåì
->
rbt_roŸ
; \

471 
∑thp
 = 
∑th
;Ö©hp->
node
 !
NULL
;Öathp++) { \

472 
cmp
 = 
∑thp
->cm∞
	`a_cmp
(
node
,Öathp->node); \

473 
	`as£π
(
cmp
 != 0); \

474 i‡(
cmp
 < 0) { \

475 
∑thp
[1].
node
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, \

476 
∑thp
->
node
); \

478 
∑thp
[1].
node
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, \

479 
∑thp
->
node
); \

482 
∑thp
->
node
 =Çode; \

484 
∑thp
--; (
uöçå_t
Ì©h∞>(uöçå_t)
∑th
;Öathp--) { \

485 
a_ty≥
 *
˙ode
 = 
∑thp
->
node
; \

486 i‡(
∑thp
->
cmp
 < 0) { \

487 
a_ty≥
 *
À·
 = 
∑thp
[1].
node
; \

488 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
˙ode
, 
À·
); \

489 i‡(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
À·
)) { \

490 
a_ty≥
 *
À·À·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, 
À·
);\

491 i‡(
À·À·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, \

492 
À·À·
)) { \

494 
a_ty≥
 *
äode
; \

495 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
À·À·
); \

496 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
˙ode
, 
äode
); \

497 
˙ode
 = 
äode
; \

503 
a_ty≥
 *
right
 = 
∑thp
[1].
node
; \

504 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
˙ode
, 
right
); \

505 i‡(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
right
)) { \

506 
a_ty≥
 *
À·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, 
˙ode
); \

507 i‡(
À·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, \

508 
À·
)) { \

510 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
À·
); \

511 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
right
); \

512 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
˙ode
); \

515 
a_ty≥
 *
äode
; \

516 
boﬁ
 
åed
 = 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
˙ode
); \

517 
	`rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
˙ode
, 
äode
); \

518 
	`rbä_cﬁ‹_£t
(
a_ty≥
, 
a_fõld
, 
äode
, 
åed
); \

519 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
˙ode
); \

520 
˙ode
 = 
äode
; \

526 
∑thp
->
node
 = 
˙ode
; \

529 
rbåì
->
rbt_roŸ
 = 
∑th
->
node
; \

530 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
rbåì
->
rbt_roŸ
); \

532 
a_©å
 \

533 
a_¥efix
##
	`ªmove
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
) { \

535 
a_ty≥
 *
node
; \

536 
cmp
; \

537 } *
∑thp
, *
nodï
, 
∑th
[(*) << 4]; \

539 
nodï
 = 
NULL
; \

540 
∑th
->
node
 = 
rbåì
->
rbt_roŸ
; \

541 
∑thp
 = 
∑th
;Ö©hp->
node
 !
NULL
;Öathp++) { \

542 
cmp
 = 
∑thp
->cm∞
	`a_cmp
(
node
,Öathp->node); \

543 i‡(
cmp
 < 0) { \

544 
∑thp
[1].
node
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, \

545 
∑thp
->
node
); \

547 
∑thp
[1].
node
 = 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, \

548 
∑thp
->
node
); \

549 i‡(
cmp
 == 0) { \

551 
∑thp
->
cmp
 = 1; \

552 
nodï
 = 
∑thp
; \

553 
∑thp
++;Ö©hp->
node
 !
NULL
; \

554 
∑thp
++) { \

555 
∑thp
->
cmp
 = -1; \

556 
∑thp
[1].
node
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, \

557 
∑thp
->
node
); \

563 
	`as£π
(
nodï
->
node
 ==Çode); \

564 
∑thp
--; \

565 i‡(
∑thp
->
node
 !=Çode) { \

567 
boﬁ
 
åed
 = 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
); \

568 
	`rbä_cﬁ‹_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

569 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
node
)); \

570 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

571 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
)); \

576 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

577 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
node
)); \

578 
	`rbä_cﬁ‹_£t
(
a_ty≥
, 
a_fõld
, 
node
, 
åed
); \

581 
nodï
->
node
 = 
∑thp
->node; \

582 
∑thp
->
node
 =Çode; \

583 i‡(
nodï
 =
∑th
) { \

584 
rbåì
->
rbt_roŸ
 = 
nodï
->
node
; \

586 i‡(
nodï
[-1].
cmp
 < 0) { \

587 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
nodï
[-1].
node
, \

588 
nodï
->
node
); \

590 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
nodï
[-1].
node
, \

591 
nodï
->
node
); \

595 
a_ty≥
 *
À·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, 
node
); \

596 i‡(
À·
 !
NULL
) { \

599 
	`as£π
(!
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
node
)); \

600 
	`as£π
(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
À·
)); \

601 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
À·
); \

602 i‡(
∑thp
 =
∑th
) { \

603 
rbåì
->
rbt_roŸ
 = 
À·
; \

605 i‡(
∑thp
[-1].
cmp
 < 0) { \

606 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

607 
À·
); \

609 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

610 
À·
); \

614 } i‡(
∑thp
 =
∑th
) { \

616 
rbåì
->
rbt_roŸ
 = 
NULL
; \

620 i‡(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
)) { \

622 
	`as£π
(
∑thp
[-1].
cmp
 < 0); \

623 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, 
NULL
); \

628 
∑thp
->
node
 = 
NULL
; \

629 
∑thp
--; (
uöçå_t
Ì©h∞>(uöçå_t)
∑th
;Öathp--) { \

630 
	`as£π
(
∑thp
->
cmp
 != 0); \

631 i‡(
∑thp
->
cmp
 < 0) { \

632 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

633 
∑thp
[1].
node
); \

634 i‡(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
)) { \

635 
a_ty≥
 *
right
 = 
	`rbä_right_gë
◊_ty≥, 
a_fõld
, \

636 
∑thp
->
node
); \

637 
a_ty≥
 *
righée·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, \

638 
right
); \

639 
a_ty≥
 *
äode
; \

640 i‡(
righée·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, \

641 
righée·
)) { \

652 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
); \

653 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
right
, 
äode
); \

654 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, 
äode
);\

655 
	`rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

656 
äode
); \

665 
	`rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

666 
äode
); \

670 
	`as£π
((
uöçå_t
)
∑thp
 > (uöçå_t)
∑th
); \

671 i‡(
∑thp
[-1].
cmp
 < 0) { \

672 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

673 
äode
); \

675 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

676 
äode
); \

680 
a_ty≥
 *
right
 = 
	`rbä_right_gë
◊_ty≥, 
a_fõld
, \

681 
∑thp
->
node
); \

682 
a_ty≥
 *
righée·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, \

683 
right
); \

684 i‡(
righée·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, \

685 
righée·
)) { \

692 
a_ty≥
 *
äode
; \

693 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
righée·
); \

694 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
right
, 
äode
); \

695 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, 
äode
);\

696 
	`rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

697 
äode
); \

701 i‡(
∑thp
 =
∑th
) { \

703 
rbåì
->
rbt_roŸ
 = 
äode
; \

705 i‡(
∑thp
[-1].
cmp
 < 0) { \

706 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, \

707 
∑thp
[-1].
node
, 
äode
); \

709 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, \

710 
∑thp
[-1].
node
, 
äode
); \

721 
a_ty≥
 *
äode
; \

722 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
); \

723 
	`rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

724 
äode
); \

725 
∑thp
->
node
 = 
äode
; \

729 
a_ty≥
 *
À·
; \

730 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

731 
∑thp
[1].
node
); \

732 
À·
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
); \

733 i‡(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
À·
)) { \

734 
a_ty≥
 *
äode
; \

735 
a_ty≥
 *
À·right
 = 
	`rbä_right_gë
◊_ty≥, 
a_fõld
, \

736 
À·
); \

737 
a_ty≥
 *
À·righée·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, \

738 
À·right
); \

739 i‡(
À·righée·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, \

740 
a_fõld
, 
À·righée·
)) { \

749 
a_ty≥
 *
unode
; \

750 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
À·righée·
); \

751 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

752 
unode
); \

753 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

754 
äode
); \

755 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
unode
, 
äode
); \

756 
	`rbä_rŸ©e_À·
(
a_ty≥
, 
a_fõld
, 
unode
, 
äode
); \

766 
	`as£π
(
À·right
 !
NULL
); \

767 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
À·right
); \

768 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

769 
äode
); \

770 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
äode
); \

774 i‡(
∑thp
 =
∑th
) { \

776 
rbåì
->
rbt_roŸ
 = 
äode
; \

778 i‡(
∑thp
[-1].
cmp
 < 0) { \

779 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

780 
äode
); \

782 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

783 
äode
); \

787 } i‡(
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
)) { \

788 
a_ty≥
 *
À·À·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, 
À·
);\

789 i‡(
À·À·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, \

790 
À·À·
)) { \

797 
a_ty≥
 *
äode
; \

798 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
); \

799 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
À·
); \

800 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
À·À·
); \

801 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

802 
äode
); \

805 
	`as£π
((
uöçå_t
)
∑thp
 > (uöçå_t)
∑th
); \

806 i‡(
∑thp
[-1].
cmp
 < 0) { \

807 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

808 
äode
); \

810 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
[-1].
node
, \

811 
äode
); \

821 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
À·
); \

822 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
); \

827 
a_ty≥
 *
À·À·
 = 
	`rbä_À·_gë
◊_ty≥, 
a_fõld
, 
À·
);\

828 i‡(
À·À·
 !
NULL
 && 
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, \

829 
À·À·
)) { \

836 
a_ty≥
 *
äode
; \

837 
	`rbä_bœck_£t
(
a_ty≥
, 
a_fõld
, 
À·À·
); \

838 
	`rbä_rŸ©e_right
(
a_ty≥
, 
a_fõld
, 
∑thp
->
node
, \

839 
äode
); \

843 i‡(
∑thp
 =
∑th
) { \

845 
rbåì
->
rbt_roŸ
 = 
äode
; \

847 i‡(
∑thp
[-1].
cmp
 < 0) { \

848 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, \

849 
∑thp
[-1].
node
, 
äode
); \

851 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, \

852 
∑thp
[-1].
node
, 
äode
); \

863 
	`rbä_ªd_£t
(
a_ty≥
, 
a_fõld
, 
À·
); \

869 
rbåì
->
rbt_roŸ
 = 
∑th
->
node
; \

870 
	`as£π
(!
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
rbåì
->
rbt_roŸ
)); \

872 
a_©å
 
a_ty≥
 * \

873 
a_¥efix
##
	`ôî_ªcur£
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
, \

874 
a_ty≥
 *(*
cb
)(
a_rbt_ty≥
 *,á_ty≥ *, *), *
¨g
) { \

875 i‡(
node
 =
NULL
) { \

876  (
NULL
); \

878 
a_ty≥
 *
ªt
; \

879 i‡((
ªt
 = 
a_¥efix
##
	`ôî_ªcur£
(
rbåì
, 
	`rbä_À·_gë
(
a_ty≥
, \

880 
a_fõld
, 
node
), 
cb
, 
¨g
)Ë!
NULL
 || (
ªt
 = 
	`cb
(
rbåì
,Çode, \

881 
¨g
)Ë!
NULL
) { \

882  (
ªt
); \

884  (
a_¥efix
##
	`ôî_ªcur£
(
rbåì
, 
	`rbä_right_gë
(
a_ty≥
, \

885 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

888 
a_©å
 
a_ty≥
 * \

889 
a_¥efix
##
	`ôî_°¨t
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
°¨t
,á_ty≥ *
node
, \

890 
a_ty≥
 *(*
cb
)(
a_rbt_ty≥
 *,á_ty≥ *, *), *
¨g
) { \

891 
cmp
 = 
	`a_cmp
(
°¨t
, 
node
); \

892 i‡(
cmp
 < 0) { \

893 
a_ty≥
 *
ªt
; \

894 i‡((
ªt
 = 
a_¥efix
##
	`ôî_°¨t
(
rbåì
, 
°¨t
, \

895 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)Ë!
NULL
 || \

896 (
ªt
 = 
	`cb
(
rbåì
, 
node
, 
¨g
)Ë!
NULL
) { \

897  (
ªt
); \

899  (
a_¥efix
##
	`ôî_ªcur£
(
rbåì
, 
	`rbä_right_gë
(
a_ty≥
, \

900 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

901 } i‡(
cmp
 > 0) { \

902  (
a_¥efix
##
	`ôî_°¨t
(
rbåì
, 
°¨t
, \

903 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

905 
a_ty≥
 *
ªt
; \

906 i‡((
ªt
 = 
	`cb
(
rbåì
, 
node
, 
¨g
)Ë!
NULL
) { \

907  (
ªt
); \

909  (
a_¥efix
##
	`ôî_ªcur£
(
rbåì
, 
	`rbä_right_gë
(
a_ty≥
, \

910 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

913 
a_©å
 
a_ty≥
 * \

914 
a_¥efix
##
	`ôî
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
°¨t
,á_ty≥ *(*
cb
)( \

915 
a_rbt_ty≥
 *, 
a_ty≥
 *, *), *
¨g
) { \

916 
a_ty≥
 *
ªt
; \

917 i‡(
°¨t
 !
NULL
) { \

918 
ªt
 = 
a_¥efix
##
	`ôî_°¨t
(
rbåì
, 
°¨t
,Ñbåì->
rbt_roŸ
, \

919 
cb
, 
¨g
); \

921 
ªt
 = 
a_¥efix
##
	`ôî_ªcur£
(
rbåì
,Ñbåì->
rbt_roŸ
, 
cb
, 
¨g
);\

923  (
ªt
); \

925 
a_©å
 
a_ty≥
 * \

926 
a_¥efix
##
	`ªvî£_ôî_ªcur£
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
, \

927 
a_ty≥
 *(*
cb
)(
a_rbt_ty≥
 *,á_ty≥ *, *), *
¨g
) { \

928 i‡(
node
 =
NULL
) { \

929  (
NULL
); \

931 
a_ty≥
 *
ªt
; \

932 i‡((
ªt
 = 
a_¥efix
##
	`ªvî£_ôî_ªcur£
(
rbåì
, \

933 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)Ë!
NULL
 || \

934 (
ªt
 = 
	`cb
(
rbåì
, 
node
, 
¨g
)Ë!
NULL
) { \

935  (
ªt
); \

937  (
a_¥efix
##
	`ªvî£_ôî_ªcur£
(
rbåì
, \

938 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

941 
a_©å
 
a_ty≥
 * \

942 
a_¥efix
##
	`ªvî£_ôî_°¨t
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
°¨t
, \

943 
a_ty≥
 *
node
,á_ty≥ *(*
cb
)(
a_rbt_ty≥
 *,á_type *, *), \

944 *
¨g
) { \

945 
cmp
 = 
	`a_cmp
(
°¨t
, 
node
); \

946 i‡(
cmp
 > 0) { \

947 
a_ty≥
 *
ªt
; \

948 i‡((
ªt
 = 
a_¥efix
##
	`ªvî£_ôî_°¨t
(
rbåì
, 
°¨t
, \

949 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)Ë!
NULL
 || \

950 (
ªt
 = 
	`cb
(
rbåì
, 
node
, 
¨g
)Ë!
NULL
) { \

951  (
ªt
); \

953  (
a_¥efix
##
	`ªvî£_ôî_ªcur£
(
rbåì
, \

954 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

955 } i‡(
cmp
 < 0) { \

956  (
a_¥efix
##
	`ªvî£_ôî_°¨t
(
rbåì
, 
°¨t
, \

957 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

959 
a_ty≥
 *
ªt
; \

960 i‡((
ªt
 = 
	`cb
(
rbåì
, 
node
, 
¨g
)Ë!
NULL
) { \

961  (
ªt
); \

963  (
a_¥efix
##
	`ªvî£_ôî_ªcur£
(
rbåì
, \

964 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, 
node
), 
cb
, 
¨g
)); \

967 
a_©å
 
a_ty≥
 * \

968 
a_¥efix
##
	`ªvî£_ôî
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
°¨t
, \

969 
a_ty≥
 *(*
cb
)(
a_rbt_ty≥
 *,á_ty≥ *, *), *
¨g
) { \

970 
a_ty≥
 *
ªt
; \

971 i‡(
°¨t
 !
NULL
) { \

972 
ªt
 = 
a_¥efix
##
	`ªvî£_ôî_°¨t
(
rbåì
, 
°¨t
, \

973 
rbåì
->
rbt_roŸ
, 
cb
, 
¨g
); \

975 
ªt
 = 
a_¥efix
##
	`ªvî£_ôî_ªcur£
(
rbåì
,Ñbåì->
rbt_roŸ
, \

976 
cb
, 
¨g
); \

978  (
ªt
); \

980 
a_©å
 \

981 
a_¥efix
##
	`de°roy_ªcur£
(
a_rbt_ty≥
 *
rbåì
, 
a_ty≥
 *
node
, (*
cb
)( \

982 
a_ty≥
 *, *), *
¨g
) { \

983 i‡(
node
 =
NULL
) { \

986 
a_¥efix
##
	`de°roy_ªcur£
(
rbåì
, 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
, \

987 
node
), 
cb
, 
¨g
); \

988 
	`rbä_À·_£t
(
a_ty≥
, 
a_fõld
, (
node
), 
NULL
); \

989 
a_¥efix
##
	`de°roy_ªcur£
(
rbåì
, 
	`rbä_right_gë
(
a_ty≥
, 
a_fõld
, \

990 
node
), 
cb
, 
¨g
); \

991 
	`rbä_right_£t
(
a_ty≥
, 
a_fõld
, (
node
), 
NULL
); \

992 i‡(
cb
) { \

993 
	`cb
(
node
, 
¨g
); \

996 
a_©å
 \

997 
a_¥efix
##
	`de°roy
(
a_rbt_ty≥
 *
rbåì
, (*
cb
)(
a_ty≥
 *, *), \

998 *
¨g
) { \

999 
a_¥efix
##
	`de°roy_ªcur£
(
rbåì
,Ñbåì->
rbt_roŸ
, 
cb
, 
¨g
); \

1000 
rbåì
->
rbt_roŸ
 = 
NULL
; \

1001 }

	)

	@dep/jemalloc-4.2.0/include/jemalloc/internal/rtree.h

7 #ifde‡
JEMALLOC_H_TYPES


9 
πªe_node_ñm_s
 
	tπªe_node_ñm_t
;

10 
πªe_Àvñ_s
 
	tπªe_Àvñ_t
;

11 
πªe_s
 
	tπªe_t
;

17 
	#LG_RTREE_BITS_PER_LEVEL
 4

	)

18 
	#RTREE_BITS_PER_LEVEL
 (1U << 
LG_RTREE_BITS_PER_LEVEL
)

	)

20 
	#RTREE_HEIGHT_MAX
 \

21 ((1U << (
LG_SIZEOF_PTR
+3)Ë/ 
RTREE_BITS_PER_LEVEL
)

	)

24 
	#RTREE_NODE_INITIALIZING
 ((
πªe_node_ñm_t
 *)0x1)

	)

31 
	gπªe_node_ñm_t
 *(
	tπªe_node_Æloc_t
)(
	tsize_t
);

32 (
	tπªe_node_dÆloc_t
)(
	tπªe_node_ñm_t
 *);

36 #ifde‡
JEMALLOC_H_STRUCTS


38 
	sπªe_node_ñm_s
 {

40 *
pun
;

41 
πªe_node_ñm_t
 *
chûd
;

42 
exã¡_node_t
 *
vÆ
;

46 
	sπªe_Àvñ_s
 {

70 *
subåì_pun
;

71 
πªe_node_ñm_t
 *
subåì
;

74 
bôs
;

79 
cumbôs
;

82 
	sπªe_s
 {

83 
πªe_node_Æloc_t
 *
Æloc
;

84 
πªe_node_dÆloc_t
 *
dÆloc
;

85 
height
;

90 
°¨t_Àvñ
[
RTREE_HEIGHT_MAX
];

91 
πªe_Àvñ_t
 
Àvñs
[
RTREE_HEIGHT_MAX
];

96 #ifde‡
JEMALLOC_H_EXTERNS


98 
boﬁ
 
	`πªe_√w
(
πªe_t
 *
πªe
, 
bôs
, 
πªe_node_Æloc_t
 *
Æloc
,

99 
πªe_node_dÆloc_t
 *
dÆloc
);

100 
	`πªe_dñëe
(
πªe_t
 *
πªe
);

101 
πªe_node_ñm_t
 *
	`πªe_subåì_ªad_h¨d
(
πªe_t
 *
πªe
,

102 
Àvñ
);

103 
πªe_node_ñm_t
 *
	`πªe_chûd_ªad_h¨d
(
πªe_t
 *
πªe
,

104 
πªe_node_ñm_t
 *
ñm
, 
Àvñ
);

108 #ifde‡
JEMALLOC_H_INLINES


110 #i‚de‡
JEMALLOC_ENABLE_INLINE


111 
	`πªe_°¨t_Àvñ
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
);

112 
uöçå_t
 
	`πªe_subkey
(
πªe_t
 *
πªe
, uöçå_à
key
, 
Àvñ
);

114 
boﬁ
 
	`πªe_node_vÆid
(
πªe_node_ñm_t
 *
node
);

115 
πªe_node_ñm_t
 *
	`πªe_chûd_åyªad
‘åì_node_ñm_à*
ñm
,

116 
boﬁ
 
dïídít
);

117 
πªe_node_ñm_t
 *
	`πªe_chûd_ªad
(
πªe_t
 *
πªe
,Ñåì_node_ñm_à*
ñm
,

118 
Àvñ
, 
boﬁ
 
dïídít
);

119 
exã¡_node_t
 *
	`πªe_vÆ_ªad
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
ñm
,

120 
boﬁ
 
dïídít
);

121 
	`πªe_vÆ_wrôe
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
ñm
,

122 c⁄° 
exã¡_node_t
 *
vÆ
);

123 
πªe_node_ñm_t
 *
	`πªe_subåì_åyªad
(
πªe_t
 *
πªe
, 
Àvñ
,

124 
boﬁ
 
dïídít
);

125 
πªe_node_ñm_t
 *
	`πªe_subåì_ªad
(
πªe_t
 *
πªe
, 
Àvñ
,

126 
boﬁ
 
dïídít
);

128 
exã¡_node_t
 *
	`πªe_gë
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
, 
boﬁ
 
dïídít
);

129 
boﬁ
 
	`πªe_£t
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
, c⁄° 
exã¡_node_t
 *
vÆ
);

132 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_RTREE_C_
))

133 
JEMALLOC_ALWAYS_INLINE
 

134 
	$πªe_°¨t_Àvñ
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
)

136 
°¨t_Àvñ
;

138 i‡(
	`u∆ikñy
(
key
 == 0))

139  (
πªe
->
height
 - 1);

141 
°¨t_Àvñ
 = 
πªe
->°¨t_Àvñ[
	`lg_Êo‹
(
key
) >>

142 
LG_RTREE_BITS_PER_LEVEL
];

143 
	`as£π
(
°¨t_Àvñ
 < 
πªe
->
height
);

144  (
°¨t_Àvñ
);

145 
	}
}

147 
JEMALLOC_ALWAYS_INLINE
 
uöçå_t


148 
	$πªe_subkey
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
, 
Àvñ
)

151  ((
key
 >> ((
	`ZU
(1Ë<< (
LG_SIZEOF_PTR
+3)) -

152 
πªe
->
Àvñs
[
Àvñ
].
cumbôs
)Ë& ((
	`ZU
(1) <<

153 
πªe
->
Àvñs
[
Àvñ
].
bôs
) - 1));

154 
	}
}

156 
JEMALLOC_ALWAYS_INLINE
 
boﬁ


157 
	$πªe_node_vÆid
(
πªe_node_ñm_t
 *
node
)

160  ((
uöçå_t
)
node
 > (uöçå_t)
RTREE_NODE_INITIALIZING
);

161 
	}
}

163 
JEMALLOC_ALWAYS_INLINE
 
πªe_node_ñm_t
 *

164 
	$πªe_chûd_åyªad
(
πªe_node_ñm_t
 *
ñm
, 
boﬁ
 
dïídít
)

166 
πªe_node_ñm_t
 *
chûd
;

169 
chûd
 = 
ñm
->child;

170 i‡(!
dïídít
 && !
	`πªe_node_vÆid
(
chûd
))

171 
chûd
 = 
	`©omic_ªad_p
(&
ñm
->
pun
);

172 
	`as£π
(!
dïídít
 || 
chûd
 !
NULL
);

173  (
chûd
);

174 
	}
}

176 
JEMALLOC_ALWAYS_INLINE
 
πªe_node_ñm_t
 *

177 
	$πªe_chûd_ªad
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
ñm
, 
Àvñ
,

178 
boﬁ
 
dïídít
)

180 
πªe_node_ñm_t
 *
chûd
;

182 
chûd
 = 
	`πªe_chûd_åyªad
(
ñm
, 
dïídít
);

183 i‡(!
dïídít
 && 
	`u∆ikñy
(!
	`πªe_node_vÆid
(
chûd
)))

184 
chûd
 = 
	`πªe_chûd_ªad_h¨d
(
πªe
, 
ñm
, 
Àvñ
);

185 
	`as£π
(!
dïídít
 || 
chûd
 !
NULL
);

186  (
chûd
);

187 
	}
}

189 
JEMALLOC_ALWAYS_INLINE
 
exã¡_node_t
 *

190 
	$πªe_vÆ_ªad
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
ñm
, 
boﬁ
 
dïídít
)

193 i‡(
dïídít
) {

200  (
ñm
->
vÆ
);

207  (
	`©omic_ªad_p
(&
ñm
->
pun
));

209 
	}
}

211 
JEMALLOC_INLINE
 

212 
	$πªe_vÆ_wrôe
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
ñm
, c⁄° 
exã¡_node_t
 *
vÆ
)

215 
	`©omic_wrôe_p
(&
ñm
->
pun
, 
vÆ
);

216 
	}
}

218 
JEMALLOC_ALWAYS_INLINE
 
πªe_node_ñm_t
 *

219 
	$πªe_subåì_åyªad
(
πªe_t
 *
πªe
, 
Àvñ
, 
boﬁ
 
dïídít
)

221 
πªe_node_ñm_t
 *
subåì
;

224 
subåì
 = 
πªe
->
Àvñs
[
Àvñ
].subtree;

225 i‡(!
dïídít
 && 
	`u∆ikñy
(!
	`πªe_node_vÆid
(
subåì
)))

226 
subåì
 = 
	`©omic_ªad_p
(&
πªe
->
Àvñs
[
Àvñ
].
subåì_pun
);

227 
	`as£π
(!
dïídít
 || 
subåì
 !
NULL
);

228  (
subåì
);

229 
	}
}

231 
JEMALLOC_ALWAYS_INLINE
 
πªe_node_ñm_t
 *

232 
	$πªe_subåì_ªad
(
πªe_t
 *
πªe
, 
Àvñ
, 
boﬁ
 
dïídít
)

234 
πªe_node_ñm_t
 *
subåì
;

236 
subåì
 = 
	`πªe_subåì_åyªad
(
πªe
, 
Àvñ
, 
dïídít
);

237 i‡(!
dïídít
 && 
	`u∆ikñy
(!
	`πªe_node_vÆid
(
subåì
)))

238 
subåì
 = 
	`πªe_subåì_ªad_h¨d
(
πªe
, 
Àvñ
);

239 
	`as£π
(!
dïídít
 || 
subåì
 !
NULL
);

240  (
subåì
);

241 
	}
}

243 
JEMALLOC_ALWAYS_INLINE
 
exã¡_node_t
 *

244 
	$πªe_gë
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
, 
boﬁ
 
dïídít
)

246 
uöçå_t
 
subkey
;

247 
°¨t_Àvñ
;

248 
πªe_node_ñm_t
 *
node
;

250 
°¨t_Àvñ
 = 
	`πªe_°¨t_Àvñ
(
πªe
, 
key
);

252 
node
 = 
	`πªe_subåì_åyªad
(
πªe
, 
°¨t_Àvñ
, 
dïídít
);

253 
	#RTREE_GET_BIAS
 (
RTREE_HEIGHT_MAX
 - 
πªe
->
height
)

	)

254 
°¨t_Àvñ
 + 
RTREE_GET_BIAS
) {

255 
	#RTREE_GET_SUBTREE
(
Àvñ
) \

256 
Àvñ
: \

257 
	`as£π
(
Àvñ
 < (
RTREE_HEIGHT_MAX
-1)); \

258 i‡(!
dïídít
 && 
	`u∆ikñy
(!
	`πªe_node_vÆid
(
node
))) \

259  (
NULL
); \

260 
subkey
 = 
	`πªe_subkey
(
πªe
, 
key
, 
Àvñ
 - \

261 
RTREE_GET_BIAS
); \

262 
node
 = 
	`πªe_chûd_åyªad
(&node[
subkey
], 
dïídít
); \

263 

	)

264 
	#RTREE_GET_LEAF
(
Àvñ
) \

265 
Àvñ
: \

266 
	`as£π
(
Àvñ
 =(
RTREE_HEIGHT_MAX
-1)); \

267 i‡(!
dïídít
 && 
	`u∆ikñy
(!
	`πªe_node_vÆid
(
node
))) \

268  (
NULL
); \

269 
subkey
 = 
	`πªe_subkey
(
πªe
, 
key
, 
Àvñ
 - \

270 
RTREE_GET_BIAS
); \

275  (
	`πªe_vÆ_ªad
(
πªe
, &
node
[
subkey
], \

276 
dïídít
));

	)

277 #i‡
RTREE_HEIGHT_MAX
 > 1

278 
	`RTREE_GET_SUBTREE
(0)

280 #i‡
RTREE_HEIGHT_MAX
 > 2

281 
	`RTREE_GET_SUBTREE
(1)

283 #i‡
RTREE_HEIGHT_MAX
 > 3

284 
	`RTREE_GET_SUBTREE
(2)

286 #i‡
RTREE_HEIGHT_MAX
 > 4

287 
	`RTREE_GET_SUBTREE
(3)

289 #i‡
RTREE_HEIGHT_MAX
 > 5

290 
	`RTREE_GET_SUBTREE
(4)

292 #i‡
RTREE_HEIGHT_MAX
 > 6

293 
	`RTREE_GET_SUBTREE
(5)

295 #i‡
RTREE_HEIGHT_MAX
 > 7

296 
	`RTREE_GET_SUBTREE
(6)

298 #i‡
RTREE_HEIGHT_MAX
 > 8

299 
	`RTREE_GET_SUBTREE
(7)

301 #i‡
RTREE_HEIGHT_MAX
 > 9

302 
	`RTREE_GET_SUBTREE
(8)

304 #i‡
RTREE_HEIGHT_MAX
 > 10

305 
	`RTREE_GET_SUBTREE
(9)

307 #i‡
RTREE_HEIGHT_MAX
 > 11

308 
	`RTREE_GET_SUBTREE
(10)

310 #i‡
RTREE_HEIGHT_MAX
 > 12

311 
	`RTREE_GET_SUBTREE
(11)

313 #i‡
RTREE_HEIGHT_MAX
 > 13

314 
	`RTREE_GET_SUBTREE
(12)

316 #i‡
RTREE_HEIGHT_MAX
 > 14

317 
	`RTREE_GET_SUBTREE
(13)

319 #i‡
RTREE_HEIGHT_MAX
 > 15

320 
	`RTREE_GET_SUBTREE
(14)

322 #i‡
RTREE_HEIGHT_MAX
 > 16

323 #îr‹ 
Unsuµ‹ãd
 
RTREE_HEIGHT_MAX


325 
	`RTREE_GET_LEAF
(
RTREE_HEIGHT_MAX
-1)

326 #unde‡
RTREE_GET_SUBTREE


327 #unde‡
RTREE_GET_LEAF


328 : 
	`nŸ_ªached
();

330 #unde‡
RTREE_GET_BIAS


331 
	`nŸ_ªached
();

332 
	}
}

334 
JEMALLOC_INLINE
 
boﬁ


335 
	$πªe_£t
(
πªe_t
 *
πªe
, 
uöçå_t
 
key
, c⁄° 
exã¡_node_t
 *
vÆ
)

337 
uöçå_t
 
subkey
;

338 
i
, 
°¨t_Àvñ
;

339 
πªe_node_ñm_t
 *
node
, *
chûd
;

341 
°¨t_Àvñ
 = 
	`πªe_°¨t_Àvñ
(
πªe
, 
key
);

343 
node
 = 
	`πªe_subåì_ªad
(
πªe
, 
°¨t_Àvñ
, 
Ál£
);

344 i‡(
node
 =
NULL
)

345  (
åue
);

346 
i
 = 
°¨t_Àvñ
; ; i++, 
node
 = 
chûd
) {

347 
subkey
 = 
	`πªe_subkey
(
πªe
, 
key
, 
i
);

348 i‡(
i
 =
πªe
->
height
 - 1) {

353 
	`πªe_vÆ_wrôe
(
πªe
, &
node
[
subkey
], 
vÆ
);

354  (
Ál£
);

356 
	`as£π
(
i
 + 1 < 
πªe
->
height
);

357 
chûd
 = 
	`πªe_chûd_ªad
(
πªe
, &
node
[
subkey
], 
i
, 
Ál£
);

358 i‡(
chûd
 =
NULL
)

359  (
åue
);

361 
	`nŸ_ªached
();

362 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/size_classes.h

3 #ifde‡
JEMALLOC_H_TYPES


31 
	#LG_SIZE_CLASS_GROUP
 2

	)

33 #i‡(
LG_SIZEOF_PTR
 =2 && 
LG_TINY_MIN
 =3 && 
LG_QUANTUM
 =3 && 
LG_PAGE
 == 12)

34 
	#SIZE_CLASSES
 \

36 
	`SC
–0, 3, 3, 0, 
yes
, 3) \

37 
	`SC
–1, 3, 3, 1, 
yes
, 3) \

38 
	`SC
–2, 3, 3, 2, 
yes
, 3) \

39 
	`SC
–3, 3, 3, 3, 
yes
, 3) \

41 
	`SC
–4, 5, 3, 1, 
yes
, 3) \

42 
	`SC
–5, 5, 3, 2, 
yes
, 3) \

43 
	`SC
–6, 5, 3, 3, 
yes
, 3) \

44 
	`SC
–7, 5, 3, 4, 
yes
, 3) \

46 
	`SC
–8, 6, 4, 1, 
yes
, 4) \

47 
	`SC
–9, 6, 4, 2, 
yes
, 4) \

48 
	`SC
–10, 6, 4, 3, 
yes
, 4) \

49 
	`SC
–11, 6, 4, 4, 
yes
, 4) \

51 
	`SC
–12, 7, 5, 1, 
yes
, 5) \

52 
	`SC
–13, 7, 5, 2, 
yes
, 5) \

53 
	`SC
–14, 7, 5, 3, 
yes
, 5) \

54 
	`SC
–15, 7, 5, 4, 
yes
, 5) \

56 
	`SC
–16, 8, 6, 1, 
yes
, 6) \

57 
	`SC
–17, 8, 6, 2, 
yes
, 6) \

58 
	`SC
–18, 8, 6, 3, 
yes
, 6) \

59 
	`SC
–19, 8, 6, 4, 
yes
, 6) \

61 
	`SC
–20, 9, 7, 1, 
yes
, 7) \

62 
	`SC
–21, 9, 7, 2, 
yes
, 7) \

63 
	`SC
–22, 9, 7, 3, 
yes
, 7) \

64 
	`SC
–23, 9, 7, 4, 
yes
, 7) \

66 
	`SC
–24, 10, 8, 1, 
yes
, 8) \

67 
	`SC
–25, 10, 8, 2, 
yes
, 8) \

68 
	`SC
–26, 10, 8, 3, 
yes
, 8) \

69 
	`SC
–27, 10, 8, 4, 
yes
, 8) \

71 
	`SC
–28, 11, 9, 1, 
yes
, 9) \

72 
	`SC
–29, 11, 9, 2, 
yes
, 9) \

73 
	`SC
–30, 11, 9, 3, 
yes
, 9) \

74 
	`SC
–31, 11, 9, 4, 
yes
, 9) \

76 
	`SC
–32, 12, 10, 1, 
yes
, 
no
) \

77 
	`SC
–33, 12, 10, 2, 
yes
, 
no
) \

78 
	`SC
–34, 12, 10, 3, 
yes
, 
no
) \

79 
	`SC
–35, 12, 10, 4, 
yes
, 
no
) \

81 
	`SC
–36, 13, 11, 1, 
yes
, 
no
) \

82 
	`SC
–37, 13, 11, 2, 
yes
, 
no
) \

83 
	`SC
–38, 13, 11, 3, 
yes
, 
no
) \

84 
	`SC
–39, 13, 11, 4, 
no
,Ço) \

86 
	`SC
–40, 14, 12, 1, 
no
,Ço) \

87 
	`SC
–41, 14, 12, 2, 
no
,Ço) \

88 
	`SC
–42, 14, 12, 3, 
no
,Ço) \

89 
	`SC
–43, 14, 12, 4, 
no
,Ço) \

91 
	`SC
–44, 15, 13, 1, 
no
,Ço) \

92 
	`SC
–45, 15, 13, 2, 
no
,Ço) \

93 
	`SC
–46, 15, 13, 3, 
no
,Ço) \

94 
	`SC
–47, 15, 13, 4, 
no
,Ço) \

96 
	`SC
–48, 16, 14, 1, 
no
,Ço) \

97 
	`SC
–49, 16, 14, 2, 
no
,Ço) \

98 
	`SC
–50, 16, 14, 3, 
no
,Ço) \

99 
	`SC
–51, 16, 14, 4, 
no
,Ço) \

101 
	`SC
–52, 17, 15, 1, 
no
,Ço) \

102 
	`SC
–53, 17, 15, 2, 
no
,Ço) \

103 
	`SC
–54, 17, 15, 3, 
no
,Ço) \

104 
	`SC
–55, 17, 15, 4, 
no
,Ço) \

106 
	`SC
–56, 18, 16, 1, 
no
,Ço) \

107 
	`SC
–57, 18, 16, 2, 
no
,Ço) \

108 
	`SC
–58, 18, 16, 3, 
no
,Ço) \

109 
	`SC
–59, 18, 16, 4, 
no
,Ço) \

111 
	`SC
–60, 19, 17, 1, 
no
,Ço) \

112 
	`SC
–61, 19, 17, 2, 
no
,Ço) \

113 
	`SC
–62, 19, 17, 3, 
no
,Ço) \

114 
	`SC
–63, 19, 17, 4, 
no
,Ço) \

116 
	`SC
–64, 20, 18, 1, 
no
,Ço) \

117 
	`SC
–65, 20, 18, 2, 
no
,Ço) \

118 
	`SC
–66, 20, 18, 3, 
no
,Ço) \

119 
	`SC
–67, 20, 18, 4, 
no
,Ço) \

121 
	`SC
–68, 21, 19, 1, 
no
,Ço) \

122 
	`SC
–69, 21, 19, 2, 
no
,Ço) \

123 
	`SC
–70, 21, 19, 3, 
no
,Ço) \

124 
	`SC
–71, 21, 19, 4, 
no
,Ço) \

126 
	`SC
–72, 22, 20, 1, 
no
,Ço) \

127 
	`SC
–73, 22, 20, 2, 
no
,Ço) \

128 
	`SC
–74, 22, 20, 3, 
no
,Ço) \

129 
	`SC
–75, 22, 20, 4, 
no
,Ço) \

131 
	`SC
–76, 23, 21, 1, 
no
,Ço) \

132 
	`SC
–77, 23, 21, 2, 
no
,Ço) \

133 
	`SC
–78, 23, 21, 3, 
no
,Ço) \

134 
	`SC
–79, 23, 21, 4, 
no
,Ço) \

136 
	`SC
–80, 24, 22, 1, 
no
,Ço) \

137 
	`SC
–81, 24, 22, 2, 
no
,Ço) \

138 
	`SC
–82, 24, 22, 3, 
no
,Ço) \

139 
	`SC
–83, 24, 22, 4, 
no
,Ço) \

141 
	`SC
–84, 25, 23, 1, 
no
,Ço) \

142 
	`SC
–85, 25, 23, 2, 
no
,Ço) \

143 
	`SC
–86, 25, 23, 3, 
no
,Ço) \

144 
	`SC
–87, 25, 23, 4, 
no
,Ço) \

146 
	`SC
–88, 26, 24, 1, 
no
,Ço) \

147 
	`SC
–89, 26, 24, 2, 
no
,Ço) \

148 
	`SC
–90, 26, 24, 3, 
no
,Ço) \

149 
	`SC
–91, 26, 24, 4, 
no
,Ço) \

151 
	`SC
–92, 27, 25, 1, 
no
,Ço) \

152 
	`SC
–93, 27, 25, 2, 
no
,Ço) \

153 
	`SC
–94, 27, 25, 3, 
no
,Ço) \

154 
	`SC
–95, 27, 25, 4, 
no
,Ço) \

156 
	`SC
–96, 28, 26, 1, 
no
,Ço) \

157 
	`SC
–97, 28, 26, 2, 
no
,Ço) \

158 
	`SC
–98, 28, 26, 3, 
no
,Ço) \

159 
	`SC
–99, 28, 26, 4, 
no
,Ço) \

161 
	`SC
(100, 29, 27, 1, 
no
,Ço) \

162 
	`SC
(101, 29, 27, 2, 
no
,Ço) \

163 
	`SC
(102, 29, 27, 3, 
no
,Ço) \

164 
	`SC
(103, 29, 27, 4, 
no
,Ço) \

166 
	`SC
(104, 30, 28, 1, 
no
,Ço) \

167 
	`SC
(105, 30, 28, 2, 
no
,Ço) \

168 
	`SC
(106, 30, 28, 3, 
no
,Ço) \

169 

	)

170 
	#SIZE_CLASSES_DEFINED


	)

171 
	#NTBINS
 0

	)

172 
	#NLBINS
 32

	)

173 
	#NBINS
 39

	)

174 
	#NSIZES
 107

	)

175 
	#LG_TINY_MAXCLASS
 "NA"

	)

176 
	#LOOKUP_MAXCLASS
 ((((
size_t
)1Ë<< 11Ë+ (((size_t)4Ë<< 9))

	)

177 
	#SMALL_MAXCLASS
 ((((
size_t
)1Ë<< 13Ë+ (((size_t)3Ë<< 11))

	)

178 
	#LG_LARGE_MINCLASS
 14

	)

179 
	#HUGE_MAXCLASS
 ((((
size_t
)1Ë<< 30Ë+ (((size_t)3Ë<< 28))

	)

182 #i‡(
LG_SIZEOF_PTR
 =2 && 
LG_TINY_MIN
 =3 && 
LG_QUANTUM
 =4 && 
LG_PAGE
 == 12)

183 
	#SIZE_CLASSES
 \

185 
	`SC
–0, 3, 3, 0, 
yes
, 3) \

187 
	`SC
–1, 3, 3, 1, 
yes
, 3) \

188 
	`SC
–2, 4, 4, 1, 
yes
, 4) \

189 
	`SC
–3, 4, 4, 2, 
yes
, 4) \

190 
	`SC
–4, 4, 4, 3, 
yes
, 4) \

192 
	`SC
–5, 6, 4, 1, 
yes
, 4) \

193 
	`SC
–6, 6, 4, 2, 
yes
, 4) \

194 
	`SC
–7, 6, 4, 3, 
yes
, 4) \

195 
	`SC
–8, 6, 4, 4, 
yes
, 4) \

197 
	`SC
–9, 7, 5, 1, 
yes
, 5) \

198 
	`SC
–10, 7, 5, 2, 
yes
, 5) \

199 
	`SC
–11, 7, 5, 3, 
yes
, 5) \

200 
	`SC
–12, 7, 5, 4, 
yes
, 5) \

202 
	`SC
–13, 8, 6, 1, 
yes
, 6) \

203 
	`SC
–14, 8, 6, 2, 
yes
, 6) \

204 
	`SC
–15, 8, 6, 3, 
yes
, 6) \

205 
	`SC
–16, 8, 6, 4, 
yes
, 6) \

207 
	`SC
–17, 9, 7, 1, 
yes
, 7) \

208 
	`SC
–18, 9, 7, 2, 
yes
, 7) \

209 
	`SC
–19, 9, 7, 3, 
yes
, 7) \

210 
	`SC
–20, 9, 7, 4, 
yes
, 7) \

212 
	`SC
–21, 10, 8, 1, 
yes
, 8) \

213 
	`SC
–22, 10, 8, 2, 
yes
, 8) \

214 
	`SC
–23, 10, 8, 3, 
yes
, 8) \

215 
	`SC
–24, 10, 8, 4, 
yes
, 8) \

217 
	`SC
–25, 11, 9, 1, 
yes
, 9) \

218 
	`SC
–26, 11, 9, 2, 
yes
, 9) \

219 
	`SC
–27, 11, 9, 3, 
yes
, 9) \

220 
	`SC
–28, 11, 9, 4, 
yes
, 9) \

222 
	`SC
–29, 12, 10, 1, 
yes
, 
no
) \

223 
	`SC
–30, 12, 10, 2, 
yes
, 
no
) \

224 
	`SC
–31, 12, 10, 3, 
yes
, 
no
) \

225 
	`SC
–32, 12, 10, 4, 
yes
, 
no
) \

227 
	`SC
–33, 13, 11, 1, 
yes
, 
no
) \

228 
	`SC
–34, 13, 11, 2, 
yes
, 
no
) \

229 
	`SC
–35, 13, 11, 3, 
yes
, 
no
) \

230 
	`SC
–36, 13, 11, 4, 
no
,Ço) \

232 
	`SC
–37, 14, 12, 1, 
no
,Ço) \

233 
	`SC
–38, 14, 12, 2, 
no
,Ço) \

234 
	`SC
–39, 14, 12, 3, 
no
,Ço) \

235 
	`SC
–40, 14, 12, 4, 
no
,Ço) \

237 
	`SC
–41, 15, 13, 1, 
no
,Ço) \

238 
	`SC
–42, 15, 13, 2, 
no
,Ço) \

239 
	`SC
–43, 15, 13, 3, 
no
,Ço) \

240 
	`SC
–44, 15, 13, 4, 
no
,Ço) \

242 
	`SC
–45, 16, 14, 1, 
no
,Ço) \

243 
	`SC
–46, 16, 14, 2, 
no
,Ço) \

244 
	`SC
–47, 16, 14, 3, 
no
,Ço) \

245 
	`SC
–48, 16, 14, 4, 
no
,Ço) \

247 
	`SC
–49, 17, 15, 1, 
no
,Ço) \

248 
	`SC
–50, 17, 15, 2, 
no
,Ço) \

249 
	`SC
–51, 17, 15, 3, 
no
,Ço) \

250 
	`SC
–52, 17, 15, 4, 
no
,Ço) \

252 
	`SC
–53, 18, 16, 1, 
no
,Ço) \

253 
	`SC
–54, 18, 16, 2, 
no
,Ço) \

254 
	`SC
–55, 18, 16, 3, 
no
,Ço) \

255 
	`SC
–56, 18, 16, 4, 
no
,Ço) \

257 
	`SC
–57, 19, 17, 1, 
no
,Ço) \

258 
	`SC
–58, 19, 17, 2, 
no
,Ço) \

259 
	`SC
–59, 19, 17, 3, 
no
,Ço) \

260 
	`SC
–60, 19, 17, 4, 
no
,Ço) \

262 
	`SC
–61, 20, 18, 1, 
no
,Ço) \

263 
	`SC
–62, 20, 18, 2, 
no
,Ço) \

264 
	`SC
–63, 20, 18, 3, 
no
,Ço) \

265 
	`SC
–64, 20, 18, 4, 
no
,Ço) \

267 
	`SC
–65, 21, 19, 1, 
no
,Ço) \

268 
	`SC
–66, 21, 19, 2, 
no
,Ço) \

269 
	`SC
–67, 21, 19, 3, 
no
,Ço) \

270 
	`SC
–68, 21, 19, 4, 
no
,Ço) \

272 
	`SC
–69, 22, 20, 1, 
no
,Ço) \

273 
	`SC
–70, 22, 20, 2, 
no
,Ço) \

274 
	`SC
–71, 22, 20, 3, 
no
,Ço) \

275 
	`SC
–72, 22, 20, 4, 
no
,Ço) \

277 
	`SC
–73, 23, 21, 1, 
no
,Ço) \

278 
	`SC
–74, 23, 21, 2, 
no
,Ço) \

279 
	`SC
–75, 23, 21, 3, 
no
,Ço) \

280 
	`SC
–76, 23, 21, 4, 
no
,Ço) \

282 
	`SC
–77, 24, 22, 1, 
no
,Ço) \

283 
	`SC
–78, 24, 22, 2, 
no
,Ço) \

284 
	`SC
–79, 24, 22, 3, 
no
,Ço) \

285 
	`SC
–80, 24, 22, 4, 
no
,Ço) \

287 
	`SC
–81, 25, 23, 1, 
no
,Ço) \

288 
	`SC
–82, 25, 23, 2, 
no
,Ço) \

289 
	`SC
–83, 25, 23, 3, 
no
,Ço) \

290 
	`SC
–84, 25, 23, 4, 
no
,Ço) \

292 
	`SC
–85, 26, 24, 1, 
no
,Ço) \

293 
	`SC
–86, 26, 24, 2, 
no
,Ço) \

294 
	`SC
–87, 26, 24, 3, 
no
,Ço) \

295 
	`SC
–88, 26, 24, 4, 
no
,Ço) \

297 
	`SC
–89, 27, 25, 1, 
no
,Ço) \

298 
	`SC
–90, 27, 25, 2, 
no
,Ço) \

299 
	`SC
–91, 27, 25, 3, 
no
,Ço) \

300 
	`SC
–92, 27, 25, 4, 
no
,Ço) \

302 
	`SC
–93, 28, 26, 1, 
no
,Ço) \

303 
	`SC
–94, 28, 26, 2, 
no
,Ço) \

304 
	`SC
–95, 28, 26, 3, 
no
,Ço) \

305 
	`SC
–96, 28, 26, 4, 
no
,Ço) \

307 
	`SC
–97, 29, 27, 1, 
no
,Ço) \

308 
	`SC
–98, 29, 27, 2, 
no
,Ço) \

309 
	`SC
–99, 29, 27, 3, 
no
,Ço) \

310 
	`SC
(100, 29, 27, 4, 
no
,Ço) \

312 
	`SC
(101, 30, 28, 1, 
no
,Ço) \

313 
	`SC
(102, 30, 28, 2, 
no
,Ço) \

314 
	`SC
(103, 30, 28, 3, 
no
,Ço) \

315 

	)

316 
	#SIZE_CLASSES_DEFINED


	)

317 
	#NTBINS
 1

	)

318 
	#NLBINS
 29

	)

319 
	#NBINS
 36

	)

320 
	#NSIZES
 104

	)

321 
	#LG_TINY_MAXCLASS
 3

	)

322 
	#LOOKUP_MAXCLASS
 ((((
size_t
)1Ë<< 11Ë+ (((size_t)4Ë<< 9))

	)

323 
	#SMALL_MAXCLASS
 ((((
size_t
)1Ë<< 13Ë+ (((size_t)3Ë<< 11))

	)

324 
	#LG_LARGE_MINCLASS
 14

	)

325 
	#HUGE_MAXCLASS
 ((((
size_t
)1Ë<< 30Ë+ (((size_t)3Ë<< 28))

	)

328 #i‡(
LG_SIZEOF_PTR
 =2 && 
LG_TINY_MIN
 =4 && 
LG_QUANTUM
 =4 && 
LG_PAGE
 == 12)

329 
	#SIZE_CLASSES
 \

331 
	`SC
–0, 4, 4, 0, 
yes
, 4) \

332 
	`SC
–1, 4, 4, 1, 
yes
, 4) \

333 
	`SC
–2, 4, 4, 2, 
yes
, 4) \

334 
	`SC
–3, 4, 4, 3, 
yes
, 4) \

336 
	`SC
–4, 6, 4, 1, 
yes
, 4) \

337 
	`SC
–5, 6, 4, 2, 
yes
, 4) \

338 
	`SC
–6, 6, 4, 3, 
yes
, 4) \

339 
	`SC
–7, 6, 4, 4, 
yes
, 4) \

341 
	`SC
–8, 7, 5, 1, 
yes
, 5) \

342 
	`SC
–9, 7, 5, 2, 
yes
, 5) \

343 
	`SC
–10, 7, 5, 3, 
yes
, 5) \

344 
	`SC
–11, 7, 5, 4, 
yes
, 5) \

346 
	`SC
–12, 8, 6, 1, 
yes
, 6) \

347 
	`SC
–13, 8, 6, 2, 
yes
, 6) \

348 
	`SC
–14, 8, 6, 3, 
yes
, 6) \

349 
	`SC
–15, 8, 6, 4, 
yes
, 6) \

351 
	`SC
–16, 9, 7, 1, 
yes
, 7) \

352 
	`SC
–17, 9, 7, 2, 
yes
, 7) \

353 
	`SC
–18, 9, 7, 3, 
yes
, 7) \

354 
	`SC
–19, 9, 7, 4, 
yes
, 7) \

356 
	`SC
–20, 10, 8, 1, 
yes
, 8) \

357 
	`SC
–21, 10, 8, 2, 
yes
, 8) \

358 
	`SC
–22, 10, 8, 3, 
yes
, 8) \

359 
	`SC
–23, 10, 8, 4, 
yes
, 8) \

361 
	`SC
–24, 11, 9, 1, 
yes
, 9) \

362 
	`SC
–25, 11, 9, 2, 
yes
, 9) \

363 
	`SC
–26, 11, 9, 3, 
yes
, 9) \

364 
	`SC
–27, 11, 9, 4, 
yes
, 9) \

366 
	`SC
–28, 12, 10, 1, 
yes
, 
no
) \

367 
	`SC
–29, 12, 10, 2, 
yes
, 
no
) \

368 
	`SC
–30, 12, 10, 3, 
yes
, 
no
) \

369 
	`SC
–31, 12, 10, 4, 
yes
, 
no
) \

371 
	`SC
–32, 13, 11, 1, 
yes
, 
no
) \

372 
	`SC
–33, 13, 11, 2, 
yes
, 
no
) \

373 
	`SC
–34, 13, 11, 3, 
yes
, 
no
) \

374 
	`SC
–35, 13, 11, 4, 
no
,Ço) \

376 
	`SC
–36, 14, 12, 1, 
no
,Ço) \

377 
	`SC
–37, 14, 12, 2, 
no
,Ço) \

378 
	`SC
–38, 14, 12, 3, 
no
,Ço) \

379 
	`SC
–39, 14, 12, 4, 
no
,Ço) \

381 
	`SC
–40, 15, 13, 1, 
no
,Ço) \

382 
	`SC
–41, 15, 13, 2, 
no
,Ço) \

383 
	`SC
–42, 15, 13, 3, 
no
,Ço) \

384 
	`SC
–43, 15, 13, 4, 
no
,Ço) \

386 
	`SC
–44, 16, 14, 1, 
no
,Ço) \

387 
	`SC
–45, 16, 14, 2, 
no
,Ço) \

388 
	`SC
–46, 16, 14, 3, 
no
,Ço) \

389 
	`SC
–47, 16, 14, 4, 
no
,Ço) \

391 
	`SC
–48, 17, 15, 1, 
no
,Ço) \

392 
	`SC
–49, 17, 15, 2, 
no
,Ço) \

393 
	`SC
–50, 17, 15, 3, 
no
,Ço) \

394 
	`SC
–51, 17, 15, 4, 
no
,Ço) \

396 
	`SC
–52, 18, 16, 1, 
no
,Ço) \

397 
	`SC
–53, 18, 16, 2, 
no
,Ço) \

398 
	`SC
–54, 18, 16, 3, 
no
,Ço) \

399 
	`SC
–55, 18, 16, 4, 
no
,Ço) \

401 
	`SC
–56, 19, 17, 1, 
no
,Ço) \

402 
	`SC
–57, 19, 17, 2, 
no
,Ço) \

403 
	`SC
–58, 19, 17, 3, 
no
,Ço) \

404 
	`SC
–59, 19, 17, 4, 
no
,Ço) \

406 
	`SC
–60, 20, 18, 1, 
no
,Ço) \

407 
	`SC
–61, 20, 18, 2, 
no
,Ço) \

408 
	`SC
–62, 20, 18, 3, 
no
,Ço) \

409 
	`SC
–63, 20, 18, 4, 
no
,Ço) \

411 
	`SC
–64, 21, 19, 1, 
no
,Ço) \

412 
	`SC
–65, 21, 19, 2, 
no
,Ço) \

413 
	`SC
–66, 21, 19, 3, 
no
,Ço) \

414 
	`SC
–67, 21, 19, 4, 
no
,Ço) \

416 
	`SC
–68, 22, 20, 1, 
no
,Ço) \

417 
	`SC
–69, 22, 20, 2, 
no
,Ço) \

418 
	`SC
–70, 22, 20, 3, 
no
,Ço) \

419 
	`SC
–71, 22, 20, 4, 
no
,Ço) \

421 
	`SC
–72, 23, 21, 1, 
no
,Ço) \

422 
	`SC
–73, 23, 21, 2, 
no
,Ço) \

423 
	`SC
–74, 23, 21, 3, 
no
,Ço) \

424 
	`SC
–75, 23, 21, 4, 
no
,Ço) \

426 
	`SC
–76, 24, 22, 1, 
no
,Ço) \

427 
	`SC
–77, 24, 22, 2, 
no
,Ço) \

428 
	`SC
–78, 24, 22, 3, 
no
,Ço) \

429 
	`SC
–79, 24, 22, 4, 
no
,Ço) \

431 
	`SC
–80, 25, 23, 1, 
no
,Ço) \

432 
	`SC
–81, 25, 23, 2, 
no
,Ço) \

433 
	`SC
–82, 25, 23, 3, 
no
,Ço) \

434 
	`SC
–83, 25, 23, 4, 
no
,Ço) \

436 
	`SC
–84, 26, 24, 1, 
no
,Ço) \

437 
	`SC
–85, 26, 24, 2, 
no
,Ço) \

438 
	`SC
–86, 26, 24, 3, 
no
,Ço) \

439 
	`SC
–87, 26, 24, 4, 
no
,Ço) \

441 
	`SC
–88, 27, 25, 1, 
no
,Ço) \

442 
	`SC
–89, 27, 25, 2, 
no
,Ço) \

443 
	`SC
–90, 27, 25, 3, 
no
,Ço) \

444 
	`SC
–91, 27, 25, 4, 
no
,Ço) \

446 
	`SC
–92, 28, 26, 1, 
no
,Ço) \

447 
	`SC
–93, 28, 26, 2, 
no
,Ço) \

448 
	`SC
–94, 28, 26, 3, 
no
,Ço) \

449 
	`SC
–95, 28, 26, 4, 
no
,Ço) \

451 
	`SC
–96, 29, 27, 1, 
no
,Ço) \

452 
	`SC
–97, 29, 27, 2, 
no
,Ço) \

453 
	`SC
–98, 29, 27, 3, 
no
,Ço) \

454 
	`SC
–99, 29, 27, 4, 
no
,Ço) \

456 
	`SC
(100, 30, 28, 1, 
no
,Ço) \

457 
	`SC
(101, 30, 28, 2, 
no
,Ço) \

458 
	`SC
(102, 30, 28, 3, 
no
,Ço) \

459 

	)

460 
	#SIZE_CLASSES_DEFINED


	)

461 
	#NTBINS
 0

	)

462 
	#NLBINS
 28

	)

463 
	#NBINS
 35

	)

464 
	#NSIZES
 103

	)

465 
	#LG_TINY_MAXCLASS
 "NA"

	)

466 
	#LOOKUP_MAXCLASS
 ((((
size_t
)1Ë<< 11Ë+ (((size_t)4Ë<< 9))

	)

467 
	#SMALL_MAXCLASS
 ((((
size_t
)1Ë<< 13Ë+ (((size_t)3Ë<< 11))

	)

468 
	#LG_LARGE_MINCLASS
 14

	)

469 
	#HUGE_MAXCLASS
 ((((
size_t
)1Ë<< 30Ë+ (((size_t)3Ë<< 28))

	)

472 #i‡(
LG_SIZEOF_PTR
 =3 && 
LG_TINY_MIN
 =3 && 
LG_QUANTUM
 =3 && 
LG_PAGE
 == 12)

473 
	#SIZE_CLASSES
 \

475 
	`SC
–0, 3, 3, 0, 
yes
, 3) \

476 
	`SC
–1, 3, 3, 1, 
yes
, 3) \

477 
	`SC
–2, 3, 3, 2, 
yes
, 3) \

478 
	`SC
–3, 3, 3, 3, 
yes
, 3) \

480 
	`SC
–4, 5, 3, 1, 
yes
, 3) \

481 
	`SC
–5, 5, 3, 2, 
yes
, 3) \

482 
	`SC
–6, 5, 3, 3, 
yes
, 3) \

483 
	`SC
–7, 5, 3, 4, 
yes
, 3) \

485 
	`SC
–8, 6, 4, 1, 
yes
, 4) \

486 
	`SC
–9, 6, 4, 2, 
yes
, 4) \

487 
	`SC
–10, 6, 4, 3, 
yes
, 4) \

488 
	`SC
–11, 6, 4, 4, 
yes
, 4) \

490 
	`SC
–12, 7, 5, 1, 
yes
, 5) \

491 
	`SC
–13, 7, 5, 2, 
yes
, 5) \

492 
	`SC
–14, 7, 5, 3, 
yes
, 5) \

493 
	`SC
–15, 7, 5, 4, 
yes
, 5) \

495 
	`SC
–16, 8, 6, 1, 
yes
, 6) \

496 
	`SC
–17, 8, 6, 2, 
yes
, 6) \

497 
	`SC
–18, 8, 6, 3, 
yes
, 6) \

498 
	`SC
–19, 8, 6, 4, 
yes
, 6) \

500 
	`SC
–20, 9, 7, 1, 
yes
, 7) \

501 
	`SC
–21, 9, 7, 2, 
yes
, 7) \

502 
	`SC
–22, 9, 7, 3, 
yes
, 7) \

503 
	`SC
–23, 9, 7, 4, 
yes
, 7) \

505 
	`SC
–24, 10, 8, 1, 
yes
, 8) \

506 
	`SC
–25, 10, 8, 2, 
yes
, 8) \

507 
	`SC
–26, 10, 8, 3, 
yes
, 8) \

508 
	`SC
–27, 10, 8, 4, 
yes
, 8) \

510 
	`SC
–28, 11, 9, 1, 
yes
, 9) \

511 
	`SC
–29, 11, 9, 2, 
yes
, 9) \

512 
	`SC
–30, 11, 9, 3, 
yes
, 9) \

513 
	`SC
–31, 11, 9, 4, 
yes
, 9) \

515 
	`SC
–32, 12, 10, 1, 
yes
, 
no
) \

516 
	`SC
–33, 12, 10, 2, 
yes
, 
no
) \

517 
	`SC
–34, 12, 10, 3, 
yes
, 
no
) \

518 
	`SC
–35, 12, 10, 4, 
yes
, 
no
) \

520 
	`SC
–36, 13, 11, 1, 
yes
, 
no
) \

521 
	`SC
–37, 13, 11, 2, 
yes
, 
no
) \

522 
	`SC
–38, 13, 11, 3, 
yes
, 
no
) \

523 
	`SC
–39, 13, 11, 4, 
no
,Ço) \

525 
	`SC
–40, 14, 12, 1, 
no
,Ço) \

526 
	`SC
–41, 14, 12, 2, 
no
,Ço) \

527 
	`SC
–42, 14, 12, 3, 
no
,Ço) \

528 
	`SC
–43, 14, 12, 4, 
no
,Ço) \

530 
	`SC
–44, 15, 13, 1, 
no
,Ço) \

531 
	`SC
–45, 15, 13, 2, 
no
,Ço) \

532 
	`SC
–46, 15, 13, 3, 
no
,Ço) \

533 
	`SC
–47, 15, 13, 4, 
no
,Ço) \

535 
	`SC
–48, 16, 14, 1, 
no
,Ço) \

536 
	`SC
–49, 16, 14, 2, 
no
,Ço) \

537 
	`SC
–50, 16, 14, 3, 
no
,Ço) \

538 
	`SC
–51, 16, 14, 4, 
no
,Ço) \

540 
	`SC
–52, 17, 15, 1, 
no
,Ço) \

541 
	`SC
–53, 17, 15, 2, 
no
,Ço) \

542 
	`SC
–54, 17, 15, 3, 
no
,Ço) \

543 
	`SC
–55, 17, 15, 4, 
no
,Ço) \

545 
	`SC
–56, 18, 16, 1, 
no
,Ço) \

546 
	`SC
–57, 18, 16, 2, 
no
,Ço) \

547 
	`SC
–58, 18, 16, 3, 
no
,Ço) \

548 
	`SC
–59, 18, 16, 4, 
no
,Ço) \

550 
	`SC
–60, 19, 17, 1, 
no
,Ço) \

551 
	`SC
–61, 19, 17, 2, 
no
,Ço) \

552 
	`SC
–62, 19, 17, 3, 
no
,Ço) \

553 
	`SC
–63, 19, 17, 4, 
no
,Ço) \

555 
	`SC
–64, 20, 18, 1, 
no
,Ço) \

556 
	`SC
–65, 20, 18, 2, 
no
,Ço) \

557 
	`SC
–66, 20, 18, 3, 
no
,Ço) \

558 
	`SC
–67, 20, 18, 4, 
no
,Ço) \

560 
	`SC
–68, 21, 19, 1, 
no
,Ço) \

561 
	`SC
–69, 21, 19, 2, 
no
,Ço) \

562 
	`SC
–70, 21, 19, 3, 
no
,Ço) \

563 
	`SC
–71, 21, 19, 4, 
no
,Ço) \

565 
	`SC
–72, 22, 20, 1, 
no
,Ço) \

566 
	`SC
–73, 22, 20, 2, 
no
,Ço) \

567 
	`SC
–74, 22, 20, 3, 
no
,Ço) \

568 
	`SC
–75, 22, 20, 4, 
no
,Ço) \

570 
	`SC
–76, 23, 21, 1, 
no
,Ço) \

571 
	`SC
–77, 23, 21, 2, 
no
,Ço) \

572 
	`SC
–78, 23, 21, 3, 
no
,Ço) \

573 
	`SC
–79, 23, 21, 4, 
no
,Ço) \

575 
	`SC
–80, 24, 22, 1, 
no
,Ço) \

576 
	`SC
–81, 24, 22, 2, 
no
,Ço) \

577 
	`SC
–82, 24, 22, 3, 
no
,Ço) \

578 
	`SC
–83, 24, 22, 4, 
no
,Ço) \

580 
	`SC
–84, 25, 23, 1, 
no
,Ço) \

581 
	`SC
–85, 25, 23, 2, 
no
,Ço) \

582 
	`SC
–86, 25, 23, 3, 
no
,Ço) \

583 
	`SC
–87, 25, 23, 4, 
no
,Ço) \

585 
	`SC
–88, 26, 24, 1, 
no
,Ço) \

586 
	`SC
–89, 26, 24, 2, 
no
,Ço) \

587 
	`SC
–90, 26, 24, 3, 
no
,Ço) \

588 
	`SC
–91, 26, 24, 4, 
no
,Ço) \

590 
	`SC
–92, 27, 25, 1, 
no
,Ço) \

591 
	`SC
–93, 27, 25, 2, 
no
,Ço) \

592 
	`SC
–94, 27, 25, 3, 
no
,Ço) \

593 
	`SC
–95, 27, 25, 4, 
no
,Ço) \

595 
	`SC
–96, 28, 26, 1, 
no
,Ço) \

596 
	`SC
–97, 28, 26, 2, 
no
,Ço) \

597 
	`SC
–98, 28, 26, 3, 
no
,Ço) \

598 
	`SC
–99, 28, 26, 4, 
no
,Ço) \

600 
	`SC
(100, 29, 27, 1, 
no
,Ço) \

601 
	`SC
(101, 29, 27, 2, 
no
,Ço) \

602 
	`SC
(102, 29, 27, 3, 
no
,Ço) \

603 
	`SC
(103, 29, 27, 4, 
no
,Ço) \

605 
	`SC
(104, 30, 28, 1, 
no
,Ço) \

606 
	`SC
(105, 30, 28, 2, 
no
,Ço) \

607 
	`SC
(106, 30, 28, 3, 
no
,Ço) \

608 
	`SC
(107, 30, 28, 4, 
no
,Ço) \

610 
	`SC
(108, 31, 29, 1, 
no
,Ço) \

611 
	`SC
(109, 31, 29, 2, 
no
,Ço) \

612 
	`SC
(110, 31, 29, 3, 
no
,Ço) \

613 
	`SC
(111, 31, 29, 4, 
no
,Ço) \

615 
	`SC
(112, 32, 30, 1, 
no
,Ço) \

616 
	`SC
(113, 32, 30, 2, 
no
,Ço) \

617 
	`SC
(114, 32, 30, 3, 
no
,Ço) \

618 
	`SC
(115, 32, 30, 4, 
no
,Ço) \

620 
	`SC
(116, 33, 31, 1, 
no
,Ço) \

621 
	`SC
(117, 33, 31, 2, 
no
,Ço) \

622 
	`SC
(118, 33, 31, 3, 
no
,Ço) \

623 
	`SC
(119, 33, 31, 4, 
no
,Ço) \

625 
	`SC
(120, 34, 32, 1, 
no
,Ço) \

626 
	`SC
(121, 34, 32, 2, 
no
,Ço) \

627 
	`SC
(122, 34, 32, 3, 
no
,Ço) \

628 
	`SC
(123, 34, 32, 4, 
no
,Ço) \

630 
	`SC
(124, 35, 33, 1, 
no
,Ço) \

631 
	`SC
(125, 35, 33, 2, 
no
,Ço) \

632 
	`SC
(126, 35, 33, 3, 
no
,Ço) \

633 
	`SC
(127, 35, 33, 4, 
no
,Ço) \

635 
	`SC
(128, 36, 34, 1, 
no
,Ço) \

636 
	`SC
(129, 36, 34, 2, 
no
,Ço) \

637 
	`SC
(130, 36, 34, 3, 
no
,Ço) \

638 
	`SC
(131, 36, 34, 4, 
no
,Ço) \

640 
	`SC
(132, 37, 35, 1, 
no
,Ço) \

641 
	`SC
(133, 37, 35, 2, 
no
,Ço) \

642 
	`SC
(134, 37, 35, 3, 
no
,Ço) \

643 
	`SC
(135, 37, 35, 4, 
no
,Ço) \

645 
	`SC
(136, 38, 36, 1, 
no
,Ço) \

646 
	`SC
(137, 38, 36, 2, 
no
,Ço) \

647 
	`SC
(138, 38, 36, 3, 
no
,Ço) \

648 
	`SC
(139, 38, 36, 4, 
no
,Ço) \

650 
	`SC
(140, 39, 37, 1, 
no
,Ço) \

651 
	`SC
(141, 39, 37, 2, 
no
,Ço) \

652 
	`SC
(142, 39, 37, 3, 
no
,Ço) \

653 
	`SC
(143, 39, 37, 4, 
no
,Ço) \

655 
	`SC
(144, 40, 38, 1, 
no
,Ço) \

656 
	`SC
(145, 40, 38, 2, 
no
,Ço) \

657 
	`SC
(146, 40, 38, 3, 
no
,Ço) \

658 
	`SC
(147, 40, 38, 4, 
no
,Ço) \

660 
	`SC
(148, 41, 39, 1, 
no
,Ço) \

661 
	`SC
(149, 41, 39, 2, 
no
,Ço) \

662 
	`SC
(150, 41, 39, 3, 
no
,Ço) \

663 
	`SC
(151, 41, 39, 4, 
no
,Ço) \

665 
	`SC
(152, 42, 40, 1, 
no
,Ço) \

666 
	`SC
(153, 42, 40, 2, 
no
,Ço) \

667 
	`SC
(154, 42, 40, 3, 
no
,Ço) \

668 
	`SC
(155, 42, 40, 4, 
no
,Ço) \

670 
	`SC
(156, 43, 41, 1, 
no
,Ço) \

671 
	`SC
(157, 43, 41, 2, 
no
,Ço) \

672 
	`SC
(158, 43, 41, 3, 
no
,Ço) \

673 
	`SC
(159, 43, 41, 4, 
no
,Ço) \

675 
	`SC
(160, 44, 42, 1, 
no
,Ço) \

676 
	`SC
(161, 44, 42, 2, 
no
,Ço) \

677 
	`SC
(162, 44, 42, 3, 
no
,Ço) \

678 
	`SC
(163, 44, 42, 4, 
no
,Ço) \

680 
	`SC
(164, 45, 43, 1, 
no
,Ço) \

681 
	`SC
(165, 45, 43, 2, 
no
,Ço) \

682 
	`SC
(166, 45, 43, 3, 
no
,Ço) \

683 
	`SC
(167, 45, 43, 4, 
no
,Ço) \

685 
	`SC
(168, 46, 44, 1, 
no
,Ço) \

686 
	`SC
(169, 46, 44, 2, 
no
,Ço) \

687 
	`SC
(170, 46, 44, 3, 
no
,Ço) \

688 
	`SC
(171, 46, 44, 4, 
no
,Ço) \

690 
	`SC
(172, 47, 45, 1, 
no
,Ço) \

691 
	`SC
(173, 47, 45, 2, 
no
,Ço) \

692 
	`SC
(174, 47, 45, 3, 
no
,Ço) \

693 
	`SC
(175, 47, 45, 4, 
no
,Ço) \

695 
	`SC
(176, 48, 46, 1, 
no
,Ço) \

696 
	`SC
(177, 48, 46, 2, 
no
,Ço) \

697 
	`SC
(178, 48, 46, 3, 
no
,Ço) \

698 
	`SC
(179, 48, 46, 4, 
no
,Ço) \

700 
	`SC
(180, 49, 47, 1, 
no
,Ço) \

701 
	`SC
(181, 49, 47, 2, 
no
,Ço) \

702 
	`SC
(182, 49, 47, 3, 
no
,Ço) \

703 
	`SC
(183, 49, 47, 4, 
no
,Ço) \

705 
	`SC
(184, 50, 48, 1, 
no
,Ço) \

706 
	`SC
(185, 50, 48, 2, 
no
,Ço) \

707 
	`SC
(186, 50, 48, 3, 
no
,Ço) \

708 
	`SC
(187, 50, 48, 4, 
no
,Ço) \

710 
	`SC
(188, 51, 49, 1, 
no
,Ço) \

711 
	`SC
(189, 51, 49, 2, 
no
,Ço) \

712 
	`SC
(190, 51, 49, 3, 
no
,Ço) \

713 
	`SC
(191, 51, 49, 4, 
no
,Ço) \

715 
	`SC
(192, 52, 50, 1, 
no
,Ço) \

716 
	`SC
(193, 52, 50, 2, 
no
,Ço) \

717 
	`SC
(194, 52, 50, 3, 
no
,Ço) \

718 
	`SC
(195, 52, 50, 4, 
no
,Ço) \

720 
	`SC
(196, 53, 51, 1, 
no
,Ço) \

721 
	`SC
(197, 53, 51, 2, 
no
,Ço) \

722 
	`SC
(198, 53, 51, 3, 
no
,Ço) \

723 
	`SC
(199, 53, 51, 4, 
no
,Ço) \

725 
	`SC
(200, 54, 52, 1, 
no
,Ço) \

726 
	`SC
(201, 54, 52, 2, 
no
,Ço) \

727 
	`SC
(202, 54, 52, 3, 
no
,Ço) \

728 
	`SC
(203, 54, 52, 4, 
no
,Ço) \

730 
	`SC
(204, 55, 53, 1, 
no
,Ço) \

731 
	`SC
(205, 55, 53, 2, 
no
,Ço) \

732 
	`SC
(206, 55, 53, 3, 
no
,Ço) \

733 
	`SC
(207, 55, 53, 4, 
no
,Ço) \

735 
	`SC
(208, 56, 54, 1, 
no
,Ço) \

736 
	`SC
(209, 56, 54, 2, 
no
,Ço) \

737 
	`SC
(210, 56, 54, 3, 
no
,Ço) \

738 
	`SC
(211, 56, 54, 4, 
no
,Ço) \

740 
	`SC
(212, 57, 55, 1, 
no
,Ço) \

741 
	`SC
(213, 57, 55, 2, 
no
,Ço) \

742 
	`SC
(214, 57, 55, 3, 
no
,Ço) \

743 
	`SC
(215, 57, 55, 4, 
no
,Ço) \

745 
	`SC
(216, 58, 56, 1, 
no
,Ço) \

746 
	`SC
(217, 58, 56, 2, 
no
,Ço) \

747 
	`SC
(218, 58, 56, 3, 
no
,Ço) \

748 
	`SC
(219, 58, 56, 4, 
no
,Ço) \

750 
	`SC
(220, 59, 57, 1, 
no
,Ço) \

751 
	`SC
(221, 59, 57, 2, 
no
,Ço) \

752 
	`SC
(222, 59, 57, 3, 
no
,Ço) \

753 
	`SC
(223, 59, 57, 4, 
no
,Ço) \

755 
	`SC
(224, 60, 58, 1, 
no
,Ço) \

756 
	`SC
(225, 60, 58, 2, 
no
,Ço) \

757 
	`SC
(226, 60, 58, 3, 
no
,Ço) \

758 
	`SC
(227, 60, 58, 4, 
no
,Ço) \

760 
	`SC
(228, 61, 59, 1, 
no
,Ço) \

761 
	`SC
(229, 61, 59, 2, 
no
,Ço) \

762 
	`SC
(230, 61, 59, 3, 
no
,Ço) \

763 
	`SC
(231, 61, 59, 4, 
no
,Ço) \

765 
	`SC
(232, 62, 60, 1, 
no
,Ço) \

766 
	`SC
(233, 62, 60, 2, 
no
,Ço) \

767 
	`SC
(234, 62, 60, 3, 
no
,Ço) \

768 

	)

769 
	#SIZE_CLASSES_DEFINED


	)

770 
	#NTBINS
 0

	)

771 
	#NLBINS
 32

	)

772 
	#NBINS
 39

	)

773 
	#NSIZES
 235

	)

774 
	#LG_TINY_MAXCLASS
 "NA"

	)

775 
	#LOOKUP_MAXCLASS
 ((((
size_t
)1Ë<< 11Ë+ (((size_t)4Ë<< 9))

	)

776 
	#SMALL_MAXCLASS
 ((((
size_t
)1Ë<< 13Ë+ (((size_t)3Ë<< 11))

	)

777 
	#LG_LARGE_MINCLASS
 14

	)

778 
	#HUGE_MAXCLASS
 ((((
size_t
)1Ë<< 62Ë+ (((size_t)3Ë<< 60))

	)

781 #i‡(
LG_SIZEOF_PTR
 =3 && 
LG_TINY_MIN
 =3 && 
LG_QUANTUM
 =4 && 
LG_PAGE
 == 12)

782 
	#SIZE_CLASSES
 \

784 
	`SC
–0, 3, 3, 0, 
yes
, 3) \

786 
	`SC
–1, 3, 3, 1, 
yes
, 3) \

787 
	`SC
–2, 4, 4, 1, 
yes
, 4) \

788 
	`SC
–3, 4, 4, 2, 
yes
, 4) \

789 
	`SC
–4, 4, 4, 3, 
yes
, 4) \

791 
	`SC
–5, 6, 4, 1, 
yes
, 4) \

792 
	`SC
–6, 6, 4, 2, 
yes
, 4) \

793 
	`SC
–7, 6, 4, 3, 
yes
, 4) \

794 
	`SC
–8, 6, 4, 4, 
yes
, 4) \

796 
	`SC
–9, 7, 5, 1, 
yes
, 5) \

797 
	`SC
–10, 7, 5, 2, 
yes
, 5) \

798 
	`SC
–11, 7, 5, 3, 
yes
, 5) \

799 
	`SC
–12, 7, 5, 4, 
yes
, 5) \

801 
	`SC
–13, 8, 6, 1, 
yes
, 6) \

802 
	`SC
–14, 8, 6, 2, 
yes
, 6) \

803 
	`SC
–15, 8, 6, 3, 
yes
, 6) \

804 
	`SC
–16, 8, 6, 4, 
yes
, 6) \

806 
	`SC
–17, 9, 7, 1, 
yes
, 7) \

807 
	`SC
–18, 9, 7, 2, 
yes
, 7) \

808 
	`SC
–19, 9, 7, 3, 
yes
, 7) \

809 
	`SC
–20, 9, 7, 4, 
yes
, 7) \

811 
	`SC
–21, 10, 8, 1, 
yes
, 8) \

812 
	`SC
–22, 10, 8, 2, 
yes
, 8) \

813 
	`SC
–23, 10, 8, 3, 
yes
, 8) \

814 
	`SC
–24, 10, 8, 4, 
yes
, 8) \

816 
	`SC
–25, 11, 9, 1, 
yes
, 9) \

817 
	`SC
–26, 11, 9, 2, 
yes
, 9) \

818 
	`SC
–27, 11, 9, 3, 
yes
, 9) \

819 
	`SC
–28, 11, 9, 4, 
yes
, 9) \

821 
	`SC
–29, 12, 10, 1, 
yes
, 
no
) \

822 
	`SC
–30, 12, 10, 2, 
yes
, 
no
) \

823 
	`SC
–31, 12, 10, 3, 
yes
, 
no
) \

824 
	`SC
–32, 12, 10, 4, 
yes
, 
no
) \

826 
	`SC
–33, 13, 11, 1, 
yes
, 
no
) \

827 
	`SC
–34, 13, 11, 2, 
yes
, 
no
) \

828 
	`SC
–35, 13, 11, 3, 
yes
, 
no
) \

829 
	`SC
–36, 13, 11, 4, 
no
,Ço) \

831 
	`SC
–37, 14, 12, 1, 
no
,Ço) \

832 
	`SC
–38, 14, 12, 2, 
no
,Ço) \

833 
	`SC
–39, 14, 12, 3, 
no
,Ço) \

834 
	`SC
–40, 14, 12, 4, 
no
,Ço) \

836 
	`SC
–41, 15, 13, 1, 
no
,Ço) \

837 
	`SC
–42, 15, 13, 2, 
no
,Ço) \

838 
	`SC
–43, 15, 13, 3, 
no
,Ço) \

839 
	`SC
–44, 15, 13, 4, 
no
,Ço) \

841 
	`SC
–45, 16, 14, 1, 
no
,Ço) \

842 
	`SC
–46, 16, 14, 2, 
no
,Ço) \

843 
	`SC
–47, 16, 14, 3, 
no
,Ço) \

844 
	`SC
–48, 16, 14, 4, 
no
,Ço) \

846 
	`SC
–49, 17, 15, 1, 
no
,Ço) \

847 
	`SC
–50, 17, 15, 2, 
no
,Ço) \

848 
	`SC
–51, 17, 15, 3, 
no
,Ço) \

849 
	`SC
–52, 17, 15, 4, 
no
,Ço) \

851 
	`SC
–53, 18, 16, 1, 
no
,Ço) \

852 
	`SC
–54, 18, 16, 2, 
no
,Ço) \

853 
	`SC
–55, 18, 16, 3, 
no
,Ço) \

854 
	`SC
–56, 18, 16, 4, 
no
,Ço) \

856 
	`SC
–57, 19, 17, 1, 
no
,Ço) \

857 
	`SC
–58, 19, 17, 2, 
no
,Ço) \

858 
	`SC
–59, 19, 17, 3, 
no
,Ço) \

859 
	`SC
–60, 19, 17, 4, 
no
,Ço) \

861 
	`SC
–61, 20, 18, 1, 
no
,Ço) \

862 
	`SC
–62, 20, 18, 2, 
no
,Ço) \

863 
	`SC
–63, 20, 18, 3, 
no
,Ço) \

864 
	`SC
–64, 20, 18, 4, 
no
,Ço) \

866 
	`SC
–65, 21, 19, 1, 
no
,Ço) \

867 
	`SC
–66, 21, 19, 2, 
no
,Ço) \

868 
	`SC
–67, 21, 19, 3, 
no
,Ço) \

869 
	`SC
–68, 21, 19, 4, 
no
,Ço) \

871 
	`SC
–69, 22, 20, 1, 
no
,Ço) \

872 
	`SC
–70, 22, 20, 2, 
no
,Ço) \

873 
	`SC
–71, 22, 20, 3, 
no
,Ço) \

874 
	`SC
–72, 22, 20, 4, 
no
,Ço) \

876 
	`SC
–73, 23, 21, 1, 
no
,Ço) \

877 
	`SC
–74, 23, 21, 2, 
no
,Ço) \

878 
	`SC
–75, 23, 21, 3, 
no
,Ço) \

879 
	`SC
–76, 23, 21, 4, 
no
,Ço) \

881 
	`SC
–77, 24, 22, 1, 
no
,Ço) \

882 
	`SC
–78, 24, 22, 2, 
no
,Ço) \

883 
	`SC
–79, 24, 22, 3, 
no
,Ço) \

884 
	`SC
–80, 24, 22, 4, 
no
,Ço) \

886 
	`SC
–81, 25, 23, 1, 
no
,Ço) \

887 
	`SC
–82, 25, 23, 2, 
no
,Ço) \

888 
	`SC
–83, 25, 23, 3, 
no
,Ço) \

889 
	`SC
–84, 25, 23, 4, 
no
,Ço) \

891 
	`SC
–85, 26, 24, 1, 
no
,Ço) \

892 
	`SC
–86, 26, 24, 2, 
no
,Ço) \

893 
	`SC
–87, 26, 24, 3, 
no
,Ço) \

894 
	`SC
–88, 26, 24, 4, 
no
,Ço) \

896 
	`SC
–89, 27, 25, 1, 
no
,Ço) \

897 
	`SC
–90, 27, 25, 2, 
no
,Ço) \

898 
	`SC
–91, 27, 25, 3, 
no
,Ço) \

899 
	`SC
–92, 27, 25, 4, 
no
,Ço) \

901 
	`SC
–93, 28, 26, 1, 
no
,Ço) \

902 
	`SC
–94, 28, 26, 2, 
no
,Ço) \

903 
	`SC
–95, 28, 26, 3, 
no
,Ço) \

904 
	`SC
–96, 28, 26, 4, 
no
,Ço) \

906 
	`SC
–97, 29, 27, 1, 
no
,Ço) \

907 
	`SC
–98, 29, 27, 2, 
no
,Ço) \

908 
	`SC
–99, 29, 27, 3, 
no
,Ço) \

909 
	`SC
(100, 29, 27, 4, 
no
,Ço) \

911 
	`SC
(101, 30, 28, 1, 
no
,Ço) \

912 
	`SC
(102, 30, 28, 2, 
no
,Ço) \

913 
	`SC
(103, 30, 28, 3, 
no
,Ço) \

914 
	`SC
(104, 30, 28, 4, 
no
,Ço) \

916 
	`SC
(105, 31, 29, 1, 
no
,Ço) \

917 
	`SC
(106, 31, 29, 2, 
no
,Ço) \

918 
	`SC
(107, 31, 29, 3, 
no
,Ço) \

919 
	`SC
(108, 31, 29, 4, 
no
,Ço) \

921 
	`SC
(109, 32, 30, 1, 
no
,Ço) \

922 
	`SC
(110, 32, 30, 2, 
no
,Ço) \

923 
	`SC
(111, 32, 30, 3, 
no
,Ço) \

924 
	`SC
(112, 32, 30, 4, 
no
,Ço) \

926 
	`SC
(113, 33, 31, 1, 
no
,Ço) \

927 
	`SC
(114, 33, 31, 2, 
no
,Ço) \

928 
	`SC
(115, 33, 31, 3, 
no
,Ço) \

929 
	`SC
(116, 33, 31, 4, 
no
,Ço) \

931 
	`SC
(117, 34, 32, 1, 
no
,Ço) \

932 
	`SC
(118, 34, 32, 2, 
no
,Ço) \

933 
	`SC
(119, 34, 32, 3, 
no
,Ço) \

934 
	`SC
(120, 34, 32, 4, 
no
,Ço) \

936 
	`SC
(121, 35, 33, 1, 
no
,Ço) \

937 
	`SC
(122, 35, 33, 2, 
no
,Ço) \

938 
	`SC
(123, 35, 33, 3, 
no
,Ço) \

939 
	`SC
(124, 35, 33, 4, 
no
,Ço) \

941 
	`SC
(125, 36, 34, 1, 
no
,Ço) \

942 
	`SC
(126, 36, 34, 2, 
no
,Ço) \

943 
	`SC
(127, 36, 34, 3, 
no
,Ço) \

944 
	`SC
(128, 36, 34, 4, 
no
,Ço) \

946 
	`SC
(129, 37, 35, 1, 
no
,Ço) \

947 
	`SC
(130, 37, 35, 2, 
no
,Ço) \

948 
	`SC
(131, 37, 35, 3, 
no
,Ço) \

949 
	`SC
(132, 37, 35, 4, 
no
,Ço) \

951 
	`SC
(133, 38, 36, 1, 
no
,Ço) \

952 
	`SC
(134, 38, 36, 2, 
no
,Ço) \

953 
	`SC
(135, 38, 36, 3, 
no
,Ço) \

954 
	`SC
(136, 38, 36, 4, 
no
,Ço) \

956 
	`SC
(137, 39, 37, 1, 
no
,Ço) \

957 
	`SC
(138, 39, 37, 2, 
no
,Ço) \

958 
	`SC
(139, 39, 37, 3, 
no
,Ço) \

959 
	`SC
(140, 39, 37, 4, 
no
,Ço) \

961 
	`SC
(141, 40, 38, 1, 
no
,Ço) \

962 
	`SC
(142, 40, 38, 2, 
no
,Ço) \

963 
	`SC
(143, 40, 38, 3, 
no
,Ço) \

964 
	`SC
(144, 40, 38, 4, 
no
,Ço) \

966 
	`SC
(145, 41, 39, 1, 
no
,Ço) \

967 
	`SC
(146, 41, 39, 2, 
no
,Ço) \

968 
	`SC
(147, 41, 39, 3, 
no
,Ço) \

969 
	`SC
(148, 41, 39, 4, 
no
,Ço) \

971 
	`SC
(149, 42, 40, 1, 
no
,Ço) \

972 
	`SC
(150, 42, 40, 2, 
no
,Ço) \

973 
	`SC
(151, 42, 40, 3, 
no
,Ço) \

974 
	`SC
(152, 42, 40, 4, 
no
,Ço) \

976 
	`SC
(153, 43, 41, 1, 
no
,Ço) \

977 
	`SC
(154, 43, 41, 2, 
no
,Ço) \

978 
	`SC
(155, 43, 41, 3, 
no
,Ço) \

979 
	`SC
(156, 43, 41, 4, 
no
,Ço) \

981 
	`SC
(157, 44, 42, 1, 
no
,Ço) \

982 
	`SC
(158, 44, 42, 2, 
no
,Ço) \

983 
	`SC
(159, 44, 42, 3, 
no
,Ço) \

984 
	`SC
(160, 44, 42, 4, 
no
,Ço) \

986 
	`SC
(161, 45, 43, 1, 
no
,Ço) \

987 
	`SC
(162, 45, 43, 2, 
no
,Ço) \

988 
	`SC
(163, 45, 43, 3, 
no
,Ço) \

989 
	`SC
(164, 45, 43, 4, 
no
,Ço) \

991 
	`SC
(165, 46, 44, 1, 
no
,Ço) \

992 
	`SC
(166, 46, 44, 2, 
no
,Ço) \

993 
	`SC
(167, 46, 44, 3, 
no
,Ço) \

994 
	`SC
(168, 46, 44, 4, 
no
,Ço) \

996 
	`SC
(169, 47, 45, 1, 
no
,Ço) \

997 
	`SC
(170, 47, 45, 2, 
no
,Ço) \

998 
	`SC
(171, 47, 45, 3, 
no
,Ço) \

999 
	`SC
(172, 47, 45, 4, 
no
,Ço) \

1001 
	`SC
(173, 48, 46, 1, 
no
,Ço) \

1002 
	`SC
(174, 48, 46, 2, 
no
,Ço) \

1003 
	`SC
(175, 48, 46, 3, 
no
,Ço) \

1004 
	`SC
(176, 48, 46, 4, 
no
,Ço) \

1006 
	`SC
(177, 49, 47, 1, 
no
,Ço) \

1007 
	`SC
(178, 49, 47, 2, 
no
,Ço) \

1008 
	`SC
(179, 49, 47, 3, 
no
,Ço) \

1009 
	`SC
(180, 49, 47, 4, 
no
,Ço) \

1011 
	`SC
(181, 50, 48, 1, 
no
,Ço) \

1012 
	`SC
(182, 50, 48, 2, 
no
,Ço) \

1013 
	`SC
(183, 50, 48, 3, 
no
,Ço) \

1014 
	`SC
(184, 50, 48, 4, 
no
,Ço) \

1016 
	`SC
(185, 51, 49, 1, 
no
,Ço) \

1017 
	`SC
(186, 51, 49, 2, 
no
,Ço) \

1018 
	`SC
(187, 51, 49, 3, 
no
,Ço) \

1019 
	`SC
(188, 51, 49, 4, 
no
,Ço) \

1021 
	`SC
(189, 52, 50, 1, 
no
,Ço) \

1022 
	`SC
(190, 52, 50, 2, 
no
,Ço) \

1023 
	`SC
(191, 52, 50, 3, 
no
,Ço) \

1024 
	`SC
(192, 52, 50, 4, 
no
,Ço) \

1026 
	`SC
(193, 53, 51, 1, 
no
,Ço) \

1027 
	`SC
(194, 53, 51, 2, 
no
,Ço) \

1028 
	`SC
(195, 53, 51, 3, 
no
,Ço) \

1029 
	`SC
(196, 53, 51, 4, 
no
,Ço) \

1031 
	`SC
(197, 54, 52, 1, 
no
,Ço) \

1032 
	`SC
(198, 54, 52, 2, 
no
,Ço) \

1033 
	`SC
(199, 54, 52, 3, 
no
,Ço) \

1034 
	`SC
(200, 54, 52, 4, 
no
,Ço) \

1036 
	`SC
(201, 55, 53, 1, 
no
,Ço) \

1037 
	`SC
(202, 55, 53, 2, 
no
,Ço) \

1038 
	`SC
(203, 55, 53, 3, 
no
,Ço) \

1039 
	`SC
(204, 55, 53, 4, 
no
,Ço) \

1041 
	`SC
(205, 56, 54, 1, 
no
,Ço) \

1042 
	`SC
(206, 56, 54, 2, 
no
,Ço) \

1043 
	`SC
(207, 56, 54, 3, 
no
,Ço) \

1044 
	`SC
(208, 56, 54, 4, 
no
,Ço) \

1046 
	`SC
(209, 57, 55, 1, 
no
,Ço) \

1047 
	`SC
(210, 57, 55, 2, 
no
,Ço) \

1048 
	`SC
(211, 57, 55, 3, 
no
,Ço) \

1049 
	`SC
(212, 57, 55, 4, 
no
,Ço) \

1051 
	`SC
(213, 58, 56, 1, 
no
,Ço) \

1052 
	`SC
(214, 58, 56, 2, 
no
,Ço) \

1053 
	`SC
(215, 58, 56, 3, 
no
,Ço) \

1054 
	`SC
(216, 58, 56, 4, 
no
,Ço) \

1056 
	`SC
(217, 59, 57, 1, 
no
,Ço) \

1057 
	`SC
(218, 59, 57, 2, 
no
,Ço) \

1058 
	`SC
(219, 59, 57, 3, 
no
,Ço) \

1059 
	`SC
(220, 59, 57, 4, 
no
,Ço) \

1061 
	`SC
(221, 60, 58, 1, 
no
,Ço) \

1062 
	`SC
(222, 60, 58, 2, 
no
,Ço) \

1063 
	`SC
(223, 60, 58, 3, 
no
,Ço) \

1064 
	`SC
(224, 60, 58, 4, 
no
,Ço) \

1066 
	`SC
(225, 61, 59, 1, 
no
,Ço) \

1067 
	`SC
(226, 61, 59, 2, 
no
,Ço) \

1068 
	`SC
(227, 61, 59, 3, 
no
,Ço) \

1069 
	`SC
(228, 61, 59, 4, 
no
,Ço) \

1071 
	`SC
(229, 62, 60, 1, 
no
,Ço) \

1072 
	`SC
(230, 62, 60, 2, 
no
,Ço) \

1073 
	`SC
(231, 62, 60, 3, 
no
,Ço) \

1074 

	)

1075 
	#SIZE_CLASSES_DEFINED


	)

1076 
	#NTBINS
 1

	)

1077 
	#NLBINS
 29

	)

1078 
	#NBINS
 36

	)

1079 
	#NSIZES
 232

	)

1080 
	#LG_TINY_MAXCLASS
 3

	)

1081 
	#LOOKUP_MAXCLASS
 ((((
size_t
)1Ë<< 11Ë+ (((size_t)4Ë<< 9))

	)

1082 
	#SMALL_MAXCLASS
 ((((
size_t
)1Ë<< 13Ë+ (((size_t)3Ë<< 11))

	)

1083 
	#LG_LARGE_MINCLASS
 14

	)

1084 
	#HUGE_MAXCLASS
 ((((
size_t
)1Ë<< 62Ë+ (((size_t)3Ë<< 60))

	)

1087 #i‡(
LG_SIZEOF_PTR
 =3 && 
LG_TINY_MIN
 =4 && 
LG_QUANTUM
 =4 && 
LG_PAGE
 == 12)

1088 
	#SIZE_CLASSES
 \

1090 
	`SC
–0, 4, 4, 0, 
yes
, 4) \

1091 
	`SC
–1, 4, 4, 1, 
yes
, 4) \

1092 
	`SC
–2, 4, 4, 2, 
yes
, 4) \

1093 
	`SC
–3, 4, 4, 3, 
yes
, 4) \

1095 
	`SC
–4, 6, 4, 1, 
yes
, 4) \

1096 
	`SC
–5, 6, 4, 2, 
yes
, 4) \

1097 
	`SC
–6, 6, 4, 3, 
yes
, 4) \

1098 
	`SC
–7, 6, 4, 4, 
yes
, 4) \

1100 
	`SC
–8, 7, 5, 1, 
yes
, 5) \

1101 
	`SC
–9, 7, 5, 2, 
yes
, 5) \

1102 
	`SC
–10, 7, 5, 3, 
yes
, 5) \

1103 
	`SC
–11, 7, 5, 4, 
yes
, 5) \

1105 
	`SC
–12, 8, 6, 1, 
yes
, 6) \

1106 
	`SC
–13, 8, 6, 2, 
yes
, 6) \

1107 
	`SC
–14, 8, 6, 3, 
yes
, 6) \

1108 
	`SC
–15, 8, 6, 4, 
yes
, 6) \

1110 
	`SC
–16, 9, 7, 1, 
yes
, 7) \

1111 
	`SC
–17, 9, 7, 2, 
yes
, 7) \

1112 
	`SC
–18, 9, 7, 3, 
yes
, 7) \

1113 
	`SC
–19, 9, 7, 4, 
yes
, 7) \

1115 
	`SC
–20, 10, 8, 1, 
yes
, 8) \

1116 
	`SC
–21, 10, 8, 2, 
yes
, 8) \

1117 
	`SC
–22, 10, 8, 3, 
yes
, 8) \

1118 
	`SC
–23, 10, 8, 4, 
yes
, 8) \

1120 
	`SC
–24, 11, 9, 1, 
yes
, 9) \

1121 
	`SC
–25, 11, 9, 2, 
yes
, 9) \

1122 
	`SC
–26, 11, 9, 3, 
yes
, 9) \

1123 
	`SC
–27, 11, 9, 4, 
yes
, 9) \

1125 
	`SC
–28, 12, 10, 1, 
yes
, 
no
) \

1126 
	`SC
–29, 12, 10, 2, 
yes
, 
no
) \

1127 
	`SC
–30, 12, 10, 3, 
yes
, 
no
) \

1128 
	`SC
–31, 12, 10, 4, 
yes
, 
no
) \

1130 
	`SC
–32, 13, 11, 1, 
yes
, 
no
) \

1131 
	`SC
–33, 13, 11, 2, 
yes
, 
no
) \

1132 
	`SC
–34, 13, 11, 3, 
yes
, 
no
) \

1133 
	`SC
–35, 13, 11, 4, 
no
,Ço) \

1135 
	`SC
–36, 14, 12, 1, 
no
,Ço) \

1136 
	`SC
–37, 14, 12, 2, 
no
,Ço) \

1137 
	`SC
–38, 14, 12, 3, 
no
,Ço) \

1138 
	`SC
–39, 14, 12, 4, 
no
,Ço) \

1140 
	`SC
–40, 15, 13, 1, 
no
,Ço) \

1141 
	`SC
–41, 15, 13, 2, 
no
,Ço) \

1142 
	`SC
–42, 15, 13, 3, 
no
,Ço) \

1143 
	`SC
–43, 15, 13, 4, 
no
,Ço) \

1145 
	`SC
–44, 16, 14, 1, 
no
,Ço) \

1146 
	`SC
–45, 16, 14, 2, 
no
,Ço) \

1147 
	`SC
–46, 16, 14, 3, 
no
,Ço) \

1148 
	`SC
–47, 16, 14, 4, 
no
,Ço) \

1150 
	`SC
–48, 17, 15, 1, 
no
,Ço) \

1151 
	`SC
–49, 17, 15, 2, 
no
,Ço) \

1152 
	`SC
–50, 17, 15, 3, 
no
,Ço) \

1153 
	`SC
–51, 17, 15, 4, 
no
,Ço) \

1155 
	`SC
–52, 18, 16, 1, 
no
,Ço) \

1156 
	`SC
–53, 18, 16, 2, 
no
,Ço) \

1157 
	`SC
–54, 18, 16, 3, 
no
,Ço) \

1158 
	`SC
–55, 18, 16, 4, 
no
,Ço) \

1160 
	`SC
–56, 19, 17, 1, 
no
,Ço) \

1161 
	`SC
–57, 19, 17, 2, 
no
,Ço) \

1162 
	`SC
–58, 19, 17, 3, 
no
,Ço) \

1163 
	`SC
–59, 19, 17, 4, 
no
,Ço) \

1165 
	`SC
–60, 20, 18, 1, 
no
,Ço) \

1166 
	`SC
–61, 20, 18, 2, 
no
,Ço) \

1167 
	`SC
–62, 20, 18, 3, 
no
,Ço) \

1168 
	`SC
–63, 20, 18, 4, 
no
,Ço) \

1170 
	`SC
–64, 21, 19, 1, 
no
,Ço) \

1171 
	`SC
–65, 21, 19, 2, 
no
,Ço) \

1172 
	`SC
–66, 21, 19, 3, 
no
,Ço) \

1173 
	`SC
–67, 21, 19, 4, 
no
,Ço) \

1175 
	`SC
–68, 22, 20, 1, 
no
,Ço) \

1176 
	`SC
–69, 22, 20, 2, 
no
,Ço) \

1177 
	`SC
–70, 22, 20, 3, 
no
,Ço) \

1178 
	`SC
–71, 22, 20, 4, 
no
,Ço) \

1180 
	`SC
–72, 23, 21, 1, 
no
,Ço) \

1181 
	`SC
–73, 23, 21, 2, 
no
,Ço) \

1182 
	`SC
–74, 23, 21, 3, 
no
,Ço) \

1183 
	`SC
–75, 23, 21, 4, 
no
,Ço) \

1185 
	`SC
–76, 24, 22, 1, 
no
,Ço) \

1186 
	`SC
–77, 24, 22, 2, 
no
,Ço) \

1187 
	`SC
–78, 24, 22, 3, 
no
,Ço) \

1188 
	`SC
–79, 24, 22, 4, 
no
,Ço) \

1190 
	`SC
–80, 25, 23, 1, 
no
,Ço) \

1191 
	`SC
–81, 25, 23, 2, 
no
,Ço) \

1192 
	`SC
–82, 25, 23, 3, 
no
,Ço) \

1193 
	`SC
–83, 25, 23, 4, 
no
,Ço) \

1195 
	`SC
–84, 26, 24, 1, 
no
,Ço) \

1196 
	`SC
–85, 26, 24, 2, 
no
,Ço) \

1197 
	`SC
–86, 26, 24, 3, 
no
,Ço) \

1198 
	`SC
–87, 26, 24, 4, 
no
,Ço) \

1200 
	`SC
–88, 27, 25, 1, 
no
,Ço) \

1201 
	`SC
–89, 27, 25, 2, 
no
,Ço) \

1202 
	`SC
–90, 27, 25, 3, 
no
,Ço) \

1203 
	`SC
–91, 27, 25, 4, 
no
,Ço) \

1205 
	`SC
–92, 28, 26, 1, 
no
,Ço) \

1206 
	`SC
–93, 28, 26, 2, 
no
,Ço) \

1207 
	`SC
–94, 28, 26, 3, 
no
,Ço) \

1208 
	`SC
–95, 28, 26, 4, 
no
,Ço) \

1210 
	`SC
–96, 29, 27, 1, 
no
,Ço) \

1211 
	`SC
–97, 29, 27, 2, 
no
,Ço) \

1212 
	`SC
–98, 29, 27, 3, 
no
,Ço) \

1213 
	`SC
–99, 29, 27, 4, 
no
,Ço) \

1215 
	`SC
(100, 30, 28, 1, 
no
,Ço) \

1216 
	`SC
(101, 30, 28, 2, 
no
,Ço) \

1217 
	`SC
(102, 30, 28, 3, 
no
,Ço) \

1218 
	`SC
(103, 30, 28, 4, 
no
,Ço) \

1220 
	`SC
(104, 31, 29, 1, 
no
,Ço) \

1221 
	`SC
(105, 31, 29, 2, 
no
,Ço) \

1222 
	`SC
(106, 31, 29, 3, 
no
,Ço) \

1223 
	`SC
(107, 31, 29, 4, 
no
,Ço) \

1225 
	`SC
(108, 32, 30, 1, 
no
,Ço) \

1226 
	`SC
(109, 32, 30, 2, 
no
,Ço) \

1227 
	`SC
(110, 32, 30, 3, 
no
,Ço) \

1228 
	`SC
(111, 32, 30, 4, 
no
,Ço) \

1230 
	`SC
(112, 33, 31, 1, 
no
,Ço) \

1231 
	`SC
(113, 33, 31, 2, 
no
,Ço) \

1232 
	`SC
(114, 33, 31, 3, 
no
,Ço) \

1233 
	`SC
(115, 33, 31, 4, 
no
,Ço) \

1235 
	`SC
(116, 34, 32, 1, 
no
,Ço) \

1236 
	`SC
(117, 34, 32, 2, 
no
,Ço) \

1237 
	`SC
(118, 34, 32, 3, 
no
,Ço) \

1238 
	`SC
(119, 34, 32, 4, 
no
,Ço) \

1240 
	`SC
(120, 35, 33, 1, 
no
,Ço) \

1241 
	`SC
(121, 35, 33, 2, 
no
,Ço) \

1242 
	`SC
(122, 35, 33, 3, 
no
,Ço) \

1243 
	`SC
(123, 35, 33, 4, 
no
,Ço) \

1245 
	`SC
(124, 36, 34, 1, 
no
,Ço) \

1246 
	`SC
(125, 36, 34, 2, 
no
,Ço) \

1247 
	`SC
(126, 36, 34, 3, 
no
,Ço) \

1248 
	`SC
(127, 36, 34, 4, 
no
,Ço) \

1250 
	`SC
(128, 37, 35, 1, 
no
,Ço) \

1251 
	`SC
(129, 37, 35, 2, 
no
,Ço) \

1252 
	`SC
(130, 37, 35, 3, 
no
,Ço) \

1253 
	`SC
(131, 37, 35, 4, 
no
,Ço) \

1255 
	`SC
(132, 38, 36, 1, 
no
,Ço) \

1256 
	`SC
(133, 38, 36, 2, 
no
,Ço) \

1257 
	`SC
(134, 38, 36, 3, 
no
,Ço) \

1258 
	`SC
(135, 38, 36, 4, 
no
,Ço) \

1260 
	`SC
(136, 39, 37, 1, 
no
,Ço) \

1261 
	`SC
(137, 39, 37, 2, 
no
,Ço) \

1262 
	`SC
(138, 39, 37, 3, 
no
,Ço) \

1263 
	`SC
(139, 39, 37, 4, 
no
,Ço) \

1265 
	`SC
(140, 40, 38, 1, 
no
,Ço) \

1266 
	`SC
(141, 40, 38, 2, 
no
,Ço) \

1267 
	`SC
(142, 40, 38, 3, 
no
,Ço) \

1268 
	`SC
(143, 40, 38, 4, 
no
,Ço) \

1270 
	`SC
(144, 41, 39, 1, 
no
,Ço) \

1271 
	`SC
(145, 41, 39, 2, 
no
,Ço) \

1272 
	`SC
(146, 41, 39, 3, 
no
,Ço) \

1273 
	`SC
(147, 41, 39, 4, 
no
,Ço) \

1275 
	`SC
(148, 42, 40, 1, 
no
,Ço) \

1276 
	`SC
(149, 42, 40, 2, 
no
,Ço) \

1277 
	`SC
(150, 42, 40, 3, 
no
,Ço) \

1278 
	`SC
(151, 42, 40, 4, 
no
,Ço) \

1280 
	`SC
(152, 43, 41, 1, 
no
,Ço) \

1281 
	`SC
(153, 43, 41, 2, 
no
,Ço) \

1282 
	`SC
(154, 43, 41, 3, 
no
,Ço) \

1283 
	`SC
(155, 43, 41, 4, 
no
,Ço) \

1285 
	`SC
(156, 44, 42, 1, 
no
,Ço) \

1286 
	`SC
(157, 44, 42, 2, 
no
,Ço) \

1287 
	`SC
(158, 44, 42, 3, 
no
,Ço) \

1288 
	`SC
(159, 44, 42, 4, 
no
,Ço) \

1290 
	`SC
(160, 45, 43, 1, 
no
,Ço) \

1291 
	`SC
(161, 45, 43, 2, 
no
,Ço) \

1292 
	`SC
(162, 45, 43, 3, 
no
,Ço) \

1293 
	`SC
(163, 45, 43, 4, 
no
,Ço) \

1295 
	`SC
(164, 46, 44, 1, 
no
,Ço) \

1296 
	`SC
(165, 46, 44, 2, 
no
,Ço) \

1297 
	`SC
(166, 46, 44, 3, 
no
,Ço) \

1298 
	`SC
(167, 46, 44, 4, 
no
,Ço) \

1300 
	`SC
(168, 47, 45, 1, 
no
,Ço) \

1301 
	`SC
(169, 47, 45, 2, 
no
,Ço) \

1302 
	`SC
(170, 47, 45, 3, 
no
,Ço) \

1303 
	`SC
(171, 47, 45, 4, 
no
,Ço) \

1305 
	`SC
(172, 48, 46, 1, 
no
,Ço) \

1306 
	`SC
(173, 48, 46, 2, 
no
,Ço) \

1307 
	`SC
(174, 48, 46, 3, 
no
,Ço) \

1308 
	`SC
(175, 48, 46, 4, 
no
,Ço) \

1310 
	`SC
(176, 49, 47, 1, 
no
,Ço) \

1311 
	`SC
(177, 49, 47, 2, 
no
,Ço) \

1312 
	`SC
(178, 49, 47, 3, 
no
,Ço) \

1313 
	`SC
(179, 49, 47, 4, 
no
,Ço) \

1315 
	`SC
(180, 50, 48, 1, 
no
,Ço) \

1316 
	`SC
(181, 50, 48, 2, 
no
,Ço) \

1317 
	`SC
(182, 50, 48, 3, 
no
,Ço) \

1318 
	`SC
(183, 50, 48, 4, 
no
,Ço) \

1320 
	`SC
(184, 51, 49, 1, 
no
,Ço) \

1321 
	`SC
(185, 51, 49, 2, 
no
,Ço) \

1322 
	`SC
(186, 51, 49, 3, 
no
,Ço) \

1323 
	`SC
(187, 51, 49, 4, 
no
,Ço) \

1325 
	`SC
(188, 52, 50, 1, 
no
,Ço) \

1326 
	`SC
(189, 52, 50, 2, 
no
,Ço) \

1327 
	`SC
(190, 52, 50, 3, 
no
,Ço) \

1328 
	`SC
(191, 52, 50, 4, 
no
,Ço) \

1330 
	`SC
(192, 53, 51, 1, 
no
,Ço) \

1331 
	`SC
(193, 53, 51, 2, 
no
,Ço) \

1332 
	`SC
(194, 53, 51, 3, 
no
,Ço) \

1333 
	`SC
(195, 53, 51, 4, 
no
,Ço) \

1335 
	`SC
(196, 54, 52, 1, 
no
,Ço) \

1336 
	`SC
(197, 54, 52, 2, 
no
,Ço) \

1337 
	`SC
(198, 54, 52, 3, 
no
,Ço) \

1338 
	`SC
(199, 54, 52, 4, 
no
,Ço) \

1340 
	`SC
(200, 55, 53, 1, 
no
,Ço) \

1341 
	`SC
(201, 55, 53, 2, 
no
,Ço) \

1342 
	`SC
(202, 55, 53, 3, 
no
,Ço) \

1343 
	`SC
(203, 55, 53, 4, 
no
,Ço) \

1345 
	`SC
(204, 56, 54, 1, 
no
,Ço) \

1346 
	`SC
(205, 56, 54, 2, 
no
,Ço) \

1347 
	`SC
(206, 56, 54, 3, 
no
,Ço) \

1348 
	`SC
(207, 56, 54, 4, 
no
,Ço) \

1350 
	`SC
(208, 57, 55, 1, 
no
,Ço) \

1351 
	`SC
(209, 57, 55, 2, 
no
,Ço) \

1352 
	`SC
(210, 57, 55, 3, 
no
,Ço) \

1353 
	`SC
(211, 57, 55, 4, 
no
,Ço) \

1355 
	`SC
(212, 58, 56, 1, 
no
,Ço) \

1356 
	`SC
(213, 58, 56, 2, 
no
,Ço) \

1357 
	`SC
(214, 58, 56, 3, 
no
,Ço) \

1358 
	`SC
(215, 58, 56, 4, 
no
,Ço) \

1360 
	`SC
(216, 59, 57, 1, 
no
,Ço) \

1361 
	`SC
(217, 59, 57, 2, 
no
,Ço) \

1362 
	`SC
(218, 59, 57, 3, 
no
,Ço) \

1363 
	`SC
(219, 59, 57, 4, 
no
,Ço) \

1365 
	`SC
(220, 60, 58, 1, 
no
,Ço) \

1366 
	`SC
(221, 60, 58, 2, 
no
,Ço) \

1367 
	`SC
(222, 60, 58, 3, 
no
,Ço) \

1368 
	`SC
(223, 60, 58, 4, 
no
,Ço) \

1370 
	`SC
(224, 61, 59, 1, 
no
,Ço) \

1371 
	`SC
(225, 61, 59, 2, 
no
,Ço) \

1372 
	`SC
(226, 61, 59, 3, 
no
,Ço) \

1373 
	`SC
(227, 61, 59, 4, 
no
,Ço) \

1375 
	`SC
(228, 62, 60, 1, 
no
,Ço) \

1376 
	`SC
(229, 62, 60, 2, 
no
,Ço) \

1377 
	`SC
(230, 62, 60, 3, 
no
,Ço) \

1378 

	)

1379 
	#SIZE_CLASSES_DEFINED


	)

1380 
	#NTBINS
 0

	)

1381 
	#NLBINS
 28

	)

1382 
	#NBINS
 35

	)

1383 
	#NSIZES
 231

	)

1384 
	#LG_TINY_MAXCLASS
 "NA"

	)

1385 
	#LOOKUP_MAXCLASS
 ((((
size_t
)1Ë<< 11Ë+ (((size_t)4Ë<< 9))

	)

1386 
	#SMALL_MAXCLASS
 ((((
size_t
)1Ë<< 13Ë+ (((size_t)3Ë<< 11))

	)

1387 
	#LG_LARGE_MINCLASS
 14

	)

1388 
	#HUGE_MAXCLASS
 ((((
size_t
)1Ë<< 62Ë+ (((size_t)3Ë<< 60))

	)

1391 #i‚de‡
SIZE_CLASSES_DEFINED


1394 #unde‡
SIZE_CLASSES_DEFINED


1401 #i‡(
NBINS
 > 255)

1407 #ifde‡
JEMALLOC_H_STRUCTS


1412 #ifde‡
JEMALLOC_H_EXTERNS


1417 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/smoothstep.h

6 #ifde‡
JEMALLOC_H_TYPES


24 
	#SMOOTHSTEP_VARIANT
 "smoŸhî"

	)

25 
	#SMOOTHSTEP_NSTEPS
 200

	)

26 
	#SMOOTHSTEP_BFP
 24

	)

27 
	#SMOOTHSTEP
 \

29 
	`STEP
–1, 
	`UINT64_C
(0x0000000000000014), 0.005, 0.000001240643750) \

30 
	`STEP
–2, 
	`UINT64_C
(0x00000000000000a5), 0.010, 0.000009850600000) \

31 
	`STEP
–3, 
	`UINT64_C
(0x0000000000000229), 0.015, 0.000032995181250) \

32 
	`STEP
–4, 
	`UINT64_C
(0x0000000000000516), 0.020, 0.000077619200000) \

33 
	`STEP
–5, 
	`UINT64_C
(0x00000000000009dc), 0.025, 0.000150449218750) \

34 
	`STEP
–6, 
	`UINT64_C
(0x00000000000010e8), 0.030, 0.000257995800000) \

35 
	`STEP
–7, 
	`UINT64_C
(0x0000000000001aa4), 0.035, 0.000406555756250) \

36 
	`STEP
–8, 
	`UINT64_C
(0x0000000000002777), 0.040, 0.000602214400000) \

37 
	`STEP
–9, 
	`UINT64_C
(0x00000000000037c2), 0.045, 0.000850847793750) \

38 
	`STEP
–10, 
	`UINT64_C
(0x0000000000004be6), 0.050, 0.001158125000000) \

39 
	`STEP
–11, 
	`UINT64_C
(0x000000000000643c), 0.055, 0.001529510331250) \

40 
	`STEP
–12, 
	`UINT64_C
(0x000000000000811f), 0.060, 0.001970265600000) \

41 
	`STEP
–13, 
	`UINT64_C
(0x000000000000a2e2), 0.065, 0.002485452368750) \

42 
	`STEP
–14, 
	`UINT64_C
(0x000000000000c9d8), 0.070, 0.003079934200000) \

43 
	`STEP
–15, 
	`UINT64_C
(0x000000000000f64f), 0.075, 0.003758378906250) \

44 
	`STEP
–16, 
	`UINT64_C
(0x0000000000012891), 0.080, 0.004525260800000) \

45 
	`STEP
–17, 
	`UINT64_C
(0x00000000000160e7), 0.085, 0.005384862943750) \

46 
	`STEP
–18, 
	`UINT64_C
(0x0000000000019f95), 0.090, 0.006341279400000) \

47 
	`STEP
–19, 
	`UINT64_C
(0x000000000001e4dc), 0.095, 0.007398417481250) \

48 
	`STEP
–20, 
	`UINT64_C
(0x00000000000230fc), 0.100, 0.008560000000000) \

49 
	`STEP
–21, 
	`UINT64_C
(0x0000000000028430), 0.105, 0.009829567518750) \

50 
	`STEP
–22, 
	`UINT64_C
(0x000000000002deb0), 0.110, 0.011210480600000) \

51 
	`STEP
–23, 
	`UINT64_C
(0x00000000000340b1), 0.115, 0.012705922056250) \

52 
	`STEP
–24, 
	`UINT64_C
(0x000000000003aa67), 0.120, 0.014318899200000) \

53 
	`STEP
–25, 
	`UINT64_C
(0x0000000000041c00), 0.125, 0.016052246093750) \

54 
	`STEP
–26, 
	`UINT64_C
(0x00000000000495a8), 0.130, 0.017908625800000) \

55 
	`STEP
–27, 
	`UINT64_C
(0x000000000005178b), 0.135, 0.019890532631250) \

56 
	`STEP
–28, 
	`UINT64_C
(0x000000000005a1cf), 0.140, 0.022000294400000) \

57 
	`STEP
–29, 
	`UINT64_C
(0x0000000000063498), 0.145, 0.024240074668750) \

58 
	`STEP
–30, 
	`UINT64_C
(0x000000000006d009), 0.150, 0.026611875000000) \

59 
	`STEP
–31, 
	`UINT64_C
(0x000000000007743f), 0.155, 0.029117537206250) \

60 
	`STEP
–32, 
	`UINT64_C
(0x0000000000082157), 0.160, 0.031758745600000) \

61 
	`STEP
–33, 
	`UINT64_C
(0x000000000008d76b), 0.165, 0.034537029243750) \

62 
	`STEP
–34, 
	`UINT64_C
(0x0000000000099691), 0.170, 0.037453764200000) \

63 
	`STEP
–35, 
	`UINT64_C
(0x00000000000a5edf), 0.175, 0.040510175781250) \

64 
	`STEP
–36, 
	`UINT64_C
(0x00000000000b3067), 0.180, 0.043707340800000) \

65 
	`STEP
–37, 
	`UINT64_C
(0x00000000000c0b38), 0.185, 0.047046189818750) \

66 
	`STEP
–38, 
	`UINT64_C
(0x00000000000cef5e), 0.190, 0.050527509400000) \

67 
	`STEP
–39, 
	`UINT64_C
(0x00000000000ddce6), 0.195, 0.054151944356250) \

68 
	`STEP
–40, 
	`UINT64_C
(0x00000000000ed3d8), 0.200, 0.057920000000000) \

69 
	`STEP
–41, 
	`UINT64_C
(0x00000000000fd439), 0.205, 0.061832044393750) \

70 
	`STEP
–42, 
	`UINT64_C
(0x000000000010de0e), 0.210, 0.065888310600000) \

71 
	`STEP
–43, 
	`UINT64_C
(0x000000000011f158), 0.215, 0.070088898931250) \

72 
	`STEP
–44, 
	`UINT64_C
(0x0000000000130e17), 0.220, 0.074433779200000) \

73 
	`STEP
–45, 
	`UINT64_C
(0x0000000000143448), 0.225, 0.078922792968750) \

74 
	`STEP
–46, 
	`UINT64_C
(0x00000000001563e7), 0.230, 0.083555655800000) \

75 
	`STEP
–47, 
	`UINT64_C
(0x0000000000169cec), 0.235, 0.088331959506250) \

76 
	`STEP
–48, 
	`UINT64_C
(0x000000000017df4f), 0.240, 0.093251174400000) \

77 
	`STEP
–49, 
	`UINT64_C
(0x0000000000192b04), 0.245, 0.098312651543750) \

78 
	`STEP
–50, 
	`UINT64_C
(0x00000000001a8000), 0.250, 0.103515625000000) \

79 
	`STEP
–51, 
	`UINT64_C
(0x00000000001bde32), 0.255, 0.108859214081250) \

80 
	`STEP
–52, 
	`UINT64_C
(0x00000000001d458b), 0.260, 0.114342425600000) \

81 
	`STEP
–53, 
	`UINT64_C
(0x00000000001eb5f8), 0.265, 0.119964156118750) \

82 
	`STEP
–54, 
	`UINT64_C
(0x0000000000202f65), 0.270, 0.125723194200000) \

83 
	`STEP
–55, 
	`UINT64_C
(0x000000000021b1bb), 0.275, 0.131618222656250) \

84 
	`STEP
–56, 
	`UINT64_C
(0x0000000000233ce3), 0.280, 0.137647820800000) \

85 
	`STEP
–57, 
	`UINT64_C
(0x000000000024d0c3), 0.285, 0.143810466693750) \

86 
	`STEP
–58, 
	`UINT64_C
(0x0000000000266d40), 0.290, 0.150104539400000) \

87 
	`STEP
–59, 
	`UINT64_C
(0x000000000028123d), 0.295, 0.156528321231250) \

88 
	`STEP
–60, 
	`UINT64_C
(0x000000000029bf9c), 0.300, 0.163080000000000) \

89 
	`STEP
–61, 
	`UINT64_C
(0x00000000002b753d), 0.305, 0.169757671268750) \

90 
	`STEP
–62, 
	`UINT64_C
(0x00000000002d32fe), 0.310, 0.176559340600000) \

91 
	`STEP
–63, 
	`UINT64_C
(0x00000000002ef8bc), 0.315, 0.183482925806250) \

92 
	`STEP
–64, 
	`UINT64_C
(0x000000000030c654), 0.320, 0.190526259200000) \

93 
	`STEP
–65, 
	`UINT64_C
(0x0000000000329b9f), 0.325, 0.197687089843750) \

94 
	`STEP
–66, 
	`UINT64_C
(0x0000000000347875), 0.330, 0.204963085800000) \

95 
	`STEP
–67, 
	`UINT64_C
(0x0000000000365cb0), 0.335, 0.212351836381250) \

96 
	`STEP
–68, 
	`UINT64_C
(0x0000000000384825), 0.340, 0.219850854400000) \

97 
	`STEP
–69, 
	`UINT64_C
(0x00000000003a3aa8), 0.345, 0.227457578418750) \

98 
	`STEP
–70, 
	`UINT64_C
(0x00000000003c340f), 0.350, 0.235169375000000) \

99 
	`STEP
–71, 
	`UINT64_C
(0x00000000003e342b), 0.355, 0.242983540956250) \

100 
	`STEP
–72, 
	`UINT64_C
(0x0000000000403ace), 0.360, 0.250897305600000) \

101 
	`STEP
–73, 
	`UINT64_C
(0x00000000004247c8), 0.365, 0.258907832993750) \

102 
	`STEP
–74, 
	`UINT64_C
(0x0000000000445ae9), 0.370, 0.267012224200000) \

103 
	`STEP
–75, 
	`UINT64_C
(0x0000000000467400), 0.375, 0.275207519531250) \

104 
	`STEP
–76, 
	`UINT64_C
(0x00000000004892d8), 0.380, 0.283490700800000) \

105 
	`STEP
–77, 
	`UINT64_C
(0x00000000004ab740), 0.385, 0.291858693568750) \

106 
	`STEP
–78, 
	`UINT64_C
(0x00000000004ce102), 0.390, 0.300308369400000) \

107 
	`STEP
–79, 
	`UINT64_C
(0x00000000004f0fe9), 0.395, 0.308836548106250) \

108 
	`STEP
–80, 
	`UINT64_C
(0x00000000005143bf), 0.400, 0.317440000000000) \

109 
	`STEP
–81, 
	`UINT64_C
(0x0000000000537c4d), 0.405, 0.326115448143750) \

110 
	`STEP
–82, 
	`UINT64_C
(0x000000000055b95b), 0.410, 0.334859570600000) \

111 
	`STEP
–83, 
	`UINT64_C
(0x000000000057fab1), 0.415, 0.343669002681250) \

112 
	`STEP
–84, 
	`UINT64_C
(0x00000000005a4015), 0.420, 0.352540339200000) \

113 
	`STEP
–85, 
	`UINT64_C
(0x00000000005c894e), 0.425, 0.361470136718750) \

114 
	`STEP
–86, 
	`UINT64_C
(0x00000000005ed622), 0.430, 0.370454915800000) \

115 
	`STEP
–87, 
	`UINT64_C
(0x0000000000612655), 0.435, 0.379491163256250) \

116 
	`STEP
–88, 
	`UINT64_C
(0x00000000006379ac), 0.440, 0.388575334400000) \

117 
	`STEP
–89, 
	`UINT64_C
(0x000000000065cfeb), 0.445, 0.397703855293750) \

118 
	`STEP
–90, 
	`UINT64_C
(0x00000000006828d6), 0.450, 0.406873125000000) \

119 
	`STEP
–91, 
	`UINT64_C
(0x00000000006a842f), 0.455, 0.416079517831250) \

120 
	`STEP
–92, 
	`UINT64_C
(0x00000000006ce1bb), 0.460, 0.425319385600000) \

121 
	`STEP
–93, 
	`UINT64_C
(0x00000000006f413a), 0.465, 0.434589059868750) \

122 
	`STEP
–94, 
	`UINT64_C
(0x000000000071a270), 0.470, 0.443884854200000) \

123 
	`STEP
–95, 
	`UINT64_C
(0x000000000074051d), 0.475, 0.453203066406250) \

124 
	`STEP
–96, 
	`UINT64_C
(0x0000000000766905), 0.480, 0.462539980800000) \

125 
	`STEP
–97, 
	`UINT64_C
(0x000000000078cde7), 0.485, 0.471891870443750) \

126 
	`STEP
–98, 
	`UINT64_C
(0x00000000007b3387), 0.490, 0.481254999400000) \

127 
	`STEP
–99, 
	`UINT64_C
(0x00000000007d99a4), 0.495, 0.490625624981250) \

128 
	`STEP
–100, 
	`UINT64_C
(0x0000000000800000), 0.500, 0.500000000000000) \

129 
	`STEP
–101, 
	`UINT64_C
(0x000000000082665b), 0.505, 0.509374375018750) \

130 
	`STEP
–102, 
	`UINT64_C
(0x000000000084cc78), 0.510, 0.518745000600000) \

131 
	`STEP
–103, 
	`UINT64_C
(0x0000000000873218), 0.515, 0.528108129556250) \

132 
	`STEP
–104, 
	`UINT64_C
(0x00000000008996fa), 0.520, 0.537460019200000) \

133 
	`STEP
–105, 
	`UINT64_C
(0x00000000008bfae2), 0.525, 0.546796933593750) \

134 
	`STEP
–106, 
	`UINT64_C
(0x00000000008e5d8f), 0.530, 0.556115145800000) \

135 
	`STEP
–107, 
	`UINT64_C
(0x000000000090bec5), 0.535, 0.565410940131250) \

136 
	`STEP
–108, 
	`UINT64_C
(0x0000000000931e44), 0.540, 0.574680614400000) \

137 
	`STEP
–109, 
	`UINT64_C
(0x0000000000957bd0), 0.545, 0.583920482168750) \

138 
	`STEP
–110, 
	`UINT64_C
(0x000000000097d729), 0.550, 0.593126875000000) \

139 
	`STEP
–111, 
	`UINT64_C
(0x00000000009a3014), 0.555, 0.602296144706250) \

140 
	`STEP
–112, 
	`UINT64_C
(0x00000000009c8653), 0.560, 0.611424665600000) \

141 
	`STEP
–113, 
	`UINT64_C
(0x00000000009ed9aa), 0.565, 0.620508836743750) \

142 
	`STEP
–114, 
	`UINT64_C
(0x0000000000a129dd), 0.570, 0.629545084200000) \

143 
	`STEP
–115, 
	`UINT64_C
(0x0000000000a376b1), 0.575, 0.638529863281250) \

144 
	`STEP
–116, 
	`UINT64_C
(0x0000000000a5bfea), 0.580, 0.647459660800000) \

145 
	`STEP
–117, 
	`UINT64_C
(0x0000000000a8054e), 0.585, 0.656330997318750) \

146 
	`STEP
–118, 
	`UINT64_C
(0x0000000000aa46a4), 0.590, 0.665140429400000) \

147 
	`STEP
–119, 
	`UINT64_C
(0x0000000000ac83b2), 0.595, 0.673884551856250) \

148 
	`STEP
–120, 
	`UINT64_C
(0x0000000000aebc40), 0.600, 0.682560000000000) \

149 
	`STEP
–121, 
	`UINT64_C
(0x0000000000b0f016), 0.605, 0.691163451893750) \

150 
	`STEP
–122, 
	`UINT64_C
(0x0000000000b31efd), 0.610, 0.699691630600000) \

151 
	`STEP
–123, 
	`UINT64_C
(0x0000000000b548bf), 0.615, 0.708141306431250) \

152 
	`STEP
–124, 
	`UINT64_C
(0x0000000000b76d27), 0.620, 0.716509299200000) \

153 
	`STEP
–125, 
	`UINT64_C
(0x0000000000b98c00), 0.625, 0.724792480468750) \

154 
	`STEP
–126, 
	`UINT64_C
(0x0000000000bba516), 0.630, 0.732987775800000) \

155 
	`STEP
–127, 
	`UINT64_C
(0x0000000000bdb837), 0.635, 0.741092167006250) \

156 
	`STEP
–128, 
	`UINT64_C
(0x0000000000bfc531), 0.640, 0.749102694400000) \

157 
	`STEP
–129, 
	`UINT64_C
(0x0000000000c1cbd4), 0.645, 0.757016459043750) \

158 
	`STEP
–130, 
	`UINT64_C
(0x0000000000c3cbf0), 0.650, 0.764830625000000) \

159 
	`STEP
–131, 
	`UINT64_C
(0x0000000000c5c557), 0.655, 0.772542421581250) \

160 
	`STEP
–132, 
	`UINT64_C
(0x0000000000c7b7da), 0.660, 0.780149145600000) \

161 
	`STEP
–133, 
	`UINT64_C
(0x0000000000c9a34f), 0.665, 0.787648163618750) \

162 
	`STEP
–134, 
	`UINT64_C
(0x0000000000cb878a), 0.670, 0.795036914200000) \

163 
	`STEP
–135, 
	`UINT64_C
(0x0000000000cd6460), 0.675, 0.802312910156250) \

164 
	`STEP
–136, 
	`UINT64_C
(0x0000000000cf39ab), 0.680, 0.809473740800000) \

165 
	`STEP
–137, 
	`UINT64_C
(0x0000000000d10743), 0.685, 0.816517074193750) \

166 
	`STEP
–138, 
	`UINT64_C
(0x0000000000d2cd01), 0.690, 0.823440659400000) \

167 
	`STEP
–139, 
	`UINT64_C
(0x0000000000d48ac2), 0.695, 0.830242328731250) \

168 
	`STEP
–140, 
	`UINT64_C
(0x0000000000d64063), 0.700, 0.836920000000000) \

169 
	`STEP
–141, 
	`UINT64_C
(0x0000000000d7edc2), 0.705, 0.843471678768750) \

170 
	`STEP
–142, 
	`UINT64_C
(0x0000000000d992bf), 0.710, 0.849895460600000) \

171 
	`STEP
–143, 
	`UINT64_C
(0x0000000000db2f3c), 0.715, 0.856189533306250) \

172 
	`STEP
–144, 
	`UINT64_C
(0x0000000000dcc31c), 0.720, 0.862352179200000) \

173 
	`STEP
–145, 
	`UINT64_C
(0x0000000000de4e44), 0.725, 0.868381777343750) \

174 
	`STEP
–146, 
	`UINT64_C
(0x0000000000dfd09a), 0.730, 0.874276805800000) \

175 
	`STEP
–147, 
	`UINT64_C
(0x0000000000e14a07), 0.735, 0.880035843881250) \

176 
	`STEP
–148, 
	`UINT64_C
(0x0000000000e2ba74), 0.740, 0.885657574400000) \

177 
	`STEP
–149, 
	`UINT64_C
(0x0000000000e421cd), 0.745, 0.891140785918750) \

178 
	`STEP
–150, 
	`UINT64_C
(0x0000000000e58000), 0.750, 0.896484375000000) \

179 
	`STEP
–151, 
	`UINT64_C
(0x0000000000e6d4fb), 0.755, 0.901687348456250) \

180 
	`STEP
–152, 
	`UINT64_C
(0x0000000000e820b0), 0.760, 0.906748825600000) \

181 
	`STEP
–153, 
	`UINT64_C
(0x0000000000e96313), 0.765, 0.911668040493750) \

182 
	`STEP
–154, 
	`UINT64_C
(0x0000000000ea9c18), 0.770, 0.916444344200000) \

183 
	`STEP
–155, 
	`UINT64_C
(0x0000000000ebcbb7), 0.775, 0.921077207031250) \

184 
	`STEP
–156, 
	`UINT64_C
(0x0000000000ecf1e8), 0.780, 0.925566220800000) \

185 
	`STEP
–157, 
	`UINT64_C
(0x0000000000ee0ea7), 0.785, 0.929911101068750) \

186 
	`STEP
–158, 
	`UINT64_C
(0x0000000000ef21f1), 0.790, 0.934111689400000) \

187 
	`STEP
–159, 
	`UINT64_C
(0x0000000000f02bc6), 0.795, 0.938167955606250) \

188 
	`STEP
–160, 
	`UINT64_C
(0x0000000000f12c27), 0.800, 0.942080000000000) \

189 
	`STEP
–161, 
	`UINT64_C
(0x0000000000f22319), 0.805, 0.945848055643750) \

190 
	`STEP
–162, 
	`UINT64_C
(0x0000000000f310a1), 0.810, 0.949472490600000) \

191 
	`STEP
–163, 
	`UINT64_C
(0x0000000000f3f4c7), 0.815, 0.952953810181250) \

192 
	`STEP
–164, 
	`UINT64_C
(0x0000000000f4cf98), 0.820, 0.956292659200000) \

193 
	`STEP
–165, 
	`UINT64_C
(0x0000000000f5a120), 0.825, 0.959489824218750) \

194 
	`STEP
–166, 
	`UINT64_C
(0x0000000000f6696e), 0.830, 0.962546235800000) \

195 
	`STEP
–167, 
	`UINT64_C
(0x0000000000f72894), 0.835, 0.965462970756250) \

196 
	`STEP
–168, 
	`UINT64_C
(0x0000000000f7dea8), 0.840, 0.968241254400000) \

197 
	`STEP
–169, 
	`UINT64_C
(0x0000000000f88bc0), 0.845, 0.970882462793750) \

198 
	`STEP
–170, 
	`UINT64_C
(0x0000000000f92ff6), 0.850, 0.973388125000000) \

199 
	`STEP
–171, 
	`UINT64_C
(0x0000000000f9cb67), 0.855, 0.975759925331250) \

200 
	`STEP
–172, 
	`UINT64_C
(0x0000000000fa5e30), 0.860, 0.977999705600000) \

201 
	`STEP
–173, 
	`UINT64_C
(0x0000000000fae874), 0.865, 0.980109467368750) \

202 
	`STEP
–174, 
	`UINT64_C
(0x0000000000fb6a57), 0.870, 0.982091374200000) \

203 
	`STEP
–175, 
	`UINT64_C
(0x0000000000fbe400), 0.875, 0.983947753906250) \

204 
	`STEP
–176, 
	`UINT64_C
(0x0000000000fc5598), 0.880, 0.985681100800000) \

205 
	`STEP
–177, 
	`UINT64_C
(0x0000000000fcbf4e), 0.885, 0.987294077943750) \

206 
	`STEP
–178, 
	`UINT64_C
(0x0000000000fd214f), 0.890, 0.988789519400000) \

207 
	`STEP
–179, 
	`UINT64_C
(0x0000000000fd7bcf), 0.895, 0.990170432481250) \

208 
	`STEP
–180, 
	`UINT64_C
(0x0000000000fdcf03), 0.900, 0.991440000000000) \

209 
	`STEP
–181, 
	`UINT64_C
(0x0000000000fe1b23), 0.905, 0.992601582518750) \

210 
	`STEP
–182, 
	`UINT64_C
(0x0000000000fe606a), 0.910, 0.993658720600000) \

211 
	`STEP
–183, 
	`UINT64_C
(0x0000000000fe9f18), 0.915, 0.994615137056250) \

212 
	`STEP
–184, 
	`UINT64_C
(0x0000000000fed76e), 0.920, 0.995474739200000) \

213 
	`STEP
–185, 
	`UINT64_C
(0x0000000000ff09b0), 0.925, 0.996241621093750) \

214 
	`STEP
–186, 
	`UINT64_C
(0x0000000000ff3627), 0.930, 0.996920065800000) \

215 
	`STEP
–187, 
	`UINT64_C
(0x0000000000ff5d1d), 0.935, 0.997514547631250) \

216 
	`STEP
–188, 
	`UINT64_C
(0x0000000000ff7ee0), 0.940, 0.998029734400000) \

217 
	`STEP
–189, 
	`UINT64_C
(0x0000000000ff9bc3), 0.945, 0.998470489668750) \

218 
	`STEP
–190, 
	`UINT64_C
(0x0000000000ffb419), 0.950, 0.998841875000000) \

219 
	`STEP
–191, 
	`UINT64_C
(0x0000000000ffc83d), 0.955, 0.999149152206250) \

220 
	`STEP
–192, 
	`UINT64_C
(0x0000000000ffd888), 0.960, 0.999397785600000) \

221 
	`STEP
–193, 
	`UINT64_C
(0x0000000000ffe55b), 0.965, 0.999593444243750) \

222 
	`STEP
–194, 
	`UINT64_C
(0x0000000000ffef17), 0.970, 0.999742004200000) \

223 
	`STEP
–195, 
	`UINT64_C
(0x0000000000fff623), 0.975, 0.999849550781250) \

224 
	`STEP
–196, 
	`UINT64_C
(0x0000000000fffae9), 0.980, 0.999922380800000) \

225 
	`STEP
–197, 
	`UINT64_C
(0x0000000000fffdd6), 0.985, 0.999967004818750) \

226 
	`STEP
–198, 
	`UINT64_C
(0x0000000000ffff5a), 0.990, 0.999990149400000) \

227 
	`STEP
–199, 
	`UINT64_C
(0x0000000000ffffeb), 0.995, 0.999998759356250) \

228 
	`STEP
–200, 
	`UINT64_C
(0x0000000001000000), 1.000, 1.000000000000000) \

229 

	)

232 #ifde‡
JEMALLOC_H_STRUCTS


237 #ifde‡
JEMALLOC_H_EXTERNS


242 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/stats.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
tˇche_bö_°©s_s
 
	ttˇche_bö_°©s_t
;

5 
mÆloc_bö_°©s_s
 
	tmÆloc_bö_°©s_t
;

6 
mÆloc_œrge_°©s_s
 
	tmÆloc_œrge_°©s_t
;

7 
mÆloc_huge_°©s_s
 
	tmÆloc_huge_°©s_t
;

8 
¨ía_°©s_s
 
	t¨ía_°©s_t
;

9 
chunk_°©s_s
 
	tchunk_°©s_t
;

13 #ifde‡
JEMALLOC_H_STRUCTS


15 
	stˇche_bö_°©s_s
 {

20 
uöt64_t
 
	mƒeque°s
;

23 
	smÆloc_bö_°©s_s
 {

30 
uöt64_t
 
	mnmÆloc
;

31 
uöt64_t
 
	mndÆloc
;

38 
uöt64_t
 
	mƒeque°s
;

44 
size_t
 
	mcuºegs
;

47 
uöt64_t
 
	mnfûls
;

50 
uöt64_t
 
	mnÊushes
;

53 
uöt64_t
 
	mƒuns
;

59 
uöt64_t
 
	mªruns
;

62 
size_t
 
	mcuºuns
;

65 
	smÆloc_œrge_°©s_s
 {

72 
uöt64_t
 
	mnmÆloc
;

73 
uöt64_t
 
	mndÆloc
;

80 
uöt64_t
 
	mƒeque°s
;

86 
size_t
 
	mcuºuns
;

89 
	smÆloc_huge_°©s_s
 {

94 
uöt64_t
 
	mnmÆloc
;

95 
uöt64_t
 
	mndÆloc
;

98 
size_t
 
	mcurhchunks
;

101 
	s¨ía_°©s_s
 {

103 
size_t
 
	mm≠≥d
;

111 
size_t
 
	mªèöed
;

118 
uöt64_t
 
	m≈urge
;

119 
uöt64_t
 
	mnmadvi£
;

120 
uöt64_t
 
	mpurged
;

126 
size_t
 
	mmëad©a_m≠≥d
;

127 
size_t
 
	mmëad©a_Æloˇãd
;

130 
size_t
 
	mÆloˇãd_œrge
;

131 
uöt64_t
 
	mnmÆloc_œrge
;

132 
uöt64_t
 
	mndÆloc_œrge
;

133 
uöt64_t
 
	mƒeque°s_œrge
;

135 
size_t
 
	mÆloˇãd_huge
;

136 
uöt64_t
 
	mnmÆloc_huge
;

137 
uöt64_t
 
	mndÆloc_huge
;

140 
mÆloc_œrge_°©s_t
 *
	ml°©s
;

143 
mÆloc_huge_°©s_t
 *
	mh°©s
;

148 #ifde‡
JEMALLOC_H_EXTERNS


150 
boﬁ
 
›t_°©s_¥öt
;

152 
size_t
 
°©s_ˇ˘ive
;

154 
°©s_¥öt
((*
wrôe
)(*, c⁄° *), *
cb›aque
,

155 c⁄° *
›ts
);

159 #ifde‡
JEMALLOC_H_INLINES


161 #i‚de‡
JEMALLOC_ENABLE_INLINE


162 
size_t
 
	`°©s_ˇ˘ive_gë
();

163 
	`°©s_ˇ˘ive_add
(
size_t
 
size
);

164 
	`°©s_ˇ˘ive_sub
(
size_t
 
size
);

167 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_STATS_C_
))

168 
JEMALLOC_INLINE
 
size_t


169 
	$°©s_ˇ˘ive_gë
()

172  (
	`©omic_ªad_z
(&
°©s_ˇ˘ive
));

173 
	}
}

175 
JEMALLOC_INLINE
 

176 
	$°©s_ˇ˘ive_add
(
size_t
 
size
)

178 
UNUSED
 
size_t
 
ˇ˘ive
;

180 
	`as£π
(
size
 > 0);

181 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

183 
ˇ˘ive
 = 
	`©omic_add_z
(&
°©s_ˇ˘ive
, 
size
);

184 
	`as£π
(
ˇ˘ive
 - 
size
 < cactive);

185 
	}
}

187 
JEMALLOC_INLINE
 

188 
	$°©s_ˇ˘ive_sub
(
size_t
 
size
)

190 
UNUSED
 
size_t
 
ˇ˘ive
;

192 
	`as£π
(
size
 > 0);

193 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

195 
ˇ˘ive
 = 
	`©omic_sub_z
(&
°©s_ˇ˘ive
, 
size
);

196 
	`as£π
(
ˇ˘ive
 + 
size
 > cactive);

197 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/tcache.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
tˇche_bö_öfo_s
 
	ttˇche_bö_öfo_t
;

5 
tˇche_bö_s
 
	ttˇche_bö_t
;

6 
tˇche_s
 
	ttˇche_t
;

7 
tˇches_s
 
	ttˇches_t
;

14 
	#TCACHE_STATE_DISABLED
 ((
tˇche_t
 *)(
uöçå_t
)1)

	)

15 
	#TCACHE_STATE_REINCARNATED
 ((
tˇche_t
 *)(
uöçå_t
)2)

	)

16 
	#TCACHE_STATE_PURGATORY
 ((
tˇche_t
 *)(
uöçå_t
)3)

	)

17 
	#TCACHE_STATE_MAX
 
TCACHE_STATE_PURGATORY


	)

22 
	#TCACHE_NSLOTS_SMALL_MIN
 20

	)

31 
	#TCACHE_NSLOTS_SMALL_MAX
 200

	)

34 
	#TCACHE_NSLOTS_LARGE
 20

	)

37 
	#LG_TCACHE_MAXCLASS_DEFAULT
 15

	)

44 
	#TCACHE_GC_SWEEP
 8192

	)

47 
	#TCACHE_GC_INCR
 \

48 ((
TCACHE_GC_SWEEP
 / 
NBINS
Ë+ ((TCACHE_GC_SWEEP / NBINS =0Ë? 0 : 1))

	)

52 #ifde‡
JEMALLOC_H_STRUCTS


55 
	mtˇche_íabÀd_Ál£
 = 0,

56 
	mtˇche_íabÀd_åue
 = 1,

57 
	mtˇche_íabÀd_deÁu…
 = 2

58 } 
	ttˇche_íabÀd_t
;

64 
	stˇche_bö_öfo_s
 {

65 
	mnˇched_max
;

68 
	stˇche_bö_s
 {

69 
tˇche_bö_°©s_t
 
	mt°©s
;

70 
	mlow_w©î
;

71 
	mlg_fûl_div
;

72 
	mnˇched
;

80 **
	mavaû
;

83 
	stˇche_s
 {

84 
ql_ñm
(
tˇche_t
Ë
	mlök
;

85 
uöt64_t
 
	m¥of_accumbyãs
;

86 
tickî_t
 
	mgc_tickî
;

87 
szöd_t
 
	m√xt_gc_bö
;

88 
tˇche_bö_t
 
	mtbös
[1];

98 
	stˇches_s
 {

100 
tˇche_t
 *
	mtˇche
;

101 
tˇches_t
 *
	m√xt
;

107 #ifde‡
JEMALLOC_H_EXTERNS


109 
boﬁ
 
›t_tˇche
;

110 
ssize_t
 
›t_lg_tˇche_max
;

112 
tˇche_bö_öfo_t
 *
tˇche_bö_öfo
;

118 
nhbös
;

121 
size_t
 
tˇche_max˛ass
;

131 
tˇches_t
 *
tˇches
;

133 
size_t
 
tˇche_ßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
);

134 
tˇche_evít_h¨d
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
);

135 *
tˇche_Æloc_smÆl_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
tˇche_t
 *
tˇche
,

136 
tˇche_bö_t
 *
tbö
, 
szöd_t
 
bööd
, 
boﬁ
 *
tˇche_suc˚ss
);

137 
tˇche_bö_Êush_smÆl
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
, 
tˇche_bö_t
 *
tbö
,

138 
szöd_t
 
bööd
, 
ªm
);

139 
tˇche_bö_Êush_œrge
(
tsd_t
 *
tsd
, 
tˇche_bö_t
 *
tbö
, 
szöd_t
 
bööd
,

140 
ªm
, 
tˇche_t
 *
tˇche
);

141 
tˇche_¨ía_ªassocüã
(
tsdn_t
 *
tsdn
, 
tˇche_t
 *
tˇche
,

142 
¨ía_t
 *
ﬁd¨ía
,áª«_à*
√w¨ía
);

143 
tˇche_t
 *
tˇche_gë_h¨d
(
tsd_t
 *
tsd
);

144 
tˇche_t
 *
tˇche_¸óã
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
);

145 
tˇche_˛ónup
(
tsd_t
 *
tsd
);

146 
tˇche_íabÀd_˛ónup
(
tsd_t
 *
tsd
);

147 
tˇche_°©s_mîge
(
tsdn_t
 *
tsdn
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
);

148 
boﬁ
 
tˇches_¸óã
(
tsdn_t
 *
tsdn
, *
r_öd
);

149 
tˇches_Êush
(
tsd_t
 *
tsd
, 
öd
);

150 
tˇches_de°roy
(
tsd_t
 *
tsd
, 
öd
);

151 
boﬁ
 
tˇche_boŸ
(
tsdn_t
 *
tsdn
);

155 #ifde‡
JEMALLOC_H_INLINES


157 #i‚de‡
JEMALLOC_ENABLE_INLINE


158 
tˇche_evít
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
);

159 
tˇche_Êush
();

160 
boﬁ
 
tˇche_íabÀd_gë
();

161 
tˇche_t
 *
tˇche_gë
(
tsd_t
 *
tsd
, 
boﬁ
 
¸óã
);

162 
tˇche_íabÀd_£t
(
boﬁ
 
íabÀd
);

163 *
tˇche_Æloc_ósy
(
tˇche_bö_t
 *
tbö
, 
boﬁ
 *
tˇche_suc˚ss
);

164 *
tˇche_Æloc_smÆl
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, 
tˇche_t
 *
tˇche
,

165 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
, boﬁ 
¶ow_∑th
);

166 *
tˇche_Æloc_œrge
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, 
tˇche_t
 *
tˇche
,

167 
size_t
 
size
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
, boﬁ 
¶ow_∑th
);

168 
tˇche_dÆloc_smÆl
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
, *
±r
,

169 
szöd_t
 
bööd
, 
boﬁ
 
¶ow_∑th
);

170 
tˇche_dÆloc_œrge
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
, *
±r
,

171 
size_t
 
size
, 
boﬁ
 
¶ow_∑th
);

172 
tˇche_t
 *
tˇches_gë
(
tsd_t
 *
tsd
, 
öd
);

175 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_TCACHE_C_
))

176 
JEMALLOC_INLINE
 

177 
	$tˇche_Êush
()

179 
tsd_t
 *
tsd
;

181 
	`ˇs£π
(
c⁄fig_tˇche
);

183 
tsd
 = 
	`tsd_„tch
();

184 
	`tˇche_˛ónup
(
tsd
);

185 
	}
}

187 
JEMALLOC_INLINE
 
boﬁ


188 
	$tˇche_íabÀd_gë
()

190 
tsd_t
 *
tsd
;

191 
tˇche_íabÀd_t
 
tˇche_íabÀd
;

193 
	`ˇs£π
(
c⁄fig_tˇche
);

195 
tsd
 = 
	`tsd_„tch
();

196 
tˇche_íabÀd
 = 
	`tsd_tˇche_íabÀd_gë
(
tsd
);

197 i‡(
tˇche_íabÀd
 =
tˇche_íabÀd_deÁu…
) {

198 
tˇche_íabÀd
 = (
tˇche_íabÀd_t
)
›t_tˇche
;

199 
	`tsd_tˇche_íabÀd_£t
(
tsd
, 
tˇche_íabÀd
);

202  ((
boﬁ
)
tˇche_íabÀd
);

203 
	}
}

205 
JEMALLOC_INLINE
 

206 
	$tˇche_íabÀd_£t
(
boﬁ
 
íabÀd
)

208 
tsd_t
 *
tsd
;

209 
tˇche_íabÀd_t
 
tˇche_íabÀd
;

211 
	`ˇs£π
(
c⁄fig_tˇche
);

213 
tsd
 = 
	`tsd_„tch
();

215 
tˇche_íabÀd
 = (
tˇche_íabÀd_t
)
íabÀd
;

216 
	`tsd_tˇche_íabÀd_£t
(
tsd
, 
tˇche_íabÀd
);

218 i‡(!
íabÀd
)

219 
	`tˇche_˛ónup
(
tsd
);

220 
	}
}

222 
JEMALLOC_ALWAYS_INLINE
 
tˇche_t
 *

223 
	$tˇche_gë
(
tsd_t
 *
tsd
, 
boﬁ
 
¸óã
)

225 
tˇche_t
 *
tˇche
;

227 i‡(!
c⁄fig_tˇche
)

228  (
NULL
);

230 
tˇche
 = 
	`tsd_tˇche_gë
(
tsd
);

231 i‡(!
¸óã
)

232  (
tˇche
);

233 i‡(
	`u∆ikñy
(
tˇche
 =
NULL
Ë&& 
	`tsd_nomöÆ
(
tsd
)) {

234 
tˇche
 = 
	`tˇche_gë_h¨d
(
tsd
);

235 
	`tsd_tˇche_£t
(
tsd
, 
tˇche
);

238  (
tˇche
);

239 
	}
}

241 
JEMALLOC_ALWAYS_INLINE
 

242 
	$tˇche_evít
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
)

245 i‡(
TCACHE_GC_INCR
 == 0)

248 i‡(
	`u∆ikñy
(
	`tickî_tick
(&
tˇche
->
gc_tickî
)))

249 
	`tˇche_evít_h¨d
(
tsd
, 
tˇche
);

250 
	}
}

252 
JEMALLOC_ALWAYS_INLINE
 *

253 
	$tˇche_Æloc_ósy
(
tˇche_bö_t
 *
tbö
, 
boﬁ
 *
tˇche_suc˚ss
)

255 *
ªt
;

257 i‡(
	`u∆ikñy
(
tbö
->
nˇched
 == 0)) {

258 
tbö
->
low_w©î
 = -1;

259 *
tˇche_suc˚ss
 = 
Ál£
;

260  (
NULL
);

269 *
tˇche_suc˚ss
 = 
åue
;

270 
ªt
 = *(
tbö
->
avaû
 -Åbö->
nˇched
);

271 
tbö
->
nˇched
--;

273 i‡(
	`u∆ikñy
(()
tbö
->
nˇched
 <Åbö->
low_w©î
))

274 
tbö
->
low_w©î
 =Åbö->
nˇched
;

276  (
ªt
);

277 
	}
}

279 
JEMALLOC_ALWAYS_INLINE
 *

280 
	$tˇche_Æloc_smÆl
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, 
tˇche_t
 *
tˇche
, 
size_t
 
size
,

281 
szöd_t
 
bööd
, 
boﬁ
 
zîo
, boﬁ 
¶ow_∑th
)

283 *
ªt
;

284 
tˇche_bö_t
 *
tbö
;

285 
boﬁ
 
tˇche_suc˚ss
;

286 
size_t
 
usize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

288 
	`as£π
(
bööd
 < 
NBINS
);

289 
tbö
 = &
tˇche
->
tbös
[
bööd
];

290 
ªt
 = 
	`tˇche_Æloc_ósy
(
tbö
, &
tˇche_suc˚ss
);

291 
	`as£π
(
tˇche_suc˚ss
 =(
ªt
 !
NULL
));

292 i‡(
	`u∆ikñy
(!
tˇche_suc˚ss
)) {

293 
boﬁ
 
tˇche_h¨d_suc˚ss
;

294 
¨ía
 = 
	`¨ía_choo£
(
tsd
,árena);

295 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

296  (
NULL
);

298 
ªt
 = 
	`tˇche_Æloc_smÆl_h¨d
(
	`tsd_tsdn
(
tsd
), 
¨ía
, 
tˇche
,

299 
tbö
, 
bööd
, &
tˇche_h¨d_suc˚ss
);

300 i‡(
tˇche_h¨d_suc˚ss
 =
Ál£
)

301  (
NULL
);

304 
	`as£π
(
ªt
);

309 i‡(
c⁄fig_¥of
 || (
¶ow_∑th
 && 
c⁄fig_fûl
Ë|| 
	`u∆ikñy
(
zîo
)) {

310 
usize
 = 
	`ödex2size
(
bööd
);

311 
	`as£π
(
	`tˇche_ßŒoc
(
	`tsd_tsdn
(
tsd
), 
ªt
Ë=
usize
);

314 i‡(
	`likñy
(!
zîo
)) {

315 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
) {

316 i‡(
	`u∆ikñy
(
›t_junk_Æloc
)) {

317 
	`¨ía_Æloc_junk_smÆl
(
ªt
,

318 &
¨ía_bö_öfo
[
bööd
], 
Ál£
);

319 } i‡(
	`u∆ikñy
(
›t_zîo
))

320 
	`mem£t
(
ªt
, 0, 
usize
);

323 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_Æloc
)) {

324 
	`¨ía_Æloc_junk_smÆl
(
ªt
, &
¨ía_bö_öfo
[
bööd
],

325 
åue
);

327 
	`mem£t
(
ªt
, 0, 
usize
);

330 i‡(
c⁄fig_°©s
)

331 
tbö
->
t°©s
.
ƒeque°s
++;

332 i‡(
c⁄fig_¥of
)

333 
tˇche
->
¥of_accumbyãs
 +
usize
;

334 
	`tˇche_evít
(
tsd
, 
tˇche
);

335  (
ªt
);

336 
	}
}

338 
JEMALLOC_ALWAYS_INLINE
 *

339 
	$tˇche_Æloc_œrge
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, 
tˇche_t
 *
tˇche
, 
size_t
 
size
,

340 
szöd_t
 
bööd
, 
boﬁ
 
zîo
, boﬁ 
¶ow_∑th
)

342 *
ªt
;

343 
tˇche_bö_t
 *
tbö
;

344 
boﬁ
 
tˇche_suc˚ss
;

346 
	`as£π
(
bööd
 < 
nhbös
);

347 
tbö
 = &
tˇche
->
tbös
[
bööd
];

348 
ªt
 = 
	`tˇche_Æloc_ósy
(
tbö
, &
tˇche_suc˚ss
);

349 
	`as£π
(
tˇche_suc˚ss
 =(
ªt
 !
NULL
));

350 i‡(
	`u∆ikñy
(!
tˇche_suc˚ss
)) {

355 
¨ía
 = 
	`¨ía_choo£
(
tsd
,árena);

356 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

357  (
NULL
);

359 
ªt
 = 
	`¨ía_mÆloc_œrge
(
	`tsd_tsdn
(
tsd
), 
¨ía
, 
bööd
, 
zîo
);

360 i‡(
ªt
 =
NULL
)

361  (
NULL
);

363 
size_t
 
usize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

366 i‡(
c⁄fig_¥of
 || (
¶ow_∑th
 && 
c⁄fig_fûl
) ||

367 
	`u∆ikñy
(
zîo
)) {

368 
usize
 = 
	`ödex2size
(
bööd
);

369 
	`as£π
(
usize
 <
tˇche_max˛ass
);

372 i‡(
c⁄fig_¥of
 && 
usize
 =
LARGE_MINCLASS
) {

373 
¨ía_chunk_t
 *
chunk
 =

374 (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
ªt
);

375 
size_t
 
∑geöd
 = (((
uöçå_t
)
ªt
 - (uöçå_t)
chunk
) >>

376 
LG_PAGE
);

377 
	`¨ía_m≠bôs_œrge_bööd_£t
(
chunk
, 
∑geöd
,

378 
BININD_INVALID
);

380 i‡(
	`likñy
(!
zîo
)) {

381 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
) {

382 i‡(
	`u∆ikñy
(
›t_junk_Æloc
)) {

383 
	`mem£t
(
ªt
, 
JEMALLOC_ALLOC_JUNK
,

384 
usize
);

385 } i‡(
	`u∆ikñy
(
›t_zîo
))

386 
	`mem£t
(
ªt
, 0, 
usize
);

389 
	`mem£t
(
ªt
, 0, 
usize
);

391 i‡(
c⁄fig_°©s
)

392 
tbö
->
t°©s
.
ƒeque°s
++;

393 i‡(
c⁄fig_¥of
)

394 
tˇche
->
¥of_accumbyãs
 +
usize
;

397 
	`tˇche_evít
(
tsd
, 
tˇche
);

398  (
ªt
);

399 
	}
}

401 
JEMALLOC_ALWAYS_INLINE
 

402 
	$tˇche_dÆloc_smÆl
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
, *
±r
, 
szöd_t
 
bööd
,

403 
boﬁ
 
¶ow_∑th
)

405 
tˇche_bö_t
 *
tbö
;

406 
tˇche_bö_öfo_t
 *
tbö_öfo
;

408 
	`as£π
(
	`tˇche_ßŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
Ë<
SMALL_MAXCLASS
);

410 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
))

411 
	`¨ía_dÆloc_junk_smÆl
(
±r
, &
¨ía_bö_öfo
[
bööd
]);

413 
tbö
 = &
tˇche
->
tbös
[
bööd
];

414 
tbö_öfo
 = &
tˇche_bö_öfo
[
bööd
];

415 i‡(
	`u∆ikñy
(
tbö
->
nˇched
 =
tbö_öfo
->
nˇched_max
)) {

416 
	`tˇche_bö_Êush_smÆl
(
tsd
, 
tˇche
, 
tbö
, 
bööd
,

417 (
tbö_öfo
->
nˇched_max
 >> 1));

419 
	`as£π
(
tbö
->
nˇched
 < 
tbö_öfo
->
nˇched_max
);

420 
tbö
->
nˇched
++;

421 *(
tbö
->
avaû
 -Åbö->
nˇched
Ë
±r
;

423 
	`tˇche_evít
(
tsd
, 
tˇche
);

424 
	}
}

426 
JEMALLOC_ALWAYS_INLINE
 

427 
	$tˇche_dÆloc_œrge
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
, *
±r
, 
size_t
 
size
,

428 
boﬁ
 
¶ow_∑th
)

430 
szöd_t
 
bööd
;

431 
tˇche_bö_t
 *
tbö
;

432 
tˇche_bö_öfo_t
 *
tbö_öfo
;

434 
	`as£π
((
size
 & 
PAGE_MASK
) == 0);

435 
	`as£π
(
	`tˇche_ßŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
Ë> 
SMALL_MAXCLASS
);

436 
	`as£π
(
	`tˇche_ßŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
Ë<
tˇche_max˛ass
);

438 
bööd
 = 
	`size2ödex
(
size
);

440 i‡(
¶ow_∑th
 && 
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
))

441 
	`¨ía_dÆloc_junk_œrge
(
±r
, 
size
);

443 
tbö
 = &
tˇche
->
tbös
[
bööd
];

444 
tbö_öfo
 = &
tˇche_bö_öfo
[
bööd
];

445 i‡(
	`u∆ikñy
(
tbö
->
nˇched
 =
tbö_öfo
->
nˇched_max
)) {

446 
	`tˇche_bö_Êush_œrge
(
tsd
, 
tbö
, 
bööd
,

447 (
tbö_öfo
->
nˇched_max
 >> 1), 
tˇche
);

449 
	`as£π
(
tbö
->
nˇched
 < 
tbö_öfo
->
nˇched_max
);

450 
tbö
->
nˇched
++;

451 *(
tbö
->
avaû
 -Åbö->
nˇched
Ë
±r
;

453 
	`tˇche_evít
(
tsd
, 
tˇche
);

454 
	}
}

456 
JEMALLOC_ALWAYS_INLINE
 
tˇche_t
 *

457 
	$tˇches_gë
(
tsd_t
 *
tsd
, 
öd
)

459 
tˇches_t
 *
ñm
 = &
tˇches
[
öd
];

460 i‡(
	`u∆ikñy
(
ñm
->
tˇche
 =
NULL
)) {

461 
ñm
->
tˇche
 = 
	`tˇche_¸óã
(
	`tsd_tsdn
(
tsd
), 
	`¨ía_choo£
(tsd,

462 
NULL
));

464  (
ñm
->
tˇche
);

465 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/ticker.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
tickî_s
 
	ttickî_t
;

8 #ifde‡
JEMALLOC_H_STRUCTS


10 
	stickî_s
 {

11 
öt32_t
 
	mtick
;

12 
öt32_t
 
	m¡icks
;

17 #ifde‡
JEMALLOC_H_EXTERNS


21 #ifde‡
JEMALLOC_H_INLINES


23 #i‚de‡
JEMALLOC_ENABLE_INLINE


24 
tickî_öô
(
tickî_t
 *
tickî
, 
öt32_t
 
¡icks
);

25 
tickî_c›y
(
tickî_t
 *
tickî
, c⁄°Åickî_à*
Ÿhî
);

26 
öt32_t
 
tickî_ªad
(c⁄° 
tickî_t
 *
tickî
);

27 
boﬁ
 
tickî_ticks
(
tickî_t
 *
tickî
, 
öt32_t
 
¡icks
);

28 
boﬁ
 
tickî_tick
(
tickî_t
 *
tickî
);

31 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_TICKER_C_
))

32 
JEMALLOC_INLINE
 

33 
	$tickî_öô
(
tickî_t
 *
tickî
, 
öt32_t
 
¡icks
)

36 
tickî
->
tick
 = 
¡icks
;

37 
tickî
->
¡icks
 =Çticks;

38 
	}
}

40 
JEMALLOC_INLINE
 

41 
	$tickî_c›y
(
tickî_t
 *
tickî
, c⁄°Åickî_à*
Ÿhî
)

44 *
tickî
 = *
Ÿhî
;

45 
	}
}

47 
JEMALLOC_INLINE
 
öt32_t


48 
	$tickî_ªad
(c⁄° 
tickî_t
 *
tickî
)

51  (
tickî
->
tick
);

52 
	}
}

54 
JEMALLOC_INLINE
 
boﬁ


55 
	$tickî_ticks
(
tickî_t
 *
tickî
, 
öt32_t
 
¡icks
)

58 i‡(
	`u∆ikñy
(
tickî
->
tick
 < 
¡icks
)) {

59 
tickî
->
tick
 =Åickî->
¡icks
;

60  (
åue
);

62 
tickî
->
tick
 -
¡icks
;

63 (
Ál£
);

64 
	}
}

66 
JEMALLOC_INLINE
 
boﬁ


67 
	$tickî_tick
(
tickî_t
 *
tickî
)

70  (
	`tickî_ticks
(
tickî
, 1));

71 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/tsd.h

2 #ifde‡
JEMALLOC_H_TYPES


5 
	#MALLOC_TSD_CLEANUPS_MAX
 2

	)

7 
	$boﬁ
 (*
	tmÆloc_tsd_˛ónup_t
)();

9 #i‡(!
	`deföed
(
JEMALLOC_MALLOC_THREAD_CLEANUP
Ë&& !deföed(
JEMALLOC_TLS
) && \

10 !
	$deföed
(
_WIN32
))

11 
tsd_öô_block_s
 
	ttsd_öô_block_t
;

12 
tsd_öô_hód_s
 
	ttsd_öô_hód_t
;

15 
tsd_s
 
	ttsd_t
;

16 
tsdn_s
 
	ttsdn_t
;

18 
	#TSDN_NULL
 ((
tsdn_t
 *)0)

	)

21 
tsd_°©e_unöôülized
,

22 
tsd_°©e_nomöÆ
,

23 
tsd_°©e_purg©‹y
,

24 
tsd_°©e_ªöˇ∫©ed


25 } 
	ttsd_°©e_t
;

79 #ifde‡
JEMALLOC_MALLOC_THREAD_CLEANUP


80 
	#mÆloc_tsd_ty≥s
(
a_«me
, 
a_ty≥
)

	)

81 #ñi‡(
	`deföed
(
JEMALLOC_TLS
))

82 
	#mÆloc_tsd_ty≥s
(
a_«me
, 
a_ty≥
)

	)

83 #ñi‡(
	`deföed
(
_WIN32
))

84 
	#mÆloc_tsd_ty≥s
(
a_«me
, 
a_ty≥
) \

86 
boﬁ
 
öôülized
; \

87 
a_ty≥
 
vÆ
; \

88 } 
	ta_«me
##
	ttsd_wøµî_t
;

	)

90 
	#mÆloc_tsd_ty≥s
(
a_«me
, 
a_ty≥
) \

92 
boﬁ
 
öôülized
; \

93 
a_ty≥
 
vÆ
; \

94 } 
	ta_«me
##
	ttsd_wøµî_t
;

	)

98 
	#mÆloc_tsd_¥Ÿos
(
a_©å
, 
a_«me
, 
a_ty≥
) \

99 
a_©å
 
boﬁ
 \

100 
a_«me
##
	`tsd_boŸ0
(); \

101 
a_©å
 \

102 
a_«me
##
	`tsd_boŸ1
(); \

103 
a_©å
 
boﬁ
 \

104 
a_«me
##
	`tsd_boŸ
(); \

105 
a_©å
 
boﬁ
 \

106 
a_«me
##
	`tsd_boŸed_gë
(); \

107 
a_©å
 
a_ty≥
 * \

108 
a_«me
##
	`tsd_gë
(); \

109 
a_©å
 \

110 
a_«me
##
	`tsd_£t
(
a_ty≥
 *
vÆ
);

	)

113 #ifde‡
JEMALLOC_MALLOC_THREAD_CLEANUP


114 
	#mÆloc_tsd_exã∫s
(
a_«me
, 
a_ty≥
) \

115 
__thªad
 
a_ty≥
 
a_«me
##
tsd_és
; \

116 
__thªad
 
boﬁ
 
a_«me
##
tsd_öôülized
; \

117 
boﬁ
 
a_«me
##
tsd_boŸed
;

	)

118 #ñi‡(
	`deföed
(
JEMALLOC_TLS
))

119 
	#mÆloc_tsd_exã∫s
(
a_«me
, 
a_ty≥
) \

120 
__thªad
 
a_ty≥
 
a_«me
##
tsd_és
; \

121 
±hªad_key_t
 
a_«me
##
tsd_tsd
; \

122 
boﬁ
 
a_«me
##
tsd_boŸed
;

	)

123 #ñi‡(
	`deföed
(
_WIN32
))

124 
	#mÆloc_tsd_exã∫s
(
a_«me
, 
a_ty≥
) \

125 
DWORD
 
a_«me
##
tsd_tsd
; \

126 
a_«me
##
tsd_wøµî_t
á_«me##
tsd_boŸ_wøµî
; \

127 
boﬁ
 
a_«me
##
tsd_boŸed
;

	)

129 
	#mÆloc_tsd_exã∫s
(
a_«me
, 
a_ty≥
) \

130 
±hªad_key_t
 
a_«me
##
tsd_tsd
; \

131 
tsd_öô_hód_t
 
a_«me
##
tsd_öô_hód
; \

132 
a_«me
##
tsd_wøµî_t
á_«me##
tsd_boŸ_wøµî
; \

133 
boﬁ
 
a_«me
##
tsd_boŸed
;

	)

137 #ifde‡
JEMALLOC_MALLOC_THREAD_CLEANUP


138 
	#mÆloc_tsd_d©a
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
) \

139 
a_©å
 
__thªad
 
a_ty≥
 
JEMALLOC_TLS_MODEL
 \

140 
a_«me
##
tsd_és
 = 
a_öôülizî
; \

141 
a_©å
 
__thªad
 
boﬁ
 
JEMALLOC_TLS_MODEL
 \

142 
a_«me
##
tsd_öôülized
 = 
Ál£
; \

143 
a_©å
 
boﬁ
 
a_«me
##
tsd_boŸed
 = 
Ál£
;

	)

144 #ñi‡(
	`deföed
(
JEMALLOC_TLS
))

145 
	#mÆloc_tsd_d©a
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
) \

146 
a_©å
 
__thªad
 
a_ty≥
 
JEMALLOC_TLS_MODEL
 \

147 
a_«me
##
tsd_és
 = 
a_öôülizî
; \

148 
a_©å
 
±hªad_key_t
 
a_«me
##
tsd_tsd
; \

149 
a_©å
 
boﬁ
 
a_«me
##
tsd_boŸed
 = 
Ál£
;

	)

150 #ñi‡(
	`deföed
(
_WIN32
))

151 
	#mÆloc_tsd_d©a
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
) \

152 
a_©å
 
DWORD
 
a_«me
##
tsd_tsd
; \

153 
a_©å
 
a_«me
##
tsd_wøµî_t
á_«me##
tsd_boŸ_wøµî
 = { \

154 
Ál£
, \

155 
a_öôülizî
 \

156 
	}
}; \

157 
a_©å
 
boﬁ
 
a_«me
##
tsd_boŸed
 = 
Ál£
;

	)

159 
	#mÆloc_tsd_d©a
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
) \

160 
a_©å
 
±hªad_key_t
 
a_«me
##
tsd_tsd
; \

161 
a_©å
 
tsd_öô_hód_t
 
a_«me
##
tsd_öô_hód
 = { \

162 
	`ql_hód_öôülizî
(
blocks
), \

163 
MALLOC_MUTEX_INITIALIZER
 \

165 
a_©å
 
a_«me
##
tsd_wøµî_t
á_«me##
tsd_boŸ_wøµî
 = { \

166 
Ál£
, \

167 
a_öôülizî
 \

169 
a_©å
 
boﬁ
 
a_«me
##
tsd_boŸed
 = 
Ál£
;

	)

173 #ifde‡
JEMALLOC_MALLOC_THREAD_CLEANUP


174 
	#mÆloc_tsd_funcs
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
, \

175 
a_˛ónup
) \

177 
a_©å
 
boﬁ
 \

178 
a_«me
##
	`tsd_˛ónup_wøµî
() \

181 i‡(
a_«me
##
tsd_öôülized
) { \

182 
a_«me
##
tsd_öôülized
 = 
Ál£
; \

183 
	`a_˛ónup
(&
a_«me
##
tsd_és
); \

185  (
a_«me
##
tsd_öôülized
); \

187 
a_©å
 
boﬁ
 \

188 
a_«me
##
	`tsd_boŸ0
() \

191 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) { \

192 
	`mÆloc_tsd_˛ónup_ªgi°î
( \

193 &
a_«me
##
tsd_˛ónup_wøµî
); \

195 
a_«me
##
tsd_boŸed
 = 
åue
; \

196  (
Ál£
); \

198 
a_©å
 \

199 
a_«me
##
	`tsd_boŸ1
() \

204 
a_©å
 
boﬁ
 \

205 
a_«me
##
	`tsd_boŸ
() \

208  (
a_«me
##
	`tsd_boŸ0
()); \

210 
a_©å
 
boﬁ
 \

211 
a_«me
##
	`tsd_boŸed_gë
() \

214  (
a_«me
##
tsd_boŸed
); \

217 
a_©å
 
a_ty≥
 * \

218 
a_«me
##
	`tsd_gë
() \

221 
	`as£π
(
a_«me
##
tsd_boŸed
); \

222  (&
a_«me
##
tsd_és
); \

224 
a_©å
 \

225 
a_«me
##
	`tsd_£t
(
a_ty≥
 *
vÆ
) \

228 
	`as£π
(
a_«me
##
tsd_boŸed
); \

229 
a_«me
##
tsd_és
 = (*
vÆ
); \

230 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) \

231 
a_«me
##
tsd_öôülized
 = 
åue
; \

232 }

	)

233 #ñi‡(
deföed
(
JEMALLOC_TLS
))

234 
	#mÆloc_tsd_funcs
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
, \

235 
a_˛ónup
) \

237 
a_©å
 
boﬁ
 \

238 
a_«me
##
	`tsd_boŸ0
() \

241 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) { \

242 i‡(
	`±hªad_key_¸óã
(&
a_«me
##
tsd_tsd
, 
a_˛ónup
) != \

244  (
åue
); \

246 
a_«me
##
tsd_boŸed
 = 
åue
; \

247  (
Ál£
); \

249 
a_©å
 \

250 
a_«me
##
	`tsd_boŸ1
() \

255 
a_©å
 
boﬁ
 \

256 
a_«me
##
	`tsd_boŸ
() \

259  (
a_«me
##
	`tsd_boŸ0
()); \

261 
a_©å
 
boﬁ
 \

262 
a_«me
##
	`tsd_boŸed_gë
() \

265  (
a_«me
##
tsd_boŸed
); \

268 
a_©å
 
a_ty≥
 * \

269 
a_«me
##
	`tsd_gë
() \

272 
	`as£π
(
a_«me
##
tsd_boŸed
); \

273  (&
a_«me
##
tsd_és
); \

275 
a_©å
 \

276 
a_«me
##
	`tsd_£t
(
a_ty≥
 *
vÆ
) \

279 
	`as£π
(
a_«me
##
tsd_boŸed
); \

280 
a_«me
##
tsd_és
 = (*
vÆ
); \

281 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) { \

282 i‡(
	`±hªad_£t•ecific
(
a_«me
##
tsd_tsd
, \

283 (*)(&
a_«me
##
tsd_és
))) { \

284 
	`mÆloc_wrôe
("<jemalloc>: Error" \

286 i‡(
›t_ab‹t
) \

287 
	`ab‹t
(); \

290 }

	)

291 #ñi‡(
deföed
(
_WIN32
))

292 
	#mÆloc_tsd_funcs
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
, \

293 
a_˛ónup
) \

295 
a_©å
 
boﬁ
 \

296 
a_«me
##
	`tsd_˛ónup_wøµî
() \

298 
DWORD
 
îr‹
 = 
	`GëLa°Eº‹
(); \

299 
a_«me
##
tsd_wøµî_t
 *
wøµî
 = (a_name##tsd_wrapper_t *) \

300 
	`TlsGëVÆue
(
a_«me
##
tsd_tsd
); \

301 
	`SëLa°Eº‹
(
îr‹
); \

303 i‡(
wøµî
 =
NULL
) \

304  (
Ál£
); \

305 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
 && \

306 
wøµî
->
öôülized
) { \

307 
wøµî
->
öôülized
 = 
Ál£
; \

308 
	`a_˛ónup
(&
wøµî
->
vÆ
); \

309 i‡(
wøµî
->
öôülized
) { \

311  (
åue
); \

314 
	`mÆloc_tsd_dÆloc
(
wøµî
); \

315  (
Ál£
); \

317 
a_©å
 \

318 
a_«me
##
	`tsd_wøµî_£t
◊_«me##
tsd_wøµî_t
 *
wøµî
) \

321 i‡(!
	`TlsSëVÆue
(
a_«me
##
tsd_tsd
, (*)
wøµî
)) { \

322 
	`mÆloc_wrôe
("<jemalloc>: Error setting" \

324 
	`ab‹t
(); \

327 
a_©å
 
a_«me
##
tsd_wøµî_t
 * \

328 
a_«me
##
	`tsd_wøµî_gë
() \

330 
DWORD
 
îr‹
 = 
	`GëLa°Eº‹
(); \

331 
a_«me
##
tsd_wøµî_t
 *
wøµî
 = (a_name##tsd_wrapper_t *) \

332 
	`TlsGëVÆue
(
a_«me
##
tsd_tsd
); \

333 
	`SëLa°Eº‹
(
îr‹
); \

335 i‡(
	`u∆ikñy
(
wøµî
 =
NULL
)) { \

336 
wøµî
 = (
a_«me
##
tsd_wøµî_t
 *) \

337 
	`mÆloc_tsd_mÆloc
((
a_«me
##
tsd_wøµî_t
)); \

338 i‡(
wøµî
 =
NULL
) { \

339 
	`mÆloc_wrôe
("<jemalloc>: Errorállocating" \

341 
	`ab‹t
(); \

343 
wøµî
->
öôülized
 = 
Ál£
; \

344 
wøµî
->
vÆ
 = 
a_öôülizî
; \

346 
a_«me
##
	`tsd_wøµî_£t
(
wøµî
); \

348  (
wøµî
); \

350 
a_©å
 
boﬁ
 \

351 
a_«me
##
	`tsd_boŸ0
() \

354 
a_«me
##
tsd_tsd
 = 
	`TlsAŒoc
(); \

355 i‡(
a_«me
##
tsd_tsd
 =
TLS_OUT_OF_INDEXES
) \

356  (
åue
); \

357 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) { \

358 
	`mÆloc_tsd_˛ónup_ªgi°î
( \

359 &
a_«me
##
tsd_˛ónup_wøµî
); \

361 
a_«me
##
	`tsd_wøµî_£t
(&a_«me##
tsd_boŸ_wøµî
); \

362 
a_«me
##
tsd_boŸed
 = 
åue
; \

363  (
Ál£
); \

365 
a_©å
 \

366 
a_«me
##
	`tsd_boŸ1
() \

368 
a_«me
##
tsd_wøµî_t
 *
wøµî
; \

369 
wøµî
 = (
a_«me
##
tsd_wøµî_t
 *) \

370 
	`mÆloc_tsd_mÆloc
((
a_«me
##
tsd_wøµî_t
)); \

371 i‡(
wøµî
 =
NULL
) { \

372 
	`mÆloc_wrôe
("<jemalloc>: Errorállocating" \

374 
	`ab‹t
(); \

376 
	`mem˝y
(
wøµî
, &
a_«me
##
tsd_boŸ_wøµî
, \

377 (
a_«me
##
tsd_wøµî_t
)); \

378 
a_«me
##
	`tsd_wøµî_£t
(
wøµî
); \

380 
a_©å
 
boﬁ
 \

381 
a_«me
##
	`tsd_boŸ
() \

384 i‡(
a_«me
##
	`tsd_boŸ0
()) \

385  (
åue
); \

386 
a_«me
##
	`tsd_boŸ1
(); \

387  (
Ál£
); \

389 
a_©å
 
boﬁ
 \

390 
a_«me
##
	`tsd_boŸed_gë
() \

393  (
a_«me
##
tsd_boŸed
); \

396 
a_©å
 
a_ty≥
 * \

397 
a_«me
##
	`tsd_gë
() \

399 
a_«me
##
tsd_wøµî_t
 *
wøµî
; \

401 
	`as£π
(
a_«me
##
tsd_boŸed
); \

402 
wøµî
 = 
a_«me
##
	`tsd_wøµî_gë
(); \

403  (&
wøµî
->
vÆ
); \

405 
a_©å
 \

406 
a_«me
##
	`tsd_£t
(
a_ty≥
 *
vÆ
) \

408 
a_«me
##
tsd_wøµî_t
 *
wøµî
; \

410 
	`as£π
(
a_«me
##
tsd_boŸed
); \

411 
wøµî
 = 
a_«me
##
	`tsd_wøµî_gë
(); \

412 
wøµî
->
vÆ
 = *(val); \

413 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) \

414 
wøµî
->
öôülized
 = 
åue
; \

415 }

	)

417 
	#mÆloc_tsd_funcs
(
a_©å
, 
a_«me
, 
a_ty≥
, 
a_öôülizî
, \

418 
a_˛ónup
) \

420 
a_©å
 \

421 
a_«me
##
	`tsd_˛ónup_wøµî
(*
¨g
) \

423 
a_«me
##
tsd_wøµî_t
 *
wøµî
 = (a_«me##tsd_wøµî_à*)
¨g
; \

425 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
 && \

426 
wøµî
->
öôülized
) { \

427 
wøµî
->
öôülized
 = 
Ál£
; \

428 
	`a_˛ónup
(&
wøµî
->
vÆ
); \

429 i‡(
wøµî
->
öôülized
) { \

431 i‡(
	`±hªad_£t•ecific
(
a_«me
##
tsd_tsd
, \

432 (*)
wøµî
)) { \

433 
	`mÆloc_wrôe
("<jemalloc>: Error" \

435 i‡(
›t_ab‹t
) \

436 
	`ab‹t
(); \

441 
	`mÆloc_tsd_dÆloc
(
wøµî
); \

443 
a_©å
 \

444 
a_«me
##
	`tsd_wøµî_£t
◊_«me##
tsd_wøµî_t
 *
wøµî
) \

447 i‡(
	`±hªad_£t•ecific
(
a_«me
##
tsd_tsd
, \

448 (*)
wøµî
)) { \

449 
	`mÆloc_wrôe
("<jemalloc>: Error setting" \

451 
	`ab‹t
(); \

454 
a_©å
 
a_«me
##
tsd_wøµî_t
 * \

455 
a_«me
##
	`tsd_wøµî_gë
() \

457 
a_«me
##
tsd_wøµî_t
 *
wøµî
 = (a_name##tsd_wrapper_t *) \

458 
	`±hªad_gë•ecific
(
a_«me
##
tsd_tsd
); \

460 i‡(
	`u∆ikñy
(
wøµî
 =
NULL
)) { \

461 
tsd_öô_block_t
 
block
; \

462 
wøµî
 = 
	`tsd_öô_check_ªcursi⁄
( \

463 &
a_«me
##
tsd_öô_hód
, &
block
); \

464 i‡(
wøµî
) \

465  (
wøµî
); \

466 
wøµî
 = (
a_«me
##
tsd_wøµî_t
 *) \

467 
	`mÆloc_tsd_mÆloc
((
a_«me
##
tsd_wøµî_t
)); \

468 
block
.
d©a
 = 
wøµî
; \

469 i‡(
wøµî
 =
NULL
) { \

470 
	`mÆloc_wrôe
("<jemalloc>: Errorállocating" \

472 
	`ab‹t
(); \

474 
wøµî
->
öôülized
 = 
Ál£
; \

475 
wøµî
->
vÆ
 = 
a_öôülizî
; \

477 
a_«me
##
	`tsd_wøµî_£t
(
wøµî
); \

478 
	`tsd_öô_föish
(&
a_«me
##
tsd_öô_hód
, &
block
); \

480  (
wøµî
); \

482 
a_©å
 
boﬁ
 \

483 
a_«me
##
	`tsd_boŸ0
() \

486 i‡(
	`±hªad_key_¸óã
(&
a_«me
##
tsd_tsd
, \

487 
a_«me
##
tsd_˛ónup_wøµî
) != 0) \

488  (
åue
); \

489 
a_«me
##
	`tsd_wøµî_£t
(&a_«me##
tsd_boŸ_wøµî
); \

490 
a_«me
##
tsd_boŸed
 = 
åue
; \

491  (
Ál£
); \

493 
a_©å
 \

494 
a_«me
##
	`tsd_boŸ1
() \

496 
a_«me
##
tsd_wøµî_t
 *
wøµî
; \

497 
wøµî
 = (
a_«me
##
tsd_wøµî_t
 *) \

498 
	`mÆloc_tsd_mÆloc
((
a_«me
##
tsd_wøµî_t
)); \

499 i‡(
wøµî
 =
NULL
) { \

500 
	`mÆloc_wrôe
("<jemalloc>: Errorállocating" \

502 
	`ab‹t
(); \

504 
	`mem˝y
(
wøµî
, &
a_«me
##
tsd_boŸ_wøµî
, \

505 (
a_«me
##
tsd_wøµî_t
)); \

506 
a_«me
##
	`tsd_wøµî_£t
(
wøµî
); \

508 
a_©å
 
boﬁ
 \

509 
a_«me
##
	`tsd_boŸ
() \

512 i‡(
a_«me
##
	`tsd_boŸ0
()) \

513  (
åue
); \

514 
a_«me
##
	`tsd_boŸ1
(); \

515  (
Ál£
); \

517 
a_©å
 
boﬁ
 \

518 
a_«me
##
	`tsd_boŸed_gë
() \

521  (
a_«me
##
tsd_boŸed
); \

524 
a_©å
 
a_ty≥
 * \

525 
a_«me
##
	`tsd_gë
() \

527 
a_«me
##
tsd_wøµî_t
 *
wøµî
; \

529 
	`as£π
(
a_«me
##
tsd_boŸed
); \

530 
wøµî
 = 
a_«me
##
	`tsd_wøµî_gë
(); \

531  (&
wøµî
->
vÆ
); \

533 
a_©å
 \

534 
a_«me
##
	`tsd_£t
(
a_ty≥
 *
vÆ
) \

536 
a_«me
##
tsd_wøµî_t
 *
wøµî
; \

538 
	`as£π
(
a_«me
##
tsd_boŸed
); \

539 
wøµî
 = 
a_«me
##
	`tsd_wøµî_gë
(); \

540 
wøµî
->
vÆ
 = *(val); \

541 i‡(
a_˛ónup
 !
mÆloc_tsd_no_˛ónup
) \

542 
wøµî
->
öôülized
 = 
åue
; \

543 }

	)

548 #ifde‡
JEMALLOC_H_STRUCTS


550 #i‡(!
deföed
(
JEMALLOC_MALLOC_THREAD_CLEANUP
Ë&& !deföed(
JEMALLOC_TLS
) && \

551 !
	$deföed
(
_WIN32
))

552 
	stsd_öô_block_s
 {

553 
	`ql_ñm
(
tsd_öô_block_t
Ë
lök
;

554 
±hªad_t
 
thªad
;

555 *
d©a
;

557 
	stsd_öô_hód_s
 {

558 
	`ql_hód
(
tsd_öô_block_t
Ë
blocks
;

559 
mÆloc_muãx_t
 
lock
;

563 
	#MALLOC_TSD
 \

565 
	`O
(
tˇche
, 
tˇche_t
 *) \

566 
	`O
(
thªad_Æloˇãd
, 
uöt64_t
) \

567 
	`O
(
thªad_dóŒoˇãd
, 
uöt64_t
) \

568 
	`O
(
¥of_td©a
, 
¥of_td©a_t
 *) \

569 
	`O
(
üª«
, 
¨ía_t
 *) \

570 
	`O
(
¨ía
, 
¨ía_t
 *) \

571 
	`O
(
¨ías_td©a
, 
¨ía_td©a_t
 *) \

572 
	`O
(
«ª«s_td©a
, ) \

573 
	`O
(
¨ías_td©a_by∑ss
, 
boﬁ
) \

574 
	`O
(
tˇche_íabÀd
, 
tˇche_íabÀd_t
) \

575 
	`O
(
qu¨™töe
, 
qu¨™töe_t
 *) \

576 
	`O
(
wô√s£s
, 
wô√ss_li°_t
) \

577 
	`O
(
wô√ss_f‹k
, 
boﬁ
) \

578 

	)

579 
	#TSD_INITIALIZER
 { \

580 
tsd_°©e_unöôülized
, \

581 
NULL
, \

584 
NULL
, \

585 
NULL
, \

586 
NULL
, \

587 
NULL
, \

589 
Ál£
, \

590 
tˇche_íabÀd_deÁu…
, \

591 
NULL
, \

592 
	`ql_hód_öôülizî
(
wô√s£s
), \

593 
Ál£
 \

594 
	}

	)
}

596 
	stsd_s
 {

597 
tsd_°©e_t
 
	m°©e
;

598 
	#O
(
n
, 
t
) \

599 
t
 
n
;

	)

600 
	mMALLOC_TSD


601 #unde‡
O


609 
	stsdn_s
 {

610 
tsd_t
 
	mtsd
;

613 c⁄° 
tsd_t
 
	gtsd_öôülizî
 = 
TSD_INITIALIZER
;

615 
	$mÆloc_tsd_ty≥s
(, 
tsd_t
)

619 #ifde‡
JEMALLOC_H_EXTERNS


621 *
	`mÆloc_tsd_mÆloc
(
size_t
 
size
);

622 
	`mÆloc_tsd_dÆloc
(*
wøµî
);

623 
	`mÆloc_tsd_no_˛ónup
(*
¨g
);

624 
	`mÆloc_tsd_˛ónup_ªgi°î
(
	$boﬁ
 (*
f
)());

625 
tsd_t
 *
	`mÆloc_tsd_boŸ0
();

626 
	`mÆloc_tsd_boŸ1
();

627 #i‡(!
	`deföed
(
JEMALLOC_MALLOC_THREAD_CLEANUP
Ë&& !deföed(
JEMALLOC_TLS
) && \

628 !
	$deföed
(
_WIN32
))

629 *
	`tsd_öô_check_ªcursi⁄
(
tsd_öô_hód_t
 *
hód
,

630 
tsd_öô_block_t
 *
block
);

631 
	`tsd_öô_föish
(
tsd_öô_hód_t
 *
hód
, 
tsd_öô_block_t
 *
block
);

633 
	`tsd_˛ónup
(*
¨g
);

637 #ifde‡
JEMALLOC_H_INLINES


639 #i‚de‡
JEMALLOC_ENABLE_INLINE


640 
	`mÆloc_tsd_¥Ÿos
(
	`JEMALLOC_ATTR
(
unu£d
), , 
tsd_t
)

642 
tsd_t
 *
	`tsd_„tch
();

643 
tsdn_t
 *
	`tsd_tsdn
(
tsd_t
 *
tsd
);

644 
boﬁ
 
	`tsd_nomöÆ
(
tsd_t
 *
tsd
);

645 
	#O
(
n
, 
t
) \

646 
t
 *
tsd_
##
n
##
	`p_gë
(
tsd_t
 *
tsd
); \

647 
t
 
tsd_
##
n
##
	`_gë
(
tsd_t
 *
tsd
); \

648 
tsd_
##
n
##
	`_£t
(
tsd_t
 *
tsd
, 
t
Ç);

	)

649 
MALLOC_TSD


650 #unde‡
O


651 
tsdn_t
 *
	`tsdn_„tch
();

652 
boﬁ
 
	`tsdn_nuŒ
(c⁄° 
tsdn_t
 *
tsdn
);

653 
tsd_t
 *
	`tsdn_tsd
(
tsdn_t
 *
tsdn
);

656 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_TSD_C_
))

657 
	$mÆloc_tsd_exã∫s
(, 
tsd_t
)

658 
	$mÆloc_tsd_funcs
(
JEMALLOC_ALWAYS_INLINE
, , 
tsd_t
, 
tsd_öôülizî
, 
tsd_˛ónup
)

660 
JEMALLOC_ALWAYS_INLINE
 
tsd_t
 *

661 
	$tsd_„tch
()

663 
tsd_t
 *
tsd
 = 
	`tsd_gë
();

665 i‡(
	`u∆ikñy
(
tsd
->
°©e
 !
tsd_°©e_nomöÆ
)) {

666 i‡(
tsd
->
°©e
 =
tsd_°©e_unöôülized
) {

667 
tsd
->
°©e
 = 
tsd_°©e_nomöÆ
;

669 
	`tsd_£t
(
tsd
);

670 } i‡(
tsd
->
°©e
 =
tsd_°©e_purg©‹y
) {

671 
tsd
->
°©e
 = 
tsd_°©e_ªöˇ∫©ed
;

672 
	`tsd_£t
(
tsd
);

674 
	`as£π
(
tsd
->
°©e
 =
tsd_°©e_ªöˇ∫©ed
);

677  (
tsd
);

678 
	}
}

680 
JEMALLOC_ALWAYS_INLINE
 
tsdn_t
 *

681 
	$tsd_tsdn
(
tsd_t
 *
tsd
)

684  ((
tsdn_t
 *)
tsd
);

685 
	}
}

687 
JEMALLOC_INLINE
 
boﬁ


688 
	$tsd_nomöÆ
(
tsd_t
 *
tsd
)

691  (
tsd
->
°©e
 =
tsd_°©e_nomöÆ
);

692 
	}
}

694 
	#O
(
n
, 
t
) \

695 
JEMALLOC_ALWAYS_INLINE
 
t
 * \

696 
tsd_
##
n
##
	`p_gë
(
tsd_t
 *
tsd
) \

699  (&
tsd
->
n
); \

702 
JEMALLOC_ALWAYS_INLINE
 
t
 \

703 
tsd_
##
n
##
	`_gë
(
tsd_t
 *
tsd
) \

706  (*
tsd_
##
n
##
	`p_gë
(
tsd
)); \

709 
JEMALLOC_ALWAYS_INLINE
 \

710 
tsd_
##
n
##
	`_£t
(
tsd_t
 *
tsd
, 
t
Ç) \

713 
	`as£π
(
tsd
->
°©e
 =
tsd_°©e_nomöÆ
); \

714 
tsd
->
n
 =Ç; \

715 }

	)

716 
	gMALLOC_TSD


717 #unde‡
O


719 
JEMALLOC_ALWAYS_INLINE
 
tsdn_t
 *

720 
	$tsdn_„tch
()

723 i‡(!
	`tsd_boŸed_gë
())

724  (
NULL
);

726  (
	`tsd_tsdn
(
	`tsd_„tch
()));

727 
	}
}

729 
JEMALLOC_ALWAYS_INLINE
 
boﬁ


730 
	$tsdn_nuŒ
(c⁄° 
tsdn_t
 *
tsdn
)

733  (
tsdn
 =
NULL
);

734 
	}
}

736 
JEMALLOC_ALWAYS_INLINE
 
tsd_t
 *

737 
	$tsdn_tsd
(
tsdn_t
 *
tsdn
)

740 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
));

742  (&
tsdn
->
tsd
);

743 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/util.h

2 #ifde‡
JEMALLOC_H_TYPES


4 #ifde‡
_WIN32


5 #ifde‡
_WIN64


6 
	#FMT64_PREFIX
 "Œ"

	)

7 
	#FMTPTR_PREFIX
 "Œ"

	)

9 
	#FMT64_PREFIX
 "Œ"

	)

10 
	#FMTPTR_PREFIX
 ""

	)

12 
	#FMTd32
 "d"

	)

13 
	#FMTu32
 "u"

	)

14 
	#FMTx32
 "x"

	)

15 
	#FMTd64
 
FMT64_PREFIX
 "d"

	)

16 
	#FMTu64
 
FMT64_PREFIX
 "u"

	)

17 
	#FMTx64
 
FMT64_PREFIX
 "x"

	)

18 
	#FMTdPTR
 
FMTPTR_PREFIX
 "d"

	)

19 
	#FMTuPTR
 
FMTPTR_PREFIX
 "u"

	)

20 
	#FMTxPTR
 
FMTPTR_PREFIX
 "x"

	)

22 
	~<öây≥s.h
>

23 
	#FMTd32
 
PRId32


	)

24 
	#FMTu32
 
PRIu32


	)

25 
	#FMTx32
 
PRIx32


	)

26 
	#FMTd64
 
PRId64


	)

27 
	#FMTu64
 
PRIu64


	)

28 
	#FMTx64
 
PRIx64


	)

29 
	#FMTdPTR
 
PRIdPTR


	)

30 
	#FMTuPTR
 
PRIuPTR


	)

31 
	#FMTxPTR
 
PRIxPTR


	)

35 
	#BUFERROR_BUF
 64

	)

41 
	#MALLOC_PRINTF_BUFSIZE
 4096

	)

44 
	#JEMALLOC_ALLOC_JUNK
 ((
uöt8_t
)0xa5)

	)

45 
	#JEMALLOC_FREE_JUNK
 ((
uöt8_t
)0x5a)

	)

51 
	#JEMALLOC_ARG_CONCAT
(...Ë
__VA_ARGS__


	)

58 #ifde‡
JEMALLOC_CC_SILENCE


59 
	#JEMALLOC_CC_SILENCE_INIT
(
v
Ë
	)
v

61 
	#JEMALLOC_CC_SILENCE_INIT
(
v
)

	)

64 
	#JEMALLOC_GNUC_PREREQ
(
maj‹
, 
mö‹
) \

65 (!
	`deföed
(
__˛™g__
) && \

66 (
__GNUC__
 > (
maj‹
Ë|| (__GNUC__ =(maj‹Ë&& 
__GNUC_MINOR__
 >(
mö‹
))))

	)

67 #i‚de‡
__has_buûtö


68 
	#__has_buûtö
(
buûtö
Ë(0)

	)

70 
	#JEMALLOC_CLANG_HAS_BUILTIN
(
buûtö
) \

71 (
	`deföed
(
__˛™g__
Ë&& 
	`__has_buûtö
(
buûtö
))

	)

73 #ifde‡
__GNUC__


74 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

75 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

76 #i‡
JEMALLOC_GNUC_PREREQ
(4, 6) || \

77 
	$JEMALLOC_CLANG_HAS_BUILTIN
(
__buûtö_uƒóchabÀ
)

78 
	#uƒóchabÀ
(Ë
	`__buûtö_uƒóchabÀ
()

	)

80 
	#uƒóchabÀ
(Ë
	`ab‹t
()

	)

83 
	#likñy
(
x
Ë!!(x)

	)

84 
	#u∆ikñy
(
x
Ë!!(x)

	)

85 
	#uƒóchabÀ
(Ë
	`ab‹t
()

	)

88 
	~"jemÆloc/öã∫Æ/as£π.h
"

91 
	#ˇs£π
(
c
) do { \

92 i‡(
	`u∆ikñy
(!(
c
))) \

93 
	`nŸ_ªached
(); \

94 
	}
} 0)

	)

98 #ifde‡
JEMALLOC_H_STRUCTS


102 #ifde‡
JEMALLOC_H_EXTERNS


104 
bu„º‹
(
îr
, *
buf
, 
size_t
 
buÊí
);

105 
uötmax_t
 
mÆloc_°πoumax
(c⁄° *
ª°ri˘
 
≈å
,

106 **
ª°ri˘
 
íd±r
, 
ba£
);

107 
mÆloc_wrôe
(c⁄° *
s
);

113 
size_t
 
mÆloc_v¢¥ötf
(*
°r
, size_à
size
, c⁄° *
f‹m©
,

114 
va_li°
 
≠
);

115 
size_t
 
	$mÆloc_¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

116 
	`JEMALLOC_FORMAT_PRINTF
(3, 4);

117 
	`mÆloc_v˝rötf
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

118 c⁄° *
f‹m©
, 
va_li°
 
≠
);

119 
	$mÆloc_˝rötf
((*
wrôe
)(*, c⁄° *), *
cb›aque
,

120 c⁄° *
f‹m©
, ...Ë
	`JEMALLOC_FORMAT_PRINTF
(3, 4);

121 
	$mÆloc_¥ötf
(c⁄° *
f‹m©
, ...Ë
	`JEMALLOC_FORMAT_PRINTF
(1, 2);

125 #ifde‡
JEMALLOC_H_INLINES


127 #i‚de‡
JEMALLOC_ENABLE_INLINE


128 
	`ffs_Œu
(
bôm≠
);

129 
	`ffs_lu
(
bôm≠
);

130 
	`ffs_u
(
bôm≠
);

131 
	`ffs_zu
(
size_t
 
bôm≠
);

132 
	`ffs_u64
(
uöt64_t
 
bôm≠
);

133 
	`ffs_u32
(
uöt32_t
 
bôm≠
);

134 
uöt64_t
 
	`pow2_˚û_u64
(uöt64_à
x
);

135 
uöt32_t
 
	`pow2_˚û_u32
(uöt32_à
x
);

136 
size_t
 
	`pow2_˚û_zu
(size_à
x
);

137 
	`lg_Êo‹
(
size_t
 
x
);

138 
	`£t_î∫o
(
î∫um
);

139 
	`gë_î∫o
();

142 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_UTIL_C_
))

145 #i‡!
	`deföed
(
JEMALLOC_INTERNAL_FFSLL
Ë|| !deföed(
JEMALLOC_INTERNAL_FFSL
) \

146 || !
	$deföed
(
JEMALLOC_INTERNAL_FFS
)

147 #îr‹ 
JEMALLOC_INTERNAL_FFS
{,
L
,
LL
} should havêbì¿deföed by c⁄figuª

150 
JEMALLOC_ALWAYS_INLINE
 

151 
	$ffs_Œu
(
bôm≠
)

154  (
	`JEMALLOC_INTERNAL_FFSLL
(
bôm≠
));

155 
	}
}

157 
JEMALLOC_ALWAYS_INLINE
 

158 
	$ffs_lu
(
bôm≠
)

161  (
	`JEMALLOC_INTERNAL_FFSL
(
bôm≠
));

162 
	}
}

164 
JEMALLOC_ALWAYS_INLINE
 

165 
	$ffs_u
(
bôm≠
)

168  (
	`JEMALLOC_INTERNAL_FFS
(
bôm≠
));

169 
	}
}

171 
JEMALLOC_ALWAYS_INLINE
 

172 
	$ffs_zu
(
size_t
 
bôm≠
)

175 #i‡
LG_SIZEOF_PTR
 =
LG_SIZEOF_INT


176  (
	`ffs_u
(
bôm≠
));

177 #ñi‡
LG_SIZEOF_PTR
 =
LG_SIZEOF_LONG


178  (
	`ffs_lu
(
bôm≠
));

179 #ñi‡
LG_SIZEOF_PTR
 =
LG_SIZEOF_LONG_LONG


180  (
	`ffs_Œu
(
bôm≠
));

182 #îr‹ 
No
 
im∂emíèti⁄
 
size_t
 
	`ffs
()

184 
	}
}

186 
JEMALLOC_ALWAYS_INLINE
 

187 
	$ffs_u64
(
uöt64_t
 
bôm≠
)

190 #i‡
LG_SIZEOF_LONG
 == 3

191  (
	`ffs_lu
(
bôm≠
));

192 #ñi‡
LG_SIZEOF_LONG_LONG
 == 3

193  (
	`ffs_Œu
(
bôm≠
));

195 #îr‹ 
No
 
im∂emíèti⁄
 64-
bô
 
	`ffs
()

197 
	}
}

199 
JEMALLOC_ALWAYS_INLINE
 

200 
	$ffs_u32
(
uöt32_t
 
bôm≠
)

203 #i‡
LG_SIZEOF_INT
 == 2

204  (
	`ffs_u
(
bôm≠
));

206 #îr‹ 
No
 
im∂emíèti⁄
 32-
bô
 
	`ffs
()

208  (
	`ffs_u
(
bôm≠
));

209 
	}
}

211 
JEMALLOC_INLINE
 
uöt64_t


212 
	$pow2_˚û_u64
(
uöt64_t
 
x
)

215 
x
--;

216 
x
 |= x >> 1;

217 
x
 |= x >> 2;

218 
x
 |= x >> 4;

219 
x
 |= x >> 8;

220 
x
 |= x >> 16;

221 
x
 |= x >> 32;

222 
x
++;

223  (
x
);

224 
	}
}

226 
JEMALLOC_INLINE
 
uöt32_t


227 
	$pow2_˚û_u32
(
uöt32_t
 
x
)

230 
x
--;

231 
x
 |= x >> 1;

232 
x
 |= x >> 2;

233 
x
 |= x >> 4;

234 
x
 |= x >> 8;

235 
x
 |= x >> 16;

236 
x
++;

237  (
x
);

238 
	}
}

241 
JEMALLOC_INLINE
 
size_t


242 
	$pow2_˚û_zu
(
size_t
 
x
)

245 #i‡(
LG_SIZEOF_PTR
 == 3)

246  (
	`pow2_˚û_u64
(
x
));

248  (
	`pow2_˚û_u32
(
x
));

250 
	}
}

252 #i‡(
deföed
(
__i386__
Ë|| deföed(
__amd64__
Ë|| deföed(
__x86_64__
))

253 
JEMALLOC_INLINE
 

254 
	$lg_Êo‹
(
size_t
 
x
)

256 
size_t
 
ªt
;

258 
	`as£π
(
x
 != 0);

260 
	`asm
 ("bsr %1, %0"

261 : "Ù"(
ªt
)

262 : "r"(
x
)

264 
	`as£π
(
ªt
 < 
UINT_MAX
);

265  (()
ªt
);

266 
	}
}

267 #ñi‡(
deföed
(
_MSC_VER
))

268 
JEMALLOC_INLINE
 

269 
	$lg_Êo‹
(
size_t
 
x
)

271 
ªt
;

273 
	`as£π
(
x
 != 0);

275 #i‡(
LG_SIZEOF_PTR
 == 3)

276 
	`_BôSˇnRevî£64
(&
ªt
, 
x
);

277 #ñi‡(
LG_SIZEOF_PTR
 == 2)

278 
	`_BôSˇnRevî£
(&
ªt
, 
x
);

282 
	`as£π
(
ªt
 < 
UINT_MAX
);

283  (()
ªt
);

284 
	}
}

285 #ñi‡(
deföed
(
JEMALLOC_HAVE_BUILTIN_CLZ
))

286 
JEMALLOC_INLINE
 

287 
	$lg_Êo‹
(
size_t
 
x
)

290 
	`as£π
(
x
 != 0);

292 #i‡(
LG_SIZEOF_PTR
 =
LG_SIZEOF_INT
)

293  (((8 << 
LG_SIZEOF_PTR
Ë- 1Ë- 
	`__buûtö_˛z
(
x
));

294 #ñi‡(
LG_SIZEOF_PTR
 =
LG_SIZEOF_LONG
)

295  (((8 << 
LG_SIZEOF_PTR
Ë- 1Ë- 
	`__buûtö_˛zl
(
x
));

299 
	}
}

301 
JEMALLOC_INLINE
 

302 
	$lg_Êo‹
(
size_t
 
x
)

305 
	`as£π
(
x
 != 0);

307 
x
 |= (x >> 1);

308 
x
 |= (x >> 2);

309 
x
 |= (x >> 4);

310 
x
 |= (x >> 8);

311 
x
 |= (x >> 16);

312 #i‡(
LG_SIZEOF_PTR
 == 3)

313 
x
 |= (x >> 32);

315 i‡(
x
 =
SIZE_T_MAX
)

316  ((8 << 
LG_SIZEOF_PTR
) - 1);

317 
x
++;

318  (
	`ffs_zu
(
x
) - 2);

319 
	}
}

323 
JEMALLOC_INLINE
 

324 
	$£t_î∫o
(
î∫um
)

327 #ifde‡
_WIN32


328 
	`SëLa°Eº‹
(
î∫um
);

330 
î∫o
 = 
î∫um
;

332 
	}
}

335 
JEMALLOC_INLINE
 

336 
	$gë_î∫o
()

339 #ifde‡
_WIN32


340  (
	`GëLa°Eº‹
());

342  (
î∫o
);

344 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/internal/valgrind.h

2 #ifde‡
JEMALLOC_H_TYPES


4 #ifde‡
JEMALLOC_VALGRIND


5 
	~<vÆgröd/vÆgröd.h
>

16 
	#JEMALLOC_VALGRIND_MAKE_MEM_NOACCESS
(
±r
, 
usize
) do { \

17 i‡(
	`u∆ikñy
(
ö_vÆgröd
)) \

18 
	`vÆgröd_make_mem_nﬂc˚ss
(
±r
, 
usize
); \

19 } 0)

	)

20 
	#JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
±r
, 
usize
) do { \

21 i‡(
	`u∆ikñy
(
ö_vÆgröd
)) \

22 
	`vÆgröd_make_mem_undeföed
(
±r
, 
usize
); \

23 } 0)

	)

24 
	#JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
(
±r
, 
usize
) do { \

25 i‡(
	`u∆ikñy
(
ö_vÆgröd
)) \

26 
	`vÆgröd_make_mem_deföed
(
±r
, 
usize
); \

27 } 0)

	)

33 
	#JEMALLOC_VALGRIND_MALLOC
(
c⁄d
, 
tsdn
, 
±r
, 
usize
, 
zîo
) do { \

34 i‡(
	`u∆ikñy
(
ö_vÆgröd
 && 
c⁄d
)) { \

35 
	`VALGRIND_MALLOCLIKE_BLOCK
(
±r
, 
usize
, 
	`p2rz
(
tsdn
,Ötr), \

36 
zîo
); \

38 } 0)

	)

39 
	#JEMALLOC_VALGRIND_REALLOC
(
maybe_moved
, 
tsdn
, 
±r
, 
usize
, \

40 
±r_maybe_nuŒ
, 
ﬁd_±r
, 
ﬁd_usize
, 
ﬁd_rzsize
, 
ﬁd_±r_maybe_nuŒ
, \

41 
zîo
) do { \

42 i‡(
	`u∆ikñy
(
ö_vÆgröd
)) { \

43 
size_t
 
rzsize
 = 
	`p2rz
(
tsdn
, 
±r
); \

45 i‡(!
maybe_moved
 || 
±r
 =
ﬁd_±r
) { \

46 
	`VALGRIND_RESIZEINPLACE_BLOCK
(
±r
, 
ﬁd_usize
, \

47 
usize
, 
rzsize
); \

48 i‡(
zîo
 && 
ﬁd_usize
 < 
usize
) { \

49 
	`vÆgröd_make_mem_deföed
( \

50 (*)((
uöçå_t
)
±r
 + \

51 
ﬁd_usize
), 
usize
 - old_usize); \

54 i‡(!
ﬁd_±r_maybe_nuŒ
 || 
ﬁd_±r
 !
NULL
) { \

55 
	`vÆgröd_‰ìlike_block
(
ﬁd_±r
, \

56 
ﬁd_rzsize
); \

58 i‡(!
±r_maybe_nuŒ
 || 
±r
 !
NULL
) { \

59 
size_t
 
c›y_size
 = (
ﬁd_usize
 < 
usize
) \

60 ? 
ﬁd_usize
 : 
usize
; \

61 
size_t
 
èû_size
 = 
usize
 - 
c›y_size
; \

62 
	`VALGRIND_MALLOCLIKE_BLOCK
(
±r
, 
usize
, \

63 
rzsize
, 
Ál£
); \

64 i‡(
c›y_size
 > 0) { \

65 
	`vÆgröd_make_mem_deföed
(
±r
, \

66 
c›y_size
); \

68 i‡(
zîo
 && 
èû_size
 > 0) { \

69 
	`vÆgröd_make_mem_deföed
( \

70 (*)((
uöçå_t
)
±r
 + \

71 
c›y_size
), 
èû_size
); \

76 } 0)

	)

77 
	#JEMALLOC_VALGRIND_FREE
(
±r
, 
rzsize
) do { \

78 i‡(
	`u∆ikñy
(
ö_vÆgröd
)) \

79 
	`vÆgröd_‰ìlike_block
(
±r
, 
rzsize
); \

80 } 0)

	)

82 
	#RUNNING_ON_VALGRIND
 (()0)

	)

83 
	#JEMALLOC_VALGRIND_MAKE_MEM_NOACCESS
(
±r
, 
usize
Ëdÿ{} 0)

	)

84 
	#JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
±r
, 
usize
Ëdÿ{} 0)

	)

85 
	#JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
(
±r
, 
usize
Ëdÿ{} 0)

	)

86 
	#JEMALLOC_VALGRIND_MALLOC
(
c⁄d
, 
tsdn
, 
±r
, 
usize
, 
zîo
Ëdÿ{} 0)

	)

87 
	#JEMALLOC_VALGRIND_REALLOC
(
maybe_moved
, 
tsdn
, 
±r
, 
usize
, \

88 
±r_maybe_nuŒ
, 
ﬁd_±r
, 
ﬁd_usize
, 
ﬁd_rzsize
, 
ﬁd_±r_maybe_nuŒ
, \

89 
zîo
Ëdÿ{} 0)

	)

90 
	#JEMALLOC_VALGRIND_FREE
(
±r
, 
rzsize
Ëdÿ{} 0)

	)

95 #ifde‡
JEMALLOC_H_STRUCTS


99 #ifde‡
JEMALLOC_H_EXTERNS


101 #ifde‡
JEMALLOC_VALGRIND


102 
vÆgröd_make_mem_nﬂc˚ss
(*
±r
, 
size_t
 
usize
);

103 
vÆgröd_make_mem_undeföed
(*
±r
, 
size_t
 
usize
);

104 
vÆgröd_make_mem_deföed
(*
±r
, 
size_t
 
usize
);

105 
vÆgröd_‰ìlike_block
(*
±r
, 
size_t
 
usize
);

110 #ifde‡
JEMALLOC_H_INLINES


	@dep/jemalloc-4.2.0/include/jemalloc/internal/witness.h

2 #ifde‡
JEMALLOC_H_TYPES


4 
wô√ss_s
 
	twô√ss_t
;

5 
	twô√ss_ønk_t
;

6 
	$ql_hód
(
	twô√ss_t
Ë
	twô√ss_li°_t
;

7 
	twô√ss_comp_t
 (c⁄° 
	twô√ss_t
 *, const witness_t *);

13 
	#WITNESS_RANK_OMIT
 0U

	)

15 
	#WITNESS_RANK_INIT
 1U

	)

16 
	#WITNESS_RANK_CTL
 1U

	)

17 
	#WITNESS_RANK_ARENAS
 2U

	)

19 
	#WITNESS_RANK_PROF_DUMP
 3U

	)

20 
	#WITNESS_RANK_PROF_BT2GCTX
 4U

	)

21 
	#WITNESS_RANK_PROF_TDATAS
 5U

	)

22 
	#WITNESS_RANK_PROF_TDATA
 6U

	)

23 
	#WITNESS_RANK_PROF_GCTX
 7U

	)

25 
	#WITNESS_RANK_ARENA
 8U

	)

26 
	#WITNESS_RANK_ARENA_CHUNKS
 9U

	)

27 
	#WITNESS_RANK_ARENA_NODE_CACHE
 10

	)

29 
	#WITNESS_RANK_BASE
 11U

	)

31 
	#WITNESS_RANK_LEAF
 0xffffffffU

	)

32 
	#WITNESS_RANK_ARENA_BIN
 
WITNESS_RANK_LEAF


	)

33 
	#WITNESS_RANK_ARENA_HUGE
 
WITNESS_RANK_LEAF


	)

34 
	#WITNESS_RANK_DSS
 
WITNESS_RANK_LEAF


	)

35 
	#WITNESS_RANK_PROF_ACTIVE
 
WITNESS_RANK_LEAF


	)

36 
	#WITNESS_RANK_PROF_DUMP_SEQ
 
WITNESS_RANK_LEAF


	)

37 
	#WITNESS_RANK_PROF_GDUMP
 
WITNESS_RANK_LEAF


	)

38 
	#WITNESS_RANK_PROF_NEXT_THR_UID
 
WITNESS_RANK_LEAF


	)

39 
	#WITNESS_RANK_PROF_THREAD_ACTIVE_INIT
 
WITNESS_RANK_LEAF


	)

41 
	#WITNESS_INITIALIZER
(
ønk
Ë{"öôülizî",Ñ™k, 
NULL
, {NULL, NULL}
	}

	)
}

45 #ifde‡
JEMALLOC_H_STRUCTS


47 
	swô√ss_s
 {

49 c⁄° *
	m«me
;

55 
wô√ss_ønk_t
 
	mønk
;

62 
wô√ss_comp_t
 *
	mcomp
;

65 
ql_ñm
(
wô√ss_t
Ë
	mlök
;

70 #ifde‡
JEMALLOC_H_EXTERNS


72 
wô√ss_öô
(
wô√ss_t
 *
wô√ss
, c⁄° *
«me
, 
wô√ss_ønk_t
 
ønk
,

73 
wô√ss_comp_t
 *
comp
);

74 #ifde‡
JEMALLOC_JET


75 (
	twô√ss_lock_îr‹_t
)(c⁄° 
	twô√ss_li°_t
 *, c⁄° 
	twô√ss_t
 *);

76 
wô√ss_lock_îr‹_t
 *
wô√ss_lock_îr‹
;

78 
	`wô√ss_lock_îr‹
(c⁄° 
wô√ss_li°_t
 *
wô√s£s
,

79 c⁄° 
wô√ss_t
 *
wô√ss
);

81 #ifde‡
JEMALLOC_JET


82 (
	twô√ss_ow√r_îr‹_t
)(c⁄° 
	twô√ss_t
 *);

83 
wô√ss_ow√r_îr‹_t
 *
wô√ss_ow√r_îr‹
;

85 
	`wô√ss_ow√r_îr‹
(c⁄° 
wô√ss_t
 *
wô√ss
);

87 #ifde‡
JEMALLOC_JET


88 (
	twô√ss_nŸ_ow√r_îr‹_t
)(c⁄° 
	twô√ss_t
 *);

89 
wô√ss_nŸ_ow√r_îr‹_t
 *
wô√ss_nŸ_ow√r_îr‹
;

91 
	`wô√ss_nŸ_ow√r_îr‹
(c⁄° 
wô√ss_t
 *
wô√ss
);

93 #ifde‡
JEMALLOC_JET


94 (
	twô√ss_lockÀss_îr‹_t
)(c⁄° 
	twô√ss_li°_t
 *);

95 
wô√ss_lockÀss_îr‹_t
 *
wô√ss_lockÀss_îr‹
;

97 
	`wô√ss_lockÀss_îr‹
(c⁄° 
wô√ss_li°_t
 *
wô√s£s
);

100 
	`wô√s£s_˛ónup
(
tsd_t
 *
tsd
);

101 
	`wô√ss_f‹k_˛ónup
(
tsd_t
 *
tsd
);

102 
	`wô√ss_¥ef‹k
(
tsd_t
 *
tsd
);

103 
	`wô√ss_po°f‹k_∑ª¡
(
tsd_t
 *
tsd
);

104 
	`wô√ss_po°f‹k_chûd
(
tsd_t
 *
tsd
);

108 #ifde‡
JEMALLOC_H_INLINES


110 #i‚de‡
JEMALLOC_ENABLE_INLINE


111 
	`wô√ss_as£π_ow√r
(
tsdn_t
 *
tsdn
, c⁄° 
wô√ss_t
 *
wô√ss
);

112 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn_t
 *
tsdn
, c⁄° 
wô√ss_t
 *
wô√ss
);

113 
	`wô√ss_as£π_lockÀss
(
tsdn_t
 *
tsdn
);

114 
	`wô√ss_lock
(
tsdn_t
 *
tsdn
, 
wô√ss_t
 *
wô√ss
);

115 
	`wô√ss_u∆ock
(
tsdn_t
 *
tsdn
, 
wô√ss_t
 *
wô√ss
);

118 #i‡(
	`deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
JEMALLOC_MUTEX_C_
))

119 
JEMALLOC_INLINE
 

120 
	$wô√ss_as£π_ow√r
(
tsdn_t
 *
tsdn
, c⁄° 
wô√ss_t
 *
wô√ss
)

122 
tsd_t
 *
tsd
;

123 
wô√ss_li°_t
 *
wô√s£s
;

124 
wô√ss_t
 *
w
;

126 i‡(!
c⁄fig_debug
)

129 i‡(
	`tsdn_nuŒ
(
tsdn
))

131 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

132 i‡(
wô√ss
->
ønk
 =
WITNESS_RANK_OMIT
)

135 
wô√s£s
 = 
	`tsd_wô√s£•_gë
(
tsd
);

136 
	`ql_f‹óch
(
w
, 
wô√s£s
, 
lök
) {

137 i‡(
w
 =
wô√ss
)

140 
	`wô√ss_ow√r_îr‹
(
wô√ss
);

141 
	}
}

143 
JEMALLOC_INLINE
 

144 
	$wô√ss_as£π_nŸ_ow√r
(
tsdn_t
 *
tsdn
, c⁄° 
wô√ss_t
 *
wô√ss
)

146 
tsd_t
 *
tsd
;

147 
wô√ss_li°_t
 *
wô√s£s
;

148 
wô√ss_t
 *
w
;

150 i‡(!
c⁄fig_debug
)

153 i‡(
	`tsdn_nuŒ
(
tsdn
))

155 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

156 i‡(
wô√ss
->
ønk
 =
WITNESS_RANK_OMIT
)

159 
wô√s£s
 = 
	`tsd_wô√s£•_gë
(
tsd
);

160 
	`ql_f‹óch
(
w
, 
wô√s£s
, 
lök
) {

161 i‡(
w
 =
wô√ss
)

162 
	`wô√ss_nŸ_ow√r_îr‹
(
wô√ss
);

164 
	}
}

166 
JEMALLOC_INLINE
 

167 
	$wô√ss_as£π_lockÀss
(
tsdn_t
 *
tsdn
)

169 
tsd_t
 *
tsd
;

170 
wô√ss_li°_t
 *
wô√s£s
;

171 
wô√ss_t
 *
w
;

173 i‡(!
c⁄fig_debug
)

176 i‡(
	`tsdn_nuŒ
(
tsdn
))

178 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

180 
wô√s£s
 = 
	`tsd_wô√s£•_gë
(
tsd
);

181 
w
 = 
	`ql_œ°
(
wô√s£s
, 
lök
);

182 i‡(
w
 !
NULL
)

183 
	`wô√ss_lockÀss_îr‹
(
wô√s£s
);

184 
	}
}

186 
JEMALLOC_INLINE
 

187 
	$wô√ss_lock
(
tsdn_t
 *
tsdn
, 
wô√ss_t
 *
wô√ss
)

189 
tsd_t
 *
tsd
;

190 
wô√ss_li°_t
 *
wô√s£s
;

191 
wô√ss_t
 *
w
;

193 i‡(!
c⁄fig_debug
)

196 i‡(
	`tsdn_nuŒ
(
tsdn
))

198 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

199 i‡(
wô√ss
->
ønk
 =
WITNESS_RANK_OMIT
)

202 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, 
wô√ss
);

204 
wô√s£s
 = 
	`tsd_wô√s£•_gë
(
tsd
);

205 
w
 = 
	`ql_œ°
(
wô√s£s
, 
lök
);

206 i‡(
w
 =
NULL
) {

208 } i‡(
	`tsd_wô√ss_f‹k_gë
(
tsd
Ë&& 
w
->
ønk
 <
wô√ss
->rank) {

210 } i‡(
w
->
ønk
 > 
wô√ss
->rank) {

212 
	`wô√ss_lock_îr‹
(
wô√s£s
, 
wô√ss
);

213 } i‡(
w
->
ønk
 =
wô√ss
->ønk && (w->
comp
 =
NULL
 || w->comp !=

214 
wô√ss
->
comp
 || 
w
->
	`comp
(w, witness) > 0)) {

219 
	`wô√ss_lock_îr‹
(
wô√s£s
, 
wô√ss
);

222 
	`ql_ñm_√w
(
wô√ss
, 
lök
);

223 
	`ql_èû_ö£π
(
wô√s£s
, 
wô√ss
, 
lök
);

224 
	}
}

226 
JEMALLOC_INLINE
 

227 
	$wô√ss_u∆ock
(
tsdn_t
 *
tsdn
, 
wô√ss_t
 *
wô√ss
)

229 
tsd_t
 *
tsd
;

230 
wô√ss_li°_t
 *
wô√s£s
;

232 i‡(!
c⁄fig_debug
)

235 i‡(
	`tsdn_nuŒ
(
tsdn
))

237 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

238 i‡(
wô√ss
->
ønk
 =
WITNESS_RANK_OMIT
)

241 
	`wô√ss_as£π_ow√r
(
tsdn
, 
wô√ss
);

243 
wô√s£s
 = 
	`tsd_wô√s£•_gë
(
tsd
);

244 
	`ql_ªmove
(
wô√s£s
, 
wô√ss
, 
lök
);

245 
	}
}

	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc.h

1 #i‚de‡
JEMALLOC_H_


2 
	#JEMALLOC_H_


	)

3 #ifde‡
__˝lu•lus


8 
	#JEMALLOC_HAVE_ATTR


	)

11 
	#JEMALLOC_HAVE_ATTR_ALLOC_SIZE


	)

14 
	#JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF


	)

17 
	#JEMALLOC_HAVE_ATTR_FORMAT_PRINTF


	)

23 
	#JEMALLOC_OVERRIDE_MEMALIGN


	)

24 
	#JEMALLOC_OVERRIDE_VALLOC


	)

33 
	#JEMALLOC_USABLE_SIZE_CONST


	)

40 
	#JEMALLOC_USE_CXX_THROW


	)

42 #ifde‡
_MSC_VER


43 #ifde‡
_WIN64


44 
	#LG_SIZEOF_PTR_WIN
 3

	)

46 
	#LG_SIZEOF_PTR_WIN
 2

	)

51 
	#LG_SIZEOF_PTR
 3

	)

58 #i‚de‡
JEMALLOC_NO_RENAME


59 
	#je_mÆloc_c⁄f
 
je_mÆloc_c⁄f


	)

60 
	#je_mÆloc_mesßge
 
je_mÆloc_mesßge


	)

61 
	#je_mÆloc
 
je_mÆloc


	)

62 
	#je_ˇŒoc
 
je_ˇŒoc


	)

63 
	#je_posix_memÆign
 
je_posix_memÆign


	)

64 
	#je_Æig√d_Æloc
 
je_Æig√d_Æloc


	)

65 
	#je_ªÆloc
 
je_ªÆloc


	)

66 
	#je_‰ì
 
je_‰ì


	)

67 
	#je_mÆlocx
 
je_mÆlocx


	)

68 
	#je_øŒocx
 
je_øŒocx


	)

69 
	#je_xÆlocx
 
je_xÆlocx


	)

70 
	#je_ßŒocx
 
je_ßŒocx


	)

71 
	#je_dÆlocx
 
je_dÆlocx


	)

72 
	#je_sdÆlocx
 
je_sdÆlocx


	)

73 
	#je_«Œocx
 
je_«Œocx


	)

74 
	#je_mÆl˘l
 
je_mÆl˘l


	)

75 
	#je_mÆl˘ amëomib
 
je_mÆl˘ amëomib


	)

76 
	#je_mÆl˘lbymib
 
je_mÆl˘lbymib


	)

77 
	#je_mÆloc_°©s_¥öt
 
je_mÆloc_°©s_¥öt


	)

78 
	#je_mÆloc_ußbÀ_size
 
je_mÆloc_ußbÀ_size


	)

79 
	#je_memÆign
 
je_memÆign


	)

80 
	#je_vÆloc
 
je_vÆloc


	)

83 
	~<°dlib.h
>

84 
	~<°dboﬁ.h
>

85 
	~<°döt.h
>

86 
	~<limôs.h
>

87 
	~<°rögs.h
>

89 
	#JEMALLOC_VERSION
 "4.2.0-0-gf70a254d44c8d30af2cd5d30531fb18fdabØe6d"

	)

90 
	#JEMALLOC_VERSION_MAJOR
 4

	)

91 
	#JEMALLOC_VERSION_MINOR
 2

	)

92 
	#JEMALLOC_VERSION_BUGFIX
 0

	)

93 
	#JEMALLOC_VERSION_NREV
 0

	)

94 
	#JEMALLOC_VERSION_GID
 "f70a254d44c8d30af2cd5d30531fb18fdabØe6d"

	)

96 
	#MALLOCX_LG_ALIGN
(
œ
Ë(()÷a))

	)

97 #i‡
LG_SIZEOF_PTR
 == 2

98 
	#MALLOCX_ALIGN
(
a
Ë(()(
	`ffs
(()◊))-1))

	)

100 
	#MALLOCX_ALIGN
(
a
) \

101 (()(((
size_t
)(
a
Ë< (size_t)
INT_MAX
Ë? 
	`ffs
(()(a))-1 : \

102 
	`ffs
(()(((
size_t
)(
a
))>>32))+31))

	)

104 
	#MALLOCX_ZERO
 (()0x40)

	)

109 
	#MALLOCX_TCACHE
(
tc
Ë(()((—c)+2Ë<< 8))

	)

110 
	#MALLOCX_TCACHE_NONE
 
	`MALLOCX_TCACHE
(-1)

	)

114 
	#MALLOCX_ARENA
(
a
Ë(((()◊))+1Ë<< 20)

	)

116 #i‡
deföed
(
__˝lu•lus
Ë&& deföed(
JEMALLOC_USE_CXX_THROW
)

117 
	#JEMALLOC_CXX_THROW
 
	`throw
()

	)

119 
	#JEMALLOC_CXX_THROW


	)

122 #i‡
_MSC_VER


123 
	#JEMALLOC_ATTR
(
s
)

	)

124 
	#JEMALLOC_ALIGNED
(
s
Ë
	`__de˛•ec
(
	`Æign
(s))

	)

125 
	#JEMALLOC_ALLOC_SIZE
(
s
)

	)

126 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
)

	)

127 #i‚de‡
JEMALLOC_EXPORT


128 #ifde‡
DLLEXPORT


129 
	#JEMALLOC_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

131 
	#JEMALLOC_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

134 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
)

	)

135 
	#JEMALLOC_NOINLINE
 
	`__de˛•ec
(
noölöe
)

	)

136 #ifde‡
__˝lu•lus


137 
	#JEMALLOC_NOTHROW
 
	`__de˛•ec
(
nŸhrow
)

	)

139 
	#JEMALLOC_NOTHROW


	)

141 
	#JEMALLOC_SECTION
(
s
Ë
	`__de˛•ec
(
	`Æloˇã
(s))

	)

142 
	#JEMALLOC_RESTRICT_RETURN
 
	`__de˛•ec
(
ª°ri˘
)

	)

143 #i‡
_MSC_VER
 >1900 && !
deföed
(
__EDG__
)

144 
	#JEMALLOC_ALLOCATOR
 
	`__de˛•ec
(
Æloˇt‹
)

	)

146 
	#JEMALLOC_ALLOCATOR


	)

148 #ñi‡
deföed
(
JEMALLOC_HAVE_ATTR
)

149 
	#JEMALLOC_ATTR
(
s
Ë
	`__©åibuã__
((s))

	)

150 
	#JEMALLOC_ALIGNED
(
s
Ë
	`JEMALLOC_ATTR
(
	`Æig√d
(s))

	)

151 #ifde‡
JEMALLOC_HAVE_ATTR_ALLOC_SIZE


152 
	#JEMALLOC_ALLOC_SIZE
(
s
Ë
	`JEMALLOC_ATTR
(
	`Æloc_size
(s))

	)

153 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
Ë
	`JEMALLOC_ATTR
(
	`Æloc_size
(s1, s2))

	)

155 
	#JEMALLOC_ALLOC_SIZE
(
s
)

	)

156 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
)

	)

158 #i‚de‡
JEMALLOC_EXPORT


159 
	#JEMALLOC_EXPORT
 
	`JEMALLOC_ATTR
(
	`visibûôy
("deÁu…"))

	)

161 #ifde‡
JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF


162 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
Ë
	`JEMALLOC_ATTR
(
	`f‹m©
(
gnu_¥ötf
, s, i))

	)

163 #ñi‡
deföed
(
JEMALLOC_HAVE_ATTR_FORMAT_PRINTF
)

164 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
Ë
	`JEMALLOC_ATTR
(
	`f‹m©
(
¥ötf
, s, i))

	)

166 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
)

	)

168 
	#JEMALLOC_NOINLINE
 
	`JEMALLOC_ATTR
(
noölöe
)

	)

169 
	#JEMALLOC_NOTHROW
 
	`JEMALLOC_ATTR
(
nŸhrow
)

	)

170 
	#JEMALLOC_SECTION
(
s
Ë
	`JEMALLOC_ATTR
(
	`£˘i⁄
(s))

	)

171 
	#JEMALLOC_RESTRICT_RETURN


	)

172 
	#JEMALLOC_ALLOCATOR


	)

174 
	#JEMALLOC_ATTR
(
s
)

	)

175 
	#JEMALLOC_ALIGNED
(
s
)

	)

176 
	#JEMALLOC_ALLOC_SIZE
(
s
)

	)

177 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
)

	)

178 
	#JEMALLOC_EXPORT


	)

179 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
)

	)

180 
	#JEMALLOC_NOINLINE


	)

181 
	#JEMALLOC_NOTHROW


	)

182 
	#JEMALLOC_SECTION
(
s
)

	)

183 
	#JEMALLOC_RESTRICT_RETURN


	)

184 
	#JEMALLOC_ALLOCATOR


	)

192 
JEMALLOC_EXPORT
 c⁄° *
je_mÆloc_c⁄f
;

193 
JEMALLOC_EXPORT
 (*
je_mÆloc_mesßge
)(*
cb›aque
,

194 c⁄° *
s
);

196 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


197 
JEMALLOC_NOTHROW
 *
je_mÆloc
(
size_t
 
size
)

198 
JEMALLOC_CXX_THROW
 
JEMALLOC_ATTR
(
mÆloc
Ë
JEMALLOC_ALLOC_SIZE
(1);

199 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


200 
JEMALLOC_NOTHROW
 *
je_ˇŒoc
(
size_t
 
num
, size_à
size
)

201 
JEMALLOC_CXX_THROW
 
JEMALLOC_ATTR
(
mÆloc
Ë
JEMALLOC_ALLOC_SIZE2
(1, 2);

202 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_posix_memÆign
(**
mem±r
,

203 
size_t
 
Æignmít
, size_à
size
Ë
JEMALLOC_CXX_THROW
 
JEMALLOC_ATTR
(
n⁄nuŒ
(1));

204 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


205 
JEMALLOC_NOTHROW
 *
je_Æig√d_Æloc
(
size_t
 
Æignmít
,

206 
size_t
 
size
Ë
JEMALLOC_CXX_THROW
 
JEMALLOC_ATTR
(
mÆloc
)

207 
JEMALLOC_ALLOC_SIZE
(2);

208 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


209 
JEMALLOC_NOTHROW
 *
je_ªÆloc
(*
±r
, 
size_t
 
size
)

210 
JEMALLOC_CXX_THROW
 
JEMALLOC_ALLOC_SIZE
(2);

211 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_‰ì
(*
±r
)

212 
	gJEMALLOC_CXX_THROW
;

214 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


215 
JEMALLOC_NOTHROW
 *
je_mÆlocx
(
size_t
 
size
, 
Êags
)

216 
JEMALLOC_ATTR
(
mÆloc
Ë
JEMALLOC_ALLOC_SIZE
(1);

217 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


218 
JEMALLOC_NOTHROW
 *
je_øŒocx
(*
±r
, 
size_t
 
size
,

219 
Êags
Ë
JEMALLOC_ALLOC_SIZE
(2);

220 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
je_xÆlocx
(*
±r
, size_à
size
,

221 
size_t
 
exåa
, 
Êags
);

222 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
je_ßŒocx
(c⁄° *
±r
,

223 
Êags
Ë
JEMALLOC_ATTR
(
puª
);

224 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_dÆlocx
(*
±r
, 
Êags
);

225 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_sdÆlocx
(*
±r
, 
size_t
 
size
,

226 
Êags
);

227 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
je_«Œocx
(size_à
size
, 
Êags
)

228 
JEMALLOC_ATTR
(
puª
);

230 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_mÆl˘l
(c⁄° *
«me
,

231 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

232 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_mÆl˘ amëomib
(c⁄° *
«me
,

233 
size_t
 *
mibp
, size_à*
mibÀ≈
);

234 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_mÆl˘lbymib
(c⁄° 
size_t
 *
mib
,

235 
size_t
 
mibÀn
, *
ﬁdp
, size_à*
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

236 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
je_mÆloc_°©s_¥öt
(

237 (*
wrôe_cb
)(*, c⁄° *), *
je_cb›aque
,

238 c⁄° *
›ts
);

239 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
je_mÆloc_ußbÀ_size
(

240 
JEMALLOC_USABLE_SIZE_CONST
 *
±r
Ë
	gJEMALLOC_CXX_THROW
;

242 #ifde‡
JEMALLOC_OVERRIDE_MEMALIGN


243 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


244 
JEMALLOC_NOTHROW
 *
je_memÆign
(
size_t
 
Æignmít
, size_à
size
)

245 
JEMALLOC_CXX_THROW
 
JEMALLOC_ATTR
(
mÆloc
);

248 #ifde‡
JEMALLOC_OVERRIDE_VALLOC


249 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


250 
JEMALLOC_NOTHROW
 *
je_vÆloc
(
size_t
 
size
Ë
JEMALLOC_CXX_THROW


251 
JEMALLOC_ATTR
(
mÆloc
);

259 *(
	tchunk_Æloc_t
)(*, 
	tsize_t
, size_t, 
	tboﬁ
 *, bool *, );

265 
boﬁ
 (
	tchunk_dÆloc_t
)(*, 
	tsize_t
, 
	tboﬁ
, );

272 
boﬁ
 (
	tchunk_commô_t
)(*, 
	tsize_t
, size_t, size_t, );

279 
boﬁ
 (
	tchunk_decommô_t
)(*, 
	tsize_t
, size_t, size_t, );

286 
boﬁ
 (
	tchunk_purge_t
)(*, 
	tsize_t
, size_t, size_t, );

293 
boﬁ
 (
	tchunk_•lô_t
)(*, 
	tsize_t
, size_t, size_t, 
	tboﬁ
, );

300 
boﬁ
 (
	tchunk_mîge_t
)(*, 
	tsize_t
, *, size_t, 
	tboﬁ
, );

303 
chunk_Æloc_t
 *
	gÆloc
;

304 
chunk_dÆloc_t
 *
	gdÆloc
;

305 
chunk_commô_t
 *
	gcommô
;

306 
chunk_decommô_t
 *
	gdecommô
;

307 
chunk_purge_t
 *
	gpurge
;

308 
chunk_•lô_t
 *
	g•lô
;

309 
chunk_mîge_t
 *
	gmîge
;

310 } 
	tchunk_hooks_t
;

319 #ifde‡
JEMALLOC_MANGLE


320 #i‚de‡
JEMALLOC_NO_DEMANGLE


321 
	#JEMALLOC_NO_DEMANGLE


	)

323 
	#mÆloc_c⁄f
 
je_mÆloc_c⁄f


	)

324 
	#mÆloc_mesßge
 
je_mÆloc_mesßge


	)

325 
	#mÆloc
 
je_mÆloc


	)

326 
	#ˇŒoc
 
je_ˇŒoc


	)

327 
	#posix_memÆign
 
je_posix_memÆign


	)

328 
	#Æig√d_Æloc
 
je_Æig√d_Æloc


	)

329 
	#ªÆloc
 
je_ªÆloc


	)

330 
	#‰ì
 
je_‰ì


	)

331 
	#mÆlocx
 
je_mÆlocx


	)

332 
	#øŒocx
 
je_øŒocx


	)

333 
	#xÆlocx
 
je_xÆlocx


	)

334 
	#ßŒocx
 
je_ßŒocx


	)

335 
	#dÆlocx
 
je_dÆlocx


	)

336 
	#sdÆlocx
 
je_sdÆlocx


	)

337 
	#«Œocx
 
je_«Œocx


	)

338 
	#mÆl˘l
 
je_mÆl˘l


	)

339 
	#mÆl˘ amëomib
 
je_mÆl˘ amëomib


	)

340 
	#mÆl˘lbymib
 
je_mÆl˘lbymib


	)

341 
	#mÆloc_°©s_¥öt
 
je_mÆloc_°©s_¥öt


	)

342 
	#mÆloc_ußbÀ_size
 
je_mÆloc_ußbÀ_size


	)

343 
	#memÆign
 
je_memÆign


	)

344 
	#vÆloc
 
je_vÆloc


	)

354 #i‚de‡
JEMALLOC_NO_DEMANGLE


355 #unde‡
je_mÆloc_c⁄f


356 #unde‡
je_mÆloc_mesßge


357 #unde‡
je_mÆloc


358 #unde‡
je_ˇŒoc


359 #unde‡
je_posix_memÆign


360 #unde‡
je_Æig√d_Æloc


361 #unde‡
je_ªÆloc


362 #unde‡
je_‰ì


363 #unde‡
je_mÆlocx


364 #unde‡
je_øŒocx


365 #unde‡
je_xÆlocx


366 #unde‡
je_ßŒocx


367 #unde‡
je_dÆlocx


368 #unde‡
je_sdÆlocx


369 #unde‡
je_«Œocx


370 #unde‡
je_mÆl˘l


371 #unde‡
je_mÆl˘ amëomib


372 #unde‡
je_mÆl˘lbymib


373 #unde‡
je_mÆloc_°©s_¥öt


374 #unde‡
je_mÆloc_ußbÀ_size


375 #unde‡
je_memÆign


376 #unde‡
je_vÆloc


379 #ifde‡
__˝lu•lus


	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_defs.h

3 
	#JEMALLOC_HAVE_ATTR


	)

6 
	#JEMALLOC_HAVE_ATTR_ALLOC_SIZE


	)

9 
	#JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF


	)

12 
	#JEMALLOC_HAVE_ATTR_FORMAT_PRINTF


	)

18 
	#JEMALLOC_OVERRIDE_MEMALIGN


	)

19 
	#JEMALLOC_OVERRIDE_VALLOC


	)

28 
	#JEMALLOC_USABLE_SIZE_CONST


	)

35 
	#JEMALLOC_USE_CXX_THROW


	)

37 #ifde‡
_MSC_VER


38 #ifde‡
_WIN64


39 
	#LG_SIZEOF_PTR_WIN
 3

	)

41 
	#LG_SIZEOF_PTR_WIN
 2

	)

46 
	#LG_SIZEOF_PTR
 3

	)

	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_macros.h

1 
	~<°dlib.h
>

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~<limôs.h
>

5 
	~<°rögs.h
>

7 
	#JEMALLOC_VERSION
 "4.2.0-0-gf70a254d44c8d30af2cd5d30531fb18fdabØe6d"

	)

8 
	#JEMALLOC_VERSION_MAJOR
 4

	)

9 
	#JEMALLOC_VERSION_MINOR
 2

	)

10 
	#JEMALLOC_VERSION_BUGFIX
 0

	)

11 
	#JEMALLOC_VERSION_NREV
 0

	)

12 
	#JEMALLOC_VERSION_GID
 "f70a254d44c8d30af2cd5d30531fb18fdabØe6d"

	)

14 
	#MALLOCX_LG_ALIGN
(
œ
Ë(()÷a))

	)

15 #i‡
LG_SIZEOF_PTR
 == 2

16 
	#MALLOCX_ALIGN
(
a
Ë(()(
	`ffs
(()◊))-1))

	)

18 
	#MALLOCX_ALIGN
(
a
) \

19 (()(((
size_t
)(
a
Ë< (size_t)
INT_MAX
Ë? 
	`ffs
(()(a))-1 : \

20 
	`ffs
(()(((
size_t
)(
a
))>>32))+31))

	)

22 
	#MALLOCX_ZERO
 (()0x40)

	)

27 
	#MALLOCX_TCACHE
(
tc
Ë(()((—c)+2Ë<< 8))

	)

28 
	#MALLOCX_TCACHE_NONE
 
	`MALLOCX_TCACHE
(-1)

	)

32 
	#MALLOCX_ARENA
(
a
Ë(((()◊))+1Ë<< 20)

	)

34 #i‡
deföed
(
__˝lu•lus
Ë&& deföed(
JEMALLOC_USE_CXX_THROW
)

35 
	#JEMALLOC_CXX_THROW
 
	`throw
()

	)

37 
	#JEMALLOC_CXX_THROW


	)

40 #i‡
_MSC_VER


41 
	#JEMALLOC_ATTR
(
s
)

	)

42 
	#JEMALLOC_ALIGNED
(
s
Ë
	`__de˛•ec
(
	`Æign
(s))

	)

43 
	#JEMALLOC_ALLOC_SIZE
(
s
)

	)

44 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
)

	)

45 #i‚de‡
JEMALLOC_EXPORT


46 #ifde‡
DLLEXPORT


47 
	#JEMALLOC_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

49 
	#JEMALLOC_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

52 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
)

	)

53 
	#JEMALLOC_NOINLINE
 
	`__de˛•ec
(
noölöe
)

	)

54 #ifde‡
__˝lu•lus


55 
	#JEMALLOC_NOTHROW
 
	`__de˛•ec
(
nŸhrow
)

	)

57 
	#JEMALLOC_NOTHROW


	)

59 
	#JEMALLOC_SECTION
(
s
Ë
	`__de˛•ec
(
	`Æloˇã
(s))

	)

60 
	#JEMALLOC_RESTRICT_RETURN
 
	`__de˛•ec
(
ª°ri˘
)

	)

61 #i‡
_MSC_VER
 >1900 && !
deföed
(
__EDG__
)

62 
	#JEMALLOC_ALLOCATOR
 
	`__de˛•ec
(
Æloˇt‹
)

	)

64 
	#JEMALLOC_ALLOCATOR


	)

66 #ñi‡
deföed
(
JEMALLOC_HAVE_ATTR
)

67 
	#JEMALLOC_ATTR
(
s
Ë
	`__©åibuã__
((s))

	)

68 
	#JEMALLOC_ALIGNED
(
s
Ë
	`JEMALLOC_ATTR
(
	`Æig√d
(s))

	)

69 #ifde‡
JEMALLOC_HAVE_ATTR_ALLOC_SIZE


70 
	#JEMALLOC_ALLOC_SIZE
(
s
Ë
	`JEMALLOC_ATTR
(
	`Æloc_size
(s))

	)

71 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
Ë
	`JEMALLOC_ATTR
(
	`Æloc_size
(s1, s2))

	)

73 
	#JEMALLOC_ALLOC_SIZE
(
s
)

	)

74 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
)

	)

76 #i‚de‡
JEMALLOC_EXPORT


77 
	#JEMALLOC_EXPORT
 
	`JEMALLOC_ATTR
(
	`visibûôy
("deÁu…"))

	)

79 #ifde‡
JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF


80 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
Ë
	`JEMALLOC_ATTR
(
	`f‹m©
(
gnu_¥ötf
, s, i))

	)

81 #ñi‡
deföed
(
JEMALLOC_HAVE_ATTR_FORMAT_PRINTF
)

82 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
Ë
	`JEMALLOC_ATTR
(
	`f‹m©
(
¥ötf
, s, i))

	)

84 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
)

	)

86 
	#JEMALLOC_NOINLINE
 
	`JEMALLOC_ATTR
(
noölöe
)

	)

87 
	#JEMALLOC_NOTHROW
 
	`JEMALLOC_ATTR
(
nŸhrow
)

	)

88 
	#JEMALLOC_SECTION
(
s
Ë
	`JEMALLOC_ATTR
(
	`£˘i⁄
(s))

	)

89 
	#JEMALLOC_RESTRICT_RETURN


	)

90 
	#JEMALLOC_ALLOCATOR


	)

92 
	#JEMALLOC_ATTR
(
s
)

	)

93 
	#JEMALLOC_ALIGNED
(
s
)

	)

94 
	#JEMALLOC_ALLOC_SIZE
(
s
)

	)

95 
	#JEMALLOC_ALLOC_SIZE2
(
s1
, 
s2
)

	)

96 
	#JEMALLOC_EXPORT


	)

97 
	#JEMALLOC_FORMAT_PRINTF
(
s
, 
i
)

	)

98 
	#JEMALLOC_NOINLINE


	)

99 
	#JEMALLOC_NOTHROW


	)

100 
	#JEMALLOC_SECTION
(
s
)

	)

101 
	#JEMALLOC_RESTRICT_RETURN


	)

102 
	#JEMALLOC_ALLOCATOR


	)

	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_mangle.h

8 #ifde‡
JEMALLOC_MANGLE


9 #i‚de‡
JEMALLOC_NO_DEMANGLE


10 
	#JEMALLOC_NO_DEMANGLE


	)

12 
	#mÆloc_c⁄f
 
je_mÆloc_c⁄f


	)

13 
	#mÆloc_mesßge
 
je_mÆloc_mesßge


	)

14 
	#mÆloc
 
je_mÆloc


	)

15 
	#ˇŒoc
 
je_ˇŒoc


	)

16 
	#posix_memÆign
 
je_posix_memÆign


	)

17 
	#Æig√d_Æloc
 
je_Æig√d_Æloc


	)

18 
	#ªÆloc
 
je_ªÆloc


	)

19 
	#‰ì
 
je_‰ì


	)

20 
	#mÆlocx
 
je_mÆlocx


	)

21 
	#øŒocx
 
je_øŒocx


	)

22 
	#xÆlocx
 
je_xÆlocx


	)

23 
	#ßŒocx
 
je_ßŒocx


	)

24 
	#dÆlocx
 
je_dÆlocx


	)

25 
	#sdÆlocx
 
je_sdÆlocx


	)

26 
	#«Œocx
 
je_«Œocx


	)

27 
	#mÆl˘l
 
je_mÆl˘l


	)

28 
	#mÆl˘ amëomib
 
je_mÆl˘ amëomib


	)

29 
	#mÆl˘lbymib
 
je_mÆl˘lbymib


	)

30 
	#mÆloc_°©s_¥öt
 
je_mÆloc_°©s_¥öt


	)

31 
	#mÆloc_ußbÀ_size
 
je_mÆloc_ußbÀ_size


	)

32 
	#memÆign
 
je_memÆign


	)

33 
	#vÆloc
 
je_vÆloc


	)

43 #i‚de‡
JEMALLOC_NO_DEMANGLE


44 #unde‡
je_mÆloc_c⁄f


45 #unde‡
je_mÆloc_mesßge


46 #unde‡
je_mÆloc


47 #unde‡
je_ˇŒoc


48 #unde‡
je_posix_memÆign


49 #unde‡
je_Æig√d_Æloc


50 #unde‡
je_ªÆloc


51 #unde‡
je_‰ì


52 #unde‡
je_mÆlocx


53 #unde‡
je_øŒocx


54 #unde‡
je_xÆlocx


55 #unde‡
je_ßŒocx


56 #unde‡
je_dÆlocx


57 #unde‡
je_sdÆlocx


58 #unde‡
je_«Œocx


59 #unde‡
je_mÆl˘l


60 #unde‡
je_mÆl˘ amëomib


61 #unde‡
je_mÆl˘lbymib


62 #unde‡
je_mÆloc_°©s_¥öt


63 #unde‡
je_mÆloc_ußbÀ_size


64 #unde‡
je_memÆign


65 #unde‡
je_vÆloc


	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_mangle_jet.h

8 #ifde‡
JEMALLOC_MANGLE


9 #i‚de‡
JEMALLOC_NO_DEMANGLE


10 
	#JEMALLOC_NO_DEMANGLE


	)

12 
	#mÆloc_c⁄f
 
jë_mÆloc_c⁄f


	)

13 
	#mÆloc_mesßge
 
jë_mÆloc_mesßge


	)

14 
	#mÆloc
 
jë_mÆloc


	)

15 
	#ˇŒoc
 
jë_ˇŒoc


	)

16 
	#posix_memÆign
 
jë_posix_memÆign


	)

17 
	#Æig√d_Æloc
 
jë_Æig√d_Æloc


	)

18 
	#ªÆloc
 
jë_ªÆloc


	)

19 
	#‰ì
 
jë_‰ì


	)

20 
	#mÆlocx
 
jë_mÆlocx


	)

21 
	#øŒocx
 
jë_øŒocx


	)

22 
	#xÆlocx
 
jë_xÆlocx


	)

23 
	#ßŒocx
 
jë_ßŒocx


	)

24 
	#dÆlocx
 
jë_dÆlocx


	)

25 
	#sdÆlocx
 
jë_sdÆlocx


	)

26 
	#«Œocx
 
jë_«Œocx


	)

27 
	#mÆl˘l
 
jë_mÆl˘l


	)

28 
	#mÆl˘ amëomib
 
jë_mÆl˘ amëomib


	)

29 
	#mÆl˘lbymib
 
jë_mÆl˘lbymib


	)

30 
	#mÆloc_°©s_¥öt
 
jë_mÆloc_°©s_¥öt


	)

31 
	#mÆloc_ußbÀ_size
 
jë_mÆloc_ußbÀ_size


	)

32 
	#memÆign
 
jë_memÆign


	)

33 
	#vÆloc
 
jë_vÆloc


	)

43 #i‚de‡
JEMALLOC_NO_DEMANGLE


44 #unde‡
jë_mÆloc_c⁄f


45 #unde‡
jë_mÆloc_mesßge


46 #unde‡
jë_mÆloc


47 #unde‡
jë_ˇŒoc


48 #unde‡
jë_posix_memÆign


49 #unde‡
jë_Æig√d_Æloc


50 #unde‡
jë_ªÆloc


51 #unde‡
jë_‰ì


52 #unde‡
jë_mÆlocx


53 #unde‡
jë_øŒocx


54 #unde‡
jë_xÆlocx


55 #unde‡
jë_ßŒocx


56 #unde‡
jë_dÆlocx


57 #unde‡
jë_sdÆlocx


58 #unde‡
jë_«Œocx


59 #unde‡
jë_mÆl˘l


60 #unde‡
jë_mÆl˘ amëomib


61 #unde‡
jë_mÆl˘lbymib


62 #unde‡
jë_mÆloc_°©s_¥öt


63 #unde‡
jë_mÆloc_ußbÀ_size


64 #unde‡
jë_memÆign


65 #unde‡
jë_vÆloc


	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_protos.h

6 
JEMALLOC_EXPORT
 c⁄° *
je_mÆloc_c⁄f
;

7 
JEMALLOC_EXPORT
 (*
je_mÆloc_mesßge
)(*
cb›aque
,

8 c⁄° *
s
);

10 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


11 
JEMALLOC_NOTHROW
 *
	$je_mÆloc
(
size_t
 
size
)

12 
JEMALLOC_CXX_THROW
 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	`JEMALLOC_ALLOC_SIZE
(1);

13 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


14 
JEMALLOC_NOTHROW
 *
	$je_ˇŒoc
(
size_t
 
num
, size_à
size
)

15 
JEMALLOC_CXX_THROW
 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	`JEMALLOC_ALLOC_SIZE2
(1, 2);

16 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	$je_posix_memÆign
(**
mem±r
,

17 
size_t
 
Æignmít
, size_à
size
Ë
JEMALLOC_CXX_THROW
 
	`JEMALLOC_ATTR
(
	`n⁄nuŒ
(1));

18 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


19 
JEMALLOC_NOTHROW
 *
	$je_Æig√d_Æloc
(
size_t
 
Æignmít
,

20 
size_t
 
size
Ë
JEMALLOC_CXX_THROW
 
	$JEMALLOC_ATTR
(
mÆloc
)

21 
	`JEMALLOC_ALLOC_SIZE
(2);

22 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


23 
JEMALLOC_NOTHROW
 *
	$je_ªÆloc
(*
±r
, 
size_t
 
size
)

24 
JEMALLOC_CXX_THROW
 
	`JEMALLOC_ALLOC_SIZE
(2);

25 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	$je_‰ì
(*
±r
)

26 
JEMALLOC_CXX_THROW
;

28 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


29 
JEMALLOC_NOTHROW
 *
	$je_mÆlocx
(
size_t
 
size
, 
Êags
)

30 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	`JEMALLOC_ALLOC_SIZE
(1);

31 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


32 
JEMALLOC_NOTHROW
 *
	$je_øŒocx
(*
±r
, 
size_t
 
size
,

33 
Êags
Ë
	`JEMALLOC_ALLOC_SIZE
(2);

34 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	`je_xÆlocx
(*
±r
, size_à
size
,

35 
size_t
 
exåa
, 
Êags
);

36 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	$je_ßŒocx
(c⁄° *
±r
,

37 
Êags
Ë
	`JEMALLOC_ATTR
(
puª
);

38 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`je_dÆlocx
(*
±r
, 
Êags
);

39 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`je_sdÆlocx
(*
±r
, 
size_t
 
size
,

40 
Êags
);

41 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	$je_«Œocx
(
size_t
 
size
, 
Êags
)

42 
	`JEMALLOC_ATTR
(
puª
);

44 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`je_mÆl˘l
(c⁄° *
«me
,

45 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

46 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`je_mÆl˘ amëomib
(c⁄° *
«me
,

47 
size_t
 *
mibp
, size_à*
mibÀ≈
);

48 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`je_mÆl˘lbymib
(c⁄° 
size_t
 *
mib
,

49 
size_t
 
mibÀn
, *
ﬁdp
, size_à*
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

50 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`je_mÆloc_°©s_¥öt
(

51 (*
wrôe_cb
)(*, c⁄° *), *
je_cb›aque
,

52 c⁄° *
›ts
);

53 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	$je_mÆloc_ußbÀ_size
(

54 
JEMALLOC_USABLE_SIZE_CONST
 *
±r
Ë
JEMALLOC_CXX_THROW
;

56 #ifde‡
JEMALLOC_OVERRIDE_MEMALIGN


57 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


58 
JEMALLOC_NOTHROW
 *
	$je_memÆign
(
size_t
 
Æignmít
, size_à
size
)

59 
JEMALLOC_CXX_THROW
 
	`JEMALLOC_ATTR
(
mÆloc
);

62 #ifde‡
JEMALLOC_OVERRIDE_VALLOC


63 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


64 
JEMALLOC_NOTHROW
 *
	$je_vÆloc
(
size_t
 
size
Ë
JEMALLOC_CXX_THROW


65 
	`JEMALLOC_ATTR
(
mÆloc
);

	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_protos_jet.h

6 
JEMALLOC_EXPORT
 c⁄° *
jë_mÆloc_c⁄f
;

7 
JEMALLOC_EXPORT
 (*
jë_mÆloc_mesßge
)(*
cb›aque
,

8 c⁄° *
s
);

10 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


11 
JEMALLOC_NOTHROW
 *
	$jë_mÆloc
(
size_t
 
size
)

12 
JEMALLOC_CXX_THROW
 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	`JEMALLOC_ALLOC_SIZE
(1);

13 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


14 
JEMALLOC_NOTHROW
 *
	$jë_ˇŒoc
(
size_t
 
num
, size_à
size
)

15 
JEMALLOC_CXX_THROW
 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	`JEMALLOC_ALLOC_SIZE2
(1, 2);

16 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	$jë_posix_memÆign
(**
mem±r
,

17 
size_t
 
Æignmít
, size_à
size
Ë
JEMALLOC_CXX_THROW
 
	`JEMALLOC_ATTR
(
	`n⁄nuŒ
(1));

18 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


19 
JEMALLOC_NOTHROW
 *
	$jë_Æig√d_Æloc
(
size_t
 
Æignmít
,

20 
size_t
 
size
Ë
JEMALLOC_CXX_THROW
 
	$JEMALLOC_ATTR
(
mÆloc
)

21 
	`JEMALLOC_ALLOC_SIZE
(2);

22 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


23 
JEMALLOC_NOTHROW
 *
	$jë_ªÆloc
(*
±r
, 
size_t
 
size
)

24 
JEMALLOC_CXX_THROW
 
	`JEMALLOC_ALLOC_SIZE
(2);

25 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	$jë_‰ì
(*
±r
)

26 
JEMALLOC_CXX_THROW
;

28 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


29 
JEMALLOC_NOTHROW
 *
	$jë_mÆlocx
(
size_t
 
size
, 
Êags
)

30 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	`JEMALLOC_ALLOC_SIZE
(1);

31 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


32 
JEMALLOC_NOTHROW
 *
	$jë_øŒocx
(*
±r
, 
size_t
 
size
,

33 
Êags
Ë
	`JEMALLOC_ALLOC_SIZE
(2);

34 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	`jë_xÆlocx
(*
±r
, size_à
size
,

35 
size_t
 
exåa
, 
Êags
);

36 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	$jë_ßŒocx
(c⁄° *
±r
,

37 
Êags
Ë
	`JEMALLOC_ATTR
(
puª
);

38 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`jë_dÆlocx
(*
±r
, 
Êags
);

39 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`jë_sdÆlocx
(*
±r
, 
size_t
 
size
,

40 
Êags
);

41 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	$jë_«Œocx
(
size_t
 
size
, 
Êags
)

42 
	`JEMALLOC_ATTR
(
puª
);

44 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`jë_mÆl˘l
(c⁄° *
«me
,

45 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

46 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`jë_mÆl˘ amëomib
(c⁄° *
«me
,

47 
size_t
 *
mibp
, size_à*
mibÀ≈
);

48 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`jë_mÆl˘lbymib
(c⁄° 
size_t
 *
mib
,

49 
size_t
 
mibÀn
, *
ﬁdp
, size_à*
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

50 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW
 
	`jë_mÆloc_°©s_¥öt
(

51 (*
wrôe_cb
)(*, c⁄° *), *
jë_cb›aque
,

52 c⁄° *
›ts
);

53 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW
 
	$jë_mÆloc_ußbÀ_size
(

54 
JEMALLOC_USABLE_SIZE_CONST
 *
±r
Ë
JEMALLOC_CXX_THROW
;

56 #ifde‡
JEMALLOC_OVERRIDE_MEMALIGN


57 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


58 
JEMALLOC_NOTHROW
 *
	$jë_memÆign
(
size_t
 
Æignmít
, size_à
size
)

59 
JEMALLOC_CXX_THROW
 
	`JEMALLOC_ATTR
(
mÆloc
);

62 #ifde‡
JEMALLOC_OVERRIDE_VALLOC


63 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


64 
JEMALLOC_NOTHROW
 *
	$jë_vÆloc
(
size_t
 
size
Ë
JEMALLOC_CXX_THROW


65 
	`JEMALLOC_ATTR
(
mÆloc
);

	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_rename.h

6 #i‚de‡
JEMALLOC_NO_RENAME


7 
	#je_mÆloc_c⁄f
 
je_mÆloc_c⁄f


	)

8 
	#je_mÆloc_mesßge
 
je_mÆloc_mesßge


	)

9 
	#je_mÆloc
 
je_mÆloc


	)

10 
	#je_ˇŒoc
 
je_ˇŒoc


	)

11 
	#je_posix_memÆign
 
je_posix_memÆign


	)

12 
	#je_Æig√d_Æloc
 
je_Æig√d_Æloc


	)

13 
	#je_ªÆloc
 
je_ªÆloc


	)

14 
	#je_‰ì
 
je_‰ì


	)

15 
	#je_mÆlocx
 
je_mÆlocx


	)

16 
	#je_øŒocx
 
je_øŒocx


	)

17 
	#je_xÆlocx
 
je_xÆlocx


	)

18 
	#je_ßŒocx
 
je_ßŒocx


	)

19 
	#je_dÆlocx
 
je_dÆlocx


	)

20 
	#je_sdÆlocx
 
je_sdÆlocx


	)

21 
	#je_«Œocx
 
je_«Œocx


	)

22 
	#je_mÆl˘l
 
je_mÆl˘l


	)

23 
	#je_mÆl˘ amëomib
 
je_mÆl˘ amëomib


	)

24 
	#je_mÆl˘lbymib
 
je_mÆl˘lbymib


	)

25 
	#je_mÆloc_°©s_¥öt
 
je_mÆloc_°©s_¥öt


	)

26 
	#je_mÆloc_ußbÀ_size
 
je_mÆloc_ußbÀ_size


	)

27 
	#je_memÆign
 
je_memÆign


	)

28 
	#je_vÆloc
 
je_vÆloc


	)

	@dep/jemalloc-4.2.0/include/jemalloc/jemalloc_typedefs.h

6 *(
	tchunk_Æloc_t
)(*, 
	tsize_t
, size_t, 
	tboﬁ
 *, bool *, );

12 
	$boﬁ
 (
	tchunk_dÆloc_t
)(*, 
	tsize_t
, 
	tboﬁ
, );

19 
	$boﬁ
 (
	tchunk_commô_t
)(*, 
	tsize_t
, size_t, size_t, );

26 
	$boﬁ
 (
	tchunk_decommô_t
)(*, 
	tsize_t
, size_t, size_t, );

33 
	$boﬁ
 (
	tchunk_purge_t
)(*, 
	tsize_t
, size_t, size_t, );

40 
	$boﬁ
 (
	tchunk_•lô_t
)(*, 
	tsize_t
, size_t, size_t, 
	tboﬁ
, );

47 
	$boﬁ
 (
	tchunk_mîge_t
)(*, 
	tsize_t
, *, size_t, 
	tboﬁ
, );

50 
chunk_Æloc_t
 *
Æloc
;

51 
chunk_dÆloc_t
 *
dÆloc
;

52 
chunk_commô_t
 *
commô
;

53 
chunk_decommô_t
 *
decommô
;

54 
chunk_purge_t
 *
purge
;

55 
chunk_•lô_t
 *
•lô
;

56 
chunk_mîge_t
 *
mîge
;

57 } 
	tchunk_hooks_t
;

	@dep/jemalloc-4.2.0/include/msvc_compat/C99/stdbool.h

1 #i‚de‡
°dboﬁ_h


2 
	#°dboﬁ_h


	)

4 
	~<wty≥s.h
>

10 #i‚de‡
__˛™g__


11 
BOOL
 
	t_Boﬁ
;

14 
	#boﬁ
 
_Boﬁ


	)

15 
	#åue
 1

	)

16 
	#Ál£
 0

	)

18 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

	@dep/jemalloc-4.2.0/include/msvc_compat/C99/stdint.h

32 #i‚de‡
_MSC_VER


36 #i‚de‡
_MSC_STDINT_H_


37 
	#_MSC_STDINT_H_


	)

39 #i‡
_MSC_VER
 > 1000

40 #¥agm®
⁄˚


43 
	~<limôs.h
>

49 #ifde‡
__˝lu•lus


52 
	~<wch¨.h
>

53 #ifde‡
__˝lu•lus


58 #i‚de‡
_W64


59 #i‡!
deföed
(
__midl
Ë&& (deföed(
_X86_
Ë|| deföed(
_M_IX86
)Ë&& 
_MSC_VER
 >= 1300

60 
	#_W64
 
__w64


	)

62 
	#_W64


	)

74 #i‡(
_MSC_VER
 < 1300)

75 sig√d 
	töt8_t
;

76 sig√d 
	töt16_t
;

77 sig√d 
	töt32_t
;

78 
	tuöt8_t
;

79 
	tuöt16_t
;

80 
	tuöt32_t
;

82 sig√d 
	t__öt8
 
	töt8_t
;

83 sig√d 
	t__öt16
 
	töt16_t
;

84 sig√d 
	t__öt32
 
	töt32_t
;

85 
	t__öt8
 
	tuöt8_t
;

86 
	t__öt16
 
	tuöt16_t
;

87 
	t__öt32
 
	tuöt32_t
;

89 sig√d 
	t__öt64
 
	töt64_t
;

90 
	t__öt64
 
	tuöt64_t
;

94 
öt8_t
 
	töt_Àa°8_t
;

95 
öt16_t
 
	töt_Àa°16_t
;

96 
öt32_t
 
	töt_Àa°32_t
;

97 
öt64_t
 
	töt_Àa°64_t
;

98 
uöt8_t
 
	tuöt_Àa°8_t
;

99 
uöt16_t
 
	tuöt_Àa°16_t
;

100 
uöt32_t
 
	tuöt_Àa°32_t
;

101 
uöt64_t
 
	tuöt_Àa°64_t
;

104 
öt8_t
 
	töt_Á°8_t
;

105 
öt16_t
 
	töt_Á°16_t
;

106 
öt32_t
 
	töt_Á°32_t
;

107 
öt64_t
 
	töt_Á°64_t
;

108 
uöt8_t
 
	tuöt_Á°8_t
;

109 
uöt16_t
 
	tuöt_Á°16_t
;

110 
uöt32_t
 
	tuöt_Á°32_t
;

111 
uöt64_t
 
	tuöt_Á°64_t
;

114 #ifde‡
_WIN64


115 sig√d 
	t__öt64
 
	töçå_t
;

116 
	t__öt64
 
	tuöçå_t
;

118 
_W64
 sig√d 
	töçå_t
;

119 
_W64
 
	tuöçå_t
;

123 
öt64_t
 
	tötmax_t
;

124 
uöt64_t
 
	tuötmax_t
;

129 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

132 
	#INT8_MIN
 ((
öt8_t
)
_I8_MIN
)

	)

133 
	#INT8_MAX
 
_I8_MAX


	)

134 
	#INT16_MIN
 ((
öt16_t
)
_I16_MIN
)

	)

135 
	#INT16_MAX
 
_I16_MAX


	)

136 
	#INT32_MIN
 ((
öt32_t
)
_I32_MIN
)

	)

137 
	#INT32_MAX
 
_I32_MAX


	)

138 
	#INT64_MIN
 ((
öt64_t
)
_I64_MIN
)

	)

139 
	#INT64_MAX
 
_I64_MAX


	)

140 
	#UINT8_MAX
 
_UI8_MAX


	)

141 
	#UINT16_MAX
 
_UI16_MAX


	)

142 
	#UINT32_MAX
 
_UI32_MAX


	)

143 
	#UINT64_MAX
 
_UI64_MAX


	)

146 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

147 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

148 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

149 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

150 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

151 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

152 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

153 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

154 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

155 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

156 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

157 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

160 
	#INT_FAST8_MIN
 
INT8_MIN


	)

161 
	#INT_FAST8_MAX
 
INT8_MAX


	)

162 
	#INT_FAST16_MIN
 
INT16_MIN


	)

163 
	#INT_FAST16_MAX
 
INT16_MAX


	)

164 
	#INT_FAST32_MIN
 
INT32_MIN


	)

165 
	#INT_FAST32_MAX
 
INT32_MAX


	)

166 
	#INT_FAST64_MIN
 
INT64_MIN


	)

167 
	#INT_FAST64_MAX
 
INT64_MAX


	)

168 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

169 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

170 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

171 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

174 #ifde‡
_WIN64


175 
	#INTPTR_MIN
 
INT64_MIN


	)

176 
	#INTPTR_MAX
 
INT64_MAX


	)

177 
	#UINTPTR_MAX
 
UINT64_MAX


	)

179 
	#INTPTR_MIN
 
INT32_MIN


	)

180 
	#INTPTR_MAX
 
INT32_MAX


	)

181 
	#UINTPTR_MAX
 
UINT32_MAX


	)

185 
	#INTMAX_MIN
 
INT64_MIN


	)

186 
	#INTMAX_MAX
 
INT64_MAX


	)

187 
	#UINTMAX_MAX
 
UINT64_MAX


	)

191 #ifde‡
_WIN64


192 
	#PTRDIFF_MIN
 
_I64_MIN


	)

193 
	#PTRDIFF_MAX
 
_I64_MAX


	)

195 
	#PTRDIFF_MIN
 
_I32_MIN


	)

196 
	#PTRDIFF_MAX
 
_I32_MAX


	)

199 
	#SIG_ATOMIC_MIN
 
INT_MIN


	)

200 
	#SIG_ATOMIC_MAX
 
INT_MAX


	)

202 #i‚de‡
SIZE_MAX


203 #ifde‡
_WIN64


204 
	#SIZE_MAX
 
_UI64_MAX


	)

206 
	#SIZE_MAX
 
_UI32_MAX


	)

211 #i‚de‡
WCHAR_MIN


212 
	#WCHAR_MIN
 0

	)

214 #i‚de‡
WCHAR_MAX


215 
	#WCHAR_MAX
 
_UI16_MAX


	)

218 
	#WINT_MIN
 0

	)

219 
	#WINT_MAX
 
_UI16_MAX


	)

226 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

230 
	#INT8_C
(
vÆ
ËvÆ##
i8


	)

231 
	#INT16_C
(
vÆ
ËvÆ##
i16


	)

232 
	#INT32_C
(
vÆ
ËvÆ##
i32


	)

233 
	#INT64_C
(
vÆ
ËvÆ##
i64


	)

235 
	#UINT8_C
(
vÆ
ËvÆ##
ui8


	)

236 
	#UINT16_C
(
vÆ
ËvÆ##
ui16


	)

237 
	#UINT32_C
(
vÆ
ËvÆ##
ui32


	)

238 
	#UINT64_C
(
vÆ
ËvÆ##
ui64


	)

241 
	#INTMAX_C
 
INT64_C


	)

242 
	#UINTMAX_C
 
UINT64_C


	)

	@dep/jemalloc-4.2.0/include/msvc_compat/strings.h

1 #i‚de‡
°rögs_h


2 
	#°rögs_h


	)

6 #ifde‡
_MSC_VER


7 
	~<öåö.h
>

8 #¥agm®
öåösic
(
_BôSˇnF‹w¨d
)

9 
__f‹˚ölöe
 
	$ff¶
(
x
)

11 
i
;

13 i‡(
	`_BôSˇnF‹w¨d
(&
i
, 
x
))

14  (
i
 + 1);

16 
	}
}

18 
__f‹˚ölöe
 
	$ffs
(
x
)

21  (
	`ff¶
(
x
));

22 
	}
}

24 #ifde‡ 
_M_X64


25 #¥agm®
öåösic
(
_BôSˇnF‹w¨d64
)

28 
__f‹˚ölöe
 
	$ff¶l
(
__öt64
 
x
)

30 
i
;

31 #ifde‡ 
_M_X64


32 i‡(
	`_BôSˇnF‹w¨d64
(&
i
, 
x
))

33  (
i
 + 1);

39 
__öt64
 
Œ
;

40 
l
[2];

41 } 
s
;

43 
s
.
Œ
 = 
x
;

45 i‡(
	`_BôSˇnF‹w¨d
(&
i
, 
s
.
l
[0]))

46  (
i
 + 1);

47 if(
	`_BôSˇnF‹w¨d
(&
i
, 
s
.
l
[1]))

48  (
i
 + 33);

51 
	}
}

54 
	#ff¶l
(
x
Ë
	`__buûtö_ff¶l
(x)

	)

55 
	#ff¶
(
x
Ë
	`__buûtö_ff¶
(x)

	)

56 
	#ffs
(
x
Ë
	`__buûtö_ffs
(x)

	)

	@dep/jemalloc-4.2.0/include/msvc_compat/windows_extra.h

1 #i‚de‡
MSVC_COMPAT_WINDOWS_EXTRA_H


2 
	#MSVC_COMPAT_WINDOWS_EXTRA_H


	)

4 
	~<î∫o.h
>

	@dep/jemalloc-4.2.0/msvc/projects/vc2015/test_threads/test_threads.cpp

5 
	~<©omic
>

6 
	~<fun˘i⁄Æ
>

7 
	~<futuª
>

8 
	~<øndom
>

9 
	~<thªad
>

10 
	~<ve˘‹
>

11 
	~<°dio.h
>

12 
	~<jemÆloc/jemÆloc.h
>

14 
usög
 
	g°d
::
ve˘‹
;

15 
usög
 
	g°d
::
thªad
;

16 
usög
 
	g°d
::
unif‹m_öt_di°ributi⁄
;

17 
usög
 
	g°d
::
mö°d_ønd
;

19 
	$ã°_thªads
()

21 
je_mÆloc_c⁄f
 = "narenas:3";

22 
«ª«s
 = 0;

23 
size_t
 
sz
 = (
«ª«s
);

24 
	`je_mÆl˘l
("›t.«ª«s", &
«ª«s
, &
sz
, 
NULL
, 0);

25 i‡(
«ª«s
 != 3) {

26 
	`¥ötf
("Eº‹: u√x≥˘edÇumbî o‡¨ías: %d\n", 
«ª«s
);

29 c⁄° 
sizes
[] = { 7, 16, 32, 60, 91, 100, 120, 144, 169, 199, 255, 400, 670, 900, 917, 1025, 3333, 5190, 13131, 49192, 99999, 123123, 255265, 2333111 };

30 c⁄° 
numSizes
 = ()((
sizes
) / (sizes[0]));

31 
ve˘‹
<
thªad
> 
w‹kîs
;

32 c⁄° 
numThªads
 = 
«ª«s
 + 1, 
numAŒocsMax
 = 25, 
numIãr1
 = 50, 
numIãr2
 = 50;

33 
	`je_mÆloc_°©s_¥öt
(
NULL
, NULL, NULL);

34 
size_t
 
Æloˇãd1
;

35 
size_t
 
sz1
 = (
Æloˇãd1
);

36 
	`je_mÆl˘l
("°©s.a˘ive", &
Æloˇãd1
, &
sz1
, 
NULL
, 0);

37 
	`¥ötf
("\nPress EnterÅo startÅhreads...\n");

38 
	`gëch¨
();

39 
	`¥ötf
("Sèπög %dÅhªad†x %d x %d iãøti⁄s...\n", 
numThªads
, 
numIãr1
, 
numIãr2
);

40 
i
 = 0; i < 
numThªads
; i++) {

41 
w‹kîs
.
	`em∂a˚_back
([
tid
=
i
]() {

42 
unif‹m_öt_di°ributi⁄
<> 
	`sizeDi°
(0, 
numSizes
 - 1);

43 
mö°d_ønd
 
	`∫d
(
tid
 * 17);

44 
uöt8_t
* 
±rs
[
numAŒocsMax
];

45 
±rsz
[
numAŒocsMax
];

46 
i
 = 0; i < 
numIãr1
; ++i) {

47 
thªad
 
	`t
([&]() {

48 
i
 = 0; i < 
numIãr2
; ++i) {

49 c⁄° 
numAŒocs
 = 
numAŒocsMax
 - 
	`sizeDi°
(
∫d
);

50 
j
 = 0; j < 
numAŒocs
; j += 64) {

51 c⁄° 
x
 = 
	`sizeDi°
(
∫d
);

52 c⁄° 
sz
 = 
sizes
[
x
];

53 
±rsz
[
j
] = 
sz
;

54 
±rs
[
j
] = (
uöt8_t
*)
	`je_mÆloc
(
sz
);

55 i‡(!
±rs
[
j
]) {

56 
	`¥ötf
("U«bÀÅÿÆloˇã %d byã†öÅhªad %d, iã∏%d,áŒo¯%d. %d\n", 
sz
, 
tid
, 
i
, 
j
, 
x
);

57 
	`exô
(1);

59 
k
 = 0; k < 
sz
; k++)

60 
±rs
[
j
][
k
] = 
tid
 + k;

62 
j
 = 0; j < 
numAŒocs
; j += 64) {

63 
k
 = 0, 
sz
 = 
±rsz
[
j
]; k < sz; k++)

64 i‡(
±rs
[
j
][
k
] !(
uöt8_t
)(
tid
 + k)) {

65 
	`¥ötf
("Mem‹yÉº‹ i¿thªad %d, iã∏%d,áŒo¯%d @ %d : %02X!=%02X\n", 
tid
, 
i
, 
j
, 
k
, 
±rs
[j][k], (
uöt8_t
)(tid + k));

66 
	`exô
(1);

68 
	`je_‰ì
(
±rs
[
j
]);

72 
t
.
	`joö
();

76 
thªad
& 
t
 : 
w‹kîs
) {

77 
t
.
	`joö
();

79 
	`je_mÆloc_°©s_¥öt
(
NULL
, NULL, NULL);

80 
size_t
 
Æloˇãd2
;

81 
	`je_mÆl˘l
("°©s.a˘ive", &
Æloˇãd2
, &
sz1
, 
NULL
, 0);

82 
size_t
 
Àaked
 = 
Æloˇãd2
 - 
Æloˇãd1
;

83 
	`¥ötf
("\nD⁄e. Lóked: %zd byãs\n", 
Àaked
);

84 
boﬁ
 
Áûed
 = 
Àaked
 > 65536;

85 
	`¥ötf
("\nTe° %s!\n", (
Áûed
 ? "FAILED" : "successful"));

86 
	`¥ötf
("\nPress EnterÅo continue...\n");

87 
	`gëch¨
();

88  
Áûed
 ? 1 : 0;

89 
	}
}

	@dep/jemalloc-4.2.0/msvc/projects/vc2015/test_threads/test_threads.h

1 #¥agm®
⁄˚


3 
ã°_thªads
();

	@dep/jemalloc-4.2.0/msvc/projects/vc2015/test_threads/test_threads_main.cpp

1 
	~"ã°_thªads.h
"

2 
	~<futuª
>

3 
	~<fun˘i⁄Æ
>

4 
	~<chr⁄o
>

6 
usög
 
«me•a˚
 
	g°d
::
chr⁄o_lôîÆs
;

8 
	$maö
(
¨gc
, ** 
¨gv
)

10 
rc
 = 
	`ã°_thªads
();

11  
rc
;

12 
	}
}

	@dep/jemalloc-4.2.0/src/arena.c

1 
	#JEMALLOC_ARENA_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

7 
purge_mode_t
 
	g›t_purge
 = 
PURGE_DEFAULT
;

8 c⁄° *
	gpurge_mode_«mes
[] = {

13 
ssize_t
 
	g›t_lg_dúty_mu…
 = 
LG_DIRTY_MULT_DEFAULT
;

14 
ssize_t
 
	glg_dúty_mu…_deÁu…
;

15 
ssize_t
 
	g›t_deˇy_time
 = 
DECAY_TIME_DEFAULT
;

16 
ssize_t
 
	gdeˇy_time_deÁu…
;

18 
¨ía_bö_öfo_t
 
	g¨ía_bö_öfo
[
NBINS
];

20 
size_t
 
	gm≠_büs
;

21 
size_t
 
	gm≠_misc_off£t
;

22 
size_t
 
	g¨ía_maxrun
;

23 
size_t
 
	gœrge_max˛ass
;

24 
size_t
 
	grun_qu™tize_max
;

25 
size_t
 
	gsmÆl_maxrun
;

26 
boﬁ
 *
	gsmÆl_run_èb
;

27 
size_t
 *
	grun_qu™tize_Êo‹_èb
;

28 
size_t
 *
	grun_qu™tize_˚û_èb
;

29 
	g∆˛as£s
;

30 
	gnh˛as£s
;

31 
szöd_t
 
	gruns_avaû_büs
;

32 
szöd_t
 
	gruns_avaû_n˛as£s
;

40 
¨ía_purge_to_limô
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

41 
size_t
 
ndúty_limô
);

42 
¨ía_run_dÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_run_t
 *
run
,

43 
boﬁ
 
dúty
, boﬁ 
˛ó√d
, boﬁ 
decommôãd
);

44 
¨ía_dÆloc_bö_run
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

45 
¨ía_chunk_t
 *
chunk
, 
¨ía_run_t
 *
run
, 
¨ía_bö_t
 *
bö
);

46 
¨ía_bö_lowî_run
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

47 
¨ía_run_t
 *
run
, 
¨ía_bö_t
 *
bö
);

51 
JEMALLOC_INLINE_C
 
size_t


52 
	$¨ía_mis˚lm_size_gë
(c⁄° 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
)

54 
¨ía_chunk_t
 *
chunk
;

55 
size_t
 
∑geöd
, 
m≠bôs
;

57 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
mis˚lm
);

58 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

59 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

60  (
	`¨ía_m≠bôs_size_decode
(
m≠bôs
));

61 
	}
}

63 
JEMALLOC_INLINE_C
 

64 
	$¨ía_run_addr_comp
(c⁄° 
¨ía_chunk_m≠_misc_t
 *
a
,

65 c⁄° 
¨ía_chunk_m≠_misc_t
 *
b
)

67 
uöçå_t
 
a_mis˚lm
 = (uöçå_t)
a
;

68 
uöçå_t
 
b_mis˚lm
 = (uöçå_t)
b
;

70 
	`as£π
(
a
 !
NULL
);

71 
	`as£π
(
b
 !
NULL
);

73  ((
a_mis˚lm
 > 
b_mis˚lm
) - (a_miscelm < b_miscelm));

74 
	}
}

77 
	$ph_gí
(
UNUSED
, 
¨ía_run_hóp_
, 
¨ía_run_hóp_t
, 
¨ía_chunk_m≠_misc_t
,

78 
ph_lök
, 
¨ía_run_addr_comp
)

80 
size_t


81 
	$run_qu™tize_Êo‹_compuã
(
size_t
 
size
)

83 
size_t
 
qsize
;

85 
	`as£π
(
size
 != 0);

86 
	`as£π
(
size
 =
	`PAGE_CEILING
(size));

89 i‡(
size
 <
smÆl_maxrun
 && 
smÆl_run_èb
[sizê>> 
LG_PAGE
])

90  (
size
);

97 
qsize
 = 
	`ödex2size
(
	`size2ödex
(
size
 - 
œrge_∑d
 + 1) - 1) +Üarge_pad;

98 i‡(
qsize
 <
SMALL_MAXCLASS
 + 
œrge_∑d
)

99  (
	`run_qu™tize_Êo‹_compuã
(
size
 - 
œrge_∑d
));

100 
	`as£π
(
qsize
 <
size
);

101  (
qsize
);

102 
	}
}

104 
size_t


105 
	$run_qu™tize_˚û_compuã_h¨d
(
size_t
 
size
)

107 
size_t
 
œrge_run_size_√xt
;

109 
	`as£π
(
size
 != 0);

110 
	`as£π
(
size
 =
	`PAGE_CEILING
(size));

119 i‡(
size
 > 
SMALL_MAXCLASS
) {

120 
œrge_run_size_√xt
 = 
	`PAGE_CEILING
(
	`ödex2size
(
	`size2ödex
(
size
 -

121 
œrge_∑d
) + 1) +Üarge_pad);

123 
œrge_run_size_√xt
 = 
SIZE_T_MAX
;

124 i‡(
size
 >
smÆl_maxrun
)

125  (
œrge_run_size_√xt
);

127 
åue
) {

128 
size
 +
PAGE
;

129 
	`as£π
(
size
 <
smÆl_maxrun
);

130 i‡(
smÆl_run_èb
[
size
 >> 
LG_PAGE
]) {

131 i‡(
œrge_run_size_√xt
 < 
size
)

132  (
œrge_run_size_√xt
);

133  (
size
);

136 
	}
}

138 
size_t


139 
	$run_qu™tize_˚û_compuã
(
size_t
 
size
)

141 
size_t
 
qsize
 = 
	`run_qu™tize_Êo‹_compuã
(
size
);

143 i‡(
qsize
 < 
size
) {

152 
qsize
 = 
	`run_qu™tize_˚û_compuã_h¨d
(qsize);

154  (
qsize
);

155 
	}
}

157 #ifde‡
JEMALLOC_JET


158 #unde‡
run_qu™tize_Êo‹


159 
	#run_qu™tize_Êo‹
 
	`JEMALLOC_N
(
n_run_qu™tize_Êo‹
)

	)

161 
size_t


162 
	$run_qu™tize_Êo‹
(
size_t
 
size
)

164 
size_t
 
ªt
;

166 
	`as£π
(
size
 > 0);

167 
	`as£π
(
size
 <
run_qu™tize_max
);

168 
	`as£π
((
size
 & 
PAGE_MASK
) == 0);

170 
ªt
 = 
run_qu™tize_Êo‹_èb
[(
size
 >> 
LG_PAGE
) - 1];

171 
	`as£π
(
ªt
 =
	`run_qu™tize_Êo‹_compuã
(
size
));

172  (
ªt
);

173 
	}
}

174 #ifde‡
JEMALLOC_JET


175 #unde‡
run_qu™tize_Êo‹


176 
	#run_qu™tize_Êo‹
 
	`JEMALLOC_N
(
run_qu™tize_Êo‹
)

	)

177 
run_qu™tize_t
 *
	grun_qu™tize_Êo‹
 = 
JEMALLOC_N
(
n_run_qu™tize_Êo‹
);

180 #ifde‡
JEMALLOC_JET


181 #unde‡
run_qu™tize_˚û


182 
	#run_qu™tize_˚û
 
	`JEMALLOC_N
(
n_run_qu™tize_˚û
)

	)

184 
size_t


185 
	$run_qu™tize_˚û
(
size_t
 
size
)

187 
size_t
 
ªt
;

189 
	`as£π
(
size
 > 0);

190 
	`as£π
(
size
 <
run_qu™tize_max
);

191 
	`as£π
((
size
 & 
PAGE_MASK
) == 0);

193 
ªt
 = 
run_qu™tize_˚û_èb
[(
size
 >> 
LG_PAGE
) - 1];

194 
	`as£π
(
ªt
 =
	`run_qu™tize_˚û_compuã
(
size
));

195  (
ªt
);

196 
	}
}

197 #ifde‡
JEMALLOC_JET


198 #unde‡
run_qu™tize_˚û


199 
	#run_qu™tize_˚û
 
	`JEMALLOC_N
(
run_qu™tize_˚û
)

	)

200 
run_qu™tize_t
 *
	grun_qu™tize_˚û
 = 
JEMALLOC_N
(
n_run_qu™tize_˚û
);

203 
¨ía_run_hóp_t
 *

204 
	$¨ía_runs_avaû_gë
(
¨ía_t
 *
¨ía
, 
szöd_t
 
öd
)

207 
	`as£π
(
öd
 >
runs_avaû_büs
);

208 
	`as£π
(
öd
 - 
runs_avaû_büs
 < 
runs_avaû_n˛as£s
);

210  (&
¨ía
->
runs_avaû
[
öd
 - 
runs_avaû_büs
]);

211 
	}
}

214 
	$¨ía_avaû_ö£π
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

215 
size_t
 
≈ages
)

217 
szöd_t
 
öd
 = 
	`size2ödex
(
	`run_qu™tize_Êo‹
(
	`¨ía_mis˚lm_size_gë
(

218 
	`¨ía_mis˚lm_gë_c⁄°
(
chunk
, 
∑geöd
))));

219 
	`as£π
(
≈ages
 =(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
∑geöd
) >>

220 
LG_PAGE
));

221 
	`¨ía_run_hóp_ö£π
(
	`¨ía_runs_avaû_gë
(
¨ía
, 
öd
),

222 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
));

223 
	}
}

226 
	$¨ía_avaû_ªmove
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

227 
size_t
 
≈ages
)

229 
szöd_t
 
öd
 = 
	`size2ödex
(
	`run_qu™tize_Êo‹
(
	`¨ía_mis˚lm_size_gë
(

230 
	`¨ía_mis˚lm_gë_c⁄°
(
chunk
, 
∑geöd
))));

231 
	`as£π
(
≈ages
 =(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
∑geöd
) >>

232 
LG_PAGE
));

233 
	`¨ía_run_hóp_ªmove
(
	`¨ía_runs_avaû_gë
(
¨ía
, 
öd
),

234 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
));

235 
	}
}

238 
	$¨ía_run_dúty_ö£π
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

239 
size_t
 
≈ages
)

241 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
,

242 
∑geöd
);

244 
	`as£π
(
≈ages
 =(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
∑geöd
) >>

245 
LG_PAGE
));

246 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
Ë=
CHUNK_MAP_DIRTY
);

247 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
+
≈ages
-1) ==

248 
CHUNK_MAP_DIRTY
);

250 
	`qr_√w
(&
mis˚lm
->
rd
, 
rd_lök
);

251 
	`qr_mñd
(&
¨ía
->
runs_dúty
, &
mis˚lm
->
rd
, 
rd_lök
);

252 
¨ía
->
ndúty
 +
≈ages
;

253 
	}
}

256 
	$¨ía_run_dúty_ªmove
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
size_t
 
∑geöd
,

257 
size_t
 
≈ages
)

259 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
,

260 
∑geöd
);

262 
	`as£π
(
≈ages
 =(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
∑geöd
) >>

263 
LG_PAGE
));

264 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
Ë=
CHUNK_MAP_DIRTY
);

265 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
+
≈ages
-1) ==

266 
CHUNK_MAP_DIRTY
);

268 
	`qr_ªmove
(&
mis˚lm
->
rd
, 
rd_lök
);

269 
	`as£π
(
¨ía
->
ndúty
 >
≈ages
);

270 
¨ía
->
ndúty
 -
≈ages
;

271 
	}
}

273 
size_t


274 
	$¨ía_chunk_dúty_≈ages
(c⁄° 
exã¡_node_t
 *
node
)

277  (
	`exã¡_node_size_gë
(
node
Ë>> 
LG_PAGE
);

278 
	}
}

281 
	$¨ía_chunk_ˇche_maybe_ö£π
(
¨ía_t
 *
¨ía
, 
exã¡_node_t
 *
node
, 
boﬁ
 
ˇche
)

284 i‡(
ˇche
) {

285 
	`exã¡_node_dúty_lökage_öô
(
node
);

286 
	`exã¡_node_dúty_ö£π
(
node
, &
¨ía
->
runs_dúty
,

287 &
¨ía
->
chunks_ˇche
);

288 
¨ía
->
ndúty
 +
	`¨ía_chunk_dúty_≈ages
(
node
);

290 
	}
}

293 
	$¨ía_chunk_ˇche_maybe_ªmove
(
¨ía_t
 *
¨ía
, 
exã¡_node_t
 *
node
, 
boﬁ
 
dúty
)

296 i‡(
dúty
) {

297 
	`exã¡_node_dúty_ªmove
(
node
);

298 
	`as£π
(
¨ía
->
ndúty
 >
	`¨ía_chunk_dúty_≈ages
(
node
));

299 
¨ía
->
ndúty
 -
	`¨ía_chunk_dúty_≈ages
(
node
);

301 
	}
}

303 
JEMALLOC_INLINE_C
 *

304 
	$¨ía_run_ªg_Æloc
(
¨ía_run_t
 *
run
, 
¨ía_bö_öfo_t
 *
bö_öfo
)

306 *
ªt
;

307 
size_t
 
ªgöd
;

308 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

309 *
Ωages
;

311 
	`as£π
(
run
->
n‰ì
 > 0);

312 
	`as£π
(!
	`bôm≠_fuŒ
(
run
->
bôm≠
, &
bö_öfo
->
bôm≠_öfo
));

314 
ªgöd
 = ()
	`bôm≠_sfu
(
run
->
bôm≠
, &
bö_öfo
->
bôm≠_öfo
);

315 
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

316 
Ωages
 = 
	`¨ía_mis˚lm_to_Ωages
(
mis˚lm
);

317 
ªt
 = (*)((
uöçå_t
)
Ωages
 + (uöçå_t)
bö_öfo
->
ªg0_off£t
 +

318 (
uöçå_t
)(
bö_öfo
->
ªg_öãrvÆ
 * 
ªgöd
));

319 
run
->
n‰ì
--;

320  (
ªt
);

321 
	}
}

323 
JEMALLOC_INLINE_C
 

324 
	$¨ía_run_ªg_dÆloc
(
¨ía_run_t
 *
run
, *
±r
)

326 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(
run
);

327 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

328 
size_t
 
m≠bôs
 = 
	`¨ía_m≠bôs_gë
(
chunk
, 
∑geöd
);

329 
szöd_t
 
bööd
 = 
	`¨ía_±r_smÆl_bööd_gë
(
±r
, 
m≠bôs
);

330 
¨ía_bö_öfo_t
 *
bö_öfo
 = &
¨ía_bö_öfo
[
bööd
];

331 
size_t
 
ªgöd
 = 
	`¨ía_run_ªgöd
(
run
, 
bö_öfo
, 
±r
);

333 
	`as£π
(
run
->
n‰ì
 < 
bö_öfo
->
ƒegs
);

335 
	`as£π
(((
uöçå_t
)
±r
 -

336 ((
uöçå_t
)
	`¨ía_mis˚lm_to_Ωages
(
	`¨ía_run_to_mis˚lm
(
run
)) +

337 (
uöçå_t
)
bö_öfo
->
ªg0_off£t
)) %

338 (
uöçå_t
)
bö_öfo
->
ªg_öãrvÆ
 == 0);

339 
	`as£π
((
uöçå_t
)
±r
 >=

340 (
uöçå_t
)
	`¨ía_mis˚lm_to_Ωages
(
	`¨ía_run_to_mis˚lm
(
run
)) +

341 (
uöçå_t
)
bö_öfo
->
ªg0_off£t
);

343 
	`as£π
(
	`bôm≠_gë
(
run
->
bôm≠
, &
bö_öfo
->
bôm≠_öfo
, 
ªgöd
));

345 
	`bôm≠_un£t
(
run
->
bôm≠
, &
bö_öfo
->
bôm≠_öfo
, 
ªgöd
);

346 
run
->
n‰ì
++;

347 
	}
}

349 
JEMALLOC_INLINE_C
 

350 
	$¨ía_run_zîo
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
run_öd
, size_à
≈ages
)

353 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
((*)((
uöçå_t
)
chunk
 +

354 (
run_öd
 << 
LG_PAGE
)), (
≈ages
 << LG_PAGE));

355 
	`mem£t
((*)((
uöçå_t
)
chunk
 + (
run_öd
 << 
LG_PAGE
)), 0,

356 (
≈ages
 << 
LG_PAGE
));

357 
	}
}

359 
JEMALLOC_INLINE_C
 

360 
	$¨ía_run_∑ge_m¨k_zî€d
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
run_öd
)

363 
	`JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
((*)((
uöçå_t
)
chunk
 + (
run_öd


364 << 
LG_PAGE
)), 
PAGE
);

365 
	}
}

367 
JEMALLOC_INLINE_C
 

368 
	$¨ía_run_∑ge_vÆid©e_zî€d
(
¨ía_chunk_t
 *
chunk
, 
size_t
 
run_öd
)

370 
size_t
 
i
;

371 
UNUSED
 
size_t
 *
p
 = (size_à*)((
uöçå_t
)
chunk
 + (
run_öd
 << 
LG_PAGE
));

373 
	`¨ía_run_∑ge_m¨k_zî€d
(
chunk
, 
run_öd
);

374 
i
 = 0; i < 
PAGE
 / (
size_t
); i++)

375 
	`as£π
(
p
[
i
] == 0);

376 
	}
}

379 
	$¨ía_«˘ive_add
(
¨ía_t
 *
¨ía
, 
size_t
 
add_∑ges
)

382 i‡(
c⁄fig_°©s
) {

383 
size_t
 
ˇ˘ive_add
 = 
	`CHUNK_CEILING
((
¨ía
->
«˘ive
 +

384 
add_∑ges
Ë<< 
LG_PAGE
Ë- 
	`CHUNK_CEILING
(
¨ía
->
«˘ive
 <<

385 
LG_PAGE
);

386 i‡(
ˇ˘ive_add
 != 0)

387 
	`°©s_ˇ˘ive_add
(
ˇ˘ive_add
);

389 
¨ía
->
«˘ive
 +
add_∑ges
;

390 
	}
}

393 
	$¨ía_«˘ive_sub
(
¨ía_t
 *
¨ía
, 
size_t
 
sub_∑ges
)

396 i‡(
c⁄fig_°©s
) {

397 
size_t
 
ˇ˘ive_sub
 = 
	`CHUNK_CEILING
(
¨ía
->
«˘ive
 << 
LG_PAGE
) -

398 
	`CHUNK_CEILING
((
¨ía
->
«˘ive
 - 
sub_∑ges
Ë<< 
LG_PAGE
);

399 i‡(
ˇ˘ive_sub
 != 0)

400 
	`°©s_ˇ˘ive_sub
(
ˇ˘ive_sub
);

402 
¨ía
->
«˘ive
 -
sub_∑ges
;

403 
	}
}

406 
	$¨ía_run_•lô_ªmove
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
size_t
 
run_öd
,

407 
size_t
 
Êag_dúty
, size_à
Êag_decommôãd
, size_à
√ed_∑ges
)

409 
size_t
 
tŸÆ_∑ges
, 
ªm_∑ges
;

411 
	`as£π
(
Êag_dúty
 =0 || 
Êag_decommôãd
 == 0);

413 
tŸÆ_∑ges
 = 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
run_öd
) >>

414 
LG_PAGE
;

415 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
+
tŸÆ_∑ges
-1) ==

416 
Êag_dúty
);

417 
	`as£π
(
√ed_∑ges
 <
tŸÆ_∑ges
);

418 
ªm_∑ges
 = 
tŸÆ_∑ges
 - 
√ed_∑ges
;

420 
	`¨ía_avaû_ªmove
(
¨ía
, 
chunk
, 
run_öd
, 
tŸÆ_∑ges
);

421 i‡(
Êag_dúty
 != 0)

422 
	`¨ía_run_dúty_ªmove
(
¨ía
, 
chunk
, 
run_öd
, 
tŸÆ_∑ges
);

423 
	`¨ía_«˘ive_add
(
¨ía
, 
√ed_∑ges
);

426 i‡(
ªm_∑ges
 > 0) {

427 
size_t
 
Êags
 = 
Êag_dúty
 | 
Êag_decommôãd
;

428 
size_t
 
Êag_unzî€d_mask
 = (
Êags
 =0Ë? 
CHUNK_MAP_UNZEROED
 :

431 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
run_öd
+
√ed_∑ges
,

432 (
ªm_∑ges
 << 
LG_PAGE
), 
Êags
 |

433 (
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
run_öd
+
√ed_∑ges
) &

434 
Êag_unzî€d_mask
));

435 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
run_öd
+
tŸÆ_∑ges
-1,

436 (
ªm_∑ges
 << 
LG_PAGE
), 
Êags
 |

437 (
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
run_öd
+
tŸÆ_∑ges
-1) &

438 
Êag_unzî€d_mask
));

439 i‡(
Êag_dúty
 != 0) {

440 
	`¨ía_run_dúty_ö£π
(
¨ía
, 
chunk
, 
run_öd
+
√ed_∑ges
,

441 
ªm_∑ges
);

443 
	`¨ía_avaû_ö£π
(
¨ía
, 
chunk
, 
run_öd
+
√ed_∑ges
, 
ªm_∑ges
);

445 
	}
}

447 
boﬁ


448 
	$¨ía_run_•lô_œrge_hñ≥r
(
¨ía_t
 *
¨ía
, 
¨ía_run_t
 *
run
, 
size_t
 
size
,

449 
boﬁ
 
ªmove
, boﬁ 
zîo
)

451 
¨ía_chunk_t
 *
chunk
;

452 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

453 
size_t
 
Êag_dúty
, 
Êag_decommôãd
, 
run_öd
, 
√ed_∑ges
;

454 
size_t
 
Êag_unzî€d_mask
;

456 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
run
);

457 
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

458 
run_öd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

459 
Êag_dúty
 = 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
);

460 
Êag_decommôãd
 = 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
);

461 
√ed_∑ges
 = (
size
 >> 
LG_PAGE
);

462 
	`as£π
(
√ed_∑ges
 > 0);

464 i‡(
Êag_decommôãd
 !0 && 
¨ía
->
chunk_hooks
.
	`commô
(
chunk
, 
chunksize
,

465 
run_öd
 << 
LG_PAGE
, 
size
, 
¨ía
->
öd
))

466  (
åue
);

468 i‡(
ªmove
) {

469 
	`¨ía_run_•lô_ªmove
(
¨ía
, 
chunk
, 
run_öd
, 
Êag_dúty
,

470 
Êag_decommôãd
, 
√ed_∑ges
);

473 i‡(
zîo
) {

474 i‡(
Êag_decommôãd
 != 0) {

476 
	`JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
((

477 *)((
uöçå_t
)
chunk
 + (
run_öd
 << 
LG_PAGE
)),

478 (
√ed_∑ges
 << 
LG_PAGE
));

479 } i‡(
Êag_dúty
 != 0) {

481 
	`¨ía_run_zîo
(
chunk
, 
run_öd
, 
√ed_∑ges
);

487 
size_t
 
i
;

488 
i
 = 0; i < 
√ed_∑ges
; i++) {

489 i‡(
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
run_öd
+
i
)

491 
	`¨ía_run_zîo
(
chunk
, 
run_öd
+
i
, 1);

492 i‡(
c⁄fig_debug
) {

493 
	`¨ía_run_∑ge_vÆid©e_zî€d
(
chunk
,

494 
run_öd
+
i
);

496 
	`¨ía_run_∑ge_m¨k_zî€d
(
chunk
,

497 
run_öd
+
i
);

502 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
((*)((
uöçå_t
)
chunk
 +

503 (
run_öd
 << 
LG_PAGE
)), (
√ed_∑ges
 << LG_PAGE));

510 
Êag_unzî€d_mask
 = (
Êag_dúty
 | 
Êag_decommôãd
) == 0 ?

511 
CHUNK_MAP_UNZEROED
 : 0;

512 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
run_öd
+
√ed_∑ges
-1, 0, 
Êag_dúty
 |

513 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

514 
run_öd
+
√ed_∑ges
-1)));

515 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
run_öd
, 
size
, 
Êag_dúty
 |

516 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
run_öd
)));

517  (
Ál£
);

518 
	}
}

520 
boﬁ


521 
	$¨ía_run_•lô_œrge
(
¨ía_t
 *
¨ía
, 
¨ía_run_t
 *
run
, 
size_t
 
size
, 
boﬁ
 
zîo
)

524  (
	`¨ía_run_•lô_œrge_hñ≥r
(
¨ía
, 
run
, 
size
, 
åue
, 
zîo
));

525 
	}
}

527 
boﬁ


528 
	$¨ía_run_öô_œrge
(
¨ía_t
 *
¨ía
, 
¨ía_run_t
 *
run
, 
size_t
 
size
, 
boﬁ
 
zîo
)

531  (
	`¨ía_run_•lô_œrge_hñ≥r
(
¨ía
, 
run
, 
size
, 
Ál£
, 
zîo
));

532 
	}
}

534 
boﬁ


535 
	$¨ía_run_•lô_smÆl
(
¨ía_t
 *
¨ía
, 
¨ía_run_t
 *
run
, 
size_t
 
size
,

536 
szöd_t
 
bööd
)

538 
¨ía_chunk_t
 *
chunk
;

539 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

540 
size_t
 
Êag_dúty
, 
Êag_decommôãd
, 
run_öd
, 
√ed_∑ges
, 
i
;

542 
	`as£π
(
bööd
 !
BININD_INVALID
);

544 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
run
);

545 
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

546 
run_öd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

547 
Êag_dúty
 = 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
);

548 
Êag_decommôãd
 = 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
);

549 
√ed_∑ges
 = (
size
 >> 
LG_PAGE
);

550 
	`as£π
(
√ed_∑ges
 > 0);

552 i‡(
Êag_decommôãd
 !0 && 
¨ía
->
chunk_hooks
.
	`commô
(
chunk
, 
chunksize
,

553 
run_öd
 << 
LG_PAGE
, 
size
, 
¨ía
->
öd
))

554  (
åue
);

556 
	`¨ía_run_•lô_ªmove
(
¨ía
, 
chunk
, 
run_öd
, 
Êag_dúty
,

557 
Êag_decommôãd
, 
√ed_∑ges
);

559 
i
 = 0; i < 
√ed_∑ges
; i++) {

560 
size_t
 
Êag_unzî€d
 = 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

561 
run_öd
+
i
);

562 
	`¨ía_m≠bôs_smÆl_£t
(
chunk
, 
run_öd
+
i
, i, 
bööd
,

563 
Êag_unzî€d
);

564 i‡(
c⁄fig_debug
 && 
Êag_dúty
 =0 && 
Êag_unzî€d
 == 0)

565 
	`¨ía_run_∑ge_vÆid©e_zî€d
(
chunk
, 
run_öd
+
i
);

567 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
((*)((
uöçå_t
)
chunk
 +

568 (
run_öd
 << 
LG_PAGE
)), (
√ed_∑ges
 << LG_PAGE));

569  (
Ál£
);

570 
	}
}

572 
¨ía_chunk_t
 *

573 
	$¨ía_chunk_öô_•¨e
(
¨ía_t
 *
¨ía
)

575 
¨ía_chunk_t
 *
chunk
;

577 
	`as£π
(
¨ía
->
•¨e
 !
NULL
);

579 
chunk
 = 
¨ía
->
•¨e
;

580 
¨ía
->
•¨e
 = 
NULL
;

582 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
m≠_büs
) == 0);

583 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
chunk_≈ages
-1) == 0);

584 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
m≠_büs
) ==

585 
¨ía_maxrun
);

586 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
chunk_≈ages
-1) ==

587 
¨ía_maxrun
);

588 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
m≠_büs
) ==

589 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
chunk_≈ages
-1));

591  (
chunk
);

592 
	}
}

594 
boﬁ


595 
	$¨ía_chunk_ªgi°î
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

596 
boﬁ
 
zîo
)

605 
	`exã¡_node_öô
(&
chunk
->
node
, 
¨ía
, chunk, 
chunksize
, 
zîo
, 
åue
);

606 
	`exã¡_node_achunk_£t
(&
chunk
->
node
, 
åue
);

607  (
	`chunk_ªgi°î
(
tsdn
, 
chunk
, &chunk->
node
));

608 
	}
}

610 
¨ía_chunk_t
 *

611 
	$¨ía_chunk_Æloc_öã∫Æ_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

612 
chunk_hooks_t
 *
chunk_hooks
, 
boﬁ
 *
zîo
, boﬁ *
commô
)

614 
¨ía_chunk_t
 *
chunk
;

616 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

618 
chunk
 = (
¨ía_chunk_t
 *)
	`chunk_Æloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
,

619 
NULL
, 
chunksize
, chunksize, 
zîo
, 
commô
);

620 i‡(
chunk
 !
NULL
 && !*
commô
) {

622 i‡(
chunk_hooks
->
	`commô
(
chunk
, 
chunksize
, 0, 
m≠_büs
 <<

623 
LG_PAGE
, 
¨ía
->
öd
)) {

624 
	`chunk_dÆloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
,

625 (*)
chunk
, 
chunksize
, *
zîo
, *
commô
);

626 
chunk
 = 
NULL
;

629 i‡(
chunk
 !
NULL
 && 
	`¨ía_chunk_ªgi°î
(
tsdn
, 
¨ía
, chunk, *
zîo
)) {

630 i‡(!*
commô
) {

632 
chunk_hooks
->
	`decommô
(
chunk
, 
chunksize
, 0, 
m≠_büs
 <<

633 
LG_PAGE
, 
¨ía
->
öd
);

635 
	`chunk_dÆloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
, (*)
chunk
,

636 
chunksize
, *
zîo
, *
commô
);

637 
chunk
 = 
NULL
;

640 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

641  (
chunk
);

642 
	}
}

644 
¨ía_chunk_t
 *

645 
	$¨ía_chunk_Æloc_öã∫Æ
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
boﬁ
 *
zîo
,

646 
boﬁ
 *
commô
)

648 
¨ía_chunk_t
 *
chunk
;

649 
chunk_hooks_t
 
chunk_hooks
 = 
CHUNK_HOOKS_INITIALIZER
;

651 
chunk
 = 
	`chunk_Æloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
NULL
, 
chunksize
,

652 
chunksize
, 
zîo
, 
åue
);

653 i‡(
chunk
 !
NULL
) {

654 i‡(
	`¨ía_chunk_ªgi°î
(
tsdn
, 
¨ía
, 
chunk
, *
zîo
)) {

655 
	`chunk_dÆloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
chunk
,

656 
chunksize
, 
åue
);

657  (
NULL
);

659 *
commô
 = 
åue
;

661 i‡(
chunk
 =
NULL
) {

662 
chunk
 = 
	`¨ía_chunk_Æloc_öã∫Æ_h¨d
(
tsdn
, 
¨ía
,

663 &
chunk_hooks
, 
zîo
, 
commô
);

666 i‡(
c⁄fig_°©s
 && 
chunk
 !
NULL
) {

667 
¨ía
->
°©s
.
m≠≥d
 +
chunksize
;

668 
¨ía
->
°©s
.
mëad©a_m≠≥d
 +(
m≠_büs
 << 
LG_PAGE
);

671  (
chunk
);

672 
	}
}

674 
¨ía_chunk_t
 *

675 
	$¨ía_chunk_öô_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

677 
¨ía_chunk_t
 *
chunk
;

678 
boﬁ
 
zîo
, 
commô
;

679 
size_t
 
Êag_unzî€d
, 
Êag_decommôãd
, 
i
;

681 
	`as£π
(
¨ía
->
•¨e
 =
NULL
);

683 
zîo
 = 
Ál£
;

684 
commô
 = 
Ál£
;

685 
chunk
 = 
	`¨ía_chunk_Æloc_öã∫Æ
(
tsdn
, 
¨ía
, &
zîo
, &
commô
);

686 i‡(
chunk
 =
NULL
)

687  (
NULL
);

694 
Êag_unzî€d
 = (
zîo
 || !
commô
Ë? 0 : 
CHUNK_MAP_UNZEROED
;

695 
Êag_decommôãd
 = 
commô
 ? 0 : 
CHUNK_MAP_DECOMMITTED
;

696 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
m≠_büs
, 
¨ía_maxrun
,

697 
Êag_unzî€d
 | 
Êag_decommôãd
);

702 i‡(!
zîo
) {

703 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(

704 (*)
	`¨ía_bô£lm_gë_c⁄°
(
chunk
, 
m≠_büs
+1),

705 (
size_t
)((
uöçå_t
)
	`¨ía_bô£lm_gë_c⁄°
(
chunk
,

706 
chunk_≈ages
-1) -

707 (
uöçå_t
)
	`¨ía_bô£lm_gë_c⁄°
(
chunk
, 
m≠_büs
+1)));

708 
i
 = 
m≠_büs
+1; i < 
chunk_≈ages
-1; i++)

709 
	`¨ía_m≠bôs_öã∫Æ_£t
(
chunk
, 
i
, 
Êag_unzî€d
);

711 
	`JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
((

712 *)
	`¨ía_bô£lm_gë_c⁄°
(
chunk
, 
m≠_büs
+1),

713 (
size_t
)((
uöçå_t
)
	`¨ía_bô£lm_gë_c⁄°
(
chunk
,

714 
chunk_≈ages
-1) -

715 (
uöçå_t
)
	`¨ía_bô£lm_gë_c⁄°
(
chunk
, 
m≠_büs
+1)));

716 i‡(
c⁄fig_debug
) {

717 
i
 = 
m≠_büs
+1; i < 
chunk_≈ages
-1; i++) {

718 
	`as£π
(
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
i
) ==

719 
Êag_unzî€d
);

723 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
chunk_≈ages
-1, 
¨ía_maxrun
,

724 
Êag_unzî€d
);

726  (
chunk
);

727 
	}
}

729 
¨ía_chunk_t
 *

730 
	$¨ía_chunk_Æloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

732 
¨ía_chunk_t
 *
chunk
;

734 i‡(
¨ía
->
•¨e
 !
NULL
)

735 
chunk
 = 
	`¨ía_chunk_öô_•¨e
(
¨ía
);

737 
chunk
 = 
	`¨ía_chunk_öô_h¨d
(
tsdn
, 
¨ía
);

738 i‡(
chunk
 =
NULL
)

739  (
NULL
);

742 
	`ql_ñm_√w
(&
chunk
->
node
, 
ql_lök
);

743 
	`ql_èû_ö£π
(&
¨ía
->
achunks
, &
chunk
->
node
, 
ql_lök
);

744 
	`¨ía_avaû_ö£π
(
¨ía
, 
chunk
, 
m≠_büs
, 
chunk_≈ages
-map_bias);

746  (
chunk
);

747 
	}
}

750 
	$¨ía_chunk_disˇrd
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
)

752 
boﬁ
 
commôãd
;

753 
chunk_hooks_t
 
chunk_hooks
 = 
CHUNK_HOOKS_INITIALIZER
;

755 
	`chunk_dîegi°î
(
chunk
, &chunk->
node
);

757 
commôãd
 = (
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
m≠_büs
) == 0);

758 i‡(!
commôãd
) {

765 
chunk_hooks
 = 
	`chunk_hooks_gë
(
tsdn
, 
¨ía
);

766 
chunk_hooks
.
	`decommô
(
chunk
, 
chunksize
, 0, 
m≠_büs
 << 
LG_PAGE
,

767 
¨ía
->
öd
);

770 
	`chunk_dÆloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, (*)
chunk
, 
chunksize
,

771 
commôãd
);

773 i‡(
c⁄fig_°©s
) {

774 
¨ía
->
°©s
.
m≠≥d
 -
chunksize
;

775 
¨ía
->
°©s
.
mëad©a_m≠≥d
 -(
m≠_büs
 << 
LG_PAGE
);

777 
	}
}

780 
	$¨ía_•¨e_disˇrd
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
•¨e
)

783 
	`as£π
(
¨ía
->
•¨e
 != spare);

785 i‡(
	`¨ía_m≠bôs_dúty_gë
(
•¨e
, 
m≠_büs
) != 0) {

786 
	`¨ía_run_dúty_ªmove
(
¨ía
, 
•¨e
, 
m≠_büs
,

787 
chunk_≈ages
-
m≠_büs
);

790 
	`¨ía_chunk_disˇrd
(
tsdn
, 
¨ía
, 
•¨e
);

791 
	}
}

794 
	$¨ía_chunk_dÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
)

796 
¨ía_chunk_t
 *
•¨e
;

798 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
m≠_büs
) == 0);

799 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
chunk_≈ages
-1) == 0);

800 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
m≠_büs
) ==

801 
¨ía_maxrun
);

802 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
chunk_≈ages
-1) ==

803 
¨ía_maxrun
);

804 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
m≠_büs
) ==

805 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
chunk_≈ages
-1));

806 
	`as£π
(
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
m≠_büs
) ==

807 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
chunk_≈ages
-1));

810 
	`¨ía_avaû_ªmove
(
¨ía
, 
chunk
, 
m≠_büs
, 
chunk_≈ages
-map_bias);

812 
	`ql_ªmove
(&
¨ía
->
achunks
, &
chunk
->
node
, 
ql_lök
);

813 
•¨e
 = 
¨ía
->spare;

814 
¨ía
->
•¨e
 = 
chunk
;

815 i‡(
•¨e
 !
NULL
)

816 
	`¨ía_•¨e_disˇrd
(
tsdn
, 
¨ía
, 
•¨e
);

817 
	}
}

820 
	$¨ía_huge_mÆloc_°©s_upd©e
(
¨ía_t
 *
¨ía
, 
size_t
 
usize
)

822 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
∆˛as£s
 - 
NBINS
;

824 
	`ˇs£π
(
c⁄fig_°©s
);

826 
¨ía
->
°©s
.
nmÆloc_huge
++;

827 
¨ía
->
°©s
.
Æloˇãd_huge
 +
usize
;

828 
¨ía
->
°©s
.
h°©s
[
ödex
].
nmÆloc
++;

829 
¨ía
->
°©s
.
h°©s
[
ödex
].
curhchunks
++;

830 
	}
}

833 
	$¨ía_huge_mÆloc_°©s_upd©e_undo
(
¨ía_t
 *
¨ía
, 
size_t
 
usize
)

835 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
∆˛as£s
 - 
NBINS
;

837 
	`ˇs£π
(
c⁄fig_°©s
);

839 
¨ía
->
°©s
.
nmÆloc_huge
--;

840 
¨ía
->
°©s
.
Æloˇãd_huge
 -
usize
;

841 
¨ía
->
°©s
.
h°©s
[
ödex
].
nmÆloc
--;

842 
¨ía
->
°©s
.
h°©s
[
ödex
].
curhchunks
--;

843 
	}
}

846 
	$¨ía_huge_dÆloc_°©s_upd©e
(
¨ía_t
 *
¨ía
, 
size_t
 
usize
)

848 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
∆˛as£s
 - 
NBINS
;

850 
	`ˇs£π
(
c⁄fig_°©s
);

852 
¨ía
->
°©s
.
ndÆloc_huge
++;

853 
¨ía
->
°©s
.
Æloˇãd_huge
 -
usize
;

854 
¨ía
->
°©s
.
h°©s
[
ödex
].
ndÆloc
++;

855 
¨ía
->
°©s
.
h°©s
[
ödex
].
curhchunks
--;

856 
	}
}

859 
	$¨ía_huge_ª£t_°©s_ˇn˚l
(
¨ía_t
 *
¨ía
, 
size_t
 
usize
)

861 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
∆˛as£s
 - 
NBINS
;

863 
	`ˇs£π
(
c⁄fig_°©s
);

865 
¨ía
->
°©s
.
ndÆloc_huge
++;

866 
¨ía
->
°©s
.
h°©s
[
ödex
].
ndÆloc
--;

867 
	}
}

870 
	$¨ía_huge_dÆloc_°©s_upd©e_undo
(
¨ía_t
 *
¨ía
, 
size_t
 
usize
)

872 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
∆˛as£s
 - 
NBINS
;

874 
	`ˇs£π
(
c⁄fig_°©s
);

876 
¨ía
->
°©s
.
ndÆloc_huge
--;

877 
¨ía
->
°©s
.
Æloˇãd_huge
 +
usize
;

878 
¨ía
->
°©s
.
h°©s
[
ödex
].
ndÆloc
--;

879 
¨ía
->
°©s
.
h°©s
[
ödex
].
curhchunks
++;

880 
	}
}

883 
	$¨ía_huge_øŒoc_°©s_upd©e
(
¨ía_t
 *
¨ía
, 
size_t
 
ﬁdsize
, size_à
usize
)

886 
	`¨ía_huge_dÆloc_°©s_upd©e
(
¨ía
, 
ﬁdsize
);

887 
	`¨ía_huge_mÆloc_°©s_upd©e
(
¨ía
, 
usize
);

888 
	}
}

891 
	$¨ía_huge_øŒoc_°©s_upd©e_undo
(
¨ía_t
 *
¨ía
, 
size_t
 
ﬁdsize
,

892 
size_t
 
usize
)

895 
	`¨ía_huge_dÆloc_°©s_upd©e_undo
(
¨ía
, 
ﬁdsize
);

896 
	`¨ía_huge_mÆloc_°©s_upd©e_undo
(
¨ía
, 
usize
);

897 
	}
}

899 
exã¡_node_t
 *

900 
	$¨ía_node_Æloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

902 
exã¡_node_t
 *
node
;

904 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

905 
node
 = 
	`ql_œ°
(&
¨ía
->
node_ˇche
, 
ql_lök
);

906 i‡(
node
 =
NULL
) {

907 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

908  (
	`ba£_Æloc
(
tsdn
, (
exã¡_node_t
)));

910 
	`ql_èû_ªmove
(&
¨ía
->
node_ˇche
, 
exã¡_node_t
, 
ql_lök
);

911 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

912  (
node
);

913 
	}
}

916 
	$¨ía_node_dÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
exã¡_node_t
 *
node
)

919 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

920 
	`ql_ñm_√w
(
node
, 
ql_lök
);

921 
	`ql_èû_ö£π
(&
¨ía
->
node_ˇche
, 
node
, 
ql_lök
);

922 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

923 
	}
}

926 
	$¨ía_chunk_Æloc_huge_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

927 
chunk_hooks_t
 *
chunk_hooks
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 *
zîo
,

928 
size_t
 
csize
)

930 *
ªt
;

931 
boﬁ
 
commô
 = 
åue
;

933 
ªt
 = 
	`chunk_Æloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
NULL
, 
csize
,

934 
Æignmít
, 
zîo
, &
commô
);

935 i‡(
ªt
 =
NULL
) {

937 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

938 i‡(
c⁄fig_°©s
) {

939 
	`¨ía_huge_mÆloc_°©s_upd©e_undo
(
¨ía
, 
usize
);

940 
¨ía
->
°©s
.
m≠≥d
 -
usize
;

942 
	`¨ía_«˘ive_sub
(
¨ía
, 
usize
 >> 
LG_PAGE
);

943 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

946  (
ªt
);

947 
	}
}

950 
	$¨ía_chunk_Æloc_huge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
,

951 
size_t
 
Æignmít
, 
boﬁ
 *
zîo
)

953 *
ªt
;

954 
chunk_hooks_t
 
chunk_hooks
 = 
CHUNK_HOOKS_INITIALIZER
;

955 
size_t
 
csize
 = 
	`CHUNK_CEILING
(
usize
);

957 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

960 i‡(
c⁄fig_°©s
) {

961 
	`¨ía_huge_mÆloc_°©s_upd©e
(
¨ía
, 
usize
);

962 
¨ía
->
°©s
.
m≠≥d
 +
usize
;

964 
	`¨ía_«˘ive_add
(
¨ía
, 
usize
 >> 
LG_PAGE
);

966 
ªt
 = 
	`chunk_Æloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
NULL
, 
csize
,

967 
Æignmít
, 
zîo
, 
åue
);

968 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

969 i‡(
ªt
 =
NULL
) {

970 
ªt
 = 
	`¨ía_chunk_Æloc_huge_h¨d
(
tsdn
, 
¨ía
, &
chunk_hooks
,

971 
usize
, 
Æignmít
, 
zîo
, 
csize
);

974  (
ªt
);

975 
	}
}

978 
	$¨ía_chunk_dÆloc_huge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
chunk
, 
size_t
 
usize
)

980 
chunk_hooks_t
 
chunk_hooks
 = 
CHUNK_HOOKS_INITIALIZER
;

981 
size_t
 
csize
;

983 
csize
 = 
	`CHUNK_CEILING
(
usize
);

984 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

985 i‡(
c⁄fig_°©s
) {

986 
	`¨ía_huge_dÆloc_°©s_upd©e
(
¨ía
, 
usize
);

987 
¨ía
->
°©s
.
m≠≥d
 -
usize
;

989 
	`¨ía_«˘ive_sub
(
¨ía
, 
usize
 >> 
LG_PAGE
);

991 
	`chunk_dÆloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
chunk
, 
csize
, 
åue
);

992 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

993 
	}
}

996 
	$¨ía_chunk_øŒoc_huge_simû¨
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
chunk
,

997 
size_t
 
ﬁdsize
, size_à
usize
)

1000 
	`as£π
(
	`CHUNK_CEILING
(
ﬁdsize
Ë=CHUNK_CEILING(
usize
));

1001 
	`as£π
(
ﬁdsize
 !
usize
);

1003 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1004 i‡(
c⁄fig_°©s
)

1005 
	`¨ía_huge_øŒoc_°©s_upd©e
(
¨ía
, 
ﬁdsize
, 
usize
);

1006 i‡(
ﬁdsize
 < 
usize
)

1007 
	`¨ía_«˘ive_add
(
¨ía
, (
usize
 - 
ﬁdsize
Ë>> 
LG_PAGE
);

1009 
	`¨ía_«˘ive_sub
(
¨ía
, (
ﬁdsize
 - 
usize
Ë>> 
LG_PAGE
);

1010 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1011 
	}
}

1014 
	$¨ía_chunk_øŒoc_huge_shrök
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
chunk
,

1015 
size_t
 
ﬁdsize
, size_à
usize
)

1017 
size_t
 
udiff
 = 
ﬁdsize
 - 
usize
;

1018 
size_t
 
cdiff
 = 
	`CHUNK_CEILING
(
ﬁdsize
Ë- CHUNK_CEILING(
usize
);

1020 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1021 i‡(
c⁄fig_°©s
) {

1022 
	`¨ía_huge_øŒoc_°©s_upd©e
(
¨ía
, 
ﬁdsize
, 
usize
);

1023 i‡(
cdiff
 != 0)

1024 
¨ía
->
°©s
.
m≠≥d
 -
cdiff
;

1026 
	`¨ía_«˘ive_sub
(
¨ía
, 
udiff
 >> 
LG_PAGE
);

1028 i‡(
cdiff
 != 0) {

1029 
chunk_hooks_t
 
chunk_hooks
 = 
CHUNK_HOOKS_INITIALIZER
;

1030 *
nchunk
 = (*)((
uöçå_t
)
chunk
 +

1031 
	`CHUNK_CEILING
(
usize
));

1033 
	`chunk_dÆloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
nchunk
, 
cdiff
,

1034 
åue
);

1036 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1037 
	}
}

1039 
boﬁ


1040 
	$¨ía_chunk_øŒoc_huge_ex∑nd_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

1041 
chunk_hooks_t
 *
chunk_hooks
, *
chunk
, 
size_t
 
ﬁdsize
, size_à
usize
,

1042 
boﬁ
 *
zîo
, *
nchunk
, 
size_t
 
udiff
, size_à
cdiff
)

1044 
boﬁ
 
îr
;

1045 
boﬁ
 
commô
 = 
åue
;

1047 
îr
 = (
	`chunk_Æloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
nchunk
, 
cdiff
,

1048 
chunksize
, 
zîo
, &
commô
Ë=
NULL
);

1049 i‡(
îr
) {

1051 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1052 i‡(
c⁄fig_°©s
) {

1053 
	`¨ía_huge_øŒoc_°©s_upd©e_undo
(
¨ía
, 
ﬁdsize
,

1054 
usize
);

1055 
¨ía
->
°©s
.
m≠≥d
 -
cdiff
;

1057 
	`¨ía_«˘ive_sub
(
¨ía
, 
udiff
 >> 
LG_PAGE
);

1058 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1059 } i‡(
chunk_hooks
->
	`mîge
(
chunk
, 
	`CHUNK_CEILING
(
ﬁdsize
), 
nchunk
,

1060 
cdiff
, 
åue
, 
¨ía
->
öd
)) {

1061 
	`chunk_dÆloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
nchunk
, 
cdiff
,

1062 *
zîo
, 
åue
);

1063 
îr
 = 
åue
;

1065  (
îr
);

1066 
	}
}

1068 
boﬁ


1069 
	$¨ía_chunk_øŒoc_huge_ex∑nd
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
chunk
,

1070 
size_t
 
ﬁdsize
, size_à
usize
, 
boﬁ
 *
zîo
)

1072 
boﬁ
 
îr
;

1073 
chunk_hooks_t
 
chunk_hooks
 = 
	`chunk_hooks_gë
(
tsdn
, 
¨ía
);

1074 *
nchunk
 = (*)((
uöçå_t
)
chunk
 + 
	`CHUNK_CEILING
(
ﬁdsize
));

1075 
size_t
 
udiff
 = 
usize
 - 
ﬁdsize
;

1076 
size_t
 
cdiff
 = 
	`CHUNK_CEILING
(
usize
Ë- CHUNK_CEILING(
ﬁdsize
);

1078 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1081 i‡(
c⁄fig_°©s
) {

1082 
	`¨ía_huge_øŒoc_°©s_upd©e
(
¨ía
, 
ﬁdsize
, 
usize
);

1083 
¨ía
->
°©s
.
m≠≥d
 +
cdiff
;

1085 
	`¨ía_«˘ive_add
(
¨ía
, 
udiff
 >> 
LG_PAGE
);

1087 
îr
 = (
	`chunk_Æloc_ˇche
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
nchunk
, 
cdiff
,

1088 
chunksize
, 
zîo
, 
åue
Ë=
NULL
);

1089 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1090 i‡(
îr
) {

1091 
îr
 = 
	`¨ía_chunk_øŒoc_huge_ex∑nd_h¨d
(
tsdn
, 
¨ía
,

1092 &
chunk_hooks
, 
chunk
, 
ﬁdsize
, 
usize
, 
zîo
, 
nchunk
, 
udiff
,

1093 
cdiff
);

1094 } i‡(
chunk_hooks
.
	`mîge
(
chunk
, 
	`CHUNK_CEILING
(
ﬁdsize
), 
nchunk
,

1095 
cdiff
, 
åue
, 
¨ía
->
öd
)) {

1096 
	`chunk_dÆloc_wøµî
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
nchunk
, 
cdiff
,

1097 *
zîo
, 
åue
);

1098 
îr
 = 
åue
;

1101  (
îr
);

1102 
	}
}

1109 
¨ía_run_t
 *

1110 
	$¨ía_run_fú°_be°_fô
(
¨ía_t
 *
¨ía
, 
size_t
 
size
)

1112 
szöd_t
 
öd
, 
i
;

1114 
öd
 = 
	`size2ödex
(
	`run_qu™tize_˚û
(
size
));

1115 
i
 = 
öd
; i < 
runs_avaû_n˛as£s
 + 
runs_avaû_büs
; i++) {

1116 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_run_hóp_fú°
(

1117 
	`¨ía_runs_avaû_gë
(
¨ía
, 
i
));

1118 i‡(
mis˚lm
 !
NULL
)

1119  (&
mis˚lm
->
run
);

1122  (
NULL
);

1123 
	}
}

1125 
¨ía_run_t
 *

1126 
	$¨ía_run_Æloc_œrge_hñ≥r
(
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
boﬁ
 
zîo
)

1128 
¨ía_run_t
 *
run
 = 
	`¨ía_run_fú°_be°_fô
(
¨ía
, 
	`s2u
(
size
));

1129 i‡(
run
 !
NULL
) {

1130 i‡(
	`¨ía_run_•lô_œrge
(
¨ía
, 
run
, 
size
, 
zîo
))

1131 
run
 = 
NULL
;

1133  (
run
);

1134 
	}
}

1136 
¨ía_run_t
 *

1137 
	$¨ía_run_Æloc_œrge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
boﬁ
 
zîo
)

1139 
¨ía_chunk_t
 *
chunk
;

1140 
¨ía_run_t
 *
run
;

1142 
	`as£π
(
size
 <
¨ía_maxrun
);

1143 
	`as£π
(
size
 =
	`PAGE_CEILING
(size));

1146 
run
 = 
	`¨ía_run_Æloc_œrge_hñ≥r
(
¨ía
, 
size
, 
zîo
);

1147 i‡(
run
 !
NULL
)

1148  (
run
);

1153 
chunk
 = 
	`¨ía_chunk_Æloc
(
tsdn
, 
¨ía
);

1154 i‡(
chunk
 !
NULL
) {

1155 
run
 = &
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
m≠_büs
)->run;

1156 i‡(
	`¨ía_run_•lô_œrge
(
¨ía
, 
run
, 
size
, 
zîo
))

1157 
run
 = 
NULL
;

1158  (
run
);

1166  (
	`¨ía_run_Æloc_œrge_hñ≥r
(
¨ía
, 
size
, 
zîo
));

1167 
	}
}

1169 
¨ía_run_t
 *

1170 
	$¨ía_run_Æloc_smÆl_hñ≥r
(
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
szöd_t
 
bööd
)

1172 
¨ía_run_t
 *
run
 = 
	`¨ía_run_fú°_be°_fô
(
¨ía
, 
size
);

1173 i‡(
run
 !
NULL
) {

1174 i‡(
	`¨ía_run_•lô_smÆl
(
¨ía
, 
run
, 
size
, 
bööd
))

1175 
run
 = 
NULL
;

1177  (
run
);

1178 
	}
}

1180 
¨ía_run_t
 *

1181 
	$¨ía_run_Æloc_smÆl
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
szöd_t
 
bööd
)

1183 
¨ía_chunk_t
 *
chunk
;

1184 
¨ía_run_t
 *
run
;

1186 
	`as£π
(
size
 <
¨ía_maxrun
);

1187 
	`as£π
(
size
 =
	`PAGE_CEILING
(size));

1188 
	`as£π
(
bööd
 !
BININD_INVALID
);

1191 
run
 = 
	`¨ía_run_Æloc_smÆl_hñ≥r
(
¨ía
, 
size
, 
bööd
);

1192 i‡(
run
 !
NULL
)

1193  (
run
);

1198 
chunk
 = 
	`¨ía_chunk_Æloc
(
tsdn
, 
¨ía
);

1199 i‡(
chunk
 !
NULL
) {

1200 
run
 = &
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
m≠_büs
)->run;

1201 i‡(
	`¨ía_run_•lô_smÆl
(
¨ía
, 
run
, 
size
, 
bööd
))

1202 
run
 = 
NULL
;

1203  (
run
);

1211  (
	`¨ía_run_Æloc_smÆl_hñ≥r
(
¨ía
, 
size
, 
bööd
));

1212 
	}
}

1214 
boﬁ


1215 
	$¨ía_lg_dúty_mu…_vÆid
(
ssize_t
 
lg_dúty_mu…
)

1218  (
lg_dúty_mu…
 >-1 &&Üg_dúty_mu… < (
ssize_t
)((
size_t
)

1220 
	}
}

1222 
ssize_t


1223 
	$¨ía_lg_dúty_mu…_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

1225 
ssize_t
 
lg_dúty_mu…
;

1227 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1228 
lg_dúty_mu…
 = 
¨ía
->lg_dirty_mult;

1229 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1231  (
lg_dúty_mu…
);

1232 
	}
}

1234 
boﬁ


1235 
	$¨ía_lg_dúty_mu…_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
ssize_t
 
lg_dúty_mu…
)

1238 i‡(!
	`¨ía_lg_dúty_mu…_vÆid
(
lg_dúty_mu…
))

1239  (
åue
);

1241 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1242 
¨ía
->
lg_dúty_mu…
 =Üg_dirty_mult;

1243 
	`¨ía_maybe_purge
(
tsdn
, 
¨ía
);

1244 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1246  (
Ál£
);

1247 
	}
}

1250 
	$¨ía_deˇy_dódlöe_öô
(
¨ía_t
 *
¨ía
)

1253 
	`as£π
(
›t_purge
 =
purge_mode_deˇy
);

1259 
	`n°ime_c›y
(&
¨ía
->
deˇy_dódlöe
, &¨ía->
deˇy_ïoch
);

1260 
	`n°ime_add
(&
¨ía
->
deˇy_dódlöe
, &¨ía->
deˇy_öãrvÆ
);

1261 i‡(
¨ía
->
deˇy_time
 > 0) {

1262 
n°ime_t
 
jôãr
;

1264 
	`n°ime_öô
(&
jôãr
, 
	`¥ng_ønge
(&
¨ía
->
deˇy_jôãr_°©e
,

1265 
	`n°ime_ns
(&
¨ía
->
deˇy_öãrvÆ
)));

1266 
	`n°ime_add
(&
¨ía
->
deˇy_dódlöe
, &
jôãr
);

1268 
	}
}

1270 
boﬁ


1271 
	$¨ía_deˇy_dódlöe_ªached
(c⁄° 
¨ía_t
 *
¨ía
, c⁄° 
n°ime_t
 *
time
)

1274 
	`as£π
(
›t_purge
 =
purge_mode_deˇy
);

1276  (
	`n°ime_com∑ª
(&
¨ía
->
deˇy_dódlöe
, 
time
) <= 0);

1277 
	}
}

1279 
size_t


1280 
	$¨ía_deˇy_backlog_≈ages_limô
(c⁄° 
¨ía_t
 *
¨ía
)

1282 c⁄° 
uöt64_t
 
h_°ïs
[] = {

1283 
	#STEP
(
°ï
, 
h
, 
x
, 
y
) \

1284 
h
,

	)

1285 
SMOOTHSTEP


1286 #unde‡
STEP


1288 
uöt64_t
 
sum
;

1289 
size_t
 
≈ages_limô_backlog
;

1290 
i
;

1292 
	`as£π
(
›t_purge
 =
purge_mode_deˇy
);

1299 
sum
 = 0;

1300 
i
 = 0; i < 
SMOOTHSTEP_NSTEPS
; i++)

1301 
sum
 +
¨ía
->
deˇy_backlog
[
i
] * 
h_°ïs
[i];

1302 
≈ages_limô_backlog
 = (
size_t
)(
sum
 >> 
SMOOTHSTEP_BFP
);

1304  (
≈ages_limô_backlog
);

1305 
	}
}

1308 
	$¨ía_deˇy_ïoch_adv™˚
(
¨ía_t
 *
¨ía
, c⁄° 
n°ime_t
 *
time
)

1310 
uöt64_t
 
«dv™˚_u64
;

1311 
n°ime_t
 
dñè
;

1312 
size_t
 
ndúty_dñè
;

1314 
	`as£π
(
›t_purge
 =
purge_mode_deˇy
);

1315 
	`as£π
(
	`¨ía_deˇy_dódlöe_ªached
(
¨ía
, 
time
));

1317 
	`n°ime_c›y
(&
dñè
, 
time
);

1318 
	`n°ime_subåa˘
(&
dñè
, &
¨ía
->
deˇy_ïoch
);

1319 
«dv™˚_u64
 = 
	`n°ime_divide
(&
dñè
, &
¨ía
->
deˇy_öãrvÆ
);

1320 
	`as£π
(
«dv™˚_u64
 > 0);

1323 
	`n°ime_c›y
(&
dñè
, &
¨ía
->
deˇy_öãrvÆ
);

1324 
	`n°ime_imu…ùly
(&
dñè
, 
«dv™˚_u64
);

1325 
	`n°ime_add
(&
¨ía
->
deˇy_ïoch
, &
dñè
);

1328 
	`¨ía_deˇy_dódlöe_öô
(
¨ía
);

1331 i‡(
«dv™˚_u64
 >
SMOOTHSTEP_NSTEPS
) {

1332 
	`mem£t
(
¨ía
->
deˇy_backlog
, 0, (
SMOOTHSTEP_NSTEPS
-1) *

1333 (
size_t
));

1335 
size_t
 
«dv™˚_z
 = (size_t)
«dv™˚_u64
;

1337 
	`as£π
((
uöt64_t
)
«dv™˚_z
 =
«dv™˚_u64
);

1339 
	`memmove
(
¨ía
->
deˇy_backlog
, &¨ía->deˇy_backlog[
«dv™˚_z
],

1340 (
SMOOTHSTEP_NSTEPS
 - 
«dv™˚_z
Ë* (
size_t
));

1341 i‡(
«dv™˚_z
 > 1) {

1342 
	`mem£t
(&
¨ía
->
deˇy_backlog
[
SMOOTHSTEP_NSTEPS
 -

1343 
«dv™˚_z
], 0, («dv™˚_z-1Ë* (
size_t
));

1346 
ndúty_dñè
 = (
¨ía
->
ndúty
 >áª«->
deˇy_ndúty
) ?árena->ndirty -

1347 
¨ía
->
deˇy_ndúty
 : 0;

1348 
¨ía
->
deˇy_ndúty
 =áª«->
ndúty
;

1349 
¨ía
->
deˇy_backlog
[
SMOOTHSTEP_NSTEPS
-1] = 
ndúty_dñè
;

1350 
¨ía
->
deˇy_backlog_≈ages_limô
 =

1351 
	`¨ía_deˇy_backlog_≈ages_limô
(
¨ía
);

1352 
	}
}

1354 
size_t


1355 
	$¨ía_deˇy_≈ages_limô
(
¨ía_t
 *
¨ía
)

1357 
size_t
 
≈ages_limô
;

1359 
	`as£π
(
›t_purge
 =
purge_mode_deˇy
);

1361 
≈ages_limô
 = 
¨ía
->
deˇy_backlog_≈ages_limô
;

1364 i‡(
¨ía
->
ndúty
 >áª«->
deˇy_ndúty
)

1365 
≈ages_limô
 +
¨ía
->
ndúty
 -áª«->
deˇy_ndúty
;

1367  (
≈ages_limô
);

1368 
	}
}

1371 
	$¨ía_deˇy_öô
(
¨ía_t
 *
¨ía
, 
ssize_t
 
deˇy_time
)

1374 
¨ía
->
deˇy_time
 = decay_time;

1375 i‡(
deˇy_time
 > 0) {

1376 
	`n°ime_öô2
(&
¨ía
->
deˇy_öãrvÆ
, 
deˇy_time
, 0);

1377 
	`n°ime_idivide
(&
¨ía
->
deˇy_öãrvÆ
, 
SMOOTHSTEP_NSTEPS
);

1380 
	`n°ime_öô
(&
¨ía
->
deˇy_ïoch
, 0);

1381 
	`n°ime_upd©e
(&
¨ía
->
deˇy_ïoch
);

1382 
¨ía
->
deˇy_jôãr_°©e
 = (
uöt64_t
)(
uöçå_t
)arena;

1383 
	`¨ía_deˇy_dódlöe_öô
(
¨ía
);

1384 
¨ía
->
deˇy_ndúty
 =áª«->
ndúty
;

1385 
¨ía
->
deˇy_backlog_≈ages_limô
 = 0;

1386 
	`mem£t
(
¨ía
->
deˇy_backlog
, 0, 
SMOOTHSTEP_NSTEPS
 * (
size_t
));

1387 
	}
}

1389 
boﬁ


1390 
	$¨ía_deˇy_time_vÆid
(
ssize_t
 
deˇy_time
)

1393 i‡(
deˇy_time
 < -1)

1394  (
Ál£
);

1395 i‡(
deˇy_time
 =-1 || (
uöt64_t
)deˇy_timê<
NSTIME_SEC_MAX
)

1396  (
åue
);

1397  (
Ál£
);

1398 
	}
}

1400 
ssize_t


1401 
	$¨ía_deˇy_time_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

1403 
ssize_t
 
deˇy_time
;

1405 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1406 
deˇy_time
 = 
¨ía
->decay_time;

1407 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1409  (
deˇy_time
);

1410 
	}
}

1412 
boﬁ


1413 
	$¨ía_deˇy_time_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
ssize_t
 
deˇy_time
)

1416 i‡(!
	`¨ía_deˇy_time_vÆid
(
deˇy_time
))

1417  (
åue
);

1419 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1428 
	`¨ía_deˇy_öô
(
¨ía
, 
deˇy_time
);

1429 
	`¨ía_maybe_purge
(
tsdn
, 
¨ía
);

1430 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1432  (
Ál£
);

1433 
	}
}

1436 
	$¨ía_maybe_purge_øtio
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

1439 
	`as£π
(
›t_purge
 =
purge_mode_øtio
);

1442 i‡(
¨ía
->
lg_dúty_mu…
 < 0)

1449 
åue
) {

1450 
size_t
 
thªshﬁd
 = (
¨ía
->
«˘ive
 >>áª«->
lg_dúty_mu…
);

1451 i‡(
thªshﬁd
 < 
chunk_≈ages
)

1452 
thªshﬁd
 = 
chunk_≈ages
;

1457 i‡(
¨ía
->
ndúty
 <
thªshﬁd
)

1459 
	`¨ía_purge_to_limô
(
tsdn
, 
¨ía
, 
thªshﬁd
);

1461 
	}
}

1464 
	$¨ía_maybe_purge_deˇy
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

1466 
n°ime_t
 
time
;

1467 
size_t
 
ndúty_limô
;

1469 
	`as£π
(
›t_purge
 =
purge_mode_deˇy
);

1472 i‡(
¨ía
->
deˇy_time
 <= 0) {

1473 i‡(
¨ía
->
deˇy_time
 == 0)

1474 
	`¨ía_purge_to_limô
(
tsdn
, 
¨ía
, 0);

1478 
	`n°ime_c›y
(&
time
, &
¨ía
->
deˇy_ïoch
);

1479 i‡(
	`u∆ikñy
(
	`n°ime_upd©e
(&
time
))) {

1481 
	`n°ime_c›y
(&
time
, &
¨ía
->
deˇy_dódlöe
);

1484 i‡(
	`¨ía_deˇy_dódlöe_ªached
(
¨ía
, &
time
))

1485 
	`¨ía_deˇy_ïoch_adv™˚
(
¨ía
, &
time
);

1487 
ndúty_limô
 = 
	`¨ía_deˇy_≈ages_limô
(
¨ía
);

1493 i‡(
¨ía
->
ndúty
 <
ndúty_limô
)

1495 
	`¨ía_purge_to_limô
(
tsdn
, 
¨ía
, 
ndúty_limô
);

1496 
	}
}

1499 
	$¨ía_maybe_purge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

1503 i‡(
¨ía
->
purgög
)

1506 i‡(
›t_purge
 =
purge_mode_øtio
)

1507 
	`¨ía_maybe_purge_øtio
(
tsdn
, 
¨ía
);

1509 
	`¨ía_maybe_purge_deˇy
(
tsdn
, 
¨ía
);

1510 
	}
}

1512 
size_t


1513 
	$¨ía_dúty_cou¡
(
¨ía_t
 *
¨ía
)

1515 
size_t
 
ndúty
 = 0;

1516 
¨ía_runs_dúty_lök_t
 *
rdñm
;

1517 
exã¡_node_t
 *
chunk£lm
;

1519 
rdñm
 = 
	`qr_√xt
(&
¨ía
->
runs_dúty
, 
rd_lök
),

1520 
chunk£lm
 = 
	`qr_√xt
(&
¨ía
->
chunks_ˇche
, 
cc_lök
);

1521 
rdñm
 !&
¨ía
->
runs_dúty
;Ñdñm = 
	`qr_√xt
‘dñm, 
rd_lök
)) {

1522 
size_t
 
≈ages
;

1524 i‡(
rdñm
 =&
chunk£lm
->
rd
) {

1525 
≈ages
 = 
	`exã¡_node_size_gë
(
chunk£lm
Ë>> 
LG_PAGE
;

1526 
chunk£lm
 = 
	`qr_√xt
(chunk£lm, 
cc_lök
);

1528 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(

1529 
rdñm
);

1530 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 =

1531 
	`¨ía_rd_to_mis˚lm
(
rdñm
);

1532 
size_t
 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

1533 
	`as£π
(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) ==

1535 
	`as£π
(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) == 0);

1536 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
) != 0);

1537 
≈ages
 = 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
,

1538 
∑geöd
Ë>> 
LG_PAGE
;

1540 
ndúty
 +
≈ages
;

1543  (
ndúty
);

1544 
	}
}

1546 
size_t


1547 
	$¨ía_°ash_dúty
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

1548 
size_t
 
ndúty_limô
, 
¨ía_runs_dúty_lök_t
 *
purge_runs_£¡öñ
,

1549 
exã¡_node_t
 *
purge_chunks_£¡öñ
)

1551 
¨ía_runs_dúty_lök_t
 *
rdñm
, *
rdñm_√xt
;

1552 
exã¡_node_t
 *
chunk£lm
;

1553 
size_t
 
n°ashed
 = 0;

1556 
rdñm
 = 
	`qr_√xt
(&
¨ía
->
runs_dúty
, 
rd_lök
),

1557 
chunk£lm
 = 
	`qr_√xt
(&
¨ía
->
chunks_ˇche
, 
cc_lök
);

1558 
rdñm
 !&
¨ía
->
runs_dúty
;Ñdñm = 
rdñm_√xt
) {

1559 
size_t
 
≈ages
;

1560 
rdñm_√xt
 = 
	`qr_√xt
(
rdñm
, 
rd_lök
);

1562 i‡(
rdñm
 =&
chunk£lm
->
rd
) {

1563 
exã¡_node_t
 *
chunk£lm_√xt
;

1564 
boﬁ
 
zîo
;

1565 
UNUSED
 *
chunk
;

1567 
≈ages
 = 
	`exã¡_node_size_gë
(
chunk£lm
Ë>> 
LG_PAGE
;

1568 i‡(
›t_purge
 =
purge_mode_deˇy
 && 
¨ía
->
ndúty
 -

1569 (
n°ashed
 + 
≈ages
Ë< 
ndúty_limô
)

1572 
chunk£lm_√xt
 = 
	`qr_√xt
(
chunk£lm
, 
cc_lök
);

1577 
zîo
 = 
Ál£
;

1578 
chunk
 = 
	`chunk_Æloc_ˇche
(
tsdn
, 
¨ía
, 
chunk_hooks
,

1579 
	`exã¡_node_addr_gë
(
chunk£lm
),

1580 
	`exã¡_node_size_gë
(
chunk£lm
), 
chunksize
, &
zîo
,

1581 
Ál£
);

1582 
	`as£π
(
chunk
 =
	`exã¡_node_addr_gë
(
chunk£lm
));

1583 
	`as£π
(
zîo
 =
	`exã¡_node_zî€d_gë
(
chunk£lm
));

1584 
	`exã¡_node_dúty_ö£π
(
chunk£lm
, 
purge_runs_£¡öñ
,

1585 
purge_chunks_£¡öñ
);

1586 
	`as£π
(
≈ages
 =(
	`exã¡_node_size_gë
(
chunk£lm
) >>

1587 
LG_PAGE
));

1588 
chunk£lm
 = 
chunk£lm_√xt
;

1590 
¨ía_chunk_t
 *
chunk
 =

1591 (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
rdñm
);

1592 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 =

1593 
	`¨ía_rd_to_mis˚lm
(
rdñm
);

1594 
size_t
 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

1595 
¨ía_run_t
 *
run
 = &
mis˚lm
->run;

1596 
size_t
 
run_size
 =

1597 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
∑geöd
);

1599 
≈ages
 = 
run_size
 >> 
LG_PAGE
;

1600 i‡(
›t_purge
 =
purge_mode_deˇy
 && 
¨ía
->
ndúty
 -

1601 (
n°ashed
 + 
≈ages
Ë< 
ndúty_limô
)

1604 
	`as£π
(
∑geöd
 + 
≈ages
 <
chunk_≈ages
);

1605 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
) ==

1606 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
+
≈ages
-1));

1612 i‡(
chunk
 =
¨ía
->
•¨e
)

1613 
	`¨ía_chunk_Æloc
(
tsdn
, 
¨ía
);

1616 
	`¨ía_run_•lô_œrge
(
¨ía
, 
run
, 
run_size
, 
Ál£
);

1618 i‡(
Ál£
)

1619 
	`qr_√w
(
rdñm
, 
rd_lök
);

1621 
	`as£π
(
	`qr_√xt
(
rdñm
, 
rd_lök
) ==Ñdelm);

1622 
	`as£π
(
	`qr_¥ev
(
rdñm
, 
rd_lök
) ==Ñdelm);

1624 
	`qr_mñd
(
purge_runs_£¡öñ
, 
rdñm
, 
rd_lök
);

1627 
n°ashed
 +
≈ages
;

1628 i‡(
›t_purge
 =
purge_mode_øtio
 && 
¨ía
->
ndúty
 - 
n°ashed
 <=

1629 
ndúty_limô
)

1633  (
n°ashed
);

1634 
	}
}

1636 
size_t


1637 
	$¨ía_purge_°ashed
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

1638 
¨ía_runs_dúty_lök_t
 *
purge_runs_£¡öñ
,

1639 
exã¡_node_t
 *
purge_chunks_£¡öñ
)

1641 
size_t
 
≈urged
, 
nmadvi£
;

1642 
¨ía_runs_dúty_lök_t
 *
rdñm
;

1643 
exã¡_node_t
 *
chunk£lm
;

1645 i‡(
c⁄fig_°©s
)

1646 
nmadvi£
 = 0;

1647 
≈urged
 = 0;

1649 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1650 
rdñm
 = 
	`qr_√xt
(
purge_runs_£¡öñ
, 
rd_lök
),

1651 
chunk£lm
 = 
	`qr_√xt
(
purge_chunks_£¡öñ
, 
cc_lök
);

1652 
rdñm
 !
purge_runs_£¡öñ
;Ñdñm = 
	`qr_√xt
‘dñm, 
rd_lök
)) {

1653 
size_t
 
≈ages
;

1655 i‡(
rdñm
 =&
chunk£lm
->
rd
) {

1664 
size_t
 
size
 = 
	`exã¡_node_size_gë
(
chunk£lm
);

1665 
≈ages
 = 
size
 >> 
LG_PAGE
;

1666 
chunk£lm
 = 
	`qr_√xt
(chunk£lm, 
cc_lök
);

1668 
size_t
 
∑geöd
, 
run_size
, 
Êag_unzî€d
, 
Êags
, 
i
;

1669 
boﬁ
 
decommôãd
;

1670 
¨ía_chunk_t
 *
chunk
 =

1671 (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
rdñm
);

1672 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 =

1673 
	`¨ía_rd_to_mis˚lm
(
rdñm
);

1674 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

1675 
run_size
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
);

1676 
≈ages
 = 
run_size
 >> 
LG_PAGE
;

1678 
	`as£π
(
∑geöd
 + 
≈ages
 <
chunk_≈ages
);

1679 
	`as£π
(!
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
∑geöd
));

1680 
	`as£π
(!
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
,

1681 
∑geöd
+
≈ages
-1));

1682 
decommôãd
 = !
chunk_hooks
->
	`decommô
(
chunk
, 
chunksize
,

1683 
∑geöd
 << 
LG_PAGE
, 
≈ages
 << LG_PAGE, 
¨ía
->
öd
);

1684 i‡(
decommôãd
) {

1685 
Êag_unzî€d
 = 0;

1686 
Êags
 = 
CHUNK_MAP_DECOMMITTED
;

1688 
Êag_unzî€d
 = 
	`chunk_purge_wøµî
(
tsdn
, 
¨ía
,

1689 
chunk_hooks
, 
chunk
, 
chunksize
, 
∑geöd
 <<

1690 
LG_PAGE
, 
run_size
Ë? 
CHUNK_MAP_UNZEROED
 : 0;

1691 
Êags
 = 
Êag_unzî€d
;

1693 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
+
≈ages
-1, 0,

1694 
Êags
);

1695 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
, 
run_size
,

1696 
Êags
);

1709 
i
 = 1; i < 
≈ages
-1; i++) {

1710 
	`¨ía_m≠bôs_öã∫Æ_£t
(
chunk
, 
∑geöd
+
i
,

1711 
Êag_unzî€d
);

1715 
≈urged
 +
≈ages
;

1716 i‡(
c⁄fig_°©s
)

1717 
nmadvi£
++;

1719 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1721 i‡(
c⁄fig_°©s
) {

1722 
¨ía
->
°©s
.
nmadvi£
 +=Çmadvise;

1723 
¨ía
->
°©s
.
purged
 +
≈urged
;

1726  (
≈urged
);

1727 
	}
}

1730 
	$¨ía_un°ash_purged
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

1731 
¨ía_runs_dúty_lök_t
 *
purge_runs_£¡öñ
,

1732 
exã¡_node_t
 *
purge_chunks_£¡öñ
)

1734 
¨ía_runs_dúty_lök_t
 *
rdñm
, *
rdñm_√xt
;

1735 
exã¡_node_t
 *
chunk£lm
;

1738 
rdñm
 = 
	`qr_√xt
(
purge_runs_£¡öñ
, 
rd_lök
),

1739 
chunk£lm
 = 
	`qr_√xt
(
purge_chunks_£¡öñ
, 
cc_lök
);

1740 
rdñm
 !
purge_runs_£¡öñ
;Ñdñm = 
rdñm_√xt
) {

1741 
rdñm_√xt
 = 
	`qr_√xt
(
rdñm
, 
rd_lök
);

1742 i‡(
rdñm
 =&
chunk£lm
->
rd
) {

1743 
exã¡_node_t
 *
chunk£lm_√xt
 = 
	`qr_√xt
(
chunk£lm
,

1744 
cc_lök
);

1745 *
addr
 = 
	`exã¡_node_addr_gë
(
chunk£lm
);

1746 
size_t
 
size
 = 
	`exã¡_node_size_gë
(
chunk£lm
);

1747 
boﬁ
 
zî€d
 = 
	`exã¡_node_zî€d_gë
(
chunk£lm
);

1748 
boﬁ
 
commôãd
 = 
	`exã¡_node_commôãd_gë
(
chunk£lm
);

1749 
	`exã¡_node_dúty_ªmove
(
chunk£lm
);

1750 
	`¨ía_node_dÆloc
(
tsdn
, 
¨ía
, 
chunk£lm
);

1751 
chunk£lm
 = 
chunk£lm_√xt
;

1752 
	`chunk_dÆloc_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
addr
,

1753 
size
, 
zî€d
, 
commôãd
);

1755 
¨ía_chunk_t
 *
chunk
 =

1756 (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
rdñm
);

1757 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 =

1758 
	`¨ía_rd_to_mis˚lm
(
rdñm
);

1759 
size_t
 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

1760 
boﬁ
 
decommôãd
 = (
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
,

1761 
∑geöd
) != 0);

1762 
¨ía_run_t
 *
run
 = &
mis˚lm
->run;

1763 
	`qr_ªmove
(
rdñm
, 
rd_lök
);

1764 
	`¨ía_run_dÆloc
(
tsdn
, 
¨ía
, 
run
, 
Ál£
, 
åue
,

1765 
decommôãd
);

1768 
	}
}

1780 
	$¨ía_purge_to_limô
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
ndúty_limô
)

1782 
chunk_hooks_t
 
chunk_hooks
 = 
	`chunk_hooks_gë
(
tsdn
, 
¨ía
);

1783 
size_t
 
≈urge
, 
≈urged
;

1784 
¨ía_runs_dúty_lök_t
 
purge_runs_£¡öñ
;

1785 
exã¡_node_t
 
purge_chunks_£¡öñ
;

1787 
¨ía
->
purgög
 = 
åue
;

1793 i‡(
Ál£
 && 
c⁄fig_debug
) {

1794 
size_t
 
ndúty
 = 
	`¨ía_dúty_cou¡
(
¨ía
);

1795 
	`as£π
(
ndúty
 =
¨ía
->ndirty);

1797 
	`as£π
(
›t_purge
 !
purge_mode_øtio
 || (
¨ía
->
«˘ive
 >>

1798 
¨ía
->
lg_dúty_mu…
Ë<áª«->
ndúty
 || 
ndúty_limô
 == 0);

1800 
	`qr_√w
(&
purge_runs_£¡öñ
, 
rd_lök
);

1801 
	`exã¡_node_dúty_lökage_öô
(&
purge_chunks_£¡öñ
);

1803 
≈urge
 = 
	`¨ía_°ash_dúty
(
tsdn
, 
¨ía
, &
chunk_hooks
, 
ndúty_limô
,

1804 &
purge_runs_£¡öñ
, &
purge_chunks_£¡öñ
);

1805 i‡(
≈urge
 == 0)

1806 
œbñ_ªtu∫
;

1807 
≈urged
 = 
	`¨ía_purge_°ashed
(
tsdn
, 
¨ía
, &
chunk_hooks
,

1808 &
purge_runs_£¡öñ
, &
purge_chunks_£¡öñ
);

1809 
	`as£π
(
≈urged
 =
≈urge
);

1810 
	`¨ía_un°ash_purged
(
tsdn
, 
¨ía
, &
chunk_hooks
, &
purge_runs_£¡öñ
,

1811 &
purge_chunks_£¡öñ
);

1813 i‡(
c⁄fig_°©s
)

1814 
¨ía
->
°©s
.
≈urge
++;

1816 
œbñ_ªtu∫
:

1817 
¨ía
->
purgög
 = 
Ál£
;

1818 
	}
}

1821 
	$¨ía_purge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
boﬁ
 
Æl
)

1824 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

1825 i‡(
Æl
)

1826 
	`¨ía_purge_to_limô
(
tsdn
, 
¨ía
, 0);

1828 
	`¨ía_maybe_purge
(
tsdn
, 
¨ía
);

1829 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

1830 
	}
}

1833 
	$¨ía_achunk_¥of_ª£t
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
)

1835 
size_t
 
∑geöd
, 
≈ages
;

1837 
	`ˇs£π
(
c⁄fig_¥of
);

1838 
	`as£π
(
›t_¥of
);

1844 
∑geöd
 = 
m≠_büs
;Öageöd < 
chunk_≈ages
;Öageöd +
≈ages
) {

1845 i‡(
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
∑geöd
) != 0) {

1846 i‡(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
∑geöd
) != 0) {

1847 *
±r
 = (*)((
uöçå_t
)
chunk
 + (
∑geöd


1848 << 
LG_PAGE
));

1849 
size_t
 
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
,

1850 
c⁄fig_¥of
);

1852 
	`¥of_‰ì
(
tsd
, 
±r
, 
usize
);

1853 
≈ages
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
,

1854 
∑geöd
Ë>> 
LG_PAGE
;

1857 
size_t
 
bööd
 = 
	`¨ía_m≠bôs_bööd_gë
(
chunk
,

1858 
∑geöd
);

1859 
¨ía_bö_öfo_t
 *
bö_öfo
 =

1860 &
¨ía_bö_öfo
[
bööd
];

1861 
≈ages
 = 
bö_öfo
->
run_size
 >> 
LG_PAGE
;

1865 
≈ages
 = 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
,

1866 
∑geöd
Ë>> 
LG_PAGE
;

1868 
	`as£π
(
∑geöd
 + 
≈ages
 <
chunk_≈ages
);

1870 
	}
}

1873 
	$¨ía_ª£t
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
)

1875 
i
;

1876 
exã¡_node_t
 *
node
;

1893 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

1894 
	`ql_f‹óch
(
node
, &
¨ía
->
achunks
, 
ql_lök
) {

1895 
	`¨ía_achunk_¥of_ª£t
(
tsd
, 
¨ía
,

1896 
	`exã¡_node_addr_gë
(
node
));

1901 i‡(
c⁄fig_°©s
) {

1902 
i
 = 0; i < 
∆˛as£s
; i++)

1903 
¨ía
->
°©s
.
l°©s
[
i
].
cuºuns
 = 0;

1907 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
huge_mtx
);

1908 
node
 = 
	`ql_œ°
(&
¨ía
->
huge
, 
ql_lök
);Çodê!
NULL
;Çode =

1909 
	`ql_œ°
(&
¨ía
->
huge
, 
ql_lök
)) {

1910 *
±r
 = 
	`exã¡_node_addr_gë
(
node
);

1911 
size_t
 
usize
;

1913 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
huge_mtx
);

1914 i‡(
c⁄fig_°©s
 || (
c⁄fig_¥of
 && 
›t_¥of
))

1915 
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

1917 i‡(
c⁄fig_¥of
 && 
›t_¥of
)

1918 
	`¥of_‰ì
(
tsd
, 
±r
, 
usize
);

1919 
	`huge_dÆloc
(
	`tsd_tsdn
(
tsd
), 
±r
);

1920 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
huge_mtx
);

1922 i‡(
c⁄fig_°©s
)

1923 
	`¨ía_huge_ª£t_°©s_ˇn˚l
(
¨ía
, 
usize
);

1925 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
huge_mtx
);

1927 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
lock
);

1930 
i
 = 0; i < 
NBINS
; i++) {

1931 
¨ía_bö_t
 *
bö
 = &
¨ía
->
bös
[
i
];

1932 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

1933 
bö
->
runcur
 = 
NULL
;

1934 
	`¨ía_run_hóp_√w
(&
bö
->
runs
);

1935 i‡(
c⁄fig_°©s
) {

1936 
bö
->
°©s
.
cuºegs
 = 0;

1937 
bö
->
°©s
.
cuºuns
 = 0;

1939 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

1946 
	`qr_√w
(&
¨ía
->
runs_dúty
, 
rd_lök
);

1947 
node
 = 
	`qr_√xt
(&
¨ía
->
chunks_ˇche
, 
cc_lök
);

1948 
node
 !&
¨ía
->
chunks_ˇche
;Çodê
	`qr_√xt
“ode, 
cc_lök
)) {

1949 
	`qr_√w
(&
node
->
rd
, 
rd_lök
);

1950 
	`qr_mñd
(&
¨ía
->
runs_dúty
, &
node
->
rd
, 
rd_lök
);

1954 
node
 = 
	`ql_œ°
(&
¨ía
->
achunks
, 
ql_lök
);Çodê!
NULL
;Çode =

1955 
	`ql_œ°
(&
¨ía
->
achunks
, 
ql_lök
)) {

1956 
	`ql_ªmove
(&
¨ía
->
achunks
, 
node
, 
ql_lök
);

1957 
	`¨ía_chunk_disˇrd
(
	`tsd_tsdn
(
tsd
), 
¨ía
,

1958 
	`exã¡_node_addr_gë
(
node
));

1962 i‡(
¨ía
->
•¨e
 !
NULL
) {

1963 
	`¨ía_chunk_disˇrd
(
	`tsd_tsdn
(
tsd
), 
¨ía
,áª«->
•¨e
);

1964 
¨ía
->
•¨e
 = 
NULL
;

1967 
	`as£π
(!
¨ía
->
purgög
);

1968 
¨ía
->
«˘ive
 = 0;

1970 
i
 = 0; i < 
runs_avaû_n˛as£s
; i++)

1971 
	`¨ía_run_hóp_√w
(&
¨ía
->
runs_avaû
[
i
]);

1973 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
lock
);

1974 
	}
}

1977 
	$¨ía_run_cﬂÀs˚
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
size_t
 *
p_size
,

1978 
size_t
 *
p_run_öd
, size_à*
p_run_∑ges
, size_à
Êag_dúty
,

1979 
size_t
 
Êag_decommôãd
)

1981 
size_t
 
size
 = *
p_size
;

1982 
size_t
 
run_öd
 = *
p_run_öd
;

1983 
size_t
 
run_∑ges
 = *
p_run_∑ges
;

1986 i‡(
run_öd
 + 
run_∑ges
 < 
chunk_≈ages
 &&

1987 
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
, 
run_öd
+
run_∑ges
) == 0 &&

1988 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
+
run_∑ges
Ë=
Êag_dúty
 &&

1989 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
+
run_∑ges
) ==

1990 
Êag_decommôãd
) {

1991 
size_t
 
ƒun_size
 = 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
,

1992 
run_öd
+
run_∑ges
);

1993 
size_t
 
ƒun_∑ges
 = 
ƒun_size
 >> 
LG_PAGE
;

1999 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
,

2000 
run_öd
+
run_∑ges
+
ƒun_∑ges
-1Ë=
ƒun_size
);

2001 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
,

2002 
run_öd
+
run_∑ges
+
ƒun_∑ges
-1Ë=
Êag_dúty
);

2003 
	`as£π
(
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
,

2004 
run_öd
+
run_∑ges
+
ƒun_∑ges
-1Ë=
Êag_decommôãd
);

2005 
	`¨ía_avaû_ªmove
(
¨ía
, 
chunk
, 
run_öd
+
run_∑ges
, 
ƒun_∑ges
);

2011 i‡(
Êag_dúty
 != 0) {

2012 
	`¨ía_run_dúty_ªmove
(
¨ía
, 
chunk
, 
run_öd
+
run_∑ges
,

2013 
ƒun_∑ges
);

2016 
size
 +
ƒun_size
;

2017 
run_∑ges
 +
ƒun_∑ges
;

2019 
	`¨ía_m≠bôs_u«Œoˇãd_size_£t
(
chunk
, 
run_öd
, 
size
);

2020 
	`¨ía_m≠bôs_u«Œoˇãd_size_£t
(
chunk
, 
run_öd
+
run_∑ges
-1,

2021 
size
);

2025 i‡(
run_öd
 > 
m≠_büs
 && 
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
,

2026 
run_öd
-1Ë=0 && 
	`¨ía_m≠bôs_dúty_gë
(
chunk
,Ñun_ind-1) ==

2027 
Êag_dúty
 && 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
-1) ==

2028 
Êag_decommôãd
) {

2029 
size_t
 
¥un_size
 = 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
,

2030 
run_öd
-1);

2031 
size_t
 
¥un_∑ges
 = 
¥un_size
 >> 
LG_PAGE
;

2033 
run_öd
 -
¥un_∑ges
;

2039 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
run_öd
) ==

2040 
¥un_size
);

2041 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
Ë=
Êag_dúty
);

2042 
	`as£π
(
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
) ==

2043 
Êag_decommôãd
);

2044 
	`¨ía_avaû_ªmove
(
¨ía
, 
chunk
, 
run_öd
, 
¥un_∑ges
);

2050 i‡(
Êag_dúty
 != 0) {

2051 
	`¨ía_run_dúty_ªmove
(
¨ía
, 
chunk
, 
run_öd
,

2052 
¥un_∑ges
);

2055 
size
 +
¥un_size
;

2056 
run_∑ges
 +
¥un_∑ges
;

2058 
	`¨ía_m≠bôs_u«Œoˇãd_size_£t
(
chunk
, 
run_öd
, 
size
);

2059 
	`¨ía_m≠bôs_u«Œoˇãd_size_£t
(
chunk
, 
run_öd
+
run_∑ges
-1,

2060 
size
);

2063 *
p_size
 = 
size
;

2064 *
p_run_öd
 = 
run_öd
;

2065 *
p_run_∑ges
 = 
run_∑ges
;

2066 
	}
}

2068 
size_t


2069 
	$¨ía_run_size_gë
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
¨ía_run_t
 *
run
,

2070 
size_t
 
run_öd
)

2072 
size_t
 
size
;

2074 
	`as£π
(
run_öd
 >
m≠_büs
);

2075 
	`as£π
(
run_öd
 < 
chunk_≈ages
);

2077 i‡(
	`¨ía_m≠bôs_œrge_gë
(
chunk
, 
run_öd
) != 0) {

2078 
size
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
run_öd
);

2079 
	`as£π
(
size
 =
PAGE
 || 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
,

2080 
run_öd
+(
size
>>
LG_PAGE
)-1) == 0);

2082 
¨ía_bö_öfo_t
 *
bö_öfo
 = &
¨ía_bö_öfo
[
run
->
bööd
];

2083 
size
 = 
bö_öfo
->
run_size
;

2086  (
size
);

2087 
	}
}

2090 
	$¨ía_run_dÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_run_t
 *
run
, 
boﬁ
 
dúty
,

2091 
boﬁ
 
˛ó√d
, boﬁ 
decommôãd
)

2093 
¨ía_chunk_t
 *
chunk
;

2094 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

2095 
size_t
 
size
, 
run_öd
, 
run_∑ges
, 
Êag_dúty
, 
Êag_decommôãd
;

2097 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
run
);

2098 
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

2099 
run_öd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

2100 
	`as£π
(
run_öd
 >
m≠_büs
);

2101 
	`as£π
(
run_öd
 < 
chunk_≈ages
);

2102 
size
 = 
	`¨ía_run_size_gë
(
¨ía
, 
chunk
, 
run
, 
run_öd
);

2103 
run_∑ges
 = (
size
 >> 
LG_PAGE
);

2104 
	`¨ía_«˘ive_sub
(
¨ía
, 
run_∑ges
);

2111 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
) ==

2112 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
+
run_∑ges
-1));

2113 i‡(!
˛ó√d
 && !
decommôãd
 && 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
)

2115 
dúty
 = 
åue
;

2116 
Êag_dúty
 = 
dúty
 ? 
CHUNK_MAP_DIRTY
 : 0;

2117 
Êag_decommôãd
 = 
decommôãd
 ? 
CHUNK_MAP_DECOMMITTED
 : 0;

2120 i‡(
dúty
 || 
decommôãd
) {

2121 
size_t
 
Êags
 = 
Êag_dúty
 | 
Êag_decommôãd
;

2122 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
run_öd
, 
size
, 
Êags
);

2123 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
run_öd
+
run_∑ges
-1, 
size
,

2124 
Êags
);

2126 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
run_öd
, 
size
,

2127 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
run_öd
));

2128 
	`¨ía_m≠bôs_u«Œoˇãd_£t
(
chunk
, 
run_öd
+
run_∑ges
-1, 
size
,

2129 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
run_öd
+
run_∑ges
-1));

2132 
	`¨ía_run_cﬂÀs˚
(
¨ía
, 
chunk
, &
size
, &
run_öd
, &
run_∑ges
,

2133 
Êag_dúty
, 
Êag_decommôãd
);

2136 
	`as£π
(
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
run_öd
) ==

2137 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
run_öd
+
run_∑ges
-1));

2138 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
) ==

2139 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
+
run_∑ges
-1));

2140 
	`as£π
(
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
) ==

2141 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
run_öd
+
run_∑ges
-1));

2142 
	`¨ía_avaû_ö£π
(
¨ía
, 
chunk
, 
run_öd
, 
run_∑ges
);

2144 i‡(
dúty
)

2145 
	`¨ía_run_dúty_ö£π
(
¨ía
, 
chunk
, 
run_öd
, 
run_∑ges
);

2148 i‡(
size
 =
¨ía_maxrun
) {

2149 
	`as£π
(
run_öd
 =
m≠_büs
);

2150 
	`as£π
(
run_∑ges
 =(
¨ía_maxrun
 >> 
LG_PAGE
));

2151 
	`¨ía_chunk_dÆloc
(
tsdn
, 
¨ía
, 
chunk
);

2161 i‡(
dúty
)

2162 
	`¨ía_maybe_purge
(
tsdn
, 
¨ía
);

2163 
	}
}

2166 
	$¨ía_run_åim_hód
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

2167 
¨ía_run_t
 *
run
, 
size_t
 
ﬁdsize
, size_à
√wsize
)

2169 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

2170 
size_t
 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

2171 
size_t
 
hód_≈ages
 = (
ﬁdsize
 - 
√wsize
Ë>> 
LG_PAGE
;

2172 
size_t
 
Êag_dúty
 = 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
);

2173 
size_t
 
Êag_decommôãd
 = 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
∑geöd
);

2174 
size_t
 
Êag_unzî€d_mask
 = (
Êag_dúty
 | 
Êag_decommôãd
) == 0 ?

2175 
CHUNK_MAP_UNZEROED
 : 0;

2177 
	`as£π
(
ﬁdsize
 > 
√wsize
);

2184 
	`as£π
(
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
Ë=
ﬁdsize
);

2185 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
+
hód_≈ages
-1, 0, 
Êag_dúty
 |

2186 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

2187 
∑geöd
+
hód_≈ages
-1)));

2188 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
, 
ﬁdsize
-
√wsize
, 
Êag_dúty
 |

2189 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
∑geöd
)));

2191 i‡(
c⁄fig_debug
) {

2192 
UNUSED
 
size_t
 
èû_≈ages
 = 
√wsize
 >> 
LG_PAGE
;

2193 
	`as£π
(
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
,

2194 
∑geöd
+
hód_≈ages
+
èû_≈ages
-1) == 0);

2195 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
,

2196 
∑geöd
+
hód_≈ages
+
èû_≈ages
-1Ë=
Êag_dúty
);

2198 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
+
hód_≈ages
, 
√wsize
,

2199 
Êag_dúty
 | (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

2200 
∑geöd
+
hód_≈ages
)));

2202 
	`¨ía_run_dÆloc
(
tsdn
, 
¨ía
, 
run
, 
Ál£
, fÆ£, (
Êag_decommôãd
 !=

2204 
	}
}

2207 
	$¨ía_run_åim_èû
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

2208 
¨ía_run_t
 *
run
, 
size_t
 
ﬁdsize
, size_à
√wsize
, 
boﬁ
 
dúty
)

2210 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

2211 
size_t
 
∑geöd
 = 
	`¨ía_mis˚lm_to_∑geöd
(
mis˚lm
);

2212 
size_t
 
hód_≈ages
 = 
√wsize
 >> 
LG_PAGE
;

2213 
size_t
 
Êag_dúty
 = 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
);

2214 
size_t
 
Êag_decommôãd
 = 
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
, 
∑geöd
);

2215 
size_t
 
Êag_unzî€d_mask
 = (
Êag_dúty
 | 
Êag_decommôãd
) == 0 ?

2216 
CHUNK_MAP_UNZEROED
 : 0;

2217 
¨ía_chunk_m≠_misc_t
 *
èû_mis˚lm
;

2218 
¨ía_run_t
 *
èû_run
;

2220 
	`as£π
(
ﬁdsize
 > 
√wsize
);

2227 
	`as£π
(
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
Ë=
ﬁdsize
);

2228 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
+
hód_≈ages
-1, 0, 
Êag_dúty
 |

2229 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

2230 
∑geöd
+
hód_≈ages
-1)));

2231 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
, 
√wsize
, 
Êag_dúty
 |

2232 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
∑geöd
)));

2234 i‡(
c⁄fig_debug
) {

2235 
UNUSED
 
size_t
 
èû_≈ages
 = (
ﬁdsize
 - 
√wsize
Ë>> 
LG_PAGE
;

2236 
	`as£π
(
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
,

2237 
∑geöd
+
hód_≈ages
+
èû_≈ages
-1) == 0);

2238 
	`as£π
(
	`¨ía_m≠bôs_dúty_gë
(
chunk
,

2239 
∑geöd
+
hód_≈ages
+
èû_≈ages
-1Ë=
Êag_dúty
);

2241 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
+
hód_≈ages
, 
ﬁdsize
-
√wsize
,

2242 
Êag_dúty
 | (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

2243 
∑geöd
+
hód_≈ages
)));

2245 
èû_mis˚lm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
 + 
hód_≈ages
);

2246 
èû_run
 = &
èû_mis˚lm
->
run
;

2247 
	`¨ía_run_dÆloc
(
tsdn
, 
¨ía
, 
èû_run
, 
dúty
, 
Ál£
, (
Êag_decommôãd


2249 
	}
}

2252 
	$¨ía_bö_runs_ö£π
(
¨ía_bö_t
 *
bö
, 
¨ía_run_t
 *
run
)

2254 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

2256 
	`¨ía_run_hóp_ö£π
(&
bö
->
runs
, 
mis˚lm
);

2257 
	}
}

2259 
¨ía_run_t
 *

2260 
	$¨ía_bö_n⁄fuŒ_run_åygë
(
¨ía_bö_t
 *
bö
)

2262 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

2264 
mis˚lm
 = 
	`¨ía_run_hóp_ªmove_fú°
(&
bö
->
runs
);

2265 i‡(
mis˚lm
 =
NULL
)

2266  (
NULL
);

2267 i‡(
c⁄fig_°©s
)

2268 
bö
->
°©s
.
ªruns
++;

2270  (&
mis˚lm
->
run
);

2271 
	}
}

2273 
¨ía_run_t
 *

2274 
	$¨ía_bö_n⁄fuŒ_run_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_bö_t
 *
bö
)

2276 
¨ía_run_t
 *
run
;

2277 
szöd_t
 
bööd
;

2278 
¨ía_bö_öfo_t
 *
bö_öfo
;

2281 
run
 = 
	`¨ía_bö_n⁄fuŒ_run_åygë
(
bö
);

2282 i‡(
run
 !
NULL
)

2283  (
run
);

2286 
bööd
 = 
	`¨ía_bö_ödex
(
¨ía
, 
bö
);

2287 
bö_öfo
 = &
¨ía_bö_öfo
[
bööd
];

2290 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

2292 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

2293 
run
 = 
	`¨ía_run_Æloc_smÆl
(
tsdn
, 
¨ía
, 
bö_öfo
->
run_size
, 
bööd
);

2294 i‡(
run
 !
NULL
) {

2296 
run
->
bööd
 = binind;

2297 
run
->
n‰ì
 = 
bö_öfo
->
ƒegs
;

2298 
	`bôm≠_öô
(
run
->
bôm≠
, &
bö_öfo
->
bôm≠_öfo
);

2300 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2302 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

2303 i‡(
run
 !
NULL
) {

2304 i‡(
c⁄fig_°©s
) {

2305 
bö
->
°©s
.
ƒuns
++;

2306 
bö
->
°©s
.
cuºuns
++;

2308  (
run
);

2316 
run
 = 
	`¨ía_bö_n⁄fuŒ_run_åygë
(
bö
);

2317 i‡(
run
 !
NULL
)

2318  (
run
);

2320  (
NULL
);

2321 
	}
}

2325 
	$¨ía_bö_mÆloc_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_bö_t
 *
bö
)

2327 
szöd_t
 
bööd
;

2328 
¨ía_bö_öfo_t
 *
bö_öfo
;

2329 
¨ía_run_t
 *
run
;

2331 
bööd
 = 
	`¨ía_bö_ödex
(
¨ía
, 
bö
);

2332 
bö_öfo
 = &
¨ía_bö_öfo
[
bööd
];

2333 
bö
->
runcur
 = 
NULL
;

2334 
run
 = 
	`¨ía_bö_n⁄fuŒ_run_gë
(
tsdn
, 
¨ía
, 
bö
);

2335 i‡(
bö
->
runcur
 !
NULL
 && bö->runcur->
n‰ì
 > 0) {

2340 *
ªt
;

2341 
	`as£π
(
bö
->
runcur
->
n‰ì
 > 0);

2342 
ªt
 = 
	`¨ía_run_ªg_Æloc
(
bö
->
runcur
, 
bö_öfo
);

2343 i‡(
run
 !
NULL
) {

2344 
¨ía_chunk_t
 *
chunk
;

2354 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
run
);

2355 i‡(
run
->
n‰ì
 =
bö_öfo
->
ƒegs
) {

2356 
	`¨ía_dÆloc_bö_run
(
tsdn
, 
¨ía
, 
chunk
, 
run
,

2357 
bö
);

2359 
	`¨ía_bö_lowî_run
(
¨ía
, 
chunk
, 
run
, 
bö
);

2361  (
ªt
);

2364 i‡(
run
 =
NULL
)

2365  (
NULL
);

2367 
bö
->
runcur
 = 
run
;

2369 
	`as£π
(
bö
->
runcur
->
n‰ì
 > 0);

2371  (
	`¨ía_run_ªg_Æloc
(
bö
->
runcur
, 
bö_öfo
));

2372 
	}
}

2375 
	$¨ía_tˇche_fûl_smÆl
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
tˇche_bö_t
 *
tbö
,

2376 
szöd_t
 
bööd
, 
uöt64_t
 
¥of_accumbyãs
)

2378 
i
, 
nfûl
;

2379 
¨ía_bö_t
 *
bö
;

2381 
	`as£π
(
tbö
->
nˇched
 == 0);

2383 i‡(
c⁄fig_¥of
 && 
	`¨ía_¥of_accum
(
tsdn
, 
¨ía
, 
¥of_accumbyãs
))

2384 
	`¥of_idump
(
tsdn
);

2385 
bö
 = &
¨ía
->
bös
[
bööd
];

2386 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

2387 
i
 = 0, 
nfûl
 = (
tˇche_bö_öfo
[
bööd
].
nˇched_max
 >>

2388 
tbö
->
lg_fûl_div
); 
i
 < 
nfûl
; i++) {

2389 
¨ía_run_t
 *
run
;

2390 *
±r
;

2391 i‡((
run
 = 
bö
->
runcur
Ë!
NULL
 &&Ñun->
n‰ì
 > 0)

2392 
±r
 = 
	`¨ía_run_ªg_Æloc
(
run
, &
¨ía_bö_öfo
[
bööd
]);

2394 
±r
 = 
	`¨ía_bö_mÆloc_h¨d
(
tsdn
, 
¨ía
, 
bö
);

2395 i‡(
±r
 =
NULL
) {

2401 i‡(
i
 > 0) {

2402 
	`memmove
(
tbö
->
avaû
 - 
i
,Åbö->avaû - 
nfûl
,

2403 
i
 * (*));

2407 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_Æloc
)) {

2408 
	`¨ía_Æloc_junk_smÆl
(
±r
, &
¨ía_bö_öfo
[
bööd
],

2409 
åue
);

2412 *(
tbö
->
avaû
 - 
nfûl
 + 
i
Ë
±r
;

2414 i‡(
c⁄fig_°©s
) {

2415 
bö
->
°©s
.
nmÆloc
 +
i
;

2416 
bö
->
°©s
.
ƒeque°s
 +
tbö
->
t°©s
.nrequests;

2417 
bö
->
°©s
.
cuºegs
 +
i
;

2418 
bö
->
°©s
.
nfûls
++;

2419 
tbö
->
t°©s
.
ƒeque°s
 = 0;

2421 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

2422 
tbö
->
nˇched
 = 
i
;

2423 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

2424 
	}
}

2427 
	$¨ía_Æloc_junk_smÆl
(*
±r
, 
¨ía_bö_öfo_t
 *
bö_öfo
, 
boﬁ
 
zîo
)

2430 
size_t
 
ªdz⁄e_size
 = 
bö_öfo
->redzone_size;

2432 i‡(
zîo
) {

2433 
	`mem£t
((*)((
uöçå_t
)
±r
 - 
ªdz⁄e_size
),

2434 
JEMALLOC_ALLOC_JUNK
, 
ªdz⁄e_size
);

2435 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
bö_öfo
->
ªg_size
),

2436 
JEMALLOC_ALLOC_JUNK
, 
ªdz⁄e_size
);

2438 
	`mem£t
((*)((
uöçå_t
)
±r
 - 
ªdz⁄e_size
),

2439 
JEMALLOC_ALLOC_JUNK
, 
bö_öfo
->
ªg_öãrvÆ
);

2441 
	}
}

2443 #ifde‡
JEMALLOC_JET


2444 #unde‡
¨ía_ªdz⁄e_c‹ru±i⁄


2445 
	#¨ía_ªdz⁄e_c‹ru±i⁄
 
	`JEMALLOC_N
(
n_¨ía_ªdz⁄e_c‹ru±i⁄
)

	)

2448 
	$¨ía_ªdz⁄e_c‹ru±i⁄
(*
±r
, 
size_t
 
usize
, 
boﬁ
 
a·î
,

2449 
size_t
 
off£t
, 
uöt8_t
 
byã
)

2452 
	`mÆloc_¥ötf
("<jemalloc>: CorruptÑedzone %zu byte%s %s %p "

2453 "(sizê%zu), byã=%#x\n", 
off£t
, (offset == 1) ? "" : "s",

2454 
a·î
 ? "a·î" : "bef‹e", 
±r
, 
usize
, 
byã
);

2455 
	}
}

2456 #ifde‡
JEMALLOC_JET


2457 #unde‡
¨ía_ªdz⁄e_c‹ru±i⁄


2458 
	#¨ía_ªdz⁄e_c‹ru±i⁄
 
	`JEMALLOC_N
(
¨ía_ªdz⁄e_c‹ru±i⁄
)

	)

2459 
¨ía_ªdz⁄e_c‹ru±i⁄_t
 *
	g¨ía_ªdz⁄e_c‹ru±i⁄
 =

2460 
JEMALLOC_N
(
n_¨ía_ªdz⁄e_c‹ru±i⁄
);

2464 
	$¨ía_ªdz⁄es_vÆid©e
(*
±r
, 
¨ía_bö_öfo_t
 *
bö_öfo
, 
boﬁ
 
ª£t
)

2466 
boﬁ
 
îr‹
 = 
Ál£
;

2468 i‡(
›t_junk_Æloc
) {

2469 
size_t
 
size
 = 
bö_öfo
->
ªg_size
;

2470 
size_t
 
ªdz⁄e_size
 = 
bö_öfo
->redzone_size;

2471 
size_t
 
i
;

2473 
i
 = 1; i <
ªdz⁄e_size
; i++) {

2474 
uöt8_t
 *
byã
 = (uöt8_à*)((
uöçå_t
)
±r
 - 
i
);

2475 i‡(*
byã
 !
JEMALLOC_ALLOC_JUNK
) {

2476 
îr‹
 = 
åue
;

2477 
	`¨ía_ªdz⁄e_c‹ru±i⁄
(
±r
, 
size
, 
Ál£
, 
i
,

2478 *
byã
);

2479 i‡(
ª£t
)

2480 *
byã
 = 
JEMALLOC_ALLOC_JUNK
;

2483 
i
 = 0; i < 
ªdz⁄e_size
; i++) {

2484 
uöt8_t
 *
byã
 = (uöt8_à*)((
uöçå_t
)
±r
 + 
size
 + 
i
);

2485 i‡(*
byã
 !
JEMALLOC_ALLOC_JUNK
) {

2486 
îr‹
 = 
åue
;

2487 
	`¨ía_ªdz⁄e_c‹ru±i⁄
(
±r
, 
size
, 
åue
, 
i
,

2488 *
byã
);

2489 i‡(
ª£t
)

2490 *
byã
 = 
JEMALLOC_ALLOC_JUNK
;

2495 i‡(
›t_ab‹t
 && 
îr‹
)

2496 
	`ab‹t
();

2497 
	}
}

2499 #ifde‡
JEMALLOC_JET


2500 #unde‡
¨ía_dÆloc_junk_smÆl


2501 
	#¨ía_dÆloc_junk_smÆl
 
	`JEMALLOC_N
(
n_¨ía_dÆloc_junk_smÆl
)

	)

2504 
	$¨ía_dÆloc_junk_smÆl
(*
±r
, 
¨ía_bö_öfo_t
 *
bö_öfo
)

2506 
size_t
 
ªdz⁄e_size
 = 
bö_öfo
->redzone_size;

2508 
	`¨ía_ªdz⁄es_vÆid©e
(
±r
, 
bö_öfo
, 
Ál£
);

2509 
	`mem£t
((*)((
uöçå_t
)
±r
 - 
ªdz⁄e_size
), 
JEMALLOC_FREE_JUNK
,

2510 
bö_öfo
->
ªg_öãrvÆ
);

2511 
	}
}

2512 #ifde‡
JEMALLOC_JET


2513 #unde‡
¨ía_dÆloc_junk_smÆl


2514 
	#¨ía_dÆloc_junk_smÆl
 
	`JEMALLOC_N
(
¨ía_dÆloc_junk_smÆl
)

	)

2515 
¨ía_dÆloc_junk_smÆl_t
 *
	g¨ía_dÆloc_junk_smÆl
 =

2516 
JEMALLOC_N
(
n_¨ía_dÆloc_junk_smÆl
);

2520 
	$¨ía_qu¨™töe_junk_smÆl
(*
±r
, 
size_t
 
usize
)

2522 
szöd_t
 
bööd
;

2523 
¨ía_bö_öfo_t
 *
bö_öfo
;

2524 
	`ˇs£π
(
c⁄fig_fûl
);

2525 
	`as£π
(
›t_junk_‰ì
);

2526 
	`as£π
(
›t_qu¨™töe
);

2527 
	`as£π
(
usize
 <
SMALL_MAXCLASS
);

2529 
bööd
 = 
	`size2ödex
(
usize
);

2530 
bö_öfo
 = &
¨ía_bö_öfo
[
bööd
];

2531 
	`¨ía_ªdz⁄es_vÆid©e
(
±r
, 
bö_öfo
, 
åue
);

2532 
	}
}

2535 
	$¨ía_mÆloc_smÆl
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
szöd_t
 
bööd
, 
boﬁ
 
zîo
)

2537 *
ªt
;

2538 
¨ía_bö_t
 *
bö
;

2539 
size_t
 
usize
;

2540 
¨ía_run_t
 *
run
;

2542 
	`as£π
(
bööd
 < 
NBINS
);

2543 
bö
 = &
¨ía
->
bös
[
bööd
];

2544 
usize
 = 
	`ödex2size
(
bööd
);

2546 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

2547 i‡((
run
 = 
bö
->
runcur
Ë!
NULL
 &&Ñun->
n‰ì
 > 0)

2548 
ªt
 = 
	`¨ía_run_ªg_Æloc
(
run
, &
¨ía_bö_öfo
[
bööd
]);

2550 
ªt
 = 
	`¨ía_bö_mÆloc_h¨d
(
tsdn
, 
¨ía
, 
bö
);

2552 i‡(
ªt
 =
NULL
) {

2553 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

2554  (
NULL
);

2557 i‡(
c⁄fig_°©s
) {

2558 
bö
->
°©s
.
nmÆloc
++;

2559 
bö
->
°©s
.
ƒeque°s
++;

2560 
bö
->
°©s
.
cuºegs
++;

2562 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

2563 i‡(
c⁄fig_¥of
 && !
i°hªaded
 && 
	`¨ía_¥of_accum
(
tsdn
, 
¨ía
, 
usize
))

2564 
	`¥of_idump
(
tsdn
);

2566 i‡(!
zîo
) {

2567 i‡(
c⁄fig_fûl
) {

2568 i‡(
	`u∆ikñy
(
›t_junk_Æloc
)) {

2569 
	`¨ía_Æloc_junk_smÆl
(
ªt
,

2570 &
¨ía_bö_öfo
[
bööd
], 
Ál£
);

2571 } i‡(
	`u∆ikñy
(
›t_zîo
))

2572 
	`mem£t
(
ªt
, 0, 
usize
);

2574 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
usize
);

2576 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_Æloc
)) {

2577 
	`¨ía_Æloc_junk_smÆl
(
ªt
, &
¨ía_bö_öfo
[
bööd
],

2578 
åue
);

2580 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
usize
);

2581 
	`mem£t
(
ªt
, 0, 
usize
);

2584 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

2585  (
ªt
);

2586 
	}
}

2589 
	$¨ía_mÆloc_œrge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
szöd_t
 
bööd
, 
boﬁ
 
zîo
)

2591 *
ªt
;

2592 
size_t
 
usize
;

2593 
uöçå_t
 
øndom_off£t
;

2594 
¨ía_run_t
 *
run
;

2595 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

2596 
UNUSED
 
boﬁ
 
idump
 
	`JEMALLOC_CC_SILENCE_INIT
(
Ál£
);

2599 
usize
 = 
	`ödex2size
(
bööd
);

2600 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

2601 i‡(
c⁄fig_ˇche_oblivious
) {

2602 
uöt64_t
 
r
;

2609 
r
 = 
	`¥ng_lg_ønge
(&
¨ía
->
off£t_°©e
, 
LG_PAGE
 - 
LG_CACHELINE
);

2610 
øndom_off£t
 = ((
uöçå_t
)
r
Ë<< 
LG_CACHELINE
;

2612 
øndom_off£t
 = 0;

2613 
run
 = 
	`¨ía_run_Æloc_œrge
(
tsdn
, 
¨ía
, 
usize
 + 
œrge_∑d
, 
zîo
);

2614 i‡(
run
 =
NULL
) {

2615 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2616  (
NULL
);

2618 
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

2619 
ªt
 = (*)((
uöçå_t
)
	`¨ía_mis˚lm_to_Ωages
(
mis˚lm
) +

2620 
øndom_off£t
);

2621 i‡(
c⁄fig_°©s
) {

2622 
szöd_t
 
ödex
 = 
bööd
 - 
NBINS
;

2624 
¨ía
->
°©s
.
nmÆloc_œrge
++;

2625 
¨ía
->
°©s
.
ƒeque°s_œrge
++;

2626 
¨ía
->
°©s
.
Æloˇãd_œrge
 +
usize
;

2627 
¨ía
->
°©s
.
l°©s
[
ödex
].
nmÆloc
++;

2628 
¨ía
->
°©s
.
l°©s
[
ödex
].
ƒeque°s
++;

2629 
¨ía
->
°©s
.
l°©s
[
ödex
].
cuºuns
++;

2631 i‡(
c⁄fig_¥of
)

2632 
idump
 = 
	`¨ía_¥of_accum_locked
(
¨ía
, 
usize
);

2633 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2634 i‡(
c⁄fig_¥of
 && 
idump
)

2635 
	`¥of_idump
(
tsdn
);

2637 i‡(!
zîo
) {

2638 i‡(
c⁄fig_fûl
) {

2639 i‡(
	`u∆ikñy
(
›t_junk_Æloc
))

2640 
	`mem£t
(
ªt
, 
JEMALLOC_ALLOC_JUNK
, 
usize
);

2641 i‡(
	`u∆ikñy
(
›t_zîo
))

2642 
	`mem£t
(
ªt
, 0, 
usize
);

2646 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

2647  (
ªt
);

2648 
	}
}

2651 
	$¨ía_mÆloc_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
size
, 
szöd_t
 
öd
,

2652 
boﬁ
 
zîo
)

2655 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
¨ía
 !
NULL
);

2657 i‡(
	`likñy
(!
	`tsdn_nuŒ
(
tsdn
)))

2658 
¨ía
 = 
	`¨ía_choo£
(
	`tsdn_tsd
(
tsdn
),árena);

2659 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

2660  (
NULL
);

2662 i‡(
	`likñy
(
size
 <
SMALL_MAXCLASS
))

2663  (
	`¨ía_mÆloc_smÆl
(
tsdn
, 
¨ía
, 
öd
, 
zîo
));

2664 i‡(
	`likñy
(
size
 <
œrge_max˛ass
))

2665  (
	`¨ía_mÆloc_œrge
(
tsdn
, 
¨ía
, 
öd
, 
zîo
));

2666  (
	`huge_mÆloc
(
tsdn
, 
¨ía
, 
	`ödex2size
(
öd
), 
zîo
));

2667 
	}
}

2671 
	$¨ía_∑Œoc_œrge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
, size_à
Æignmít
,

2672 
boﬁ
 
zîo
)

2674 *
ªt
;

2675 
size_t
 
Æloc_size
, 
Àadsize
, 
åaûsize
;

2676 
¨ía_run_t
 *
run
;

2677 
¨ía_chunk_t
 *
chunk
;

2678 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
;

2679 *
Ωages
;

2681 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
¨ía
 !
NULL
);

2682 
	`as£π
(
usize
 =
	`PAGE_CEILING
(usize));

2684 i‡(
	`likñy
(!
	`tsdn_nuŒ
(
tsdn
)))

2685 
¨ía
 = 
	`¨ía_choo£
(
	`tsdn_tsd
(
tsdn
),árena);

2686 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

2687  (
NULL
);

2689 
Æignmít
 = 
	`PAGE_CEILING
(alignment);

2690 
Æloc_size
 = 
usize
 + 
œrge_∑d
 + 
Æignmít
;

2692 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

2693 
run
 = 
	`¨ía_run_Æloc_œrge
(
tsdn
, 
¨ía
, 
Æloc_size
, 
Ál£
);

2694 i‡(
run
 =
NULL
) {

2695 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2696  (
NULL
);

2698 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
run
);

2699 
mis˚lm
 = 
	`¨ía_run_to_mis˚lm
(
run
);

2700 
Ωages
 = 
	`¨ía_mis˚lm_to_Ωages
(
mis˚lm
);

2702 
Àadsize
 = 
	`ALIGNMENT_CEILING
((
uöçå_t
)
Ωages
, 
Æignmít
) -

2703 (
uöçå_t
)
Ωages
;

2704 
	`as£π
(
Æloc_size
 >
Àadsize
 + 
usize
);

2705 
åaûsize
 = 
Æloc_size
 - 
Àadsize
 - 
usize
 - 
œrge_∑d
;

2706 i‡(
Àadsize
 != 0) {

2707 
¨ía_chunk_m≠_misc_t
 *
hód_mis˚lm
 = 
mis˚lm
;

2708 
¨ía_run_t
 *
hód_run
 = 
run
;

2710 
mis˚lm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
,

2711 
	`¨ía_mis˚lm_to_∑geöd
(
hód_mis˚lm
Ë+ (
Àadsize
 >>

2712 
LG_PAGE
));

2713 
run
 = &
mis˚lm
->run;

2715 
	`¨ía_run_åim_hód
(
tsdn
, 
¨ía
, 
chunk
, 
hód_run
, 
Æloc_size
,

2716 
Æloc_size
 - 
Àadsize
);

2718 i‡(
åaûsize
 != 0) {

2719 
	`¨ía_run_åim_èû
(
tsdn
, 
¨ía
, 
chunk
, 
run
, 
usize
 + 
œrge_∑d
 +

2720 
åaûsize
, 
usize
 + 
œrge_∑d
, 
Ál£
);

2722 i‡(
	`¨ía_run_öô_œrge
(
¨ía
, 
run
, 
usize
 + 
œrge_∑d
, 
zîo
)) {

2723 
size_t
 
run_öd
 =

2724 
	`¨ía_mis˚lm_to_∑geöd
(
	`¨ía_run_to_mis˚lm
(
run
));

2725 
boﬁ
 
dúty
 = (
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
run_öd
) != 0);

2726 
boﬁ
 
decommôãd
 = (
	`¨ía_m≠bôs_decommôãd_gë
(
chunk
,

2727 
run_öd
) != 0);

2729 
	`as£π
(
decommôãd
);

2730 
	`¨ía_run_dÆloc
(
tsdn
, 
¨ía
, 
run
, 
dúty
, 
Ál£
, 
decommôãd
);

2731 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2732  (
NULL
);

2734 
ªt
 = 
	`¨ía_mis˚lm_to_Ωages
(
mis˚lm
);

2736 i‡(
c⁄fig_°©s
) {

2737 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
NBINS
;

2739 
¨ía
->
°©s
.
nmÆloc_œrge
++;

2740 
¨ía
->
°©s
.
ƒeque°s_œrge
++;

2741 
¨ía
->
°©s
.
Æloˇãd_œrge
 +
usize
;

2742 
¨ía
->
°©s
.
l°©s
[
ödex
].
nmÆloc
++;

2743 
¨ía
->
°©s
.
l°©s
[
ödex
].
ƒeque°s
++;

2744 
¨ía
->
°©s
.
l°©s
[
ödex
].
cuºuns
++;

2746 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2748 i‡(
c⁄fig_fûl
 && !
zîo
) {

2749 i‡(
	`u∆ikñy
(
›t_junk_Æloc
))

2750 
	`mem£t
(
ªt
, 
JEMALLOC_ALLOC_JUNK
, 
usize
);

2751 i‡(
	`u∆ikñy
(
›t_zîo
))

2752 
	`mem£t
(
ªt
, 0, 
usize
);

2754 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

2755  (
ªt
);

2756 
	}
}

2759 
	$¨ía_∑Œoc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
, size_à
Æignmít
,

2760 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
)

2762 *
ªt
;

2764 i‡(
usize
 <
SMALL_MAXCLASS
 && (
Æignmít
 < 
PAGE
 || (alignment == PAGE

2765 && (
usize
 & 
PAGE_MASK
) == 0))) {

2767 
ªt
 = 
	`¨ía_mÆloc
(
tsdn
, 
¨ía
, 
usize
, 
	`size2ödex
(usize), 
zîo
,

2768 
tˇche
, 
åue
);

2769 } i‡(
usize
 <
œrge_max˛ass
 && 
Æignmít
 <
PAGE
) {

2776 
ªt
 = 
	`¨ía_mÆloc
(
tsdn
, 
¨ía
, 
usize
, 
	`size2ödex
(usize), 
zîo
,

2777 
tˇche
, 
åue
);

2778 i‡(
c⁄fig_ˇche_oblivious
)

2779 
ªt
 = (*)((
uöçå_t
Ïë & ~
PAGE_MASK
);

2781 i‡(
	`likñy
(
usize
 <
œrge_max˛ass
)) {

2782 
ªt
 = 
	`¨ía_∑Œoc_œrge
(
tsdn
, 
¨ía
, 
usize
, 
Æignmít
,

2783 
zîo
);

2784 } i‡(
	`likñy
(
Æignmít
 <
chunksize
))

2785 
ªt
 = 
	`huge_mÆloc
(
tsdn
, 
¨ía
, 
usize
, 
zîo
);

2787 
ªt
 = 
	`huge_∑Œoc
(
tsdn
, 
¨ía
, 
usize
, 
Æignmít
, 
zîo
);

2790  (
ªt
);

2791 
	}
}

2794 
	$¨ía_¥of_¥omŸed
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
size
)

2796 
¨ía_chunk_t
 *
chunk
;

2797 
size_t
 
∑geöd
;

2798 
szöd_t
 
bööd
;

2800 
	`ˇs£π
(
c⁄fig_¥of
);

2801 
	`as£π
(
±r
 !
NULL
);

2802 
	`as£π
(
	`CHUNK_ADDR2BASE
(
±r
) !=Ötr);

2803 
	`as£π
(
	`ißŒoc
(
tsdn
, 
±r
, 
Ál£
Ë=
LARGE_MINCLASS
);

2804 
	`as£π
(
	`ißŒoc
(
tsdn
, 
±r
, 
åue
Ë=
LARGE_MINCLASS
);

2805 
	`as£π
(
size
 <
SMALL_MAXCLASS
);

2807 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

2808 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

2809 
bööd
 = 
	`size2ödex
(
size
);

2810 
	`as£π
(
bööd
 < 
NBINS
);

2811 
	`¨ía_m≠bôs_œrge_bööd_£t
(
chunk
, 
∑geöd
, 
bööd
);

2813 
	`as£π
(
	`ißŒoc
(
tsdn
, 
±r
, 
Ál£
Ë=
LARGE_MINCLASS
);

2814 
	`as£π
(
	`ißŒoc
(
tsdn
, 
±r
, 
åue
Ë=
size
);

2815 
	}
}

2818 
	$¨ía_dissocüã_bö_run
(
¨ía_chunk_t
 *
chunk
, 
¨ía_run_t
 *
run
,

2819 
¨ía_bö_t
 *
bö
)

2823 i‡(
run
 =
bö
->
runcur
)

2824 
bö
->
runcur
 = 
NULL
;

2826 
szöd_t
 
bööd
 = 
	`¨ía_bö_ödex
(
	`exã¡_node_¨ía_gë
(

2827 &
chunk
->
node
), 
bö
);

2828 
¨ía_bö_öfo_t
 *
bö_öfo
 = &
¨ía_bö_öfo
[
bööd
];

2835 i‡(
bö_öfo
->
ƒegs
 != 1) {

2836 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 =

2837 
	`¨ía_run_to_mis˚lm
(
run
);

2839 
	`¨ía_run_hóp_ªmove
(&
bö
->
runs
, 
mis˚lm
);

2842 
	}
}

2845 
	$¨ía_dÆloc_bö_run
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

2846 
¨ía_run_t
 *
run
, 
¨ía_bö_t
 *
bö
)

2849 
	`as£π
(
run
 !
bö
->
runcur
);

2851 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

2853 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

2854 
	`¨ía_run_dÆloc
(
tsdn
, 
¨ía
, 
run
, 
åue
, 
Ál£
, false);

2855 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

2857 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

2858 i‡(
c⁄fig_°©s
)

2859 
bö
->
°©s
.
cuºuns
--;

2860 
	}
}

2863 
	$¨ía_bö_lowî_run
(
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, 
¨ía_run_t
 *
run
,

2864 
¨ía_bö_t
 *
bö
)

2872 i‡((
uöçå_t
)
run
 < (uöçå_t)
bö
->
runcur
) {

2874 i‡(
bö
->
runcur
->
n‰ì
 > 0)

2875 
	`¨ía_bö_runs_ö£π
(
bö
, bö->
runcur
);

2876 
bö
->
runcur
 = 
run
;

2877 i‡(
c⁄fig_°©s
)

2878 
bö
->
°©s
.
ªruns
++;

2880 
	`¨ía_bö_runs_ö£π
(
bö
, 
run
);

2881 
	}
}

2884 
	$¨ía_dÆloc_bö_locked_im∂
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

2885 *
±r
, 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
, 
boﬁ
 
junked
)

2887 
size_t
 
∑geöd
, 
Ωages_öd
;

2888 
¨ía_run_t
 *
run
;

2889 
¨ía_bö_t
 *
bö
;

2890 
¨ía_bö_öfo_t
 *
bö_öfo
;

2891 
szöd_t
 
bööd
;

2893 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

2894 
Ωages_öd
 = 
∑geöd
 - 
	`¨ía_m≠bôs_smÆl_runöd_gë
(
chunk
,Öageind);

2895 
run
 = &
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
Ωages_öd
)->run;

2896 
bööd
 = 
run
->binind;

2897 
bö
 = &
¨ía
->
bös
[
bööd
];

2898 
bö_öfo
 = &
¨ía_bö_öfo
[
bööd
];

2900 i‡(!
junked
 && 
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
))

2901 
	`¨ía_dÆloc_junk_smÆl
(
±r
, 
bö_öfo
);

2903 
	`¨ía_run_ªg_dÆloc
(
run
, 
±r
);

2904 i‡(
run
->
n‰ì
 =
bö_öfo
->
ƒegs
) {

2905 
	`¨ía_dissocüã_bö_run
(
chunk
, 
run
, 
bö
);

2906 
	`¨ía_dÆloc_bö_run
(
tsdn
, 
¨ía
, 
chunk
, 
run
, 
bö
);

2907 } i‡(
run
->
n‰ì
 =1 &&Ñu¿!
bö
->
runcur
)

2908 
	`¨ía_bö_lowî_run
(
¨ía
, 
chunk
, 
run
, 
bö
);

2910 i‡(
c⁄fig_°©s
) {

2911 
bö
->
°©s
.
ndÆloc
++;

2912 
bö
->
°©s
.
cuºegs
--;

2914 
	}
}

2917 
	$¨ía_dÆloc_bö_junked_locked
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

2918 
¨ía_chunk_t
 *
chunk
, *
±r
, 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
)

2921 
	`¨ía_dÆloc_bö_locked_im∂
(
tsdn
, 
¨ía
, 
chunk
, 
±r
, 
bô£lm
, 
åue
);

2922 
	}
}

2925 
	$¨ía_dÆloc_bö
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
, *
±r
,

2926 
size_t
 
∑geöd
, 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
)

2928 
¨ía_run_t
 *
run
;

2929 
¨ía_bö_t
 *
bö
;

2930 
size_t
 
Ωages_öd
;

2932 
Ωages_öd
 = 
∑geöd
 - 
	`¨ía_m≠bôs_smÆl_runöd_gë
(
chunk
,Öageind);

2933 
run
 = &
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
Ωages_öd
)->run;

2934 
bö
 = &
¨ía
->
bös
[
run
->
bööd
];

2935 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

2936 
	`¨ía_dÆloc_bö_locked_im∂
(
tsdn
, 
¨ía
, 
chunk
, 
±r
, 
bô£lm
, 
Ál£
);

2937 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

2938 
	}
}

2941 
	$¨ía_dÆloc_smÆl
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

2942 *
±r
, 
size_t
 
∑geöd
)

2944 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
;

2946 i‡(
c⁄fig_debug
) {

2948 
	`as£π
(
	`¨ía_±r_smÆl_bööd_gë
(
±r
, 
	`¨ía_m≠bôs_gë
(
chunk
,

2949 
∑geöd
)Ë!
BININD_INVALID
);

2951 
bô£lm
 = 
	`¨ía_bô£lm_gë_muèbÀ
(
chunk
, 
∑geöd
);

2952 
	`¨ía_dÆloc_bö
(
tsdn
, 
¨ía
, 
chunk
, 
±r
, 
∑geöd
, 
bô£lm
);

2953 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

2954 
	}
}

2956 #ifde‡
JEMALLOC_JET


2957 #unde‡
¨ía_dÆloc_junk_œrge


2958 
	#¨ía_dÆloc_junk_œrge
 
	`JEMALLOC_N
(
n_¨ía_dÆloc_junk_œrge
)

	)

2961 
	$¨ía_dÆloc_junk_œrge
(*
±r
, 
size_t
 
usize
)

2964 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
))

2965 
	`mem£t
(
±r
, 
JEMALLOC_FREE_JUNK
, 
usize
);

2966 
	}
}

2967 #ifde‡
JEMALLOC_JET


2968 #unde‡
¨ía_dÆloc_junk_œrge


2969 
	#¨ía_dÆloc_junk_œrge
 
	`JEMALLOC_N
(
¨ía_dÆloc_junk_œrge
)

	)

2970 
¨ía_dÆloc_junk_œrge_t
 *
	g¨ía_dÆloc_junk_œrge
 =

2971 
JEMALLOC_N
(
n_¨ía_dÆloc_junk_œrge
);

2975 
	$¨ía_dÆloc_œrge_locked_im∂
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

2976 
¨ía_chunk_t
 *
chunk
, *
±r
, 
boﬁ
 
junked
)

2978 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

2979 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
,

2980 
∑geöd
);

2981 
¨ía_run_t
 *
run
 = &
mis˚lm
->run;

2983 i‡(
c⁄fig_fûl
 || 
c⁄fig_°©s
) {

2984 
size_t
 
usize
 = 
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
) -

2985 
œrge_∑d
;

2987 i‡(!
junked
)

2988 
	`¨ía_dÆloc_junk_œrge
(
±r
, 
usize
);

2989 i‡(
c⁄fig_°©s
) {

2990 
szöd_t
 
ödex
 = 
	`size2ödex
(
usize
Ë- 
NBINS
;

2992 
¨ía
->
°©s
.
ndÆloc_œrge
++;

2993 
¨ía
->
°©s
.
Æloˇãd_œrge
 -
usize
;

2994 
¨ía
->
°©s
.
l°©s
[
ödex
].
ndÆloc
++;

2995 
¨ía
->
°©s
.
l°©s
[
ödex
].
cuºuns
--;

2999 
	`¨ía_run_dÆloc
(
tsdn
, 
¨ía
, 
run
, 
åue
, 
Ál£
, false);

3000 
	}
}

3003 
	$¨ía_dÆloc_œrge_junked_locked
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

3004 
¨ía_chunk_t
 *
chunk
, *
±r
)

3007 
	`¨ía_dÆloc_œrge_locked_im∂
(
tsdn
, 
¨ía
, 
chunk
, 
±r
, 
åue
);

3008 
	}
}

3011 
	$¨ía_dÆloc_œrge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

3012 *
±r
)

3015 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3016 
	`¨ía_dÆloc_œrge_locked_im∂
(
tsdn
, 
¨ía
, 
chunk
, 
±r
, 
Ál£
);

3017 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3018 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

3019 
	}
}

3022 
	$¨ía_øŒoc_œrge_shrök
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

3023 *
±r
, 
size_t
 
ﬁdsize
, size_à
size
)

3025 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

3026 
¨ía_chunk_m≠_misc_t
 *
mis˚lm
 = 
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
,

3027 
∑geöd
);

3028 
¨ía_run_t
 *
run
 = &
mis˚lm
->run;

3030 
	`as£π
(
size
 < 
ﬁdsize
);

3036 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3037 
	`¨ía_run_åim_èû
(
tsdn
, 
¨ía
, 
chunk
, 
run
, 
ﬁdsize
 + 
œrge_∑d
, 
size
 +

3038 
œrge_∑d
, 
åue
);

3039 i‡(
c⁄fig_°©s
) {

3040 
szöd_t
 
ﬁdödex
 = 
	`size2ödex
(
ﬁdsize
Ë- 
NBINS
;

3041 
szöd_t
 
ödex
 = 
	`size2ödex
(
size
Ë- 
NBINS
;

3043 
¨ía
->
°©s
.
ndÆloc_œrge
++;

3044 
¨ía
->
°©s
.
Æloˇãd_œrge
 -
ﬁdsize
;

3045 
¨ía
->
°©s
.
l°©s
[
ﬁdödex
].
ndÆloc
++;

3046 
¨ía
->
°©s
.
l°©s
[
ﬁdödex
].
cuºuns
--;

3048 
¨ía
->
°©s
.
nmÆloc_œrge
++;

3049 
¨ía
->
°©s
.
ƒeque°s_œrge
++;

3050 
¨ía
->
°©s
.
Æloˇãd_œrge
 +
size
;

3051 
¨ía
->
°©s
.
l°©s
[
ödex
].
nmÆloc
++;

3052 
¨ía
->
°©s
.
l°©s
[
ödex
].
ƒeque°s
++;

3053 
¨ía
->
°©s
.
l°©s
[
ödex
].
cuºuns
++;

3055 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3056 
	}
}

3058 
boﬁ


3059 
	$¨ía_øŒoc_œrge_grow
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
¨ía_chunk_t
 *
chunk
,

3060 *
±r
, 
size_t
 
ﬁdsize
, size_à
usize_mö
, size_à
usize_max
, 
boﬁ
 
zîo
)

3062 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 - (uöçå_t)
chunk
Ë>> 
LG_PAGE
;

3063 
size_t
 
≈ages
 = (
ﬁdsize
 + 
œrge_∑d
Ë>> 
LG_PAGE
;

3064 
size_t
 
fﬁlowsize
;

3066 
	`as£π
(
ﬁdsize
 =
	`¨ía_m≠bôs_œrge_size_gë
(
chunk
, 
∑geöd
) -

3067 
œrge_∑d
);

3070 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3071 i‡(
∑geöd
+
≈ages
 >
chunk_≈ages
 || 
	`¨ía_m≠bôs_Æloˇãd_gë
(
chunk
,

3072 
∑geöd
+
≈ages
) != 0)

3073 
œbñ_Áû
;

3074 
fﬁlowsize
 = 
	`¨ía_m≠bôs_u«Œoˇãd_size_gë
(
chunk
, 
∑geöd
+
≈ages
);

3075 i‡(
ﬁdsize
 + 
fﬁlowsize
 >
usize_mö
) {

3081 
¨ía_run_t
 *
run
;

3082 
size_t
 
usize
, 
•lôsize
, 
size
, 
Êag_dúty
, 
Êag_unzî€d_mask
;

3084 
usize
 = 
usize_max
;

3085 
ﬁdsize
 + 
fﬁlowsize
 < 
usize
)

3086 
usize
 = 
	`ödex2size
(
	`size2ödex
(usize)-1);

3087 
	`as£π
(
usize
 >
usize_mö
);

3088 
	`as£π
(
usize
 >
ﬁdsize
);

3089 
•lôsize
 = 
usize
 - 
ﬁdsize
;

3090 i‡(
•lôsize
 == 0)

3091 
œbñ_Áû
;

3093 
run
 = &
	`¨ía_mis˚lm_gë_muèbÀ
(
chunk
, 
∑geöd
+
≈ages
)->run;

3094 i‡(
	`¨ía_run_•lô_œrge
(
¨ía
, 
run
, 
•lôsize
, 
zîo
))

3095 
œbñ_Áû
;

3097 i‡(
c⁄fig_ˇche_oblivious
 && 
zîo
) {

3105 *
zba£
 = (*)((
uöçå_t
)
±r
 + 
ﬁdsize
);

3106 *
z∑°
 = 
	`PAGE_ADDR2BASE
((*)((
uöçå_t
)
zba£
 +

3107 
PAGE
));

3108 
size_t
 
nzîo
 = (
uöçå_t
)
z∑°
 - (uöçå_t)
zba£
;

3109 
	`as£π
(
nzîo
 > 0);

3110 
	`mem£t
(
zba£
, 0, 
nzîo
);

3113 
size
 = 
ﬁdsize
 + 
•lôsize
;

3114 
≈ages
 = (
size
 + 
œrge_∑d
Ë>> 
LG_PAGE
;

3124 
Êag_dúty
 = 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
) |

3125 
	`¨ía_m≠bôs_dúty_gë
(
chunk
, 
∑geöd
+
≈ages
-1);

3126 
Êag_unzî€d_mask
 = 
Êag_dúty
 =0 ? 
CHUNK_MAP_UNZEROED
 : 0;

3127 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
, 
size
 + 
œrge_∑d
,

3128 
Êag_dúty
 | (
Êag_unzî€d_mask
 &

3129 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
, 
∑geöd
)));

3130 
	`¨ía_m≠bôs_œrge_£t
(
chunk
, 
∑geöd
+
≈ages
-1, 0, 
Êag_dúty
 |

3131 (
Êag_unzî€d_mask
 & 
	`¨ía_m≠bôs_unzî€d_gë
(
chunk
,

3132 
∑geöd
+
≈ages
-1)));

3134 i‡(
c⁄fig_°©s
) {

3135 
szöd_t
 
ﬁdödex
 = 
	`size2ödex
(
ﬁdsize
Ë- 
NBINS
;

3136 
szöd_t
 
ödex
 = 
	`size2ödex
(
size
Ë- 
NBINS
;

3138 
¨ía
->
°©s
.
ndÆloc_œrge
++;

3139 
¨ía
->
°©s
.
Æloˇãd_œrge
 -
ﬁdsize
;

3140 
¨ía
->
°©s
.
l°©s
[
ﬁdödex
].
ndÆloc
++;

3141 
¨ía
->
°©s
.
l°©s
[
ﬁdödex
].
cuºuns
--;

3143 
¨ía
->
°©s
.
nmÆloc_œrge
++;

3144 
¨ía
->
°©s
.
ƒeque°s_œrge
++;

3145 
¨ía
->
°©s
.
Æloˇãd_œrge
 +
size
;

3146 
¨ía
->
°©s
.
l°©s
[
ödex
].
nmÆloc
++;

3147 
¨ía
->
°©s
.
l°©s
[
ödex
].
ƒeque°s
++;

3148 
¨ía
->
°©s
.
l°©s
[
ödex
].
cuºuns
++;

3150 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3151  (
Ál£
);

3153 
œbñ_Áû
:

3154 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3155  (
åue
);

3156 
	}
}

3158 #ifde‡
JEMALLOC_JET


3159 #unde‡
¨ía_øŒoc_junk_œrge


3160 
	#¨ía_øŒoc_junk_œrge
 
	`JEMALLOC_N
(
n_¨ía_øŒoc_junk_œrge
)

	)

3163 
	$¨ía_øŒoc_junk_œrge
(*
±r
, 
size_t
 
ﬁd_usize
, size_à
usize
)

3166 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
)) {

3167 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
usize
), 
JEMALLOC_FREE_JUNK
,

3168 
ﬁd_usize
 - 
usize
);

3170 
	}
}

3171 #ifde‡
JEMALLOC_JET


3172 #unde‡
¨ía_øŒoc_junk_œrge


3173 
	#¨ía_øŒoc_junk_œrge
 
	`JEMALLOC_N
(
¨ía_øŒoc_junk_œrge
)

	)

3174 
¨ía_øŒoc_junk_œrge_t
 *
	g¨ía_øŒoc_junk_œrge
 =

3175 
JEMALLOC_N
(
n_¨ía_øŒoc_junk_œrge
);

3182 
boﬁ


3183 
	$¨ía_øŒoc_œrge
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
, size_à
usize_mö
,

3184 
size_t
 
usize_max
, 
boﬁ
 
zîo
)

3186 
¨ía_chunk_t
 *
chunk
;

3187 
¨ía_t
 *
¨ía
;

3189 i‡(
ﬁdsize
 =
usize_max
) {

3191  (
Ál£
);

3194 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

3195 
¨ía
 = 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
);

3197 i‡(
ﬁdsize
 < 
usize_max
) {

3198 
boﬁ
 
ªt
 = 
	`¨ía_øŒoc_œrge_grow
(
tsdn
, 
¨ía
, 
chunk
, 
±r
,

3199 
ﬁdsize
, 
usize_mö
, 
usize_max
, 
zîo
);

3200 i‡(
c⁄fig_fûl
 && !
ªt
 && !
zîo
) {

3201 i‡(
	`u∆ikñy
(
›t_junk_Æloc
)) {

3202 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
ﬁdsize
),

3203 
JEMALLOC_ALLOC_JUNK
,

3204 
	`ißŒoc
(
tsdn
, 
±r
, 
c⁄fig_¥of
Ë- 
ﬁdsize
);

3205 } i‡(
	`u∆ikñy
(
›t_zîo
)) {

3206 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
ﬁdsize
), 0,

3207 
	`ißŒoc
(
tsdn
, 
±r
, 
c⁄fig_¥of
Ë- 
ﬁdsize
);

3210  (
ªt
);

3213 
	`as£π
(
ﬁdsize
 > 
usize_max
);

3215 
	`¨ía_øŒoc_junk_œrge
(
±r
, 
ﬁdsize
, 
usize_max
);

3216 
	`¨ía_øŒoc_œrge_shrök
(
tsdn
, 
¨ía
, 
chunk
, 
±r
, 
ﬁdsize
, 
usize_max
);

3217  (
Ál£
);

3218 
	}
}

3220 
boﬁ


3221 
	$¨ía_øŒoc_no_move
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

3222 
size_t
 
exåa
, 
boﬁ
 
zîo
)

3224 
size_t
 
usize_mö
, 
usize_max
;

3227 
	`as£π
(
exåa
 =0 || 
size
 +Éxå®<
HUGE_MAXCLASS
);

3229 i‡(
	`u∆ikñy
(
size
 > 
HUGE_MAXCLASS
))

3230  (
åue
);

3232 
usize_mö
 = 
	`s2u
(
size
);

3233 
usize_max
 = 
	`s2u
(
size
 + 
exåa
);

3234 i‡(
	`likñy
(
ﬁdsize
 <
œrge_max˛ass
 && 
usize_mö
 <=Üarge_maxclass)) {

3235 
¨ía_chunk_t
 *
chunk
;

3241 i‡(
ﬁdsize
 <
SMALL_MAXCLASS
) {

3242 
	`as£π
(
¨ía_bö_öfo
[
	`size2ödex
(
ﬁdsize
)].
ªg_size
 ==

3243 
ﬁdsize
);

3244 i‡((
usize_max
 > 
SMALL_MAXCLASS
 ||

3245 
	`size2ödex
(
usize_max
Ë!size2ödex(
ﬁdsize
)) &&

3246 (
size
 > 
ﬁdsize
 || 
usize_max
 < oldsize))

3247  (
åue
);

3249 i‡(
usize_max
 <
SMALL_MAXCLASS
)

3250  (
åue
);

3251 i‡(
	`¨ía_øŒoc_œrge
(
tsdn
, 
±r
, 
ﬁdsize
, 
usize_mö
,

3252 
usize_max
, 
zîo
))

3253  (
åue
);

3256 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

3257 
	`¨ía_deˇy_tick
(
tsdn
, 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
));

3258  (
Ál£
);

3260  (
	`huge_øŒoc_no_move
(
tsdn
, 
±r
, 
ﬁdsize
, 
usize_mö
,

3261 
usize_max
, 
zîo
));

3263 
	}
}

3266 
	$¨ía_øŒoc_move_hñ≥r
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
,

3267 
size_t
 
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
)

3270 i‡(
Æignmít
 == 0)

3271  (
	`¨ía_mÆloc
(
tsdn
, 
¨ía
, 
usize
, 
	`size2ödex
(usize),

3272 
zîo
, 
tˇche
, 
åue
));

3273 
usize
 = 
	`ß2u
(usize, 
Æignmít
);

3274 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
))

3275  (
NULL
);

3276  (
	`ùÆlo˘
(
tsdn
, 
usize
, 
Æignmít
, 
zîo
, 
tˇche
, 
¨ía
));

3277 
	}
}

3280 
	$¨ía_øŒoc
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, *
±r
, 
size_t
 
ﬁdsize
, size_à
size
,

3281 
size_t
 
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
)

3283 *
ªt
;

3284 
size_t
 
usize
;

3286 
usize
 = 
	`s2u
(
size
);

3287 i‡(
	`u∆ikñy
(
usize
 =0 || 
size
 > 
HUGE_MAXCLASS
))

3288  (
NULL
);

3290 i‡(
	`likñy
(
usize
 <
œrge_max˛ass
)) {

3291 
size_t
 
c›ysize
;

3294 i‡(!
	`¨ía_øŒoc_no_move
(
	`tsd_tsdn
(
tsd
), 
±r
, 
ﬁdsize
, 
usize
, 0,

3295 
zîo
))

3296  (
±r
);

3303 
ªt
 = 
	`¨ía_øŒoc_move_hñ≥r
(
	`tsd_tsdn
(
tsd
), 
¨ía
, 
usize
,

3304 
Æignmít
, 
zîo
, 
tˇche
);

3305 i‡(
ªt
 =
NULL
)

3306  (
NULL
);

3313 
c›ysize
 = (
usize
 < 
ﬁdsize
) ? usize : oldsize;

3314 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
c›ysize
);

3315 
	`mem˝y
(
ªt
, 
±r
, 
c›ysize
);

3316 
	`isqÆloc
(
tsd
, 
±r
, 
ﬁdsize
, 
tˇche
, 
åue
);

3318 
ªt
 = 
	`huge_øŒoc
(
tsd
, 
¨ía
, 
±r
, 
ﬁdsize
, 
usize
, 
Æignmít
,

3319 
zîo
, 
tˇche
);

3321  (
ªt
);

3322 
	}
}

3324 
dss_¥ec_t


3325 
	$¨ía_dss_¥ec_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3327 
dss_¥ec_t
 
ªt
;

3329 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3330 
ªt
 = 
¨ía
->
dss_¥ec
;

3331 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3332  (
ªt
);

3333 
	}
}

3335 
boﬁ


3336 
	$¨ía_dss_¥ec_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
dss_¥ec_t
 
dss_¥ec
)

3339 i‡(!
have_dss
)

3340  (
dss_¥ec
 !
dss_¥ec_dißbÀd
);

3341 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3342 
¨ía
->
dss_¥ec
 = dss_prec;

3343 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3344  (
Ál£
);

3345 
	}
}

3347 
ssize_t


3348 
	$¨ía_lg_dúty_mu…_deÁu…_gë
()

3351  ((
ssize_t
)
	`©omic_ªad_z
((
size_t
 *)&
lg_dúty_mu…_deÁu…
));

3352 
	}
}

3354 
boﬁ


3355 
	$¨ía_lg_dúty_mu…_deÁu…_£t
(
ssize_t
 
lg_dúty_mu…
)

3358 i‡(
›t_purge
 !
purge_mode_øtio
)

3359  (
åue
);

3360 i‡(!
	`¨ía_lg_dúty_mu…_vÆid
(
lg_dúty_mu…
))

3361  (
åue
);

3362 
	`©omic_wrôe_z
((
size_t
 *)&
lg_dúty_mu…_deÁu…
, (size_t)
lg_dúty_mu…
);

3363  (
Ál£
);

3364 
	}
}

3366 
ssize_t


3367 
	$¨ía_deˇy_time_deÁu…_gë
()

3370  ((
ssize_t
)
	`©omic_ªad_z
((
size_t
 *)&
deˇy_time_deÁu…
));

3371 
	}
}

3373 
boﬁ


3374 
	$¨ía_deˇy_time_deÁu…_£t
(
ssize_t
 
deˇy_time
)

3377 i‡(
›t_purge
 !
purge_mode_deˇy
)

3378  (
åue
);

3379 i‡(!
	`¨ía_deˇy_time_vÆid
(
deˇy_time
))

3380  (
åue
);

3381 
	`©omic_wrôe_z
((
size_t
 *)&
deˇy_time_deÁu…
, (size_t)
deˇy_time
);

3382  (
Ál£
);

3383 
	}
}

3386 
	$¨ía_basic_°©s_mîge_locked
(
¨ía_t
 *
¨ía
, *
¡hªads
,

3387 c⁄° **
dss
, 
ssize_t
 *
lg_dúty_mu…
, ssize_à*
deˇy_time
,

3388 
size_t
 *
«˘ive
, size_à*
ndúty
)

3391 *
¡hªads
 +
	`¨ía_¡hªads_gë
(
¨ía
, 
Ál£
);

3392 *
dss
 = 
dss_¥ec_«mes
[
¨ía
->
dss_¥ec
];

3393 *
lg_dúty_mu…
 = 
¨ía
->lg_dirty_mult;

3394 *
deˇy_time
 = 
¨ía
->decay_time;

3395 *
«˘ive
 +
¨ía
->nactive;

3396 *
ndúty
 +
¨ía
->ndirty;

3397 
	}
}

3400 
	$¨ía_basic_°©s_mîge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
¡hªads
,

3401 c⁄° **
dss
, 
ssize_t
 *
lg_dúty_mu…
, ssize_à*
deˇy_time
,

3402 
size_t
 *
«˘ive
, size_à*
ndúty
)

3405 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3406 
	`¨ía_basic_°©s_mîge_locked
(
¨ía
, 
¡hªads
, 
dss
, 
lg_dúty_mu…
,

3407 
deˇy_time
, 
«˘ive
, 
ndúty
);

3408 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3409 
	}
}

3412 
	$¨ía_°©s_mîge
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
¡hªads
,

3413 c⁄° **
dss
, 
ssize_t
 *
lg_dúty_mu…
, ssize_à*
deˇy_time
,

3414 
size_t
 *
«˘ive
, size_à*
ndúty
, 
¨ía_°©s_t
 *
a°©s
,

3415 
mÆloc_bö_°©s_t
 *
b°©s
, 
mÆloc_œrge_°©s_t
 *
l°©s
,

3416 
mÆloc_huge_°©s_t
 *
h°©s
)

3418 
i
;

3420 
	`ˇs£π
(
c⁄fig_°©s
);

3422 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

3423 
	`¨ía_basic_°©s_mîge_locked
(
¨ía
, 
¡hªads
, 
dss
, 
lg_dúty_mu…
,

3424 
deˇy_time
, 
«˘ive
, 
ndúty
);

3426 
a°©s
->
m≠≥d
 +
¨ía
->
°©s
.mapped;

3427 
a°©s
->
ªèöed
 +
¨ía
->
°©s
.retained;

3428 
a°©s
->
≈urge
 +
¨ía
->
°©s
.npurge;

3429 
a°©s
->
nmadvi£
 +
¨ía
->
°©s
.nmadvise;

3430 
a°©s
->
purged
 +
¨ía
->
°©s
.purged;

3431 
a°©s
->
mëad©a_m≠≥d
 +
¨ía
->
°©s
.metadata_mapped;

3432 
a°©s
->
mëad©a_Æloˇãd
 +
	`¨ía_mëad©a_Æloˇãd_gë
(
¨ía
);

3433 
a°©s
->
Æloˇãd_œrge
 +
¨ía
->
°©s
.allocated_large;

3434 
a°©s
->
nmÆloc_œrge
 +
¨ía
->
°©s
.nmalloc_large;

3435 
a°©s
->
ndÆloc_œrge
 +
¨ía
->
°©s
.ndalloc_large;

3436 
a°©s
->
ƒeque°s_œrge
 +
¨ía
->
°©s
.nrequests_large;

3437 
a°©s
->
Æloˇãd_huge
 +
¨ía
->
°©s
.allocated_huge;

3438 
a°©s
->
nmÆloc_huge
 +
¨ía
->
°©s
.nmalloc_huge;

3439 
a°©s
->
ndÆloc_huge
 +
¨ía
->
°©s
.ndalloc_huge;

3441 
i
 = 0; i < 
∆˛as£s
; i++) {

3442 
l°©s
[
i
].
nmÆloc
 +
¨ía
->
°©s
.lstats[i].nmalloc;

3443 
l°©s
[
i
].
ndÆloc
 +
¨ía
->
°©s
.lstats[i].ndalloc;

3444 
l°©s
[
i
].
ƒeque°s
 +
¨ía
->
°©s
.lstats[i].nrequests;

3445 
l°©s
[
i
].
cuºuns
 +
¨ía
->
°©s
.lstats[i].curruns;

3448 
i
 = 0; i < 
nh˛as£s
; i++) {

3449 
h°©s
[
i
].
nmÆloc
 +
¨ía
->
°©s
.hstats[i].nmalloc;

3450 
h°©s
[
i
].
ndÆloc
 +
¨ía
->
°©s
.hstats[i].ndalloc;

3451 
h°©s
[
i
].
curhchunks
 +
¨ía
->
°©s
.hstats[i].curhchunks;

3453 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

3455 
i
 = 0; i < 
NBINS
; i++) {

3456 
¨ía_bö_t
 *
bö
 = &
¨ía
->
bös
[
i
];

3458 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

3459 
b°©s
[
i
].
nmÆloc
 +
bö
->
°©s
.nmalloc;

3460 
b°©s
[
i
].
ndÆloc
 +
bö
->
°©s
.ndalloc;

3461 
b°©s
[
i
].
ƒeque°s
 +
bö
->
°©s
.nrequests;

3462 
b°©s
[
i
].
cuºegs
 +
bö
->
°©s
.curregs;

3463 i‡(
c⁄fig_tˇche
) {

3464 
b°©s
[
i
].
nfûls
 +
bö
->
°©s
.nfills;

3465 
b°©s
[
i
].
nÊushes
 +
bö
->
°©s
.nflushes;

3467 
b°©s
[
i
].
ƒuns
 +
bö
->
°©s
.nruns;

3468 
b°©s
[
i
].
ªruns
 +
bö
->
°©s
.reruns;

3469 
b°©s
[
i
].
cuºuns
 +
bö
->
°©s
.curruns;

3470 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

3472 
	}
}

3475 
	$¨ía_¡hªads_gë
(
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
)

3478  (
	`©omic_ªad_u
(&
¨ía
->
¡hªads
[
öã∫Æ
]));

3479 
	}
}

3482 
	$¨ía_¡hªads_öc
(
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
)

3485 
	`©omic_add_u
(&
¨ía
->
¡hªads
[
öã∫Æ
], 1);

3486 
	}
}

3489 
	$¨ía_¡hªads_dec
(
¨ía_t
 *
¨ía
, 
boﬁ
 
öã∫Æ
)

3492 
	`©omic_sub_u
(&
¨ía
->
¡hªads
[
öã∫Æ
], 1);

3493 
	}
}

3495 
¨ía_t
 *

3496 
	$¨ía_√w
(
tsdn_t
 *
tsdn
, 
öd
)

3498 
¨ía_t
 *
¨ía
;

3499 
size_t
 
¨ía_size
;

3500 
i
;

3503 
¨ía_size
 = 
	`off£tof
(
¨ía_t
, 
runs_avaû
Ë+ ((
¨ía_run_hóp_t
) *

3504 
runs_avaû_n˛as£s
);

3509 i‡(
c⁄fig_°©s
) {

3510 
¨ía
 = (
¨ía_t
 *)
	`ba£_Æloc
(
tsdn
,

3511 
	`CACHELINE_CEILING
(
¨ía_size
Ë+ 
	`QUANTUM_CEILING
(
∆˛as£s
 *

3512 (
mÆloc_œrge_°©s_t
Ë+ 
nh˛as£s
) *

3513 (
mÆloc_huge_°©s_t
));

3515 
¨ía
 = (
¨ía_t
 *)
	`ba£_Æloc
(
tsdn
, 
¨ía_size
);

3516 i‡(
¨ía
 =
NULL
)

3517  (
NULL
);

3519 
¨ía
->
öd
 = ind;

3520 
¨ía
->
¡hªads
[0] =árena->nthreads[1] = 0;

3521 i‡(
	`mÆloc_muãx_öô
(&
¨ía
->
lock
, "¨ía", 
WITNESS_RANK_ARENA
))

3522  (
NULL
);

3524 i‡(
c⁄fig_°©s
) {

3525 
	`mem£t
(&
¨ía
->
°©s
, 0, (
¨ía_°©s_t
));

3526 
¨ía
->
°©s
.
l°©s
 = (
mÆloc_œrge_°©s_t
 *)((
uöçå_t
)arena

3527 + 
	`CACHELINE_CEILING
(
¨ía_size
));

3528 
	`mem£t
(
¨ía
->
°©s
.
l°©s
, 0, 
∆˛as£s
 *

3529 (
mÆloc_œrge_°©s_t
));

3530 
¨ía
->
°©s
.
h°©s
 = (
mÆloc_huge_°©s_t
 *)((
uöçå_t
)arena

3531 + 
	`CACHELINE_CEILING
(
¨ía_size
) +

3532 
	`QUANTUM_CEILING
(
∆˛as£s
 * (
mÆloc_œrge_°©s_t
)));

3533 
	`mem£t
(
¨ía
->
°©s
.
h°©s
, 0, 
nh˛as£s
 *

3534 (
mÆloc_huge_°©s_t
));

3535 i‡(
c⁄fig_tˇche
)

3536 
	`ql_√w
(&
¨ía
->
tˇche_ql
);

3539 i‡(
c⁄fig_¥of
)

3540 
¨ía
->
¥of_accumbyãs
 = 0;

3542 i‡(
c⁄fig_ˇche_oblivious
) {

3550 
¨ía
->
off£t_°©e
 = 
c⁄fig_debug
 ? 
öd
 :

3551 (
uöt64_t
)(
uöçå_t
)
¨ía
;

3554 
¨ía
->
dss_¥ec
 = 
	`chunk_dss_¥ec_gë
(
tsdn
);

3556 
	`ql_√w
(&
¨ía
->
achunks
);

3558 
¨ía
->
•¨e
 = 
NULL
;

3560 
¨ía
->
lg_dúty_mu…
 = 
	`¨ía_lg_dúty_mu…_deÁu…_gë
();

3561 
¨ía
->
purgög
 = 
Ál£
;

3562 
¨ía
->
«˘ive
 = 0;

3563 
¨ía
->
ndúty
 = 0;

3565 
i
 = 0; i < 
runs_avaû_n˛as£s
; i++)

3566 
	`¨ía_run_hóp_√w
(&
¨ía
->
runs_avaû
[
i
]);

3567 
	`qr_√w
(&
¨ía
->
runs_dúty
, 
rd_lök
);

3568 
	`qr_√w
(&
¨ía
->
chunks_ˇche
, 
cc_lök
);

3570 i‡(
›t_purge
 =
purge_mode_deˇy
)

3571 
	`¨ía_deˇy_öô
(
¨ía
, 
	`¨ía_deˇy_time_deÁu…_gë
());

3573 
	`ql_√w
(&
¨ía
->
huge
);

3574 i‡(
	`mÆloc_muãx_öô
(&
¨ía
->
huge_mtx
, "arena_huge",

3575 
WITNESS_RANK_ARENA_HUGE
))

3576  (
NULL
);

3578 
	`exã¡_åì_szad_√w
(&
¨ía
->
chunks_szad_ˇched
);

3579 
	`exã¡_åì_ad_√w
(&
¨ía
->
chunks_ad_ˇched
);

3580 
	`exã¡_åì_szad_√w
(&
¨ía
->
chunks_szad_ªèöed
);

3581 
	`exã¡_åì_ad_√w
(&
¨ía
->
chunks_ad_ªèöed
);

3582 i‡(
	`mÆloc_muãx_öô
(&
¨ía
->
chunks_mtx
, "arena_chunks",

3583 
WITNESS_RANK_ARENA_CHUNKS
))

3584  (
NULL
);

3585 
	`ql_√w
(&
¨ía
->
node_ˇche
);

3586 i‡(
	`mÆloc_muãx_öô
(&
¨ía
->
node_ˇche_mtx
, "arena_node_cache",

3587 
WITNESS_RANK_ARENA_NODE_CACHE
))

3588  (
NULL
);

3590 
¨ía
->
chunk_hooks
 = 
chunk_hooks_deÁu…
;

3593 
i
 = 0; i < 
NBINS
; i++) {

3594 
¨ía_bö_t
 *
bö
 = &
¨ía
->
bös
[
i
];

3595 i‡(
	`mÆloc_muãx_öô
(&
bö
->
lock
, "arena_bin",

3596 
WITNESS_RANK_ARENA_BIN
))

3597  (
NULL
);

3598 
bö
->
runcur
 = 
NULL
;

3599 
	`¨ía_run_hóp_√w
(&
bö
->
runs
);

3600 i‡(
c⁄fig_°©s
)

3601 
	`mem£t
(&
bö
->
°©s
, 0, (
mÆloc_bö_°©s_t
));

3604  (
¨ía
);

3605 
	}
}

3617 
	$bö_öfo_run_size_ˇlc
(
¨ía_bö_öfo_t
 *
bö_öfo
)

3619 
size_t
 
∑d_size
;

3620 
size_t
 
åy_run_size
, 
≥r„˘_run_size
, 
a˘uÆ_run_size
;

3621 
uöt32_t
 
åy_ƒegs
, 
≥r„˘_ƒegs
, 
a˘uÆ_ƒegs
;

3630 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_ªdz⁄e
)) {

3631 
size_t
 
Æign_mö
 = 
	`ZU
(1Ë<< (
	`ffs_zu
(
bö_öfo
->
ªg_size
) - 1);

3632 i‡(
Æign_mö
 <
REDZONE_MINSIZE
) {

3633 
bö_öfo
->
ªdz⁄e_size
 = 
REDZONE_MINSIZE
;

3634 
∑d_size
 = 0;

3636 
bö_öfo
->
ªdz⁄e_size
 = 
Æign_mö
 >> 1;

3637 
∑d_size
 = 
bö_öfo
->
ªdz⁄e_size
;

3640 
bö_öfo
->
ªdz⁄e_size
 = 0;

3641 
∑d_size
 = 0;

3643 
bö_öfo
->
ªg_öãrvÆ
 = bö_öfo->
ªg_size
 +

3644 (
bö_öfo
->
ªdz⁄e_size
 << 1);

3650 
åy_run_size
 = 
PAGE
;

3651 
åy_ƒegs
 = (
uöt32_t
)(
åy_run_size
 / 
bö_öfo
->
ªg_size
);

3653 
≥r„˘_run_size
 = 
åy_run_size
;

3654 
≥r„˘_ƒegs
 = 
åy_ƒegs
;

3656 
åy_run_size
 +
PAGE
;

3657 
åy_ƒegs
 = (
uöt32_t
)(
åy_run_size
 / 
bö_öfo
->
ªg_size
);

3658 } 
≥r„˘_run_size
 !
≥r„˘_ƒegs
 * 
bö_öfo
->
ªg_size
);

3659 
	`as£π
(
≥r„˘_ƒegs
 <
RUN_MAXREGS
);

3661 
a˘uÆ_run_size
 = 
≥r„˘_run_size
;

3662 
a˘uÆ_ƒegs
 = (
uöt32_t
)((
a˘uÆ_run_size
 - 
∑d_size
) /

3663 
bö_öfo
->
ªg_öãrvÆ
);

3671 
a˘uÆ_ƒegs
 == 0) {

3672 
	`as£π
(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_ªdz⁄e
));

3674 
a˘uÆ_run_size
 +
PAGE
;

3675 
a˘uÆ_ƒegs
 = (
uöt32_t
)((
a˘uÆ_run_size
 - 
∑d_size
) /

3676 
bö_öfo
->
ªg_öãrvÆ
);

3682 
a˘uÆ_run_size
 > 
¨ía_maxrun
) {

3683 
a˘uÆ_run_size
 -
PAGE
;

3684 
a˘uÆ_ƒegs
 = (
uöt32_t
)((
a˘uÆ_run_size
 - 
∑d_size
) /

3685 
bö_öfo
->
ªg_öãrvÆ
);

3687 
	`as£π
(
a˘uÆ_ƒegs
 > 0);

3688 
	`as£π
(
a˘uÆ_run_size
 =
	`s2u
(actual_run_size));

3691 
bö_öfo
->
run_size
 = 
a˘uÆ_run_size
;

3692 
bö_öfo
->
ƒegs
 = 
a˘uÆ_ƒegs
;

3693 
bö_öfo
->
ªg0_off£t
 = (
uöt32_t
)(
a˘uÆ_run_size
 - (
a˘uÆ_ƒegs
 *

3694 
bö_öfo
->
ªg_öãrvÆ
Ë- 
∑d_size
 + bö_öfo->
ªdz⁄e_size
);

3696 i‡(
a˘uÆ_run_size
 > 
smÆl_maxrun
)

3697 
smÆl_maxrun
 = 
a˘uÆ_run_size
;

3699 
	`as£π
(
bö_öfo
->
ªg0_off£t
 - bö_öfo->
ªdz⁄e_size
 + (bö_öfo->
ƒegs


3700 * 
bö_öfo
->
ªg_öãrvÆ
Ë+ 
∑d_size
 =bö_öfo->
run_size
);

3701 
	}
}

3704 
	$bö_öfo_öô
()

3706 
¨ía_bö_öfo_t
 *
bö_öfo
;

3708 
	#BIN_INFO_INIT_bö_yes
(
ödex
, 
size
) \

3709 
bö_öfo
 = &
¨ía_bö_öfo
[
ödex
]; \

3710 
bö_öfo
->
ªg_size
 = 
size
; \

3711 
	`bö_öfo_run_size_ˇlc
(
bö_öfo
); \

3712 
	`bôm≠_öfo_öô
(&
bö_öfo
->
bôm≠_öfo
, bö_öfo->
ƒegs
);

	)

3713 
	#BIN_INFO_INIT_bö_no
(
ödex
, 
size
)

	)

3714 
	#SC
(
ödex
, 
lg_gΩ
, 
lg_dñè
, 
ndñè
, 
bö
, 
lg_dñè_lookup
) \

3715 
BIN_INFO_INIT_bö_
##
	`bö
(
ödex
, (
	`ZU
(1)<<
lg_gΩ
Ë+ (ZU(
ndñè
)<<
lg_dñè
))

	)

3716 
SIZE_CLASSES


3717 #unde‡
BIN_INFO_INIT_bö_yes


3718 #unde‡
BIN_INFO_INIT_bö_no


3719 #unde‡
SC


3720 
	}
}

3722 
boﬁ


3723 
	$smÆl_run_size_öô
()

3726 
	`as£π
(
smÆl_maxrun
 != 0);

3728 
smÆl_run_èb
 = (
boﬁ
 *)
	`ba£_Æloc
(
NULL
, (boﬁË* (
smÆl_maxrun
 >>

3729 
LG_PAGE
));

3730 i‡(
smÆl_run_èb
 =
NULL
)

3731  (
åue
);

3733 
	#TAB_INIT_bö_yes
(
ödex
, 
size
) { \

3734 
¨ía_bö_öfo_t
 *
bö_öfo
 = &
¨ía_bö_öfo
[
ödex
]; \

3735 
smÆl_run_èb
[
bö_öfo
->
run_size
 >> 
LG_PAGE
] = 
åue
; \

3736 }

	)

3737 
	#TAB_INIT_bö_no
(
ödex
, 
size
)

	)

3738 
	#SC
(
ödex
, 
lg_gΩ
, 
lg_dñè
, 
ndñè
, 
bö
, 
lg_dñè_lookup
) \

3739 
TAB_INIT_bö_
##
	`bö
(
ödex
, (
	`ZU
(1)<<
lg_gΩ
Ë+ (ZU(
ndñè
)<<
lg_dñè
))

	)

3740 
SIZE_CLASSES


3741 #unde‡
TAB_INIT_bö_yes


3742 #unde‡
TAB_INIT_bö_no


3743 #unde‡
SC


3745  (
Ál£
);

3746 
	}
}

3748 
boﬁ


3749 
	$run_qu™tize_öô
()

3751 
i
;

3753 
run_qu™tize_max
 = 
chunksize
 + 
œrge_∑d
;

3755 
run_qu™tize_Êo‹_èb
 = (
size_t
 *)
	`ba£_Æloc
(
NULL
, (size_t) *

3756 (
run_qu™tize_max
 >> 
LG_PAGE
));

3757 i‡(
run_qu™tize_Êo‹_èb
 =
NULL
)

3758  (
åue
);

3760 
run_qu™tize_˚û_èb
 = (
size_t
 *)
	`ba£_Æloc
(
NULL
, (size_t) *

3761 (
run_qu™tize_max
 >> 
LG_PAGE
));

3762 i‡(
run_qu™tize_˚û_èb
 =
NULL
)

3763  (
åue
);

3765 
i
 = 1; i <
run_qu™tize_max
 >> 
LG_PAGE
; i++) {

3766 
size_t
 
run_size
 = 
i
 << 
LG_PAGE
;

3768 
run_qu™tize_Êo‹_èb
[
i
-1] =

3769 
	`run_qu™tize_Êo‹_compuã
(
run_size
);

3770 
run_qu™tize_˚û_èb
[
i
-1] =

3771 
	`run_qu™tize_˚û_compuã
(
run_size
);

3774  (
Ál£
);

3775 
	}
}

3777 
boﬁ


3778 
	$¨ía_boŸ
()

3780 
i
;

3782 
	`¨ía_lg_dúty_mu…_deÁu…_£t
(
›t_lg_dúty_mu…
);

3783 
	`¨ía_deˇy_time_deÁu…_£t
(
›t_deˇy_time
);

3797 
m≠_büs
 = 0;

3798 
i
 = 0; i < 3; i++) {

3799 
size_t
 
hódî_size
 = 
	`off£tof
(
¨ía_chunk_t
, 
m≠_bôs
) +

3800 (((
¨ía_chunk_m≠_bôs_t
) +

3801 (
¨ía_chunk_m≠_misc_t
)Ë* (
chunk_≈ages
-
m≠_büs
));

3802 
m≠_büs
 = (
hódî_size
 + 
PAGE_MASK
Ë>> 
LG_PAGE
;

3804 
	`as£π
(
m≠_büs
 > 0);

3806 
m≠_misc_off£t
 = 
	`off£tof
(
¨ía_chunk_t
, 
m≠_bôs
) +

3807 (
¨ía_chunk_m≠_bôs_t
Ë* (
chunk_≈ages
-
m≠_büs
);

3809 
¨ía_maxrun
 = 
chunksize
 - (
m≠_büs
 << 
LG_PAGE
);

3810 
	`as£π
(
¨ía_maxrun
 > 0);

3811 
œrge_max˛ass
 = 
	`ödex2size
(
	`size2ödex
(
chunksize
)-1);

3812 i‡(
œrge_max˛ass
 > 
¨ía_maxrun
) {

3818 
œrge_max˛ass
 = 
¨ía_maxrun
;

3820 
	`as£π
(
œrge_max˛ass
 > 0);

3821 
∆˛as£s
 = 
	`size2ödex
(
œrge_max˛ass
Ë- size2ödex(
SMALL_MAXCLASS
);

3822 
nh˛as£s
 = 
NSIZES
 - 
∆˛as£s
 - 
NBINS
;

3824 
	`bö_öfo_öô
();

3825 i‡(
	`smÆl_run_size_öô
())

3826  (
åue
);

3827 i‡(
	`run_qu™tize_öô
())

3828  (
åue
);

3830 
runs_avaû_büs
 = 
	`size2ödex
(
PAGE
);

3831 
runs_avaû_n˛as£s
 = 
	`size2ödex
(
run_qu™tize_max
)+1 - 
runs_avaû_büs
;

3833  (
Ál£
);

3834 
	}
}

3837 
	$¨ía_¥ef‹k0
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3840 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¨ía
->
lock
);

3841 
	}
}

3844 
	$¨ía_¥ef‹k1
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3847 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¨ía
->
chunks_mtx
);

3848 
	}
}

3851 
	$¨ía_¥ef‹k2
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3854 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

3855 
	}
}

3858 
	$¨ía_¥ef‹k3
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3860 
i
;

3862 
i
 = 0; i < 
NBINS
; i++)

3863 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¨ía
->
bös
[
i
].
lock
);

3864 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¨ía
->
huge_mtx
);

3865 
	}
}

3868 
	$¨ía_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3870 
i
;

3872 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¨ía
->
huge_mtx
);

3873 
i
 = 0; i < 
NBINS
; i++)

3874 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¨ía
->
bös
[
i
].
lock
);

3875 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

3876 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¨ía
->
chunks_mtx
);

3877 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¨ía
->
lock
);

3878 
	}
}

3881 
	$¨ía_po°f‹k_chûd
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

3883 
i
;

3885 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¨ía
->
huge_mtx
);

3886 
i
 = 0; i < 
NBINS
; i++)

3887 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¨ía
->
bös
[
i
].
lock
);

3888 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¨ía
->
node_ˇche_mtx
);

3889 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¨ía
->
chunks_mtx
);

3890 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¨ía
->
lock
);

3891 
	}
}

	@dep/jemalloc-4.2.0/src/atomic.c

1 
	#JEMALLOC_ATOMIC_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

	@dep/jemalloc-4.2.0/src/base.c

1 
	#JEMALLOC_BASE_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

7 
mÆloc_muãx_t
 
	gba£_mtx
;

8 
exã¡_åì_t
 
	gba£_avaû_szad
;

9 
exã¡_node_t
 *
	gba£_nodes
;

10 
size_t
 
	gba£_Æloˇãd
;

11 
size_t
 
	gba£_ªsidít
;

12 
size_t
 
	gba£_m≠≥d
;

16 
exã¡_node_t
 *

17 
	$ba£_node_åy_Æloc
(
tsdn_t
 *
tsdn
)

19 
exã¡_node_t
 *
node
;

21 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, &
ba£_mtx
);

23 i‡(
ba£_nodes
 =
NULL
)

24  (
NULL
);

25 
node
 = 
ba£_nodes
;

26 
ba£_nodes
 = *(
exã¡_node_t
 **)
node
;

27 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
node
, (
exã¡_node_t
));

28  (
node
);

29 
	}
}

32 
	$ba£_node_dÆloc
(
tsdn_t
 *
tsdn
, 
exã¡_node_t
 *
node
)

35 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, &
ba£_mtx
);

37 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
node
, (
exã¡_node_t
));

38 *(
exã¡_node_t
 **)
node
 = 
ba£_nodes
;

39 
ba£_nodes
 = 
node
;

40 
	}
}

42 
exã¡_node_t
 *

43 
	$ba£_chunk_Æloc
(
tsdn_t
 *
tsdn
, 
size_t
 
mösize
)

45 
exã¡_node_t
 *
node
;

46 
size_t
 
csize
, 
nsize
;

47 *
addr
;

49 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, &
ba£_mtx
);

50 
	`as£π
(
mösize
 != 0);

51 
node
 = 
	`ba£_node_åy_Æloc
(
tsdn
);

53 
nsize
 = (
node
 =
NULL
Ë? 
	`CACHELINE_CEILING
((
exã¡_node_t
)) : 0;

54 
csize
 = 
	`CHUNK_CEILING
(
mösize
 + 
nsize
);

55 
addr
 = 
	`chunk_Æloc_ba£
(
csize
);

56 i‡(
addr
 =
NULL
) {

57 i‡(
node
 !
NULL
)

58 
	`ba£_node_dÆloc
(
tsdn
, 
node
);

59  (
NULL
);

61 
ba£_m≠≥d
 +
csize
;

62 i‡(
node
 =
NULL
) {

63 
node
 = (
exã¡_node_t
 *)
addr
;

64 
addr
 = (*)((
uöçå_t
Ôdd∏+ 
nsize
);

65 
csize
 -
nsize
;

66 i‡(
c⁄fig_°©s
) {

67 
ba£_Æloˇãd
 +
nsize
;

68 
ba£_ªsidít
 +
	`PAGE_CEILING
(
nsize
);

71 
	`exã¡_node_öô
(
node
, 
NULL
, 
addr
, 
csize
, 
åue
,Årue);

72  (
node
);

73 
	}
}

81 
	$ba£_Æloc
(
tsdn_t
 *
tsdn
, 
size_t
 
size
)

83 *
ªt
;

84 
size_t
 
csize
, 
usize
;

85 
exã¡_node_t
 *
node
;

86 
exã¡_node_t
 
key
;

92 
csize
 = 
	`CACHELINE_CEILING
(
size
);

94 
usize
 = 
	`s2u
(
csize
);

95 
	`exã¡_node_öô
(&
key
, 
NULL
, NULL, 
usize
, 
Ál£
, false);

96 
	`mÆloc_muãx_lock
(
tsdn
, &
ba£_mtx
);

97 
node
 = 
	`exã¡_åì_szad_n£¨ch
(&
ba£_avaû_szad
, &
key
);

98 i‡(
node
 !
NULL
) {

100 
	`exã¡_åì_szad_ªmove
(&
ba£_avaû_szad
, 
node
);

103 
node
 = 
	`ba£_chunk_Æloc
(
tsdn
, 
csize
);

105 i‡(
node
 =
NULL
) {

106 
ªt
 = 
NULL
;

107 
œbñ_ªtu∫
;

110 
ªt
 = 
	`exã¡_node_addr_gë
(
node
);

111 i‡(
	`exã¡_node_size_gë
(
node
Ë> 
csize
) {

112 
	`exã¡_node_addr_£t
(
node
, (*)((
uöçå_t
)
ªt
 + 
csize
));

113 
	`exã¡_node_size_£t
(
node
, 
	`exã¡_node_size_gë
“odeË- 
csize
);

114 
	`exã¡_åì_szad_ö£π
(&
ba£_avaû_szad
, 
node
);

116 
	`ba£_node_dÆloc
(
tsdn
, 
node
);

117 i‡(
c⁄fig_°©s
) {

118 
ba£_Æloˇãd
 +
csize
;

123 
ba£_ªsidít
 +
	`PAGE_CEILING
((
uöçå_t
)
ªt
 + 
csize
) -

124 
	`PAGE_CEILING
((
uöçå_t
)
ªt
);

126 
	`JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
(
ªt
, 
csize
);

127 
œbñ_ªtu∫
:

128 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
ba£_mtx
);

129  (
ªt
);

130 
	}
}

133 
	$ba£_°©s_gë
(
tsdn_t
 *
tsdn
, 
size_t
 *
Æloˇãd
, size_à*
ªsidít
,

134 
size_t
 *
m≠≥d
)

137 
	`mÆloc_muãx_lock
(
tsdn
, &
ba£_mtx
);

138 
	`as£π
(
ba£_Æloˇãd
 <
ba£_ªsidít
);

139 
	`as£π
(
ba£_ªsidít
 <
ba£_m≠≥d
);

140 *
Æloˇãd
 = 
ba£_Æloˇãd
;

141 *
ªsidít
 = 
ba£_ªsidít
;

142 *
m≠≥d
 = 
ba£_m≠≥d
;

143 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
ba£_mtx
);

144 
	}
}

146 
boﬁ


147 
	$ba£_boŸ
()

150 i‡(
	`mÆloc_muãx_öô
(&
ba£_mtx
, "ba£", 
WITNESS_RANK_BASE
))

151  (
åue
);

152 
	`exã¡_åì_szad_√w
(&
ba£_avaû_szad
);

153 
ba£_nodes
 = 
NULL
;

155  (
Ál£
);

156 
	}
}

159 
	$ba£_¥ef‹k
(
tsdn_t
 *
tsdn
)

162 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
ba£_mtx
);

163 
	}
}

166 
	$ba£_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
)

169 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
ba£_mtx
);

170 
	}
}

173 
	$ba£_po°f‹k_chûd
(
tsdn_t
 *
tsdn
)

176 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
ba£_mtx
);

177 
	}
}

	@dep/jemalloc-4.2.0/src/bitmap.c

1 
	#JEMALLOC_BITMAP_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

6 #ifde‡
USE_TREE


9 
	$bôm≠_öfo_öô
(
bôm≠_öfo_t
 *
böfo
, 
size_t
 
nbôs
)

11 
i
;

12 
size_t
 
group_cou¡
;

14 
	`as£π
(
nbôs
 > 0);

15 
	`as£π
(
nbôs
 <(
	`ZU
(1Ë<< 
LG_BITMAP_MAXBITS
));

22 
böfo
->
Àvñs
[0].
group_off£t
 = 0;

23 
group_cou¡
 = 
	`BITMAP_BITS2GROUPS
(
nbôs
);

24 
i
 = 1; 
group_cou¡
 > 1; i++) {

25 
	`as£π
(
i
 < 
BITMAP_MAX_LEVELS
);

26 
böfo
->
Àvñs
[
i
].
group_off£t
 = binfo->levels[i-1].group_offset

27 + 
group_cou¡
;

28 
group_cou¡
 = 
	`BITMAP_BITS2GROUPS
(group_count);

30 
böfo
->
Àvñs
[
i
].
group_off£t
 = binfo->levels[i-1].group_offset

31 + 
group_cou¡
;

32 
	`as£π
(
böfo
->
Àvñs
[
i
].
group_off£t
 <
BITMAP_GROUPS_MAX
);

33 
böfo
->
∆evñs
 = 
i
;

34 
böfo
->
nbôs
 =Çbits;

35 
	}
}

37 
size_t


38 
	$bôm≠_öfo_ngroups
(c⁄° 
bôm≠_öfo_t
 *
böfo
)

41  (
böfo
->
Àvñs
[böfo->
∆evñs
].
group_off£t
);

42 
	}
}

45 
	$bôm≠_öô
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
)

47 
size_t
 
exåa
;

48 
i
;

57 
	`mem£t
(
bôm≠
, 0xffU, 
	`bôm≠_size
(
böfo
));

58 
exåa
 = (
BITMAP_GROUP_NBITS
 - (
böfo
->
nbôs
 & 
BITMAP_GROUP_NBITS_MASK
))

59 & 
BITMAP_GROUP_NBITS_MASK
;

60 i‡(
exåa
 != 0)

61 
bôm≠
[
böfo
->
Àvñs
[1].
group_off£t
 - 1] >>
exåa
;

62 
i
 = 1; i < 
böfo
->
∆evñs
; i++) {

63 
size_t
 
group_cou¡
 = 
böfo
->
Àvñs
[
i
].
group_off£t
 -

64 
böfo
->
Àvñs
[
i
-1].
group_off£t
;

65 
exåa
 = (
BITMAP_GROUP_NBITS
 - (
group_cou¡
 &

66 
BITMAP_GROUP_NBITS_MASK
)) & BITMAP_GROUP_NBITS_MASK;

67 i‡(
exåa
 != 0)

68 
bôm≠
[
böfo
->
Àvñs
[
i
+1].
group_off£t
 - 1] >>
exåa
;

70 
	}
}

75 
	$bôm≠_öfo_öô
(
bôm≠_öfo_t
 *
böfo
, 
size_t
 
nbôs
)

78 
	`as£π
(
nbôs
 > 0);

79 
	`as£π
(
nbôs
 <(
	`ZU
(1Ë<< 
LG_BITMAP_MAXBITS
));

81 
böfo
->
ngroups
 = 
	`BITMAP_BITS2GROUPS
(
nbôs
);

82 
böfo
->
nbôs
 =Çbits;

83 
	}
}

85 
size_t


86 
	$bôm≠_öfo_ngroups
(c⁄° 
bôm≠_öfo_t
 *
böfo
)

89  (
böfo
->
ngroups
);

90 
	}
}

93 
	$bôm≠_öô
(
bôm≠_t
 *
bôm≠
, c⁄° 
bôm≠_öfo_t
 *
böfo
)

95 
size_t
 
exåa
;

97 
	`mem£t
(
bôm≠
, 0xffU, 
	`bôm≠_size
(
böfo
));

98 
exåa
 = (
BITMAP_GROUP_NBITS
 - (
böfo
->
nbôs
 & 
BITMAP_GROUP_NBITS_MASK
))

99 & 
BITMAP_GROUP_NBITS_MASK
;

100 i‡(
exåa
 != 0)

101 
bôm≠
[
böfo
->
ngroups
 - 1] >>
exåa
;

102 
	}
}

106 
size_t


107 
	$bôm≠_size
(c⁄° 
bôm≠_öfo_t
 *
böfo
)

110  (
	`bôm≠_öfo_ngroups
(
böfo
Ë<< 
LG_SIZEOF_BITMAP
);

111 
	}
}

	@dep/jemalloc-4.2.0/src/chunk.c

1 
	#JEMALLOC_CHUNK_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

7 c⁄° *
	g›t_dss
 = 
DSS_DEFAULT
;

8 
size_t
 
	g›t_lg_chunk
 = 0;

11 
size_t
 
	gcurchunks
;

12 
size_t
 
	ghighchunks
;

14 
πªe_t
 
	gchunks_πªe
;

17 
size_t
 
	gchunksize
;

18 
size_t
 
	gchunksize_mask
;

19 
size_t
 
	gchunk_≈ages
;

21 *
chunk_Æloc_deÁu…
(*
√w_addr
, 
size_t
 
size
,

22 
size_t
 
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
, 
¨ía_öd
);

23 
boﬁ
 
chunk_dÆloc_deÁu…
(*
chunk
, 
size_t
 
size
, boﬁ 
commôãd
,

24 
¨ía_öd
);

25 
boﬁ
 
chunk_commô_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
off£t
,

26 
size_t
 
Àngth
, 
¨ía_öd
);

27 
boﬁ
 
chunk_decommô_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
off£t
,

28 
size_t
 
Àngth
, 
¨ía_öd
);

29 
boﬁ
 
chunk_purge_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
off£t
,

30 
size_t
 
Àngth
, 
¨ía_öd
);

31 
boﬁ
 
chunk_•lô_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
size_a
,

32 
size_t
 
size_b
, 
boﬁ
 
commôãd
, 
¨ía_öd
);

33 
boﬁ
 
chunk_mîge_deÁu…
(*
chunk_a
, 
size_t
 
size_a
, *
chunk_b
,

34 
size_t
 
size_b
, 
boﬁ
 
commôãd
, 
¨ía_öd
);

36 c⁄° 
chunk_hooks_t
 
	gchunk_hooks_deÁu…
 = {

37 
chunk_Æloc_deÁu…
,

38 
chunk_dÆloc_deÁu…
,

39 
chunk_commô_deÁu…
,

40 
chunk_decommô_deÁu…
,

41 
chunk_purge_deÁu…
,

42 
chunk_•lô_deÁu…
,

43 
chunk_mîge_deÁu…


52 
chunk_ªc‹d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

53 
chunk_hooks_t
 *
chunk_hooks
, 
exã¡_åì_t
 *
chunks_szad
,

54 
exã¡_åì_t
 *
chunks_ad
, 
boﬁ
 
ˇche
, *
chunk
, 
size_t
 
size
, boﬁ 
zî€d
,

55 
boﬁ
 
commôãd
);

59 
chunk_hooks_t


60 
	$chunk_hooks_gë_locked
(
¨ía_t
 *
¨ía
)

63  (
¨ía
->
chunk_hooks
);

64 
	}
}

66 
chunk_hooks_t


67 
	$chunk_hooks_gë
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

69 
chunk_hooks_t
 
chunk_hooks
;

71 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
chunks_mtx
);

72 
chunk_hooks
 = 
	`chunk_hooks_gë_locked
(
¨ía
);

73 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

75  (
chunk_hooks
);

76 
	}
}

78 
chunk_hooks_t


79 
	$chunk_hooks_£t
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, c⁄° 
chunk_hooks_t
 *
chunk_hooks
)

81 
chunk_hooks_t
 
ﬁd_chunk_hooks
;

83 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
chunks_mtx
);

84 
ﬁd_chunk_hooks
 = 
¨ía
->
chunk_hooks
;

92 
	#ATOMIC_COPY_HOOK
(
n
) do { \

94 
chunk_
##
n
##
_t
 **n; \

95 **
v
; \

96 } 
u
; \

97 
u
.
n
 = &
¨ía
->
chunk_hooks
.n; \

98 
	`©omic_wrôe_p
(
u
.
v
, 
chunk_hooks
->
n
); \

99 } 0)

	)

100 
	`ATOMIC_COPY_HOOK
(
Æloc
);

101 
	`ATOMIC_COPY_HOOK
(
dÆloc
);

102 
	`ATOMIC_COPY_HOOK
(
commô
);

103 
	`ATOMIC_COPY_HOOK
(
decommô
);

104 
	`ATOMIC_COPY_HOOK
(
purge
);

105 
	`ATOMIC_COPY_HOOK
(
•lô
);

106 
	`ATOMIC_COPY_HOOK
(
mîge
);

107 #unde‡
ATOMIC_COPY_HOOK


108 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

110  (
ﬁd_chunk_hooks
);

111 
	}
}

114 
	$chunk_hooks_assuª_öôülized_im∂
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

115 
chunk_hooks_t
 *
chunk_hooks
, 
boﬁ
 
locked
)

117 c⁄° 
chunk_hooks_t
 
unöôülized_hooks
 =

118 
CHUNK_HOOKS_INITIALIZER
;

120 i‡(
	`memcmp
(
chunk_hooks
, &
unöôülized_hooks
, (
chunk_hooks_t
)) ==

122 *
chunk_hooks
 = 
locked
 ? 
	`chunk_hooks_gë_locked
(
¨ía
) :

123 
	`chunk_hooks_gë
(
tsdn
, 
¨ía
);

125 
	}
}

128 
	$chunk_hooks_assuª_öôülized_locked
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

129 
chunk_hooks_t
 *
chunk_hooks
)

132 
	`chunk_hooks_assuª_öôülized_im∂
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
åue
);

133 
	}
}

136 
	$chunk_hooks_assuª_öôülized
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
,

137 
chunk_hooks_t
 *
chunk_hooks
)

140 
	`chunk_hooks_assuª_öôülized_im∂
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
Ál£
);

141 
	}
}

143 
boﬁ


144 
	$chunk_ªgi°î
(
tsdn_t
 *
tsdn
, c⁄° *
chunk
, c⁄° 
exã¡_node_t
 *
node
)

147 
	`as£π
(
	`exã¡_node_addr_gë
(
node
Ë=
chunk
);

149 i‡(
	`πªe_£t
(&
chunks_πªe
, (
uöçå_t
)
chunk
, 
node
))

150  (
åue
);

151 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

152 
size_t
 
size
 = 
	`exã¡_node_size_gë
(
node
);

153 
size_t
 
«dd
 = (
size
 =0Ë? 1 : sizê/ 
chunksize
;

154 
size_t
 
cur
 = 
	`©omic_add_z
(&
curchunks
, 
«dd
);

155 
size_t
 
high
 = 
	`©omic_ªad_z
(&
highchunks
);

156 
cur
 > 
high
 && 
	`©omic_ˇs_z
(&
highchunks
, high, cur)) {

161 
high
 = 
	`©omic_ªad_z
(&
highchunks
);

163 i‡(
cur
 > 
high
 && 
	`¥of_gdump_gë_u∆ocked
())

164 
	`¥of_gdump
(
tsdn
);

167  (
Ál£
);

168 
	}
}

171 
	$chunk_dîegi°î
(c⁄° *
chunk
, c⁄° 
exã¡_node_t
 *
node
)

173 
boﬁ
 
îr
;

175 
îr
 = 
	`πªe_£t
(&
chunks_πªe
, (
uöçå_t
)
chunk
, 
NULL
);

176 
	`as£π
(!
îr
);

177 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

178 
size_t
 
size
 = 
	`exã¡_node_size_gë
(
node
);

179 
size_t
 
nsub
 = (
size
 =0Ë? 1 : sizê/ 
chunksize
;

180 
	`as£π
(
	`©omic_ªad_z
(&
curchunks
Ë>
nsub
);

181 
	`©omic_sub_z
(&
curchunks
, 
nsub
);

183 
	}
}

189 
exã¡_node_t
 *

190 
	$chunk_fú°_be°_fô
(
¨ía_t
 *
¨ía
, 
exã¡_åì_t
 *
chunks_szad
,

191 
exã¡_åì_t
 *
chunks_ad
, 
size_t
 
size
)

193 
exã¡_node_t
 
key
;

195 
	`as£π
(
size
 =
	`CHUNK_CEILING
(size));

197 
	`exã¡_node_öô
(&
key
, 
¨ía
, 
NULL
, 
size
, 
Ál£
, false);

198  (
	`exã¡_åì_szad_n£¨ch
(
chunks_szad
, &
key
));

199 
	}
}

202 
	$chunk_ªcy˛e
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

203 
exã¡_åì_t
 *
chunks_szad
,Éxã¡_åì_à*
chunks_ad
, 
boﬁ
 
ˇche
,

204 *
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
,

205 
boﬁ
 
dÆloc_node
)

207 *
ªt
;

208 
exã¡_node_t
 *
node
;

209 
size_t
 
Æloc_size
, 
Àadsize
, 
åaûsize
;

210 
boﬁ
 
zî€d
, 
commôãd
;

212 
	`as£π
(
√w_addr
 =
NULL
 || 
Æignmít
 =
chunksize
);

218 
	`as£π
(
dÆloc_node
 || 
√w_addr
 !
NULL
);

220 
Æloc_size
 = 
	`CHUNK_CEILING
(
	`s2u
(
size
 + 
Æignmít
 - 
chunksize
));

222 i‡(
Æloc_size
 < 
size
)

223  (
NULL
);

224 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
chunks_mtx
);

225 
	`chunk_hooks_assuª_öôülized_locked
(
tsdn
, 
¨ía
, 
chunk_hooks
);

226 i‡(
√w_addr
 !
NULL
) {

227 
exã¡_node_t
 
key
;

228 
	`exã¡_node_öô
(&
key
, 
¨ía
, 
√w_addr
, 
Æloc_size
, 
Ál£
,

229 
Ál£
);

230 
node
 = 
	`exã¡_åì_ad_£¨ch
(
chunks_ad
, &
key
);

232 
node
 = 
	`chunk_fú°_be°_fô
(
¨ía
, 
chunks_szad
, 
chunks_ad
,

233 
Æloc_size
);

235 i‡(
node
 =
NULL
 || (
√w_addr
 !NULL && 
	`exã¡_node_size_gë
(node) <

236 
size
)) {

237 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

238  (
NULL
);

240 
Àadsize
 = 
	`ALIGNMENT_CEILING
((
uöçå_t
)
	`exã¡_node_addr_gë
(
node
),

241 
Æignmít
Ë- (
uöçå_t
)
	`exã¡_node_addr_gë
(
node
);

242 
	`as£π
(
√w_addr
 =
NULL
 || 
Àadsize
 == 0);

243 
	`as£π
(
	`exã¡_node_size_gë
(
node
Ë>
Àadsize
 + 
size
);

244 
åaûsize
 = 
	`exã¡_node_size_gë
(
node
Ë- 
Àadsize
 - 
size
;

245 
ªt
 = (*)((
uöçå_t
)
	`exã¡_node_addr_gë
(
node
Ë+ 
Àadsize
);

246 
zî€d
 = 
	`exã¡_node_zî€d_gë
(
node
);

247 i‡(
zî€d
)

248 *
zîo
 = 
åue
;

249 
commôãd
 = 
	`exã¡_node_commôãd_gë
(
node
);

250 i‡(
commôãd
)

251 *
commô
 = 
åue
;

253 i‡(
Àadsize
 != 0 &&

254 
chunk_hooks
->
	`•lô
(
	`exã¡_node_addr_gë
(
node
),

255 
	`exã¡_node_size_gë
(
node
), 
Àadsize
, 
size
, 
Ál£
, 
¨ía
->
öd
)) {

256 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

257  (
NULL
);

260 
	`exã¡_åì_szad_ªmove
(
chunks_szad
, 
node
);

261 
	`exã¡_åì_ad_ªmove
(
chunks_ad
, 
node
);

262 
	`¨ía_chunk_ˇche_maybe_ªmove
(
¨ía
, 
node
, 
ˇche
);

263 i‡(
Àadsize
 != 0) {

265 
	`exã¡_node_size_£t
(
node
, 
Àadsize
);

266 
	`exã¡_åì_szad_ö£π
(
chunks_szad
, 
node
);

267 
	`exã¡_åì_ad_ö£π
(
chunks_ad
, 
node
);

268 
	`¨ía_chunk_ˇche_maybe_ö£π
(
¨ía
, 
node
, 
ˇche
);

269 
node
 = 
NULL
;

271 i‡(
åaûsize
 != 0) {

273 i‡(
chunk_hooks
->
	`•lô
(
ªt
, 
size
 + 
åaûsize
, size,

274 
åaûsize
, 
Ál£
, 
¨ía
->
öd
)) {

275 i‡(
dÆloc_node
 && 
node
 !
NULL
)

276 
	`¨ía_node_dÆloc
(
tsdn
, 
¨ía
, 
node
);

277 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

278 
	`chunk_ªc‹d
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
chunks_szad
,

279 
chunks_ad
, 
ˇche
, 
ªt
, 
size
 + 
åaûsize
, 
zî€d
,

280 
commôãd
);

281  (
NULL
);

284 i‡(
node
 =
NULL
) {

285 
node
 = 
	`¨ía_node_Æloc
(
tsdn
, 
¨ía
);

286 i‡(
node
 =
NULL
) {

287 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

288 
	`chunk_ªc‹d
(
tsdn
, 
¨ía
, 
chunk_hooks
,

289 
chunks_szad
, 
chunks_ad
, 
ˇche
, 
ªt
, 
size
 +

290 
åaûsize
, 
zî€d
, 
commôãd
);

291  (
NULL
);

294 
	`exã¡_node_öô
(
node
, 
¨ía
, (*)((
uöçå_t
)(
ªt
Ë+ 
size
),

295 
åaûsize
, 
zî€d
, 
commôãd
);

296 
	`exã¡_åì_szad_ö£π
(
chunks_szad
, 
node
);

297 
	`exã¡_åì_ad_ö£π
(
chunks_ad
, 
node
);

298 
	`¨ía_chunk_ˇche_maybe_ö£π
(
¨ía
, 
node
, 
ˇche
);

299 
node
 = 
NULL
;

301 i‡(!
commôãd
 && 
chunk_hooks
->
	`commô
(
ªt
, 
size
, 0, size, 
¨ía
->
öd
)) {

302 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

303 
	`chunk_ªc‹d
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
chunks_szad
, 
chunks_ad
,

304 
ˇche
, 
ªt
, 
size
, 
zî€d
, 
commôãd
);

305  (
NULL
);

307 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

309 
	`as£π
(
dÆloc_node
 || 
node
 !
NULL
);

310 i‡(
dÆloc_node
 && 
node
 !
NULL
)

311 
	`¨ía_node_dÆloc
(
tsdn
, 
¨ía
, 
node
);

312 i‡(*
zîo
) {

313 i‡(!
zî€d
)

314 
	`mem£t
(
ªt
, 0, 
size
);

315 i‡(
c⁄fig_debug
) {

316 
size_t
 
i
;

317 
size_t
 *
p
 = (size_à*)(
uöçå_t
)
ªt
;

319 
	`JEMALLOC_VALGRIND_MAKE_MEM_DEFINED
(
ªt
, 
size
);

320 
i
 = 0; i < 
size
 / (
size_t
); i++)

321 
	`as£π
(
p
[
i
] == 0);

324  (
ªt
);

325 
	}
}

334 
	$chunk_Æloc_c‹e
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
√w_addr
, 
size_t
 
size
,

335 
size_t
 
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
, 
dss_¥ec_t
 
dss_¥ec
)

337 *
ªt
;

339 
	`as£π
(
size
 != 0);

340 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

341 
	`as£π
(
Æignmít
 != 0);

342 
	`as£π
((
Æignmít
 & 
chunksize_mask
) == 0);

345 i‡(
have_dss
 && 
dss_¥ec
 =
dss_¥ec_¥im¨y
 && (
ªt
 =

346 
	`chunk_Æloc_dss
(
tsdn
, 
¨ía
, 
√w_addr
, 
size
, 
Æignmít
, 
zîo
,

347 
commô
)Ë!
NULL
)

348  (
ªt
);

350 i‡((
ªt
 = 
	`chunk_Æloc_mm≠
(
√w_addr
, 
size
, 
Æignmít
, 
zîo
, 
commô
)) !=

351 
NULL
)

352  (
ªt
);

354 i‡(
have_dss
 && 
dss_¥ec
 =
dss_¥ec_£c⁄d¨y
 && (
ªt
 =

355 
	`chunk_Æloc_dss
(
tsdn
, 
¨ía
, 
√w_addr
, 
size
, 
Æignmít
, 
zîo
,

356 
commô
)Ë!
NULL
)

357  (
ªt
);

360  (
NULL
);

361 
	}
}

364 
	$chunk_Æloc_ba£
(
size_t
 
size
)

366 *
ªt
;

367 
boﬁ
 
zîo
, 
commô
;

374 
zîo
 = 
åue
;

375 
commô
 = 
åue
;

376 
ªt
 = 
	`chunk_Æloc_mm≠
(
NULL
, 
size
, 
chunksize
, &
zîo
, &
commô
);

377 i‡(
ªt
 =
NULL
)

378  (
NULL
);

379 i‡(
c⁄fig_vÆgröd
)

380 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
size
);

382  (
ªt
);

383 
	}
}

386 
	$chunk_Æloc_ˇche
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

387 *
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
, boﬁ 
dÆloc_node
)

389 *
ªt
;

390 
boﬁ
 
commô
;

392 
	`as£π
(
size
 != 0);

393 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

394 
	`as£π
(
Æignmít
 != 0);

395 
	`as£π
((
Æignmít
 & 
chunksize_mask
) == 0);

397 
commô
 = 
åue
;

398 
ªt
 = 
	`chunk_ªcy˛e
(
tsdn
, 
¨ía
, 
chunk_hooks
,

399 &
¨ía
->
chunks_szad_ˇched
, &¨ía->
chunks_ad_ˇched
, 
åue
,

400 
√w_addr
, 
size
, 
Æignmít
, 
zîo
, &
commô
, 
dÆloc_node
);

401 i‡(
ªt
 =
NULL
)

402  (
NULL
);

403 
	`as£π
(
commô
);

404 i‡(
c⁄fig_vÆgröd
)

405 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
size
);

406  (
ªt
);

407 
	}
}

409 
¨ía_t
 *

410 
	$chunk_¨ía_gë
(
tsdn_t
 *
tsdn
, 
¨ía_öd
)

412 
¨ía_t
 *
¨ía
;

414 
¨ía
 = 
	`¨ía_gë
(
tsdn
, 
¨ía_öd
, 
Ál£
);

419 
	`as£π
(
¨ía
 !
NULL
);

420  (
¨ía
);

421 
	}
}

424 
	$chunk_Æloc_deÁu…
(*
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
,

425 
boﬁ
 *
commô
, 
¨ía_öd
)

427 *
ªt
;

428 
tsdn_t
 *
tsdn
;

429 
¨ía_t
 *
¨ía
;

431 
tsdn
 = 
	`tsdn_„tch
();

432 
¨ía
 = 
	`chunk_¨ía_gë
(
tsdn
, 
¨ía_öd
);

433 
ªt
 = 
	`chunk_Æloc_c‹e
(
tsdn
, 
¨ía
, 
√w_addr
, 
size
, 
Æignmít
, 
zîo
,

434 
commô
, 
¨ía
->
dss_¥ec
);

435 i‡(
ªt
 =
NULL
)

436  (
NULL
);

437 i‡(
c⁄fig_vÆgröd
)

438 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
size
);

440  (
ªt
);

441 
	}
}

444 
	$chunk_Æloc_ªèöed
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

445 *
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
)

447 *
ªt
;

449 
	`as£π
(
size
 != 0);

450 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

451 
	`as£π
(
Æignmít
 != 0);

452 
	`as£π
((
Æignmít
 & 
chunksize_mask
) == 0);

454 
ªt
 = 
	`chunk_ªcy˛e
(
tsdn
, 
¨ía
, 
chunk_hooks
,

455 &
¨ía
->
chunks_szad_ªèöed
, &¨ía->
chunks_ad_ªèöed
, 
Ál£
,

456 
√w_addr
, 
size
, 
Æignmít
, 
zîo
, 
commô
, 
åue
);

458 i‡(
c⁄fig_°©s
 && 
ªt
 !
NULL
)

459 
¨ía
->
°©s
.
ªèöed
 -
size
;

461  (
ªt
);

462 
	}
}

465 
	$chunk_Æloc_wøµî
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

466 *
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
)

468 *
ªt
;

470 
	`chunk_hooks_assuª_öôülized
(
tsdn
, 
¨ía
, 
chunk_hooks
);

472 
ªt
 = 
	`chunk_Æloc_ªèöed
(
tsdn
, 
¨ía
, 
chunk_hooks
, 
√w_addr
, 
size
,

473 
Æignmít
, 
zîo
, 
commô
);

474 i‡(
ªt
 =
NULL
) {

475 
ªt
 = 
chunk_hooks
->
	`Æloc
(
√w_addr
, 
size
, 
Æignmít
, 
zîo
,

476 
commô
, 
¨ía
->
öd
);

477 i‡(
ªt
 =
NULL
)

478  (
NULL
);

481 i‡(
c⁄fig_vÆgröd
 && 
chunk_hooks
->
Æloc
 !
chunk_Æloc_deÁu…
)

482 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(
ªt
, 
chunksize
);

483  (
ªt
);

484 
	}
}

487 
	$chunk_ªc‹d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

488 
exã¡_åì_t
 *
chunks_szad
,Éxã¡_åì_à*
chunks_ad
, 
boﬁ
 
ˇche
,

489 *
chunk
, 
size_t
 
size
, 
boﬁ
 
zî€d
, boﬁ 
commôãd
)

491 
boﬁ
 
unzî€d
;

492 
exã¡_node_t
 *
node
, *
¥ev
;

493 
exã¡_node_t
 
key
;

495 
	`as£π
(!
ˇche
 || !
zî€d
);

496 
unzî€d
 = 
ˇche
 || !
zî€d
;

497 
	`JEMALLOC_VALGRIND_MAKE_MEM_NOACCESS
(
chunk
, 
size
);

499 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
chunks_mtx
);

500 
	`chunk_hooks_assuª_öôülized_locked
(
tsdn
, 
¨ía
, 
chunk_hooks
);

501 
	`exã¡_node_öô
(&
key
, 
¨ía
, (*)((
uöçå_t
)
chunk
 + 
size
), 0,

502 
Ál£
, false);

503 
node
 = 
	`exã¡_åì_ad_n£¨ch
(
chunks_ad
, &
key
);

505 i‡(
node
 !
NULL
 && 
	`exã¡_node_addr_gë
(node) ==

506 
	`exã¡_node_addr_gë
(&
key
Ë&& 
	`exã¡_node_commôãd_gë
(
node
) ==

507 
commôãd
 && !
chunk_hooks
->
	`mîge
(
chunk
, 
size
,

508 
	`exã¡_node_addr_gë
(
node
), 
	`exã¡_node_size_gë
“ode), 
Ál£
,

509 
¨ía
->
öd
)) {

515 
	`exã¡_åì_szad_ªmove
(
chunks_szad
, 
node
);

516 
	`¨ía_chunk_ˇche_maybe_ªmove
(
¨ía
, 
node
, 
ˇche
);

517 
	`exã¡_node_addr_£t
(
node
, 
chunk
);

518 
	`exã¡_node_size_£t
(
node
, 
size
 + 
	`exã¡_node_size_gë
(node));

519 
	`exã¡_node_zî€d_£t
(
node
, 
	`exã¡_node_zî€d_gë
(node) &&

520 !
unzî€d
);

521 
	`exã¡_åì_szad_ö£π
(
chunks_szad
, 
node
);

522 
	`¨ía_chunk_ˇche_maybe_ö£π
(
¨ía
, 
node
, 
ˇche
);

525 
node
 = 
	`¨ía_node_Æloc
(
tsdn
, 
¨ía
);

526 i‡(
node
 =
NULL
) {

533 i‡(
ˇche
) {

534 
	`chunk_purge_wøµî
(
tsdn
, 
¨ía
, 
chunk_hooks
,

535 
chunk
, 
size
, 0, size);

537 
œbñ_ªtu∫
;

539 
	`exã¡_node_öô
(
node
, 
¨ía
, 
chunk
, 
size
, !
unzî€d
,

540 
commôãd
);

541 
	`exã¡_åì_ad_ö£π
(
chunks_ad
, 
node
);

542 
	`exã¡_åì_szad_ö£π
(
chunks_szad
, 
node
);

543 
	`¨ía_chunk_ˇche_maybe_ö£π
(
¨ía
, 
node
, 
ˇche
);

547 
¥ev
 = 
	`exã¡_åì_ad_¥ev
(
chunks_ad
, 
node
);

548 i‡(
¥ev
 !
NULL
 && (*)((
uöçå_t
)
	`exã¡_node_addr_gë
(prev) +

549 
	`exã¡_node_size_gë
(
¥ev
)Ë=
chunk
 &&

550 
	`exã¡_node_commôãd_gë
(
¥ev
Ë=
commôãd
 &&

551 !
chunk_hooks
->
	`mîge
(
	`exã¡_node_addr_gë
(
¥ev
),

552 
	`exã¡_node_size_gë
(
¥ev
), 
chunk
, 
size
, 
Ál£
, 
¨ía
->
öd
)) {

558 
	`exã¡_åì_szad_ªmove
(
chunks_szad
, 
¥ev
);

559 
	`exã¡_åì_ad_ªmove
(
chunks_ad
, 
¥ev
);

560 
	`¨ía_chunk_ˇche_maybe_ªmove
(
¨ía
, 
¥ev
, 
ˇche
);

561 
	`exã¡_åì_szad_ªmove
(
chunks_szad
, 
node
);

562 
	`¨ía_chunk_ˇche_maybe_ªmove
(
¨ía
, 
node
, 
ˇche
);

563 
	`exã¡_node_addr_£t
(
node
, 
	`exã¡_node_addr_gë
(
¥ev
));

564 
	`exã¡_node_size_£t
(
node
, 
	`exã¡_node_size_gë
(
¥ev
) +

565 
	`exã¡_node_size_gë
(
node
));

566 
	`exã¡_node_zî€d_£t
(
node
, 
	`exã¡_node_zî€d_gë
(
¥ev
) &&

567 
	`exã¡_node_zî€d_gë
(
node
));

568 
	`exã¡_åì_szad_ö£π
(
chunks_szad
, 
node
);

569 
	`¨ía_chunk_ˇche_maybe_ö£π
(
¨ía
, 
node
, 
ˇche
);

571 
	`¨ía_node_dÆloc
(
tsdn
, 
¨ía
, 
¥ev
);

574 
œbñ_ªtu∫
:

575 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
chunks_mtx
);

576 
	}
}

579 
	$chunk_dÆloc_ˇche
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

580 *
chunk
, 
size_t
 
size
, 
boﬁ
 
commôãd
)

583 
	`as£π
(
chunk
 !
NULL
);

584 
	`as£π
(
	`CHUNK_ADDR2BASE
(
chunk
) == chunk);

585 
	`as£π
(
size
 != 0);

586 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

588 
	`chunk_ªc‹d
(
tsdn
, 
¨ía
, 
chunk_hooks
, &¨ía->
chunks_szad_ˇched
,

589 &
¨ía
->
chunks_ad_ˇched
, 
åue
, 
chunk
, 
size
, 
Ál£
, 
commôãd
);

590 
	`¨ía_maybe_purge
(
tsdn
, 
¨ía
);

591 
	}
}

593 
boﬁ


594 
	$chunk_dÆloc_deÁu…
(*
chunk
, 
size_t
 
size
, 
boﬁ
 
commôãd
,

595 
¨ía_öd
)

598 i‡(!
have_dss
 || !
	`chunk_ö_dss
(
	`tsdn_„tch
(), 
chunk
))

599  (
	`chunk_dÆloc_mm≠
(
chunk
, 
size
));

600  (
åue
);

601 
	}
}

604 
	$chunk_dÆloc_wøµî
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

605 *
chunk
, 
size_t
 
size
, 
boﬁ
 
zî€d
, boﬁ 
commôãd
)

608 
	`as£π
(
chunk
 !
NULL
);

609 
	`as£π
(
	`CHUNK_ADDR2BASE
(
chunk
) == chunk);

610 
	`as£π
(
size
 != 0);

611 
	`as£π
((
size
 & 
chunksize_mask
) == 0);

613 
	`chunk_hooks_assuª_öôülized
(
tsdn
, 
¨ía
, 
chunk_hooks
);

615 i‡(!
chunk_hooks
->
	`dÆloc
(
chunk
, 
size
, 
commôãd
, 
¨ía
->
öd
))

618 i‡(
commôãd
) {

619 
commôãd
 = 
chunk_hooks
->
	`decommô
(
chunk
, 
size
, 0, size,

620 
¨ía
->
öd
);

622 
zî€d
 = !
commôãd
 || !
chunk_hooks
->
	`purge
(
chunk
, 
size
, 0, size,

623 
¨ía
->
öd
);

624 
	`chunk_ªc‹d
(
tsdn
, 
¨ía
, 
chunk_hooks
, &¨ía->
chunks_szad_ªèöed
,

625 &
¨ía
->
chunks_ad_ªèöed
, 
Ál£
, 
chunk
, 
size
, 
zî€d
, 
commôãd
);

627 i‡(
c⁄fig_°©s
)

628 
¨ía
->
°©s
.
ªèöed
 +
size
;

629 
	}
}

631 
boﬁ


632 
	$chunk_commô_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
,

633 
¨ía_öd
)

636  (
	`∑ges_commô
((*)((
uöçå_t
)
chunk
 + (uöçå_t)
off£t
),

637 
Àngth
));

638 
	}
}

640 
boﬁ


641 
	$chunk_decommô_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
,

642 
¨ía_öd
)

645  (
	`∑ges_decommô
((*)((
uöçå_t
)
chunk
 + (uöçå_t)
off£t
),

646 
Àngth
));

647 
	}
}

649 
boﬁ


650 
	$chunk_purge_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
,

651 
¨ía_öd
)

654 
	`as£π
(
chunk
 !
NULL
);

655 
	`as£π
(
	`CHUNK_ADDR2BASE
(
chunk
) == chunk);

656 
	`as£π
((
off£t
 & 
PAGE_MASK
) == 0);

657 
	`as£π
(
Àngth
 != 0);

658 
	`as£π
((
Àngth
 & 
PAGE_MASK
) == 0);

660  (
	`∑ges_purge
((*)((
uöçå_t
)
chunk
 + (uöçå_t)
off£t
),

661 
Àngth
));

662 
	}
}

664 
boﬁ


665 
	$chunk_purge_wøµî
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
chunk_hooks_t
 *
chunk_hooks
,

666 *
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
)

669 
	`chunk_hooks_assuª_öôülized
(
tsdn
, 
¨ía
, 
chunk_hooks
);

670  (
chunk_hooks
->
	`purge
(
chunk
, 
size
, 
off£t
, 
Àngth
, 
¨ía
->
öd
));

671 
	}
}

673 
boﬁ


674 
	$chunk_•lô_deÁu…
(*
chunk
, 
size_t
 
size
, size_à
size_a
, size_à
size_b
,

675 
boﬁ
 
commôãd
, 
¨ía_öd
)

678 i‡(!
m≠s_cﬂÀs˚
)

679  (
åue
);

680  (
Ál£
);

681 
	}
}

683 
boﬁ


684 
	$chunk_mîge_deÁu…
(*
chunk_a
, 
size_t
 
size_a
, *
chunk_b
, size_à
size_b
,

685 
boﬁ
 
commôãd
, 
¨ía_öd
)

688 i‡(!
m≠s_cﬂÀs˚
)

689  (
åue
);

690 i‡(
have_dss
) {

691 
tsdn_t
 *
tsdn
 = 
	`tsdn_„tch
();

692 i‡(
	`chunk_ö_dss
(
tsdn
, 
chunk_a
Ë!chunk_ö_dss—sdn, 
chunk_b
))

693  (
åue
);

696  (
Ál£
);

697 
	}
}

699 
πªe_node_ñm_t
 *

700 
	$chunks_πªe_node_Æloc
(
size_t
 
√lms
)

703  ((
πªe_node_ñm_t
 *)
	`ba£_Æloc
(
	`tsdn_„tch
(), 
√lms
 *

704 (
πªe_node_ñm_t
)));

705 
	}
}

707 
boﬁ


708 
	$chunk_boŸ
()

710 #ifde‡
_WIN32


711 
SYSTEM_INFO
 
öfo
;

712 
	`GëSy°emInfo
(&
öfo
);

718 i‡(
öfo
.
dwPageSize
 & ((1U << 
LG_PAGE
) - 1))

719  (
åue
);

725 i‡(!
›t_lg_chunk
) {

726 
›t_lg_chunk
 = 
	`ffs_u
(()
öfo
.
dwAŒoˇti⁄Gønuœrôy
)

730 i‡(!
›t_lg_chunk
)

731 
›t_lg_chunk
 = 
LG_CHUNK_DEFAULT
;

735 
chunksize
 = (
	`ZU
(1Ë<< 
›t_lg_chunk
);

736 
	`as£π
(
chunksize
 >
PAGE
);

737 
chunksize_mask
 = 
chunksize
 - 1;

738 
chunk_≈ages
 = (
chunksize
 >> 
LG_PAGE
);

740 i‡(
have_dss
 && 
	`chunk_dss_boŸ
())

741  (
åue
);

742 i‡(
	`πªe_√w
(&
chunks_πªe
, ()((
	`ZU
(1Ë<< (
LG_SIZEOF_PTR
+3)) -

743 
›t_lg_chunk
), 
chunks_πªe_node_Æloc
, 
NULL
))

744  (
åue
);

746  (
Ál£
);

747 
	}
}

750 
	$chunk_¥ef‹k
(
tsdn_t
 *
tsdn
)

753 
	`chunk_dss_¥ef‹k
(
tsdn
);

754 
	}
}

757 
	$chunk_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
)

760 
	`chunk_dss_po°f‹k_∑ª¡
(
tsdn
);

761 
	}
}

764 
	$chunk_po°f‹k_chûd
(
tsdn_t
 *
tsdn
)

767 
	`chunk_dss_po°f‹k_chûd
(
tsdn
);

768 
	}
}

	@dep/jemalloc-4.2.0/src/chunk_dss.c

1 
	#JEMALLOC_CHUNK_DSS_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

6 c⁄° *
	gdss_¥ec_«mes
[] = {

14 
dss_¥ec_t
 
	gdss_¥ec_deÁu…
 = 
DSS_PREC_DEFAULT
;

20 
mÆloc_muãx_t
 
	gdss_mtx
;

23 *
	gdss_ba£
;

25 *
	gdss_¥ev
;

27 *
	gdss_max
;

32 
	$chunk_dss_sbrk
(
öçå_t
 
ö¸emít
)

35 #ifde‡
JEMALLOC_DSS


36  (
	`sbrk
(
ö¸emít
));

38 
	`nŸ_im∂emíãd
();

39  (
NULL
);

41 
	}
}

43 
dss_¥ec_t


44 
	$chunk_dss_¥ec_gë
(
tsdn_t
 *
tsdn
)

46 
dss_¥ec_t
 
ªt
;

48 i‡(!
have_dss
)

49  (
dss_¥ec_dißbÀd
);

50 
	`mÆloc_muãx_lock
(
tsdn
, &
dss_mtx
);

51 
ªt
 = 
dss_¥ec_deÁu…
;

52 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
dss_mtx
);

53  (
ªt
);

54 
	}
}

56 
boﬁ


57 
	$chunk_dss_¥ec_£t
(
tsdn_t
 *
tsdn
, 
dss_¥ec_t
 
dss_¥ec
)

60 i‡(!
have_dss
)

61  (
dss_¥ec
 !
dss_¥ec_dißbÀd
);

62 
	`mÆloc_muãx_lock
(
tsdn
, &
dss_mtx
);

63 
dss_¥ec_deÁu…
 = 
dss_¥ec
;

64 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
dss_mtx
);

65  (
Ál£
);

66 
	}
}

69 
	$chunk_Æloc_dss
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, *
√w_addr
, 
size_t
 
size
,

70 
size_t
 
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
)

72 
	`ˇs£π
(
have_dss
);

73 
	`as£π
(
size
 > 0 && (sizê& 
chunksize_mask
) == 0);

74 
	`as£π
(
Æignmít
 > 0 && (Æignmíà& 
chunksize_mask
) == 0);

80 i‡((
öçå_t
)
size
 < 0)

81  (
NULL
);

83 
	`mÆloc_muãx_lock
(
tsdn
, &
dss_mtx
);

84 i‡(
dss_¥ev
 != (*)-1) {

92 *
ªt
, *
˝ad
, *
dss_√xt
;

93 
size_t
 
g≠_size
, 
˝ad_size
;

94 
öçå_t
 
ö¸
;

96 i‡(
√w_addr
 !
NULL
 && 
dss_max
 !=Çew_addr)

100 
dss_max
 = 
	`chunk_dss_sbrk
(0);

103 i‡(
√w_addr
 !
NULL
 && 
dss_max
 !=Çew_addr)

110 
g≠_size
 = (
chunksize
 - 
	`CHUNK_ADDR2OFFSET
(
dss_max
)) &

111 
chunksize_mask
;

117 
˝ad
 = (*)((
uöçå_t
)
dss_max
 + 
g≠_size
);

118 
ªt
 = (*)
	`ALIGNMENT_CEILING
((
uöçå_t
)
dss_max
,

119 
Æignmít
);

120 
˝ad_size
 = (
uöçå_t
)
ªt
 - (uöçå_t)
˝ad
;

121 
dss_√xt
 = (*)((
uöçå_t
)
ªt
 + 
size
);

122 i‡((
uöçå_t
)
ªt
 < (uöçå_t)
dss_max
 ||

123 (
uöçå_t
)
dss_√xt
 < (uöçå_t)
dss_max
) {

125 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
dss_mtx
);

126  (
NULL
);

128 
ö¸
 = 
g≠_size
 + 
˝ad_size
 + 
size
;

129 
dss_¥ev
 = 
	`chunk_dss_sbrk
(
ö¸
);

130 i‡(
dss_¥ev
 =
dss_max
) {

132 
dss_max
 = 
dss_√xt
;

133 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
dss_mtx
);

134 i‡(
˝ad_size
 != 0) {

135 
chunk_hooks_t
 
chunk_hooks
 =

136 
CHUNK_HOOKS_INITIALIZER
;

137 
	`chunk_dÆloc_wøµî
(
tsdn
, 
¨ía
,

138 &
chunk_hooks
, 
˝ad
, 
˝ad_size
,

139 
Ál£
, 
åue
);

141 i‡(*
zîo
) {

142 
	`JEMALLOC_VALGRIND_MAKE_MEM_UNDEFINED
(

143 
ªt
, 
size
);

144 
	`mem£t
(
ªt
, 0, 
size
);

146 i‡(!*
commô
)

147 *
commô
 = 
	`∑ges_decommô
(
ªt
, 
size
);

148  (
ªt
);

150 } 
dss_¥ev
 != (*)-1);

152 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
dss_mtx
);

154  (
NULL
);

155 
	}
}

157 
boﬁ


158 
	$chunk_ö_dss
(
tsdn_t
 *
tsdn
, *
chunk
)

160 
boﬁ
 
ªt
;

162 
	`ˇs£π
(
have_dss
);

164 
	`mÆloc_muãx_lock
(
tsdn
, &
dss_mtx
);

165 i‡((
uöçå_t
)
chunk
 >(uöçå_t)
dss_ba£


166 && (
uöçå_t
)
chunk
 < (uöçå_t)
dss_max
)

167 
ªt
 = 
åue
;

169 
ªt
 = 
Ál£
;

170 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
dss_mtx
);

172  (
ªt
);

173 
	}
}

175 
boﬁ


176 
	$chunk_dss_boŸ
()

179 
	`ˇs£π
(
have_dss
);

181 i‡(
	`mÆloc_muãx_öô
(&
dss_mtx
, "dss", 
WITNESS_RANK_DSS
))

182  (
åue
);

183 
dss_ba£
 = 
	`chunk_dss_sbrk
(0);

184 
dss_¥ev
 = 
dss_ba£
;

185 
dss_max
 = 
dss_ba£
;

187  (
Ál£
);

188 
	}
}

191 
	$chunk_dss_¥ef‹k
(
tsdn_t
 *
tsdn
)

194 i‡(
have_dss
)

195 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
dss_mtx
);

196 
	}
}

199 
	$chunk_dss_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
)

202 i‡(
have_dss
)

203 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
dss_mtx
);

204 
	}
}

207 
	$chunk_dss_po°f‹k_chûd
(
tsdn_t
 *
tsdn
)

210 i‡(
have_dss
)

211 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
dss_mtx
);

212 
	}
}

	@dep/jemalloc-4.2.0/src/chunk_mmap.c

1 
	#JEMALLOC_CHUNK_MMAP_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

7 
	$chunk_Æloc_mm≠_¶ow
(
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
, boﬁ *
commô
)

9 *
ªt
;

10 
size_t
 
Æloc_size
;

12 
Æloc_size
 = 
size
 + 
Æignmít
;

14 i‡(
Æloc_size
 < 
size
)

15  (
NULL
);

17 *
∑ges
;

18 
size_t
 
Àadsize
;

19 
∑ges
 = 
	`∑ges_m≠
(
NULL
, 
Æloc_size
, 
commô
);

20 i‡(
∑ges
 =
NULL
)

21  (
NULL
);

22 
Àadsize
 = 
	`ALIGNMENT_CEILING
((
uöçå_t
)
∑ges
, 
Æignmít
) -

23 (
uöçå_t
)
∑ges
;

24 
ªt
 = 
	`∑ges_åim
(
∑ges
, 
Æloc_size
, 
Àadsize
, 
size
, 
commô
);

25 } 
ªt
 =
NULL
);

27 
	`as£π
(
ªt
 !
NULL
);

28 *
zîo
 = 
åue
;

29  (
ªt
);

30 
	}
}

33 
	$chunk_Æloc_mm≠
(*
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
,

34 
boﬁ
 *
commô
)

36 *
ªt
;

37 
size_t
 
off£t
;

52 
	`as£π
(
Æignmít
 != 0);

53 
	`as£π
((
Æignmít
 & 
chunksize_mask
) == 0);

55 
ªt
 = 
	`∑ges_m≠
(
√w_addr
, 
size
, 
commô
);

56 i‡(
ªt
 =
NULL
 ||Ñë =
√w_addr
)

57  (
ªt
);

58 
	`as£π
(
√w_addr
 =
NULL
);

59 
off£t
 = 
	`ALIGNMENT_ADDR2OFFSET
(
ªt
, 
Æignmít
);

60 i‡(
off£t
 != 0) {

61 
	`∑ges_unm≠
(
ªt
, 
size
);

62  (
	`chunk_Æloc_mm≠_¶ow
(
size
, 
Æignmít
, 
zîo
, 
commô
));

65 
	`as£π
(
ªt
 !
NULL
);

66 *
zîo
 = 
åue
;

67  (
ªt
);

68 
	}
}

70 
boﬁ


71 
	$chunk_dÆloc_mm≠
(*
chunk
, 
size_t
 
size
)

74 i‡(
c⁄fig_munm≠
)

75 
	`∑ges_unm≠
(
chunk
, 
size
);

77  (!
c⁄fig_munm≠
);

78 
	}
}

	@dep/jemalloc-4.2.0/src/ckh.c

37 
	#JEMALLOC_CKH_C_


	)

38 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

43 
boﬁ
 
ckh_grow
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
);

44 
ckh_shrök
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
);

52 
JEMALLOC_INLINE_C
 
size_t


53 
	$ckh_buckë_£¨ch
(
ckh_t
 *
ckh
, 
size_t
 
buckë
, c⁄° *
key
)

55 
ckhc_t
 *
˚Œ
;

56 
i
;

58 
i
 = 0; i < (
	`ZU
(1Ë<< 
LG_CKH_BUCKET_CELLS
); i++) {

59 
˚Œ
 = &
ckh
->
èb
[(
buckë
 << 
LG_CKH_BUCKET_CELLS
Ë+ 
i
];

60 i‡(
˚Œ
->
key
 !
NULL
 && 
ckh
->
	`keycomp
(key, cell->key))

61  ((
buckë
 << 
LG_CKH_BUCKET_CELLS
Ë+ 
i
);

64  (
SIZE_T_MAX
);

65 
	}
}

70 
JEMALLOC_INLINE_C
 
size_t


71 
	$ckh_i£¨ch
(
ckh_t
 *
ckh
, c⁄° *
key
)

73 
size_t
 
hashes
[2], 
buckë
, 
˚Œ
;

75 
	`as£π
(
ckh
 !
NULL
);

77 
ckh
->
	`hash
(
key
, 
hashes
);

80 
buckë
 = 
hashes
[0] & ((
	`ZU
(1Ë<< 
ckh
->
lg_curbuckës
) - 1);

81 
˚Œ
 = 
	`ckh_buckë_£¨ch
(
ckh
, 
buckë
, 
key
);

82 i‡(
˚Œ
 !
SIZE_T_MAX
)

83  (
˚Œ
);

86 
buckë
 = 
hashes
[1] & ((
	`ZU
(1Ë<< 
ckh
->
lg_curbuckës
) - 1);

87 
˚Œ
 = 
	`ckh_buckë_£¨ch
(
ckh
, 
buckë
, 
key
);

88  (
˚Œ
);

89 
	}
}

91 
JEMALLOC_INLINE_C
 
boﬁ


92 
	$ckh_åy_buckë_ö£π
(
ckh_t
 *
ckh
, 
size_t
 
buckë
, c⁄° *
key
,

93 c⁄° *
d©a
)

95 
ckhc_t
 *
˚Œ
;

96 
off£t
, 
i
;

102 
off£t
 = ()
	`¥ng_lg_ønge
(&
ckh
->
¥ng_°©e
, 
LG_CKH_BUCKET_CELLS
);

103 
i
 = 0; i < (
	`ZU
(1Ë<< 
LG_CKH_BUCKET_CELLS
); i++) {

104 
˚Œ
 = &
ckh
->
èb
[(
buckë
 << 
LG_CKH_BUCKET_CELLS
) +

105 ((
i
 + 
off£t
Ë& ((
	`ZU
(1Ë<< 
LG_CKH_BUCKET_CELLS
) - 1))];

106 i‡(
˚Œ
->
key
 =
NULL
) {

107 
˚Œ
->
key
 = key;

108 
˚Œ
->
d©a
 = data;

109 
ckh
->
cou¡
++;

110  (
Ál£
);

114  (
åue
);

115 
	}
}

123 
JEMALLOC_INLINE_C
 
boﬁ


124 
	$ckh_evi˘_ªloc_ö£π
(
ckh_t
 *
ckh
, 
size_t
 
¨gbuckë
, c⁄° **
¨gkey
,

125 c⁄° **
¨gd©a
)

127 c⁄° *
key
, *
d©a
, *
tkey
, *
td©a
;

128 
ckhc_t
 *
˚Œ
;

129 
size_t
 
hashes
[2], 
buckë
, 
tbuckë
;

130 
i
;

132 
buckë
 = 
¨gbuckë
;

133 
key
 = *
¨gkey
;

134 
d©a
 = *
¨gd©a
;

135 
åue
) {

144 
i
 = ()
	`¥ng_lg_ønge
(&
ckh
->
¥ng_°©e
,

145 
LG_CKH_BUCKET_CELLS
);

146 
˚Œ
 = &
ckh
->
èb
[(
buckë
 << 
LG_CKH_BUCKET_CELLS
Ë+ 
i
];

147 
	`as£π
(
˚Œ
->
key
 !
NULL
);

150 
tkey
 = 
˚Œ
->
key
; 
td©a
 = cñl->
d©a
;

151 
˚Œ
->
key
 = key; cñl->
d©a
 = data;

152 
key
 = 
tkey
; 
d©a
 = 
td©a
;

154 #ifde‡
CKH_COUNT


155 
ckh
->
ƒñocs
++;

159 
ckh
->
	`hash
(
key
, 
hashes
);

160 
tbuckë
 = 
hashes
[1] & ((
	`ZU
(1Ë<< 
ckh
->
lg_curbuckës
) - 1);

161 i‡(
tbuckë
 =
buckë
) {

162 
tbuckë
 = 
hashes
[0] & ((
	`ZU
(1Ë<< 
ckh
->
lg_curbuckës
)

182 i‡(
tbuckë
 =
¨gbuckë
) {

183 *
¨gkey
 = 
key
;

184 *
¨gd©a
 = 
d©a
;

185  (
åue
);

188 
buckë
 = 
tbuckë
;

189 i‡(!
	`ckh_åy_buckë_ö£π
(
ckh
, 
buckë
, 
key
, 
d©a
))

190  (
Ál£
);

192 
	}
}

194 
JEMALLOC_INLINE_C
 
boﬁ


195 
	$ckh_åy_ö£π
(
ckh_t
 *
ckh
, c⁄°**
¨gkey
, c⁄°**
¨gd©a
)

197 
size_t
 
hashes
[2], 
buckë
;

198 c⁄° *
key
 = *
¨gkey
;

199 c⁄° *
d©a
 = *
¨gd©a
;

201 
ckh
->
	`hash
(
key
, 
hashes
);

204 
buckë
 = 
hashes
[0] & ((
	`ZU
(1Ë<< 
ckh
->
lg_curbuckës
) - 1);

205 i‡(!
	`ckh_åy_buckë_ö£π
(
ckh
, 
buckë
, 
key
, 
d©a
))

206  (
Ál£
);

209 
buckë
 = 
hashes
[1] & ((
	`ZU
(1Ë<< 
ckh
->
lg_curbuckës
) - 1);

210 i‡(!
	`ckh_åy_buckë_ö£π
(
ckh
, 
buckë
, 
key
, 
d©a
))

211  (
Ál£
);

216  (
	`ckh_evi˘_ªloc_ö£π
(
ckh
, 
buckë
, 
¨gkey
, 
¨gd©a
));

217 
	}
}

223 
JEMALLOC_INLINE_C
 
boﬁ


224 
	$ckh_ªbuûd
(
ckh_t
 *
ckh
, 
ckhc_t
 *
aTab
)

226 
size_t
 
cou¡
, 
i
, 
nös
;

227 c⁄° *
key
, *
d©a
;

229 
cou¡
 = 
ckh
->count;

230 
ckh
->
cou¡
 = 0;

231 
i
 = 
nös
 = 0;Çö†< 
cou¡
; i++) {

232 i‡(
aTab
[
i
].
key
 !
NULL
) {

233 
key
 = 
aTab
[
i
].key;

234 
d©a
 = 
aTab
[
i
].data;

235 i‡(
	`ckh_åy_ö£π
(
ckh
, &
key
, &
d©a
)) {

236 
ckh
->
cou¡
 = count;

237  (
åue
);

239 
nös
++;

243  (
Ál£
);

244 
	}
}

246 
boﬁ


247 
	$ckh_grow
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
)

249 
boﬁ
 
ªt
;

250 
ckhc_t
 *
èb
, *
âab
;

251 
lg_¥evbuckës
, 
lg_cur˚Œs
;

253 #ifde‡
CKH_COUNT


254 
ckh
->
ngrows
++;

262 
lg_¥evbuckës
 = 
ckh
->
lg_curbuckës
;

263 
lg_cur˚Œs
 = 
ckh
->
lg_curbuckës
 + 
LG_CKH_BUCKET_CELLS
;

264 
åue
) {

265 
size_t
 
usize
;

267 
lg_cur˚Œs
++;

268 
usize
 = 
	`ß2u
((
ckhc_t
Ë<< 
lg_cur˚Œs
, 
CACHELINE
);

269 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
)) {

270 
ªt
 = 
åue
;

271 
œbñ_ªtu∫
;

273 
èb
 = (
ckhc_t
 *)
	`ùÆlocztm
(
tsdn
, 
usize
, 
CACHELINE
, 
åue
, 
NULL
,

274 
åue
, 
	`¨ía_ichoo£
(
tsdn
, 
NULL
));

275 i‡(
èb
 =
NULL
) {

276 
ªt
 = 
åue
;

277 
œbñ_ªtu∫
;

280 
âab
 = 
ckh
->
èb
;

281 
ckh
->
èb
 =Åab;

282 
èb
 = 
âab
;

283 
ckh
->
lg_curbuckës
 = 
lg_cur˚Œs
 - 
LG_CKH_BUCKET_CELLS
;

285 i‡(!
	`ckh_ªbuûd
(
ckh
, 
èb
)) {

286 
	`idÆlo˘m
(
tsdn
, 
èb
, 
NULL
, 
åue
,Årue);

291 
	`idÆlo˘m
(
tsdn
, 
ckh
->
èb
, 
NULL
, 
åue
,Årue);

292 
ckh
->
èb
 =Åab;

293 
ckh
->
lg_curbuckës
 = 
lg_¥evbuckës
;

296 
ªt
 = 
Ál£
;

297 
œbñ_ªtu∫
:

298  (
ªt
);

299 
	}
}

302 
	$ckh_shrök
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
)

304 
ckhc_t
 *
èb
, *
âab
;

305 
size_t
 
usize
;

306 
lg_¥evbuckës
, 
lg_cur˚Œs
;

312 
lg_¥evbuckës
 = 
ckh
->
lg_curbuckës
;

313 
lg_cur˚Œs
 = 
ckh
->
lg_curbuckës
 + 
LG_CKH_BUCKET_CELLS
 - 1;

314 
usize
 = 
	`ß2u
((
ckhc_t
Ë<< 
lg_cur˚Œs
, 
CACHELINE
);

315 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
))

317 
èb
 = (
ckhc_t
 *)
	`ùÆlocztm
(
tsdn
, 
usize
, 
CACHELINE
, 
åue
, 
NULL
,Årue,

318 
	`¨ía_ichoo£
(
tsdn
, 
NULL
));

319 i‡(
èb
 =
NULL
) {

327 
âab
 = 
ckh
->
èb
;

328 
ckh
->
èb
 =Åab;

329 
èb
 = 
âab
;

330 
ckh
->
lg_curbuckës
 = 
lg_cur˚Œs
 - 
LG_CKH_BUCKET_CELLS
;

332 i‡(!
	`ckh_ªbuûd
(
ckh
, 
èb
)) {

333 
	`idÆlo˘m
(
tsdn
, 
èb
, 
NULL
, 
åue
,Årue);

334 #ifde‡
CKH_COUNT


335 
ckh
->
nshröks
++;

341 
	`idÆlo˘m
(
tsdn
, 
ckh
->
èb
, 
NULL
, 
åue
,Årue);

342 
ckh
->
èb
 =Åab;

343 
ckh
->
lg_curbuckës
 = 
lg_¥evbuckës
;

344 #ifde‡
CKH_COUNT


345 
ckh
->
nshrökÁûs
++;

347 
	}
}

349 
boﬁ


350 
	$ckh_√w
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
, 
size_t
 
möôems
, 
ckh_hash_t
 *
hash
,

351 
ckh_keycomp_t
 *
keycomp
)

353 
boﬁ
 
ªt
;

354 
size_t
 
mö˚Œs
, 
usize
;

355 
lg_mö˚Œs
;

357 
	`as£π
(
möôems
 > 0);

358 
	`as£π
(
hash
 !
NULL
);

359 
	`as£π
(
keycomp
 !
NULL
);

361 #ifde‡
CKH_COUNT


362 
ckh
->
ngrows
 = 0;

363 
ckh
->
nshröks
 = 0;

364 
ckh
->
nshrökÁûs
 = 0;

365 
ckh
->
nö£πs
 = 0;

366 
ckh
->
ƒñocs
 = 0;

368 
ckh
->
¥ng_°©e
 = 42;

369 
ckh
->
cou¡
 = 0;

378 
	`as£π
(
LG_CKH_BUCKET_CELLS
 > 0);

379 
mö˚Œs
 = ((
möôems
 + (3 - (minitems % 3))) / 3) << 2;

380 
lg_mö˚Œs
 = 
LG_CKH_BUCKET_CELLS
;

381 (
	`ZU
(1Ë<< 
lg_mö˚Œs
Ë< 
mö˚Œs
;

382 
lg_mö˚Œs
++)

384 
ckh
->
lg_möbuckës
 = 
lg_mö˚Œs
 - 
LG_CKH_BUCKET_CELLS
;

385 
ckh
->
lg_curbuckës
 = 
lg_mö˚Œs
 - 
LG_CKH_BUCKET_CELLS
;

386 
ckh
->
hash
 = hash;

387 
ckh
->
keycomp
 = keycomp;

389 
usize
 = 
	`ß2u
((
ckhc_t
Ë<< 
lg_mö˚Œs
, 
CACHELINE
);

390 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
)) {

391 
ªt
 = 
åue
;

392 
œbñ_ªtu∫
;

394 
ckh
->
èb
 = (
ckhc_t
 *)
	`ùÆlocztm
(
tsdn
, 
usize
, 
CACHELINE
, 
åue
, 
NULL
,

395 
åue
, 
	`¨ía_ichoo£
(
tsdn
, 
NULL
));

396 i‡(
ckh
->
èb
 =
NULL
) {

397 
ªt
 = 
åue
;

398 
œbñ_ªtu∫
;

401 
ªt
 = 
Ál£
;

402 
œbñ_ªtu∫
:

403  (
ªt
);

404 
	}
}

407 
	$ckh_dñëe
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
)

410 
	`as£π
(
ckh
 !
NULL
);

412 #ifde‡
CKH_VERBOSE


413 
	`mÆloc_¥ötf
(

414 "%s(%p):Çgrows: %"
FMTu64
",Çshrinks: %"FMTu64","

415 "ÇshrökÁûs: %"
FMTu64
",Çinserts: %"FMTu64","

416 "Çªlocs: %"
FMTu64
"\n", 
__func__
, 
ckh
,

417 ()
ckh
->
ngrows
,

418 ()
ckh
->
nshröks
,

419 ()
ckh
->
nshrökÁûs
,

420 ()
ckh
->
nö£πs
,

421 ()
ckh
->
ƒñocs
);

424 
	`idÆlo˘m
(
tsdn
, 
ckh
->
èb
, 
NULL
, 
åue
,Årue);

425 i‡(
c⁄fig_debug
)

426 
	`mem£t
(
ckh
, 
JEMALLOC_FREE_JUNK
, (
ckh_t
));

427 
	}
}

429 
size_t


430 
	$ckh_cou¡
(
ckh_t
 *
ckh
)

433 
	`as£π
(
ckh
 !
NULL
);

435  (
ckh
->
cou¡
);

436 
	}
}

438 
boﬁ


439 
	$ckh_ôî
(
ckh_t
 *
ckh
, 
size_t
 *
èböd
, **
key
, **
d©a
)

441 
size_t
 
i
, 
n˚Œs
;

443 
i
 = *
èböd
, 
n˚Œs
 = (
	`ZU
(1Ë<< (
ckh
->
lg_curbuckës
 +

444 
LG_CKH_BUCKET_CELLS
)); 
i
 < 
n˚Œs
; i++) {

445 i‡(
ckh
->
èb
[
i
].
key
 !
NULL
) {

446 i‡(
key
 !
NULL
)

447 *
key
 = (*)
ckh
->
èb
[
i
].key;

448 i‡(
d©a
 !
NULL
)

449 *
d©a
 = (*)
ckh
->
èb
[
i
].data;

450 *
èböd
 = 
i
 + 1;

451  (
Ál£
);

455  (
åue
);

456 
	}
}

458 
boﬁ


459 
	$ckh_ö£π
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
, c⁄° *
key
, c⁄° *
d©a
)

461 
boﬁ
 
ªt
;

463 
	`as£π
(
ckh
 !
NULL
);

464 
	`as£π
(
	`ckh_£¨ch
(
ckh
, 
key
, 
NULL
, NULL));

466 #ifde‡
CKH_COUNT


467 
ckh
->
nö£πs
++;

470 
	`ckh_åy_ö£π
(
ckh
, &
key
, &
d©a
)) {

471 i‡(
	`ckh_grow
(
tsdn
, 
ckh
)) {

472 
ªt
 = 
åue
;

473 
œbñ_ªtu∫
;

477 
ªt
 = 
Ál£
;

478 
œbñ_ªtu∫
:

479  (
ªt
);

480 
	}
}

482 
boﬁ


483 
	$ckh_ªmove
(
tsdn_t
 *
tsdn
, 
ckh_t
 *
ckh
, c⁄° *
£¨chkey
, **
key
,

484 **
d©a
)

486 
size_t
 
˚Œ
;

488 
	`as£π
(
ckh
 !
NULL
);

490 
˚Œ
 = 
	`ckh_i£¨ch
(
ckh
, 
£¨chkey
);

491 i‡(
˚Œ
 !
SIZE_T_MAX
) {

492 i‡(
key
 !
NULL
)

493 *
key
 = (*)
ckh
->
èb
[
˚Œ
].key;

494 i‡(
d©a
 !
NULL
)

495 *
d©a
 = (*)
ckh
->
èb
[
˚Œ
].data;

496 
ckh
->
èb
[
˚Œ
].
key
 = 
NULL
;

497 
ckh
->
èb
[
˚Œ
].
d©a
 = 
NULL
;

499 
ckh
->
cou¡
--;

501 i‡(
ckh
->
cou¡
 < (
	`ZU
(1Ë<< (ckh->
lg_curbuckës


502 + 
LG_CKH_BUCKET_CELLS
 - 2)Ë&& 
ckh
->
lg_curbuckës


503 > 
ckh
->
lg_möbuckës
) {

505 
	`ckh_shrök
(
tsdn
, 
ckh
);

508  (
Ál£
);

511  (
åue
);

512 
	}
}

514 
boﬁ


515 
	$ckh_£¨ch
(
ckh_t
 *
ckh
, c⁄° *
£¨chkey
, **
key
, **
d©a
)

517 
size_t
 
˚Œ
;

519 
	`as£π
(
ckh
 !
NULL
);

521 
˚Œ
 = 
	`ckh_i£¨ch
(
ckh
, 
£¨chkey
);

522 i‡(
˚Œ
 !
SIZE_T_MAX
) {

523 i‡(
key
 !
NULL
)

524 *
key
 = (*)
ckh
->
èb
[
˚Œ
].key;

525 i‡(
d©a
 !
NULL
)

526 *
d©a
 = (*)
ckh
->
èb
[
˚Œ
].data;

527  (
Ál£
);

530  (
åue
);

531 
	}
}

534 
	$ckh_°rög_hash
(c⁄° *
key
, 
size_t
 
r_hash
[2])

537 
	`hash
(
key
, 
	`°æí
((c⁄° *)key), 0x94122f33U, 
r_hash
);

538 
	}
}

540 
boﬁ


541 
	$ckh_°rög_keycomp
(c⁄° *
k1
, c⁄° *
k2
)

544 
	`as£π
(
k1
 !
NULL
);

545 
	`as£π
(
k2
 !
NULL
);

547  (
	`°rcmp
((*)
k1
, (*)
k2
Ë? 
Ál£
 : 
åue
);

548 
	}
}

551 
	$ckh_poöãr_hash
(c⁄° *
key
, 
size_t
 
r_hash
[2])

554 c⁄° *
v
;

555 
size_t
 
i
;

556 } 
u
;

558 
	`as£π
((
u
.
v
Ë=(u.
i
));

559 
u
.
v
 = 
key
;

560 
	`hash
(&
u
.
i
, (u.i), 0xd983396eU, 
r_hash
);

561 
	}
}

563 
boﬁ


564 
	$ckh_poöãr_keycomp
(c⁄° *
k1
, c⁄° *
k2
)

567  ((
k1
 =
k2
Ë? 
åue
 : 
Ál£
);

568 
	}
}

	@dep/jemalloc-4.2.0/src/ctl.c

1 
	#JEMALLOC_CTL_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

11 
mÆloc_muãx_t
 
	g˘l_mtx
;

12 
boﬁ
 
	g˘l_öôülized
;

13 
uöt64_t
 
	g˘l_ïoch
;

14 
˘l_°©s_t
 
	g˘l_°©s
;

19 
JEMALLOC_INLINE_C
 c⁄° 
˘l_«med_node_t
 *

20 
	$˘l_«med_node
(c⁄° 
˘l_node_t
 *
node
)

23  ((
node
->
«med
Ë? (c⁄° 
˘l_«med_node_t
 *Íodê: 
NULL
);

24 
	}
}

26 
JEMALLOC_INLINE_C
 c⁄° 
˘l_«med_node_t
 *

27 
	$˘l_«med_chûdªn
(c⁄° 
˘l_«med_node_t
 *
node
, 
size_t
 
ödex
)

29 c⁄° 
˘l_«med_node_t
 *
chûdªn
 = 
	`˘l_«med_node
(
node
->children);

31  (
chûdªn
 ? &chûdªn[
ödex
] : 
NULL
);

32 
	}
}

34 
JEMALLOC_INLINE_C
 c⁄° 
˘l_ödexed_node_t
 *

35 
	$˘l_ödexed_node
(c⁄° 
˘l_node_t
 *
node
)

38  (!
node
->
«med
 ? (c⁄° 
˘l_ödexed_node_t
 *Íodê: 
NULL
);

39 
	}
}

44 
	#CTL_PROTO
(
n
) \

45 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, \

46 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
);

	)

48 
	#INDEX_PROTO
(
n
) \

49 c⁄° 
˘l_«med_node_t
 *
n
##
	`_ödex
(
tsdn_t
 *
tsdn
, \

50 c⁄° 
size_t
 *
mib
, size_à
mibÀn
, size_à
i
);

	)

52 
boﬁ
 
˘l_¨ía_öô
(
˘l_¨ía_°©s_t
 *
a°©s
);

53 
˘l_¨ía_˛ór
(
˘l_¨ía_°©s_t
 *
a°©s
);

54 
˘l_¨ía_°©s_amîge
(
tsdn_t
 *
tsdn
, 
˘l_¨ía_°©s_t
 *
c°©s
,

55 
¨ía_t
 *
¨ía
);

56 
˘l_¨ía_°©s_smîge
(
˘l_¨ía_°©s_t
 *
s°©s
,

57 
˘l_¨ía_°©s_t
 *
a°©s
);

58 
˘l_¨ía_ª‰esh
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
i
);

59 
boﬁ
 
˘l_grow
(
tsdn_t
 *
tsdn
);

60 
˘l_ª‰esh
(
tsdn_t
 *
tsdn
);

61 
boﬁ
 
˘l_öô
(
tsdn_t
 *
tsdn
);

62 
˘l_lookup
(
tsdn_t
 *
tsdn
, c⁄° *
«me
,

63 
˘l_node_t
 c⁄° **
node•
, 
size_t
 *
mibp
, size_à*
dïthp
);

65 
	$CTL_PROTO
(
vîsi⁄
)

66 
	$CTL_PROTO
(
ïoch
)

67 
	$CTL_PROTO
(
thªad_tˇche_íabÀd
)

68 
	$CTL_PROTO
(
thªad_tˇche_Êush
)

69 
	$CTL_PROTO
(
thªad_¥of_«me
)

70 
	$CTL_PROTO
(
thªad_¥of_a˘ive
)

71 
	$CTL_PROTO
(
thªad_¨ía
)

72 
	$CTL_PROTO
(
thªad_Æloˇãd
)

73 
	$CTL_PROTO
(
thªad_Æloˇãdp
)

74 
	$CTL_PROTO
(
thªad_dóŒoˇãd
)

75 
	$CTL_PROTO
(
thªad_dóŒoˇãdp
)

76 
	$CTL_PROTO
(
c⁄fig_ˇche_oblivious
)

77 
	$CTL_PROTO
(
c⁄fig_debug
)

78 
	$CTL_PROTO
(
c⁄fig_fûl
)

79 
	$CTL_PROTO
(
c⁄fig_œzy_lock
)

80 
	$CTL_PROTO
(
c⁄fig_mÆloc_c⁄f
)

81 
	$CTL_PROTO
(
c⁄fig_munm≠
)

82 
	$CTL_PROTO
(
c⁄fig_¥of
)

83 
	$CTL_PROTO
(
c⁄fig_¥of_libgcc
)

84 
	$CTL_PROTO
(
c⁄fig_¥of_libunwöd
)

85 
	$CTL_PROTO
(
c⁄fig_°©s
)

86 
	$CTL_PROTO
(
c⁄fig_tˇche
)

87 
	$CTL_PROTO
(
c⁄fig_és
)

88 
	$CTL_PROTO
(
c⁄fig_uåa˚
)

89 
	$CTL_PROTO
(
c⁄fig_vÆgröd
)

90 
	$CTL_PROTO
(
c⁄fig_xmÆloc
)

91 
	$CTL_PROTO
(
›t_ab‹t
)

92 
	$CTL_PROTO
(
›t_dss
)

93 
	$CTL_PROTO
(
›t_lg_chunk
)

94 
	$CTL_PROTO
(
›t_«ª«s
)

95 
	$CTL_PROTO
(
›t_purge
)

96 
	$CTL_PROTO
(
›t_lg_dúty_mu…
)

97 
	$CTL_PROTO
(
›t_deˇy_time
)

98 
	$CTL_PROTO
(
›t_°©s_¥öt
)

99 
	$CTL_PROTO
(
›t_junk
)

100 
	$CTL_PROTO
(
›t_zîo
)

101 
	$CTL_PROTO
(
›t_qu¨™töe
)

102 
	$CTL_PROTO
(
›t_ªdz⁄e
)

103 
	$CTL_PROTO
(
›t_uåa˚
)

104 
	$CTL_PROTO
(
›t_xmÆloc
)

105 
	$CTL_PROTO
(
›t_tˇche
)

106 
	$CTL_PROTO
(
›t_lg_tˇche_max
)

107 
	$CTL_PROTO
(
›t_¥of
)

108 
	$CTL_PROTO
(
›t_¥of_¥efix
)

109 
	$CTL_PROTO
(
›t_¥of_a˘ive
)

110 
	$CTL_PROTO
(
›t_¥of_thªad_a˘ive_öô
)

111 
	$CTL_PROTO
(
›t_lg_¥of_ßm∂e
)

112 
	$CTL_PROTO
(
›t_lg_¥of_öãrvÆ
)

113 
	$CTL_PROTO
(
›t_¥of_gdump
)

114 
	$CTL_PROTO
(
›t_¥of_föÆ
)

115 
	$CTL_PROTO
(
›t_¥of_Àak
)

116 
	$CTL_PROTO
(
›t_¥of_accum
)

117 
	$CTL_PROTO
(
tˇche_¸óã
)

118 
	$CTL_PROTO
(
tˇche_Êush
)

119 
	$CTL_PROTO
(
tˇche_de°roy
)

120 
	`¨ía_i_purge
(
tsdn_t
 *
tsdn
, 
¨ía_öd
, 
boﬁ
 
Æl
);

121 
	$CTL_PROTO
(
¨ía_i_purge
)

122 
	$CTL_PROTO
(
¨ía_i_deˇy
)

123 
	$CTL_PROTO
(
¨ía_i_ª£t
)

124 
	$CTL_PROTO
(
¨ía_i_dss
)

125 
	$CTL_PROTO
(
¨ía_i_lg_dúty_mu…
)

126 
	$CTL_PROTO
(
¨ía_i_deˇy_time
)

127 
	$CTL_PROTO
(
¨ía_i_chunk_hooks
)

128 
	$INDEX_PROTO
(
¨ía_i
)

129 
	$CTL_PROTO
(
¨ías_bö_i_size
)

130 
	$CTL_PROTO
(
¨ías_bö_i_ƒegs
)

131 
	$CTL_PROTO
(
¨ías_bö_i_run_size
)

132 
	$INDEX_PROTO
(
¨ías_bö_i
)

133 
	$CTL_PROTO
(
¨ías_Ãun_i_size
)

134 
	$INDEX_PROTO
(
¨ías_Ãun_i
)

135 
	$CTL_PROTO
(
¨ías_hchunk_i_size
)

136 
	$INDEX_PROTO
(
¨ías_hchunk_i
)

137 
	$CTL_PROTO
(
¨ías_«ª«s
)

138 
	$CTL_PROTO
(
¨ías_öôülized
)

139 
	$CTL_PROTO
(
¨ías_lg_dúty_mu…
)

140 
	$CTL_PROTO
(
¨ías_deˇy_time
)

141 
	$CTL_PROTO
(
¨ías_qu™tum
)

142 
	$CTL_PROTO
(
¨ías_∑ge
)

143 
	$CTL_PROTO
(
¨ías_tˇche_max
)

144 
	$CTL_PROTO
(
¨ías_nbös
)

145 
	$CTL_PROTO
(
¨ías_nhbös
)

146 
	$CTL_PROTO
(
¨ías_∆runs
)

147 
	$CTL_PROTO
(
¨ías_nhchunks
)

148 
	$CTL_PROTO
(
¨ías_exãnd
)

149 
	$CTL_PROTO
(
¥of_thªad_a˘ive_öô
)

150 
	$CTL_PROTO
(
¥of_a˘ive
)

151 
	$CTL_PROTO
(
¥of_dump
)

152 
	$CTL_PROTO
(
¥of_gdump
)

153 
	$CTL_PROTO
(
¥of_ª£t
)

154 
	$CTL_PROTO
(
¥of_öãrvÆ
)

155 
	$CTL_PROTO
(
lg_¥of_ßm∂e
)

156 
	$CTL_PROTO
(
°©s_¨ías_i_smÆl_Æloˇãd
)

157 
	$CTL_PROTO
(
°©s_¨ías_i_smÆl_nmÆloc
)

158 
	$CTL_PROTO
(
°©s_¨ías_i_smÆl_ndÆloc
)

159 
	$CTL_PROTO
(
°©s_¨ías_i_smÆl_ƒeque°s
)

160 
	$CTL_PROTO
(
°©s_¨ías_i_œrge_Æloˇãd
)

161 
	$CTL_PROTO
(
°©s_¨ías_i_œrge_nmÆloc
)

162 
	$CTL_PROTO
(
°©s_¨ías_i_œrge_ndÆloc
)

163 
	$CTL_PROTO
(
°©s_¨ías_i_œrge_ƒeque°s
)

164 
	$CTL_PROTO
(
°©s_¨ías_i_huge_Æloˇãd
)

165 
	$CTL_PROTO
(
°©s_¨ías_i_huge_nmÆloc
)

166 
	$CTL_PROTO
(
°©s_¨ías_i_huge_ndÆloc
)

167 
	$CTL_PROTO
(
°©s_¨ías_i_huge_ƒeque°s
)

168 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_nmÆloc
)

169 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_ndÆloc
)

170 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_ƒeque°s
)

171 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_cuºegs
)

172 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_nfûls
)

173 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_nÊushes
)

174 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_ƒuns
)

175 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_ƒîuns
)

176 
	$CTL_PROTO
(
°©s_¨ías_i_bös_j_cuºuns
)

177 
	$INDEX_PROTO
(
°©s_¨ías_i_bös_j
)

178 
	$CTL_PROTO
(
°©s_¨ías_i_Ãuns_j_nmÆloc
)

179 
	$CTL_PROTO
(
°©s_¨ías_i_Ãuns_j_ndÆloc
)

180 
	$CTL_PROTO
(
°©s_¨ías_i_Ãuns_j_ƒeque°s
)

181 
	$CTL_PROTO
(
°©s_¨ías_i_Ãuns_j_cuºuns
)

182 
	$INDEX_PROTO
(
°©s_¨ías_i_Ãuns_j
)

183 
	$CTL_PROTO
(
°©s_¨ías_i_hchunks_j_nmÆloc
)

184 
	$CTL_PROTO
(
°©s_¨ías_i_hchunks_j_ndÆloc
)

185 
	$CTL_PROTO
(
°©s_¨ías_i_hchunks_j_ƒeque°s
)

186 
	$CTL_PROTO
(
°©s_¨ías_i_hchunks_j_curhchunks
)

187 
	$INDEX_PROTO
(
°©s_¨ías_i_hchunks_j
)

188 
	$CTL_PROTO
(
°©s_¨ías_i_¡hªads
)

189 
	$CTL_PROTO
(
°©s_¨ías_i_dss
)

190 
	$CTL_PROTO
(
°©s_¨ías_i_lg_dúty_mu…
)

191 
	$CTL_PROTO
(
°©s_¨ías_i_deˇy_time
)

192 
	$CTL_PROTO
(
°©s_¨ías_i_∑˘ive
)

193 
	$CTL_PROTO
(
°©s_¨ías_i_pdúty
)

194 
	$CTL_PROTO
(
°©s_¨ías_i_m≠≥d
)

195 
	$CTL_PROTO
(
°©s_¨ías_i_ªèöed
)

196 
	$CTL_PROTO
(
°©s_¨ías_i_≈urge
)

197 
	$CTL_PROTO
(
°©s_¨ías_i_nmadvi£
)

198 
	$CTL_PROTO
(
°©s_¨ías_i_purged
)

199 
	$CTL_PROTO
(
°©s_¨ías_i_mëad©a_m≠≥d
)

200 
	$CTL_PROTO
(
°©s_¨ías_i_mëad©a_Æloˇãd
)

201 
	$INDEX_PROTO
(
°©s_¨ías_i
)

202 
	$CTL_PROTO
(
°©s_ˇ˘ive
)

203 
	$CTL_PROTO
(
°©s_Æloˇãd
)

204 
	$CTL_PROTO
(
°©s_a˘ive
)

205 
	$CTL_PROTO
(
°©s_mëad©a
)

206 
	$CTL_PROTO
(
°©s_ªsidít
)

207 
	$CTL_PROTO
(
°©s_m≠≥d
)

208 
	$CTL_PROTO
(
°©s_ªèöed
)

214 
	#CTL_MAX_DEPTH
 6

	)

216 
	#NAME
(
n
Ë{
åue
},Ç

217 
	#CHILD
(
t
, 
c
) \

218 (
c
##
_node
Ë/ (
˘l_
##
t
##
_node_t
), \

219 (
˘l_node_t
 *)
c
##
_node
, \

220 
NULL


	)

221 
	#CTL
(
c
Ë0, 
NULL
, c##
_˘l


	)

227 
	#INDEX
(
i
Ë{
Ál£
}, i##
_ödex


	)

229 c⁄° 
˘l_«med_node_t
 
	gthªad_tˇche_node
[] = {

230 {
NAME
("íabÀd"), 
CTL
(
thªad_tˇche_íabÀd
)},

231 {
NAME
("Êush"), 
CTL
(
thªad_tˇche_Êush
)}

234 c⁄° 
˘l_«med_node_t
 
	gthªad_¥of_node
[] = {

235 {
NAME
("«me"), 
CTL
(
thªad_¥of_«me
)},

236 {
NAME
("a˘ive"), 
CTL
(
thªad_¥of_a˘ive
)}

239 c⁄° 
˘l_«med_node_t
 
	gthªad_node
[] = {

240 {
NAME
("¨ía"), 
CTL
(
thªad_¨ía
)},

241 {
NAME
("Æloˇãd"), 
CTL
(
thªad_Æloˇãd
)},

242 {
NAME
("Æloˇãdp"), 
CTL
(
thªad_Æloˇãdp
)},

243 {
NAME
("dóŒoˇãd"), 
CTL
(
thªad_dóŒoˇãd
)},

244 {
NAME
("dóŒoˇãdp"), 
CTL
(
thªad_dóŒoˇãdp
)},

245 {
NAME
("tˇche"), 
CHILD
(
«med
, 
thªad_tˇche
)},

246 {
NAME
("¥of"), 
CHILD
(
«med
, 
thªad_¥of
)}

249 c⁄° 
˘l_«med_node_t
 
	gc⁄fig_node
[] = {

250 {
NAME
("ˇche_oblivious"), 
CTL
(
c⁄fig_ˇche_oblivious
)},

251 {
NAME
("debug"), 
CTL
(
c⁄fig_debug
)},

252 {
NAME
("fûl"), 
CTL
(
c⁄fig_fûl
)},

253 {
NAME
("œzy_lock"), 
CTL
(
c⁄fig_œzy_lock
)},

254 {
NAME
("mÆloc_c⁄f"), 
CTL
(
c⁄fig_mÆloc_c⁄f
)},

255 {
NAME
("munm≠"), 
CTL
(
c⁄fig_munm≠
)},

256 {
NAME
("¥of"), 
CTL
(
c⁄fig_¥of
)},

257 {
NAME
("¥of_libgcc"), 
CTL
(
c⁄fig_¥of_libgcc
)},

258 {
NAME
("¥of_libunwöd"), 
CTL
(
c⁄fig_¥of_libunwöd
)},

259 {
NAME
("°©s"), 
CTL
(
c⁄fig_°©s
)},

260 {
NAME
("tˇche"), 
CTL
(
c⁄fig_tˇche
)},

261 {
NAME
("és"), 
CTL
(
c⁄fig_és
)},

262 {
NAME
("uåa˚"), 
CTL
(
c⁄fig_uåa˚
)},

263 {
NAME
("vÆgröd"), 
CTL
(
c⁄fig_vÆgröd
)},

264 {
NAME
("xmÆloc"), 
CTL
(
c⁄fig_xmÆloc
)}

267 c⁄° 
˘l_«med_node_t
 
	g›t_node
[] = {

268 {
NAME
("ab‹t"), 
CTL
(
›t_ab‹t
)},

269 {
NAME
("dss"), 
CTL
(
›t_dss
)},

270 {
NAME
("lg_chunk"), 
CTL
(
›t_lg_chunk
)},

271 {
NAME
("«ª«s"), 
CTL
(
›t_«ª«s
)},

272 {
NAME
("purge"), 
CTL
(
›t_purge
)},

273 {
NAME
("lg_dúty_mu…"), 
CTL
(
›t_lg_dúty_mu…
)},

274 {
NAME
("deˇy_time"), 
CTL
(
›t_deˇy_time
)},

275 {
NAME
("°©s_¥öt"), 
CTL
(
›t_°©s_¥öt
)},

276 {
NAME
("junk"), 
CTL
(
›t_junk
)},

277 {
NAME
("zîo"), 
CTL
(
›t_zîo
)},

278 {
NAME
("qu¨™töe"), 
CTL
(
›t_qu¨™töe
)},

279 {
NAME
("ªdz⁄e"), 
CTL
(
›t_ªdz⁄e
)},

280 {
NAME
("uåa˚"), 
CTL
(
›t_uåa˚
)},

281 {
NAME
("xmÆloc"), 
CTL
(
›t_xmÆloc
)},

282 {
NAME
("tˇche"), 
CTL
(
›t_tˇche
)},

283 {
NAME
("lg_tˇche_max"), 
CTL
(
›t_lg_tˇche_max
)},

284 {
NAME
("¥of"), 
CTL
(
›t_¥of
)},

285 {
NAME
("¥of_¥efix"), 
CTL
(
›t_¥of_¥efix
)},

286 {
NAME
("¥of_a˘ive"), 
CTL
(
›t_¥of_a˘ive
)},

287 {
NAME
("¥of_thªad_a˘ive_öô"), 
CTL
(
›t_¥of_thªad_a˘ive_öô
)},

288 {
NAME
("lg_¥of_ßm∂e"), 
CTL
(
›t_lg_¥of_ßm∂e
)},

289 {
NAME
("lg_¥of_öãrvÆ"), 
CTL
(
›t_lg_¥of_öãrvÆ
)},

290 {
NAME
("¥of_gdump"), 
CTL
(
›t_¥of_gdump
)},

291 {
NAME
("¥of_föÆ"), 
CTL
(
›t_¥of_föÆ
)},

292 {
NAME
("¥of_Àak"), 
CTL
(
›t_¥of_Àak
)},

293 {
NAME
("¥of_accum"), 
CTL
(
›t_¥of_accum
)}

296 c⁄° 
˘l_«med_node_t
 
	gtˇche_node
[] = {

297 {
NAME
("¸óã"), 
CTL
(
tˇche_¸óã
)},

298 {
NAME
("Êush"), 
CTL
(
tˇche_Êush
)},

299 {
NAME
("de°roy"), 
CTL
(
tˇche_de°roy
)}

302 c⁄° 
˘l_«med_node_t
 
	g¨ía_i_node
[] = {

303 {
NAME
("purge"), 
CTL
(
¨ía_i_purge
)},

304 {
NAME
("deˇy"), 
CTL
(
¨ía_i_deˇy
)},

305 {
NAME
("ª£t"), 
CTL
(
¨ía_i_ª£t
)},

306 {
NAME
("dss"), 
CTL
(
¨ía_i_dss
)},

307 {
NAME
("lg_dúty_mu…"), 
CTL
(
¨ía_i_lg_dúty_mu…
)},

308 {
NAME
("deˇy_time"), 
CTL
(
¨ía_i_deˇy_time
)},

309 {
NAME
("chunk_hooks"), 
CTL
(
¨ía_i_chunk_hooks
)}

311 c⁄° 
˘l_«med_node_t
 
	gsu≥r_¨ía_i_node
[] = {

312 {
NAME
(""), 
CHILD
(
«med
, 
¨ía_i
)}

315 c⁄° 
˘l_ödexed_node_t
 
	g¨ía_node
[] = {

316 {
INDEX
(
¨ía_i
)}

319 c⁄° 
˘l_«med_node_t
 
	g¨ías_bö_i_node
[] = {

320 {
NAME
("size"), 
CTL
(
¨ías_bö_i_size
)},

321 {
NAME
("ƒegs"), 
CTL
(
¨ías_bö_i_ƒegs
)},

322 {
NAME
("run_size"), 
CTL
(
¨ías_bö_i_run_size
)}

324 c⁄° 
˘l_«med_node_t
 
	gsu≥r_¨ías_bö_i_node
[] = {

325 {
NAME
(""), 
CHILD
(
«med
, 
¨ías_bö_i
)}

328 c⁄° 
˘l_ödexed_node_t
 
	g¨ías_bö_node
[] = {

329 {
INDEX
(
¨ías_bö_i
)}

332 c⁄° 
˘l_«med_node_t
 
	g¨ías_Ãun_i_node
[] = {

333 {
NAME
("size"), 
CTL
(
¨ías_Ãun_i_size
)}

335 c⁄° 
˘l_«med_node_t
 
	gsu≥r_¨ías_Ãun_i_node
[] = {

336 {
NAME
(""), 
CHILD
(
«med
, 
¨ías_Ãun_i
)}

339 c⁄° 
˘l_ödexed_node_t
 
	g¨ías_Ãun_node
[] = {

340 {
INDEX
(
¨ías_Ãun_i
)}

343 c⁄° 
˘l_«med_node_t
 
	g¨ías_hchunk_i_node
[] = {

344 {
NAME
("size"), 
CTL
(
¨ías_hchunk_i_size
)}

346 c⁄° 
˘l_«med_node_t
 
	gsu≥r_¨ías_hchunk_i_node
[] = {

347 {
NAME
(""), 
CHILD
(
«med
, 
¨ías_hchunk_i
)}

350 c⁄° 
˘l_ödexed_node_t
 
	g¨ías_hchunk_node
[] = {

351 {
INDEX
(
¨ías_hchunk_i
)}

354 c⁄° 
˘l_«med_node_t
 
	g¨ías_node
[] = {

355 {
NAME
("«ª«s"), 
CTL
(
¨ías_«ª«s
)},

356 {
NAME
("öôülized"), 
CTL
(
¨ías_öôülized
)},

357 {
NAME
("lg_dúty_mu…"), 
CTL
(
¨ías_lg_dúty_mu…
)},

358 {
NAME
("deˇy_time"), 
CTL
(
¨ías_deˇy_time
)},

359 {
NAME
("qu™tum"), 
CTL
(
¨ías_qu™tum
)},

360 {
NAME
("∑ge"), 
CTL
(
¨ías_∑ge
)},

361 {
NAME
("tˇche_max"), 
CTL
(
¨ías_tˇche_max
)},

362 {
NAME
("nbös"), 
CTL
(
¨ías_nbös
)},

363 {
NAME
("nhbös"), 
CTL
(
¨ías_nhbös
)},

364 {
NAME
("bö"), 
CHILD
(
ödexed
, 
¨ías_bö
)},

365 {
NAME
("∆runs"), 
CTL
(
¨ías_∆runs
)},

366 {
NAME
("Ãun"), 
CHILD
(
ödexed
, 
¨ías_Ãun
)},

367 {
NAME
("nhchunks"), 
CTL
(
¨ías_nhchunks
)},

368 {
NAME
("hchunk"), 
CHILD
(
ödexed
, 
¨ías_hchunk
)},

369 {
NAME
("exãnd"), 
CTL
(
¨ías_exãnd
)}

372 c⁄° 
˘l_«med_node_t
 
	g¥of_node
[] = {

373 {
NAME
("thªad_a˘ive_öô"), 
CTL
(
¥of_thªad_a˘ive_öô
)},

374 {
NAME
("a˘ive"), 
CTL
(
¥of_a˘ive
)},

375 {
NAME
("dump"), 
CTL
(
¥of_dump
)},

376 {
NAME
("gdump"), 
CTL
(
¥of_gdump
)},

377 {
NAME
("ª£t"), 
CTL
(
¥of_ª£t
)},

378 {
NAME
("öãrvÆ"), 
CTL
(
¥of_öãrvÆ
)},

379 {
NAME
("lg_ßm∂e"), 
CTL
(
lg_¥of_ßm∂e
)}

382 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_mëad©a_node
[] = {

383 {
NAME
("m≠≥d"), 
CTL
(
°©s_¨ías_i_mëad©a_m≠≥d
)},

384 {
NAME
("Æloˇãd"), 
CTL
(
°©s_¨ías_i_mëad©a_Æloˇãd
)}

387 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_smÆl_node
[] = {

388 {
NAME
("Æloˇãd"), 
CTL
(
°©s_¨ías_i_smÆl_Æloˇãd
)},

389 {
NAME
("nmÆloc"), 
CTL
(
°©s_¨ías_i_smÆl_nmÆloc
)},

390 {
NAME
("ndÆloc"), 
CTL
(
°©s_¨ías_i_smÆl_ndÆloc
)},

391 {
NAME
("ƒeque°s"), 
CTL
(
°©s_¨ías_i_smÆl_ƒeque°s
)}

394 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_œrge_node
[] = {

395 {
NAME
("Æloˇãd"), 
CTL
(
°©s_¨ías_i_œrge_Æloˇãd
)},

396 {
NAME
("nmÆloc"), 
CTL
(
°©s_¨ías_i_œrge_nmÆloc
)},

397 {
NAME
("ndÆloc"), 
CTL
(
°©s_¨ías_i_œrge_ndÆloc
)},

398 {
NAME
("ƒeque°s"), 
CTL
(
°©s_¨ías_i_œrge_ƒeque°s
)}

401 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_huge_node
[] = {

402 {
NAME
("Æloˇãd"), 
CTL
(
°©s_¨ías_i_huge_Æloˇãd
)},

403 {
NAME
("nmÆloc"), 
CTL
(
°©s_¨ías_i_huge_nmÆloc
)},

404 {
NAME
("ndÆloc"), 
CTL
(
°©s_¨ías_i_huge_ndÆloc
)},

405 {
NAME
("ƒeque°s"), 
CTL
(
°©s_¨ías_i_huge_ƒeque°s
)}

408 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_bös_j_node
[] = {

409 {
NAME
("nmÆloc"), 
CTL
(
°©s_¨ías_i_bös_j_nmÆloc
)},

410 {
NAME
("ndÆloc"), 
CTL
(
°©s_¨ías_i_bös_j_ndÆloc
)},

411 {
NAME
("ƒeque°s"), 
CTL
(
°©s_¨ías_i_bös_j_ƒeque°s
)},

412 {
NAME
("cuºegs"), 
CTL
(
°©s_¨ías_i_bös_j_cuºegs
)},

413 {
NAME
("nfûls"), 
CTL
(
°©s_¨ías_i_bös_j_nfûls
)},

414 {
NAME
("nÊushes"), 
CTL
(
°©s_¨ías_i_bös_j_nÊushes
)},

415 {
NAME
("ƒuns"), 
CTL
(
°©s_¨ías_i_bös_j_ƒuns
)},

416 {
NAME
("ƒîuns"), 
CTL
(
°©s_¨ías_i_bös_j_ƒîuns
)},

417 {
NAME
("cuºuns"), 
CTL
(
°©s_¨ías_i_bös_j_cuºuns
)}

419 c⁄° 
˘l_«med_node_t
 
	gsu≥r_°©s_¨ías_i_bös_j_node
[] = {

420 {
NAME
(""), 
CHILD
(
«med
, 
°©s_¨ías_i_bös_j
)}

423 c⁄° 
˘l_ödexed_node_t
 
	g°©s_¨ías_i_bös_node
[] = {

424 {
INDEX
(
°©s_¨ías_i_bös_j
)}

427 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_Ãuns_j_node
[] = {

428 {
NAME
("nmÆloc"), 
CTL
(
°©s_¨ías_i_Ãuns_j_nmÆloc
)},

429 {
NAME
("ndÆloc"), 
CTL
(
°©s_¨ías_i_Ãuns_j_ndÆloc
)},

430 {
NAME
("ƒeque°s"), 
CTL
(
°©s_¨ías_i_Ãuns_j_ƒeque°s
)},

431 {
NAME
("cuºuns"), 
CTL
(
°©s_¨ías_i_Ãuns_j_cuºuns
)}

433 c⁄° 
˘l_«med_node_t
 
	gsu≥r_°©s_¨ías_i_Ãuns_j_node
[] = {

434 {
NAME
(""), 
CHILD
(
«med
, 
°©s_¨ías_i_Ãuns_j
)}

437 c⁄° 
˘l_ödexed_node_t
 
	g°©s_¨ías_i_Ãuns_node
[] = {

438 {
INDEX
(
°©s_¨ías_i_Ãuns_j
)}

441 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_hchunks_j_node
[] = {

442 {
NAME
("nmÆloc"), 
CTL
(
°©s_¨ías_i_hchunks_j_nmÆloc
)},

443 {
NAME
("ndÆloc"), 
CTL
(
°©s_¨ías_i_hchunks_j_ndÆloc
)},

444 {
NAME
("ƒeque°s"), 
CTL
(
°©s_¨ías_i_hchunks_j_ƒeque°s
)},

445 {
NAME
("curhchunks"), 
CTL
(
°©s_¨ías_i_hchunks_j_curhchunks
)}

447 c⁄° 
˘l_«med_node_t
 
	gsu≥r_°©s_¨ías_i_hchunks_j_node
[] = {

448 {
NAME
(""), 
CHILD
(
«med
, 
°©s_¨ías_i_hchunks_j
)}

451 c⁄° 
˘l_ödexed_node_t
 
	g°©s_¨ías_i_hchunks_node
[] = {

452 {
INDEX
(
°©s_¨ías_i_hchunks_j
)}

455 c⁄° 
˘l_«med_node_t
 
	g°©s_¨ías_i_node
[] = {

456 {
NAME
("¡hªads"), 
CTL
(
°©s_¨ías_i_¡hªads
)},

457 {
NAME
("dss"), 
CTL
(
°©s_¨ías_i_dss
)},

458 {
NAME
("lg_dúty_mu…"), 
CTL
(
°©s_¨ías_i_lg_dúty_mu…
)},

459 {
NAME
("deˇy_time"), 
CTL
(
°©s_¨ías_i_deˇy_time
)},

460 {
NAME
("∑˘ive"), 
CTL
(
°©s_¨ías_i_∑˘ive
)},

461 {
NAME
("pdúty"), 
CTL
(
°©s_¨ías_i_pdúty
)},

462 {
NAME
("m≠≥d"), 
CTL
(
°©s_¨ías_i_m≠≥d
)},

463 {
NAME
("ªèöed"), 
CTL
(
°©s_¨ías_i_ªèöed
)},

464 {
NAME
("≈urge"), 
CTL
(
°©s_¨ías_i_≈urge
)},

465 {
NAME
("nmadvi£"), 
CTL
(
°©s_¨ías_i_nmadvi£
)},

466 {
NAME
("purged"), 
CTL
(
°©s_¨ías_i_purged
)},

467 {
NAME
("mëad©a"), 
CHILD
(
«med
, 
°©s_¨ías_i_mëad©a
)},

468 {
NAME
("smÆl"), 
CHILD
(
«med
, 
°©s_¨ías_i_smÆl
)},

469 {
NAME
("œrge"), 
CHILD
(
«med
, 
°©s_¨ías_i_œrge
)},

470 {
NAME
("huge"), 
CHILD
(
«med
, 
°©s_¨ías_i_huge
)},

471 {
NAME
("bös"), 
CHILD
(
ödexed
, 
°©s_¨ías_i_bös
)},

472 {
NAME
("Ãuns"), 
CHILD
(
ödexed
, 
°©s_¨ías_i_Ãuns
)},

473 {
NAME
("hchunks"), 
CHILD
(
ödexed
, 
°©s_¨ías_i_hchunks
)}

475 c⁄° 
˘l_«med_node_t
 
	gsu≥r_°©s_¨ías_i_node
[] = {

476 {
NAME
(""), 
CHILD
(
«med
, 
°©s_¨ías_i
)}

479 c⁄° 
˘l_ödexed_node_t
 
	g°©s_¨ías_node
[] = {

480 {
INDEX
(
°©s_¨ías_i
)}

483 c⁄° 
˘l_«med_node_t
 
	g°©s_node
[] = {

484 {
NAME
("ˇ˘ive"), 
CTL
(
°©s_ˇ˘ive
)},

485 {
NAME
("Æloˇãd"), 
CTL
(
°©s_Æloˇãd
)},

486 {
NAME
("a˘ive"), 
CTL
(
°©s_a˘ive
)},

487 {
NAME
("mëad©a"), 
CTL
(
°©s_mëad©a
)},

488 {
NAME
("ªsidít"), 
CTL
(
°©s_ªsidít
)},

489 {
NAME
("m≠≥d"), 
CTL
(
°©s_m≠≥d
)},

490 {
NAME
("ªèöed"), 
CTL
(
°©s_ªèöed
)},

491 {
NAME
("¨ías"), 
CHILD
(
ödexed
, 
°©s_¨ías
)}

494 c⁄° 
˘l_«med_node_t
 
	groŸ_node
[] = {

495 {
NAME
("vîsi⁄"), 
CTL
(
vîsi⁄
)},

496 {
NAME
("ïoch"), 
CTL
(
ïoch
)},

497 {
NAME
("thªad"), 
CHILD
(
«med
, 
thªad
)},

498 {
NAME
("c⁄fig"), 
CHILD
(
«med
, 
c⁄fig
)},

499 {
NAME
("›t"), 
CHILD
(
«med
, 
›t
)},

500 {
NAME
("tˇche"), 
CHILD
(
«med
, 
tˇche
)},

501 {
NAME
("¨ía"), 
CHILD
(
ödexed
, 
¨ía
)},

502 {
NAME
("¨ías"), 
CHILD
(
«med
, 
¨ías
)},

503 {
NAME
("¥of"), 
CHILD
(
«med
, 
¥of
)},

504 {
NAME
("°©s"), 
CHILD
(
«med
, 
°©s
)}

506 c⁄° 
˘l_«med_node_t
 
	gsu≥r_roŸ_node
[] = {

507 {
NAME
(""), 
CHILD
(
«med
, 
roŸ
)}

510 #unde‡
NAME


511 #unde‡
CHILD


512 #unde‡
CTL


513 #unde‡
INDEX


517 
boﬁ


518 
	$˘l_¨ía_öô
(
˘l_¨ía_°©s_t
 *
a°©s
)

521 i‡(
a°©s
->
l°©s
 =
NULL
) {

522 
a°©s
->
l°©s
 = (
mÆloc_œrge_°©s_t
 *)
	`a0mÆloc
(
∆˛as£s
 *

523 (
mÆloc_œrge_°©s_t
));

524 i‡(
a°©s
->
l°©s
 =
NULL
)

525  (
åue
);

528 i‡(
a°©s
->
h°©s
 =
NULL
) {

529 
a°©s
->
h°©s
 = (
mÆloc_huge_°©s_t
 *)
	`a0mÆloc
(
nh˛as£s
 *

530 (
mÆloc_huge_°©s_t
));

531 i‡(
a°©s
->
h°©s
 =
NULL
)

532  (
åue
);

535  (
Ál£
);

536 
	}
}

539 
	$˘l_¨ía_˛ór
(
˘l_¨ía_°©s_t
 *
a°©s
)

542 
a°©s
->
¡hªads
 = 0;

543 
a°©s
->
dss
 = 
dss_¥ec_«mes
[
dss_¥ec_limô
];

544 
a°©s
->
lg_dúty_mu…
 = -1;

545 
a°©s
->
deˇy_time
 = -1;

546 
a°©s
->
∑˘ive
 = 0;

547 
a°©s
->
pdúty
 = 0;

548 i‡(
c⁄fig_°©s
) {

549 
	`mem£t
(&
a°©s
->a°©s, 0, (
¨ía_°©s_t
));

550 
a°©s
->
Æloˇãd_smÆl
 = 0;

551 
a°©s
->
nmÆloc_smÆl
 = 0;

552 
a°©s
->
ndÆloc_smÆl
 = 0;

553 
a°©s
->
ƒeque°s_smÆl
 = 0;

554 
	`mem£t
(
a°©s
->
b°©s
, 0, 
NBINS
 * (
mÆloc_bö_°©s_t
));

555 
	`mem£t
(
a°©s
->
l°©s
, 0, 
∆˛as£s
 *

556 (
mÆloc_œrge_°©s_t
));

557 
	`mem£t
(
a°©s
->
h°©s
, 0, 
nh˛as£s
 *

558 (
mÆloc_huge_°©s_t
));

560 
	}
}

563 
	$˘l_¨ía_°©s_amîge
(
tsdn_t
 *
tsdn
, 
˘l_¨ía_°©s_t
 *
c°©s
, 
¨ía_t
 *
¨ía
)

565 
i
;

567 i‡(
c⁄fig_°©s
) {

568 
	`¨ía_°©s_mîge
(
tsdn
, 
¨ía
, &
c°©s
->
¡hªads
, &c°©s->
dss
,

569 &
c°©s
->
lg_dúty_mu…
, &c°©s->
deˇy_time
,

570 &
c°©s
->
∑˘ive
, &c°©s->
pdúty
, &c°©s->
a°©s
,

571 
c°©s
->
b°©s
, c°©s->
l°©s
, c°©s->
h°©s
);

573 
i
 = 0; i < 
NBINS
; i++) {

574 
c°©s
->
Æloˇãd_smÆl
 +c°©s->
b°©s
[
i
].
cuºegs
 *

575 
	`ödex2size
(
i
);

576 
c°©s
->
nmÆloc_smÆl
 +c°©s->
b°©s
[
i
].
nmÆloc
;

577 
c°©s
->
ndÆloc_smÆl
 +c°©s->
b°©s
[
i
].
ndÆloc
;

578 
c°©s
->
ƒeque°s_smÆl
 +c°©s->
b°©s
[
i
].
ƒeque°s
;

581 
	`¨ía_basic_°©s_mîge
(
tsdn
, 
¨ía
, &
c°©s
->
¡hªads
,

582 &
c°©s
->
dss
, &c°©s->
lg_dúty_mu…
, &c°©s->
deˇy_time
,

583 &
c°©s
->
∑˘ive
, &c°©s->
pdúty
);

585 
	}
}

588 
	$˘l_¨ía_°©s_smîge
(
˘l_¨ía_°©s_t
 *
s°©s
, cé_¨ía_°©s_à*
a°©s
)

590 
i
;

592 
s°©s
->
¡hªads
 +
a°©s
->nthreads;

593 
s°©s
->
∑˘ive
 +
a°©s
->pactive;

594 
s°©s
->
pdúty
 +
a°©s
->pdirty;

596 i‡(
c⁄fig_°©s
) {

597 
s°©s
->
a°©s
.
m≠≥d
 +=ástats->astats.mapped;

598 
s°©s
->
a°©s
.
ªèöed
 +=ástats->astats.retained;

599 
s°©s
->
a°©s
.
≈urge
 +=ástats->astats.npurge;

600 
s°©s
->
a°©s
.
nmadvi£
 +=ástats->astats.nmadvise;

601 
s°©s
->
a°©s
.
purged
 +=ástats->astats.purged;

603 
s°©s
->
a°©s
.
mëad©a_m≠≥d
 +=

604 
a°©s
->a°©s.
mëad©a_m≠≥d
;

605 
s°©s
->
a°©s
.
mëad©a_Æloˇãd
 +=

606 
a°©s
->a°©s.
mëad©a_Æloˇãd
;

608 
s°©s
->
Æloˇãd_smÆl
 +
a°©s
->allocated_small;

609 
s°©s
->
nmÆloc_smÆl
 +
a°©s
->nmalloc_small;

610 
s°©s
->
ndÆloc_smÆl
 +
a°©s
->ndalloc_small;

611 
s°©s
->
ƒeque°s_smÆl
 +
a°©s
->nrequests_small;

613 
s°©s
->
a°©s
.
Æloˇãd_œrge
 +=

614 
a°©s
->a°©s.
Æloˇãd_œrge
;

615 
s°©s
->
a°©s
.
nmÆloc_œrge
 +=ástats->astats.nmalloc_large;

616 
s°©s
->
a°©s
.
ndÆloc_œrge
 +=ástats->astats.ndalloc_large;

617 
s°©s
->
a°©s
.
ƒeque°s_œrge
 +=

618 
a°©s
->a°©s.
ƒeque°s_œrge
;

620 
s°©s
->
a°©s
.
Æloˇãd_huge
 +=ástats->astats.allocated_huge;

621 
s°©s
->
a°©s
.
nmÆloc_huge
 +=ástats->astats.nmalloc_huge;

622 
s°©s
->
a°©s
.
ndÆloc_huge
 +=ástats->astats.ndalloc_huge;

624 
i
 = 0; i < 
NBINS
; i++) {

625 
s°©s
->
b°©s
[
i
].
nmÆloc
 +
a°©s
->bstats[i].nmalloc;

626 
s°©s
->
b°©s
[
i
].
ndÆloc
 +
a°©s
->bstats[i].ndalloc;

627 
s°©s
->
b°©s
[
i
].
ƒeque°s
 +=

628 
a°©s
->
b°©s
[
i
].
ƒeque°s
;

629 
s°©s
->
b°©s
[
i
].
cuºegs
 +
a°©s
->bstats[i].curregs;

630 i‡(
c⁄fig_tˇche
) {

631 
s°©s
->
b°©s
[
i
].
nfûls
 +=

632 
a°©s
->
b°©s
[
i
].
nfûls
;

633 
s°©s
->
b°©s
[
i
].
nÊushes
 +=

634 
a°©s
->
b°©s
[
i
].
nÊushes
;

636 
s°©s
->
b°©s
[
i
].
ƒuns
 +
a°©s
->bstats[i].nruns;

637 
s°©s
->
b°©s
[
i
].
ªruns
 +
a°©s
->bstats[i].reruns;

638 
s°©s
->
b°©s
[
i
].
cuºuns
 +
a°©s
->bstats[i].curruns;

641 
i
 = 0; i < 
∆˛as£s
; i++) {

642 
s°©s
->
l°©s
[
i
].
nmÆloc
 +
a°©s
->lstats[i].nmalloc;

643 
s°©s
->
l°©s
[
i
].
ndÆloc
 +
a°©s
->lstats[i].ndalloc;

644 
s°©s
->
l°©s
[
i
].
ƒeque°s
 +=

645 
a°©s
->
l°©s
[
i
].
ƒeque°s
;

646 
s°©s
->
l°©s
[
i
].
cuºuns
 +
a°©s
->lstats[i].curruns;

649 
i
 = 0; i < 
nh˛as£s
; i++) {

650 
s°©s
->
h°©s
[
i
].
nmÆloc
 +
a°©s
->hstats[i].nmalloc;

651 
s°©s
->
h°©s
[
i
].
ndÆloc
 +
a°©s
->hstats[i].ndalloc;

652 
s°©s
->
h°©s
[
i
].
curhchunks
 +=

653 
a°©s
->
h°©s
[
i
].
curhchunks
;

656 
	}
}

659 
	$˘l_¨ía_ª‰esh
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
i
)

661 
˘l_¨ía_°©s_t
 *
a°©s
 = &
˘l_°©s
.
¨ías
[
i
];

662 
˘l_¨ía_°©s_t
 *
s°©s
 = &
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
];

664 
	`˘l_¨ía_˛ór
(
a°©s
);

665 
	`˘l_¨ía_°©s_amîge
(
tsdn
, 
a°©s
, 
¨ía
);

667 
	`˘l_¨ía_°©s_smîge
(
s°©s
, 
a°©s
);

668 
	}
}

670 
boﬁ


671 
	$˘l_grow
(
tsdn_t
 *
tsdn
)

673 
˘l_¨ía_°©s_t
 *
a°©s
;

676 i‡(
	`¨ía_öô
(
tsdn
, 
˘l_°©s
.
«ª«s
Ë=
NULL
)

677  (
åue
);

680 
a°©s
 = (
˘l_¨ía_°©s_t
 *)
	`a0mÆloc
((
˘l_°©s
.
«ª«s
 + 2) *

681 (
˘l_¨ía_°©s_t
));

682 i‡(
a°©s
 =
NULL
)

683  (
åue
);

686 
	`mem˝y
(
a°©s
, 
˘l_°©s
.
¨ías
, (˘l_°©s.
«ª«s
 + 1) *

687 (
˘l_¨ía_°©s_t
));

688 
	`mem£t
(&
a°©s
[
˘l_°©s
.
«ª«s
 + 1], 0, (
˘l_¨ía_°©s_t
));

689 i‡(
	`˘l_¨ía_öô
(&
a°©s
[
˘l_°©s
.
«ª«s
 + 1])) {

690 
	`a0dÆloc
(
a°©s
);

691  (
åue
);

695 
˘l_¨ía_°©s_t
 
t°©s
;

696 
	`mem˝y
(&
t°©s
, &
a°©s
[
˘l_°©s
.
«ª«s
],

697 (
˘l_¨ía_°©s_t
));

698 
	`mem˝y
(&
a°©s
[
˘l_°©s
.
«ª«s
],

699 &
a°©s
[
˘l_°©s
.
«ª«s
 + 1], (
˘l_¨ía_°©s_t
));

700 
	`mem˝y
(&
a°©s
[
˘l_°©s
.
«ª«s
 + 1], &
t°©s
,

701 (
˘l_¨ía_°©s_t
));

703 
	`a0dÆloc
(
˘l_°©s
.
¨ías
);

704 
˘l_°©s
.
¨ías
 = 
a°©s
;

705 
˘l_°©s
.
«ª«s
++;

707  (
Ál£
);

708 
	}
}

711 
	$˘l_ª‰esh
(
tsdn_t
 *
tsdn
)

713 
i
;

714 
	`VARIABLE_ARRAY
(
¨ía_t
 *, 
èª«s
, 
˘l_°©s
.
«ª«s
);

720 
	`˘l_¨ía_˛ór
(&
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
]);

722 
i
 = 0; i < 
˘l_°©s
.
«ª«s
; i++)

723 
èª«s
[
i
] = 
	`¨ía_gë
(
tsdn
, i, 
Ál£
);

725 
i
 = 0; i < 
˘l_°©s
.
«ª«s
; i++) {

726 
boﬁ
 
öôülized
 = (
èª«s
[
i
] !
NULL
);

728 
˘l_°©s
.
¨ías
[
i
].
öôülized
 = initialized;

729 i‡(
öôülized
)

730 
	`˘l_¨ía_ª‰esh
(
tsdn
, 
èª«s
[
i
], i);

733 i‡(
c⁄fig_°©s
) {

734 
size_t
 
ba£_Æloˇãd
, 
ba£_ªsidít
, 
ba£_m≠≥d
;

735 
	`ba£_°©s_gë
(
tsdn
, &
ba£_Æloˇãd
, &
ba£_ªsidít
,

736 &
ba£_m≠≥d
);

737 
˘l_°©s
.
Æloˇãd
 =

738 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
Æloˇãd_smÆl
 +

739 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s
.
Æloˇãd_œrge
 +

740 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s
.
Æloˇãd_huge
;

741 
˘l_°©s
.
a˘ive
 =

742 (
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
∑˘ive
 << 
LG_PAGE
);

743 
˘l_°©s
.
mëad©a
 = 
ba£_Æloˇãd
 +

744 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s
.
mëad©a_m≠≥d
 +

745 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s


746 .
mëad©a_Æloˇãd
;

747 
˘l_°©s
.
ªsidít
 = 
ba£_ªsidít
 +

748 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s
.
mëad©a_m≠≥d
 +

749 ((
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
∑˘ive
 +

750 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
pdúty
Ë<< 
LG_PAGE
);

751 
˘l_°©s
.
m≠≥d
 = 
ba£_m≠≥d
 +

752 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s
.
m≠≥d
;

753 
˘l_°©s
.
ªèöed
 =

754 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
a°©s
.
ªèöed
;

757 
˘l_ïoch
++;

758 
	}
}

760 
boﬁ


761 
	$˘l_öô
(
tsdn_t
 *
tsdn
)

763 
boﬁ
 
ªt
;

765 
	`mÆloc_muãx_lock
(
tsdn
, &
˘l_mtx
);

766 i‡(!
˘l_öôülized
) {

771 
˘l_°©s
.
«ª«s
 = 
	`«ª«s_tŸÆ_gë
();

772 
˘l_°©s
.
¨ías
 = (
˘l_¨ía_°©s_t
 *)
	`a0mÆloc
(

773 (
˘l_°©s
.
«ª«s
 + 1Ë* (
˘l_¨ía_°©s_t
));

774 i‡(
˘l_°©s
.
¨ías
 =
NULL
) {

775 
ªt
 = 
åue
;

776 
œbñ_ªtu∫
;

778 
	`mem£t
(
˘l_°©s
.
¨ías
, 0, (˘l_°©s.
«ª«s
 + 1) *

779 (
˘l_¨ía_°©s_t
));

786 i‡(
c⁄fig_°©s
) {

787 
i
;

788 
i
 = 0; i <
˘l_°©s
.
«ª«s
; i++) {

789 i‡(
	`˘l_¨ía_öô
(&
˘l_°©s
.
¨ías
[
i
])) {

790 
j
;

791 
j
 = 0; j < 
i
; j++) {

792 
	`a0dÆloc
(

793 
˘l_°©s
.
¨ías
[
j
].
l°©s
);

794 
	`a0dÆloc
(

795 
˘l_°©s
.
¨ías
[
j
].
h°©s
);

797 
	`a0dÆloc
(
˘l_°©s
.
¨ías
);

798 
˘l_°©s
.
¨ías
 = 
NULL
;

799 
ªt
 = 
åue
;

800 
œbñ_ªtu∫
;

804 
˘l_°©s
.
¨ías
[˘l_°©s.
«ª«s
].
öôülized
 = 
åue
;

806 
˘l_ïoch
 = 0;

807 
	`˘l_ª‰esh
(
tsdn
);

808 
˘l_öôülized
 = 
åue
;

811 
ªt
 = 
Ál£
;

812 
œbñ_ªtu∫
:

813 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
˘l_mtx
);

814  (
ªt
);

815 
	}
}

818 
	$˘l_lookup
(
tsdn_t
 *
tsdn
, c⁄° *
«me
, 
˘l_node_t
 c⁄° **
node•
,

819 
size_t
 *
mibp
, size_à*
dïthp
)

821 
ªt
;

822 c⁄° *
ñm
, *
tdŸ
, *
dŸ
;

823 
size_t
 
ñí
, 
i
, 
j
;

824 c⁄° 
˘l_«med_node_t
 *
node
;

826 
ñm
 = 
«me
;

828 
dŸ
 = ((
tdŸ
 = 
	`°rchr
(
ñm
, '.')Ë!
NULL
) ?Ådot : strchr(elm, '\0');

829 
ñí
 = (
size_t
)((
uöçå_t
)
dŸ
 - (uöçå_t)
ñm
);

830 i‡(
ñí
 == 0) {

831 
ªt
 = 
ENOENT
;

832 
œbñ_ªtu∫
;

834 
node
 = 
su≥r_roŸ_node
;

835 
i
 = 0; i < *
dïthp
; i++) {

836 
	`as£π
(
node
);

837 
	`as£π
(
node
->
nchûdªn
 > 0);

838 i‡(
	`˘l_«med_node
(
node
->
chûdªn
Ë!
NULL
) {

839 c⁄° 
˘l_«med_node_t
 *
≤ode
 = 
node
;

842 
j
 = 0; j < 
node
->
nchûdªn
; j++) {

843 c⁄° 
˘l_«med_node_t
 *
chûd
 =

844 
	`˘l_«med_chûdªn
(
node
, 
j
);

845 i‡(
	`°æí
(
chûd
->
«me
Ë=
ñí
 &&

846 
	`°∫cmp
(
ñm
, 
chûd
->
«me
, 
ñí
) == 0) {

847 
node
 = 
chûd
;

848 i‡(
node•
 !
NULL
)

849 
node•
[
i
] =

850 (c⁄° 
˘l_node_t
 *)
node
;

851 
mibp
[
i
] = 
j
;

855 i‡(
node
 =
≤ode
) {

856 
ªt
 = 
ENOENT
;

857 
œbñ_ªtu∫
;

860 
uötmax_t
 
ödex
;

861 c⁄° 
˘l_ödexed_node_t
 *
öode
;

864 
ödex
 = 
	`mÆloc_°πoumax
(
ñm
, 
NULL
, 10);

865 i‡(
ödex
 =
UINTMAX_MAX
 || index > 
SIZE_T_MAX
) {

866 
ªt
 = 
ENOENT
;

867 
œbñ_ªtu∫
;

870 
öode
 = 
	`˘l_ödexed_node
(
node
->
chûdªn
);

871 
node
 = 
öode
->
	`ödex
(
tsdn
, 
mibp
, *
dïthp
, (
size_t
)
ödex
);

872 i‡(
node
 =
NULL
) {

873 
ªt
 = 
ENOENT
;

874 
œbñ_ªtu∫
;

877 i‡(
node•
 !
NULL
)

878 
node•
[
i
] = (c⁄° 
˘l_node_t
 *)
node
;

879 
mibp
[
i
] = (
size_t
)
ödex
;

882 i‡(
node
->
˘l
 !
NULL
) {

884 i‡(*
dŸ
 != '\0') {

889 
ªt
 = 
ENOENT
;

890 
œbñ_ªtu∫
;

893 *
dïthp
 = 
i
 + 1;

898 i‡(*
dŸ
 == '\0') {

900 
ªt
 = 
ENOENT
;

901 
œbñ_ªtu∫
;

903 
ñm
 = &
dŸ
[1];

904 
dŸ
 = ((
tdŸ
 = 
	`°rchr
(
ñm
, '.')Ë!
NULL
) ?Ådot :

905 
	`°rchr
(
ñm
, '\0');

906 
ñí
 = (
size_t
)((
uöçå_t
)
dŸ
 - (uöçå_t)
ñm
);

909 
ªt
 = 0;

910 
œbñ_ªtu∫
:

911  (
ªt
);

912 
	}
}

915 
	$˘l_by«me
(
tsd_t
 *
tsd
, c⁄° *
«me
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
,

916 *
√wp
, 
size_t
 
√wÀn
)

918 
ªt
;

919 
size_t
 
dïth
;

920 
˘l_node_t
 c⁄° *
nodes
[
CTL_MAX_DEPTH
];

921 
size_t
 
mib
[
CTL_MAX_DEPTH
];

922 c⁄° 
˘l_«med_node_t
 *
node
;

924 i‡(!
˘l_öôülized
 && 
	`˘l_öô
(
	`tsd_tsdn
(
tsd
))) {

925 
ªt
 = 
EAGAIN
;

926 
œbñ_ªtu∫
;

929 
dïth
 = 
CTL_MAX_DEPTH
;

930 
ªt
 = 
	`˘l_lookup
(
	`tsd_tsdn
(
tsd
), 
«me
, 
nodes
, 
mib
, &
dïth
);

931 i‡(
ªt
 != 0)

932 
œbñ_ªtu∫
;

934 
node
 = 
	`˘l_«med_node
(
nodes
[
dïth
-1]);

935 i‡(
node
 !
NULL
 &&Çode->
˘l
)

936 
ªt
 = 
node
->
	`˘l
(
tsd
, 
mib
, 
dïth
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
);

939 
ªt
 = 
ENOENT
;

942 
œbñ_ªtu∫
:

943 (
ªt
);

944 
	}
}

947 
	$˘l_«mëomib
(
tsdn_t
 *
tsdn
, c⁄° *
«me
, 
size_t
 *
mibp
, size_à*
mibÀ≈
)

949 
ªt
;

951 i‡(!
˘l_öôülized
 && 
	`˘l_öô
(
tsdn
)) {

952 
ªt
 = 
EAGAIN
;

953 
œbñ_ªtu∫
;

956 
ªt
 = 
	`˘l_lookup
(
tsdn
, 
«me
, 
NULL
, 
mibp
, 
mibÀ≈
);

957 
œbñ_ªtu∫
:

958 (
ªt
);

959 
	}
}

962 
	$˘l_bymib
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

963 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

965 
ªt
;

966 c⁄° 
˘l_«med_node_t
 *
node
;

967 
size_t
 
i
;

969 i‡(!
˘l_öôülized
 && 
	`˘l_öô
(
	`tsd_tsdn
(
tsd
))) {

970 
ªt
 = 
EAGAIN
;

971 
œbñ_ªtu∫
;

975 
node
 = 
su≥r_roŸ_node
;

976 
i
 = 0; i < 
mibÀn
; i++) {

977 
	`as£π
(
node
);

978 
	`as£π
(
node
->
nchûdªn
 > 0);

979 i‡(
	`˘l_«med_node
(
node
->
chûdªn
Ë!
NULL
) {

981 i‡(
node
->
nchûdªn
 <()
mib
[
i
]) {

982 
ªt
 = 
ENOENT
;

983 
œbñ_ªtu∫
;

985 
node
 = 
	`˘l_«med_chûdªn
“ode, 
mib
[
i
]);

987 c⁄° 
˘l_ödexed_node_t
 *
öode
;

990 
öode
 = 
	`˘l_ödexed_node
(
node
->
chûdªn
);

991 
node
 = 
öode
->
	`ödex
(
	`tsd_tsdn
(
tsd
), 
mib
, 
mibÀn
, mib[
i
]);

992 i‡(
node
 =
NULL
) {

993 
ªt
 = 
ENOENT
;

994 
œbñ_ªtu∫
;

1000 i‡(
node
 &&Çode->
˘l
)

1001 
ªt
 = 
node
->
	`˘l
(
tsd
, 
mib
, 
mibÀn
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
);

1004 
ªt
 = 
ENOENT
;

1007 
œbñ_ªtu∫
:

1008 (
ªt
);

1009 
	}
}

1011 
boﬁ


1012 
	$˘l_boŸ
()

1015 i‡(
	`mÆloc_muãx_öô
(&
˘l_mtx
, "˘l", 
WITNESS_RANK_CTL
))

1016  (
åue
);

1018 
˘l_öôülized
 = 
Ál£
;

1020  (
Ál£
);

1021 
	}
}

1024 
	$˘l_¥ef‹k
(
tsdn_t
 *
tsdn
)

1027 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
˘l_mtx
);

1028 
	}
}

1031 
	$˘l_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
)

1034 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
˘l_mtx
);

1035 
	}
}

1038 
	$˘l_po°f‹k_chûd
(
tsdn_t
 *
tsdn
)

1041 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
˘l_mtx
);

1042 
	}
}

1047 
	#READONLY
() do { \

1048 i‡(
√wp
 !
NULL
 || 
√wÀn
 != 0) { \

1049 
ªt
 = 
EPERM
; \

1050 
œbñ_ªtu∫
; \

1052 } 0)

	)

1054 
	#WRITEONLY
() do { \

1055 i‡(
ﬁdp
 !
NULL
 || 
ﬁdÀ≈
 != NULL) { \

1056 
ªt
 = 
EPERM
; \

1057 
œbñ_ªtu∫
; \

1059 } 0)

	)

1061 
	#READ_XOR_WRITE
() do { \

1062 i‡((
ﬁdp
 !
NULL
 && 
ﬁdÀ≈
 !NULLË&& (
√wp
 != NULL || \

1063 
√wÀn
 != 0)) { \

1064 
ªt
 = 
EPERM
; \

1065 
œbñ_ªtu∫
; \

1067 } 0)

	)

1069 
	#READ
(
v
, 
t
) do { \

1070 i‡(
ﬁdp
 !
NULL
 && 
ﬁdÀ≈
 != NULL) { \

1071 i‡(*
ﬁdÀ≈
 !(
t
)) { \

1072 
size_t
 
c›yÀn
 = ((
t
Ë<*
ﬁdÀ≈
) \

1073 ? (
t
Ë: *
ﬁdÀ≈
; \

1074 
	`mem˝y
(
ﬁdp
, (*)&(
v
), 
c›yÀn
); \

1075 
ªt
 = 
EINVAL
; \

1076 
œbñ_ªtu∫
; \

1078 *(
t
 *)
ﬁdp
 = (
v
); \

1080 } 0)

	)

1082 
	#WRITE
(
v
, 
t
) do { \

1083 i‡(
√wp
 !
NULL
) { \

1084 i‡(
√wÀn
 !(
t
)) { \

1085 
ªt
 = 
EINVAL
; \

1086 
œbñ_ªtu∫
; \

1088 (
v
Ë*(
t
 *)
√wp
; \

1090 } 0)

	)

1096 
	#CTL_RO_CLGEN
(
c
, 
l
, 
n
, 
v
, 
t
) \

1098 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1099 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1101 
ªt
; \

1102 
t
 
ﬁdvÆ
; \

1104 i‡(!(
c
)) \

1105  (
ENOENT
); \

1106 i‡(
l
) \

1107 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
); \

1108 
	`READONLY
(); \

1109 
ﬁdvÆ
 = (
v
); \

1110 
	`READ
(
ﬁdvÆ
, 
t
); \

1112 
ªt
 = 0; \

1113 
œbñ_ªtu∫
: \

1114 i‡(
l
) \

1115 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
); \

1116  (
ªt
); \

1117 }

	)

1119 
	#CTL_RO_CGEN
(
c
, 
n
, 
v
, 
t
) \

1121 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1122 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1124 
ªt
; \

1125 
t
 
ﬁdvÆ
; \

1127 i‡(!(
c
)) \

1128  (
ENOENT
); \

1129 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
); \

1130 
	`READONLY
(); \

1131 
ﬁdvÆ
 = (
v
); \

1132 
	`READ
(
ﬁdvÆ
, 
t
); \

1134 
ªt
 = 0; \

1135 
œbñ_ªtu∫
: \

1136 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
); \

1137  (
ªt
); \

1138 }

	)

1140 
	#CTL_RO_GEN
(
n
, 
v
, 
t
) \

1142 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1143 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1145 
ªt
; \

1146 
t
 
ﬁdvÆ
; \

1148 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
); \

1149 
	`READONLY
(); \

1150 
ﬁdvÆ
 = (
v
); \

1151 
	`READ
(
ﬁdvÆ
, 
t
); \

1153 
ªt
 = 0; \

1154 
œbñ_ªtu∫
: \

1155 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
); \

1156  (
ªt
); \

1157 }

	)

1163 
	#CTL_RO_NL_CGEN
(
c
, 
n
, 
v
, 
t
) \

1165 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1166 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1168 
ªt
; \

1169 
t
 
ﬁdvÆ
; \

1171 i‡(!(
c
)) \

1172  (
ENOENT
); \

1173 
	`READONLY
(); \

1174 
ﬁdvÆ
 = (
v
); \

1175 
	`READ
(
ﬁdvÆ
, 
t
); \

1177 
ªt
 = 0; \

1178 
œbñ_ªtu∫
: \

1179  (
ªt
); \

1180 }

	)

1182 
	#CTL_RO_NL_GEN
(
n
, 
v
, 
t
) \

1184 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1185 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1187 
ªt
; \

1188 
t
 
ﬁdvÆ
; \

1190 
	`READONLY
(); \

1191 
ﬁdvÆ
 = (
v
); \

1192 
	`READ
(
ﬁdvÆ
, 
t
); \

1194 
ªt
 = 0; \

1195 
œbñ_ªtu∫
: \

1196  (
ªt
); \

1197 }

	)

1199 
	#CTL_TSD_RO_NL_CGEN
(
c
, 
n
, 
m
, 
t
) \

1201 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1202 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1204 
ªt
; \

1205 
t
 
ﬁdvÆ
; \

1207 i‡(!(
c
)) \

1208  (
ENOENT
); \

1209 
	`READONLY
(); \

1210 
ﬁdvÆ
 = (
	`m
(
tsd
)); \

1211 
	`READ
(
ﬁdvÆ
, 
t
); \

1213 
ªt
 = 0; \

1214 
œbñ_ªtu∫
: \

1215  (
ªt
); \

1216 }

	)

1218 
	#CTL_RO_CONFIG_GEN
(
n
, 
t
) \

1220 
n
##
	`_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, \

1221 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
) \

1223 
ªt
; \

1224 
t
 
ﬁdvÆ
; \

1226 
	`READONLY
(); \

1227 
ﬁdvÆ
 = 
n
; \

1228 
	`READ
(
ﬁdvÆ
, 
t
); \

1230 
ªt
 = 0; \

1231 
œbñ_ªtu∫
: \

1232  (
ªt
); \

1233 }

	)

1237 
	$CTL_RO_NL_GEN
(
vîsi⁄
, 
JEMALLOC_VERSION
, const *)

1240 
	$ïoch_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1241 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1243 
ªt
;

1244 
UNUSED
 
uöt64_t
 
√wvÆ
;

1246 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1247 
	`WRITE
(
√wvÆ
, 
uöt64_t
);

1248 i‡(
√wp
 !
NULL
)

1249 
	`˘l_ª‰esh
(
	`tsd_tsdn
(
tsd
));

1250 
	`READ
(
˘l_ïoch
, 
uöt64_t
);

1252 
ªt
 = 0;

1253 
œbñ_ªtu∫
:

1254 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1255  (
ªt
);

1256 
	}
}

1260 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_ˇche_oblivious
, 
boﬁ
)

1261 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_debug
, 
boﬁ
)

1262 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_fûl
, 
boﬁ
)

1263 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_œzy_lock
, 
boﬁ
)

1264 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_mÆloc_c⁄f
, const *)

1265 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_munm≠
, 
boﬁ
)

1266 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_¥of
, 
boﬁ
)

1267 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_¥of_libgcc
, 
boﬁ
)

1268 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_¥of_libunwöd
, 
boﬁ
)

1269 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_°©s
, 
boﬁ
)

1270 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_tˇche
, 
boﬁ
)

1271 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_és
, 
boﬁ
)

1272 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_uåa˚
, 
boﬁ
)

1273 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_vÆgröd
, 
boﬁ
)

1274 
	$CTL_RO_CONFIG_GEN
(
c⁄fig_xmÆloc
, 
boﬁ
)

1278 
	$CTL_RO_NL_GEN
(
›t_ab‹t
, o±_ab‹t, 
boﬁ
)

1279 
	$CTL_RO_NL_GEN
(
›t_dss
, opt_dss, const *)

1280 
	$CTL_RO_NL_GEN
(
›t_lg_chunk
, o±_lg_chunk, 
size_t
)

1281 
	$CTL_RO_NL_GEN
(
›t_«ª«s
, opt_narenas, )

1282 
	$CTL_RO_NL_GEN
(
›t_purge
, 
purge_mode_«mes
[opt_purge], const *)

1283 
	$CTL_RO_NL_GEN
(
›t_lg_dúty_mu…
, o±_lg_dúty_mu…, 
ssize_t
)

1284 
	$CTL_RO_NL_GEN
(
›t_deˇy_time
, o±_deˇy_time, 
ssize_t
)

1285 
	$CTL_RO_NL_GEN
(
›t_°©s_¥öt
, o±_°©s_¥öt, 
boﬁ
)

1286 
	$CTL_RO_NL_CGEN
(
c⁄fig_fûl
, 
›t_junk
, opt_junk, const *)

1287 
	$CTL_RO_NL_CGEN
(
c⁄fig_fûl
, 
›t_qu¨™töe
, o±_qu¨™töe, 
size_t
)

1288 
	$CTL_RO_NL_CGEN
(
c⁄fig_fûl
, 
›t_ªdz⁄e
, o±_ªdz⁄e, 
boﬁ
)

1289 
	$CTL_RO_NL_CGEN
(
c⁄fig_fûl
, 
›t_zîo
, o±_zîo, 
boﬁ
)

1290 
	$CTL_RO_NL_CGEN
(
c⁄fig_uåa˚
, 
›t_uåa˚
, o±_uåa˚, 
boﬁ
)

1291 
	$CTL_RO_NL_CGEN
(
c⁄fig_xmÆloc
, 
›t_xmÆloc
, o±_xmÆloc, 
boﬁ
)

1292 
	$CTL_RO_NL_CGEN
(
c⁄fig_tˇche
, 
›t_tˇche
, o±_tˇche, 
boﬁ
)

1293 
	$CTL_RO_NL_CGEN
(
c⁄fig_tˇche
, 
›t_lg_tˇche_max
, o±_lg_tˇche_max, 
ssize_t
)

1294 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of
, o±_¥of, 
boﬁ
)

1295 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_¥efix
, opt_prof_prefix, const *)

1296 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_a˘ive
, o±_¥of_a˘ive, 
boﬁ
)

1297 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_thªad_a˘ive_öô
,

1298 
›t_¥of_thªad_a˘ive_öô
, 
boﬁ
)

1299 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_lg_¥of_ßm∂e
, o±_lg_¥of_ßm∂e, 
size_t
)

1300 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_accum
, o±_¥of_accum, 
boﬁ
)

1301 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_lg_¥of_öãrvÆ
, o±_lg_¥of_öãrvÆ, 
ssize_t
)

1302 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_gdump
, o±_¥of_gdump, 
boﬁ
)

1303 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_föÆ
, o±_¥of_föÆ, 
boﬁ
)

1304 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
›t_¥of_Àak
, o±_¥of_Àak, 
boﬁ
)

1309 
	$thªad_¨ía_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1310 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1312 
ªt
;

1313 
¨ía_t
 *
ﬁd¨ía
;

1314 
√wöd
, 
ﬁdöd
;

1316 
ﬁd¨ía
 = 
	`¨ía_choo£
(
tsd
, 
NULL
);

1317 i‡(
ﬁd¨ía
 =
NULL
)

1318  (
EAGAIN
);

1320 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1321 
√wöd
 = 
ﬁdöd
 = 
ﬁd¨ía
->
öd
;

1322 
	`WRITE
(
√wöd
, );

1323 
	`READ
(
ﬁdöd
, );

1324 i‡(
√wöd
 !
ﬁdöd
) {

1325 
¨ía_t
 *
√w¨ía
;

1327 i‡(
√wöd
 >
˘l_°©s
.
«ª«s
) {

1329 
ªt
 = 
EFAULT
;

1330 
œbñ_ªtu∫
;

1334 
√w¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
√wöd
, 
åue
);

1335 i‡(
√w¨ía
 =
NULL
) {

1336 
ªt
 = 
EAGAIN
;

1337 
œbñ_ªtu∫
;

1340 
	`¨ía_migøã
(
tsd
, 
ﬁdöd
, 
√wöd
);

1341 i‡(
c⁄fig_tˇche
) {

1342 
tˇche_t
 *
tˇche
 = 
	`tsd_tˇche_gë
(
tsd
);

1343 i‡(
tˇche
 !
NULL
) {

1344 
	`tˇche_¨ía_ªassocüã
(
	`tsd_tsdn
(
tsd
), 
tˇche
,

1345 
ﬁd¨ía
, 
√w¨ía
);

1350 
ªt
 = 0;

1351 
œbñ_ªtu∫
:

1352 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1353  (
ªt
);

1354 
	}
}

1356 
	$CTL_TSD_RO_NL_CGEN
(
c⁄fig_°©s
, 
thªad_Æloˇãd
, 
tsd_thªad_Æloˇãd_gë
,

1357 
uöt64_t
)

1358 
	$CTL_TSD_RO_NL_CGEN
(
c⁄fig_°©s
, 
thªad_Æloˇãdp
, 
tsd_thªad_Æloˇãdp_gë
,

1359 
uöt64_t
 *)

1360 
	$CTL_TSD_RO_NL_CGEN
(
c⁄fig_°©s
, 
thªad_dóŒoˇãd
, 
tsd_thªad_dóŒoˇãd_gë
,

1361 
uöt64_t
)

1362 
	$CTL_TSD_RO_NL_CGEN
(
c⁄fig_°©s
, 
thªad_dóŒoˇãdp
,

1363 
tsd_thªad_dóŒoˇãdp_gë
, 
uöt64_t
 *)

1366 
	$thªad_tˇche_íabÀd_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

1367 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1369 
ªt
;

1370 
boﬁ
 
ﬁdvÆ
;

1372 i‡(!
c⁄fig_tˇche
)

1373  (
ENOENT
);

1375 
ﬁdvÆ
 = 
	`tˇche_íabÀd_gë
();

1376 i‡(
√wp
 !
NULL
) {

1377 i‡(
√wÀn
 !(
boﬁ
)) {

1378 
ªt
 = 
EINVAL
;

1379 
œbñ_ªtu∫
;

1381 
	`tˇche_íabÀd_£t
(*(
boﬁ
 *)
√wp
);

1383 
	`READ
(
ﬁdvÆ
, 
boﬁ
);

1385 
ªt
 = 0;

1386 
œbñ_ªtu∫
:

1387  (
ªt
);

1388 
	}
}

1391 
	$thªad_tˇche_Êush_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

1392 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1394 
ªt
;

1396 i‡(!
c⁄fig_tˇche
)

1397  (
ENOENT
);

1399 
	`READONLY
();

1400 
	`WRITEONLY
();

1402 
	`tˇche_Êush
();

1404 
ªt
 = 0;

1405 
œbñ_ªtu∫
:

1406  (
ªt
);

1407 
	}
}

1410 
	$thªad_¥of_«me_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1411 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1413 
ªt
;

1415 i‡(!
c⁄fig_¥of
)

1416  (
ENOENT
);

1418 
	`READ_XOR_WRITE
();

1420 i‡(
√wp
 !
NULL
) {

1421 i‡(
√wÀn
 != (const *)) {

1422 
ªt
 = 
EINVAL
;

1423 
œbñ_ªtu∫
;

1426 i‡((
ªt
 = 
	`¥of_thªad_«me_£t
(
tsd
, *(c⁄° **)
√wp
)) !=

1428 
œbñ_ªtu∫
;

1430 c⁄° *
ﬁd«me
 = 
	`¥of_thªad_«me_gë
(
tsd
);

1431 
	`READ
(
ﬁd«me
, const *);

1434 
ªt
 = 0;

1435 
œbñ_ªtu∫
:

1436  (
ªt
);

1437 
	}
}

1440 
	$thªad_¥of_a˘ive_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1441 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1443 
ªt
;

1444 
boﬁ
 
ﬁdvÆ
;

1446 i‡(!
c⁄fig_¥of
)

1447  (
ENOENT
);

1449 
ﬁdvÆ
 = 
	`¥of_thªad_a˘ive_gë
(
tsd
);

1450 i‡(
√wp
 !
NULL
) {

1451 i‡(
√wÀn
 !(
boﬁ
)) {

1452 
ªt
 = 
EINVAL
;

1453 
œbñ_ªtu∫
;

1455 i‡(
	`¥of_thªad_a˘ive_£t
(
tsd
, *(
boﬁ
 *)
√wp
)) {

1456 
ªt
 = 
EAGAIN
;

1457 
œbñ_ªtu∫
;

1460 
	`READ
(
ﬁdvÆ
, 
boﬁ
);

1462 
ªt
 = 0;

1463 
œbñ_ªtu∫
:

1464  (
ªt
);

1465 
	}
}

1470 
	$tˇche_¸óã_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1471 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1473 
ªt
;

1474 
tˇche_öd
;

1476 i‡(!
c⁄fig_tˇche
)

1477  (
ENOENT
);

1479 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1480 
	`READONLY
();

1481 i‡(
	`tˇches_¸óã
(
	`tsd_tsdn
(
tsd
), &
tˇche_öd
)) {

1482 
ªt
 = 
EFAULT
;

1483 
œbñ_ªtu∫
;

1485 
	`READ
(
tˇche_öd
, );

1487 
ªt
 = 0;

1488 
œbñ_ªtu∫
:

1489 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1490  (
ªt
);

1491 
	}
}

1494 
	$tˇche_Êush_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1495 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1497 
ªt
;

1498 
tˇche_öd
;

1500 i‡(!
c⁄fig_tˇche
)

1501  (
ENOENT
);

1503 
	`WRITEONLY
();

1504 
tˇche_öd
 = 
UINT_MAX
;

1505 
	`WRITE
(
tˇche_öd
, );

1506 i‡(
tˇche_öd
 =
UINT_MAX
) {

1507 
ªt
 = 
EFAULT
;

1508 
œbñ_ªtu∫
;

1510 
	`tˇches_Êush
(
tsd
, 
tˇche_öd
);

1512 
ªt
 = 0;

1513 
œbñ_ªtu∫
:

1514  (
ªt
);

1515 
	}
}

1518 
	$tˇche_de°roy_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1519 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1521 
ªt
;

1522 
tˇche_öd
;

1524 i‡(!
c⁄fig_tˇche
)

1525  (
ENOENT
);

1527 
	`WRITEONLY
();

1528 
tˇche_öd
 = 
UINT_MAX
;

1529 
	`WRITE
(
tˇche_öd
, );

1530 i‡(
tˇche_öd
 =
UINT_MAX
) {

1531 
ªt
 = 
EFAULT
;

1532 
œbñ_ªtu∫
;

1534 
	`tˇches_de°roy
(
tsd
, 
tˇche_öd
);

1536 
ªt
 = 0;

1537 
œbñ_ªtu∫
:

1538  (
ªt
);

1539 
	}
}

1544 
	$¨ía_i_purge
(
tsdn_t
 *
tsdn
, 
¨ía_öd
, 
boﬁ
 
Æl
)

1547 
	`mÆloc_muãx_lock
(
tsdn
, &
˘l_mtx
);

1549 
«ª«s
 = 
˘l_°©s
.narenas;

1551 i‡(
¨ía_öd
 =
«ª«s
) {

1552 
i
;

1553 
	`VARIABLE_ARRAY
(
¨ía_t
 *, 
èª«s
, 
«ª«s
);

1555 
i
 = 0; i < 
«ª«s
; i++)

1556 
èª«s
[
i
] = 
	`¨ía_gë
(
tsdn
, i, 
Ál£
);

1562 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
˘l_mtx
);

1564 
i
 = 0; i < 
«ª«s
; i++) {

1565 i‡(
èª«s
[
i
] !
NULL
)

1566 
	`¨ía_purge
(
tsdn
, 
èª«s
[
i
], 
Æl
);

1569 
¨ía_t
 *
èª«
;

1571 
	`as£π
(
¨ía_öd
 < 
«ª«s
);

1573 
èª«
 = 
	`¨ía_gë
(
tsdn
, 
¨ía_öd
, 
Ál£
);

1576 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
˘l_mtx
);

1578 i‡(
èª«
 !
NULL
)

1579 
	`¨ía_purge
(
tsdn
, 
èª«
, 
Æl
);

1582 
	}
}

1585 
	$¨ía_i_purge_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1586 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1588 
ªt
;

1590 
	`READONLY
();

1591 
	`WRITEONLY
();

1592 
	`¨ía_i_purge
(
	`tsd_tsdn
(
tsd
), ()
mib
[1], 
åue
);

1594 
ªt
 = 0;

1595 
œbñ_ªtu∫
:

1596  (
ªt
);

1597 
	}
}

1600 
	$¨ía_i_deˇy_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1601 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1603 
ªt
;

1605 
	`READONLY
();

1606 
	`WRITEONLY
();

1607 
	`¨ía_i_purge
(
	`tsd_tsdn
(
tsd
), ()
mib
[1], 
Ál£
);

1609 
ªt
 = 0;

1610 
œbñ_ªtu∫
:

1611  (
ªt
);

1612 
	}
}

1615 
	$¨ía_i_ª£t_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1616 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1618 
ªt
;

1619 
¨ía_öd
;

1620 
¨ía_t
 *
¨ía
;

1622 
	`READONLY
();

1623 
	`WRITEONLY
();

1625 i‡((
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
)Ë|| (
c⁄fig_fûl
 &&

1626 
	`u∆ikñy
(
›t_qu¨™töe
))) {

1627 
ªt
 = 
EFAULT
;

1628 
œbñ_ªtu∫
;

1631 
¨ía_öd
 = ()
mib
[1];

1632 i‡(
c⁄fig_debug
) {

1633 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1634 
	`as£π
(
¨ía_öd
 < 
˘l_°©s
.
«ª«s
);

1635 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1637 
	`as£π
(
¨ía_öd
 >
›t_«ª«s
);

1639 
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
Ál£
);

1641 
	`¨ía_ª£t
(
tsd
, 
¨ía
);

1643 
ªt
 = 0;

1644 
œbñ_ªtu∫
:

1645  (
ªt
);

1646 
	}
}

1649 
	$¨ía_i_dss_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1650 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1652 
ªt
;

1653 c⁄° *
dss
 = 
NULL
;

1654 
¨ía_öd
 = ()
mib
[1];

1655 
dss_¥ec_t
 
dss_¥ec_ﬁd
 = 
dss_¥ec_limô
;

1656 
dss_¥ec_t
 
dss_¥ec
 = 
dss_¥ec_limô
;

1658 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1659 
	`WRITE
(
dss
, const *);

1660 i‡(
dss
 !
NULL
) {

1661 
i
;

1662 
boﬁ
 
m©ch
 = 
Ál£
;

1664 
i
 = 0; i < 
dss_¥ec_limô
; i++) {

1665 i‡(
	`°rcmp
(
dss_¥ec_«mes
[
i
], 
dss
) == 0) {

1666 
dss_¥ec
 = 
i
;

1667 
m©ch
 = 
åue
;

1672 i‡(!
m©ch
) {

1673 
ªt
 = 
EINVAL
;

1674 
œbñ_ªtu∫
;

1678 i‡(
¨ía_öd
 < 
˘l_°©s
.
«ª«s
) {

1679 
¨ía_t
 *
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
Ál£
);

1680 i‡(
¨ía
 =
NULL
 || (
dss_¥ec
 !
dss_¥ec_limô
 &&

1681 
	`¨ía_dss_¥ec_£t
(
	`tsd_tsdn
(
tsd
), 
¨ía
, 
dss_¥ec
))) {

1682 
ªt
 = 
EFAULT
;

1683 
œbñ_ªtu∫
;

1685 
dss_¥ec_ﬁd
 = 
	`¨ía_dss_¥ec_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

1687 i‡(
dss_¥ec
 !
dss_¥ec_limô
 &&

1688 
	`chunk_dss_¥ec_£t
(
	`tsd_tsdn
(
tsd
), 
dss_¥ec
)) {

1689 
ªt
 = 
EFAULT
;

1690 
œbñ_ªtu∫
;

1692 
dss_¥ec_ﬁd
 = 
	`chunk_dss_¥ec_gë
(
	`tsd_tsdn
(
tsd
));

1695 
dss
 = 
dss_¥ec_«mes
[
dss_¥ec_ﬁd
];

1696 
	`READ
(
dss
, const *);

1698 
ªt
 = 0;

1699 
œbñ_ªtu∫
:

1700 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1701  (
ªt
);

1702 
	}
}

1705 
	$¨ía_i_lg_dúty_mu…_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

1706 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1708 
ªt
;

1709 
¨ía_öd
 = ()
mib
[1];

1710 
¨ía_t
 *
¨ía
;

1712 
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
Ál£
);

1713 i‡(
¨ía
 =
NULL
) {

1714 
ªt
 = 
EFAULT
;

1715 
œbñ_ªtu∫
;

1718 i‡(
ﬁdp
 !
NULL
 && 
ﬁdÀ≈
 != NULL) {

1719 
size_t
 
ﬁdvÆ
 = 
	`¨ía_lg_dúty_mu…_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

1720 
	`READ
(
ﬁdvÆ
, 
ssize_t
);

1722 i‡(
√wp
 !
NULL
) {

1723 i‡(
√wÀn
 !(
ssize_t
)) {

1724 
ªt
 = 
EINVAL
;

1725 
œbñ_ªtu∫
;

1727 i‡(
	`¨ía_lg_dúty_mu…_£t
(
	`tsd_tsdn
(
tsd
), 
¨ía
,

1728 *(
ssize_t
 *)
√wp
)) {

1729 
ªt
 = 
EFAULT
;

1730 
œbñ_ªtu∫
;

1734 
ªt
 = 0;

1735 
œbñ_ªtu∫
:

1736  (
ªt
);

1737 
	}
}

1740 
	$¨ía_i_deˇy_time_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1741 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1743 
ªt
;

1744 
¨ía_öd
 = ()
mib
[1];

1745 
¨ía_t
 *
¨ía
;

1747 
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
Ál£
);

1748 i‡(
¨ía
 =
NULL
) {

1749 
ªt
 = 
EFAULT
;

1750 
œbñ_ªtu∫
;

1753 i‡(
ﬁdp
 !
NULL
 && 
ﬁdÀ≈
 != NULL) {

1754 
size_t
 
ﬁdvÆ
 = 
	`¨ía_deˇy_time_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

1755 
	`READ
(
ﬁdvÆ
, 
ssize_t
);

1757 i‡(
√wp
 !
NULL
) {

1758 i‡(
√wÀn
 !(
ssize_t
)) {

1759 
ªt
 = 
EINVAL
;

1760 
œbñ_ªtu∫
;

1762 i‡(
	`¨ía_deˇy_time_£t
(
	`tsd_tsdn
(
tsd
), 
¨ía
,

1763 *(
ssize_t
 *)
√wp
)) {

1764 
ªt
 = 
EFAULT
;

1765 
œbñ_ªtu∫
;

1769 
ªt
 = 0;

1770 
œbñ_ªtu∫
:

1771  (
ªt
);

1772 
	}
}

1775 
	$¨ía_i_chunk_hooks_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

1776 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1778 
ªt
;

1779 
¨ía_öd
 = ()
mib
[1];

1780 
¨ía_t
 *
¨ía
;

1782 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1783 i‡(
¨ía_öd
 < 
	`«ª«s_tŸÆ_gë
(Ë&& (
¨ía
 =

1784 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
Ál£
)Ë!
NULL
) {

1785 i‡(
√wp
 !
NULL
) {

1786 
chunk_hooks_t
 
ﬁd_chunk_hooks
, 
√w_chunk_hooks
;

1787 
	`WRITE
(
√w_chunk_hooks
, 
chunk_hooks_t
);

1788 
ﬁd_chunk_hooks
 = 
	`chunk_hooks_£t
(
	`tsd_tsdn
(
tsd
), 
¨ía
,

1789 &
√w_chunk_hooks
);

1790 
	`READ
(
ﬁd_chunk_hooks
, 
chunk_hooks_t
);

1792 
chunk_hooks_t
 
ﬁd_chunk_hooks
 =

1793 
	`chunk_hooks_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

1794 
	`READ
(
ﬁd_chunk_hooks
, 
chunk_hooks_t
);

1797 
ªt
 = 
EFAULT
;

1798 
œbñ_ªtu∫
;

1800 
ªt
 = 0;

1801 
œbñ_ªtu∫
:

1802 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1803  (
ªt
);

1804 
	}
}

1806 c⁄° 
˘l_«med_node_t
 *

1807 
	$¨ía_i_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, size_à
i
)

1809 c⁄° 
˘l_«med_node_t
 *
ªt
;

1811 
	`mÆloc_muãx_lock
(
tsdn
, &
˘l_mtx
);

1812 i‡(
i
 > 
˘l_°©s
.
«ª«s
) {

1813 
ªt
 = 
NULL
;

1814 
œbñ_ªtu∫
;

1817 
ªt
 = 
su≥r_¨ía_i_node
;

1818 
œbñ_ªtu∫
:

1819 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
˘l_mtx
);

1820  (
ªt
);

1821 
	}
}

1826 
	$¨ías_«ª«s_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1827 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1829 
ªt
;

1830 
«ª«s
;

1832 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1833 
	`READONLY
();

1834 i‡(*
ﬁdÀ≈
 != ()) {

1835 
ªt
 = 
EINVAL
;

1836 
œbñ_ªtu∫
;

1838 
«ª«s
 = 
˘l_°©s
.narenas;

1839 
	`READ
(
«ª«s
, );

1841 
ªt
 = 0;

1842 
œbñ_ªtu∫
:

1843 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1844  (
ªt
);

1845 
	}
}

1848 
	$¨ías_öôülized_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1849 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1851 
ªt
;

1852 
ƒód
, 
i
;

1854 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1855 
	`READONLY
();

1856 i‡(*
ﬁdÀ≈
 !
˘l_°©s
.
«ª«s
 * (
boﬁ
)) {

1857 
ªt
 = 
EINVAL
;

1858 
ƒód
 = (*
ﬁdÀ≈
 < 
˘l_°©s
.
«ª«s
 * (
boﬁ
))

1859 ? ()(*
ﬁdÀ≈
 / (
boﬁ
)Ë: 
˘l_°©s
.
«ª«s
;

1861 
ªt
 = 0;

1862 
ƒód
 = 
˘l_°©s
.
«ª«s
;

1865 
i
 = 0; i < 
ƒód
; i++)

1866 ((
boﬁ
 *)
ﬁdp
)[
i
] = 
˘l_°©s
.
¨ías
[i].
öôülized
;

1868 
œbñ_ªtu∫
:

1869 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1870  (
ªt
);

1871 
	}
}

1874 
	$¨ías_lg_dúty_mu…_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

1875 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1877 
ªt
;

1879 i‡(
ﬁdp
 !
NULL
 && 
ﬁdÀ≈
 != NULL) {

1880 
size_t
 
ﬁdvÆ
 = 
	`¨ía_lg_dúty_mu…_deÁu…_gë
();

1881 
	`READ
(
ﬁdvÆ
, 
ssize_t
);

1883 i‡(
√wp
 !
NULL
) {

1884 i‡(
√wÀn
 !(
ssize_t
)) {

1885 
ªt
 = 
EINVAL
;

1886 
œbñ_ªtu∫
;

1888 i‡(
	`¨ía_lg_dúty_mu…_deÁu…_£t
(*(
ssize_t
 *)
√wp
)) {

1889 
ªt
 = 
EFAULT
;

1890 
œbñ_ªtu∫
;

1894 
ªt
 = 0;

1895 
œbñ_ªtu∫
:

1896  (
ªt
);

1897 
	}
}

1900 
	$¨ías_deˇy_time_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1901 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1903 
ªt
;

1905 i‡(
ﬁdp
 !
NULL
 && 
ﬁdÀ≈
 != NULL) {

1906 
size_t
 
ﬁdvÆ
 = 
	`¨ía_deˇy_time_deÁu…_gë
();

1907 
	`READ
(
ﬁdvÆ
, 
ssize_t
);

1909 i‡(
√wp
 !
NULL
) {

1910 i‡(
√wÀn
 !(
ssize_t
)) {

1911 
ªt
 = 
EINVAL
;

1912 
œbñ_ªtu∫
;

1914 i‡(
	`¨ía_deˇy_time_deÁu…_£t
(*(
ssize_t
 *)
√wp
)) {

1915 
ªt
 = 
EFAULT
;

1916 
œbñ_ªtu∫
;

1920 
ªt
 = 0;

1921 
œbñ_ªtu∫
:

1922  (
ªt
);

1923 
	}
}

1925 
	$CTL_RO_NL_GEN
(
¨ías_qu™tum
, 
QUANTUM
, 
size_t
)

1926 
	$CTL_RO_NL_GEN
(
¨ías_∑ge
, 
PAGE
, 
size_t
)

1927 
	$CTL_RO_NL_CGEN
(
c⁄fig_tˇche
, 
¨ías_tˇche_max
, 
tˇche_max˛ass
, 
size_t
)

1928 
	$CTL_RO_NL_GEN
(
¨ías_nbös
, 
NBINS
, )

1929 
	$CTL_RO_NL_CGEN
(
c⁄fig_tˇche
, 
¨ías_nhbös
, 
nhbös
, )

1930 
	$CTL_RO_NL_GEN
(
¨ías_bö_i_size
, 
¨ía_bö_öfo
[
mib
[2]].
ªg_size
, 
size_t
)

1931 
	$CTL_RO_NL_GEN
(
¨ías_bö_i_ƒegs
, 
¨ía_bö_öfo
[
mib
[2]].
ƒegs
, 
uöt32_t
)

1932 
	$CTL_RO_NL_GEN
(
¨ías_bö_i_run_size
, 
¨ía_bö_öfo
[
mib
[2]].
run_size
, 
size_t
)

1933 c⁄° 
˘l_«med_node_t
 *

1934 
	$¨ías_bö_i_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, size_à
i
)

1937 i‡(
i
 > 
NBINS
)

1938  (
NULL
);

1939  (
su≥r_¨ías_bö_i_node
);

1940 
	}
}

1942 
	$CTL_RO_NL_GEN
(
¨ías_∆runs
, 
∆˛as£s
, )

1943 
	`CTL_RO_NL_GEN
(
¨ías_Ãun_i_size
, 
	`ödex2size
(
NBINS
+(
szöd_t
)
mib
[2]), 
size_t
)

1944 c⁄° 
˘l_«med_node_t
 *

1945 
	$¨ías_Ãun_i_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, size_à
i
)

1948 i‡(
i
 > 
∆˛as£s
)

1949  (
NULL
);

1950  (
su≥r_¨ías_Ãun_i_node
);

1951 
	}
}

1953 
	$CTL_RO_NL_GEN
(
¨ías_nhchunks
, 
nh˛as£s
, )

1954 
	`CTL_RO_NL_GEN
(
¨ías_hchunk_i_size
, 
	`ödex2size
(
NBINS
+
∆˛as£s
+(
szöd_t
)
mib
[2]),

1955 
size_t
)

1956 c⁄° 
˘l_«med_node_t
 *

1957 
	$¨ías_hchunk_i_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, size_à
i
)

1960 i‡(
i
 > 
nh˛as£s
)

1961  (
NULL
);

1962  (
su≥r_¨ías_hchunk_i_node
);

1963 
	}
}

1966 
	$¨ías_exãnd_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

1967 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1969 
ªt
;

1970 
«ª«s
;

1972 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1973 
	`READONLY
();

1974 i‡(
	`˘l_grow
(
	`tsd_tsdn
(
tsd
))) {

1975 
ªt
 = 
EAGAIN
;

1976 
œbñ_ªtu∫
;

1978 
«ª«s
 = 
˘l_°©s
.narenas - 1;

1979 
	`READ
(
«ª«s
, );

1981 
ªt
 = 0;

1982 
œbñ_ªtu∫
:

1983 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
˘l_mtx
);

1984  (
ªt
);

1985 
	}
}

1990 
	$¥of_thªad_a˘ive_öô_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

1991 *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

1993 
ªt
;

1994 
boﬁ
 
ﬁdvÆ
;

1996 i‡(!
c⁄fig_¥of
)

1997  (
ENOENT
);

1999 i‡(
√wp
 !
NULL
) {

2000 i‡(
√wÀn
 !(
boﬁ
)) {

2001 
ªt
 = 
EINVAL
;

2002 
œbñ_ªtu∫
;

2004 
ﬁdvÆ
 = 
	`¥of_thªad_a˘ive_öô_£t
(
	`tsd_tsdn
(
tsd
),

2005 *(
boﬁ
 *)
√wp
);

2007 
ﬁdvÆ
 = 
	`¥of_thªad_a˘ive_öô_gë
(
	`tsd_tsdn
(
tsd
));

2008 
	`READ
(
ﬁdvÆ
, 
boﬁ
);

2010 
ªt
 = 0;

2011 
œbñ_ªtu∫
:

2012  (
ªt
);

2013 
	}
}

2016 
	$¥of_a˘ive_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

2017 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

2019 
ªt
;

2020 
boﬁ
 
ﬁdvÆ
;

2022 i‡(!
c⁄fig_¥of
)

2023  (
ENOENT
);

2025 i‡(
√wp
 !
NULL
) {

2026 i‡(
√wÀn
 !(
boﬁ
)) {

2027 
ªt
 = 
EINVAL
;

2028 
œbñ_ªtu∫
;

2030 
ﬁdvÆ
 = 
	`¥of_a˘ive_£t
(
	`tsd_tsdn
(
tsd
), *(
boﬁ
 *)
√wp
);

2032 
ﬁdvÆ
 = 
	`¥of_a˘ive_gë
(
	`tsd_tsdn
(
tsd
));

2033 
	`READ
(
ﬁdvÆ
, 
boﬁ
);

2035 
ªt
 = 0;

2036 
œbñ_ªtu∫
:

2037  (
ªt
);

2038 
	}
}

2041 
	$¥of_dump_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

2042 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

2044 
ªt
;

2045 c⁄° *
fûíame
 = 
NULL
;

2047 i‡(!
c⁄fig_¥of
)

2048  (
ENOENT
);

2050 
	`WRITEONLY
();

2051 
	`WRITE
(
fûíame
, const *);

2053 i‡(
	`¥of_mdump
(
tsd
, 
fûíame
)) {

2054 
ªt
 = 
EFAULT
;

2055 
œbñ_ªtu∫
;

2058 
ªt
 = 0;

2059 
œbñ_ªtu∫
:

2060  (
ªt
);

2061 
	}
}

2064 
	$¥of_gdump_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

2065 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

2067 
ªt
;

2068 
boﬁ
 
ﬁdvÆ
;

2070 i‡(!
c⁄fig_¥of
)

2071  (
ENOENT
);

2073 i‡(
√wp
 !
NULL
) {

2074 i‡(
√wÀn
 !(
boﬁ
)) {

2075 
ªt
 = 
EINVAL
;

2076 
œbñ_ªtu∫
;

2078 
ﬁdvÆ
 = 
	`¥of_gdump_£t
(
	`tsd_tsdn
(
tsd
), *(
boﬁ
 *)
√wp
);

2080 
ﬁdvÆ
 = 
	`¥of_gdump_gë
(
	`tsd_tsdn
(
tsd
));

2081 
	`READ
(
ﬁdvÆ
, 
boﬁ
);

2083 
ªt
 = 0;

2084 
œbñ_ªtu∫
:

2085  (
ªt
);

2086 
	}
}

2089 
	$¥of_ª£t_˘l
(
tsd_t
 *
tsd
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
,

2090 
size_t
 *
ﬁdÀ≈
, *
√wp
, size_à
√wÀn
)

2092 
ªt
;

2093 
size_t
 
lg_ßm∂e
 = 
lg_¥of_ßm∂e
;

2095 i‡(!
c⁄fig_¥of
)

2096  (
ENOENT
);

2098 
	`WRITEONLY
();

2099 
	`WRITE
(
lg_ßm∂e
, 
size_t
);

2100 i‡(
lg_ßm∂e
 >((
uöt64_t
) << 3))

2101 
lg_ßm∂e
 = ((
uöt64_t
) << 3) - 1;

2103 
	`¥of_ª£t
(
	`tsd_tsdn
(
tsd
), 
lg_ßm∂e
);

2105 
ªt
 = 0;

2106 
œbñ_ªtu∫
:

2107  (
ªt
);

2108 
	}
}

2110 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
¥of_öãrvÆ
,Örof_öãrvÆ, 
uöt64_t
)

2111 
	$CTL_RO_NL_CGEN
(
c⁄fig_¥of
, 
lg_¥of_ßm∂e
,Üg_¥of_ßm∂e, 
size_t
)

2115 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_ˇ˘ive
, &°©s_ˇ˘ive, 
size_t
 *)

2116 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_Æloˇãd
, 
˘l_°©s
.
Æloˇãd
, 
size_t
)

2117 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_a˘ive
, 
˘l_°©s
.
a˘ive
, 
size_t
)

2118 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_mëad©a
, 
˘l_°©s
.
mëad©a
, 
size_t
)

2119 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_ªsidít
, 
˘l_°©s
.
ªsidít
, 
size_t
)

2120 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_m≠≥d
, 
˘l_°©s
.
m≠≥d
, 
size_t
)

2121 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_ªèöed
, 
˘l_°©s
.
ªèöed
, 
size_t
)

2123 
	$CTL_RO_GEN
(
°©s_¨ías_i_dss
, 
˘l_°©s
.
¨ías
[
mib
[2]].
dss
, const *)

2124 
	$CTL_RO_GEN
(
°©s_¨ías_i_lg_dúty_mu…
, 
˘l_°©s
.
¨ías
[
mib
[2]].
lg_dúty_mu…
,

2125 
ssize_t
)

2126 
	$CTL_RO_GEN
(
°©s_¨ías_i_deˇy_time
, 
˘l_°©s
.
¨ías
[
mib
[2]].
deˇy_time
,

2127 
ssize_t
)

2128 
	$CTL_RO_GEN
(
°©s_¨ías_i_¡hªads
, 
˘l_°©s
.
¨ías
[
mib
[2]].
¡hªads
, )

2129 
	$CTL_RO_GEN
(
°©s_¨ías_i_∑˘ive
, 
˘l_°©s
.
¨ías
[
mib
[2]].
∑˘ive
, 
size_t
)

2130 
	$CTL_RO_GEN
(
°©s_¨ías_i_pdúty
, 
˘l_°©s
.
¨ías
[
mib
[2]].
pdúty
, 
size_t
)

2131 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_m≠≥d
,

2132 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
m≠≥d
, 
size_t
)

2133 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_ªèöed
,

2134 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
ªèöed
, 
size_t
)

2135 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_≈urge
,

2136 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
≈urge
, 
uöt64_t
)

2137 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_nmadvi£
,

2138 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
nmadvi£
, 
uöt64_t
)

2139 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_purged
,

2140 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
purged
, 
uöt64_t
)

2141 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_mëad©a_m≠≥d
,

2142 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
mëad©a_m≠≥d
, 
size_t
)

2143 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_mëad©a_Æloˇãd
,

2144 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
mëad©a_Æloˇãd
, 
size_t
)

2146 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_smÆl_Æloˇãd
,

2147 
˘l_°©s
.
¨ías
[
mib
[2]].
Æloˇãd_smÆl
, 
size_t
)

2148 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_smÆl_nmÆloc
,

2149 
˘l_°©s
.
¨ías
[
mib
[2]].
nmÆloc_smÆl
, 
uöt64_t
)

2150 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_smÆl_ndÆloc
,

2151 
˘l_°©s
.
¨ías
[
mib
[2]].
ndÆloc_smÆl
, 
uöt64_t
)

2152 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_smÆl_ƒeque°s
,

2153 
˘l_°©s
.
¨ías
[
mib
[2]].
ƒeque°s_smÆl
, 
uöt64_t
)

2154 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_œrge_Æloˇãd
,

2155 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
Æloˇãd_œrge
, 
size_t
)

2156 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_œrge_nmÆloc
,

2157 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
nmÆloc_œrge
, 
uöt64_t
)

2158 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_œrge_ndÆloc
,

2159 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
ndÆloc_œrge
, 
uöt64_t
)

2160 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_œrge_ƒeque°s
,

2161 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
ƒeque°s_œrge
, 
uöt64_t
)

2162 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_huge_Æloˇãd
,

2163 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
Æloˇãd_huge
, 
size_t
)

2164 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_huge_nmÆloc
,

2165 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
nmÆloc_huge
, 
uöt64_t
)

2166 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_huge_ndÆloc
,

2167 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
ndÆloc_huge
, 
uöt64_t
)

2168 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_huge_ƒeque°s
,

2169 
˘l_°©s
.
¨ías
[
mib
[2]].
a°©s
.
nmÆloc_huge
, 
uöt64_t
)

2171 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_nmÆloc
,

2172 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
nmÆloc
, 
uöt64_t
)

2173 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_ndÆloc
,

2174 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
ndÆloc
, 
uöt64_t
)

2175 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_ƒeque°s
,

2176 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
ƒeque°s
, 
uöt64_t
)

2177 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_cuºegs
,

2178 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
cuºegs
, 
size_t
)

2179 
	$CTL_RO_CGEN
(
c⁄fig_°©s
 && 
c⁄fig_tˇche
, 
°©s_¨ías_i_bös_j_nfûls
,

2180 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
nfûls
, 
uöt64_t
)

2181 
	$CTL_RO_CGEN
(
c⁄fig_°©s
 && 
c⁄fig_tˇche
, 
°©s_¨ías_i_bös_j_nÊushes
,

2182 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
nÊushes
, 
uöt64_t
)

2183 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_ƒuns
,

2184 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
ƒuns
, 
uöt64_t
)

2185 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_ƒîuns
,

2186 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
ªruns
, 
uöt64_t
)

2187 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_bös_j_cuºuns
,

2188 
˘l_°©s
.
¨ías
[
mib
[2]].
b°©s
[mib[4]].
cuºuns
, 
size_t
)

2190 c⁄° 
˘l_«med_node_t
 *

2191 
	$°©s_¨ías_i_bös_j_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

2192 
size_t
 
j
)

2195 i‡(
j
 > 
NBINS
)

2196  (
NULL
);

2197  (
su≥r_°©s_¨ías_i_bös_j_node
);

2198 
	}
}

2200 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_Ãuns_j_nmÆloc
,

2201 
˘l_°©s
.
¨ías
[
mib
[2]].
l°©s
[mib[4]].
nmÆloc
, 
uöt64_t
)

2202 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_Ãuns_j_ndÆloc
,

2203 
˘l_°©s
.
¨ías
[
mib
[2]].
l°©s
[mib[4]].
ndÆloc
, 
uöt64_t
)

2204 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_Ãuns_j_ƒeque°s
,

2205 
˘l_°©s
.
¨ías
[
mib
[2]].
l°©s
[mib[4]].
ƒeque°s
, 
uöt64_t
)

2206 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_Ãuns_j_cuºuns
,

2207 
˘l_°©s
.
¨ías
[
mib
[2]].
l°©s
[mib[4]].
cuºuns
, 
size_t
)

2209 c⁄° 
˘l_«med_node_t
 *

2210 
	$°©s_¨ías_i_Ãuns_j_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

2211 
size_t
 
j
)

2214 i‡(
j
 > 
∆˛as£s
)

2215  (
NULL
);

2216  (
su≥r_°©s_¨ías_i_Ãuns_j_node
);

2217 
	}
}

2219 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_hchunks_j_nmÆloc
,

2220 
˘l_°©s
.
¨ías
[
mib
[2]].
h°©s
[mib[4]].
nmÆloc
, 
uöt64_t
)

2221 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_hchunks_j_ndÆloc
,

2222 
˘l_°©s
.
¨ías
[
mib
[2]].
h°©s
[mib[4]].
ndÆloc
, 
uöt64_t
)

2223 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_hchunks_j_ƒeque°s
,

2224 
˘l_°©s
.
¨ías
[
mib
[2]].
h°©s
[mib[4]].
nmÆloc
,

2225 
uöt64_t
)

2226 
	$CTL_RO_CGEN
(
c⁄fig_°©s
, 
°©s_¨ías_i_hchunks_j_curhchunks
,

2227 
˘l_°©s
.
¨ías
[
mib
[2]].
h°©s
[mib[4]].
curhchunks
, 
size_t
)

2229 c⁄° 
˘l_«med_node_t
 *

2230 
	$°©s_¨ías_i_hchunks_j_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
,

2231 
size_t
 
j
)

2234 i‡(
j
 > 
nh˛as£s
)

2235  (
NULL
);

2236  (
su≥r_°©s_¨ías_i_hchunks_j_node
);

2237 
	}
}

2239 c⁄° 
˘l_«med_node_t
 *

2240 
	$°©s_¨ías_i_ödex
(
tsdn_t
 *
tsdn
, c⁄° 
size_t
 *
mib
, size_à
mibÀn
, size_à
i
)

2242 c⁄° 
˘l_«med_node_t
 * 
ªt
;

2244 
	`mÆloc_muãx_lock
(
tsdn
, &
˘l_mtx
);

2245 i‡(
i
 > 
˘l_°©s
.
«ª«s
 || !˘l_°©s.
¨ías
[i].
öôülized
) {

2246 
ªt
 = 
NULL
;

2247 
œbñ_ªtu∫
;

2250 
ªt
 = 
su≥r_°©s_¨ías_i_node
;

2251 
œbñ_ªtu∫
:

2252 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
˘l_mtx
);

2253  (
ªt
);

2254 
	}
}

	@dep/jemalloc-4.2.0/src/extent.c

1 
	#JEMALLOC_EXTENT_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

6 
JEMALLOC_INLINE_C
 
size_t


7 
	$exã¡_qu™tize
(
size_t
 
size
)

14  (
	`ödex2size
(
	`size2ödex
(
size
 + 1) - 1));

15 
	}
}

17 
JEMALLOC_INLINE_C
 

18 
	$exã¡_szad_comp
(c⁄° 
exã¡_node_t
 *
a
, c⁄°Éxã¡_node_à*
b
)

20 
ªt
;

21 
size_t
 
a_qsize
 = 
	`exã¡_qu™tize
(
	`exã¡_node_size_gë
(
a
));

22 
size_t
 
b_qsize
 = 
	`exã¡_qu™tize
(
	`exã¡_node_size_gë
(
b
));

28 
ªt
 = (
a_qsize
 > 
b_qsize
) - (a_qsize < b_qsize);

29 i‡(
ªt
 == 0) {

30 
uöçå_t
 
a_addr
 = (uöçå_t)
	`exã¡_node_addr_gë
(
a
);

31 
uöçå_t
 
b_addr
 = (uöçå_t)
	`exã¡_node_addr_gë
(
b
);

33 
ªt
 = (
a_addr
 > 
b_addr
) - (a_addr < b_addr);

36  (
ªt
);

37 
	}
}

40 
	$rb_gí
(, 
exã¡_åì_szad_
, 
exã¡_åì_t
, 
exã¡_node_t
, 
szad_lök
,

41 
exã¡_szad_comp
)

43 
JEMALLOC_INLINE_C
 

44 
	$exã¡_ad_comp
(c⁄° 
exã¡_node_t
 *
a
, c⁄°Éxã¡_node_à*
b
)

46 
uöçå_t
 
a_addr
 = (uöçå_t)
	`exã¡_node_addr_gë
(
a
);

47 
uöçå_t
 
b_addr
 = (uöçå_t)
	`exã¡_node_addr_gë
(
b
);

49  ((
a_addr
 > 
b_addr
) - (a_addr < b_addr));

50 
	}
}

53 
rb_gí
(, 
exã¡_åì_ad_
, 
exã¡_åì_t
, 
exã¡_node_t
, 
ad_lök
, 
exã¡_ad_comp
)

	@dep/jemalloc-4.2.0/src/hash.c

1 
	#JEMALLOC_HASH_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

	@dep/jemalloc-4.2.0/src/huge.c

1 
	#JEMALLOC_HUGE_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

6 
exã¡_node_t
 *

7 
	$huge_node_gë
(c⁄° *
±r
)

9 
exã¡_node_t
 *
node
;

11 
node
 = 
	`chunk_lookup
(
±r
, 
åue
);

12 
	`as£π
(!
	`exã¡_node_achunk_gë
(
node
));

14  (
node
);

15 
	}
}

17 
boﬁ


18 
	$huge_node_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
exã¡_node_t
 *
node
)

21 
	`as£π
(
	`exã¡_node_addr_gë
(
node
Ë=
±r
);

22 
	`as£π
(!
	`exã¡_node_achunk_gë
(
node
));

23  (
	`chunk_ªgi°î
(
tsdn
, 
±r
, 
node
));

24 
	}
}

27 
	$huge_node_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
exã¡_node_t
 *
node
)

29 
boﬁ
 
îr
;

31 
îr
 = 
	`huge_node_£t
(
tsdn
, 
±r
, 
node
);

32 
	`as£π
(!
îr
);

33 
	}
}

36 
	$huge_node_un£t
(c⁄° *
±r
, c⁄° 
exã¡_node_t
 *
node
)

39 
	`chunk_dîegi°î
(
±r
, 
node
);

40 
	}
}

43 
	$huge_mÆloc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
, 
boﬁ
 
zîo
)

46 
	`as£π
(
usize
 =
	`s2u
(usize));

48  (
	`huge_∑Œoc
(
tsdn
, 
¨ía
, 
usize
, 
chunksize
, 
zîo
));

49 
	}
}

52 
	$huge_∑Œoc
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
, size_à
Æignmít
,

53 
boﬁ
 
zîo
)

55 *
ªt
;

56 
size_t
 
ausize
;

57 
exã¡_node_t
 *
node
;

58 
boﬁ
 
is_zî€d
;

62 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
¨ía
 !
NULL
);

64 
ausize
 = 
	`ß2u
(
usize
, 
Æignmít
);

65 i‡(
	`u∆ikñy
(
ausize
 =0 ||áusizê> 
HUGE_MAXCLASS
))

66  (
NULL
);

67 
	`as£π
(
ausize
 >
chunksize
);

70 
node
 = 
	`ùÆlocztm
(
tsdn
, 
	`CACHELINE_CEILING
((
exã¡_node_t
)),

71 
CACHELINE
, 
Ál£
, 
NULL
, 
åue
, 
	`¨ía_ichoo£
(
tsdn
, 
¨ía
));

72 i‡(
node
 =
NULL
)

73  (
NULL
);

79 
is_zî€d
 = 
zîo
;

80 i‡(
	`likñy
(!
	`tsdn_nuŒ
(
tsdn
)))

81 
¨ía
 = 
	`¨ía_choo£
(
	`tsdn_tsd
(
tsdn
),árena);

82 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
Ë|| (
ªt
 = 
	`¨ía_chunk_Æloc_huge
(
tsdn
,

83 
¨ía
, 
usize
, 
Æignmít
, &
is_zî€d
)Ë=
NULL
) {

84 
	`idÆlo˘m
(
tsdn
, 
node
, 
NULL
, 
åue
,Årue);

85  (
NULL
);

88 
	`exã¡_node_öô
(
node
, 
¨ía
, 
ªt
, 
usize
, 
is_zî€d
, 
åue
);

90 i‡(
	`huge_node_£t
(
tsdn
, 
ªt
, 
node
)) {

91 
	`¨ía_chunk_dÆloc_huge
(
tsdn
, 
¨ía
, 
ªt
, 
usize
);

92 
	`idÆlo˘m
(
tsdn
, 
node
, 
NULL
, 
åue
,Årue);

93  (
NULL
);

97 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

98 
	`ql_ñm_√w
(
node
, 
ql_lök
);

99 
	`ql_èû_ö£π
(&
¨ía
->
huge
, 
node
, 
ql_lök
);

100 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

102 i‡(
zîo
 || (
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_zîo
))) {

103 i‡(!
is_zî€d
)

104 
	`mem£t
(
ªt
, 0, 
usize
);

105 } i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_Æloc
))

106 
	`mem£t
(
ªt
, 
JEMALLOC_ALLOC_JUNK
, 
usize
);

108 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

109  (
ªt
);

110 
	}
}

112 #ifde‡
JEMALLOC_JET


113 #unde‡
huge_dÆloc_junk


114 
	#huge_dÆloc_junk
 
	`JEMALLOC_N
(
huge_dÆloc_junk_im∂
)

	)

117 
	$huge_dÆloc_junk
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
usize
)

120 i‡(
c⁄fig_fûl
 && 
have_dss
 && 
	`u∆ikñy
(
›t_junk_‰ì
)) {

125 i‡(!
c⁄fig_munm≠
 || (
have_dss
 && 
	`chunk_ö_dss
(
tsdn
, 
±r
)))

126 
	`mem£t
(
±r
, 
JEMALLOC_FREE_JUNK
, 
usize
);

128 
	}
}

129 #ifde‡
JEMALLOC_JET


130 #unde‡
huge_dÆloc_junk


131 
	#huge_dÆloc_junk
 
	`JEMALLOC_N
(
huge_dÆloc_junk
)

	)

132 
huge_dÆloc_junk_t
 *
	ghuge_dÆloc_junk
 = 
JEMALLOC_N
(
huge_dÆloc_junk_im∂
);

136 
	$huge_øŒoc_no_move_simû¨
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
,

137 
size_t
 
usize_mö
, size_à
usize_max
, 
boﬁ
 
zîo
)

139 
size_t
 
usize
, 
usize_√xt
;

140 
exã¡_node_t
 *
node
;

141 
¨ía_t
 *
¨ía
;

142 
chunk_hooks_t
 
chunk_hooks
 = 
CHUNK_HOOKS_INITIALIZER
;

143 
boﬁ
 
¥e_zî€d
, 
po°_zî€d
;

146 
usize
 = 
usize_mö
; usizê< 
usize_max
 && (
usize_√xt
 = 
	`s2u
(usize+1))

147 <
ﬁdsize
; 
usize
 = 
usize_√xt
)

150 i‡(
ﬁdsize
 =
usize
)

153 
node
 = 
	`huge_node_gë
(
±r
);

154 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

155 
¥e_zî€d
 = 
	`exã¡_node_zî€d_gë
(
node
);

158 i‡(
ﬁdsize
 > 
usize
) {

159 
size_t
 
sdiff
 = 
ﬁdsize
 - 
usize
;

160 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
)) {

161 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
usize
),

162 
JEMALLOC_FREE_JUNK
, 
sdiff
);

163 
po°_zî€d
 = 
Ál£
;

165 
po°_zî€d
 = !
	`chunk_purge_wøµî
(
tsdn
, 
¨ía
,

166 &
chunk_hooks
, 
±r
, 
	`CHUNK_CEILING
(
ﬁdsize
), 
usize
,

167 
sdiff
);

170 
po°_zî€d
 = 
¥e_zî€d
;

172 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

174 
	`huge_node_un£t
(
±r
, 
node
);

175 
	`as£π
(
	`exã¡_node_size_gë
(
node
Ë!
usize
);

176 
	`exã¡_node_size_£t
(
node
, 
usize
);

177 
	`huge_node_ª£t
(
tsdn
, 
±r
, 
node
);

179 
	`exã¡_node_zî€d_£t
(
node
, 
po°_zî€d
);

180 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

182 
	`¨ía_chunk_øŒoc_huge_simû¨
(
tsdn
, 
¨ía
, 
±r
, 
ﬁdsize
, 
usize
);

185 i‡(
ﬁdsize
 < 
usize
) {

186 i‡(
zîo
 || (
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_zîo
))) {

187 i‡(!
¥e_zî€d
) {

188 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
ﬁdsize
), 0,

189 
usize
 - 
ﬁdsize
);

191 } i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_Æloc
)) {

192 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
ﬁdsize
),

193 
JEMALLOC_ALLOC_JUNK
, 
usize
 - 
ﬁdsize
);

196 
	}
}

198 
boﬁ


199 
	$huge_øŒoc_no_move_shrök
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
,

200 
size_t
 
usize
)

202 
exã¡_node_t
 *
node
;

203 
¨ía_t
 *
¨ía
;

204 
chunk_hooks_t
 
chunk_hooks
;

205 
size_t
 
cdiff
;

206 
boﬁ
 
¥e_zî€d
, 
po°_zî€d
;

208 
node
 = 
	`huge_node_gë
(
±r
);

209 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

210 
¥e_zî€d
 = 
	`exã¡_node_zî€d_gë
(
node
);

211 
chunk_hooks
 = 
	`chunk_hooks_gë
(
tsdn
, 
¨ía
);

213 
	`as£π
(
ﬁdsize
 > 
usize
);

216 
cdiff
 = 
	`CHUNK_CEILING
(
ﬁdsize
Ë- CHUNK_CEILING(
usize
);

217 i‡(
cdiff
 !0 && 
chunk_hooks
.
	`•lô
(
±r
, 
	`CHUNK_CEILING
(
ﬁdsize
),

218 
	`CHUNK_CEILING
(
usize
), 
cdiff
, 
åue
, 
¨ía
->
öd
))

219  (
åue
);

221 i‡(
ﬁdsize
 > 
usize
) {

222 
size_t
 
sdiff
 = 
ﬁdsize
 - 
usize
;

223 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
)) {

224 
	`huge_dÆloc_junk
(
tsdn
, (*)((
uöçå_t
)
±r
 + 
usize
),

225 
sdiff
);

226 
po°_zî€d
 = 
Ál£
;

228 
po°_zî€d
 = !
	`chunk_purge_wøµî
(
tsdn
, 
¨ía
,

229 &
chunk_hooks
, 
	`CHUNK_ADDR2BASE
((
uöçå_t
)
±r
 +

230 
usize
), 
	`CHUNK_CEILING
(
ﬁdsize
),

231 
	`CHUNK_ADDR2OFFSET
((
uöçå_t
)
±r
 + 
usize
), 
sdiff
);

234 
po°_zî€d
 = 
¥e_zî€d
;

236 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

238 
	`huge_node_un£t
(
±r
, 
node
);

239 
	`exã¡_node_size_£t
(
node
, 
usize
);

240 
	`huge_node_ª£t
(
tsdn
, 
±r
, 
node
);

242 
	`exã¡_node_zî€d_£t
(
node
, 
po°_zî€d
);

243 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

246 
	`¨ía_chunk_øŒoc_huge_shrök
(
tsdn
, 
¨ía
, 
±r
, 
ﬁdsize
, 
usize
);

248  (
Ál£
);

249 
	}
}

251 
boﬁ


252 
	$huge_øŒoc_no_move_ex∑nd
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
,

253 
size_t
 
usize
, 
boﬁ
 
zîo
) {

254 
exã¡_node_t
 *
node
;

255 
¨ía_t
 *
¨ía
;

256 
boﬁ
 
is_zî€d_subchunk
, 
is_zî€d_chunk
;

258 
node
 = 
	`huge_node_gë
(
±r
);

259 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

260 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

261 
is_zî€d_subchunk
 = 
	`exã¡_node_zî€d_gë
(
node
);

262 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

268 
is_zî€d_chunk
 = 
zîo
;

270 i‡(
	`¨ía_chunk_øŒoc_huge_ex∑nd
(
tsdn
, 
¨ía
, 
±r
, 
ﬁdsize
, 
usize
,

271 &
is_zî€d_chunk
))

272  (
åue
);

274 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

276 
	`huge_node_un£t
(
±r
, 
node
);

277 
	`exã¡_node_size_£t
(
node
, 
usize
);

278 
	`huge_node_ª£t
(
tsdn
, 
±r
, 
node
);

279 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

281 i‡(
zîo
 || (
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_zîo
))) {

282 i‡(!
is_zî€d_subchunk
) {

283 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
ﬁdsize
), 0,

284 
	`CHUNK_CEILING
(
ﬁdsize
) - oldsize);

286 i‡(!
is_zî€d_chunk
) {

287 
	`mem£t
((*)((
uöçå_t
)
±r
 +

288 
	`CHUNK_CEILING
(
ﬁdsize
)), 0, 
usize
 -

289 
	`CHUNK_CEILING
(
ﬁdsize
));

291 } i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_Æloc
)) {

292 
	`mem£t
((*)((
uöçå_t
)
±r
 + 
ﬁdsize
), 
JEMALLOC_ALLOC_JUNK
,

293 
usize
 - 
ﬁdsize
);

296  (
Ál£
);

297 
	}
}

299 
boﬁ


300 
	$huge_øŒoc_no_move
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁdsize
, size_à
usize_mö
,

301 
size_t
 
usize_max
, 
boﬁ
 
zîo
)

304 
	`as£π
(
	`s2u
(
ﬁdsize
) == oldsize);

306 
	`as£π
(
usize_mö
 > 0 && 
usize_max
 <
HUGE_MAXCLASS
);

309 i‡(
ﬁdsize
 < 
chunksize
 || 
usize_max
 < chunksize)

310  (
åue
);

312 i‡(
	`CHUNK_CEILING
(
usize_max
Ë> CHUNK_CEILING(
ﬁdsize
)) {

314 i‡(!
	`huge_øŒoc_no_move_ex∑nd
(
tsdn
, 
±r
, 
ﬁdsize
, 
usize_max
,

315 
zîo
)) {

316 
	`¨ía_deˇy_tick
(
tsdn
, 
	`huge_ØŒoc
(
±r
));

317  (
Ál£
);

320 i‡(
usize_mö
 < 
usize_max
 && 
	`CHUNK_CEILING
(usize_min) >

321 
	`CHUNK_CEILING
(
ﬁdsize
Ë&& 
	`huge_øŒoc_no_move_ex∑nd
(
tsdn
,

322 
±r
, 
ﬁdsize
, 
usize_mö
, 
zîo
)) {

323 
	`¨ía_deˇy_tick
(
tsdn
, 
	`huge_ØŒoc
(
±r
));

324  (
Ál£
);

332 i‡(
	`CHUNK_CEILING
(
ﬁdsize
Ë>CHUNK_CEILING(
usize_mö
)

333 && 
	`CHUNK_CEILING
(
ﬁdsize
Ë<CHUNK_CEILING(
usize_max
)) {

334 
	`huge_øŒoc_no_move_simû¨
(
tsdn
, 
±r
, 
ﬁdsize
, 
usize_mö
,

335 
usize_max
, 
zîo
);

336 
	`¨ía_deˇy_tick
(
tsdn
, 
	`huge_ØŒoc
(
±r
));

337  (
Ál£
);

341 i‡(
	`CHUNK_CEILING
(
ﬁdsize
Ë> CHUNK_CEILING(
usize_max
)) {

342 i‡(!
	`huge_øŒoc_no_move_shrök
(
tsdn
, 
±r
, 
ﬁdsize
,

343 
usize_max
)) {

344 
	`¨ía_deˇy_tick
(
tsdn
, 
	`huge_ØŒoc
(
±r
));

345  (
Ál£
);

348  (
åue
);

349 
	}
}

352 
	$huge_øŒoc_move_hñ≥r
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
size_t
 
usize
,

353 
size_t
 
Æignmít
, 
boﬁ
 
zîo
)

356 i‡(
Æignmít
 <
chunksize
)

357  (
	`huge_mÆloc
(
tsdn
, 
¨ía
, 
usize
, 
zîo
));

358  (
	`huge_∑Œoc
(
tsdn
, 
¨ía
, 
usize
, 
Æignmít
, 
zîo
));

359 
	}
}

362 
	$huge_øŒoc
(
tsd_t
 *
tsd
, 
¨ía_t
 *
¨ía
, *
±r
, 
size_t
 
ﬁdsize
,

363 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
)

365 *
ªt
;

366 
size_t
 
c›ysize
;

369 
	`as£π
(
usize
 > 0 && usizê<
HUGE_MAXCLASS
);

372 i‡(!
	`huge_øŒoc_no_move
(
	`tsd_tsdn
(
tsd
), 
±r
, 
ﬁdsize
, 
usize
, usize,

373 
zîo
))

374  (
±r
);

381 
ªt
 = 
	`huge_øŒoc_move_hñ≥r
(
	`tsd_tsdn
(
tsd
), 
¨ía
, 
usize
, 
Æignmít
,

382 
zîo
);

383 i‡(
ªt
 =
NULL
)

384  (
NULL
);

386 
c›ysize
 = (
usize
 < 
ﬁdsize
) ? usize : oldsize;

387 
	`mem˝y
(
ªt
, 
±r
, 
c›ysize
);

388 
	`isqÆloc
(
tsd
, 
±r
, 
ﬁdsize
, 
tˇche
, 
åue
);

389  (
ªt
);

390 
	}
}

393 
	$huge_dÆloc
(
tsdn_t
 *
tsdn
, *
±r
)

395 
exã¡_node_t
 *
node
;

396 
¨ía_t
 *
¨ía
;

398 
node
 = 
	`huge_node_gë
(
±r
);

399 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

400 
	`huge_node_un£t
(
±r
, 
node
);

401 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

402 
	`ql_ªmove
(&
¨ía
->
huge
, 
node
, 
ql_lök
);

403 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

405 
	`huge_dÆloc_junk
(
tsdn
, 
	`exã¡_node_addr_gë
(
node
),

406 
	`exã¡_node_size_gë
(
node
));

407 
	`¨ía_chunk_dÆloc_huge
(
tsdn
, 
	`exã¡_node_¨ía_gë
(
node
),

408 
	`exã¡_node_addr_gë
(
node
), 
	`exã¡_node_size_gë
(node));

409 
	`idÆlo˘m
(
tsdn
, 
node
, 
NULL
, 
åue
,Årue);

411 
	`¨ía_deˇy_tick
(
tsdn
, 
¨ía
);

412 
	}
}

414 
¨ía_t
 *

415 
	$huge_ØŒoc
(c⁄° *
±r
)

418  (
	`exã¡_node_¨ía_gë
(
	`huge_node_gë
(
±r
)));

419 
	}
}

421 
size_t


422 
	$huge_ßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

424 
size_t
 
size
;

425 
exã¡_node_t
 *
node
;

426 
¨ía_t
 *
¨ía
;

428 
node
 = 
	`huge_node_gë
(
±r
);

429 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

430 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

431 
size
 = 
	`exã¡_node_size_gë
(
node
);

432 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

434  (
size
);

435 
	}
}

437 
¥of_t˘x_t
 *

438 
	$huge_¥of_t˘x_gë
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

440 
¥of_t˘x_t
 *
t˘x
;

441 
exã¡_node_t
 *
node
;

442 
¨ía_t
 *
¨ía
;

444 
node
 = 
	`huge_node_gë
(
±r
);

445 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

446 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

447 
t˘x
 = 
	`exã¡_node_¥of_t˘x_gë
(
node
);

448 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

450  (
t˘x
);

451 
	}
}

454 
	$huge_¥of_t˘x_£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
¥of_t˘x_t
 *
t˘x
)

456 
exã¡_node_t
 *
node
;

457 
¨ía_t
 *
¨ía
;

459 
node
 = 
	`huge_node_gë
(
±r
);

460 
¨ía
 = 
	`exã¡_node_¨ía_gë
(
node
);

461 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
huge_mtx
);

462 
	`exã¡_node_¥of_t˘x_£t
(
node
, 
t˘x
);

463 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
huge_mtx
);

464 
	}
}

467 
	$huge_¥of_t˘x_ª£t
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

470 
	`huge_¥of_t˘x_£t
(
tsdn
, 
±r
, (
¥of_t˘x_t
 *)(
uöçå_t
)1U);

471 
	}
}

	@dep/jemalloc-4.2.0/src/jemalloc.c

1 
	#JEMALLOC_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

8 c⁄° *
je_mÆloc_c⁄f
 
JEMALLOC_ATTR
(
wók
);

9 
boﬁ
 
	g›t_ab‹t
 =

10 #ifde‡
JEMALLOC_DEBUG


11 
åue


13 
Ál£


16 c⁄° *
	g›t_junk
 =

17 #i‡(
deföed
(
JEMALLOC_DEBUG
Ë&& deföed(
JEMALLOC_FILL
))

23 
boﬁ
 
	g›t_junk_Æloc
 =

24 #i‡(
deföed
(
JEMALLOC_DEBUG
Ë&& deföed(
JEMALLOC_FILL
))

25 
åue


27 
Ál£


30 
boﬁ
 
	g›t_junk_‰ì
 =

31 #i‡(
deföed
(
JEMALLOC_DEBUG
Ë&& deföed(
JEMALLOC_FILL
))

32 
åue


34 
Ál£


38 
size_t
 
	g›t_qu¨™töe
 = 
ZU
(0);

39 
boﬁ
 
	g›t_ªdz⁄e
 = 
Ál£
;

40 
boﬁ
 
	g›t_uåa˚
 = 
Ál£
;

41 
boﬁ
 
	g›t_xmÆloc
 = 
Ál£
;

42 
boﬁ
 
	g›t_zîo
 = 
Ál£
;

43 
	g›t_«ª«s
 = 0;

46 
boﬁ
 
	gö_vÆgröd
;

48 
	gn˝us
;

51 
mÆloc_muãx_t
 
	g¨ías_lock
;

60 
¨ía_t
 **
	g¨ías
;

61 
	g«ª«s_tŸÆ
;

62 
¨ía_t
 *
	ga0
;

63 
	g«ª«s_auto
;

66 
	mmÆloc_öô_unöôülized
 = 3,

67 
	mmÆloc_öô_a0_öôülized
 = 2,

68 
	mmÆloc_öô_ªcursibÀ
 = 1,

69 
	mmÆloc_öô_öôülized
 = 0

70 } 
	tmÆloc_öô_t
;

71 
mÆloc_öô_t
 
	gmÆloc_öô_°©e
 = 
mÆloc_öô_unöôülized
;

74 
boﬁ
 
	gmÆloc_¶ow
 = 
åue
;

78 
	mÊag_›t_junk_Æloc
 = (1U),

79 
	mÊag_›t_junk_‰ì
 = (1U << 1),

80 
	mÊag_›t_qu¨™töe
 = (1U << 2),

81 
	mÊag_›t_zîo
 = (1U << 3),

82 
	mÊag_›t_uåa˚
 = (1U << 4),

83 
	mÊag_ö_vÆgröd
 = (1U << 5),

84 
	mÊag_›t_xmÆloc
 = (1U << 6)

86 
uöt8_t
 
	gmÆloc_¶ow_Êags
;

89 
	$JEMALLOC_ALIGNED
(
CACHELINE
)

90 c⁄° 
size_t
 
ödex2size_èb
[
NSIZES
+1] = {

91 
	#SC
(
ödex
, 
lg_gΩ
, 
lg_dñè
, 
ndñè
, 
bö
, 
lg_dñè_lookup
) \

92 ((
	`ZU
(1)<<
lg_gΩ
Ë+ (ZU(
ndñè
)<<
lg_dñè
)),

	)

93 
SIZE_CLASSES


94 #unde‡
SC


95 
	`ZU
(0)

96 
	}
};

98 
	$JEMALLOC_ALIGNED
(
CACHELINE
)

99 c⁄° 
uöt8_t
 
size2ödex_èb
[] = {

100 #i‡
LG_TINY_MIN
 == 0

102 
	#S2B_0
(
i
Ëi,

	)

103 #ñi‡
LG_TINY_MIN
 == 1

105 
	#S2B_1
(
i
Ëi,

	)

106 #ñi‡
LG_TINY_MIN
 == 2

108 
	#S2B_2
(
i
Ëi,

	)

109 #ñi‡
LG_TINY_MIN
 == 3

110 
	#S2B_3
(
i
Ëi,

	)

111 #ñi‡
LG_TINY_MIN
 == 4

112 
	#S2B_4
(
i
Ëi,

	)

113 #ñi‡
LG_TINY_MIN
 == 5

114 
	#S2B_5
(
i
Ëi,

	)

115 #ñi‡
LG_TINY_MIN
 == 6

116 
	#S2B_6
(
i
Ëi,

	)

117 #ñi‡
LG_TINY_MIN
 == 7

118 
	#S2B_7
(
i
Ëi,

	)

119 #ñi‡
LG_TINY_MIN
 == 8

120 
	#S2B_8
(
i
Ëi,

	)

121 #ñi‡
LG_TINY_MIN
 == 9

122 
	#S2B_9
(
i
Ëi,

	)

123 #ñi‡
LG_TINY_MIN
 == 10

124 
	#S2B_10
(
i
Ëi,

	)

125 #ñi‡
LG_TINY_MIN
 == 11

126 
	#S2B_11
(
i
Ëi,

	)

130 #i‡
LG_TINY_MIN
 < 1

131 
	#S2B_1
(
i
Ë
	`S2B_0
(iËS2B_0(i)

	)

133 #i‡
LG_TINY_MIN
 < 2

134 
	#S2B_2
(
i
Ë
	`S2B_1
(iËS2B_1(i)

	)

136 #i‡
LG_TINY_MIN
 < 3

137 
	#S2B_3
(
i
Ë
	`S2B_2
(iËS2B_2(i)

	)

139 #i‡
LG_TINY_MIN
 < 4

140 
	#S2B_4
(
i
Ë
	`S2B_3
(iËS2B_3(i)

	)

142 #i‡
LG_TINY_MIN
 < 5

143 
	#S2B_5
(
i
Ë
	`S2B_4
(iËS2B_4(i)

	)

145 #i‡
LG_TINY_MIN
 < 6

146 
	#S2B_6
(
i
Ë
	`S2B_5
(iËS2B_5(i)

	)

148 #i‡
LG_TINY_MIN
 < 7

149 
	#S2B_7
(
i
Ë
	`S2B_6
(iËS2B_6(i)

	)

151 #i‡
LG_TINY_MIN
 < 8

152 
	#S2B_8
(
i
Ë
	`S2B_7
(iËS2B_7(i)

	)

154 #i‡
LG_TINY_MIN
 < 9

155 
	#S2B_9
(
i
Ë
	`S2B_8
(iËS2B_8(i)

	)

157 #i‡
LG_TINY_MIN
 < 10

158 
	#S2B_10
(
i
Ë
	`S2B_9
(iËS2B_9(i)

	)

160 #i‡
LG_TINY_MIN
 < 11

161 
	#S2B_11
(
i
Ë
	`S2B_10
(iËS2B_10(i)

	)

163 
	#S2B_no
(
i
)

	)

164 
	#SC
(
ödex
, 
lg_gΩ
, 
lg_dñè
, 
ndñè
, 
bö
, 
lg_dñè_lookup
) \

165 
S2B_
##
	`lg_dñè_lookup
(
ödex
)

	)

166 
SIZE_CLASSES


167 #unde‡
S2B_3


168 #unde‡
S2B_4


169 #unde‡
S2B_5


170 #unde‡
S2B_6


171 #unde‡
S2B_7


172 #unde‡
S2B_8


173 #unde‡
S2B_9


174 #unde‡
S2B_10


175 #unde‡
S2B_11


176 #unde‡
S2B_no


177 #unde‡
SC


178 
	}
};

180 #ifde‡
JEMALLOC_THREADED_INIT


182 
	#NO_INITIALIZER
 (()0)

	)

183 
	#INITIALIZER
 
	`±hªad_£lf
()

	)

184 
	#IS_INITIALIZER
 (
mÆloc_öôülizî
 =
	`±hªad_£lf
())

	)

185 
±hªad_t
 
	gmÆloc_öôülizî
 = 
NO_INITIALIZER
;

187 
	#NO_INITIALIZER
 
Ál£


	)

188 
	#INITIALIZER
 
åue


	)

189 
	#IS_INITIALIZER
 
mÆloc_öôülizî


	)

190 
boﬁ
 
	gmÆloc_öôülizî
 = 
NO_INITIALIZER
;

194 #ifde‡
_WIN32


195 #i‡
_WIN32_WINNT
 >= 0x0600

196 
mÆloc_muãx_t
 
	göô_lock
 = 
SRWLOCK_INIT
;

198 
mÆloc_muãx_t
 
	göô_lock
;

199 
boﬁ
 
	göô_lock_öôülized
 = 
Ál£
;

201 
	$JEMALLOC_ATTR
(
c⁄°ru˘‹
)

202 
WINAPI


203 
	$_öô_öô_lock
()

214 i‡(!
öô_lock_öôülized
)

215 
	`mÆloc_muãx_öô
(&
öô_lock
, "öô", 
WITNESS_RANK_INIT
);

216 
öô_lock_öôülized
 = 
åue
;

217 
	}
}

219 #ifde‡
_MSC_VER


220 #¥agm®
£˘i⁄
(".CRT$XCU", 
ªad
)

221 
JEMALLOC_SECTION
(".CRT$XCU"Ë
	$JEMALLOC_ATTR
(
u£d
)

222 c⁄° (
WINAPI
 *
öô_öô_lock
)(Ë
_öô_öô_lock
;

226 
mÆloc_muãx_t
 
öô_lock
 = 
MALLOC_MUTEX_INITIALIZER
;

230 *
p
;

231 
size_t
 
s
;

232 *
r
;

233 } 
	tmÆloc_uåa˚_t
;

235 #ifde‡
JEMALLOC_UTRACE


236 
	#UTRACE
(
a
, 
b
, 
c
) do { \

237 i‡(
	`u∆ikñy
(
›t_uåa˚
)) { \

238 
uåa˚_£ºno
 = 
î∫o
; \

239 
mÆloc_uåa˚_t
 
ut
; \

240 
ut
.
p
 = (
a
); \

241 
ut
.
s
 = (
b
); \

242 
ut
.
r
 = (
c
); \

243 
	`uåa˚
(&
ut
, (ut)); \

244 
î∫o
 = 
uåa˚_£ºno
; \

246 
	}
} 0)

	)

248 
	#UTRACE
(
a
, 
b
, 
c
)

	)

257 
boﬁ
 
mÆloc_öô_h¨d_a0
();

258 
boﬁ
 
mÆloc_öô_h¨d
();

265 
JEMALLOC_ALWAYS_INLINE_C
 
boﬁ


266 
	$mÆloc_öôülized
()

269  (
mÆloc_öô_°©e
 =
mÆloc_öô_öôülized
);

270 
	}
}

272 
JEMALLOC_ALWAYS_INLINE_C
 

273 
	$mÆloc_thªad_öô
()

285 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_qu¨™töe
))

286 
	`qu¨™töe_Æloc_hook
();

287 
	}
}

289 
JEMALLOC_ALWAYS_INLINE_C
 
boﬁ


290 
	$mÆloc_öô_a0
()

293 i‡(
	`u∆ikñy
(
mÆloc_öô_°©e
 =
mÆloc_öô_unöôülized
))

294  (
	`mÆloc_öô_h¨d_a0
());

295  (
Ál£
);

296 
	}
}

298 
JEMALLOC_ALWAYS_INLINE_C
 
boﬁ


299 
	$mÆloc_öô
()

302 i‡(
	`u∆ikñy
(!
	`mÆloc_öôülized
()Ë&& 
	`mÆloc_öô_h¨d
())

303  (
åue
);

304 
	`mÆloc_thªad_öô
();

306  (
Ál£
);

307 
	}
}

315 
	$a0üŒoc
(
size_t
 
size
, 
boﬁ
 
zîo
, boﬁ 
is_mëad©a
)

318 i‡(
	`u∆ikñy
(
	`mÆloc_öô_a0
()))

319  (
NULL
);

321  (
	`üŒocztm
(
TSDN_NULL
, 
size
, 
	`size2ödex
(size), 
zîo
, 
NULL
,

322 
is_mëad©a
, 
	`¨ía_gë
(
TSDN_NULL
, 0, 
åue
),Årue));

323 
	}
}

326 
	$a0idÆloc
(*
±r
, 
boﬁ
 
is_mëad©a
)

329 
	`idÆlo˘m
(
TSDN_NULL
, 
±r
, 
Ál£
, 
is_mëad©a
, 
åue
);

330 
	}
}

333 
	$a0mÆloc
(
size_t
 
size
)

336  (
	`a0üŒoc
(
size
, 
Ál£
, 
åue
));

337 
	}
}

340 
	$a0dÆloc
(*
±r
)

343 
	`a0idÆloc
(
±r
, 
åue
);

344 
	}
}

353 
	$boŸ°øp_mÆloc
(
size_t
 
size
)

356 i‡(
	`u∆ikñy
(
size
 == 0))

357 
size
 = 1;

359  (
	`a0üŒoc
(
size
, 
Ál£
, false));

360 
	}
}

363 
	$boŸ°øp_ˇŒoc
(
size_t
 
num
, size_à
size
)

365 
size_t
 
num_size
;

367 
num_size
 = 
num
 * 
size
;

368 i‡(
	`u∆ikñy
(
num_size
 == 0)) {

369 
	`as£π
(
num
 =0 || 
size
 == 0);

370 
num_size
 = 1;

373  (
	`a0üŒoc
(
num_size
, 
åue
, 
Ál£
));

374 
	}
}

377 
	$boŸ°øp_‰ì
(*
±r
)

380 i‡(
	`u∆ikñy
(
±r
 =
NULL
))

383 
	`a0idÆloc
(
±r
, 
Ál£
);

384 
	}
}

387 
	$¨ía_£t
(
öd
, 
¨ía_t
 *
¨ía
)

390 
	`©omic_wrôe_p
((**)&
¨ías
[
öd
], 
¨ía
);

391 
	}
}

394 
	$«ª«s_tŸÆ_£t
(
«ª«s
)

397 
	`©omic_wrôe_u
(&
«ª«s_tŸÆ
, 
«ª«s
);

398 
	}
}

401 
	$«ª«s_tŸÆ_öc
()

404 
	`©omic_add_u
(&
«ª«s_tŸÆ
, 1);

405 
	}
}

408 
	$«ª«s_tŸÆ_gë
()

411  (
	`©omic_ªad_u
(&
«ª«s_tŸÆ
));

412 
	}
}

415 
¨ía_t
 *

416 
	$¨ía_öô_locked
(
tsdn_t
 *
tsdn
, 
öd
)

418 
¨ía_t
 *
¨ía
;

420 
	`as£π
(
öd
 <
	`«ª«s_tŸÆ_gë
());

421 i‡(
öd
 > 
MALLOCX_ARENA_MAX
)

422  (
NULL
);

423 i‡(
öd
 =
	`«ª«s_tŸÆ_gë
())

424 
	`«ª«s_tŸÆ_öc
();

430 
¨ía
 = 
	`¨ía_gë
(
tsdn
, 
öd
, 
Ál£
);

431 i‡(
¨ía
 !
NULL
) {

432 
	`as£π
(
öd
 < 
«ª«s_auto
);

433  (
¨ía
);

437 
¨ía
 = 
	`¨ía_√w
(
tsdn
, 
öd
);

438 
	`¨ía_£t
(
öd
, 
¨ía
);

439  (
¨ía
);

440 
	}
}

442 
¨ía_t
 *

443 
	$¨ía_öô
(
tsdn_t
 *
tsdn
, 
öd
)

445 
¨ía_t
 *
¨ía
;

447 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ías_lock
);

448 
¨ía
 = 
	`¨ía_öô_locked
(
tsdn
, 
öd
);

449 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ías_lock
);

450  (
¨ía
);

451 
	}
}

454 
	$¨ía_böd
(
tsd_t
 *
tsd
, 
öd
, 
boﬁ
 
öã∫Æ
)

456 
¨ía_t
 *
¨ía
;

458 
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
öd
, 
Ál£
);

459 
	`¨ía_¡hªads_öc
(
¨ía
, 
öã∫Æ
);

461 i‡(
	`tsd_nomöÆ
(
tsd
)) {

462 i‡(
öã∫Æ
)

463 
	`tsd_üª«_£t
(
tsd
, 
¨ía
);

465 
	`tsd_¨ía_£t
(
tsd
, 
¨ía
);

467 
	}
}

470 
	$¨ía_migøã
(
tsd_t
 *
tsd
, 
ﬁdöd
, 
√wöd
)

472 
¨ía_t
 *
ﬁd¨ía
, *
√w¨ía
;

474 
ﬁd¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
ﬁdöd
, 
Ál£
);

475 
√w¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
√wöd
, 
Ál£
);

476 
	`¨ía_¡hªads_dec
(
ﬁd¨ía
, 
Ál£
);

477 
	`¨ía_¡hªads_öc
(
√w¨ía
, 
Ál£
);

478 
	`tsd_¨ía_£t
(
tsd
, 
√w¨ía
);

479 
	}
}

482 
	$¨ía_unböd
(
tsd_t
 *
tsd
, 
öd
, 
boﬁ
 
öã∫Æ
)

484 
¨ía_t
 *
¨ía
;

486 
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
öd
, 
Ál£
);

487 
	`¨ía_¡hªads_dec
(
¨ía
, 
öã∫Æ
);

488 i‡(
öã∫Æ
)

489 
	`tsd_üª«_£t
(
tsd
, 
NULL
);

491 
	`tsd_¨ía_£t
(
tsd
, 
NULL
);

492 
	}
}

494 
¨ía_td©a_t
 *

495 
	$¨ía_td©a_gë_h¨d
(
tsd_t
 *
tsd
, 
öd
)

497 
¨ía_td©a_t
 *
td©a
, *
¨ías_td©a_ﬁd
;

498 
¨ía_td©a_t
 *
¨ías_td©a
 = 
	`tsd_¨ías_td©a_gë
(
tsd
);

499 
«ª«s_td©a_ﬁd
, 
i
;

500 
«ª«s_td©a
 = 
	`tsd_«ª«s_td©a_gë
(
tsd
);

501 
«ª«s_a˘uÆ
 = 
	`«ª«s_tŸÆ_gë
();

507 i‡(
¨ías_td©a
 !
NULL
 && 
«ª«s_td©a
 < 
«ª«s_a˘uÆ
) {

508 
¨ías_td©a_ﬁd
 = 
¨ías_td©a
;

509 
«ª«s_td©a_ﬁd
 = 
«ª«s_td©a
;

510 
¨ías_td©a
 = 
NULL
;

511 
«ª«s_td©a
 = 0;

512 
	`tsd_¨ías_td©a_£t
(
tsd
, 
¨ías_td©a
);

513 
	`tsd_«ª«s_td©a_£t
(
tsd
, 
«ª«s_td©a
);

515 
¨ías_td©a_ﬁd
 = 
NULL
;

516 
«ª«s_td©a_ﬁd
 = 0;

520 i‡(
¨ías_td©a
 =
NULL
) {

521 
boﬁ
 *
¨ías_td©a_by∑s•
 = 
	`tsd_¨ías_td©a_by∑s•_gë
(
tsd
);

522 
«ª«s_td©a
 = (
öd
 < 
«ª«s_a˘uÆ
) ?Çarenas_actual : ind+1;

524 i‡(
	`tsd_nomöÆ
(
tsd
Ë&& !*
¨ías_td©a_by∑s•
) {

525 *
¨ías_td©a_by∑s•
 = 
åue
;

526 
¨ías_td©a
 = (
¨ía_td©a_t
 *)
	`a0mÆloc
(

527 (
¨ía_td©a_t
Ë* 
«ª«s_td©a
);

528 *
¨ías_td©a_by∑s•
 = 
Ál£
;

530 i‡(
¨ías_td©a
 =
NULL
) {

531 
td©a
 = 
NULL
;

532 
œbñ_ªtu∫
;

534 
	`as£π
(
	`tsd_nomöÆ
(
tsd
Ë&& !*
¨ías_td©a_by∑s•
);

535 
	`tsd_¨ías_td©a_£t
(
tsd
, 
¨ías_td©a
);

536 
	`tsd_«ª«s_td©a_£t
(
tsd
, 
«ª«s_td©a
);

548 
i
 = 0; i < 
«ª«s_a˘uÆ
; i++) {

549 i‡(
i
 < 
«ª«s_td©a_ﬁd
) {

550 
	`tickî_c›y
(&
¨ías_td©a
[
i
].
deˇy_tickî
,

551 &
¨ías_td©a_ﬁd
[
i
].
deˇy_tickî
);

553 
	`tickî_öô
(&
¨ías_td©a
[
i
].
deˇy_tickî
,

554 
DECAY_NTICKS_PER_UPDATE
);

557 i‡(
«ª«s_td©a
 > 
«ª«s_a˘uÆ
) {

558 
	`mem£t
(&
¨ías_td©a
[
«ª«s_a˘uÆ
], 0, (
¨ía_td©a_t
)

559 * (
«ª«s_td©a
 - 
«ª«s_a˘uÆ
));

563 
td©a
 = &
¨ías_td©a
[
öd
];

564 
œbñ_ªtu∫
:

565 i‡(
¨ías_td©a_ﬁd
 !
NULL
)

566 
	`a0dÆloc
(
¨ías_td©a_ﬁd
);

567  (
td©a
);

568 
	}
}

571 
¨ía_t
 *

572 
	$¨ía_choo£_h¨d
(
tsd_t
 *
tsd
, 
boﬁ
 
öã∫Æ
)

574 
¨ía_t
 *
ªt
 
	`JEMALLOC_CC_SILENCE_INIT
(
NULL
);

576 i‡(
«ª«s_auto
 > 1) {

577 
i
, 
j
, 
choo£
[2], 
fú°_nuŒ
;

587 
j
 = 0; j < 2; j++)

588 
choo£
[
j
] = 0;

590 
fú°_nuŒ
 = 
«ª«s_auto
;

591 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¨ías_lock
);

592 
	`as£π
(
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 0, 
Ál£
Ë!
NULL
);

593 
i
 = 1; i < 
«ª«s_auto
; i++) {

594 i‡(
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
i
, 
Ál£
Ë!
NULL
) {

599 
j
 = 0; j < 2; j++) {

600 i‡(
	`¨ía_¡hªads_gë
(
	`¨ía_gë
(

601 
	`tsd_tsdn
(
tsd
), 
i
, 
Ál£
), !!
j
) <

602 
	`¨ía_¡hªads_gë
(
	`¨ía_gë
(

603 
	`tsd_tsdn
(
tsd
), 
choo£
[
j
], 
Ál£
),

604 !!
j
))

605 
choo£
[
j
] = 
i
;

607 } i‡(
fú°_nuŒ
 =
«ª«s_auto
) {

617 
fú°_nuŒ
 = 
i
;

621 
j
 = 0; j < 2; j++) {

622 i‡(
	`¨ía_¡hªads_gë
(
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
),

623 
choo£
[
j
], 
Ál£
), !!jË=0 || 
fú°_nuŒ
 ==

624 
«ª«s_auto
) {

629 i‡(!!
j
 =
öã∫Æ
) {

630 
ªt
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
),

631 
choo£
[
j
], 
Ál£
);

634 
¨ía_t
 *
¨ía
;

637 
choo£
[
j
] = 
fú°_nuŒ
;

638 
¨ía
 = 
	`¨ía_öô_locked
(
	`tsd_tsdn
(
tsd
),

639 
choo£
[
j
]);

640 i‡(
¨ía
 =
NULL
) {

641 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
),

642 &
¨ías_lock
);

643  (
NULL
);

645 i‡(!!
j
 =
öã∫Æ
)

646 
ªt
 = 
¨ía
;

648 
	`¨ía_böd
(
tsd
, 
choo£
[
j
], !!j);

650 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¨ías_lock
);

652 
ªt
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 0, 
Ál£
);

653 
	`¨ía_böd
(
tsd
, 0, 
Ál£
);

654 
	`¨ía_böd
(
tsd
, 0, 
åue
);

657  (
ªt
);

658 
	}
}

661 
	$thªad_Æloˇãd_˛ónup
(
tsd_t
 *
tsd
)

665 
	}
}

668 
	$thªad_dóŒoˇãd_˛ónup
(
tsd_t
 *
tsd
)

672 
	}
}

675 
	$üª«_˛ónup
(
tsd_t
 *
tsd
)

677 
¨ía_t
 *
üª«
;

679 
üª«
 = 
	`tsd_üª«_gë
(
tsd
);

680 i‡(
üª«
 !
NULL
)

681 
	`¨ía_unböd
(
tsd
, 
üª«
->
öd
, 
åue
);

682 
	}
}

685 
	$¨ía_˛ónup
(
tsd_t
 *
tsd
)

687 
¨ía_t
 *
¨ía
;

689 
¨ía
 = 
	`tsd_¨ía_gë
(
tsd
);

690 i‡(
¨ía
 !
NULL
)

691 
	`¨ía_unböd
(
tsd
, 
¨ía
->
öd
, 
Ál£
);

692 
	}
}

695 
	$¨ías_td©a_˛ónup
(
tsd_t
 *
tsd
)

697 
¨ía_td©a_t
 *
¨ías_td©a
;

700 *
	`tsd_¨ías_td©a_by∑s•_gë
(
tsd
Ë
åue
;

702 
¨ías_td©a
 = 
	`tsd_¨ías_td©a_gë
(
tsd
);

703 i‡(
¨ías_td©a
 !
NULL
) {

704 
	`tsd_¨ías_td©a_£t
(
tsd
, 
NULL
);

705 
	`a0dÆloc
(
¨ías_td©a
);

707 
	}
}

710 
	$«ª«s_td©a_˛ónup
(
tsd_t
 *
tsd
)

714 
	}
}

717 
	$¨ías_td©a_by∑ss_˛ónup
(
tsd_t
 *
tsd
)

721 
	}
}

724 
	$°©s_¥öt_©exô
()

727 i‡(
c⁄fig_tˇche
 && 
c⁄fig_°©s
) {

728 
tsdn_t
 *
tsdn
;

729 
«ª«s
, 
i
;

731 
tsdn
 = 
	`tsdn_„tch
();

740 
i
 = 0, 
«ª«s
 = 
	`«ª«s_tŸÆ_gë
(); i <Çarenas; i++) {

741 
¨ía_t
 *
¨ía
 = 
	`¨ía_gë
(
tsdn
, 
i
, 
Ál£
);

742 i‡(
¨ía
 !
NULL
) {

743 
tˇche_t
 *
tˇche
;

751 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

752 
	`ql_f‹óch
(
tˇche
, &
¨ía
->
tˇche_ql
, 
lök
) {

753 
	`tˇche_°©s_mîge
(
tsdn
, 
tˇche
, 
¨ía
);

755 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

759 
	`je_mÆloc_°©s_¥öt
(
NULL
, NULL, NULL);

760 
	}
}

770 #i‚de‡
JEMALLOC_HAVE_SECURE_GETENV


772 
	$£cuª_gëív
(c⁄° *
«me
)

775 #ifde‡
JEMALLOC_HAVE_ISSETUGID


776 i‡(
	`is£tugid
() != 0)

777  (
NULL
);

779  (
	`gëív
(
«me
));

780 
	}
}

784 
	$mÆloc_n˝us
()

786 
ªsu…
;

788 #ifde‡
_WIN32


789 
SYSTEM_INFO
 
si
;

790 
	`GëSy°emInfo
(&
si
);

791 
ªsu…
 = 
si
.
dwNumbîOfPro˚ss‹s
;

793 
ªsu…
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

795  ((
ªsu…
 == -1) ? 1 : ()result);

796 
	}
}

798 
boﬁ


799 
	$mÆloc_c⁄f_√xt
(c⁄° **
›ts_p
, c⁄° **
k_p
, 
size_t
 *
kÀn_p
,

800 c⁄° **
v_p
, 
size_t
 *
vÀn_p
)

802 
boﬁ
 
ac˚±
;

803 c⁄° *
›ts
 = *
›ts_p
;

805 *
k_p
 = 
›ts
;

807 
ac˚±
 = 
Ál£
; !accept;) {

808 *
›ts
) {

822 
›ts
++;

825 
›ts
++;

826 *
kÀn_p
 = (
uöçå_t
)
›ts
 - 1 - (uöçå_t)*
k_p
;

827 *
v_p
 = 
›ts
;

828 
ac˚±
 = 
åue
;

831 i‡(
›ts
 !*
›ts_p
) {

832 
	`mÆloc_wrôe
("<jemalloc>: Conf stringÉnds "

835  (
åue
);

837 
	`mÆloc_wrôe
("<jemalloc>: Malformed conf string\n");

838  (
åue
);

842 
ac˚±
 = 
Ál£
; !accept;) {

843 *
›ts
) {

845 
›ts
++;

853 i‡(*
›ts
 == '\0') {

854 
	`mÆloc_wrôe
("<jemalloc>: Conf stringÉnds "

857 *
vÀn_p
 = (
uöçå_t
)
›ts
 - 1 - (uöçå_t)*
v_p
;

858 
ac˚±
 = 
åue
;

861 *
vÀn_p
 = (
uöçå_t
)
›ts
 - (uöçå_t)*
v_p
;

862 
ac˚±
 = 
åue
;

865 
›ts
++;

870 *
›ts_p
 = 
›ts
;

871  (
Ál£
);

872 
	}
}

875 
	$mÆloc_c⁄f_îr‹
(c⁄° *
msg
, c⁄° *
k
, 
size_t
 
kÀn
, c⁄° *
v
,

876 
size_t
 
vÀn
)

879 
	`mÆloc_¥ötf
("<jemÆloc>: %s: %.*s:%.*s\n", 
msg
, ()
kÀn
, 
k
,

880 ()
vÀn
, 
v
);

881 
	}
}

884 
	$mÆloc_¶ow_Êag_öô
()

890 
mÆloc_¶ow_Êags
 |(
›t_junk_Æloc
 ? 
Êag_›t_junk_Æloc
 : 0)

891 | (
›t_junk_‰ì
 ? 
Êag_›t_junk_‰ì
 : 0)

892 | (
›t_qu¨™töe
 ? 
Êag_›t_qu¨™töe
 : 0)

893 | (
›t_zîo
 ? 
Êag_›t_zîo
 : 0)

894 | (
›t_uåa˚
 ? 
Êag_›t_uåa˚
 : 0)

895 | (
›t_xmÆloc
 ? 
Êag_›t_xmÆloc
 : 0);

897 i‡(
c⁄fig_vÆgröd
)

898 
mÆloc_¶ow_Êags
 |(
ö_vÆgröd
 ? 
Êag_ö_vÆgröd
 : 0);

900 
mÆloc_¶ow
 = (
mÆloc_¶ow_Êags
 != 0);

901 
	}
}

904 
	$mÆloc_c⁄f_öô
()

906 
i
;

907 
buf
[
PATH_MAX
 + 1];

908 c⁄° *
›ts
, *
k
, *
v
;

909 
size_t
 
kÀn
, 
vÀn
;

915 i‡(
c⁄fig_vÆgröd
) {

916 
ö_vÆgröd
 = (
RUNNING_ON_VALGRIND
 !0Ë? 
åue
 : 
Ál£
;

917 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
ö_vÆgröd
)) {

918 
›t_junk
 = "false";

919 
›t_junk_Æloc
 = 
Ál£
;

920 
›t_junk_‰ì
 = 
Ál£
;

921 
	`as£π
(!
›t_zîo
);

922 
›t_qu¨™töe
 = 
JEMALLOC_VALGRIND_QUARANTINE_DEFAULT
;

923 
›t_ªdz⁄e
 = 
åue
;

925 i‡(
c⁄fig_tˇche
 && 
	`u∆ikñy
(
ö_vÆgröd
))

926 
›t_tˇche
 = 
Ál£
;

929 
i
 = 0; i < 4; i++) {

931 
i
) {

933 
›ts
 = 
c⁄fig_mÆloc_c⁄f
;

936 i‡(
je_mÆloc_c⁄f
 !
NULL
) {

941 
›ts
 = 
je_mÆloc_c⁄f
;

944 
buf
[0] = '\0';

945 
›ts
 = 
buf
;

949 
ssize_t
 
lökÀn
 = 0;

950 #i‚de‡
_WIN32


951 
ßved_î∫o
 = 
î∫o
;

952 c⁄° *
lök«me
 =

953 #ifde‡
JEMALLOC_PREFIX


954 "/ëc/"
JEMALLOC_PREFIX
"malloc.conf"

964 
lökÀn
 = 
	`ªadlök
(
lök«me
, 
buf
, (buf) - 1);

965 i‡(
lökÀn
 == -1) {

967 
lökÀn
 = 0;

969 
	`£t_î∫o
(
ßved_î∫o
);

972 
buf
[
lökÀn
] = '\0';

973 
›ts
 = 
buf
;

976 c⁄° *
ív«me
 =

977 #ifde‡
JEMALLOC_PREFIX


978 
JEMALLOC_CPREFIX
"MALLOC_CONF"

984 i‡((
›ts
 = 
	`£cuª_gëív
(
ív«me
)Ë!
NULL
) {

992 
buf
[0] = '\0';

993 
›ts
 = 
buf
;

997 
	`nŸ_ªached
();

998 
buf
[0] = '\0';

999 
›ts
 = 
buf
;

1002 *
›ts
 !'\0' && !
	`mÆloc_c⁄f_√xt
(&›ts, &
k
, &
kÀn
, &
v
,

1003 &
vÀn
)) {

1004 
	#CONF_MATCH
(
n
) \

1005 ((
n
)-1 =
kÀn
 && 
	`°∫cmp
“, 
k
, kÀnË=0)

	)

1006 
	#CONF_MATCH_VALUE
(
n
) \

1007 ((
n
)-1 =
vÀn
 && 
	`°∫cmp
“, 
v
, vÀnË=0)

	)

1008 
	#CONF_HANDLE_BOOL
(
o
, 
n
, 
c⁄t
) \

1009 i‡(
	`CONF_MATCH
(
n
)) { \

1010 i‡(
	`CONF_MATCH_VALUE
("true")) \

1011 
o
 = 
åue
; \

1012 i‡(
	`CONF_MATCH_VALUE
("false")) \

1013 
o
 = 
Ál£
; \

1015 
	`mÆloc_c⁄f_îr‹
( \

1017 
k
, 
kÀn
, 
v
, 
vÀn
); \

1019 i‡(
c⁄t
) \

1021 }

	)

1022 
	#CONF_HANDLE_T_U
(
t
, 
o
, 
n
, 
mö
, 
max
, 
˛ù
) \

1023 i‡(
	`CONF_MATCH
(
n
)) { \

1024 
uötmax_t
 
um
; \

1025 *
íd
; \

1027 
	`£t_î∫o
(0); \

1028 
um
 = 
	`mÆloc_°πoumax
(
v
, &
íd
, 0); \

1029 i‡(
	`gë_î∫o
(Ë!0 || (
uöçå_t
)
íd
 -\

1030 (
uöçå_t
)
v
 !
vÀn
) { \

1031 
	`mÆloc_c⁄f_îr‹
( \

1033 
k
, 
kÀn
, 
v
, 
vÀn
); \

1034 } i‡(
˛ù
) { \

1035 i‡((
mö
Ë!0 && 
um
 < (min)) \

1036 
o
 = (
t
)(
mö
); \

1037 i‡(
um
 > (
max
)) \

1038 
o
 = (
t
)(
max
); \

1040 
o
 = (
t
)
um
; \

1042 i‡(((
mö
Ë!0 && 
um
 < (min)) \

1043 || 
um
 > (
max
)) { \

1044 
	`mÆloc_c⁄f_îr‹
( \

1047 
k
, 
kÀn
, 
v
, 
vÀn
); \

1049 
o
 = (
t
)
um
; \

1052 }

	)

1053 
	#CONF_HANDLE_UNSIGNED
(
o
, 
n
, 
mö
, 
max
, 
˛ù
) \

1054 
	`CONF_HANDLE_T_U
(, 
o
, 
n
, 
mö
, 
max
, 
˛ù
)

	)

1055 
	#CONF_HANDLE_SIZE_T
(
o
, 
n
, 
mö
, 
max
, 
˛ù
) \

1056 
	`CONF_HANDLE_T_U
(
size_t
, 
o
, 
n
, 
mö
, 
max
, 
˛ù
)

	)

1057 
	#CONF_HANDLE_SSIZE_T
(
o
, 
n
, 
mö
, 
max
) \

1058 i‡(
	`CONF_MATCH
(
n
)) { \

1059 
l
; \

1060 *
íd
; \

1062 
	`£t_î∫o
(0); \

1063 
l
 = 
	`°πﬁ
(
v
, &
íd
, 0); \

1064 i‡(
	`gë_î∫o
(Ë!0 || (
uöçå_t
)
íd
 -\

1065 (
uöçå_t
)
v
 !
vÀn
) { \

1066 
	`mÆloc_c⁄f_îr‹
( \

1068 
k
, 
kÀn
, 
v
, 
vÀn
); \

1069 } i‡(
l
 < (
ssize_t
)(
mö
) ||Ü > \

1070 (
ssize_t
)(
max
)) { \

1071 
	`mÆloc_c⁄f_îr‹
( \

1073 
k
, 
kÀn
, 
v
, 
vÀn
); \

1075 
o
 = 
l
; \

1077 }

	)

1078 
	#CONF_HANDLE_CHAR_P
(
o
, 
n
, 
d
) \

1079 i‡(
	`CONF_MATCH
(
n
)) { \

1080 
size_t
 
˝yÀn
 = (
vÀn
 <= \

1081 (
o
)-1Ë? 
vÀn
 : \

1082 (
o
)-1; \

1083 
	`°∫˝y
(
o
, 
v
, 
˝yÀn
); \

1084 
o
[
˝yÀn
] = '\0'; \

1086 }

	)

1088 
	`CONF_HANDLE_BOOL
(
›t_ab‹t
, "ab‹t", 
åue
)

1097 
	`CONF_HANDLE_SIZE_T
(
›t_lg_chunk
, "lg_chunk", 
LG_PAGE
 +

1098 
LG_SIZE_CLASS_GROUP
 + (
c⁄fig_fûl
 ? 2 : 1),

1099 ((
size_t
Ë<< 3Ë- 1, 
åue
)

1100 i‡(
	`°∫cmp
("dss", 
k
, 
kÀn
) == 0) {

1101 
i
;

1102 
boﬁ
 
m©ch
 = 
Ál£
;

1103 
i
 = 0; i < 
dss_¥ec_limô
; i++) {

1104 i‡(
	`°∫cmp
(
dss_¥ec_«mes
[
i
], 
v
, 
vÀn
)

1106 i‡(
	`chunk_dss_¥ec_£t
(
NULL
,

1107 
i
)) {

1108 
	`mÆloc_c⁄f_îr‹
(

1110 
k
, 
kÀn
, 
v
, 
vÀn
);

1112 
›t_dss
 =

1113 
dss_¥ec_«mes
[
i
];

1114 
m©ch
 = 
åue
;

1119 i‡(!
m©ch
) {

1120 
	`mÆloc_c⁄f_îr‹
("Invalid conf value",

1121 
k
, 
kÀn
, 
v
, 
vÀn
);

1125 
	`CONF_HANDLE_UNSIGNED
(
›t_«ª«s
, "narenas", 1,

1126 
UINT_MAX
, 
Ál£
)

1127 i‡(
	`°∫cmp
("purge", 
k
, 
kÀn
) == 0) {

1128 
i
;

1129 
boﬁ
 
m©ch
 = 
Ál£
;

1130 
i
 = 0; i < 
purge_mode_limô
; i++) {

1131 i‡(
	`°∫cmp
(
purge_mode_«mes
[
i
], 
v
,

1132 
vÀn
) == 0) {

1133 
›t_purge
 = (
purge_mode_t
)
i
;

1134 
m©ch
 = 
åue
;

1138 i‡(!
m©ch
) {

1139 
	`mÆloc_c⁄f_îr‹
("Invalid conf value",

1140 
k
, 
kÀn
, 
v
, 
vÀn
);

1144 
	`CONF_HANDLE_SSIZE_T
(
›t_lg_dúty_mu…
, "lg_dirty_mult",

1145 -1, ((
size_t
) << 3) - 1)

1146 
	`CONF_HANDLE_SSIZE_T
(
›t_deˇy_time
, "decay_time", -1,

1147 
NSTIME_SEC_MAX
);

1148 
	`CONF_HANDLE_BOOL
(
›t_°©s_¥öt
, "°©s_¥öt", 
åue
)

1149 i‡(
c⁄fig_fûl
) {

1150 i‡(
	`CONF_MATCH
("junk")) {

1151 i‡(
	`CONF_MATCH_VALUE
("true")) {

1152 
›t_junk
 = "true";

1153 
›t_junk_Æloc
 = 
›t_junk_‰ì
 =

1154 
åue
;

1155 } i‡(
	`CONF_MATCH_VALUE
("false")) {

1156 
›t_junk
 = "false";

1157 
›t_junk_Æloc
 = 
›t_junk_‰ì
 =

1158 
Ál£
;

1159 } i‡(
	`CONF_MATCH_VALUE
("alloc")) {

1160 
›t_junk
 = "alloc";

1161 
›t_junk_Æloc
 = 
åue
;

1162 
›t_junk_‰ì
 = 
Ál£
;

1163 } i‡(
	`CONF_MATCH_VALUE
("free")) {

1164 
›t_junk
 = "free";

1165 
›t_junk_Æloc
 = 
Ál£
;

1166 
›t_junk_‰ì
 = 
åue
;

1168 
	`mÆloc_c⁄f_îr‹
(

1169 "InvÆid c⁄‡vÆue", 
k
,

1170 
kÀn
, 
v
, 
vÀn
);

1174 
	`CONF_HANDLE_SIZE_T
(
›t_qu¨™töe
, "quarantine",

1175 0, 
SIZE_T_MAX
, 
Ál£
)

1176 
	`CONF_HANDLE_BOOL
(
›t_ªdz⁄e
, "ªdz⁄e", 
åue
)

1177 
	`CONF_HANDLE_BOOL
(
›t_zîo
, "zîo", 
åue
)

1179 i‡(
c⁄fig_uåa˚
) {

1180 
	`CONF_HANDLE_BOOL
(
›t_uåa˚
, "uåa˚", 
åue
)

1182 i‡(
c⁄fig_xmÆloc
) {

1183 
	`CONF_HANDLE_BOOL
(
›t_xmÆloc
, "xmÆloc", 
åue
)

1185 i‡(
c⁄fig_tˇche
) {

1186 
	`CONF_HANDLE_BOOL
(
›t_tˇche
, "tcache",

1187 !
c⁄fig_vÆgröd
 || !
ö_vÆgröd
)

1188 i‡(
	`CONF_MATCH
("tcache")) {

1189 
	`as£π
(
c⁄fig_vÆgröd
 && 
ö_vÆgröd
);

1190 i‡(
›t_tˇche
) {

1191 
›t_tˇche
 = 
Ál£
;

1192 
	`mÆloc_c⁄f_îr‹
(

1195 
k
, 
kÀn
, 
v
, 
vÀn
);

1199 
	`CONF_HANDLE_SSIZE_T
(
›t_lg_tˇche_max
,

1201 ((
size_t
) << 3) - 1)

1203 i‡(
c⁄fig_¥of
) {

1204 
	`CONF_HANDLE_BOOL
(
›t_¥of
, "¥of", 
åue
)

1205 
	`CONF_HANDLE_CHAR_P
(
›t_¥of_¥efix
,

1207 
	`CONF_HANDLE_BOOL
(
›t_¥of_a˘ive
, "prof_active",

1208 
åue
)

1209 
	`CONF_HANDLE_BOOL
(
›t_¥of_thªad_a˘ive_öô
,

1210 "¥of_thªad_a˘ive_öô", 
åue
)

1211 
	`CONF_HANDLE_SIZE_T
(
›t_lg_¥of_ßm∂e
,

1213 ((
uöt64_t
Ë<< 3Ë- 1, 
åue
)

1214 
	`CONF_HANDLE_BOOL
(
›t_¥of_accum
, "prof_accum",

1215 
åue
)

1216 
	`CONF_HANDLE_SSIZE_T
(
›t_lg_¥of_öãrvÆ
,

1218 ((
uöt64_t
) << 3) - 1)

1219 
	`CONF_HANDLE_BOOL
(
›t_¥of_gdump
, "prof_gdump",

1220 
åue
)

1221 
	`CONF_HANDLE_BOOL
(
›t_¥of_föÆ
, "prof_final",

1222 
åue
)

1223 
	`CONF_HANDLE_BOOL
(
›t_¥of_Àak
, "prof_leak",

1224 
åue
)

1226 
	`mÆloc_c⁄f_îr‹
("InvÆid c⁄‡∑ú", 
k
, 
kÀn
, 
v
,

1227 
vÀn
);

1228 #unde‡
CONF_MATCH


1229 #unde‡
CONF_HANDLE_BOOL


1230 #unde‡
CONF_HANDLE_SIZE_T


1231 #unde‡
CONF_HANDLE_SSIZE_T


1232 #unde‡
CONF_HANDLE_CHAR_P


1235 
	}
}

1237 
boﬁ


1238 
	$mÆloc_öô_h¨d_√eded
()

1241 i‡(
	`mÆloc_öôülized
(Ë|| (
IS_INITIALIZER
 && 
mÆloc_öô_°©e
 ==

1242 
mÆloc_öô_ªcursibÀ
)) {

1248  (
Ál£
);

1250 #ifde‡
JEMALLOC_THREADED_INIT


1251 i‡(
mÆloc_öôülizî
 !
NO_INITIALIZER
 && !
IS_INITIALIZER
) {

1254 
	`mÆloc_muãx_u∆ock
(
NULL
, &
öô_lock
);

1255 
CPU_SPINWAIT
;

1256 
	`mÆloc_muãx_lock
(
NULL
, &
öô_lock
);

1257 } !
	`mÆloc_öôülized
());

1258  (
Ál£
);

1261  (
åue
);

1262 
	}
}

1264 
boﬁ


1265 
	$mÆloc_öô_h¨d_a0_locked
()

1268 
mÆloc_öôülizî
 = 
INITIALIZER
;

1270 i‡(
c⁄fig_¥of
)

1271 
	`¥of_boŸ0
();

1272 
	`mÆloc_c⁄f_öô
();

1273 i‡(
›t_°©s_¥öt
) {

1275 i‡(
	`©exô
(
°©s_¥öt_©exô
) != 0) {

1276 
	`mÆloc_wrôe
("<jemalloc>: Error inátexit()\n");

1277 i‡(
›t_ab‹t
)

1278 
	`ab‹t
();

1281 
	`∑ges_boŸ
();

1282 i‡(
	`ba£_boŸ
())

1283  (
åue
);

1284 i‡(
	`chunk_boŸ
())

1285  (
åue
);

1286 i‡(
	`˘l_boŸ
())

1287  (
åue
);

1288 i‡(
c⁄fig_¥of
)

1289 
	`¥of_boŸ1
();

1290 i‡(
	`¨ía_boŸ
())

1291  (
åue
);

1292 i‡(
c⁄fig_tˇche
 && 
	`tˇche_boŸ
(
TSDN_NULL
))

1293  (
åue
);

1294 i‡(
	`mÆloc_muãx_öô
(&
¨ías_lock
, "¨ías", 
WITNESS_RANK_ARENAS
))

1295  (
åue
);

1300 
«ª«s_auto
 = 1;

1301 
	`«ª«s_tŸÆ_£t
(
«ª«s_auto
);

1302 
¨ías
 = &
a0
;

1303 
	`mem£t
(
¨ías
, 0, (
¨ía_t
 *Ë* 
«ª«s_auto
);

1308 i‡(
	`¨ía_öô
(
TSDN_NULL
, 0Ë=
NULL
)

1309  (
åue
);

1311 
mÆloc_öô_°©e
 = 
mÆloc_öô_a0_öôülized
;

1313  (
Ál£
);

1314 
	}
}

1316 
boﬁ


1317 
	$mÆloc_öô_h¨d_a0
()

1319 
boﬁ
 
ªt
;

1321 
	`mÆloc_muãx_lock
(
TSDN_NULL
, &
öô_lock
);

1322 
ªt
 = 
	`mÆloc_öô_h¨d_a0_locked
();

1323 
	`mÆloc_muãx_u∆ock
(
TSDN_NULL
, &
öô_lock
);

1324  (
ªt
);

1325 
	}
}

1328 
boﬁ


1329 
	$mÆloc_öô_h¨d_ªcursibÀ
()

1332 
mÆloc_öô_°©e
 = 
mÆloc_öô_ªcursibÀ
;

1334 
n˝us
 = 
	`mÆloc_n˝us
();

1336 #i‡(!
	`deföed
(
JEMALLOC_MUTEX_INIT_CB
Ë&& !deföed(
JEMALLOC_ZONE
) \

1337 && !
	`deföed
(
_WIN32
Ë&& !deföed(
__«tive_˛õ¡__
))

1339 i‡(
	`±hªad_©f‹k
(
jemÆloc_¥ef‹k
, 
jemÆloc_po°f‹k_∑ª¡
,

1340 
jemÆloc_po°f‹k_chûd
) != 0) {

1341 
	`mÆloc_wrôe
("<jemalloc>: Error inÖthread_atfork()\n");

1342 i‡(
›t_ab‹t
)

1343 
	`ab‹t
();

1344  (
åue
);

1348  (
Ál£
);

1349 
	}
}

1351 
boﬁ


1352 
	$mÆloc_öô_h¨d_föish
(
tsdn_t
 *
tsdn
)

1355 i‡(
	`mÆloc_muãx_boŸ
())

1356  (
åue
);

1358 i‡(
›t_«ª«s
 == 0) {

1363 i‡(
n˝us
 > 1)

1364 
›t_«ª«s
 = 
n˝us
 << 2;

1366 
›t_«ª«s
 = 1;

1368 
«ª«s_auto
 = 
›t_«ª«s
;

1372 i‡(
«ª«s_auto
 > 
MALLOCX_ARENA_MAX
) {

1373 
«ª«s_auto
 = 
MALLOCX_ARENA_MAX
;

1374 
	`mÆloc_¥ötf
("<jemalloc>: ReducingÇarenasÅoÜimit (%d)\n",

1375 
«ª«s_auto
);

1377 
	`«ª«s_tŸÆ_£t
(
«ª«s_auto
);

1380 
¨ías
 = (
¨ía_t
 **)
	`ba£_Æloc
(
tsdn
, (arena_t *) *

1381 (
MALLOCX_ARENA_MAX
+1));

1382 i‡(
¨ías
 =
NULL
)

1383  (
åue
);

1385 
	`¨ía_£t
(0, 
a0
);

1387 
mÆloc_öô_°©e
 = 
mÆloc_öô_öôülized
;

1388 
	`mÆloc_¶ow_Êag_öô
();

1390  (
Ál£
);

1391 
	}
}

1393 
boﬁ


1394 
	$mÆloc_öô_h¨d
()

1396 
tsd_t
 *
tsd
;

1398 #i‡
	`deföed
(
_WIN32
Ë&& 
_WIN32_WINNT
 < 0x0600

1399 
	`_öô_öô_lock
();

1401 
	`mÆloc_muãx_lock
(
TSDN_NULL
, &
öô_lock
);

1402 i‡(!
	`mÆloc_öô_h¨d_√eded
()) {

1403 
	`mÆloc_muãx_u∆ock
(
TSDN_NULL
, &
öô_lock
);

1404  (
Ál£
);

1407 i‡(
mÆloc_öô_°©e
 !
mÆloc_öô_a0_öôülized
 &&

1408 
	`mÆloc_öô_h¨d_a0_locked
()) {

1409 
	`mÆloc_muãx_u∆ock
(
TSDN_NULL
, &
öô_lock
);

1410  (
åue
);

1413 
	`mÆloc_muãx_u∆ock
(
TSDN_NULL
, &
öô_lock
);

1415 
tsd
 = 
	`mÆloc_tsd_boŸ0
();

1416 i‡(
tsd
 =
NULL
)

1417  (
åue
);

1418 i‡(
	`mÆloc_öô_h¨d_ªcursibÀ
())

1419  (
åue
);

1420 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
öô_lock
);

1422 i‡(
c⁄fig_¥of
 && 
	`¥of_boŸ2
(
	`tsd_tsdn
(
tsd
))) {

1423 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
öô_lock
);

1424  (
åue
);

1427 i‡(
	`mÆloc_öô_h¨d_föish
(
	`tsd_tsdn
(
tsd
))) {

1428 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
öô_lock
);

1429  (
åue
);

1432 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
öô_lock
);

1433 
	`mÆloc_tsd_boŸ1
();

1434  (
Ál£
);

1435 
	}
}

1446 
	$üŒoc_¥of_ßm∂e
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
,

1447 
¥of_t˘x_t
 *
t˘x
, 
boﬁ
 
¶ow_∑th
)

1449 *
p
;

1451 i‡(
t˘x
 =
NULL
)

1452  (
NULL
);

1453 i‡(
usize
 <
SMALL_MAXCLASS
) {

1454 
szöd_t
 
öd_œrge
 = 
	`size2ödex
(
LARGE_MINCLASS
);

1455 
p
 = 
	`üŒoc
(
tsd
, 
LARGE_MINCLASS
, 
öd_œrge
, 
zîo
, 
¶ow_∑th
);

1456 i‡(
p
 =
NULL
)

1457  (
NULL
);

1458 
	`¨ía_¥of_¥omŸed
(
	`tsd_tsdn
(
tsd
), 
p
, 
usize
);

1460 
p
 = 
	`üŒoc
(
tsd
, 
usize
, 
öd
, 
zîo
, 
¶ow_∑th
);

1462  (
p
);

1463 
	}
}

1465 
JEMALLOC_ALWAYS_INLINE_C
 *

1466 
	$üŒoc_¥of
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
szöd_t
 
öd
, 
boﬁ
 
zîo
, boﬁ 
¶ow_∑th
)

1468 *
p
;

1469 
¥of_t˘x_t
 *
t˘x
;

1471 
t˘x
 = 
	`¥of_Æloc_¥ï
(
tsd
, 
usize
, 
	`¥of_a˘ive_gë_u∆ocked
(), 
åue
);

1472 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 != (uintptr_t)1U))

1473 
p
 = 
	`üŒoc_¥of_ßm∂e
(
tsd
, 
usize
, 
öd
, 
zîo
, 
t˘x
, 
¶ow_∑th
);

1475 
p
 = 
	`üŒoc
(
tsd
, 
usize
, 
öd
, 
zîo
, 
¶ow_∑th
);

1476 i‡(
	`u∆ikñy
(
p
 =
NULL
)) {

1477 
	`¥of_Æloc_rﬁlback
(
tsd
, 
t˘x
, 
åue
);

1478  (
NULL
);

1480 
	`¥of_mÆloc
(
	`tsd_tsdn
(
tsd
), 
p
, 
usize
, 
t˘x
);

1482  (
p
);

1483 
	}
}

1491 
JEMALLOC_ALWAYS_INLINE_C
 *

1492 
	$üŒoc_body
(
size_t
 
size
, 
boﬁ
 
zîo
, 
tsdn_t
 **
tsdn
, size_à*
usize
,

1493 
boﬁ
 
¶ow_∑th
)

1495 
tsd_t
 *
tsd
;

1496 
szöd_t
 
öd
;

1498 i‡(
¶ow_∑th
 && 
	`u∆ikñy
(
	`mÆloc_öô
())) {

1499 *
tsdn
 = 
NULL
;

1500  (
NULL
);

1503 
tsd
 = 
	`tsd_„tch
();

1504 *
tsdn
 = 
	`tsd_tsdn
(
tsd
);

1505 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1507 
öd
 = 
	`size2ödex
(
size
);

1508 i‡(
	`u∆ikñy
(
öd
 >
NSIZES
))

1509  (
NULL
);

1511 i‡(
c⁄fig_°©s
 || (
c⁄fig_¥of
 && 
›t_¥of
Ë|| (
¶ow_∑th
 &&

1512 
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
))) {

1513 *
usize
 = 
	`ödex2size
(
öd
);

1514 
	`as£π
(*
usize
 > 0 && *usizê<
HUGE_MAXCLASS
);

1517 i‡(
c⁄fig_¥of
 && 
›t_¥of
)

1518  (
	`üŒoc_¥of
(
tsd
, *
usize
, 
öd
, 
zîo
, 
¶ow_∑th
));

1520  (
	`üŒoc
(
tsd
, 
size
, 
öd
, 
zîo
, 
¶ow_∑th
));

1521 
	}
}

1523 
JEMALLOC_ALWAYS_INLINE_C
 

1524 
	$üŒoc_po°_check
(*
ªt
, 
tsdn_t
 *
tsdn
, 
size_t
 
usize
, c⁄° *
func
,

1525 
boﬁ
 
upd©e_î∫o
, boﬁ 
¶ow_∑th
)

1528 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
ªt
 =
NULL
);

1530 i‡(
	`u∆ikñy
(
ªt
 =
NULL
)) {

1531 i‡(
¶ow_∑th
 && 
c⁄fig_xmÆloc
 && 
	`u∆ikñy
(
›t_xmÆloc
)) {

1532 
	`mÆloc_¥ötf
("<jemalloc>: Error in %s(): out of "

1533 "mem‹y\n", 
func
);

1534 
	`ab‹t
();

1536 i‡(
upd©e_î∫o
)

1537 
	`£t_î∫o
(
ENOMEM
);

1539 i‡(
c⁄fig_°©s
 && 
	`likñy
(
ªt
 !
NULL
)) {

1540 
	`as£π
(
usize
 =
	`ißŒoc
(
tsdn
, 
ªt
, 
c⁄fig_¥of
));

1541 *
	`tsd_thªad_Æloˇãdp_gë
(
	`tsdn_tsd
(
tsdn
)Ë+
usize
;

1543 
	`wô√ss_as£π_lockÀss
(
tsdn
);

1544 
	}
}

1546 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


1547 
JEMALLOC_NOTHROW
 *

1548 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	$JEMALLOC_ALLOC_SIZE
(1)

1549 
	$je_mÆloc
(
size_t
 
size
)

1551 *
ªt
;

1552 
tsdn_t
 *
tsdn
;

1553 
size_t
 
usize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

1555 i‡(
size
 == 0)

1556 
size
 = 1;

1558 i‡(
	`likñy
(!
mÆloc_¶ow
)) {

1559 
ªt
 = 
	`üŒoc_body
(
size
, 
Ál£
, &
tsdn
, &
usize
, false);

1560 
	`üŒoc_po°_check
(
ªt
, 
tsdn
, 
usize
, "mÆloc", 
åue
, 
Ál£
);

1562 
ªt
 = 
	`üŒoc_body
(
size
, 
Ál£
, &
tsdn
, &
usize
, 
åue
);

1563 
	`üŒoc_po°_check
(
ªt
, 
tsdn
, 
usize
, "mÆloc", 
åue
,Årue);

1564 
	`UTRACE
(0, 
size
, 
ªt
);

1565 
	`JEMALLOC_VALGRIND_MALLOC
(
ªt
 !
NULL
, 
tsdn
,Ñë, 
usize
, 
Ál£
);

1568  (
ªt
);

1569 
	}
}

1572 
	$imemÆign_¥of_ßm∂e
(
tsd_t
 *
tsd
, 
size_t
 
Æignmít
, size_à
usize
,

1573 
¥of_t˘x_t
 *
t˘x
)

1575 *
p
;

1577 i‡(
t˘x
 =
NULL
)

1578  (
NULL
);

1579 i‡(
usize
 <
SMALL_MAXCLASS
) {

1580 
	`as£π
(
	`ß2u
(
LARGE_MINCLASS
, 
Æignmít
) == LARGE_MINCLASS);

1581 
p
 = 
	`ùÆloc
(
tsd
, 
LARGE_MINCLASS
, 
Æignmít
, 
Ál£
);

1582 i‡(
p
 =
NULL
)

1583  (
NULL
);

1584 
	`¨ía_¥of_¥omŸed
(
	`tsd_tsdn
(
tsd
), 
p
, 
usize
);

1586 
p
 = 
	`ùÆloc
(
tsd
, 
usize
, 
Æignmít
, 
Ál£
);

1588  (
p
);

1589 
	}
}

1591 
JEMALLOC_ALWAYS_INLINE_C
 *

1592 
	$imemÆign_¥of
(
tsd_t
 *
tsd
, 
size_t
 
Æignmít
, size_à
usize
)

1594 *
p
;

1595 
¥of_t˘x_t
 *
t˘x
;

1597 
t˘x
 = 
	`¥of_Æloc_¥ï
(
tsd
, 
usize
, 
	`¥of_a˘ive_gë_u∆ocked
(), 
åue
);

1598 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 != (uintptr_t)1U))

1599 
p
 = 
	`imemÆign_¥of_ßm∂e
(
tsd
, 
Æignmít
, 
usize
, 
t˘x
);

1601 
p
 = 
	`ùÆloc
(
tsd
, 
usize
, 
Æignmít
, 
Ál£
);

1602 i‡(
	`u∆ikñy
(
p
 =
NULL
)) {

1603 
	`¥of_Æloc_rﬁlback
(
tsd
, 
t˘x
, 
åue
);

1604  (
NULL
);

1606 
	`¥of_mÆloc
(
	`tsd_tsdn
(
tsd
), 
p
, 
usize
, 
t˘x
);

1608  (
p
);

1609 
	}
}

1611 
JEMALLOC_ATTR
(
	$n⁄nuŒ
(1))

1613 
	$imemÆign
(**
mem±r
, 
size_t
 
Æignmít
, size_à
size
, size_à
mö_Æignmít
)

1615 
ªt
;

1616 
tsd_t
 *
tsd
;

1617 
size_t
 
usize
;

1618 *
ªsu…
;

1620 
	`as£π
(
mö_Æignmít
 != 0);

1622 i‡(
	`u∆ikñy
(
	`mÆloc_öô
())) {

1623 
tsd
 = 
NULL
;

1624 
ªsu…
 = 
NULL
;

1625 
œbñ_oom
;

1627 
tsd
 = 
	`tsd_„tch
();

1628 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1629 i‡(
size
 == 0)

1630 
size
 = 1;

1633 i‡(
	`u∆ikñy
(((
Æignmít
 - 1) &álignment) != 0

1634 || (
Æignmít
 < 
mö_Æignmít
))) {

1635 i‡(
c⁄fig_xmÆloc
 && 
	`u∆ikñy
(
›t_xmÆloc
)) {

1636 
	`mÆloc_wrôe
("<jemalloc>: Errorállocating "

1638 
	`ab‹t
();

1640 
ªsu…
 = 
NULL
;

1641 
ªt
 = 
EINVAL
;

1642 
œbñ_ªtu∫
;

1645 
usize
 = 
	`ß2u
(
size
, 
Æignmít
);

1646 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
)) {

1647 
ªsu…
 = 
NULL
;

1648 
œbñ_oom
;

1651 i‡(
c⁄fig_¥of
 && 
›t_¥of
)

1652 
ªsu…
 = 
	`imemÆign_¥of
(
tsd
, 
Æignmít
, 
usize
);

1654 
ªsu…
 = 
	`ùÆloc
(
tsd
, 
usize
, 
Æignmít
, 
Ál£
);

1655 i‡(
	`u∆ikñy
(
ªsu…
 =
NULL
))

1656 
œbñ_oom
;

1657 
	`as£π
(((
uöçå_t
)
ªsu…
 & (
Æignmít
 - 1)Ë=
	`ZU
(0));

1659 *
mem±r
 = 
ªsu…
;

1660 
ªt
 = 0;

1661 
œbñ_ªtu∫
:

1662 i‡(
c⁄fig_°©s
 && 
	`likñy
(
ªsu…
 !
NULL
)) {

1663 
	`as£π
(
usize
 =
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
ªsu…
, 
c⁄fig_¥of
));

1664 *
	`tsd_thªad_Æloˇãdp_gë
(
tsd
Ë+
usize
;

1666 
	`UTRACE
(0, 
size
, 
ªsu…
);

1667 
	`JEMALLOC_VALGRIND_MALLOC
(
ªsu…
 !
NULL
, 
	`tsd_tsdn
(
tsd
),Ñesu…, 
usize
,

1668 
Ál£
);

1669 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1670  (
ªt
);

1671 
œbñ_oom
:

1672 
	`as£π
(
ªsu…
 =
NULL
);

1673 i‡(
c⁄fig_xmÆloc
 && 
	`u∆ikñy
(
›t_xmÆloc
)) {

1674 
	`mÆloc_wrôe
("<jemalloc>: Errorállocatingáligned memory: "

1676 
	`ab‹t
();

1678 
ªt
 = 
ENOMEM
;

1679 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1680 
œbñ_ªtu∫
;

1681 
	}
}

1683 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


1684 
JEMALLOC_ATTR
(
	$n⁄nuŒ
(1))

1685 
	$je_posix_memÆign
(**
mem±r
, 
size_t
 
Æignmít
, size_à
size
)

1687 
ªt
;

1689 
ªt
 = 
	`imemÆign
(
mem±r
, 
Æignmít
, 
size
, (*));

1691  (
ªt
);

1692 
	}
}

1694 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


1695 
JEMALLOC_NOTHROW
 *

1696 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	$JEMALLOC_ALLOC_SIZE
(2)

1697 
	$je_Æig√d_Æloc
(
size_t
 
Æignmít
, size_à
size
)

1699 *
ªt
;

1700 
îr
;

1702 i‡(
	`u∆ikñy
((
îr
 = 
	`imemÆign
(&
ªt
, 
Æignmít
, 
size
, 1)) != 0)) {

1703 
ªt
 = 
NULL
;

1704 
	`£t_î∫o
(
îr
);

1707  (
ªt
);

1708 
	}
}

1710 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


1711 
JEMALLOC_NOTHROW
 *

1712 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	$JEMALLOC_ALLOC_SIZE2
(1, 2)

1713 
	$je_ˇŒoc
(
size_t
 
num
, size_à
size
)

1715 *
ªt
;

1716 
tsdn_t
 *
tsdn
;

1717 
size_t
 
num_size
;

1718 
size_t
 
usize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

1720 
num_size
 = 
num
 * 
size
;

1721 i‡(
	`u∆ikñy
(
num_size
 == 0)) {

1722 i‡(
num
 =0 || 
size
 == 0)

1723 
num_size
 = 1;

1725 
num_size
 = 
HUGE_MAXCLASS
 + 1;

1731 } i‡(
	`u∆ikñy
(((
num
 | 
size
Ë& (
SIZE_T_MAX
 << ((
size_t
) <<

1732 2))Ë&& (
num_size
 / 
size
 !
num
)))

1733 
num_size
 = 
HUGE_MAXCLASS
 + 1;

1735 i‡(
	`likñy
(!
mÆloc_¶ow
)) {

1736 
ªt
 = 
	`üŒoc_body
(
num_size
, 
åue
, &
tsdn
, &
usize
, 
Ál£
);

1737 
	`üŒoc_po°_check
(
ªt
, 
tsdn
, 
usize
, "ˇŒoc", 
åue
, 
Ál£
);

1739 
ªt
 = 
	`üŒoc_body
(
num_size
, 
åue
, &
tsdn
, &
usize
,Årue);

1740 
	`üŒoc_po°_check
(
ªt
, 
tsdn
, 
usize
, "ˇŒoc", 
åue
,Årue);

1741 
	`UTRACE
(0, 
num_size
, 
ªt
);

1742 
	`JEMALLOC_VALGRIND_MALLOC
(
ªt
 !
NULL
, 
tsdn
,Ñë, 
usize
, 
Ál£
);

1745  (
ªt
);

1746 
	}
}

1749 
	$úóŒoc_¥of_ßm∂e
(
tsd_t
 *
tsd
, *
ﬁd_±r
, 
size_t
 
ﬁd_usize
, size_à
usize
,

1750 
¥of_t˘x_t
 *
t˘x
)

1752 *
p
;

1754 i‡(
t˘x
 =
NULL
)

1755  (
NULL
);

1756 i‡(
usize
 <
SMALL_MAXCLASS
) {

1757 
p
 = 
	`úÆloc
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
LARGE_MINCLASS
, 0, 
Ál£
);

1758 i‡(
p
 =
NULL
)

1759  (
NULL
);

1760 
	`¨ía_¥of_¥omŸed
(
	`tsd_tsdn
(
tsd
), 
p
, 
usize
);

1762 
p
 = 
	`úÆloc
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
usize
, 0, 
Ál£
);

1764  (
p
);

1765 
	}
}

1767 
JEMALLOC_ALWAYS_INLINE_C
 *

1768 
	$úóŒoc_¥of
(
tsd_t
 *
tsd
, *
ﬁd_±r
, 
size_t
 
ﬁd_usize
, size_à
usize
)

1770 *
p
;

1771 
boﬁ
 
¥of_a˘ive
;

1772 
¥of_t˘x_t
 *
ﬁd_t˘x
, *
t˘x
;

1774 
¥of_a˘ive
 = 
	`¥of_a˘ive_gë_u∆ocked
();

1775 
ﬁd_t˘x
 = 
	`¥of_t˘x_gë
(
	`tsd_tsdn
(
tsd
), 
ﬁd_±r
);

1776 
t˘x
 = 
	`¥of_Æloc_¥ï
(
tsd
, 
usize
, 
¥of_a˘ive
, 
åue
);

1777 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 != (uintptr_t)1U))

1778 
p
 = 
	`úóŒoc_¥of_ßm∂e
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
usize
, 
t˘x
);

1780 
p
 = 
	`úÆloc
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
usize
, 0, 
Ál£
);

1781 i‡(
	`u∆ikñy
(
p
 =
NULL
)) {

1782 
	`¥of_Æloc_rﬁlback
(
tsd
, 
t˘x
, 
åue
);

1783  (
NULL
);

1785 
	`¥of_ªÆloc
(
tsd
, 
p
, 
usize
, 
t˘x
, 
¥of_a˘ive
, 
åue
, 
ﬁd_±r
, 
ﬁd_usize
,

1786 
ﬁd_t˘x
);

1788  (
p
);

1789 
	}
}

1791 
JEMALLOC_INLINE_C
 

1792 
	$i‰ì
(
tsd_t
 *
tsd
, *
±r
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
)

1794 
size_t
 
usize
;

1795 
UNUSED
 
size_t
 
rzsize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

1797 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1799 
	`as£π
(
±r
 !
NULL
);

1800 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

1802 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

1803 
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

1804 
	`¥of_‰ì
(
tsd
, 
±r
, 
usize
);

1805 } i‡(
c⁄fig_°©s
 || 
c⁄fig_vÆgröd
)

1806 
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

1807 i‡(
c⁄fig_°©s
)

1808 *
	`tsd_thªad_dóŒoˇãdp_gë
(
tsd
Ë+
usize
;

1810 i‡(
	`likñy
(!
¶ow_∑th
))

1811 
	`iqÆloc
(
tsd
, 
±r
, 
tˇche
, 
Ál£
);

1813 i‡(
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
))

1814 
rzsize
 = 
	`p2rz
(
	`tsd_tsdn
(
tsd
), 
±r
);

1815 
	`iqÆloc
(
tsd
, 
±r
, 
tˇche
, 
åue
);

1816 
	`JEMALLOC_VALGRIND_FREE
(
±r
, 
rzsize
);

1818 
	}
}

1820 
JEMALLOC_INLINE_C
 

1821 
	$is‰ì
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
usize
, 
tˇche_t
 *
tˇche
, 
boﬁ
 
¶ow_∑th
)

1823 
UNUSED
 
size_t
 
rzsize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

1825 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1827 
	`as£π
(
±r
 !
NULL
);

1828 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

1830 i‡(
c⁄fig_¥of
 && 
›t_¥of
)

1831 
	`¥of_‰ì
(
tsd
, 
±r
, 
usize
);

1832 i‡(
c⁄fig_°©s
)

1833 *
	`tsd_thªad_dóŒoˇãdp_gë
(
tsd
Ë+
usize
;

1834 i‡(
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
))

1835 
rzsize
 = 
	`p2rz
(
	`tsd_tsdn
(
tsd
), 
±r
);

1836 
	`isqÆloc
(
tsd
, 
±r
, 
usize
, 
tˇche
, 
¶ow_∑th
);

1837 
	`JEMALLOC_VALGRIND_FREE
(
±r
, 
rzsize
);

1838 
	}
}

1840 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


1841 
JEMALLOC_NOTHROW
 *

1842 
	$JEMALLOC_ALLOC_SIZE
(2)

1843 
	$je_ªÆloc
(*
±r
, 
size_t
 
size
)

1845 *
ªt
;

1846 
tsdn_t
 *
tsdn
 
	`JEMALLOC_CC_SILENCE_INIT
(
NULL
);

1847 
size_t
 
usize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

1848 
size_t
 
ﬁd_usize
 = 0;

1849 
UNUSED
 
size_t
 
ﬁd_rzsize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

1851 i‡(
	`u∆ikñy
(
size
 == 0)) {

1852 i‡(
±r
 !
NULL
) {

1853 
tsd_t
 *
tsd
;

1856 
	`UTRACE
(
±r
, 0, 0);

1857 
tsd
 = 
	`tsd_„tch
();

1858 
	`i‰ì
(
tsd
, 
±r
, 
	`tˇche_gë
—sd, 
Ál£
), 
åue
);

1859  (
NULL
);

1861 
size
 = 1;

1864 i‡(
	`likñy
(
±r
 !
NULL
)) {

1865 
tsd_t
 *
tsd
;

1867 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

1868 
	`mÆloc_thªad_öô
();

1869 
tsd
 = 
	`tsd_„tch
();

1871 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1873 
ﬁd_usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

1874 i‡(
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
)) {

1875 
ﬁd_rzsize
 = 
c⁄fig_¥of
 ? 
	`p2rz
(
	`tsd_tsdn
(
tsd
), 
±r
) :

1876 
	`u2rz
(
ﬁd_usize
);

1879 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

1880 
usize
 = 
	`s2u
(
size
);

1881 
ªt
 = 
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
) ?

1882 
NULL
 : 
	`úóŒoc_¥of
(
tsd
, 
±r
, 
ﬁd_usize
, 
usize
);

1884 i‡(
c⁄fig_°©s
 || (
c⁄fig_vÆgröd
 &&

1885 
	`u∆ikñy
(
ö_vÆgröd
)))

1886 
usize
 = 
	`s2u
(
size
);

1887 
ªt
 = 
	`úÆloc
(
tsd
, 
±r
, 
ﬁd_usize
, 
size
, 0, 
Ál£
);

1889 
tsdn
 = 
	`tsd_tsdn
(
tsd
);

1892 i‡(
	`likñy
(!
mÆloc_¶ow
))

1893 
ªt
 = 
	`üŒoc_body
(
size
, 
Ál£
, &
tsdn
, &
usize
, false);

1895 
ªt
 = 
	`üŒoc_body
(
size
, 
Ál£
, &
tsdn
, &
usize
, 
åue
);

1896 
	`as£π
(!
	`tsdn_nuŒ
(
tsdn
Ë|| 
ªt
 =
NULL
);

1899 i‡(
	`u∆ikñy
(
ªt
 =
NULL
)) {

1900 i‡(
c⁄fig_xmÆloc
 && 
	`u∆ikñy
(
›t_xmÆloc
)) {

1901 
	`mÆloc_wrôe
("<jemalloc>: Error inÑealloc(): "

1903 
	`ab‹t
();

1905 
	`£t_î∫o
(
ENOMEM
);

1907 i‡(
c⁄fig_°©s
 && 
	`likñy
(
ªt
 !
NULL
)) {

1908 
tsd_t
 *
tsd
;

1910 
	`as£π
(
usize
 =
	`ißŒoc
(
tsdn
, 
ªt
, 
c⁄fig_¥of
));

1911 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

1912 *
	`tsd_thªad_Æloˇãdp_gë
(
tsd
Ë+
usize
;

1913 *
	`tsd_thªad_dóŒoˇãdp_gë
(
tsd
Ë+
ﬁd_usize
;

1915 
	`UTRACE
(
±r
, 
size
, 
ªt
);

1916 
	`JEMALLOC_VALGRIND_REALLOC
(
åue
, 
tsdn
, 
ªt
, 
usize
,Årue, 
±r
, 
ﬁd_usize
,

1917 
ﬁd_rzsize
, 
åue
, 
Ál£
);

1918 
	`wô√ss_as£π_lockÀss
(
tsdn
);

1919  (
ªt
);

1920 
	}
}

1922 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


1923 
	$je_‰ì
(*
±r
)

1926 
	`UTRACE
(
±r
, 0, 0);

1927 i‡(
	`likñy
(
±r
 !
NULL
)) {

1928 
tsd_t
 *
tsd
 = 
	`tsd_„tch
();

1929 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1930 i‡(
	`likñy
(!
mÆloc_¶ow
))

1931 
	`i‰ì
(
tsd
, 
±r
, 
	`tˇche_gë
—sd, 
Ál£
), false);

1933 
	`i‰ì
(
tsd
, 
±r
, 
	`tˇche_gë
—sd, 
Ál£
), 
åue
);

1934 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

1936 
	}
}

1946 #ifde‡
JEMALLOC_OVERRIDE_MEMALIGN


1947 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


1948 
JEMALLOC_NOTHROW
 *

1949 
	$JEMALLOC_ATTR
(
mÆloc
)

1950 
	$je_memÆign
(
size_t
 
Æignmít
, size_à
size
)

1952 *
ªt
 
	`JEMALLOC_CC_SILENCE_INIT
(
NULL
);

1953 i‡(
	`u∆ikñy
(
	`imemÆign
(&
ªt
, 
Æignmít
, 
size
, 1) != 0))

1954 
ªt
 = 
NULL
;

1955  (
ªt
);

1956 
	}
}

1959 #ifde‡
JEMALLOC_OVERRIDE_VALLOC


1960 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


1961 
JEMALLOC_NOTHROW
 *

1962 
	$JEMALLOC_ATTR
(
mÆloc
)

1963 
	$je_vÆloc
(
size_t
 
size
)

1965 *
ªt
 
	`JEMALLOC_CC_SILENCE_INIT
(
NULL
);

1966 i‡(
	`u∆ikñy
(
	`imemÆign
(&
ªt
, 
PAGE
, 
size
, 1) != 0))

1967 
ªt
 = 
NULL
;

1968  (
ªt
);

1969 
	}
}

1976 
	#mÆloc_is_mÆloc
 1

	)

1977 
	#is_mÆloc_
(
a
Ë
mÆloc_is_
 ## 
	)
a

1978 
	#is_mÆloc
(
a
Ë
	`is_mÆloc_
◊)

	)

1980 #i‡((
is_mÆloc
(
je_mÆloc
Ë=1Ë&& 
deföed
(
JEMALLOC_GLIBC_MALLOC_HOOK
))

1990 
JEMALLOC_EXPORT
 (*
__‰ì_hook
)(*
±r
Ë
je_‰ì
;

1991 
JEMALLOC_EXPORT
 *(*
__mÆloc_hook
)(
size_t
 
size
Ë
je_mÆloc
;

1992 
JEMALLOC_EXPORT
 *(*
__ªÆloc_hook
)(*
±r
, 
size_t
 
size
Ë
je_ªÆloc
;

1993 #ifde‡
JEMALLOC_GLIBC_MEMALIGN_HOOK


1994 
JEMALLOC_EXPORT
 *(*
__memÆign_hook
)(
size_t
 
Æignmít
, size_à
size
) =

1995 
je_memÆign
;

2007 
JEMALLOC_ALWAYS_INLINE_C
 
boﬁ


2008 
	$imÆlocx_Êags_decode
(
tsd_t
 *
tsd
, 
size_t
 
size
, 
Êags
, size_à*
usize
,

2009 
size_t
 *
Æignmít
, 
boﬁ
 *
zîo
, 
tˇche_t
 **
tˇche
, 
¨ía_t
 **
¨ía
)

2012 i‡((
Êags
 & 
MALLOCX_LG_ALIGN_MASK
) == 0) {

2013 *
Æignmít
 = 0;

2014 *
usize
 = 
	`s2u
(
size
);

2016 *
Æignmít
 = 
	`MALLOCX_ALIGN_GET_SPECIFIED
(
Êags
);

2017 *
usize
 = 
	`ß2u
(
size
, *
Æignmít
);

2019 i‡(
	`u∆ikñy
(*
usize
 =0 || *usizê> 
HUGE_MAXCLASS
))

2020  (
åue
);

2021 *
zîo
 = 
	`MALLOCX_ZERO_GET
(
Êags
);

2022 i‡((
Êags
 & 
MALLOCX_TCACHE_MASK
) != 0) {

2023 i‡((
Êags
 & 
MALLOCX_TCACHE_MASK
Ë=
MALLOCX_TCACHE_NONE
)

2024 *
tˇche
 = 
NULL
;

2026 *
tˇche
 = 
	`tˇches_gë
(
tsd
, 
	`MALLOCX_TCACHE_GET
(
Êags
));

2028 *
tˇche
 = 
	`tˇche_gë
(
tsd
, 
åue
);

2029 i‡((
Êags
 & 
MALLOCX_ARENA_MASK
) != 0) {

2030 
¨ía_öd
 = 
	`MALLOCX_ARENA_GET
(
Êags
);

2031 *
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
åue
);

2032 i‡(
	`u∆ikñy
(*
¨ía
 =
NULL
))

2033  (
åue
);

2035 *
¨ía
 = 
NULL
;

2036  (
Ál£
);

2037 
	}
}

2039 
JEMALLOC_ALWAYS_INLINE_C
 *

2040 
	$imÆlocx_Êags
(
tsdn_t
 *
tsdn
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
,

2041 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
, 
boﬁ
 
¶ow_∑th
)

2043 
szöd_t
 
öd
;

2045 i‡(
	`u∆ikñy
(
Æignmít
 != 0))

2046  (
	`ùÆlo˘
(
tsdn
, 
usize
, 
Æignmít
, 
zîo
, 
tˇche
, 
¨ía
));

2047 
öd
 = 
	`size2ödex
(
usize
);

2048 
	`as£π
(
öd
 < 
NSIZES
);

2049  (
	`üŒocztm
(
tsdn
, 
usize
, 
öd
, 
zîo
, 
tˇche
, 
Ál£
, 
¨ía
,

2050 
¶ow_∑th
));

2051 
	}
}

2054 
	$imÆlocx_¥of_ßm∂e
(
tsdn_t
 *
tsdn
, 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
,

2055 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
, 
boﬁ
 
¶ow_∑th
)

2057 *
p
;

2059 i‡(
usize
 <
SMALL_MAXCLASS
) {

2060 
	`as£π
(((
Æignmít
 =0Ë? 
	`s2u
(
LARGE_MINCLASS
) :

2061 
	`ß2u
(
LARGE_MINCLASS
, 
Æignmít
)) == LARGE_MINCLASS);

2062 
p
 = 
	`imÆlocx_Êags
(
tsdn
, 
LARGE_MINCLASS
, 
Æignmít
, 
zîo
,

2063 
tˇche
, 
¨ía
, 
¶ow_∑th
);

2064 i‡(
p
 =
NULL
)

2065  (
NULL
);

2066 
	`¨ía_¥of_¥omŸed
(
tsdn
, 
p
, 
usize
);

2068 
p
 = 
	`imÆlocx_Êags
(
tsdn
, 
usize
, 
Æignmít
, 
zîo
, 
tˇche
, 
¨ía
,

2069 
¶ow_∑th
);

2072  (
p
);

2073 
	}
}

2075 
JEMALLOC_ALWAYS_INLINE_C
 *

2076 
	$imÆlocx_¥of
(
tsd_t
 *
tsd
, 
size_t
 
size
, 
Êags
, size_à*
usize
, 
boﬁ
 
¶ow_∑th
)

2078 *
p
;

2079 
size_t
 
Æignmít
;

2080 
boﬁ
 
zîo
;

2081 
tˇche_t
 *
tˇche
;

2082 
¨ía_t
 *
¨ía
;

2083 
¥of_t˘x_t
 *
t˘x
;

2085 i‡(
	`u∆ikñy
(
	`imÆlocx_Êags_decode
(
tsd
, 
size
, 
Êags
, 
usize
, &
Æignmít
,

2086 &
zîo
, &
tˇche
, &
¨ía
)))

2087  (
NULL
);

2088 
t˘x
 = 
	`¥of_Æloc_¥ï
(
tsd
, *
usize
, 
	`¥of_a˘ive_gë_u∆ocked
(), 
åue
);

2089 i‡(
	`likñy
((
uöçå_t
)
t˘x
 == (uintptr_t)1U)) {

2090 
p
 = 
	`imÆlocx_Êags
(
	`tsd_tsdn
(
tsd
), *
usize
, 
Æignmít
, 
zîo
,

2091 
tˇche
, 
¨ía
, 
¶ow_∑th
);

2092 } i‡((
uöçå_t
)
t˘x
 > (uintptr_t)1U) {

2093 
p
 = 
	`imÆlocx_¥of_ßm∂e
(
	`tsd_tsdn
(
tsd
), *
usize
, 
Æignmít
, 
zîo
,

2094 
tˇche
, 
¨ía
, 
¶ow_∑th
);

2096 
p
 = 
NULL
;

2097 i‡(
	`u∆ikñy
(
p
 =
NULL
)) {

2098 
	`¥of_Æloc_rﬁlback
(
tsd
, 
t˘x
, 
åue
);

2099  (
NULL
);

2101 
	`¥of_mÆloc
(
	`tsd_tsdn
(
tsd
), 
p
, *
usize
, 
t˘x
);

2103 
	`as£π
(
Æignmít
 =0 || ((
uöçå_t
)
p
 & (Æignmíà- 1)Ë=
	`ZU
(0));

2104  (
p
);

2105 
	}
}

2107 
JEMALLOC_ALWAYS_INLINE_C
 *

2108 
	$imÆlocx_no_¥of
(
tsd_t
 *
tsd
, 
size_t
 
size
, 
Êags
, size_à*
usize
,

2109 
boﬁ
 
¶ow_∑th
)

2111 *
p
;

2112 
size_t
 
Æignmít
;

2113 
boﬁ
 
zîo
;

2114 
tˇche_t
 *
tˇche
;

2115 
¨ía_t
 *
¨ía
;

2117 i‡(
	`u∆ikñy
(
	`imÆlocx_Êags_decode
(
tsd
, 
size
, 
Êags
, 
usize
, &
Æignmít
,

2118 &
zîo
, &
tˇche
, &
¨ía
)))

2119  (
NULL
);

2120 
p
 = 
	`imÆlocx_Êags
(
	`tsd_tsdn
(
tsd
), *
usize
, 
Æignmít
, 
zîo
, 
tˇche
,

2121 
¨ía
, 
¶ow_∑th
);

2122 
	`as£π
(
Æignmít
 =0 || ((
uöçå_t
)
p
 & (Æignmíà- 1)Ë=
	`ZU
(0));

2123  (
p
);

2124 
	}
}

2127 
JEMALLOC_ALWAYS_INLINE_C
 *

2128 
	$imÆlocx_body
(
size_t
 
size
, 
Êags
, 
tsdn_t
 **
tsdn
, size_à*
usize
,

2129 
boﬁ
 
¶ow_∑th
)

2131 
tsd_t
 *
tsd
;

2133 i‡(
¶ow_∑th
 && 
	`u∆ikñy
(
	`mÆloc_öô
())) {

2134 *
tsdn
 = 
NULL
;

2135  (
NULL
);

2138 
tsd
 = 
	`tsd_„tch
();

2139 *
tsdn
 = 
	`tsd_tsdn
(
tsd
);

2140 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2142 i‡(
	`likñy
(
Êags
 == 0)) {

2143 
szöd_t
 
öd
 = 
	`size2ödex
(
size
);

2144 i‡(
	`u∆ikñy
(
öd
 >
NSIZES
))

2145  (
NULL
);

2146 i‡(
c⁄fig_°©s
 || (
c⁄fig_¥of
 && 
›t_¥of
Ë|| (
¶ow_∑th
 &&

2147 
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
))) {

2148 *
usize
 = 
	`ödex2size
(
öd
);

2149 
	`as£π
(*
usize
 > 0 && *usizê<
HUGE_MAXCLASS
);

2152 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

2153  (
	`üŒoc_¥of
(
tsd
, *
usize
, 
öd
, 
Ál£
,

2154 
¶ow_∑th
));

2157  (
	`üŒoc
(
tsd
, 
size
, 
öd
, 
Ál£
, 
¶ow_∑th
));

2160 i‡(
c⁄fig_¥of
 && 
›t_¥of
)

2161  (
	`imÆlocx_¥of
(
tsd
, 
size
, 
Êags
, 
usize
, 
¶ow_∑th
));

2163  (
	`imÆlocx_no_¥of
(
tsd
, 
size
, 
Êags
, 
usize
, 
¶ow_∑th
));

2164 
	}
}

2166 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


2167 
JEMALLOC_NOTHROW
 *

2168 
	$JEMALLOC_ATTR
(
mÆloc
Ë
	$JEMALLOC_ALLOC_SIZE
(1)

2169 
	$je_mÆlocx
(
size_t
 
size
, 
Êags
)

2171 
tsdn_t
 *
tsdn
;

2172 *
p
;

2173 
size_t
 
usize
;

2175 
	`as£π
(
size
 != 0);

2177 i‡(
	`likñy
(!
mÆloc_¶ow
)) {

2178 
p
 = 
	`imÆlocx_body
(
size
, 
Êags
, &
tsdn
, &
usize
, 
Ál£
);

2179 
	`üŒoc_po°_check
(
p
, 
tsdn
, 
usize
, "mÆlocx", 
Ál£
, false);

2181 
p
 = 
	`imÆlocx_body
(
size
, 
Êags
, &
tsdn
, &
usize
, 
åue
);

2182 
	`üŒoc_po°_check
(
p
, 
tsdn
, 
usize
, "mÆlocx", 
Ál£
, 
åue
);

2183 
	`UTRACE
(0, 
size
, 
p
);

2184 
	`JEMALLOC_VALGRIND_MALLOC
(
p
 !
NULL
, 
tsdn
,Ö, 
usize
,

2185 
	`MALLOCX_ZERO_GET
(
Êags
));

2188  (
p
);

2189 
	}
}

2192 
	$úÆlocx_¥of_ßm∂e
(
tsd_t
 *
tsd
, *
ﬁd_±r
, 
size_t
 
ﬁd_usize
,

2193 
size_t
 
usize
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
,

2194 
¥of_t˘x_t
 *
t˘x
)

2196 *
p
;

2198 i‡(
t˘x
 =
NULL
)

2199  (
NULL
);

2200 i‡(
usize
 <
SMALL_MAXCLASS
) {

2201 
p
 = 
	`úÆlo˘
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
LARGE_MINCLASS
, 
Æignmít
,

2202 
zîo
, 
tˇche
, 
¨ía
);

2203 i‡(
p
 =
NULL
)

2204  (
NULL
);

2205 
	`¨ía_¥of_¥omŸed
(
	`tsd_tsdn
(
tsd
), 
p
, 
usize
);

2207 
p
 = 
	`úÆlo˘
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
usize
, 
Æignmít
, 
zîo
,

2208 
tˇche
, 
¨ía
);

2211  (
p
);

2212 
	}
}

2214 
JEMALLOC_ALWAYS_INLINE_C
 *

2215 
	$úÆlocx_¥of
(
tsd_t
 *
tsd
, *
ﬁd_±r
, 
size_t
 
ﬁd_usize
, size_à
size
,

2216 
size_t
 
Æignmít
, size_à*
usize
, 
boﬁ
 
zîo
, 
tˇche_t
 *
tˇche
,

2217 
¨ía_t
 *
¨ía
)

2219 *
p
;

2220 
boﬁ
 
¥of_a˘ive
;

2221 
¥of_t˘x_t
 *
ﬁd_t˘x
, *
t˘x
;

2223 
¥of_a˘ive
 = 
	`¥of_a˘ive_gë_u∆ocked
();

2224 
ﬁd_t˘x
 = 
	`¥of_t˘x_gë
(
	`tsd_tsdn
(
tsd
), 
ﬁd_±r
);

2225 
t˘x
 = 
	`¥of_Æloc_¥ï
(
tsd
, *
usize
, 
¥of_a˘ive
, 
åue
);

2226 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 != (uintptr_t)1U)) {

2227 
p
 = 
	`úÆlocx_¥of_ßm∂e
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, *
usize
,

2228 
Æignmít
, 
zîo
, 
tˇche
, 
¨ía
, 
t˘x
);

2230 
p
 = 
	`úÆlo˘
(
tsd
, 
ﬁd_±r
, 
ﬁd_usize
, 
size
, 
Æignmít
, 
zîo
,

2231 
tˇche
, 
¨ía
);

2233 i‡(
	`u∆ikñy
(
p
 =
NULL
)) {

2234 
	`¥of_Æloc_rﬁlback
(
tsd
, 
t˘x
, 
åue
);

2235  (
NULL
);

2238 i‡(
p
 =
ﬁd_±r
 && 
Æignmít
 != 0) {

2247 *
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
p
, 
c⁄fig_¥of
);

2249 
	`¥of_ªÆloc
(
tsd
, 
p
, *
usize
, 
t˘x
, 
¥of_a˘ive
, 
åue
, 
ﬁd_±r
,

2250 
ﬁd_usize
, 
ﬁd_t˘x
);

2252  (
p
);

2253 
	}
}

2255 
JEMALLOC_EXPORT
 
JEMALLOC_ALLOCATOR
 
JEMALLOC_RESTRICT_RETURN


2256 
JEMALLOC_NOTHROW
 *

2257 
	$JEMALLOC_ALLOC_SIZE
(2)

2258 
	$je_øŒocx
(*
±r
, 
size_t
 
size
, 
Êags
)

2260 *
p
;

2261 
tsd_t
 *
tsd
;

2262 
size_t
 
usize
;

2263 
size_t
 
ﬁd_usize
;

2264 
UNUSED
 
size_t
 
ﬁd_rzsize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

2265 
size_t
 
Æignmít
 = 
	`MALLOCX_ALIGN_GET
(
Êags
);

2266 
boﬁ
 
zîo
 = 
Êags
 & 
MALLOCX_ZERO
;

2267 
¨ía_t
 *
¨ía
;

2268 
tˇche_t
 *
tˇche
;

2270 
	`as£π
(
±r
 !
NULL
);

2271 
	`as£π
(
size
 != 0);

2272 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

2273 
	`mÆloc_thªad_öô
();

2274 
tsd
 = 
	`tsd_„tch
();

2275 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2277 i‡(
	`u∆ikñy
((
Êags
 & 
MALLOCX_ARENA_MASK
) != 0)) {

2278 
¨ía_öd
 = 
	`MALLOCX_ARENA_GET
(
Êags
);

2279 
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
¨ía_öd
, 
åue
);

2280 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

2281 
œbñ_oom
;

2283 
¨ía
 = 
NULL
;

2285 i‡(
	`u∆ikñy
((
Êags
 & 
MALLOCX_TCACHE_MASK
) != 0)) {

2286 i‡((
Êags
 & 
MALLOCX_TCACHE_MASK
Ë=
MALLOCX_TCACHE_NONE
)

2287 
tˇche
 = 
NULL
;

2289 
tˇche
 = 
	`tˇches_gë
(
tsd
, 
	`MALLOCX_TCACHE_GET
(
Êags
));

2291 
tˇche
 = 
	`tˇche_gë
(
tsd
, 
åue
);

2293 
ﬁd_usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

2294 i‡(
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
))

2295 
ﬁd_rzsize
 = 
	`u2rz
(
ﬁd_usize
);

2297 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

2298 
usize
 = (
Æignmít
 =0Ë? 
	`s2u
(
size
Ë: 
	`ß2u
(size,álignment);

2299 i‡(
	`u∆ikñy
(
usize
 =0 || usizê> 
HUGE_MAXCLASS
))

2300 
œbñ_oom
;

2301 
p
 = 
	`úÆlocx_¥of
(
tsd
, 
±r
, 
ﬁd_usize
, 
size
, 
Æignmít
, &
usize
,

2302 
zîo
, 
tˇche
, 
¨ía
);

2303 i‡(
	`u∆ikñy
(
p
 =
NULL
))

2304 
œbñ_oom
;

2306 
p
 = 
	`úÆlo˘
(
tsd
, 
±r
, 
ﬁd_usize
, 
size
, 
Æignmít
, 
zîo
,

2307 
tˇche
, 
¨ía
);

2308 i‡(
	`u∆ikñy
(
p
 =
NULL
))

2309 
œbñ_oom
;

2310 i‡(
c⁄fig_°©s
 || (
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
)))

2311 
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
p
, 
c⁄fig_¥of
);

2313 
	`as£π
(
Æignmít
 =0 || ((
uöçå_t
)
p
 & (Æignmíà- 1)Ë=
	`ZU
(0));

2315 i‡(
c⁄fig_°©s
) {

2316 *
	`tsd_thªad_Æloˇãdp_gë
(
tsd
Ë+
usize
;

2317 *
	`tsd_thªad_dóŒoˇãdp_gë
(
tsd
Ë+
ﬁd_usize
;

2319 
	`UTRACE
(
±r
, 
size
, 
p
);

2320 
	`JEMALLOC_VALGRIND_REALLOC
(
åue
, 
	`tsd_tsdn
(
tsd
), 
p
, 
usize
, 
Ál£
, 
±r
,

2321 
ﬁd_usize
, 
ﬁd_rzsize
, 
Ál£
, 
zîo
);

2322 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2323  (
p
);

2324 
œbñ_oom
:

2325 i‡(
c⁄fig_xmÆloc
 && 
	`u∆ikñy
(
›t_xmÆloc
)) {

2326 
	`mÆloc_wrôe
("<jemalloc>: Error inÑallocx(): out of memory\n");

2327 
	`ab‹t
();

2329 
	`UTRACE
(
±r
, 
size
, 0);

2330 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2331  (
NULL
);

2332 
	}
}

2334 
JEMALLOC_ALWAYS_INLINE_C
 
size_t


2335 
	$ixÆlocx_hñ≥r
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁd_usize
, size_à
size
,

2336 
size_t
 
exåa
, size_à
Æignmít
, 
boﬁ
 
zîo
)

2338 
size_t
 
usize
;

2340 i‡(
	`ixÆloc
(
tsdn
, 
±r
, 
ﬁd_usize
, 
size
, 
exåa
, 
Æignmít
, 
zîo
))

2341  (
ﬁd_usize
);

2342 
usize
 = 
	`ißŒoc
(
tsdn
, 
±r
, 
c⁄fig_¥of
);

2344  (
usize
);

2345 
	}
}

2347 
size_t


2348 
	$ixÆlocx_¥of_ßm∂e
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
ﬁd_usize
, size_à
size
,

2349 
size_t
 
exåa
, size_à
Æignmít
, 
boﬁ
 
zîo
, 
¥of_t˘x_t
 *
t˘x
)

2351 
size_t
 
usize
;

2353 i‡(
t˘x
 =
NULL
)

2354  (
ﬁd_usize
);

2355 
usize
 = 
	`ixÆlocx_hñ≥r
(
tsdn
, 
±r
, 
ﬁd_usize
, 
size
, 
exåa
, 
Æignmít
,

2356 
zîo
);

2358  (
usize
);

2359 
	}
}

2361 
JEMALLOC_ALWAYS_INLINE_C
 
size_t


2362 
	$ixÆlocx_¥of
(
tsd_t
 *
tsd
, *
±r
, 
size_t
 
ﬁd_usize
, size_à
size
,

2363 
size_t
 
exåa
, size_à
Æignmít
, 
boﬁ
 
zîo
)

2365 
size_t
 
usize_max
, 
usize
;

2366 
boﬁ
 
¥of_a˘ive
;

2367 
¥of_t˘x_t
 *
ﬁd_t˘x
, *
t˘x
;

2369 
¥of_a˘ive
 = 
	`¥of_a˘ive_gë_u∆ocked
();

2370 
ﬁd_t˘x
 = 
	`¥of_t˘x_gë
(
	`tsd_tsdn
(
tsd
), 
±r
);

2377 i‡(
Æignmít
 == 0) {

2378 
usize_max
 = 
	`s2u
(
size
+
exåa
);

2379 
	`as£π
(
usize_max
 > 0 && usize_max <
HUGE_MAXCLASS
);

2381 
usize_max
 = 
	`ß2u
(
size
+
exåa
, 
Æignmít
);

2382 i‡(
	`u∆ikñy
(
usize_max
 =0 || usize_max > 
HUGE_MAXCLASS
)) {

2389 
usize_max
 = 
HUGE_MAXCLASS
;

2392 
t˘x
 = 
	`¥of_Æloc_¥ï
(
tsd
, 
usize_max
, 
¥of_a˘ive
, 
Ál£
);

2394 i‡(
	`u∆ikñy
((
uöçå_t
)
t˘x
 != (uintptr_t)1U)) {

2395 
usize
 = 
	`ixÆlocx_¥of_ßm∂e
(
	`tsd_tsdn
(
tsd
), 
±r
, 
ﬁd_usize
,

2396 
size
, 
exåa
, 
Æignmít
, 
zîo
, 
t˘x
);

2398 
usize
 = 
	`ixÆlocx_hñ≥r
(
	`tsd_tsdn
(
tsd
), 
±r
, 
ﬁd_usize
, 
size
,

2399 
exåa
, 
Æignmít
, 
zîo
);

2401 i‡(
usize
 =
ﬁd_usize
) {

2402 
	`¥of_Æloc_rﬁlback
(
tsd
, 
t˘x
, 
Ál£
);

2403  (
usize
);

2405 
	`¥of_ªÆloc
(
tsd
, 
±r
, 
usize
, 
t˘x
, 
¥of_a˘ive
, 
Ál£
,Öå, 
ﬁd_usize
,

2406 
ﬁd_t˘x
);

2408  (
usize
);

2409 
	}
}

2411 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW


2412 
	$je_xÆlocx
(*
±r
, 
size_t
 
size
, size_à
exåa
, 
Êags
)

2414 
tsd_t
 *
tsd
;

2415 
size_t
 
usize
, 
ﬁd_usize
;

2416 
UNUSED
 
size_t
 
ﬁd_rzsize
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

2417 
size_t
 
Æignmít
 = 
	`MALLOCX_ALIGN_GET
(
Êags
);

2418 
boﬁ
 
zîo
 = 
Êags
 & 
MALLOCX_ZERO
;

2420 
	`as£π
(
±r
 !
NULL
);

2421 
	`as£π
(
size
 != 0);

2422 
	`as£π
(
SIZE_T_MAX
 - 
size
 >
exåa
);

2423 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

2424 
	`mÆloc_thªad_öô
();

2425 
tsd
 = 
	`tsd_„tch
();

2426 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2428 
ﬁd_usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

2439 i‡(
	`u∆ikñy
(
size
 > 
HUGE_MAXCLASS
)) {

2440 
usize
 = 
ﬁd_usize
;

2441 
œbñ_nŸ_ªsized
;

2443 i‡(
	`u∆ikñy
(
HUGE_MAXCLASS
 - 
size
 < 
exåa
))

2444 
exåa
 = 
HUGE_MAXCLASS
 - 
size
;

2446 i‡(
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
))

2447 
ﬁd_rzsize
 = 
	`u2rz
(
ﬁd_usize
);

2449 i‡(
c⁄fig_¥of
 && 
›t_¥of
) {

2450 
usize
 = 
	`ixÆlocx_¥of
(
tsd
, 
±r
, 
ﬁd_usize
, 
size
, 
exåa
,

2451 
Æignmít
, 
zîo
);

2453 
usize
 = 
	`ixÆlocx_hñ≥r
(
	`tsd_tsdn
(
tsd
), 
±r
, 
ﬁd_usize
, 
size
,

2454 
exåa
, 
Æignmít
, 
zîo
);

2456 i‡(
	`u∆ikñy
(
usize
 =
ﬁd_usize
))

2457 
œbñ_nŸ_ªsized
;

2459 i‡(
c⁄fig_°©s
) {

2460 *
	`tsd_thªad_Æloˇãdp_gë
(
tsd
Ë+
usize
;

2461 *
	`tsd_thªad_dóŒoˇãdp_gë
(
tsd
Ë+
ﬁd_usize
;

2463 
	`JEMALLOC_VALGRIND_REALLOC
(
Ál£
, 
	`tsd_tsdn
(
tsd
), 
±r
, 
usize
, false,Ötr,

2464 
ﬁd_usize
, 
ﬁd_rzsize
, 
Ál£
, 
zîo
);

2465 
œbñ_nŸ_ªsized
:

2466 
	`UTRACE
(
±r
, 
size
,Ötr);

2467 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2468  (
usize
);

2469 
	}
}

2471 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW


2472 
	$JEMALLOC_ATTR
(
puª
)

2473 
	$je_ßŒocx
(c⁄° *
±r
, 
Êags
)

2475 
size_t
 
usize
;

2476 
tsdn_t
 *
tsdn
;

2478 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

2479 
	`mÆloc_thªad_öô
();

2481 
tsdn
 = 
	`tsdn_„tch
();

2482 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2484 i‡(
c⁄fig_ivßŒoc
)

2485 
usize
 = 
	`ivßŒoc
(
tsdn
, 
±r
, 
c⁄fig_¥of
);

2487 
usize
 = 
	`ißŒoc
(
tsdn
, 
±r
, 
c⁄fig_¥of
);

2489 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2490  (
usize
);

2491 
	}
}

2493 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


2494 
	$je_dÆlocx
(*
±r
, 
Êags
)

2496 
tsd_t
 *
tsd
;

2497 
tˇche_t
 *
tˇche
;

2499 
	`as£π
(
±r
 !
NULL
);

2500 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

2502 
tsd
 = 
	`tsd_„tch
();

2503 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2504 i‡(
	`u∆ikñy
((
Êags
 & 
MALLOCX_TCACHE_MASK
) != 0)) {

2505 i‡((
Êags
 & 
MALLOCX_TCACHE_MASK
Ë=
MALLOCX_TCACHE_NONE
)

2506 
tˇche
 = 
NULL
;

2508 
tˇche
 = 
	`tˇches_gë
(
tsd
, 
	`MALLOCX_TCACHE_GET
(
Êags
));

2510 
tˇche
 = 
	`tˇche_gë
(
tsd
, 
Ál£
);

2512 
	`UTRACE
(
±r
, 0, 0);

2513 i‡(
	`likñy
(!
mÆloc_¶ow
))

2514 
	`i‰ì
(
tsd
, 
±r
, 
tˇche
, 
Ál£
);

2516 
	`i‰ì
(
tsd
, 
±r
, 
tˇche
, 
åue
);

2517 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2518 
	}
}

2520 
JEMALLOC_ALWAYS_INLINE_C
 
size_t


2521 
	$öÆlocx
(
tsdn_t
 *
tsdn
, 
size_t
 
size
, 
Êags
)

2523 
size_t
 
usize
;

2525 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2527 i‡(
	`likñy
((
Êags
 & 
MALLOCX_LG_ALIGN_MASK
) == 0))

2528 
usize
 = 
	`s2u
(
size
);

2530 
usize
 = 
	`ß2u
(
size
, 
	`MALLOCX_ALIGN_GET_SPECIFIED
(
Êags
));

2531 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2532  (
usize
);

2533 
	}
}

2535 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


2536 
	$je_sdÆlocx
(*
±r
, 
size_t
 
size
, 
Êags
)

2538 
tsd_t
 *
tsd
;

2539 
tˇche_t
 *
tˇche
;

2540 
size_t
 
usize
;

2542 
	`as£π
(
±r
 !
NULL
);

2543 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

2544 
tsd
 = 
	`tsd_„tch
();

2545 
usize
 = 
	`öÆlocx
(
	`tsd_tsdn
(
tsd
), 
size
, 
Êags
);

2546 
	`as£π
(
usize
 =
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
));

2548 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2549 i‡(
	`u∆ikñy
((
Êags
 & 
MALLOCX_TCACHE_MASK
) != 0)) {

2550 i‡((
Êags
 & 
MALLOCX_TCACHE_MASK
Ë=
MALLOCX_TCACHE_NONE
)

2551 
tˇche
 = 
NULL
;

2553 
tˇche
 = 
	`tˇches_gë
(
tsd
, 
	`MALLOCX_TCACHE_GET
(
Êags
));

2555 
tˇche
 = 
	`tˇche_gë
(
tsd
, 
Ál£
);

2557 
	`UTRACE
(
±r
, 0, 0);

2558 i‡(
	`likñy
(!
mÆloc_¶ow
))

2559 
	`is‰ì
(
tsd
, 
±r
, 
usize
, 
tˇche
, 
Ál£
);

2561 
	`is‰ì
(
tsd
, 
±r
, 
usize
, 
tˇche
, 
åue
);

2562 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2563 
	}
}

2565 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW


2566 
	$JEMALLOC_ATTR
(
puª
)

2567 
	$je_«Œocx
(
size_t
 
size
, 
Êags
)

2569 
size_t
 
usize
;

2570 
tsdn_t
 *
tsdn
;

2572 
	`as£π
(
size
 != 0);

2574 i‡(
	`u∆ikñy
(
	`mÆloc_öô
()))

2577 
tsdn
 = 
	`tsdn_„tch
();

2578 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2580 
usize
 = 
	`öÆlocx
(
tsdn
, 
size
, 
Êags
);

2581 i‡(
	`u∆ikñy
(
usize
 > 
HUGE_MAXCLASS
))

2584 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2585  (
usize
);

2586 
	}
}

2588 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


2589 
	$je_mÆl˘l
(c⁄° *
«me
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
, *
√wp
,

2590 
size_t
 
√wÀn
)

2592 
ªt
;

2593 
tsd_t
 *
tsd
;

2595 i‡(
	`u∆ikñy
(
	`mÆloc_öô
()))

2596  (
EAGAIN
);

2598 
tsd
 = 
	`tsd_„tch
();

2599 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2600 
ªt
 = 
	`˘l_by«me
(
tsd
, 
«me
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
);

2601 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2602  (
ªt
);

2603 
	}
}

2605 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


2606 
	$je_mÆl˘ amëomib
(c⁄° *
«me
, 
size_t
 *
mibp
, size_à*
mibÀ≈
)

2608 
ªt
;

2609 
tsdn_t
 *
tsdn
;

2611 i‡(
	`u∆ikñy
(
	`mÆloc_öô
()))

2612  (
EAGAIN
);

2614 
tsdn
 = 
	`tsdn_„tch
();

2615 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2616 
ªt
 = 
	`˘l_«mëomib
(
tsdn
, 
«me
, 
mibp
, 
mibÀ≈
);

2617 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2618  (
ªt
);

2619 
	}
}

2621 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


2622 
	$je_mÆl˘lbymib
(c⁄° 
size_t
 *
mib
, size_à
mibÀn
, *
ﬁdp
, size_à*
ﬁdÀ≈
,

2623 *
√wp
, 
size_t
 
√wÀn
)

2625 
ªt
;

2626 
tsd_t
 *
tsd
;

2628 i‡(
	`u∆ikñy
(
	`mÆloc_öô
()))

2629  (
EAGAIN
);

2631 
tsd
 = 
	`tsd_„tch
();

2632 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2633 
ªt
 = 
	`˘l_bymib
(
tsd
, 
mib
, 
mibÀn
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
);

2634 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

2635  (
ªt
);

2636 
	}
}

2638 
JEMALLOC_EXPORT
 
JEMALLOC_NOTHROW


2639 
	$je_mÆloc_°©s_¥öt
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

2640 c⁄° *
›ts
)

2642 
tsdn_t
 *
tsdn
;

2644 
tsdn
 = 
	`tsdn_„tch
();

2645 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2646 
	`°©s_¥öt
(
wrôe_cb
, 
cb›aque
, 
›ts
);

2647 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2648 
	}
}

2650 
JEMALLOC_EXPORT
 
size_t
 
JEMALLOC_NOTHROW


2651 
	$je_mÆloc_ußbÀ_size
(
JEMALLOC_USABLE_SIZE_CONST
 *
±r
)

2653 
size_t
 
ªt
;

2654 
tsdn_t
 *
tsdn
;

2656 
	`as£π
(
	`mÆloc_öôülized
(Ë|| 
IS_INITIALIZER
);

2657 
	`mÆloc_thªad_öô
();

2659 
tsdn
 = 
	`tsdn_„tch
();

2660 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2662 i‡(
c⁄fig_ivßŒoc
)

2663 
ªt
 = 
	`ivßŒoc
(
tsdn
, 
±r
, 
c⁄fig_¥of
);

2665 
ªt
 = (
±r
 =
NULL
Ë? 0 : 
	`ißŒoc
(
tsdn
,Öå, 
c⁄fig_¥of
);

2667 
	`wô√ss_as£π_lockÀss
(
tsdn
);

2668  (
ªt
);

2669 
	}
}

2693 #i‚de‡
JEMALLOC_JET


2694 
	$JEMALLOC_ATTR
(
c⁄°ru˘‹
)

2696 
	$jemÆloc_c⁄°ru˘‹
()

2699 
	`mÆloc_öô
();

2700 
	}
}

2703 #i‚de‡
JEMALLOC_MUTEX_INIT_CB


2705 
	$jemÆloc_¥ef‹k
()

2707 
JEMALLOC_EXPORT
 

2708 
	$_mÆloc_¥ef‹k
()

2711 
tsd_t
 *
tsd
;

2712 
i
, 
j
, 
«ª«s
;

2713 
¨ía_t
 *
¨ía
;

2715 #ifde‡
JEMALLOC_MUTEX_INIT_CB


2716 i‡(!
	`mÆloc_öôülized
())

2719 
	`as£π
(
	`mÆloc_öôülized
());

2721 
tsd
 = 
	`tsd_„tch
();

2723 
«ª«s
 = 
	`«ª«s_tŸÆ_gë
();

2725 
	`wô√ss_¥ef‹k
(
tsd
);

2727 
	`˘l_¥ef‹k
(
	`tsd_tsdn
(
tsd
));

2728 
	`mÆloc_muãx_¥ef‹k
(
	`tsd_tsdn
(
tsd
), &
¨ías_lock
);

2729 
	`¥of_¥ef‹k0
(
	`tsd_tsdn
(
tsd
));

2730 
i
 = 0; i < 3; i++) {

2731 
j
 = 0; j < 
«ª«s
; j++) {

2732 i‡((
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
j
, 
Ál£
)) !=

2733 
NULL
) {

2734 
i
) {

2736 
	`¨ía_¥ef‹k0
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

2739 
	`¨ía_¥ef‹k1
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

2742 
	`¨ía_¥ef‹k2
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

2744 : 
	`nŸ_ªached
();

2749 
	`ba£_¥ef‹k
(
	`tsd_tsdn
(
tsd
));

2750 
	`chunk_¥ef‹k
(
	`tsd_tsdn
(
tsd
));

2751 
i
 = 0; i < 
«ª«s
; i++) {

2752 i‡((
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
i
, 
Ál£
)Ë!
NULL
)

2753 
	`¨ía_¥ef‹k3
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

2755 
	`¥of_¥ef‹k1
(
	`tsd_tsdn
(
tsd
));

2756 
	}
}

2758 #i‚de‡
JEMALLOC_MUTEX_INIT_CB


2760 
	$jemÆloc_po°f‹k_∑ª¡
()

2762 
JEMALLOC_EXPORT
 

2763 
	$_mÆloc_po°f‹k
()

2766 
tsd_t
 *
tsd
;

2767 
i
, 
«ª«s
;

2769 #ifde‡
JEMALLOC_MUTEX_INIT_CB


2770 i‡(!
	`mÆloc_öôülized
())

2773 
	`as£π
(
	`mÆloc_öôülized
());

2775 
tsd
 = 
	`tsd_„tch
();

2777 
	`wô√ss_po°f‹k_∑ª¡
(
tsd
);

2779 
	`chunk_po°f‹k_∑ª¡
(
	`tsd_tsdn
(
tsd
));

2780 
	`ba£_po°f‹k_∑ª¡
(
	`tsd_tsdn
(
tsd
));

2781 
i
 = 0, 
«ª«s
 = 
	`«ª«s_tŸÆ_gë
(); i <Çarenas; i++) {

2782 
¨ía_t
 *
¨ía
;

2784 i‡((
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
i
, 
Ál£
)Ë!
NULL
)

2785 
	`¨ía_po°f‹k_∑ª¡
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

2787 
	`¥of_po°f‹k_∑ª¡
(
	`tsd_tsdn
(
tsd
));

2788 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
	`tsd_tsdn
(
tsd
), &
¨ías_lock
);

2789 
	`˘l_po°f‹k_∑ª¡
(
	`tsd_tsdn
(
tsd
));

2790 
	}
}

2793 
	$jemÆloc_po°f‹k_chûd
()

2795 
tsd_t
 *
tsd
;

2796 
i
, 
«ª«s
;

2798 
	`as£π
(
	`mÆloc_öôülized
());

2800 
tsd
 = 
	`tsd_„tch
();

2802 
	`wô√ss_po°f‹k_chûd
(
tsd
);

2804 
	`chunk_po°f‹k_chûd
(
	`tsd_tsdn
(
tsd
));

2805 
	`ba£_po°f‹k_chûd
(
	`tsd_tsdn
(
tsd
));

2806 
i
 = 0, 
«ª«s
 = 
	`«ª«s_tŸÆ_gë
(); i <Çarenas; i++) {

2807 
¨ía_t
 *
¨ía
;

2809 i‡((
¨ía
 = 
	`¨ía_gë
(
	`tsd_tsdn
(
tsd
), 
i
, 
Ál£
)Ë!
NULL
)

2810 
	`¨ía_po°f‹k_chûd
(
	`tsd_tsdn
(
tsd
), 
¨ía
);

2812 
	`¥of_po°f‹k_chûd
(
	`tsd_tsdn
(
tsd
));

2813 
	`mÆloc_muãx_po°f‹k_chûd
(
	`tsd_tsdn
(
tsd
), &
¨ías_lock
);

2814 
	`˘l_po°f‹k_chûd
(
	`tsd_tsdn
(
tsd
));

2815 
	}
}

	@dep/jemalloc-4.2.0/src/mb.c

1 
	#JEMALLOC_MB_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

	@dep/jemalloc-4.2.0/src/mutex.c

1 
	#JEMALLOC_MUTEX_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

4 #i‡
deföed
(
JEMALLOC_LAZY_LOCK
Ë&& !deföed(
_WIN32
)

5 
	~<dlf˙.h
>

8 #i‚de‡
_CRT_SPINCOUNT


9 
	#_CRT_SPINCOUNT
 4000

	)

15 #ifde‡
JEMALLOC_LAZY_LOCK


16 
boﬁ
 
	gi°hªaded
 = 
Ál£
;

18 #ifde‡
JEMALLOC_MUTEX_INIT_CB


19 
boﬁ
 
	gpo°p⁄e_öô
 = 
åue
;

20 
mÆloc_muãx_t
 *
	gpo°p⁄ed_muãxes
 = 
NULL
;

23 #i‡
deföed
(
JEMALLOC_LAZY_LOCK
Ë&& !deföed(
_WIN32
)

24 
±hªad_¸óã_⁄˚
();

33 #i‡
deföed
(
JEMALLOC_LAZY_LOCK
Ë&& !deföed(
_WIN32
)

34 (*
±hªad_¸óã_Âå
)(
±hªad_t
 *
__ª°ri˘
, c⁄° 
±hªad_©å_t
 *,

35 *(*)(*), *
__ª°ri˘
);

38 
	$±hªad_¸óã_⁄˚
()

41 
±hªad_¸óã_Âå
 = 
	`dlsym
(
RTLD_NEXT
, "pthread_create");

42 i‡(
±hªad_¸óã_Âå
 =
NULL
) {

43 
	`mÆloc_wrôe
("<jemalloc>: Error in dlsym(RTLD_NEXT, "

45 
	`ab‹t
();

48 
i°hªaded
 = 
åue
;

49 
	}
}

51 
JEMALLOC_EXPORT
 

52 
	$±hªad_¸óã
(
±hªad_t
 *
__ª°ri˘
 
thªad
,

53 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
©å
, *(*
°¨t_routöe
)(*),

54 *
__ª°ri˘
 
¨g
)

56 
±hªad_⁄˚_t
 
⁄˚_c⁄åﬁ
 = 
PTHREAD_ONCE_INIT
;

58 
	`±hªad_⁄˚
(&
⁄˚_c⁄åﬁ
, 
±hªad_¸óã_⁄˚
);

60  (
	`±hªad_¸óã_Âå
(
thªad
, 
©å
, 
°¨t_routöe
, 
¨g
));

61 
	}
}

66 #ifde‡
JEMALLOC_MUTEX_INIT_CB


67 
JEMALLOC_EXPORT
 
_±hªad_muãx_öô_ˇŒoc_cb
(
±hªad_muãx_t
 *
muãx
,

68 *(
ˇŒoc_cb
)(
size_t
, size_t));

71 
boﬁ


72 
	$mÆloc_muãx_öô
(
mÆloc_muãx_t
 *
muãx
, c⁄° *
«me
, 
wô√ss_ønk_t
 
ønk
)

75 #ifde‡
_WIN32


76 #i‡
_WIN32_WINNT
 >= 0x0600

77 
	`InôülizeSRWLock
(&
muãx
->
lock
);

79 i‡(!
	`InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
(&
muãx
->
lock
,

80 
_CRT_SPINCOUNT
))

81  (
åue
);

83 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

84 
muãx
->
lock
 = 0;

85 #ñi‡(
	`deföed
(
JEMALLOC_MUTEX_INIT_CB
))

86 i‡(
po°p⁄e_öô
) {

87 
muãx
->
po°p⁄ed_√xt
 = 
po°p⁄ed_muãxes
;

88 
po°p⁄ed_muãxes
 = 
muãx
;

90 i‡(
	`_±hªad_muãx_öô_ˇŒoc_cb
(&
muãx
->
lock
,

91 
boŸ°øp_ˇŒoc
) != 0)

92  (
åue
);

95 
±hªad_muãx©å_t
 
©å
;

97 i‡(
	`±hªad_muãx©å_öô
(&
©å
) != 0)

98  (
åue
);

99 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
MALLOC_MUTEX_TYPE
);

100 i‡(
	`±hªad_muãx_öô
(&
muãx
->
lock
, &
©å
) != 0) {

101 
	`±hªad_muãx©å_de°roy
(&
©å
);

102  (
åue
);

104 
	`±hªad_muãx©å_de°roy
(&
©å
);

106 i‡(
c⁄fig_debug
)

107 
	`wô√ss_öô
(&
muãx
->
wô√ss
, 
«me
, 
ønk
, 
NULL
);

108  (
Ál£
);

109 
	}
}

112 
	$mÆloc_muãx_¥ef‹k
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

115 
	`mÆloc_muãx_lock
(
tsdn
, 
muãx
);

116 
	}
}

119 
	$mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

122 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
muãx
);

123 
	}
}

126 
	$mÆloc_muãx_po°f‹k_chûd
(
tsdn_t
 *
tsdn
, 
mÆloc_muãx_t
 *
muãx
)

129 #ifde‡
JEMALLOC_MUTEX_INIT_CB


130 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
muãx
);

132 i‡(
	`mÆloc_muãx_öô
(
muãx
, muãx->
wô√ss
.
«me
,

133 
muãx
->
wô√ss
.
ønk
)) {

134 
	`mÆloc_¥ötf
("<jemalloc>: ErrorÑe-initializing mutex in "

136 i‡(
›t_ab‹t
)

137 
	`ab‹t
();

140 
	}
}

142 
boﬁ


143 
	$mÆloc_muãx_boŸ
()

146 #ifde‡
JEMALLOC_MUTEX_INIT_CB


147 
po°p⁄e_öô
 = 
Ál£
;

148 
po°p⁄ed_muãxes
 !
NULL
) {

149 i‡(
	`_±hªad_muãx_öô_ˇŒoc_cb
(&
po°p⁄ed_muãxes
->
lock
,

150 
boŸ°øp_ˇŒoc
) != 0)

151  (
åue
);

152 
po°p⁄ed_muãxes
 =Öo°p⁄ed_muãxes->
po°p⁄ed_√xt
;

155  (
Ál£
);

156 
	}
}

	@dep/jemalloc-4.2.0/src/nstime.c

1 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

3 
	#BILLION
 
	`UINT64_C
(1000000000)

	)

6 
	$n°ime_öô
(
n°ime_t
 *
time
, 
uöt64_t
 
ns
)

9 
time
->
ns
 =Çs;

10 
	}
}

13 
	$n°ime_öô2
(
n°ime_t
 *
time
, 
uöt64_t
 
£c
, uöt64_à
n£c
)

16 
time
->
ns
 = 
£c
 * 
BILLION
 + 
n£c
;

17 
	}
}

19 
uöt64_t


20 
	$n°ime_ns
(c⁄° 
n°ime_t
 *
time
)

23  (
time
->
ns
);

24 
	}
}

26 
uöt64_t


27 
	$n°ime_£c
(c⁄° 
n°ime_t
 *
time
)

30  (
time
->
ns
 / 
BILLION
);

31 
	}
}

33 
uöt64_t


34 
	$n°ime_n£c
(c⁄° 
n°ime_t
 *
time
)

37  (
time
->
ns
 % 
BILLION
);

38 
	}
}

41 
	$n°ime_c›y
(
n°ime_t
 *
time
, c⁄°Ç°ime_à*
sour˚
)

44 *
time
 = *
sour˚
;

45 
	}
}

48 
	$n°ime_com∑ª
(c⁄° 
n°ime_t
 *
a
, c⁄°Ç°ime_à*
b
)

51  ((
a
->
ns
 > 
b
->ns) - (a->ns < b->ns));

52 
	}
}

55 
	$n°ime_add
(
n°ime_t
 *
time
, c⁄°Ç°ime_à*
addíd
)

58 
	`as£π
(
UINT64_MAX
 - 
time
->
ns
 >
addíd
->ns);

60 
time
->
ns
 +
addíd
->ns;

61 
	}
}

64 
	$n°ime_subåa˘
(
n°ime_t
 *
time
, c⁄°Ç°ime_à*
subåahíd
)

67 
	`as£π
(
	`n°ime_com∑ª
(
time
, 
subåahíd
) >= 0);

69 
time
->
ns
 -
subåahíd
->ns;

70 
	}
}

73 
	$n°ime_imu…ùly
(
n°ime_t
 *
time
, 
uöt64_t
 
mu…ùlõr
)

76 
	`as£π
((((
time
->
ns
 | 
mu…ùlõr
Ë& (
UINT64_MAX
 << ((
uöt64_t
) <<

77 2))Ë=0Ë|| ((
time
->
ns
 * 
mu…ùlõr
) / multiplier ==Åime->ns));

79 
time
->
ns
 *
mu…ùlõr
;

80 
	}
}

83 
	$n°ime_idivide
(
n°ime_t
 *
time
, 
uöt64_t
 
divis‹
)

86 
	`as£π
(
divis‹
 != 0);

88 
time
->
ns
 /
divis‹
;

89 
	}
}

91 
uöt64_t


92 
	$n°ime_divide
(c⁄° 
n°ime_t
 *
time
, c⁄°Ç°ime_à*
divis‹
)

95 
	`as£π
(
divis‹
->
ns
 != 0);

97  (
time
->
ns
 / 
divis‹
->ns);

98 
	}
}

100 #ifde‡
JEMALLOC_JET


101 #unde‡
n°ime_upd©e


102 
	#n°ime_upd©e
 
	`JEMALLOC_N
(
n_n°ime_upd©e
)

	)

104 
boﬁ


105 
	$n°ime_upd©e
(
n°ime_t
 *
time
)

107 
n°ime_t
 
ﬁd_time
;

109 
	`n°ime_c›y
(&
ﬁd_time
, 
time
);

111 #ifde‡
_WIN32


113 
FILETIME
 
·
;

114 
uöt64_t
 
ticks
;

115 
	`GëSy°emTimeAsFûeTime
(&
·
);

116 
ticks
 = (((
uöt64_t
)
·
.
dwHighD©eTime
) << 32) |

117 
·
.
dwLowD©eTime
;

118 
time
->
ns
 = 
ticks
 * 100;

120 #ñi‡
JEMALLOC_CLOCK_GETTIME


122 
time•ec
 
ts
;

124 i‡(
	`sysc⁄f
(
_SC_MONOTONIC_CLOCK
) > 0)

125 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

127 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

128 
time
->
ns
 = 
ts
.
tv_£c
 * 
BILLION
 +Ås.
tv_n£c
;

131 
timevÆ
 
tv
;

132 
	`gëtimeofday
(&
tv
, 
NULL
);

133 
time
->
ns
 = 
tv
.
tv_£c
 * 
BILLION
 +Åv.
tv_u£c
 * 1000;

137 i‡(
	`u∆ikñy
(
	`n°ime_com∑ª
(&
ﬁd_time
, 
time
) > 0)) {

138 
	`n°ime_c›y
(
time
, &
ﬁd_time
);

139  (
åue
);

142  (
Ál£
);

143 
	}
}

144 #ifde‡
JEMALLOC_JET


145 #unde‡
n°ime_upd©e


146 
	#n°ime_upd©e
 
	`JEMALLOC_N
(
n°ime_upd©e
)

	)

147 
n°ime_upd©e_t
 *
	gn°ime_upd©e
 = 
JEMALLOC_N
(
n_n°ime_upd©e
);

	@dep/jemalloc-4.2.0/src/pages.c

1 
	#JEMALLOC_PAGES_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

4 #ifde‡
JEMALLOC_SYSCTL_VM_OVERCOMMIT


5 
	~<sys/sys˘l.h
>

11 #i‚de‡
_WIN32


12 
	#PAGES_PROT_COMMIT
 (
PROT_READ
 | 
PROT_WRITE
)

	)

13 
	#PAGES_PROT_DECOMMIT
 (
PROT_NONE
)

	)

14 
	gmm≠_Êags
;

16 
boﬁ
 
	gos_ovîcommôs
;

21 
	$∑ges_m≠
(*
addr
, 
size_t
 
size
, 
boﬁ
 *
commô
)

23 *
ªt
;

25 
	`as£π
(
size
 != 0);

27 i‡(
os_ovîcommôs
)

28 *
commô
 = 
åue
;

30 #ifde‡
_WIN32


35 
ªt
 = 
	`VútuÆAŒoc
(
addr
, 
size
, 
MEM_RESERVE
 | (*
commô
 ? 
MEM_COMMIT
 : 0),

36 
PAGE_READWRITE
);

43 
¥Ÿ
 = *
commô
 ? 
PAGES_PROT_COMMIT
 : 
PAGES_PROT_DECOMMIT
;

45 
ªt
 = 
	`mm≠
(
addr
, 
size
, 
¥Ÿ
, 
mm≠_Êags
, -1, 0);

47 
	`as£π
(
ªt
 !
NULL
);

49 i‡(
ªt
 =
MAP_FAILED
)

50 
ªt
 = 
NULL
;

51 i‡(
addr
 !
NULL
 && 
ªt
 !=áddr) {

55 
	`∑ges_unm≠
(
ªt
, 
size
);

56 
ªt
 = 
NULL
;

59 
	`as£π
(
ªt
 =
NULL
 || (
addr
 == NULL &&Ñet !=áddr)

60 || (
addr
 !
NULL
 && 
ªt
 ==áddr));

61  (
ªt
);

62 
	}
}

65 
	$∑ges_unm≠
(*
addr
, 
size_t
 
size
)

68 #ifde‡
_WIN32


69 i‡(
	`VútuÆFªe
(
addr
, 0, 
MEM_RELEASE
) == 0)

71 i‡(
	`munm≠
(
addr
, 
size
) == -1)

74 
buf
[
BUFERROR_BUF
];

76 
	`bu„º‹
(
	`gë_î∫o
(), 
buf
, (buf));

77 
	`mÆloc_¥ötf
("<jemalloc>: Error in "

78 #ifde‡
_WIN32


83 "(): %s\n", 
buf
);

84 i‡(
›t_ab‹t
)

85 
	`ab‹t
();

87 
	}
}

90 
	$∑ges_åim
(*
addr
, 
size_t
 
Æloc_size
, size_à
Àadsize
, size_à
size
,

91 
boﬁ
 *
commô
)

93 *
ªt
 = (*)((
uöçå_t
)
addr
 + 
Àadsize
);

95 
	`as£π
(
Æloc_size
 >
Àadsize
 + 
size
);

96 #ifde‡
_WIN32


98 *
√w_addr
;

100 
	`∑ges_unm≠
(
addr
, 
Æloc_size
);

101 
√w_addr
 = 
	`∑ges_m≠
(
ªt
, 
size
, 
commô
);

102 i‡(
√w_addr
 =
ªt
)

103  (
ªt
);

104 i‡(
√w_addr
)

105 
	`∑ges_unm≠
(
√w_addr
, 
size
);

106  (
NULL
);

110 
size_t
 
åaûsize
 = 
Æloc_size
 - 
Àadsize
 - 
size
;

112 i‡(
Àadsize
 != 0)

113 
	`∑ges_unm≠
(
addr
, 
Àadsize
);

114 i‡(
åaûsize
 != 0)

115 
	`∑ges_unm≠
((*)((
uöçå_t
)
ªt
 + 
size
), 
åaûsize
);

116  (
ªt
);

119 
	}
}

121 
boﬁ


122 
	$∑ges_commô_im∂
(*
addr
, 
size_t
 
size
, 
boﬁ
 
commô
)

125 i‡(
os_ovîcommôs
)

126  (
åue
);

128 #ifde‡
_WIN32


129  (
commô
 ? (
addr
 !
	`VútuÆAŒoc
◊ddr, 
size
, 
MEM_COMMIT
,

130 
PAGE_READWRITE
)Ë: (!
	`VútuÆFªe
(
addr
, 
size
, 
MEM_DECOMMIT
)));

133 
¥Ÿ
 = 
commô
 ? 
PAGES_PROT_COMMIT
 : 
PAGES_PROT_DECOMMIT
;

134 *
ªsu…
 = 
	`mm≠
(
addr
, 
size
, 
¥Ÿ
, 
mm≠_Êags
 | 
MAP_FIXED
,

136 i‡(
ªsu…
 =
MAP_FAILED
)

137  (
åue
);

138 i‡(
ªsu…
 !
addr
) {

143 
	`∑ges_unm≠
(
ªsu…
, 
size
);

144  (
åue
);

146  (
Ál£
);

149 
	}
}

151 
boﬁ


152 
	$∑ges_commô
(*
addr
, 
size_t
 
size
)

155  (
	`∑ges_commô_im∂
(
addr
, 
size
, 
åue
));

156 
	}
}

158 
boﬁ


159 
	$∑ges_decommô
(*
addr
, 
size_t
 
size
)

162  (
	`∑ges_commô_im∂
(
addr
, 
size
, 
Ál£
));

163 
	}
}

165 
boﬁ


166 
	$∑ges_purge
(*
addr
, 
size_t
 
size
)

168 
boﬁ
 
unzî€d
;

170 #ifde‡
_WIN32


171 
	`VútuÆAŒoc
(
addr
, 
size
, 
MEM_RESET
, 
PAGE_READWRITE
);

172 
unzî€d
 = 
åue
;

173 #ñi‡
	`deföed
(
JEMALLOC_HAVE_MADVISE
)

174 #ifde‡
JEMALLOC_PURGE_MADVISE_DONTNEED


175 
	#JEMALLOC_MADV_PURGE
 
MADV_DONTNEED


	)

176 
	#JEMALLOC_MADV_ZEROS
 
åue


	)

177 #ñi‡
	`deföed
(
JEMALLOC_PURGE_MADVISE_FREE
)

178 
	#JEMALLOC_MADV_PURGE
 
MADV_FREE


	)

179 
	#JEMALLOC_MADV_ZEROS
 
Ál£


	)

183 
îr
 = 
	`madvi£
(
addr
, 
size
, 
JEMALLOC_MADV_PURGE
);

184 
unzî€d
 = (!
JEMALLOC_MADV_ZEROS
 || 
îr
 != 0);

185 #unde‡
JEMALLOC_MADV_PURGE


186 #unde‡
JEMALLOC_MADV_ZEROS


189 
unzî€d
 = 
åue
;

191  (
unzî€d
);

192 
	}
}

194 #ifde‡
JEMALLOC_SYSCTL_VM_OVERCOMMIT


195 
boﬁ


196 
	$os_ovîcommôs_sys˘l
()

198 
vm_ovîcommô
;

199 
size_t
 
sz
;

201 
sz
 = (
vm_ovîcommô
);

202 i‡(
	`sys˘lby«me
("vm.ovîcommô", &
vm_ovîcommô
, &
sz
, 
NULL
, 0) != 0)

203  (
Ál£
);

205  ((
vm_ovîcommô
 & 0x3) == 0);

206 
	}
}

209 #ifde‡
JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY


210 
boﬁ


211 
	$os_ovîcommôs_¥oc
()

213 
fd
;

214 
buf
[1];

215 
ssize_t
 
ƒód
;

217 
fd
 = 
	`›í
("/¥oc/sys/vm/ovîcommô_mem‹y", 
O_RDONLY
);

218 i‡(
fd
 == -1)

219  (
Ál£
);

221 
ƒód
 = 
	`ªad
(
fd
, &
buf
, (buf));

222 i‡(
ƒód
 < 1)

223  (
Ál£
);

230  (
buf
[0] == '0' || buf[0] == '1');

231 
	}
}

235 
	$∑ges_boŸ
()

238 #i‚de‡
_WIN32


239 
mm≠_Êags
 = 
MAP_PRIVATE
 | 
MAP_ANON
;

242 #ifde‡
JEMALLOC_SYSCTL_VM_OVERCOMMIT


243 
os_ovîcommôs
 = 
	`os_ovîcommôs_sys˘l
();

244 #ñi‡
	`deföed
(
JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY
)

245 
os_ovîcommôs
 = 
	`os_ovîcommôs_¥oc
();

246 #ifde‡
MAP_NORESERVE


247 i‡(
os_ovîcommôs
)

248 
mm≠_Êags
 |
MAP_NORESERVE
;

251 
os_ovîcommôs
 = 
Ál£
;

253 
	}
}

	@dep/jemalloc-4.2.0/src/prng.c

1 
	#JEMALLOC_PRNG_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

	@dep/jemalloc-4.2.0/src/prof.c

1 
	#JEMALLOC_PROF_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

5 #ifde‡
JEMALLOC_PROF_LIBUNWIND


6 
	#UNW_LOCAL_ONLY


	)

7 
	~<libunwöd.h
>

10 #ifde‡
JEMALLOC_PROF_LIBGCC


11 
	~<unwöd.h
>

17 
boﬁ
 
	g›t_¥of
 = 
Ál£
;

18 
boﬁ
 
	g›t_¥of_a˘ive
 = 
åue
;

19 
boﬁ
 
	g›t_¥of_thªad_a˘ive_öô
 = 
åue
;

20 
size_t
 
	g›t_lg_¥of_ßm∂e
 = 
LG_PROF_SAMPLE_DEFAULT
;

21 
ssize_t
 
	g›t_lg_¥of_öãrvÆ
 = 
LG_PROF_INTERVAL_DEFAULT
;

22 
boﬁ
 
	g›t_¥of_gdump
 = 
Ál£
;

23 
boﬁ
 
	g›t_¥of_föÆ
 = 
Ál£
;

24 
boﬁ
 
	g›t_¥of_Àak
 = 
Ál£
;

25 
boﬁ
 
	g›t_¥of_accum
 = 
Ál£
;

26 
	g›t_¥of_¥efix
[

28 #ifde‡
JEMALLOC_PROF


29 
PATH_MAX
 +

37 
boﬁ
 
	g¥of_a˘ive
;

38 
mÆloc_muãx_t
 
	g¥of_a˘ive_mtx
;

44 
boﬁ
 
	g¥of_thªad_a˘ive_öô
;

45 
mÆloc_muãx_t
 
	g¥of_thªad_a˘ive_öô_mtx
;

51 
boﬁ
 
	g¥of_gdump_vÆ
;

52 
mÆloc_muãx_t
 
	g¥of_gdump_mtx
;

54 
uöt64_t
 
	g¥of_öãrvÆ
 = 0;

56 
size_t
 
	glg_¥of_ßm∂e
;

65 
mÆloc_muãx_t
 *
	gg˘x_locks
;

66 
	gcum_g˘xs
;

74 
mÆloc_muãx_t
 *
	gtd©a_locks
;

80 
ckh_t
 
	gbt2g˘x
;

81 
mÆloc_muãx_t
 
	gbt2g˘x_mtx
;

87 
¥of_td©a_åì_t
 
	gtd©as
;

88 
mÆloc_muãx_t
 
	gtd©as_mtx
;

90 
uöt64_t
 
	g√xt_thr_uid
;

91 
mÆloc_muãx_t
 
	g√xt_thr_uid_mtx
;

93 
mÆloc_muãx_t
 
	g¥of_dump_£q_mtx
;

94 
uöt64_t
 
	g¥of_dump_£q
;

95 
uöt64_t
 
	g¥of_dump_i£q
;

96 
uöt64_t
 
	g¥of_dump_m£q
;

97 
uöt64_t
 
	g¥of_dump_u£q
;

103 
mÆloc_muãx_t
 
	g¥of_dump_mtx
;

104 
	g¥of_dump_buf
[

106 #ifde‡
JEMALLOC_PROF


107 
PROF_DUMP_BUFSIZE


112 
size_t
 
	g¥of_dump_buf_íd
;

113 
	g¥of_dump_fd
;

116 
boﬁ
 
	g¥of_boŸed
 = 
Ál£
;

124 
boﬁ
 
¥of_t˘x_should_de°roy
(
tsdn_t
 *
tsdn
, 
¥of_t˘x_t
 *
t˘x
);

125 
¥of_t˘x_de°roy
(
tsd_t
 *
tsd
, 
¥of_t˘x_t
 *
t˘x
);

126 
boﬁ
 
¥of_td©a_should_de°roy
(
tsdn_t
 *
tsdn
, 
¥of_td©a_t
 *
td©a
,

127 
boﬁ
 
eví_if_©èched
);

128 
¥of_td©a_de°roy
(
tsdn_t
 *
tsdn
, 
¥of_td©a_t
 *
td©a
,

129 
boﬁ
 
eví_if_©èched
);

130 *
¥of_thªad_«me_Æloc
(
tsdn_t
 *
tsdn
, c⁄° *
thªad_«me
);

135 
JEMALLOC_INLINE_C
 

136 
	$¥of_t˘x_comp
(c⁄° 
¥of_t˘x_t
 *
a
, c⁄°Örof_t˘x_à*
b
)

138 
uöt64_t
 
a_thr_uid
 = 
a
->
thr_uid
;

139 
uöt64_t
 
b_thr_uid
 = 
b
->
thr_uid
;

140 
ªt
 = (
a_thr_uid
 > 
b_thr_uid
) - (a_thr_uid < b_thr_uid);

141 i‡(
ªt
 == 0) {

142 
uöt64_t
 
a_thr_dis¸im
 = 
a
->
thr_dis¸im
;

143 
uöt64_t
 
b_thr_dis¸im
 = 
b
->
thr_dis¸im
;

144 
ªt
 = (
a_thr_dis¸im
 > 
b_thr_dis¸im
) - (a_thr_discrim <

145 
b_thr_dis¸im
);

146 i‡(
ªt
 == 0) {

147 
uöt64_t
 
a_t˘x_uid
 = 
a
->
t˘x_uid
;

148 
uöt64_t
 
b_t˘x_uid
 = 
b
->
t˘x_uid
;

149 
ªt
 = (
a_t˘x_uid
 > 
b_t˘x_uid
) - (a_tctx_uid <

150 
b_t˘x_uid
);

153  (
ªt
);

154 
	}
}

156 
	$rb_gí
(
UNUSED
, 
t˘x_åì_
, 
¥of_t˘x_åì_t
, 
¥of_t˘x_t
,

157 
t˘x_lök
, 
¥of_t˘x_comp
)

159 
JEMALLOC_INLINE_C
 

160 
	$¥of_g˘x_comp
(c⁄° 
¥of_g˘x_t
 *
a
, c⁄°Örof_g˘x_à*
b
)

162 
a_Àn
 = 
a
->
bt
.
Àn
;

163 
b_Àn
 = 
b
->
bt
.
Àn
;

164 
comp_Àn
 = (
a_Àn
 < 
b_Àn
) ?á_len : b_len;

165 
ªt
 = 
	`memcmp
(
a
->
bt
.
vec
, 
b
->bt.vec, 
comp_Àn
 * (*));

166 i‡(
ªt
 == 0)

167 
ªt
 = (
a_Àn
 > 
b_Àn
) - (a_len < b_len);

168  (
ªt
);

169 
	}
}

171 
	$rb_gí
(
UNUSED
, 
g˘x_åì_
, 
¥of_g˘x_åì_t
, 
¥of_g˘x_t
, 
dump_lök
,

172 
¥of_g˘x_comp
)

174 
JEMALLOC_INLINE_C
 

175 
	$¥of_td©a_comp
(c⁄° 
¥of_td©a_t
 *
a
, c⁄°Örof_td©a_à*
b
)

177 
ªt
;

178 
uöt64_t
 
a_uid
 = 
a
->
thr_uid
;

179 
uöt64_t
 
b_uid
 = 
b
->
thr_uid
;

181 
ªt
 = ((
a_uid
 > 
b_uid
) - (a_uid < b_uid));

182 i‡(
ªt
 == 0) {

183 
uöt64_t
 
a_dis¸im
 = 
a
->
thr_dis¸im
;

184 
uöt64_t
 
b_dis¸im
 = 
b
->
thr_dis¸im
;

186 
ªt
 = ((
a_dis¸im
 > 
b_dis¸im
) - (a_discrim < b_discrim));

188  (
ªt
);

189 
	}
}

191 
	$rb_gí
(
UNUSED
, 
td©a_åì_
, 
¥of_td©a_åì_t
, 
¥of_td©a_t
, 
td©a_lök
,

192 
¥of_td©a_comp
)

197 
	$¥of_Æloc_rﬁlback
(
tsd_t
 *
tsd
, 
¥of_t˘x_t
 *
t˘x
, 
boﬁ
 
upd©ed
)

199 
¥of_td©a_t
 *
td©a
;

201 
	`ˇs£π
(
c⁄fig_¥of
);

203 i‡(
upd©ed
) {

210 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

211 i‡(
td©a
 !
NULL
)

212 
	`¥of_ßm∂e_thªshﬁd_upd©e
(
td©a
);

215 i‡((
uöçå_t
)
t˘x
 > (uintptr_t)1U) {

216 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
t˘x
->
td©a
->
lock
);

217 
t˘x
->
¥ï¨ed
 = 
Ál£
;

218 i‡(
	`¥of_t˘x_should_de°roy
(
	`tsd_tsdn
(
tsd
), 
t˘x
))

219 
	`¥of_t˘x_de°roy
(
tsd
, 
t˘x
);

221 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
t˘x
->
td©a
->
lock
);

223 
	}
}

226 
	$¥of_mÆloc_ßm∂e_obje˘
(
tsdn_t
 *
tsdn
, c⁄° *
±r
, 
size_t
 
usize
,

227 
¥of_t˘x_t
 *
t˘x
)

230 
	`¥of_t˘x_£t
(
tsdn
, 
±r
, 
usize
, 
t˘x
);

232 
	`mÆloc_muãx_lock
(
tsdn
, 
t˘x
->
td©a
->
lock
);

233 
t˘x
->
˙ts
.
curobjs
++;

234 
t˘x
->
˙ts
.
curbyãs
 +
usize
;

235 i‡(
›t_¥of_accum
) {

236 
t˘x
->
˙ts
.
accumobjs
++;

237 
t˘x
->
˙ts
.
accumbyãs
 +
usize
;

239 
t˘x
->
¥ï¨ed
 = 
Ál£
;

240 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
t˘x
->
td©a
->
lock
);

241 
	}
}

244 
	$¥of_‰ì_ßm∂ed_obje˘
(
tsd_t
 *
tsd
, 
size_t
 
usize
, 
¥of_t˘x_t
 *
t˘x
)

247 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
t˘x
->
td©a
->
lock
);

248 
	`as£π
(
t˘x
->
˙ts
.
curobjs
 > 0);

249 
	`as£π
(
t˘x
->
˙ts
.
curbyãs
 >
usize
);

250 
t˘x
->
˙ts
.
curobjs
--;

251 
t˘x
->
˙ts
.
curbyãs
 -
usize
;

253 i‡(
	`¥of_t˘x_should_de°roy
(
	`tsd_tsdn
(
tsd
), 
t˘x
))

254 
	`¥of_t˘x_de°roy
(
tsd
, 
t˘x
);

256 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
t˘x
->
td©a
->
lock
);

257 
	}
}

260 
	$bt_öô
(
¥of_bt_t
 *
bt
, **
vec
)

263 
	`ˇs£π
(
c⁄fig_¥of
);

265 
bt
->
vec
 = vec;

266 
bt
->
Àn
 = 0;

267 
	}
}

269 
JEMALLOC_INLINE_C
 

270 
	$¥of_íãr
(
tsd_t
 *
tsd
, 
¥of_td©a_t
 *
td©a
)

273 
	`ˇs£π
(
c⁄fig_¥of
);

274 
	`as£π
(
td©a
 =
	`¥of_td©a_gë
(
tsd
, 
Ál£
));

276 i‡(
td©a
 !
NULL
) {

277 
	`as£π
(!
td©a
->
íq
);

278 
td©a
->
íq
 = 
åue
;

281 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
bt2g˘x_mtx
);

282 
	}
}

284 
JEMALLOC_INLINE_C
 

285 
	$¥of_Àave
(
tsd_t
 *
tsd
, 
¥of_td©a_t
 *
td©a
)

288 
	`ˇs£π
(
c⁄fig_¥of
);

289 
	`as£π
(
td©a
 =
	`¥of_td©a_gë
(
tsd
, 
Ál£
));

291 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
bt2g˘x_mtx
);

293 i‡(
td©a
 !
NULL
) {

294 
boﬁ
 
idump
, 
gdump
;

296 
	`as£π
(
td©a
->
íq
);

297 
td©a
->
íq
 = 
Ál£
;

298 
idump
 = 
td©a
->
íq_idump
;

299 
td©a
->
íq_idump
 = 
Ál£
;

300 
gdump
 = 
td©a
->
íq_gdump
;

301 
td©a
->
íq_gdump
 = 
Ál£
;

303 i‡(
idump
)

304 
	`¥of_idump
(
	`tsd_tsdn
(
tsd
));

305 i‡(
gdump
)

306 
	`¥of_gdump
(
	`tsd_tsdn
(
tsd
));

308 
	}
}

310 #ifde‡
JEMALLOC_PROF_LIBUNWIND


312 
	$¥of_backåa˚
(
¥of_bt_t
 *
bt
)

314 
n‰ames
;

316 
	`ˇs£π
(
c⁄fig_¥of
);

317 
	`as£π
(
bt
->
Àn
 == 0);

318 
	`as£π
(
bt
->
vec
 !
NULL
);

320 
n‰ames
 = 
	`unw_backåa˚
(
bt
->
vec
, 
PROF_BT_MAX
);

321 i‡(
n‰ames
 <= 0)

323 
bt
->
Àn
 = 
n‰ames
;

324 
	}
}

325 #ñi‡(
deföed
(
JEMALLOC_PROF_LIBGCC
))

326 
_Unwöd_Rós⁄_Code


327 
	$¥of_unwöd_öô_ˇŒback
(
_Unwöd_C⁄ãxt
 *
c⁄ãxt
, *
¨g
)

330 
	`ˇs£π
(
c⁄fig_¥of
);

332  (
_URC_NO_REASON
);

333 
	}
}

335 
_Unwöd_Rós⁄_Code


336 
	$¥of_unwöd_ˇŒback
(
_Unwöd_C⁄ãxt
 *
c⁄ãxt
, *
¨g
)

338 
¥of_unwöd_d©a_t
 *
d©a
 = (¥of_unwöd_d©a_à*)
¨g
;

339 *
ù
;

341 
	`ˇs£π
(
c⁄fig_¥of
);

343 
ù
 = (*)
	`_Unwöd_GëIP
(
c⁄ãxt
);

344 i‡(
ù
 =
NULL
)

345  (
_URC_END_OF_STACK
);

346 
d©a
->
bt
->
vec
[d©a->bt->
Àn
] = 
ù
;

347 
d©a
->
bt
->
Àn
++;

348 i‡(
d©a
->
bt
->
Àn
 =d©a->
max
)

349  (
_URC_END_OF_STACK
);

351  (
_URC_NO_REASON
);

352 
	}
}

355 
	$¥of_backåa˚
(
¥of_bt_t
 *
bt
)

357 
¥of_unwöd_d©a_t
 
d©a
 = {
bt
, 
PROF_BT_MAX
};

359 
	`ˇs£π
(
c⁄fig_¥of
);

361 
	`_Unwöd_Backåa˚
(
¥of_unwöd_ˇŒback
, &
d©a
);

362 
	}
}

363 #ñi‡(
deföed
(
JEMALLOC_PROF_GCC
))

365 
	$¥of_backåa˚
(
¥of_bt_t
 *
bt
)

367 
	#BT_FRAME
(
i
) \

368 i‡((
i
Ë< 
PROF_BT_MAX
) { \

369 *
p
; \

370 i‡(
	`__buûtö_‰ame_addªss
(
i
) == 0) \

372 
p
 = 
	`__buûtö_ªtu∫_addªss
(
i
); \

373 i‡(
p
 =
NULL
) \

375 
bt
->
vec
[(
i
)] = 
p
; \

376 
bt
->
Àn
 = (
i
) + 1; \

378 ;

	)

380 
	`ˇs£π
(
c⁄fig_¥of
);

382 
	`BT_FRAME
(0)

383 
	`BT_FRAME
(1)

384 
	`BT_FRAME
(2)

385 
	`BT_FRAME
(3)

386 
	`BT_FRAME
(4)

387 
	`BT_FRAME
(5)

388 
	`BT_FRAME
(6)

389 
	`BT_FRAME
(7)

390 
	`BT_FRAME
(8)

391 
	`BT_FRAME
(9)

393 
	`BT_FRAME
(10)

394 
	`BT_FRAME
(11)

395 
	`BT_FRAME
(12)

396 
	`BT_FRAME
(13)

397 
	`BT_FRAME
(14)

398 
	`BT_FRAME
(15)

399 
	`BT_FRAME
(16)

400 
	`BT_FRAME
(17)

401 
	`BT_FRAME
(18)

402 
	`BT_FRAME
(19)

404 
	`BT_FRAME
(20)

405 
	`BT_FRAME
(21)

406 
	`BT_FRAME
(22)

407 
	`BT_FRAME
(23)

408 
	`BT_FRAME
(24)

409 
	`BT_FRAME
(25)

410 
	`BT_FRAME
(26)

411 
	`BT_FRAME
(27)

412 
	`BT_FRAME
(28)

413 
	`BT_FRAME
(29)

415 
	`BT_FRAME
(30)

416 
	`BT_FRAME
(31)

417 
	`BT_FRAME
(32)

418 
	`BT_FRAME
(33)

419 
	`BT_FRAME
(34)

420 
	`BT_FRAME
(35)

421 
	`BT_FRAME
(36)

422 
	`BT_FRAME
(37)

423 
	`BT_FRAME
(38)

424 
	`BT_FRAME
(39)

426 
	`BT_FRAME
(40)

427 
	`BT_FRAME
(41)

428 
	`BT_FRAME
(42)

429 
	`BT_FRAME
(43)

430 
	`BT_FRAME
(44)

431 
	`BT_FRAME
(45)

432 
	`BT_FRAME
(46)

433 
	`BT_FRAME
(47)

434 
	`BT_FRAME
(48)

435 
	`BT_FRAME
(49)

437 
	`BT_FRAME
(50)

438 
	`BT_FRAME
(51)

439 
	`BT_FRAME
(52)

440 
	`BT_FRAME
(53)

441 
	`BT_FRAME
(54)

442 
	`BT_FRAME
(55)

443 
	`BT_FRAME
(56)

444 
	`BT_FRAME
(57)

445 
	`BT_FRAME
(58)

446 
	`BT_FRAME
(59)

448 
	`BT_FRAME
(60)

449 
	`BT_FRAME
(61)

450 
	`BT_FRAME
(62)

451 
	`BT_FRAME
(63)

452 
	`BT_FRAME
(64)

453 
	`BT_FRAME
(65)

454 
	`BT_FRAME
(66)

455 
	`BT_FRAME
(67)

456 
	`BT_FRAME
(68)

457 
	`BT_FRAME
(69)

459 
	`BT_FRAME
(70)

460 
	`BT_FRAME
(71)

461 
	`BT_FRAME
(72)

462 
	`BT_FRAME
(73)

463 
	`BT_FRAME
(74)

464 
	`BT_FRAME
(75)

465 
	`BT_FRAME
(76)

466 
	`BT_FRAME
(77)

467 
	`BT_FRAME
(78)

468 
	`BT_FRAME
(79)

470 
	`BT_FRAME
(80)

471 
	`BT_FRAME
(81)

472 
	`BT_FRAME
(82)

473 
	`BT_FRAME
(83)

474 
	`BT_FRAME
(84)

475 
	`BT_FRAME
(85)

476 
	`BT_FRAME
(86)

477 
	`BT_FRAME
(87)

478 
	`BT_FRAME
(88)

479 
	`BT_FRAME
(89)

481 
	`BT_FRAME
(90)

482 
	`BT_FRAME
(91)

483 
	`BT_FRAME
(92)

484 
	`BT_FRAME
(93)

485 
	`BT_FRAME
(94)

486 
	`BT_FRAME
(95)

487 
	`BT_FRAME
(96)

488 
	`BT_FRAME
(97)

489 
	`BT_FRAME
(98)

490 
	`BT_FRAME
(99)

492 
	`BT_FRAME
(100)

493 
	`BT_FRAME
(101)

494 
	`BT_FRAME
(102)

495 
	`BT_FRAME
(103)

496 
	`BT_FRAME
(104)

497 
	`BT_FRAME
(105)

498 
	`BT_FRAME
(106)

499 
	`BT_FRAME
(107)

500 
	`BT_FRAME
(108)

501 
	`BT_FRAME
(109)

503 
	`BT_FRAME
(110)

504 
	`BT_FRAME
(111)

505 
	`BT_FRAME
(112)

506 
	`BT_FRAME
(113)

507 
	`BT_FRAME
(114)

508 
	`BT_FRAME
(115)

509 
	`BT_FRAME
(116)

510 
	`BT_FRAME
(117)

511 
	`BT_FRAME
(118)

512 
	`BT_FRAME
(119)

514 
	`BT_FRAME
(120)

515 
	`BT_FRAME
(121)

516 
	`BT_FRAME
(122)

517 
	`BT_FRAME
(123)

518 
	`BT_FRAME
(124)

519 
	`BT_FRAME
(125)

520 
	`BT_FRAME
(126)

521 
	`BT_FRAME
(127)

522 #unde‡
BT_FRAME


523 
	}
}

526 
	$¥of_backåa˚
(
¥of_bt_t
 *
bt
)

529 
	`ˇs£π
(
c⁄fig_¥of
);

530 
	`nŸ_ªached
();

531 
	}
}

534 
mÆloc_muãx_t
 *

535 
	$¥of_g˘x_muãx_choo£
()

537 
ng˘xs
 = 
	`©omic_add_u
(&
cum_g˘xs
, 1);

539  (&
g˘x_locks
[(
ng˘xs
 - 1Ë% 
PROF_NCTX_LOCKS
]);

540 
	}
}

542 
mÆloc_muãx_t
 *

543 
	$¥of_td©a_muãx_choo£
(
uöt64_t
 
thr_uid
)

546  (&
td©a_locks
[
thr_uid
 % 
PROF_NTDATA_LOCKS
]);

547 
	}
}

549 
¥of_g˘x_t
 *

550 
	$¥of_g˘x_¸óã
(
tsdn_t
 *
tsdn
, 
¥of_bt_t
 *
bt
)

555 
size_t
 
size
 = 
	`off£tof
(
¥of_g˘x_t
, 
vec
Ë+ (
bt
->
Àn
 * (*));

556 
¥of_g˘x_t
 *
g˘x
 = (¥of_g˘x_à*)
	`üŒocztm
(
tsdn
, 
size
,

557 
	`size2ödex
(
size
), 
Ál£
, 
NULL
, 
åue
, 
	`¨ía_gë
(
TSDN_NULL
, 0,Årue),

558 
åue
);

559 i‡(
g˘x
 =
NULL
)

560  (
NULL
);

561 
g˘x
->
lock
 = 
	`¥of_g˘x_muãx_choo£
();

566 
g˘x
->
∆imbo
 = 1;

567 
	`t˘x_åì_√w
(&
g˘x
->
t˘xs
);

569 
	`mem˝y
(
g˘x
->
vec
, 
bt
->vec, bt->
Àn
 * (*));

570 
g˘x
->
bt
.
vec
 = gctx->vec;

571 
g˘x
->
bt
.
Àn
 = bt->len;

572  (
g˘x
);

573 
	}
}

576 
	$¥of_g˘x_åy_de°roy
(
tsd_t
 *
tsd
, 
¥of_td©a_t
 *
td©a_£lf
, 
¥of_g˘x_t
 *
g˘x
,

577 
¥of_td©a_t
 *
td©a
)

580 
	`ˇs£π
(
c⁄fig_¥of
);

589 
	`¥of_íãr
(
tsd
, 
td©a_£lf
);

590 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

591 
	`as£π
(
g˘x
->
∆imbo
 != 0);

592 i‡(
	`t˘x_åì_em±y
(&
g˘x
->
t˘xs
Ë&& g˘x->
∆imbo
 == 1) {

594 i‡(
	`ckh_ªmove
(
	`tsd_tsdn
(
tsd
), &
bt2g˘x
, &
g˘x
->
bt
, 
NULL
, NULL))

595 
	`nŸ_ªached
();

596 
	`¥of_Àave
(
tsd
, 
td©a_£lf
);

598 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

599 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
g˘x
, 
NULL
, 
åue
,Årue);

605 
g˘x
->
∆imbo
--;

606 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

607 
	`¥of_Àave
(
tsd
, 
td©a_£lf
);

609 
	}
}

611 
boﬁ


612 
	$¥of_t˘x_should_de°roy
(
tsdn_t
 *
tsdn
, 
¥of_t˘x_t
 *
t˘x
)

615 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
t˘x
->
td©a
->
lock
);

617 i‡(
›t_¥of_accum
)

618  (
Ál£
);

619 i‡(
t˘x
->
˙ts
.
curobjs
 != 0)

620  (
Ál£
);

621 i‡(
t˘x
->
¥ï¨ed
)

622  (
Ál£
);

623  (
åue
);

624 
	}
}

626 
boﬁ


627 
	$¥of_g˘x_should_de°roy
(
¥of_g˘x_t
 *
g˘x
)

630 i‡(
›t_¥of_accum
)

631  (
Ál£
);

632 i‡(!
	`t˘x_åì_em±y
(&
g˘x
->
t˘xs
))

633  (
Ál£
);

634 i‡(
g˘x
->
∆imbo
 != 0)

635  (
Ál£
);

636  (
åue
);

637 
	}
}

640 
	$¥of_t˘x_de°roy
(
tsd_t
 *
tsd
, 
¥of_t˘x_t
 *
t˘x
)

642 
¥of_td©a_t
 *
td©a
 = 
t˘x
->tdata;

643 
¥of_g˘x_t
 *
g˘x
 = 
t˘x
->gctx;

644 
boﬁ
 
de°roy_td©a
, 
de°roy_t˘x
, 
de°roy_g˘x
;

646 
	`mÆloc_muãx_as£π_ow√r
(
	`tsd_tsdn
(
tsd
), 
t˘x
->
td©a
->
lock
);

648 
	`as£π
(
t˘x
->
˙ts
.
curobjs
 == 0);

649 
	`as£π
(
t˘x
->
˙ts
.
curbyãs
 == 0);

650 
	`as£π
(!
›t_¥of_accum
);

651 
	`as£π
(
t˘x
->
˙ts
.
accumobjs
 == 0);

652 
	`as£π
(
t˘x
->
˙ts
.
accumbyãs
 == 0);

654 
	`ckh_ªmove
(
	`tsd_tsdn
(
tsd
), &
td©a
->
bt2t˘x
, &
g˘x
->
bt
, 
NULL
, NULL);

655 
de°roy_td©a
 = 
	`¥of_td©a_should_de°roy
(
	`tsd_tsdn
(
tsd
), 
td©a
, 
Ál£
);

656 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

658 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

659 
t˘x
->
°©e
) {

660 
¥of_t˘x_°©e_nomöÆ
:

661 
	`t˘x_åì_ªmove
(&
g˘x
->
t˘xs
, 
t˘x
);

662 
de°roy_t˘x
 = 
åue
;

663 i‡(
	`¥of_g˘x_should_de°roy
(
g˘x
)) {

678 
g˘x
->
∆imbo
++;

679 
de°roy_g˘x
 = 
åue
;

681 
de°roy_g˘x
 = 
Ál£
;

683 
¥of_t˘x_°©e_dumpög
:

689 
t˘x
->
°©e
 = 
¥of_t˘x_°©e_purg©‹y
;

690 
de°roy_t˘x
 = 
Ál£
;

691 
de°roy_g˘x
 = 
Ál£
;

694 
	`nŸ_ªached
();

695 
de°roy_t˘x
 = 
Ál£
;

696 
de°roy_g˘x
 = 
Ál£
;

698 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

699 i‡(
de°roy_g˘x
) {

700 
	`¥of_g˘x_åy_de°roy
(
tsd
, 
	`¥of_td©a_gë
—sd, 
Ál£
), 
g˘x
,

701 
td©a
);

704 
	`mÆloc_muãx_as£π_nŸ_ow√r
(
	`tsd_tsdn
(
tsd
), 
t˘x
->
td©a
->
lock
);

706 i‡(
de°roy_td©a
)

707 
	`¥of_td©a_de°roy
(
	`tsd_tsdn
(
tsd
), 
td©a
, 
Ál£
);

709 i‡(
de°roy_t˘x
)

710 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
t˘x
, 
NULL
, 
åue
,Årue);

711 
	}
}

713 
boﬁ


714 
	$¥of_lookup_globÆ
(
tsd_t
 *
tsd
, 
¥of_bt_t
 *
bt
, 
¥of_td©a_t
 *
td©a
,

715 **
p_btkey
, 
¥of_g˘x_t
 **
p_g˘x
, 
boﬁ
 *
p_√w_g˘x
)

718 
¥of_g˘x_t
 *
p
;

719 *
v
;

720 } 
g˘x
;

722 
¥of_bt_t
 *
p
;

723 *
v
;

724 } 
btkey
;

725 
boﬁ
 
√w_g˘x
;

727 
	`¥of_íãr
(
tsd
, 
td©a
);

728 i‡(
	`ckh_£¨ch
(&
bt2g˘x
, 
bt
, &
btkey
.
v
, &
g˘x
.v)) {

730 
g˘x
.
p
 = 
	`¥of_g˘x_¸óã
(
	`tsd_tsdn
(
tsd
), 
bt
);

731 i‡(
g˘x
.
v
 =
NULL
) {

732 
	`¥of_Àave
(
tsd
, 
td©a
);

733  (
åue
);

735 
btkey
.
p
 = &
g˘x
.p->
bt
;

736 i‡(
	`ckh_ö£π
(
	`tsd_tsdn
(
tsd
), &
bt2g˘x
, 
btkey
.
v
, 
g˘x
.v)) {

738 
	`¥of_Àave
(
tsd
, 
td©a
);

739 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
g˘x
.
v
, 
NULL
, 
åue
,Årue);

740  (
åue
);

742 
√w_g˘x
 = 
åue
;

748 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
g˘x
.
p
->
lock
);

749 
g˘x
.
p
->
∆imbo
++;

750 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
.
p
->
lock
);

751 
√w_g˘x
 = 
Ál£
;

753 
	`¥of_Àave
(
tsd
, 
td©a
);

755 *
p_btkey
 = 
btkey
.
v
;

756 *
p_g˘x
 = 
g˘x
.
p
;

757 *
p_√w_g˘x
 = 
√w_g˘x
;

758  (
Ál£
);

759 
	}
}

761 
¥of_t˘x_t
 *

762 
	$¥of_lookup
(
tsd_t
 *
tsd
, 
¥of_bt_t
 *
bt
)

765 
¥of_t˘x_t
 *
p
;

766 *
v
;

767 } 
ªt
;

768 
¥of_td©a_t
 *
td©a
;

769 
boﬁ
 
nŸ_found
;

771 
	`ˇs£π
(
c⁄fig_¥of
);

773 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
Ál£
);

774 i‡(
td©a
 =
NULL
)

775  (
NULL
);

777 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

778 
nŸ_found
 = 
	`ckh_£¨ch
(&
td©a
->
bt2t˘x
, 
bt
, 
NULL
, &
ªt
.
v
);

779 i‡(!
nŸ_found
)

780 
ªt
.
p
->
¥ï¨ed
 = 
åue
;

781 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

782 i‡(
nŸ_found
) {

783 *
btkey
;

784 
¥of_g˘x_t
 *
g˘x
;

785 
boﬁ
 
√w_g˘x
, 
îr‹
;

791 i‡(
	`¥of_lookup_globÆ
(
tsd
, 
bt
, 
td©a
, &
btkey
, &
g˘x
,

792 &
√w_g˘x
))

793  (
NULL
);

796 
ªt
.
v
 = 
	`üŒocztm
(
	`tsd_tsdn
(
tsd
), (
¥of_t˘x_t
),

797 
	`size2ödex
((
¥of_t˘x_t
)), 
Ál£
, 
NULL
, 
åue
,

798 
	`¨ía_ichoo£
(
	`tsd_tsdn
(
tsd
), 
NULL
), 
åue
);

799 i‡(
ªt
.
p
 =
NULL
) {

800 i‡(
√w_g˘x
)

801 
	`¥of_g˘x_åy_de°roy
(
tsd
, 
td©a
, 
g˘x
,Ådata);

802  (
NULL
);

804 
ªt
.
p
->
td©a
 =Ådata;

805 
ªt
.
p
->
thr_uid
 = 
td©a
->thr_uid;

806 
ªt
.
p
->
thr_dis¸im
 = 
td©a
->thr_discrim;

807 
	`mem£t
(&
ªt
.
p
->
˙ts
, 0, (
¥of_˙t_t
));

808 
ªt
.
p
->
g˘x
 = gctx;

809 
ªt
.
p
->
t˘x_uid
 = 
td©a
->
t˘x_uid_√xt
++;

810 
ªt
.
p
->
¥ï¨ed
 = 
åue
;

811 
ªt
.
p
->
°©e
 = 
¥of_t˘x_°©e_öôülizög
;

812 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

813 
îr‹
 = 
	`ckh_ö£π
(
	`tsd_tsdn
(
tsd
), &
td©a
->
bt2t˘x
, 
btkey
,

814 
ªt
.
v
);

815 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

816 i‡(
îr‹
) {

817 i‡(
√w_g˘x
)

818 
	`¥of_g˘x_åy_de°roy
(
tsd
, 
td©a
, 
g˘x
,Ådata);

819 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
ªt
.
v
, 
NULL
, 
åue
,Årue);

820  (
NULL
);

822 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

823 
ªt
.
p
->
°©e
 = 
¥of_t˘x_°©e_nomöÆ
;

824 
	`t˘x_åì_ö£π
(&
g˘x
->
t˘xs
, 
ªt
.
p
);

825 
g˘x
->
∆imbo
--;

826 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

829  (
ªt
.
p
);

830 
	}
}

846 
	$¥of_ßm∂e_thªshﬁd_upd©e
(
¥of_td©a_t
 *
td©a
)

848 #ifde‡
JEMALLOC_PROF


849 
uöt64_t
 
r
;

850 
u
;

852 i‡(!
c⁄fig_¥of
)

855 i‡(
lg_¥of_ßm∂e
 == 0) {

856 
td©a
->
byãs_u¡û_ßm∂e
 = 0;

878 
r
 = 
	`¥ng_lg_ønge
(&
td©a
->
¥ng_°©e
, 53);

879 
u
 = ()
r
 * (1.0/9007199254740992.0L);

880 
td©a
->
byãs_u¡û_ßm∂e
 = (
uöt64_t
)(
	`log
(
u
) /

881 
	`log
(1.0 - (1.0 / ()((
uöt64_t
)1U << 
lg_¥of_ßm∂e
))))

882 + (
uöt64_t
)1U;

884 
	}
}

886 #ifde‡
JEMALLOC_JET


887 
¥of_td©a_t
 *

888 
	$¥of_td©a_cou¡_ôî
(
¥of_td©a_åì_t
 *
td©as
, 
¥of_td©a_t
 *
td©a
, *
¨g
)

890 
size_t
 *
td©a_cou¡
 = (size_à*)
¨g
;

892 (*
td©a_cou¡
)++;

894  (
NULL
);

895 
	}
}

897 
size_t


898 
	$¥of_td©a_cou¡
()

900 
size_t
 
td©a_cou¡
 = 0;

901 
tsdn_t
 *
tsdn
;

903 
tsdn
 = 
	`tsdn_„tch
();

904 
	`mÆloc_muãx_lock
(
tsdn
, &
td©as_mtx
);

905 
	`td©a_åì_ôî
(&
td©as
, 
NULL
, 
¥of_td©a_cou¡_ôî
,

906 (*)&
td©a_cou¡
);

907 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
td©as_mtx
);

909  (
td©a_cou¡
);

910 
	}
}

913 #ifde‡
JEMALLOC_JET


914 
size_t


915 
	$¥of_bt_cou¡
()

917 
size_t
 
bt_cou¡
;

918 
tsd_t
 *
tsd
;

919 
¥of_td©a_t
 *
td©a
;

921 
tsd
 = 
	`tsd_„tch
();

922 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
Ál£
);

923 i‡(
td©a
 =
NULL
)

926 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
bt2g˘x_mtx
);

927 
bt_cou¡
 = 
	`ckh_cou¡
(&
bt2g˘x
);

928 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
bt2g˘x_mtx
);

930  (
bt_cou¡
);

931 
	}
}

934 #ifde‡
JEMALLOC_JET


935 #unde‡
¥of_dump_›í


936 
	#¥of_dump_›í
 
	`JEMALLOC_N
(
¥of_dump_›í_im∂
)

	)

939 
	$¥of_dump_›í
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
fûíame
)

941 
fd
;

943 
fd
 = 
	`¸ót
(
fûíame
, 0644);

944 i‡(
fd
 =-1 && !
¥›ag©e_îr
) {

945 
	`mÆloc_¥ötf
("<jemalloc>: creat(\"%s\"), 0644) failed\n",

946 
fûíame
);

947 i‡(
›t_ab‹t
)

948 
	`ab‹t
();

951  (
fd
);

952 
	}
}

953 #ifde‡
JEMALLOC_JET


954 #unde‡
¥of_dump_›í


955 
	#¥of_dump_›í
 
	`JEMALLOC_N
(
¥of_dump_›í
)

	)

956 
¥of_dump_›í_t
 *
	g¥of_dump_›í
 = 
JEMALLOC_N
(
¥of_dump_›í_im∂
);

959 
boﬁ


960 
	$¥of_dump_Êush
(
boﬁ
 
¥›ag©e_îr
)

962 
boﬁ
 
ªt
 = 
Ál£
;

963 
ssize_t
 
îr
;

965 
	`ˇs£π
(
c⁄fig_¥of
);

967 
îr
 = 
	`wrôe
(
¥of_dump_fd
, 
¥of_dump_buf
, 
¥of_dump_buf_íd
);

968 i‡(
îr
 == -1) {

969 i‡(!
¥›ag©e_îr
) {

970 
	`mÆloc_wrôe
("<jemalloc>: write() failed during heap "

972 i‡(
›t_ab‹t
)

973 
	`ab‹t
();

975 
ªt
 = 
åue
;

977 
¥of_dump_buf_íd
 = 0;

979  (
ªt
);

980 
	}
}

982 
boﬁ


983 
	$¥of_dump_˛o£
(
boﬁ
 
¥›ag©e_îr
)

985 
boﬁ
 
ªt
;

987 
	`as£π
(
¥of_dump_fd
 != -1);

988 
ªt
 = 
	`¥of_dump_Êush
(
¥›ag©e_îr
);

989 
	`˛o£
(
¥of_dump_fd
);

990 
¥of_dump_fd
 = -1;

992  (
ªt
);

993 
	}
}

995 
boﬁ


996 
	$¥of_dump_wrôe
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
s
)

998 
size_t
 
i
, 
¶í
, 
n
;

1000 
	`ˇs£π
(
c⁄fig_¥of
);

1002 
i
 = 0;

1003 
¶í
 = 
	`°æí
(
s
);

1004 
i
 < 
¶í
) {

1006 i‡(
¥of_dump_buf_íd
 =
PROF_DUMP_BUFSIZE
)

1007 i‡(
	`¥of_dump_Êush
(
¥›ag©e_îr
) &&Öropagate_err)

1008  (
åue
);

1010 i‡(
¥of_dump_buf_íd
 + 
¶í
 <
PROF_DUMP_BUFSIZE
) {

1012 
n
 = 
¶í
 - 
i
;

1015 
n
 = 
PROF_DUMP_BUFSIZE
 - 
¥of_dump_buf_íd
;

1017 
	`mem˝y
(&
¥of_dump_buf
[
¥of_dump_buf_íd
], &
s
[
i
], 
n
);

1018 
¥of_dump_buf_íd
 +
n
;

1019 
i
 +
n
;

1022  (
Ál£
);

1023 
	}
}

1025 
	$JEMALLOC_FORMAT_PRINTF
(2, 3)

1026 
boﬁ


1027 
	$¥of_dump_¥ötf
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
f‹m©
, ...)

1029 
boﬁ
 
ªt
;

1030 
va_li°
 
≠
;

1031 
buf
[
PROF_PRINTF_BUFSIZE
];

1033 
	`va_°¨t
(
≠
, 
f‹m©
);

1034 
	`mÆloc_v¢¥ötf
(
buf
, (buf), 
f‹m©
, 
≠
);

1035 
	`va_íd
(
≠
);

1036 
ªt
 = 
	`¥of_dump_wrôe
(
¥›ag©e_îr
, 
buf
);

1038  (
ªt
);

1039 
	}
}

1042 
	$¥of_t˘x_mîge_td©a
(
tsdn_t
 *
tsdn
, 
¥of_t˘x_t
 *
t˘x
, 
¥of_td©a_t
 *
td©a
)

1045 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
t˘x
->
td©a
->
lock
);

1047 
	`mÆloc_muãx_lock
(
tsdn
, 
t˘x
->
g˘x
->
lock
);

1049 
t˘x
->
°©e
) {

1050 
¥of_t˘x_°©e_öôülizög
:

1051 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
t˘x
->
g˘x
->
lock
);

1053 
¥of_t˘x_°©e_nomöÆ
:

1054 
t˘x
->
°©e
 = 
¥of_t˘x_°©e_dumpög
;

1055 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
t˘x
->
g˘x
->
lock
);

1057 
	`mem˝y
(&
t˘x
->
dump_˙ts
, &t˘x->
˙ts
, (
¥of_˙t_t
));

1059 
td©a
->
˙t_summed
.
curobjs
 +
t˘x
->
dump_˙ts
.curobjs;

1060 
td©a
->
˙t_summed
.
curbyãs
 +
t˘x
->
dump_˙ts
.curbytes;

1061 i‡(
›t_¥of_accum
) {

1062 
td©a
->
˙t_summed
.
accumobjs
 +=

1063 
t˘x
->
dump_˙ts
.
accumobjs
;

1064 
td©a
->
˙t_summed
.
accumbyãs
 +=

1065 
t˘x
->
dump_˙ts
.
accumbyãs
;

1068 
¥of_t˘x_°©e_dumpög
:

1069 
¥of_t˘x_°©e_purg©‹y
:

1070 
	`nŸ_ªached
();

1072 
	}
}

1075 
	$¥of_t˘x_mîge_g˘x
(
tsdn_t
 *
tsdn
, 
¥of_t˘x_t
 *
t˘x
, 
¥of_g˘x_t
 *
g˘x
)

1078 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
g˘x
->
lock
);

1080 
g˘x
->
˙t_summed
.
curobjs
 +
t˘x
->
dump_˙ts
.curobjs;

1081 
g˘x
->
˙t_summed
.
curbyãs
 +
t˘x
->
dump_˙ts
.curbytes;

1082 i‡(
›t_¥of_accum
) {

1083 
g˘x
->
˙t_summed
.
accumobjs
 +
t˘x
->
dump_˙ts
.accumobjs;

1084 
g˘x
->
˙t_summed
.
accumbyãs
 +
t˘x
->
dump_˙ts
.accumbytes;

1086 
	}
}

1088 
¥of_t˘x_t
 *

1089 
	$¥of_t˘x_mîge_ôî
(
¥of_t˘x_åì_t
 *
t˘xs
, 
¥of_t˘x_t
 *
t˘x
, *
¨g
)

1091 
tsdn_t
 *
tsdn
 = (tsdn_à*)
¨g
;

1093 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
t˘x
->
g˘x
->
lock
);

1095 
t˘x
->
°©e
) {

1096 
¥of_t˘x_°©e_nomöÆ
:

1099 
¥of_t˘x_°©e_dumpög
:

1100 
¥of_t˘x_°©e_purg©‹y
:

1101 
	`¥of_t˘x_mîge_g˘x
(
tsdn
, 
t˘x
,Å˘x->
g˘x
);

1104 
	`nŸ_ªached
();

1107  (
NULL
);

1108 
	}
}

1110 
	s¥of_t˘x_dump_ôî_¨g_s
 {

1111 
tsdn_t
 *
	mtsdn
;

1112 
boﬁ
 
	m¥›ag©e_îr
;

1115 
¥of_t˘x_t
 *

1116 
	$¥of_t˘x_dump_ôî
(
¥of_t˘x_åì_t
 *
t˘xs
, 
¥of_t˘x_t
 *
t˘x
, *
›aque
)

1118 
¥of_t˘x_dump_ôî_¨g_s
 *
¨g
 =

1119 (
¥of_t˘x_dump_ôî_¨g_s
 *)
›aque
;

1121 
	`mÆloc_muãx_as£π_ow√r
(
¨g
->
tsdn
, 
t˘x
->
g˘x
->
lock
);

1123 
t˘x
->
°©e
) {

1124 
¥of_t˘x_°©e_öôülizög
:

1125 
¥of_t˘x_°©e_nomöÆ
:

1128 
¥of_t˘x_°©e_dumpög
:

1129 
¥of_t˘x_°©e_purg©‹y
:

1130 i‡(
	`¥of_dump_¥ötf
(
¨g
->
¥›ag©e_îr
,

1131 "Å%"
FMTu64
": %"FMTu64": %"FMTu64" [%"FMTu64": "

1132 "%"
FMTu64
"]\n", 
t˘x
->
thr_uid
,Å˘x->
dump_˙ts
.
curobjs
,

1133 
t˘x
->
dump_˙ts
.
curbyãs
,Å˘x->dump_˙ts.
accumobjs
,

1134 
t˘x
->
dump_˙ts
.
accumbyãs
))

1135  (
t˘x
);

1138 
	`nŸ_ªached
();

1140  (
NULL
);

1141 
	}
}

1143 
¥of_t˘x_t
 *

1144 
	$¥of_t˘x_föish_ôî
(
¥of_t˘x_åì_t
 *
t˘xs
, 
¥of_t˘x_t
 *
t˘x
, *
¨g
)

1146 
tsdn_t
 *
tsdn
 = (tsdn_à*)
¨g
;

1147 
¥of_t˘x_t
 *
ªt
;

1149 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
t˘x
->
g˘x
->
lock
);

1151 
t˘x
->
°©e
) {

1152 
¥of_t˘x_°©e_nomöÆ
:

1155 
¥of_t˘x_°©e_dumpög
:

1156 
t˘x
->
°©e
 = 
¥of_t˘x_°©e_nomöÆ
;

1158 
¥of_t˘x_°©e_purg©‹y
:

1159 
ªt
 = 
t˘x
;

1160 
œbñ_ªtu∫
;

1162 
	`nŸ_ªached
();

1165 
ªt
 = 
NULL
;

1166 
œbñ_ªtu∫
:

1167  (
ªt
);

1168 
	}
}

1171 
	$¥of_dump_g˘x_¥ï
(
tsdn_t
 *
tsdn
, 
¥of_g˘x_t
 *
g˘x
, 
¥of_g˘x_åì_t
 *
g˘xs
)

1174 
	`ˇs£π
(
c⁄fig_¥of
);

1176 
	`mÆloc_muãx_lock
(
tsdn
, 
g˘x
->
lock
);

1183 
g˘x
->
∆imbo
++;

1184 
	`g˘x_åì_ö£π
(
g˘xs
, 
g˘x
);

1186 
	`mem£t
(&
g˘x
->
˙t_summed
, 0, (
¥of_˙t_t
));

1188 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
g˘x
->
lock
);

1189 
	}
}

1191 
	s¥of_g˘x_mîge_ôî_¨g_s
 {

1192 
tsdn_t
 *
	mtsdn
;

1193 
size_t
 
	mÀak_ng˘x
;

1196 
¥of_g˘x_t
 *

1197 
	$¥of_g˘x_mîge_ôî
(
¥of_g˘x_åì_t
 *
g˘xs
, 
¥of_g˘x_t
 *
g˘x
, *
›aque
)

1199 
¥of_g˘x_mîge_ôî_¨g_s
 *
¨g
 =

1200 (
¥of_g˘x_mîge_ôî_¨g_s
 *)
›aque
;

1202 
	`mÆloc_muãx_lock
(
¨g
->
tsdn
, 
g˘x
->
lock
);

1203 
	`t˘x_åì_ôî
(&
g˘x
->
t˘xs
, 
NULL
, 
¥of_t˘x_mîge_ôî
,

1204 (*)
¨g
->
tsdn
);

1205 i‡(
g˘x
->
˙t_summed
.
curobjs
 != 0)

1206 
¨g
->
Àak_ng˘x
++;

1207 
	`mÆloc_muãx_u∆ock
(
¨g
->
tsdn
, 
g˘x
->
lock
);

1209  (
NULL
);

1210 
	}
}

1213 
	$¥of_g˘x_föish
(
tsd_t
 *
tsd
, 
¥of_g˘x_åì_t
 *
g˘xs
)

1215 
¥of_td©a_t
 *
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
Ál£
);

1216 
¥of_g˘x_t
 *
g˘x
;

1224 (
g˘x
 = 
	`g˘x_åì_fú°
(
g˘xs
)Ë!
NULL
) {

1225 
	`g˘x_åì_ªmove
(
g˘xs
, 
g˘x
);

1226 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

1228 
¥of_t˘x_t
 *
√xt
;

1230 
√xt
 = 
NULL
;

1232 
¥of_t˘x_t
 *
to_de°roy
 =

1233 
	`t˘x_åì_ôî
(&
g˘x
->
t˘xs
, 
√xt
,

1234 
¥of_t˘x_föish_ôî
,

1235 (*)
	`tsd_tsdn
(
tsd
));

1236 i‡(
to_de°roy
 !
NULL
) {

1237 
√xt
 = 
	`t˘x_åì_√xt
(&
g˘x
->
t˘xs
,

1238 
to_de°roy
);

1239 
	`t˘x_åì_ªmove
(&
g˘x
->
t˘xs
,

1240 
to_de°roy
);

1241 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
to_de°roy
,

1242 
NULL
, 
åue
,Årue);

1244 
√xt
 = 
NULL
;

1245 } 
√xt
 !
NULL
);

1247 
g˘x
->
∆imbo
--;

1248 i‡(
	`¥of_g˘x_should_de°roy
(
g˘x
)) {

1249 
g˘x
->
∆imbo
++;

1250 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

1251 
	`¥of_g˘x_åy_de°roy
(
tsd
, 
td©a
, 
g˘x
,Ådata);

1253 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
g˘x
->
lock
);

1255 
	}
}

1257 
	s¥of_td©a_mîge_ôî_¨g_s
 {

1258 
tsdn_t
 *
	mtsdn
;

1259 
¥of_˙t_t
 
	m˙t_Æl
;

1262 
¥of_td©a_t
 *

1263 
	$¥of_td©a_mîge_ôî
(
¥of_td©a_åì_t
 *
td©as
, 
¥of_td©a_t
 *
td©a
,

1264 *
›aque
)

1266 
¥of_td©a_mîge_ôî_¨g_s
 *
¨g
 =

1267 (
¥of_td©a_mîge_ôî_¨g_s
 *)
›aque
;

1269 
	`mÆloc_muãx_lock
(
¨g
->
tsdn
, 
td©a
->
lock
);

1270 i‡(!
td©a
->
expúed
) {

1271 
size_t
 
èböd
;

1273 
¥of_t˘x_t
 *
p
;

1274 *
v
;

1275 } 
t˘x
;

1277 
td©a
->
dumpög
 = 
åue
;

1278 
	`mem£t
(&
td©a
->
˙t_summed
, 0, (
¥of_˙t_t
));

1279 
èböd
 = 0; !
	`ckh_ôî
(&
td©a
->
bt2t˘x
, &èböd, 
NULL
,

1280 &
t˘x
.
v
);)

1281 
	`¥of_t˘x_mîge_td©a
(
¨g
->
tsdn
, 
t˘x
.
p
, 
td©a
);

1283 
¨g
->
˙t_Æl
.
curobjs
 +
td©a
->
˙t_summed
.curobjs;

1284 
¨g
->
˙t_Æl
.
curbyãs
 +
td©a
->
˙t_summed
.curbytes;

1285 i‡(
›t_¥of_accum
) {

1286 
¨g
->
˙t_Æl
.
accumobjs
 +
td©a
->
˙t_summed
.accumobjs;

1287 
¨g
->
˙t_Æl
.
accumbyãs
 +
td©a
->
˙t_summed
.accumbytes;

1290 
td©a
->
dumpög
 = 
Ál£
;

1291 
	`mÆloc_muãx_u∆ock
(
¨g
->
tsdn
, 
td©a
->
lock
);

1293  (
NULL
);

1294 
	}
}

1296 
¥of_td©a_t
 *

1297 
	$¥of_td©a_dump_ôî
(
¥of_td©a_åì_t
 *
td©as
, 
¥of_td©a_t
 *
td©a
, *
¨g
)

1299 
boﬁ
 
¥›ag©e_îr
 = *(boﬁ *)
¨g
;

1301 i‡(!
td©a
->
dumpög
)

1302  (
NULL
);

1304 i‡(
	`¥of_dump_¥ötf
(
¥›ag©e_îr
,

1305 "Å%"
FMTu64
": %"FMTu64": %"FMTu64" [%"FMTu64": %"FMTu64"]%s%s\n",

1306 
td©a
->
thr_uid
,Åd©a->
˙t_summed
.
curobjs
,

1307 
td©a
->
˙t_summed
.
curbyãs
,Åd©a->˙t_summed.
accumobjs
,

1308 
td©a
->
˙t_summed
.
accumbyãs
,

1309 (
td©a
->
thªad_«me
 !
NULL
) ? " " : "",

1310 (
td©a
->
thªad_«me
 !
NULL
) ?Ådata->thread_name : ""))

1311  (
td©a
);

1312  (
NULL
);

1313 
	}
}

1315 #ifde‡
JEMALLOC_JET


1316 #unde‡
¥of_dump_hódî


1317 
	#¥of_dump_hódî
 
	`JEMALLOC_N
(
¥of_dump_hódî_im∂
)

	)

1319 
boﬁ


1320 
	$¥of_dump_hódî
(
tsdn_t
 *
tsdn
, 
boﬁ
 
¥›ag©e_îr
, c⁄° 
¥of_˙t_t
 *
˙t_Æl
)

1322 
boﬁ
 
ªt
;

1324 i‡(
	`¥of_dump_¥ötf
(
¥›ag©e_îr
,

1325 "hóp_v2/%"
FMTu64
"\n"

1326 "Å*: %"
FMTu64
": %"FMTu64" [%"FMTu64": %"FMTu64"]\n",

1327 ((
uöt64_t
)1U << 
lg_¥of_ßm∂e
), 
˙t_Æl
->
curobjs
,

1328 
˙t_Æl
->
curbyãs
, c¡_Æl->
accumobjs
, c¡_Æl->
accumbyãs
))

1329  (
åue
);

1331 
	`mÆloc_muãx_lock
(
tsdn
, &
td©as_mtx
);

1332 
ªt
 = (
	`td©a_åì_ôî
(&
td©as
, 
NULL
, 
¥of_td©a_dump_ôî
,

1333 (*)&
¥›ag©e_îr
Ë!
NULL
);

1334 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
td©as_mtx
);

1335  (
ªt
);

1336 
	}
}

1337 #ifde‡
JEMALLOC_JET


1338 #unde‡
¥of_dump_hódî


1339 
	#¥of_dump_hódî
 
	`JEMALLOC_N
(
¥of_dump_hódî
)

	)

1340 
¥of_dump_hódî_t
 *
	g¥of_dump_hódî
 = 
JEMALLOC_N
(
¥of_dump_hódî_im∂
);

1343 
boﬁ


1344 
	$¥of_dump_g˘x
(
tsdn_t
 *
tsdn
, 
boﬁ
 
¥›ag©e_îr
, 
¥of_g˘x_t
 *
g˘x
,

1345 c⁄° 
¥of_bt_t
 *
bt
, 
¥of_g˘x_åì_t
 *
g˘xs
)

1347 
boﬁ
 
ªt
;

1348 
i
;

1349 
¥of_t˘x_dump_ôî_¨g_s
 
¥of_t˘x_dump_ôî_¨g
;

1351 
	`ˇs£π
(
c⁄fig_¥of
);

1352 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
g˘x
->
lock
);

1355 i‡((!
›t_¥of_accum
 && 
g˘x
->
˙t_summed
.
curobjs
 == 0) ||

1356 (
›t_¥of_accum
 && 
g˘x
->
˙t_summed
.
accumobjs
 == 0)) {

1357 
	`as£π
(
g˘x
->
˙t_summed
.
curobjs
 == 0);

1358 
	`as£π
(
g˘x
->
˙t_summed
.
curbyãs
 == 0);

1359 
	`as£π
(
g˘x
->
˙t_summed
.
accumobjs
 == 0);

1360 
	`as£π
(
g˘x
->
˙t_summed
.
accumbyãs
 == 0);

1361 
ªt
 = 
Ál£
;

1362 
œbñ_ªtu∫
;

1365 i‡(
	`¥of_dump_¥ötf
(
¥›ag©e_îr
, "@")) {

1366 
ªt
 = 
åue
;

1367 
œbñ_ªtu∫
;

1369 
i
 = 0; i < 
bt
->
Àn
; i++) {

1370 i‡(
	`¥of_dump_¥ötf
(
¥›ag©e_îr
, " %#"
FMTxPTR
,

1371 (
uöçå_t
)
bt
->
vec
[
i
])) {

1372 
ªt
 = 
åue
;

1373 
œbñ_ªtu∫
;

1377 i‡(
	`¥of_dump_¥ötf
(
¥›ag©e_îr
,

1379 "Å*: %"
FMTu64
": %"FMTu64" [%"FMTu64": %"FMTu64"]\n",

1380 
g˘x
->
˙t_summed
.
curobjs
, g˘x->˙t_summed.
curbyãs
,

1381 
g˘x
->
˙t_summed
.
accumobjs
, g˘x->˙t_summed.
accumbyãs
)) {

1382 
ªt
 = 
åue
;

1383 
œbñ_ªtu∫
;

1386 
¥of_t˘x_dump_ôî_¨g
.
tsdn
 =Åsdn;

1387 
¥of_t˘x_dump_ôî_¨g
.
¥›ag©e_îr
 =Öropagate_err;

1388 i‡(
	`t˘x_åì_ôî
(&
g˘x
->
t˘xs
, 
NULL
, 
¥of_t˘x_dump_ôî
,

1389 (*)&
¥of_t˘x_dump_ôî_¨g
Ë!
NULL
) {

1390 
ªt
 = 
åue
;

1391 
œbñ_ªtu∫
;

1394 
ªt
 = 
Ál£
;

1395 
œbñ_ªtu∫
:

1396  (
ªt
);

1397 
	}
}

1399 #i‚de‡
_WIN32


1400 
	$JEMALLOC_FORMAT_PRINTF
(1, 2)

1402 
	$¥of_›í_m≠s
(c⁄° *
f‹m©
, ...)

1404 
mfd
;

1405 
va_li°
 
≠
;

1406 
fûíame
[
PATH_MAX
 + 1];

1408 
	`va_°¨t
(
≠
, 
f‹m©
);

1409 
	`mÆloc_v¢¥ötf
(
fûíame
, (fûíame), 
f‹m©
, 
≠
);

1410 
	`va_íd
(
≠
);

1411 
mfd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

1413  (
mfd
);

1414 
	}
}

1418 
	$¥of_gëpid
()

1421 #ifde‡
_WIN32


1422  (
	`GëCuºítPro˚ssId
());

1424  (
	`gëpid
());

1426 
	}
}

1428 
boﬁ


1429 
	$¥of_dump_m≠s
(
boﬁ
 
¥›ag©e_îr
)

1431 
boﬁ
 
ªt
;

1432 
mfd
;

1434 
	`ˇs£π
(
c⁄fig_¥of
);

1435 #ifde‡
__FªeBSD__


1436 
mfd
 = 
	`¥of_›í_m≠s
("/proc/curproc/map");

1437 #ñi‡
	`deföed
(
_WIN32
)

1438 
mfd
 = -1;

1441 
pid
 = 
	`¥of_gëpid
();

1443 
mfd
 = 
	`¥of_›í_m≠s
("/¥oc/%d/èsk/%d/m≠s", 
pid
,Öid);

1444 i‡(
mfd
 == -1)

1445 
mfd
 = 
	`¥of_›í_m≠s
("/¥oc/%d/m≠s", 
pid
);

1448 i‡(
mfd
 != -1) {

1449 
ssize_t
 
ƒód
;

1451 i‡(
	`¥of_dump_wrôe
(
¥›ag©e_îr
, "\nMAPPED_LIBRARIES:\n") &&

1452 
¥›ag©e_îr
) {

1453 
ªt
 = 
åue
;

1454 
œbñ_ªtu∫
;

1456 
ƒód
 = 0;

1458 
¥of_dump_buf_íd
 +
ƒód
;

1459 i‡(
¥of_dump_buf_íd
 =
PROF_DUMP_BUFSIZE
) {

1461 i‡(
	`¥of_dump_Êush
(
¥›ag©e_îr
) &&

1462 
¥›ag©e_îr
) {

1463 
ªt
 = 
åue
;

1464 
œbñ_ªtu∫
;

1467 
ƒód
 = 
	`ªad
(
mfd
, &
¥of_dump_buf
[
¥of_dump_buf_íd
],

1468 
PROF_DUMP_BUFSIZE
 - 
¥of_dump_buf_íd
);

1469 } 
ƒód
 > 0);

1471 
ªt
 = 
åue
;

1472 
œbñ_ªtu∫
;

1475 
ªt
 = 
Ál£
;

1476 
œbñ_ªtu∫
:

1477 i‡(
mfd
 != -1)

1478 
	`˛o£
(
mfd
);

1479  (
ªt
);

1480 
	}
}

1487 
	$¥of_Àakcheck
(c⁄° 
¥of_˙t_t
 *
˙t_Æl
, 
size_t
 
Àak_ng˘x
,

1488 c⁄° *
fûíame
)

1491 #ifde‡
JEMALLOC_PROF


1498 i‡(
˙t_Æl
->
curbyãs
 != 0) {

1499 
ßm∂e_≥riod
 = ()((
uöt64_t
)1 << 
lg_¥of_ßm∂e
);

1500 
øtio
 = ((()
˙t_Æl
->
curbyãs
) /

1501 ()
˙t_Æl
->
curobjs
Ë/ 
ßm∂e_≥riod
;

1502 
sˇÀ_Á˘‹
 = 1.0 / (1.0 - 
	`exp
(-
øtio
));

1503 
uöt64_t
 
curbyãs
 = (uöt64_t)
	`round
((()
˙t_Æl
->curbytes)

1504 * 
sˇÀ_Á˘‹
);

1505 
uöt64_t
 
curobjs
 = (uöt64_t)
	`round
((()
˙t_Æl
->curobjs) *

1506 
sˇÀ_Á˘‹
);

1508 
	`mÆloc_¥ötf
("<jemÆloc>: Lókáµroxim©i⁄ summ¨y: ~%"
FMTu64


1509 " byã%s, ~%"
FMTu64
" object%s, >= %zu context%s\n",

1510 
curbyãs
, (curbyã†!1Ë? "s" : "", 
curobjs
, (curobjs !=

1511 1Ë? "s" : "", 
Àak_ng˘x
, (leak_ngctx != 1) ? "s" : "");

1512 
	`mÆloc_¥ötf
(

1514 
fûíame
);

1517 
	}
}

1519 
	s¥of_g˘x_dump_ôî_¨g_s
 {

1520 
tsdn_t
 *
	mtsdn
;

1521 
boﬁ
 
	m¥›ag©e_îr
;

1524 
¥of_g˘x_t
 *

1525 
	$¥of_g˘x_dump_ôî
(
¥of_g˘x_åì_t
 *
g˘xs
, 
¥of_g˘x_t
 *
g˘x
, *
›aque
)

1527 
¥of_g˘x_t
 *
ªt
;

1528 
¥of_g˘x_dump_ôî_¨g_s
 *
¨g
 =

1529 (
¥of_g˘x_dump_ôî_¨g_s
 *)
›aque
;

1531 
	`mÆloc_muãx_lock
(
¨g
->
tsdn
, 
g˘x
->
lock
);

1533 i‡(
	`¥of_dump_g˘x
(
¨g
->
tsdn
,árg->
¥›ag©e_îr
, 
g˘x
, &g˘x->
bt
,

1534 
g˘xs
)) {

1535 
ªt
 = 
g˘x
;

1536 
œbñ_ªtu∫
;

1539 
ªt
 = 
NULL
;

1540 
œbñ_ªtu∫
:

1541 
	`mÆloc_muãx_u∆ock
(
¨g
->
tsdn
, 
g˘x
->
lock
);

1542  (
ªt
);

1543 
	}
}

1545 
boﬁ


1546 
	$¥of_dump
(
tsd_t
 *
tsd
, 
boﬁ
 
¥›ag©e_îr
, c⁄° *
fûíame
, boﬁ 
Àakcheck
)

1548 
¥of_td©a_t
 *
td©a
;

1549 
¥of_td©a_mîge_ôî_¨g_s
 
¥of_td©a_mîge_ôî_¨g
;

1550 
size_t
 
èböd
;

1552 
¥of_g˘x_t
 *
p
;

1553 *
v
;

1554 } 
g˘x
;

1555 
¥of_g˘x_mîge_ôî_¨g_s
 
¥of_g˘x_mîge_ôî_¨g
;

1556 
¥of_g˘x_dump_ôî_¨g_s
 
¥of_g˘x_dump_ôî_¨g
;

1557 
¥of_g˘x_åì_t
 
g˘xs
;

1559 
	`ˇs£π
(
c⁄fig_¥of
);

1561 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

1562 i‡(
td©a
 =
NULL
)

1563  (
åue
);

1565 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_mtx
);

1566 
	`¥of_íãr
(
tsd
, 
td©a
);

1572 
	`g˘x_åì_√w
(&
g˘xs
);

1573 
èböd
 = 0; !
	`ckh_ôî
(&
bt2g˘x
, &èböd, 
NULL
, &
g˘x
.
v
);)

1574 
	`¥of_dump_g˘x_¥ï
(
	`tsd_tsdn
(
tsd
), 
g˘x
.
p
, &
g˘xs
);

1580 
¥of_td©a_mîge_ôî_¨g
.
tsdn
 = 
	`tsd_tsdn
(
tsd
);

1581 
	`mem£t
(&
¥of_td©a_mîge_ôî_¨g
.
˙t_Æl
, 0, (
¥of_˙t_t
));

1582 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
td©as_mtx
);

1583 
	`td©a_åì_ôî
(&
td©as
, 
NULL
, 
¥of_td©a_mîge_ôî
,

1584 (*)&
¥of_td©a_mîge_ôî_¨g
);

1585 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
td©as_mtx
);

1588 
¥of_g˘x_mîge_ôî_¨g
.
tsdn
 = 
	`tsd_tsdn
(
tsd
);

1589 
¥of_g˘x_mîge_ôî_¨g
.
Àak_ng˘x
 = 0;

1590 
	`g˘x_åì_ôî
(&
g˘xs
, 
NULL
, 
¥of_g˘x_mîge_ôî
,

1591 (*)&
¥of_g˘x_mîge_ôî_¨g
);

1593 
	`¥of_Àave
(
tsd
, 
td©a
);

1596 i‡((
¥of_dump_fd
 = 
	`¥of_dump_›í
(
¥›ag©e_îr
, 
fûíame
)) == -1)

1597 
œbñ_›í_˛o£_îr‹
;

1600 i‡(
	`¥of_dump_hódî
(
	`tsd_tsdn
(
tsd
), 
¥›ag©e_îr
,

1601 &
¥of_td©a_mîge_ôî_¨g
.
˙t_Æl
))

1602 
œbñ_wrôe_îr‹
;

1605 
¥of_g˘x_dump_ôî_¨g
.
tsdn
 = 
	`tsd_tsdn
(
tsd
);

1606 
¥of_g˘x_dump_ôî_¨g
.
¥›ag©e_îr
 =Öropagate_err;

1607 i‡(
	`g˘x_åì_ôî
(&
g˘xs
, 
NULL
, 
¥of_g˘x_dump_ôî
,

1608 (*)&
¥of_g˘x_dump_ôî_¨g
Ë!
NULL
)

1609 
œbñ_wrôe_îr‹
;

1612 i‡(
	`¥of_dump_m≠s
(
¥›ag©e_îr
))

1613 
œbñ_wrôe_îr‹
;

1615 i‡(
	`¥of_dump_˛o£
(
¥›ag©e_îr
))

1616 
œbñ_›í_˛o£_îr‹
;

1618 
	`¥of_g˘x_föish
(
tsd
, &
g˘xs
);

1619 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_mtx
);

1621 i‡(
Àakcheck
) {

1622 
	`¥of_Àakcheck
(&
¥of_td©a_mîge_ôî_¨g
.
˙t_Æl
,

1623 
¥of_g˘x_mîge_ôî_¨g
.
Àak_ng˘x
, 
fûíame
);

1625  (
Ál£
);

1626 
œbñ_wrôe_îr‹
:

1627 
	`¥of_dump_˛o£
(
¥›ag©e_îr
);

1628 
œbñ_›í_˛o£_îr‹
:

1629 
	`¥of_g˘x_föish
(
tsd
, &
g˘xs
);

1630 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_mtx
);

1631  (
åue
);

1632 
	}
}

1634 
	#DUMP_FILENAME_BUFSIZE
 (
PATH_MAX
 + 1)

	)

1635 
	#VSEQ_INVALID
 
	`UINT64_C
(0xffffffffffffffff)

	)

1637 
	$¥of_dump_fûíame
(*
fûíame
, 
v
, 
uöt64_t
 
v£q
)

1640 
	`ˇs£π
(
c⁄fig_¥of
);

1642 i‡(
v£q
 !
VSEQ_INVALID
) {

1644 
	`mÆloc_¢¥ötf
(
fûíame
, 
DUMP_FILENAME_BUFSIZE
,

1645 "%s.%d.%"
FMTu64
".%c%"FMTu64".heap",

1646 
›t_¥of_¥efix
, 
	`¥of_gëpid
(), 
¥of_dump_£q
, 
v
, 
v£q
);

1649 
	`mÆloc_¢¥ötf
(
fûíame
, 
DUMP_FILENAME_BUFSIZE
,

1650 "%s.%d.%"
FMTu64
".%c.heap",

1651 
›t_¥of_¥efix
, 
	`¥of_gëpid
(), 
¥of_dump_£q
, 
v
);

1653 
¥of_dump_£q
++;

1654 
	}
}

1657 
	$¥of_fdump
()

1659 
tsd_t
 *
tsd
;

1660 
fûíame
[
DUMP_FILENAME_BUFSIZE
];

1662 
	`ˇs£π
(
c⁄fig_¥of
);

1663 
	`as£π
(
›t_¥of_föÆ
);

1664 
	`as£π
(
›t_¥of_¥efix
[0] != '\0');

1666 i‡(!
¥of_boŸed
)

1668 
tsd
 = 
	`tsd_„tch
();

1670 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_£q_mtx
);

1671 
	`¥of_dump_fûíame
(
fûíame
, 'f', 
VSEQ_INVALID
);

1672 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_£q_mtx
);

1673 
	`¥of_dump
(
tsd
, 
Ál£
, 
fûíame
, 
›t_¥of_Àak
);

1674 
	}
}

1677 
	$¥of_idump
(
tsdn_t
 *
tsdn
)

1679 
tsd_t
 *
tsd
;

1680 
¥of_td©a_t
 *
td©a
;

1682 
	`ˇs£π
(
c⁄fig_¥of
);

1684 i‡(!
¥of_boŸed
 || 
	`tsdn_nuŒ
(
tsdn
))

1686 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

1687 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
Ál£
);

1688 i‡(
td©a
 =
NULL
)

1690 i‡(
td©a
->
íq
) {

1691 
td©a
->
íq_idump
 = 
åue
;

1695 i‡(
›t_¥of_¥efix
[0] != '\0') {

1696 
fûíame
[
PATH_MAX
 + 1];

1697 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_£q_mtx
);

1698 
	`¥of_dump_fûíame
(
fûíame
, 'i', 
¥of_dump_i£q
);

1699 
¥of_dump_i£q
++;

1700 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_£q_mtx
);

1701 
	`¥of_dump
(
tsd
, 
Ál£
, 
fûíame
, false);

1703 
	}
}

1705 
boﬁ


1706 
	$¥of_mdump
(
tsd_t
 *
tsd
, c⁄° *
fûíame
)

1708 
fûíame_buf
[
DUMP_FILENAME_BUFSIZE
];

1710 
	`ˇs£π
(
c⁄fig_¥of
);

1712 i‡(!
›t_¥of
 || !
¥of_boŸed
)

1713  (
åue
);

1715 i‡(
fûíame
 =
NULL
) {

1717 i‡(
›t_¥of_¥efix
[0] == '\0')

1718  (
åue
);

1719 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_£q_mtx
);

1720 
	`¥of_dump_fûíame
(
fûíame_buf
, 'm', 
¥of_dump_m£q
);

1721 
¥of_dump_m£q
++;

1722 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¥of_dump_£q_mtx
);

1723 
fûíame
 = 
fûíame_buf
;

1725  (
	`¥of_dump
(
tsd
, 
åue
, 
fûíame
, 
Ál£
));

1726 
	}
}

1729 
	$¥of_gdump
(
tsdn_t
 *
tsdn
)

1731 
tsd_t
 *
tsd
;

1732 
¥of_td©a_t
 *
td©a
;

1734 
	`ˇs£π
(
c⁄fig_¥of
);

1736 i‡(!
¥of_boŸed
 || 
	`tsdn_nuŒ
(
tsdn
))

1738 
tsd
 = 
	`tsdn_tsd
(
tsdn
);

1739 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
Ál£
);

1740 i‡(
td©a
 =
NULL
)

1742 i‡(
td©a
->
íq
) {

1743 
td©a
->
íq_gdump
 = 
åue
;

1747 i‡(
›t_¥of_¥efix
[0] != '\0') {

1748 
fûíame
[
DUMP_FILENAME_BUFSIZE
];

1749 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_dump_£q_mtx
);

1750 
	`¥of_dump_fûíame
(
fûíame
, 'u', 
¥of_dump_u£q
);

1751 
¥of_dump_u£q
++;

1752 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_dump_£q_mtx
);

1753 
	`¥of_dump
(
tsd
, 
Ál£
, 
fûíame
, false);

1755 
	}
}

1758 
	$¥of_bt_hash
(c⁄° *
key
, 
size_t
 
r_hash
[2])

1760 
¥of_bt_t
 *
bt
 = (¥of_bt_à*)
key
;

1762 
	`ˇs£π
(
c⁄fig_¥of
);

1764 
	`hash
(
bt
->
vec
, bt->
Àn
 * (*), 0x94122f33U, 
r_hash
);

1765 
	}
}

1767 
boﬁ


1768 
	$¥of_bt_keycomp
(c⁄° *
k1
, c⁄° *
k2
)

1770 c⁄° 
¥of_bt_t
 *
bt1
 = (¥of_bt_à*)
k1
;

1771 c⁄° 
¥of_bt_t
 *
bt2
 = (¥of_bt_à*)
k2
;

1773 
	`ˇs£π
(
c⁄fig_¥of
);

1775 i‡(
bt1
->
Àn
 !
bt2
->len)

1776  (
Ál£
);

1777  (
	`memcmp
(
bt1
->
vec
, 
bt2
->vec, bt1->
Àn
 * (*)) == 0);

1778 
	}
}

1780 
JEMALLOC_INLINE_C
 
uöt64_t


1781 
	$¥of_thr_uid_Æloc
(
tsdn_t
 *
tsdn
)

1783 
uöt64_t
 
thr_uid
;

1785 
	`mÆloc_muãx_lock
(
tsdn
, &
√xt_thr_uid_mtx
);

1786 
thr_uid
 = 
√xt_thr_uid
;

1787 
√xt_thr_uid
++;

1788 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
√xt_thr_uid_mtx
);

1790  (
thr_uid
);

1791 
	}
}

1793 
¥of_td©a_t
 *

1794 
	$¥of_td©a_öô_im∂
(
tsdn_t
 *
tsdn
, 
uöt64_t
 
thr_uid
, uöt64_à
thr_dis¸im
,

1795 *
thªad_«me
, 
boﬁ
 
a˘ive
)

1797 
¥of_td©a_t
 *
td©a
;

1799 
	`ˇs£π
(
c⁄fig_¥of
);

1802 
td©a
 = (
¥of_td©a_t
 *)
	`üŒocztm
(
tsdn
, (prof_tdata_t),

1803 
	`size2ödex
((
¥of_td©a_t
)), 
Ál£
, 
NULL
, 
åue
,

1804 
	`¨ía_gë
(
TSDN_NULL
, 0, 
åue
),Årue);

1805 i‡(
td©a
 =
NULL
)

1806  (
NULL
);

1808 
td©a
->
lock
 = 
	`¥of_td©a_muãx_choo£
(
thr_uid
);

1809 
td©a
->
thr_uid
 =Åhr_uid;

1810 
td©a
->
thr_dis¸im
 =Åhr_discrim;

1811 
td©a
->
thªad_«me
 =Åhread_name;

1812 
td©a
->
©èched
 = 
åue
;

1813 
td©a
->
expúed
 = 
Ál£
;

1814 
td©a
->
t˘x_uid_√xt
 = 0;

1816 i‡(
	`ckh_√w
(
tsdn
, &
td©a
->
bt2t˘x
, 
PROF_CKH_MINITEMS
,

1817 
¥of_bt_hash
, 
¥of_bt_keycomp
)) {

1818 
	`idÆlo˘m
(
tsdn
, 
td©a
, 
NULL
, 
åue
,Årue);

1819  (
NULL
);

1822 
td©a
->
¥ng_°©e
 = (
uöt64_t
)(
uöçå_t
)tdata;

1823 
	`¥of_ßm∂e_thªshﬁd_upd©e
(
td©a
);

1825 
td©a
->
íq
 = 
Ál£
;

1826 
td©a
->
íq_idump
 = 
Ál£
;

1827 
td©a
->
íq_gdump
 = 
Ál£
;

1829 
td©a
->
dumpög
 = 
Ál£
;

1830 
td©a
->
a˘ive
 =áctive;

1832 
	`mÆloc_muãx_lock
(
tsdn
, &
td©as_mtx
);

1833 
	`td©a_åì_ö£π
(&
td©as
, 
td©a
);

1834 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
td©as_mtx
);

1836  (
td©a
);

1837 
	}
}

1839 
¥of_td©a_t
 *

1840 
	$¥of_td©a_öô
(
tsdn_t
 *
tsdn
)

1843  (
	`¥of_td©a_öô_im∂
(
tsdn
, 
	`¥of_thr_uid_Æloc
—sdn), 0, 
NULL
,

1844 
	`¥of_thªad_a˘ive_öô_gë
(
tsdn
)));

1845 
	}
}

1847 
boﬁ


1848 
	$¥of_td©a_should_de°roy_u∆ocked
(
¥of_td©a_t
 *
td©a
, 
boﬁ
 
eví_if_©èched
)

1851 i‡(
td©a
->
©èched
 && !
eví_if_©èched
)

1852  (
Ál£
);

1853 i‡(
	`ckh_cou¡
(&
td©a
->
bt2t˘x
) != 0)

1854  (
Ál£
);

1855  (
åue
);

1856 
	}
}

1858 
boﬁ


1859 
	$¥of_td©a_should_de°roy
(
tsdn_t
 *
tsdn
, 
¥of_td©a_t
 *
td©a
,

1860 
boﬁ
 
eví_if_©èched
)

1863 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, 
td©a
->
lock
);

1865  (
	`¥of_td©a_should_de°roy_u∆ocked
(
td©a
, 
eví_if_©èched
));

1866 
	}
}

1869 
	$¥of_td©a_de°roy_locked
(
tsdn_t
 *
tsdn
, 
¥of_td©a_t
 *
td©a
,

1870 
boﬁ
 
eví_if_©èched
)

1873 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, &
td©as_mtx
);

1875 
	`as£π
(
	`tsdn_nuŒ
(
tsdn
Ë|| 
	`tsd_¥of_td©a_gë
(
	`tsdn_tsd
—sdn)Ë!
td©a
);

1877 
	`td©a_åì_ªmove
(&
td©as
, 
td©a
);

1879 
	`as£π
(
	`¥of_td©a_should_de°roy_u∆ocked
(
td©a
, 
eví_if_©èched
));

1881 i‡(
td©a
->
thªad_«me
 !
NULL
)

1882 
	`idÆlo˘m
(
tsdn
, 
td©a
->
thªad_«me
, 
NULL
, 
åue
,Årue);

1883 
	`ckh_dñëe
(
tsdn
, &
td©a
->
bt2t˘x
);

1884 
	`idÆlo˘m
(
tsdn
, 
td©a
, 
NULL
, 
åue
,Årue);

1885 
	}
}

1888 
	$¥of_td©a_de°roy
(
tsdn_t
 *
tsdn
, 
¥of_td©a_t
 *
td©a
, 
boﬁ
 
eví_if_©èched
)

1891 
	`mÆloc_muãx_lock
(
tsdn
, &
td©as_mtx
);

1892 
	`¥of_td©a_de°roy_locked
(
tsdn
, 
td©a
, 
eví_if_©èched
);

1893 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
td©as_mtx
);

1894 
	}
}

1897 
	$¥of_td©a_dëach
(
tsd_t
 *
tsd
, 
¥of_td©a_t
 *
td©a
)

1899 
boﬁ
 
de°roy_td©a
;

1901 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

1902 i‡(
td©a
->
©èched
) {

1903 
de°roy_td©a
 = 
	`¥of_td©a_should_de°roy
(
	`tsd_tsdn
(
tsd
), 
td©a
,

1904 
åue
);

1909 i‡(!
de°roy_td©a
)

1910 
td©a
->
©èched
 = 
Ál£
;

1911 
	`tsd_¥of_td©a_£t
(
tsd
, 
NULL
);

1913 
de°roy_td©a
 = 
Ál£
;

1914 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), 
td©a
->
lock
);

1915 i‡(
de°roy_td©a
)

1916 
	`¥of_td©a_de°roy
(
	`tsd_tsdn
(
tsd
), 
td©a
, 
åue
);

1917 
	}
}

1919 
¥of_td©a_t
 *

1920 
	$¥of_td©a_ªöô
(
tsd_t
 *
tsd
, 
¥of_td©a_t
 *
td©a
)

1922 
uöt64_t
 
thr_uid
 = 
td©a
->thr_uid;

1923 
uöt64_t
 
thr_dis¸im
 = 
td©a
->thr_discrim + 1;

1924 *
thªad_«me
 = (
td©a
->thªad_«mê!
NULL
) ?

1925 
	`¥of_thªad_«me_Æloc
(
	`tsd_tsdn
(
tsd
), 
td©a
->
thªad_«me
Ë: 
NULL
;

1926 
boﬁ
 
a˘ive
 = 
td©a
->active;

1928 
	`¥of_td©a_dëach
(
tsd
, 
td©a
);

1929  (
	`¥of_td©a_öô_im∂
(
	`tsd_tsdn
(
tsd
), 
thr_uid
, 
thr_dis¸im
,

1930 
thªad_«me
, 
a˘ive
));

1931 
	}
}

1933 
boﬁ


1934 
	$¥of_td©a_expúe
(
tsdn_t
 *
tsdn
, 
¥of_td©a_t
 *
td©a
)

1936 
boﬁ
 
de°roy_td©a
;

1938 
	`mÆloc_muãx_lock
(
tsdn
, 
td©a
->
lock
);

1939 i‡(!
td©a
->
expúed
) {

1940 
td©a
->
expúed
 = 
åue
;

1941 
de°roy_td©a
 = 
td©a
->
©èched
 ? 
Ál£
 :

1942 
	`¥of_td©a_should_de°roy
(
tsdn
, 
td©a
, 
Ál£
);

1944 
de°roy_td©a
 = 
Ál£
;

1945 
	`mÆloc_muãx_u∆ock
(
tsdn
, 
td©a
->
lock
);

1947  (
de°roy_td©a
);

1948 
	}
}

1950 
¥of_td©a_t
 *

1951 
	$¥of_td©a_ª£t_ôî
(
¥of_td©a_åì_t
 *
td©as
, 
¥of_td©a_t
 *
td©a
, *
¨g
)

1953 
tsdn_t
 *
tsdn
 = (tsdn_à*)
¨g
;

1955  (
	`¥of_td©a_expúe
(
tsdn
, 
td©a
Ë?Åd©®: 
NULL
);

1956 
	}
}

1959 
	$¥of_ª£t
(
tsdn_t
 *
tsdn
, 
size_t
 
lg_ßm∂e
)

1961 
¥of_td©a_t
 *
√xt
;

1963 
	`as£π
(
lg_ßm∂e
 < ((
uöt64_t
) << 3));

1965 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_dump_mtx
);

1966 
	`mÆloc_muãx_lock
(
tsdn
, &
td©as_mtx
);

1968 
lg_¥of_ßm∂e
 = 
lg_ßm∂e
;

1970 
√xt
 = 
NULL
;

1972 
¥of_td©a_t
 *
to_de°roy
 = 
	`td©a_åì_ôî
(&
td©as
, 
√xt
,

1973 
¥of_td©a_ª£t_ôî
, (*)
tsdn
);

1974 i‡(
to_de°roy
 !
NULL
) {

1975 
√xt
 = 
	`td©a_åì_√xt
(&
td©as
, 
to_de°roy
);

1976 
	`¥of_td©a_de°roy_locked
(
tsdn
, 
to_de°roy
, 
Ál£
);

1978 
√xt
 = 
NULL
;

1979 } 
√xt
 !
NULL
);

1981 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
td©as_mtx
);

1982 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_dump_mtx
);

1983 
	}
}

1986 
	$¥of_td©a_˛ónup
(
tsd_t
 *
tsd
)

1988 
¥of_td©a_t
 *
td©a
;

1990 i‡(!
c⁄fig_¥of
)

1993 
td©a
 = 
	`tsd_¥of_td©a_gë
(
tsd
);

1994 i‡(
td©a
 !
NULL
)

1995 
	`¥of_td©a_dëach
(
tsd
, 
td©a
);

1996 
	}
}

1998 
boﬁ


1999 
	$¥of_a˘ive_gë
(
tsdn_t
 *
tsdn
)

2001 
boﬁ
 
¥of_a˘ive_cuºít
;

2003 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_a˘ive_mtx
);

2004 
¥of_a˘ive_cuºít
 = 
¥of_a˘ive
;

2005 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_a˘ive_mtx
);

2006  (
¥of_a˘ive_cuºít
);

2007 
	}
}

2009 
boﬁ


2010 
	$¥of_a˘ive_£t
(
tsdn_t
 *
tsdn
, 
boﬁ
 
a˘ive
)

2012 
boﬁ
 
¥of_a˘ive_ﬁd
;

2014 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_a˘ive_mtx
);

2015 
¥of_a˘ive_ﬁd
 = 
¥of_a˘ive
;

2016 
¥of_a˘ive
 = 
a˘ive
;

2017 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_a˘ive_mtx
);

2018  (
¥of_a˘ive_ﬁd
);

2019 
	}
}

2022 
	$¥of_thªad_«me_gë
(
tsd_t
 *
tsd
)

2024 
¥of_td©a_t
 *
td©a
;

2026 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

2027 i‡(
td©a
 =
NULL
)

2029  (
td©a
->
thªad_«me
 !
NULL
 ?Ådata->thread_name : "");

2030 
	}
}

2033 
	$¥of_thªad_«me_Æloc
(
tsdn_t
 *
tsdn
, c⁄° *
thªad_«me
)

2035 *
ªt
;

2036 
size_t
 
size
;

2038 i‡(
thªad_«me
 =
NULL
)

2039  (
NULL
);

2041 
size
 = 
	`°æí
(
thªad_«me
) + 1;

2042 i‡(
size
 == 1)

2045 
ªt
 = 
	`üŒocztm
(
tsdn
, 
size
, 
	`size2ödex
(size), 
Ál£
, 
NULL
, 
åue
,

2046 
	`¨ía_gë
(
TSDN_NULL
, 0, 
åue
),Årue);

2047 i‡(
ªt
 =
NULL
)

2048  (
NULL
);

2049 
	`mem˝y
(
ªt
, 
thªad_«me
, 
size
);

2050  (
ªt
);

2051 
	}
}

2054 
	$¥of_thªad_«me_£t
(
tsd_t
 *
tsd
, c⁄° *
thªad_«me
)

2056 
¥of_td©a_t
 *
td©a
;

2057 
i
;

2058 *
s
;

2060 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

2061 i‡(
td©a
 =
NULL
)

2062  (
EAGAIN
);

2065 i‡(
thªad_«me
 =
NULL
)

2066  (
EFAULT
);

2067 
i
 = 0; 
thªad_«me
[i] != '\0'; i++) {

2068 
c
 = 
thªad_«me
[
i
];

2069 i‡(!
	`isgøph
(
c
Ë&& !
	`isbœnk
(c))

2070  (
EFAULT
);

2073 
s
 = 
	`¥of_thªad_«me_Æloc
(
	`tsd_tsdn
(
tsd
), 
thªad_«me
);

2074 i‡(
s
 =
NULL
)

2075  (
EAGAIN
);

2077 i‡(
td©a
->
thªad_«me
 !
NULL
) {

2078 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
td©a
->
thªad_«me
, 
NULL
, 
åue
,Årue);

2079 
td©a
->
thªad_«me
 = 
NULL
;

2081 i‡(
	`°æí
(
s
) > 0)

2082 
td©a
->
thªad_«me
 = 
s
;

2084 
	}
}

2086 
boﬁ


2087 
	$¥of_thªad_a˘ive_gë
(
tsd_t
 *
tsd
)

2089 
¥of_td©a_t
 *
td©a
;

2091 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

2092 i‡(
td©a
 =
NULL
)

2093  (
Ál£
);

2094  (
td©a
->
a˘ive
);

2095 
	}
}

2097 
boﬁ


2098 
	$¥of_thªad_a˘ive_£t
(
tsd_t
 *
tsd
, 
boﬁ
 
a˘ive
)

2100 
¥of_td©a_t
 *
td©a
;

2102 
td©a
 = 
	`¥of_td©a_gë
(
tsd
, 
åue
);

2103 i‡(
td©a
 =
NULL
)

2104  (
åue
);

2105 
td©a
->
a˘ive
 =áctive;

2106  (
Ál£
);

2107 
	}
}

2109 
boﬁ


2110 
	$¥of_thªad_a˘ive_öô_gë
(
tsdn_t
 *
tsdn
)

2112 
boﬁ
 
a˘ive_öô
;

2114 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_thªad_a˘ive_öô_mtx
);

2115 
a˘ive_öô
 = 
¥of_thªad_a˘ive_öô
;

2116 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_thªad_a˘ive_öô_mtx
);

2117  (
a˘ive_öô
);

2118 
	}
}

2120 
boﬁ


2121 
	$¥of_thªad_a˘ive_öô_£t
(
tsdn_t
 *
tsdn
, 
boﬁ
 
a˘ive_öô
)

2123 
boﬁ
 
a˘ive_öô_ﬁd
;

2125 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_thªad_a˘ive_öô_mtx
);

2126 
a˘ive_öô_ﬁd
 = 
¥of_thªad_a˘ive_öô
;

2127 
¥of_thªad_a˘ive_öô
 = 
a˘ive_öô
;

2128 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_thªad_a˘ive_öô_mtx
);

2129  (
a˘ive_öô_ﬁd
);

2130 
	}
}

2132 
boﬁ


2133 
	$¥of_gdump_gë
(
tsdn_t
 *
tsdn
)

2135 
boﬁ
 
¥of_gdump_cuºít
;

2137 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_gdump_mtx
);

2138 
¥of_gdump_cuºít
 = 
¥of_gdump_vÆ
;

2139 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_gdump_mtx
);

2140  (
¥of_gdump_cuºít
);

2141 
	}
}

2143 
boﬁ


2144 
	$¥of_gdump_£t
(
tsdn_t
 *
tsdn
, 
boﬁ
 
gdump
)

2146 
boﬁ
 
¥of_gdump_ﬁd
;

2148 
	`mÆloc_muãx_lock
(
tsdn
, &
¥of_gdump_mtx
);

2149 
¥of_gdump_ﬁd
 = 
¥of_gdump_vÆ
;

2150 
¥of_gdump_vÆ
 = 
gdump
;

2151 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¥of_gdump_mtx
);

2152  (
¥of_gdump_ﬁd
);

2153 
	}
}

2156 
	$¥of_boŸ0
()

2159 
	`ˇs£π
(
c⁄fig_¥of
);

2161 
	`mem˝y
(
›t_¥of_¥efix
, 
PROF_PREFIX_DEFAULT
,

2162 (
PROF_PREFIX_DEFAULT
));

2163 
	}
}

2166 
	$¥of_boŸ1
()

2169 
	`ˇs£π
(
c⁄fig_¥of
);

2176 i‡(
›t_¥of_Àak
 && !
›t_¥of
) {

2181 
›t_¥of
 = 
åue
;

2182 
›t_¥of_gdump
 = 
Ál£
;

2183 } i‡(
›t_¥of
) {

2184 i‡(
›t_lg_¥of_öãrvÆ
 >= 0) {

2185 
¥of_öãrvÆ
 = (((
uöt64_t
)1U) <<

2186 
›t_lg_¥of_öãrvÆ
);

2189 
	}
}

2191 
boﬁ


2192 
	$¥of_boŸ2
(
tsdn_t
 *
tsdn
)

2195 
	`ˇs£π
(
c⁄fig_¥of
);

2197 i‡(
›t_¥of
) {

2198 
i
;

2200 
lg_¥of_ßm∂e
 = 
›t_lg_¥of_ßm∂e
;

2202 
¥of_a˘ive
 = 
›t_¥of_a˘ive
;

2203 i‡(
	`mÆloc_muãx_öô
(&
¥of_a˘ive_mtx
, "prof_active",

2204 
WITNESS_RANK_PROF_ACTIVE
))

2205  (
åue
);

2207 
¥of_gdump_vÆ
 = 
›t_¥of_gdump
;

2208 i‡(
	`mÆloc_muãx_öô
(&
¥of_gdump_mtx
, "prof_gdump",

2209 
WITNESS_RANK_PROF_GDUMP
))

2210  (
åue
);

2212 
¥of_thªad_a˘ive_öô
 = 
›t_¥of_thªad_a˘ive_öô
;

2213 i‡(
	`mÆloc_muãx_öô
(&
¥of_thªad_a˘ive_öô_mtx
,

2215 
WITNESS_RANK_PROF_THREAD_ACTIVE_INIT
))

2216  (
åue
);

2218 i‡(
	`ckh_√w
(
tsdn
, &
bt2g˘x
, 
PROF_CKH_MINITEMS
, 
¥of_bt_hash
,

2219 
¥of_bt_keycomp
))

2220  (
åue
);

2221 i‡(
	`mÆloc_muãx_öô
(&
bt2g˘x_mtx
, "prof_bt2gctx",

2222 
WITNESS_RANK_PROF_BT2GCTX
))

2223  (
åue
);

2225 
	`td©a_åì_√w
(&
td©as
);

2226 i‡(
	`mÆloc_muãx_öô
(&
td©as_mtx
, "prof_tdatas",

2227 
WITNESS_RANK_PROF_TDATAS
))

2228  (
åue
);

2230 
√xt_thr_uid
 = 0;

2231 i‡(
	`mÆloc_muãx_öô
(&
√xt_thr_uid_mtx
, "prof_next_thr_uid",

2232 
WITNESS_RANK_PROF_NEXT_THR_UID
))

2233  (
åue
);

2235 i‡(
	`mÆloc_muãx_öô
(&
¥of_dump_£q_mtx
, "prof_dump_seq",

2236 
WITNESS_RANK_PROF_DUMP_SEQ
))

2237  (
åue
);

2238 i‡(
	`mÆloc_muãx_öô
(&
¥of_dump_mtx
, "prof_dump",

2239 
WITNESS_RANK_PROF_DUMP
))

2240  (
åue
);

2242 i‡(
›t_¥of_föÆ
 && 
›t_¥of_¥efix
[0] != '\0' &&

2243 
	`©exô
(
¥of_fdump
) != 0) {

2244 
	`mÆloc_wrôe
("<jemalloc>: Error inátexit()\n");

2245 i‡(
›t_ab‹t
)

2246 
	`ab‹t
();

2249 
g˘x_locks
 = (
mÆloc_muãx_t
 *)
	`ba£_Æloc
(
tsdn
, 
PROF_NCTX_LOCKS


2250 * (
mÆloc_muãx_t
));

2251 i‡(
g˘x_locks
 =
NULL
)

2252  (
åue
);

2253 
i
 = 0; i < 
PROF_NCTX_LOCKS
; i++) {

2254 i‡(
	`mÆloc_muãx_öô
(&
g˘x_locks
[
i
], "prof_gctx",

2255 
WITNESS_RANK_PROF_GCTX
))

2256  (
åue
);

2259 
td©a_locks
 = (
mÆloc_muãx_t
 *)
	`ba£_Æloc
(
tsdn
,

2260 
PROF_NTDATA_LOCKS
 * (
mÆloc_muãx_t
));

2261 i‡(
td©a_locks
 =
NULL
)

2262  (
åue
);

2263 
i
 = 0; i < 
PROF_NTDATA_LOCKS
; i++) {

2264 i‡(
	`mÆloc_muãx_öô
(&
td©a_locks
[
i
], "prof_tdata",

2265 
WITNESS_RANK_PROF_TDATA
))

2266  (
åue
);

2270 #ifde‡
JEMALLOC_PROF_LIBGCC


2275 
	`_Unwöd_Backåa˚
(
¥of_unwöd_öô_ˇŒback
, 
NULL
);

2278 
¥of_boŸed
 = 
åue
;

2280  (
Ál£
);

2281 
	}
}

2284 
	$¥of_¥ef‹k0
(
tsdn_t
 *
tsdn
)

2287 i‡(
›t_¥of
) {

2288 
i
;

2290 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¥of_dump_mtx
);

2291 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
bt2g˘x_mtx
);

2292 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
td©as_mtx
);

2293 
i
 = 0; i < 
PROF_NTDATA_LOCKS
; i++)

2294 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
td©a_locks
[
i
]);

2295 
i
 = 0; i < 
PROF_NCTX_LOCKS
; i++)

2296 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
g˘x_locks
[
i
]);

2298 
	}
}

2301 
	$¥of_¥ef‹k1
(
tsdn_t
 *
tsdn
)

2304 i‡(
›t_¥of
) {

2305 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¥of_a˘ive_mtx
);

2306 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¥of_dump_£q_mtx
);

2307 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¥of_gdump_mtx
);

2308 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
√xt_thr_uid_mtx
);

2309 
	`mÆloc_muãx_¥ef‹k
(
tsdn
, &
¥of_thªad_a˘ive_öô_mtx
);

2311 
	}
}

2314 
	$¥of_po°f‹k_∑ª¡
(
tsdn_t
 *
tsdn
)

2317 i‡(
›t_¥of
) {

2318 
i
;

2320 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
,

2321 &
¥of_thªad_a˘ive_öô_mtx
);

2322 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
√xt_thr_uid_mtx
);

2323 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¥of_gdump_mtx
);

2324 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¥of_dump_£q_mtx
);

2325 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¥of_a˘ive_mtx
);

2326 
i
 = 0; i < 
PROF_NCTX_LOCKS
; i++)

2327 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
g˘x_locks
[
i
]);

2328 
i
 = 0; i < 
PROF_NTDATA_LOCKS
; i++)

2329 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
td©a_locks
[
i
]);

2330 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
td©as_mtx
);

2331 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
bt2g˘x_mtx
);

2332 
	`mÆloc_muãx_po°f‹k_∑ª¡
(
tsdn
, &
¥of_dump_mtx
);

2334 
	}
}

2337 
	$¥of_po°f‹k_chûd
(
tsdn_t
 *
tsdn
)

2340 i‡(
›t_¥of
) {

2341 
i
;

2343 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¥of_thªad_a˘ive_öô_mtx
);

2344 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
√xt_thr_uid_mtx
);

2345 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¥of_gdump_mtx
);

2346 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¥of_dump_£q_mtx
);

2347 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¥of_a˘ive_mtx
);

2348 
i
 = 0; i < 
PROF_NCTX_LOCKS
; i++)

2349 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
g˘x_locks
[
i
]);

2350 
i
 = 0; i < 
PROF_NTDATA_LOCKS
; i++)

2351 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
td©a_locks
[
i
]);

2352 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
td©as_mtx
);

2353 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
bt2g˘x_mtx
);

2354 
	`mÆloc_muãx_po°f‹k_chûd
(
tsdn
, &
¥of_dump_mtx
);

2356 
	}
}

	@dep/jemalloc-4.2.0/src/quarantine.c

1 
	#JEMALLOC_QUARANTINE_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

8 
	#QUARANTINE_STATE_REINCARNATED
 ((
qu¨™töe_t
 *)(
uöçå_t
)1)

	)

9 
	#QUARANTINE_STATE_PURGATORY
 ((
qu¨™töe_t
 *)(
uöçå_t
)2)

	)

10 
	#QUARANTINE_STATE_MAX
 
QUARANTINE_STATE_PURGATORY


	)

15 
qu¨™töe_t
 *
qu¨™töe_grow
(
tsd_t
 *
tsd
, qu¨™töe_à*
qu¨™töe
);

16 
qu¨™töe_døö_⁄e
(
tsdn_t
 *
tsdn
, 
qu¨™töe_t
 *
qu¨™töe
);

17 
qu¨™töe_døö
(
tsdn_t
 *
tsdn
, 
qu¨™töe_t
 *
qu¨™töe
,

18 
size_t
 
uµî_bound
);

22 
qu¨™töe_t
 *

23 
	$qu¨™töe_öô
(
tsdn_t
 *
tsdn
, 
size_t
 
lg_maxobjs
)

25 
qu¨™töe_t
 *
qu¨™töe
;

26 
size_t
 
size
;

28 
size
 = 
	`off£tof
(
qu¨™töe_t
, 
objs
Ë+ ((
	`ZU
(1Ë<< 
lg_maxobjs
) *

29 (
qu¨™töe_obj_t
));

30 
qu¨™töe
 = (
qu¨™töe_t
 *)
	`üŒocztm
(
tsdn
, 
size
, 
	`size2ödex
(size),

31 
Ál£
, 
NULL
, 
åue
, 
	`¨ía_gë
(
TSDN_NULL
, 0,Årue),Årue);

32 i‡(
qu¨™töe
 =
NULL
)

33  (
NULL
);

34 
qu¨™töe
->
curbyãs
 = 0;

35 
qu¨™töe
->
curobjs
 = 0;

36 
qu¨™töe
->
fú°
 = 0;

37 
qu¨™töe
->
lg_maxobjs
 =Üg_maxobjs;

39  (
qu¨™töe
);

40 
	}
}

43 
	$qu¨™töe_Æloc_hook_w‹k
(
tsd_t
 *
tsd
)

45 
qu¨™töe_t
 *
qu¨™töe
;

47 i‡(!
	`tsd_nomöÆ
(
tsd
))

50 
qu¨™töe
 = 
	`qu¨™töe_öô
(
	`tsd_tsdn
(
tsd
), 
LG_MAXOBJS_INIT
);

55 i‡(
	`tsd_qu¨™töe_gë
(
tsd
Ë=
NULL
)

56 
	`tsd_qu¨™töe_£t
(
tsd
, 
qu¨™töe
);

58 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
, 
NULL
, 
åue
,Årue);

59 
	}
}

61 
qu¨™töe_t
 *

62 
	$qu¨™töe_grow
(
tsd_t
 *
tsd
, 
qu¨™töe_t
 *
qu¨™töe
)

64 
qu¨™töe_t
 *
ªt
;

66 
ªt
 = 
	`qu¨™töe_öô
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
->
lg_maxobjs
 + 1);

67 i‡(
ªt
 =
NULL
) {

68 
	`qu¨™töe_døö_⁄e
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
);

69  (
qu¨™töe
);

72 
ªt
->
curbyãs
 = 
qu¨™töe
->curbytes;

73 
ªt
->
curobjs
 = 
qu¨™töe
->curobjs;

74 i‡(
qu¨™töe
->
fú°
 + qu¨™töe->
curobjs
 <(
	`ZU
(1) <<

75 
qu¨™töe
->
lg_maxobjs
)) {

77 
	`mem˝y
(
ªt
->
objs
, &
qu¨™töe
->objs[qu¨™töe->
fú°
],

78 
qu¨™töe
->
curobjs
 * (
qu¨™töe_obj_t
));

81 
size_t
 
nc›y_a
 = (
	`ZU
(1Ë<< 
qu¨™töe
->
lg_maxobjs
) -

82 
qu¨™töe
->
fú°
;

83 
size_t
 
nc›y_b
 = 
qu¨™töe
->
curobjs
 - 
nc›y_a
;

85 
	`mem˝y
(
ªt
->
objs
, &
qu¨™töe
->objs[qu¨™töe->
fú°
], 
nc›y_a


86 * (
qu¨™töe_obj_t
));

87 
	`mem˝y
(&
ªt
->
objs
[
nc›y_a
], 
qu¨™töe
->objs, 
nc›y_b
 *

88 (
qu¨™töe_obj_t
));

90 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
, 
NULL
, 
åue
,Årue);

92 
	`tsd_qu¨™töe_£t
(
tsd
, 
ªt
);

93  (
ªt
);

94 
	}
}

97 
	$qu¨™töe_døö_⁄e
(
tsdn_t
 *
tsdn
, 
qu¨™töe_t
 *
qu¨™töe
)

99 
qu¨™töe_obj_t
 *
obj
 = &
qu¨™töe
->
objs
[qu¨™töe->
fú°
];

100 
	`as£π
(
obj
->
usize
 =
	`ißŒoc
(
tsdn
, obj->
±r
, 
c⁄fig_¥of
));

101 
	`idÆlo˘m
(
tsdn
, 
obj
->
±r
, 
NULL
, 
Ál£
, 
åue
);

102 
qu¨™töe
->
curbyãs
 -
obj
->
usize
;

103 
qu¨™töe
->
curobjs
--;

104 
qu¨™töe
->
fú°
 = (qu¨™töe->fú° + 1Ë& ((
	`ZU
(1) <<

105 
qu¨™töe
->
lg_maxobjs
) - 1);

106 
	}
}

109 
	$qu¨™töe_døö
(
tsdn_t
 *
tsdn
, 
qu¨™töe_t
 *
qu¨™töe
, 
size_t
 
uµî_bound
)

112 
qu¨™töe
->
curbyãs
 > 
uµî_bound
 && qu¨™töe->
curobjs
 > 0)

113 
	`qu¨™töe_døö_⁄e
(
tsdn
, 
qu¨™töe
);

114 
	}
}

117 
	$qu¨™töe
(
tsd_t
 *
tsd
, *
±r
)

119 
qu¨™töe_t
 *
qu¨™töe
;

120 
size_t
 
usize
 = 
	`ißŒoc
(
	`tsd_tsdn
(
tsd
), 
±r
, 
c⁄fig_¥of
);

122 
	`ˇs£π
(
c⁄fig_fûl
);

123 
	`as£π
(
›t_qu¨™töe
);

125 i‡((
qu¨™töe
 = 
	`tsd_qu¨™töe_gë
(
tsd
)Ë=
NULL
) {

126 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
±r
, 
NULL
, 
Ál£
, 
åue
);

133 i‡(
qu¨™töe
->
curbyãs
 + 
usize
 > 
›t_qu¨™töe
) {

134 
size_t
 
uµî_bound
 = (
›t_qu¨™töe
 >
usize
) ? opt_quarantine

135 - 
usize
 : 0;

136 
	`qu¨™töe_døö
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
, 
uµî_bound
);

139 i‡(
qu¨™töe
->
curobjs
 =(
	`ZU
(1Ë<< qu¨™töe->
lg_maxobjs
))

140 
qu¨™töe
 = 
	`qu¨™töe_grow
(
tsd
, quarantine);

142 
	`as£π
(
qu¨™töe
->
curobjs
 < (
	`ZU
(1Ë<< qu¨™töe->
lg_maxobjs
));

144 i‡(
qu¨™töe
->
curbyãs
 + 
usize
 <
›t_qu¨™töe
) {

145 
size_t
 
off£t
 = (
qu¨™töe
->
fú°
 + qu¨™töe->
curobjs
) &

146 ((
	`ZU
(1Ë<< 
qu¨™töe
->
lg_maxobjs
) - 1);

147 
qu¨™töe_obj_t
 *
obj
 = &
qu¨™töe
->
objs
[
off£t
];

148 
obj
->
±r
 =Ötr;

149 
obj
->
usize
 = usize;

150 
qu¨™töe
->
curbyãs
 +
usize
;

151 
qu¨™töe
->
curobjs
++;

152 i‡(
c⁄fig_fûl
 && 
	`u∆ikñy
(
›t_junk_‰ì
)) {

157 i‡((!
c⁄fig_vÆgröd
 || 
	`likñy
(!
ö_vÆgröd
))

158 && 
usize
 <
SMALL_MAXCLASS
)

159 
	`¨ía_qu¨™töe_junk_smÆl
(
±r
, 
usize
);

161 
	`mem£t
(
±r
, 
JEMALLOC_FREE_JUNK
, 
usize
);

164 
	`as£π
(
qu¨™töe
->
curbyãs
 == 0);

165 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
±r
, 
NULL
, 
Ál£
, 
åue
);

167 
	}
}

170 
	$qu¨™töe_˛ónup
(
tsd_t
 *
tsd
)

172 
qu¨™töe_t
 *
qu¨™töe
;

174 i‡(!
c⁄fig_fûl
)

177 
qu¨™töe
 = 
	`tsd_qu¨™töe_gë
(
tsd
);

178 i‡(
qu¨™töe
 !
NULL
) {

179 
	`qu¨™töe_døö
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
, 0);

180 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
qu¨™töe
, 
NULL
, 
åue
,Årue);

181 
	`tsd_qu¨™töe_£t
(
tsd
, 
NULL
);

183 
	}
}

	@dep/jemalloc-4.2.0/src/rtree.c

1 
	#JEMALLOC_RTREE_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

5 
	$hmö
(
ha
, 
hb
)

8  (
ha
 < 
hb
 ? ha : hb);

9 
	}
}

12 
boﬁ


13 
	$πªe_√w
(
πªe_t
 *
πªe
, 
bôs
, 
πªe_node_Æloc_t
 *
Æloc
,

14 
πªe_node_dÆloc_t
 *
dÆloc
)

16 
bôs_ö_Àaf
, 
height
, 
i
;

18 
	`as£π
(
RTREE_HEIGHT_MAX
 =((
	`ZU
(1Ë<< (
LG_SIZEOF_PTR
+3)) /

19 
RTREE_BITS_PER_LEVEL
));

20 
	`as£π
(
bôs
 > 0 && bô†<((
uöçå_t
) << 3));

22 
bôs_ö_Àaf
 = (
bôs
 % 
RTREE_BITS_PER_LEVEL
) == 0 ? RTREE_BITS_PER_LEVEL

23 : (
bôs
 % 
RTREE_BITS_PER_LEVEL
);

24 i‡(
bôs
 > 
bôs_ö_Àaf
) {

25 
height
 = 1 + (
bôs
 - 
bôs_ö_Àaf
Ë/ 
RTREE_BITS_PER_LEVEL
;

26 i‡((
height
-1Ë* 
RTREE_BITS_PER_LEVEL
 + 
bôs_ö_Àaf
 !
bôs
)

27 
height
++;

29 
height
 = 1;

30 
	`as£π
((
height
-1Ë* 
RTREE_BITS_PER_LEVEL
 + 
bôs_ö_Àaf
 =
bôs
);

32 
πªe
->
Æloc
 =álloc;

33 
πªe
->
dÆloc
 = dalloc;

34 
πªe
->
height
 = height;

37 
πªe
->
Àvñs
[0].
subåì
 = 
NULL
;

38 
πªe
->
Àvñs
[0].
bôs
 = (
height
 > 1Ë? 
RTREE_BITS_PER_LEVEL
 :

39 
bôs_ö_Àaf
;

40 
πªe
->
Àvñs
[0].
cumbôs
 =Ñåì->Àvñs[0].
bôs
;

42 
i
 = 1; i < 
height
-1; i++) {

43 
πªe
->
Àvñs
[
i
].
subåì
 = 
NULL
;

44 
πªe
->
Àvñs
[
i
].
bôs
 = 
RTREE_BITS_PER_LEVEL
;

45 
πªe
->
Àvñs
[
i
].
cumbôs
 =Ñtree->levels[i-1].cumbits +

46 
RTREE_BITS_PER_LEVEL
;

49 i‡(
height
 > 1) {

50 
πªe
->
Àvñs
[
height
-1].
subåì
 = 
NULL
;

51 
πªe
->
Àvñs
[
height
-1].
bôs
 = 
bôs_ö_Àaf
;

52 
πªe
->
Àvñs
[
height
-1].
cumbôs
 = 
bôs
;

56 
i
 = 0; i < 
RTREE_HEIGHT_MAX
; i++) {

57 
πªe
->
°¨t_Àvñ
[
i
] = 
	`hmö
(
RTREE_HEIGHT_MAX
 - 1 - i, 
height
 -

61  (
Ál£
);

62 
	}
}

65 
	$πªe_dñëe_subåì
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
node
, 
Àvñ
)

68 i‡(
Àvñ
 + 1 < 
πªe
->
height
) {

69 
size_t
 
nchûdªn
, 
i
;

71 
nchûdªn
 = 
	`ZU
(1Ë<< 
πªe
->
Àvñs
[
Àvñ
].
bôs
;

72 
i
 = 0; i < 
nchûdªn
; i++) {

73 
πªe_node_ñm_t
 *
chûd
 = 
node
[
i
].child;

74 i‡(
chûd
 !
NULL
)

75 
	`πªe_dñëe_subåì
(
πªe
, 
chûd
, 
Àvñ
 + 1);

78 
πªe
->
	`dÆloc
(
node
);

79 
	}
}

82 
	$πªe_dñëe
(
πªe_t
 *
πªe
)

84 
i
;

86 
i
 = 0; i < 
πªe
->
height
; i++) {

87 
πªe_node_ñm_t
 *
subåì
 = 
πªe
->
Àvñs
[
i
].subtree;

88 i‡(
subåì
 !
NULL
)

89 
	`πªe_dñëe_subåì
(
πªe
, 
subåì
, 
i
);

91 
	}
}

93 
πªe_node_ñm_t
 *

94 
	$πªe_node_öô
(
πªe_t
 *
πªe
, 
Àvñ
, 
πªe_node_ñm_t
 **
ñmp
)

96 
πªe_node_ñm_t
 *
node
;

98 i‡(
	`©omic_ˇs_p
((**)
ñmp
, 
NULL
, 
RTREE_NODE_INITIALIZING
)) {

104 
CPU_SPINWAIT
;

105 
node
 = 
	`©omic_ªad_p
((**)
ñmp
);

106 } 
node
 =
RTREE_NODE_INITIALIZING
);

108 
node
 = 
πªe
->
	`Æloc
(
	`ZU
(1Ë<<Ñåì->
Àvñs
[
Àvñ
].
bôs
);

109 i‡(
node
 =
NULL
)

110  (
NULL
);

111 
	`©omic_wrôe_p
((**)
ñmp
, 
node
);

114  (
node
);

115 
	}
}

117 
πªe_node_ñm_t
 *

118 
	$πªe_subåì_ªad_h¨d
(
πªe_t
 *
πªe
, 
Àvñ
)

121  (
	`πªe_node_öô
(
πªe
, 
Àvñ
, &πªe->
Àvñs
[Àvñ].
subåì
));

122 
	}
}

124 
πªe_node_ñm_t
 *

125 
	$πªe_chûd_ªad_h¨d
(
πªe_t
 *
πªe
, 
πªe_node_ñm_t
 *
ñm
, 
Àvñ
)

128  (
	`πªe_node_öô
(
πªe
, 
Àvñ
, &
ñm
->
chûd
));

129 
	}
}

	@dep/jemalloc-4.2.0/src/stats.c

1 
	#JEMALLOC_STATS_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

4 
	#CTL_GET
(
n
, 
v
, 
t
) do { \

5 
size_t
 
sz
 = (
t
); \

6 
	`xmÆl˘l
(
n
, 
v
, &
sz
, 
NULL
, 0); \

7 } 0)

	)

9 
	#CTL_M2_GET
(
n
, 
i
, 
v
, 
t
) do { \

10 
size_t
 
mib
[6]; \

11 
size_t
 
mibÀn
 = (
mib
) / (size_t); \

12 
size_t
 
sz
 = (
t
); \

13 
	`xmÆl˘ amëomib
(
n
, 
mib
, &
mibÀn
); \

14 
mib
[2] = (
i
); \

15 
	`xmÆl˘lbymib
(
mib
, 
mibÀn
, 
v
, &
sz
, 
NULL
, 0); \

16 } 0)

	)

18 
	#CTL_M2_M4_GET
(
n
, 
i
, 
j
, 
v
, 
t
) do { \

19 
size_t
 
mib
[6]; \

20 
size_t
 
mibÀn
 = (
mib
) / (size_t); \

21 
size_t
 
sz
 = (
t
); \

22 
	`xmÆl˘ amëomib
(
n
, 
mib
, &
mibÀn
); \

23 
mib
[2] = (
i
); \

24 
mib
[4] = (
j
); \

25 
	`xmÆl˘lbymib
(
mib
, 
mibÀn
, 
v
, &
sz
, 
NULL
, 0); \

26 } 0)

	)

31 
boﬁ
 
	g›t_°©s_¥öt
 = 
Ál£
;

33 
size_t
 
	g°©s_ˇ˘ive
 = 0;

38 
°©s_¨ía_bös_¥öt
((*
wrôe_cb
)(*, const *),

39 *
cb›aque
, 
i
);

40 
	`°©s_¨ía_Ãuns_¥öt
((*
wrôe_cb
)(*, const *),

41 *
cb›aque
, 
i
);

42 
	`°©s_¨ía_hchunks_¥öt
(

43 (*
wrôe_cb
)(*, c⁄° *), *
cb›aque
, 
i
);

44 
	`°©s_¨ía_¥öt
((*
wrôe_cb
)(*, const *),

45 *
cb›aque
, 
i
, 
boﬁ
 
bös
, boﬁ 
œrge
, boﬁ 
huge
);

50 
	$°©s_¨ía_bös_¥öt
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

51 
i
)

53 
size_t
 
∑ge
;

54 
boﬁ
 
c⁄fig_tˇche
, 
ö_g≠
;

55 
nbös
, 
j
;

57 
	`CTL_GET
("¨ías.∑ge", &
∑ge
, 
size_t
);

59 
	`CTL_GET
("c⁄fig.tˇche", &
c⁄fig_tˇche
, 
boﬁ
);

60 i‡(
c⁄fig_tˇche
) {

61 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

67 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

72 
	`CTL_GET
("¨ías.nbös", &
nbös
, );

73 
j
 = 0, 
ö_g≠
 = 
Ál£
; j < 
nbös
; j++) {

74 
uöt64_t
 
ƒuns
;

76 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.ƒuns", 
i
, 
j
, &
ƒuns
,

77 
uöt64_t
);

78 i‡(
ƒuns
 == 0)

79 
ö_g≠
 = 
åue
;

81 
size_t
 
ªg_size
, 
run_size
, 
cuºegs
, 
avaûªgs
, 
mûli
;

82 
size_t
 
cuºuns
;

83 
uöt32_t
 
ƒegs
;

84 
uöt64_t
 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
, 
nfûls
, 
nÊushes
;

85 
uöt64_t
 
ªruns
;

86 
utû
[6];

88 i‡(
ö_g≠
) {

89 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

91 
ö_g≠
 = 
Ál£
;

93 
	`CTL_M2_GET
("¨ías.bö.0.size", 
j
, &
ªg_size
, 
size_t
);

94 
	`CTL_M2_GET
("¨ías.bö.0.ƒegs", 
j
, &
ƒegs
, 
uöt32_t
);

95 
	`CTL_M2_GET
("¨ías.bö.0.run_size", 
j
, &
run_size
,

96 
size_t
);

97 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.nmÆloc", 
i
, 
j
,

98 &
nmÆloc
, 
uöt64_t
);

99 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.ndÆloc", 
i
, 
j
,

100 &
ndÆloc
, 
uöt64_t
);

101 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.cuºegs", 
i
, 
j
,

102 &
cuºegs
, 
size_t
);

103 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.ƒeque°s", 
i
, 
j
,

104 &
ƒeque°s
, 
uöt64_t
);

105 i‡(
c⁄fig_tˇche
) {

106 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.nfûls", 
i
,

107 
j
, &
nfûls
, 
uöt64_t
);

108 
	`CTL_M2_M4_GET
("stats.arenas.0.bins.0.nflushes",

109 
i
, 
j
, &
nÊushes
, 
uöt64_t
);

111 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.ƒîuns", 
i
, 
j
,

112 &
ªruns
, 
uöt64_t
);

113 
	`CTL_M2_M4_GET
("°©s.¨ías.0.bös.0.cuºuns", 
i
, 
j
,

114 &
cuºuns
, 
size_t
);

116 
avaûªgs
 = 
ƒegs
 * 
cuºuns
;

117 
mûli
 = (
avaûªgs
 !0Ë? (1000 * 
cuºegs
) /ávailregs

119 
	`as£π
(
mûli
 <= 1000);

120 i‡(
mûli
 < 10) {

121 
	`mÆloc_¢¥ötf
(
utû
, (util),

122 "0.00%zu", 
mûli
);

123 } i‡(
mûli
 < 100) {

124 
	`mÆloc_¢¥ötf
(
utû
, (util), "0.0%zu",

125 
mûli
);

126 } i‡(
mûli
 < 1000) {

127 
	`mÆloc_¢¥ötf
(
utû
, (util), "0.%zu",

128 
mûli
);

130 
	`mÆloc_¢¥ötf
(
utû
, (util), "1");

132 i‡(
c⁄fig_tˇche
) {

133 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

134 "%20zu %3u %12zu %12"
FMTu64


135 " %12"
FMTu64
" %12"FMTu64" %12zu"

136 " %12zu %4u %3zu %-5†%12"
FMTu64


137 " %12"
FMTu64
" %12"FMTu64" %12"FMTu64"\n",

138 
ªg_size
, 
j
, 
cuºegs
 *Ñeg_size, 
nmÆloc
,

139 
ndÆloc
, 
ƒeque°s
, 
cuºegs
, 
cuºuns
, 
ƒegs
,

140 
run_size
 / 
∑ge
, 
utû
, 
nfûls
, 
nÊushes
,

141 
ƒuns
, 
ªruns
);

143 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

144 "%20zu %3u %12zu %12"
FMTu64


145 " %12"
FMTu64
" %12"FMTu64" %12zu"

146 " %12zu %4u %3zu %-5†%12"
FMTu64


147 " %12"
FMTu64
"\n",

148 
ªg_size
, 
j
, 
cuºegs
 *Ñeg_size, 
nmÆloc
,

149 
ndÆloc
, 
ƒeque°s
, 
cuºegs
, 
cuºuns
, 
ƒegs
,

150 
run_size
 / 
∑ge
, 
utû
, 
ƒuns
, 
ªruns
);

154 i‡(
ö_g≠
) {

155 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

158 
	}
}

161 
	$°©s_¨ía_Ãuns_¥öt
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

162 
i
)

164 
nbös
, 
∆runs
, 
j
;

165 
boﬁ
 
ö_g≠
;

167 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

170 
	`CTL_GET
("¨ías.nbös", &
nbös
, );

171 
	`CTL_GET
("¨ías.∆runs", &
∆runs
, );

172 
j
 = 0, 
ö_g≠
 = 
Ál£
; j < 
∆runs
; j++) {

173 
uöt64_t
 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
;

174 
size_t
 
run_size
, 
cuºuns
;

176 
	`CTL_M2_M4_GET
("°©s.¨ías.0.Ãuns.0.nmÆloc", 
i
, 
j
, &
nmÆloc
,

177 
uöt64_t
);

178 
	`CTL_M2_M4_GET
("°©s.¨ías.0.Ãuns.0.ndÆloc", 
i
, 
j
, &
ndÆloc
,

179 
uöt64_t
);

180 
	`CTL_M2_M4_GET
("°©s.¨ías.0.Ãuns.0.ƒeque°s", 
i
, 
j
,

181 &
ƒeque°s
, 
uöt64_t
);

182 i‡(
ƒeque°s
 == 0)

183 
ö_g≠
 = 
åue
;

185 
	`CTL_M2_GET
("¨ías.Ãun.0.size", 
j
, &
run_size
, 
size_t
);

186 
	`CTL_M2_M4_GET
("°©s.¨ías.0.Ãuns.0.cuºuns", 
i
, 
j
,

187 &
cuºuns
, 
size_t
);

188 i‡(
ö_g≠
) {

189 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

191 
ö_g≠
 = 
Ál£
;

193 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

194 "%20zu %3u %12zu %12"
FMTu64
" %12"FMTu64

195 " %12"
FMTu64
" %12zu\n",

196 
run_size
, 
nbös
 + 
j
, 
cuºuns
 *Ñun_size, 
nmÆloc
,

197 
ndÆloc
, 
ƒeque°s
, 
cuºuns
);

200 i‡(
ö_g≠
) {

201 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

204 
	}
}

207 
	$°©s_¨ía_hchunks_¥öt
((*
wrôe_cb
)(*, const *),

208 *
cb›aque
, 
i
)

210 
nbös
, 
∆runs
, 
nhchunks
, 
j
;

211 
boﬁ
 
ö_g≠
;

213 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

216 
	`CTL_GET
("¨ías.nbös", &
nbös
, );

217 
	`CTL_GET
("¨ías.∆runs", &
∆runs
, );

218 
	`CTL_GET
("¨ías.nhchunks", &
nhchunks
, );

219 
j
 = 0, 
ö_g≠
 = 
Ál£
; j < 
nhchunks
; j++) {

220 
uöt64_t
 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
;

221 
size_t
 
hchunk_size
, 
curhchunks
;

223 
	`CTL_M2_M4_GET
("°©s.¨ías.0.hchunks.0.nmÆloc", 
i
, 
j
,

224 &
nmÆloc
, 
uöt64_t
);

225 
	`CTL_M2_M4_GET
("°©s.¨ías.0.hchunks.0.ndÆloc", 
i
, 
j
,

226 &
ndÆloc
, 
uöt64_t
);

227 
	`CTL_M2_M4_GET
("°©s.¨ías.0.hchunks.0.ƒeque°s", 
i
, 
j
,

228 &
ƒeque°s
, 
uöt64_t
);

229 i‡(
ƒeque°s
 == 0)

230 
ö_g≠
 = 
åue
;

232 
	`CTL_M2_GET
("¨ías.hchunk.0.size", 
j
, &
hchunk_size
,

233 
size_t
);

234 
	`CTL_M2_M4_GET
("°©s.¨ías.0.hchunks.0.curhchunks", 
i
,

235 
j
, &
curhchunks
, 
size_t
);

236 i‡(
ö_g≠
) {

237 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

239 
ö_g≠
 = 
Ál£
;

241 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

242 "%20zu %3u %12zu %12"
FMTu64
" %12"FMTu64

243 " %12"
FMTu64
" %12zu\n",

244 
hchunk_size
, 
nbös
 + 
∆runs
 + 
j
,

245 
curhchunks
 * 
hchunk_size
, 
nmÆloc
, 
ndÆloc
,

246 
ƒeque°s
, 
curhchunks
);

249 i‡(
ö_g≠
) {

250 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

253 
	}
}

256 
	$°©s_¨ía_¥öt
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

257 
i
, 
boﬁ
 
bös
, boﬁ 
œrge
, boﬁ 
huge
)

259 
¡hªads
;

260 c⁄° *
dss
;

261 
ssize_t
 
lg_dúty_mu…
, 
deˇy_time
;

262 
size_t
 
∑ge
, 
∑˘ive
, 
pdúty
, 
m≠≥d
, 
ªèöed
;

263 
size_t
 
mëad©a_m≠≥d
, 
mëad©a_Æloˇãd
;

264 
uöt64_t
 
≈urge
, 
nmadvi£
, 
purged
;

265 
size_t
 
smÆl_Æloˇãd
;

266 
uöt64_t
 
smÆl_nmÆloc
, 
smÆl_ndÆloc
, 
smÆl_ƒeque°s
;

267 
size_t
 
œrge_Æloˇãd
;

268 
uöt64_t
 
œrge_nmÆloc
, 
œrge_ndÆloc
, 
œrge_ƒeque°s
;

269 
size_t
 
huge_Æloˇãd
;

270 
uöt64_t
 
huge_nmÆloc
, 
huge_ndÆloc
, 
huge_ƒeque°s
;

272 
	`CTL_GET
("¨ías.∑ge", &
∑ge
, 
size_t
);

274 
	`CTL_M2_GET
("°©s.¨ías.0.¡hªads", 
i
, &
¡hªads
, );

275 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

276 "assig√dÅhªads: %u\n", 
¡hªads
);

277 
	`CTL_M2_GET
("°©s.¨ías.0.dss", 
i
, &
dss
, const *);

278 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "dssállocationÖrecedence: %s\n",

279 
dss
);

280 
	`CTL_M2_GET
("°©s.¨ías.0.lg_dúty_mu…", 
i
, &
lg_dúty_mu…
, 
ssize_t
);

281 i‡(
›t_purge
 =
purge_mode_øtio
) {

282 i‡(
lg_dúty_mu…
 >= 0) {

283 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

285 (1U << 
lg_dúty_mu…
));

287 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

291 
	`CTL_M2_GET
("°©s.¨ías.0.deˇy_time", 
i
, &
deˇy_time
, 
ssize_t
);

292 i‡(
›t_purge
 =
purge_mode_deˇy
) {

293 i‡(
deˇy_time
 >= 0) {

294 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "decayÅime: %zd\n",

295 
deˇy_time
);

297 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "decayÅime: N/A\n");

299 
	`CTL_M2_GET
("°©s.¨ías.0.∑˘ive", 
i
, &
∑˘ive
, 
size_t
);

300 
	`CTL_M2_GET
("°©s.¨ías.0.pdúty", 
i
, &
pdúty
, 
size_t
);

301 
	`CTL_M2_GET
("°©s.¨ías.0.≈urge", 
i
, &
≈urge
, 
uöt64_t
);

302 
	`CTL_M2_GET
("°©s.¨ías.0.nmadvi£", 
i
, &
nmadvi£
, 
uöt64_t
);

303 
	`CTL_M2_GET
("°©s.¨ías.0.purged", 
i
, &
purged
, 
uöt64_t
);

304 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

305 "purgög: dúty: %zu, swìps: %"
FMTu64
", madvises: %"FMTu64", "

306 "purged: %"
FMTu64
"\n", 
pdúty
, 
≈urge
, 
nmadvi£
, 
purged
);

308 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

311 
	`CTL_M2_GET
("°©s.¨ías.0.smÆl.Æloˇãd", 
i
, &
smÆl_Æloˇãd
,

312 
size_t
);

313 
	`CTL_M2_GET
("°©s.¨ías.0.smÆl.nmÆloc", 
i
, &
smÆl_nmÆloc
, 
uöt64_t
);

314 
	`CTL_M2_GET
("°©s.¨ías.0.smÆl.ndÆloc", 
i
, &
smÆl_ndÆloc
, 
uöt64_t
);

315 
	`CTL_M2_GET
("°©s.¨ías.0.smÆl.ƒeque°s", 
i
, &
smÆl_ƒeque°s
,

316 
uöt64_t
);

317 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

318 "smÆl: %12zu %12"
FMTu64
" %12"FMTu64

319 " %12"
FMTu64
"\n",

320 
smÆl_Æloˇãd
, 
smÆl_nmÆloc
, 
smÆl_ndÆloc
, 
smÆl_ƒeque°s
);

321 
	`CTL_M2_GET
("°©s.¨ías.0.œrge.Æloˇãd", 
i
, &
œrge_Æloˇãd
,

322 
size_t
);

323 
	`CTL_M2_GET
("°©s.¨ías.0.œrge.nmÆloc", 
i
, &
œrge_nmÆloc
, 
uöt64_t
);

324 
	`CTL_M2_GET
("°©s.¨ías.0.œrge.ndÆloc", 
i
, &
œrge_ndÆloc
, 
uöt64_t
);

325 
	`CTL_M2_GET
("°©s.¨ías.0.œrge.ƒeque°s", 
i
, &
œrge_ƒeque°s
,

326 
uöt64_t
);

327 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

328 "œrge: %12zu %12"
FMTu64
" %12"FMTu64

329 " %12"
FMTu64
"\n",

330 
œrge_Æloˇãd
, 
œrge_nmÆloc
, 
œrge_ndÆloc
, 
œrge_ƒeque°s
);

331 
	`CTL_M2_GET
("°©s.¨ías.0.huge.Æloˇãd", 
i
, &
huge_Æloˇãd
, 
size_t
);

332 
	`CTL_M2_GET
("°©s.¨ías.0.huge.nmÆloc", 
i
, &
huge_nmÆloc
, 
uöt64_t
);

333 
	`CTL_M2_GET
("°©s.¨ías.0.huge.ndÆloc", 
i
, &
huge_ndÆloc
, 
uöt64_t
);

334 
	`CTL_M2_GET
("°©s.¨ías.0.huge.ƒeque°s", 
i
, &
huge_ƒeque°s
,

335 
uöt64_t
);

336 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

337 "huge: %12zu %12"
FMTu64
" %12"FMTu64

338 " %12"
FMTu64
"\n",

339 
huge_Æloˇãd
, 
huge_nmÆloc
, 
huge_ndÆloc
, 
huge_ƒeque°s
);

340 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

341 "tŸÆ: %12zu %12"
FMTu64
" %12"FMTu64

342 " %12"
FMTu64
"\n",

343 
smÆl_Æloˇãd
 + 
œrge_Æloˇãd
 + 
huge_Æloˇãd
,

344 
smÆl_nmÆloc
 + 
œrge_nmÆloc
 + 
huge_nmÆloc
,

345 
smÆl_ndÆloc
 + 
œrge_ndÆloc
 + 
huge_ndÆloc
,

346 
smÆl_ƒeque°s
 + 
œrge_ƒeque°s
 + 
huge_ƒeque°s
);

347 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

348 "a˘ive: %12zu\n", 
∑˘ive
 * 
∑ge
);

349 
	`CTL_M2_GET
("°©s.¨ías.0.m≠≥d", 
i
, &
m≠≥d
, 
size_t
);

350 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

351 "m≠≥d: %12zu\n", 
m≠≥d
);

352 
	`CTL_M2_GET
("°©s.¨ías.0.ªèöed", 
i
, &
ªèöed
, 
size_t
);

353 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

354 "ªèöed: %12zu\n", 
ªèöed
);

355 
	`CTL_M2_GET
("°©s.¨ías.0.mëad©a.m≠≥d", 
i
, &
mëad©a_m≠≥d
,

356 
size_t
);

357 
	`CTL_M2_GET
("°©s.¨ías.0.mëad©a.Æloˇãd", 
i
, &
mëad©a_Æloˇãd
,

358 
size_t
);

359 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

361 
mëad©a_m≠≥d
, 
mëad©a_Æloˇãd
);

363 i‡(
bös
)

364 
	`°©s_¨ía_bös_¥öt
(
wrôe_cb
, 
cb›aque
, 
i
);

365 i‡(
œrge
)

366 
	`°©s_¨ía_Ãuns_¥öt
(
wrôe_cb
, 
cb›aque
, 
i
);

367 i‡(
huge
)

368 
	`°©s_¨ía_hchunks_¥öt
(
wrôe_cb
, 
cb›aque
, 
i
);

369 
	}
}

372 
	$°©s_¥öt
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

373 c⁄° *
›ts
)

375 
îr
;

376 
uöt64_t
 
ïoch
;

377 
size_t
 
u64sz
;

378 
boﬁ
 
gíîÆ
 = 
åue
;

379 
boﬁ
 
mîged
 = 
åue
;

380 
boﬁ
 
unmîged
 = 
åue
;

381 
boﬁ
 
bös
 = 
åue
;

382 
boﬁ
 
œrge
 = 
åue
;

383 
boﬁ
 
huge
 = 
åue
;

392 
ïoch
 = 1;

393 
u64sz
 = (
uöt64_t
);

394 
îr
 = 
	`je_mÆl˘l
("ïoch", &
ïoch
, &
u64sz
, &ïoch, (
uöt64_t
));

395 i‡(
îr
 != 0) {

396 i‡(
îr
 =
EAGAIN
) {

397 
	`mÆloc_wrôe
("<jemalloc>: Memoryállocation failure in "

401 
	`mÆloc_wrôe
("<jemalloc>: Failure in mallctl(\"epoch\", "

403 
	`ab‹t
();

406 i‡(
›ts
 !
NULL
) {

407 
i
;

409 
i
 = 0; 
›ts
[i] != '\0'; i++) {

410 
›ts
[
i
]) {

412 
gíîÆ
 = 
Ál£
;

415 
mîged
 = 
Ál£
;

418 
unmîged
 = 
Ál£
;

421 
bös
 = 
Ál£
;

424 
œrge
 = 
Ál£
;

427 
huge
 = 
Ál£
;

434 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

436 i‡(
gíîÆ
) {

437 c⁄° *
˝v
;

438 
boﬁ
 
bv
;

439 
uv
;

440 
ssize_t
 
ssv
;

441 
size_t
 
sv
, 
bsz
, 
usz
, 
ssz
, 
sssz
, 
˝sz
;

443 
bsz
 = (
boﬁ
);

444 
usz
 = ();

445 
ssz
 = (
size_t
);

446 
sssz
 = (
ssize_t
);

447 
˝sz
 = (const *);

449 
	`CTL_GET
("vîsi⁄", &
˝v
, const *);

450 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "Vîsi⁄: %s\n", 
˝v
);

451 
	`CTL_GET
("c⁄fig.debug", &
bv
, 
boﬁ
);

452 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "Assertions %s\n",

453 
bv
 ? "enabled" : "disabled");

454 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

455 "c⁄fig.mÆloc_c⁄f: \"%s\"\n", 
c⁄fig_mÆloc_c⁄f
);

457 
	#OPT_WRITE_BOOL
(
n
) \

458 i‡(
	`je_mÆl˘l
("›t."#n, &
bv
, &
bsz
, 
NULL
, 0) == 0) { \

459 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

460 " o±."#n": %s\n", 
bv
 ? "true" : "false"); \

461 }

	)

462 
	#OPT_WRITE_BOOL_MUTABLE
(
n
, 
m
) { \

463 
boﬁ
 
bv2
; \

464 i‡(
	`je_mÆl˘l
("›t."#n, &
bv
, &
bsz
, 
NULL
, 0) == 0 && \

465 
	`je_mÆl˘l
(#m, &
bv2
, &
bsz
, 
NULL
, 0) == 0) { \

466 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

467 " o±."#n": %†("#m": %s)\n", 
bv
 ? "true" \

468 : "Ál£", 
bv2
 ? "true" : "false"); \

470 }

	)

471 
	#OPT_WRITE_UNSIGNED
(
n
) \

472 i‡(
	`je_mÆl˘l
("›t."#n, &
uv
, &
usz
, 
NULL
, 0) == 0) { \

473 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

474 " o±."#n": %u\n", 
uv
); \

475 }

	)

476 
	#OPT_WRITE_SIZE_T
(
n
) \

477 i‡(
	`je_mÆl˘l
("›t."#n, &
sv
, &
ssz
, 
NULL
, 0) == 0) { \

478 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

479 " o±."#n": %zu\n", 
sv
); \

480 }

	)

481 
	#OPT_WRITE_SSIZE_T
(
n
) \

482 i‡(
	`je_mÆl˘l
("›t."#n, &
ssv
, &
sssz
, 
NULL
, 0) == 0) { \

483 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

484 " o±."#n": %zd\n", 
ssv
); \

485 }

	)

486 
	#OPT_WRITE_SSIZE_T_MUTABLE
(
n
, 
m
) { \

487 
ssize_t
 
ssv2
; \

488 i‡(
	`je_mÆl˘l
("›t."#n, &
ssv
, &
sssz
, 
NULL
, 0) == 0 && \

489 
	`je_mÆl˘l
(#m, &
ssv2
, &
sssz
, 
NULL
, 0) == 0) { \

490 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

492 
ssv
, 
ssv2
); \

494 }

	)

495 
	#OPT_WRITE_CHAR_P
(
n
) \

496 i‡(
	`je_mÆl˘l
("›t."#n, &
˝v
, &
˝sz
, 
NULL
, 0) == 0) { \

497 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, \

498 " o±."#n": \"%s\"\n", 
˝v
); \

499 }

	)

501 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

503 
	`OPT_WRITE_BOOL
(
ab‹t
)

504 
	`OPT_WRITE_SIZE_T
(
lg_chunk
)

505 
	`OPT_WRITE_CHAR_P
(
dss
)

506 
	`OPT_WRITE_UNSIGNED
(
«ª«s
)

507 
	`OPT_WRITE_CHAR_P
(
purge
)

508 i‡(
›t_purge
 =
purge_mode_øtio
) {

509 
	`OPT_WRITE_SSIZE_T_MUTABLE
(
lg_dúty_mu…
,

510 
¨ías
.
lg_dúty_mu…
)

512 i‡(
›t_purge
 =
purge_mode_deˇy
)

513 
	`OPT_WRITE_SSIZE_T_MUTABLE
(
deˇy_time
, 
¨ías
.decay_time)

514 
	`OPT_WRITE_BOOL
(
°©s_¥öt
)

515 
	`OPT_WRITE_CHAR_P
(
junk
)

516 
	`OPT_WRITE_SIZE_T
(
qu¨™töe
)

517 
	`OPT_WRITE_BOOL
(
ªdz⁄e
)

518 
	`OPT_WRITE_BOOL
(
zîo
)

519 
	`OPT_WRITE_BOOL
(
uåa˚
)

520 
	`OPT_WRITE_BOOL
(
vÆgröd
)

521 
	`OPT_WRITE_BOOL
(
xmÆloc
)

522 
	`OPT_WRITE_BOOL
(
tˇche
)

523 
	`OPT_WRITE_SSIZE_T
(
lg_tˇche_max
)

524 
	`OPT_WRITE_BOOL
(
¥of
)

525 
	`OPT_WRITE_CHAR_P
(
¥of_¥efix
)

526 
	`OPT_WRITE_BOOL_MUTABLE
(
¥of_a˘ive
, 
¥of
.
a˘ive
)

527 
	`OPT_WRITE_BOOL_MUTABLE
(
¥of_thªad_a˘ive_öô
,

528 
¥of
.
thªad_a˘ive_öô
)

529 
	`OPT_WRITE_SSIZE_T
(
lg_¥of_ßm∂e
)

530 
	`OPT_WRITE_BOOL
(
¥of_accum
)

531 
	`OPT_WRITE_SSIZE_T
(
lg_¥of_öãrvÆ
)

532 
	`OPT_WRITE_BOOL
(
¥of_gdump
)

533 
	`OPT_WRITE_BOOL
(
¥of_föÆ
)

534 
	`OPT_WRITE_BOOL
(
¥of_Àak
)

536 #unde‡
OPT_WRITE_BOOL


537 #unde‡
OPT_WRITE_BOOL_MUTABLE


538 #unde‡
OPT_WRITE_SIZE_T


539 #unde‡
OPT_WRITE_SSIZE_T


540 #unde‡
OPT_WRITE_CHAR_P


542 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "CPUs: %u\n", 
n˝us
);

544 
	`CTL_GET
("¨ías.«ª«s", &
uv
, );

545 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "Aª«s: %u\n", 
uv
);

547 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "Pointer size: %zu\n",

550 
	`CTL_GET
("¨ías.qu™tum", &
sv
, 
size_t
);

551 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "Quantum size: %zu\n",

552 
sv
);

554 
	`CTL_GET
("¨ías.∑ge", &
sv
, 
size_t
);

555 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "Pagêsize: %zu\n", 
sv
);

557 
	`CTL_GET
("¨ías.lg_dúty_mu…", &
ssv
, 
ssize_t
);

558 i‡(
›t_purge
 =
purge_mode_øtio
) {

559 i‡(
ssv
 >= 0) {

560 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

562 "%u:1\n", (1U << 
ssv
));

564 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

569 
	`CTL_GET
("¨ías.deˇy_time", &
ssv
, 
ssize_t
);

570 i‡(
›t_purge
 =
purge_mode_deˇy
) {

571 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

573 
ssv
, (ssv < 0) ? " (no decay)" : "");

575 i‡(
	`je_mÆl˘l
("¨ías.tˇche_max", &
sv
, &
ssz
, 
NULL
, 0) == 0) {

576 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

577 "MaximumÅhªad-ˇched sizê˛ass: %zu\n", 
sv
);

579 i‡(
	`je_mÆl˘l
("›t.¥of", &
bv
, &
bsz
, 
NULL
, 0) == 0 && bv) {

580 
	`CTL_GET
("¥of.lg_ßm∂e", &
sv
, 
size_t
);

581 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

582 "Avîagê¥ofûêßm∂êöãrvÆ: %"
FMTu64


583 " (2^%zu)\n", (((
uöt64_t
)1UË<< 
sv
), sv);

585 
	`CTL_GET
("›t.lg_¥of_öãrvÆ", &
ssv
, 
ssize_t
);

586 i‡(
ssv
 >= 0) {

587 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

588 "Avîagê¥ofûêdum∞öãrvÆ: %"
FMTu64


590 (((
uöt64_t
)1UË<< 
ssv
), ssv);

592 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

596 
	`CTL_GET
("›t.lg_chunk", &
sv
, 
size_t
);

597 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

598 "Chunk size: %zu (2^%zu)\n", (
	`ZU
(1Ë<< 
sv
), sv);

601 i‡(
c⁄fig_°©s
) {

602 
size_t
 *
ˇ˘ive
;

603 
size_t
 
Æloˇãd
, 
a˘ive
, 
mëad©a
, 
ªsidít
, 
m≠≥d
, 
ªèöed
;

605 
	`CTL_GET
("°©s.ˇ˘ive", &
ˇ˘ive
, 
size_t
 *);

606 
	`CTL_GET
("°©s.Æloˇãd", &
Æloˇãd
, 
size_t
);

607 
	`CTL_GET
("°©s.a˘ive", &
a˘ive
, 
size_t
);

608 
	`CTL_GET
("°©s.mëad©a", &
mëad©a
, 
size_t
);

609 
	`CTL_GET
("°©s.ªsidít", &
ªsidít
, 
size_t
);

610 
	`CTL_GET
("°©s.m≠≥d", &
m≠≥d
, 
size_t
);

611 
	`CTL_GET
("°©s.ªèöed", &
ªèöed
, 
size_t
);

612 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

615 
Æloˇãd
, 
a˘ive
, 
mëad©a
, 
ªsidít
, 
m≠≥d
, 
ªèöed
);

616 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

618 
	`©omic_ªad_z
(
ˇ˘ive
));

620 i‡(
mîged
) {

621 
«ª«s
;

623 
	`CTL_GET
("¨ías.«ª«s", &
«ª«s
, );

625 
	`VARIABLE_ARRAY
(
boﬁ
, 
öôülized
, 
«ª«s
);

626 
size_t
 
isz
;

627 
i
, 
nöôülized
;

629 
isz
 = (
boﬁ
Ë* 
«ª«s
;

630 
	`xmÆl˘l
("¨ías.öôülized", 
öôülized
,

631 &
isz
, 
NULL
, 0);

632 
i
 = 
nöôülized
 = 0; i < 
«ª«s
; i++) {

633 i‡(
öôülized
[
i
])

634 
nöôülized
++;

637 i‡(
nöôülized
 > 1 || !
unmîged
) {

639 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
,

641 
	`°©s_¨ía_¥öt
(
wrôe_cb
, 
cb›aque
,

642 
«ª«s
, 
bös
, 
œrge
, 
huge
);

647 i‡(
unmîged
) {

648 
«ª«s
;

652 
	`CTL_GET
("¨ías.«ª«s", &
«ª«s
, );

654 
	`VARIABLE_ARRAY
(
boﬁ
, 
öôülized
, 
«ª«s
);

655 
size_t
 
isz
;

656 
i
;

658 
isz
 = (
boﬁ
Ë* 
«ª«s
;

659 
	`xmÆl˘l
("¨ías.öôülized", 
öôülized
,

660 &
isz
, 
NULL
, 0);

662 
i
 = 0; i < 
«ª«s
; i++) {

663 i‡(
öôülized
[
i
]) {

664 
	`mÆloc_˝rötf
(
wrôe_cb
,

665 
cb›aque
,

666 "\«ª«s[%u]:\n", 
i
);

667 
	`°©s_¨ía_¥öt
(
wrôe_cb
,

668 
cb›aque
, 
i
, 
bös
, 
œrge
,

669 
huge
);

675 
	`mÆloc_˝rötf
(
wrôe_cb
, 
cb›aque
, "--- End jemalloc statistics ---\n");

676 
	}
}

	@dep/jemalloc-4.2.0/src/tcache.c

1 
	#JEMALLOC_TCACHE_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

7 
boﬁ
 
	g›t_tˇche
 = 
åue
;

8 
ssize_t
 
	g›t_lg_tˇche_max
 = 
LG_TCACHE_MAXCLASS_DEFAULT
;

10 
tˇche_bö_öfo_t
 *
	gtˇche_bö_öfo
;

11 
	g°ack_√lms
;

13 
	gnhbös
;

14 
size_t
 
	gtˇche_max˛ass
;

16 
tˇches_t
 *
	gtˇches
;

19 
	gtˇches_∑°
;

22 
tˇches_t
 *
	gtˇches_avaû
;

26 
size_t


27 
	$tˇche_ßŒoc
(
tsdn_t
 *
tsdn
, c⁄° *
±r
)

30  (
	`¨ía_ßŒoc
(
tsdn
, 
±r
, 
Ál£
));

31 
	}
}

34 
	$tˇche_evít_h¨d
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
)

36 
szöd_t
 
bööd
 = 
tˇche
->
√xt_gc_bö
;

37 
tˇche_bö_t
 *
tbö
 = &
tˇche
->
tbös
[
bööd
];

38 
tˇche_bö_öfo_t
 *
tbö_öfo
 = &
tˇche_bö_öfo
[
bööd
];

40 i‡(
tbö
->
low_w©î
 > 0) {

44 i‡(
bööd
 < 
NBINS
) {

45 
	`tˇche_bö_Êush_smÆl
(
tsd
, 
tˇche
, 
tbö
, 
bööd
,

46 
tbö
->
nˇched
 -Åbö->
low_w©î
 + (tbin->low_water

49 
	`tˇche_bö_Êush_œrge
(
tsd
, 
tbö
, 
bööd
,Åbö->
nˇched


50 - 
tbö
->
low_w©î
 + (tbö->low_w©î >> 2), 
tˇche
);

56 i‡((
tbö_öfo
->
nˇched_max
 >> (
tbö
->
lg_fûl_div
+1)) >= 1)

57 
tbö
->
lg_fûl_div
++;

58 } i‡(
tbö
->
low_w©î
 < 0) {

63 i‡(
tbö
->
lg_fûl_div
 > 1)

64 
tbö
->
lg_fûl_div
--;

66 
tbö
->
low_w©î
 =Åbö->
nˇched
;

68 
tˇche
->
√xt_gc_bö
++;

69 i‡(
tˇche
->
√xt_gc_bö
 =
nhbös
)

70 
tˇche
->
√xt_gc_bö
 = 0;

71 
	}
}

74 
	$tˇche_Æloc_smÆl_h¨d
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
, 
tˇche_t
 *
tˇche
,

75 
tˇche_bö_t
 *
tbö
, 
szöd_t
 
bööd
, 
boﬁ
 *
tˇche_suc˚ss
)

77 *
ªt
;

79 
	`¨ía_tˇche_fûl_smÆl
(
tsdn
, 
¨ía
, 
tbö
, 
bööd
, 
c⁄fig_¥of
 ?

80 
tˇche
->
¥of_accumbyãs
 : 0);

81 i‡(
c⁄fig_¥of
)

82 
tˇche
->
¥of_accumbyãs
 = 0;

83 
ªt
 = 
	`tˇche_Æloc_ósy
(
tbö
, 
tˇche_suc˚ss
);

85  (
ªt
);

86 
	}
}

89 
	$tˇche_bö_Êush_smÆl
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
, 
tˇche_bö_t
 *
tbö
,

90 
szöd_t
 
bööd
, 
ªm
)

92 
¨ía_t
 *
¨ía
;

93 *
±r
;

94 
i
, 
nÊush
, 
nde„ºed
;

95 
boﬁ
 
mîged_°©s
 = 
Ál£
;

97 
	`as£π
(
bööd
 < 
NBINS
);

98 
	`as£π
(
ªm
 <
tbö
->
nˇched
);

100 
¨ía
 = 
	`¨ía_choo£
(
tsd
, 
NULL
);

101 
	`as£π
(
¨ía
 !
NULL
);

102 
nÊush
 = 
tbö
->
nˇched
 - 
ªm
;ÇÊush > 0;ÇÊush = 
nde„ºed
) {

104 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(

105 *(
tbö
->
avaû
 - 1));

106 
¨ía_t
 *
bö_¨ía
 = 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
);

107 
¨ía_bö_t
 *
bö
 = &
bö_¨ía
->
bös
[
bööd
];

109 i‡(
c⁄fig_¥of
 && 
bö_¨ía
 =
¨ía
) {

110 i‡(
	`¨ía_¥of_accum
(
	`tsd_tsdn
(
tsd
), 
¨ía
,

111 
tˇche
->
¥of_accumbyãs
))

112 
	`¥of_idump
(
	`tsd_tsdn
(
tsd
));

113 
tˇche
->
¥of_accumbyãs
 = 0;

116 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

117 i‡(
c⁄fig_°©s
 && 
bö_¨ía
 =
¨ía
) {

118 
	`as£π
(!
mîged_°©s
);

119 
mîged_°©s
 = 
åue
;

120 
bö
->
°©s
.
nÊushes
++;

121 
bö
->
°©s
.
ƒeque°s
 +
tbö
->
t°©s
.nrequests;

122 
tbö
->
t°©s
.
ƒeque°s
 = 0;

124 
nde„ºed
 = 0;

125 
i
 = 0; i < 
nÊush
; i++) {

126 
±r
 = *(
tbö
->
avaû
 - 1 - 
i
);

127 
	`as£π
(
±r
 !
NULL
);

128 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

129 i‡(
	`exã¡_node_¨ía_gë
(&
chunk
->
node
Ë=
bö_¨ía
) {

130 
size_t
 
∑geöd
 = ((
uöçå_t
)
±r
 -

131 (
uöçå_t
)
chunk
Ë>> 
LG_PAGE
;

132 
¨ía_chunk_m≠_bôs_t
 *
bô£lm
 =

133 
	`¨ía_bô£lm_gë_muèbÀ
(
chunk
, 
∑geöd
);

134 
	`¨ía_dÆloc_bö_junked_locked
(
	`tsd_tsdn
(
tsd
),

135 
bö_¨ía
, 
chunk
, 
±r
, 
bô£lm
);

143 *(
tbö
->
avaû
 - 1 - 
nde„ºed
Ë
±r
;

144 
nde„ºed
++;

147 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

148 
	`¨ía_deˇy_ticks
(
	`tsd_tsdn
(
tsd
), 
bö_¨ía
, 
nÊush
 - 
nde„ºed
);

150 i‡(
c⁄fig_°©s
 && !
mîged_°©s
) {

155 
¨ía_bö_t
 *
bö
 = &
¨ía
->
bös
[
bööd
];

156 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

157 
bö
->
°©s
.
nÊushes
++;

158 
bö
->
°©s
.
ƒeque°s
 +
tbö
->
t°©s
.nrequests;

159 
tbö
->
t°©s
.
ƒeque°s
 = 0;

160 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

163 
	`memmove
(
tbö
->
avaû
 - 
ªm
,Åbö->avaû -Åbö->
nˇched
,Ñem *

165 
tbö
->
nˇched
 = 
ªm
;

166 i‡(()
tbö
->
nˇched
 <Åbö->
low_w©î
)

167 
tbö
->
low_w©î
 =Åbö->
nˇched
;

168 
	}
}

171 
	$tˇche_bö_Êush_œrge
(
tsd_t
 *
tsd
, 
tˇche_bö_t
 *
tbö
, 
szöd_t
 
bööd
,

172 
ªm
, 
tˇche_t
 *
tˇche
)

174 
¨ía_t
 *
¨ía
;

175 *
±r
;

176 
i
, 
nÊush
, 
nde„ºed
;

177 
boﬁ
 
mîged_°©s
 = 
Ál£
;

179 
	`as£π
(
bööd
 < 
nhbös
);

180 
	`as£π
(
ªm
 <
tbö
->
nˇched
);

182 
¨ía
 = 
	`¨ía_choo£
(
tsd
, 
NULL
);

183 
	`as£π
(
¨ía
 !
NULL
);

184 
nÊush
 = 
tbö
->
nˇched
 - 
ªm
;ÇÊush > 0;ÇÊush = 
nde„ºed
) {

186 
¨ía_chunk_t
 *
chunk
 = (¨ía_chunk_à*)
	`CHUNK_ADDR2BASE
(

187 *(
tbö
->
avaû
 - 1));

188 
¨ía_t
 *
locked_¨ía
 = 
	`exã¡_node_¨ía_gë
(&
chunk
->
node
);

189 
UNUSED
 
boﬁ
 
idump
;

191 i‡(
c⁄fig_¥of
)

192 
idump
 = 
Ál£
;

193 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
locked_¨ía
->
lock
);

194 i‡((
c⁄fig_¥of
 || 
c⁄fig_°©s
Ë&& 
locked_¨ía
 =
¨ía
) {

195 i‡(
c⁄fig_¥of
) {

196 
idump
 = 
	`¨ía_¥of_accum_locked
(
¨ía
,

197 
tˇche
->
¥of_accumbyãs
);

198 
tˇche
->
¥of_accumbyãs
 = 0;

200 i‡(
c⁄fig_°©s
) {

201 
mîged_°©s
 = 
åue
;

202 
¨ía
->
°©s
.
ƒeque°s_œrge
 +=

203 
tbö
->
t°©s
.
ƒeque°s
;

204 
¨ía
->
°©s
.
l°©s
[
bööd
 - 
NBINS
].
ƒeque°s
 +=

205 
tbö
->
t°©s
.
ƒeque°s
;

206 
tbö
->
t°©s
.
ƒeque°s
 = 0;

209 
nde„ºed
 = 0;

210 
i
 = 0; i < 
nÊush
; i++) {

211 
±r
 = *(
tbö
->
avaû
 - 1 - 
i
);

212 
	`as£π
(
±r
 !
NULL
);

213 
chunk
 = (
¨ía_chunk_t
 *)
	`CHUNK_ADDR2BASE
(
±r
);

214 i‡(
	`exã¡_node_¨ía_gë
(&
chunk
->
node
) ==

215 
locked_¨ía
) {

216 
	`¨ía_dÆloc_œrge_junked_locked
(
	`tsd_tsdn
(
tsd
),

217 
locked_¨ía
, 
chunk
, 
±r
);

225 *(
tbö
->
avaû
 - 1 - 
nde„ºed
Ë
±r
;

226 
nde„ºed
++;

229 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
locked_¨ía
->
lock
);

230 i‡(
c⁄fig_¥of
 && 
idump
)

231 
	`¥of_idump
(
	`tsd_tsdn
(
tsd
));

232 
	`¨ía_deˇy_ticks
(
	`tsd_tsdn
(
tsd
), 
locked_¨ía
, 
nÊush
 -

233 
nde„ºed
);

235 i‡(
c⁄fig_°©s
 && !
mîged_°©s
) {

240 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
lock
);

241 
¨ía
->
°©s
.
ƒeque°s_œrge
 +
tbö
->
t°©s
.
ƒeque°s
;

242 
¨ía
->
°©s
.
l°©s
[
bööd
 - 
NBINS
].
ƒeque°s
 +=

243 
tbö
->
t°©s
.
ƒeque°s
;

244 
tbö
->
t°©s
.
ƒeque°s
 = 0;

245 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
lock
);

248 
	`memmove
(
tbö
->
avaû
 - 
ªm
,Åbö->avaû -Åbö->
nˇched
,Ñem *

250 
tbö
->
nˇched
 = 
ªm
;

251 i‡(()
tbö
->
nˇched
 <Åbö->
low_w©î
)

252 
tbö
->
low_w©î
 =Åbö->
nˇched
;

253 
	}
}

256 
	$tˇche_¨ía_assocüã
(
tsdn_t
 *
tsdn
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
)

259 i‡(
c⁄fig_°©s
) {

261 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

262 
	`ql_ñm_√w
(
tˇche
, 
lök
);

263 
	`ql_èû_ö£π
(&
¨ía
->
tˇche_ql
, 
tˇche
, 
lök
);

264 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

266 
	}
}

269 
	$tˇche_¨ía_dissocüã
(
tsdn_t
 *
tsdn
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
)

272 i‡(
c⁄fig_°©s
) {

274 
	`mÆloc_muãx_lock
(
tsdn
, &
¨ía
->
lock
);

275 i‡(
c⁄fig_debug
) {

276 
boﬁ
 
ö_ql
 = 
Ál£
;

277 
tˇche_t
 *
ôî
;

278 
	`ql_f‹óch
(
ôî
, &
¨ía
->
tˇche_ql
, 
lök
) {

279 i‡(
ôî
 =
tˇche
) {

280 
ö_ql
 = 
åue
;

284 
	`as£π
(
ö_ql
);

286 
	`ql_ªmove
(&
¨ía
->
tˇche_ql
, 
tˇche
, 
lök
);

287 
	`tˇche_°©s_mîge
(
tsdn
, 
tˇche
, 
¨ía
);

288 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
¨ía
->
lock
);

290 
	}
}

293 
	$tˇche_¨ía_ªassocüã
(
tsdn_t
 *
tsdn
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
ﬁd¨ía
,

294 
¨ía_t
 *
√w¨ía
)

297 
	`tˇche_¨ía_dissocüã
(
tsdn
, 
tˇche
, 
ﬁd¨ía
);

298 
	`tˇche_¨ía_assocüã
(
tsdn
, 
tˇche
, 
√w¨ía
);

299 
	}
}

301 
tˇche_t
 *

302 
	$tˇche_gë_h¨d
(
tsd_t
 *
tsd
)

304 
¨ía_t
 *
¨ía
;

306 i‡(!
	`tˇche_íabÀd_gë
()) {

307 i‡(
	`tsd_nomöÆ
(
tsd
))

308 
	`tˇche_íabÀd_£t
(
Ál£
);

309  (
NULL
);

311 
¨ía
 = 
	`¨ía_choo£
(
tsd
, 
NULL
);

312 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

313  (
NULL
);

314  (
	`tˇche_¸óã
(
	`tsd_tsdn
(
tsd
), 
¨ía
));

315 
	}
}

317 
tˇche_t
 *

318 
	$tˇche_¸óã
(
tsdn_t
 *
tsdn
, 
¨ía_t
 *
¨ía
)

320 
tˇche_t
 *
tˇche
;

321 
size_t
 
size
, 
°ack_off£t
;

322 
i
;

324 
size
 = 
	`off£tof
(
tˇche_t
, 
tbös
Ë+ ((
tˇche_bö_t
Ë* 
nhbös
);

326 
size
 = 
	`PTR_CEILING
(size);

327 
°ack_off£t
 = 
size
;

328 
size
 +
°ack_√lms
 * (*);

330 
size
 = 
	`ß2u
(size, 
CACHELINE
);

332 
tˇche
 = 
	`ùÆlocztm
(
tsdn
, 
size
, 
CACHELINE
, 
åue
, 
NULL
,Årue,

333 
	`¨ía_gë
(
TSDN_NULL
, 0, 
åue
));

334 i‡(
tˇche
 =
NULL
)

335  (
NULL
);

337 
	`tˇche_¨ía_assocüã
(
tsdn
, 
tˇche
, 
¨ía
);

339 
	`tickî_öô
(&
tˇche
->
gc_tickî
, 
TCACHE_GC_INCR
);

341 
	`as£π
((
TCACHE_NSLOTS_SMALL_MAX
 & 1U) == 0);

342 
i
 = 0; i < 
nhbös
; i++) {

343 
tˇche
->
tbös
[
i
].
lg_fûl_div
 = 1;

344 
°ack_off£t
 +
tˇche_bö_öfo
[
i
].
nˇched_max
 * (*);

350 
tˇche
->
tbös
[
i
].
avaû
 = (**)((
uöçå_t
)tcache +

351 (
uöçå_t
)
°ack_off£t
);

354  (
tˇche
);

355 
	}
}

358 
	$tˇche_de°roy
(
tsd_t
 *
tsd
, 
tˇche_t
 *
tˇche
)

360 
¨ía_t
 *
¨ía
;

361 
i
;

363 
¨ía
 = 
	`¨ía_choo£
(
tsd
, 
NULL
);

364 
	`tˇche_¨ía_dissocüã
(
	`tsd_tsdn
(
tsd
), 
tˇche
, 
¨ía
);

366 
i
 = 0; i < 
NBINS
; i++) {

367 
tˇche_bö_t
 *
tbö
 = &
tˇche
->
tbös
[
i
];

368 
	`tˇche_bö_Êush_smÆl
(
tsd
, 
tˇche
, 
tbö
, 
i
, 0);

370 i‡(
c⁄fig_°©s
 && 
tbö
->
t°©s
.
ƒeque°s
 != 0) {

371 
¨ía_bö_t
 *
bö
 = &
¨ía
->
bös
[
i
];

372 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

373 
bö
->
°©s
.
ƒeque°s
 +
tbö
->
t°©s
.nrequests;

374 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
bö
->
lock
);

378 ; 
i
 < 
nhbös
; i++) {

379 
tˇche_bö_t
 *
tbö
 = &
tˇche
->
tbös
[
i
];

380 
	`tˇche_bö_Êush_œrge
(
tsd
, 
tbö
, 
i
, 0, 
tˇche
);

382 i‡(
c⁄fig_°©s
 && 
tbö
->
t°©s
.
ƒeque°s
 != 0) {

383 
	`mÆloc_muãx_lock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
lock
);

384 
¨ía
->
°©s
.
ƒeque°s_œrge
 +
tbö
->
t°©s
.
ƒeque°s
;

385 
¨ía
->
°©s
.
l°©s
[
i
 - 
NBINS
].
ƒeque°s
 +=

386 
tbö
->
t°©s
.
ƒeque°s
;

387 
	`mÆloc_muãx_u∆ock
(
	`tsd_tsdn
(
tsd
), &
¨ía
->
lock
);

391 i‡(
c⁄fig_¥of
 && 
tˇche
->
¥of_accumbyãs
 > 0 &&

392 
	`¨ía_¥of_accum
(
	`tsd_tsdn
(
tsd
), 
¨ía
, 
tˇche
->
¥of_accumbyãs
))

393 
	`¥of_idump
(
	`tsd_tsdn
(
tsd
));

395 
	`idÆlo˘m
(
	`tsd_tsdn
(
tsd
), 
tˇche
, 
NULL
, 
åue
,Årue);

396 
	}
}

399 
	$tˇche_˛ónup
(
tsd_t
 *
tsd
)

401 
tˇche_t
 *
tˇche
;

403 i‡(!
c⁄fig_tˇche
)

406 i‡((
tˇche
 = 
	`tsd_tˇche_gë
(
tsd
)Ë!
NULL
) {

407 
	`tˇche_de°roy
(
tsd
, 
tˇche
);

408 
	`tsd_tˇche_£t
(
tsd
, 
NULL
);

410 
	}
}

413 
	$tˇche_íabÀd_˛ónup
(
tsd_t
 *
tsd
)

417 
	}
}

420 
	$tˇche_°©s_mîge
(
tsdn_t
 *
tsdn
, 
tˇche_t
 *
tˇche
, 
¨ía_t
 *
¨ía
)

422 
i
;

424 
	`ˇs£π
(
c⁄fig_°©s
);

426 
	`mÆloc_muãx_as£π_ow√r
(
tsdn
, &
¨ía
->
lock
);

429 
i
 = 0; i < 
NBINS
; i++) {

430 
¨ía_bö_t
 *
bö
 = &
¨ía
->
bös
[
i
];

431 
tˇche_bö_t
 *
tbö
 = &
tˇche
->
tbös
[
i
];

432 
	`mÆloc_muãx_lock
(
tsdn
, &
bö
->
lock
);

433 
bö
->
°©s
.
ƒeque°s
 +
tbö
->
t°©s
.nrequests;

434 
	`mÆloc_muãx_u∆ock
(
tsdn
, &
bö
->
lock
);

435 
tbö
->
t°©s
.
ƒeque°s
 = 0;

438 ; 
i
 < 
nhbös
; i++) {

439 
mÆloc_œrge_°©s_t
 *
l°©s
 = &
¨ía
->
°©s
.l°©s[
i
 - 
NBINS
];

440 
tˇche_bö_t
 *
tbö
 = &
tˇche
->
tbös
[
i
];

441 
¨ía
->
°©s
.
ƒeque°s_œrge
 +
tbö
->
t°©s
.
ƒeque°s
;

442 
l°©s
->
ƒeque°s
 +
tbö
->
t°©s
.nrequests;

443 
tbö
->
t°©s
.
ƒeque°s
 = 0;

445 
	}
}

447 
boﬁ


448 
	$tˇches_¸óã
(
tsdn_t
 *
tsdn
, *
r_öd
)

450 
¨ía_t
 *
¨ía
;

451 
tˇche_t
 *
tˇche
;

452 
tˇches_t
 *
ñm
;

454 i‡(
tˇches
 =
NULL
) {

455 
tˇches
 = 
	`ba£_Æloc
(
tsdn
, (
tˇche_t
 *) *

456 (
MALLOCX_TCACHE_MAX
+1));

457 i‡(
tˇches
 =
NULL
)

458  (
åue
);

461 i‡(
tˇches_avaû
 =
NULL
 && 
tˇches_∑°
 > 
MALLOCX_TCACHE_MAX
)

462  (
åue
);

463 
¨ía
 = 
	`¨ía_ichoo£
(
tsdn
, 
NULL
);

464 i‡(
	`u∆ikñy
(
¨ía
 =
NULL
))

465  (
åue
);

466 
tˇche
 = 
	`tˇche_¸óã
(
tsdn
, 
¨ía
);

467 i‡(
tˇche
 =
NULL
)

468  (
åue
);

470 i‡(
tˇches_avaû
 !
NULL
) {

471 
ñm
 = 
tˇches_avaû
;

472 
tˇches_avaû
 =Åˇches_avaû->
√xt
;

473 
ñm
->
tˇche
 =Åcache;

474 *
r_öd
 = ()(
ñm
 - 
tˇches
);

476 
ñm
 = &
tˇches
[
tˇches_∑°
];

477 
ñm
->
tˇche
 =Åcache;

478 *
r_öd
 = 
tˇches_∑°
;

479 
tˇches_∑°
++;

482  (
Ál£
);

483 
	}
}

486 
	$tˇches_ñm_Êush
(
tsd_t
 *
tsd
, 
tˇches_t
 *
ñm
)

489 i‡(
ñm
->
tˇche
 =
NULL
)

491 
	`tˇche_de°roy
(
tsd
, 
ñm
->
tˇche
);

492 
ñm
->
tˇche
 = 
NULL
;

493 
	}
}

496 
	$tˇches_Êush
(
tsd_t
 *
tsd
, 
öd
)

499 
	`tˇches_ñm_Êush
(
tsd
, &
tˇches
[
öd
]);

500 
	}
}

503 
	$tˇches_de°roy
(
tsd_t
 *
tsd
, 
öd
)

505 
tˇches_t
 *
ñm
 = &
tˇches
[
öd
];

506 
	`tˇches_ñm_Êush
(
tsd
, 
ñm
);

507 
ñm
->
√xt
 = 
tˇches_avaû
;

508 
tˇches_avaû
 = 
ñm
;

509 
	}
}

511 
boﬁ


512 
	$tˇche_boŸ
(
tsdn_t
 *
tsdn
)

514 
i
;

520 i‡(
›t_lg_tˇche_max
 < 0 || (1U << o±_lg_tˇche_maxË< 
SMALL_MAXCLASS
)

521 
tˇche_max˛ass
 = 
SMALL_MAXCLASS
;

522 i‡((1U << 
›t_lg_tˇche_max
Ë> 
œrge_max˛ass
)

523 
tˇche_max˛ass
 = 
œrge_max˛ass
;

525 
tˇche_max˛ass
 = (1U << 
›t_lg_tˇche_max
);

527 
nhbös
 = 
	`size2ödex
(
tˇche_max˛ass
) + 1;

530 
tˇche_bö_öfo
 = (
tˇche_bö_öfo_t
 *)
	`ba£_Æloc
(
tsdn
, 
nhbös
 *

531 (
tˇche_bö_öfo_t
));

532 i‡(
tˇche_bö_öfo
 =
NULL
)

533  (
åue
);

534 
°ack_√lms
 = 0;

535 
i
 = 0; i < 
NBINS
; i++) {

536 i‡((
¨ía_bö_öfo
[
i
].
ƒegs
 << 1Ë<
TCACHE_NSLOTS_SMALL_MIN
) {

537 
tˇche_bö_öfo
[
i
].
nˇched_max
 =

538 
TCACHE_NSLOTS_SMALL_MIN
;

539 } i‡((
¨ía_bö_öfo
[
i
].
ƒegs
 << 1) <=

540 
TCACHE_NSLOTS_SMALL_MAX
) {

541 
tˇche_bö_öfo
[
i
].
nˇched_max
 =

542 (
¨ía_bö_öfo
[
i
].
ƒegs
 << 1);

544 
tˇche_bö_öfo
[
i
].
nˇched_max
 =

545 
TCACHE_NSLOTS_SMALL_MAX
;

547 
°ack_√lms
 +
tˇche_bö_öfo
[
i
].
nˇched_max
;

549 ; 
i
 < 
nhbös
; i++) {

550 
tˇche_bö_öfo
[
i
].
nˇched_max
 = 
TCACHE_NSLOTS_LARGE
;

551 
°ack_√lms
 +
tˇche_bö_öfo
[
i
].
nˇched_max
;

554  (
Ál£
);

555 
	}
}

	@dep/jemalloc-4.2.0/src/ticker.c

1 
	#JEMALLOC_TICKER_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

	@dep/jemalloc-4.2.0/src/tsd.c

1 
	#JEMALLOC_TSD_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

7 
	gn˛ónups
;

8 
mÆloc_tsd_˛ónup_t
 
	g˛ónups
[
MALLOC_TSD_CLEANUPS_MAX
];

10 
	$mÆloc_tsd_d©a
(, , 
tsd_t
, 
TSD_INITIALIZER
)

15 
	$mÆloc_tsd_mÆloc
(
size_t
 
size
)

18  (
	`a0mÆloc
(
	`CACHELINE_CEILING
(
size
)));

19 
	}
}

22 
	$mÆloc_tsd_dÆloc
(*
wøµî
)

25 
	`a0dÆloc
(
wøµî
);

26 
	}
}

29 
	$mÆloc_tsd_no_˛ónup
(*
¨g
)

32 
	`nŸ_ªached
();

33 
	}
}

35 #i‡
deföed
(
JEMALLOC_MALLOC_THREAD_CLEANUP
Ë|| deföed(
_WIN32
)

36 #i‚de‡
_WIN32


37 
	gJEMALLOC_EXPORT


40 
	$_mÆloc_thªad_˛ónup
()

42 
boﬁ
 
≥ndög
[
MALLOC_TSD_CLEANUPS_MAX
], 
agaö
;

43 
i
;

45 
i
 = 0; i < 
n˛ónups
; i++)

46 
≥ndög
[
i
] = 
åue
;

49 
agaö
 = 
Ál£
;

50 
i
 = 0; i < 
n˛ónups
; i++) {

51 i‡(
≥ndög
[
i
]) {

52 
≥ndög
[
i
] = 
˛ónups
[i]();

53 i‡(
≥ndög
[
i
])

54 
agaö
 = 
åue
;

57 } 
agaö
);

58 
	}
}

62 
	$mÆloc_tsd_˛ónup_ªgi°î
(
	$boﬁ
 (*
f
)())

65 
	`as£π
(
n˛ónups
 < 
MALLOC_TSD_CLEANUPS_MAX
);

66 
˛ónups
[
n˛ónups
] = 
f
;

67 
n˛ónups
++;

68 
	}
}

71 
	$tsd_˛ónup
(*
¨g
)

73 
tsd_t
 *
tsd
 = (tsd_à*)
¨g
;

75 
tsd
->
°©e
) {

76 
tsd_°©e_unöôülized
:

79 
tsd_°©e_nomöÆ
:

80 
	#O
(
n
, 
t
) \

81 
n
##
	`_˛ónup
(
tsd
);

	)

82 
MALLOC_TSD


83 #unde‡
O


84 
tsd
->
°©e
 = 
tsd_°©e_purg©‹y
;

85 
	`tsd_£t
(
tsd
);

87 
tsd_°©e_purg©‹y
:

95 
tsd_°©e_ªöˇ∫©ed
:

101 
tsd
->
°©e
 = 
tsd_°©e_purg©‹y
;

102 
	`tsd_£t
(
tsd
);

105 
	`nŸ_ªached
();

107 
	}
}

109 
tsd_t
 *

110 
	$mÆloc_tsd_boŸ0
()

112 
tsd_t
 *
tsd
;

114 
n˛ónups
 = 0;

115 i‡(
	`tsd_boŸ0
())

116  (
NULL
);

117 
tsd
 = 
	`tsd_„tch
();

118 *
	`tsd_¨ías_td©a_by∑s•_gë
(
tsd
Ë
åue
;

119  (
tsd
);

120 
	}
}

123 
	$mÆloc_tsd_boŸ1
()

126 
	`tsd_boŸ1
();

127 *
	`tsd_¨ías_td©a_by∑s•_gë
(
	`tsd_„tch
()Ë
Ál£
;

128 
	}
}

130 #ifde‡
_WIN32


131 
BOOL
 
WINAPI


132 
	$_és_ˇŒback
(
HINSTANCE
 
hö°DLL
, 
DWORD
 
fdwRós⁄
, 
LPVOID
 
ÕvRe£rved
)

135 
fdwRós⁄
) {

136 #ifde‡
JEMALLOC_LAZY_LOCK


137 
DLL_THREAD_ATTACH
:

138 
i°hªaded
 = 
åue
;

141 
DLL_THREAD_DETACH
:

142 
	`_mÆloc_thªad_˛ónup
();

147  (
åue
);

148 
	}
}

150 #ifde‡
_MSC_VER


151 #ifde‡
_M_IX86


152 #¥agm®
commít
(
lökî
, "/INCLUDE:__tls_used")

153 #¥agm®
commít
(
lökî
, "/INCLUDE:_tls_callback")

155 #¥agm®
commít
(
lökî
, "/INCLUDE:_tls_used")

156 #¥agm®
commít
(
lökî
, "/INCLUDE:tls_callback")

158 #¥agm®
£˘i⁄
(".CRT$XLY",,
ªad
)

160 
JEMALLOC_SECTION
(".CRT$XLY"Ë
	$JEMALLOC_ATTR
(
u£d
)

161 
	$BOOL
 (
WINAPI
 *c⁄° 
és_ˇŒback
)(
HINSTANCE
 
hö°DLL
,

162 
DWORD
 
fdwRós⁄
, 
LPVOID
 
ÕvRe£rved
Ë
_és_ˇŒback
;

165 #i‡(!
	`deföed
(
JEMALLOC_MALLOC_THREAD_CLEANUP
Ë&& !deföed(
JEMALLOC_TLS
) && \

166 !
	$deföed
(
_WIN32
))

168 
	$tsd_öô_check_ªcursi⁄
(
tsd_öô_hód_t
 *
hód
, 
tsd_öô_block_t
 *
block
)

170 
±hªad_t
 
£lf
 = 
	`±hªad_£lf
();

171 
tsd_öô_block_t
 *
ôî
;

174 
	`mÆloc_muãx_lock
(
NULL
, &
hód
->
lock
);

175 
	`ql_f‹óch
(
ôî
, &
hód
->
blocks
, 
lök
) {

176 i‡(
ôî
->
thªad
 =
£lf
) {

177 
	`mÆloc_muãx_u∆ock
(
NULL
, &
hód
->
lock
);

178  (
ôî
->
d©a
);

182 
	`ql_ñm_√w
(
block
, 
lök
);

183 
block
->
thªad
 = 
£lf
;

184 
	`ql_èû_ö£π
(&
hód
->
blocks
, 
block
, 
lök
);

185 
	`mÆloc_muãx_u∆ock
(
NULL
, &
hód
->
lock
);

186  (
NULL
);

187 
	}
}

190 
	$tsd_öô_föish
(
tsd_öô_hód_t
 *
hód
, 
tsd_öô_block_t
 *
block
)

193 
	`mÆloc_muãx_lock
(
NULL
, &
hód
->
lock
);

194 
	`ql_ªmove
(&
hód
->
blocks
, 
block
, 
lök
);

195 
	`mÆloc_muãx_u∆ock
(
NULL
, &
hód
->
lock
);

196 
	}
}

	@dep/jemalloc-4.2.0/src/util.c

5 
	#as£π
(
e
) do { \

6 i‡(
c⁄fig_debug
 && !(
e
)) { \

7 
	`mÆloc_wrôe
("<jemalloc>: Failedássertion\n"); \

8 
	`ab‹t
(); \

10 } 0)

	)

12 
	#nŸ_ªached
() do { \

13 i‡(
c⁄fig_debug
) { \

14 
	`mÆloc_wrôe
("<jemalloc>: Unreachable codeÑeached\n"); \

15 
	`ab‹t
(); \

17 
	`uƒóchabÀ
(); \

18 } 0)

	)

20 
	#nŸ_im∂emíãd
() do { \

21 i‡(
c⁄fig_debug
) { \

22 
	`mÆloc_wrôe
("<jemalloc>: Not implemented\n"); \

23 
	`ab‹t
(); \

25 } 0)

	)

27 
	#JEMALLOC_UTIL_C_


	)

28 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

33 
wπmesßge
(*
cb›aque
, c⁄° *
s
);

34 
	#U2S_BUFSIZE
 ((1U << (
LG_SIZEOF_INTMAX_T
 + 3)Ë+ 1)

	)

35 *
u2s
(
uötmax_t
 
x
, 
ba£
, 
boﬁ
 
uµîˇ£
, *
s
,

36 
size_t
 *
¶í_p
);

37 
	#D2S_BUFSIZE
 (1 + 
U2S_BUFSIZE
)

	)

38 *
d2s
(
ötmax_t
 
x
, 
sign
, *
s
, 
size_t
 *
¶í_p
);

39 
	#O2S_BUFSIZE
 (1 + 
U2S_BUFSIZE
)

	)

40 *
o2s
(
uötmax_t
 
x
, 
boﬁ
 
Æt_f‹m
, *
s
, 
size_t
 *
¶í_p
);

41 
	#X2S_BUFSIZE
 (2 + 
U2S_BUFSIZE
)

	)

42 *
x2s
(
uötmax_t
 
x
, 
boﬁ
 
Æt_f‹m
, boﬁ 
uµîˇ£
, *
s
,

43 
size_t
 *
¶í_p
);

49 
	$wπmesßge
(*
cb›aque
, c⁄° *
s
)

52 #ifde‡
SYS_wrôe


62 
UNUSED
 
ªsu…
 = 
	`sysˇŒ
(
SYS_wrôe
, 
STDERR_FILENO
, 
s
, 
	`°æí
(s));

64 
UNUSED
 
ssize_t
 
ªsu…
 = 
	`wrôe
(
STDERR_FILENO
, 
s
, 
	`°æí
(s));

66 
	}
}

68 
JEMALLOC_EXPORT
 (*
je_mÆloc_mesßge
)(*, c⁄° *
s
);

75 
	$mÆloc_wrôe
(c⁄° *
s
)

78 i‡(
je_mÆloc_mesßge
 !
NULL
)

79 
	`je_mÆloc_mesßge
(
NULL
, 
s
);

81 
	`wπmesßge
(
NULL
, 
s
);

82 
	}
}

89 
	$bu„º‹
(
îr
, *
buf
, 
size_t
 
buÊí
)

92 #ifde‡
_WIN32


93 
	`F‹m©MesßgeA
(
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
, 
îr
, 0,

94 (
LPSTR
)
buf
, (
DWORD
)
buÊí
, 
NULL
);

96 #ñi‡
	`deföed
(
__GLIBC__
Ë&& deföed(
_GNU_SOURCE
)

97 *
b
 = 
	`°ªº‹_r
(
îr
, 
buf
, 
buÊí
);

98 i‡(
b
 !
buf
) {

99 
	`°∫˝y
(
buf
, 
b
, 
buÊí
);

100 
buf
[
buÊí
-1] = '\0';

104  (
	`°ªº‹_r
(
îr
, 
buf
, 
buÊí
));

106 
	}
}

108 
uötmax_t


109 
	$mÆloc_°πoumax
(c⁄° *
ª°ri˘
 
≈å
, **ª°ri˘ 
íd±r
, 
ba£
)

111 
uötmax_t
 
ªt
, 
digô
;

112 
b
;

113 
boﬁ
 
√g
;

114 c⁄° *
p
, *
ns
;

116 
p
 = 
≈å
;

117 i‡(
ba£
 < 0 || base == 1 || base > 36) {

118 
ns
 = 
p
;

119 
	`£t_î∫o
(
EINVAL
);

120 
ªt
 = 
UINTMAX_MAX
;

121 
œbñ_ªtu∫
;

123 
b
 = 
ba£
;

126 
√g
 = 
Ál£
;

127 
åue
) {

128 *
p
) {

130 
p
++;

133 
√g
 = 
åue
;

136 
p
++;

139 
œbñ_¥efix
;

144 
œbñ_¥efix
:

150 
ns
 = 
p
;

151 i‡(*
p
 == '0') {

152 
p
[1]) {

155 i‡(
b
 == 0)

156 
b
 = 8;

157 i‡(
b
 == 8)

158 
p
++;

161 
p
[2]) {

168 i‡(
b
 == 0)

169 
b
 = 16;

170 i‡(
b
 == 16)

171 
p
 += 2;

178 
p
++;

179 
ªt
 = 0;

180 
œbñ_ªtu∫
;

183 i‡(
b
 == 0)

184 
b
 = 10;

187 
ªt
 = 0;

188 (*
p
 >'0' && *∞<'9' && (
digô
 = *∞- '0'Ë< 
b
)

189 || (*
p
 >'A' && *∞<'Z' && (
digô
 = 10 + *∞- 'A'Ë< 
b
)

190 || (*
p
 >'a' && *∞<'z' && (
digô
 = 10 + *∞- 'a'Ë< 
b
)) {

191 
uötmax_t
 
¥ë
 = 
ªt
;

192 
ªt
 *
b
;

193 
ªt
 +
digô
;

194 i‡(
ªt
 < 
¥ë
) {

196 
	`£t_î∫o
(
ERANGE
);

197 
ªt
 = 
UINTMAX_MAX
;

198 
œbñ_ªtu∫
;

200 
p
++;

202 i‡(
√g
)

203 
ªt
 = -ret;

205 i‡(
p
 =
ns
) {

207 
	`£t_î∫o
(
EINVAL
);

208 
ªt
 = 
UINTMAX_MAX
;

209 
œbñ_ªtu∫
;

212 
œbñ_ªtu∫
:

213 i‡(
íd±r
 !
NULL
) {

214 i‡(
p
 =
ns
) {

216 *
íd±r
 = (*)
≈å
;

218 *
íd±r
 = (*)
p
;

220  (
ªt
);

221 
	}
}

224 
	$u2s
(
uötmax_t
 
x
, 
ba£
, 
boﬁ
 
uµîˇ£
, *
s
, 
size_t
 *
¶í_p
)

226 
i
;

228 
i
 = 
U2S_BUFSIZE
 - 1;

229 
s
[
i
] = '\0';

230 
ba£
) {

233 
i
--;

234 
s
[
i
] = "0123456789"[
x
 % (
uöt64_t
)10];

235 
x
 /(
uöt64_t
)10;

236 } 
x
 > 0);

239 c⁄° *
digôs
 = (
uµîˇ£
)

244 
i
--;

245 
s
[
i
] = 
digôs
[
x
 & 0xf];

246 
x
 >>= 4;

247 } 
x
 > 0);

250 c⁄° *
digôs
 = (
uµîˇ£
)

254 
	`as£π
(
ba£
 >= 2 && base <= 36);

256 
i
--;

257 
s
[
i
] = 
digôs
[
x
 % (
uöt64_t
)
ba£
];

258 
x
 /(
uöt64_t
)
ba£
;

259 } 
x
 > 0);

262 *
¶í_p
 = 
U2S_BUFSIZE
 - 1 - 
i
;

263  (&
s
[
i
]);

264 
	}
}

267 
	$d2s
(
ötmax_t
 
x
, 
sign
, *
s
, 
size_t
 *
¶í_p
)

269 
boﬁ
 
√g
;

271 i‡((
√g
 = (
x
 < 0)))

272 
x
 = -x;

273 
s
 = 
	`u2s
(
x
, 10, 
Ál£
, s, 
¶í_p
);

274 i‡(
√g
)

275 
sign
 = '-';

276 
sign
) {

278 i‡(!
√g
)

283 
s
--;

284 (*
¶í_p
)++;

285 *
s
 = 
sign
;

287 : 
	`nŸ_ªached
();

289  (
s
);

290 
	}
}

293 
	$o2s
(
uötmax_t
 
x
, 
boﬁ
 
Æt_f‹m
, *
s
, 
size_t
 *
¶í_p
)

296 
s
 = 
	`u2s
(
x
, 8, 
Ál£
, s, 
¶í_p
);

297 i‡(
Æt_f‹m
 && *
s
 != '0') {

298 
s
--;

299 (*
¶í_p
)++;

300 *
s
 = '0';

302  (
s
);

303 
	}
}

306 
	$x2s
(
uötmax_t
 
x
, 
boﬁ
 
Æt_f‹m
, boﬁ 
uµîˇ£
, *
s
, 
size_t
 *
¶í_p
)

309 
s
 = 
	`u2s
(
x
, 16, 
uµîˇ£
, s, 
¶í_p
);

310 i‡(
Æt_f‹m
) {

311 
s
 -= 2;

312 (*
¶í_p
) += 2;

313 
	`mem˝y
(
s
, 
uµîˇ£
 ? "0X" : "0x", 2);

315  (
s
);

316 
	}
}

318 
size_t


319 
	$mÆloc_v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

321 
size_t
 
i
;

322 c⁄° *
f
;

324 
	#APPEND_C
(
c
) do { \

325 i‡(
i
 < 
size
) \

326 
°r
[
i
] = (
c
); \

327 
i
++; \

328 } 0)

	)

329 
	#APPEND_S
(
s
, 
¶í
) do { \

330 i‡(
i
 < 
size
) { \

331 
size_t
 
˝yÀn
 = (
¶í
 <
size
 - 
i
) ? slen : size - i; \

332 
	`mem˝y
(&
°r
[
i
], 
s
, 
˝yÀn
); \

334 
i
 +
¶í
; \

335 } 0)

	)

336 
	#APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
) do { \

338 
size_t
 
∑d_Àn
 = (
width
 =-1Ë? 0 : ((
¶í
 < (size_t)width) ? \

339 (
size_t
)
width
 - 
¶í
 : 0); \

340 i‡(!
À·_ju°ify
 && 
∑d_Àn
 != 0) { \

341 
size_t
 
j
; \

342 
j
 = 0; j < 
∑d_Àn
; j++) \

343 
	`APPEND_C
(' '); \

346 
	`APPEND_S
(
s
, 
¶í
); \

348 i‡(
À·_ju°ify
 && 
∑d_Àn
 != 0) { \

349 
size_t
 
j
; \

350 
j
 = 0; j < 
∑d_Àn
; j++) \

351 
	`APPEND_C
(' '); \

353 } 0)

	)

354 
	#GET_ARG_NUMERIC
(
vÆ
, 
Àn
) do { \

355 
Àn
) { \

357 
vÆ
 = 
	`va_¨g
(
≠
, ); \

360 
vÆ
 = 
	`va_¨g
(
≠
, ); \

363 
vÆ
 = 
	`va_¨g
(
≠
, ); \

366 
vÆ
 = 
	`va_¨g
(
≠
, ); \

369 
vÆ
 = 
	`va_¨g
(
≠
, ); \

372 
vÆ
 = 
	`va_¨g
(
≠
, ); \

375 
vÆ
 = 
	`va_¨g
(
≠
, 
ötmax_t
); \

378 
vÆ
 = 
	`va_¨g
(
≠
, 
uötmax_t
); \

381 
vÆ
 = 
	`va_¨g
(
≠
, 
±rdiff_t
); \

384 
vÆ
 = 
	`va_¨g
(
≠
, 
ssize_t
); \

387 
vÆ
 = 
	`va_¨g
(
≠
, 
size_t
); \

390 
vÆ
 = 
	`va_¨g
(
≠
, 
uöçå_t
); \

393 
	`nŸ_ªached
(); \

394 
vÆ
 = 0; \

396 } 0)

	)

398 
i
 = 0;

399 
f
 = 
f‹m©
;

400 
åue
) {

401 *
f
) {

402 '\0': 
œbñ_out
;

404 
boﬁ
 
Æt_f‹m
 = 
Ál£
;

405 
boﬁ
 
À·_ju°ify
 = 
Ál£
;

406 
boﬁ
 
∂us_•a˚
 = 
Ál£
;

407 
boﬁ
 
∂us_∂us
 = 
Ál£
;

408 
¥ec
 = -1;

409 
width
 = -1;

410 
Àn
 = '?';

411 *
s
;

412 
size_t
 
¶í
;

414 
f
++;

416 
åue
) {

417 *
f
) {

419 
	`as£π
(!
Æt_f‹m
);

420 
Æt_f‹m
 = 
åue
;

423 
	`as£π
(!
À·_ju°ify
);

424 
À·_ju°ify
 = 
åue
;

427 
	`as£π
(!
∂us_•a˚
);

428 
∂us_•a˚
 = 
åue
;

431 
	`as£π
(!
∂us_∂us
);

432 
∂us_∂us
 = 
åue
;

434 : 
œbñ_width
;

436 
f
++;

439 
œbñ_width
:

440 *
f
) {

442 
width
 = 
	`va_¨g
(
≠
, );

443 
f
++;

444 i‡(
width
 < 0) {

445 
À·_ju°ify
 = 
åue
;

446 
width
 = -width;

451 
uötmax_t
 
uwidth
;

452 
	`£t_î∫o
(0);

453 
uwidth
 = 
	`mÆloc_°πoumax
(
f
, (**)&f, 10);

454 
	`as£π
(
uwidth
 !
UINTMAX_MAX
 || 
	`gë_î∫o
() !=

455 
ERANGE
);

456 
width
 = ()
uwidth
;

462 i‡(*
f
 == '.')

463 
f
++;

465 
œbñ_Àngth
;

467 *
f
) {

469 
¥ec
 = 
	`va_¨g
(
≠
, );

470 
f
++;

474 
uötmax_t
 
u¥ec
;

475 
	`£t_î∫o
(0);

476 
u¥ec
 = 
	`mÆloc_°πoumax
(
f
, (**)&f, 10);

477 
	`as£π
(
u¥ec
 !
UINTMAX_MAX
 || 
	`gë_î∫o
() !=

478 
ERANGE
);

479 
¥ec
 = ()
u¥ec
;

485 
œbñ_Àngth
:

486 *
f
) {

488 
f
++;

489 i‡(*
f
 == 'l') {

490 
Àn
 = 'q';

491 
f
++;

493 
Àn
 = 'l';

496 
Àn
 = *
f
;

497 
f
++;

502 *
f
) {

505 
	`APPEND_C
(*
f
);

506 
f
++;

509 
ötmax_t
 
vÆ
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

510 
buf
[
D2S_BUFSIZE
];

512 
	`GET_ARG_NUMERIC
(
vÆ
, 
Àn
);

513 
s
 = 
	`d2s
(
vÆ
, (
∂us_∂us
 ? '+' : (
∂us_•a˚
 ?

514 ' ' : '-')), 
buf
, &
¶í
);

515 
	`APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
);

516 
f
++;

519 
uötmax_t
 
vÆ
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

520 
buf
[
O2S_BUFSIZE
];

522 
	`GET_ARG_NUMERIC
(
vÆ
, 
Àn
 | 0x80);

523 
s
 = 
	`o2s
(
vÆ
, 
Æt_f‹m
, 
buf
, &
¶í
);

524 
	`APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
);

525 
f
++;

528 
uötmax_t
 
vÆ
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

529 
buf
[
U2S_BUFSIZE
];

531 
	`GET_ARG_NUMERIC
(
vÆ
, 
Àn
 | 0x80);

532 
s
 = 
	`u2s
(
vÆ
, 10, 
Ál£
, 
buf
, &
¶í
);

533 
	`APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
);

534 
f
++;

537 
uötmax_t
 
vÆ
 
	`JEMALLOC_CC_SILENCE_INIT
(0);

538 
buf
[
X2S_BUFSIZE
];

540 
	`GET_ARG_NUMERIC
(
vÆ
, 
Àn
 | 0x80);

541 
s
 = 
	`x2s
(
vÆ
, 
Æt_f‹m
, *
f
 ='X', 
buf
, &
¶í
);

542 
	`APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
);

543 
f
++;

546 
vÆ
;

547 
buf
[2];

549 
	`as£π
(
Àn
 == '?' ||Üen == 'l');

550 
	`as£π_nŸ_im∂emíãd
(
Àn
 != 'l');

551 
vÆ
 = 
	`va_¨g
(
≠
, );

552 
buf
[0] = 
vÆ
;

553 
buf
[1] = '\0';

554 
	`APPEND_PADDED_S
(
buf
, 1, 
width
, 
À·_ju°ify
);

555 
f
++;

558 
	`as£π
(
Àn
 == '?' ||Üen == 'l');

559 
	`as£π_nŸ_im∂emíãd
(
Àn
 != 'l');

560 
s
 = 
	`va_¨g
(
≠
, *);

561 
¶í
 = (
¥ec
 < 0Ë? 
	`°æí
(
s
Ë: (
size_t
)prec;

562 
	`APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
);

563 
f
++;

566 
uötmax_t
 
vÆ
;

567 
buf
[
X2S_BUFSIZE
];

569 
	`GET_ARG_NUMERIC
(
vÆ
, 'p');

570 
s
 = 
	`x2s
(
vÆ
, 
åue
, 
Ál£
, 
buf
, &
¶í
);

571 
	`APPEND_PADDED_S
(
s
, 
¶í
, 
width
, 
À·_ju°ify
);

572 
f
++;

574 } : 
	`nŸ_ªached
();

578 
	`APPEND_C
(*
f
);

579 
f
++;

583 
œbñ_out
:

584 i‡(
i
 < 
size
)

585 
°r
[
i
] = '\0';

587 
°r
[
size
 - 1] = '\0';

589 #unde‡
APPEND_C


590 #unde‡
APPEND_S


591 #unde‡
APPEND_PADDED_S


592 #unde‡
GET_ARG_NUMERIC


593  (
i
);

594 
	}
}

596 
	$JEMALLOC_FORMAT_PRINTF
(3, 4)

597 
size_t


598 
	$mÆloc_¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

600 
size_t
 
ªt
;

601 
va_li°
 
≠
;

603 
	`va_°¨t
(
≠
, 
f‹m©
);

604 
ªt
 = 
	`mÆloc_v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
≠
);

605 
	`va_íd
(
≠
);

607  (
ªt
);

608 
	}
}

611 
	$mÆloc_v˝rötf
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

612 c⁄° *
f‹m©
, 
va_li°
 
≠
)

614 
buf
[
MALLOC_PRINTF_BUFSIZE
];

616 i‡(
wrôe_cb
 =
NULL
) {

622 
wrôe_cb
 = (
je_mÆloc_mesßge
 !
NULL
) ? je_malloc_message :

623 
wπmesßge
;

624 
cb›aque
 = 
NULL
;

627 
	`mÆloc_v¢¥ötf
(
buf
, (buf), 
f‹m©
, 
≠
);

628 
	`wrôe_cb
(
cb›aque
, 
buf
);

629 
	}
}

635 
	$JEMALLOC_FORMAT_PRINTF
(3, 4)

637 
	$mÆloc_˝rötf
((*
wrôe_cb
)(*, c⁄° *), *
cb›aque
,

638 c⁄° *
f‹m©
, ...)

640 
va_li°
 
≠
;

642 
	`va_°¨t
(
≠
, 
f‹m©
);

643 
	`mÆloc_v˝rötf
(
wrôe_cb
, 
cb›aque
, 
f‹m©
, 
≠
);

644 
	`va_íd
(
≠
);

645 
	}
}

648 
	$JEMALLOC_FORMAT_PRINTF
(1, 2)

650 
	$mÆloc_¥ötf
(c⁄° *
f‹m©
, ...)

652 
va_li°
 
≠
;

654 
	`va_°¨t
(
≠
, 
f‹m©
);

655 
	`mÆloc_v˝rötf
(
NULL
, NULL, 
f‹m©
, 
≠
);

656 
	`va_íd
(
≠
);

657 
	}
}

663 #unde‡
as£π


664 #unde‡
nŸ_ªached


665 #unde‡
nŸ_im∂emíãd


666 
	~"jemÆloc/öã∫Æ/as£π.h
"

	@dep/jemalloc-4.2.0/src/valgrind.c

1 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

2 #i‚de‡
JEMALLOC_VALGRIND


6 
	~<vÆgröd/memcheck.h
>

9 
	$vÆgröd_make_mem_nﬂc˚ss
(*
±r
, 
size_t
 
usize
)

12 
	`VALGRIND_MAKE_MEM_NOACCESS
(
±r
, 
usize
);

13 
	}
}

16 
	$vÆgröd_make_mem_undeföed
(*
±r
, 
size_t
 
usize
)

19 
	`VALGRIND_MAKE_MEM_UNDEFINED
(
±r
, 
usize
);

20 
	}
}

23 
	$vÆgröd_make_mem_deföed
(*
±r
, 
size_t
 
usize
)

26 
	`VALGRIND_MAKE_MEM_DEFINED
(
±r
, 
usize
);

27 
	}
}

30 
	$vÆgröd_‰ìlike_block
(*
±r
, 
size_t
 
usize
)

33 
	`VALGRIND_FREELIKE_BLOCK
(
±r
, 
usize
);

34 
	}
}

	@dep/jemalloc-4.2.0/src/witness.c

1 
	#JEMALLOC_WITNESS_C_


	)

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

5 
	$wô√ss_öô
(
wô√ss_t
 *
wô√ss
, c⁄° *
«me
, 
wô√ss_ønk_t
 
ønk
,

6 
wô√ss_comp_t
 *
comp
)

9 
wô√ss
->
«me
 =Çame;

10 
wô√ss
->
ønk
 =Ñank;

11 
wô√ss
->
comp
 = comp;

12 
	}
}

14 #ifde‡
JEMALLOC_JET


15 #unde‡
wô√ss_lock_îr‹


16 
	#wô√ss_lock_îr‹
 
	`JEMALLOC_N
(
n_wô√ss_lock_îr‹
)

	)

19 
	$wô√ss_lock_îr‹
(c⁄° 
wô√ss_li°_t
 *
wô√s£s
, c⁄° 
wô√ss_t
 *
wô√ss
)

21 
wô√ss_t
 *
w
;

23 
	`mÆloc_¥ötf
("<jemalloc>: LockÑank orderÑeversal:");

24 
	`ql_f‹óch
(
w
, 
wô√s£s
, 
lök
) {

25 
	`mÆloc_¥ötf
(" %s(%u)", 
w
->
«me
, w->
ønk
);

27 
	`mÆloc_¥ötf
(" %s(%u)\n", 
wô√ss
->
«me
, wô√ss->
ønk
);

28 
	`ab‹t
();

29 
	}
}

30 #ifde‡
JEMALLOC_JET


31 #unde‡
wô√ss_lock_îr‹


32 
	#wô√ss_lock_îr‹
 
	`JEMALLOC_N
(
wô√ss_lock_îr‹
)

	)

33 
wô√ss_lock_îr‹_t
 *
	gwô√ss_lock_îr‹
 = 
JEMALLOC_N
(
n_wô√ss_lock_îr‹
);

36 #ifde‡
JEMALLOC_JET


37 #unde‡
wô√ss_ow√r_îr‹


38 
	#wô√ss_ow√r_îr‹
 
	`JEMALLOC_N
(
n_wô√ss_ow√r_îr‹
)

	)

41 
	$wô√ss_ow√r_îr‹
(c⁄° 
wô√ss_t
 *
wô√ss
)

44 
	`mÆloc_¥ötf
("<jemÆloc>: Should ow¿%s(%u)\n", 
wô√ss
->
«me
,

45 
wô√ss
->
ønk
);

46 
	`ab‹t
();

47 
	}
}

48 #ifde‡
JEMALLOC_JET


49 #unde‡
wô√ss_ow√r_îr‹


50 
	#wô√ss_ow√r_îr‹
 
	`JEMALLOC_N
(
wô√ss_ow√r_îr‹
)

	)

51 
wô√ss_ow√r_îr‹_t
 *
	gwô√ss_ow√r_îr‹
 = 
JEMALLOC_N
(
n_wô√ss_ow√r_îr‹
);

54 #ifde‡
JEMALLOC_JET


55 #unde‡
wô√ss_nŸ_ow√r_îr‹


56 
	#wô√ss_nŸ_ow√r_îr‹
 
	`JEMALLOC_N
(
n_wô√ss_nŸ_ow√r_îr‹
)

	)

59 
	$wô√ss_nŸ_ow√r_îr‹
(c⁄° 
wô√ss_t
 *
wô√ss
)

62 
	`mÆloc_¥ötf
("<jemÆloc>: ShouldÇŸ ow¿%s(%u)\n", 
wô√ss
->
«me
,

63 
wô√ss
->
ønk
);

64 
	`ab‹t
();

65 
	}
}

66 #ifde‡
JEMALLOC_JET


67 #unde‡
wô√ss_nŸ_ow√r_îr‹


68 
	#wô√ss_nŸ_ow√r_îr‹
 
	`JEMALLOC_N
(
wô√ss_nŸ_ow√r_îr‹
)

	)

69 
wô√ss_nŸ_ow√r_îr‹_t
 *
	gwô√ss_nŸ_ow√r_îr‹
 =

70 
JEMALLOC_N
(
n_wô√ss_nŸ_ow√r_îr‹
);

73 #ifde‡
JEMALLOC_JET


74 #unde‡
wô√ss_lockÀss_îr‹


75 
	#wô√ss_lockÀss_îr‹
 
	`JEMALLOC_N
(
n_wô√ss_lockÀss_îr‹
)

	)

78 
	$wô√ss_lockÀss_îr‹
(c⁄° 
wô√ss_li°_t
 *
wô√s£s
)

80 
wô√ss_t
 *
w
;

82 
	`mÆloc_¥ötf
("<jemalloc>: ShouldÇot ownányÜocks:");

83 
	`ql_f‹óch
(
w
, 
wô√s£s
, 
lök
) {

84 
	`mÆloc_¥ötf
(" %s(%u)", 
w
->
«me
, w->
ønk
);

86 
	`mÆloc_¥ötf
("\n");

87 
	`ab‹t
();

88 
	}
}

89 #ifde‡
JEMALLOC_JET


90 #unde‡
wô√ss_lockÀss_îr‹


91 
	#wô√ss_lockÀss_îr‹
 
	`JEMALLOC_N
(
wô√ss_lockÀss_îr‹
)

	)

92 
wô√ss_lockÀss_îr‹_t
 *
	gwô√ss_lockÀss_îr‹
 =

93 
JEMALLOC_N
(
n_wô√ss_lockÀss_îr‹
);

97 
	$wô√s£s_˛ónup
(
tsd_t
 *
tsd
)

100 
	`wô√ss_as£π_lockÀss
(
	`tsd_tsdn
(
tsd
));

103 
	}
}

106 
	$wô√ss_f‹k_˛ónup
(
tsd_t
 *
tsd
)

110 
	}
}

113 
	$wô√ss_¥ef‹k
(
tsd_t
 *
tsd
)

116 
	`tsd_wô√ss_f‹k_£t
(
tsd
, 
åue
);

117 
	}
}

120 
	$wô√ss_po°f‹k_∑ª¡
(
tsd_t
 *
tsd
)

123 
	`tsd_wô√ss_f‹k_£t
(
tsd
, 
Ál£
);

124 
	}
}

127 
	$wô√ss_po°f‹k_chûd
(
tsd_t
 *
tsd
)

129 #i‚de‡
JEMALLOC_MUTEX_INIT_CB


130 
wô√ss_li°_t
 *
wô√s£s
;

132 
wô√s£s
 = 
	`tsd_wô√s£•_gë
(
tsd
);

133 
	`ql_√w
(
wô√s£s
);

135 
	`tsd_wô√ss_f‹k_£t
(
tsd
, 
Ál£
);

136 
	}
}

	@dep/jemalloc-4.2.0/src/zone.c

1 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

2 #i‚de‡
JEMALLOC_ZONE


10 
mÆloc_z⁄e_t
 *
	$mÆloc_deÁu…_purgóbÀ_z⁄e
()

11 
	`JEMALLOC_ATTR
(
wók_imp‹t
);

16 
mÆloc_z⁄e_t
 
z⁄e
;

17 
mÆloc_öåo•e˘i⁄_t
 
z⁄e_öåo•e˘
;

22 
size_t
 
	`z⁄e_size
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
);

23 *
	`z⁄e_mÆloc
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
size
);

24 *
	`z⁄e_ˇŒoc
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
num
, size_à
size
);

25 *
	`z⁄e_vÆloc
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
size
);

26 
	`z⁄e_‰ì
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
);

27 *
	`z⁄e_ªÆloc
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
, 
size_t
 
size
);

28 #i‡(
JEMALLOC_ZONE_VERSION
 >= 5)

29 *
	`z⁄e_memÆign
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
Æignmít
,

31 #i‡(
JEMALLOC_ZONE_VERSION
 >= 6)

32 
size_t
 
size
);

33 
	`z⁄e_‰ì_deföôe_size
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
,

34 
size_t
 
size
);

36 *
	`z⁄e_de°roy
(
mÆloc_z⁄e_t
 *
z⁄e
);

37 
size_t
 
	`z⁄e_good_size
(
mÆloc_z⁄e_t
 *
z⁄e
, size_à
size
);

38 
	`z⁄e_f‹˚_lock
(
mÆloc_z⁄e_t
 *
z⁄e
);

39 
	`z⁄e_f‹˚_u∆ock
(
mÆloc_z⁄e_t
 *
z⁄e
);

46 
size_t


47 
	$z⁄e_size
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
)

59  (
	`ivßŒoc
(
	`tsdn_„tch
(), 
±r
, 
c⁄fig_¥of
));

60 
	}
}

63 
	$z⁄e_mÆloc
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
size
)

66  (
	`je_mÆloc
(
size
));

67 
	}
}

70 
	$z⁄e_ˇŒoc
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
num
, size_à
size
)

73  (
	`je_ˇŒoc
(
num
, 
size
));

74 
	}
}

77 
	$z⁄e_vÆloc
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
size
)

79 *
ªt
 = 
NULL
;

81 
	`je_posix_memÆign
(&
ªt
, 
PAGE
, 
size
);

83  (
ªt
);

84 
	}
}

87 
	$z⁄e_‰ì
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
)

90 i‡(
	`ivßŒoc
(
	`tsdn_„tch
(), 
±r
, 
c⁄fig_¥of
) != 0) {

91 
	`je_‰ì
(
±r
);

95 
	`‰ì
(
±r
);

96 
	}
}

99 
	$z⁄e_ªÆloc
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
, 
size_t
 
size
)

102 i‡(
	`ivßŒoc
(
	`tsdn_„tch
(), 
±r
, 
c⁄fig_¥of
) != 0)

103  (
	`je_ªÆloc
(
±r
, 
size
));

105  (
	`ªÆloc
(
±r
, 
size
));

106 
	}
}

108 #i‡(
JEMALLOC_ZONE_VERSION
 >= 5)

110 
	$z⁄e_memÆign
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
Æignmít
, size_à
size
)

112 *
ªt
 = 
NULL
;

114 
	`je_posix_memÆign
(&
ªt
, 
Æignmít
, 
size
);

116  (
ªt
);

117 
	}
}

120 #i‡(
JEMALLOC_ZONE_VERSION
 >= 6)

122 
	$z⁄e_‰ì_deföôe_size
(
mÆloc_z⁄e_t
 *
z⁄e
, *
±r
, 
size_t
 
size
)

124 
size_t
 
Æloc_size
;

126 
Æloc_size
 = 
	`ivßŒoc
(
	`tsdn_„tch
(), 
±r
, 
c⁄fig_¥of
);

127 i‡(
Æloc_size
 != 0) {

128 
	`as£π
(
Æloc_size
 =
size
);

129 
	`je_‰ì
(
±r
);

133 
	`‰ì
(
±r
);

134 
	}
}

138 
	$z⁄e_de°roy
(
mÆloc_z⁄e_t
 *
z⁄e
)

142 
	`nŸ_ªached
();

143  (
NULL
);

144 
	}
}

146 
size_t


147 
	$z⁄e_good_size
(
mÆloc_z⁄e_t
 *
z⁄e
, 
size_t
 
size
)

150 i‡(
size
 == 0)

151 
size
 = 1;

152  (
	`s2u
(
size
));

153 
	}
}

156 
	$z⁄e_f‹˚_lock
(
mÆloc_z⁄e_t
 *
z⁄e
)

159 i‡(
i°hªaded
)

160 
	`jemÆloc_¥ef‹k
();

161 
	}
}

164 
	$z⁄e_f‹˚_u∆ock
(
mÆloc_z⁄e_t
 *
z⁄e
)

167 i‡(
i°hªaded
)

168 
	`jemÆloc_po°f‹k_∑ª¡
();

169 
	}
}

171 
	$JEMALLOC_ATTR
(
c⁄°ru˘‹
)

173 
	$ªgi°î_z⁄e
()

180 
mÆloc_z⁄e_t
 *
deÁu…_z⁄e
 = 
	`mÆloc_deÁu…_z⁄e
();

181 
mÆloc_z⁄e_t
 *
purgóbÀ_z⁄e
 = 
NULL
;

182 i‡(!
deÁu…_z⁄e
->
z⁄e_«me
 ||

183 
	`°rcmp
(
deÁu…_z⁄e
->
z⁄e_«me
, "DefaultMallocZone") != 0) {

187 
z⁄e
.
size
 = (*)
z⁄e_size
;

188 
z⁄e
.
mÆloc
 = (*)
z⁄e_mÆloc
;

189 
z⁄e
.
ˇŒoc
 = (*)
z⁄e_ˇŒoc
;

190 
z⁄e
.
vÆloc
 = (*)
z⁄e_vÆloc
;

191 
z⁄e
.
‰ì
 = (*)
z⁄e_‰ì
;

192 
z⁄e
.
ªÆloc
 = (*)
z⁄e_ªÆloc
;

193 
z⁄e
.
de°roy
 = (*)
z⁄e_de°roy
;

194 
z⁄e
.
z⁄e_«me
 = "jemalloc_zone";

195 
z⁄e
.
b©ch_mÆloc
 = 
NULL
;

196 
z⁄e
.
b©ch_‰ì
 = 
NULL
;

197 
z⁄e
.
öåo•e˘
 = &
z⁄e_öåo•e˘
;

198 
z⁄e
.
vîsi⁄
 = 
JEMALLOC_ZONE_VERSION
;

199 #i‡(
JEMALLOC_ZONE_VERSION
 >= 5)

200 
z⁄e
.
memÆign
 = 
z⁄e_memÆign
;

202 #i‡(
JEMALLOC_ZONE_VERSION
 >= 6)

203 
z⁄e
.
‰ì_deföôe_size
 = 
z⁄e_‰ì_deföôe_size
;

205 #i‡(
JEMALLOC_ZONE_VERSION
 >= 8)

206 
z⁄e
.
¥essuª_ªlõf
 = 
NULL
;

209 
z⁄e_öåo•e˘
.
íumî©‹
 = 
NULL
;

210 
z⁄e_öåo•e˘
.
good_size
 = (*)
z⁄e_good_size
;

211 
z⁄e_öåo•e˘
.
check
 = 
NULL
;

212 
z⁄e_öåo•e˘
.
¥öt
 = 
NULL
;

213 
z⁄e_öåo•e˘
.
log
 = 
NULL
;

214 
z⁄e_öåo•e˘
.
f‹˚_lock
 = (*)
z⁄e_f‹˚_lock
;

215 
z⁄e_öåo•e˘
.
f‹˚_u∆ock
 = (*)
z⁄e_f‹˚_u∆ock
;

216 
z⁄e_öåo•e˘
.
°©i°ics
 = 
NULL
;

217 #i‡(
JEMALLOC_ZONE_VERSION
 >= 6)

218 
z⁄e_öåo•e˘
.
z⁄e_locked
 = 
NULL
;

220 #i‡(
JEMALLOC_ZONE_VERSION
 >= 7)

221 
z⁄e_öåo•e˘
.
íabÀ_disch¨ge_checkög
 = 
NULL
;

222 
z⁄e_öåo•e˘
.
dißbÀ_disch¨ge_checkög
 = 
NULL
;

223 
z⁄e_öåo•e˘
.
disch¨ge
 = 
NULL
;

224 #ifde‡
__BLOCKS__


225 
z⁄e_öåo•e˘
.
íumî©e_disch¨ged_poöãrs
 = 
NULL
;

227 
z⁄e_öåo•e˘
.
íumî©e_u«vaûabÀ_wôhout_blocks
 = 
NULL
;

242 i‡(
mÆloc_deÁu…_purgóbÀ_z⁄e
 !
NULL
)

243 
purgóbÀ_z⁄e
 = 
	`mÆloc_deÁu…_purgóbÀ_z⁄e
();

246 
	`mÆloc_z⁄e_ªgi°î
(&
z⁄e
);

249 
deÁu…_z⁄e
 = 
	`mÆloc_deÁu…_z⁄e
();

258 
	`mÆloc_z⁄e_uƒegi°î
(
deÁu…_z⁄e
);

259 
	`mÆloc_z⁄e_ªgi°î
(
deÁu…_z⁄e
);

271 i‡(
purgóbÀ_z⁄e
) {

272 
	`mÆloc_z⁄e_uƒegi°î
(
purgóbÀ_z⁄e
);

273 
	`mÆloc_z⁄e_ªgi°î
(
purgóbÀ_z⁄e
);

275 } 
	`mÆloc_deÁu…_z⁄e
(Ë!&
z⁄e
);

276 
	}
}

	@dep/jemalloc-4.2.0/test/include/test/SFMT-alti.h

52 #i‚de‡
SFMT_ALTI_H


53 
	#SFMT_ALTI_H


	)

63 
JEMALLOC_ALWAYS_INLINE


64 
ve˘‹
 
	$vec_ªcursi⁄
(
ve˘‹
 
a
,

65 
ve˘‹
 
b
,

66 
ve˘‹
 
c
,

67 
ve˘‹
 
d
) {

69 c⁄° 
ve˘‹
 
¶1
 = 
ALTI_SL1
;

70 c⁄° 
ve˘‹
 
§1
 = 
ALTI_SR1
;

71 #ifde‡
ONLY64


72 c⁄° 
ve˘‹
 
mask
 = 
ALTI_MSK64
;

73 c⁄° 
ve˘‹
 
≥rm_¶
 = 
ALTI_SL2_PERM64
;

74 c⁄° 
ve˘‹
 
≥rm_§
 = 
ALTI_SR2_PERM64
;

76 c⁄° 
ve˘‹
 
mask
 = 
ALTI_MSK
;

77 c⁄° 
ve˘‹
 
≥rm_¶
 = 
ALTI_SL2_PERM
;

78 c⁄° 
ve˘‹
 
≥rm_§
 = 
ALTI_SR2_PERM
;

80 
ve˘‹
 
v
, 
w
, 
x
, 
y
, 
z
;

81 
x
 = 
	`vec_≥rm
(
a
, (
ve˘‹
 )
≥rm_¶
,Öerm_sl);

82 
v
 = 
a
;

83 
y
 = 
	`vec_§
(
b
, 
§1
);

84 
z
 = 
	`vec_≥rm
(
c
, (
ve˘‹
 )
≥rm_§
,Öerm_sr);

85 
w
 = 
	`vec_¶
(
d
, 
¶1
);

86 
z
 = 
	`vec_x‹
(z, 
w
);

87 
y
 = 
	`vec_™d
(y, 
mask
);

88 
v
 = 
	`vec_x‹
(v, 
x
);

89 
z
 = 
	`vec_x‹
(z, 
y
);

90 
z
 = 
	`vec_x‹
(z, 
v
);

91  
z
;

92 
	}
}

98 
JEMALLOC_INLINE
 
	$gí_ønd_Æl
(
sfmt_t
 *
˘x
) {

99 
i
;

100 
ve˘‹
 
r
, 
r1
, 
r2
;

102 
r1
 = 
˘x
->
sfmt
[
N
 - 2].
s
;

103 
r2
 = 
˘x
->
sfmt
[
N
 - 1].
s
;

104 
i
 = 0; i < 
N
 - 
POS1
; i++) {

105 
r
 = 
	`vec_ªcursi⁄
(
˘x
->
sfmt
[
i
].
s
, ctx->sfmt[ò+ 
POS1
].s, 
r1
, 
r2
);

106 
˘x
->
sfmt
[
i
].
s
 = 
r
;

107 
r1
 = 
r2
;

108 
r2
 = 
r
;

110 ; 
i
 < 
N
; i++) {

111 
r
 = 
	`vec_ªcursi⁄
(
˘x
->
sfmt
[
i
].
s
, ctx->sfmt[ò+ 
POS1
 - 
N
].s, 
r1
, 
r2
);

112 
˘x
->
sfmt
[
i
].
s
 = 
r
;

113 
r1
 = 
r2
;

114 
r2
 = 
r
;

116 
	}
}

125 
JEMALLOC_INLINE
 
	$gí_ønd_¨øy
(
sfmt_t
 *
˘x
, 
w128_t
 *
¨øy
, 
size
) {

126 
i
, 
j
;

127 
ve˘‹
 
r
, 
r1
, 
r2
;

129 
r1
 = 
˘x
->
sfmt
[
N
 - 2].
s
;

130 
r2
 = 
˘x
->
sfmt
[
N
 - 1].
s
;

131 
i
 = 0; i < 
N
 - 
POS1
; i++) {

132 
r
 = 
	`vec_ªcursi⁄
(
˘x
->
sfmt
[
i
].
s
, ctx->sfmt[ò+ 
POS1
].s, 
r1
, 
r2
);

133 
¨øy
[
i
].
s
 = 
r
;

134 
r1
 = 
r2
;

135 
r2
 = 
r
;

137 ; 
i
 < 
N
; i++) {

138 
r
 = 
	`vec_ªcursi⁄
(
˘x
->
sfmt
[
i
].
s
, 
¨øy
[ò+ 
POS1
 - 
N
].s, 
r1
, 
r2
);

139 
¨øy
[
i
].
s
 = 
r
;

140 
r1
 = 
r2
;

141 
r2
 = 
r
;

144 ; 
i
 < 
size
 - 
N
; i++) {

145 
r
 = 
	`vec_ªcursi⁄
(
¨øy
[
i
 - 
N
].
s
,áºay[ò+ 
POS1
 - N].s, 
r1
, 
r2
);

146 
¨øy
[
i
].
s
 = 
r
;

147 
r1
 = 
r2
;

148 
r2
 = 
r
;

150 
j
 = 0; j < 2 * 
N
 - 
size
; j++) {

151 
˘x
->
sfmt
[
j
].
s
 = 
¨øy
[j + 
size
 - 
N
].s;

153 ; 
i
 < 
size
; i++) {

154 
r
 = 
	`vec_ªcursi⁄
(
¨øy
[
i
 - 
N
].
s
,áºay[ò+ 
POS1
 - N].s, 
r1
, 
r2
);

155 
¨øy
[
i
].
s
 = 
r
;

156 
˘x
->
sfmt
[
j
++].
s
 = 
r
;

157 
r1
 = 
r2
;

158 
r2
 = 
r
;

160 
	}
}

162 #i‚de‡
ONLY64


163 #i‡
deföed
(
__APPLE__
)

164 
	#ALTI_SWAP
 (
ve˘‹
 ) \

165 (4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11)

	)

167 
	#ALTI_SWAP
 {4, 5, 6, 7, 0, 1, 2, 3, 12, 13, 14, 15, 8, 9, 10, 11}

	)

176 
JEMALLOC_INLINE
 
	$sw≠
(
w128_t
 *
¨øy
, 
size
) {

177 
i
;

178 c⁄° 
ve˘‹
 
≥rm
 = 
ALTI_SWAP
;

180 
i
 = 0; i < 
size
; i++) {

181 
¨øy
[
i
].
s
 = 
	`vec_≥rm
◊ºay[i].s, (
ve˘‹
 )
≥rm
,Öerm);

183 
	}
}

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params.h

36 #i‚de‡
SFMT_PARAMS_H


37 
	#SFMT_PARAMS_H


	)

39 #i‡!
deföed
(
MEXP
)

40 #ifde‡
__GNUC__


43 
	#MEXP
 19937

	)

53 
	#N
 (
MEXP
 / 128 + 1)

	)

56 
	#N32
 (
N
 * 4)

	)

59 
	#N64
 (
N
 * 2)

	)

102 #i‡
MEXP
 == 607

103 
	~"ã°/SFMT-∑øms607.h
"

104 #ñi‡
MEXP
 == 1279

105 
	~"ã°/SFMT-∑øms1279.h
"

106 #ñi‡
MEXP
 == 2281

107 
	~"ã°/SFMT-∑øms2281.h
"

108 #ñi‡
MEXP
 == 4253

109 
	~"ã°/SFMT-∑øms4253.h
"

110 #ñi‡
MEXP
 == 11213

111 
	~"ã°/SFMT-∑øms11213.h
"

112 #ñi‡
MEXP
 == 19937

113 
	~"ã°/SFMT-∑øms19937.h
"

114 #ñi‡
MEXP
 == 44497

115 
	~"ã°/SFMT-∑øms44497.h
"

116 #ñi‡
MEXP
 == 86243

117 
	~"ã°/SFMT-∑øms86243.h
"

118 #ñi‡
MEXP
 == 132049

119 
	~"ã°/SFMT-∑øms132049.h
"

120 #ñi‡
MEXP
 == 216091

121 
	~"ã°/SFMT-∑øms216091.h
"

123 #ifde‡
__GNUC__


125 #unde‡
MEXP


127 #unde‡
MEXP


	@dep/jemalloc-4.2.0/test/include/test/SFMT-params11213.h

36 #i‚de‡
SFMT_PARAMS11213_H


37 
	#SFMT_PARAMS11213_H


	)

39 
	#POS1
 68

	)

40 
	#SL1
 14

	)

41 
	#SL2
 3

	)

42 
	#SR1
 7

	)

43 
	#SR2
 3

	)

44 
	#MSK1
 0xeffff7fbU

	)

45 
	#MSK2
 0xfffff„fU

	)

46 
	#MSK3
 0xdfdfbfffU

	)

47 
	#MSK4
 0x7fffdbfdU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0xe8148000U

	)

51 
	#PARITY4
 0xd0c7aÁ3U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(5,6,7,0,9,10,11,4,13,14,15,8,19,19,19,12)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(13,14,15,0,1,2,3,4,19,19,19,8,9,10,11,12)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10}

	)

75 
	#ALTI_SL2_PERM64
 {3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2}

	)

76 
	#ALTI_SR2_PERM
 {5,6,7,0,9,10,11,4,13,14,15,8,19,19,19,12}

	)

77 
	#ALTI_SR2_PERM64
 {13,14,15,0,1,2,3,4,19,19,19,8,9,10,11,12}

	)

79 
	#IDSTR
 "SFMT-11213:68-14-3-7-3:effff7fb-fffff„f-dfdfbfff-7fffdbfd"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params1279.h

36 #i‚de‡
SFMT_PARAMS1279_H


37 
	#SFMT_PARAMS1279_H


	)

39 
	#POS1
 7

	)

40 
	#SL1
 14

	)

41 
	#SL2
 3

	)

42 
	#SR1
 5

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0xf7„fffdU

	)

45 
	#MSK2
 0x7„fcfffU

	)

46 
	#MSK3
 0xaff3ef3fU

	)

47 
	#MSK4
 0xb5ffff7fU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0x00000000U

	)

51 
	#PARITY4
 0x20000000U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10}

	)

75 
	#ALTI_SL2_PERM64
 {3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-1279:7-14-3-5-1:f7„fffd-7„fcfff-aff3ef3f-b5ffff7f"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params132049.h

36 #i‚de‡
SFMT_PARAMS132049_H


37 
	#SFMT_PARAMS132049_H


	)

39 
	#POS1
 110

	)

40 
	#SL1
 19

	)

41 
	#SL2
 1

	)

42 
	#SR1
 21

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0xffffbb5fU

	)

45 
	#MSK2
 0xfb6ebf95U

	)

46 
	#MSK3
 0xff„ffÁU

	)

47 
	#MSK4
 0xcff77fffU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0xcb520000U

	)

51 
	#PARITY4
 0xc7e91c7dU

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8}

	)

75 
	#ALTI_SL2_PERM64
 {1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-132049:110-19-1-21-1:ffffbb5f-fb6ebf95-ff„ffÁ-cff77fff"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params19937.h

36 #i‚de‡
SFMT_PARAMS19937_H


37 
	#SFMT_PARAMS19937_H


	)

39 
	#POS1
 122

	)

40 
	#SL1
 18

	)

41 
	#SL2
 1

	)

42 
	#SR1
 11

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0xdffff„fU

	)

45 
	#MSK2
 0xdd„cb7fU

	)

46 
	#MSK3
 0xbfÁffffU

	)

47 
	#MSK4
 0xbffffff6U

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0x00000000U

	)

51 
	#PARITY4
 0x13c9e684U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8}

	)

75 
	#ALTI_SL2_PERM64
 {1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-19937:122-18-1-11-1:dffff„f-dd„cb7f-bfÁffff-bffffff6"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params216091.h

36 #i‚de‡
SFMT_PARAMS216091_H


37 
	#SFMT_PARAMS216091_H


	)

39 
	#POS1
 627

	)

40 
	#SL1
 11

	)

41 
	#SL2
 3

	)

42 
	#SR1
 10

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0xbff7bff7U

	)

45 
	#MSK2
 0xbfffffffU

	)

46 
	#MSK3
 0xbfffÁ7fU

	)

47 
	#MSK4
 0xffddfbfbU

	)

48 
	#PARITY1
 0xf8000001U

	)

49 
	#PARITY2
 0x89e80709U

	)

50 
	#PARITY3
 0x3bd2b64bU

	)

51 
	#PARITY4
 0x0c64b1e4U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10}

	)

75 
	#ALTI_SL2_PERM64
 {3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-216091:627-11-3-10-1:bff7bff7-bfffffff-bfffÁ7f-ffddfbfb"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params2281.h

36 #i‚de‡
SFMT_PARAMS2281_H


37 
	#SFMT_PARAMS2281_H


	)

39 
	#POS1
 12

	)

40 
	#SL1
 19

	)

41 
	#SL2
 1

	)

42 
	#SR1
 5

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0xbff7ffbfU

	)

45 
	#MSK2
 0xfdffff„U

	)

46 
	#MSK3
 0xf7f„f7fU

	)

47 
	#MSK4
 0xf2f7cbbfU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0x00000000U

	)

51 
	#PARITY4
 0x41dÁ600U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8}

	)

75 
	#ALTI_SL2_PERM64
 {1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-2281:12-19-1-5-1:bff7ffbf-fdffff„-f7f„f7f-f2f7cbbf"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params4253.h

36 #i‚de‡
SFMT_PARAMS4253_H


37 
	#SFMT_PARAMS4253_H


	)

39 
	#POS1
 17

	)

40 
	#SL1
 20

	)

41 
	#SL2
 1

	)

42 
	#SR1
 7

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0x9f7bffffU

	)

45 
	#MSK2
 0x9fffff5fU

	)

46 
	#MSK3
 0x3efffffbU

	)

47 
	#MSK4
 0xfffff7bbU

	)

48 
	#PARITY1
 0xa8000001U

	)

49 
	#PARITY2
 0xaf5390a3U

	)

50 
	#PARITY3
 0xb740b3f8U

	)

51 
	#PARITY4
 0x6c11486dU

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {1,2,3,23,5,6,7,0,9,10,11,4,13,14,15,8}

	)

75 
	#ALTI_SL2_PERM64
 {1,2,3,4,5,6,7,31,9,10,11,12,13,14,15,0}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-4253:17-20-1-7-1:9f7bffff-9fffff5f-3efffffb-fffff7bb"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params44497.h

36 #i‚de‡
SFMT_PARAMS44497_H


37 
	#SFMT_PARAMS44497_H


	)

39 
	#POS1
 330

	)

40 
	#SL1
 5

	)

41 
	#SL2
 3

	)

42 
	#SR1
 9

	)

43 
	#SR2
 3

	)

44 
	#MSK1
 0xeffffffbU

	)

45 
	#MSK2
 0xdfbebfffU

	)

46 
	#MSK3
 0xbfbf7befU

	)

47 
	#MSK4
 0x9ffd7bffU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0xa3ac4000U

	)

51 
	#PARITY4
 0xecc1327aU

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(5,6,7,0,9,10,11,4,13,14,15,8,19,19,19,12)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(13,14,15,0,1,2,3,4,19,19,19,8,9,10,11,12)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10}

	)

75 
	#ALTI_SL2_PERM64
 {3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2}

	)

76 
	#ALTI_SR2_PERM
 {5,6,7,0,9,10,11,4,13,14,15,8,19,19,19,12}

	)

77 
	#ALTI_SR2_PERM64
 {13,14,15,0,1,2,3,4,19,19,19,8,9,10,11,12}

	)

79 
	#IDSTR
 "SFMT-44497:330-5-3-9-3:effffffb-dfbebfff-bfbf7bef-9ffd7bff"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params607.h

36 #i‚de‡
SFMT_PARAMS607_H


37 
	#SFMT_PARAMS607_H


	)

39 
	#POS1
 2

	)

40 
	#SL1
 15

	)

41 
	#SL2
 3

	)

42 
	#SR1
 13

	)

43 
	#SR2
 3

	)

44 
	#MSK1
 0xfdff37ffU

	)

45 
	#MSK2
 0xef7f3f7dU

	)

46 
	#MSK3
 0xff777b7dU

	)

47 
	#MSK4
 0x7ff7fb2fU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0x00000000U

	)

51 
	#PARITY4
 0x5986f054U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(5,6,7,0,9,10,11,4,13,14,15,8,19,19,19,12)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(13,14,15,0,1,2,3,4,19,19,19,8,9,10,11,12)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {3,21,21,21,7,0,1,2,11,4,5,6,15,8,9,10}

	)

75 
	#ALTI_SL2_PERM64
 {3,4,5,6,7,29,29,29,11,12,13,14,15,0,1,2}

	)

76 
	#ALTI_SR2_PERM
 {5,6,7,0,9,10,11,4,13,14,15,8,19,19,19,12}

	)

77 
	#ALTI_SR2_PERM64
 {13,14,15,0,1,2,3,4,19,19,19,8,9,10,11,12}

	)

79 
	#IDSTR
 "SFMT-607:2-15-3-13-3:fdff37ff-ef7f3f7d-ff777b7d-7ff7fb2f"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-params86243.h

36 #i‚de‡
SFMT_PARAMS86243_H


37 
	#SFMT_PARAMS86243_H


	)

39 
	#POS1
 366

	)

40 
	#SL1
 6

	)

41 
	#SL2
 7

	)

42 
	#SR1
 19

	)

43 
	#SR2
 1

	)

44 
	#MSK1
 0xfdbffbffU

	)

45 
	#MSK2
 0xbff7ff3fU

	)

46 
	#MSK3
 0xfd77efffU

	)

47 
	#MSK4
 0xbf9ff3ffU

	)

48 
	#PARITY1
 0x00000001U

	)

49 
	#PARITY2
 0x00000000U

	)

50 
	#PARITY3
 0x00000000U

	)

51 
	#PARITY4
 0xe9528d85U

	)

55 #i‡
deföed
(
__APPLE__
)

56 
	#ALTI_SL1
 (
ve˘‹
 )(
SL1
, SL1, SL1, SL1)

	)

57 
	#ALTI_SR1
 (
ve˘‹
 )(
SR1
, SR1, SR1, SR1)

	)

58 
	#ALTI_MSK
 (
ve˘‹
 )(
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
)

	)

59 
	#ALTI_MSK64
 \

60 (
ve˘‹
 )(
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
)

	)

61 
	#ALTI_SL2_PERM
 \

62 (
ve˘‹
 )(25,25,25,25,3,25,25,25,7,0,1,2,11,4,5,6)

	)

63 
	#ALTI_SL2_PERM64
 \

64 (
ve˘‹
 )(7,25,25,25,25,25,25,25,15,0,1,2,3,4,5,6)

	)

65 
	#ALTI_SR2_PERM
 \

66 (
ve˘‹
 )(7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14)

	)

67 
	#ALTI_SR2_PERM64
 \

68 (
ve˘‹
 )(15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14)

	)

70 
	#ALTI_SL1
 {
SL1
, SL1, SL1, SL1}

	)

71 
	#ALTI_SR1
 {
SR1
, SR1, SR1, SR1}

	)

72 
	#ALTI_MSK
 {
MSK1
, 
MSK2
, 
MSK3
, 
MSK4
}

	)

73 
	#ALTI_MSK64
 {
MSK2
, 
MSK1
, 
MSK4
, 
MSK3
}

	)

74 
	#ALTI_SL2_PERM
 {25,25,25,25,3,25,25,25,7,0,1,2,11,4,5,6}

	)

75 
	#ALTI_SL2_PERM64
 {7,25,25,25,25,25,25,25,15,0,1,2,3,4,5,6}

	)

76 
	#ALTI_SR2_PERM
 {7,0,1,2,11,4,5,6,15,8,9,10,17,12,13,14}

	)

77 
	#ALTI_SR2_PERM64
 {15,0,1,2,3,4,5,6,17,8,9,10,11,12,13,14}

	)

79 
	#IDSTR
 "SFMT-86243:366-6-7-19-1:fdbffbff-bff7ff3f-fd77efff-bf9ff3ff"

	)

	@dep/jemalloc-4.2.0/test/include/test/SFMT-sse2.h

51 #i‚de‡
SFMT_SSE2_H


52 
	#SFMT_SSE2_H


	)

63 
JEMALLOC_ALWAYS_INLINE
 
__m128i
 
	$mm_ªcursi⁄
(
__m128i
 *
a
, __m128ò*
b
,

64 
__m128i
 
c
, __m128ò
d
, __m128ò
mask
) {

65 
__m128i
 
v
, 
x
, 
y
, 
z
;

67 
x
 = 
	`_mm_lﬂd_si128
(
a
);

68 
y
 = 
	`_mm_§li_ïi32
(*
b
, 
SR1
);

69 
z
 = 
	`_mm_§li_si128
(
c
, 
SR2
);

70 
v
 = 
	`_mm_¶li_ïi32
(
d
, 
SL1
);

71 
z
 = 
	`_mm_x‹_si128
(z, 
x
);

72 
z
 = 
	`_mm_x‹_si128
(z, 
v
);

73 
x
 = 
	`_mm_¶li_si128
(x, 
SL2
);

74 
y
 = 
	`_mm_™d_si128
(y, 
mask
);

75 
z
 = 
	`_mm_x‹_si128
(z, 
x
);

76 
z
 = 
	`_mm_x‹_si128
(z, 
y
);

77  
z
;

78 
	}
}

84 
JEMALLOC_INLINE
 
	$gí_ønd_Æl
(
sfmt_t
 *
˘x
) {

85 
i
;

86 
__m128i
 
r
, 
r1
, 
r2
, 
mask
;

87 
mask
 = 
	`_mm_£t_ïi32
(
MSK4
, 
MSK3
, 
MSK2
, 
MSK1
);

89 
r1
 = 
	`_mm_lﬂd_si128
(&
˘x
->
sfmt
[
N
 - 2].
si
);

90 
r2
 = 
	`_mm_lﬂd_si128
(&
˘x
->
sfmt
[
N
 - 1].
si
);

91 
i
 = 0; i < 
N
 - 
POS1
; i++) {

92 
r
 = 
	`mm_ªcursi⁄
(&
˘x
->
sfmt
[
i
].
si
, &˘x->sfmt[ò+ 
POS1
].si, 
r1
, 
r2
,

93 
mask
);

94 
	`_mm_°‹e_si128
(&
˘x
->
sfmt
[
i
].
si
, 
r
);

95 
r1
 = 
r2
;

96 
r2
 = 
r
;

98 ; 
i
 < 
N
; i++) {

99 
r
 = 
	`mm_ªcursi⁄
(&
˘x
->
sfmt
[
i
].
si
, &˘x->sfmt[ò+ 
POS1
 - 
N
].si, 
r1
, 
r2
,

100 
mask
);

101 
	`_mm_°‹e_si128
(&
˘x
->
sfmt
[
i
].
si
, 
r
);

102 
r1
 = 
r2
;

103 
r2
 = 
r
;

105 
	}
}

114 
JEMALLOC_INLINE
 
	$gí_ønd_¨øy
(
sfmt_t
 *
˘x
, 
w128_t
 *
¨øy
, 
size
) {

115 
i
, 
j
;

116 
__m128i
 
r
, 
r1
, 
r2
, 
mask
;

117 
mask
 = 
	`_mm_£t_ïi32
(
MSK4
, 
MSK3
, 
MSK2
, 
MSK1
);

119 
r1
 = 
	`_mm_lﬂd_si128
(&
˘x
->
sfmt
[
N
 - 2].
si
);

120 
r2
 = 
	`_mm_lﬂd_si128
(&
˘x
->
sfmt
[
N
 - 1].
si
);

121 
i
 = 0; i < 
N
 - 
POS1
; i++) {

122 
r
 = 
	`mm_ªcursi⁄
(&
˘x
->
sfmt
[
i
].
si
, &˘x->sfmt[ò+ 
POS1
].si, 
r1
, 
r2
,

123 
mask
);

124 
	`_mm_°‹e_si128
(&
¨øy
[
i
].
si
, 
r
);

125 
r1
 = 
r2
;

126 
r2
 = 
r
;

128 ; 
i
 < 
N
; i++) {

129 
r
 = 
	`mm_ªcursi⁄
(&
˘x
->
sfmt
[
i
].
si
, &
¨øy
[ò+ 
POS1
 - 
N
].si, 
r1
, 
r2
,

130 
mask
);

131 
	`_mm_°‹e_si128
(&
¨øy
[
i
].
si
, 
r
);

132 
r1
 = 
r2
;

133 
r2
 = 
r
;

136 ; 
i
 < 
size
 - 
N
; i++) {

137 
r
 = 
	`mm_ªcursi⁄
(&
¨øy
[
i
 - 
N
].
si
, &¨øy[ò+ 
POS1
 - N].si, 
r1
, 
r2
,

138 
mask
);

139 
	`_mm_°‹e_si128
(&
¨øy
[
i
].
si
, 
r
);

140 
r1
 = 
r2
;

141 
r2
 = 
r
;

143 
j
 = 0; j < 2 * 
N
 - 
size
; j++) {

144 
r
 = 
	`_mm_lﬂd_si128
(&
¨øy
[
j
 + 
size
 - 
N
].
si
);

145 
	`_mm_°‹e_si128
(&
˘x
->
sfmt
[
j
].
si
, 
r
);

147 ; 
i
 < 
size
; i++) {

148 
r
 = 
	`mm_ªcursi⁄
(&
¨øy
[
i
 - 
N
].
si
, &¨øy[ò+ 
POS1
 - N].si, 
r1
, 
r2
,

149 
mask
);

150 
	`_mm_°‹e_si128
(&
¨øy
[
i
].
si
, 
r
);

151 
	`_mm_°‹e_si128
(&
˘x
->
sfmt
[
j
++].
si
, 
r
);

152 
r1
 = 
r2
;

153 
r2
 = 
r
;

155 
	}
}

	@dep/jemalloc-4.2.0/test/include/test/SFMT.h

66 #i‚de‡
SFMT_H


67 
	#SFMT_H


	)

69 
sfmt_s
 
	tsfmt_t
;

71 
uöt32_t
 
gí_ønd32
(
sfmt_t
 *
˘x
);

72 
uöt32_t
 
gí_ønd32_ønge
(
sfmt_t
 *
˘x
, uöt32_à
limô
);

73 
uöt64_t
 
gí_ønd64
(
sfmt_t
 *
˘x
);

74 
uöt64_t
 
gí_ønd64_ønge
(
sfmt_t
 *
˘x
, uöt64_à
limô
);

75 
fûl_¨øy32
(
sfmt_t
 *
˘x
, 
uöt32_t
 *
¨øy
, 
size
);

76 
fûl_¨øy64
(
sfmt_t
 *
˘x
, 
uöt64_t
 *
¨øy
, 
size
);

77 
sfmt_t
 *
öô_gí_ønd
(
uöt32_t
 
£ed
);

78 
sfmt_t
 *
öô_by_¨øy
(
uöt32_t
 *
öô_key
, 
key_Àngth
);

79 
föi_gí_ønd
(
sfmt_t
 *
˘x
);

80 c⁄° *
gë_id°rög
();

81 
gë_mö_¨øy_size32
();

82 
gë_mö_¨øy_size64
();

84 #i‚de‡
JEMALLOC_ENABLE_INLINE


85 
to_ªÆ1
(
uöt32_t
 
v
);

86 
gíønd_ªÆ1
(
sfmt_t
 *
˘x
);

87 
to_ªÆ2
(
uöt32_t
 
v
);

88 
gíønd_ªÆ2
(
sfmt_t
 *
˘x
);

89 
to_ªÆ3
(
uöt32_t
 
v
);

90 
gíønd_ªÆ3
(
sfmt_t
 *
˘x
);

91 
to_ªs53
(
uöt64_t
 
v
);

92 
to_ªs53_mix
(
uöt32_t
 
x
, uöt32_à
y
);

93 
gíønd_ªs53
(
sfmt_t
 *
˘x
);

94 
gíønd_ªs53_mix
(
sfmt_t
 *
˘x
);

97 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
SFMT_C_
))

100 
JEMALLOC_INLINE
 
	$to_ªÆ1
(
uöt32_t
 
v
)

102  
v
 * (1.0/4294967295.0);

104 
	}
}

107 
JEMALLOC_INLINE
 
	$gíønd_ªÆ1
(
sfmt_t
 *
˘x
)

109  
	`to_ªÆ1
(
	`gí_ønd32
(
˘x
));

110 
	}
}

113 
JEMALLOC_INLINE
 
	$to_ªÆ2
(
uöt32_t
 
v
)

115  
v
 * (1.0/4294967296.0);

117 
	}
}

120 
JEMALLOC_INLINE
 
	$gíønd_ªÆ2
(
sfmt_t
 *
˘x
)

122  
	`to_ªÆ2
(
	`gí_ønd32
(
˘x
));

123 
	}
}

126 
JEMALLOC_INLINE
 
	$to_ªÆ3
(
uöt32_t
 
v
)

128  ((()
v
) + 0.5)*(1.0/4294967296.0);

130 
	}
}

133 
JEMALLOC_INLINE
 
	$gíønd_ªÆ3
(
sfmt_t
 *
˘x
)

135  
	`to_ªÆ3
(
	`gí_ønd32
(
˘x
));

136 
	}
}

140 
JEMALLOC_INLINE
 
	$to_ªs53
(
uöt64_t
 
v
)

142  
v
 * (1.0/18446744073709551616.0L);

143 
	}
}

147 
JEMALLOC_INLINE
 
	$to_ªs53_mix
(
uöt32_t
 
x
, uöt32_à
y
)

149  
	`to_ªs53
(
x
 | ((
uöt64_t
)
y
 << 32));

150 
	}
}

154 
JEMALLOC_INLINE
 
	$gíønd_ªs53
(
sfmt_t
 *
˘x
)

156  
	`to_ªs53
(
	`gí_ønd64
(
˘x
));

157 
	}
}

162 
JEMALLOC_INLINE
 
	$gíønd_ªs53_mix
(
sfmt_t
 *
˘x
)

164 
uöt32_t
 
x
, 
y
;

166 
x
 = 
	`gí_ønd32
(
˘x
);

167 
y
 = 
	`gí_ønd32
(
˘x
);

168  
	`to_ªs53_mix
(
x
, 
y
);

169 
	}
}

	@dep/jemalloc-4.2.0/test/include/test/btalloc.h

2 *
bèŒoc
(
size_t
 
size
, 
bôs
);

4 
	#bèŒoc_n_¥Ÿo
(
n
) \

5 *
bèŒoc_
##
	`n
(
size_t
 
size
, 
bôs
);

	)

6 
	$bèŒoc_n_¥Ÿo
(0)

7 
	$bèŒoc_n_¥Ÿo
(1)

9 
	#bèŒoc_n_gí
(
n
) \

11 
bèŒoc_
##
	`n
(
size_t
 
size
, 
bôs
) \

13 *
p
; \

15 i‡(
bôs
 == 0) \

16 
p
 = 
	`mÆlocx
(
size
, 0); \

18 
bôs
 & 0x1U) { \

20 
p
 = (
	`bèŒoc_0
(
size
, 
bôs
 >> 1)); \

23 
p
 = (
	`bèŒoc_1
(
size
, 
bôs
 >> 1)); \

25 : 
	`nŸ_ªached
(); \

29 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure"); \

30  (
p
); \

31 
	}

	)
}

	@dep/jemalloc-4.2.0/test/include/test/jemalloc_test.h

1 
	~<limôs.h
>

2 #i‚de‡
SIZE_T_MAX


3 
	#SIZE_T_MAX
 
SIZE_MAX


	)

5 
	~<°dlib.h
>

6 
	~<°d¨g.h
>

7 
	~<°dboﬁ.h
>

8 
	~<î∫o.h
>

9 
	~<m©h.h
>

10 
	~<°rög.h
>

11 #ifde‡
_WIN32


12 
	~"msvc_com∑t/°rögs.h
"

15 #ifde‡
_WIN32


16 
	~<wödows.h
>

17 
	~"msvc_com∑t/wödows_exåa.h
"

19 
	~<±hªad.h
>

22 
	~"ã°/jemÆloc_ã°_defs.h
"

24 #ifde‡
JEMALLOC_OSSPIN


25 
	~<libkîn/OSAtomic.h
>

28 #i‡
deföed
(
HAVE_ALTIVEC
Ë&& !deföed(
__APPLE__
)

29 
	~<Ætivec.h
>

31 #ifde‡
HAVE_SSE2


32 
	~<emmöåö.h
>

39 #ifde‡
JEMALLOC_UNIT_TEST


40 
	#JEMALLOC_JET


	)

41 
	#JEMALLOC_MANGLE


	)

42 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

50 #ñi‡
deföed
(
JEMALLOC_INTEGRATION_TEST
)

51 
	#JEMALLOC_MANGLE


	)

52 
	~"jemÆloc/jemÆloc.h
"

53 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ_defs.h
"

54 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ_ma¸os.h
"

56 c⁄° 
boﬁ
 
	gc⁄fig_debug
 =

57 #ifde‡
JEMALLOC_DEBUG


58 
åue


60 
Ál£


64 
	#JEMALLOC_N
(
n
Ë
je_
##
	)
n

65 
	~"jemÆloc/öã∫Æ/¥iv©e_«me•a˚.h
"

67 
	#JEMALLOC_H_TYPES


	)

68 
	#JEMALLOC_H_STRUCTS


	)

69 
	#JEMALLOC_H_EXTERNS


	)

70 
	#JEMALLOC_H_INLINES


	)

71 
	~"jemÆloc/öã∫Æ/n°ime.h
"

72 
	~"jemÆloc/öã∫Æ/utû.h
"

73 
	~"jemÆloc/öã∫Æ/qr.h
"

74 
	~"jemÆloc/öã∫Æ/ql.h
"

75 #unde‡
JEMALLOC_H_TYPES


76 #unde‡
JEMALLOC_H_STRUCTS


77 #unde‡
JEMALLOC_H_EXTERNS


78 #unde‡
JEMALLOC_H_INLINES


87 #ñi‡
deföed
(
JEMALLOC_STRESS_TEST
)

88 
	~"jemÆloc/jemÆloc.h
"

90 
	~"jemÆloc/jemÆloc_¥Ÿos_jë.h
"

92 
	#JEMALLOC_JET


	)

93 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ.h
"

94 
	~"jemÆloc/öã∫Æ/public_u¬ame•a˚.h
"

95 #unde‡
JEMALLOC_JET


97 
	~"jemÆloc/jemÆloc_ª«me.h
"

98 
	#JEMALLOC_MANGLE


	)

99 #ifde‡
JEMALLOC_STRESS_TESTLIB


100 
	~"jemÆloc/jemÆloc_m™gÀ_jë.h
"

102 
	~"jemÆloc/jemÆloc_m™gÀ.h
"

118 
	~"ã°/bèŒoc.h
"

119 
	~"ã°/m©h.h
"

120 
	~"ã°/mtx.h
"

121 
	~"ã°/mq.h
"

122 
	~"ã°/ã°.h
"

123 
	~"ã°/timî.h
"

124 
	~"ã°/thd.h
"

125 
	#MEXP
 19937

	)

126 
	~"ã°/SFMT.h
"

133 #unde‡
as£π


134 #unde‡
nŸ_ªached


135 #unde‡
nŸ_im∂emíãd


136 #unde‡
as£π_nŸ_im∂emíãd


138 
	#as£π
(
e
) do { \

139 i‡(!(
e
)) { \

140 
	`mÆloc_¥ötf
( \

142 
__FILE__
, 
__LINE__
, #e); \

143 
	`ab‹t
(); \

145 } 0)

	)

147 
	#nŸ_ªached
() do { \

148 
	`mÆloc_¥ötf
( \

150 
__FILE__
, 
__LINE__
); \

151 
	`ab‹t
(); \

152 } 0)

	)

154 
	#nŸ_im∂emíãd
() do { \

155 
	`mÆloc_¥ötf
("<jemalloc>: %s:%d: Not implemented\n", \

156 
__FILE__
, 
__LINE__
); \

157 
	`ab‹t
(); \

158 } 0)

	)

160 
	#as£π_nŸ_im∂emíãd
(
e
) do { \

161 i‡(!(
e
)) \

162 
	`nŸ_im∂emíãd
(); \

163 } 0)

	)

	@dep/jemalloc-4.2.0/test/include/test/jemalloc_test_defs.h

2 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ_defs.h
"

3 
	~"jemÆloc/öã∫Æ/jemÆloc_öã∫Æ_de˛s.h
"

	@dep/jemalloc-4.2.0/test/include/test/math.h

1 #i‚de‡
JEMALLOC_ENABLE_INLINE


2 
 _gamma
(
x
);

3 
i_gamma
(
x
, 
p
, 
 _gamma_p
);

4 
±_n‹m
(
p
);

5 
±_chi2
(
p
, 
df
, 
 _gamma_df_2
);

6 
±_gamma
(
p
, 
sh≠e
, 
sˇÀ
, 
 _gamma_sh≠e
);

9 #i‡(
deföed
(
JEMALLOC_ENABLE_INLINE
Ë|| deföed(
MATH_C_
))

18 
JEMALLOC_INLINE
 

19 
	$ _gamma
(
x
)

21 
f
, 
z
;

23 
	`as£π
(
x
 > 0.0);

25 i‡(
x
 < 7.0) {

26 
f
 = 1.0;

27 
z
 = 
x
;

28 
z
 < 7.0) {

29 
f
 *
z
;

30 
z
 += 1.0;

32 
x
 = 
z
;

33 
f
 = -
	`log
(f);

35 
f
 = 0.0;

37 
z
 = 1.0 / (
x
 * x);

39  (
f
 + (
x
-0.5Ë* 
	`log
(x) - x + 0.918938533204673 +

40 (((-0.000595238095238 * 
z
 + 0.000793650793651) * z -

41 0.002777777777778Ë* 
z
 + 0.083333333333333Ë/ 
x
);

42 
	}
}

53 
JEMALLOC_INLINE
 

54 
	$i_gamma
(
x
, 
p
, 
 _gamma_p
)

56 
acu
, 
Á˘‹
, 
oÊo
, 
gö
, 
ãrm
, 
∫
, 
a
, 
b
, 
™
, 
dif
;

57 
≤
[6];

58 
i
;

60 
	`as£π
(
p
 > 0.0);

61 
	`as£π
(
x
 >= 0.0);

63 i‡(
x
 == 0.0)

66 
acu
 = 1.0e-10;

67 
oÊo
 = 1.0e30;

68 
gö
 = 0.0;

69 
Á˘‹
 = 
	`exp
(
p
 * 
	`log
(
x
Ë- x - 
 _gamma_p
);

71 i‡(
x
 <1.0 || x < 
p
) {

73 
gö
 = 1.0;

74 
ãrm
 = 1.0;

75 
∫
 = 
p
;

77 
åue
) {

78 
∫
 += 1.0;

79 
ãrm
 *
x
 / 
∫
;

80 
gö
 +
ãrm
;

81 i‡(
ãrm
 <
acu
) {

82 
gö
 *
Á˘‹
 / 
p
;

83  (
gö
);

88 
a
 = 1.0 - 
p
;

89 
b
 = 
a
 + 
x
 + 1.0;

90 
ãrm
 = 0.0;

91 
≤
[0] = 1.0;

92 
≤
[1] = 
x
;

93 
≤
[2] = 
x
 + 1.0;

94 
≤
[3] = 
x
 * 
b
;

95 
gö
 = 
≤
[2] /Ön[3];

97 
åue
) {

98 
a
 += 1.0;

99 
b
 += 2.0;

100 
ãrm
 += 1.0;

101 
™
 = 
a
 * 
ãrm
;

102 
i
 = 0; i < 2; i++)

103 
≤
[
i
+4] = 
b
 *Ön[i+2] - 
™
 *Ön[i];

104 i‡(
≤
[5] != 0.0) {

105 
∫
 = 
≤
[4] /Ön[5];

106 
dif
 = 
	`Ábs
(
gö
 - 
∫
);

107 i‡(
dif
 <
acu
 && di‡<acu * 
∫
) {

108 
gö
 = 1.0 - 
Á˘‹
 * gin;

109  (
gö
);

111 
gö
 = 
∫
;

113 
i
 = 0; i < 4; i++)

114 
≤
[
i
] =Ön[i+2];

116 i‡(
	`Ábs
(
≤
[4]Ë>
oÊo
) {

117 
i
 = 0; i < 4; i++)

118 
≤
[
i
] /
oÊo
;

122 
	}
}

134 
JEMALLOC_INLINE
 

135 
	$±_n‹m
(
p
)

137 
q
, 
r
, 
ªt
;

139 
	`as£π
(
p
 > 0.0 &&Ö < 1.0);

141 
q
 = 
p
 - 0.5;

142 i‡(
	`Ábs
(
q
) <= 0.425) {

144 
r
 = 0.180625 - 
q
 * q;

145  (
q
 * (((((((2.5090809287301226727e3 * 
r
 +

146 3.3430575583588128105e4Ë* 
r
 + 6.7265770927008700853e4) *Ñ

147 + 4.5921953931549871457e4Ë* 
r
 + 1.3731693765509461125e4) *

148 
r
 + 1.9715909503065514427e3) *Ñ + 1.3314166789178437745e2)

149 * 
r
 + 3.3871328727963666080e0) /

150 (((((((5.2264952788528545610e3 * 
r
 +

151 2.8729085735721942674e4Ë* 
r
 + 3.9307895800092710610e4) *Ñ

152 + 2.1213794301586595867e4Ë* 
r
 + 5.3941960214247511077e3) *

153 
r
 + 6.8718700749205790830e2) *Ñ + 4.2313330701600911252e1)

154 * 
r
 + 1.0));

156 i‡(
q
 < 0.0)

157 
r
 = 
p
;

159 
r
 = 1.0 - 
p
;

160 
	`as£π
(
r
 > 0.0);

162 
r
 = 
	`sqπ
(-
	`log
(r));

163 i‡(
r
 <= 5.0) {

165 
r
 -= 1.6;

166 
ªt
 = ((((((((7.74545014278341407640e-4 * 
r
 +

167 2.27238449892691845833e-2Ë* 
r
 +

168 2.41780725177450611770e-1Ë* 
r
 +

169 1.27045825245236838258e0Ë* 
r
 +

170 3.64784832476320460504e0Ë* 
r
 +

171 5.76949722146069140550e0Ë* 
r
 +

172 4.63033784615654529590e0Ë* 
r
 +

174 (((((((1.05075007164441684324e-9 * 
r
 +

175 5.47593808499534494600e-4Ë* 
r
 +

177 * 
r
 + 1.48103976427480074590e-1) *Ñ +

178 6.89767334985100004550e-1Ë* 
r
 +

179 1.67638483018380384940e0Ë* 
r
 +

180 2.05319162663775882187e0Ë* 
r
 + 1.0));

183 
r
 -= 5.0;

184 
ªt
 = ((((((((2.01033439929228813265e-7 * 
r
 +

185 2.71155556874348757815e-5Ë* 
r
 +

186 1.24266094738807843860e-3Ë* 
r
 +

187 2.65321895265761230930e-2Ë* 
r
 +

188 2.96560571828504891230e-1Ë* 
r
 +

189 1.78482653991729133580e0Ë* 
r
 +

190 5.46378491116411436990e0Ë* 
r
 +

192 (((((((2.04426310338993978564e-15 * 
r
 +

193 1.42151175831644588870e-7Ë* 
r
 +

194 1.84631831751005468180e-5Ë* 
r
 +

195 7.86869131145613259100e-4Ë* 
r
 +

196 1.48753612908506148525e-2Ë* 
r
 +

197 1.36929880922735805310e-1Ë* 
r
 +

199 * 
r
 + 1.0));

201 i‡(
q
 < 0.0)

202 
ªt
 = -ret;

203  (
ªt
);

205 
	}
}

221 
JEMALLOC_INLINE
 

222 
	$±_chi2
(
p
, 
df
, 
 _gamma_df_2
)

224 
e
, 
Ø
, 
xx
, 
c
, 
ch
, 
a
, 
q
, 
p1
, 
p2
, 
t
, 
x
, 
b
, 
s1
, 
s2
, 
s3
, 
s4
, 
s5
, 
s6
;

225 
i
;

227 
	`as£π
(
p
 >= 0.0 &&Ö < 1.0);

228 
	`as£π
(
df
 > 0.0);

230 
e
 = 5.0e-7;

231 
Ø
 = 0.6931471805;

233 
xx
 = 0.5 * 
df
;

234 
c
 = 
xx
 - 1.0;

236 i‡(
df
 < -1.24 * 
	`log
(
p
)) {

238 
ch
 = 
	`pow
(
p
 * 
xx
 * 
	`exp
(
 _gamma_df_2
 + xx * 
Ø
), 1.0 / xx);

239 i‡(
ch
 - 
e
 < 0.0)

240  (
ch
);

242 i‡(
df
 > 0.32) {

243 
x
 = 
	`±_n‹m
(
p
);

248 
p1
 = 0.222222 / 
df
;

249 
ch
 = 
df
 * 
	`pow
(
x
 * 
	`sqπ
(
p1
) + 1.0 -Ö1, 3.0);

251 i‡(
ch
 > 2.2 * 
df
 + 6.0) {

252 
ch
 = -2.0 * (
	`log
(1.0 - 
p
Ë- 
c
 *Üog(0.5 * ch) +

253 
 _gamma_df_2
);

256 
ch
 = 0.4;

257 
a
 = 
	`log
(1.0 - 
p
);

258 
åue
) {

259 
q
 = 
ch
;

260 
p1
 = 1.0 + 
ch
 * (4.67 + ch);

261 
p2
 = 
ch
 * (6.73 + ch * (6.66 + ch));

262 
t
 = -0.5 + (4.67 + 2.0 * 
ch
Ë/ 
p1
 - (6.73 + ch

263 * (13.32 + 3.0 * 
ch
)Ë/ 
p2
;

264 
ch
 -(1.0 - 
	`exp
(
a
 + 
 _gamma_df_2
 + 0.5 * ch +

265 
c
 * 
Ø
Ë* 
p2
 / 
p1
Ë/ 
t
;

266 i‡(
	`Ábs
(
q
 / 
ch
 - 1.0) - 0.01 <= 0.0)

272 
i
 = 0; i < 20; i++) {

274 
q
 = 
ch
;

275 
p1
 = 0.5 * 
ch
;

276 i‡(
p1
 < 0.0)

278 
p2
 = 
p
 - 
	`i_gamma
(
p1
, 
xx
, 
 _gamma_df_2
);

279 
t
 = 
p2
 * 
	`exp
(
xx
 * 
Ø
 + 
 _gamma_df_2
 + 
p1
 - 
c
 * 
	`log
(
ch
));

280 
b
 = 
t
 / 
ch
;

281 
a
 = 0.5 * 
t
 - 
b
 * 
c
;

282 
s1
 = (210.0 + 
a
 * (140.0 +á * (105.0 +á * (84.0 +á * (70.0 +

283 60.0 * 
a
))))) / 420.0;

284 
s2
 = (420.0 + 
a
 * (735.0 +á * (966.0 +á * (1141.0 + 1278.0 *

285 
a
)))) / 2520.0;

286 
s3
 = (210.0 + 
a
 * (462.0 +á * (707.0 + 932.0 *á))) / 2520.0;

287 
s4
 = (252.0 + 
a
 * (672.0 + 1182.0 *áË+ 
c
 * (294.0 +á *

288 (889.0 + 1740.0 * 
a
))) / 5040.0;

289 
s5
 = (84.0 + 264.0 * 
a
 + 
c
 * (175.0 + 606.0 *á)) / 2520.0;

290 
s6
 = (120.0 + 
c
 * (346.0 + 127.0 * c)) / 5040.0;

291 
ch
 +
t
 * (1.0 + 0.5 *Å * 
s1
 - 
b
 * 
c
 * (s1 - b * (
s2
 - b * (
s3


292 - 
b
 * (
s4
 - b * (
s5
 - b * 
s6
))))));

293 i‡(
	`Ábs
(
q
 / 
ch
 - 1.0Ë<
e
)

297  (
ch
);

298 
	}
}

305 
JEMALLOC_INLINE
 

306 
	$±_gamma
(
p
, 
sh≠e
, 
sˇÀ
, 
 _gamma_sh≠e
)

309  (
	`±_chi2
(
p
, 
sh≠e
 * 2.0, 
 _gamma_sh≠e
Ë* 0.5 * 
sˇÀ
);

310 
	}
}

	@dep/jemalloc-4.2.0/test/include/test/mq.h

1 
mq_«no¶ìp
(
ns
);

29 
	#mq_msg
(
a_mq_msg_ty≥
Ë
	`ql_ñm
◊_mq_msg_ty≥)

	)

31 
	#mq_gí
(
a_©å
, 
a_¥efix
, 
a_mq_ty≥
, 
a_mq_msg_ty≥
, 
a_fõld
) \

33 
mtx_t
 
lock
; \

34 
	`ql_hód
(
a_mq_msg_ty≥
Ë
msgs
; \

35 
cou¡
; \

36 } 
	ta_mq_ty≥
; \

37 
a_©å
 
boﬁ
 \

38 
a_¥efix
##
	`öô
(
a_mq_ty≥
 *
mq
) { \

40 i‡(
	`mtx_öô
(&
mq
->
lock
)) \

41  (
åue
); \

42 
	`ql_√w
(&
mq
->
msgs
); \

43 
mq
->
cou¡
 = 0; \

44  (
Ál£
); \

46 
a_©å
 \

47 
a_¥efix
##
	`föi
(
a_mq_ty≥
 *
mq
) \

50 
	`mtx_föi
(&
mq
->
lock
); \

52 
a_©å
 \

53 
a_¥efix
##
	`cou¡
(
a_mq_ty≥
 *
mq
) \

55 
cou¡
; \

57 
	`mtx_lock
(&
mq
->
lock
); \

58 
cou¡
 = 
mq
->count; \

59 
	`mtx_u∆ock
(&
mq
->
lock
); \

60  (
cou¡
); \

62 
a_©å
 
a_mq_msg_ty≥
 * \

63 
a_¥efix
##
	`åygë
(
a_mq_ty≥
 *
mq
) \

65 
a_mq_msg_ty≥
 *
msg
; \

67 
	`mtx_lock
(&
mq
->
lock
); \

68 
msg
 = 
	`ql_fú°
(&
mq
->
msgs
); \

69 i‡(
msg
 !
NULL
) { \

70 
	`ql_hód_ªmove
(&
mq
->
msgs
, 
a_mq_msg_ty≥
, 
a_fõld
); \

71 
mq
->
cou¡
--; \

73 
	`mtx_u∆ock
(&
mq
->
lock
); \

74  (
msg
); \

76 
a_©å
 
a_mq_msg_ty≥
 * \

77 
a_¥efix
##
	`gë
(
a_mq_ty≥
 *
mq
) \

79 
a_mq_msg_ty≥
 *
msg
; \

80 
ns
; \

82 
msg
 = 
a_¥efix
##
	`åygë
(
mq
); \

83 i‡(
msg
 !
NULL
) \

84  (
msg
); \

86 
ns
 = 1; \

87 
åue
) { \

88 
	`mq_«no¶ìp
(
ns
); \

89 
msg
 = 
a_¥efix
##
	`åygë
(
mq
); \

90 i‡(
msg
 !
NULL
) \

91  (
msg
); \

92 i‡(
ns
 < 1000*1000*1000) { \

94 
ns
 <<= 1; \

95 i‡(
ns
 > 1000*1000*1000) \

96 
ns
 = 1000*1000*1000; \

100 
a_©å
 \

101 
a_¥efix
##
	`put
(
a_mq_ty≥
 *
mq
, 
a_mq_msg_ty≥
 *
msg
) \

104 
	`mtx_lock
(&
mq
->
lock
); \

105 
	`ql_ñm_√w
(
msg
, 
a_fõld
); \

106 
	`ql_èû_ö£π
(&
mq
->
msgs
, 
msg
, 
a_fõld
); \

107 
mq
->
cou¡
++; \

108 
	`mtx_u∆ock
(&
mq
->
lock
); \

109 }

	)

	@dep/jemalloc-4.2.0/test/include/test/mtx.h

9 #ifde‡
_WIN32


10 
CRITICAL_SECTION
 
	mlock
;

11 #ñi‡(
deföed
(
JEMALLOC_OSSPIN
))

12 
OSSpöLock
 
	mlock
;

14 
±hªad_muãx_t
 
	mlock
;

16 } 
	tmtx_t
;

18 
boﬁ
 
mtx_öô
(
mtx_t
 *
mtx
);

19 
mtx_föi
(
mtx_t
 *
mtx
);

20 
mtx_lock
(
mtx_t
 *
mtx
);

21 
mtx_u∆ock
(
mtx_t
 *
mtx
);

	@dep/jemalloc-4.2.0/test/include/test/test.h

1 
	#ASSERT_BUFSIZE
 256

	)

3 
	#as£π_cmp
(
t
, 
a
, 
b
, 
cmp
, 
√g_cmp
, 
¥i
, ...) do { \

4 
t
 
a_
 = (
a
); \

5 
t
 
b_
 = (
b
); \

6 i‡(!(
a_
 
cmp
 
b_
)) { \

7 
¥efix
[
ASSERT_BUFSIZE
]; \

8 
mesßge
[
ASSERT_BUFSIZE
]; \

9 
	`mÆloc_¢¥ötf
(
¥efix
, (prefix), \

12 "%"
¥i
" "#neg_cmp" %"pri": ", \

13 
__func__
, 
__FILE__
, 
__LINE__
, \

14 #a, #b, 
a_
, 
b_
); \

15 
	`mÆloc_¢¥ötf
(
mesßge
, (mesßge), 
__VA_ARGS__
); \

16 
	`p_ã°_Áû
(
¥efix
, 
mesßge
); \

18 } 0)

	)

20 
	#as£π_±r_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(*,á, b, ==, \

21 !=, "p", 
__VA_ARGS__
)

	)

22 
	#as£π_±r_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(*,á, b, !=, \

23 ==, "p", 
__VA_ARGS__
)

	)

24 
	#as£π_±r_nuŒ
(
a
, ...Ë
	`as£π_cmp
(*,á, 
NULL
, ==, \

25 !=, "p", 
__VA_ARGS__
)

	)

26 
	#as£π_±r_nŸ_nuŒ
(
a
, ...Ë
	`as£π_cmp
(*,á, 
NULL
, !=, \

27 ==, "p", 
__VA_ARGS__
)

	)

29 
	#as£π_c_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, ==, !=, "c", 
__VA_ARGS__
)

	)

30 
	#as£π_c_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, !=, ==, "c", 
__VA_ARGS__
)

	)

31 
	#as£π_c_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <, >=, "c", 
__VA_ARGS__
)

	)

32 
	#as£π_c_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <=, >, "c", 
__VA_ARGS__
)

	)

33 
	#as£π_c_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >=, <, "c", 
__VA_ARGS__
)

	)

34 
	#as£π_c_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >, <=, "c", 
__VA_ARGS__
)

	)

36 
	#as£π_x_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, ==, !=, "#x", 
__VA_ARGS__
)

	)

37 
	#as£π_x_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, !=, ==, "#x", 
__VA_ARGS__
)

	)

38 
	#as£π_x_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <, >=, "#x", 
__VA_ARGS__
)

	)

39 
	#as£π_x_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <=, >, "#x", 
__VA_ARGS__
)

	)

40 
	#as£π_x_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >=, <, "#x", 
__VA_ARGS__
)

	)

41 
	#as£π_x_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >, <=, "#x", 
__VA_ARGS__
)

	)

43 
	#as£π_d_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, ==, !=, "d", 
__VA_ARGS__
)

	)

44 
	#as£π_d_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, !=, ==, "d", 
__VA_ARGS__
)

	)

45 
	#as£π_d_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <, >=, "d", 
__VA_ARGS__
)

	)

46 
	#as£π_d_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <=, >, "d", 
__VA_ARGS__
)

	)

47 
	#as£π_d_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >=, <, "d", 
__VA_ARGS__
)

	)

48 
	#as£π_d_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >, <=, "d", 
__VA_ARGS__
)

	)

50 
	#as£π_u_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, ==, !=, "u", 
__VA_ARGS__
)

	)

51 
	#as£π_u_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, !=, ==, "u", 
__VA_ARGS__
)

	)

52 
	#as£π_u_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <, >=, "u", 
__VA_ARGS__
)

	)

53 
	#as£π_u_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <=, >, "u", 
__VA_ARGS__
)

	)

54 
	#as£π_u_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >=, <, "u", 
__VA_ARGS__
)

	)

55 
	#as£π_u_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >, <=, "u", 
__VA_ARGS__
)

	)

57 
	#as£π_ld_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, ==, \

58 !=, "ld", 
__VA_ARGS__
)

	)

59 
	#as£π_ld_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, !=, \

60 ==, "ld", 
__VA_ARGS__
)

	)

61 
	#as£π_ld_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <, \

62 >=, "ld", 
__VA_ARGS__
)

	)

63 
	#as£π_ld_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <=, \

64 >, "ld", 
__VA_ARGS__
)

	)

65 
	#as£π_ld_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >=, \

66 <, "ld", 
__VA_ARGS__
)

	)

67 
	#as£π_ld_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >, \

68 <=, "ld", 
__VA_ARGS__
)

	)

70 
	#as£π_lu_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

71 
a
, 
b
, ==, !=, "lu", 
__VA_ARGS__
)

	)

72 
	#as£π_lu_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

73 
a
, 
b
, !=, ==, "lu", 
__VA_ARGS__
)

	)

74 
	#as£π_lu_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

75 
a
, 
b
, <, >=, "lu", 
__VA_ARGS__
)

	)

76 
	#as£π_lu_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

77 
a
, 
b
, <=, >, "lu", 
__VA_ARGS__
)

	)

78 
	#as£π_lu_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

79 
a
, 
b
, >=, <, "lu", 
__VA_ARGS__
)

	)

80 
	#as£π_lu_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

81 
a
, 
b
, >, <=, "lu", 
__VA_ARGS__
)

	)

83 
	#as£π_qd_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, ==, \

84 !=, "qd", 
__VA_ARGS__
)

	)

85 
	#as£π_qd_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, !=, \

86 ==, "qd", 
__VA_ARGS__
)

	)

87 
	#as£π_qd_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <, \

88 >=, "qd", 
__VA_ARGS__
)

	)

89 
	#as£π_qd_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, <=, \

90 >, "qd", 
__VA_ARGS__
)

	)

91 
	#as£π_qd_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >=, \

92 <, "qd", 
__VA_ARGS__
)

	)

93 
	#as£π_qd_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(,á, b, >, \

94 <=, "qd", 
__VA_ARGS__
)

	)

96 
	#as£π_qu_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

97 
a
, 
b
, ==, !=, "qu", 
__VA_ARGS__
)

	)

98 
	#as£π_qu_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

99 
a
, 
b
, !=, ==, "qu", 
__VA_ARGS__
)

	)

100 
	#as£π_qu_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

101 
a
, 
b
, <, >=, "qu", 
__VA_ARGS__
)

	)

102 
	#as£π_qu_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

103 
a
, 
b
, <=, >, "qu", 
__VA_ARGS__
)

	)

104 
	#as£π_qu_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

105 
a
, 
b
, >=, <, "qu", 
__VA_ARGS__
)

	)

106 
	#as£π_qu_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(, \

107 
a
, 
b
, >, <=, "qu", 
__VA_ARGS__
)

	)

109 
	#as£π_jd_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ötmax_t
,á, b, ==, \

110 !=, "jd", 
__VA_ARGS__
)

	)

111 
	#as£π_jd_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ötmax_t
,á, b, !=, \

112 ==, "jd", 
__VA_ARGS__
)

	)

113 
	#as£π_jd_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ötmax_t
,á, b, <, \

114 >=, "jd", 
__VA_ARGS__
)

	)

115 
	#as£π_jd_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ötmax_t
,á, b, <=, \

116 >, "jd", 
__VA_ARGS__
)

	)

117 
	#as£π_jd_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ötmax_t
,á, b, >=, \

118 <, "jd", 
__VA_ARGS__
)

	)

119 
	#as£π_jd_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ötmax_t
,á, b, >, \

120 <=, "jd", 
__VA_ARGS__
)

	)

122 
	#as£π_ju_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uötmax_t
,á, b, ==, \

123 !=, "ju", 
__VA_ARGS__
)

	)

124 
	#as£π_ju_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uötmax_t
,á, b, !=, \

125 ==, "ju", 
__VA_ARGS__
)

	)

126 
	#as£π_ju_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uötmax_t
,á, b, <, \

127 >=, "ju", 
__VA_ARGS__
)

	)

128 
	#as£π_ju_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uötmax_t
,á, b, <=, \

129 >, "ju", 
__VA_ARGS__
)

	)

130 
	#as£π_ju_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uötmax_t
,á, b, >=, \

131 <, "ju", 
__VA_ARGS__
)

	)

132 
	#as£π_ju_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uötmax_t
,á, b, >, \

133 <=, "ju", 
__VA_ARGS__
)

	)

135 
	#as£π_zd_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ssize_t
,á, b, ==, \

136 !=, "zd", 
__VA_ARGS__
)

	)

137 
	#as£π_zd_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ssize_t
,á, b, !=, \

138 ==, "zd", 
__VA_ARGS__
)

	)

139 
	#as£π_zd_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ssize_t
,á, b, <, \

140 >=, "zd", 
__VA_ARGS__
)

	)

141 
	#as£π_zd_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ssize_t
,á, b, <=, \

142 >, "zd", 
__VA_ARGS__
)

	)

143 
	#as£π_zd_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ssize_t
,á, b, >=, \

144 <, "zd", 
__VA_ARGS__
)

	)

145 
	#as£π_zd_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
ssize_t
,á, b, >, \

146 <=, "zd", 
__VA_ARGS__
)

	)

148 
	#as£π_zu_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
size_t
,á, b, ==, \

149 !=, "zu", 
__VA_ARGS__
)

	)

150 
	#as£π_zu_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
size_t
,á, b, !=, \

151 ==, "zu", 
__VA_ARGS__
)

	)

152 
	#as£π_zu_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
size_t
,á, b, <, \

153 >=, "zu", 
__VA_ARGS__
)

	)

154 
	#as£π_zu_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
size_t
,á, b, <=, \

155 >, "zu", 
__VA_ARGS__
)

	)

156 
	#as£π_zu_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
size_t
,á, b, >=, \

157 <, "zu", 
__VA_ARGS__
)

	)

158 
	#as£π_zu_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
size_t
,á, b, >, \

159 <=, "zu", 
__VA_ARGS__
)

	)

161 
	#as£π_d32_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt32_t
,á, b, ==, \

162 !=, 
FMTd32
, 
__VA_ARGS__
)

	)

163 
	#as£π_d32_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt32_t
,á, b, !=, \

164 ==, 
FMTd32
, 
__VA_ARGS__
)

	)

165 
	#as£π_d32_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt32_t
,á, b, <, \

166 >=, 
FMTd32
, 
__VA_ARGS__
)

	)

167 
	#as£π_d32_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt32_t
,á, b, <=, \

168 >, 
FMTd32
, 
__VA_ARGS__
)

	)

169 
	#as£π_d32_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt32_t
,á, b, >=, \

170 <, 
FMTd32
, 
__VA_ARGS__
)

	)

171 
	#as£π_d32_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt32_t
,á, b, >, \

172 <=, 
FMTd32
, 
__VA_ARGS__
)

	)

174 
	#as£π_u32_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt32_t
,á, b, ==, \

175 !=, 
FMTu32
, 
__VA_ARGS__
)

	)

176 
	#as£π_u32_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt32_t
,á, b, !=, \

177 ==, 
FMTu32
, 
__VA_ARGS__
)

	)

178 
	#as£π_u32_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt32_t
,á, b, <, \

179 >=, 
FMTu32
, 
__VA_ARGS__
)

	)

180 
	#as£π_u32_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt32_t
,á, b, <=, \

181 >, 
FMTu32
, 
__VA_ARGS__
)

	)

182 
	#as£π_u32_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt32_t
,á, b, >=, \

183 <, 
FMTu32
, 
__VA_ARGS__
)

	)

184 
	#as£π_u32_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt32_t
,á, b, >, \

185 <=, 
FMTu32
, 
__VA_ARGS__
)

	)

187 
	#as£π_d64_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt64_t
,á, b, ==, \

188 !=, 
FMTd64
, 
__VA_ARGS__
)

	)

189 
	#as£π_d64_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt64_t
,á, b, !=, \

190 ==, 
FMTd64
, 
__VA_ARGS__
)

	)

191 
	#as£π_d64_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt64_t
,á, b, <, \

192 >=, 
FMTd64
, 
__VA_ARGS__
)

	)

193 
	#as£π_d64_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt64_t
,á, b, <=, \

194 >, 
FMTd64
, 
__VA_ARGS__
)

	)

195 
	#as£π_d64_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt64_t
,á, b, >=, \

196 <, 
FMTd64
, 
__VA_ARGS__
)

	)

197 
	#as£π_d64_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
öt64_t
,á, b, >, \

198 <=, 
FMTd64
, 
__VA_ARGS__
)

	)

200 
	#as£π_u64_eq
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt64_t
,á, b, ==, \

201 !=, 
FMTu64
, 
__VA_ARGS__
)

	)

202 
	#as£π_u64_√
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt64_t
,á, b, !=, \

203 ==, 
FMTu64
, 
__VA_ARGS__
)

	)

204 
	#as£π_u64_…
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt64_t
,á, b, <, \

205 >=, 
FMTu64
, 
__VA_ARGS__
)

	)

206 
	#as£π_u64_À
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt64_t
,á, b, <=, \

207 >, 
FMTu64
, 
__VA_ARGS__
)

	)

208 
	#as£π_u64_ge
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt64_t
,á, b, >=, \

209 <, 
FMTu64
, 
__VA_ARGS__
)

	)

210 
	#as£π_u64_gt
(
a
, 
b
, ...Ë
	`as£π_cmp
(
uöt64_t
,á, b, >, \

211 <=, 
FMTu64
, 
__VA_ARGS__
)

	)

213 
	#as£π_b_eq
(
a
, 
b
, ...) do { \

214 
boﬁ
 
a_
 = (
a
); \

215 
boﬁ
 
b_
 = (
b
); \

216 i‡(!(
a_
 =
b_
)) { \

217 
¥efix
[
ASSERT_BUFSIZE
]; \

218 
mesßge
[
ASSERT_BUFSIZE
]; \

219 
	`mÆloc_¢¥ötf
(
¥efix
, (prefix), \

222 
__func__
, 
__FILE__
, 
__LINE__
, \

223 #a, #b, 
a_
 ? "true" : "false", \

224 
b_
 ? "true" : "false"); \

225 
	`mÆloc_¢¥ötf
(
mesßge
, (mesßge), 
__VA_ARGS__
); \

226 
	`p_ã°_Áû
(
¥efix
, 
mesßge
); \

228 } 0)

	)

229 
	#as£π_b_√
(
a
, 
b
, ...) do { \

230 
boﬁ
 
a_
 = (
a
); \

231 
boﬁ
 
b_
 = (
b
); \

232 i‡(!(
a_
 !
b_
)) { \

233 
¥efix
[
ASSERT_BUFSIZE
]; \

234 
mesßge
[
ASSERT_BUFSIZE
]; \

235 
	`mÆloc_¢¥ötf
(
¥efix
, (prefix), \

238 
__func__
, 
__FILE__
, 
__LINE__
, \

239 #a, #b, 
a_
 ? "true" : "false", \

240 
b_
 ? "true" : "false"); \

241 
	`mÆloc_¢¥ötf
(
mesßge
, (mesßge), 
__VA_ARGS__
); \

242 
	`p_ã°_Áû
(
¥efix
, 
mesßge
); \

244 } 0)

	)

245 
	#as£π_åue
(
a
, ...Ë
	`as£π_b_eq
◊, 
åue
, 
__VA_ARGS__
)

	)

246 
	#as£π_Ál£
(
a
, ...Ë
	`as£π_b_eq
◊, 
Ál£
, 
__VA_ARGS__
)

	)

248 
	#as£π_°r_eq
(
a
, 
b
, ...) do { \

249 i‡(
	`°rcmp
((
a
), (
b
))) { \

250 
¥efix
[
ASSERT_BUFSIZE
]; \

251 
mesßge
[
ASSERT_BUFSIZE
]; \

252 
	`mÆloc_¢¥ötf
(
¥efix
, (prefix), \

256 
__func__
, 
__FILE__
, 
__LINE__
, #a, #b, 
a
, 
b
); \

257 
	`mÆloc_¢¥ötf
(
mesßge
, (mesßge), 
__VA_ARGS__
); \

258 
	`p_ã°_Áû
(
¥efix
, 
mesßge
); \

260 } 0)

	)

261 
	#as£π_°r_√
(
a
, 
b
, ...) do { \

262 i‡(!
	`°rcmp
((
a
), (
b
))) { \

263 
¥efix
[
ASSERT_BUFSIZE
]; \

264 
mesßge
[
ASSERT_BUFSIZE
]; \

265 
	`mÆloc_¢¥ötf
(
¥efix
, (prefix), \

269 
__func__
, 
__FILE__
, 
__LINE__
, #a, #b, 
a
, 
b
); \

270 
	`mÆloc_¢¥ötf
(
mesßge
, (mesßge), 
__VA_ARGS__
); \

271 
	`p_ã°_Áû
(
¥efix
, 
mesßge
); \

273 } 0)

	)

275 
	#as£π_nŸ_ªached
(...) do { \

276 
¥efix
[
ASSERT_BUFSIZE
]; \

277 
mesßge
[
ASSERT_BUFSIZE
]; \

278 
	`mÆloc_¢¥ötf
(
¥efix
, (prefix), \

280 
__func__
, 
__FILE__
, 
__LINE__
); \

281 
	`mÆloc_¢¥ötf
(
mesßge
, (mesßge), 
__VA_ARGS__
); \

282 
	`p_ã°_Áû
(
¥efix
, 
mesßge
); \

283 } 0)

	)

290 
	mã°_°©us_∑ss
 = 0,

291 
	mã°_°©us_skù
 = 1,

292 
	mã°_°©us_Áû
 = 2,

294 
	mã°_°©us_cou¡
 = 3

295 } 
	tã°_°©us_t
;

297 (
	tã°_t
)();

299 
	#TEST_BEGIN
(
f
) \

301 
	`f
() \

303 
	`p_ã°_öô
(#f);

	)

305 
	#TEST_END
 \

306 
œbñ_ã°_íd
; \

307 
œbñ_ã°_íd
: \

308 
	`p_ã°_föi
(); \

309 
	}

	)
}

311 
	#ã°
(...) \

312 
	`p_ã°
(
__VA_ARGS__
, 
NULL
)

	)

314 
	#ã°_no_mÆloc_öô
(...) \

315 
	`p_ã°_no_mÆloc_öô
(
__VA_ARGS__
, 
NULL
)

	)

317 
	#ã°_skù_if
(
e
) do { \

318 i‡(
e
) { \

319 
	`ã°_skù
("%s:%s:%d: Test skipped: (%s)", \

320 
__func__
, 
__FILE__
, 
__LINE__
, #e); \

321 
œbñ_ã°_íd
; \

323 } 0)

	)

325 
	$ã°_skù
(c⁄° *
f‹m©
, ...Ë
	`JEMALLOC_FORMAT_PRINTF
(1, 2);

326 
	$ã°_Áû
(c⁄° *
f‹m©
, ...Ë
	`JEMALLOC_FORMAT_PRINTF
(1, 2);

329 
ã°_°©us_t
 
	`p_ã°
(
ã°_t
 *
t
, ...);

330 
ã°_°©us_t
 
	`p_ã°_no_mÆloc_öô
(
ã°_t
 *
t
, ...);

331 
	`p_ã°_öô
(c⁄° *
«me
);

332 
	`p_ã°_föi
();

333 
	`p_ã°_Áû
(c⁄° *
¥efix
, c⁄° *
mesßge
);

	@dep/jemalloc-4.2.0/test/include/test/thd.h

2 #ifde‡
_WIN32


3 
HANDLE
 
	tthd_t
;

5 
±hªad_t
 
	tthd_t
;

8 
thd_¸óã
(
thd_t
 *
thd
, *(*
¥oc
)(*), *
¨g
);

9 
thd_joö
(
thd_t
 
thd
, **
ªt
);

	@dep/jemalloc-4.2.0/test/include/test/timer.h

4 
n°ime_t
 
	mt0
;

5 
n°ime_t
 
	mt1
;

6 } 
	ttimedñè_t
;

8 
timî_°¨t
(
timedñè_t
 *
timî
);

9 
timî_°›
(
timedñè_t
 *
timî
);

10 
uöt64_t
 
timî_u£c
(c⁄° 
timedñè_t
 *
timî
);

11 
timî_øtio
(
timedñè_t
 *
a
,Åimedñè_à*
b
, *
buf
, 
size_t
 
buÊí
);

	@dep/jemalloc-4.2.0/test/integration/MALLOCX_ARENA.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#NTHREADS
 10

	)

5 
boﬁ
 
	ghave_dss
 =

6 #ifde‡
JEMALLOC_DSS


7 
åue


9 
Ál£


14 
	$thd_°¨t
(*
¨g
)

16 
thªad_öd
 = ()(
uöçå_t
)
¨g
;

17 
¨ía_öd
;

18 *
p
;

19 
size_t
 
sz
;

21 
sz
 = (
¨ía_öd
);

22 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.exãnd", &
¨ía_öd
, &
sz
, 
NULL
, 0), 0,

25 i‡(
thªad_öd
 % 4 != 3) {

26 
size_t
 
mib
[3];

27 
size_t
 
mibÀn
 = (
mib
) / (size_t);

28 c⁄° *
dss_¥ecs
[] = {"disabled", "primary", "secondary"};

29 
¥ec_öd
 = 
thªad_öd
 %

30 ((
dss_¥ecs
)/(*));

31 c⁄° *
dss
 = 
dss_¥ecs
[
¥ec_öd
];

32 
ex≥˘ed_îr
 = (
have_dss
 || 
¥ec_öd
 =0Ë? 0 : 
EFAULT
;

33 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.dss", 
mib
, &
mibÀn
), 0,

35 
mib
[1] = 
¨ía_öd
;

36 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, (*)&
dss
,

37 (c⁄° *)), 
ex≥˘ed_îr
,

41 
p
 = 
	`mÆlocx
(1, 
	`MALLOCX_ARENA
(
¨ía_öd
));

42 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

43 
	`dÆlocx
(
p
, 0);

45  (
NULL
);

46 
	}
}

48 
	$TEST_BEGIN
(
ã°_MALLOCX_ARENA
)

50 
thd_t
 
thds
[
NTHREADS
];

51 
i
;

53 
i
 = 0; i < 
NTHREADS
; i++) {

54 
	`thd_¸óã
(&
thds
[
i
], 
thd_°¨t
,

55 (*)(
uöçå_t
)
i
);

58 
i
 = 0; i < 
NTHREADS
; i++)

59 
	`thd_joö
(
thds
[
i
], 
NULL
);

60 
	}
}

61 
TEST_END


64 
	$maö
()

67  (
	`ã°
(

68 
ã°_MALLOCX_ARENA
));

69 
	}
}

	@dep/jemalloc-4.2.0/test/integration/aligned_alloc.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#CHUNK
 0x400000

	)

5 
	#MAXALIGN
 ((
size_t
)0x2000000LU)

	)

6 
	#NITER
 4

	)

8 
	$TEST_BEGIN
(
ã°_Æignmít_îr‹s
)

10 
size_t
 
Æignmít
;

11 *
p
;

13 
Æignmít
 = 0;

14 
	`£t_î∫o
(0);

15 
p
 = 
	`Æig√d_Æloc
(
Æignmít
, 1);

16 
	`as£π_Ál£
(
p
 !
NULL
 || 
	`gë_î∫o
(Ë!
EINVAL
,

17 "Ex≥˘edÉº‹ f‹ invÆidálignmíà%zu", 
Æignmít
);

19 
Æignmít
 = (
size_t
);álignmíà< 
MAXALIGN
;

20 
Æignmít
 <<= 1) {

21 
	`£t_î∫o
(0);

22 
p
 = 
	`Æig√d_Æloc
(
Æignmít
 + 1, 1);

23 
	`as£π_Ál£
(
p
 !
NULL
 || 
	`gë_î∫o
(Ë!
EINVAL
,

25 
Æignmít
 + 1);

27 
	}
}

28 
TEST_END


30 
	$TEST_BEGIN
(
ã°_oom_îr‹s
)

32 
size_t
 
Æignmít
, 
size
;

33 *
p
;

35 #i‡
LG_SIZEOF_PTR
 == 3

36 
Æignmít
 = 
	`UINT64_C
(0x8000000000000000);

37 
size
 = 
	`UINT64_C
(0x8000000000000000);

39 
Æignmít
 = 0x80000000LU;

40 
size
 = 0x80000000LU;

42 
	`£t_î∫o
(0);

43 
p
 = 
	`Æig√d_Æloc
(
Æignmít
, 
size
);

44 
	`as£π_Ál£
(
p
 !
NULL
 || 
	`gë_î∫o
(Ë!
ENOMEM
,

46 
Æignmít
, 
size
);

48 #i‡
LG_SIZEOF_PTR
 == 3

49 
Æignmít
 = 
	`UINT64_C
(0x4000000000000000);

50 
size
 = 
	`UINT64_C
(0xc000000000000001);

52 
Æignmít
 = 0x40000000LU;

53 
size
 = 0xc0000001LU;

55 
	`£t_î∫o
(0);

56 
p
 = 
	`Æig√d_Æloc
(
Æignmít
, 
size
);

57 
	`as£π_Ál£
(
p
 !
NULL
 || 
	`gë_î∫o
(Ë!
ENOMEM
,

59 
Æignmít
, 
size
);

61 
Æignmít
 = 0x10LU;

62 #i‡
LG_SIZEOF_PTR
 == 3

63 
size
 = 
	`UINT64_C
(0xfffffffffffffff0);

65 
size
 = 0xfffffff0LU;

67 
	`£t_î∫o
(0);

68 
p
 = 
	`Æig√d_Æloc
(
Æignmít
, 
size
);

69 
	`as£π_Ál£
(
p
 !
NULL
 || 
	`gë_î∫o
(Ë!
ENOMEM
,

71 
Æignmít
, 
size
);

72 
	}
}

73 
TEST_END


75 
	$TEST_BEGIN
(
ã°_Æignmít_™d_size
)

77 
size_t
 
Æignmít
, 
size
, 
tŸÆ
;

78 
i
;

79 *
ps
[
NITER
];

81 
i
 = 0; i < 
NITER
; i++)

82 
ps
[
i
] = 
NULL
;

84 
Æignmít
 = 8;

85 
Æignmít
 <
MAXALIGN
;

86 
Æignmít
 <<= 1) {

87 
tŸÆ
 = 0;

88 
size
 = 1;

89 
size
 < 3 * 
Æignmít
 && size < (1U << 31);

90 
size
 +(
Æignmít
 >> (
LG_SIZEOF_PTR
-1)) - 1) {

91 
i
 = 0; i < 
NITER
; i++) {

92 
ps
[
i
] = 
	`Æig√d_Æloc
(
Æignmít
, 
size
);

93 i‡(
ps
[
i
] =
NULL
) {

94 
buf
[
BUFERROR_BUF
];

96 
	`bu„º‹
(
	`gë_î∫o
(), 
buf
, (buf));

97 
	`ã°_Áû
(

100 
Æignmít
, 
size
, size, 
buf
);

102 
tŸÆ
 +
	`mÆloc_ußbÀ_size
(
ps
[
i
]);

103 i‡(
tŸÆ
 >(
MAXALIGN
 << 1))

106 
i
 = 0; i < 
NITER
; i++) {

107 i‡(
ps
[
i
] !
NULL
) {

108 
	`‰ì
(
ps
[
i
]);

109 
ps
[
i
] = 
NULL
;

114 
	}
}

115 
TEST_END


118 
	$maö
()

121  (
	`ã°
(

122 
ã°_Æignmít_îr‹s
,

123 
ã°_oom_îr‹s
,

124 
ã°_Æignmít_™d_size
));

125 
	}
}

	@dep/jemalloc-4.2.0/test/integration/allocated.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 c⁄° 
boﬁ
 
	gc⁄fig_°©s
 =

4 #ifde‡
JEMALLOC_STATS


5 
åue


7 
Ál£


12 
	$thd_°¨t
(*
¨g
)

14 
îr
;

15 *
p
;

16 
uöt64_t
 
a0
, 
a1
, 
d0
, 
d1
;

17 
uöt64_t
 *
≠0
, *
≠1
, *
dp0
, *
dp1
;

18 
size_t
 
sz
, 
usize
;

20 
sz
 = (
a0
);

21 i‡((
îr
 = 
	`mÆl˘l
("thªad.Æloˇãd", &
a0
, &
sz
, 
NULL
, 0))) {

22 i‡(
îr
 =
ENOENT
)

23 
œbñ_ENOENT
;

24 
	`ã°_Áû
("%s(): Eº‹ i¿mÆl˘l(): %s", 
__func__
,

25 
	`°ªº‹
(
îr
));

27 
sz
 = (
≠0
);

28 i‡((
îr
 = 
	`mÆl˘l
("thªad.Æloˇãdp", &
≠0
, &
sz
, 
NULL
, 0))) {

29 i‡(
îr
 =
ENOENT
)

30 
œbñ_ENOENT
;

31 
	`ã°_Áû
("%s(): Eº‹ i¿mÆl˘l(): %s", 
__func__
,

32 
	`°ªº‹
(
îr
));

34 
	`as£π_u64_eq
(*
≠0
, 
a0
,

38 
sz
 = (
d0
);

39 i‡((
îr
 = 
	`mÆl˘l
("thªad.dóŒoˇãd", &
d0
, &
sz
, 
NULL
, 0))) {

40 i‡(
îr
 =
ENOENT
)

41 
œbñ_ENOENT
;

42 
	`ã°_Áû
("%s(): Eº‹ i¿mÆl˘l(): %s", 
__func__
,

43 
	`°ªº‹
(
îr
));

45 
sz
 = (
dp0
);

46 i‡((
îr
 = 
	`mÆl˘l
("thªad.dóŒoˇãdp", &
dp0
, &
sz
, 
NULL
, 0))) {

47 i‡(
îr
 =
ENOENT
)

48 
œbñ_ENOENT
;

49 
	`ã°_Áû
("%s(): Eº‹ i¿mÆl˘l(): %s", 
__func__
,

50 
	`°ªº‹
(
îr
));

52 
	`as£π_u64_eq
(*
dp0
, 
d0
,

56 
p
 = 
	`mÆloc
(1);

57 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected malloc()Érror");

59 
sz
 = (
a1
);

60 
	`mÆl˘l
("thªad.Æloˇãd", &
a1
, &
sz
, 
NULL
, 0);

61 
sz
 = (
≠1
);

62 
	`mÆl˘l
("thªad.Æloˇãdp", &
≠1
, &
sz
, 
NULL
, 0);

63 
	`as£π_u64_eq
(*
≠1
, 
a1
,

66 
	`as£π_±r_eq
(
≠0
, 
≠1
,

69 
usize
 = 
	`mÆloc_ußbÀ_size
(
p
);

70 
	`as£π_u64_À
(
a0
 + 
usize
, 
a1
,

74 
	`‰ì
(
p
);

76 
sz
 = (
d1
);

77 
	`mÆl˘l
("thªad.dóŒoˇãd", &
d1
, &
sz
, 
NULL
, 0);

78 
sz
 = (
dp1
);

79 
	`mÆl˘l
("thªad.dóŒoˇãdp", &
dp1
, &
sz
, 
NULL
, 0);

80 
	`as£π_u64_eq
(*
dp1
, 
d1
,

83 
	`as£π_±r_eq
(
dp0
, 
dp1
,

86 
	`as£π_u64_À
(
d0
 + 
usize
, 
d1
,

90  (
NULL
);

91 
œbñ_ENOENT
:

92 
	`as£π_Ál£
(
c⁄fig_°©s
,

94 
	`ã°_skù
("\"thread.allocated\" mallctlÇotávailable");

95  (
NULL
);

96 
	}
}

98 
	$TEST_BEGIN
(
ã°_maö_thªad
)

101 
	`thd_°¨t
(
NULL
);

102 
	}
}

103 
TEST_END


105 
	$TEST_BEGIN
(
ã°_subthªad
)

107 
thd_t
 
thd
;

109 
	`thd_¸óã
(&
thd
, 
thd_°¨t
, 
NULL
);

110 
	`thd_joö
(
thd
, 
NULL
);

111 
	}
}

112 
TEST_END


115 
	$maö
()

119  (
	`ã°
(

120 
ã°_maö_thªad
,

121 
ã°_subthªad
,

122 
ã°_maö_thªad
,

123 
ã°_subthªad
,

124 
ã°_maö_thªad
));

125 
	}
}

	@dep/jemalloc-4.2.0/test/integration/chunk.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_FILL


4 c⁄° *
	gmÆloc_c⁄f
 = "junk:false";

7 
chunk_hooks_t
 
	g‹ig_hooks
;

8 
chunk_hooks_t
 
	gﬁd_hooks
;

10 
boﬁ
 
	gdo_dÆloc
 = 
åue
;

11 
boﬁ
 
	gdo_decommô
;

13 
boﬁ
 
	gdid_Æloc
;

14 
boﬁ
 
	gdid_dÆloc
;

15 
boﬁ
 
	gdid_commô
;

16 
boﬁ
 
	gdid_decommô
;

17 
boﬁ
 
	gdid_purge
;

18 
boﬁ
 
	gdid_•lô
;

19 
boﬁ
 
	gdid_mîge
;

22 
	#TRACE_HOOK
(
fmt
, ...Ë
	`mÆloc_¥ötf
(fmt, 
__VA_ARGS__
)

	)

24 
	#TRACE_HOOK
(
fmt
, ...)

	)

28 
	$chunk_Æloc
(*
√w_addr
, 
size_t
 
size
, size_à
Æignmít
, 
boﬁ
 *
zîo
,

29 
boﬁ
 *
commô
, 
¨ía_öd
)

32 
	`TRACE_HOOK
("%s(new_addr=%p, size=%zu,álignment=%zu, *zero=%s, "

33 "*commô=%s,áª«_öd=%u)\n", 
__func__
, 
√w_addr
, 
size
, 
Æignmít
,

34 *
zîo
 ? "åue" : "Ál£", *
commô
 ? "åue" : "Ál£", 
¨ía_öd
);

35 
did_Æloc
 = 
åue
;

36  (
ﬁd_hooks
.
	`Æloc
(
√w_addr
, 
size
, 
Æignmít
, 
zîo
, 
commô
,

37 
¨ía_öd
));

38 
	}
}

40 
boﬁ


41 
	$chunk_dÆloc
(*
chunk
, 
size_t
 
size
, 
boﬁ
 
commôãd
, 
¨ía_öd
)

44 
	`TRACE_HOOK
("%s(chunk=%p, size=%zu, committed=%s,árena_ind=%u)\n",

45 
__func__
, 
chunk
, 
size
, 
commôãd
 ? "åue" : "Ál£", 
¨ía_öd
);

46 
did_dÆloc
 = 
åue
;

47 i‡(!
do_dÆloc
)

48  (
åue
);

49  (
ﬁd_hooks
.
	`dÆloc
(
chunk
, 
size
, 
commôãd
, 
¨ía_öd
));

50 
	}
}

52 
boﬁ


53 
	$chunk_commô
(*
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
,

54 
¨ía_öd
)

56 
boﬁ
 
îr
;

58 
	`TRACE_HOOK
("%s(chunk=%p, size=%zu, offset=%zu,Üength=%zu, "

59 "¨ía_öd=%u)\n", 
__func__
, 
chunk
, 
size
, 
off£t
, 
Àngth
,

60 
¨ía_öd
);

61 
îr
 = 
ﬁd_hooks
.
	`commô
(
chunk
, 
size
, 
off£t
, 
Àngth
, 
¨ía_öd
);

62 
did_commô
 = !
îr
;

63  (
îr
);

64 
	}
}

66 
boﬁ


67 
	$chunk_decommô
(*
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
,

68 
¨ía_öd
)

70 
boﬁ
 
îr
;

72 
	`TRACE_HOOK
("%s(chunk=%p, size=%zu, offset=%zu,Üength=%zu, "

73 "¨ía_öd=%u)\n", 
__func__
, 
chunk
, 
size
, 
off£t
, 
Àngth
,

74 
¨ía_öd
);

75 i‡(!
do_decommô
)

76  (
åue
);

77 
îr
 = 
ﬁd_hooks
.
	`decommô
(
chunk
, 
size
, 
off£t
, 
Àngth
, 
¨ía_öd
);

78 
did_decommô
 = !
îr
;

79  (
îr
);

80 
	}
}

82 
boﬁ


83 
	$chunk_purge
(*
chunk
, 
size_t
 
size
, size_à
off£t
, size_à
Àngth
,

84 
¨ía_öd
)

87 
	`TRACE_HOOK
("%s(chunk=%p, size=%zu, offset=%zu,Üength=%zu "

88 "¨ía_öd=%u)\n", 
__func__
, 
chunk
, 
size
, 
off£t
, 
Àngth
,

89 
¨ía_öd
);

90 
did_purge
 = 
åue
;

91  (
ﬁd_hooks
.
	`purge
(
chunk
, 
size
, 
off£t
, 
Àngth
, 
¨ía_öd
));

92 
	}
}

94 
boﬁ


95 
	$chunk_•lô
(*
chunk
, 
size_t
 
size
, size_à
size_a
, size_à
size_b
,

96 
boﬁ
 
commôãd
, 
¨ía_öd
)

99 
	`TRACE_HOOK
("%s(chunk=%p, size=%zu, size_a=%zu, size_b=%zu, "

100 "commôãd=%s,áª«_öd=%u)\n", 
__func__
, 
chunk
, 
size
, 
size_a
,

101 
size_b
, 
commôãd
 ? "åue" : "Ál£", 
¨ía_öd
);

102 
did_•lô
 = 
åue
;

103  (
ﬁd_hooks
.
	`•lô
(
chunk
, 
size
, 
size_a
, 
size_b
, 
commôãd
,

104 
¨ía_öd
));

105 
	}
}

107 
boﬁ


108 
	$chunk_mîge
(*
chunk_a
, 
size_t
 
size_a
, *
chunk_b
, size_à
size_b
,

109 
boﬁ
 
commôãd
, 
¨ía_öd
)

112 
	`TRACE_HOOK
("%s(chunk_a=%p, size_a=%zu, chunk_b=%p size_b=%zu, "

113 "commôãd=%s,áª«_öd=%u)\n", 
__func__
, 
chunk_a
, 
size_a
, 
chunk_b
,

114 
size_b
, 
commôãd
 ? "åue" : "Ál£", 
¨ía_öd
);

115 
did_mîge
 = 
åue
;

116  (
ﬁd_hooks
.
	`mîge
(
chunk_a
, 
size_a
, 
chunk_b
, 
size_b
,

117 
commôãd
, 
¨ía_öd
));

118 
	}
}

120 
	$TEST_BEGIN
(
ã°_chunk
)

122 *
p
;

123 
size_t
 
ﬁd_size
, 
√w_size
, 
œrge0
, 
œrge1
, 
huge0
, 
huge1
, 
huge2
, 
sz
;

124 
¨ía_öd
;

125 
Êags
;

126 
size_t
 
hooks_mib
[3], 
purge_mib
[3];

127 
size_t
 
hooks_mibÀn
, 
purge_mibÀn
;

128 
chunk_hooks_t
 
√w_hooks
 = {

129 
chunk_Æloc
,

130 
chunk_dÆloc
,

131 
chunk_commô
,

132 
chunk_decommô
,

133 
chunk_purge
,

134 
chunk_•lô
,

135 
chunk_mîge


137 
boﬁ
 
xÆlocx_suc˚ss_a
, 
xÆlocx_suc˚ss_b
, 
xÆlocx_suc˚ss_c
;

139 
sz
 = ();

140 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.exãnd", &
¨ía_öd
, &
sz
, 
NULL
, 0), 0,

142 
Êags
 = 
	`MALLOCX_ARENA
(
¨ía_öd
Ë| 
MALLOCX_TCACHE_NONE
;

145 
hooks_mibÀn
 = (
hooks_mib
)/(
size_t
);

146 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.chunk_hooks", 
hooks_mib
,

147 &
hooks_mibÀn
), 0, "Unexpected mallctlnametomib() failure");

148 
hooks_mib
[1] = (
size_t
)
¨ía_öd
;

149 
ﬁd_size
 = (
chunk_hooks_t
);

150 
√w_size
 = (
chunk_hooks_t
);

151 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
hooks_mib
, 
hooks_mibÀn
, &
ﬁd_hooks
, &
ﬁd_size
,

152 &
√w_hooks
, 
√w_size
), 0, "Unexpected chunk_hooksÉrror");

153 
‹ig_hooks
 = 
ﬁd_hooks
;

154 
	`as£π_±r_√
(
ﬁd_hooks
.
Æloc
, 
chunk_Æloc
, "UnexpectedállocÉrror");

155 
	`as£π_±r_√
(
ﬁd_hooks
.
dÆloc
, 
chunk_dÆloc
,

157 
	`as£π_±r_√
(
ﬁd_hooks
.
commô
, 
chunk_commô
,

159 
	`as£π_±r_√
(
ﬁd_hooks
.
decommô
, 
chunk_decommô
,

161 
	`as£π_±r_√
(
ﬁd_hooks
.
purge
, 
chunk_purge
, "UnexpectedÖurgeÉrror");

162 
	`as£π_±r_√
(
ﬁd_hooks
.
•lô
, 
chunk_•lô
, "Unexpected splitÉrror");

163 
	`as£π_±r_√
(
ﬁd_hooks
.
mîge
, 
chunk_mîge
, "Unexpected mergeÉrror");

166 
sz
 = (
size_t
);

167 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.Ãun.0.size", &
œrge0
, &
sz
, 
NULL
, 0), 0,

169 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.Ãun.1.size", &
œrge1
, &
sz
, 
NULL
, 0), 0,

173 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.hchunk.0.size", &
huge0
, &
sz
, 
NULL
, 0), 0,

175 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.hchunk.1.size", &
huge1
, &
sz
, 
NULL
, 0), 0,

177 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.hchunk.2.size", &
huge2
, &
sz
, 
NULL
, 0), 0,

181 
purge_mibÀn
 = (
purge_mib
)/(
size_t
);

182 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.purge", 
purge_mib
, &
purge_mibÀn
),

184 
purge_mib
[1] = (
size_t
)
¨ía_öd
;

185 
do_dÆloc
 = 
Ál£
;

186 
do_decommô
 = 
Ál£
;

187 
p
 = 
	`mÆlocx
(
huge0
 * 2, 
Êags
);

188 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

189 
did_dÆloc
 = 
Ál£
;

190 
did_decommô
 = 
Ál£
;

191 
did_purge
 = 
Ál£
;

192 
did_•lô
 = 
Ál£
;

193 
xÆlocx_suc˚ss_a
 = (
	`xÆlocx
(
p
, 
huge0
, 0, 
Êags
) == huge0);

194 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
purge_mib
, 
purge_mibÀn
, 
NULL
, NULL, NULL, 0),

195 0, "U√x≥˘edáª«.%u.purgêîr‹", 
¨ía_öd
);

196 i‡(
xÆlocx_suc˚ss_a
) {

197 
	`as£π_åue
(
did_dÆloc
, "Expected dalloc");

198 
	`as£π_Ál£
(
did_decommô
, "Unexpected decommit");

199 
	`as£π_åue
(
did_purge
, "ExpectedÖurge");

201 
	`as£π_åue
(
did_•lô
, "Expected split");

202 
	`dÆlocx
(
p
, 
Êags
);

203 
do_dÆloc
 = 
åue
;

206 
do_dÆloc
 = 
Ál£
;

207 
do_decommô
 = 
åue
;

208 
p
 = 
	`mÆlocx
(
huge0
 * 2, 
Êags
);

209 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

210 
did_decommô
 = 
Ál£
;

211 
did_commô
 = 
Ál£
;

212 
did_•lô
 = 
Ál£
;

213 
did_mîge
 = 
Ál£
;

214 
xÆlocx_suc˚ss_b
 = (
	`xÆlocx
(
p
, 
huge0
, 0, 
Êags
) == huge0);

215 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
purge_mib
, 
purge_mibÀn
, 
NULL
, NULL, NULL, 0),

216 0, "U√x≥˘edáª«.%u.purgêîr‹", 
¨ía_öd
);

217 i‡(
xÆlocx_suc˚ss_b
)

218 
	`as£π_åue
(
did_•lô
, "Expected split");

219 
xÆlocx_suc˚ss_c
 = (
	`xÆlocx
(
p
, 
huge0
 * 2, 0, 
Êags
) == huge0 * 2);

220 
	`as£π_b_eq
(
did_decommô
, 
did_commô
, "Expected decommit/commit match");

221 i‡(
xÆlocx_suc˚ss_b
 && 
xÆlocx_suc˚ss_c
)

222 
	`as£π_åue
(
did_mîge
, "Expected merge");

223 
	`dÆlocx
(
p
, 
Êags
);

224 
do_dÆloc
 = 
åue
;

225 
do_decommô
 = 
Ál£
;

228 i‡(
huge0
 * 2 > 
huge2
) {

234 
p
 = 
	`mÆlocx
(
huge2
, 
Êags
);

235 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

236 
did_purge
 = 
Ál£
;

237 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge1
, 0, 
Êags
), huge1,

239 
	`as£π_åue
(
did_purge
, "ExpectedÖurge");

240 
	`dÆlocx
(
p
, 
Êags
);

244 
do_decommô
 = 
åue
;

245 
p
 = 
	`mÆlocx
(
œrge1
, 
Êags
);

246 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

247 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
purge_mib
, 
purge_mibÀn
, 
NULL
, NULL, NULL, 0),

248 0, "U√x≥˘edáª«.%u.purgêîr‹", 
¨ía_öd
);

249 
did_decommô
 = 
Ál£
;

250 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 0, 
Êags
),Üarge0,

252 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
purge_mib
, 
purge_mibÀn
, 
NULL
, NULL, NULL, 0),

253 0, "U√x≥˘edáª«.%u.purgêîr‹", 
¨ía_öd
);

254 
did_commô
 = 
Ál£
;

255 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge1
, 0, 
Êags
),Üarge1,

257 
	`as£π_b_eq
(
did_decommô
, 
did_commô
, "Expected decommit/commit match");

258 
	`dÆlocx
(
p
, 
Êags
);

259 
do_decommô
 = 
Ál£
;

262 
p
 = 
	`mÆlocx
(42, 
Êags
);

263 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

264 
	`dÆlocx
(
p
, 
Êags
);

267 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
hooks_mib
, 
hooks_mibÀn
, 
NULL
, NULL,

268 &
ﬁd_hooks
, 
√w_size
), 0, "Unexpected chunk_hooksÉrror");

269 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
hooks_mib
, 
hooks_mibÀn
, &
ﬁd_hooks
, &
ﬁd_size
,

270 
NULL
, 0), 0, "Unexpected chunk_hooksÉrror");

271 
	`as£π_±r_eq
(
ﬁd_hooks
.
Æloc
, 
‹ig_hooks
.alloc,

273 
	`as£π_±r_eq
(
ﬁd_hooks
.
dÆloc
, 
‹ig_hooks
.dalloc,

275 
	`as£π_±r_eq
(
ﬁd_hooks
.
commô
, 
‹ig_hooks
.commit,

277 
	`as£π_±r_eq
(
ﬁd_hooks
.
decommô
, 
‹ig_hooks
.decommit,

279 
	`as£π_±r_eq
(
ﬁd_hooks
.
purge
, 
‹ig_hooks
.purge,

281 
	`as£π_±r_eq
(
ﬁd_hooks
.
•lô
, 
‹ig_hooks
.split,

283 
	`as£π_±r_eq
(
ﬁd_hooks
.
mîge
, 
‹ig_hooks
.merge,

285 
	}
}

286 
TEST_END


289 
	$maö
()

292  (
	`ã°
(
ã°_chunk
));

293 
	}
}

	@dep/jemalloc-4.2.0/test/integration/mallocx.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_FILL


4 c⁄° *
	gmÆloc_c⁄f
 = "junk:false";

8 
	$gë_nsizes_im∂
(c⁄° *
cmd
)

10 
ªt
;

11 
size_t
 
z
;

13 
z
 = ();

14 
	`as£π_d_eq
(
	`mÆl˘l
(
cmd
, &
ªt
, &
z
, 
NULL
, 0), 0,

15 "U√x≥˘ed mÆl˘l(\"%s\", ...ËÁûuª", 
cmd
);

17  (
ªt
);

18 
	}
}

21 
	$gë_nhuge
()

24  (
	`gë_nsizes_im∂
("arenas.nhchunks"));

25 
	}
}

27 
size_t


28 
	$gë_size_im∂
(c⁄° *
cmd
, 
size_t
 
öd
)

30 
size_t
 
ªt
;

31 
size_t
 
z
;

32 
size_t
 
mib
[4];

33 
size_t
 
mibÀn
 = 4;

35 
z
 = (
size_t
);

36 
	`as£π_d_eq
(
	`mÆl˘ amëomib
(
cmd
, 
mib
, &
mibÀn
),

37 0, "U√x≥˘ed mÆl˘ amëomib(\"%s\", ...ËÁûuª", 
cmd
);

38 
mib
[2] = 
öd
;

39 
z
 = (
size_t
);

40 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
ªt
, &
z
, 
NULL
, 0),

41 0, "U√x≥˘ed mÆl˘lbymib([\"%s\", %zu], ...ËÁûuª", 
cmd
, 
öd
);

43  (
ªt
);

44 
	}
}

46 
size_t


47 
	$gë_huge_size
(
size_t
 
öd
)

50  (
	`gë_size_im∂
("¨ías.hchunk.0.size", 
öd
));

51 
	}
}

53 
	$TEST_BEGIN
(
ã°_ovîÊow
)

55 
size_t
 
hugemax
;

57 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

59 
	`as£π_±r_nuŒ
(
	`mÆlocx
(
hugemax
+1, 0),

60 "Ex≥˘ed OOM f‹ mÆlocx(size=%#zx, 0)", 
hugemax
+1);

62 
	`as£π_±r_nuŒ
(
	`mÆlocx
(
	`ZU
(
PTRDIFF_MAX
)+1, 0),

63 "Ex≥˘ed OOM f‹ mÆlocx(size=%#zx, 0)", 
	`ZU
(
PTRDIFF_MAX
)+1);

65 
	`as£π_±r_nuŒ
(
	`mÆlocx
(
SIZE_T_MAX
, 0),

66 "Ex≥˘ed OOM f‹ mÆlocx(size=%#zx, 0)", 
SIZE_T_MAX
);

68 
	`as£π_±r_nuŒ
(
	`mÆlocx
(1, 
	`MALLOCX_ALIGN
(
	`ZU
(
PTRDIFF_MAX
)+1)),

70 
	`ZU
(
PTRDIFF_MAX
)+1);

71 
	}
}

72 
TEST_END


74 
	$TEST_BEGIN
(
ã°_oom
)

76 
size_t
 
hugemax
;

77 
boﬁ
 
oom
;

78 *
±rs
[3];

79 
i
;

85 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

86 
oom
 = 
Ál£
;

87 
i
 = 0; i < (
±rs
) / (*); i++) {

88 
±rs
[
i
] = 
	`mÆlocx
(
hugemax
, 0);

89 i‡(
±rs
[
i
] =
NULL
)

90 
oom
 = 
åue
;

92 
	`as£π_åue
(
oom
,

94 
hugemax
);

95 
i
 = 0; i < (
±rs
) / (*); i++) {

96 i‡(
±rs
[
i
] !
NULL
)

97 
	`dÆlocx
(
±rs
[
i
], 0);

100 #i‡
LG_SIZEOF_PTR
 == 3

101 
	`as£π_±r_nuŒ
(
	`mÆlocx
(0x8000000000000000ULL,

102 
	`MALLOCX_ALIGN
(0x8000000000000000ULL)),

104 
	`as£π_±r_nuŒ
(
	`mÆlocx
(0x8000000000000000ULL,

105 
	`MALLOCX_ALIGN
(0x80000000)),

108 
	`as£π_±r_nuŒ
(
	`mÆlocx
(0x80000000UL, 
	`MALLOCX_ALIGN
(0x80000000UL)),

111 
	}
}

112 
TEST_END


114 
	$TEST_BEGIN
(
ã°_basic
)

116 
	#MAXSZ
 (((
size_t
)1Ë<< 26)

	)

117 
size_t
 
sz
;

119 
sz
 = 1; sz < 
MAXSZ
; sz = 
	`«Œocx
(sz, 0) + 1) {

120 
size_t
 
nsz
, 
rsz
;

121 *
p
;

122 
nsz
 = 
	`«Œocx
(
sz
, 0);

123 
	`as£π_zu_√
(
nsz
, 0, "UnexpectedÇallocx()Érror");

124 
p
 = 
	`mÆlocx
(
sz
, 0);

125 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

126 
rsz
 = 
	`ßŒocx
(
p
, 0);

127 
	`as£π_zu_ge
(
rsz
, 
sz
, "Real size smallerÅhanÉxpected");

128 
	`as£π_zu_eq
(
nsz
, 
rsz
, "nallocx()/sallocx() size mismatch");

129 
	`dÆlocx
(
p
, 0);

131 
p
 = 
	`mÆlocx
(
sz
, 0);

132 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

133 
	`dÆlocx
(
p
, 0);

135 
nsz
 = 
	`«Œocx
(
sz
, 
MALLOCX_ZERO
);

136 
	`as£π_zu_√
(
nsz
, 0, "UnexpectedÇallocx()Érror");

137 
p
 = 
	`mÆlocx
(
sz
, 
MALLOCX_ZERO
);

138 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

139 
rsz
 = 
	`ßŒocx
(
p
, 0);

140 
	`as£π_zu_eq
(
nsz
, 
rsz
, "nallocx()/sallocx()Ñsize mismatch");

141 
	`dÆlocx
(
p
, 0);

143 #unde‡
MAXSZ


144 
	}
}

145 
TEST_END


147 
	$TEST_BEGIN
(
ã°_Æignmít_™d_size
)

149 
	#MAXALIGN
 (((
size_t
)1Ë<< 25)

	)

150 
	#NITER
 4

	)

151 
size_t
 
nsz
, 
rsz
, 
sz
, 
Æignmít
, 
tŸÆ
;

152 
i
;

153 *
ps
[
NITER
];

155 
i
 = 0; i < 
NITER
; i++)

156 
ps
[
i
] = 
NULL
;

158 
Æignmít
 = 8;

159 
Æignmít
 <
MAXALIGN
;

160 
Æignmít
 <<= 1) {

161 
tŸÆ
 = 0;

162 
sz
 = 1;

163 
sz
 < 3 * 
Æignmít
 && sz < (1U << 31);

164 
sz
 +(
Æignmít
 >> (
LG_SIZEOF_PTR
-1)) - 1) {

165 
i
 = 0; i < 
NITER
; i++) {

166 
nsz
 = 
	`«Œocx
(
sz
, 
	`MALLOCX_ALIGN
(
Æignmít
) |

167 
MALLOCX_ZERO
);

168 
	`as£π_zu_√
(
nsz
, 0,

170 "size=%zu (%#zx)", 
Æignmít
, 
sz
, sz);

171 
ps
[
i
] = 
	`mÆlocx
(
sz
, 
	`MALLOCX_ALIGN
(
Æignmít
) |

172 
MALLOCX_ZERO
);

173 
	`as£π_±r_nŸ_nuŒ
(
ps
[
i
],

175 "size=%zu (%#zx)", 
Æignmít
, 
sz
, sz);

176 
rsz
 = 
	`ßŒocx
(
ps
[
i
], 0);

177 
	`as£π_zu_ge
(
rsz
, 
sz
,

179 "Æignmít=%zu, size=%zu", 
Æignmít
, 
sz
);

180 
	`as£π_zu_eq
(
nsz
, 
rsz
,

182 "Æignmít=%zu, size=%zu", 
Æignmít
, 
sz
);

183 
	`as£π_±r_nuŒ
(

184 (*)((
uöçå_t
)
ps
[
i
] & (
Æignmít
-1)),

186 "álignmít=%zu, size=%zu", 
ps
[
i
],

187 
Æignmít
, 
sz
);

188 
tŸÆ
 +
rsz
;

189 i‡(
tŸÆ
 >(
MAXALIGN
 << 1))

192 
i
 = 0; i < 
NITER
; i++) {

193 i‡(
ps
[
i
] !
NULL
) {

194 
	`dÆlocx
(
ps
[
i
], 0);

195 
ps
[
i
] = 
NULL
;

200 #unde‡
MAXALIGN


201 #unde‡
NITER


202 
	}
}

203 
TEST_END


206 
	$maö
()

209  (
	`ã°
(

210 
ã°_ovîÊow
,

211 
ã°_oom
,

212 
ã°_basic
,

213 
ã°_Æignmít_™d_size
));

214 
	}
}

	@dep/jemalloc-4.2.0/test/integration/overflow.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_ovîÊow
)

5 
nhchunks
;

6 
size_t
 
mib
[4];

7 
size_t
 
sz
, 
mibÀn
, 
max_size_˛ass
;

8 *
p
;

10 
sz
 = ();

11 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.nhchunks", &
nhchunks
, &
sz
, 
NULL
, 0), 0,

14 
mibÀn
 = (
mib
Ë/ (
size_t
);

15 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ías.hchunk.0.size", 
mib
, &
mibÀn
), 0,

17 
mib
[2] = 
nhchunks
 - 1;

19 
sz
 = (
size_t
);

20 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
max_size_˛ass
, &
sz
, 
NULL
, 0), 0,

23 
	`as£π_±r_nuŒ
(
	`mÆloc
(
max_size_˛ass
 + 1),

25 
	`as£π_±r_nuŒ
(
	`mÆloc
(
SIZE_T_MAX
),

28 
	`as£π_±r_nuŒ
(
	`ˇŒoc
(1, 
max_size_˛ass
 + 1),

30 
	`as£π_±r_nuŒ
(
	`ˇŒoc
(1, 
SIZE_T_MAX
),

33 
p
 = 
	`mÆloc
(1);

34 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected malloc() OOM");

35 
	`as£π_±r_nuŒ
(
	`ªÆloc
(
p
, 
max_size_˛ass
 + 1),

37 
	`as£π_±r_nuŒ
(
	`ªÆloc
(
p
, 
SIZE_T_MAX
),

39 
	`‰ì
(
p
);

40 
	}
}

41 
TEST_END


44 
	$maö
()

47  (
	`ã°
(

48 
ã°_ovîÊow
));

49 
	}
}

	@dep/jemalloc-4.2.0/test/integration/posix_memalign.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#CHUNK
 0x400000

	)

5 
	#MAXALIGN
 ((
size_t
)0x2000000LU)

	)

6 
	#NITER
 4

	)

8 
	$TEST_BEGIN
(
ã°_Æignmít_îr‹s
)

10 
size_t
 
Æignmít
;

11 *
p
;

13 
Æignmít
 = 0;álignment < (*);álignment++) {

14 
	`as£π_d_eq
(
	`posix_memÆign
(&
p
, 
Æignmít
, 1), 
EINVAL
,

16 
Æignmít
);

19 
Æignmít
 = (
size_t
);álignmíà< 
MAXALIGN
;

20 
Æignmít
 <<= 1) {

21 
	`as£π_d_√
(
	`posix_memÆign
(&
p
, 
Æignmít
 + 1, 1), 0,

23 
Æignmít
 + 1);

25 
	}
}

26 
TEST_END


28 
	$TEST_BEGIN
(
ã°_oom_îr‹s
)

30 
size_t
 
Æignmít
, 
size
;

31 *
p
;

33 #i‡
LG_SIZEOF_PTR
 == 3

34 
Æignmít
 = 
	`UINT64_C
(0x8000000000000000);

35 
size
 = 
	`UINT64_C
(0x8000000000000000);

37 
Æignmít
 = 0x80000000LU;

38 
size
 = 0x80000000LU;

40 
	`as£π_d_√
(
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
), 0,

42 
Æignmít
, 
size
);

44 #i‡
LG_SIZEOF_PTR
 == 3

45 
Æignmít
 = 
	`UINT64_C
(0x4000000000000000);

46 
size
 = 
	`UINT64_C
(0xc000000000000001);

48 
Æignmít
 = 0x40000000LU;

49 
size
 = 0xc0000001LU;

51 
	`as£π_d_√
(
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
), 0,

53 
Æignmít
, 
size
);

55 
Æignmít
 = 0x10LU;

56 #i‡
LG_SIZEOF_PTR
 == 3

57 
size
 = 
	`UINT64_C
(0xfffffffffffffff0);

59 
size
 = 0xfffffff0LU;

61 
	`as£π_d_√
(
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
), 0,

63 
Æignmít
, 
size
);

64 
	}
}

65 
TEST_END


67 
	$TEST_BEGIN
(
ã°_Æignmít_™d_size
)

69 
size_t
 
Æignmít
, 
size
, 
tŸÆ
;

70 
i
;

71 
îr
;

72 *
ps
[
NITER
];

74 
i
 = 0; i < 
NITER
; i++)

75 
ps
[
i
] = 
NULL
;

77 
Æignmít
 = 8;

78 
Æignmít
 <
MAXALIGN
;

79 
Æignmít
 <<= 1) {

80 
tŸÆ
 = 0;

81 
size
 = 1;

82 
size
 < 3 * 
Æignmít
 && size < (1U << 31);

83 
size
 +(
Æignmít
 >> (
LG_SIZEOF_PTR
-1)) - 1) {

84 
i
 = 0; i < 
NITER
; i++) {

85 
îr
 = 
	`posix_memÆign
(&
ps
[
i
],

86 
Æignmít
, 
size
);

87 i‡(
îr
) {

88 
buf
[
BUFERROR_BUF
];

90 
	`bu„º‹
(
	`gë_î∫o
(), 
buf
, (buf));

91 
	`ã°_Áû
(

94 
Æignmít
, 
size
, size, 
buf
);

96 
tŸÆ
 +
	`mÆloc_ußbÀ_size
(
ps
[
i
]);

97 i‡(
tŸÆ
 >(
MAXALIGN
 << 1))

100 
i
 = 0; i < 
NITER
; i++) {

101 i‡(
ps
[
i
] !
NULL
) {

102 
	`‰ì
(
ps
[
i
]);

103 
ps
[
i
] = 
NULL
;

108 
	}
}

109 
TEST_END


112 
	$maö
()

115  (
	`ã°
(

116 
ã°_Æignmít_îr‹s
,

117 
ã°_oom_îr‹s
,

118 
ã°_Æignmít_™d_size
));

119 
	}
}

	@dep/jemalloc-4.2.0/test/integration/rallocx.c

1 
	~"ã°/jemÆloc_ã°.h
"

4 
	$gë_nsizes_im∂
(c⁄° *
cmd
)

6 
ªt
;

7 
size_t
 
z
;

9 
z
 = ();

10 
	`as£π_d_eq
(
	`mÆl˘l
(
cmd
, &
ªt
, &
z
, 
NULL
, 0), 0,

11 "U√x≥˘ed mÆl˘l(\"%s\", ...ËÁûuª", 
cmd
);

13  (
ªt
);

14 
	}
}

17 
	$gë_nhuge
()

20  (
	`gë_nsizes_im∂
("arenas.nhchunks"));

21 
	}
}

23 
size_t


24 
	$gë_size_im∂
(c⁄° *
cmd
, 
size_t
 
öd
)

26 
size_t
 
ªt
;

27 
size_t
 
z
;

28 
size_t
 
mib
[4];

29 
size_t
 
mibÀn
 = 4;

31 
z
 = (
size_t
);

32 
	`as£π_d_eq
(
	`mÆl˘ amëomib
(
cmd
, 
mib
, &
mibÀn
),

33 0, "U√x≥˘ed mÆl˘ amëomib(\"%s\", ...ËÁûuª", 
cmd
);

34 
mib
[2] = 
öd
;

35 
z
 = (
size_t
);

36 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
ªt
, &
z
, 
NULL
, 0),

37 0, "U√x≥˘ed mÆl˘lbymib([\"%s\", %zu], ...ËÁûuª", 
cmd
, 
öd
);

39  (
ªt
);

40 
	}
}

42 
size_t


43 
	$gë_huge_size
(
size_t
 
öd
)

46  (
	`gë_size_im∂
("¨ías.hchunk.0.size", 
öd
));

47 
	}
}

49 
	$TEST_BEGIN
(
ã°_grow_™d_shrök
)

51 *
p
, *
q
;

52 
size_t
 
tsz
;

53 
	#NCYCLES
 3

	)

54 
i
, 
j
;

55 
	#NSZS
 2500

	)

56 
size_t
 
szs
[
NSZS
];

57 
	#MAXSZ
 
	`ZU
(12 * 1024 * 1024)

	)

59 
p
 = 
	`mÆlocx
(1, 0);

60 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

61 
szs
[0] = 
	`ßŒocx
(
p
, 0);

63 
i
 = 0; i < 
NCYCLES
; i++) {

64 
j
 = 1; j < 
NSZS
 && 
szs
[j-1] < 
MAXSZ
; j++) {

65 
q
 = 
	`øŒocx
(
p
, 
szs
[
j
-1]+1, 0);

66 
	`as£π_±r_nŸ_nuŒ
(
q
,

68 
szs
[
j
-1], szs[j-1]+1);

69 
szs
[
j
] = 
	`ßŒocx
(
q
, 0);

70 
	`as£π_zu_√
(
szs
[
j
], szs[j-1]+1,

71 "Ex≥˘ed sizêtÿbê©Üó°: %zu", 
szs
[
j
-1]+1);

72 
p
 = 
q
;

75 
j
--; j > 0; j--) {

76 
q
 = 
	`øŒocx
(
p
, 
szs
[
j
-1], 0);

77 
	`as£π_±r_nŸ_nuŒ
(
q
,

79 
szs
[
j
], szs[j-1]);

80 
tsz
 = 
	`ßŒocx
(
q
, 0);

81 
	`as£π_zu_eq
(
tsz
, 
szs
[
j
-1],

82 "Ex≥˘ed size=%zu, gŸ size=%zu", 
szs
[
j
-1], 
tsz
);

83 
p
 = 
q
;

87 
	`dÆlocx
(
p
, 0);

88 #unde‡
MAXSZ


89 #unde‡
NSZS


90 #unde‡
NCYCLES


91 
	}
}

92 
TEST_END


94 
boﬁ


95 
	$vÆid©e_fûl
(c⁄° *
p
, 
uöt8_t
 
c
, 
size_t
 
off£t
, size_à
Àn
)

97 
boﬁ
 
ªt
 = 
Ál£
;

98 c⁄° 
uöt8_t
 *
buf
 = (c⁄° uöt8_à*)
p
;

99 
size_t
 
i
;

101 
i
 = 0; i < 
Àn
; i++) {

102 
uöt8_t
 
b
 = 
buf
[
off£t
+
i
];

103 i‡(
b
 !
c
) {

104 
	`ã°_Áû
("Allocationát %p (len=%zu) contains %#x "

105 "øthîÅh™ %#xáàoff£à%zu", 
p
, 
Àn
, 
b
, 
c
,

106 
off£t
+
i
);

107 
ªt
 = 
åue
;

111  (
ªt
);

112 
	}
}

114 
	$TEST_BEGIN
(
ã°_zîo
)

116 *
p
, *
q
;

117 
size_t
 
psz
, 
qsz
, 
i
, 
j
;

118 
size_t
 
°¨t_sizes
[] = {1, 3*1024, 63*1024, 4095*1024};

119 
	#FILL_BYTE
 0xØU

	)

120 
	#RANGE
 2048

	)

122 
i
 = 0; i < (
°¨t_sizes
)/(
size_t
); i++) {

123 
size_t
 
°¨t_size
 = 
°¨t_sizes
[
i
];

124 
p
 = 
	`mÆlocx
(
°¨t_size
, 
MALLOCX_ZERO
);

125 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

126 
psz
 = 
	`ßŒocx
(
p
, 0);

128 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 0, 0, 
psz
),

130 
	`mem£t
(
p
, 
FILL_BYTE
, 
psz
);

131 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 
FILL_BYTE
, 0, 
psz
),

134 
j
 = 1; j < 
RANGE
; j++) {

135 
q
 = 
	`øŒocx
(
p
, 
°¨t_size
+
j
, 
MALLOCX_ZERO
);

136 
	`as£π_±r_nŸ_nuŒ
(
q
, "UnexpectedÑallocx()Érror");

137 
qsz
 = 
	`ßŒocx
(
q
, 0);

138 i‡(
q
 !
p
 || 
qsz
 !
psz
) {

139 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
q
, 
FILL_BYTE
, 0,

140 
psz
), "Expected filled memory");

141 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
q
, 0, 
psz
, 
qsz
-psz),

144 i‡(
psz
 !
qsz
) {

145 
	`mem£t
((*)((
uöçå_t
)
q
+
psz
), 
FILL_BYTE
,

146 
qsz
-
psz
);

147 
psz
 = 
qsz
;

149 
p
 = 
q
;

151 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 
FILL_BYTE
, 0, 
psz
),

153 
	`dÆlocx
(
p
, 0);

155 #unde‡
FILL_BYTE


156 
	}
}

157 
TEST_END


159 
	$TEST_BEGIN
(
ã°_Æign
)

161 *
p
, *
q
;

162 
size_t
 
Æign
;

163 
	#MAX_ALIGN
 (
	`ZU
(1Ë<< 25)

	)

165 
Æign
 = 
	`ZU
(1);

166 
p
 = 
	`mÆlocx
(1, 
	`MALLOCX_ALIGN
(
Æign
));

167 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

169 
Æign
 <<1;álig¿<
MAX_ALIGN
;álign <<= 1) {

170 
q
 = 
	`øŒocx
(
p
, 1, 
	`MALLOCX_ALIGN
(
Æign
));

171 
	`as£π_±r_nŸ_nuŒ
(
q
,

172 "U√x≥˘edÑÆlocx(Ëîr‹ f‹álign=%zu", 
Æign
);

173 
	`as£π_±r_nuŒ
(

174 (*)((
uöçå_t
)
q
 & (
Æign
-1)),

176 
q
, 
Æign
);

177 
p
 = 
q
;

179 
	`dÆlocx
(
p
, 0);

180 #unde‡
MAX_ALIGN


181 
	}
}

182 
TEST_END


184 
	$TEST_BEGIN
(
ã°_lg_Æign_™d_zîo
)

186 *
p
, *
q
;

187 
lg_Æign
;

188 
size_t
 
sz
;

189 
	#MAX_LG_ALIGN
 25

	)

190 
	#MAX_VALIDATE
 (
	`ZU
(1Ë<< 22)

	)

192 
lg_Æign
 = 0;

193 
p
 = 
	`mÆlocx
(1, 
	`MALLOCX_LG_ALIGN
(
lg_Æign
)|
MALLOCX_ZERO
);

194 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

196 
lg_Æign
++;Üg_Æig¿<
MAX_LG_ALIGN
;Üg_align++) {

197 
q
 = 
	`øŒocx
(
p
, 1, 
	`MALLOCX_LG_ALIGN
(
lg_Æign
)|
MALLOCX_ZERO
);

198 
	`as£π_±r_nŸ_nuŒ
(
q
,

199 "U√x≥˘edÑÆlocx(Ëîr‹ f‹Üg_Æign=%u", 
lg_Æign
);

200 
	`as£π_±r_nuŒ
(

201 (*)((
uöçå_t
)
q
 & ((
	`ZU
(1Ë<< 
lg_Æign
)-1)),

202 "%∞öadequ©ñyálig√d f‹Üg_Æign=%u", 
q
, 
lg_Æign
);

203 
sz
 = 
	`ßŒocx
(
q
, 0);

204 i‡((
sz
 << 1Ë<
MAX_VALIDATE
) {

205 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
q
, 0, 0, 
sz
),

208 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
q
, 0, 0, 
MAX_VALIDATE
),

210 
	`as£π_Ál£
(
	`vÆid©e_fûl
(

211 (*)((
uöçå_t
)
q
+
sz
-
MAX_VALIDATE
),

212 0, 0, 
MAX_VALIDATE
), "Expected zeroed memory");

214 
p
 = 
q
;

216 
	`dÆlocx
(
p
, 0);

217 #unde‡
MAX_VALIDATE


218 #unde‡
MAX_LG_ALIGN


219 
	}
}

220 
TEST_END


222 
	$TEST_BEGIN
(
ã°_ovîÊow
)

224 
size_t
 
hugemax
;

225 *
p
;

227 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

229 
p
 = 
	`mÆlocx
(1, 0);

230 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

232 
	`as£π_±r_nuŒ
(
	`øŒocx
(
p
, 
hugemax
+1, 0),

233 "Ex≥˘ed OOM f‹ÑÆlocx’, size=%#zx, 0)", 
hugemax
+1);

235 
	`as£π_±r_nuŒ
(
	`øŒocx
(
p
, 
	`ZU
(
PTRDIFF_MAX
)+1, 0),

236 "Ex≥˘ed OOM f‹ÑÆlocx’, size=%#zx, 0)", 
	`ZU
(
PTRDIFF_MAX
)+1);

238 
	`as£π_±r_nuŒ
(
	`øŒocx
(
p
, 
SIZE_T_MAX
, 0),

239 "Ex≥˘ed OOM f‹ÑÆlocx’, size=%#zx, 0)", 
SIZE_T_MAX
);

241 
	`as£π_±r_nuŒ
(
	`øŒocx
(
p
, 1, 
	`MALLOCX_ALIGN
(
	`ZU
(
PTRDIFF_MAX
)+1)),

243 
	`ZU
(
PTRDIFF_MAX
)+1);

245 
	`dÆlocx
(
p
, 0);

246 
	}
}

247 
TEST_END


250 
	$maö
()

253  (
	`ã°
(

254 
ã°_grow_™d_shrök
,

255 
ã°_zîo
,

256 
ã°_Æign
,

257 
ã°_lg_Æign_™d_zîo
,

258 
ã°_ovîÊow
));

259 
	}
}

	@dep/jemalloc-4.2.0/test/integration/sdallocx.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#MAXALIGN
 (((
size_t
)1Ë<< 25)

	)

4 
	#NITER
 4

	)

6 
	$TEST_BEGIN
(
ã°_basic
)

8 *
±r
 = 
	`mÆlocx
(64, 0);

9 
	`sdÆlocx
(
±r
, 64, 0);

10 
	}
}

11 
TEST_END


13 
	$TEST_BEGIN
(
ã°_Æignmít_™d_size
)

15 
size_t
 
nsz
, 
sz
, 
Æignmít
, 
tŸÆ
;

16 
i
;

17 *
ps
[
NITER
];

19 
i
 = 0; i < 
NITER
; i++)

20 
ps
[
i
] = 
NULL
;

22 
Æignmít
 = 8;

23 
Æignmít
 <
MAXALIGN
;

24 
Æignmít
 <<= 1) {

25 
tŸÆ
 = 0;

26 
sz
 = 1;

27 
sz
 < 3 * 
Æignmít
 && sz < (1U << 31);

28 
sz
 +(
Æignmít
 >> (
LG_SIZEOF_PTR
-1)) - 1) {

29 
i
 = 0; i < 
NITER
; i++) {

30 
nsz
 = 
	`«Œocx
(
sz
, 
	`MALLOCX_ALIGN
(
Æignmít
) |

31 
MALLOCX_ZERO
);

32 
ps
[
i
] = 
	`mÆlocx
(
sz
, 
	`MALLOCX_ALIGN
(
Æignmít
) |

33 
MALLOCX_ZERO
);

34 
tŸÆ
 +
nsz
;

35 i‡(
tŸÆ
 >(
MAXALIGN
 << 1))

38 
i
 = 0; i < 
NITER
; i++) {

39 i‡(
ps
[
i
] !
NULL
) {

40 
	`sdÆlocx
(
ps
[
i
], 
sz
,

41 
	`MALLOCX_ALIGN
(
Æignmít
));

42 
ps
[
i
] = 
NULL
;

47 
	}
}

48 
TEST_END


51 
	$maö
()

54  (
	`ã°
(

55 
ã°_basic
,

56 
ã°_Æignmít_™d_size
));

57 
	}
}

	@dep/jemalloc-4.2.0/test/integration/thread_arena.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#NTHREADS
 10

	)

6 
	$thd_°¨t
(*
¨g
)

8 
maö_¨ía_öd
 = *(*)
¨g
;

9 *
p
;

10 
¨ía_öd
;

11 
size_t
 
size
;

12 
îr
;

14 
p
 = 
	`mÆloc
(1);

15 
	`as£π_±r_nŸ_nuŒ
(
p
, "Error in malloc()");

16 
	`‰ì
(
p
);

18 
size
 = (
¨ía_öd
);

19 i‡((
îr
 = 
	`mÆl˘l
("thªad.¨ía", &
¨ía_öd
, &
size
, &
maö_¨ía_öd
,

20 (
maö_¨ía_öd
)))) {

21 
buf
[
BUFERROR_BUF
];

23 
	`bu„º‹
(
îr
, 
buf
, (buf));

24 
	`ã°_Áû
("Eº‹ i¿mÆl˘l(): %s", 
buf
);

27 
size
 = (
¨ía_öd
);

28 i‡((
îr
 = 
	`mÆl˘l
("thªad.¨ía", &
¨ía_öd
, &
size
, 
NULL
, 0))) {

29 
buf
[
BUFERROR_BUF
];

31 
	`bu„º‹
(
îr
, 
buf
, (buf));

32 
	`ã°_Áû
("Eº‹ i¿mÆl˘l(): %s", 
buf
);

34 
	`as£π_u_eq
(
¨ía_öd
, 
maö_¨ía_öd
,

37  (
NULL
);

38 
	}
}

40 
	$TEST_BEGIN
(
ã°_thªad_¨ía
)

42 *
p
;

43 
¨ía_öd
;

44 
size_t
 
size
;

45 
îr
;

46 
thd_t
 
thds
[
NTHREADS
];

47 
i
;

49 
p
 = 
	`mÆloc
(1);

50 
	`as£π_±r_nŸ_nuŒ
(
p
, "Error in malloc()");

52 
size
 = (
¨ía_öd
);

53 i‡((
îr
 = 
	`mÆl˘l
("thªad.¨ía", &
¨ía_öd
, &
size
, 
NULL
, 0))) {

54 
buf
[
BUFERROR_BUF
];

56 
	`bu„º‹
(
îr
, 
buf
, (buf));

57 
	`ã°_Áû
("Eº‹ i¿mÆl˘l(): %s", 
buf
);

60 
i
 = 0; i < 
NTHREADS
; i++) {

61 
	`thd_¸óã
(&
thds
[
i
], 
thd_°¨t
,

62 (*)&
¨ía_öd
);

65 
i
 = 0; i < 
NTHREADS
; i++) {

66 
öçå_t
 
joö_ªt
;

67 
	`thd_joö
(
thds
[
i
], (*)&
joö_ªt
);

68 
	`as£π_zd_eq
(
joö_ªt
, 0, "UnexpectedÅhread joinÉrror");

70 
	}
}

71 
TEST_END


74 
	$maö
()

77  (
	`ã°
(

78 
ã°_thªad_¨ía
));

79 
	}
}

	@dep/jemalloc-4.2.0/test/integration/thread_tcache_enabled.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 c⁄° 
boﬁ
 
	gc⁄fig_tˇche
 =

4 #ifde‡
JEMALLOC_TCACHE


5 
åue


7 
Ál£


12 
	$thd_°¨t
(*
¨g
)

14 
îr
;

15 
size_t
 
sz
;

16 
boﬁ
 
e0
, 
e1
;

18 
sz
 = (
boﬁ
);

19 i‡((
îr
 = 
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, 
NULL
, 0))) {

20 i‡(
îr
 =
ENOENT
) {

21 
	`as£π_Ál£
(
c⁄fig_tˇche
,

25 
œbñ_ENOENT
;

28 i‡(
e0
) {

29 
e1
 = 
Ál£
;

30 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz),

32 
	`as£π_åue
(
e0
, "tcache should beÉnabled");

35 
e1
 = 
åue
;

36 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

38 
	`as£π_Ál£
(
e0
, "tcache should be disabled");

40 
e1
 = 
åue
;

41 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

43 
	`as£π_åue
(
e0
, "tcache should beÉnabled");

45 
e1
 = 
Ál£
;

46 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

48 
	`as£π_åue
(
e0
, "tcache should beÉnabled");

50 
e1
 = 
Ál£
;

51 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

53 
	`as£π_Ál£
(
e0
, "tcache should be disabled");

55 
	`‰ì
(
	`mÆloc
(1));

56 
e1
 = 
åue
;

57 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

59 
	`as£π_Ál£
(
e0
, "tcache should be disabled");

61 
	`‰ì
(
	`mÆloc
(1));

62 
e1
 = 
åue
;

63 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

65 
	`as£π_åue
(
e0
, "tcache should beÉnabled");

67 
	`‰ì
(
	`mÆloc
(1));

68 
e1
 = 
Ál£
;

69 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

71 
	`as£π_åue
(
e0
, "tcache should beÉnabled");

73 
	`‰ì
(
	`mÆloc
(1));

74 
e1
 = 
Ál£
;

75 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.íabÀd", &
e0
, &
sz
, &
e1
, sz), 0,

77 
	`as£π_Ál£
(
e0
, "tcache should be disabled");

79 
	`‰ì
(
	`mÆloc
(1));

80  (
NULL
);

81 
œbñ_ENOENT
:

82 
	`ã°_skù
("\"thread.tcache.enabled\" mallctlÇotávailable");

83  (
NULL
);

84 
	}
}

86 
	$TEST_BEGIN
(
ã°_maö_thªad
)

89 
	`thd_°¨t
(
NULL
);

90 
	}
}

91 
TEST_END


93 
	$TEST_BEGIN
(
ã°_subthªad
)

95 
thd_t
 
thd
;

97 
	`thd_¸óã
(&
thd
, 
thd_°¨t
, 
NULL
);

98 
	`thd_joö
(
thd
, 
NULL
);

99 
	}
}

100 
TEST_END


103 
	$maö
()

107  (
	`ã°
(

108 
ã°_maö_thªad
,

109 
ã°_subthªad
,

110 
ã°_maö_thªad
,

111 
ã°_subthªad
,

112 
ã°_maö_thªad
));

113 
	}
}

	@dep/jemalloc-4.2.0/test/integration/xallocx.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_FILL


4 c⁄° *
	gmÆloc_c⁄f
 = "junk:false";

13 
	$¨ía_öd
()

15 
öd
 = 0;

17 i‡(
öd
 == 0) {

18 
size_t
 
sz
 = (
öd
);

19 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.exãnd", &
öd
, &
sz
, 
NULL
, 0), 0,

23  (
öd
);

24 
	}
}

26 
	$TEST_BEGIN
(
ã°_ßme_size
)

28 *
p
;

29 
size_t
 
sz
, 
tsz
;

31 
p
 = 
	`mÆlocx
(42, 0);

32 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

33 
sz
 = 
	`ßŒocx
(
p
, 0);

35 
tsz
 = 
	`xÆlocx
(
p
, 
sz
, 0, 0);

36 
	`as£π_zu_eq
(
tsz
, 
sz
, "Unexpected size change: %zu --> %zu", sz,Åsz);

38 
	`dÆlocx
(
p
, 0);

39 
	}
}

40 
TEST_END


42 
	$TEST_BEGIN
(
ã°_exåa_no_move
)

44 *
p
;

45 
size_t
 
sz
, 
tsz
;

47 
p
 = 
	`mÆlocx
(42, 0);

48 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

49 
sz
 = 
	`ßŒocx
(
p
, 0);

51 
tsz
 = 
	`xÆlocx
(
p
, 
sz
, sz-42, 0);

52 
	`as£π_zu_eq
(
tsz
, 
sz
, "Unexpected size change: %zu --> %zu", sz,Åsz);

54 
	`dÆlocx
(
p
, 0);

55 
	}
}

56 
TEST_END


58 
	$TEST_BEGIN
(
ã°_no_move_Áû
)

60 *
p
;

61 
size_t
 
sz
, 
tsz
;

63 
p
 = 
	`mÆlocx
(42, 0);

64 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

65 
sz
 = 
	`ßŒocx
(
p
, 0);

67 
tsz
 = 
	`xÆlocx
(
p
, 
sz
 + 5, 0, 0);

68 
	`as£π_zu_eq
(
tsz
, 
sz
, "Unexpected size change: %zu --> %zu", sz,Åsz);

70 
	`dÆlocx
(
p
, 0);

71 
	}
}

72 
TEST_END


75 
	$gë_nsizes_im∂
(c⁄° *
cmd
)

77 
ªt
;

78 
size_t
 
z
;

80 
z
 = ();

81 
	`as£π_d_eq
(
	`mÆl˘l
(
cmd
, &
ªt
, &
z
, 
NULL
, 0), 0,

82 "U√x≥˘ed mÆl˘l(\"%s\", ...ËÁûuª", 
cmd
);

84  (
ªt
);

85 
	}
}

88 
	$gë_nsmÆl
()

91  (
	`gë_nsizes_im∂
("arenas.nbins"));

92 
	}
}

95 
	$gë_∆¨ge
()

98  (
	`gë_nsizes_im∂
("arenas.nlruns"));

99 
	}
}

102 
	$gë_nhuge
()

105  (
	`gë_nsizes_im∂
("arenas.nhchunks"));

106 
	}
}

108 
size_t


109 
	$gë_size_im∂
(c⁄° *
cmd
, 
size_t
 
öd
)

111 
size_t
 
ªt
;

112 
size_t
 
z
;

113 
size_t
 
mib
[4];

114 
size_t
 
mibÀn
 = 4;

116 
z
 = (
size_t
);

117 
	`as£π_d_eq
(
	`mÆl˘ amëomib
(
cmd
, 
mib
, &
mibÀn
),

118 0, "U√x≥˘ed mÆl˘ amëomib(\"%s\", ...ËÁûuª", 
cmd
);

119 
mib
[2] = 
öd
;

120 
z
 = (
size_t
);

121 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
ªt
, &
z
, 
NULL
, 0),

122 0, "U√x≥˘ed mÆl˘lbymib([\"%s\", %zu], ...ËÁûuª", 
cmd
, 
öd
);

124  (
ªt
);

125 
	}
}

127 
size_t


128 
	$gë_smÆl_size
(
size_t
 
öd
)

131  (
	`gë_size_im∂
("¨ías.bö.0.size", 
öd
));

132 
	}
}

134 
size_t


135 
	$gë_œrge_size
(
size_t
 
öd
)

138  (
	`gë_size_im∂
("¨ías.Ãun.0.size", 
öd
));

139 
	}
}

141 
size_t


142 
	$gë_huge_size
(
size_t
 
öd
)

145  (
	`gë_size_im∂
("¨ías.hchunk.0.size", 
öd
));

146 
	}
}

148 
	$TEST_BEGIN
(
ã°_size
)

150 
size_t
 
smÆl0
, 
hugemax
;

151 *
p
;

154 
smÆl0
 = 
	`gë_smÆl_size
(0);

155 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

157 
p
 = 
	`mÆlocx
(
smÆl0
, 0);

158 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

161 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 1, 0, 0), 
smÆl0
,

165 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
, 0, 0), hugemax,

169 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
+1, 0, 0), hugemax,

171 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
SIZE_T_MAX
, 0, 0), 
hugemax
,

174 
	`dÆlocx
(
p
, 0);

175 
	}
}

176 
TEST_END


178 
	$TEST_BEGIN
(
ã°_size_exåa_ovîÊow
)

180 
size_t
 
smÆl0
, 
hugemax
;

181 *
p
;

184 
smÆl0
 = 
	`gë_smÆl_size
(0);

185 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

187 
p
 = 
	`mÆlocx
(
smÆl0
, 0);

188 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

191 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
-1, 2, 0), hugemax,

193 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
, 1, 0), hugemax,

197 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
+1, 2, 0), hugemax,

199 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
+2, 3, 0), hugemax,

201 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
SIZE_T_MAX
-2, 2, 0), 
hugemax
,

203 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
SIZE_T_MAX
-1, 1, 0), 
hugemax
,

206 
	`dÆlocx
(
p
, 0);

207 
	}
}

208 
TEST_END


210 
	$TEST_BEGIN
(
ã°_exåa_smÆl
)

212 
size_t
 
smÆl0
, 
smÆl1
, 
hugemax
;

213 *
p
;

216 
smÆl0
 = 
	`gë_smÆl_size
(0);

217 
smÆl1
 = 
	`gë_smÆl_size
(1);

218 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

220 
p
 = 
	`mÆlocx
(
smÆl0
, 0);

221 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

223 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆl1
, 0, 0), 
smÆl0
,

226 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆl1
, 0, 0), 
smÆl0
,

229 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆl0
, 
smÆl1
 - small0, 0), small0,

233 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆl0
, 
hugemax
 - small0 + 1, 0), small0,

235 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆl0
, 
SIZE_T_MAX
 - small0, 0), small0,

238 
	`dÆlocx
(
p
, 0);

239 
	}
}

240 
TEST_END


242 
	$TEST_BEGIN
(
ã°_exåa_œrge
)

244 
Êags
 = 
	`MALLOCX_ARENA
(
	`¨ía_öd
());

245 
size_t
 
smÆlmax
, 
œrge0
, 
œrge1
, 
œrge2
, 
huge0
, 
hugemax
;

246 *
p
;

249 
smÆlmax
 = 
	`gë_smÆl_size
(
	`gë_nsmÆl
()-1);

250 
œrge0
 = 
	`gë_œrge_size
(0);

251 
œrge1
 = 
	`gë_œrge_size
(1);

252 
œrge2
 = 
	`gë_œrge_size
(2);

253 
huge0
 = 
	`gë_huge_size
(0);

254 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

256 
p
 = 
	`mÆlocx
(
œrge2
, 
Êags
);

257 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

259 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge2
, 0, 
Êags
),Üarge2,

262 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 0, 
Êags
),Üarge0,

264 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆlmax
, 0, 
Êags
), 
œrge0
,

267 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge2
, 0, 
Êags
),Üarge2,

270 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 
œrge2
 -Ü¨ge0, 
Êags
),Üarge2,

272 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge1
, 
œrge2
 -Ü¨ge1, 
Êags
),Üarge2,

274 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 
œrge1
 -Ü¨ge0, 
Êags
),Üarge1,

276 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
smÆlmax
, 
œrge0
 - smÆlmax, 
Êags
),Üarge0,

279 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 0, 
Êags
),Üarge0,

282 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge2
, 0, 
Êags
),Üarge2,

284 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge0
, 0, 
Êags
), 
œrge2
,

287 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 0, 
Êags
),Üarge0,

290 
	`as£π_zu_…
(
	`xÆlocx
(
p
, 
œrge0
, 
huge0
 -Ü¨ge0, 
Êags
), huge0,

293 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 0, 
Êags
),Üarge0,

296 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge0
, 
œrge2
 -Ü¨ge0, 
Êags
),Üarge2,

299 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
œrge2
, 0, 
Êags
),Üarge2,

302 
	`as£π_zu_…
(
	`xÆlocx
(
p
, 
œrge2
, 
hugemax
 -Ü¨ge2 + 1, 
Êags
), 
huge0
,

305 
	`dÆlocx
(
p
, 
Êags
);

306 
	}
}

307 
TEST_END


309 
	$TEST_BEGIN
(
ã°_exåa_huge
)

311 
Êags
 = 
	`MALLOCX_ARENA
(
	`¨ía_öd
());

312 
size_t
 
œrgemax
, 
huge1
, 
huge2
, 
huge3
, 
hugemax
;

313 *
p
;

316 
œrgemax
 = 
	`gë_œrge_size
(
	`gë_∆¨ge
()-1);

317 
huge1
 = 
	`gë_huge_size
(1);

318 
huge2
 = 
	`gë_huge_size
(2);

319 
huge3
 = 
	`gë_huge_size
(3);

320 
hugemax
 = 
	`gë_huge_size
(
	`gë_nhuge
()-1);

322 
p
 = 
	`mÆlocx
(
huge3
, 
Êags
);

323 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

325 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge3
, 0, 
Êags
), huge3,

328 
	`as£π_zu_ge
(
	`xÆlocx
(
p
, 
huge1
, 0, 
Êags
), huge1,

330 
	`as£π_zu_ge
(
	`xÆlocx
(
p
, 
œrgemax
, 0, 
Êags
), 
huge1
,

333 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge3
, 0, 
Êags
), huge3,

336 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge1
, 
huge3
 - huge1, 
Êags
), huge3,

338 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge2
, 
huge3
 - huge2, 
Êags
), huge3,

340 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge1
, 
huge2
 - huge1, 
Êags
), huge2,

342 
	`as£π_zu_ge
(
	`xÆlocx
(
p
, 
œrgemax
, 
huge1
 -Ü¨gemax, 
Êags
), huge1,

345 
	`as£π_zu_ge
(
	`xÆlocx
(
p
, 
huge1
, 0, 
Êags
), huge1,

348 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
huge3
, 0, 
Êags
), huge3,

350 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
hugemax
+1, 0, 
Êags
), 
huge3
,

353 
	`as£π_zu_ge
(
	`xÆlocx
(
p
, 
huge1
, 0, 
Êags
), huge1,

356 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
huge1
, 
SIZE_T_MAX
 - huge1, 
Êags
), 
hugemax
,

359 
	`as£π_zu_ge
(
	`xÆlocx
(
p
, 
huge1
, 0, 
Êags
), huge1,

362 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
huge1
, 
huge3
 - huge1, 
Êags
), huge3,

365 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
huge3
, 0, 
Êags
), huge3,

368 
	`as£π_zu_À
(
	`xÆlocx
(
p
, 
huge3
, 
hugemax
 - huge3 + 1, 
Êags
), hugemax,

371 
	`dÆlocx
(
p
, 
Êags
);

372 
	}
}

373 
TEST_END


376 
	$¥öt_fûÀd_exã¡s
(c⁄° *
p
, 
uöt8_t
 
c
, 
size_t
 
Àn
)

378 c⁄° 
uöt8_t
 *
pc
 = (c⁄° uöt8_à*)
p
;

379 
size_t
 
i
, 
ønge0
;

380 
uöt8_t
 
c0
;

382 
	`mÆloc_¥ötf
("Ö=%p, c=%#x,Üí=%zu:", 
p
, 
c
, 
Àn
);

383 
ønge0
 = 0;

384 
c0
 = 
pc
[0];

385 
i
 = 0; i < 
Àn
; i++) {

386 i‡(
pc
[
i
] !
c0
) {

387 
	`mÆloc_¥ötf
(" %#x[%zu..%zu)", 
c0
, 
ønge0
, 
i
);

388 
ønge0
 = 
i
;

389 
c0
 = 
pc
[
i
];

392 
	`mÆloc_¥ötf
(" %#x[%zu..%zu)\n", 
c0
, 
ønge0
, 
i
);

393 
	}
}

395 
boﬁ


396 
	$vÆid©e_fûl
(c⁄° *
p
, 
uöt8_t
 
c
, 
size_t
 
off£t
, size_à
Àn
)

398 c⁄° 
uöt8_t
 *
pc
 = (c⁄° uöt8_à*)
p
;

399 
boﬁ
 
îr
;

400 
size_t
 
i
;

402 
i
 = 
off£t
, 
îr
 = 
Ál£
; i < off£t+
Àn
; i++) {

403 i‡(
pc
[
i
] !
c
)

404 
îr
 = 
åue
;

407 i‡(
îr
)

408 
	`¥öt_fûÀd_exã¡s
(
p
, 
c
, 
off£t
 + 
Àn
);

410  (
îr
);

411 
	}
}

414 
	$ã°_zîo
(
size_t
 
szmö
, size_à
szmax
)

416 
Êags
 = 
	`MALLOCX_ARENA
(
	`¨ía_öd
()Ë| 
MALLOCX_ZERO
;

417 
size_t
 
sz
, 
nsz
;

418 *
p
;

419 
	#FILL_BYTE
 0x7aU

	)

421 
sz
 = 
szmax
;

422 
p
 = 
	`mÆlocx
(
sz
, 
Êags
);

423 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx()Érror");

424 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 0x00, 0, 
sz
), "MemoryÇot filled: sz=%zu",

425 
sz
);

431 
	`mem£t
(
p
, 
FILL_BYTE
, 
sz
);

432 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 
FILL_BYTE
, 0, 
sz
),

433 "Mem‹yÇŸ fûÀd: sz=%zu", 
sz
);

436 
sz
 = 
szmö
;

437 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
sz
, 0, 
Êags
), sz,

439 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 
FILL_BYTE
, 0, 
sz
),

440 "Mem‹yÇŸ fûÀd: sz=%zu", 
sz
);

442 
sz
 = 
szmö
; sz < 
szmax
; sz = 
nsz
) {

443 
nsz
 = 
	`«Œocx
(
sz
+1, 
Êags
);

444 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
sz
+1, 0, 
Êags
), 
nsz
,

446 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 
FILL_BYTE
, 0, 
sz
),

447 "Mem‹yÇŸ fûÀd: sz=%zu", 
sz
);

448 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 0x00, 
sz
, 
nsz
-sz),

449 "Mem‹yÇŸ fûÀd: sz=%zu,Çsz-sz=%zu", 
sz
, 
nsz
-sz);

450 
	`mem£t
((*)((
uöçå_t
)
p
 + 
sz
), 
FILL_BYTE
, 
nsz
-sz);

451 
	`as£π_Ál£
(
	`vÆid©e_fûl
(
p
, 
FILL_BYTE
, 0, 
nsz
),

452 "Mem‹yÇŸ fûÀd:Çsz=%zu", 
nsz
);

455 
	`dÆlocx
(
p
, 
Êags
);

456 
	}
}

458 
	$TEST_BEGIN
(
ã°_zîo_œrge
)

460 
size_t
 
œrge0
, 
œrgemax
;

463 
œrge0
 = 
	`gë_œrge_size
(0);

464 
œrgemax
 = 
	`gë_œrge_size
(
	`gë_∆¨ge
()-1);

466 
	`ã°_zîo
(
œrge0
, 
œrgemax
);

467 
	}
}

468 
TEST_END


470 
	$TEST_BEGIN
(
ã°_zîo_huge
)

472 
size_t
 
huge0
, 
huge1
;

475 
huge0
 = 
	`gë_huge_size
(0);

476 
huge1
 = 
	`gë_huge_size
(1);

478 
	`ã°_zîo
(
huge1
, 
huge0
 * 2);

479 
	}
}

480 
TEST_END


483 
	$maö
()

486  (
	`ã°
(

487 
ã°_ßme_size
,

488 
ã°_exåa_no_move
,

489 
ã°_no_move_Áû
,

490 
ã°_size
,

491 
ã°_size_exåa_ovîÊow
,

492 
ã°_exåa_smÆl
,

493 
ã°_exåa_œrge
,

494 
ã°_exåa_huge
,

495 
ã°_zîo_œrge
,

496 
ã°_zîo_huge
));

497 
	}
}

	@dep/jemalloc-4.2.0/test/src/SFMT.c

48 
	#SFMT_C_


	)

49 
	~"ã°/jemÆloc_ã°.h
"

50 
	~"ã°/SFMT-∑øms.h
"

52 #i‡
deföed
(
JEMALLOC_BIG_ENDIAN
Ë&& !deföed(
BIG_ENDIAN64
)

53 
	#BIG_ENDIAN64
 1

	)

55 #i‡
deföed
(
__BIG_ENDIAN__
Ë&& !deföed(
__amd64
Ë&& !deföed(
BIG_ENDIAN64
)

56 
	#BIG_ENDIAN64
 1

	)

58 #i‡
deföed
(
HAVE_ALTIVEC
Ë&& !deföed(
BIG_ENDIAN64
)

59 
	#BIG_ENDIAN64
 1

	)

61 #i‡
deföed
(
ONLY64
Ë&& !deföed(
BIG_ENDIAN64
)

62 #i‡
deföed
(
__GNUC__
)

65 #unde‡
ONLY64


70 #i‡
deföed
(
HAVE_ALTIVEC
)

72 
	uW128_T
 {

73 
ve˘‹
 
	ms
;

74 
uöt32_t
 
	mu
[4];

77 
W128_T
 
	tw128_t
;

79 #ñi‡
deföed
(
HAVE_SSE2
)

81 
	uW128_T
 {

82 
__m128i
 
	msi
;

83 
uöt32_t
 
	mu
[4];

86 
W128_T
 
	tw128_t
;

91 
	sW128_T
 {

92 
uöt32_t
 
	mu
[4];

95 
W128_T
 
	tw128_t
;

99 
	ssfmt_s
 {

101 
w128_t
 
	msfmt
[
N
];

103 
	midx
;

106 
	möôülized
;

115 
uöt32_t
 
	g∑rôy
[4] = {
PARITY1
, 
PARITY2
, 
PARITY3
, 
PARITY4
};

120 
JEMALLOC_INLINE_C
 
idxof
(
i
);

121 #i‡(!
deföed
(
HAVE_ALTIVEC
)Ë&& (!deföed(
HAVE_SSE2
))

122 
JEMALLOC_INLINE_C
 
rshi·128
(
w128_t
 *
out
, w128_àc⁄° *
ö
, 
shi·
);

123 
JEMALLOC_INLINE_C
 
lshi·128
(
w128_t
 *
out
, w128_àc⁄° *
ö
, 
shi·
);

125 
JEMALLOC_INLINE_C
 
gí_ønd_Æl
(
sfmt_t
 *
˘x
);

126 
JEMALLOC_INLINE_C
 
gí_ønd_¨øy
(
sfmt_t
 *
˘x
, 
w128_t
 *
¨øy
, 
size
);

127 
JEMALLOC_INLINE_C
 
uöt32_t
 
func1
(uöt32_à
x
);

128 
JEMALLOC_INLINE_C
 
uöt32_t
 
func2
(uöt32_à
x
);

129 
≥riod_˚πifiˇti⁄
(
sfmt_t
 *
˘x
);

130 #i‡
deföed
(
BIG_ENDIAN64
Ë&& !deföed(
ONLY64
)

131 
JEMALLOC_INLINE_C
 
sw≠
(
w128_t
 *
¨øy
, 
size
);

134 #i‡
deföed
(
HAVE_ALTIVEC
)

135 
	~"ã°/SFMT-Æti.h
"

136 #ñi‡
deföed
(
HAVE_SSE2
)

137 
	~"ã°/SFMT-s£2.h
"

144 #ifde‡
ONLY64


145 
JEMALLOC_INLINE_C
 
	$idxof
(
i
) {

146  
i
 ^ 1;

147 
	}
}

149 
JEMALLOC_INLINE_C
 
	$idxof
(
i
) {

150  
i
;

151 
	}
}

161 #i‡(!
deföed
(
HAVE_ALTIVEC
)Ë&& (!deföed(
HAVE_SSE2
))

162 #ifde‡
ONLY64


163 
JEMALLOC_INLINE_C
 
	$rshi·128
(
w128_t
 *
out
, w128_àc⁄° *
ö
, 
shi·
) {

164 
uöt64_t
 
th
, 
é
, 
oh
, 
ﬁ
;

166 
th
 = ((
uöt64_t
)
ö
->
u
[2] << 32) | ((uint64_t)in->u[3]);

167 
é
 = ((
uöt64_t
)
ö
->
u
[0] << 32) | ((uint64_t)in->u[1]);

169 
oh
 = 
th
 >> (
shi·
 * 8);

170 
ﬁ
 = 
é
 >> (
shi·
 * 8);

171 
ﬁ
 |
th
 << (64 - 
shi·
 * 8);

172 
out
->
u
[0] = (
uöt32_t
)(
ﬁ
 >> 32);

173 
out
->
u
[1] = (
uöt32_t
)
ﬁ
;

174 
out
->
u
[2] = (
uöt32_t
)(
oh
 >> 32);

175 
out
->
u
[3] = (
uöt32_t
)
oh
;

176 
	}
}

178 
JEMALLOC_INLINE_C
 
	$rshi·128
(
w128_t
 *
out
, w128_àc⁄° *
ö
, 
shi·
) {

179 
uöt64_t
 
th
, 
é
, 
oh
, 
ﬁ
;

181 
th
 = ((
uöt64_t
)
ö
->
u
[3] << 32) | ((uint64_t)in->u[2]);

182 
é
 = ((
uöt64_t
)
ö
->
u
[1] << 32) | ((uint64_t)in->u[0]);

184 
oh
 = 
th
 >> (
shi·
 * 8);

185 
ﬁ
 = 
é
 >> (
shi·
 * 8);

186 
ﬁ
 |
th
 << (64 - 
shi·
 * 8);

187 
out
->
u
[1] = (
uöt32_t
)(
ﬁ
 >> 32);

188 
out
->
u
[0] = (
uöt32_t
)
ﬁ
;

189 
out
->
u
[3] = (
uöt32_t
)(
oh
 >> 32);

190 
out
->
u
[2] = (
uöt32_t
)
oh
;

191 
	}
}

201 #ifde‡
ONLY64


202 
JEMALLOC_INLINE_C
 
	$lshi·128
(
w128_t
 *
out
, w128_àc⁄° *
ö
, 
shi·
) {

203 
uöt64_t
 
th
, 
é
, 
oh
, 
ﬁ
;

205 
th
 = ((
uöt64_t
)
ö
->
u
[2] << 32) | ((uint64_t)in->u[3]);

206 
é
 = ((
uöt64_t
)
ö
->
u
[0] << 32) | ((uint64_t)in->u[1]);

208 
oh
 = 
th
 << (
shi·
 * 8);

209 
ﬁ
 = 
é
 << (
shi·
 * 8);

210 
oh
 |
é
 >> (64 - 
shi·
 * 8);

211 
out
->
u
[0] = (
uöt32_t
)(
ﬁ
 >> 32);

212 
out
->
u
[1] = (
uöt32_t
)
ﬁ
;

213 
out
->
u
[2] = (
uöt32_t
)(
oh
 >> 32);

214 
out
->
u
[3] = (
uöt32_t
)
oh
;

215 
	}
}

217 
JEMALLOC_INLINE_C
 
	$lshi·128
(
w128_t
 *
out
, w128_àc⁄° *
ö
, 
shi·
) {

218 
uöt64_t
 
th
, 
é
, 
oh
, 
ﬁ
;

220 
th
 = ((
uöt64_t
)
ö
->
u
[3] << 32) | ((uint64_t)in->u[2]);

221 
é
 = ((
uöt64_t
)
ö
->
u
[1] << 32) | ((uint64_t)in->u[0]);

223 
oh
 = 
th
 << (
shi·
 * 8);

224 
ﬁ
 = 
é
 << (
shi·
 * 8);

225 
oh
 |
é
 >> (64 - 
shi·
 * 8);

226 
out
->
u
[1] = (
uöt32_t
)(
ﬁ
 >> 32);

227 
out
->
u
[0] = (
uöt32_t
)
ﬁ
;

228 
out
->
u
[3] = (
uöt32_t
)(
oh
 >> 32);

229 
out
->
u
[2] = (
uöt32_t
)
oh
;

230 
	}
}

242 #i‡(!
deföed
(
HAVE_ALTIVEC
)Ë&& (!deföed(
HAVE_SSE2
))

243 #ifde‡
ONLY64


244 
JEMALLOC_INLINE_C
 
	$do_ªcursi⁄
(
w128_t
 *
r
, w128_à*
a
, w128_à*
b
, w128_à*
c
,

245 
w128_t
 *
d
) {

246 
w128_t
 
x
;

247 
w128_t
 
y
;

249 
	`lshi·128
(&
x
, 
a
, 
SL2
);

250 
	`rshi·128
(&
y
, 
c
, 
SR2
);

251 
r
->
u
[0] = 
a
->u[0] ^ 
x
.u[0] ^ ((
b
->u[0] >> 
SR1
Ë& 
MSK2
Ë^ 
y
.u[0]

252 ^ (
d
->
u
[0] << 
SL1
);

253 
r
->
u
[1] = 
a
->u[1] ^ 
x
.u[1] ^ ((
b
->u[1] >> 
SR1
Ë& 
MSK1
Ë^ 
y
.u[1]

254 ^ (
d
->
u
[1] << 
SL1
);

255 
r
->
u
[2] = 
a
->u[2] ^ 
x
.u[2] ^ ((
b
->u[2] >> 
SR1
Ë& 
MSK4
Ë^ 
y
.u[2]

256 ^ (
d
->
u
[2] << 
SL1
);

257 
r
->
u
[3] = 
a
->u[3] ^ 
x
.u[3] ^ ((
b
->u[3] >> 
SR1
Ë& 
MSK3
Ë^ 
y
.u[3]

258 ^ (
d
->
u
[3] << 
SL1
);

259 
	}
}

261 
JEMALLOC_INLINE_C
 
	$do_ªcursi⁄
(
w128_t
 *
r
, w128_à*
a
, w128_à*
b
, w128_à*
c
,

262 
w128_t
 *
d
) {

263 
w128_t
 
x
;

264 
w128_t
 
y
;

266 
	`lshi·128
(&
x
, 
a
, 
SL2
);

267 
	`rshi·128
(&
y
, 
c
, 
SR2
);

268 
r
->
u
[0] = 
a
->u[0] ^ 
x
.u[0] ^ ((
b
->u[0] >> 
SR1
Ë& 
MSK1
Ë^ 
y
.u[0]

269 ^ (
d
->
u
[0] << 
SL1
);

270 
r
->
u
[1] = 
a
->u[1] ^ 
x
.u[1] ^ ((
b
->u[1] >> 
SR1
Ë& 
MSK2
Ë^ 
y
.u[1]

271 ^ (
d
->
u
[1] << 
SL1
);

272 
r
->
u
[2] = 
a
->u[2] ^ 
x
.u[2] ^ ((
b
->u[2] >> 
SR1
Ë& 
MSK3
Ë^ 
y
.u[2]

273 ^ (
d
->
u
[2] << 
SL1
);

274 
r
->
u
[3] = 
a
->u[3] ^ 
x
.u[3] ^ ((
b
->u[3] >> 
SR1
Ë& 
MSK4
Ë^ 
y
.u[3]

275 ^ (
d
->
u
[3] << 
SL1
);

276 
	}
}

280 #i‡(!
deföed
(
HAVE_ALTIVEC
)Ë&& (!deföed(
HAVE_SSE2
))

285 
JEMALLOC_INLINE_C
 
	$gí_ønd_Æl
(
sfmt_t
 *
˘x
) {

286 
i
;

287 
w128_t
 *
r1
, *
r2
;

289 
r1
 = &
˘x
->
sfmt
[
N
 - 2];

290 
r2
 = &
˘x
->
sfmt
[
N
 - 1];

291 
i
 = 0; i < 
N
 - 
POS1
; i++) {

292 
	`do_ªcursi⁄
(&
˘x
->
sfmt
[
i
], &˘x->sfmt[i], &˘x->sfmt[ò+ 
POS1
], 
r1
,

293 
r2
);

294 
r1
 = 
r2
;

295 
r2
 = &
˘x
->
sfmt
[
i
];

297 ; 
i
 < 
N
; i++) {

298 
	`do_ªcursi⁄
(&
˘x
->
sfmt
[
i
], &˘x->sfmt[i], &˘x->sfmt[ò+ 
POS1
 - 
N
], 
r1
,

299 
r2
);

300 
r1
 = 
r2
;

301 
r2
 = &
˘x
->
sfmt
[
i
];

303 
	}
}

312 
JEMALLOC_INLINE_C
 
	$gí_ønd_¨øy
(
sfmt_t
 *
˘x
, 
w128_t
 *
¨øy
, 
size
) {

313 
i
, 
j
;

314 
w128_t
 *
r1
, *
r2
;

316 
r1
 = &
˘x
->
sfmt
[
N
 - 2];

317 
r2
 = &
˘x
->
sfmt
[
N
 - 1];

318 
i
 = 0; i < 
N
 - 
POS1
; i++) {

319 
	`do_ªcursi⁄
(&
¨øy
[
i
], &
˘x
->
sfmt
[i], &˘x->sfmt[ò+ 
POS1
], 
r1
, 
r2
);

320 
r1
 = 
r2
;

321 
r2
 = &
¨øy
[
i
];

323 ; 
i
 < 
N
; i++) {

324 
	`do_ªcursi⁄
(&
¨øy
[
i
], &
˘x
->
sfmt
[i], &¨øy[ò+ 
POS1
 - 
N
], 
r1
, 
r2
);

325 
r1
 = 
r2
;

326 
r2
 = &
¨øy
[
i
];

328 ; 
i
 < 
size
 - 
N
; i++) {

329 
	`do_ªcursi⁄
(&
¨øy
[
i
], &¨øy[ò- 
N
], &¨øy[ò+ 
POS1
 - N], 
r1
, 
r2
);

330 
r1
 = 
r2
;

331 
r2
 = &
¨øy
[
i
];

333 
j
 = 0; j < 2 * 
N
 - 
size
; j++) {

334 
˘x
->
sfmt
[
j
] = 
¨øy
[j + 
size
 - 
N
];

336 ; 
i
 < 
size
; i++, 
j
++) {

337 
	`do_ªcursi⁄
(&
¨øy
[
i
], &¨øy[ò- 
N
], &¨øy[ò+ 
POS1
 - N], 
r1
, 
r2
);

338 
r1
 = 
r2
;

339 
r2
 = &
¨øy
[
i
];

340 
˘x
->
sfmt
[
j
] = 
¨øy
[
i
];

342 
	}
}

345 #i‡
deföed
(
BIG_ENDIAN64
Ë&& !deföed(
ONLY64
Ë&& !deföed(
HAVE_ALTIVEC
)

346 
JEMALLOC_INLINE_C
 
	$sw≠
(
w128_t
 *
¨øy
, 
size
) {

347 
i
;

348 
uöt32_t
 
x
, 
y
;

350 
i
 = 0; i < 
size
; i++) {

351 
x
 = 
¨øy
[
i
].
u
[0];

352 
y
 = 
¨øy
[
i
].
u
[2];

353 
¨øy
[
i
].
u
[0] =árray[i].u[1];

354 
¨øy
[
i
].
u
[2] =árray[i].u[3];

355 
¨øy
[
i
].
u
[1] = 
x
;

356 
¨øy
[
i
].
u
[3] = 
y
;

358 
	}
}

366 
uöt32_t
 
	$func1
(
uöt32_t
 
x
) {

367  (
x
 ^ (x >> 27)Ë* (
uöt32_t
)1664525UL;

368 
	}
}

376 
uöt32_t
 
	$func2
(
uöt32_t
 
x
) {

377  (
x
 ^ (x >> 27)Ë* (
uöt32_t
)1566083941UL;

378 
	}
}

383 
	$≥riod_˚πifiˇti⁄
(
sfmt_t
 *
˘x
) {

384 
ö√r
 = 0;

385 
i
, 
j
;

386 
uöt32_t
 
w‹k
;

387 
uöt32_t
 *
psfmt32
 = &
˘x
->
sfmt
[0].
u
[0];

389 
i
 = 0; i < 4; i++)

390 
ö√r
 ^
psfmt32
[
	`idxof
(
i
)] & 
∑rôy
[i];

391 
i
 = 16; i > 0; i >>= 1)

392 
ö√r
 ^ö√∏>> 
i
;

393 
ö√r
 &= 1;

395 i‡(
ö√r
 == 1) {

399 
i
 = 0; i < 4; i++) {

400 
w‹k
 = 1;

401 
j
 = 0; j < 32; j++) {

402 i‡((
w‹k
 & 
∑rôy
[
i
]) != 0) {

403 
psfmt32
[
	`idxof
(
i
)] ^
w‹k
;

406 
w‹k
 = work << 1;

409 
	}
}

419 c⁄° *
	$gë_id°rög
() {

420  
IDSTR
;

421 
	}
}

428 
	$gë_mö_¨øy_size32
() {

429  
N32
;

430 
	}
}

437 
	$gë_mö_¨øy_size64
() {

438  
N64
;

439 
	}
}

441 #i‚de‡
ONLY64


447 
uöt32_t
 
	$gí_ønd32
(
sfmt_t
 *
˘x
) {

448 
uöt32_t
 
r
;

449 
uöt32_t
 *
psfmt32
 = &
˘x
->
sfmt
[0].
u
[0];

451 
	`as£π
(
˘x
->
öôülized
);

452 i‡(
˘x
->
idx
 >
N32
) {

453 
	`gí_ønd_Æl
(
˘x
);

454 
˘x
->
idx
 = 0;

456 
r
 = 
psfmt32
[
˘x
->
idx
++];

457  
r
;

458 
	}
}

461 
uöt32_t
 
	$gí_ønd32_ønge
(
sfmt_t
 *
˘x
, 
uöt32_t
 
limô
) {

462 
uöt32_t
 
ªt
, 
above
;

464 
above
 = 0xffffffffU - (0xffffffffU % 
limô
);

466 
ªt
 = 
	`gí_ønd32
(
˘x
);

467 i‡(
ªt
 < 
above
) {

468 
ªt
 %
limô
;

472  
ªt
;

473 
	}
}

482 
uöt64_t
 
	$gí_ønd64
(
sfmt_t
 *
˘x
) {

483 #i‡
	`deföed
(
BIG_ENDIAN64
Ë&& !deföed(
ONLY64
)

484 
uöt32_t
 
r1
, 
r2
;

485 
uöt32_t
 *
psfmt32
 = &
˘x
->
sfmt
[0].
u
[0];

487 
uöt64_t
 
r
;

488 
uöt64_t
 *
psfmt64
 = (uöt64_à*)&
˘x
->
sfmt
[0].
u
[0];

491 
	`as£π
(
˘x
->
öôülized
);

492 
	`as£π
(
˘x
->
idx
 % 2 == 0);

494 i‡(
˘x
->
idx
 >
N32
) {

495 
	`gí_ønd_Æl
(
˘x
);

496 
˘x
->
idx
 = 0;

498 #i‡
	`deföed
(
BIG_ENDIAN64
Ë&& !deföed(
ONLY64
)

499 
r1
 = 
psfmt32
[
˘x
->
idx
];

500 
r2
 = 
psfmt32
[
˘x
->
idx
 + 1];

501 
˘x
->
idx
 += 2;

502  ((
uöt64_t
)
r2
 << 32Ë| 
r1
;

504 
r
 = 
psfmt64
[
˘x
->
idx
 / 2];

505 
˘x
->
idx
 += 2;

506  
r
;

508 
	}
}

511 
uöt64_t
 
	$gí_ønd64_ønge
(
sfmt_t
 *
˘x
, 
uöt64_t
 
limô
) {

512 
uöt64_t
 
ªt
, 
above
;

514 
above
 = 
	`KQU
(0xffffffffffffffffË- (KQU(0xffffffffffffffffË% 
limô
);

516 
ªt
 = 
	`gí_ønd64
(
˘x
);

517 i‡(
ªt
 < 
above
) {

518 
ªt
 %
limô
;

522  
ªt
;

523 
	}
}

525 #i‚de‡
ONLY64


551 
	$fûl_¨øy32
(
sfmt_t
 *
˘x
, 
uöt32_t
 *
¨øy
, 
size
) {

552 
	`as£π
(
˘x
->
öôülized
);

553 
	`as£π
(
˘x
->
idx
 =
N32
);

554 
	`as£π
(
size
 % 4 == 0);

555 
	`as£π
(
size
 >
N32
);

557 
	`gí_ønd_¨øy
(
˘x
, (
w128_t
 *)
¨øy
, 
size
 / 4);

558 
˘x
->
idx
 = 
N32
;

559 
	}
}

587 
	$fûl_¨øy64
(
sfmt_t
 *
˘x
, 
uöt64_t
 *
¨øy
, 
size
) {

588 
	`as£π
(
˘x
->
öôülized
);

589 
	`as£π
(
˘x
->
idx
 =
N32
);

590 
	`as£π
(
size
 % 2 == 0);

591 
	`as£π
(
size
 >
N64
);

593 
	`gí_ønd_¨øy
(
˘x
, (
w128_t
 *)
¨øy
, 
size
 / 2);

594 
˘x
->
idx
 = 
N32
;

596 #i‡
	`deföed
(
BIG_ENDIAN64
Ë&& !deföed(
ONLY64
)

597 
	`sw≠
((
w128_t
 *)
¨øy
, 
size
 /2);

599 
	}
}

607 
sfmt_t
 *
	$öô_gí_ønd
(
uöt32_t
 
£ed
) {

608 *
p
;

609 
sfmt_t
 *
˘x
;

610 
i
;

611 
uöt32_t
 *
psfmt32
;

613 i‡(
	`posix_memÆign
(&
p
, (
w128_t
), (
sfmt_t
)) != 0) {

614  
NULL
;

616 
˘x
 = (
sfmt_t
 *)
p
;

617 
psfmt32
 = &
˘x
->
sfmt
[0].
u
[0];

619 
psfmt32
[
	`idxof
(0)] = 
£ed
;

620 
i
 = 1; i < 
N32
; i++) {

621 
psfmt32
[
	`idxof
(
i
)] = 1812433253UL * (psfmt32[idxof(i - 1)]

622 ^ (
psfmt32
[
	`idxof
(
i
 - 1)] >> 30))

623 + 
i
;

625 
˘x
->
idx
 = 
N32
;

626 
	`≥riod_˚πifiˇti⁄
(
˘x
);

627 
˘x
->
öôülized
 = 1;

629  
˘x
;

630 
	}
}

638 
sfmt_t
 *
	$öô_by_¨øy
(
uöt32_t
 *
öô_key
, 
key_Àngth
) {

639 *
p
;

640 
sfmt_t
 *
˘x
;

641 
i
, 
j
, 
cou¡
;

642 
uöt32_t
 
r
;

643 
œg
;

644 
mid
;

645 
size
 = 
N
 * 4;

646 
uöt32_t
 *
psfmt32
;

648 i‡(
	`posix_memÆign
(&
p
, (
w128_t
), (
sfmt_t
)) != 0) {

649  
NULL
;

651 
˘x
 = (
sfmt_t
 *)
p
;

652 
psfmt32
 = &
˘x
->
sfmt
[0].
u
[0];

654 i‡(
size
 >= 623) {

655 
œg
 = 11;

656 } i‡(
size
 >= 68) {

657 
œg
 = 7;

658 } i‡(
size
 >= 39) {

659 
œg
 = 5;

661 
œg
 = 3;

663 
mid
 = (
size
 - 
œg
) / 2;

665 
	`mem£t
(
˘x
->
sfmt
, 0x8b, (ctx->sfmt));

666 i‡(
key_Àngth
 + 1 > 
N32
) {

667 
cou¡
 = 
key_Àngth
 + 1;

669 
cou¡
 = 
N32
;

671 
r
 = 
	`func1
(
psfmt32
[
	`idxof
(0)] ^Ösfmt32[idxof(
mid
)]

672 ^ 
psfmt32
[
	`idxof
(
N32
 - 1)]);

673 
psfmt32
[
	`idxof
(
mid
)] +
r
;

674 
r
 +
key_Àngth
;

675 
psfmt32
[
	`idxof
(
mid
 + 
œg
)] +
r
;

676 
psfmt32
[
	`idxof
(0)] = 
r
;

678 
cou¡
--;

679 
i
 = 1, 
j
 = 0; (j < 
cou¡
Ë&& (j < 
key_Àngth
); j++) {

680 
r
 = 
	`func1
(
psfmt32
[
	`idxof
(
i
)] ^Ösfmt32[idxof((ò+ 
mid
Ë% 
N32
)]

681 ^ 
psfmt32
[
	`idxof
((
i
 + 
N32
 - 1) % N32)]);

682 
psfmt32
[
	`idxof
((
i
 + 
mid
Ë% 
N32
)] +
r
;

683 
r
 +
öô_key
[
j
] + 
i
;

684 
psfmt32
[
	`idxof
((
i
 + 
mid
 + 
œg
Ë% 
N32
)] +
r
;

685 
psfmt32
[
	`idxof
(
i
)] = 
r
;

686 
i
 = (ò+ 1Ë% 
N32
;

688 ; 
j
 < 
cou¡
; j++) {

689 
r
 = 
	`func1
(
psfmt32
[
	`idxof
(
i
)] ^Ösfmt32[idxof((ò+ 
mid
Ë% 
N32
)]

690 ^ 
psfmt32
[
	`idxof
((
i
 + 
N32
 - 1) % N32)]);

691 
psfmt32
[
	`idxof
((
i
 + 
mid
Ë% 
N32
)] +
r
;

692 
r
 +
i
;

693 
psfmt32
[
	`idxof
((
i
 + 
mid
 + 
œg
Ë% 
N32
)] +
r
;

694 
psfmt32
[
	`idxof
(
i
)] = 
r
;

695 
i
 = (ò+ 1Ë% 
N32
;

697 
j
 = 0; j < 
N32
; j++) {

698 
r
 = 
	`func2
(
psfmt32
[
	`idxof
(
i
)] +Ösfmt32[idxof((ò+ 
mid
Ë% 
N32
)]

699 + 
psfmt32
[
	`idxof
((
i
 + 
N32
 - 1) % N32)]);

700 
psfmt32
[
	`idxof
((
i
 + 
mid
Ë% 
N32
)] ^
r
;

701 
r
 -
i
;

702 
psfmt32
[
	`idxof
((
i
 + 
mid
 + 
œg
Ë% 
N32
)] ^
r
;

703 
psfmt32
[
	`idxof
(
i
)] = 
r
;

704 
i
 = (ò+ 1Ë% 
N32
;

707 
˘x
->
idx
 = 
N32
;

708 
	`≥riod_˚πifiˇti⁄
(
˘x
);

709 
˘x
->
öôülized
 = 1;

711  
˘x
;

712 
	}
}

714 
	$föi_gí_ønd
(
sfmt_t
 *
˘x
) {

715 
	`as£π
(
˘x
 !
NULL
);

717 
˘x
->
öôülized
 = 0;

718 
	`‰ì
(
˘x
);

719 
	}
}

	@dep/jemalloc-4.2.0/test/src/btalloc.c

1 
	~"ã°/jemÆloc_ã°.h
"

4 
	$bèŒoc
(
size_t
 
size
, 
bôs
)

7  (
	`bèŒoc_0
(
size
, 
bôs
));

8 
	}
}

	@dep/jemalloc-4.2.0/test/src/btalloc_0.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
bèŒoc_n_gí
(0)

	@dep/jemalloc-4.2.0/test/src/btalloc_1.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
bèŒoc_n_gí
(1)

	@dep/jemalloc-4.2.0/test/src/math.c

1 
	#MATH_C_


	)

2 
	~"ã°/jemÆloc_ã°.h
"

	@dep/jemalloc-4.2.0/test/src/mq.c

1 
	~"ã°/jemÆloc_ã°.h
"

8 
	$mq_«no¶ìp
(
ns
)

11 
	`as£π
(
ns
 <= 1000*1000*1000);

13 #ifde‡
_WIN32


14 
	`SÀï
(
ns
 / 1000);

17 
time•ec
 
timeout
;

19 i‡(
ns
 < 1000*1000*1000) {

20 
timeout
.
tv_£c
 = 0;

21 
timeout
.
tv_n£c
 = 
ns
;

23 
timeout
.
tv_£c
 = 1;

24 
timeout
.
tv_n£c
 = 0;

26 
	`«no¶ìp
(&
timeout
, 
NULL
);

29 
	}
}

	@dep/jemalloc-4.2.0/test/src/mtx.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #i‚de‡
_CRT_SPINCOUNT


4 
	#_CRT_SPINCOUNT
 4000

	)

7 
boﬁ


8 
	$mtx_öô
(
mtx_t
 *
mtx
)

11 #ifde‡
_WIN32


12 i‡(!
	`InôülizeCrôiˇlSe˘i⁄AndSpöCou¡
(&
mtx
->
lock
, 
_CRT_SPINCOUNT
))

13  (
åue
);

14 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

15 
mtx
->
lock
 = 0;

17 
±hªad_muãx©å_t
 
©å
;

19 i‡(
	`±hªad_muãx©å_öô
(&
©å
) != 0)

20  (
åue
);

21 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_DEFAULT
);

22 i‡(
	`±hªad_muãx_öô
(&
mtx
->
lock
, &
©å
) != 0) {

23 
	`±hªad_muãx©å_de°roy
(&
©å
);

24  (
åue
);

26 
	`±hªad_muãx©å_de°roy
(&
©å
);

28  (
Ál£
);

29 
	}
}

32 
	$mtx_föi
(
mtx_t
 *
mtx
)

35 #ifde‡
_WIN32


36 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

38 
	`±hªad_muãx_de°roy
(&
mtx
->
lock
);

40 
	}
}

43 
	$mtx_lock
(
mtx_t
 *
mtx
)

46 #ifde‡
_WIN32


47 
	`E¡îCrôiˇlSe˘i⁄
(&
mtx
->
lock
);

48 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

49 
	`OSSpöLockLock
(&
mtx
->
lock
);

51 
	`±hªad_muãx_lock
(&
mtx
->
lock
);

53 
	}
}

56 
	$mtx_u∆ock
(
mtx_t
 *
mtx
)

59 #ifde‡
_WIN32


60 
	`LóveCrôiˇlSe˘i⁄
(&
mtx
->
lock
);

61 #ñi‡(
	`deföed
(
JEMALLOC_OSSPIN
))

62 
	`OSSpöLockU∆ock
(&
mtx
->
lock
);

64 
	`±hªad_muãx_u∆ock
(&
mtx
->
lock
);

66 
	}
}

	@dep/jemalloc-4.2.0/test/src/test.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	gã°_cou¡
 = 0;

4 
ã°_°©us_t
 
	gã°_cou¡s
[
ã°_°©us_cou¡
] = {0, 0, 0};

5 
ã°_°©us_t
 
	gã°_°©us
 = 
ã°_°©us_∑ss
;

6 c⁄° * 
	gã°_«me
 = "";

8 
	$JEMALLOC_FORMAT_PRINTF
(1, 2)

10 
	$ã°_skù
(c⁄° *
f‹m©
, ...)

12 
va_li°
 
≠
;

14 
	`va_°¨t
(
≠
, 
f‹m©
);

15 
	`mÆloc_v˝rötf
(
NULL
, NULL, 
f‹m©
, 
≠
);

16 
	`va_íd
(
≠
);

17 
	`mÆloc_¥ötf
("\n");

18 
ã°_°©us
 = 
ã°_°©us_skù
;

19 
	}
}

21 
	$JEMALLOC_FORMAT_PRINTF
(1, 2)

23 
	$ã°_Áû
(c⁄° *
f‹m©
, ...)

25 
va_li°
 
≠
;

27 
	`va_°¨t
(
≠
, 
f‹m©
);

28 
	`mÆloc_v˝rötf
(
NULL
, NULL, 
f‹m©
, 
≠
);

29 
	`va_íd
(
≠
);

30 
	`mÆloc_¥ötf
("\n");

31 
ã°_°©us
 = 
ã°_°©us_Áû
;

32 
	}
}

35 
	$ã°_°©us_°rög
(
ã°_°©us_t
 
ã°_°©us
)

38 
ã°_°©us
) {

39 
ã°_°©us_∑ss
:  "pass";

40 
ã°_°©us_skù
:  "skip";

41 
ã°_°©us_Áû
:  "fail";

42 : 
	`nŸ_ªached
();

44 
	}
}

47 
	$p_ã°_öô
(c⁄° *
«me
)

50 
ã°_cou¡
++;

51 
ã°_°©us
 = 
ã°_°©us_∑ss
;

52 
ã°_«me
 = 
«me
;

53 
	}
}

56 
	$p_ã°_föi
()

59 
ã°_cou¡s
[
ã°_°©us
]++;

60 
	`mÆloc_¥ötf
("%s: %s\n", 
ã°_«me
, 
	`ã°_°©us_°rög
(
ã°_°©us
));

61 
	}
}

63 
ã°_°©us_t


64 
	$p_ã°_im∂
(
boﬁ
 
do_mÆloc_öô
, 
ã°_t
 *
t
, 
va_li°
 
≠
)

66 
ã°_°©us_t
 
ªt
;

68 i‡(
do_mÆloc_öô
) {

75 i‡(
	`«Œocx
(1, 0) == 0) {

76 
	`mÆloc_¥ötf
("InitializationÉrror");

77  (
ã°_°©us_Áû
);

81 
ªt
 = 
ã°_°©us_∑ss
;

82 ; 
t
 !
NULL
;Å = 
	`va_¨g
(
≠
, 
ã°_t
 *)) {

83 
	`t
();

84 i‡(
ã°_°©us
 > 
ªt
)

85 
ªt
 = 
ã°_°©us
;

88 
	`mÆloc_¥ötf
("--- %s: %u/%u, %s: %u/%u, %s: %u/%u ---\n",

89 
	`ã°_°©us_°rög
(
ã°_°©us_∑ss
),

90 
ã°_cou¡s
[
ã°_°©us_∑ss
], 
ã°_cou¡
,

91 
	`ã°_°©us_°rög
(
ã°_°©us_skù
),

92 
ã°_cou¡s
[
ã°_°©us_skù
], 
ã°_cou¡
,

93 
	`ã°_°©us_°rög
(
ã°_°©us_Áû
),

94 
ã°_cou¡s
[
ã°_°©us_Áû
], 
ã°_cou¡
);

96  (
ªt
);

97 
	}
}

99 
ã°_°©us_t


100 
	$p_ã°
(
ã°_t
 *
t
, ...)

102 
ã°_°©us_t
 
ªt
;

103 
va_li°
 
≠
;

105 
ªt
 = 
ã°_°©us_∑ss
;

106 
	`va_°¨t
(
≠
, 
t
);

107 
ªt
 = 
	`p_ã°_im∂
(
åue
, 
t
, 
≠
);

108 
	`va_íd
(
≠
);

110  (
ªt
);

111 
	}
}

113 
ã°_°©us_t


114 
	$p_ã°_no_mÆloc_öô
(
ã°_t
 *
t
, ...)

116 
ã°_°©us_t
 
ªt
;

117 
va_li°
 
≠
;

119 
ªt
 = 
ã°_°©us_∑ss
;

120 
	`va_°¨t
(
≠
, 
t
);

121 
ªt
 = 
	`p_ã°_im∂
(
Ál£
, 
t
, 
≠
);

122 
	`va_íd
(
≠
);

124  (
ªt
);

125 
	}
}

128 
	$p_ã°_Áû
(c⁄° *
¥efix
, c⁄° *
mesßge
)

131 
	`mÆloc_˝rötf
(
NULL
, NULL, "%s%s\n", 
¥efix
, 
mesßge
);

132 
ã°_°©us
 = 
ã°_°©us_Áû
;

133 
	}
}

	@dep/jemalloc-4.2.0/test/src/thd.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
_WIN32


5 
	$thd_¸óã
(
thd_t
 *
thd
, *(*
¥oc
)(*), *
¨g
)

7 
LPTHREAD_START_ROUTINE
 
routöe
 = (LPTHREAD_START_ROUTINE)
¥oc
;

8 *
thd
 = 
	`Cª©eThªad
(
NULL
, 0, 
routöe
, 
¨g
, 0, NULL);

9 i‡(*
thd
 =
NULL
)

10 
	`ã°_Áû
("Error in CreateThread()\n");

11 
	}
}

14 
	$thd_joö
(
thd_t
 
thd
, **
ªt
)

17 i‡(
	`WaôF‹SögÀObje˘
(
thd
, 
INFINITE
Ë=
WAIT_OBJECT_0
 && 
ªt
) {

18 
DWORD
 
exô_code
;

19 
	`GëExôCodeThªad
(
thd
, (
LPDWORD
Ë&
exô_code
);

20 *
ªt
 = (*)(
uöçå_t
)
exô_code
;

22 
	}
}

26 
	$thd_¸óã
(
thd_t
 *
thd
, *(*
¥oc
)(*), *
¨g
)

29 i‡(
	`±hªad_¸óã
(
thd
, 
NULL
, 
¥oc
, 
¨g
) != 0)

30 
	`ã°_Áû
("Error inÖthread_create()\n");

31 
	}
}

34 
	$thd_joö
(
thd_t
 
thd
, **
ªt
)

37 
	`±hªad_joö
(
thd
, 
ªt
);

38 
	}
}

	@dep/jemalloc-4.2.0/test/src/timer.c

1 
	~"ã°/jemÆloc_ã°.h
"

4 
	$timî_°¨t
(
timedñè_t
 *
timî
)

7 
	`n°ime_öô
(&
timî
->
t0
, 0);

8 
	`n°ime_upd©e
(&
timî
->
t0
);

9 
	}
}

12 
	$timî_°›
(
timedñè_t
 *
timî
)

15 
	`n°ime_c›y
(&
timî
->
t1
, &timî->
t0
);

16 
	`n°ime_upd©e
(&
timî
->
t1
);

17 
	}
}

19 
uöt64_t


20 
	$timî_u£c
(c⁄° 
timedñè_t
 *
timî
)

22 
n°ime_t
 
dñè
;

24 
	`n°ime_c›y
(&
dñè
, &
timî
->
t1
);

25 
	`n°ime_subåa˘
(&
dñè
, &
timî
->
t0
);

26  (
	`n°ime_ns
(&
dñè
) / 1000);

27 
	}
}

30 
	$timî_øtio
(
timedñè_t
 *
a
,Åimedñè_à*
b
, *
buf
, 
size_t
 
buÊí
)

32 
uöt64_t
 
t0
 = 
	`timî_u£c
(
a
);

33 
uöt64_t
 
t1
 = 
	`timî_u£c
(
b
);

34 
uöt64_t
 
mu…
;

35 
size_t
 
i
 = 0;

36 
size_t
 
j
, 
n
;

39 
n
 = 
	`mÆloc_¢¥ötf
(&
buf
[
i
], 
buÊí
-i, "%"
FMTu64
, 
t0
 / 
t1
);

40 
i
 +
n
;

41 i‡(
i
 >
buÊí
)

43 
mu…
 = 1;

44 
j
 = 0; j < 
n
; j++)

45 
mu…
 *= 10;

48 
n
 = 
	`mÆloc_¢¥ötf
(&
buf
[
i
], 
buÊí
-i, ".");

49 
i
 +
n
;

52 
i
 < 
buÊí
-1) {

53 
uöt64_t
 
round
 = (
i
+1 =
buÊí
-1 && ((
t0
 * 
mu…
 * 10 / 
t1
) % 10

55 
n
 = 
	`mÆloc_¢¥ötf
(&
buf
[
i
], 
buÊí
-i,

56 "%"
FMTu64
, (
t0
 * 
mu…
 / 
t1
Ë% 10 + 
round
);

57 
i
 +
n
;

58 
mu…
 *= 10;

60 
	}
}

	@dep/jemalloc-4.2.0/test/stress/microbench.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
JEMALLOC_INLINE_C
 

4 
	$time_func
(
timedñè_t
 *
timî
, 
uöt64_t
 
nw¨mup
, uöt64_à
nôî
,

5 (*
func
)())

7 
uöt64_t
 
i
;

9 
i
 = 0; i < 
nw¨mup
; i++)

10 
	`func
();

11 
	`timî_°¨t
(
timî
);

12 
i
 = 0; i < 
nôî
; i++)

13 
	`func
();

14 
	`timî_°›
(
timî
);

15 
	}
}

18 
com∑ª_funcs
(
uöt64_t
 
nw¨mup
, uöt64_à
nôî
, c⁄° *
«me_a
,

19 (*
func_a
), c⁄° *
«me_b
, (*
func_b
))

21 
timedñè_t
 
timî_a
, 
timî_b
;

22 
øtio_buf
[6];

23 *
p
;

25 
p
 = 
	`mÆlocx
(1, 0);

26 i‡(
p
 =
NULL
) {

27 
	`ã°_Áû
("Unexpected mallocx() failure");

31 
	`time_func
(&
timî_a
, 
nw¨mup
, 
nôî
, 
func_a
);

32 
	`time_func
(&
timî_b
, 
nw¨mup
, 
nôî
, 
func_b
);

34 
	`timî_øtio
(&
timî_a
, &
timî_b
, 
øtio_buf
, (ratio_buf));

35 
	`mÆloc_¥ötf
("%"
FMTu64
" iterations, %s=%"FMTu64"us, "

36 "%s=%"
FMTu64
"us,Ñatio=1:%s\n",

37 
nôî
, 
«me_a
, 
	`timî_u£c
(&
timî_a
), 
«me_b
,Åimî_u£c(&
timî_b
),

38 
øtio_buf
);

40 
	`dÆlocx
(
p
, 0);

41 
	}
}

44 
	$mÆloc_‰ì
()

47 *
p
 = 
	`mÆloc
(1);

48 i‡(
p
 =
NULL
) {

49 
	`ã°_Áû
("Unexpected malloc() failure");

52 
	`‰ì
(
p
);

53 
	}
}

56 
	$mÆlocx_‰ì
()

58 *
p
 = 
	`mÆlocx
(1, 0);

59 i‡(
p
 =
NULL
) {

60 
	`ã°_Áû
("Unexpected mallocx() failure");

63 
	`‰ì
(
p
);

64 
	}
}

66 
	$TEST_BEGIN
(
ã°_mÆloc_vs_mÆlocx
)

69 
	`com∑ª_funcs
(10*1000*1000, 100*1000*1000, "malloc",

70 
mÆloc_‰ì
, "mÆlocx", 
mÆlocx_‰ì
);

71 
	}
}

72 
TEST_END


75 
	$mÆloc_dÆlocx
()

77 *
p
 = 
	`mÆloc
(1);

78 i‡(
p
 =
NULL
) {

79 
	`ã°_Áû
("Unexpected malloc() failure");

82 
	`dÆlocx
(
p
, 0);

83 
	}
}

86 
	$mÆloc_sdÆlocx
()

88 *
p
 = 
	`mÆloc
(1);

89 i‡(
p
 =
NULL
) {

90 
	`ã°_Áû
("Unexpected malloc() failure");

93 
	`sdÆlocx
(
p
, 1, 0);

94 
	}
}

96 
	$TEST_BEGIN
(
ã°_‰ì_vs_dÆlocx
)

99 
	`com∑ª_funcs
(10*1000*1000, 100*1000*1000, "‰ì", 
mÆloc_‰ì
,

100 "dÆlocx", 
mÆloc_dÆlocx
);

101 
	}
}

102 
TEST_END


104 
	$TEST_BEGIN
(
ã°_dÆlocx_vs_sdÆlocx
)

107 
	`com∑ª_funcs
(10*1000*1000, 100*1000*1000, "dÆlocx", 
mÆloc_dÆlocx
,

108 "sdÆlocx", 
mÆloc_sdÆlocx
);

109 
	}
}

110 
TEST_END


113 
	$mÆloc_mus_‰ì
()

115 *
p
;

117 
p
 = 
	`mÆloc
(1);

118 i‡(
p
 =
NULL
) {

119 
	`ã°_Áû
("Unexpected malloc() failure");

122 
	`mÆloc_ußbÀ_size
(
p
);

123 
	`‰ì
(
p
);

124 
	}
}

127 
	$mÆloc_ßŒocx_‰ì
()

129 *
p
;

131 
p
 = 
	`mÆloc
(1);

132 i‡(
p
 =
NULL
) {

133 
	`ã°_Áû
("Unexpected malloc() failure");

136 i‡(
	`ßŒocx
(
p
, 0) < 1)

137 
	`ã°_Áû
("Unexpected sallocx() failure");

138 
	`‰ì
(
p
);

139 
	}
}

141 
	$TEST_BEGIN
(
ã°_mus_vs_ßŒocx
)

144 
	`com∑ª_funcs
(10*1000*1000, 100*1000*1000, "malloc_usable_size",

145 
mÆloc_mus_‰ì
, "ßŒocx", 
mÆloc_ßŒocx_‰ì
);

146 
	}
}

147 
TEST_END


150 
	$mÆloc_«Œocx_‰ì
()

152 *
p
;

154 
p
 = 
	`mÆloc
(1);

155 i‡(
p
 =
NULL
) {

156 
	`ã°_Áû
("Unexpected malloc() failure");

159 i‡(
	`«Œocx
(1, 0) < 1)

160 
	`ã°_Áû
("UnexpectedÇallocx() failure");

161 
	`‰ì
(
p
);

162 
	}
}

164 
	$TEST_BEGIN
(
ã°_ßŒocx_vs_«Œocx
)

167 
	`com∑ª_funcs
(10*1000*1000, 100*1000*1000, "sallocx",

168 
mÆloc_ßŒocx_‰ì
, "«Œocx", 
mÆloc_«Œocx_‰ì
);

169 
	}
}

170 
TEST_END


173 
	$maö
()

176  (
	`ã°
(

177 
ã°_mÆloc_vs_mÆlocx
,

178 
ã°_‰ì_vs_dÆlocx
,

179 
ã°_dÆlocx_vs_sdÆlocx
,

180 
ã°_mus_vs_ßŒocx
,

181 
ã°_ßŒocx_vs_«Œocx
));

182 
	}
}

	@dep/jemalloc-4.2.0/test/unit/SFMT.c

36 
	~"ã°/jemÆloc_ã°.h
"

38 
	#BLOCK_SIZE
 10000

	)

39 
	#BLOCK_SIZE64
 (
BLOCK_SIZE
 / 2)

	)

40 
	#COUNT_1
 1000

	)

41 
	#COUNT_2
 700

	)

43 c⁄° 
uöt32_t
 
	göô_gí_ønd_32_ex≥˘ed
[] = {

245 c⁄° 
uöt32_t
 
	göô_by_¨øy_32_ex≥˘ed
[] = {

447 c⁄° 
uöt64_t
 
	göô_gí_ønd_64_ex≥˘ed
[] = {

448 
KQU
(16924766246869039260), KQU( 8201438687333352714),

449 
KQU
( 2265290287015001750), KQU(18397264611805473832),

450 
KQU
( 3375255223302384358), KQU( 6345559975416828796),

451 
KQU
(18229739242790328073), KQU( 7596792742098800905),

452 
KQU
( 255338647169685981), KQU( 2052747240048610300),

453 
KQU
(18328151576097299343), KQU(12472905421133796567),

454 
KQU
(11315245349717600863), KQU(16594110197775871209),

455 
KQU
(15708751964632456450), KQU(10452031272054632535),

456 
KQU
(11097646720811454386), KQU( 4556090668445745441),

457 
KQU
(17116187693090663106), KQU(14931526836144510645),

458 
KQU
( 9190752218020552591), KQU( 9625800285771901401),

459 
KQU
(13995141077659972832), KQU( 5194209094927829625),

460 
KQU
( 4156788379151063303), KQU( 8523452593770139494),

461 
KQU
(14082382103049296727), KQU( 2462601863986088483),

462 
KQU
( 3030583461592840678), KQU( 5221622077872827681),

463 
KQU
( 3084210671228981236), KQU(13956758381389953823),

464 
KQU
(13503889856213423831), KQU(15696904024189836170),

465 
KQU
( 4612584152877036206), KQU( 6231135538447867881),

466 
KQU
(10172457294158869468), KQU( 6452258628466708150),

467 
KQU
(14044432824917330221), KQU( 370168364480044279),

468 
KQU
(10102144686427193359), KQU( 667870489994776076),

469 
KQU
( 2732271956925885858), KQU(18027788905977284151),

470 
KQU
(15009842788582923859), KQU( 7136357960180199542),

471 
KQU
(15901736243475578127), KQU(16951293785352615701),

472 
KQU
(10551492125243691632), KQU(17668869969146434804),

473 
KQU
(13646002971174390445), KQU( 9804471050759613248),

474 
KQU
( 5511670439655935493), KQU(18103342091070400926),

475 
KQU
(17224512747665137533), KQU(15534627482992618168),

476 
KQU
( 1423813266186582647), KQU(15821176807932930024),

477 
KQU
( 30323369733607156), KQU(11599382494723479403),

478 
KQU
( 653856076586810062), KQU( 3176437395144899659),

479 
KQU
(14028076268147963917), KQU(16156398271809666195),

480 
KQU
( 3166955484848201676), KQU( 5746805620136919390),

481 
KQU
(17297845208891256593), KQU(11691653183226428483),

482 
KQU
(17900026146506981577), KQU(15387382115755971042),

483 
KQU
(16923567681040845943), KQU( 8039057517199388606),

484 
KQU
(11748409241468629263), KQU( 794358245539076095),

485 
KQU
(13438501964693401242), KQU(14036803236515618962),

486 
KQU
( 5252311215205424721), KQU(17806589612915509081),

487 
KQU
( 6802767092397596006), KQU(14212120431184557140),

488 
KQU
( 1072951366761385712), KQU(13098491780722836296),

489 
KQU
( 9466676828710797353), KQU(12673056849042830081),

490 
KQU
(12763726623645357580), KQU(16468961652999309493),

491 
KQU
(15305979875636438926), KQU(17444713151223449734),

492 
KQU
( 5692214267627883674), KQU(13049589139196151505),

493 
KQU
( 880115207831670745), KQU( 1776529075789695498),

494 
KQU
(16695225897801466485), KQU(10666901778795346845),

495 
KQU
( 6164389346722833869), KQU( 2863817793264300475),

496 
KQU
( 9464049921886304754), KQU( 3993566636740015468),

497 
KQU
( 9983749692528514136), KQU(16375286075057755211),

498 
KQU
(16042643417005440820), KQU(11445419662923489877),

499 
KQU
( 7999038846885158836), KQU( 6721913661721511535),

500 
KQU
( 5363052654139357320), KQU( 1817788761173584205),

501 
KQU
(13290974386445856444), KQU( 4650350818937984680),

502 
KQU
( 8219183528102484836), KQU( 1569862923500819899),

503 
KQU
( 4189359732136641860), KQU(14202822961683148583),

504 
KQU
( 4457498315309429058), KQU(13089067387019074834),

505 
KQU
(11075517153328927293), KQU(10277016248336668389),

506 
KQU
( 7070509725324401122), KQU(17808892017780289380),

507 
KQU
(13143367339909287349), KQU( 1377743745360085151),

508 
KQU
( 5749341807421286485), KQU(14832814616770931325),

509 
KQU
( 7688820635324359492), KQU(10960474011539770045),

510 
KQU
( 81970066653179790), KQU(12619476072607878022),

511 
KQU
( 4419566616271201744), KQU(15147917311750568503),

512 
KQU
( 5549739182852706345), KQU( 7308198397975204770),

513 
KQU
(13580425496671289278), KQU(17070764785210130301),

514 
KQU
( 8202832846285604405), KQU( 6873046287640887249),

515 
KQU
( 6927424434308206114), KQU( 6139014645937224874),

516 
KQU
(10290373645978487639), KQU(15904261291701523804),

517 
KQU
( 9628743442057826883), KQU(18383429096255546714),

518 
KQU
( 4977413265753686967), KQU( 7714317492425012869),

519 
KQU
( 9025232586309926193), KQU(14627338359776709107),

520 
KQU
(14759849896467790763), KQU(10931129435864423252),

521 
KQU
( 4588456988775014359), KQU(10699388531797056724),

522 
KQU
( 468652268869238792), KQU( 5755943035328078086),

523 
KQU
( 2102437379988580216), KQU( 9986312786506674028),

524 
KQU
( 2654207180040945604), KQU( 8726634790559960062),

525 
KQU
( 100497234871808137), KQU( 2800137176951425819),

526 
KQU
( 6076627612918553487), KQU( 5780186919186152796),

527 
KQU
( 8179183595769929098), KQU( 6009426283716221169),

528 
KQU
( 2796662551397449358), KQU( 1756961367041986764),

529 
KQU
( 6972897917355606205), KQU(14524774345368968243),

530 
KQU
( 2773529684745706940), KQU( 4853632376213075959),

531 
KQU
( 4198177923731358102), KQU( 8271224913084139776),

532 
KQU
( 2741753121611092226), KQU(16782366145996731181),

533 
KQU
(15426125238972640790), KQU(13595497100671260342),

534 
KQU
( 3173531022836259898), KQU( 6573264560319511662),

535 
KQU
(18041111951511157441), KQU( 2351433581833135952),

536 
KQU
( 3113255578908173487), KQU( 1739371330877858784),

537 
KQU
(16046126562789165480), KQU( 8072101652214192925),

538 
KQU
(15267091584090664910), KQU( 9309579200403648940),

539 
KQU
( 5218892439752408722), KQU(14492477246004337115),

540 
KQU
(17431037586679770619), KQU( 7385248135963250480),

541 
KQU
( 9580144956565560660), KQU( 4919546228040008720),

542 
KQU
(15261542469145035584), KQU(18233297270822253102),

543 
KQU
( 5453248417992302857), KQU( 9309519155931460285),

544 
KQU
(10342813012345291756), KQU(15676085186784762381),

545 
KQU
(15912092950691300645), KQU( 9371053121499003195),

546 
KQU
( 9897186478226866746), KQU(14061858287188196327),

547 
KQU
( 122575971620788119), KQU(12146750969116317754),

548 
KQU
( 4438317272813245201), KQU( 8332576791009527119),

549 
KQU
(13907785691786542057), KQU(10374194887283287467),

550 
KQU
( 2098798755649059566), KQU( 3416235197748288894),

551 
KQU
( 8688269957320773484), KQU( 7503964602397371571),

552 
KQU
(16724977015147478236), KQU( 9461512855439858184),

553 
KQU
(13259049744534534727), KQU( 3583094952542899294),

554 
KQU
( 8764245731305528292), KQU(13240823595462088985),

555 
KQU
(13716141617617910448), KQU(18114969519935960955),

556 
KQU
( 2297553615798302206), KQU( 4585521442944663362),

557 
KQU
(17776858680630198686), KQU( 4685873229192163363),

558 
KQU
( 152558080671135627), KQU(15424900540842670088),

559 
KQU
(13229630297130024108), KQU(17530268788245718717),

560 
KQU
(16675633913065714144), KQU( 3158912717897568068),

561 
KQU
(15399132185380087288), KQU( 7401418744515677872),

562 
KQU
(13135412922344398535), KQU( 6385314346100509511),

563 
KQU
(13962867001134161139), KQU(10272780155442671999),

564 
KQU
(12894856086597769142), KQU(13340877795287554994),

565 
KQU
(12913630602094607396), KQU(12543167911119793857),

566 
KQU
(17343570372251873096), KQU(10959487764494150545),

567 
KQU
( 6966737953093821128), KQU(13780699135496988601),

568 
KQU
( 4405070719380142046), KQU(14923788365607284982),

569 
KQU
( 2869487678905148380), KQU( 6416272754197188403),

570 
KQU
(15017380475943612591), KQU( 1995636220918429487),

571 
KQU
( 3402016804620122716), KQU(15800188663407057080),

572 
KQU
(11362369990390932882), KQU(15262183501637986147),

573 
KQU
(10239175385387371494), KQU( 9352042420365748334),

574 
KQU
( 1682457034285119875), KQU( 1724710651376289644),

575 
KQU
( 2038157098893817966), KQU( 9897825558324608773),

576 
KQU
( 1477666236519164736), KQU(16835397314511233640),

577 
KQU
(10370866327005346508), KQU(10157504370660621982),

578 
KQU
(12113904045335882069), KQU(13326444439742783008),

579 
KQU
(11302769043000765804), KQU(13594979923955228484),

580 
KQU
(11779351762613475968), KQU( 3786101619539298383),

581 
KQU
( 8021122969180846063), KQU(15745904401162500495),

582 
KQU
(10762168465993897267), KQU(13552058957896319026),

583 
KQU
(11200228655252462013), KQU( 5035370357337441226),

584 
KQU
( 7593918984545500013), KQU( 5418554918361528700),

585 
KQU
( 4858270799405446371), KQU( 9974659566876282544),

586 
KQU
(18227595922273957859), KQU( 2772778443635656220),

587 
KQU
(14285143053182085385), KQU( 9939700992429600469),

588 
KQU
(12756185904545598068), KQU( 2020783375367345262),

589 
KQU
( 57026775058331227), KQU( 950827867930065454),

590 
KQU
( 6602279670145371217), KQU( 2291171535443566929),

591 
KQU
( 5832380724425010313), KQU( 1220343904715982285),

592 
KQU
(17045542598598037633), KQU(15460481779702820971),

593 
KQU
(13948388779949365130), KQU(13975040175430829518),

594 
KQU
(17477538238425541763), KQU(11104663041851745725),

595 
KQU
(15860992957141157587), KQU(14529434633012950138),

596 
KQU
( 2504838019075394203), KQU( 7512113882611121886),

597 
KQU
( 4859973559980886617), KQU( 1258601555703250219),

598 
KQU
(15594548157514316394), KQU( 4516730171963773048),

599 
KQU
(11380103193905031983), KQU( 6809282239982353344),

600 
KQU
(18045256930420065002), KQU( 2453702683108791859),

601 
KQU
( 977214582986981460), KQU( 2006410402232713466),

602 
KQU
( 6192236267216378358), KQU( 3429468402195675253),

603 
KQU
(18146933153017348921), KQU(17369978576367231139),

604 
KQU
( 1246940717230386603), KQU(11335758870083327110),

605 
KQU
(14166488801730353682), KQU( 9008573127269635732),

606 
KQU
(10776025389820643815), KQU(15087605441903942962),

607 
KQU
( 1359542462712147922), KQU(13898874411226454206),

608 
KQU
(17911176066536804411), KQU( 9435590428600085274),

609 
KQU
( 294488509967864007), KQU( 8890111397567922046),

610 
KQU
( 7987823476034328778), KQU(13263827582440967651),

611 
KQU
( 7503774813106751573), KQU(14974747296185646837),

612 
KQU
( 8504765037032103375), KQU(17340303357444536213),

613 
KQU
( 7704610912964485743), KQU( 8107533670327205061),

614 
KQU
( 9062969835083315985), KQU(16968963142126734184),

615 
KQU
(12958041214190810180), KQU( 2720170147759570200),

616 
KQU
( 2986358963942189566), KQU(14884226322219356580),

617 
KQU
( 286224325144368520), KQU(11313800433154279797),

618 
KQU
(18366849528439673248), KQU(17899725929482368789),

619 
KQU
( 3730004284609106799), KQU( 1654474302052767205),

620 
KQU
( 5006698007047077032), KQU( 8196893913601182838),

621 
KQU
(15214541774425211640), KQU(17391346045606626073),

622 
KQU
( 8369003584076969089), KQU( 3939046733368550293),

623 
KQU
(10178639720308707785), KQU( 2180248669304388697),

624 
KQU
( 62894391300126322), KQU( 9205708961736223191),

625 
KQU
( 6837431058165360438), KQU( 3150743890848308214),

626 
KQU
(17849330658111464583), KQU(12214815643135450865),

627 
KQU
(13410713840519603402), KQU( 3200778126692046802),

628 
KQU
(13354780043041779313), KQU( 800850022756886036),

629 
KQU
(15660052933953067433), KQU( 6572823544154375676),

630 
KQU
(11030281857015819266), KQU(12682241941471433835),

631 
KQU
(11654136407300274693), KQU( 4517795492388641109),

632 
KQU
( 9757017371504524244), KQU(17833043400781889277),

633 
KQU
(12685085201747792227), KQU(10408057728835019573),

634 
KQU
( 98370418513455221), KQU( 6732663555696848598),

635 
KQU
(13248530959948529780), KQU( 3530441401230622826),

636 
KQU
(18188251992895660615), KQU( 1847918354186383756),

637 
KQU
( 1127392190402660921), KQU(11293734643143819463),

638 
KQU
( 3015506344578682982), KQU(13852645444071153329),

639 
KQU
( 2121359659091349142), KQU( 1294604376116677694),

640 
KQU
( 5616576231286352318), KQU( 7112502442954235625),

641 
KQU
(11676228199551561689), KQU(12925182803007305359),

642 
KQU
( 7852375518160493082), KQU( 1136513130539296154),

643 
KQU
( 5636923900916593195), KQU( 3221077517612607747),

644 
KQU
(17784790465798152513), KQU( 3554210049056995938),

645 
KQU
(17476839685878225874), KQU( 3206836372585575732),

646 
KQU
( 2765333945644823430), KQU(10080070903718799528),

647 
KQU
( 5412370818878286353), KQU( 9689685887726257728),

648 
KQU
( 8236117509123533998), KQU( 1951139137165040214),

649 
KQU
( 4492205209227980349), KQU(16541291230861602967),

650 
KQU
( 1424371548301437940), KQU( 9117562079669206794),

651 
KQU
(14374681563251691625), KQU(13873164030199921303),

652 
KQU
( 6680317946770936731), KQU(15586334026918276214),

653 
KQU
(10896213950976109802), KQU( 9506261949596413689),

654 
KQU
( 9903949574308040616), KQU( 6038397344557204470),

655 
KQU
( 174601465422373648), KQU(15946141191338238030),

656 
KQU
(17142225620992044937), KQU( 7552030283784477064),

657 
KQU
( 2947372384532947997), KQU( 510797021688197711),

658 
KQU
( 4962499439249363461), KQU( 23770320158385357),

659 
KQU
( 959774499105138124), KQU( 1468396011518788276),

660 
KQU
( 2015698006852312308), KQU( 4149400718489980136),

661 
KQU
( 5992916099522371188), KQU(10819182935265531076),

662 
KQU
(16189787999192351131), KQU( 342833961790261950),

663 
KQU
(12470830319550495336), KQU(18128495041912812501),

664 
KQU
( 1193600899723524337), KQU( 9056793666590079770),

665 
KQU
( 2154021227041669041), KQU( 4963570213951235735),

666 
KQU
( 4865075960209211409), KQU( 2097724599039942963),

667 
KQU
( 2024080278583179845), KQU(11527054549196576736),

668 
KQU
(10650256084182390252), KQU( 4808408648695766755),

669 
KQU
( 1642839215013788844), KQU(10607187948250398390),

670 
KQU
( 7076868166085913508), KQU( 730522571106887032),

671 
KQU
(12500579240208524895), KQU( 4484390097311355324),

672 
KQU
(15145801330700623870), KQU( 8055827661392944028),

673 
KQU
( 5865092976832712268), KQU(15159212508053625143),

674 
KQU
( 3560964582876483341), KQU( 4070052741344438280),

675 
KQU
( 6032585709886855634), KQU(15643262320904604873),

676 
KQU
( 2565119772293371111), KQU( 318314293065348260),

677 
KQU
(15047458749141511872), KQU( 7772788389811528730),

678 
KQU
( 7081187494343801976), KQU( 6465136009467253947),

679 
KQU
(10425940692543362069), KQU( 554608190318339115),

680 
KQU
(14796699860302125214), KQU( 1638153134431111443),

681 
KQU
(10336967447052276248), KQU( 8412308070396592958),

682 
KQU
( 4004557277152051226), KQU( 8143598997278774834),

683 
KQU
(16413323996508783221), KQU(13139418758033994949),

684 
KQU
( 9772709138335006667), KQU( 2818167159287157659),

685 
KQU
(17091740573832523669), KQU(14629199013130751608),

686 
KQU
(18268322711500338185), KQU( 8290963415675493063),

687 
KQU
( 8830864907452542588), KQU( 1614839084637494849),

688 
KQU
(14855358500870422231), KQU( 3472996748392519937),

689 
KQU
(15317151166268877716), KQU( 5825895018698400362),

690 
KQU
(16730208429367544129), KQU(10481156578141202800),

691 
KQU
( 4746166512382823750), KQU(12720876014472464998),

692 
KQU
( 8825177124486735972), KQU(13733447296837467838),

693 
KQU
( 6412293741681359625), KQU( 8313213138756135033),

694 
KQU
(11421481194803712517), KQU( 7997007691544174032),

695 
KQU
( 6812963847917605930), KQU( 9683091901227558641),

696 
KQU
(14703594165860324713), KQU( 1775476144519618309),

697 
KQU
( 2724283288516469519), KQU( 717642555185856868),

698 
KQU
( 8736402192215092346), KQU(11878800336431381021),

699 
KQU
( 4348816066017061293), KQU( 6115112756583631307),

700 
KQU
( 9176597239667142976), KQU(12615622714894259204),

701 
KQU
(10283406711301385987), KQU( 5111762509485379420),

702 
KQU
( 3118290051198688449), KQU( 7345123071632232145),

703 
KQU
( 9176423451688682359), KQU( 4843865456157868971),

704 
KQU
(12008036363752566088), KQU(12058837181919397720),

705 
KQU
( 2145073958457347366), KQU( 1526504881672818067),

706 
KQU
( 3488830105567134848), KQU(13208362960674805143),

707 
KQU
( 4077549672899572192), KQU( 7770995684693818365),

708 
KQU
( 1398532341546313593), KQU(12711859908703927840),

709 
KQU
( 1417561172594446813), KQU(17045191024194170604),

710 
KQU
( 4101933177604931713), KQU(14708428834203480320),

711 
KQU
(17447509264469407724), KQU(14314821973983434255),

712 
KQU
(17990472271061617265), KQU( 5087756685841673942),

713 
KQU
(12797820586893859939), KQU( 1778128952671092879),

714 
KQU
( 3535918530508665898), KQU( 9035729701042481301),

715 
KQU
(14808661568277079962), KQU(14587345077537747914),

716 
KQU
(11920080002323122708), KQU( 6426515805197278753),

717 
KQU
( 3295612216725984831), KQU(11040722532100876120),

718 
KQU
(12305952936387598754), KQU(16097391899742004253),

719 
KQU
( 4908537335606182208), KQU(12446674552196795504),

720 
KQU
(16010497855816895177), KQU( 9194378874788615551),

721 
KQU
( 3382957529567613384), KQU( 5154647600754974077),

722 
KQU
( 9801822865328396141), KQU( 9023662173919288143),

723 
KQU
(17623115353825147868), KQU( 8238115767443015816),

724 
KQU
(15811444159859002560), KQU( 9085612528904059661),

725 
KQU
( 6888601089398614254), KQU( 258252992894160189),

726 
KQU
( 6704363880792428622), KQU( 6114966032147235763),

727 
KQU
(11075393882690261875), KQU( 8797664238933620407),

728 
KQU
( 5901892006476726920), KQU( 5309780159285518958),

729 
KQU
(14940808387240817367), KQU(14642032021449656698),

730 
KQU
( 9808256672068504139), KQU( 3670135111380607658),

731 
KQU
(11211211097845960152), KQU( 1474304506716695808),

732 
KQU
(15843166204506876239), KQU( 7661051252471780561),

733 
KQU
(10170905502249418476), KQU( 7801416045582028589),

734 
KQU
( 2763981484737053050), KQU( 9491377905499253054),

735 
KQU
(16201395896336915095), KQU( 9256513756442782198),

736 
KQU
( 5411283157972456034), KQU( 5059433122288321676),

737 
KQU
( 4327408006721123357), KQU( 9278544078834433377),

738 
KQU
( 7601527110882281612), KQU(11848295896975505251),

739 
KQU
(12096998801094735560), KQU(14773480339823506413),

740 
KQU
(15586227433895802149), KQU(12786541257830242872),

741 
KQU
( 6904692985140503067), KQU( 5309011515263103959),

742 
KQU
(12105257191179371066), KQU(14654380212442225037),

743 
KQU
( 2556774974190695009), KQU( 4461297399927600261),

744 
KQU
(14888225660915118646), KQU(14915459341148291824),

745 
KQU
( 2738802166252327631), KQU( 6047155789239131512),

746 
KQU
(12920545353217010338), KQU(10697617257007840205),

747 
KQU
( 2751585253158203504), KQU(13252729159780047496),

748 
KQU
(14700326134672815469), KQU(14082527904374600529),

749 
KQU
(16852962273496542070), KQU(17446675504235853907),

750 
KQU
(15019600398527572311), KQU(12312781346344081551),

751 
KQU
(14524667935039810450), KQU( 5634005663377195738),

752 
KQU
(11375574739525000569), KQU( 2423665396433260040),

753 
KQU
( 5222836914796015410), KQU( 4397666386492647387),

754 
KQU
( 4619294441691707638), KQU( 665088602354770716),

755 
KQU
(13246495665281593610), KQU( 6564144270549729409),

756 
KQU
(10223216188145661688), KQU( 3961556907299230585),

757 
KQU
(11543262515492439914), KQU(16118031437285993790),

758 
KQU
( 7143417964520166465), KQU(13295053515909486772),

759 
KQU
( 40434666004899675), KQU(17127804194038347164),

760 
KQU
( 8599165966560586269), KQU( 8214016749011284903),

761 
KQU
(13725130352140465239), KQU( 5467254474431726291),

762 
KQU
( 7748584297438219877), KQU(16933551114829772472),

763 
KQU
( 2169618439506799400), KQU( 2169787627665113463),

764 
KQU
(17314493571267943764), KQU(18053575102911354912),

765 
KQU
(11928303275378476973), KQU(11593850925061715550),

766 
KQU
(17782269923473589362), KQU( 3280235307704747039),

767 
KQU
( 6145343578598685149), KQU(17080117031114086090),

768 
KQU
(18066839902983594755), KQU( 6517508430331020706),

769 
KQU
( 8092908893950411541), KQU(12558378233386153732),

770 
KQU
( 4476532167973132976), KQU(16081642430367025016),

771 
KQU
( 4233154094369139361), KQU( 8693630486693161027),

772 
KQU
(11244959343027742285), KQU(12273503967768513508),

773 
KQU
(14108978636385284876), KQU( 7242414665378826984),

774 
KQU
( 6561316938846562432), KQU( 8601038474994665795),

775 
KQU
(17532942353612365904), KQU(17940076637020912186),

776 
KQU
( 7340260368823171304), KQU( 7061807613916067905),

777 
KQU
(10561734935039519326), KQU(17990796503724650862),

778 
KQU
( 6208732943911827159), KQU( 359077562804090617),

779 
KQU
(14177751537784403113), KQU(10659599444915362902),

780 
KQU
(15081727220615085833), KQU(13417573895659757486),

781 
KQU
(15513842342017811524), KQU(11814141516204288231),

782 
KQU
( 1827312513875101814), KQU( 2804611699894603103),

783 
KQU
(17116500469975602763), KQU(12270191815211952087),

784 
KQU
(12256358467786024988), KQU(18435021722453971267),

785 
KQU
( 671330264390865618), KQU( 476504300460286050),

786 
KQU
(16465470901027093441), KQU( 4047724406247136402),

787 
KQU
( 1322305451411883346), KQU( 1388308688834322280),

788 
KQU
( 7303989085269758176), KQU( 9323792664765233642),

789 
KQU
( 4542762575316368936), KQU(17342696132794337618),

790 
KQU
( 4588025054768498379), KQU(13415475057390330804),

791 
KQU
(17880279491733405570), KQU(10610553400618620353),

792 
KQU
( 3180842072658960139), KQU(13002966655454270120),

793 
KQU
( 1665301181064982826), KQU( 7083673946791258979),

794 
KQU
( 190522247122496820), KQU(17388280237250677740),

795 
KQU
( 8430770379923642945), KQU(12987180971921668584),

796 
KQU
( 2311086108365390642), KQU( 2870984383579822345),

797 
KQU
(14014682609164653318), KQU(14467187293062251484),

798 
KQU
( 192186361147413298), KQU(15171951713531796524),

799 
KQU
( 9900305495015948728), KQU(17958004775615466344),

800 
KQU
(14346380954498606514), KQU(18040047357617407096),

801 
KQU
( 5035237584833424532), KQU(15089555460613972287),

802 
KQU
( 4131411873749729831), KQU( 1329013581168250330),

803 
KQU
(10095353333051193949), KQU(10749518561022462716),

804 
KQU
( 9050611429810755847), KQU(15022028840236655649),

805 
KQU
( 8775554279239748298), KQU(13105754025489230502),

806 
KQU
(15471300118574167585), KQU( 89864764002355628),

807 
KQU
( 8776416323420466637), KQU( 5280258630612040891),

808 
KQU
( 2719174488591862912), KQU( 7599309137399661994),

809 
KQU
(15012887256778039979), KQU(14062981725630928925),

810 
KQU
(12038536286991689603), KQU( 7089756544681775245),

811 
KQU
(10376661532744718039), KQU( 1265198725901533130),

812 
KQU
(13807996727081142408), KQU( 2935019626765036403),

813 
KQU
( 7651672460680700141), KQU( 3644093016200370795),

814 
KQU
( 2840982578090080674), KQU(17956262740157449201),

815 
KQU
(18267979450492880548), KQU(11799503659796848070),

816 
KQU
( 9942537025669672388), KQU(11886606816406990297),

817 
KQU
( 5488594946437447576), KQU( 7226714353282744302),

818 
KQU
( 3784851653123877043), KQU( 878018453244803041),

819 
KQU
(12110022586268616085), KQU( 734072179404675123),

820 
KQU
(11869573627998248542), KQU( 469150421297783998),

821 
KQU
( 260151124912803804), KQU(11639179410120968649),

822 
KQU
( 9318165193840846253), KQU(12795671722734758075),

823 
KQU
(15318410297267253933), KQU( 691524703570062620),

824 
KQU
( 5837129010576994601), KQU(15045963859726941052),

825 
KQU
( 5850056944932238169), KQU(12017434144750943807),

826 
KQU
( 7447139064928956574), KQU( 3101711812658245019),

827 
KQU
(16052940704474982954), KQU(18195745945986994042),

828 
KQU
( 8932252132785575659), KQU(13390817488106794834),

829 
KQU
(11582771836502517453), KQU( 4964411326683611686),

830 
KQU
( 2195093981702694011), KQU(14145229538389675669),

831 
KQU
(16459605532062271798), KQU( 866316924816482864),

832 
KQU
( 4593041209937286377), KQU( 8415491391910972138),

833 
KQU
( 4171236715600528969), KQU(16637569303336782889),

834 
KQU
( 2002011073439212680), KQU(17695124661097601411),

835 
KQU
( 4627687053598611702), KQU( 7895831936020190403),

836 
KQU
( 8455951300917267802), KQU( 2923861649108534854),

837 
KQU
( 8344557563927786255), KQU( 6408671940373352556),

838 
KQU
(12210227354536675772), KQU(14294804157294222295),

839 
KQU
(10103022425071085127), KQU(10092959489504123771),

840 
KQU
( 6554774405376736268), KQU(12629917718410641774),

841 
KQU
( 6260933257596067126), KQU( 2460827021439369673),

842 
KQU
( 2541962996717103668), KQU( 597377203127351475),

843 
KQU
( 5316984203117315309), KQU( 4811211393563241961),

844 
KQU
(13119698597255811641), KQU( 8048691512862388981),

845 
KQU
(10216818971194073842), KQU( 4612229970165291764),

846 
KQU
(10000980798419974770), KQU( 6877640812402540687),

847 
KQU
( 1488727563290436992), KQU( 2227774069895697318),

848 
KQU
(11237754507523316593), KQU(13478948605382290972),

849 
KQU
( 1963583846976858124), KQU( 5512309205269276457),

850 
KQU
( 3972770164717652347), KQU( 3841751276198975037),

851 
KQU
(10283343042181903117), KQU( 8564001259792872199),

852 
KQU
(16472187244722489221), KQU( 8953493499268945921),

853 
KQU
( 3518747340357279580), KQU( 4003157546223963073),

854 
KQU
( 3270305958289814590), KQU( 3966704458129482496),

855 
KQU
( 8122141865926661939), KQU(14627734748099506653),

856 
KQU
(13064426990862560568), KQU( 2414079187889870829),

857 
KQU
( 5378461209354225306), KQU(10841985740128255566),

858 
KQU
( 538582442885401738), KQU( 7535089183482905946),

859 
KQU
(16117559957598879095), KQU( 8477890721414539741),

860 
KQU
( 1459127491209533386), KQU(17035126360733620462),

861 
KQU
( 8517668552872379126), KQU(10292151468337355014),

862 
KQU
(17081267732745344157), KQU(13751455337946087178),

863 
KQU
(14026945459523832966), KQU( 6653278775061723516),

864 
KQU
(10619085543856390441), KQU( 2196343631481122885),

865 
KQU
(10045966074702826136), KQU(10082317330452718282),

866 
KQU
( 5920859259504831242), KQU( 9951879073426540617),

867 
KQU
( 7074696649151414158), KQU(15808193543879464318),

868 
KQU
( 7385247772746953374), KQU( 3192003544283864292),

869 
KQU
(18153684490917593847), KQU(12423498260668568905),

870 
KQU
(10957758099756378169), KQU(11488762179911016040),

871 
KQU
( 2099931186465333782), KQU(11180979581250294432),

872 
KQU
( 8098916250668367933), KQU( 3529200436790763465),

873 
KQU
(12988418908674681745), KQU( 6147567275954808580),

874 
KQU
( 3207503344604030989), KQU(10761592604898615360),

875 
KQU
( 229854861031893504), KQU( 8809853962667144291),

876 
KQU
(13957364469005693860), KQU( 7634287665224495886),

877 
KQU
(12353487366976556874), KQU( 1134423796317152034),

878 
KQU
( 2088992471334107068), KQU( 7393372127190799698),

879 
KQU
( 1845367839871058391), KQU( 207922563987322884),

880 
KQU
(11960870813159944976), KQU(12182120053317317363),

881 
KQU
(17307358132571709283), KQU(13871081155552824936),

882 
KQU
(18304446751741566262), KQU( 7178705220184302849),

883 
KQU
(10929605677758824425), KQU(16446976977835806844),

884 
KQU
(13723874412159769044), KQU( 6942854352100915216),

885 
KQU
( 1726308474365729390), KQU( 2150078766445323155),

886 
KQU
(15345558947919656626), KQU(12145453828874527201),

887 
KQU
( 2054448620739726849), KQU( 2740102003352628137),

888 
KQU
(11294462163577610655), KQU( 756164283387413743),

889 
KQU
(17841144758438810880), KQU(10802406021185415861),

890 
KQU
( 8716455530476737846), KQU( 6321788834517649606),

891 
KQU
(14681322910577468426), KQU(17330043563884336387),

892 
KQU
(12701802180050071614), KQU(14695105111079727151),

893 
KQU
( 5112098511654172830), KQU( 4957505496794139973),

894 
KQU
( 8270979451952045982), KQU(12307685939199120969),

895 
KQU
(12425799408953443032), KQU( 8376410143634796588),

896 
KQU
(16621778679680060464), KQU( 3580497854566660073),

897 
KQU
( 1122515747803382416), KQU( 857664980960597599),

898 
KQU
( 6343640119895925918), KQU(12878473260854462891),

899 
KQU
(10036813920765722626), KQU(14451335468363173812),

900 
KQU
( 5476809692401102807), KQU(16442255173514366342),

901 
KQU
(13060203194757167104), KQU(14354124071243177715),

902 
KQU
(15961249405696125227), KQU(13703893649690872584),

903 
KQU
( 363907326340340064), KQU( 6247455540491754842),

904 
KQU
(12242249332757832361), KQU( 156065475679796717),

905 
KQU
( 9351116235749732355), KQU( 4590350628677701405),

906 
KQU
( 1671195940982350389), KQU(13501398458898451905),

907 
KQU
( 6526341991225002255), KQU( 1689782913778157592),

908 
KQU
( 7439222350869010334), KQU(13975150263226478308),

909 
KQU
(11411961169932682710), KQU(17204271834833847277),

910 
KQU
( 541534742544435367), KQU( 6591191931218949684),

911 
KQU
( 2645454775478232486), KQU( 4322857481256485321),

912 
KQU
( 8477416487553065110), KQU(12902505428548435048),

913 
KQU
( 971445777981341415), KQU(14995104682744976712),

914 
KQU
( 4243341648807158063), KQU( 8695061252721927661),

915 
KQU
( 5028202003270177222), KQU( 2289257340915567840),

916 
KQU
(13870416345121866007), KQU(13994481698072092233),

917 
KQU
( 6912785400753196481), KQU( 2278309315841980139),

918 
KQU
( 4329765449648304839), KQU( 5963108095785485298),

919 
KQU
( 4880024847478722478), KQU(16015608779890240947),

920 
KQU
( 1866679034261393544), KQU( 914821179919731519),

921 
KQU
( 9643404035648760131), KQU( 2418114953615593915),

922 
KQU
( 944756836073702374), KQU(15186388048737296834),

923 
KQU
( 7723355336128442206), KQU( 7500747479679599691),

924 
KQU
(18013961306453293634), KQU( 2315274808095756456),

925 
KQU
(13655308255424029566), KQU(17203800273561677098),

926 
KQU
( 1382158694422087756), KQU( 5090390250309588976),

927 
KQU
( 517170818384213989), KQU( 1612709252627729621),

928 
KQU
( 1330118955572449606), KQU( 300922478056709885),

929 
KQU
(18115693291289091987), KQU(13491407109725238321),

930 
KQU
(15293714633593827320), KQU( 5151539373053314504),

931 
KQU
( 5951523243743139207), KQU(14459112015249527975),

932 
KQU
( 5456113959000700739), KQU( 3877918438464873016),

933 
KQU
(12534071654260163555), KQU(15871678376893555041),

934 
KQU
(11005484805712025549), KQU(16353066973143374252),

935 
KQU
( 4358331472063256685), KQU( 8268349332210859288),

936 
KQU
(12485161590939658075), KQU(13955993592854471343),

937 
KQU
( 5911446886848367039), KQU(14925834086813706974),

938 
KQU
( 6590362597857994805), KQU( 1280544923533661875),

939 
KQU
( 1637756018947988164), KQU( 4734090064512686329),

940 
KQU
(16693705263131485912), KQU( 6834882340494360958),

941 
KQU
( 8120732176159658505), KQU( 2244371958905329346),

942 
KQU
(10447499707729734021), KQU( 7318742361446942194),

943 
KQU
( 8032857516355555296), KQU(14023605983059313116),

944 
KQU
( 1032336061815461376), KQU( 9840995337876562612),

945 
KQU
( 9869256223029203587), KQU(12227975697177267636),

946 
KQU
(12728115115844186033), KQU( 7752058479783205470),

947 
KQU
( 729733219713393087), KQU(12954017801239007622)

949 c⁄° 
uöt64_t
 
	göô_by_¨øy_64_ex≥˘ed
[] = {

950 
KQU
( 2100341266307895239), KQU( 8344256300489757943),

951 
KQU
(15687933285484243894), KQU( 8268620370277076319),

952 
KQU
(12371852309826545459), KQU( 8800491541730110238),

953 
KQU
(18113268950100835773), KQU( 2886823658884438119),

954 
KQU
( 3293667307248180724), KQU( 9307928143300172731),

955 
KQU
( 7688082017574293629), KQU( 900986224735166665),

956 
KQU
( 9977972710722265039), KQU( 6008205004994830552),

957 
KQU
( 546909104521689292), KQU( 7428471521869107594),

958 
KQU
(14777563419314721179), KQU(16116143076567350053),

959 
KQU
( 5322685342003142329), KQU( 4200427048445863473),

960 
KQU
( 4693092150132559146), KQU(13671425863759338582),

961 
KQU
( 6747117460737639916), KQU( 4732666080236551150),

962 
KQU
( 5912839950611941263), KQU( 3903717554504704909),

963 
KQU
( 2615667650256786818), KQU(10844129913887006352),

964 
KQU
(13786467861810997820), KQU(14267853002994021570),

965 
KQU
(13767807302847237439), KQU(16407963253707224617),

966 
KQU
( 4802498363698583497), KQU( 2523802839317209764),

967 
KQU
( 3822579397797475589), KQU( 8950320572212130610),

968 
KQU
( 3745623504978342534), KQU(16092609066068482806),

969 
KQU
( 9817016950274642398), KQU(10591660660323829098),

970 
KQU
(11751606650792815920), KQU( 5122873818577122211),

971 
KQU
(17209553764913936624), KQU( 6249057709284380343),

972 
KQU
(15088791264695071830), KQU(15344673071709851930),

973 
KQU
( 4345751415293646084), KQU( 2542865750703067928),

974 
KQU
(13520525127852368784), KQU(18294188662880997241),

975 
KQU
( 3871781938044881523), KQU( 2873487268122812184),

976 
KQU
(15099676759482679005), KQU(15442599127239350490),

977 
KQU
( 6311893274367710888), KQU( 3286118760484672933),

978 
KQU
( 4146067961333542189), KQU(13303942567897208770),

979 
KQU
( 8196013722255630418), KQU( 4437815439340979989),

980 
KQU
(15433791533450605135), KQU( 4254828956815687049),

981 
KQU
( 1310903207708286015), KQU(10529182764462398549),

982 
KQU
(14900231311660638810), KQU( 9727017277104609793),

983 
KQU
( 1821308310948199033), KQU(11628861435066772084),

984 
KQU
( 9469019138491546924), KQU( 3145812670532604988),

985 
KQU
( 9938468915045491919), KQU( 1562447430672662142),

986 
KQU
(13963995266697989134), KQU( 3356884357625028695),

987 
KQU
( 4499850304584309747), KQU( 8456825817023658122),

988 
KQU
(10859039922814285279), KQU( 8099512337972526555),

989 
KQU
( 348006375109672149), KQU(11919893998241688603),

990 
KQU
( 1104199577402948826), KQU(16689191854356060289),

991 
KQU
(10992552041730168078), KQU( 7243733172705465836),

992 
KQU
( 5668075606180319560), KQU(18182847037333286970),

993 
KQU
( 4290215357664631322), KQU( 4061414220791828613),

994 
KQU
(13006291061652989604), KQU( 7140491178917128798),

995 
KQU
(12703446217663283481), KQU( 5500220597564558267),

996 
KQU
(10330551509971296358), KQU(15958554768648714492),

997 
KQU
( 5174555954515360045), KQU( 1731318837687577735),

998 
KQU
( 3557700801048354857), KQU(13764012341928616198),

999 
KQU
(13115166194379119043), KQU( 7989321021560255519),

1000 
KQU
( 2103584280905877040), KQU( 9230788662155228488),

1001 
KQU
(16396629323325547654), KQU( 657926409811318051),

1002 
KQU
(15046700264391400727), KQU( 5120132858771880830),

1003 
KQU
( 7934160097989028561), KQU( 6963121488531976245),

1004 
KQU
(17412329602621742089), KQU(15144843053931774092),

1005 
KQU
(17204176651763054532), KQU(13166595387554065870),

1006 
KQU
( 8590377810513960213), KQU( 5834365135373991938),

1007 
KQU
( 7640913007182226243), KQU( 3479394703859418425),

1008 
KQU
(16402784452644521040), KQU( 4993979809687083980),

1009 
KQU
(13254522168097688865), KQU(15643659095244365219),

1010 
KQU
( 5881437660538424982), KQU(11174892200618987379),

1011 
KQU
( 254409966159711077), KQU(17158413043140549909),

1012 
KQU
( 3638048789290376272), KQU( 1376816930299489190),

1013 
KQU
( 4622462095217761923), KQU(15086407973010263515),

1014 
KQU
(13253971772784692238), KQU( 5270549043541649236),

1015 
KQU
(11182714186805411604), KQU(12283846437495577140),

1016 
KQU
( 5297647149908953219), KQU(10047451738316836654),

1017 
KQU
( 4938228100367874746), KQU(12328523025304077923),

1018 
KQU
( 3601049438595312361), KQU( 9313624118352733770),

1019 
KQU
(13322966086117661798), KQU(16660005705644029394),

1020 
KQU
(11337677526988872373), KQU(13869299102574417795),

1021 
KQU
(15642043183045645437), KQU( 3021755569085880019),

1022 
KQU
( 4979741767761188161), KQU(13679979092079279587),

1023 
KQU
( 3344685842861071743), KQU(13947960059899588104),

1024 
KQU
( 305806934293368007), KQU( 5749173929201650029),

1025 
KQU
(11123724852118844098), KQU(15128987688788879802),

1026 
KQU
(15251651211024665009), KQU( 7689925933816577776),

1027 
KQU
(16732804392695859449), KQU(17087345401014078468),

1028 
KQU
(14315108589159048871), KQU( 4820700266619778917),

1029 
KQU
(16709637539357958441), KQU( 4936227875177351374),

1030 
KQU
( 2137907697912987247), KQU(11628565601408395420),

1031 
KQU
( 2333250549241556786), KQU( 5711200379577778637),

1032 
KQU
( 5170680131529031729), KQU(12620392043061335164),

1033 
KQU
( 95363390101096078), KQU( 5487981914081709462),

1034 
KQU
( 1763109823981838620), KQU( 3395861271473224396),

1035 
KQU
( 1300496844282213595), KQU( 6894316212820232902),

1036 
KQU
(10673859651135576674), KQU( 5911839658857903252),

1037 
KQU
(17407110743387299102), KQU( 8257427154623140385),

1038 
KQU
(11389003026741800267), KQU( 4070043211095013717),

1039 
KQU
(11663806997145259025), KQU(15265598950648798210),

1040 
KQU
( 630585789434030934), KQU( 3524446529213587334),

1041 
KQU
( 7186424168495184211), KQU(10806585451386379021),

1042 
KQU
(11120017753500499273), KQU( 1586837651387701301),

1043 
KQU
(17530454400954415544), KQU( 9991670045077880430),

1044 
KQU
( 7550997268990730180), KQU( 8640249196597379304),

1045 
KQU
( 3522203892786893823), KQU(10401116549878854788),

1046 
KQU
(13690285544733124852), KQU( 8295785675455774586),

1047 
KQU
(15535716172155117603), KQU( 3112108583723722511),

1048 
KQU
(17633179955339271113), KQU(18154208056063759375),

1049 
KQU
( 1866409236285815666), KQU(13326075895396412882),

1050 
KQU
( 8756261842948020025), KQU( 6281852999868439131),

1051 
KQU
(15087653361275292858), KQU(10333923911152949397),

1052 
KQU
( 5265567645757408500), KQU(12728041843210352184),

1053 
KQU
( 6347959327507828759), KQU( 154112802625564758),

1054 
KQU
(18235228308679780218), KQU( 3253805274673352418),

1055 
KQU
( 4849171610689031197), KQU(17948529398340432518),

1056 
KQU
(13803510475637409167), KQU(13506570190409883095),

1057 
KQU
(15870801273282960805), KQU( 8451286481299170773),

1058 
KQU
( 9562190620034457541), KQU( 8518905387449138364),

1059 
KQU
(12681306401363385655), KQU( 3788073690559762558),

1060 
KQU
( 5256820289573487769), KQU( 2752021372314875467),

1061 
KQU
( 6354035166862520716), KQU( 4328956378309739069),

1062 
KQU
( 449087441228269600), KQU( 5533508742653090868),

1063 
KQU
( 1260389420404746988), KQU(18175394473289055097),

1064 
KQU
( 1535467109660399420), KQU( 8818894282874061442),

1065 
KQU
(12140873243824811213), KQU(15031386653823014946),

1066 
KQU
( 1286028221456149232), KQU( 6329608889367858784),

1067 
KQU
( 9419654354945132725), KQU( 6094576547061672379),

1068 
KQU
(17706217251847450255), KQU( 1733495073065878126),

1069 
KQU
(16918923754607552663), KQU( 8881949849954945044),

1070 
KQU
(12938977706896313891), KQU(14043628638299793407),

1071 
KQU
(18393874581723718233), KQU( 6886318534846892044),

1072 
KQU
(14577870878038334081), KQU(13541558383439414119),

1073 
KQU
(13570472158807588273), KQU(18300760537910283361),

1074 
KQU
( 818368572800609205), KQU( 1417000585112573219),

1075 
KQU
(12337533143867683655), KQU(12433180994702314480),

1076 
KQU
( 778190005829189083), KQU(13667356216206524711),

1077 
KQU
( 9866149895295225230), KQU(11043240490417111999),

1078 
KQU
( 1123933826541378598), KQU( 6469631933605123610),

1079 
KQU
(14508554074431980040), KQU(13918931242962026714),

1080 
KQU
( 2870785929342348285), KQU(14786362626740736974),

1081 
KQU
(13176680060902695786), KQU( 9591778613541679456),

1082 
KQU
( 9097662885117436706), KQU( 749262234240924947),

1083 
KQU
( 1944844067793307093), KQU( 4339214904577487742),

1084 
KQU
( 8009584152961946551), KQU(16073159501225501777),

1085 
KQU
( 3335870590499306217), KQU(17088312653151202847),

1086 
KQU
( 3108893142681931848), KQU(16636841767202792021),

1087 
KQU
(10423316431118400637), KQU( 8008357368674443506),

1088 
KQU
(11340015231914677875), KQU(17687896501594936090),

1089 
KQU
(15173627921763199958), KQU( 542569482243721959),

1090 
KQU
(15071714982769812975), KQU( 4466624872151386956),

1091 
KQU
( 1901780715602332461), KQU( 9822227742154351098),

1092 
KQU
( 1479332892928648780), KQU( 6981611948382474400),

1093 
KQU
( 7620824924456077376), KQU(14095973329429406782),

1094 
KQU
( 7902744005696185404), KQU(15830577219375036920),

1095 
KQU
(10287076667317764416), KQU(12334872764071724025),

1096 
KQU
( 4419302088133544331), KQU(14455842851266090520),

1097 
KQU
(12488077416504654222), KQU( 7953892017701886766),

1098 
KQU
( 6331484925529519007), KQU( 4902145853785030022),

1099 
KQU
(17010159216096443073), KQU(11945354668653886087),

1100 
KQU
(15112022728645230829), KQU(17363484484522986742),

1101 
KQU
( 4423497825896692887), KQU( 8155489510809067471),

1102 
KQU
( 258966605622576285), KQU( 5462958075742020534),

1103 
KQU
( 6763710214913276228), KQU( 2368935183451109054),

1104 
KQU
(14209506165246453811), KQU( 2646257040978514881),

1105 
KQU
( 3776001911922207672), KQU( 1419304601390147631),

1106 
KQU
(14987366598022458284), KQU( 3977770701065815721),

1107 
KQU
( 730820417451838898), KQU( 3982991703612885327),

1108 
KQU
( 2803544519671388477), KQU(17067667221114424649),

1109 
KQU
( 2922555119737867166), KQU( 1989477584121460932),

1110 
KQU
(15020387605892337354), KQU( 9293277796427533547),

1111 
KQU
(10722181424063557247), KQU(16704542332047511651),

1112 
KQU
( 5008286236142089514), KQU(16174732308747382540),

1113 
KQU
(17597019485798338402), KQU(13081745199110622093),

1114 
KQU
( 8850305883842258115), KQU(12723629125624589005),

1115 
KQU
( 8140566453402805978), KQU(15356684607680935061),

1116 
KQU
(14222190387342648650), KQU(11134610460665975178),

1117 
KQU
( 1259799058620984266), KQU(13281656268025610041),

1118 
KQU
( 298262561068153992), KQU(12277871700239212922),

1119 
KQU
(13911297774719779438), KQU(16556727962761474934),

1120 
KQU
(17903010316654728010), KQU( 9682617699648434744),

1121 
KQU
(14757681836838592850), KQU( 1327242446558524473),

1122 
KQU
(11126645098780572792), KQU( 1883602329313221774),

1123 
KQU
( 2543897783922776873), KQU(15029168513767772842),

1124 
KQU
(12710270651039129878), KQU(16118202956069604504),

1125 
KQU
(15010759372168680524), KQU( 2296827082251923948),

1126 
KQU
(10793729742623518101), KQU(13829764151845413046),

1127 
KQU
(17769301223184451213), KQU( 3118268169210783372),

1128 
KQU
(17626204544105123127), KQU( 7416718488974352644),

1129 
KQU
(10450751996212925994), KQU( 9352529519128770586),

1130 
KQU
( 259347569641110140), KQU( 8048588892269692697),

1131 
KQU
( 1774414152306494058), KQU(10669548347214355622),

1132 
KQU
(13061992253816795081), KQU(18432677803063861659),

1133 
KQU
( 8879191055593984333), KQU(12433753195199268041),

1134 
KQU
(14919392415439730602), KQU( 6612848378595332963),

1135 
KQU
( 6320986812036143628), KQU(10465592420226092859),

1136 
KQU
( 4196009278962570808), KQU( 3747816564473572224),

1137 
KQU
(17941203486133732898), KQU( 2350310037040505198),

1138 
KQU
( 5811779859134370113), KQU(10492109599506195126),

1139 
KQU
( 7699650690179541274), KQU( 1954338494306022961),

1140 
KQU
(14095816969027231152), KQU( 5841346919964852061),

1141 
KQU
(14945969510148214735), KQU( 3680200305887550992),

1142 
KQU
( 6218047466131695792), KQU( 8242165745175775096),

1143 
KQU
(11021371934053307357), KQU( 1265099502753169797),

1144 
KQU
( 4644347436111321718), KQU( 3609296916782832859),

1145 
KQU
( 8109807992218521571), KQU(18387884215648662020),

1146 
KQU
(14656324896296392902), KQU(17386819091238216751),

1147 
KQU
(17788300878582317152), KQU( 7919446259742399591),

1148 
KQU
( 4466613134576358004), KQU(12928181023667938509),

1149 
KQU
(13147446154454932030), KQU(16552129038252734620),

1150 
KQU
( 8395299403738822450), KQU(11313817655275361164),

1151 
KQU
( 434258809499511718), KQU( 2074882104954788676),

1152 
KQU
( 7929892178759395518), KQU( 9006461629105745388),

1153 
KQU
( 5176475650000323086), KQU(11128357033468341069),

1154 
KQU
(12026158851559118955), KQU(14699716249471156500),

1155 
KQU
( 448982497120206757), KQU( 4156475356685519900),

1156 
KQU
( 6063816103417215727), KQU(10073289387954971479),

1157 
KQU
( 8174466846138590962), KQU( 2675777452363449006),

1158 
KQU
( 9090685420572474281), KQU( 6659652652765562060),

1159 
KQU
(12923120304018106621), KQU(11117480560334526775),

1160 
KQU
( 937910473424587511), KQU( 1838692113502346645),

1161 
KQU
(11133914074648726180), KQU( 7922600945143884053),

1162 
KQU
(13435287702700959550), KQU( 5287964921251123332),

1163 
KQU
(11354875374575318947), KQU(17955724760748238133),

1164 
KQU
(13728617396297106512), KQU( 4107449660118101255),

1165 
KQU
( 1210269794886589623), KQU(11408687205733456282),

1166 
KQU
( 4538354710392677887), KQU(13566803319341319267),

1167 
KQU
(17870798107734050771), KQU( 3354318982568089135),

1168 
KQU
( 9034450839405133651), KQU(13087431795753424314),

1169 
KQU
( 950333102820688239), KQU( 1968360654535604116),

1170 
KQU
(16840551645563314995), KQU( 8867501803892924995),

1171 
KQU
(11395388644490626845), KQU( 1529815836300732204),

1172 
KQU
(13330848522996608842), KQU( 1813432878817504265),

1173 
KQU
( 2336867432693429560), KQU(15192805445973385902),

1174 
KQU
( 2528593071076407877), KQU( 128459777936689248),

1175 
KQU
( 9976345382867214866), KQU( 6208885766767996043),

1176 
KQU
(14982349522273141706), KQU( 3099654362410737822),

1177 
KQU
(13776700761947297661), KQU( 8806185470684925550),

1178 
KQU
( 8151717890410585321), KQU( 640860591588072925),

1179 
KQU
(14592096303937307465), KQU( 9056472419613564846),

1180 
KQU
(14861544647742266352), KQU(12703771500398470216),

1181 
KQU
( 3142372800384138465), KQU( 6201105606917248196),

1182 
KQU
(18337516409359270184), KQU(15042268695665115339),

1183 
KQU
(15188246541383283846), KQU(12800028693090114519),

1184 
KQU
( 5992859621101493472), KQU(18278043971816803521),

1185 
KQU
( 9002773075219424560), KQU( 7325707116943598353),

1186 
KQU
( 7930571931248040822), KQU( 5645275869617023448),

1187 
KQU
( 7266107455295958487), KQU( 4363664528273524411),

1188 
KQU
(14313875763787479809), KQU(17059695613553486802),

1189 
KQU
( 9247761425889940932), KQU(13704726459237593128),

1190 
KQU
( 2701312427328909832), KQU(17235532008287243115),

1191 
KQU
(14093147761491729538), KQU( 6247352273768386516),

1192 
KQU
( 8268710048153268415), KQU( 7985295214477182083),

1193 
KQU
(15624495190888896807), KQU( 3772753430045262788),

1194 
KQU
( 9133991620474991698), KQU( 5665791943316256028),

1195 
KQU
( 7551996832462193473), KQU(13163729206798953877),

1196 
KQU
( 9263532074153846374), KQU( 1015460703698618353),

1197 
KQU
(17929874696989519390), KQU(18257884721466153847),

1198 
KQU
(16271867543011222991), KQU( 3905971519021791941),

1199 
KQU
(16814488397137052085), KQU( 1321197685504621613),

1200 
KQU
( 2870359191894002181), KQU(14317282970323395450),

1201 
KQU
(13663920845511074366), KQU( 2052463995796539594),

1202 
KQU
(14126345686431444337), KQU( 1727572121947022534),

1203 
KQU
(17793552254485594241), KQU( 6738857418849205750),

1204 
KQU
( 1282987123157442952), KQU(16655480021581159251),

1205 
KQU
( 6784587032080183866), KQU(14726758805359965162),

1206 
KQU
( 7577995933961987349), KQU(12539609320311114036),

1207 
KQU
(10789773033385439494), KQU( 8517001497411158227),

1208 
KQU
(10075543932136339710), KQU(14838152340938811081),

1209 
KQU
( 9560840631794044194), KQU(17445736541454117475),

1210 
KQU
(10633026464336393186), KQU(15705729708242246293),

1211 
KQU
( 1117517596891411098), KQU( 4305657943415886942),

1212 
KQU
( 4948856840533979263), KQU(16071681989041789593),

1213 
KQU
(13723031429272486527), KQU( 7639567622306509462),

1214 
KQU
(12670424537483090390), KQU( 9715223453097197134),

1215 
KQU
( 5457173389992686394), KQU( 289857129276135145),

1216 
KQU
(17048610270521972512), KQU( 692768013309835485),

1217 
KQU
(14823232360546632057), KQU(18218002361317895936),

1218 
KQU
( 3281724260212650204), KQU(16453957266549513795),

1219 
KQU
( 8592711109774511881), KQU( 929825123473369579),

1220 
KQU
(15966784769764367791), KQU( 9627344291450607588),

1221 
KQU
(10849555504977813287), KQU( 9234566913936339275),

1222 
KQU
( 6413807690366911210), KQU(10862389016184219267),

1223 
KQU
(13842504799335374048), KQU( 1531994113376881174),

1224 
KQU
( 2081314867544364459), KQU(16430628791616959932),

1225 
KQU
( 8314714038654394368), KQU( 9155473892098431813),

1226 
KQU
(12577843786670475704), KQU( 4399161106452401017),

1227 
KQU
( 1668083091682623186), KQU( 1741383777203714216),

1228 
KQU
( 2162597285417794374), KQU(15841980159165218736),

1229 
KQU
( 1971354603551467079), KQU( 1206714764913205968),

1230 
KQU
( 4790860439591272330), KQU(14699375615594055799),

1231 
KQU
( 8374423871657449988), KQU(10950685736472937738),

1232 
KQU
( 697344331343267176), KQU(10084998763118059810),

1233 
KQU
(12897369539795983124), KQU(12351260292144383605),

1234 
KQU
( 1268810970176811234), KQU( 7406287800414582768),

1235 
KQU
( 516169557043807831), KQU( 5077568278710520380),

1236 
KQU
( 3828791738309039304), KQU( 7721974069946943610),

1237 
KQU
( 3534670260981096460), KQU( 4865792189600584891),

1238 
KQU
(16892578493734337298), KQU( 9161499464278042590),

1239 
KQU
(11976149624067055931), KQU(13219479887277343990),

1240 
KQU
(14161556738111500680), KQU(14670715255011223056),

1241 
KQU
( 4671205678403576558), KQU(12633022931454259781),

1242 
KQU
(14821376219869187646), KQU( 751181776484317028),

1243 
KQU
( 2192211308839047070), KQU(11787306362361245189),

1244 
KQU
(10672375120744095707), KQU( 4601972328345244467),

1245 
KQU
(15457217788831125879), KQU( 8464345256775460809),

1246 
KQU
(10191938789487159478), KQU( 6184348739615197613),

1247 
KQU
(11425436778806882100), KQU( 2739227089124319793),

1248 
KQU
( 461464518456000551), KQU( 4689850170029177442),

1249 
KQU
( 6120307814374078625), KQU(11153579230681708671),

1250 
KQU
( 7891721473905347926), KQU(10281646937824872400),

1251 
KQU
( 3026099648191332248), KQU( 8666750296953273818),

1252 
KQU
(14978499698844363232), KQU(13303395102890132065),

1253 
KQU
( 8182358205292864080), KQU(10560547713972971291),

1254 
KQU
(11981635489418959093), KQU( 3134621354935288409),

1255 
KQU
(11580681977404383968), KQU(14205530317404088650),

1256 
KQU
( 5997789011854923157), KQU(13659151593432238041),

1257 
KQU
(11664332114338865086), KQU( 7490351383220929386),

1258 
KQU
( 7189290499881530378), KQU(15039262734271020220),

1259 
KQU
( 2057217285976980055), KQU( 555570804905355739),

1260 
KQU
(11235311968348555110), KQU(13824557146269603217),

1261 
KQU
(16906788840653099693), KQU( 7222878245455661677),

1262 
KQU
( 5245139444332423756), KQU( 4723748462805674292),

1263 
KQU
(12216509815698568612), KQU(17402362976648951187),

1264 
KQU
(17389614836810366768), KQU( 4880936484146667711),

1265 
KQU
( 9085007839292639880), KQU(13837353458498535449),

1266 
KQU
(11914419854360366677), KQU(16595890135313864103),

1267 
KQU
( 6313969847197627222), KQU(18296909792163910431),

1268 
KQU
(10041780113382084042), KQU( 2499478551172884794),

1269 
KQU
(11057894246241189489), KQU( 9742243032389068555),

1270 
KQU
(12838934582673196228), KQU(13437023235248490367),

1271 
KQU
(13372420669446163240), KQU( 6752564244716909224),

1272 
KQU
( 7157333073400313737), KQU(12230281516370654308),

1273 
KQU
( 1182884552219419117), KQU( 2955125381312499218),

1274 
KQU
(10308827097079443249), KQU( 1337648572986534958),

1275 
KQU
(16378788590020343939), KQU( 108619126514420935),

1276 
KQU
( 3990981009621629188), KQU( 5460953070230946410),

1277 
KQU
( 9703328329366531883), KQU(13166631489188077236),

1278 
KQU
( 1104768831213675170), KQU( 3447930458553877908),

1279 
KQU
( 8067172487769945676), KQU( 5445802098190775347),

1280 
KQU
( 3244840981648973873), KQU(17314668322981950060),

1281 
KQU
( 5006812527827763807), KQU(18158695070225526260),

1282 
KQU
( 2824536478852417853), KQU(13974775809127519886),

1283 
KQU
( 9814362769074067392), KQU(17276205156374862128),

1284 
KQU
(11361680725379306967), KQU( 3422581970382012542),

1285 
KQU
(11003189603753241266), KQU(11194292945277862261),

1286 
KQU
( 6839623313908521348), KQU(11935326462707324634),

1287 
KQU
( 1611456788685878444), KQU(13112620989475558907),

1288 
KQU
( 517659108904450427), KQU(13558114318574407624),

1289 
KQU
(15699089742731633077), KQU( 4988979278862685458),

1290 
KQU
( 8111373583056521297), KQU( 3891258746615399627),

1291 
KQU
( 8137298251469718086), KQU(12748663295624701649),

1292 
KQU
( 4389835683495292062), KQU( 5775217872128831729),

1293 
KQU
( 9462091896405534927), KQU( 8498124108820263989),

1294 
KQU
( 8059131278842839525), KQU(10503167994254090892),

1295 
KQU
(11613153541070396656), KQU(18069248738504647790),

1296 
KQU
( 570657419109768508), KQU( 3950574167771159665),

1297 
KQU
( 5514655599604313077), KQU( 2908460854428484165),

1298 
KQU
(10777722615935663114), KQU(12007363304839279486),

1299 
KQU
( 9800646187569484767), KQU( 8795423564889864287),

1300 
KQU
(14257396680131028419), KQU( 6405465117315096498),

1301 
KQU
( 7939411072208774878), KQU(17577572378528990006),

1302 
KQU
(14785873806715994850), KQU(16770572680854747390),

1303 
KQU
(18127549474419396481), KQU(11637013449455757750),

1304 
KQU
(14371851933996761086), KQU( 3601181063650110280),

1305 
KQU
( 4126442845019316144), KQU(10198287239244320669),

1306 
KQU
(18000169628555379659), KQU(18392482400739978269),

1307 
KQU
( 6219919037686919957), KQU( 3610085377719446052),

1308 
KQU
( 2513925039981776336), KQU(16679413537926716955),

1309 
KQU
(12903302131714909434), KQU( 5581145789762985009),

1310 
KQU
(12325955044293303233), KQU(17216111180742141204),

1311 
KQU
( 6321919595276545740), KQU( 3507521147216174501),

1312 
KQU
( 9659194593319481840), KQU(11473976005975358326),

1313 
KQU
(14742730101435987026), KQU( 492845897709954780),

1314 
KQU
(16976371186162599676), KQU(17712703422837648655),

1315 
KQU
( 9881254778587061697), KQU( 8413223156302299551),

1316 
KQU
( 1563841828254089168), KQU( 9996032758786671975),

1317 
KQU
( 138877700583772667), KQU(13003043368574995989),

1318 
KQU
( 4390573668650456587), KQU( 8610287390568126755),

1319 
KQU
(15126904974266642199), KQU( 6703637238986057662),

1320 
KQU
( 2873075592956810157), KQU( 6035080933946049418),

1321 
KQU
(13382846581202353014), KQU( 7303971031814642463),

1322 
KQU
(18418024405307444267), KQU( 5847096731675404647),

1323 
KQU
( 4035880699639842500), KQU(11525348625112218478),

1324 
KQU
( 3041162365459574102), KQU( 2604734487727986558),

1325 
KQU
(15526341771636983145), KQU(14556052310697370254),

1326 
KQU
(12997787077930808155), KQU( 9601806501755554499),

1327 
KQU
(11349677952521423389), KQU(14956777807644899350),

1328 
KQU
(16559736957742852721), KQU(12360828274778140726),

1329 
KQU
( 6685373272009662513), KQU(16932258748055324130),

1330 
KQU
(15918051131954158508), KQU( 1692312913140790144),

1331 
KQU
( 546653826801637367), KQU( 5341587076045986652),

1332 
KQU
(14975057236342585662), KQU(12374976357340622412),

1333 
KQU
(10328833995181940552), KQU(12831807101710443149),

1334 
KQU
(10548514914382545716), KQU( 2217806727199715993),

1335 
KQU
(12627067369242845138), KQU( 4598965364035438158),

1336 
KQU
( 150923352751318171), KQU(14274109544442257283),

1337 
KQU
( 4696661475093863031), KQU( 1505764114384654516),

1338 
KQU
(10699185831891495147), KQU( 2392353847713620519),

1339 
KQU
( 3652870166711788383), KQU( 8640653276221911108),

1340 
KQU
( 3894077592275889704), KQU( 4918592872135964845),

1341 
KQU
(16379121273281400789), KQU(12058465483591683656),

1342 
KQU
(11250106829302924945), KQU( 1147537556296983005),

1343 
KQU
( 6376342756004613268), KQU(14967128191709280506),

1344 
KQU
(18007449949790627628), KQU( 9497178279316537841),

1345 
KQU
( 7920174844809394893), KQU(10037752595255719907),

1346 
KQU
(15875342784985217697), KQU(15311615921712850696),

1347 
KQU
( 9552902652110992950), KQU(14054979450099721140),

1348 
KQU
( 5998709773566417349), KQU(18027910339276320187),

1349 
KQU
( 8223099053868585554), KQU( 7842270354824999767),

1350 
KQU
( 4896315688770080292), KQU(12969320296569787895),

1351 
KQU
( 2674321489185759961), KQU( 4053615936864718439),

1352 
KQU
(11349775270588617578), KQU( 4743019256284553975),

1353 
KQU
( 5602100217469723769), KQU(14398995691411527813),

1354 
KQU
( 7412170493796825470), KQU( 836262406131744846),

1355 
KQU
( 8231086633845153022), KQU( 5161377920438552287),

1356 
KQU
( 8828731196169924949), KQU(16211142246465502680),

1357 
KQU
( 3307990879253687818), KQU( 5193405406899782022),

1358 
KQU
( 8510842117467566693), KQU( 6070955181022405365),

1359 
KQU
(14482950231361409799), KQU(12585159371331138077),

1360 
KQU
( 3511537678933588148), KQU( 2041849474531116417),

1361 
KQU
(10944936685095345792), KQU(18303116923079107729),

1362 
KQU
( 2720566371239725320), KQU( 4958672473562397622),

1363 
KQU
( 3032326668253243412), KQU(13689418691726908338),

1364 
KQU
( 1895205511728843996), KQU( 8146303515271990527),

1365 
KQU
(16507343500056113480), KQU( 473996939105902919),

1366 
KQU
( 9897686885246881481), KQU(14606433762712790575),

1367 
KQU
( 6732796251605566368), KQU( 1399778120855368916),

1368 
KQU
( 935023885182833777), KQU(16066282816186753477),

1369 
KQU
( 7291270991820612055), KQU(17530230393129853844),

1370 
KQU
(10223493623477451366), KQU(15841725630495676683),

1371 
KQU
(17379567246435515824), KQU( 8588251429375561971),

1372 
KQU
(18339511210887206423), KQU(17349587430725976100),

1373 
KQU
(12244876521394838088), KQU( 6382187714147161259),

1374 
KQU
(12335807181848950831), KQU(16948885622305460665),

1375 
KQU
(13755097796371520506), KQU(14806740373324947801),

1376 
KQU
( 4828699633859287703), KQU( 8209879281452301604),

1377 
KQU
(12435716669553736437), KQU(13970976859588452131),

1378 
KQU
( 6233960842566773148), KQU(12507096267900505759),

1379 
KQU
( 1198713114381279421), KQU(14989862731124149015),

1380 
KQU
(15932189508707978949), KQU( 2526406641432708722),

1381 
KQU
( 29187427817271982), KQU( 1499802773054556353),

1382 
KQU
(10816638187021897173), KQU( 5436139270839738132),

1383 
KQU
( 6659882287036010082), KQU( 2154048955317173697),

1384 
KQU
(10887317019333757642), KQU(16281091802634424955),

1385 
KQU
(10754549879915384901), KQU(10760611745769249815),

1386 
KQU
( 2161505946972504002), KQU( 5243132808986265107),

1387 
KQU
(10129852179873415416), KQU( 710339480008649081),

1388 
KQU
( 7802129453068808528), KQU(17967213567178907213),

1389 
KQU
(15730859124668605599), KQU(13058356168962376502),

1390 
KQU
( 3701224985413645909), KQU(14464065869149109264),

1391 
KQU
( 9959272418844311646), KQU(10157426099515958752),

1392 
KQU
(14013736814538268528), KQU(17797456992065653951),

1393 
KQU
(17418878140257344806), KQU(15457429073540561521),

1394 
KQU
( 2184426881360949378), KQU( 2062193041154712416),

1395 
KQU
( 8553463347406931661), KQU( 4913057625202871854),

1396 
KQU
( 2668943682126618425), KQU(17064444737891172288),

1397 
KQU
( 4997115903913298637), KQU(12019402608892327416),

1398 
KQU
(17603584559765897352), KQU(11367529582073647975),

1399 
KQU
( 8211476043518436050), KQU( 8676849804070323674),

1400 
KQU
(18431829230394475730), KQU(10490177861361247904),

1401 
KQU
( 9508720602025651349), KQU( 7409627448555722700),

1402 
KQU
( 5804047018862729008), KQU(11943858176893142594),

1403 
KQU
(11908095418933847092), KQU( 5415449345715887652),

1404 
KQU
( 1554022699166156407), KQU( 9073322106406017161),

1405 
KQU
( 7080630967969047082), KQU(18049736940860732943),

1406 
KQU
(12748714242594196794), KQU( 1226992415735156741),

1407 
KQU
(17900981019609531193), KQU(11720739744008710999),

1408 
KQU
( 3006400683394775434), KQU(11347974011751996028),

1409 
KQU
( 3316999628257954608), KQU( 8384484563557639101),

1410 
KQU
(18117794685961729767), KQU( 1900145025596618194),

1411 
KQU
(17459527840632892676), KQU( 5634784101865710994),

1412 
KQU
( 7918619300292897158), KQU( 3146577625026301350),

1413 
KQU
( 9955212856499068767), KQU( 1873995843681746975),

1414 
KQU
( 1561487759967972194), KQU( 8322718804375878474),

1415 
KQU
(11300284215327028366), KQU( 4667391032508998982),

1416 
KQU
( 9820104494306625580), KQU(17922397968599970610),

1417 
KQU
( 1784690461886786712), KQU(14940365084341346821),

1418 
KQU
( 5348719575594186181), KQU(10720419084507855261),

1419 
KQU
(14210394354145143274), KQU( 2426468692164000131),

1420 
KQU
(16271062114607059202), KQU(14851904092357070247),

1421 
KQU
( 6524493015693121897), KQU( 9825473835127138531),

1422 
KQU
(14222500616268569578), KQU(15521484052007487468),

1423 
KQU
(14462579404124614699), KQU(11012375590820665520),

1424 
KQU
(11625327350536084927), KQU(14452017765243785417),

1425 
KQU
( 9989342263518766305), KQU( 3640105471101803790),

1426 
KQU
( 4749866455897513242), KQU(13963064946736312044),

1427 
KQU
(10007416591973223791), KQU(18314132234717431115),

1428 
KQU
( 3286596588617483450), KQU( 7726163455370818765),

1429 
KQU
( 7575454721115379328), KQU( 5308331576437663422),

1430 
KQU
(18288821894903530934), KQU( 8028405805410554106),

1431 
KQU
(15744019832103296628), KQU( 149765559630932100),

1432 
KQU
( 6137705557200071977), KQU(14513416315434803615),

1433 
KQU
(11665702820128984473), KQU( 218926670505601386),

1434 
KQU
( 6868675028717769519), KQU(15282016569441512302),

1435 
KQU
( 5707000497782960236), KQU( 6671120586555079567),

1436 
KQU
( 2194098052618985448), KQU(16849577895477330978),

1437 
KQU
(12957148471017466283), KQU( 1997805535404859393),

1438 
KQU
( 1180721060263860490), KQU(13206391310193756958),

1439 
KQU
(12980208674461861797), KQU( 3825967775058875366),

1440 
KQU
(17543433670782042631), KQU( 1518339070120322730),

1441 
KQU
(16344584340890991669), KQU( 2611327165318529819),

1442 
KQU
(11265022723283422529), KQU( 4001552800373196817),

1443 
KQU
(14509595890079346161), KQU( 3528717165416234562),

1444 
KQU
(18153222571501914072), KQU( 9387182977209744425),

1445 
KQU
(10064342315985580021), KQU(11373678413215253977),

1446 
KQU
( 2308457853228798099), KQU( 9729042942839545302),

1447 
KQU
( 7833785471140127746), KQU( 6351049900319844436),

1448 
KQU
(14454610627133496067), KQU(12533175683634819111),

1449 
KQU
(15570163926716513029), KQU(13356980519185762498)

1452 
	$TEST_BEGIN
(
ã°_gí_ønd_32
)

1454 
uöt32_t
 
¨øy32
[
BLOCK_SIZE
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1455 
uöt32_t
 
¨øy32_2
[
BLOCK_SIZE
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1456 
i
;

1457 
uöt32_t
 
r32
;

1458 
sfmt_t
 *
˘x
;

1460 
	`as£π_d_À
(
	`gë_mö_¨øy_size32
(), 
BLOCK_SIZE
,

1462 
˘x
 = 
	`öô_gí_ønd
(1234);

1463 
	`fûl_¨øy32
(
˘x
, 
¨øy32
, 
BLOCK_SIZE
);

1464 
	`fûl_¨øy32
(
˘x
, 
¨øy32_2
, 
BLOCK_SIZE
);

1465 
	`föi_gí_ønd
(
˘x
);

1467 
˘x
 = 
	`öô_gí_ønd
(1234);

1468 
i
 = 0; i < 
BLOCK_SIZE
; i++) {

1469 i‡(
i
 < 
COUNT_1
) {

1470 
	`as£π_u32_eq
(
¨øy32
[
i
], 
öô_gí_ønd_32_ex≥˘ed
[i],

1471 "Ouçuàmism©ch f‹ i=%d", 
i
);

1473 
r32
 = 
	`gí_ønd32
(
˘x
);

1474 
	`as£π_u32_eq
(
r32
, 
¨øy32
[
i
],

1475 "Mism©cháà¨øy32[%d]=%x, gí=%x", 
i
, 
¨øy32
[i], 
r32
);

1477 
i
 = 0; i < 
COUNT_2
; i++) {

1478 
r32
 = 
	`gí_ønd32
(
˘x
);

1479 
	`as£π_u32_eq
(
r32
, 
¨øy32_2
[
i
],

1480 "Mism©cháà¨øy32_2[%d]=%x, gí=%x", 
i
, 
¨øy32_2
[i],

1481 
r32
);

1483 
	`föi_gí_ønd
(
˘x
);

1484 
	}
}

1485 
TEST_END


1487 
	$TEST_BEGIN
(
ã°_by_¨øy_32
)

1489 
uöt32_t
 
¨øy32
[
BLOCK_SIZE
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1490 
uöt32_t
 
¨øy32_2
[
BLOCK_SIZE
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1491 
i
;

1492 
uöt32_t
 
öi
[4] = {0x1234, 0x5678, 0x9abc, 0xdef0};

1493 
uöt32_t
 
r32
;

1494 
sfmt_t
 *
˘x
;

1496 
	`as£π_d_À
(
	`gë_mö_¨øy_size32
(), 
BLOCK_SIZE
,

1498 
˘x
 = 
	`öô_by_¨øy
(
öi
, 4);

1499 
	`fûl_¨øy32
(
˘x
, 
¨øy32
, 
BLOCK_SIZE
);

1500 
	`fûl_¨øy32
(
˘x
, 
¨øy32_2
, 
BLOCK_SIZE
);

1501 
	`föi_gí_ønd
(
˘x
);

1503 
˘x
 = 
	`öô_by_¨øy
(
öi
, 4);

1504 
i
 = 0; i < 
BLOCK_SIZE
; i++) {

1505 i‡(
i
 < 
COUNT_1
) {

1506 
	`as£π_u32_eq
(
¨øy32
[
i
], 
öô_by_¨øy_32_ex≥˘ed
[i],

1507 "Ouçuàmism©ch f‹ i=%d", 
i
);

1509 
r32
 = 
	`gí_ønd32
(
˘x
);

1510 
	`as£π_u32_eq
(
r32
, 
¨øy32
[
i
],

1511 "Mism©cháà¨øy32[%d]=%x, gí=%x", 
i
, 
¨øy32
[i], 
r32
);

1513 
i
 = 0; i < 
COUNT_2
; i++) {

1514 
r32
 = 
	`gí_ønd32
(
˘x
);

1515 
	`as£π_u32_eq
(
r32
, 
¨øy32_2
[
i
],

1516 "Mism©cháà¨øy32_2[%d]=%x, gí=%x", 
i
, 
¨øy32_2
[i],

1517 
r32
);

1519 
	`föi_gí_ønd
(
˘x
);

1520 
	}
}

1521 
TEST_END


1523 
	$TEST_BEGIN
(
ã°_gí_ønd_64
)

1525 
uöt64_t
 
¨øy64
[
BLOCK_SIZE64
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1526 
uöt64_t
 
¨øy64_2
[
BLOCK_SIZE64
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1527 
i
;

1528 
uöt64_t
 
r
;

1529 
sfmt_t
 *
˘x
;

1531 
	`as£π_d_À
(
	`gë_mö_¨øy_size64
(), 
BLOCK_SIZE64
,

1533 
˘x
 = 
	`öô_gí_ønd
(4321);

1534 
	`fûl_¨øy64
(
˘x
, 
¨øy64
, 
BLOCK_SIZE64
);

1535 
	`fûl_¨øy64
(
˘x
, 
¨øy64_2
, 
BLOCK_SIZE64
);

1536 
	`föi_gí_ønd
(
˘x
);

1538 
˘x
 = 
	`öô_gí_ønd
(4321);

1539 
i
 = 0; i < 
BLOCK_SIZE64
; i++) {

1540 i‡(
i
 < 
COUNT_1
) {

1541 
	`as£π_u64_eq
(
¨øy64
[
i
], 
öô_gí_ønd_64_ex≥˘ed
[i],

1542 "Ouçuàmism©ch f‹ i=%d", 
i
);

1544 
r
 = 
	`gí_ønd64
(
˘x
);

1545 
	`as£π_u64_eq
(
r
, 
¨øy64
[
i
],

1546 "Mism©cháà¨øy64[%d]=%"
FMTx64
", gí=%"FMTx64, 
i
,

1547 
¨øy64
[
i
], 
r
);

1549 
i
 = 0; i < 
COUNT_2
; i++) {

1550 
r
 = 
	`gí_ønd64
(
˘x
);

1551 
	`as£π_u64_eq
(
r
, 
¨øy64_2
[
i
],

1552 "Mism©cháà¨øy64_2[%d]=%"
FMTx64
" gí=%"FMTx64"", 
i
,

1553 
¨øy64_2
[
i
], 
r
);

1555 
	`föi_gí_ønd
(
˘x
);

1556 
	}
}

1557 
TEST_END


1559 
	$TEST_BEGIN
(
ã°_by_¨øy_64
)

1561 
uöt64_t
 
¨øy64
[
BLOCK_SIZE64
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1562 
uöt64_t
 
¨øy64_2
[
BLOCK_SIZE64
] 
	`JEMALLOC_ATTR
(
	`Æig√d
(16));

1563 
i
;

1564 
uöt64_t
 
r
;

1565 
uöt32_t
 
öi
[] = {5, 4, 3, 2, 1};

1566 
sfmt_t
 *
˘x
;

1568 
	`as£π_d_À
(
	`gë_mö_¨øy_size64
(), 
BLOCK_SIZE64
,

1570 
˘x
 = 
	`öô_by_¨øy
(
öi
, 5);

1571 
	`fûl_¨øy64
(
˘x
, 
¨øy64
, 
BLOCK_SIZE64
);

1572 
	`fûl_¨øy64
(
˘x
, 
¨øy64_2
, 
BLOCK_SIZE64
);

1573 
	`föi_gí_ønd
(
˘x
);

1575 
˘x
 = 
	`öô_by_¨øy
(
öi
, 5);

1576 
i
 = 0; i < 
BLOCK_SIZE64
; i++) {

1577 i‡(
i
 < 
COUNT_1
) {

1578 
	`as£π_u64_eq
(
¨øy64
[
i
], 
öô_by_¨øy_64_ex≥˘ed
[i],

1579 "Ouçuàmism©ch f‹ i=%d", 
i
);

1581 
r
 = 
	`gí_ønd64
(
˘x
);

1582 
	`as£π_u64_eq
(
r
, 
¨øy64
[
i
],

1583 "Mism©cháà¨øy64[%d]=%"
FMTx64
" gí=%"FMTx64, 
i
,

1584 
¨øy64
[
i
], 
r
);

1586 
i
 = 0; i < 
COUNT_2
; i++) {

1587 
r
 = 
	`gí_ønd64
(
˘x
);

1588 
	`as£π_u64_eq
(
r
, 
¨øy64_2
[
i
],

1589 "Mism©cháà¨øy64_2[%d]=%"
FMTx64
" gí=%"FMTx64, 
i
,

1590 
¨øy64_2
[
i
], 
r
);

1592 
	`föi_gí_ønd
(
˘x
);

1593 
	}
}

1594 
TEST_END


1597 
	$maö
()

1600  (
	`ã°
(

1601 
ã°_gí_ønd_32
,

1602 
ã°_by_¨øy_32
,

1603 
ã°_gí_ønd_64
,

1604 
ã°_by_¨øy_64
));

1605 
	}
}

	@dep/jemalloc-4.2.0/test/unit/a0.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_a0
)

5 *
p
;

7 
p
 = 
	`a0mÆloc
(1);

8 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpectedá0malloc()Érror");

9 
	`a0dÆloc
(
p
);

10 
	}
}

11 
TEST_END


14 
	$maö
()

17  (
	`ã°_no_mÆloc_öô
(

18 
ã°_a0
));

19 
	}
}

	@dep/jemalloc-4.2.0/test/unit/arena_reset.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_PROF


4 c⁄° *
	gmÆloc_c⁄f
 = "prof:true,lg_prof_sample:0";

8 
	$gë_nsizes_im∂
(c⁄° *
cmd
)

10 
ªt
;

11 
size_t
 
z
;

13 
z
 = ();

14 
	`as£π_d_eq
(
	`mÆl˘l
(
cmd
, &
ªt
, &
z
, 
NULL
, 0), 0,

15 "U√x≥˘ed mÆl˘l(\"%s\", ...ËÁûuª", 
cmd
);

17  (
ªt
);

18 
	}
}

21 
	$gë_nsmÆl
()

24  (
	`gë_nsizes_im∂
("arenas.nbins"));

25 
	}
}

28 
	$gë_∆¨ge
()

31  (
	`gë_nsizes_im∂
("arenas.nlruns"));

32 
	}
}

35 
	$gë_nhuge
()

38  (
	`gë_nsizes_im∂
("arenas.nhchunks"));

39 
	}
}

41 
size_t


42 
	$gë_size_im∂
(c⁄° *
cmd
, 
size_t
 
öd
)

44 
size_t
 
ªt
;

45 
size_t
 
z
;

46 
size_t
 
mib
[4];

47 
size_t
 
mibÀn
 = 4;

49 
z
 = (
size_t
);

50 
	`as£π_d_eq
(
	`mÆl˘ amëomib
(
cmd
, 
mib
, &
mibÀn
),

51 0, "U√x≥˘ed mÆl˘ amëomib(\"%s\", ...ËÁûuª", 
cmd
);

52 
mib
[2] = 
öd
;

53 
z
 = (
size_t
);

54 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
ªt
, &
z
, 
NULL
, 0),

55 0, "U√x≥˘ed mÆl˘lbymib([\"%s\", %zu], ...ËÁûuª", 
cmd
, 
öd
);

57  (
ªt
);

58 
	}
}

60 
size_t


61 
	$gë_smÆl_size
(
size_t
 
öd
)

64  (
	`gë_size_im∂
("¨ías.bö.0.size", 
öd
));

65 
	}
}

67 
size_t


68 
	$gë_œrge_size
(
size_t
 
öd
)

71  (
	`gë_size_im∂
("¨ías.Ãun.0.size", 
öd
));

72 
	}
}

74 
size_t


75 
	$gë_huge_size
(
size_t
 
öd
)

78  (
	`gë_size_im∂
("¨ías.hchunk.0.size", 
öd
));

79 
	}
}

81 
	$TEST_BEGIN
(
ã°_¨ía_ª£t
)

83 
	#NHUGE
 4

	)

84 
¨ía_öd
, 
nsmÆl
, 
∆¨ge
, 
nhuge
, 
≈ås
, 
i
;

85 
size_t
 
sz
, 
mibÀn
;

86 **
±rs
;

87 
Êags
;

88 
size_t
 
mib
[3];

89 
tsdn_t
 *
tsdn
;

91 
	`ã°_skù_if
((
c⁄fig_vÆgröd
 && 
	`u∆ikñy
(
ö_vÆgröd
)Ë|| (
c⁄fig_fûl


92 && 
	`u∆ikñy
(
›t_qu¨™töe
)));

94 
sz
 = ();

95 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.exãnd", &
¨ía_öd
, &
sz
, 
NULL
, 0), 0,

98 
Êags
 = 
	`MALLOCX_ARENA
(
¨ía_öd
Ë| 
MALLOCX_TCACHE_NONE
;

100 
nsmÆl
 = 
	`gë_nsmÆl
();

101 
∆¨ge
 = 
	`gë_∆¨ge
();

102 
nhuge
 = 
	`gë_nhuge
(Ë> 
NHUGE
 ? NHUGE : get_nhuge();

103 
≈ås
 = 
nsmÆl
 + 
∆¨ge
 + 
nhuge
;

104 
±rs
 = (**)
	`mÆloc
(
≈ås
 * (*));

105 
	`as£π_±r_nŸ_nuŒ
(
±rs
, "Unexpected malloc() failure");

108 
i
 = 0; i < 
nsmÆl
; i++) {

109 
sz
 = 
	`gë_smÆl_size
(
i
);

110 
±rs
[
i
] = 
	`mÆlocx
(
sz
, 
Êags
);

111 
	`as£π_±r_nŸ_nuŒ
(
±rs
[
i
],

112 "U√x≥˘ed mÆlocx(%zu, %#xËÁûuª", 
sz
, 
Êags
);

114 
i
 = 0; i < 
∆¨ge
; i++) {

115 
sz
 = 
	`gë_œrge_size
(
i
);

116 
±rs
[
nsmÆl
 + 
i
] = 
	`mÆlocx
(
sz
, 
Êags
);

117 
	`as£π_±r_nŸ_nuŒ
(
±rs
[
i
],

118 "U√x≥˘ed mÆlocx(%zu, %#xËÁûuª", 
sz
, 
Êags
);

120 
i
 = 0; i < 
nhuge
; i++) {

121 
sz
 = 
	`gë_huge_size
(
i
);

122 
±rs
[
nsmÆl
 + 
∆¨ge
 + 
i
] = 
	`mÆlocx
(
sz
, 
Êags
);

123 
	`as£π_±r_nŸ_nuŒ
(
±rs
[
i
],

124 "U√x≥˘ed mÆlocx(%zu, %#xËÁûuª", 
sz
, 
Êags
);

127 
tsdn
 = 
	`tsdn_„tch
();

130 
i
 = 0; i < 
≈ås
; i++) {

131 
	`as£π_zu_gt
(
	`ivßŒoc
(
tsdn
, 
±rs
[
i
], 
Ál£
), 0,

136 
mibÀn
 = (
mib
)/(
size_t
);

137 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.ª£t", 
mib
, &
mibÀn
), 0,

139 
mib
[1] = (
size_t
)
¨ía_öd
;

140 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, NULL, 0), 0,

144 
i
 = 0; i < 
≈ås
; i++) {

145 
	`as£π_zu_eq
(
	`ivßŒoc
(
tsdn
, 
±rs
[
i
], 
Ál£
), 0,

149 
	`‰ì
(
±rs
);

150 
	}
}

151 
TEST_END


154 
	$maö
()

157  (
	`ã°
(

158 
ã°_¨ía_ª£t
));

159 
	}
}

	@dep/jemalloc-4.2.0/test/unit/atomic.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#TEST_STRUCT
(
p
, 
t
) \

4 
p
##
_ã°_s
 { \

5 
t
 
accum0
; \

6 
t
 
x
; \

7 
t
 
s
; \

9 
p
##
	t_ã°_s
 
	tp
##
	t_ã°_t
;

	)

11 
	#TEST_BODY
(
p
, 
t
, 
tc
, 
è
, 
FMT
) do { \

12 c⁄° 
p
##
_ã°_t
 
ã°s
[] = { \

13 {(
t
)-1, (t)-1, (t)-2}, \

14 {(
t
)-1, (t) 0, (t)-2}, \

15 {(
t
)-1, (t) 1, (t)-2}, \

17 {(
t
) 0, (t)-1, (t)-2}, \

18 {(
t
) 0, (t) 0, (t)-2}, \

19 {(
t
) 0, (t) 1, (t)-2}, \

21 {(
t
) 1, (t)-1, (t)-2}, \

22 {(
t
) 1, (t) 0, (t)-2}, \

23 {(
t
) 1, (t) 1, (t)-2}, \

25 {(
t
)0, (t)-(1 << 22), (t)-2}, \

26 {(
t
)0, (t)(1 << 22), (t)-2}, \

27 {(
t
)(1 << 22), (t)-(1 << 22), (t)-2}, \

28 {(
t
)(1 << 22), (t)(1 << 22), (t)-2} \

30 
i
; \

32 
i
 = 0; i < (
ã°s
)/(
p
##
_ã°_t
); i++) { \

33 
boﬁ
 
îr
; \

34 
t
 
accum
 = 
ã°s
[
i
].
accum0
; \

35 
as£π_
##
è
##
	`_eq
(
©omic_ªad_
##
	`p
(&
accum
), \

36 
ã°s
[
i
].
accum0
, \

37 "Eº⁄eou†ªad, i=%u", 
i
); \

39 
as£π_
##
è
##
	`_eq
(
©omic_add_
##
	`p
(&
accum
, 
ã°s
[
i
].
x
), \

40 (
t
)((
tc
)
ã°s
[
i
].
accum0
 + (tcÈe°s[i].
x
), \

41 "i=%u,áccum=%"
FMT
", x=%"FMT, \

42 
i
, 
ã°s
[i].
accum0
,Åe°s[i].
x
); \

43 
as£π_
##
è
##
	`_eq
(
©omic_ªad_
##
	`p
(&
accum
),áccum, \

44 "Eº⁄eou†add, i=%u", 
i
); \

46 
accum
 = 
ã°s
[
i
].
accum0
; \

47 
as£π_
##
è
##
	`_eq
(
©omic_sub_
##
	`p
(&
accum
, 
ã°s
[
i
].
x
), \

48 (
t
)((
tc
)
ã°s
[
i
].
accum0
 - (tcÈe°s[i].
x
), \

49 "i=%u,áccum=%"
FMT
", x=%"FMT, \

50 
i
, 
ã°s
[i].
accum0
,Åe°s[i].
x
); \

51 
as£π_
##
è
##
	`_eq
(
©omic_ªad_
##
	`p
(&
accum
),áccum, \

52 "Eº⁄eou†sub, i=%u", 
i
); \

54 
accum
 = 
ã°s
[
i
].
accum0
; \

55 
îr
 = 
©omic_ˇs_
##
	`p
(&
accum
, 
ã°s
[
i
].
x
,Åe°s[i].
s
); \

56 
	`as£π_b_eq
(
îr
, 
ã°s
[
i
].
accum0
 !ã°s[i].
x
, \

58 
as£π_
##
è
##
	`_eq
(
accum
, 
îr
 ? 
ã°s
[
i
].
accum0
 : \

59 
ã°s
[
i
].
s
, "Erroneous casÉffect, i=%u", i); \

61 
accum
 = 
ã°s
[
i
].
accum0
; \

62 
©omic_wrôe_
##
	`p
(&
accum
, 
ã°s
[
i
].
s
); \

63 
as£π_
##
è
##
	`_eq
(
accum
, 
ã°s
[
i
].
s
, \

64 "Eº⁄eou†wrôe, i=%u", 
i
); \

66 } 0)

	)

68 
	$TEST_STRUCT
(
uöt64
, 
uöt64_t
)

69 
	$TEST_BEGIN
(
ã°_©omic_uöt64
)

72 #i‡!(
LG_SIZEOF_PTR
 =3 || 
LG_SIZEOF_INT
 == 3)

73 
	`ã°_skù
("64-bitátomic operationsÇot supported");

75 
	`TEST_BODY
(
uöt64
, 
uöt64_t
, uöt64_t, 
u64
, 
FMTx64
);

77 
	}
}

78 
TEST_END


80 
	$TEST_STRUCT
(
uöt32
, 
uöt32_t
)

81 
	$TEST_BEGIN
(
ã°_©omic_uöt32
)

84 
	`TEST_BODY
(
uöt32
, 
uöt32_t
, uöt32_t, 
u32
, "#"
FMTx32
);

85 
	}
}

86 
TEST_END


88 
	$TEST_STRUCT
(
p
, *)

89 
	$TEST_BEGIN
(
ã°_©omic_p
)

92 
	`TEST_BODY
(
p
, *, 
uöçå_t
, 
±r
, "p");

93 
	}
}

94 
TEST_END


96 
	$TEST_STRUCT
(
z
, 
size_t
)

97 
	$TEST_BEGIN
(
ã°_©omic_z
)

100 
	`TEST_BODY
(
z
, 
size_t
, size_t, 
zu
, "#zx");

101 
	}
}

102 
TEST_END


104 
	$TEST_STRUCT
(
u
, )

105 
	$TEST_BEGIN
(
ã°_©omic_u
)

108 
	`TEST_BODY
(
u
, , , u, "#x");

109 
	}
}

110 
TEST_END


113 
	$maö
()

116  (
	`ã°
(

117 
ã°_©omic_uöt64
,

118 
ã°_©omic_uöt32
,

119 
ã°_©omic_p
,

120 
ã°_©omic_z
,

121 
ã°_©omic_u
));

122 
	}
}

	@dep/jemalloc-4.2.0/test/unit/bitmap.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_bôm≠_size
)

5 
size_t
 
i
, 
¥ev_size
;

7 
¥ev_size
 = 0;

8 
i
 = 1; i <
BITMAP_MAXBITS
; i++) {

9 
bôm≠_öfo_t
 
böfo
;

10 
size_t
 
size
;

12 
	`bôm≠_öfo_öô
(&
böfo
, 
i
);

13 
size
 = 
	`bôm≠_size
(&
böfo
);

14 
	`as£π_åue
(
size
 >
¥ev_size
,

16 
¥ev_size
 = 
size
;

18 
	}
}

19 
TEST_END


21 
	$TEST_BEGIN
(
ã°_bôm≠_öô
)

23 
size_t
 
i
;

25 
i
 = 1; i <
BITMAP_MAXBITS
; i++) {

26 
bôm≠_öfo_t
 
böfo
;

27 
	`bôm≠_öfo_öô
(&
böfo
, 
i
);

29 
size_t
 
j
;

30 
bôm≠_t
 *
bôm≠
 = (bôm≠_à*)
	`mÆloc
(

31 
	`bôm≠_size
(&
böfo
));

32 
	`bôm≠_öô
(
bôm≠
, &
böfo
);

34 
j
 = 0; j < 
i
; j++) {

35 
	`as£π_Ál£
(
	`bôm≠_gë
(
bôm≠
, &
böfo
, 
j
),

38 
	`‰ì
(
bôm≠
);

41 
	}
}

42 
TEST_END


44 
	$TEST_BEGIN
(
ã°_bôm≠_£t
)

46 
size_t
 
i
;

48 
i
 = 1; i <
BITMAP_MAXBITS
; i++) {

49 
bôm≠_öfo_t
 
böfo
;

50 
	`bôm≠_öfo_öô
(&
böfo
, 
i
);

52 
size_t
 
j
;

53 
bôm≠_t
 *
bôm≠
 = (bôm≠_à*)
	`mÆloc
(

54 
	`bôm≠_size
(&
böfo
));

55 
	`bôm≠_öô
(
bôm≠
, &
böfo
);

57 
j
 = 0; j < 
i
; j++)

58 
	`bôm≠_£t
(
bôm≠
, &
böfo
, 
j
);

59 
	`as£π_åue
(
	`bôm≠_fuŒ
(
bôm≠
, &
böfo
),

61 
	`‰ì
(
bôm≠
);

64 
	}
}

65 
TEST_END


67 
	$TEST_BEGIN
(
ã°_bôm≠_un£t
)

69 
size_t
 
i
;

71 
i
 = 1; i <
BITMAP_MAXBITS
; i++) {

72 
bôm≠_öfo_t
 
böfo
;

73 
	`bôm≠_öfo_öô
(&
böfo
, 
i
);

75 
size_t
 
j
;

76 
bôm≠_t
 *
bôm≠
 = (bôm≠_à*)
	`mÆloc
(

77 
	`bôm≠_size
(&
böfo
));

78 
	`bôm≠_öô
(
bôm≠
, &
böfo
);

80 
j
 = 0; j < 
i
; j++)

81 
	`bôm≠_£t
(
bôm≠
, &
böfo
, 
j
);

82 
	`as£π_åue
(
	`bôm≠_fuŒ
(
bôm≠
, &
böfo
),

84 
j
 = 0; j < 
i
; j++)

85 
	`bôm≠_un£t
(
bôm≠
, &
böfo
, 
j
);

86 
j
 = 0; j < 
i
; j++)

87 
	`bôm≠_£t
(
bôm≠
, &
böfo
, 
j
);

88 
	`as£π_åue
(
	`bôm≠_fuŒ
(
bôm≠
, &
böfo
),

90 
	`‰ì
(
bôm≠
);

93 
	}
}

94 
TEST_END


96 
	$TEST_BEGIN
(
ã°_bôm≠_sfu
)

98 
size_t
 
i
;

100 
i
 = 1; i <
BITMAP_MAXBITS
; i++) {

101 
bôm≠_öfo_t
 
böfo
;

102 
	`bôm≠_öfo_öô
(&
böfo
, 
i
);

104 
size_t
 
j
;

105 
bôm≠_t
 *
bôm≠
 = (bôm≠_à*)
	`mÆloc
(

106 
	`bôm≠_size
(&
böfo
));

107 
	`bôm≠_öô
(
bôm≠
, &
böfo
);

110 
j
 = 0; j < 
i
; j++) {

111 
	`as£π_zd_eq
(
	`bôm≠_sfu
(
bôm≠
, &
böfo
), 
j
,

115 
	`as£π_åue
(
	`bôm≠_fuŒ
(
bôm≠
, &
böfo
),

122 
j
 = 
i
 - 1; j < i; j--) {

123 
	`bôm≠_un£t
(
bôm≠
, &
böfo
, 
j
);

124 
	`as£π_zd_eq
(
	`bôm≠_sfu
(
bôm≠
, &
böfo
), 
j
,

127 
	`bôm≠_un£t
(
bôm≠
, &
böfo
, 
j
);

129 
	`as£π_Ál£
(
	`bôm≠_gë
(
bôm≠
, &
böfo
, 0),

136 
j
 = 1; j < 
i
; j++) {

137 
	`bôm≠_£t
(
bôm≠
, &
böfo
, 
j
 - 1);

138 
	`as£π_zd_eq
(
	`bôm≠_sfu
(
bôm≠
, &
böfo
), 
j
,

141 
	`bôm≠_un£t
(
bôm≠
, &
böfo
, 
j
);

143 
	`as£π_zd_eq
(
	`bôm≠_sfu
(
bôm≠
, &
böfo
), 
i
 - 1,

145 
	`as£π_åue
(
	`bôm≠_fuŒ
(
bôm≠
, &
böfo
),

147 
	`‰ì
(
bôm≠
);

150 
	}
}

151 
TEST_END


154 
	$maö
()

157  (
	`ã°
(

158 
ã°_bôm≠_size
,

159 
ã°_bôm≠_öô
,

160 
ã°_bôm≠_£t
,

161 
ã°_bôm≠_un£t
,

162 
ã°_bôm≠_sfu
));

163 
	}
}

	@dep/jemalloc-4.2.0/test/unit/ckh.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_√w_dñëe
)

5 
tsdn_t
 *
tsdn
;

6 
ckh_t
 
ckh
;

8 
tsdn
 = 
	`tsdn_„tch
();

10 
	`as£π_Ál£
(
	`ckh_√w
(
tsdn
, &
ckh
, 2, 
ckh_°rög_hash
,

11 
ckh_°rög_keycomp
), "Unexpected ckh_new()Érror");

12 
	`ckh_dñëe
(
tsdn
, &
ckh
);

14 
	`as£π_Ál£
(
	`ckh_√w
(
tsdn
, &
ckh
, 3, 
ckh_poöãr_hash
,

15 
ckh_poöãr_keycomp
), "Unexpected ckh_new()Érror");

16 
	`ckh_dñëe
(
tsdn
, &
ckh
);

17 
	}
}

18 
TEST_END


20 
	$TEST_BEGIN
(
ã°_cou¡_ö£π_£¨ch_ªmove
)

22 
tsdn_t
 *
tsdn
;

23 
ckh_t
 
ckh
;

24 c⁄° *
°rs
[] = {

30 c⁄° *
missög
 = "A stringÇot inÅhe hashÅable.";

31 
size_t
 
i
;

33 
tsdn
 = 
	`tsdn_„tch
();

35 
	`as£π_Ál£
(
	`ckh_√w
(
tsdn
, &
ckh
, 2, 
ckh_°rög_hash
,

36 
ckh_°rög_keycomp
), "Unexpected ckh_new()Érror");

37 
	`as£π_zu_eq
(
	`ckh_cou¡
(&
ckh
), 0,

38 "ckh_cou¡(ËshouldÑëu∫ %zu, buàôÑëu∫ed %zu", 
	`ZU
(0),

39 
	`ckh_cou¡
(&
ckh
));

42 
i
 = 0; i < (
°rs
)/(const *); i++) {

43 
	`ckh_ö£π
(
tsdn
, &
ckh
, 
°rs
[
i
], strs[i]);

44 
	`as£π_zu_eq
(
	`ckh_cou¡
(&
ckh
), 
i
+1,

45 "ckh_cou¡(ËshouldÑëu∫ %zu, buàôÑëu∫ed %zu", 
i
+1,

46 
	`ckh_cou¡
(&
ckh
));

50 
i
 = 0; i < (
°rs
)/(const *); i++) {

52 *
p
;

53 c⁄° *
s
;

54 } 
k
, 
v
;

55 **
kp
, **
vp
;

56 c⁄° *
ks
, *
vs
;

58 
kp
 = (
i
 & 1Ë? &
k
.
p
 : 
NULL
;

59 
vp
 = (
i
 & 2Ë? &
v
.
p
 : 
NULL
;

60 
k
.
p
 = 
NULL
;

61 
v
.
p
 = 
NULL
;

62 
	`as£π_Ál£
(
	`ckh_£¨ch
(&
ckh
, 
°rs
[
i
], 
kp
, 
vp
),

65 
ks
 = (
i
 & 1Ë? 
°rs
[i] : (c⁄° *)
NULL
;

66 
vs
 = (
i
 & 2Ë? 
°rs
[i] : (c⁄° *)
NULL
;

67 
	`as£π_±r_eq
((*)
ks
, (*)
k
.
s
, "Key mismatch, i=%zu",

68 
i
);

69 
	`as£π_±r_eq
((*)
vs
, (*)
v
.
s
, "Value mismatch, i=%zu",

70 
i
);

72 
	`as£π_åue
(
	`ckh_£¨ch
(&
ckh
, 
missög
, 
NULL
, NULL),

76 
i
 = 0; i < (
°rs
)/(const *); i++) {

78 *
p
;

79 c⁄° *
s
;

80 } 
k
, 
v
;

81 **
kp
, **
vp
;

82 c⁄° *
ks
, *
vs
;

84 
kp
 = (
i
 & 1Ë? &
k
.
p
 : 
NULL
;

85 
vp
 = (
i
 & 2Ë? &
v
.
p
 : 
NULL
;

86 
k
.
p
 = 
NULL
;

87 
v
.
p
 = 
NULL
;

88 
	`as£π_Ál£
(
	`ckh_ªmove
(
tsdn
, &
ckh
, 
°rs
[
i
], 
kp
, 
vp
),

91 
ks
 = (
i
 & 1Ë? 
°rs
[i] : (c⁄° *)
NULL
;

92 
vs
 = (
i
 & 2Ë? 
°rs
[i] : (c⁄° *)
NULL
;

93 
	`as£π_±r_eq
((*)
ks
, (*)
k
.
s
, "Key mismatch, i=%zu",

94 
i
);

95 
	`as£π_±r_eq
((*)
vs
, (*)
v
.
s
, "Value mismatch, i=%zu",

96 
i
);

97 
	`as£π_zu_eq
(
	`ckh_cou¡
(&
ckh
),

98 (
°rs
)/(c⁄° *Ë- 
i
 - 1,

100 (
°rs
)/(c⁄° *Ë- 
i
 - 1,

101 
	`ckh_cou¡
(&
ckh
));

104 
	`ckh_dñëe
(
tsdn
, &
ckh
);

105 
	}
}

106 
TEST_END


108 
	$TEST_BEGIN
(
ã°_ö£π_ôî_ªmove
)

110 
	#NITEMS
 
	`ZU
(1000)

	)

111 
tsdn_t
 *
tsdn
;

112 
ckh_t
 
ckh
;

113 **
p
[
NITEMS
];

114 *
q
, *
r
;

115 
size_t
 
i
;

117 
tsdn
 = 
	`tsdn_„tch
();

119 
	`as£π_Ál£
(
	`ckh_√w
(
tsdn
, &
ckh
, 2, 
ckh_poöãr_hash
,

120 
ckh_poöãr_keycomp
), "Unexpected ckh_new()Érror");

122 
i
 = 0; i < 
NITEMS
; i++) {

123 
p
[
i
] = 
	`mÆlocx
(i+1, 0);

124 
	`as£π_±r_nŸ_nuŒ
(
p
[
i
], "Unexpected mallocx() failure");

127 
i
 = 0; i < 
NITEMS
; i++) {

128 
size_t
 
j
;

130 
j
 = 
i
; j < 
NITEMS
; j++) {

131 
	`as£π_Ál£
(
	`ckh_ö£π
(
tsdn
, &
ckh
, 
p
[
j
],Ö[j]),

133 
	`as£π_Ál£
(
	`ckh_£¨ch
(&
ckh
, 
p
[
j
], &
q
, &
r
),

135 
	`as£π_±r_eq
(
p
[
j
], 
q
, "KeyÖointer mismatch");

136 
	`as£π_±r_eq
(
p
[
j
], 
r
, "ValueÖointer mismatch");

139 
	`as£π_zu_eq
(
	`ckh_cou¡
(&
ckh
), 
NITEMS
,

141 
NITEMS
, 
	`ckh_cou¡
(&
ckh
));

143 
j
 = 
i
 + 1; j < 
NITEMS
; j++) {

144 
	`as£π_Ál£
(
	`ckh_£¨ch
(&
ckh
, 
p
[
j
], 
NULL
, NULL),

146 
	`as£π_Ál£
(
	`ckh_ªmove
(
tsdn
, &
ckh
, 
p
[
j
], &
q
, &
r
),

148 
	`as£π_±r_eq
(
p
[
j
], 
q
, "KeyÖointer mismatch");

149 
	`as£π_±r_eq
(
p
[
j
], 
r
, "ValueÖointer mismatch");

150 
	`as£π_åue
(
	`ckh_£¨ch
(&
ckh
, 
p
[
j
], 
NULL
, NULL),

152 
	`as£π_åue
(
	`ckh_ªmove
(
tsdn
, &
ckh
, 
p
[
j
], &
q
, &
r
),

157 
boﬁ
 
£í
[
NITEMS
];

158 
size_t
 
èböd
;

160 
	`mem£t
(
£í
, 0, (seen));

162 
èböd
 = 0; !
	`ckh_ôî
(&
ckh
, &èböd, &
q
, &
r
);) {

163 
size_t
 
k
;

165 
	`as£π_±r_eq
(
q
, 
r
, "Keyánd valÇotÉqual");

167 
k
 = 0; k < 
NITEMS
; k++) {

168 i‡(
p
[
k
] =
q
) {

169 
	`as£π_Ál£
(
£í
[
k
],

170 "Iãm %zuáÃódy sìn", 
k
);

171 
£í
[
k
] = 
åue
;

177 
j
 = 0; j < 
i
 + 1; j++)

178 
	`as£π_åue
(
£í
[
j
], "Item %zuÇot seen", j);

179 ; 
j
 < 
NITEMS
; j++)

180 
	`as£π_Ál£
(
£í
[
j
], "Item %zu seen", j);

184 
i
 = 0; i < 
NITEMS
; i++) {

185 
	`as£π_Ál£
(
	`ckh_£¨ch
(&
ckh
, 
p
[
i
], 
NULL
, NULL),

187 
	`as£π_Ál£
(
	`ckh_ªmove
(
tsdn
, &
ckh
, 
p
[
i
], &
q
, &
r
),

189 
	`as£π_±r_eq
(
p
[
i
], 
q
, "KeyÖointer mismatch");

190 
	`as£π_±r_eq
(
p
[
i
], 
r
, "ValueÖointer mismatch");

191 
	`as£π_åue
(
	`ckh_£¨ch
(&
ckh
, 
p
[
i
], 
NULL
, NULL),

193 
	`as£π_åue
(
	`ckh_ªmove
(
tsdn
, &
ckh
, 
p
[
i
], &
q
, &
r
),

195 
	`dÆlocx
(
p
[
i
], 0);

198 
	`as£π_zu_eq
(
	`ckh_cou¡
(&
ckh
), 0,

200 
	`ZU
(0), 
	`ckh_cou¡
(&
ckh
));

201 
	`ckh_dñëe
(
tsdn
, &
ckh
);

202 #unde‡
NITEMS


203 
	}
}

204 
TEST_END


207 
	$maö
()

210  (
	`ã°
(

211 
ã°_√w_dñëe
,

212 
ã°_cou¡_ö£π_£¨ch_ªmove
,

213 
ã°_ö£π_ôî_ªmove
));

214 
	}
}

	@dep/jemalloc-4.2.0/test/unit/decay.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 c⁄° *
	gmÆloc_c⁄f
 = "purge:decay,decay_time:1";

5 
n°ime_upd©e_t
 *
	gn°ime_upd©e_‹ig
;

7 
	gnupd©es_mock
;

8 
n°ime_t
 
	gtime_mock
;

9 
boﬁ
 
	gn⁄m⁄Ÿ⁄ic_mock
;

11 
boﬁ


12 
	$n°ime_upd©e_mock
(
n°ime_t
 *
time
)

15 
nupd©es_mock
++;

16 i‡(!
n⁄m⁄Ÿ⁄ic_mock
)

17 
	`n°ime_c›y
(
time
, &
time_mock
);

18  (
n⁄m⁄Ÿ⁄ic_mock
);

19 
	}
}

21 
	$TEST_BEGIN
(
ã°_deˇy_ticks
)

23 
tickî_t
 *
deˇy_tickî
;

24 
tick0
, 
tick1
;

25 
size_t
 
sz
, 
huge0
, 
œrge0
;

26 *
p
;

28 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_deˇy
);

30 
deˇy_tickî
 = 
	`deˇy_tickî_gë
(
	`tsd_„tch
(), 0);

31 
	`as£π_±r_nŸ_nuŒ
(
deˇy_tickî
,

34 
sz
 = (
size_t
);

35 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.hchunk.0.size", &
huge0
, &
sz
, 
NULL
, 0), 0,

37 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.Ãun.0.size", &
œrge0
, &
sz
, 
NULL
, 0), 0,

47 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

48 
p
 = 
	`mÆloc
(
huge0
);

49 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected malloc() failure");

50 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

51 
	`as£π_u32_√
(
tick1
, 
tick0
, "ExpectedÅickerÅoÅick during malloc()");

53 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

54 
	`‰ì
(
p
);

55 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

56 
	`as£π_u32_√
(
tick1
, 
tick0
, "ExpectedÅickerÅoÅick during free()");

59 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

60 
p
 = 
	`ˇŒoc
(1, 
huge0
);

61 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected calloc() failure");

62 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

63 
	`as£π_u32_√
(
tick1
, 
tick0
, "ExpectedÅickerÅoÅick during calloc()");

64 
	`‰ì
(
p
);

67 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

68 
	`as£π_d_eq
(
	`posix_memÆign
(&
p
, (
size_t
), 
huge0
), 0,

70 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

71 
	`as£π_u32_√
(
tick1
, 
tick0
,

73 
	`‰ì
(
p
);

76 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

77 
p
 = 
	`Æig√d_Æloc
((
size_t
), 
huge0
);

78 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpectedáligned_alloc() failure");

79 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

80 
	`as£π_u32_√
(
tick1
, 
tick0
,

82 
	`‰ì
(
p
);

86 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

87 
p
 = 
	`ªÆloc
(
NULL
, 
huge0
);

88 
	`as£π_±r_nŸ_nuŒ
(
p
, "UnexpectedÑealloc() failure");

89 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

90 
	`as£π_u32_√
(
tick1
, 
tick0
, "ExpectedÅickerÅoÅick duringÑealloc()");

92 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

93 
p
 = 
	`ªÆloc
’, 
huge0
);

94 
	`as£π_±r_nŸ_nuŒ
(
p
, "UnexpectedÑealloc() failure");

95 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

96 
	`as£π_u32_√
(
tick1
, 
tick0
, "ExpectedÅickerÅoÅick duringÑealloc()");

98 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

99 
	`ªÆloc
(
p
, 0);

100 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

101 
	`as£π_u32_√
(
tick1
, 
tick0
, "ExpectedÅickerÅoÅick duringÑealloc()");

108 
i
;

109 
size_t
 
Ælocx_sizes
[3];

110 
Ælocx_sizes
[0] = 
huge0
;

111 
Ælocx_sizes
[1] = 
œrge0
;

112 
Ælocx_sizes
[2] = 1;

114 
i
 = 0; i < (
Ælocx_sizes
Ë/ (
size_t
); i++) {

115 
sz
 = 
Ælocx_sizes
[
i
];

118 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

119 
p
 = 
	`mÆlocx
(
sz
, 
MALLOCX_TCACHE_NONE
);

120 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

121 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

122 
	`as£π_u32_√
(
tick1
, 
tick0
,

124 
sz
);

126 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

127 
p
 = 
	`øŒocx
’, 
sz
, 
MALLOCX_TCACHE_NONE
);

128 
	`as£π_±r_nŸ_nuŒ
(
p
, "UnexpectedÑallocx() failure");

129 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

130 
	`as£π_u32_√
(
tick1
, 
tick0
,

132 
sz
);

134 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

135 
	`xÆlocx
(
p
, 
sz
, 0, 
MALLOCX_TCACHE_NONE
);

136 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

137 
	`as£π_u32_√
(
tick1
, 
tick0
,

139 
sz
);

141 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

142 
	`dÆlocx
(
p
, 
MALLOCX_TCACHE_NONE
);

143 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

144 
	`as£π_u32_√
(
tick1
, 
tick0
,

146 
sz
);

148 
p
 = 
	`mÆlocx
(
sz
, 
MALLOCX_TCACHE_NONE
);

149 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

150 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

151 
	`sdÆlocx
(
p
, 
sz
, 
MALLOCX_TCACHE_NONE
);

152 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

153 
	`as£π_u32_√
(
tick1
, 
tick0
,

155 "(sz=%zu)", 
sz
);

163 i‡(
c⁄fig_tˇche
) {

164 
tˇche_öd
, 
i
;

165 
size_t
 
tˇche_sizes
[2];

166 
tˇche_sizes
[0] = 
œrge0
;

167 
tˇche_sizes
[1] = 1;

169 
sz
 = ();

170 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.¸óã", &
tˇche_öd
, &
sz
, 
NULL
, 0),

173 
i
 = 0; i < (
tˇche_sizes
Ë/ (
size_t
); i++) {

174 
sz
 = 
tˇche_sizes
[
i
];

177 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

178 
p
 = 
	`mÆlocx
(
sz
, 
	`MALLOCX_TCACHE
(
tˇche_öd
));

179 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

180 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

181 
	`as£π_u32_√
(
tick1
, 
tick0
,

183 "(sz=%zu)", 
sz
);

185 
	`dÆlocx
(
p
, 
	`MALLOCX_TCACHE
(
tˇche_öd
));

186 
tick0
 = 
	`tickî_ªad
(
deˇy_tickî
);

187 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.Êush", 
NULL
, NULL,

188 &
tˇche_öd
, ()), 0,

190 
tick1
 = 
	`tickî_ªad
(
deˇy_tickî
);

191 
	`as£π_u32_√
(
tick1
, 
tick0
,

193 "(sz=%zu)", 
sz
);

196 
	}
}

197 
TEST_END


199 
	$TEST_BEGIN
(
ã°_deˇy_tickî
)

201 
	#NPS
 1024

	)

202 
Êags
 = (
	`MALLOCX_ARENA
(0Ë| 
MALLOCX_TCACHE_NONE
);

203 *
ps
[
NPS
];

204 
uöt64_t
 
ïoch
;

205 
uöt64_t
 
≈urge0
 = 0;

206 
uöt64_t
 
≈urge1
 = 0;

207 
size_t
 
sz
, 
œrge
;

208 
i
, 
nupd©es0
;

209 
n°ime_t
 
time
, 
deˇy_time
, 
dódlöe
;

211 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_deˇy
);

219 i‡(
c⁄fig_tˇche
) {

220 
size_t
 
tˇche_max
;

222 
sz
 = (
size_t
);

223 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.tˇche_max", &
tˇche_max
, &
sz
, 
NULL
,

225 
œrge
 = 
	`«Œocx
(
tˇche_max
 + 1, 
Êags
);

227 
sz
 = (
size_t
);

228 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.Ãun.0.size", &
œrge
, &
sz
, 
NULL
, 0),

232 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.purge", 
NULL
, NULL, NULL, 0), 0,

234 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (
uöt64_t
)), 0,

236 
sz
 = (
uöt64_t
);

237 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.≈urge", &
≈urge0
, &
sz
, 
NULL
, 0),

238 
c⁄fig_°©s
 ? 0 : 
ENOENT
, "Unexpected mallctlÑesult");

240 
i
 = 0; i < 
NPS
; i++) {

241 
ps
[
i
] = 
	`mÆlocx
(
œrge
, 
Êags
);

242 
	`as£π_±r_nŸ_nuŒ
(
ps
[
i
], "Unexpected mallocx() failure");

245 
nupd©es_mock
 = 0;

246 
	`n°ime_öô
(&
time_mock
, 0);

247 
	`n°ime_upd©e
(&
time_mock
);

248 
n⁄m⁄Ÿ⁄ic_mock
 = 
Ál£
;

250 
n°ime_upd©e_‹ig
 = 
n°ime_upd©e
;

251 
n°ime_upd©e
 = 
n°ime_upd©e_mock
;

253 
i
 = 0; i < 
NPS
; i++) {

254 
	`dÆlocx
(
ps
[
i
], 
Êags
);

255 
nupd©es0
 = 
nupd©es_mock
;

256 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy", 
NULL
, NULL, NULL, 0), 0,

258 
	`as£π_u_gt
(
nupd©es_mock
, 
nupd©es0
,

262 
n°ime_upd©e
 = 
n°ime_upd©e_‹ig
;

264 
	`n°ime_öô
(&
time
, 0);

265 
	`n°ime_upd©e
(&
time
);

266 
	`n°ime_öô2
(&
deˇy_time
, 
›t_deˇy_time
, 0);

267 
	`n°ime_c›y
(&
dódlöe
, &
time
);

268 
	`n°ime_add
(&
dódlöe
, &
deˇy_time
);

270 
i
 = 0; i < 
DECAY_NTICKS_PER_UPDATE
 / 2; i++) {

271 *
p
 = 
	`mÆlocx
(1, 
Êags
);

272 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

273 
	`dÆlocx
(
p
, 
Êags
);

275 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
,

276 (
uöt64_t
)), 0, "Unexpected mallctl failure");

277 
sz
 = (
uöt64_t
);

278 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.≈urge", &
≈urge1
, &
sz
,

279 
NULL
, 0), 
c⁄fig_°©s
 ? 0 : 
ENOENT
,

282 
	`n°ime_upd©e
(&
time
);

283 } 
	`n°ime_com∑ª
(&
time
, &
dódlöe
Ë<0 && 
≈urge1
 =
≈urge0
);

285 i‡(
c⁄fig_°©s
)

286 
	`as£π_u64_gt
(
≈urge1
, 
≈urge0
, "ExpectedÖurgingÅo occur");

287 #unde‡
NPS


288 
	}
}

289 
TEST_END


291 
	$TEST_BEGIN
(
ã°_deˇy_n⁄m⁄Ÿ⁄ic
)

293 
	#NPS
 (
SMOOTHSTEP_NSTEPS
 + 1)

	)

294 
Êags
 = (
	`MALLOCX_ARENA
(0Ë| 
MALLOCX_TCACHE_NONE
);

295 *
ps
[
NPS
];

296 
uöt64_t
 
ïoch
;

297 
uöt64_t
 
≈urge0
 = 0;

298 
uöt64_t
 
≈urge1
 = 0;

299 
size_t
 
sz
, 
œrge0
;

300 
i
, 
nupd©es0
;

302 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_deˇy
);

304 
sz
 = (
size_t
);

305 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.Ãun.0.size", &
œrge0
, &
sz
, 
NULL
, 0), 0,

308 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.purge", 
NULL
, NULL, NULL, 0), 0,

310 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (
uöt64_t
)), 0,

312 
sz
 = (
uöt64_t
);

313 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.≈urge", &
≈urge0
, &
sz
, 
NULL
, 0),

314 
c⁄fig_°©s
 ? 0 : 
ENOENT
, "Unexpected mallctlÑesult");

316 
nupd©es_mock
 = 0;

317 
	`n°ime_öô
(&
time_mock
, 0);

318 
	`n°ime_upd©e
(&
time_mock
);

319 
n⁄m⁄Ÿ⁄ic_mock
 = 
åue
;

321 
n°ime_upd©e_‹ig
 = 
n°ime_upd©e
;

322 
n°ime_upd©e
 = 
n°ime_upd©e_mock
;

324 
i
 = 0; i < 
NPS
; i++) {

325 
ps
[
i
] = 
	`mÆlocx
(
œrge0
, 
Êags
);

326 
	`as£π_±r_nŸ_nuŒ
(
ps
[
i
], "Unexpected mallocx() failure");

329 
i
 = 0; i < 
NPS
; i++) {

330 
	`dÆlocx
(
ps
[
i
], 
Êags
);

331 
nupd©es0
 = 
nupd©es_mock
;

332 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy", 
NULL
, NULL, NULL, 0), 0,

334 
	`as£π_u_gt
(
nupd©es_mock
, 
nupd©es0
,

338 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (
uöt64_t
)), 0,

340 
sz
 = (
uöt64_t
);

341 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.≈urge", &
≈urge1
, &
sz
, 
NULL
, 0),

342 
c⁄fig_°©s
 ? 0 : 
ENOENT
, "Unexpected mallctlÑesult");

344 i‡(
c⁄fig_°©s
)

345 
	`as£π_u64_gt
(
≈urge1
, 
≈urge0
, "ExpectedÖurgingÅo occur");

347 
n°ime_upd©e
 = 
n°ime_upd©e_‹ig
;

348 #unde‡
NPS


349 
	}
}

350 
TEST_END


353 
	$maö
()

356  (
	`ã°
(

357 
ã°_deˇy_ticks
,

358 
ã°_deˇy_tickî
,

359 
ã°_deˇy_n⁄m⁄Ÿ⁄ic
));

360 
	}
}

	@dep/jemalloc-4.2.0/test/unit/fork.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #i‚de‡
_WIN32


4 
	~<sys/waô.h
>

7 
	$TEST_BEGIN
(
ã°_f‹k
)

9 #i‚de‡
_WIN32


10 *
p
;

11 
pid_t
 
pid
;

13 
p
 = 
	`mÆloc
(1);

14 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected malloc() failure");

16 
pid
 = 
	`f‹k
();

18 
	`‰ì
(
p
);

20 
p
 = 
	`mÆloc
(64);

21 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected malloc() failure");

22 
	`‰ì
(
p
);

24 i‡(
pid
 == -1) {

26 
	`ã°_Áû
("Unexpected fork() failure");

27 } i‡(
pid
 == 0) {

29 
	`exô
(0);

31 
°©us
;

34 
åue
) {

35 i‡(
	`waôpid
(
pid
, &
°©us
, 0) == -1)

36 
	`ã°_Áû
("Unexpected waitpid() failure");

37 i‡(
	`WIFSIGNALED
(
°©us
)) {

38 
	`ã°_Áû
("Unexpected childÅermination dueÅo "

39 "sig«»%d", 
	`WTERMSIG
(
°©us
));

42 i‡(
	`WIFEXITED
(
°©us
)) {

43 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

44 
	`ã°_Áû
(

46 
	`WEXITSTATUS
(
°©us
));

53 
	`ã°_skù
("fork(2) is irrelevantÅo Windows");

55 
	}
}

56 
TEST_END


59 
	$maö
()

62  (
	`ã°
(

63 
ã°_f‹k
));

64 
	}
}

	@dep/jemalloc-4.2.0/test/unit/hash.c

30 
	~"ã°/jemÆloc_ã°.h
"

33 
	mhash_v¨ü¡_x86_32
,

34 
	mhash_v¨ü¡_x86_128
,

35 
	mhash_v¨ü¡_x64_128


36 } 
	thash_v¨ü¡_t
;

39 
	$hash_v¨ü¡_bôs
(
hash_v¨ü¡_t
 
v¨ü¡
)

42 
v¨ü¡
) {

43 
hash_v¨ü¡_x86_32
:  (32);

44 
hash_v¨ü¡_x86_128
:  (128);

45 
hash_v¨ü¡_x64_128
:  (128);

46 : 
	`nŸ_ªached
();

48 
	}
}

51 
	$hash_v¨ü¡_°rög
(
hash_v¨ü¡_t
 
v¨ü¡
)

54 
v¨ü¡
) {

55 
hash_v¨ü¡_x86_32
:  ("hash_x86_32");

56 
hash_v¨ü¡_x86_128
:  ("hash_x86_128");

57 
hash_v¨ü¡_x64_128
:  ("hash_x64_128");

58 : 
	`nŸ_ªached
();

60 
	}
}

62 
	#KEY_SIZE
 256

	)

64 
	$hash_v¨ü¡_vîify_key
(
hash_v¨ü¡_t
 
v¨ü¡
, 
uöt8_t
 *
key
)

66 c⁄° 
hashbyãs
 = 
	`hash_v¨ü¡_bôs
(
v¨ü¡
) / 8;

67 c⁄° 
hashes_size
 = 
hashbyãs
 * 256;

68 
	`VARIABLE_ARRAY
(
uöt8_t
, 
hashes
, 
hashes_size
);

69 
	`VARIABLE_ARRAY
(
uöt8_t
, 
föÆ
, 
hashbyãs
);

70 
i
;

71 
uöt32_t
 
compuãd
, 
ex≥˘ed
;

73 
	`mem£t
(
key
, 0, 
KEY_SIZE
);

74 
	`mem£t
(
hashes
, 0, 
hashes_size
);

75 
	`mem£t
(
föÆ
, 0, 
hashbyãs
);

81 
i
 = 0; i < 256; i++) {

82 
key
[
i
] = (
uöt8_t
)i;

83 
v¨ü¡
) {

84 
hash_v¨ü¡_x86_32
: {

85 
uöt32_t
 
out
;

86 
out
 = 
	`hash_x86_32
(
key
, 
i
, 256-i);

87 
	`mem˝y
(&
hashes
[
i
*
hashbyãs
], &
out
, hashbytes);

89 } 
hash_v¨ü¡_x86_128
: {

90 
uöt64_t
 
out
[2];

91 
	`hash_x86_128
(
key
, 
i
, 256-i, 
out
);

92 
	`mem˝y
(&
hashes
[
i
*
hashbyãs
], 
out
, hashbytes);

94 } 
hash_v¨ü¡_x64_128
: {

95 
uöt64_t
 
out
[2];

96 
	`hash_x64_128
(
key
, 
i
, 256-i, 
out
);

97 
	`mem˝y
(&
hashes
[
i
*
hashbyãs
], 
out
, hashbytes);

99 } : 
	`nŸ_ªached
();

104 
v¨ü¡
) {

105 
hash_v¨ü¡_x86_32
: {

106 
uöt32_t
 
out
 = 
	`hash_x86_32
(
hashes
, 
hashes_size
, 0);

107 
	`mem˝y
(
föÆ
, &
out
, (out));

109 } 
hash_v¨ü¡_x86_128
: {

110 
uöt64_t
 
out
[2];

111 
	`hash_x86_128
(
hashes
, 
hashes_size
, 0, 
out
);

112 
	`mem˝y
(
föÆ
, 
out
, (out));

114 } 
hash_v¨ü¡_x64_128
: {

115 
uöt64_t
 
out
[2];

116 
	`hash_x64_128
(
hashes
, 
hashes_size
, 0, 
out
);

117 
	`mem˝y
(
föÆ
, 
out
, (out));

119 } : 
	`nŸ_ªached
();

122 
compuãd
 = (
föÆ
[0] << 0) | (final[1] << 8) | (final[2] << 16) |

123 (
föÆ
[3] << 24);

125 
v¨ü¡
) {

126 #ifde‡
JEMALLOC_BIG_ENDIAN


127 
hash_v¨ü¡_x86_32
: 
ex≥˘ed
 = 0x6213303eU; ;

128 
hash_v¨ü¡_x86_128
: 
ex≥˘ed
 = 0x266820caU; ;

129 
hash_v¨ü¡_x64_128
: 
ex≥˘ed
 = 0xcc622b6fU; ;

131 
hash_v¨ü¡_x86_32
: 
ex≥˘ed
 = 0xb0f57ee3U; ;

132 
hash_v¨ü¡_x86_128
: 
ex≥˘ed
 = 0xb3ece62aU; ;

133 
hash_v¨ü¡_x64_128
: 
ex≥˘ed
 = 0x6384ba69U; ;

135 : 
	`nŸ_ªached
();

138 
	`as£π_u32_eq
(
compuãd
, 
ex≥˘ed
,

140 
	`hash_v¨ü¡_°rög
(
v¨ü¡
), 
ex≥˘ed
, 
compuãd
);

141 
	}
}

144 
	$hash_v¨ü¡_vîify
(
hash_v¨ü¡_t
 
v¨ü¡
)

146 
	#MAX_ALIGN
 16

	)

147 
uöt8_t
 
key
[
KEY_SIZE
 + (
MAX_ALIGN
 - 1)];

148 
i
;

150 
i
 = 0; i < 
MAX_ALIGN
; i++)

151 
	`hash_v¨ü¡_vîify_key
(
v¨ü¡
, &
key
[
i
]);

152 #unde‡
MAX_ALIGN


153 
	}
}

154 #unde‡
KEY_SIZE


156 
	$TEST_BEGIN
(
ã°_hash_x86_32
)

159 
	`hash_v¨ü¡_vîify
(
hash_v¨ü¡_x86_32
);

160 
	}
}

161 
TEST_END


163 
	$TEST_BEGIN
(
ã°_hash_x86_128
)

166 
	`hash_v¨ü¡_vîify
(
hash_v¨ü¡_x86_128
);

167 
	}
}

168 
TEST_END


170 
	$TEST_BEGIN
(
ã°_hash_x64_128
)

173 
	`hash_v¨ü¡_vîify
(
hash_v¨ü¡_x64_128
);

174 
	}
}

175 
TEST_END


178 
	$maö
()

181  (
	`ã°
(

182 
ã°_hash_x86_32
,

183 
ã°_hash_x86_128
,

184 
ã°_hash_x64_128
));

185 
	}
}

	@dep/jemalloc-4.2.0/test/unit/junk.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_FILL


4 #i‚de‡
JEMALLOC_TEST_JUNK_OPT


5 
	#JEMALLOC_TEST_JUNK_OPT
 "junk:åue"

	)

7 c⁄° *
	gmÆloc_c⁄f
 =

8 "ab‹t:Ál£,zîo:Ál£,ªdz⁄e:åue,qu¨™töe:0," 
JEMALLOC_TEST_JUNK_OPT
;

11 
¨ía_dÆloc_junk_smÆl_t
 *
	g¨ía_dÆloc_junk_smÆl_‹ig
;

12 
¨ía_dÆloc_junk_œrge_t
 *
	g¨ía_dÆloc_junk_œrge_‹ig
;

13 
huge_dÆloc_junk_t
 *
	ghuge_dÆloc_junk_‹ig
;

14 *
	gw©ch_f‹_junkög
;

15 
boﬁ
 
	gßw_junkög
;

18 
	$w©ch_junkög
(*
p
)

21 
w©ch_f‹_junkög
 = 
p
;

22 
ßw_junkög
 = 
Ál£
;

23 
	}
}

26 
	$¨ía_dÆloc_junk_smÆl_öãr˚±
(*
±r
, 
¨ía_bö_öfo_t
 *
bö_öfo
)

28 
size_t
 
i
;

30 
	`¨ía_dÆloc_junk_smÆl_‹ig
(
±r
, 
bö_öfo
);

31 
i
 = 0; i < 
bö_öfo
->
ªg_size
; i++) {

32 
	`as£π_u_eq
(((
uöt8_t
 *)
±r
)[
i
], 
JEMALLOC_FREE_JUNK
,

34 
i
, 
bö_öfo
->
ªg_size
);

36 i‡(
±r
 =
w©ch_f‹_junkög
)

37 
ßw_junkög
 = 
åue
;

38 
	}
}

41 
	$¨ía_dÆloc_junk_œrge_öãr˚±
(*
±r
, 
size_t
 
usize
)

43 
size_t
 
i
;

45 
	`¨ía_dÆloc_junk_œrge_‹ig
(
±r
, 
usize
);

46 
i
 = 0; i < 
usize
; i++) {

47 
	`as£π_u_eq
(((
uöt8_t
 *)
±r
)[
i
], 
JEMALLOC_FREE_JUNK
,

49 
i
, 
usize
);

51 i‡(
±r
 =
w©ch_f‹_junkög
)

52 
ßw_junkög
 = 
åue
;

53 
	}
}

56 
	$huge_dÆloc_junk_öãr˚±
(
tsdn_t
 *
tsdn
, *
±r
, 
size_t
 
usize
)

59 
	`huge_dÆloc_junk_‹ig
(
tsdn
, 
±r
, 
usize
);

65 i‡(
±r
 =
w©ch_f‹_junkög
)

66 
ßw_junkög
 = 
åue
;

67 
	}
}

70 
	$ã°_junk
(
size_t
 
sz_mö
, size_à
sz_max
)

72 
uöt8_t
 *
s
;

73 
size_t
 
sz_¥ev
, 
sz
, 
i
;

75 i‡(
›t_junk_‰ì
) {

76 
¨ía_dÆloc_junk_smÆl_‹ig
 = 
¨ía_dÆloc_junk_smÆl
;

77 
¨ía_dÆloc_junk_smÆl
 = 
¨ía_dÆloc_junk_smÆl_öãr˚±
;

78 
¨ía_dÆloc_junk_œrge_‹ig
 = 
¨ía_dÆloc_junk_œrge
;

79 
¨ía_dÆloc_junk_œrge
 = 
¨ía_dÆloc_junk_œrge_öãr˚±
;

80 
huge_dÆloc_junk_‹ig
 = 
huge_dÆloc_junk
;

81 
huge_dÆloc_junk
 = 
huge_dÆloc_junk_öãr˚±
;

84 
sz_¥ev
 = 0;

85 
s
 = (
uöt8_t
 *)
	`mÆlocx
(
sz_mö
, 0);

86 
	`as£π_±r_nŸ_nuŒ
((*)
s
, "Unexpected mallocx() failure");

88 
sz
 = 
	`ßŒocx
(
s
, 0); sz <
sz_max
;

89 
sz_¥ev
 = 
sz
, sz = 
	`ßŒocx
(
s
, 0)) {

90 i‡(
sz_¥ev
 > 0) {

91 
	`as£π_u_eq
(
s
[0], 'a',

93 
	`ZU
(0), 
sz_¥ev
);

94 
	`as£π_u_eq
(
s
[
sz_¥ev
-1], 'a',

96 
sz_¥ev
-1, sz_prev);

99 
i
 = 
sz_¥ev
; i < 
sz
; i++) {

100 i‡(
›t_junk_Æloc
) {

101 
	`as£π_u_eq
(
s
[
i
], 
JEMALLOC_ALLOC_JUNK
,

103 "junk-fûÀd", 
i
, 
sz
);

105 
s
[
i
] = 'a';

108 i‡(
	`xÆlocx
(
s
, 
sz
+1, 0, 0) == sz) {

109 
	`w©ch_junkög
(
s
);

110 
s
 = (
uöt8_t
 *)
	`øŒocx
(s, 
sz
+1, 0);

111 
	`as£π_±r_nŸ_nuŒ
((*)
s
,

113 
	`as£π_åue
(!
›t_junk_‰ì
 || 
ßw_junkög
,

115 
sz
);

119 
	`w©ch_junkög
(
s
);

120 
	`dÆlocx
(
s
, 0);

121 
	`as£π_åue
(!
›t_junk_‰ì
 || 
ßw_junkög
,

122 "Ex≥˘edÑegi⁄ o‡sizê%zuÅÿbêjunk-fûÀd", 
sz
);

124 i‡(
›t_junk_‰ì
) {

125 
¨ía_dÆloc_junk_smÆl
 = 
¨ía_dÆloc_junk_smÆl_‹ig
;

126 
¨ía_dÆloc_junk_œrge
 = 
¨ía_dÆloc_junk_œrge_‹ig
;

127 
huge_dÆloc_junk
 = 
huge_dÆloc_junk_‹ig
;

129 
	}
}

131 
	$TEST_BEGIN
(
ã°_junk_smÆl
)

134 
	`ã°_skù_if
(!
c⁄fig_fûl
);

135 
	`ã°_junk
(1, 
SMALL_MAXCLASS
-1);

136 
	}
}

137 
TEST_END


139 
	$TEST_BEGIN
(
ã°_junk_œrge
)

142 
	`ã°_skù_if
(!
c⁄fig_fûl
);

143 
	`ã°_junk
(
SMALL_MAXCLASS
+1, 
œrge_max˛ass
);

144 
	}
}

145 
TEST_END


147 
	$TEST_BEGIN
(
ã°_junk_huge
)

150 
	`ã°_skù_if
(!
c⁄fig_fûl
);

151 
	`ã°_junk
(
œrge_max˛ass
+1, 
chunksize
*2);

152 
	}
}

153 
TEST_END


155 
¨ía_øŒoc_junk_œrge_t
 *
	g¨ía_øŒoc_junk_œrge_‹ig
;

156 *
	gmo°_ª˚¡ly_åimmed
;

158 
size_t


159 
	$shrök_size
(
size_t
 
size
)

161 
size_t
 
shrök_size
;

163 
shrök_size
 = 
size
 - 1; 
	`«Œocx
(shrink_size, 0) == size;

164 
shrök_size
--)

167  (
shrök_size
);

168 
	}
}

171 
	$¨ía_øŒoc_junk_œrge_öãr˚±
(*
±r
, 
size_t
 
ﬁd_usize
, size_à
usize
)

174 
	`¨ía_øŒoc_junk_œrge_‹ig
(
±r
, 
ﬁd_usize
, 
usize
);

175 
	`as£π_zu_eq
(
ﬁd_usize
, 
œrge_max˛ass
, "Unexpected old_usize");

176 
	`as£π_zu_eq
(
usize
, 
	`shrök_size
(
œrge_max˛ass
), "Unexpected usize");

177 
mo°_ª˚¡ly_åimmed
 = 
±r
;

178 
	}
}

180 
	$TEST_BEGIN
(
ã°_junk_œrge_øŒoc_shrök
)

182 *
p1
, *
p2
;

184 
p1
 = 
	`mÆlocx
(
œrge_max˛ass
, 0);

185 
	`as£π_±r_nŸ_nuŒ
(
p1
, "Unexpected mallocx() failure");

187 
¨ía_øŒoc_junk_œrge_‹ig
 = 
¨ía_øŒoc_junk_œrge
;

188 
¨ía_øŒoc_junk_œrge
 = 
¨ía_øŒoc_junk_œrge_öãr˚±
;

190 
p2
 = 
	`øŒocx
(
p1
, 
	`shrök_size
(
œrge_max˛ass
), 0);

191 
	`as£π_±r_eq
(
p1
, 
p2
, "Unexpected move during shrink");

193 
¨ía_øŒoc_junk_œrge
 = 
¨ía_øŒoc_junk_œrge_‹ig
;

195 
	`as£π_±r_eq
(
mo°_ª˚¡ly_åimmed
, 
p1
,

197 
	}
}

198 
TEST_END


200 
boﬁ
 
	gdëe˘ed_ªdz⁄e_c‹ru±i⁄
;

203 
	$¨ía_ªdz⁄e_c‹ru±i⁄_ª∂a˚mít
(*
±r
, 
size_t
 
usize
, 
boﬁ
 
a·î
,

204 
size_t
 
off£t
, 
uöt8_t
 
byã
)

207 
dëe˘ed_ªdz⁄e_c‹ru±i⁄
 = 
åue
;

208 
	}
}

210 
	$TEST_BEGIN
(
ã°_junk_ªdz⁄e
)

212 *
s
;

213 
¨ía_ªdz⁄e_c‹ru±i⁄_t
 *
¨ía_ªdz⁄e_c‹ru±i⁄_‹ig
;

215 
	`ã°_skù_if
(!
c⁄fig_fûl
);

216 
	`ã°_skù_if
(!
›t_junk_Æloc
 || !
›t_junk_‰ì
);

218 
¨ía_ªdz⁄e_c‹ru±i⁄_‹ig
 = 
¨ía_ªdz⁄e_c‹ru±i⁄
;

219 
¨ía_ªdz⁄e_c‹ru±i⁄
 = 
¨ía_ªdz⁄e_c‹ru±i⁄_ª∂a˚mít
;

222 
dëe˘ed_ªdz⁄e_c‹ru±i⁄
 = 
Ál£
;

223 
s
 = (*)
	`mÆlocx
(1, 0);

224 
	`as£π_±r_nŸ_nuŒ
((*)
s
, "Unexpected mallocx() failure");

225 
s
[-1] = 0xbb;

226 
	`dÆlocx
(
s
, 0);

227 
	`as£π_åue
(
dëe˘ed_ªdz⁄e_c‹ru±i⁄
,

231 
dëe˘ed_ªdz⁄e_c‹ru±i⁄
 = 
Ál£
;

232 
s
 = (*)
	`mÆlocx
(1, 0);

233 
	`as£π_±r_nŸ_nuŒ
((*)
s
, "Unexpected mallocx() failure");

234 
s
[
	`ßŒocx
(s, 0)] = 0xbb;

235 
	`dÆlocx
(
s
, 0);

236 
	`as£π_åue
(
dëe˘ed_ªdz⁄e_c‹ru±i⁄
,

239 
¨ía_ªdz⁄e_c‹ru±i⁄
 = 
¨ía_ªdz⁄e_c‹ru±i⁄_‹ig
;

240 
	}
}

241 
TEST_END


244 
	$maö
()

247  (
	`ã°
(

248 
ã°_junk_smÆl
,

249 
ã°_junk_œrge
,

250 
ã°_junk_huge
,

251 
ã°_junk_œrge_øŒoc_shrök
,

252 
ã°_junk_ªdz⁄e
));

253 
	}
}

	@dep/jemalloc-4.2.0/test/unit/junk_alloc.c

1 
	#JEMALLOC_TEST_JUNK_OPT
 "junk:Æloc"

	)

2 
	~"junk.c
"

3 #unde‡
JEMALLOC_TEST_JUNK_OPT


	@dep/jemalloc-4.2.0/test/unit/junk_free.c

1 
	#JEMALLOC_TEST_JUNK_OPT
 "junk:‰ì"

	)

2 
	~"junk.c
"

3 #unde‡
JEMALLOC_TEST_JUNK_OPT


	@dep/jemalloc-4.2.0/test/unit/lg_chunk.c

1 
	~"ã°/jemÆloc_ã°.h
"

8 c⁄° *
	gmÆloc_c⁄f
 = "lg_chunk:0";

10 
	$TEST_BEGIN
(
ã°_lg_chunk_˛amp
)

12 *
p
;

14 
p
 = 
	`mÆlocx
(1, 0);

15 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

16 
	`dÆlocx
(
p
, 0);

17 
	}
}

18 
TEST_END


21 
	$maö
()

24  (
	`ã°
(

25 
ã°_lg_chunk_˛amp
));

26 
	}
}

	@dep/jemalloc-4.2.0/test/unit/mallctl.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_mÆl˘l_îr‹s
)

5 
uöt64_t
 
ïoch
;

6 
size_t
 
sz
;

8 
	`as£π_d_eq
(
	`mÆl˘l
("no_such_«me", 
NULL
, NULL, NULL, 0), 
ENOENT
,

11 
	`as£π_d_eq
(
	`mÆl˘l
("vîsi⁄", 
NULL
, NULL, "0.0.0", 
	`°æí
("0.0.0")),

12 
EPERM
, "mallctl() shouldÑeturn EPERM onáttemptÅo write "

15 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)-1),

16 
EINVAL
, "mallctl() shouldÑeturn EINVAL for input size mismatch");

17 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)+1),

18 
EINVAL
, "mallctl() shouldÑeturn EINVAL for input size mismatch");

20 
sz
 = (
ïoch
)-1;

21 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", &
ïoch
, &
sz
, 
NULL
, 0), 
EINVAL
,

23 
sz
 = (
ïoch
)+1;

24 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", &
ïoch
, &
sz
, 
NULL
, 0), 
EINVAL
,

26 
	}
}

27 
TEST_END


29 
	$TEST_BEGIN
(
ã°_mÆl˘ amëomib_îr‹s
)

31 
size_t
 
mib
[1];

32 
size_t
 
mibÀn
;

34 
mibÀn
 = (
mib
)/(
size_t
);

35 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("no_such_«me", 
mib
, &
mibÀn
), 
ENOENT
,

37 
	}
}

38 
TEST_END


40 
	$TEST_BEGIN
(
ã°_mÆl˘lbymib_îr‹s
)

42 
uöt64_t
 
ïoch
;

43 
size_t
 
sz
;

44 
size_t
 
mib
[1];

45 
size_t
 
mibÀn
;

47 
mibÀn
 = (
mib
)/(
size_t
);

48 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("vîsi⁄", 
mib
, &
mibÀn
), 0,

51 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, "0.0.0",

52 
	`°æí
("0.0.0")), 
EPERM
, "mallctl() shouldÑeturn EPERM on "

55 
mibÀn
 = (
mib
)/(
size_t
);

56 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("ïoch", 
mib
, &
mibÀn
), 0,

59 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, &
ïoch
,

60 (
ïoch
)-1), 
EINVAL
,

62 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, &
ïoch
,

63 (
ïoch
)+1), 
EINVAL
,

66 
sz
 = (
ïoch
)-1;

67 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
ïoch
, &
sz
, 
NULL
, 0), 
EINVAL
,

69 
sz
 = (
ïoch
)+1;

70 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
ïoch
, &
sz
, 
NULL
, 0), 
EINVAL
,

72 
	}
}

73 
TEST_END


75 
	$TEST_BEGIN
(
ã°_mÆl˘l_ªad_wrôe
)

77 
uöt64_t
 
ﬁd_ïoch
, 
√w_ïoch
;

78 
size_t
 
sz
 = (
ﬁd_ïoch
);

81 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, NULL, 0), 0,

83 
	`as£π_zu_eq
(
sz
, (
ﬁd_ïoch
), "Unexpected output size");

86 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", &
ﬁd_ïoch
, &
sz
, 
NULL
, 0), 0,

88 
	`as£π_zu_eq
(
sz
, (
ﬁd_ïoch
), "Unexpected output size");

91 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
√w_ïoch
, (new_epoch)),

93 
	`as£π_zu_eq
(
sz
, (
ﬁd_ïoch
), "Unexpected output size");

96 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", &
ﬁd_ïoch
, &
sz
, &
√w_ïoch
,

97 (
√w_ïoch
)), 0, "Unexpected mallctl() failure");

98 
	`as£π_zu_eq
(
sz
, (
ﬁd_ïoch
), "Unexpected output size");

99 
	}
}

100 
TEST_END


102 
	$TEST_BEGIN
(
ã°_mÆl˘ amëomib_sh‹t_mib
)

104 
size_t
 
mib
[4];

105 
size_t
 
mibÀn
;

107 
mibÀn
 = 3;

108 
mib
[3] = 42;

109 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ías.bö.0.ƒegs", 
mib
, &
mibÀn
), 0,

111 
	`as£π_zu_eq
(
mibÀn
, 3, "Unexpected mib outputÜength");

112 
	`as£π_zu_eq
(
mib
[3], 42,

114 
	}
}

115 
TEST_END


117 
	$TEST_BEGIN
(
ã°_mÆl˘l_c⁄fig
)

120 
	#TEST_MALLCTL_CONFIG
(
c⁄fig
, 
t
) do { \

121 
t
 
ﬁdvÆ
; \

122 
size_t
 
sz
 = (
ﬁdvÆ
); \

123 
	`as£π_d_eq
(
	`mÆl˘l
("c⁄fig."#c⁄fig, &
ﬁdvÆ
, &
sz
, 
NULL
, 0), \

125 
	`as£π_b_eq
(
ﬁdvÆ
, 
c⁄fig_
##
c⁄fig
, "Incorrect config value"); \

126 
	`as£π_zu_eq
(
sz
, (
ﬁdvÆ
), "Unexpected output size"); \

127 } 0)

	)

129 
	`TEST_MALLCTL_CONFIG
(
ˇche_oblivious
, 
boﬁ
);

130 
	`TEST_MALLCTL_CONFIG
(
debug
, 
boﬁ
);

131 
	`TEST_MALLCTL_CONFIG
(
fûl
, 
boﬁ
);

132 
	`TEST_MALLCTL_CONFIG
(
œzy_lock
, 
boﬁ
);

133 
	`TEST_MALLCTL_CONFIG
(
mÆloc_c⁄f
, const *);

134 
	`TEST_MALLCTL_CONFIG
(
munm≠
, 
boﬁ
);

135 
	`TEST_MALLCTL_CONFIG
(
¥of
, 
boﬁ
);

136 
	`TEST_MALLCTL_CONFIG
(
¥of_libgcc
, 
boﬁ
);

137 
	`TEST_MALLCTL_CONFIG
(
¥of_libunwöd
, 
boﬁ
);

138 
	`TEST_MALLCTL_CONFIG
(
°©s
, 
boﬁ
);

139 
	`TEST_MALLCTL_CONFIG
(
tˇche
, 
boﬁ
);

140 
	`TEST_MALLCTL_CONFIG
(
és
, 
boﬁ
);

141 
	`TEST_MALLCTL_CONFIG
(
uåa˚
, 
boﬁ
);

142 
	`TEST_MALLCTL_CONFIG
(
vÆgröd
, 
boﬁ
);

143 
	`TEST_MALLCTL_CONFIG
(
xmÆloc
, 
boﬁ
);

145 #unde‡
TEST_MALLCTL_CONFIG


146 
	}
}

147 
TEST_END


149 
	$TEST_BEGIN
(
ã°_mÆl˘l_›t
)

151 
boﬁ
 
c⁄fig_Æways
 = 
åue
;

153 
	#TEST_MALLCTL_OPT
(
t
, 
›t
, 
c⁄fig
) do { \

154 
t
 
ﬁdvÆ
; \

155 
size_t
 
sz
 = (
ﬁdvÆ
); \

156 
ex≥˘ed
 = 
c⁄fig_
##
c⁄fig
 ? 0 : 
ENOENT
; \

157 
ªsu…
 = 
	`mÆl˘l
("›t."#›t, &
ﬁdvÆ
, &
sz
, 
NULL
, 0); \

158 
	`as£π_d_eq
(
ªsu…
, 
ex≥˘ed
, \

160 
	`as£π_zu_eq
(
sz
, (
ﬁdvÆ
), "Unexpected output size"); \

161 } 0)

	)

163 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
ab‹t
, 
Æways
);

164 
	`TEST_MALLCTL_OPT
(
size_t
, 
lg_chunk
, 
Æways
);

165 
	`TEST_MALLCTL_OPT
(c⁄° *, 
dss
, 
Æways
);

166 
	`TEST_MALLCTL_OPT
(, 
«ª«s
, 
Æways
);

167 
	`TEST_MALLCTL_OPT
(c⁄° *, 
purge
, 
Æways
);

168 
	`TEST_MALLCTL_OPT
(
ssize_t
, 
lg_dúty_mu…
, 
Æways
);

169 
	`TEST_MALLCTL_OPT
(
ssize_t
, 
deˇy_time
, 
Æways
);

170 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
°©s_¥öt
, 
Æways
);

171 
	`TEST_MALLCTL_OPT
(c⁄° *, 
junk
, 
fûl
);

172 
	`TEST_MALLCTL_OPT
(
size_t
, 
qu¨™töe
, 
fûl
);

173 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
ªdz⁄e
, 
fûl
);

174 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
zîo
, 
fûl
);

175 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
uåa˚
, utrace);

176 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
xmÆloc
, xmalloc);

177 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
tˇche
,Åcache);

178 
	`TEST_MALLCTL_OPT
(
size_t
, 
lg_tˇche_max
, 
tˇche
);

179 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
¥of
,Örof);

180 
	`TEST_MALLCTL_OPT
(c⁄° *, 
¥of_¥efix
, 
¥of
);

181 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
¥of_a˘ive
, 
¥of
);

182 
	`TEST_MALLCTL_OPT
(
ssize_t
, 
lg_¥of_ßm∂e
, 
¥of
);

183 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
¥of_accum
, 
¥of
);

184 
	`TEST_MALLCTL_OPT
(
ssize_t
, 
lg_¥of_öãrvÆ
, 
¥of
);

185 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
¥of_gdump
, 
¥of
);

186 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
¥of_föÆ
, 
¥of
);

187 
	`TEST_MALLCTL_OPT
(
boﬁ
, 
¥of_Àak
, 
¥of
);

189 #unde‡
TEST_MALLCTL_OPT


190 
	}
}

191 
TEST_END


193 
	$TEST_BEGIN
(
ã°_m™∑ge_exam∂e
)

195 
nbös
, 
i
;

196 
size_t
 
mib
[4];

197 
size_t
 
Àn
, 
mibÀn
;

199 
Àn
 = (
nbös
);

200 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.nbös", &
nbös
, &
Àn
, 
NULL
, 0), 0,

203 
mibÀn
 = 4;

204 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ías.bö.0.size", 
mib
, &
mibÀn
), 0,

206 
i
 = 0; i < 
nbös
; i++) {

207 
size_t
 
bö_size
;

209 
mib
[2] = 
i
;

210 
Àn
 = (
bö_size
);

211 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
bö_size
, &
Àn
, 
NULL
, 0),

215 
	}
}

216 
TEST_END


218 
	$TEST_BEGIN
(
ã°_tˇche_n⁄e
)

220 *
p0
, *
q
, *
p1
;

222 
	`ã°_skù_if
(!
c⁄fig_tˇche
);

225 
p0
 = 
	`mÆlocx
(42, 0);

226 
	`as£π_±r_nŸ_nuŒ
(
p0
, "Unexpected mallocx() failure");

227 
q
 = 
	`mÆlocx
(42, 0);

228 
	`as£π_±r_nŸ_nuŒ
(
q
, "Unexpected mallocx() failure");

231 
	`dÆlocx
(
p0
, 0);

232 
	`dÆlocx
(
q
, 
MALLOCX_TCACHE_NONE
);

235 
p1
 = 
	`mÆlocx
(42, 0);

236 
	`as£π_±r_nŸ_nuŒ
(
p1
, "Unexpected mallocx() failure");

237 
	`as£π_±r_eq
(
p0
, 
p1
, "ExpectedÅcacheÅoállocate cachedÑegion");

240 
	`dÆlocx
(
p1
, 
MALLOCX_TCACHE_NONE
);

241 
	}
}

242 
TEST_END


244 
	$TEST_BEGIN
(
ã°_tˇche
)

246 
	#NTCACHES
 10

	)

247 
tis
[
NTCACHES
];

248 *
ps
[
NTCACHES
];

249 *
qs
[
NTCACHES
];

250 
i
;

251 
size_t
 
sz
, 
psz
, 
qsz
;

253 
	`ã°_skù_if
(!
c⁄fig_tˇche
);

255 
psz
 = 42;

256 
qsz
 = 
	`«Œocx
(
psz
, 0) + 1;

259 
i
 = 0; i < 
NTCACHES
; i++) {

260 
sz
 = ();

261 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.¸óã", &
tis
[
i
], &
sz
, 
NULL
, 0), 0,

262 "U√x≥˘ed mÆl˘l(ËÁûuª, i=%u", 
i
);

266 
i
 = 0; i < 
NTCACHES
; i++) {

267 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.de°roy", 
NULL
, NULL, &
tis
[
i
],

269 
i
);

271 
i
 = 0; i < 
NTCACHES
; i++) {

272 
sz
 = ();

273 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.¸óã", &
tis
[
i
], &
sz
, 
NULL
, 0), 0,

274 "U√x≥˘ed mÆl˘l(ËÁûuª, i=%u", 
i
);

278 
i
 = 0; i < 
NTCACHES
; i++) {

279 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.Êush", 
NULL
, NULL, &
tis
[
i
],

281 
i
);

285 
i
 = 0; i < 
NTCACHES
; i++) {

286 
ps
[
i
] = 
	`mÆlocx
(
psz
, 
	`MALLOCX_TCACHE
(
tis
[i]));

287 
	`as£π_±r_nŸ_nuŒ
(
ps
[
i
], "Unexpected mallocx() failure, i=%u",

288 
i
);

289 
	`dÆlocx
(
ps
[
i
], 
	`MALLOCX_TCACHE
(
tis
[i]));

291 
qs
[
i
] = 
	`mÆlocx
(
qsz
, 
	`MALLOCX_TCACHE
(
tis
[i]));

292 
	`as£π_±r_nŸ_nuŒ
(
qs
[
i
], "Unexpected mallocx() failure, i=%u",

293 
i
);

294 
	`dÆlocx
(
qs
[
i
], 
	`MALLOCX_TCACHE
(
tis
[i]));

298 
i
 = 0; i < 
NTCACHES
; i++) {

299 *
p0
 = 
ps
[
i
];

300 
ps
[
i
] = 
	`mÆlocx
(
psz
, 
	`MALLOCX_TCACHE
(
tis
[i]));

301 
	`as£π_±r_nŸ_nuŒ
(
ps
[
i
], "Unexpected mallocx() failure, i=%u",

302 
i
);

303 
	`as£π_±r_eq
(
ps
[
i
], 
p0
,

304 "Ex≥˘ed mÆlocx(ËtÿÆloˇã cachedÑegi⁄, i=%u", 
i
);

308 
i
 = 0; i < 
NTCACHES
; i++) {

309 *
q0
 = 
qs
[
i
];

310 
qs
[
i
] = 
	`øŒocx
(
ps
[i], 
qsz
, 
	`MALLOCX_TCACHE
(
tis
[i]));

311 
	`as£π_±r_nŸ_nuŒ
(
qs
[
i
], "UnexpectedÑallocx() failure, i=%u",

312 
i
);

313 
	`as£π_±r_eq
(
qs
[
i
], 
q0
,

314 "Ex≥˘edÑÆlocx(ËtÿÆloˇã cachedÑegi⁄, i=%u", 
i
);

316 i‡(
qs
[
i
] =
NULL
)

317 
qs
[
i
] = 
ps
[i];

319 
i
 = 0; i < 
NTCACHES
; i++)

320 
	`dÆlocx
(
qs
[
i
], 
	`MALLOCX_TCACHE
(
tis
[i]));

323 
i
 = 0; i < 
NTCACHES
/2; i++) {

324 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.Êush", 
NULL
, NULL, &
tis
[
i
],

326 
i
);

330 
i
 = 0; i < 
NTCACHES
; i++) {

331 
	`as£π_d_eq
(
	`mÆl˘l
("tˇche.de°roy", 
NULL
, NULL, &
tis
[
i
],

333 
i
);

335 
	}
}

336 
TEST_END


338 
	$TEST_BEGIN
(
ã°_thªad_¨ía
)

340 
¨ía_ﬁd
, 
¨ía_√w
, 
«ª«s
;

341 
size_t
 
sz
 = ();

343 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.«ª«s", &
«ª«s
, &
sz
, 
NULL
, 0), 0,

345 
	`as£π_u_eq
(
«ª«s
, 
›t_«ª«s
, "Number ofárenas incorrect");

346 
¨ía_√w
 = 
«ª«s
 - 1;

347 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", &
¨ía_ﬁd
, &
sz
, &
¨ía_√w
,

349 
¨ía_√w
 = 0;

350 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", &
¨ía_ﬁd
, &
sz
, &
¨ía_√w
,

352 
	}
}

353 
TEST_END


355 
	$TEST_BEGIN
(
ã°_¨ía_i_lg_dúty_mu…
)

357 
ssize_t
 
lg_dúty_mu…
, 
‹ig_lg_dúty_mu…
, 
¥ev_lg_dúty_mu…
;

358 
size_t
 
sz
 = (
ssize_t
);

360 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_øtio
);

362 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.lg_dúty_mu…", &
‹ig_lg_dúty_mu…
, &
sz
,

363 
NULL
, 0), 0, "Unexpected mallctl() failure");

365 
lg_dúty_mu…
 = -2;

366 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.lg_dúty_mu…", 
NULL
, NULL,

367 &
lg_dúty_mu…
, (
ssize_t
)), 
EFAULT
,

370 
lg_dúty_mu…
 = ((
size_t
) << 3);

371 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.lg_dúty_mu…", 
NULL
, NULL,

372 &
lg_dúty_mu…
, (
ssize_t
)), 
EFAULT
,

375 
¥ev_lg_dúty_mu…
 = 
‹ig_lg_dúty_mu…
, 
lg_dúty_mu…
 = -1;

376 
lg_dúty_mu…
 < (
ssize_t
)((
size_t
Ë<< 3); 
¥ev_lg_dúty_mu…


377 
lg_dúty_mu…
,Üg_dirty_mult++) {

378 
ssize_t
 
ﬁd_lg_dúty_mu…
;

380 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.lg_dúty_mu…", &
ﬁd_lg_dúty_mu…
,

381 &
sz
, &
lg_dúty_mu…
, (
ssize_t
)), 0,

383 
	`as£π_zd_eq
(
ﬁd_lg_dúty_mu…
, 
¥ev_lg_dúty_mu…
,

386 
	}
}

387 
TEST_END


389 
	$TEST_BEGIN
(
ã°_¨ía_i_deˇy_time
)

391 
ssize_t
 
deˇy_time
, 
‹ig_deˇy_time
, 
¥ev_deˇy_time
;

392 
size_t
 
sz
 = (
ssize_t
);

394 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_deˇy
);

396 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy_time", &
‹ig_deˇy_time
, &
sz
,

397 
NULL
, 0), 0, "Unexpected mallctl() failure");

399 
deˇy_time
 = -2;

400 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy_time", 
NULL
, NULL,

401 &
deˇy_time
, (
ssize_t
)), 
EFAULT
,

404 
deˇy_time
 = 0x7fffffff;

405 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy_time", 
NULL
, NULL,

406 &
deˇy_time
, (
ssize_t
)), 0,

409 
¥ev_deˇy_time
 = 
deˇy_time
, decay_time = -1;

410 
deˇy_time
 < 20; 
¥ev_deˇy_time
 = decay_time, decay_time++) {

411 
ssize_t
 
ﬁd_deˇy_time
;

413 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy_time", &
ﬁd_deˇy_time
,

414 &
sz
, &
deˇy_time
, (
ssize_t
)), 0,

416 
	`as£π_zd_eq
(
ﬁd_deˇy_time
, 
¥ev_deˇy_time
,

419 
	}
}

420 
TEST_END


422 
	$TEST_BEGIN
(
ã°_¨ía_i_purge
)

424 
«ª«s
;

425 
size_t
 
sz
 = ();

426 
size_t
 
mib
[3];

427 
size_t
 
mibÀn
 = 3;

429 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.purge", 
NULL
, NULL, NULL, 0), 0,

432 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.«ª«s", &
«ª«s
, &
sz
, 
NULL
, 0), 0,

434 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.purge", 
mib
, &
mibÀn
), 0,

436 
mib
[1] = 
«ª«s
;

437 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, NULL, 0), 0,

439 
	}
}

440 
TEST_END


442 
	$TEST_BEGIN
(
ã°_¨ía_i_deˇy
)

444 
«ª«s
;

445 
size_t
 
sz
 = ();

446 
size_t
 
mib
[3];

447 
size_t
 
mibÀn
 = 3;

449 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.deˇy", 
NULL
, NULL, NULL, 0), 0,

452 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.«ª«s", &
«ª«s
, &
sz
, 
NULL
, 0), 0,

454 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.deˇy", 
mib
, &
mibÀn
), 0,

456 
mib
[1] = 
«ª«s
;

457 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, 
NULL
, NULL, NULL, 0), 0,

459 
	}
}

460 
TEST_END


462 
	$TEST_BEGIN
(
ã°_¨ía_i_dss
)

464 c⁄° *
dss_¥ec_ﬁd
, *
dss_¥ec_√w
;

465 
size_t
 
sz
 = (
dss_¥ec_ﬁd
);

466 
size_t
 
mib
[3];

467 
size_t
 
mibÀn
;

469 
mibÀn
 = (
mib
)/(
size_t
);

470 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ía.0.dss", 
mib
, &
mibÀn
), 0,

473 
dss_¥ec_√w
 = "disabled";

474 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
dss_¥ec_ﬁd
, &
sz
, &
dss_¥ec_√w
,

475 (
dss_¥ec_√w
)), 0, "Unexpected mallctl() failure");

476 
	`as£π_°r_√
(
dss_¥ec_ﬁd
, "primary",

479 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
dss_¥ec_√w
, &
sz
, &
dss_¥ec_ﬁd
,

480 (
dss_¥ec_ﬁd
)), 0, "Unexpected mallctl() failure");

482 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
dss_¥ec_ﬁd
, &
sz
, 
NULL
, 0), 0,

484 
	`as£π_°r_√
(
dss_¥ec_ﬁd
, "primary",

487 
mib
[1] = 
	`«ª«s_tŸÆ_gë
();

488 
dss_¥ec_√w
 = "disabled";

489 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
dss_¥ec_ﬁd
, &
sz
, &
dss_¥ec_√w
,

490 (
dss_¥ec_√w
)), 0, "Unexpected mallctl() failure");

491 
	`as£π_°r_√
(
dss_¥ec_ﬁd
, "primary",

494 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
dss_¥ec_√w
, &
sz
, &
dss_¥ec_ﬁd
,

495 (
dss_¥ec_√w
)), 0, "Unexpected mallctl() failure");

497 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
dss_¥ec_ﬁd
, &
sz
, 
NULL
, 0), 0,

499 
	`as£π_°r_√
(
dss_¥ec_ﬁd
, "primary",

501 
	}
}

502 
TEST_END


504 
	$TEST_BEGIN
(
ã°_¨ías_öôülized
)

506 
«ª«s
;

507 
size_t
 
sz
 = (
«ª«s
);

509 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.«ª«s", &
«ª«s
, &
sz
, 
NULL
, 0), 0,

512 
	`VARIABLE_ARRAY
(
boﬁ
, 
öôülized
, 
«ª«s
);

514 
sz
 = 
«ª«s
 * (
boﬁ
);

515 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.öôülized", 
öôülized
, &
sz
,

516 
NULL
, 0), 0, "Unexpected mallctl() failure");

518 
	}
}

519 
TEST_END


521 
	$TEST_BEGIN
(
ã°_¨ías_lg_dúty_mu…
)

523 
ssize_t
 
lg_dúty_mu…
, 
‹ig_lg_dúty_mu…
, 
¥ev_lg_dúty_mu…
;

524 
size_t
 
sz
 = (
ssize_t
);

526 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_øtio
);

528 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.lg_dúty_mu…", &
‹ig_lg_dúty_mu…
, &
sz
,

529 
NULL
, 0), 0, "Unexpected mallctl() failure");

531 
lg_dúty_mu…
 = -2;

532 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.lg_dúty_mu…", 
NULL
, NULL,

533 &
lg_dúty_mu…
, (
ssize_t
)), 
EFAULT
,

536 
lg_dúty_mu…
 = ((
size_t
) << 3);

537 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.lg_dúty_mu…", 
NULL
, NULL,

538 &
lg_dúty_mu…
, (
ssize_t
)), 
EFAULT
,

541 
¥ev_lg_dúty_mu…
 = 
‹ig_lg_dúty_mu…
, 
lg_dúty_mu…
 = -1;

542 
lg_dúty_mu…
 < (
ssize_t
)((
size_t
Ë<< 3); 
¥ev_lg_dúty_mu…
 =

543 
lg_dúty_mu…
,Üg_dirty_mult++) {

544 
ssize_t
 
ﬁd_lg_dúty_mu…
;

546 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.lg_dúty_mu…", &
ﬁd_lg_dúty_mu…
,

547 &
sz
, &
lg_dúty_mu…
, (
ssize_t
)), 0,

549 
	`as£π_zd_eq
(
ﬁd_lg_dúty_mu…
, 
¥ev_lg_dúty_mu…
,

552 
	}
}

553 
TEST_END


555 
	$TEST_BEGIN
(
ã°_¨ías_deˇy_time
)

557 
ssize_t
 
deˇy_time
, 
‹ig_deˇy_time
, 
¥ev_deˇy_time
;

558 
size_t
 
sz
 = (
ssize_t
);

560 
	`ã°_skù_if
(
›t_purge
 !
purge_mode_deˇy
);

562 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.deˇy_time", &
‹ig_deˇy_time
, &
sz
,

563 
NULL
, 0), 0, "Unexpected mallctl() failure");

565 
deˇy_time
 = -2;

566 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.deˇy_time", 
NULL
, NULL,

567 &
deˇy_time
, (
ssize_t
)), 
EFAULT
,

570 
deˇy_time
 = 0x7fffffff;

571 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.deˇy_time", 
NULL
, NULL,

572 &
deˇy_time
, (
ssize_t
)), 0,

575 
¥ev_deˇy_time
 = 
deˇy_time
, decay_time = -1;

576 
deˇy_time
 < 20; 
¥ev_deˇy_time
 = decay_time, decay_time++) {

577 
ssize_t
 
ﬁd_deˇy_time
;

579 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.deˇy_time", &
ﬁd_deˇy_time
,

580 &
sz
, &
deˇy_time
, (
ssize_t
)), 0,

582 
	`as£π_zd_eq
(
ﬁd_deˇy_time
, 
¥ev_deˇy_time
,

585 
	}
}

586 
TEST_END


588 
	$TEST_BEGIN
(
ã°_¨ías_c⁄°™ts
)

591 
	#TEST_ARENAS_CONSTANT
(
t
, 
«me
, 
ex≥˘ed
) do { \

592 
t
 
«me
; \

593 
size_t
 
sz
 = (
t
); \

594 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías."#«me, &
«me
, &
sz
, 
NULL
, 0), 0, \

596 
	`as£π_zu_eq
(
«me
, 
ex≥˘ed
, "Incorrect "#name" size"); \

597 } 0)

	)

599 
	`TEST_ARENAS_CONSTANT
(
size_t
, 
qu™tum
, 
QUANTUM
);

600 
	`TEST_ARENAS_CONSTANT
(
size_t
, 
∑ge
, 
PAGE
);

601 
	`TEST_ARENAS_CONSTANT
(, 
nbös
, 
NBINS
);

602 
	`TEST_ARENAS_CONSTANT
(, 
∆runs
, 
∆˛as£s
);

603 
	`TEST_ARENAS_CONSTANT
(, 
nhchunks
, 
nh˛as£s
);

605 #unde‡
TEST_ARENAS_CONSTANT


606 
	}
}

607 
TEST_END


609 
	$TEST_BEGIN
(
ã°_¨ías_bö_c⁄°™ts
)

612 
	#TEST_ARENAS_BIN_CONSTANT
(
t
, 
«me
, 
ex≥˘ed
) do { \

613 
t
 
«me
; \

614 
size_t
 
sz
 = (
t
); \

615 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.bö.0."#«me, &
«me
, &
sz
, 
NULL
, 0), \

617 
	`as£π_zu_eq
(
«me
, 
ex≥˘ed
, "Incorrect "#name" size"); \

618 } 0)

	)

620 
	`TEST_ARENAS_BIN_CONSTANT
(
size_t
, 
size
, 
¨ía_bö_öfo
[0].
ªg_size
);

621 
	`TEST_ARENAS_BIN_CONSTANT
(
uöt32_t
, 
ƒegs
, 
¨ía_bö_öfo
[0].nregs);

622 
	`TEST_ARENAS_BIN_CONSTANT
(
size_t
, 
run_size
, 
¨ía_bö_öfo
[0].run_size);

624 #unde‡
TEST_ARENAS_BIN_CONSTANT


625 
	}
}

626 
TEST_END


628 
	$TEST_BEGIN
(
ã°_¨ías_Ãun_c⁄°™ts
)

631 
	#TEST_ARENAS_LRUN_CONSTANT
(
t
, 
«me
, 
ex≥˘ed
) do { \

632 
t
 
«me
; \

633 
size_t
 
sz
 = (
t
); \

634 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.Ãun.0."#«me, &
«me
, &
sz
, 
NULL
, \

636 
	`as£π_zu_eq
(
«me
, 
ex≥˘ed
, "Incorrect "#name" size"); \

637 } 0)

	)

639 
	`TEST_ARENAS_LRUN_CONSTANT
(
size_t
, 
size
, 
LARGE_MINCLASS
);

641 #unde‡
TEST_ARENAS_LRUN_CONSTANT


642 
	}
}

643 
TEST_END


645 
	$TEST_BEGIN
(
ã°_¨ías_hchunk_c⁄°™ts
)

648 
	#TEST_ARENAS_HCHUNK_CONSTANT
(
t
, 
«me
, 
ex≥˘ed
) do { \

649 
t
 
«me
; \

650 
size_t
 
sz
 = (
t
); \

651 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.hchunk.0."#«me, &
«me
, &
sz
, 
NULL
, \

653 
	`as£π_zu_eq
(
«me
, 
ex≥˘ed
, "Incorrect "#name" size"); \

654 } 0)

	)

656 
	`TEST_ARENAS_HCHUNK_CONSTANT
(
size_t
, 
size
, 
chunksize
);

658 #unde‡
TEST_ARENAS_HCHUNK_CONSTANT


659 
	}
}

660 
TEST_END


662 
	$TEST_BEGIN
(
ã°_¨ías_exãnd
)

664 
«ª«s_bef‹e
, 
¨ía
, 
«ª«s_a·î
;

665 
size_t
 
sz
 = ();

667 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.«ª«s", &
«ª«s_bef‹e
, &
sz
, 
NULL
, 0), 0,

669 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.exãnd", &
¨ía
, &
sz
, 
NULL
, 0), 0,

671 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.«ª«s", &
«ª«s_a·î
, &
sz
, 
NULL
, 0), 0,

674 
	`as£π_u_eq
(
«ª«s_bef‹e
+1, 
«ª«s_a·î
,

676 
	`as£π_u_eq
(
¨ía
, 
«ª«s_a·î
-1, "Unexpectedárena index");

677 
	}
}

678 
TEST_END


680 
	$TEST_BEGIN
(
ã°_°©s_¨ías
)

683 
	#TEST_STATS_ARENAS
(
t
, 
«me
) do { \

684 
t
 
«me
; \

685 
size_t
 
sz
 = (
t
); \

686 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0."#«me, &
«me
, &
sz
, 
NULL
, \

688 } 0)

	)

690 
	`TEST_STATS_ARENAS
(, 
¡hªads
);

691 
	`TEST_STATS_ARENAS
(c⁄° *, 
dss
);

692 
	`TEST_STATS_ARENAS
(
ssize_t
, 
lg_dúty_mu…
);

693 
	`TEST_STATS_ARENAS
(
ssize_t
, 
deˇy_time
);

694 
	`TEST_STATS_ARENAS
(
size_t
, 
∑˘ive
);

695 
	`TEST_STATS_ARENAS
(
size_t
, 
pdúty
);

697 #unde‡
TEST_STATS_ARENAS


698 
	}
}

699 
TEST_END


702 
	$maö
()

705  (
	`ã°
(

706 
ã°_mÆl˘l_îr‹s
,

707 
ã°_mÆl˘ amëomib_îr‹s
,

708 
ã°_mÆl˘lbymib_îr‹s
,

709 
ã°_mÆl˘l_ªad_wrôe
,

710 
ã°_mÆl˘ amëomib_sh‹t_mib
,

711 
ã°_mÆl˘l_c⁄fig
,

712 
ã°_mÆl˘l_›t
,

713 
ã°_m™∑ge_exam∂e
,

714 
ã°_tˇche_n⁄e
,

715 
ã°_tˇche
,

716 
ã°_thªad_¨ía
,

717 
ã°_¨ía_i_lg_dúty_mu…
,

718 
ã°_¨ía_i_deˇy_time
,

719 
ã°_¨ía_i_purge
,

720 
ã°_¨ía_i_deˇy
,

721 
ã°_¨ía_i_dss
,

722 
ã°_¨ías_öôülized
,

723 
ã°_¨ías_lg_dúty_mu…
,

724 
ã°_¨ías_deˇy_time
,

725 
ã°_¨ías_c⁄°™ts
,

726 
ã°_¨ías_bö_c⁄°™ts
,

727 
ã°_¨ías_Ãun_c⁄°™ts
,

728 
ã°_¨ías_hchunk_c⁄°™ts
,

729 
ã°_¨ías_exãnd
,

730 
ã°_°©s_¨ías
));

731 
	}
}

	@dep/jemalloc-4.2.0/test/unit/math.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#MAX_REL_ERR
 1.0e-9

	)

4 
	#MAX_ABS_ERR
 1.0e-9

	)

6 
	~<Êﬂt.h
>

8 #i‚de‡
INFINITY


9 
	#INFINITY
 (
DBL_MAX
 + DBL_MAX)

	)

12 
boﬁ


13 
	$doubÀ_eq_ªl
(
a
, 
b
, 
max_ªl_îr
, 
max_abs_îr
)

15 
ªl_îr
;

17 i‡(
	`Ábs
(
a
 - 
b
Ë< 
max_abs_îr
)

18  (
åue
);

19 
ªl_îr
 = (
	`Ábs
(
b
Ë> fabs(
a
)) ? fabs((a-b)/b) : fabs((a-b)/a);

20  (
ªl_îr
 < 
max_ªl_îr
);

21 
	}
}

23 
uöt64_t


24 
	$Á˘‹ül
(
x
)

26 
uöt64_t
 
ªt
 = 1;

27 
i
;

29 
i
 = 2; i <
x
; i++)

30 
ªt
 *(
uöt64_t
)
i
;

32  (
ªt
);

33 
	}
}

35 
	$TEST_BEGIN
(
ã°_ _gamma_Á˘‹ül
)

37 
x
;

40 
x
 = 1; x <= 21; x++) {

41 
	`as£π_åue
(
	`doubÀ_eq_ªl
(
	`exp
(
	` _gamma
(
x
)),

42 ()
	`Á˘‹ül
(
x
-1), 
MAX_REL_ERR
, 
MAX_ABS_ERR
),

43 "Inc‹ª˘ fa˘‹ü»ªsu… f‹ x=%u", 
x
);

45 
	}
}

46 
TEST_END


49 c⁄° 
	g _gamma_misc_ex≥˘ed
[] = {

50 
INFINITY
,

187 
	$TEST_BEGIN
(
ã°_ _gamma_misc
)

189 
i
;

191 
i
 = 1; i < (
 _gamma_misc_ex≥˘ed
)/(); i++) {

192 
x
 = ()
i
 * 0.25;

193 
	`as£π_åue
(
	`doubÀ_eq_ªl
(
	` _gamma
(
x
),

194 
 _gamma_misc_ex≥˘ed
[
i
], 
MAX_REL_ERR
, 
MAX_ABS_ERR
),

195 "Inc‹ª˘Ün_gamm®ªsu… f‹ i=%u", 
i
);

197 
	}
}

198 
TEST_END


201 c⁄° 
	g±_n‹m_ex≥˘ed
[] = {

202 -
INFINITY
,

238 
	$TEST_BEGIN
(
ã°_±_n‹m
)

240 
i
;

242 
i
 = 1; i < (
±_n‹m_ex≥˘ed
)/(); i++) {

243 
p
 = ()
i
 * 0.01;

244 
	`as£π_åue
(
	`doubÀ_eq_ªl
(
	`±_n‹m
(
p
), 
±_n‹m_ex≥˘ed
[
i
],

245 
MAX_REL_ERR
, 
MAX_ABS_ERR
),

246 "Inc‹ª˘Öt_n‹mÑesu… f‹ i=%u", 
i
);

248 
	}
}

249 
TEST_END


255 c⁄° 
	g±_chi2_df
[] = {0.1, 1.1, 10.1, 100.1, 1000.1};

256 c⁄° 
	g±_chi2_ex≥˘ed
[] = {

288 
	$TEST_BEGIN
(
ã°_±_chi2
)

290 
i
, 
j
;

291 
e
 = 0;

293 
i
 = 0; i < (
±_chi2_df
)/(); i++) {

294 
df
 = 
±_chi2_df
[
i
];

295 
 _gamma_df
 = 
	` _gamma
(
df
 * 0.5);

296 
j
 = 1; j < 100; j += 7) {

297 
p
 = ()
j
 * 0.01;

298 
	`as£π_åue
(
	`doubÀ_eq_ªl
(
	`±_chi2
(
p
, 
df
, 
 _gamma_df
),

299 
±_chi2_ex≥˘ed
[
e
], 
MAX_REL_ERR
, 
MAX_ABS_ERR
),

300 "Inc‹ª˘Öt_chi2Ñesu… f‹ i=%u, j=%u", 
i
, 
j
);

301 
e
++;

304 
	}
}

305 
TEST_END


311 c⁄° 
	g±_gamma_sh≠e
[] = {0.5, 1.0, 1.5, 2.0, 2.5, 3.0};

312 c⁄° 
	g±_gamma_ex≥˘ed
[] = {

350 
	$TEST_BEGIN
(
ã°_±_gamma_sh≠e
)

352 
i
, 
j
;

353 
e
 = 0;

355 
i
 = 0; i < (
±_gamma_sh≠e
)/(); i++) {

356 
sh≠e
 = 
±_gamma_sh≠e
[
i
];

357 
 _gamma_sh≠e
 = 
	` _gamma
(
sh≠e
);

358 
j
 = 1; j < 100; j += 7) {

359 
p
 = ()
j
 * 0.01;

360 
	`as£π_åue
(
	`doubÀ_eq_ªl
(
	`±_gamma
(
p
, 
sh≠e
, 1.0,

361 
 _gamma_sh≠e
), 
±_gamma_ex≥˘ed
[
e
], 
MAX_REL_ERR
,

362 
MAX_ABS_ERR
),

363 "Inc‹ª˘Öt_gamm®ªsu… f‹ i=%u, j=%u", 
i
, 
j
);

364 
e
++;

367 
	}
}

368 
TEST_END


370 
	$TEST_BEGIN
(
ã°_±_gamma_sˇÀ
)

372 
sh≠e
 = 1.0;

373 
 _gamma_sh≠e
 = 
	` _gamma
(
sh≠e
);

375 
	`as£π_åue
(
	`doubÀ_eq_ªl
(

376 
	`±_gamma
(0.5, 
sh≠e
, 1.0, 
 _gamma_sh≠e
) * 10.0,

377 
	`±_gamma
(0.5, 
sh≠e
, 10.0, 
 _gamma_sh≠e
), 
MAX_REL_ERR
,

378 
MAX_ABS_ERR
),

380 
	}
}

381 
TEST_END


384 
	$maö
()

387  (
	`ã°
(

388 
ã°_ _gamma_Á˘‹ül
,

389 
ã°_ _gamma_misc
,

390 
ã°_±_n‹m
,

391 
ã°_±_chi2
,

392 
ã°_±_gamma_sh≠e
,

393 
ã°_±_gamma_sˇÀ
));

394 
	}
}

	@dep/jemalloc-4.2.0/test/unit/mq.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#NSENDERS
 3

	)

4 
	#NMSGS
 100000

	)

6 
mq_msg_s
 
	tmq_msg_t
;

7 
	smq_msg_s
 {

8 
mq_msg
(
mq_msg_t
Ë
	mlök
;

10 
	$mq_gí
(, 
mq_
, 
mq_t
, 
mq_msg_t
, 
lök
)

12 
	$TEST_BEGIN
(
ã°_mq_basic
)

14 
mq_t
 
mq
;

15 
mq_msg_t
 
msg
;

17 
	`as£π_Ál£
(
	`mq_öô
(&
mq
), "Unexpected mq_init() failure");

18 
	`as£π_u_eq
(
	`mq_cou¡
(&
mq
), 0, "mq should beÉmpty");

19 
	`as£π_±r_nuŒ
(
	`mq_åygë
(&
mq
),

22 
	`mq_put
(&
mq
, &
msg
);

23 
	`as£π_u_eq
(
	`mq_cou¡
(&
mq
), 1, "mq should contain one message");

24 
	`as£π_±r_eq
(
	`mq_åygë
(&
mq
), &
msg
, "mq_tryget() shouldÑeturn msg");

26 
	`mq_put
(&
mq
, &
msg
);

27 
	`as£π_±r_eq
(
	`mq_gë
(&
mq
), &
msg
, "mq_get() shouldÑeturn msg");

29 
	`mq_föi
(&
mq
);

30 
	}
}

31 
TEST_END


34 
	$thd_ª˚ivî_°¨t
(*
¨g
)

36 
mq_t
 *
mq
 = (mq_à*)
¨g
;

37 
i
;

39 
i
 = 0; i < (
NSENDERS
 * 
NMSGS
); i++) {

40 
mq_msg_t
 *
msg
 = 
	`mq_gë
(
mq
);

41 
	`as£π_±r_nŸ_nuŒ
(
msg
, "mq_get() shouldÇeverÑeturn NULL");

42 
	`dÆlocx
(
msg
, 0);

44  (
NULL
);

45 
	}
}

48 
	$thd_£ndî_°¨t
(*
¨g
)

50 
mq_t
 *
mq
 = (mq_à*)
¨g
;

51 
i
;

53 
i
 = 0; i < 
NMSGS
; i++) {

54 
mq_msg_t
 *
msg
;

55 *
p
;

56 
p
 = 
	`mÆlocx
((
mq_msg_t
), 0);

57 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

58 
msg
 = (
mq_msg_t
 *)
p
;

59 
	`mq_put
(
mq
, 
msg
);

61  (
NULL
);

62 
	}
}

64 
	$TEST_BEGIN
(
ã°_mq_thªaded
)

66 
mq_t
 
mq
;

67 
thd_t
 
ª˚ivî
;

68 
thd_t
 
£ndîs
[
NSENDERS
];

69 
i
;

71 
	`as£π_Ál£
(
	`mq_öô
(&
mq
), "Unexpected mq_init() failure");

73 
	`thd_¸óã
(&
ª˚ivî
, 
thd_ª˚ivî_°¨t
, (*)&
mq
);

74 
i
 = 0; i < 
NSENDERS
; i++)

75 
	`thd_¸óã
(&
£ndîs
[
i
], 
thd_£ndî_°¨t
, (*)&
mq
);

77 
	`thd_joö
(
ª˚ivî
, 
NULL
);

78 
i
 = 0; i < 
NSENDERS
; i++)

79 
	`thd_joö
(
£ndîs
[
i
], 
NULL
);

81 
	`mq_föi
(&
mq
);

82 
	}
}

83 
TEST_END


86 
	$maö
()

89  (
	`ã°
(

90 
ã°_mq_basic
,

91 
ã°_mq_thªaded
));

92 
	}
}

	@dep/jemalloc-4.2.0/test/unit/mtx.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#NTHREADS
 2

	)

4 
	#NINCRS
 2000000

	)

6 
	$TEST_BEGIN
(
ã°_mtx_basic
)

8 
mtx_t
 
mtx
;

10 
	`as£π_Ál£
(
	`mtx_öô
(&
mtx
), "Unexpected mtx_init() failure");

11 
	`mtx_lock
(&
mtx
);

12 
	`mtx_u∆ock
(&
mtx
);

13 
	`mtx_föi
(&
mtx
);

14 
	}
}

15 
TEST_END


18 
mtx_t
 
	mmtx
;

19 
	mx
;

20 } 
	tthd_°¨t_¨g_t
;

23 
	$thd_°¨t
(*
v¨g
)

25 
thd_°¨t_¨g_t
 *
¨g
 = (thd_°¨t_¨g_à*)
v¨g
;

26 
i
;

28 
i
 = 0; i < 
NINCRS
; i++) {

29 
	`mtx_lock
(&
¨g
->
mtx
);

30 
¨g
->
x
++;

31 
	`mtx_u∆ock
(&
¨g
->
mtx
);

33  (
NULL
);

34 
	}
}

36 
	$TEST_BEGIN
(
ã°_mtx_ø˚
)

38 
thd_°¨t_¨g_t
 
¨g
;

39 
thd_t
 
thds
[
NTHREADS
];

40 
i
;

42 
	`as£π_Ál£
(
	`mtx_öô
(&
¨g
.
mtx
), "Unexpected mtx_init() failure");

43 
¨g
.
x
 = 0;

44 
i
 = 0; i < 
NTHREADS
; i++)

45 
	`thd_¸óã
(&
thds
[
i
], 
thd_°¨t
, (*)&
¨g
);

46 
i
 = 0; i < 
NTHREADS
; i++)

47 
	`thd_joö
(
thds
[
i
], 
NULL
);

48 
	`as£π_u_eq
(
¨g
.
x
, 
NTHREADS
 * 
NINCRS
,

50 
	}
}

51 
TEST_END


54 
	$maö
()

57  (
	`ã°
(

58 
ã°_mtx_basic
,

59 
ã°_mtx_ø˚
));

60 
	}
}

	@dep/jemalloc-4.2.0/test/unit/nstime.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#BILLION
 
	`UINT64_C
(1000000000)

	)

5 
	$TEST_BEGIN
(
ã°_n°ime_öô
)

7 
n°ime_t
 
n°
;

9 
	`n°ime_öô
(&
n°
, 42000000043);

10 
	`as£π_u64_eq
(
	`n°ime_ns
(&
n°
), 42000000043, "ns incorrectlyÑead");

11 
	`as£π_u64_eq
(
	`n°ime_£c
(&
n°
), 42, "sec incorrectlyÑead");

12 
	`as£π_u64_eq
(
	`n°ime_n£c
(&
n°
), 43, "nsec incorrectlyÑead");

13 
	}
}

14 
TEST_END


16 
	$TEST_BEGIN
(
ã°_n°ime_öô2
)

18 
n°ime_t
 
n°
;

20 
	`n°ime_öô2
(&
n°
, 42, 43);

21 
	`as£π_u64_eq
(
	`n°ime_£c
(&
n°
), 42, "sec incorrectlyÑead");

22 
	`as£π_u64_eq
(
	`n°ime_n£c
(&
n°
), 43, "nsec incorrectlyÑead");

23 
	}
}

24 
TEST_END


26 
	$TEST_BEGIN
(
ã°_n°ime_c›y
)

28 
n°ime_t
 
n°a
, 
n°b
;

30 
	`n°ime_öô2
(&
n°a
, 42, 43);

31 
	`n°ime_öô
(&
n°b
, 0);

32 
	`n°ime_c›y
(&
n°b
, &
n°a
);

33 
	`as£π_u64_eq
(
	`n°ime_£c
(&
n°b
), 42, "sec incorrectly copied");

34 
	`as£π_u64_eq
(
	`n°ime_n£c
(&
n°b
), 43, "nsec incorrectly copied");

35 
	}
}

36 
TEST_END


38 
	$TEST_BEGIN
(
ã°_n°ime_com∑ª
)

40 
n°ime_t
 
n°a
, 
n°b
;

42 
	`n°ime_öô2
(&
n°a
, 42, 43);

43 
	`n°ime_c›y
(&
n°b
, &
n°a
);

44 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0, "Times should beÉqual");

45 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°b
, &
n°a
), 0, "Times should beÉqual");

47 
	`n°ime_öô2
(&
n°b
, 42, 42);

48 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 1,

50 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°b
, &
n°a
), -1,

53 
	`n°ime_öô2
(&
n°b
, 42, 44);

54 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), -1,

56 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°b
, &
n°a
), 1,

59 
	`n°ime_öô2
(&
n°b
, 41, 
BILLION
 - 1);

60 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 1,

62 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°b
, &
n°a
), -1,

65 
	`n°ime_öô2
(&
n°b
, 43, 0);

66 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), -1,

68 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°b
, &
n°a
), 1,

70 
	}
}

71 
TEST_END


73 
	$TEST_BEGIN
(
ã°_n°ime_add
)

75 
n°ime_t
 
n°a
, 
n°b
;

77 
	`n°ime_öô2
(&
n°a
, 42, 43);

78 
	`n°ime_c›y
(&
n°b
, &
n°a
);

79 
	`n°ime_add
(&
n°a
, &
n°b
);

80 
	`n°ime_öô2
(&
n°b
, 84, 86);

81 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

84 
	`n°ime_öô2
(&
n°a
, 42, 
BILLION
 - 1);

85 
	`n°ime_c›y
(&
n°b
, &
n°a
);

86 
	`n°ime_add
(&
n°a
, &
n°b
);

87 
	`n°ime_öô2
(&
n°b
, 85, 
BILLION
 - 2);

88 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

90 
	}
}

91 
TEST_END


93 
	$TEST_BEGIN
(
ã°_n°ime_subåa˘
)

95 
n°ime_t
 
n°a
, 
n°b
;

97 
	`n°ime_öô2
(&
n°a
, 42, 43);

98 
	`n°ime_c›y
(&
n°b
, &
n°a
);

99 
	`n°ime_subåa˘
(&
n°a
, &
n°b
);

100 
	`n°ime_öô
(&
n°b
, 0);

101 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

104 
	`n°ime_öô2
(&
n°a
, 42, 43);

105 
	`n°ime_öô2
(&
n°b
, 41, 44);

106 
	`n°ime_subåa˘
(&
n°a
, &
n°b
);

107 
	`n°ime_öô2
(&
n°b
, 0, 
BILLION
 - 1);

108 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

110 
	}
}

111 
TEST_END


113 
	$TEST_BEGIN
(
ã°_n°ime_imu…ùly
)

115 
n°ime_t
 
n°a
, 
n°b
;

117 
	`n°ime_öô2
(&
n°a
, 42, 43);

118 
	`n°ime_imu…ùly
(&
n°a
, 10);

119 
	`n°ime_öô2
(&
n°b
, 420, 430);

120 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

123 
	`n°ime_öô2
(&
n°a
, 42, 666666666);

124 
	`n°ime_imu…ùly
(&
n°a
, 3);

125 
	`n°ime_öô2
(&
n°b
, 127, 999999998);

126 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

128 
	}
}

129 
TEST_END


131 
	$TEST_BEGIN
(
ã°_n°ime_idivide
)

133 
n°ime_t
 
n°a
, 
n°b
;

135 
	`n°ime_öô2
(&
n°a
, 42, 43);

136 
	`n°ime_c›y
(&
n°b
, &
n°a
);

137 
	`n°ime_imu…ùly
(&
n°a
, 10);

138 
	`n°ime_idivide
(&
n°a
, 10);

139 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

142 
	`n°ime_öô2
(&
n°a
, 42, 666666666);

143 
	`n°ime_c›y
(&
n°b
, &
n°a
);

144 
	`n°ime_imu…ùly
(&
n°a
, 3);

145 
	`n°ime_idivide
(&
n°a
, 3);

146 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°a
, &
n°b
), 0,

148 
	}
}

149 
TEST_END


151 
	$TEST_BEGIN
(
ã°_n°ime_divide
)

153 
n°ime_t
 
n°a
, 
n°b
, 
n°c
;

155 
	`n°ime_öô2
(&
n°a
, 42, 43);

156 
	`n°ime_c›y
(&
n°b
, &
n°a
);

157 
	`n°ime_imu…ùly
(&
n°a
, 10);

158 
	`as£π_u64_eq
(
	`n°ime_divide
(&
n°a
, &
n°b
), 10,

161 
	`n°ime_öô2
(&
n°a
, 42, 43);

162 
	`n°ime_c›y
(&
n°b
, &
n°a
);

163 
	`n°ime_imu…ùly
(&
n°a
, 10);

164 
	`n°ime_öô
(&
n°c
, 1);

165 
	`n°ime_add
(&
n°a
, &
n°c
);

166 
	`as£π_u64_eq
(
	`n°ime_divide
(&
n°a
, &
n°b
), 10,

169 
	`n°ime_öô2
(&
n°a
, 42, 43);

170 
	`n°ime_c›y
(&
n°b
, &
n°a
);

171 
	`n°ime_imu…ùly
(&
n°a
, 10);

172 
	`n°ime_öô
(&
n°c
, 1);

173 
	`n°ime_subåa˘
(&
n°a
, &
n°c
);

174 
	`as£π_u64_eq
(
	`n°ime_divide
(&
n°a
, &
n°b
), 9,

176 
	}
}

177 
TEST_END


179 
	$TEST_BEGIN
(
ã°_n°ime_upd©e
)

181 
n°ime_t
 
n°
;

183 
	`n°ime_öô
(&
n°
, 0);

185 
	`as£π_Ál£
(
	`n°ime_upd©e
(&
n°
), "BasicÅime update failed.");

189 
n°ime_t
 
addíd
;

190 
	`n°ime_öô2
(&
addíd
, 631152000, 0);

191 
	`n°ime_add
(&
n°
, &
addíd
);

194 
n°ime_t
 
n°0
;

195 
	`n°ime_c›y
(&
n°0
, &
n°
);

196 
	`as£π_åue
(
	`n°ime_upd©e
(&
n°
),

198 
	`as£π_d_eq
(
	`n°ime_com∑ª
(&
n°
, &
n°0
), 0,

202 
	}
}

203 
TEST_END


206 
	$maö
()

209  (
	`ã°
(

210 
ã°_n°ime_öô
,

211 
ã°_n°ime_öô2
,

212 
ã°_n°ime_c›y
,

213 
ã°_n°ime_com∑ª
,

214 
ã°_n°ime_add
,

215 
ã°_n°ime_subåa˘
,

216 
ã°_n°ime_imu…ùly
,

217 
ã°_n°ime_idivide
,

218 
ã°_n°ime_divide
,

219 
ã°_n°ime_upd©e
));

220 
	}
}

	@dep/jemalloc-4.2.0/test/unit/ph.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
node_s
 
	tnode_t
;

5 
	snode_s
 {

6 
	#NODE_MAGIC
 0x9823af7e

	)

7 
uöt32_t
 
	mmagic
;

8 
phn
(
node_t
Ë
	mlök
;

9 
uöt64_t
 
	mkey
;

13 
	$node_cmp
(c⁄° 
node_t
 *
a
, c⁄°Çode_à*
b
)

15 
ªt
;

17 
ªt
 = (
a
->
key
 > 
b
->key) - (a->key < b->key);

18 i‡(
ªt
 == 0) {

23 
ªt
 = (((
uöçå_t
)
a
Ë> ((uöçå_t)
b
))

24 - (((
uöçå_t
)
a
Ë< ((uöçå_t)
b
));

26  (
ªt
);

27 
	}
}

30 
	$node_cmp_magic
(c⁄° 
node_t
 *
a
, c⁄°Çode_à*
b
) {

32 
	`as£π_u32_eq
(
a
->
magic
, 
NODE_MAGIC
, "Bad magic");

33 
	`as£π_u32_eq
(
b
->
magic
, 
NODE_MAGIC
, "Bad magic");

35  (
	`node_cmp
(
a
, 
b
));

36 
	}
}

38 
	$ph
(
	tnode_t
Ë
	thóp_t
;

39 
	`ph_gí
(, 
hóp_
, 
hóp_t
, 
node_t
, 
lök
, 
node_cmp_magic
);

42 
	$node_¥öt
(c⁄° 
node_t
 *
node
, 
dïth
)

44 
i
;

45 
node_t
 *
À·mo°_chûd
, *
siblög
;

47 
i
 = 0; i < 
dïth
; i++)

48 
	`mÆloc_¥ötf
("\t");

49 
	`mÆloc_¥ötf
("%2"
FMTu64
"\n", 
node
->
key
);

51 
À·mo°_chûd
 = 
	`phn_lchûd_gë
(
node_t
, 
lök
, 
node
);

52 i‡(
À·mo°_chûd
 =
NULL
)

54 
	`node_¥öt
(
À·mo°_chûd
, 
dïth
 + 1);

56 
siblög
 = 
	`phn_√xt_gë
(
node_t
, 
lök
, 
À·mo°_chûd
); sibling !=

57 
NULL
; 
siblög
 = 
	`phn_√xt_gë
(
node_t
, 
lök
, sibling)) {

58 
	`node_¥öt
(
siblög
, 
dïth
 + 1);

60 
	}
}

63 
	$hóp_¥öt
(c⁄° 
hóp_t
 *
hóp
)

65 
node_t
 *
auxñm
;

67 
	`mÆloc_¥ötf
("vvv hó∞%∞vvv\n", 
hóp
);

68 i‡(
hóp
->
ph_roŸ
 =
NULL
)

69 
œbñ_ªtu∫
;

71 
	`node_¥öt
(
hóp
->
ph_roŸ
, 0);

73 
auxñm
 = 
	`phn_√xt_gë
(
node_t
, 
lök
, 
hóp
->
ph_roŸ
);áuxñm !
NULL
;

74 
auxñm
 = 
	`phn_√xt_gë
(
node_t
, 
lök
,áuxelm)) {

75 
	`as£π_±r_eq
(
	`phn_√xt_gë
(
node_t
, 
lök
, 
	`phn_¥ev_gë
(node_t,

76 
lök
, 
auxñm
)),áuxelm,

78 
	`node_¥öt
(
auxñm
, 0);

81 
œbñ_ªtu∫
:

82 
	`mÆloc_¥ötf
("^^^ hó∞%∞^^^\n", 
hóp
);

83 
	}
}

86 
	$node_vÆid©e
(c⁄° 
node_t
 *
node
, c⁄°Çode_à*
∑ª¡
)

88 
¬odes
 = 1;

89 
node_t
 *
À·mo°_chûd
, *
siblög
;

91 i‡(
∑ª¡
 !
NULL
) {

92 
	`as£π_d_ge
(
	`node_cmp_magic
(
node
, 
∑ª¡
), 0,

96 
À·mo°_chûd
 = 
	`phn_lchûd_gë
(
node_t
, 
lök
, 
node
);

97 i‡(
À·mo°_chûd
 =
NULL
)

98  (
¬odes
);

99 
	`as£π_±r_eq
((*)
	`phn_¥ev_gë
(
node_t
, 
lök
, 
À·mo°_chûd
),

100 (*)
node
, "Leftmost child doesÇotÜinkÅoÇode");

101 
¬odes
 +
	`node_vÆid©e
(
À·mo°_chûd
, 
node
);

103 
siblög
 = 
	`phn_√xt_gë
(
node_t
, 
lök
, 
À·mo°_chûd
); sibling !=

104 
NULL
; 
siblög
 = 
	`phn_√xt_gë
(
node_t
, 
lök
, sibling)) {

105 
	`as£π_±r_eq
(
	`phn_√xt_gë
(
node_t
, 
lök
, 
	`phn_¥ev_gë
(node_t,

106 
lök
, 
siblög
)), sibling,

108 
¬odes
 +
	`node_vÆid©e
(
siblög
, 
node
);

110  (
¬odes
);

111 
	}
}

114 
	$hóp_vÆid©e
(c⁄° 
hóp_t
 *
hóp
)

116 
¬odes
 = 0;

117 
node_t
 *
auxñm
;

119 i‡(
hóp
->
ph_roŸ
 =
NULL
)

120 
œbñ_ªtu∫
;

122 
¬odes
 +
	`node_vÆid©e
(
hóp
->
ph_roŸ
, 
NULL
);

124 
auxñm
 = 
	`phn_√xt_gë
(
node_t
, 
lök
, 
hóp
->
ph_roŸ
);áuxñm !
NULL
;

125 
auxñm
 = 
	`phn_√xt_gë
(
node_t
, 
lök
,áuxelm)) {

126 
	`as£π_±r_eq
(
	`phn_√xt_gë
(
node_t
, 
lök
, 
	`phn_¥ev_gë
(node_t,

127 
lök
, 
auxñm
)),áuxelm,

129 
¬odes
 +
	`node_vÆid©e
(
auxñm
, 
NULL
);

132 
œbñ_ªtu∫
:

133 i‡(
Ál£
)

134 
	`hóp_¥öt
(
hóp
);

135  (
¬odes
);

136 
	}
}

138 
	$TEST_BEGIN
(
ã°_ph_em±y
)

140 
hóp_t
 
hóp
;

142 
	`hóp_√w
(&
hóp
);

143 
	`as£π_åue
(
	`hóp_em±y
(&
hóp
), "Heap should beÉmpty");

144 
	`as£π_±r_nuŒ
(
	`hóp_fú°
(&
hóp
), "UnexpectedÇode");

145 
	}
}

146 
TEST_END


149 
	$node_ªmove
(
hóp_t
 *
hóp
, 
node_t
 *
node
)

152 
	`hóp_ªmove
(
hóp
, 
node
);

154 
node
->
magic
 = 0;

155 
	}
}

157 
node_t
 *

158 
	$node_ªmove_fú°
(
hóp_t
 *
hóp
)

160 
node_t
 *
node
 = 
	`hóp_ªmove_fú°
(
hóp
);

161 
node
->
magic
 = 0;

162  (
node
);

163 
	}
}

165 
	$TEST_BEGIN
(
ã°_ph_øndom
)

167 
	#NNODES
 25

	)

168 
	#NBAGS
 250

	)

169 
	#SEED
 42

	)

170 
sfmt_t
 *
sfmt
;

171 
uöt64_t
 
bag
[
NNODES
];

172 
hóp_t
 
hóp
;

173 
node_t
 
nodes
[
NNODES
];

174 
i
, 
j
, 
k
;

176 
sfmt
 = 
	`öô_gí_ønd
(
SEED
);

177 
i
 = 0; i < 
NBAGS
; i++) {

178 
i
) {

181 
j
 = 0; j < 
NNODES
; j++)

182 
bag
[
j
] = j;

186 
j
 = 0; j < 
NNODES
; j++)

187 
bag
[
j
] = 
NNODES
 - j - 1;

190 
j
 = 0; j < 
NNODES
; j++)

191 
bag
[
j
] = 
	`gí_ønd64_ønge
(
sfmt
, 
NNODES
);

194 
j
 = 1; j <
NNODES
; j++) {

196 
	`hóp_√w
(&
hóp
);

197 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 0,

199 
k
 = 0; k < 
j
; k++) {

200 
nodes
[
k
].
magic
 = 
NODE_MAGIC
;

201 
nodes
[
k
].
key
 = 
bag
[k];

205 
k
 = 0; k < 
j
; k++) {

206 
	`hóp_ö£π
(&
hóp
, &
nodes
[
k
]);

207 i‡(
i
 % 13 == 12) {

209 
	`as£π_±r_nŸ_nuŒ
(
	`hóp_fú°
(&
hóp
),

212 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
k
 + 1,

216 
	`as£π_Ál£
(
	`hóp_em±y
(&
hóp
),

220 
i
 % 4) {

222 
k
 = 0; k < 
j
; k++) {

223 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
j
 - 
k
,

225 
	`node_ªmove
(&
hóp
, &
nodes
[
k
]);

226 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
j
 - 
k


231 
k
 = 
j
; k > 0; k--) {

232 
	`node_ªmove
(&
hóp
, &
nodes
[
k
-1]);

233 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
k
 - 1,

238 
node_t
 *
¥ev
 = 
NULL
;

239 
k
 = 0; k < 
j
; k++) {

240 
node_t
 *
node
 = 
	`node_ªmove_fú°
(&
hóp
);

241 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
j
 - 
k


243 i‡(
¥ev
 !
NULL
) {

244 
	`as£π_d_ge
(
	`node_cmp
(
node
,

245 
¥ev
), 0,

248 
¥ev
 = 
node
;

252 
node_t
 *
¥ev
 = 
NULL
;

253 
k
 = 0; k < 
j
; k++) {

254 
node_t
 *
node
 = 
	`hóp_fú°
(&
hóp
);

255 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
j
 - 
k
,

257 i‡(
¥ev
 !
NULL
) {

258 
	`as£π_d_ge
(
	`node_cmp
(
node
,

259 
¥ev
), 0,

262 
	`node_ªmove
(&
hóp
, 
node
);

263 
	`as£π_u_eq
(
	`hóp_vÆid©e
(&
hóp
), 
j
 - 
k


265 
¥ev
 = 
node
;

269 
	`nŸ_ªached
();

272 
	`as£π_±r_nuŒ
(
	`hóp_fú°
(&
hóp
),

274 
	`as£π_åue
(
	`hóp_em±y
(&
hóp
), "Heap should beÉmpty");

277 
	`föi_gí_ønd
(
sfmt
);

278 #unde‡
NNODES


279 #unde‡
SEED


280 
	}
}

281 
TEST_END


284 
	$maö
()

287  (
	`ã°
(

288 
ã°_ph_em±y
,

289 
ã°_ph_øndom
));

290 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prng.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_¥ng_lg_ønge
)

5 
uöt64_t
 
ß
, 
sb
, 
ø
, 
rb
;

6 
lg_ønge
;

8 
ß
 = 42;

9 
ø
 = 
	`¥ng_lg_ønge
(&
ß
, 64);

10 
ß
 = 42;

11 
rb
 = 
	`¥ng_lg_ønge
(&
ß
, 64);

12 
	`as£π_u64_eq
(
ø
, 
rb
,

15 
sb
 = 42;

16 
rb
 = 
	`¥ng_lg_ønge
(&
sb
, 64);

17 
	`as£π_u64_eq
(
ø
, 
rb
,

20 
ß
 = 42;

21 
ø
 = 
	`¥ng_lg_ønge
(&
ß
, 64);

22 
rb
 = 
	`¥ng_lg_ønge
(&
ß
, 64);

23 
	`as£π_u64_√
(
ø
, 
rb
,

26 
ß
 = 42;

27 
ø
 = 
	`¥ng_lg_ønge
(&
ß
, 64);

28 
lg_ønge
 = 63;Üg_range > 0;Üg_range--) {

29 
sb
 = 42;

30 
rb
 = 
	`¥ng_lg_ønge
(&
sb
, 
lg_ønge
);

31 
	`as£π_u64_eq
((
rb
 & (
	`UINT64_C
(0xffffffffffffffffË<< 
lg_ønge
)),

32 0, "High ordî bô†should bê0,Üg_ønge=%u", 
lg_ønge
);

33 
	`as£π_u64_eq
(
rb
, (
ø
 >> (64 - 
lg_ønge
)),

35 "lg_ønge=%u", 
lg_ønge
);

37 
	}
}

38 
TEST_END


40 
	$TEST_BEGIN
(
ã°_¥ng_ønge
)

42 
uöt64_t
 
ønge
;

43 
	#MAX_RANGE
 10000000

	)

44 
	#RANGE_STEP
 97

	)

45 
	#NREPS
 10

	)

47 
ønge
 = 2;Ñ™gê< 
MAX_RANGE
;Ñ™gê+
RANGE_STEP
) {

48 
uöt64_t
 
s
;

49 
ªp
;

51 
s
 = 
ønge
;

52 
ªp
 = 0;Ñï < 
NREPS
;Ñep++) {

53 
uöt64_t
 
r
 = 
	`¥ng_ønge
(&
s
, 
ønge
);

55 
	`as£π_u64_…
(
r
, 
ønge
, "Out ofÑange");

58 
	}
}

59 
TEST_END


62 
	$maö
()

65  (
	`ã°
(

66 
ã°_¥ng_lg_ønge
,

67 
ã°_¥ng_ønge
));

68 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prof_accum.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#NTHREADS
 4

	)

4 
	#NALLOCS_PER_THREAD
 50

	)

5 
	#DUMP_INTERVAL
 1

	)

6 
	#BT_COUNT_CHECK_INTERVAL
 5

	)

8 #ifde‡
JEMALLOC_PROF


9 c⁄° *
	gmÆloc_c⁄f
 =

14 
	$¥of_dump_›í_öãr˚±
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
fûíame
)

16 
fd
;

18 
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
);

19 
	`as£π_d_√
(
fd
, -1, "Unexpected open() failure");

21  (
fd
);

22 
	}
}

25 
	$Æloc_‰om_≥rmuãd_backåa˚
(
thd_öd
, 
ôî©i⁄
)

28  (
	`bèŒoc
(1, 
thd_öd
*
NALLOCS_PER_THREAD
 + 
ôî©i⁄
));

29 
	}
}

32 
	$thd_°¨t
(*
v¨g
)

34 
thd_öd
 = *(*)
v¨g
;

35 
size_t
 
bt_cou¡_¥ev
, 
bt_cou¡
;

36 
i_¥ev
, 
i
;

38 
i_¥ev
 = 0;

39 
bt_cou¡_¥ev
 = 0;

40 
i
 = 0; i < 
NALLOCS_PER_THREAD
; i++) {

41 *
p
 = 
	`Æloc_‰om_≥rmuãd_backåa˚
(
thd_öd
, 
i
);

42 
	`dÆlocx
(
p
, 0);

43 i‡(
i
 % 
DUMP_INTERVAL
 == 0) {

44 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.dump", 
NULL
, NULL, NULL, 0),

48 i‡(
i
 % 
BT_COUNT_CHECK_INTERVAL
 == 0 ||

49 
i
+1 =
NALLOCS_PER_THREAD
) {

50 
bt_cou¡
 = 
	`¥of_bt_cou¡
();

51 
	`as£π_zu_À
(
bt_cou¡_¥ev
+(
i
-
i_¥ev
), 
bt_cou¡
,

53 
i_¥ev
 = 
i
;

54 
bt_cou¡_¥ev
 = 
bt_cou¡
;

58  (
NULL
);

59 
	}
}

61 
	$TEST_BEGIN
(
ã°_idump
)

63 
boﬁ
 
a˘ive
;

64 
thd_t
 
thds
[
NTHREADS
];

65 
thd_¨gs
[
NTHREADS
];

66 
i
;

68 
	`ã°_skù_if
(!
c⁄fig_¥of
);

70 
a˘ive
 = 
åue
;

71 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.a˘ive", 
NULL
, NULL, &
a˘ive
, (active)),

74 
¥of_dump_›í
 = 
¥of_dump_›í_öãr˚±
;

76 
i
 = 0; i < 
NTHREADS
; i++) {

77 
thd_¨gs
[
i
] = i;

78 
	`thd_¸óã
(&
thds
[
i
], 
thd_°¨t
, (*)&
thd_¨gs
[i]);

80 
i
 = 0; i < 
NTHREADS
; i++)

81 
	`thd_joö
(
thds
[
i
], 
NULL
);

82 
	}
}

83 
TEST_END


86 
	$maö
()

89  (
	`ã°
(

90 
ã°_idump
));

91 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prof_active.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_PROF


4 c⁄° *
	gmÆloc_c⁄f
 =

9 
	$mÆl˘l_boﬁ_gë
(c⁄° *
«me
, 
boﬁ
 
ex≥˘ed
, c⁄° *
func
, 
löe
)

11 
boﬁ
 
ﬁd
;

12 
size_t
 
sz
;

14 
sz
 = (
ﬁd
);

15 
	`as£π_d_eq
(
	`mÆl˘l
(
«me
, &
ﬁd
, &
sz
, 
NULL
, 0), 0,

16 "%s():%d: U√x≥˘ed mÆl˘»ÁûuªÑódög %s", 
func
, 
löe
, 
«me
);

17 
	`as£π_b_eq
(
ﬁd
, 
ex≥˘ed
, "%s():%d: U√x≥˘ed %†vÆue", 
func
, 
löe
,

18 
«me
);

19 
	}
}

22 
	$mÆl˘l_boﬁ_£t
(c⁄° *
«me
, 
boﬁ
 
ﬁd_ex≥˘ed
, boﬁ 
vÆ_√w
,

23 c⁄° *
func
, 
löe
)

25 
boﬁ
 
ﬁd
;

26 
size_t
 
sz
;

28 
sz
 = (
ﬁd
);

29 
	`as£π_d_eq
(
	`mÆl˘l
(
«me
, &
ﬁd
, &
sz
, &
vÆ_√w
, (val_new)), 0,

30 "%s():%d: U√x≥˘ed mÆl˘»ÁûuªÑódög/wrôög %s", 
func
,

31 
löe
, 
«me
);

32 
	`as£π_b_eq
(
ﬁd
, 
ﬁd_ex≥˘ed
, "%s():%d: U√x≥˘ed %†vÆue", 
func
,

33 
löe
, 
«me
);

34 
	}
}

37 
	$mÆl˘l_¥of_a˘ive_gë_im∂
(
boﬁ
 
¥of_a˘ive_ﬁd_ex≥˘ed
, c⁄° *
func
,

38 
löe
)

41 
	`mÆl˘l_boﬁ_gë
("¥of.a˘ive", 
¥of_a˘ive_ﬁd_ex≥˘ed
, 
func
, 
löe
);

42 
	}
}

43 
	#mÆl˘l_¥of_a˘ive_gë
(
a
) \

44 
	`mÆl˘l_¥of_a˘ive_gë_im∂
(
a
, 
__func__
, 
__LINE__
)

	)

47 
	$mÆl˘l_¥of_a˘ive_£t_im∂
(
boﬁ
 
¥of_a˘ive_ﬁd_ex≥˘ed
,

48 
boﬁ
 
¥of_a˘ive_√w
, c⁄° *
func
, 
löe
)

51 
	`mÆl˘l_boﬁ_£t
("¥of.a˘ive", 
¥of_a˘ive_ﬁd_ex≥˘ed
,

52 
¥of_a˘ive_√w
, 
func
, 
löe
);

53 
	}
}

54 
	#mÆl˘l_¥of_a˘ive_£t
(
a
, 
b
) \

55 
	`mÆl˘l_¥of_a˘ive_£t_im∂
(
a
, 
b
, 
__func__
, 
__LINE__
)

	)

58 
	$mÆl˘l_thªad_¥of_a˘ive_gë_im∂
(
boﬁ
 
thªad_¥of_a˘ive_ﬁd_ex≥˘ed
,

59 c⁄° *
func
, 
löe
)

62 
	`mÆl˘l_boﬁ_gë
("thªad.¥of.a˘ive", 
thªad_¥of_a˘ive_ﬁd_ex≥˘ed
,

63 
func
, 
löe
);

64 
	}
}

65 
	#mÆl˘l_thªad_¥of_a˘ive_gë
(
a
) \

66 
	`mÆl˘l_thªad_¥of_a˘ive_gë_im∂
(
a
, 
__func__
, 
__LINE__
)

	)

69 
	$mÆl˘l_thªad_¥of_a˘ive_£t_im∂
(
boﬁ
 
thªad_¥of_a˘ive_ﬁd_ex≥˘ed
,

70 
boﬁ
 
thªad_¥of_a˘ive_√w
, c⁄° *
func
, 
löe
)

73 
	`mÆl˘l_boﬁ_£t
("thªad.¥of.a˘ive", 
thªad_¥of_a˘ive_ﬁd_ex≥˘ed
,

74 
thªad_¥of_a˘ive_√w
, 
func
, 
löe
);

75 
	}
}

76 
	#mÆl˘l_thªad_¥of_a˘ive_£t
(
a
, 
b
) \

77 
	`mÆl˘l_thªad_¥of_a˘ive_£t_im∂
(
a
, 
b
, 
__func__
, 
__LINE__
)

	)

80 
	$¥of_ßm∂ög_¥obe_im∂
(
boﬁ
 
ex≥˘_ßm∂e
, c⁄° *
func
, 
löe
)

82 *
p
;

83 
size_t
 
ex≥˘ed_backåa˚s
 = 
ex≥˘_ßm∂e
 ? 1 : 0;

85 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 0, "%s():%d: Ex≥˘ed 0 backåa˚s", 
func
,

86 
löe
);

87 
p
 = 
	`mÆlocx
(1, 0);

88 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

89 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 
ex≥˘ed_backåa˚s
,

90 "%s():%d: U√x≥˘ed backåa˚ cou¡", 
func
, 
löe
);

91 
	`dÆlocx
(
p
, 0);

92 
	}
}

93 
	#¥of_ßm∂ög_¥obe
(
a
) \

94 
	`¥of_ßm∂ög_¥obe_im∂
(
a
, 
__func__
, 
__LINE__
)

	)

96 
	$TEST_BEGIN
(
ã°_¥of_a˘ive
)

99 
	`ã°_skù_if
(!
c⁄fig_¥of
);

101 
	`mÆl˘l_¥of_a˘ive_gë
(
åue
);

102 
	`mÆl˘l_thªad_¥of_a˘ive_gë
(
Ál£
);

104 
	`mÆl˘l_¥of_a˘ive_£t
(
åue
,Årue);

105 
	`mÆl˘l_thªad_¥of_a˘ive_£t
(
Ál£
, false);

107 
	`¥of_ßm∂ög_¥obe
(
Ál£
);

109 
	`mÆl˘l_¥of_a˘ive_£t
(
åue
, 
Ál£
);

110 
	`mÆl˘l_thªad_¥of_a˘ive_£t
(
Ál£
, false);

112 
	`¥of_ßm∂ög_¥obe
(
Ál£
);

114 
	`mÆl˘l_¥of_a˘ive_£t
(
Ál£
, false);

115 
	`mÆl˘l_thªad_¥of_a˘ive_£t
(
Ál£
, 
åue
);

117 
	`¥of_ßm∂ög_¥obe
(
Ál£
);

119 
	`mÆl˘l_¥of_a˘ive_£t
(
Ál£
, 
åue
);

120 
	`mÆl˘l_thªad_¥of_a˘ive_£t
(
åue
,Årue);

122 
	`¥of_ßm∂ög_¥obe
(
åue
);

125 
	`mÆl˘l_¥of_a˘ive_£t
(
åue
,Årue);

126 
	`mÆl˘l_thªad_¥of_a˘ive_£t
(
åue
, 
Ál£
);

127 
	}
}

128 
TEST_END


131 
	$maö
()

134  (
	`ã°
(

135 
ã°_¥of_a˘ive
));

136 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prof_gdump.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_PROF


4 c⁄° *
	gmÆloc_c⁄f
 = "prof:true,prof_active:false,prof_gdump:true";

7 
boﬁ
 
	gdid_¥of_dump_›í
;

10 
	$¥of_dump_›í_öãr˚±
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
fûíame
)

12 
fd
;

14 
did_¥of_dump_›í
 = 
åue
;

16 
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
);

17 
	`as£π_d_√
(
fd
, -1, "Unexpected open() failure");

19  (
fd
);

20 
	}
}

22 
	$TEST_BEGIN
(
ã°_gdump
)

24 
boﬁ
 
a˘ive
, 
gdump
, 
gdump_ﬁd
;

25 *
p
, *
q
, *
r
, *
s
;

26 
size_t
 
sz
;

28 
	`ã°_skù_if
(!
c⁄fig_¥of
);

30 
a˘ive
 = 
åue
;

31 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.a˘ive", 
NULL
, NULL, &
a˘ive
, (active)),

34 
¥of_dump_›í
 = 
¥of_dump_›í_öãr˚±
;

36 
did_¥of_dump_›í
 = 
Ál£
;

37 
p
 = 
	`mÆlocx
(
chunksize
, 0);

38 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

39 
	`as£π_åue
(
did_¥of_dump_›í
, "ExpectedáÖrofile dump");

41 
did_¥of_dump_›í
 = 
Ál£
;

42 
q
 = 
	`mÆlocx
(
chunksize
, 0);

43 
	`as£π_±r_nŸ_nuŒ
(
q
, "Unexpected mallocx() failure");

44 
	`as£π_åue
(
did_¥of_dump_›í
, "ExpectedáÖrofile dump");

46 
gdump
 = 
Ál£
;

47 
sz
 = (
gdump_ﬁd
);

48 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.gdump", &
gdump_ﬁd
, &
sz
, &
gdump
,

49 (
gdump
)), 0,

51 
	`as£π
(
gdump_ﬁd
);

52 
did_¥of_dump_›í
 = 
Ál£
;

53 
r
 = 
	`mÆlocx
(
chunksize
, 0);

54 
	`as£π_±r_nŸ_nuŒ
(
q
, "Unexpected mallocx() failure");

55 
	`as£π_Ál£
(
did_¥of_dump_›í
, "UnexpectedÖrofile dump");

57 
gdump
 = 
åue
;

58 
sz
 = (
gdump_ﬁd
);

59 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.gdump", &
gdump_ﬁd
, &
sz
, &
gdump
,

60 (
gdump
)), 0,

62 
	`as£π
(!
gdump_ﬁd
);

63 
did_¥of_dump_›í
 = 
Ál£
;

64 
s
 = 
	`mÆlocx
(
chunksize
, 0);

65 
	`as£π_±r_nŸ_nuŒ
(
q
, "Unexpected mallocx() failure");

66 
	`as£π_åue
(
did_¥of_dump_›í
, "ExpectedáÖrofile dump");

68 
	`dÆlocx
(
p
, 0);

69 
	`dÆlocx
(
q
, 0);

70 
	`dÆlocx
(
r
, 0);

71 
	`dÆlocx
(
s
, 0);

72 
	}
}

73 
TEST_END


76 
	$maö
()

79  (
	`ã°
(

80 
ã°_gdump
));

81 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prof_idump.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_PROF


4 c⁄° *
	gmÆloc_c⁄f
 =

9 
boﬁ
 
	gdid_¥of_dump_›í
;

12 
	$¥of_dump_›í_öãr˚±
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
fûíame
)

14 
fd
;

16 
did_¥of_dump_›í
 = 
åue
;

18 
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
);

19 
	`as£π_d_√
(
fd
, -1, "Unexpected open() failure");

21  (
fd
);

22 
	}
}

24 
	$TEST_BEGIN
(
ã°_idump
)

26 
boﬁ
 
a˘ive
;

27 *
p
;

29 
	`ã°_skù_if
(!
c⁄fig_¥of
);

31 
a˘ive
 = 
åue
;

32 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.a˘ive", 
NULL
, NULL, &
a˘ive
, (active)),

35 
¥of_dump_›í
 = 
¥of_dump_›í_öãr˚±
;

37 
did_¥of_dump_›í
 = 
Ál£
;

38 
p
 = 
	`mÆlocx
(1, 0);

39 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

40 
	`dÆlocx
(
p
, 0);

41 
	`as£π_åue
(
did_¥of_dump_›í
, "ExpectedáÖrofile dump");

42 
	}
}

43 
TEST_END


46 
	$maö
()

49  (
	`ã°
(

50 
ã°_idump
));

51 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prof_reset.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_PROF


4 c⁄° *
	gmÆloc_c⁄f
 =

9 
	$¥of_dump_›í_öãr˚±
(
boﬁ
 
¥›ag©e_îr
, c⁄° *
fûíame
)

11 
fd
;

13 
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
);

14 
	`as£π_d_√
(
fd
, -1, "Unexpected open() failure");

16  (
fd
);

17 
	}
}

20 
	$£t_¥of_a˘ive
(
boﬁ
 
a˘ive
)

23 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.a˘ive", 
NULL
, NULL, &
a˘ive
, (active)),

25 
	}
}

27 
size_t


28 
	$gë_lg_¥of_ßm∂e
()

30 
size_t
 
lg_¥of_ßm∂e
;

31 
size_t
 
sz
 = (size_t);

33 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.lg_ßm∂e", &
lg_¥of_ßm∂e
, &
sz
, 
NULL
, 0), 0,

35  (
lg_¥of_ßm∂e
);

36 
	}
}

39 
	$do_¥of_ª£t
(
size_t
 
lg_¥of_ßm∂e
)

41 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.ª£t", 
NULL
, NULL,

42 &
lg_¥of_ßm∂e
, (
size_t
)), 0,

44 
	`as£π_zu_eq
(
lg_¥of_ßm∂e
, 
	`gë_lg_¥of_ßm∂e
(),

46 
	}
}

48 
	$TEST_BEGIN
(
ã°_¥of_ª£t_basic
)

50 
size_t
 
lg_¥of_ßm∂e_‹ig
, 
lg_¥of_ßm∂e
, 
lg_¥of_ßm∂e_√xt
;

51 
size_t
 
sz
;

52 
i
;

54 
	`ã°_skù_if
(!
c⁄fig_¥of
);

56 
sz
 = (
size_t
);

57 
	`as£π_d_eq
(
	`mÆl˘l
("›t.lg_¥of_ßm∂e", &
lg_¥of_ßm∂e_‹ig
, &
sz
,

58 
NULL
, 0), 0,

60 
	`as£π_zu_eq
(
lg_¥of_ßm∂e_‹ig
, 0,

62 
lg_¥of_ßm∂e
 = 
	`gë_lg_¥of_ßm∂e
();

63 
	`as£π_zu_eq
(
lg_¥of_ßm∂e_‹ig
, 
lg_¥of_ßm∂e
,

68 
i
 = 0; i < 2; i++) {

69 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.ª£t", 
NULL
, NULL, NULL, 0), 0,

71 
lg_¥of_ßm∂e
 = 
	`gë_lg_¥of_ßm∂e
();

72 
	`as£π_zu_eq
(
lg_¥of_ßm∂e_‹ig
, 
lg_¥of_ßm∂e
,

77 
lg_¥of_ßm∂e_√xt
 = 1;

78 
i
 = 0; i < 2; i++) {

79 
	`do_¥of_ª£t
(
lg_¥of_ßm∂e_√xt
);

80 
lg_¥of_ßm∂e
 = 
	`gë_lg_¥of_ßm∂e
();

81 
	`as£π_zu_eq
(
lg_¥of_ßm∂e
, 
lg_¥of_ßm∂e_√xt
,

83 
lg_¥of_ßm∂e_√xt
 = 
lg_¥of_ßm∂e_‹ig
;

87 
lg_¥of_ßm∂e
 = 
	`gë_lg_¥of_ßm∂e
();

88 
	`as£π_zu_eq
(
lg_¥of_ßm∂e_‹ig
, 
lg_¥of_ßm∂e
,

91 
	}
}

92 
TEST_END


94 
boﬁ
 
	g¥of_dump_hódî_öãr˚±ed
 = 
Ál£
;

95 
¥of_˙t_t
 
	g˙t_Æl_c›y
 = {0, 0, 0, 0};

96 
boﬁ


97 
	$¥of_dump_hódî_öãr˚±
(
tsdn_t
 *
tsdn
, 
boﬁ
 
¥›ag©e_îr
,

98 c⁄° 
¥of_˙t_t
 *
˙t_Æl
)

101 
¥of_dump_hódî_öãr˚±ed
 = 
åue
;

102 
	`mem˝y
(&
˙t_Æl_c›y
, 
˙t_Æl
, (
¥of_˙t_t
));

104  (
Ál£
);

105 
	}
}

107 
	$TEST_BEGIN
(
ã°_¥of_ª£t_˛ónup
)

109 *
p
;

110 
¥of_dump_hódî_t
 *
¥of_dump_hódî_‹ig
;

112 
	`ã°_skù_if
(!
c⁄fig_¥of
);

114 
	`£t_¥of_a˘ive
(
åue
);

116 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 0, "Expected 0 backtraces");

117 
p
 = 
	`mÆlocx
(1, 0);

118 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

119 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 1, "Expected 1 backtrace");

121 
¥of_dump_hódî_‹ig
 = 
¥of_dump_hódî
;

122 
¥of_dump_hódî
 = 
¥of_dump_hódî_öãr˚±
;

123 
	`as£π_Ál£
(
¥of_dump_hódî_öãr˚±ed
, "Unexpected intercept");

125 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.dump", 
NULL
, NULL, NULL, 0),

127 
	`as£π_åue
(
¥of_dump_hódî_öãr˚±ed
, "Expected intercept");

128 
	`as£π_u64_eq
(
˙t_Æl_c›y
.
curobjs
, 1, "Expected 1állocation");

130 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.ª£t", 
NULL
, NULL, NULL, 0), 0,

132 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.dump", 
NULL
, NULL, NULL, 0),

134 
	`as£π_u64_eq
(
˙t_Æl_c›y
.
curobjs
, 0, "Expected 0állocations");

135 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 1, "Expected 1 backtrace");

137 
¥of_dump_hódî
 = 
¥of_dump_hódî_‹ig
;

139 
	`dÆlocx
(
p
, 0);

140 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 0, "Expected 0 backtraces");

142 
	`£t_¥of_a˘ive
(
Ál£
);

143 
	}
}

144 
	gTEST_END


146 
	#NTHREADS
 4

	)

147 
	#NALLOCS_PER_THREAD
 (1U << 13)

	)

148 
	#OBJ_RING_BUF_COUNT
 1531

	)

149 
	#RESET_INTERVAL
 (1U << 10)

	)

150 
	#DUMP_INTERVAL
 3677

	)

152 
	$thd_°¨t
(*
v¨g
)

154 
thd_öd
 = *(*)
v¨g
;

155 
i
;

156 *
objs
[
OBJ_RING_BUF_COUNT
];

158 
	`mem£t
(
objs
, 0, (objs));

160 
i
 = 0; i < 
NALLOCS_PER_THREAD
; i++) {

161 i‡(
i
 % 
RESET_INTERVAL
 == 0) {

162 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.ª£t", 
NULL
, NULL, NULL, 0),

167 i‡(
i
 % 
DUMP_INTERVAL
 == 0) {

168 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.dump", 
NULL
, NULL, NULL, 0),

173 **
µ
 = &
objs
[
i
 % 
OBJ_RING_BUF_COUNT
];

174 i‡(*
µ
 !
NULL
) {

175 
	`dÆlocx
(*
µ
, 0);

176 *
µ
 = 
NULL
;

178 *
µ
 = 
	`bèŒoc
(1, 
thd_öd
*
NALLOCS_PER_THREAD
 + 
i
);

179 
	`as£π_±r_nŸ_nuŒ
(*
µ
,

185 
i
 = 0; i < 
OBJ_RING_BUF_COUNT
; i++) {

186 **
µ
 = &
objs
[
i
 % 
OBJ_RING_BUF_COUNT
];

187 i‡(*
µ
 !
NULL
) {

188 
	`dÆlocx
(*
µ
, 0);

189 *
µ
 = 
NULL
;

193  (
NULL
);

194 
	}
}

196 
	$TEST_BEGIN
(
ã°_¥of_ª£t
)

198 
size_t
 
lg_¥of_ßm∂e_‹ig
;

199 
thd_t
 
thds
[
NTHREADS
];

200 
thd_¨gs
[
NTHREADS
];

201 
i
;

202 
size_t
 
bt_cou¡
, 
td©a_cou¡
;

204 
	`ã°_skù_if
(!
c⁄fig_¥of
);

206 
bt_cou¡
 = 
	`¥of_bt_cou¡
();

207 
	`as£π_zu_eq
(
bt_cou¡
, 0,

209 
td©a_cou¡
 = 
	`¥of_td©a_cou¡
();

211 
lg_¥of_ßm∂e_‹ig
 = 
	`gë_lg_¥of_ßm∂e
();

212 
	`do_¥of_ª£t
(5);

214 
	`£t_¥of_a˘ive
(
åue
);

216 
i
 = 0; i < 
NTHREADS
; i++) {

217 
thd_¨gs
[
i
] = i;

218 
	`thd_¸óã
(&
thds
[
i
], 
thd_°¨t
, (*)&
thd_¨gs
[i]);

220 
i
 = 0; i < 
NTHREADS
; i++)

221 
	`thd_joö
(
thds
[
i
], 
NULL
);

223 
	`as£π_zu_eq
(
	`¥of_bt_cou¡
(), 
bt_cou¡
,

225 
	`as£π_zu_eq
(
	`¥of_td©a_cou¡
(), 
td©a_cou¡
,

228 
	`£t_¥of_a˘ive
(
Ál£
);

230 
	`do_¥of_ª£t
(
lg_¥of_ßm∂e_‹ig
);

231 
	}
}

232 
	gTEST_END


233 #unde‡
NTHREADS


234 #unde‡
NALLOCS_PER_THREAD


235 #unde‡
OBJ_RING_BUF_COUNT


236 #unde‡
RESET_INTERVAL


237 #unde‡
DUMP_INTERVAL


240 
	#NITER
 10

	)

241 
	$TEST_BEGIN
(
ã°_xÆlocx
)

243 
size_t
 
lg_¥of_ßm∂e_‹ig
;

244 
i
;

245 *
±rs
[
NITER
];

247 
	`ã°_skù_if
(!
c⁄fig_¥of
);

249 
lg_¥of_ßm∂e_‹ig
 = 
	`gë_lg_¥of_ßm∂e
();

250 
	`£t_¥of_a˘ive
(
åue
);

253 
	`do_¥of_ª£t
(0);

255 
i
 = 0; i < 
NITER
; i++) {

256 *
p
;

257 
size_t
 
sz
, 
nsz
;

260 
	`do_¥of_ª£t
(0);

263 
p
 = 
±rs
[
i
] = 
	`mÆlocx
(1, 0);

264 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

267 
	`do_¥of_ª£t
(0);

270 
sz
 = 
	`ßŒocx
(
p
, 0);

271 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
sz
, 0, 0), sz,

275 
nsz
 = 
	`«Œocx
(
sz
+1, 0);

276 
	`as£π_zu_eq
(
	`xÆlocx
(
p
, 
nsz
, 0, 0), 
sz
,

280 
i
 = 0; i < 
NITER
; i++) {

282 
	`dÆlocx
(
±rs
[
i
], 0);

285 
	`£t_¥of_a˘ive
(
Ál£
);

286 
	`do_¥of_ª£t
(
lg_¥of_ßm∂e_‹ig
);

287 
	}
}

288 
	gTEST_END


289 #unde‡
NITER


292 
	$maö
()

296 
¥of_dump_›í
 = 
¥of_dump_›í_öãr˚±
;

298  (
	`ã°
(

299 
ã°_¥of_ª£t_basic
,

300 
ã°_¥of_ª£t_˛ónup
,

301 
ã°_¥of_ª£t
,

302 
ã°_xÆlocx
));

303 
	}
}

	@dep/jemalloc-4.2.0/test/unit/prof_thread_name.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_PROF


4 c⁄° *
	gmÆloc_c⁄f
 = "prof:true,prof_active:false";

8 
	$mÆl˘l_thªad_«me_gë_im∂
(c⁄° *
thªad_«me_ex≥˘ed
, c⁄° *
func
,

9 
löe
)

11 c⁄° *
thªad_«me_ﬁd
;

12 
size_t
 
sz
;

14 
sz
 = (
thªad_«me_ﬁd
);

15 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¥of.«me", &
thªad_«me_ﬁd
, &
sz
, 
NULL
, 0),

17 
func
, 
löe
);

18 
	`as£π_°r_eq
(
thªad_«me_ﬁd
, 
thªad_«me_ex≥˘ed
,

19 "%s():%d: U√x≥˘edÅhªad.¥of.«mêvÆue", 
func
, 
löe
);

20 
	}
}

21 
	#mÆl˘l_thªad_«me_gë
(
a
) \

22 
	`mÆl˘l_thªad_«me_gë_im∂
(
a
, 
__func__
, 
__LINE__
)

	)

25 
	$mÆl˘l_thªad_«me_£t_im∂
(c⁄° *
thªad_«me
, c⁄° *
func
,

26 
löe
)

29 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¥of.«me", 
NULL
, NULL, &
thªad_«me
,

30 (
thªad_«me
)), 0,

32 
func
, 
löe
);

33 
	`mÆl˘l_thªad_«me_gë_im∂
(
thªad_«me
, 
func
, 
löe
);

34 
	}
}

35 
	#mÆl˘l_thªad_«me_£t
(
a
) \

36 
	`mÆl˘l_thªad_«me_£t_im∂
(
a
, 
__func__
, 
__LINE__
)

	)

38 
	$TEST_BEGIN
(
ã°_¥of_thªad_«me_vÆid©i⁄
)

40 c⁄° *
thªad_«me
;

42 
	`ã°_skù_if
(!
c⁄fig_¥of
);

44 
	`mÆl˘l_thªad_«me_gë
("");

45 
	`mÆl˘l_thªad_«me_£t
("hiÅhere");

48 
thªad_«me
 = 
NULL
;

49 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¥of.«me", 
NULL
, NULL, &
thªad_«me
,

50 (
thªad_«me
)), 
EFAULT
,

52 
thªad_«me
);

55 
thªad_«me
 = "hi\nthere";

56 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¥of.«me", 
NULL
, NULL, &
thªad_«me
,

57 (
thªad_«me
)), 
EFAULT
,

59 
thªad_«me
);

63 c⁄° *
thªad_«me_ﬁd
;

64 
size_t
 
sz
;

66 
sz
 = (
thªad_«me_ﬁd
);

67 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¥of.«me", &
thªad_«me_ﬁd
, &
sz
,

68 &
thªad_«me
, —hªad_«me)), 
EPERM
,

70 "thªad.¥of.«me", 
thªad_«me
);

73 
	`mÆl˘l_thªad_«me_£t
("");

74 
	}
}

75 
	gTEST_END


77 
	#NTHREADS
 4

	)

78 
	#NRESET
 25

	)

80 
	$thd_°¨t
(*
v¨g
)

82 
thd_öd
 = *(*)
v¨g
;

83 
thªad_«me
[16] = "";

84 
i
;

86 
	`mÆloc_¢¥ötf
(
thªad_«me
, —hªad_«me), "thªad %u", 
thd_öd
);

88 
	`mÆl˘l_thªad_«me_gë
("");

89 
	`mÆl˘l_thªad_«me_£t
(
thªad_«me
);

91 
i
 = 0; i < 
NRESET
; i++) {

92 
	`as£π_d_eq
(
	`mÆl˘l
("¥of.ª£t", 
NULL
, NULL, NULL, 0), 0,

94 
	`mÆl˘l_thªad_«me_gë
(
thªad_«me
);

97 
	`mÆl˘l_thªad_«me_£t
(
thªad_«me
);

98 
	`mÆl˘l_thªad_«me_£t
("");

100  (
NULL
);

101 
	}
}

103 
	$TEST_BEGIN
(
ã°_¥of_thªad_«me_thªaded
)

105 
thd_t
 
thds
[
NTHREADS
];

106 
thd_¨gs
[
NTHREADS
];

107 
i
;

109 
	`ã°_skù_if
(!
c⁄fig_¥of
);

111 
i
 = 0; i < 
NTHREADS
; i++) {

112 
thd_¨gs
[
i
] = i;

113 
	`thd_¸óã
(&
thds
[
i
], 
thd_°¨t
, (*)&
thd_¨gs
[i]);

115 
i
 = 0; i < 
NTHREADS
; i++)

116 
	`thd_joö
(
thds
[
i
], 
NULL
);

117 
	}
}

118 
	gTEST_END


119 #unde‡
NTHREADS


120 #unde‡
NRESET


123 
	$maö
()

126  (
	`ã°
(

127 
ã°_¥of_thªad_«me_vÆid©i⁄
,

128 
ã°_¥of_thªad_«me_thªaded
));

129 
	}
}

	@dep/jemalloc-4.2.0/test/unit/ql.c

1 
	~"ã°/jemÆloc_ã°.h
"

4 
	#NENTRIES
 9

	)

6 
li°_s
 
	tli°_t
;

7 
	$ql_hód
(
	tli°_t
Ë
	tli°_hód_t
;

9 
	sli°_s
 {

10 
	`ql_ñm
(
li°_t
Ë
lök
;

11 
id
;

15 
	$ã°_em±y_li°
(
li°_hód_t
 *
hód
)

17 
li°_t
 *
t
;

18 
i
;

20 
	`as£π_±r_nuŒ
(
	`ql_fú°
(
hód
), "UnexpectedÉlement forÉmptyÜist");

21 
	`as£π_±r_nuŒ
(
	`ql_œ°
(
hód
, 
lök
),

24 
i
 = 0;

25 
	`ql_f‹óch
(
t
, 
hód
, 
lök
) {

26 
i
++;

28 
	`as£π_u_eq
(
i
, 0, "UnexpectedÉlement forÉmptyÜist");

30 
i
 = 0;

31 
	`ql_ªvî£_f‹óch
(
t
, 
hód
, 
lök
) {

32 
i
++;

34 
	`as£π_u_eq
(
i
, 0, "UnexpectedÉlement forÉmptyÜist");

35 
	}
}

37 
	$TEST_BEGIN
(
ã°_ql_em±y
)

39 
li°_hód_t
 
hód
;

41 
	`ql_√w
(&
hód
);

42 
	`ã°_em±y_li°
(&
hód
);

43 
	}
}

44 
TEST_END


47 
	$öô_íåõs
(
li°_t
 *
íåõs
, 
√¡rõs
)

49 
i
;

51 
i
 = 0; i < 
√¡rõs
; i++) {

52 
íåõs
[
i
].
id
 = 'a' + i;

53 
	`ql_ñm_√w
(&
íåõs
[
i
], 
lök
);

55 
	}
}

58 
	$ã°_íåõs_li°
(
li°_hód_t
 *
hód
, 
li°_t
 *
íåõs
, 
√¡rõs
)

60 
li°_t
 *
t
;

61 
i
;

63 
	`as£π_c_eq
(
	`ql_fú°
(
hód
)->
id
, 
íåõs
[0].id, "Element id mismatch");

64 
	`as£π_c_eq
(
	`ql_œ°
(
hód
, 
lök
)->
id
, 
íåõs
[
√¡rõs
-1].id,

67 
i
 = 0;

68 
	`ql_f‹óch
(
t
, 
hód
, 
lök
) {

69 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[
i
].id, "Element id mismatch");

70 
i
++;

73 
i
 = 0;

74 
	`ql_ªvî£_f‹óch
(
t
, 
hód
, 
lök
) {

75 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[
√¡rõs
-
i
-1].id,

77 
i
++;

80 
i
 = 0; i < 
√¡rõs
-1; i++) {

81 
t
 = 
	`ql_√xt
(
hód
, &
íåõs
[
i
], 
lök
);

82 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[
i
+1].id, "Element id mismatch");

84 
	`as£π_±r_nuŒ
(
	`ql_√xt
(
hód
, &
íåõs
[
√¡rõs
-1], 
lök
),

87 
	`as£π_±r_nuŒ
(
	`ql_¥ev
(
hód
, &
íåõs
[0], 
lök
), "UnexpectedÉlement");

88 
i
 = 1; i < 
√¡rõs
; i++) {

89 
t
 = 
	`ql_¥ev
(
hód
, &
íåõs
[
i
], 
lök
);

90 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[
i
-1].id, "Element id mismatch");

92 
	}
}

94 
	$TEST_BEGIN
(
ã°_ql_èû_ö£π
)

96 
li°_hód_t
 
hód
;

97 
li°_t
 
íåõs
[
NENTRIES
];

98 
i
;

100 
	`ql_√w
(&
hód
);

101 
	`öô_íåõs
(
íåõs
, ”¡rõs)/(
li°_t
));

102 
i
 = 0; i < 
NENTRIES
; i++)

103 
	`ql_èû_ö£π
(&
hód
, &
íåõs
[
i
], 
lök
);

105 
	`ã°_íåõs_li°
(&
hód
, 
íåõs
, 
NENTRIES
);

106 
	}
}

107 
TEST_END


109 
	$TEST_BEGIN
(
ã°_ql_èû_ªmove
)

111 
li°_hód_t
 
hód
;

112 
li°_t
 
íåõs
[
NENTRIES
];

113 
i
;

115 
	`ql_√w
(&
hód
);

116 
	`öô_íåõs
(
íåõs
, ”¡rõs)/(
li°_t
));

117 
i
 = 0; i < 
NENTRIES
; i++)

118 
	`ql_èû_ö£π
(&
hód
, &
íåõs
[
i
], 
lök
);

120 
i
 = 0; i < 
NENTRIES
; i++) {

121 
	`ã°_íåõs_li°
(&
hód
, 
íåõs
, 
NENTRIES
-
i
);

122 
	`ql_èû_ªmove
(&
hód
, 
li°_t
, 
lök
);

124 
	`ã°_em±y_li°
(&
hód
);

125 
	}
}

126 
TEST_END


128 
	$TEST_BEGIN
(
ã°_ql_hód_ö£π
)

130 
li°_hód_t
 
hód
;

131 
li°_t
 
íåõs
[
NENTRIES
];

132 
i
;

134 
	`ql_√w
(&
hód
);

135 
	`öô_íåõs
(
íåõs
, ”¡rõs)/(
li°_t
));

136 
i
 = 0; i < 
NENTRIES
; i++)

137 
	`ql_hód_ö£π
(&
hód
, &
íåõs
[
NENTRIES
-
i
-1], 
lök
);

139 
	`ã°_íåõs_li°
(&
hód
, 
íåõs
, 
NENTRIES
);

140 
	}
}

141 
TEST_END


143 
	$TEST_BEGIN
(
ã°_ql_hód_ªmove
)

145 
li°_hód_t
 
hód
;

146 
li°_t
 
íåõs
[
NENTRIES
];

147 
i
;

149 
	`ql_√w
(&
hód
);

150 
	`öô_íåõs
(
íåõs
, ”¡rõs)/(
li°_t
));

151 
i
 = 0; i < 
NENTRIES
; i++)

152 
	`ql_hód_ö£π
(&
hód
, &
íåõs
[
NENTRIES
-
i
-1], 
lök
);

154 
i
 = 0; i < 
NENTRIES
; i++) {

155 
	`ã°_íåõs_li°
(&
hód
, &
íåõs
[
i
], 
NENTRIES
-i);

156 
	`ql_hód_ªmove
(&
hód
, 
li°_t
, 
lök
);

158 
	`ã°_em±y_li°
(&
hód
);

159 
	}
}

160 
TEST_END


162 
	$TEST_BEGIN
(
ã°_ql_ö£π
)

164 
li°_hód_t
 
hód
;

165 
li°_t
 
íåõs
[8];

166 
li°_t
 *
a
, *
b
, *
c
, *
d
, *
e
, *
f
, *
g
, *
h
;

168 
	`ql_√w
(&
hód
);

169 
	`öô_íåõs
(
íåõs
, ”¡rõs)/(
li°_t
));

170 
a
 = &
íåõs
[0];

171 
b
 = &
íåõs
[1];

172 
c
 = &
íåõs
[2];

173 
d
 = &
íåõs
[3];

174 
e
 = &
íåõs
[4];

175 
f
 = &
íåõs
[5];

176 
g
 = &
íåõs
[6];

177 
h
 = &
íåõs
[7];

185 
	`ql_èû_ö£π
(&
hód
, 
f
, 
lök
);

186 
	`ql_bef‹e_ö£π
(&
hód
, 
f
, 
b
, 
lök
);

187 
	`ql_bef‹e_ö£π
(&
hód
, 
f
, 
c
, 
lök
);

188 
	`ql_a·î_ö£π
(
f
, 
h
, 
lök
);

189 
	`ql_a·î_ö£π
(
f
, 
g
, 
lök
);

190 
	`ql_bef‹e_ö£π
(&
hód
, 
b
, 
a
, 
lök
);

191 
	`ql_a·î_ö£π
(
c
, 
d
, 
lök
);

192 
	`ql_bef‹e_ö£π
(&
hód
, 
f
, 
e
, 
lök
);

194 
	`ã°_íåõs_li°
(&
hód
, 
íåõs
, ”¡rõs)/(
li°_t
));

195 
	}
}

196 
TEST_END


199 
	$maö
()

202  (
	`ã°
(

203 
ã°_ql_em±y
,

204 
ã°_ql_èû_ö£π
,

205 
ã°_ql_èû_ªmove
,

206 
ã°_ql_hód_ö£π
,

207 
ã°_ql_hód_ªmove
,

208 
ã°_ql_ö£π
));

209 
	}
}

	@dep/jemalloc-4.2.0/test/unit/qr.c

1 
	~"ã°/jemÆloc_ã°.h
"

4 
	#NENTRIES
 9

	)

6 
	#SPLIT_INDEX
 5

	)

8 
rög_s
 
	trög_t
;

10 
	srög_s
 {

11 
qr
(
rög_t
Ë
	mlök
;

12 
	mid
;

16 
	$öô_íåõs
(
rög_t
 *
íåõs
)

18 
i
;

20 
i
 = 0; i < 
NENTRIES
; i++) {

21 
	`qr_√w
(&
íåõs
[
i
], 
lök
);

22 
íåõs
[
i
].
id
 = 'a' + i;

24 
	}
}

27 
	$ã°_ödïídít_íåõs
(
rög_t
 *
íåõs
)

29 
rög_t
 *
t
;

30 
i
, 
j
;

32 
i
 = 0; i < 
NENTRIES
; i++) {

33 
j
 = 0;

34 
	`qr_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

35 
j
++;

37 
	`as£π_u_eq
(
j
, 1,

41 
i
 = 0; i < 
NENTRIES
; i++) {

42 
j
 = 0;

43 
	`qr_ªvî£_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

44 
j
++;

46 
	`as£π_u_eq
(
j
, 1,

50 
i
 = 0; i < 
NENTRIES
; i++) {

51 
t
 = 
	`qr_√xt
(&
íåõs
[
i
], 
lök
);

52 
	`as£π_±r_eq
(
t
, &
íåõs
[
i
],

56 
i
 = 0; i < 
NENTRIES
; i++) {

57 
t
 = 
	`qr_¥ev
(&
íåõs
[
i
], 
lök
);

58 
	`as£π_±r_eq
(
t
, &
íåõs
[
i
],

62 
	}
}

64 
	$TEST_BEGIN
(
ã°_qr_⁄e
)

66 
rög_t
 
íåõs
[
NENTRIES
];

68 
	`öô_íåõs
(
íåõs
);

69 
	`ã°_ödïídít_íåõs
(
íåõs
);

70 
	}
}

71 
TEST_END


74 
	$ã°_íåõs_rög
(
rög_t
 *
íåõs
)

76 
rög_t
 *
t
;

77 
i
, 
j
;

79 
i
 = 0; i < 
NENTRIES
; i++) {

80 
j
 = 0;

81 
	`qr_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

82 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
i
+
j
Ë% 
NENTRIES
].id,

84 
j
++;

87 
i
 = 0; i < 
NENTRIES
; i++) {

88 
j
 = 0;

89 
	`qr_ªvî£_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

90 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
NENTRIES
+
i
-
j
-1) %

91 
NENTRIES
].
id
, "Element id mismatch");

92 
j
++;

95 
i
 = 0; i < 
NENTRIES
; i++) {

96 
t
 = 
	`qr_√xt
(&
íåõs
[
i
], 
lök
);

97 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
i
+1Ë% 
NENTRIES
].id,

100 
i
 = 0; i < 
NENTRIES
; i++) {

101 
t
 = 
	`qr_¥ev
(&
íåõs
[
i
], 
lök
);

102 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
NENTRIES
+
i
-1) % NENTRIES].id,

105 
	}
}

107 
	$TEST_BEGIN
(
ã°_qr_a·î_ö£π
)

109 
rög_t
 
íåõs
[
NENTRIES
];

110 
i
;

112 
	`öô_íåõs
(
íåõs
);

113 
i
 = 1; i < 
NENTRIES
; i++)

114 
	`qr_a·î_ö£π
(&
íåõs
[
i
 - 1], &íåõs[i], 
lök
);

115 
	`ã°_íåõs_rög
(
íåõs
);

116 
	}
}

117 
TEST_END


119 
	$TEST_BEGIN
(
ã°_qr_ªmove
)

121 
rög_t
 
íåõs
[
NENTRIES
];

122 
rög_t
 *
t
;

123 
i
, 
j
;

125 
	`öô_íåõs
(
íåõs
);

126 
i
 = 1; i < 
NENTRIES
; i++)

127 
	`qr_a·î_ö£π
(&
íåõs
[
i
 - 1], &íåõs[i], 
lök
);

129 
i
 = 0; i < 
NENTRIES
; i++) {

130 
j
 = 0;

131 
	`qr_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

132 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[
i
+
j
].id,

134 
j
++;

136 
j
 = 0;

137 
	`qr_ªvî£_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

138 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[
NENTRIES
 - 1 - 
j
].id,

140 
j
++;

142 
	`qr_ªmove
(&
íåõs
[
i
], 
lök
);

144 
	`ã°_ödïídít_íåõs
(
íåõs
);

145 
	}
}

146 
TEST_END


148 
	$TEST_BEGIN
(
ã°_qr_bef‹e_ö£π
)

150 
rög_t
 
íåõs
[
NENTRIES
];

151 
rög_t
 *
t
;

152 
i
, 
j
;

154 
	`öô_íåõs
(
íåõs
);

155 
i
 = 1; i < 
NENTRIES
; i++)

156 
	`qr_bef‹e_ö£π
(&
íåõs
[
i
 - 1], &íåõs[i], 
lök
);

157 
i
 = 0; i < 
NENTRIES
; i++) {

158 
j
 = 0;

159 
	`qr_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

160 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
NENTRIES
+
i
-
j
) %

161 
NENTRIES
].
id
, "Element id mismatch");

162 
j
++;

165 
i
 = 0; i < 
NENTRIES
; i++) {

166 
j
 = 0;

167 
	`qr_ªvî£_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

168 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
i
+
j
+1Ë% 
NENTRIES
].id,

170 
j
++;

173 
i
 = 0; i < 
NENTRIES
; i++) {

174 
t
 = 
	`qr_√xt
(&
íåõs
[
i
], 
lök
);

175 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
NENTRIES
+
i
-1) % NENTRIES].id,

178 
i
 = 0; i < 
NENTRIES
; i++) {

179 
t
 = 
	`qr_¥ev
(&
íåõs
[
i
], 
lök
);

180 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
i
+1Ë% 
NENTRIES
].id,

183 
	}
}

184 
TEST_END


187 
	$ã°_•lô_íåõs
(
rög_t
 *
íåõs
)

189 
rög_t
 *
t
;

190 
i
, 
j
;

192 
i
 = 0; i < 
NENTRIES
; i++) {

193 
j
 = 0;

194 
	`qr_f‹óch
(
t
, &
íåõs
[
i
], 
lök
) {

195 i‡(
i
 < 
SPLIT_INDEX
) {

196 
	`as£π_c_eq
(
t
->
id
,

197 
íåõs
[(
i
+
j
Ë% 
SPLIT_INDEX
].
id
,

200 
	`as£π_c_eq
(
t
->
id
, 
íåõs
[(
i
+
j
-
SPLIT_INDEX
) %

201 (
NENTRIES
-
SPLIT_INDEX
Ë+ SPLIT_INDEX].
id
,

204 
j
++;

207 
	}
}

209 
	$TEST_BEGIN
(
ã°_qr_mñd_•lô
)

211 
rög_t
 
íåõs
[
NENTRIES
];

212 
i
;

214 
	`öô_íåõs
(
íåõs
);

215 
i
 = 1; i < 
NENTRIES
; i++)

216 
	`qr_a·î_ö£π
(&
íåõs
[
i
 - 1], &íåõs[i], 
lök
);

218 
	`qr_•lô
(&
íåõs
[0], &íåõs[
SPLIT_INDEX
], 
lök
);

219 
	`ã°_•lô_íåõs
(
íåõs
);

221 
	`qr_mñd
(&
íåõs
[0], &íåõs[
SPLIT_INDEX
], 
lök
);

222 
	`ã°_íåõs_rög
(
íåõs
);

224 
	`qr_mñd
(&
íåõs
[0], &íåõs[
SPLIT_INDEX
], 
lök
);

225 
	`ã°_•lô_íåõs
(
íåõs
);

227 
	`qr_•lô
(&
íåõs
[0], &íåõs[
SPLIT_INDEX
], 
lök
);

228 
	`ã°_íåõs_rög
(
íåõs
);

230 
	`qr_•lô
(&
íåõs
[0], &íåõs[0], 
lök
);

231 
	`ã°_íåõs_rög
(
íåõs
);

233 
	`qr_mñd
(&
íåõs
[0], &íåõs[0], 
lök
);

234 
	`ã°_íåõs_rög
(
íåõs
);

235 
	}
}

236 
TEST_END


239 
	$maö
()

242  (
	`ã°
(

243 
ã°_qr_⁄e
,

244 
ã°_qr_a·î_ö£π
,

245 
ã°_qr_ªmove
,

246 
ã°_qr_bef‹e_ö£π
,

247 
ã°_qr_mñd_•lô
));

248 
	}
}

	@dep/jemalloc-4.2.0/test/unit/quarantine.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#QUARANTINE_SIZE
 8192

	)

4 
	#STRINGIFY_HELPER
(
x
Ë#x

	)

5 
	#STRINGIFY
(
x
Ë
	`STRINGIFY_HELPER
(x)

	)

7 #ifde‡
JEMALLOC_FILL


8 c⁄° *
	gmÆloc_c⁄f
 = "abort:false,junk:true,redzone:true,quarantine:"

9 
STRINGIFY
(
QUARANTINE_SIZE
);

13 
	$qu¨™töe_˛ór
()

15 *
p
;

17 
p
 = 
	`mÆlocx
(
QUARANTINE_SIZE
*2, 0);

18 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

19 
	`dÆlocx
(
p
, 0);

20 
	}
}

22 
	$TEST_BEGIN
(
ã°_qu¨™töe
)

24 
	#SZ
 
	`ZU
(256)

	)

25 
	#NQUARANTINED
 (
QUARANTINE_SIZE
/
SZ
)

	)

26 *
qu¨™töed
[
NQUARANTINED
+1];

27 
size_t
 
i
, 
j
;

29 
	`ã°_skù_if
(!
c⁄fig_fûl
);

31 
	`as£π_zu_eq
(
	`«Œocx
(
SZ
, 0), SZ,

32 "SZ=%zu d€†nŸÖªci£lyÉquÆá sizê˛ass", 
SZ
);

34 
	`qu¨™töe_˛ór
();

43 
i
 = 0; i < 
NQUARANTINED
+1; i++) {

44 *
p
 = 
	`mÆlocx
(
SZ
, 0);

45 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

46 
qu¨™töed
[
i
] = 
p
;

47 
	`dÆlocx
(
p
, 0);

48 
j
 = 0; j < 
i
; j++) {

49 
	`as£π_±r_√
(
p
, 
qu¨™töed
[
j
],

51 "i=%zu, j=%zu", 
i
, 
j
);

54 #unde‡
NQUARANTINED


55 #unde‡
SZ


56 
	}
}

57 
TEST_END


59 
boﬁ
 
	gdëe˘ed_ªdz⁄e_c‹ru±i⁄
;

62 
	$¨ía_ªdz⁄e_c‹ru±i⁄_ª∂a˚mít
(*
±r
, 
size_t
 
usize
, 
boﬁ
 
a·î
,

63 
size_t
 
off£t
, 
uöt8_t
 
byã
)

66 
dëe˘ed_ªdz⁄e_c‹ru±i⁄
 = 
åue
;

67 
	}
}

69 
	$TEST_BEGIN
(
ã°_qu¨™töe_ªdz⁄e
)

71 *
s
;

72 
¨ía_ªdz⁄e_c‹ru±i⁄_t
 *
¨ía_ªdz⁄e_c‹ru±i⁄_‹ig
;

74 
	`ã°_skù_if
(!
c⁄fig_fûl
);

76 
¨ía_ªdz⁄e_c‹ru±i⁄_‹ig
 = 
¨ía_ªdz⁄e_c‹ru±i⁄
;

77 
¨ía_ªdz⁄e_c‹ru±i⁄
 = 
¨ía_ªdz⁄e_c‹ru±i⁄_ª∂a˚mít
;

80 
dëe˘ed_ªdz⁄e_c‹ru±i⁄
 = 
Ál£
;

81 
s
 = (*)
	`mÆlocx
(1, 0);

82 
	`as£π_±r_nŸ_nuŒ
((*)
s
, "Unexpected mallocx() failure");

83 
s
[-1] = 0xbb;

84 
	`dÆlocx
(
s
, 0);

85 
	`as£π_åue
(
dëe˘ed_ªdz⁄e_c‹ru±i⁄
,

89 
dëe˘ed_ªdz⁄e_c‹ru±i⁄
 = 
Ál£
;

90 
s
 = (*)
	`mÆlocx
(1, 0);

91 
	`as£π_±r_nŸ_nuŒ
((*)
s
, "Unexpected mallocx() failure");

92 
s
[
	`ßŒocx
(s, 0)] = 0xbb;

93 
	`dÆlocx
(
s
, 0);

94 
	`as£π_åue
(
dëe˘ed_ªdz⁄e_c‹ru±i⁄
,

97 
¨ía_ªdz⁄e_c‹ru±i⁄
 = 
¨ía_ªdz⁄e_c‹ru±i⁄_‹ig
;

98 
	}
}

99 
TEST_END


102 
	$maö
()

105  (
	`ã°
(

106 
ã°_qu¨™töe
,

107 
ã°_qu¨™töe_ªdz⁄e
));

108 
	}
}

	@dep/jemalloc-4.2.0/test/unit/rb.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#rbä_bœck_height
(
a_ty≥
, 
a_fõld
, 
a_rbt
, 
r_height
) do { \

4 
a_ty≥
 *
rbp_bh_t
; \

5 
rbp_bh_t
 = (
a_rbt
)->
rbt_roŸ
, (
r_height
) = 0; \

6 
rbp_bh_t
 !
NULL
; \

7 
rbp_bh_t
 = 
	`rbä_À·_gë
(
a_ty≥
, 
a_fõld
,Ñbp_bh_t)) { \

8 i‡(!
	`rbä_ªd_gë
(
a_ty≥
, 
a_fõld
, 
rbp_bh_t
)) { \

9 (
r_height
)++; \

12 } 0)

	)

14 
node_s
 
	tnode_t
;

16 
	snode_s
 {

17 
	#NODE_MAGIC
 0x9823af7e

	)

18 
uöt32_t
 
	mmagic
;

19 
rb_node
(
node_t
Ë
	mlök
;

20 
uöt64_t
 
	mkey
;

24 
	$node_cmp
(c⁄° 
node_t
 *
a
, c⁄°Çode_à*
b
) {

25 
ªt
;

27 
	`as£π_u32_eq
(
a
->
magic
, 
NODE_MAGIC
, "Bad magic");

28 
	`as£π_u32_eq
(
b
->
magic
, 
NODE_MAGIC
, "Bad magic");

30 
ªt
 = (
a
->
key
 > 
b
->key) - (a->key < b->key);

31 i‡(
ªt
 == 0) {

36 
ªt
 = (((
uöçå_t
)
a
Ë> ((uöçå_t)
b
))

37 - (((
uöçå_t
)
a
Ë< ((uöçå_t)
b
));

39  (
ªt
);

40 
	}
}

42 
	$rb_åì
(
	tnode_t
Ë
	tåì_t
;

43 
	`rb_gí
(, 
åì_
, 
åì_t
, 
node_t
, 
lök
, 
node_cmp
);

45 
	$TEST_BEGIN
(
ã°_rb_em±y
)

47 
åì_t
 
åì
;

48 
node_t
 
key
;

50 
	`åì_√w
(&
åì
);

52 
	`as£π_åue
(
	`åì_em±y
(&
åì
), "Tree should beÉmpty");

53 
	`as£π_±r_nuŒ
(
	`åì_fú°
(&
åì
), "UnexpectedÇode");

54 
	`as£π_±r_nuŒ
(
	`åì_œ°
(&
åì
), "UnexpectedÇode");

56 
key
.key = 0;

57 
key
.
magic
 = 
NODE_MAGIC
;

58 
	`as£π_±r_nuŒ
(
	`åì_£¨ch
(&
åì
, &
key
), "UnexpectedÇode");

60 
key
.key = 0;

61 
key
.
magic
 = 
NODE_MAGIC
;

62 
	`as£π_±r_nuŒ
(
	`åì_n£¨ch
(&
åì
, &
key
), "UnexpectedÇode");

64 
key
.key = 0;

65 
key
.
magic
 = 
NODE_MAGIC
;

66 
	`as£π_±r_nuŒ
(
	`åì_p£¨ch
(&
åì
, &
key
), "UnexpectedÇode");

67 
	}
}

68 
TEST_END


71 
	$åì_ªcur£
(
node_t
 *
node
, 
bœck_height
, 
bœck_dïth
)

73 
ªt
 = 0;

74 
node_t
 *
À·_node
;

75 
node_t
 *
right_node
;

77 i‡(
node
 =
NULL
)

78  (
ªt
);

80 
À·_node
 = 
	`rbä_À·_gë
(
node_t
, 
lök
, 
node
);

81 
right_node
 = 
	`rbä_right_gë
(
node_t
, 
lök
, 
node
);

83 i‡(!
	`rbä_ªd_gë
(
node_t
, 
lök
, 
node
))

84 
bœck_dïth
++;

87 i‡(
	`rbä_ªd_gë
(
node_t
, 
lök
, 
node
)) {

88 i‡(
À·_node
 !
NULL
)

89 
	`as£π_Ál£
(
	`rbä_ªd_gë
(
node_t
, 
lök
, 
À·_node
),

91 i‡(
right_node
 !
NULL
)

92 
	`as£π_Ál£
(
	`rbä_ªd_gë
(
node_t
, 
lök
, 
right_node
),

97 
	`as£π_u32_eq
(
node
->
magic
, 
NODE_MAGIC
, "Bad magic");

100 i‡(
À·_node
 !
NULL
)

101 
ªt
 +
	`åì_ªcur£
(
À·_node
, 
bœck_height
, 
bœck_dïth
);

103 
ªt
 +(
bœck_dïth
 !
bœck_height
);

106 i‡(
right_node
 !
NULL
)

107 
ªt
 +
	`åì_ªcur£
(
right_node
, 
bœck_height
, 
bœck_dïth
);

109 
ªt
 +(
bœck_dïth
 !
bœck_height
);

111  (
ªt
);

112 
	}
}

114 
node_t
 *

115 
	$åì_ôî©e_cb
(
åì_t
 *
åì
, 
node_t
 *
node
, *
d©a
)

117 *
i
 = (*)
d©a
;

118 
node_t
 *
£¨ch_node
;

120 
	`as£π_u32_eq
(
node
->
magic
, 
NODE_MAGIC
, "Bad magic");

123 
£¨ch_node
 = 
	`åì_£¨ch
(
åì
, 
node
);

124 
	`as£π_±r_eq
(
£¨ch_node
, 
node
,

128 
£¨ch_node
 = 
	`åì_n£¨ch
(
åì
, 
node
);

129 
	`as£π_±r_eq
(
£¨ch_node
, 
node
,

133 
£¨ch_node
 = 
	`åì_p£¨ch
(
åì
, 
node
);

134 
	`as£π_±r_eq
(
£¨ch_node
, 
node
,

137 (*
i
)++;

139  (
NULL
);

140 
	}
}

143 
	$åì_ôî©e
(
åì_t
 *
åì
)

145 
i
;

147 
i
 = 0;

148 
	`åì_ôî
(
åì
, 
NULL
, 
åì_ôî©e_cb
, (*)&
i
);

150  (
i
);

151 
	}
}

154 
	$åì_ôî©e_ªvî£
(
åì_t
 *
åì
)

156 
i
;

158 
i
 = 0;

159 
	`åì_ªvî£_ôî
(
åì
, 
NULL
, 
åì_ôî©e_cb
, (*)&
i
);

161  (
i
);

162 
	}
}

165 
	$node_ªmove
(
åì_t
 *
åì
, 
node_t
 *
node
, 
¬odes
)

167 
node_t
 *
£¨ch_node
;

168 
bœck_height
, 
imbÆ™˚s
;

170 
	`åì_ªmove
(
åì
, 
node
);

173 
£¨ch_node
 = 
	`åì_n£¨ch
(
åì
, 
node
);

174 i‡(
£¨ch_node
 !
NULL
) {

175 
	`as£π_u64_ge
(
£¨ch_node
->
key
, 
node
->key,

180 
£¨ch_node
 = 
	`åì_p£¨ch
(
åì
, 
node
);

181 i‡(
£¨ch_node
 !
NULL
) {

182 
	`as£π_u64_À
(
£¨ch_node
->
key
, 
node
->key,

186 
node
->
magic
 = 0;

188 
	`rbä_bœck_height
(
node_t
, 
lök
, 
åì
, 
bœck_height
);

189 
imbÆ™˚s
 = 
	`åì_ªcur£
(
åì
->
rbt_roŸ
, 
bœck_height
, 0);

190 
	`as£π_u_eq
(
imbÆ™˚s
, 0, "Tree is unbalanced");

191 
	`as£π_u_eq
(
	`åì_ôî©e
(
åì
), 
¬odes
-1,

193 
	`as£π_u_eq
(
	`åì_ôî©e_ªvî£
(
åì
), 
¬odes
-1,

195 
	}
}

197 
node_t
 *

198 
	$ªmove_ôî©e_cb
(
åì_t
 *
åì
, 
node_t
 *
node
, *
d©a
)

200 *
¬odes
 = (*)
d©a
;

201 
node_t
 *
ªt
 = 
	`åì_√xt
(
åì
, 
node
);

203 
	`node_ªmove
(
åì
, 
node
, *
¬odes
);

205  (
ªt
);

206 
	}
}

208 
node_t
 *

209 
	$ªmove_ªvî£_ôî©e_cb
(
åì_t
 *
åì
, 
node_t
 *
node
, *
d©a
)

211 *
¬odes
 = (*)
d©a
;

212 
node_t
 *
ªt
 = 
	`åì_¥ev
(
åì
, 
node
);

214 
	`node_ªmove
(
åì
, 
node
, *
¬odes
);

216  (
ªt
);

217 
	}
}

220 
	$de°roy_cb
(
node_t
 *
node
, *
d©a
)

222 *
¬odes
 = (*)
d©a
;

224 
	`as£π_u_gt
(*
¬odes
, 0, "DestructionÑemovedÅoo manyÇodes");

225 (*
¬odes
)--;

226 
	}
}

228 
	$TEST_BEGIN
(
ã°_rb_øndom
)

230 
	#NNODES
 25

	)

231 
	#NBAGS
 250

	)

232 
	#SEED
 42

	)

233 
sfmt_t
 *
sfmt
;

234 
uöt64_t
 
bag
[
NNODES
];

235 
åì_t
 
åì
;

236 
node_t
 
nodes
[
NNODES
];

237 
i
, 
j
, 
k
, 
bœck_height
, 
imbÆ™˚s
;

239 
sfmt
 = 
	`öô_gí_ønd
(
SEED
);

240 
i
 = 0; i < 
NBAGS
; i++) {

241 
i
) {

244 
j
 = 0; j < 
NNODES
; j++)

245 
bag
[
j
] = j;

249 
j
 = 0; j < 
NNODES
; j++)

250 
bag
[
j
] = 
NNODES
 - j - 1;

253 
j
 = 0; j < 
NNODES
; j++)

254 
bag
[
j
] = 
	`gí_ønd64_ønge
(
sfmt
, 
NNODES
);

257 
j
 = 1; j <
NNODES
; j++) {

259 
	`åì_√w
(&
åì
);

260 
k
 = 0; k < 
j
; k++) {

261 
nodes
[
k
].
magic
 = 
NODE_MAGIC
;

262 
nodes
[
k
].
key
 = 
bag
[k];

266 
k
 = 0; k < 
j
; k++) {

267 
	`åì_ö£π
(&
åì
, &
nodes
[
k
]);

269 
	`rbä_bœck_height
(
node_t
, 
lök
, &
åì
,

270 
bœck_height
);

271 
imbÆ™˚s
 = 
	`åì_ªcur£
(
åì
.
rbt_roŸ
,

272 
bœck_height
, 0);

273 
	`as£π_u_eq
(
imbÆ™˚s
, 0,

276 
	`as£π_u_eq
(
	`åì_ôî©e
(&
åì
), 
k
+1,

278 
	`as£π_u_eq
(
	`åì_ôî©e_ªvî£
(&
åì
), 
k
+1,

281 
	`as£π_Ál£
(
	`åì_em±y
(&
åì
),

283 
	`as£π_±r_nŸ_nuŒ
(
	`åì_fú°
(&
åì
),

285 
	`as£π_±r_nŸ_nuŒ
(
	`åì_œ°
(&
åì
),

288 
	`åì_√xt
(&
åì
, &
nodes
[
k
]);

289 
	`åì_¥ev
(&
åì
, &
nodes
[
k
]);

293 
i
 % 5) {

295 
k
 = 0; k < 
j
; k++)

296 
	`node_ªmove
(&
åì
, &
nodes
[
k
], 
j
 - k);

299 
k
 = 
j
; k > 0; k--)

300 
	`node_ªmove
(&
åì
, &
nodes
[
k
-1], k);

303 
node_t
 *
°¨t
;

304 
¬odes
 = 
j
;

306 
°¨t
 = 
NULL
;

308 
°¨t
 = 
	`åì_ôî
(&
åì
, start,

309 
ªmove_ôî©e_cb
, (*)&
¬odes
);

310 
¬odes
--;

311 } 
°¨t
 !
NULL
);

312 
	`as£π_u_eq
(
¬odes
, 0,

316 
node_t
 *
°¨t
;

317 
¬odes
 = 
j
;

319 
°¨t
 = 
NULL
;

321 
°¨t
 = 
	`åì_ªvî£_ôî
(&
åì
, start,

322 
ªmove_ªvî£_ôî©e_cb
,

323 (*)&
¬odes
);

324 
¬odes
--;

325 } 
°¨t
 !
NULL
);

326 
	`as£π_u_eq
(
¬odes
, 0,

330 
¬odes
 = 
j
;

331 
	`åì_de°roy
(&
åì
, 
de°roy_cb
, &
¬odes
);

332 
	`as£π_u_eq
(
¬odes
, 0,

336 
	`nŸ_ªached
();

340 
	`föi_gí_ønd
(
sfmt
);

341 #unde‡
NNODES


342 #unde‡
NBAGS


343 #unde‡
SEED


344 
	}
}

345 
TEST_END


348 
	$maö
()

351  (
	`ã°
(

352 
ã°_rb_em±y
,

353 
ã°_rb_øndom
));

354 
	}
}

	@dep/jemalloc-4.2.0/test/unit/rtree.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
πªe_node_ñm_t
 *

4 
	$node_Æloc
(
size_t
 
√lms
)

7  ((
πªe_node_ñm_t
 *)
	`ˇŒoc
(
√lms
, (rtree_node_elm_t)));

8 
	}
}

11 
	$node_dÆloc
(
πªe_node_ñm_t
 *
node
)

14 
	`‰ì
(
node
);

15 
	}
}

17 
	$TEST_BEGIN
(
ã°_πªe_gë_em±y
)

19 
i
;

21 
i
 = 1; i <((
uöçå_t
) << 3); i++) {

22 
πªe_t
 
πªe
;

23 
	`as£π_Ál£
(
	`πªe_√w
(&
πªe
, 
i
, 
node_Æloc
, 
node_dÆloc
),

25 
	`as£π_±r_nuŒ
(
	`πªe_gë
(&
πªe
, 0, 
Ál£
),

27 
	`πªe_dñëe
(&
πªe
);

29 
	}
}

30 
TEST_END


32 
	$TEST_BEGIN
(
ã°_πªe_exåema
)

34 
i
;

35 
exã¡_node_t
 
node_a
, 
node_b
;

37 
i
 = 1; i <((
uöçå_t
) << 3); i++) {

38 
πªe_t
 
πªe
;

39 
	`as£π_Ál£
(
	`πªe_√w
(&
πªe
, 
i
, 
node_Æloc
, 
node_dÆloc
),

42 
	`as£π_Ál£
(
	`πªe_£t
(&
πªe
, 0, &
node_a
),

44 
	`as£π_±r_eq
(
	`πªe_gë
(&
πªe
, 0, 
åue
), &
node_a
,

47 
	`as£π_Ál£
(
	`πªe_£t
(&
πªe
, ~((
uöçå_t
)0), &
node_b
),

49 
	`as£π_±r_eq
(
	`πªe_gë
(&
πªe
, ~((
uöçå_t
)0), 
åue
), &
node_b
,

52 
	`πªe_dñëe
(&
πªe
);

54 
	}
}

55 
TEST_END


57 
	$TEST_BEGIN
(
ã°_πªe_bôs
)

59 
i
, 
j
, 
k
;

61 
i
 = 1; i < ((
uöçå_t
) << 3); i++) {

62 
uöçå_t
 
keys
[] = {0, 1,

63 (((
uöçå_t
)1Ë<< ((uöçå_t)*8-
i
)) - 1};

64 
exã¡_node_t
 
node
;

65 
πªe_t
 
πªe
;

67 
	`as£π_Ál£
(
	`πªe_√w
(&
πªe
, 
i
, 
node_Æloc
, 
node_dÆloc
),

70 
j
 = 0; j < (
keys
)/(
uöçå_t
); j++) {

71 
	`as£π_Ál£
(
	`πªe_£t
(&
πªe
, 
keys
[
j
], &
node
),

73 
k
 = 0; k < (
keys
)/(
uöçå_t
); k++) {

74 
	`as£π_±r_eq
(
	`πªe_gë
(&
πªe
, 
keys
[
k
], 
åue
),

75 &
node
, "rtree_get() shouldÑeturn "

78 "£àkey=%#"
FMTxPTR
", gë key=%#"FMTxPTR, 
i
,

79 
j
, 
k
, 
keys
[j], keys[k]);

81 
	`as£π_±r_nuŒ
(
	`πªe_gë
(&
πªe
,

82 (((
uöçå_t
)1Ë<< ((uöçå_t)*8-
i
)), 
Ál£
),

84 "i=%u, j=%u", 
i
, 
j
);

85 
	`as£π_Ál£
(
	`πªe_£t
(&
πªe
, 
keys
[
j
], 
NULL
),

89 
	`πªe_dñëe
(&
πªe
);

91 
	}
}

92 
TEST_END


94 
	$TEST_BEGIN
(
ã°_πªe_øndom
)

96 
i
;

97 
sfmt_t
 *
sfmt
;

98 
	#NSET
 16

	)

99 
	#SEED
 42

	)

101 
sfmt
 = 
	`öô_gí_ønd
(
SEED
);

102 
i
 = 1; i <((
uöçå_t
) << 3); i++) {

103 
uöçå_t
 
keys
[
NSET
];

104 
exã¡_node_t
 
node
;

105 
j
;

106 
πªe_t
 
πªe
;

108 
	`as£π_Ál£
(
	`πªe_√w
(&
πªe
, 
i
, 
node_Æloc
, 
node_dÆloc
),

111 
j
 = 0; j < 
NSET
; j++) {

112 
keys
[
j
] = (
uöçå_t
)
	`gí_ønd64
(
sfmt
);

113 
	`as£π_Ál£
(
	`πªe_£t
(&
πªe
, 
keys
[
j
], &
node
),

115 
	`as£π_±r_eq
(
	`πªe_gë
(&
πªe
, 
keys
[
j
], 
åue
), &
node
,

118 
j
 = 0; j < 
NSET
; j++) {

119 
	`as£π_±r_eq
(
	`πªe_gë
(&
πªe
, 
keys
[
j
], 
åue
), &
node
,

123 
j
 = 0; j < 
NSET
; j++) {

124 
	`as£π_Ál£
(
	`πªe_£t
(&
πªe
, 
keys
[
j
], 
NULL
),

126 
	`as£π_±r_nuŒ
(
	`πªe_gë
(&
πªe
, 
keys
[
j
], 
åue
),

129 
j
 = 0; j < 
NSET
; j++) {

130 
	`as£π_±r_nuŒ
(
	`πªe_gë
(&
πªe
, 
keys
[
j
], 
åue
),

134 
	`πªe_dñëe
(&
πªe
);

136 
	`föi_gí_ønd
(
sfmt
);

137 #unde‡
NSET


138 #unde‡
SEED


139 
	}
}

140 
TEST_END


143 
	$maö
()

146  (
	`ã°
(

147 
ã°_πªe_gë_em±y
,

148 
ã°_πªe_exåema
,

149 
ã°_πªe_bôs
,

150 
ã°_πªe_øndom
));

151 
	}
}

	@dep/jemalloc-4.2.0/test/unit/run_quantize.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_smÆl_run_size
)

5 
nbös
, 
i
;

6 
size_t
 
sz
, 
run_size
;

7 
size_t
 
mib
[4];

8 
size_t
 
mibÀn
 = (
mib
) / (size_t);

15 
sz
 = ();

16 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.nbös", &
nbös
, &
sz
, 
NULL
, 0), 0,

19 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ías.bö.0.run_size", 
mib
, &
mibÀn
), 0,

21 
i
 = 0; i < 
nbös
; i++) {

22 
mib
[2] = 
i
;

23 
sz
 = (
size_t
);

24 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
run_size
, &
sz
, 
NULL
, 0),

26 
	`as£π_zu_eq
(
run_size
, 
	`run_qu™tize_Êo‹
(run_size),

28 
run_size
);

29 
	`as£π_zu_eq
(
run_size
, 
	`run_qu™tize_˚û
(run_size),

31 
run_size
);

33 
	}
}

34 
TEST_END


36 
	$TEST_BEGIN
(
ã°_œrge_run_size
)

38 
boﬁ
 
ˇche_oblivious
;

39 
∆runs
, 
i
;

40 
size_t
 
sz
, 
run_size_¥ev
, 
˚û_¥ev
;

41 
size_t
 
mib
[4];

42 
size_t
 
mibÀn
 = (
mib
) / (size_t);

49 
sz
 = (
boﬁ
);

50 
	`as£π_d_eq
(
	`mÆl˘l
("c⁄fig.ˇche_oblivious", &
ˇche_oblivious
, &
sz
,

51 
NULL
, 0), 0, "Unexpected mallctl failure");

53 
sz
 = ();

54 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.∆runs", &
∆runs
, &
sz
, 
NULL
, 0), 0,

57 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ías.Ãun.0.size", 
mib
, &
mibÀn
), 0,

59 
i
 = 0; i < 
∆runs
; i++) {

60 
size_t
 
Ãun_size
, 
run_size
, 
Êo‹
, 
˚û
;

62 
mib
[2] = 
i
;

63 
sz
 = (
size_t
);

64 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
Ãun_size
, &
sz
, 
NULL
, 0),

66 
run_size
 = 
ˇche_oblivious
 ? 
Ãun_size
 + 
PAGE
 :Ürun_size;

67 
Êo‹
 = 
	`run_qu™tize_Êo‹
(
run_size
);

68 
˚û
 = 
	`run_qu™tize_˚û
(
run_size
);

70 
	`as£π_zu_eq
(
run_size
, 
Êo‹
,

72 "sizê÷run_size=%zu,Ñun_size=%zu)", 
Ãun_size
, 
run_size
);

73 
	`as£π_zu_eq
(
run_size
, 
˚û
,

75 "sizê÷run_size=%zu,Ñun_size=%zu)", 
Ãun_size
, 
run_size
);

77 i‡(
i
 > 0) {

78 
	`as£π_zu_eq
(
run_size_¥ev
, 
	`run_qu™tize_Êo‹
(
run_size


79 - 
PAGE
), "Floor should beáÖrecise size");

80 i‡(
run_size_¥ev
 < 
˚û_¥ev
) {

81 
	`as£π_zu_eq
(
˚û_¥ev
, 
run_size
,

84 "run_size=%zu)", 
run_size_¥ev
, 
˚û_¥ev
,

85 
run_size
);

88 
run_size_¥ev
 = 
Êo‹
;

89 
˚û_¥ev
 = 
	`run_qu™tize_˚û
(
run_size
 + 
PAGE
);

91 
	}
}

92 
TEST_END


94 
	$TEST_BEGIN
(
ã°_m⁄Ÿ⁄ic
)

96 
nbös
, 
∆runs
, 
i
;

97 
size_t
 
sz
, 
Êo‹_¥ev
, 
˚û_¥ev
;

104 
sz
 = ();

105 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.nbös", &
nbös
, &
sz
, 
NULL
, 0), 0,

108 
sz
 = ();

109 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.∆runs", &
∆runs
, &
sz
, 
NULL
, 0), 0,

112 
Êo‹_¥ev
 = 0;

113 
˚û_¥ev
 = 0;

114 
i
 = 1; i < 
run_qu™tize_max
 >> 
LG_PAGE
; i++) {

115 
size_t
 
run_size
, 
Êo‹
, 
˚û
;

117 
run_size
 = 
i
 << 
LG_PAGE
;

118 
Êo‹
 = 
	`run_qu™tize_Êo‹
(
run_size
);

119 
˚û
 = 
	`run_qu™tize_˚û
(
run_size
);

121 
	`as£π_zu_À
(
Êo‹
, 
run_size
,

123 
Êo‹
, 
run_size
, 
˚û
);

124 
	`as£π_zu_ge
(
˚û
, 
run_size
,

126 
Êo‹
, 
run_size
, 
˚û
);

128 
	`as£π_zu_À
(
Êo‹_¥ev
, 
Êo‹
, "Floor should be monotonic "

130 
Êo‹_¥ev
, 
Êo‹
, 
run_size
, 
˚û
);

131 
	`as£π_zu_À
(
˚û_¥ev
, 
˚û
, "Ceiling should be monotonic "

133 
Êo‹
, 
run_size
, 
˚û_¥ev
, 
˚û
);

135 
Êo‹_¥ev
 = 
Êo‹
;

136 
˚û_¥ev
 = 
˚û
;

138 
	}
}

139 
TEST_END


142 
	$maö
()

145  (
	`ã°
(

146 
ã°_smÆl_run_size
,

147 
ã°_œrge_run_size
,

148 
ã°_m⁄Ÿ⁄ic
));

149 
	}
}

	@dep/jemalloc-4.2.0/test/unit/size_classes.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
size_t


4 
	$gë_max_size_˛ass
()

6 
nhchunks
;

7 
size_t
 
mib
[4];

8 
size_t
 
sz
, 
mibÀn
, 
max_size_˛ass
;

10 
sz
 = ();

11 
	`as£π_d_eq
(
	`mÆl˘l
("¨ías.nhchunks", &
nhchunks
, &
sz
, 
NULL
, 0), 0,

14 
mibÀn
 = (
mib
Ë/ (
size_t
);

15 
	`as£π_d_eq
(
	`mÆl˘ amëomib
("¨ías.hchunk.0.size", 
mib
, &
mibÀn
), 0,

17 
mib
[2] = 
nhchunks
 - 1;

19 
sz
 = (
size_t
);

20 
	`as£π_d_eq
(
	`mÆl˘lbymib
(
mib
, 
mibÀn
, &
max_size_˛ass
, &
sz
, 
NULL
, 0), 0,

23  (
max_size_˛ass
);

24 
	}
}

26 
	$TEST_BEGIN
(
ã°_size_˛as£s
)

28 
size_t
 
size_˛ass
, 
max_size_˛ass
;

29 
szöd_t
 
ödex
, 
max_ödex
;

31 
max_size_˛ass
 = 
	`gë_max_size_˛ass
();

32 
max_ödex
 = 
	`size2ödex
(
max_size_˛ass
);

34 
ödex
 = 0, 
size_˛ass
 = 
	`ödex2size
(ödex); index < 
max_ödex
 ||

35 
size_˛ass
 < 
max_size_˛ass
; 
ödex
++, size_class =

36 
	`ödex2size
(
ödex
)) {

37 
	`as£π_åue
(
ödex
 < 
max_ödex
,

39 "size_˛ass=%zu (%#zx)", 
ödex
, 
size_˛ass
, size_class);

40 
	`as£π_åue
(
size_˛ass
 < 
max_size_˛ass
,

42 "size_˛ass=%zu (%#zx)", 
ödex
, 
size_˛ass
, size_class);

44 
	`as£π_u_eq
(
ödex
, 
	`size2ödex
(
size_˛ass
),

46 " size_˛ass=%zu --> index=%u --> size_˛ass=%zu", 
ödex
,

47 
size_˛ass
, 
	`size2ödex
(size_class),

48 
	`ödex2size
(
	`size2ödex
(
size_˛ass
)));

49 
	`as£π_zu_eq
(
size_˛ass
, 
	`ödex2size
(
	`size2ödex
(size_class)),

51 " size_˛ass=%zu --> index=%u --> size_˛ass=%zu", 
ödex
,

52 
size_˛ass
, 
	`size2ödex
(size_class),

53 
	`ödex2size
(
	`size2ödex
(
size_˛ass
)));

55 
	`as£π_u_eq
(
ödex
+1, 
	`size2ödex
(
size_˛ass
+1),

58 
	`as£π_zu_eq
(
size_˛ass
, (
ödex
 > 0) ?

59 
	`s2u
(
	`ödex2size
(
ödex
-1)+1) : s2u(1),

61 
	`as£π_zu_eq
(
size_˛ass
, 
	`s2u
(size_class-1),

63 
	`as£π_zu_eq
(
size_˛ass
, 
	`s2u
(size_class),

65 
	`as£π_zu_eq
(
	`s2u
(
size_˛ass
+1), 
	`ödex2size
(
ödex
+1),

69 
	`as£π_u_eq
(
ödex
, 
	`size2ödex
(
	`ödex2size
(index)),

71 
	`as£π_zu_eq
(
max_size_˛ass
, 
	`ödex2size
(
	`size2ödex
(max_size_class)),

74 
	`as£π_zu_eq
(
size_˛ass
, 
	`s2u
(
	`ödex2size
(
ödex
-1)+1),

76 
	`as£π_zu_eq
(
size_˛ass
, 
	`s2u
(size_class-1),

78 
	`as£π_zu_eq
(
size_˛ass
, 
	`s2u
(size_class),

80 
	}
}

81 
TEST_END


83 
	$TEST_BEGIN
(
ã°_ovîÊow
)

85 
size_t
 
max_size_˛ass
;

87 
max_size_˛ass
 = 
	`gë_max_size_˛ass
();

89 
	`as£π_u_ge
(
	`size2ödex
(
max_size_˛ass
+1), 
NSIZES
,

91 
	`as£π_u_ge
(
	`size2ödex
(
	`ZU
(
PTRDIFF_MAX
)+1), 
NSIZES
,

93 
	`as£π_u_ge
(
	`size2ödex
(
SIZE_T_MAX
), 
NSIZES
,

96 
	`as£π_zu_gt
(
	`s2u
(
max_size_˛ass
+1), 
HUGE_MAXCLASS
,

98 
	`as£π_zu_gt
(
	`s2u
(
	`ZU
(
PTRDIFF_MAX
)+1), 
HUGE_MAXCLASS
,

100 
	`as£π_zu_eq
(
	`s2u
(
SIZE_T_MAX
), 0,

102 
	}
}

103 
TEST_END


106 
	$maö
()

109  (
	`ã°
(

110 
ã°_size_˛as£s
,

111 
ã°_ovîÊow
));

112 
	}
}

	@dep/jemalloc-4.2.0/test/unit/smoothstep.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 c⁄° 
uöt64_t
 
	gsmoŸh°ï_èb
[] = {

4 
	#STEP
(
°ï
, 
h
, 
x
, 
y
) \

5 
h
,

	)

6 
SMOOTHSTEP


7 #unde‡
STEP


10 
	$TEST_BEGIN
(
ã°_smoŸh°ï_öãgøl
)

12 
uöt64_t
 
sum
, 
mö
, 
max
;

13 
i
;

22 
sum
 = 0;

23 
i
 = 0; i < 
SMOOTHSTEP_NSTEPS
; i++)

24 
sum
 +
smoŸh°ï_èb
[
i
];

26 
max
 = (
	`KQU
(1Ë<< (
SMOOTHSTEP_BFP
-1)Ë* (
SMOOTHSTEP_NSTEPS
+1);

27 
mö
 = 
max
 - 
SMOOTHSTEP_NSTEPS
;

29 
	`as£π_u64_ge
(
sum
, 
mö
,

31 
	`as£π_u64_À
(
sum
, 
max
, "IntegralÉxceeds 1/2");

32 i‡(
Ál£
) {

33 
	`mÆloc_¥ötf
("%"
FMTu64
" ulps under 1/2 (limit %d)\n",

34 
max
 - 
sum
, 
SMOOTHSTEP_NSTEPS
);

36 
	}
}

37 
TEST_END


39 
	$TEST_BEGIN
(
ã°_smoŸh°ï_m⁄Ÿ⁄ic
)

41 
uöt64_t
 
¥ev_h
;

42 
i
;

50 
¥ev_h
 = 0;

51 
i
 = 0; i < 
SMOOTHSTEP_NSTEPS
; i++) {

52 
uöt64_t
 
h
 = 
smoŸh°ï_èb
[
i
];

53 
	`as£π_u64_ge
(
h
, 
¥ev_h
, "Põ˚wi£Ç⁄-m⁄Ÿ⁄ic, i=%u", 
i
);

54 
¥ev_h
 = 
h
;

56 
	`as£π_u64_eq
(
smoŸh°ï_èb
[
SMOOTHSTEP_NSTEPS
-1],

57 (
	`KQU
(1Ë<< 
SMOOTHSTEP_BFP
), "Last step mustÉqual 1");

58 
	}
}

59 
TEST_END


61 
	$TEST_BEGIN
(
ã°_smoŸh°ï_¶›e
)

63 
uöt64_t
 
¥ev_h
, 
¥ev_dñè
;

64 
i
;

72 
¥ev_h
 = 0;

73 
¥ev_dñè
 = 0;

74 
i
 = 0; i < 
SMOOTHSTEP_NSTEPS
 / 2 + SMOOTHSTEP_NSTEPS % 2; i++) {

75 
uöt64_t
 
h
 = 
smoŸh°ï_èb
[
i
];

76 
uöt64_t
 
dñè
 = 
h
 - 
¥ev_h
;

77 
	`as£π_u64_ge
(
dñè
, 
¥ev_dñè
,

79 "i=%u", 
i
);

80 
¥ev_h
 = 
h
;

81 
¥ev_dñè
 = 
dñè
;

84 
¥ev_h
 = 
	`KQU
(1Ë<< 
SMOOTHSTEP_BFP
;

85 
¥ev_dñè
 = 0;

86 
i
 = 
SMOOTHSTEP_NSTEPS
-1; i >= SMOOTHSTEP_NSTEPS / 2; i--) {

87 
uöt64_t
 
h
 = 
smoŸh°ï_èb
[
i
];

88 
uöt64_t
 
dñè
 = 
¥ev_h
 - 
h
;

89 
	`as£π_u64_ge
(
dñè
, 
¥ev_dñè
,

91 "i=%u", 
i
);

92 
¥ev_h
 = 
h
;

93 
¥ev_dñè
 = 
dñè
;

95 
	}
}

96 
TEST_END


99 
	$maö
()

102  (
	`ã°
(

103 
ã°_smoŸh°ï_öãgøl
,

104 
ã°_smoŸh°ï_m⁄Ÿ⁄ic
,

105 
ã°_smoŸh°ï_¶›e
));

106 
	}
}

	@dep/jemalloc-4.2.0/test/unit/stats.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_°©s_summ¨y
)

5 
size_t
 *
ˇ˘ive
;

6 
size_t
 
sz
, 
Æloˇãd
, 
a˘ive
, 
ªsidít
, 
m≠≥d
;

7 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

9 
sz
 = (
ˇ˘ive
);

10 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.ˇ˘ive", &
ˇ˘ive
, &
sz
, 
NULL
, 0), 
ex≥˘ed
,

13 
sz
 = (
size_t
);

14 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.Æloˇãd", &
Æloˇãd
, &
sz
, 
NULL
, 0),

15 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

16 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.a˘ive", &
a˘ive
, &
sz
, 
NULL
, 0), 
ex≥˘ed
,

18 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.ªsidít", &
ªsidít
, &
sz
, 
NULL
, 0),

19 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

20 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.m≠≥d", &
m≠≥d
, &
sz
, 
NULL
, 0), 
ex≥˘ed
,

23 i‡(
c⁄fig_°©s
) {

24 
	`as£π_zu_À
(
a˘ive
, *
ˇ˘ive
,

26 
	`as£π_zu_À
(
Æloˇãd
, 
a˘ive
,

28 
	`as£π_zu_…
(
a˘ive
, 
ªsidít
,

30 
	`as£π_zu_…
(
a˘ive
, 
m≠≥d
,

33 
	}
}

34 
TEST_END


36 
	$TEST_BEGIN
(
ã°_°©s_huge
)

38 *
p
;

39 
uöt64_t
 
ïoch
;

40 
size_t
 
Æloˇãd
;

41 
uöt64_t
 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
;

42 
size_t
 
sz
;

43 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

45 
p
 = 
	`mÆlocx
(
œrge_max˛ass
+1, 0);

46 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

48 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

51 
sz
 = (
size_t
);

52 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.Æloˇãd", &
Æloˇãd
, &
sz
,

53 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

54 
sz
 = (
uöt64_t
);

55 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.nmÆloc", &
nmÆloc
, &
sz
, 
NULL
,

56 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

57 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.ndÆloc", &
ndÆloc
, &
sz
, 
NULL
,

58 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

59 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.ƒeque°s", &
ƒeque°s
, &
sz
,

60 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

62 i‡(
c⁄fig_°©s
) {

63 
	`as£π_zu_gt
(
Æloˇãd
, 0,

65 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

67 
	`as£π_u64_À
(
nmÆloc
, 
ƒeque°s
,

71 
	`dÆlocx
(
p
, 0);

72 
	}
}

73 
TEST_END


75 
	$TEST_BEGIN
(
ã°_°©s_¨ías_summ¨y
)

77 
¨ía
;

78 *
lôée
, *
œrge
, *
huge
;

79 
uöt64_t
 
ïoch
;

80 
size_t
 
sz
;

81 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

82 
size_t
 
m≠≥d
;

83 
uöt64_t
 
≈urge
, 
nmadvi£
, 
purged
;

85 
¨ía
 = 0;

86 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

89 
lôée
 = 
	`mÆlocx
(
SMALL_MAXCLASS
, 0);

90 
	`as£π_±r_nŸ_nuŒ
(
lôée
, "Unexpected mallocx() failure");

91 
œrge
 = 
	`mÆlocx
(
œrge_max˛ass
, 0);

92 
	`as£π_±r_nŸ_nuŒ
(
œrge
, "Unexpected mallocx() failure");

93 
huge
 = 
	`mÆlocx
(
chunksize
, 0);

94 
	`as£π_±r_nŸ_nuŒ
(
huge
, "Unexpected mallocx() failure");

96 
	`dÆlocx
(
lôée
, 0);

97 
	`dÆlocx
(
œrge
, 0);

98 
	`dÆlocx
(
huge
, 0);

100 
	`as£π_d_eq
(
	`mÆl˘l
("¨ía.0.purge", 
NULL
, NULL, NULL, 0), 0,

103 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

106 
sz
 = (
size_t
);

107 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.m≠≥d", &
m≠≥d
, &
sz
, 
NULL
, 0),

108 
ex≥˘ed
, "Unexepected mallctl()Ñesult");

109 
sz
 = (
uöt64_t
);

110 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.≈urge", &
≈urge
, &
sz
, 
NULL
, 0),

111 
ex≥˘ed
, "Unexepected mallctl()Ñesult");

112 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.nmadvi£", &
nmadvi£
, &
sz
, 
NULL
, 0),

113 
ex≥˘ed
, "Unexepected mallctl()Ñesult");

114 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.purged", &
purged
, &
sz
, 
NULL
, 0),

115 
ex≥˘ed
, "Unexepected mallctl()Ñesult");

117 i‡(
c⁄fig_°©s
) {

118 
	`as£π_u64_gt
(
≈urge
, 0,

120 
	`as£π_u64_À
(
nmadvi£
, 
purged
,

123 
	}
}

124 
TEST_END


127 
	$thd_°¨t
(*
¨g
)

130  (
NULL
);

131 
	}
}

134 
	$no_œzy_lock
()

136 
thd_t
 
thd
;

138 
	`thd_¸óã
(&
thd
, 
thd_°¨t
, 
NULL
);

139 
	`thd_joö
(
thd
, 
NULL
);

140 
	}
}

142 
	$TEST_BEGIN
(
ã°_°©s_¨ías_smÆl
)

144 
¨ía
;

145 *
p
;

146 
size_t
 
sz
, 
Æloˇãd
;

147 
uöt64_t
 
ïoch
, 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
;

148 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

150 
	`no_œzy_lock
();

152 
¨ía
 = 0;

153 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

156 
p
 = 
	`mÆlocx
(
SMALL_MAXCLASS
, 0);

157 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

159 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.Êush", 
NULL
, NULL, NULL, 0),

160 
c⁄fig_tˇche
 ? 0 : 
ENOENT
, "Unexpected mallctl()Ñesult");

162 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

165 
sz
 = (
size_t
);

166 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.smÆl.Æloˇãd", &
Æloˇãd
, &
sz
,

167 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

168 
sz
 = (
uöt64_t
);

169 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.smÆl.nmÆloc", &
nmÆloc
, &
sz
,

170 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

171 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.smÆl.ndÆloc", &
ndÆloc
, &
sz
,

172 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

173 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.smÆl.ƒeque°s", &
ƒeque°s
, &
sz
,

174 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

176 i‡(
c⁄fig_°©s
) {

177 
	`as£π_zu_gt
(
Æloˇãd
, 0,

179 
	`as£π_u64_gt
(
nmÆloc
, 0,

181 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

183 
	`as£π_u64_gt
(
ƒeque°s
, 0,

187 
	`dÆlocx
(
p
, 0);

188 
	}
}

189 
TEST_END


191 
	$TEST_BEGIN
(
ã°_°©s_¨ías_œrge
)

193 
¨ía
;

194 *
p
;

195 
size_t
 
sz
, 
Æloˇãd
;

196 
uöt64_t
 
ïoch
, 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
;

197 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

199 
¨ía
 = 0;

200 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

203 
p
 = 
	`mÆlocx
(
œrge_max˛ass
, 0);

204 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

206 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

209 
sz
 = (
size_t
);

210 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.œrge.Æloˇãd", &
Æloˇãd
, &
sz
,

211 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

212 
sz
 = (
uöt64_t
);

213 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.œrge.nmÆloc", &
nmÆloc
, &
sz
,

214 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

215 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.œrge.ndÆloc", &
ndÆloc
, &
sz
,

216 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

217 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.œrge.ƒeque°s", &
ƒeque°s
, &
sz
,

218 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

220 i‡(
c⁄fig_°©s
) {

221 
	`as£π_zu_gt
(
Æloˇãd
, 0,

223 
	`as£π_u64_gt
(
nmÆloc
, 0,

225 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

227 
	`as£π_u64_gt
(
ƒeque°s
, 0,

231 
	`dÆlocx
(
p
, 0);

232 
	}
}

233 
TEST_END


235 
	$TEST_BEGIN
(
ã°_°©s_¨ías_huge
)

237 
¨ía
;

238 *
p
;

239 
size_t
 
sz
, 
Æloˇãd
;

240 
uöt64_t
 
ïoch
, 
nmÆloc
, 
ndÆloc
;

241 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

243 
¨ía
 = 0;

244 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

247 
p
 = 
	`mÆlocx
(
chunksize
, 0);

248 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

250 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

253 
sz
 = (
size_t
);

254 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.Æloˇãd", &
Æloˇãd
, &
sz
,

255 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

256 
sz
 = (
uöt64_t
);

257 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.nmÆloc", &
nmÆloc
, &
sz
,

258 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

259 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.huge.ndÆloc", &
ndÆloc
, &
sz
,

260 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

262 i‡(
c⁄fig_°©s
) {

263 
	`as£π_zu_gt
(
Æloˇãd
, 0,

265 
	`as£π_u64_gt
(
nmÆloc
, 0,

267 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

271 
	`dÆlocx
(
p
, 0);

272 
	}
}

273 
TEST_END


275 
	$TEST_BEGIN
(
ã°_°©s_¨ías_bös
)

277 
¨ía
;

278 *
p
;

279 
size_t
 
sz
, 
cuºuns
, 
cuºegs
;

280 
uöt64_t
 
ïoch
, 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
, 
nfûls
, 
nÊushes
;

281 
uöt64_t
 
ƒuns
, 
ƒîuns
;

282 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

284 
¨ía
 = 0;

285 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

288 
p
 = 
	`mÆlocx
(
¨ía_bö_öfo
[0].
ªg_size
, 0);

289 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

291 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.tˇche.Êush", 
NULL
, NULL, NULL, 0),

292 
c⁄fig_tˇche
 ? 0 : 
ENOENT
, "Unexpected mallctl()Ñesult");

294 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

297 
sz
 = (
uöt64_t
);

298 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.nmÆloc", &
nmÆloc
, &
sz
,

299 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

300 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.ndÆloc", &
ndÆloc
, &
sz
,

301 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

302 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.ƒeque°s", &
ƒeque°s
, &
sz
,

303 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

304 
sz
 = (
size_t
);

305 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.cuºegs", &
cuºegs
, &
sz
,

306 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

308 
sz
 = (
uöt64_t
);

309 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.nfûls", &
nfûls
, &
sz
,

310 
NULL
, 0), 
c⁄fig_tˇche
 ? 
ex≥˘ed
 : 
ENOENT
,

312 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.nÊushes", &
nÊushes
, &
sz
,

313 
NULL
, 0), 
c⁄fig_tˇche
 ? 
ex≥˘ed
 : 
ENOENT
,

316 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.ƒuns", &
ƒuns
, &
sz
,

317 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

318 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.ƒîuns", &
ƒîuns
, &
sz
,

319 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

320 
sz
 = (
size_t
);

321 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.bös.0.cuºuns", &
cuºuns
, &
sz
,

322 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

324 i‡(
c⁄fig_°©s
) {

325 
	`as£π_u64_gt
(
nmÆloc
, 0,

327 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

329 
	`as£π_u64_gt
(
ƒeque°s
, 0,

331 
	`as£π_zu_gt
(
cuºegs
, 0,

333 i‡(
c⁄fig_tˇche
) {

334 
	`as£π_u64_gt
(
nfûls
, 0,

336 
	`as£π_u64_gt
(
nÊushes
, 0,

339 
	`as£π_u64_gt
(
ƒuns
, 0,

341 
	`as£π_zu_gt
(
cuºuns
, 0,

345 
	`dÆlocx
(
p
, 0);

346 
	}
}

347 
TEST_END


349 
	$TEST_BEGIN
(
ã°_°©s_¨ías_Ãuns
)

351 
¨ía
;

352 *
p
;

353 
uöt64_t
 
ïoch
, 
nmÆloc
, 
ndÆloc
, 
ƒeque°s
;

354 
size_t
 
cuºuns
, 
sz
;

355 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

357 
¨ía
 = 0;

358 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

361 
p
 = 
	`mÆlocx
(
LARGE_MINCLASS
, 0);

362 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

364 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

367 
sz
 = (
uöt64_t
);

368 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.Ãuns.0.nmÆloc", &
nmÆloc
, &
sz
,

369 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

370 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.Ãuns.0.ndÆloc", &
ndÆloc
, &
sz
,

371 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

372 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.Ãuns.0.ƒeque°s", &
ƒeque°s
, &
sz
,

373 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

374 
sz
 = (
size_t
);

375 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.Ãuns.0.cuºuns", &
cuºuns
, &
sz
,

376 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

378 i‡(
c⁄fig_°©s
) {

379 
	`as£π_u64_gt
(
nmÆloc
, 0,

381 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

383 
	`as£π_u64_gt
(
ƒeque°s
, 0,

385 
	`as£π_u64_gt
(
cuºuns
, 0,

389 
	`dÆlocx
(
p
, 0);

390 
	}
}

391 
TEST_END


393 
	$TEST_BEGIN
(
ã°_°©s_¨ías_hchunks
)

395 
¨ía
;

396 *
p
;

397 
uöt64_t
 
ïoch
, 
nmÆloc
, 
ndÆloc
;

398 
size_t
 
curhchunks
, 
sz
;

399 
ex≥˘ed
 = 
c⁄fig_°©s
 ? 0 : 
ENOENT
;

401 
¨ía
 = 0;

402 
	`as£π_d_eq
(
	`mÆl˘l
("thªad.¨ía", 
NULL
, NULL, &
¨ía
, (arena)),

405 
p
 = 
	`mÆlocx
(
chunksize
, 0);

406 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected mallocx() failure");

408 
	`as£π_d_eq
(
	`mÆl˘l
("ïoch", 
NULL
, NULL, &
ïoch
, (epoch)), 0,

411 
sz
 = (
uöt64_t
);

412 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.hchunks.0.nmÆloc", &
nmÆloc
, &
sz
,

413 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

414 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.hchunks.0.ndÆloc", &
ndÆloc
, &
sz
,

415 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

416 
sz
 = (
size_t
);

417 
	`as£π_d_eq
(
	`mÆl˘l
("°©s.¨ías.0.hchunks.0.curhchunks", &
curhchunks
,

418 &
sz
, 
NULL
, 0), 
ex≥˘ed
, "Unexpected mallctl()Ñesult");

420 i‡(
c⁄fig_°©s
) {

421 
	`as£π_u64_gt
(
nmÆloc
, 0,

423 
	`as£π_u64_ge
(
nmÆloc
, 
ndÆloc
,

425 
	`as£π_u64_gt
(
curhchunks
, 0,

429 
	`dÆlocx
(
p
, 0);

430 
	}
}

431 
TEST_END


434 
	$maö
()

437  (
	`ã°
(

438 
ã°_°©s_summ¨y
,

439 
ã°_°©s_huge
,

440 
ã°_°©s_¨ías_summ¨y
,

441 
ã°_°©s_¨ías_smÆl
,

442 
ã°_°©s_¨ías_œrge
,

443 
ã°_°©s_¨ías_huge
,

444 
ã°_°©s_¨ías_bös
,

445 
ã°_°©s_¨ías_Ãuns
,

446 
ã°_°©s_¨ías_hchunks
));

447 
	}
}

	@dep/jemalloc-4.2.0/test/unit/ticker.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	$TEST_BEGIN
(
ã°_tickî_tick
)

5 
	#NREPS
 2

	)

6 
	#NTICKS
 3

	)

7 
tickî_t
 
tickî
;

8 
öt32_t
 
i
, 
j
;

10 
	`tickî_öô
(&
tickî
, 
NTICKS
);

11 
i
 = 0; i < 
NREPS
; i++) {

12 
j
 = 0; j < 
NTICKS
; j++) {

13 
	`as£π_u_eq
(
	`tickî_ªad
(&
tickî
), 
NTICKS
 - 
j
,

14 "U√x≥˘edÅickî vÆuê(i=%d, j=%d)", 
i
, 
j
);

15 
	`as£π_Ál£
(
	`tickî_tick
(&
tickî
),

16 "U√x≥˘edÅickî fúê(i=%d, j=%d)", 
i
, 
j
);

18 
	`as£π_u32_eq
(
	`tickî_ªad
(&
tickî
), 0,

20 
	`as£π_åue
(
	`tickî_tick
(&
tickî
),

21 "Ex≥˘edÅickî fúê(i=%d)", 
i
);

22 
	`as£π_u32_eq
(
	`tickî_ªad
(&
tickî
), 
NTICKS
,

25 #unde‡
NTICKS


26 
	}
}

27 
TEST_END


29 
	$TEST_BEGIN
(
ã°_tickî_ticks
)

31 
	#NTICKS
 3

	)

32 
tickî_t
 
tickî
;

34 
	`tickî_öô
(&
tickî
, 
NTICKS
);

36 
	`as£π_u_eq
(
	`tickî_ªad
(&
tickî
), 
NTICKS
, "UnexpectedÅicker value");

37 
	`as£π_Ál£
(
	`tickî_ticks
(&
tickî
, 
NTICKS
), "UnexpectedÅicker fire");

38 
	`as£π_u_eq
(
	`tickî_ªad
(&
tickî
), 0, "UnexpectedÅicker value");

39 
	`as£π_åue
(
	`tickî_ticks
(&
tickî
, 
NTICKS
), "ExpectedÅicker fire");

40 
	`as£π_u_eq
(
	`tickî_ªad
(&
tickî
), 
NTICKS
, "UnexpectedÅicker value");

42 
	`as£π_åue
(
	`tickî_ticks
(&
tickî
, 
NTICKS
 + 1), "ExpectedÅicker fire");

43 
	`as£π_u_eq
(
	`tickî_ªad
(&
tickî
), 
NTICKS
, "UnexpectedÅicker value");

44 #unde‡
NTICKS


45 
	}
}

46 
TEST_END


48 
	$TEST_BEGIN
(
ã°_tickî_c›y
)

50 
	#NTICKS
 3

	)

51 
tickî_t
 
è
, 
tb
;

53 
	`tickî_öô
(&
è
, 
NTICKS
);

54 
	`tickî_c›y
(&
tb
, &
è
);

55 
	`as£π_u_eq
(
	`tickî_ªad
(&
tb
), 
NTICKS
, "UnexpectedÅicker value");

56 
	`as£π_åue
(
	`tickî_ticks
(&
tb
, 
NTICKS
 + 1), "ExpectedÅicker fire");

57 
	`as£π_u_eq
(
	`tickî_ªad
(&
tb
), 
NTICKS
, "UnexpectedÅicker value");

59 
	`tickî_tick
(&
è
);

60 
	`tickî_c›y
(&
tb
, &
è
);

61 
	`as£π_u_eq
(
	`tickî_ªad
(&
tb
), 
NTICKS
 - 1, "UnexpectedÅicker value");

62 
	`as£π_åue
(
	`tickî_ticks
(&
tb
, 
NTICKS
), "ExpectedÅicker fire");

63 
	`as£π_u_eq
(
	`tickî_ªad
(&
tb
), 
NTICKS
, "UnexpectedÅicker value");

64 #unde‡
NTICKS


65 
	}
}

66 
TEST_END


69 
	$maö
()

72  (
	`ã°
(

73 
ã°_tickî_tick
,

74 
ã°_tickî_ticks
,

75 
ã°_tickî_c›y
));

76 
	}
}

	@dep/jemalloc-4.2.0/test/unit/tsd.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#THREAD_DATA
 0x72b65c10

	)

5 
	td©a_t
;

7 
boﬁ
 
	gd©a_˛ónup_execuãd
;

9 
	$mÆloc_tsd_ty≥s
(
d©a_
, 
d©a_t
)

10 
	$mÆloc_tsd_¥Ÿos
(, 
d©a_
, 
d©a_t
)

13 
	$d©a_˛ónup
(*
¨g
)

15 
d©a_t
 *
d©a
 = (d©a_à*)
¨g
;

17 i‡(!
d©a_˛ónup_execuãd
) {

18 
	`as£π_x_eq
(*
d©a
, 
THREAD_DATA
,

22 
d©a_˛ónup_execuãd
 = 
åue
;

28 *
d©a
) {

29 
THREAD_DATA
:

30 *
d©a
 = 1;

31 
	`d©a_tsd_£t
(
d©a
);

34 *
d©a
 = 2;

35 
	`d©a_tsd_£t
(
d©a
);

40 
	`nŸ_ªached
();

44 *
p
 = 
	`mÆlocx
(1, 0);

45 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpeced mallocx() failure");

46 
	`dÆlocx
(
p
, 0);

48 
	}
}

50 
	$mÆloc_tsd_exã∫s
(
d©a_
, 
d©a_t
)

51 
	#DATA_INIT
 0x12345678

	)

52 
	$mÆloc_tsd_d©a
(, 
d©a_
, 
d©a_t
, 
DATA_INIT
)

53 
	$mÆloc_tsd_funcs
(, 
d©a_
, 
d©a_t
, 
DATA_INIT
, 
d©a_˛ónup
)

56 
	$thd_°¨t
(*
¨g
)

58 
d©a_t
 
d
 = (d©a_t)(
uöçå_t
)
¨g
;

59 *
p
;

61 
	`as£π_x_eq
(*
	`d©a_tsd_gë
(), 
DATA_INIT
,

64 
p
 = 
	`mÆloc
(1);

65 
	`as£π_±r_nŸ_nuŒ
(
p
, "Unexpected malloc() failure");

67 
	`d©a_tsd_£t
(&
d
);

68 
	`as£π_x_eq
(*
	`d©a_tsd_gë
(), 
d
,

71 
d
 = 0;

72 
	`as£π_x_eq
(*
	`d©a_tsd_gë
(), (
d©a_t
)(
uöçå_t
)
¨g
,

75 
	`‰ì
(
p
);

76  (
NULL
);

77 
	}
}

79 
	$TEST_BEGIN
(
ã°_tsd_maö_thªad
)

82 
	`thd_°¨t
((*) 0xa5f3e329);

83 
	}
}

84 
TEST_END


86 
	$TEST_BEGIN
(
ã°_tsd_sub_thªad
)

88 
thd_t
 
thd
;

90 
d©a_˛ónup_execuãd
 = 
Ál£
;

91 
	`thd_¸óã
(&
thd
, 
thd_°¨t
, (*)
THREAD_DATA
);

92 
	`thd_joö
(
thd
, 
NULL
);

93 
	`as£π_åue
(
d©a_˛ónup_execuãd
,

95 
	}
}

96 
TEST_END


99 
	$maö
()

103 i‡(
	`«Œocx
(1, 0) == 0) {

104 
	`mÆloc_¥ötf
("InitializationÉrror");

105  (
ã°_°©us_Áû
);

107 
	`d©a_tsd_boŸ
();

109  (
	`ã°
(

110 
ã°_tsd_maö_thªad
,

111 
ã°_tsd_sub_thªad
));

112 
	}
}

	@dep/jemalloc-4.2.0/test/unit/util.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
	#TEST_POW2_CEIL
(
t
, 
suf
, 
¥i
) do { \

4 
i
, 
pow2
; \

5 
t
 
x
; \

7 
as£π_
##
suf
##
	`_eq
(
pow2_˚û_
##
	`suf
(0), 0, "UnexpectedÑesult"); \

9 
i
 = 0; i < (
t
) * 8; i++) { \

10 
as£π_
##
suf
##
	`_eq
(
pow2_˚û_
##
	`suf
(((
t
)1Ë<< 
i
), ((t)1) \

11 << 
i
, "UnexpectedÑesult"); \

14 
i
 = 2; i < (
t
) * 8; i++) { \

15 
as£π_
##
suf
##
	`_eq
(
pow2_˚û_
##
	`suf
((((
t
)1Ë<< 
i
) - 1), \

16 ((
t
)1Ë<< 
i
, "UnexpectedÑesult"); \

19 
i
 = 0; i < (
t
) * 8 - 1; i++) { \

20 
as£π_
##
suf
##
	`_eq
(
pow2_˚û_
##
	`suf
((((
t
)1Ë<< 
i
) + 1), \

21 ((
t
)1Ë<< (
i
+1), "UnexpectedÑesult"); \

24 
pow2
 = 1;Öow2 < 25;Öow2++) { \

25 
x
 = (((
t
)1Ë<< (
pow2
-1)) + 1; x <= ((t)1) <<Öow2; \

26 
x
++) { \

27 
as£π_
##
suf
##
	`_eq
(
pow2_˚û_
##
	`suf
(
x
), \

28 ((
t
)1Ë<< 
pow2
, \

29 "U√x≥˘edÑesu…, x=%"
¥i
, 
x
); \

32 } 0)

	)

34 
	$TEST_BEGIN
(
ã°_pow2_˚û_u64
)

37 
	`TEST_POW2_CEIL
(
uöt64_t
, 
u64
, 
FMTu64
);

38 
	}
}

39 
TEST_END


41 
	$TEST_BEGIN
(
ã°_pow2_˚û_u32
)

44 
	`TEST_POW2_CEIL
(
uöt32_t
, 
u32
, 
FMTu32
);

45 
	}
}

46 
TEST_END


48 
	$TEST_BEGIN
(
ã°_pow2_˚û_zu
)

51 
	`TEST_POW2_CEIL
(
size_t
, 
zu
, "zu");

52 
	}
}

53 
TEST_END


55 
	$TEST_BEGIN
(
ã°_mÆloc_°πoumax_no_íd±r
)

57 
îr
;

59 
	`£t_î∫o
(0);

60 
	`as£π_ju_eq
(
	`mÆloc_°πoumax
("0", 
NULL
, 0), 0, "UnexpectedÑesult");

61 
îr
 = 
	`gë_î∫o
();

62 
	`as£π_d_eq
(
îr
, 0, "Unexpected failure");

63 
	}
}

64 
TEST_END


66 
	$TEST_BEGIN
(
ã°_mÆloc_°πoumax
)

68 
	sã°_s
 {

69 c⁄° *
öput
;

70 c⁄° *
ex≥˘ed_ªmaödî
;

71 
ba£
;

72 
ex≥˘ed_î∫o
;

73 c⁄° *
ex≥˘ed_î∫o_«me
;

74 
uötmax_t
 
ex≥˘ed_x
;

76 
	#ERR
(
e
Ëe, #e

	)

77 
	#KUMAX
(
x
Ë((
uötmax_t
)x##
ULL
)

	)

78 
ã°_s
 
ã°s
[] = {

79 {"0", "0", -1, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

80 {"0", "0", 1, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

81 {"0", "0", 37, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

83 {"", "", 0, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

84 {"+", "+", 0, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

85 {"++3", "++3", 0, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

86 {"-", "-", 0, 
	`ERR
(
EINVAL
), 
UINTMAX_MAX
},

88 {"42", "", 0, 
	`ERR
(0), 
	`KUMAX
(42)},

89 {"+42", "", 0, 
	`ERR
(0), 
	`KUMAX
(42)},

90 {"-42", "", 0, 
	`ERR
(0), 
	`KUMAX
(-42)},

91 {"042", "", 0, 
	`ERR
(0), 
	`KUMAX
(042)},

92 {"+042", "", 0, 
	`ERR
(0), 
	`KUMAX
(042)},

93 {"-042", "", 0, 
	`ERR
(0), 
	`KUMAX
(-042)},

94 {"0x42", "", 0, 
	`ERR
(0), 
	`KUMAX
(0x42)},

95 {"+0x42", "", 0, 
	`ERR
(0), 
	`KUMAX
(0x42)},

96 {"-0x42", "", 0, 
	`ERR
(0), 
	`KUMAX
(-0x42)},

98 {"0", "", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

99 {"1", "", 0, 
	`ERR
(0), 
	`KUMAX
(1)},

101 {"42", "", 0, 
	`ERR
(0), 
	`KUMAX
(42)},

102 {" 42", "", 0, 
	`ERR
(0), 
	`KUMAX
(42)},

103 {"42 ", " ", 0, 
	`ERR
(0), 
	`KUMAX
(42)},

104 {"0x", "x", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

105 {"42x", "x", 0, 
	`ERR
(0), 
	`KUMAX
(42)},

107 {"07", "", 0, 
	`ERR
(0), 
	`KUMAX
(7)},

108 {"010", "", 0, 
	`ERR
(0), 
	`KUMAX
(8)},

109 {"08", "8", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

110 {"0_", "_", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

112 {"0x", "x", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

113 {"0X", "X", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

114 {"0xg", "xg", 0, 
	`ERR
(0), 
	`KUMAX
(0)},

115 {"0XA", "", 0, 
	`ERR
(0), 
	`KUMAX
(10)},

117 {"010", "", 10, 
	`ERR
(0), 
	`KUMAX
(10)},

118 {"0x3", "x3", 10, 
	`ERR
(0), 
	`KUMAX
(0)},

120 {"12", "2", 2, 
	`ERR
(0), 
	`KUMAX
(1)},

121 {"78", "8", 8, 
	`ERR
(0), 
	`KUMAX
(7)},

122 {"9a", "a", 10, 
	`ERR
(0), 
	`KUMAX
(9)},

123 {"9A", "A", 10, 
	`ERR
(0), 
	`KUMAX
(9)},

124 {"fg", "g", 16, 
	`ERR
(0), 
	`KUMAX
(15)},

125 {"FG", "G", 16, 
	`ERR
(0), 
	`KUMAX
(15)},

126 {"0xfg", "g", 16, 
	`ERR
(0), 
	`KUMAX
(15)},

127 {"0XFG", "G", 16, 
	`ERR
(0), 
	`KUMAX
(15)},

128 {"z_", "_", 36, 
	`ERR
(0), 
	`KUMAX
(35)},

129 {"Z_", "_", 36, 
	`ERR
(0), 
	`KUMAX
(35)}

131 #unde‡
ERR


132 #unde‡
KUMAX


133 
i
;

135 
i
 = 0; i < (
ã°s
)/(
ã°_s
); i++) {

136 
ã°_s
 *
ã°
 = &
ã°s
[
i
];

137 
îr
;

138 
uötmax_t
 
ªsu…
;

139 *
ªmaödî
;

141 
	`£t_î∫o
(0);

142 
ªsu…
 = 
	`mÆloc_°πoumax
(
ã°
->
öput
, &
ªmaödî
,Åe°->
ba£
);

143 
îr
 = 
	`gë_î∫o
();

144 
	`as£π_d_eq
(
îr
, 
ã°
->
ex≥˘ed_î∫o
,

146 
ã°
->
ex≥˘ed_î∫o_«me
,Åe°->
öput
,Åe°->
ba£
);

147 
	`as£π_°r_eq
(
ªmaödî
, 
ã°
->
ex≥˘ed_ªmaödî
,

149 
ã°
->
öput
,Åe°->
ba£
);

150 i‡(
îr
 == 0) {

151 
	`as£π_ju_eq
(
ªsu…
, 
ã°
->
ex≥˘ed_x
,

153 
ã°
->
öput
,Åe°->
ba£
);

156 
	}
}

157 
TEST_END


159 
	$TEST_BEGIN
(
ã°_mÆloc_¢¥ötf_åunˇãd
)

161 
	#BUFLEN
 15

	)

162 
buf
[
BUFLEN
];

163 
size_t
 
ªsu…
;

164 
size_t
 
Àn
;

165 
	#TEST
(
ex≥˘ed_°r_u¡runˇãd
, ...) do { \

166 
ªsu…
 = 
	`mÆloc_¢¥ötf
(
buf
, 
Àn
, 
__VA_ARGS__
); \

167 
	`as£π_d_eq
(
	`°∫cmp
(
buf
, 
ex≥˘ed_°r_u¡runˇãd
, 
Àn
-1), 0, \

169 
buf
, 
ex≥˘ed_°r_u¡runˇãd
); \

170 
	`as£π_zu_eq
(
ªsu…
, 
	`°æí
(
ex≥˘ed_°r_u¡runˇãd
), \

172 } 0)

	)

174 
Àn
 = 1;Üí < 
BUFLEN
;Üen++) {

175 
	`TEST
("012346789", "012346789");

176 
	`TEST
("a0123b", "a%sb", "0123");

177 
	`TEST
("a01234567", "a%s%s", "0123", "4567");

178 
	`TEST
("a0123 ", "a%-6s", "0123");

179 
	`TEST
("a 0123", "a%6s", "0123");

180 
	`TEST
("a 012", "a%6.3s", "0123");

181 
	`TEST
("a 012", "a%*.*s", 6, 3, "0123");

182 
	`TEST
("a 123b", "a% db", 123);

183 
	`TEST
("a123b", "a%-db", 123);

184 
	`TEST
("a-123b", "a%-db", -123);

185 
	`TEST
("a+123b", "a%+db", 123);

187 #unde‡
BUFLEN


188 #unde‡
TEST


189 
	}
}

190 
TEST_END


192 
	$TEST_BEGIN
(
ã°_mÆloc_¢¥ötf
)

194 
	#BUFLEN
 128

	)

195 
buf
[
BUFLEN
];

196 
size_t
 
ªsu…
;

197 
	#TEST
(
ex≥˘ed_°r
, ...) do { \

198 
ªsu…
 = 
	`mÆloc_¢¥ötf
(
buf
, (buf), 
__VA_ARGS__
); \

199 
	`as£π_°r_eq
(
buf
, 
ex≥˘ed_°r
, "Unexpected output"); \

200 
	`as£π_zu_eq
(
ªsu…
, 
	`°æí
(
ex≥˘ed_°r
), "UnexpectedÑesult");\

201 } 0)

	)

203 
	`TEST
("hello", "hello");

205 
	`TEST
("50%, 100%", "50%%, %d%%", 100);

207 
	`TEST
("a0123b", "a%sb", "0123");

209 
	`TEST
("a 0123b", "a%5sb", "0123");

210 
	`TEST
("a 0123b", "a%*sb", 5, "0123");

212 
	`TEST
("a0123 b", "a%-5sb", "0123");

213 
	`TEST
("a0123b", "a%*sb", -1, "0123");

214 
	`TEST
("a0123 b", "a%*sb", -5, "0123");

215 
	`TEST
("a0123 b", "a%-*sb", -5, "0123");

217 
	`TEST
("a012b", "a%.3sb", "0123");

218 
	`TEST
("a012b", "a%.*sb", 3, "0123");

219 
	`TEST
("a0123b", "a%.*sb", -3, "0123");

221 
	`TEST
("a 012b", "a%5.3sb", "0123");

222 
	`TEST
("a 012b", "a%5.*sb", 3, "0123");

223 
	`TEST
("a 012b", "a%*.3sb", 5, "0123");

224 
	`TEST
("a 012b", "a%*.*sb", 5, 3, "0123");

225 
	`TEST
("a 0123b", "a%*.*sb", 5, -3, "0123");

227 
	`TEST
("_abcd_", "_%x_", 0xabcd);

228 
	`TEST
("_0xabcd_", "_%#x_", 0xabcd);

229 
	`TEST
("_1234_", "_%o_", 01234);

230 
	`TEST
("_01234_", "_%#o_", 01234);

231 
	`TEST
("_1234_", "_%u_", 1234);

233 
	`TEST
("_1234_", "_%d_", 1234);

234 
	`TEST
("_ 1234_", "_% d_", 1234);

235 
	`TEST
("_+1234_", "_%+d_", 1234);

236 
	`TEST
("_-1234_", "_%d_", -1234);

237 
	`TEST
("_-1234_", "_% d_", -1234);

238 
	`TEST
("_-1234_", "_%+d_", -1234);

240 
	`TEST
("_-1234_", "_%d_", -1234);

241 
	`TEST
("_1234_", "_%d_", 1234);

242 
	`TEST
("_-1234_", "_%i_", -1234);

243 
	`TEST
("_1234_", "_%i_", 1234);

244 
	`TEST
("_01234_", "_%#o_", 01234);

245 
	`TEST
("_1234_", "_%u_", 1234);

246 
	`TEST
("_0x1234abc_", "_%#x_", 0x1234abc);

247 
	`TEST
("_0X1234ABC_", "_%#X_", 0x1234abc);

248 
	`TEST
("_c_", "_%c_", 'c');

249 
	`TEST
("_string_", "_%s_", "string");

250 
	`TEST
("_0x42_", "_%p_", ((*)0x42));

252 
	`TEST
("_-1234_", "_%ld_", (()-1234));

253 
	`TEST
("_1234_", "_%ld_", (()1234));

254 
	`TEST
("_-1234_", "_%li_", (()-1234));

255 
	`TEST
("_1234_", "_%li_", (()1234));

256 
	`TEST
("_01234_", "_%#lo_", (()01234));

257 
	`TEST
("_1234_", "_%lu_", (()1234));

258 
	`TEST
("_0x1234abc_", "_%#lx_", (()0x1234abc));

259 
	`TEST
("_0X1234ABC_", "_%#lX_", (()0x1234ABC));

261 
	`TEST
("_-1234_", "_%lld_", (()-1234));

262 
	`TEST
("_1234_", "_%lld_", (()1234));

263 
	`TEST
("_-1234_", "_%lli_", (()-1234));

264 
	`TEST
("_1234_", "_%lli_", (()1234));

265 
	`TEST
("_01234_", "_%#llo_", (()01234));

266 
	`TEST
("_1234_", "_%llu_", (()1234));

267 
	`TEST
("_0x1234abc_", "_%#llx_", (()0x1234abc));

268 
	`TEST
("_0X1234ABC_", "_%#llX_", (()0x1234ABC));

270 
	`TEST
("_-1234_", "_%qd_", (()-1234));

271 
	`TEST
("_1234_", "_%qd_", (()1234));

272 
	`TEST
("_-1234_", "_%qi_", (()-1234));

273 
	`TEST
("_1234_", "_%qi_", (()1234));

274 
	`TEST
("_01234_", "_%#qo_", (()01234));

275 
	`TEST
("_1234_", "_%qu_", (()1234));

276 
	`TEST
("_0x1234abc_", "_%#qx_", (()0x1234abc));

277 
	`TEST
("_0X1234ABC_", "_%#qX_", (()0x1234ABC));

279 
	`TEST
("_-1234_", "_%jd_", ((
ötmax_t
)-1234));

280 
	`TEST
("_1234_", "_%jd_", ((
ötmax_t
)1234));

281 
	`TEST
("_-1234_", "_%ji_", ((
ötmax_t
)-1234));

282 
	`TEST
("_1234_", "_%ji_", ((
ötmax_t
)1234));

283 
	`TEST
("_01234_", "_%#jo_", ((
ötmax_t
)01234));

284 
	`TEST
("_1234_", "_%ju_", ((
ötmax_t
)1234));

285 
	`TEST
("_0x1234abc_", "_%#jx_", ((
ötmax_t
)0x1234abc));

286 
	`TEST
("_0X1234ABC_", "_%#jX_", ((
ötmax_t
)0x1234ABC));

288 
	`TEST
("_1234_", "_%td_", ((
±rdiff_t
)1234));

289 
	`TEST
("_-1234_", "_%td_", ((
±rdiff_t
)-1234));

290 
	`TEST
("_1234_", "_%ti_", ((
±rdiff_t
)1234));

291 
	`TEST
("_-1234_", "_%ti_", ((
±rdiff_t
)-1234));

293 
	`TEST
("_-1234_", "_%zd_", ((
ssize_t
)-1234));

294 
	`TEST
("_1234_", "_%zd_", ((
ssize_t
)1234));

295 
	`TEST
("_-1234_", "_%zi_", ((
ssize_t
)-1234));

296 
	`TEST
("_1234_", "_%zi_", ((
ssize_t
)1234));

297 
	`TEST
("_01234_", "_%#zo_", ((
ssize_t
)01234));

298 
	`TEST
("_1234_", "_%zu_", ((
ssize_t
)1234));

299 
	`TEST
("_0x1234abc_", "_%#zx_", ((
ssize_t
)0x1234abc));

300 
	`TEST
("_0X1234ABC_", "_%#zX_", ((
ssize_t
)0x1234ABC));

301 #unde‡
BUFLEN


302 
	}
}

303 
TEST_END


306 
	$maö
()

309  (
	`ã°
(

310 
ã°_pow2_˚û_u64
,

311 
ã°_pow2_˚û_u32
,

312 
ã°_pow2_˚û_zu
,

313 
ã°_mÆloc_°πoumax_no_íd±r
,

314 
ã°_mÆloc_°πoumax
,

315 
ã°_mÆloc_¢¥ötf_åunˇãd
,

316 
ã°_mÆloc_¢¥ötf
));

317 
	}
}

	@dep/jemalloc-4.2.0/test/unit/witness.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 
wô√ss_lock_îr‹_t
 *
	gwô√ss_lock_îr‹_‹ig
;

4 
wô√ss_ow√r_îr‹_t
 *
	gwô√ss_ow√r_îr‹_‹ig
;

5 
wô√ss_nŸ_ow√r_îr‹_t
 *
	gwô√ss_nŸ_ow√r_îr‹_‹ig
;

6 
wô√ss_lockÀss_îr‹_t
 *
	gwô√ss_lockÀss_îr‹_‹ig
;

8 
boﬁ
 
	gßw_lock_îr‹
;

9 
boﬁ
 
	gßw_ow√r_îr‹
;

10 
boﬁ
 
	gßw_nŸ_ow√r_îr‹
;

11 
boﬁ
 
	gßw_lockÀss_îr‹
;

14 
	$wô√ss_lock_îr‹_öãr˚±
(c⁄° 
wô√ss_li°_t
 *
wô√s£s
,

15 c⁄° 
wô√ss_t
 *
wô√ss
)

18 
ßw_lock_îr‹
 = 
åue
;

19 
	}
}

22 
	$wô√ss_ow√r_îr‹_öãr˚±
(c⁄° 
wô√ss_t
 *
wô√ss
)

25 
ßw_ow√r_îr‹
 = 
åue
;

26 
	}
}

29 
	$wô√ss_nŸ_ow√r_îr‹_öãr˚±
(c⁄° 
wô√ss_t
 *
wô√ss
)

32 
ßw_nŸ_ow√r_îr‹
 = 
åue
;

33 
	}
}

36 
	$wô√ss_lockÀss_îr‹_öãr˚±
(c⁄° 
wô√ss_li°_t
 *
wô√s£s
)

39 
ßw_lockÀss_îr‹
 = 
åue
;

40 
	}
}

43 
	$wô√ss_comp
(c⁄° 
wô√ss_t
 *
a
, c⁄° wô√ss_à*
b
)

46 
	`as£π_u_eq
(
a
->
ønk
, 
b
->rank, "Witnesses should haveÉqualÑank");

48  (
	`°rcmp
(
a
->
«me
, 
b
->name));

49 
	}
}

52 
	$wô√ss_comp_ªvî£
(c⁄° 
wô√ss_t
 *
a
, c⁄° wô√ss_à*
b
)

55 
	`as£π_u_eq
(
a
->
ønk
, 
b
->rank, "Witnesses should haveÉqualÑank");

57  (-
	`°rcmp
(
a
->
«me
, 
b
->name));

58 
	}
}

60 
	$TEST_BEGIN
(
ã°_wô√ss
)

62 
wô√ss_t
 
a
, 
b
;

63 
tsdn_t
 *
tsdn
;

65 
	`ã°_skù_if
(!
c⁄fig_debug
);

67 
tsdn
 = 
	`tsdn_„tch
();

69 
	`wô√ss_as£π_lockÀss
(
tsdn
);

71 
	`wô√ss_öô
(&
a
, "a", 1, 
NULL
);

72 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
a
);

73 
	`wô√ss_lock
(
tsdn
, &
a
);

74 
	`wô√ss_as£π_ow√r
(
tsdn
, &
a
);

76 
	`wô√ss_öô
(&
b
, "b", 2, 
NULL
);

77 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
b
);

78 
	`wô√ss_lock
(
tsdn
, &
b
);

79 
	`wô√ss_as£π_ow√r
(
tsdn
, &
b
);

81 
	`wô√ss_u∆ock
(
tsdn
, &
a
);

82 
	`wô√ss_u∆ock
(
tsdn
, &
b
);

84 
	`wô√ss_as£π_lockÀss
(
tsdn
);

85 
	}
}

86 
TEST_END


88 
	$TEST_BEGIN
(
ã°_wô√ss_comp
)

90 
wô√ss_t
 
a
, 
b
, 
c
, 
d
;

91 
tsdn_t
 *
tsdn
;

93 
	`ã°_skù_if
(!
c⁄fig_debug
);

95 
tsdn
 = 
	`tsdn_„tch
();

97 
	`wô√ss_as£π_lockÀss
(
tsdn
);

99 
	`wô√ss_öô
(&
a
, "a", 1, 
wô√ss_comp
);

100 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
a
);

101 
	`wô√ss_lock
(
tsdn
, &
a
);

102 
	`wô√ss_as£π_ow√r
(
tsdn
, &
a
);

104 
	`wô√ss_öô
(&
b
, "b", 1, 
wô√ss_comp
);

105 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
b
);

106 
	`wô√ss_lock
(
tsdn
, &
b
);

107 
	`wô√ss_as£π_ow√r
(
tsdn
, &
b
);

108 
	`wô√ss_u∆ock
(
tsdn
, &
b
);

110 
wô√ss_lock_îr‹_‹ig
 = 
wô√ss_lock_îr‹
;

111 
wô√ss_lock_îr‹
 = 
wô√ss_lock_îr‹_öãr˚±
;

112 
ßw_lock_îr‹
 = 
Ál£
;

114 
	`wô√ss_öô
(&
c
, "c", 1, 
wô√ss_comp_ªvî£
);

115 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
c
);

116 
	`as£π_Ál£
(
ßw_lock_îr‹
, "Unexpected witnessÜockÉrror");

117 
	`wô√ss_lock
(
tsdn
, &
c
);

118 
	`as£π_åue
(
ßw_lock_îr‹
, "Expected witnessÜockÉrror");

119 
	`wô√ss_u∆ock
(
tsdn
, &
c
);

121 
ßw_lock_îr‹
 = 
Ál£
;

123 
	`wô√ss_öô
(&
d
, "d", 1, 
NULL
);

124 
	`wô√ss_as£π_nŸ_ow√r
(
tsdn
, &
d
);

125 
	`as£π_Ál£
(
ßw_lock_îr‹
, "Unexpected witnessÜockÉrror");

126 
	`wô√ss_lock
(
tsdn
, &
d
);

127 
	`as£π_åue
(
ßw_lock_îr‹
, "Expected witnessÜockÉrror");

128 
	`wô√ss_u∆ock
(
tsdn
, &
d
);

130 
	`wô√ss_u∆ock
(
tsdn
, &
a
);

132 
	`wô√ss_as£π_lockÀss
(
tsdn
);

134 
wô√ss_lock_îr‹
 = 
wô√ss_lock_îr‹_‹ig
;

135 
	}
}

136 
TEST_END


138 
	$TEST_BEGIN
(
ã°_wô√ss_ªvîßl
)

140 
wô√ss_t
 
a
, 
b
;

141 
tsdn_t
 *
tsdn
;

143 
	`ã°_skù_if
(!
c⁄fig_debug
);

145 
wô√ss_lock_îr‹_‹ig
 = 
wô√ss_lock_îr‹
;

146 
wô√ss_lock_îr‹
 = 
wô√ss_lock_îr‹_öãr˚±
;

147 
ßw_lock_îr‹
 = 
Ál£
;

149 
tsdn
 = 
	`tsdn_„tch
();

151 
	`wô√ss_as£π_lockÀss
(
tsdn
);

153 
	`wô√ss_öô
(&
a
, "a", 1, 
NULL
);

154 
	`wô√ss_öô
(&
b
, "b", 2, 
NULL
);

156 
	`wô√ss_lock
(
tsdn
, &
b
);

157 
	`as£π_Ál£
(
ßw_lock_îr‹
, "Unexpected witnessÜockÉrror");

158 
	`wô√ss_lock
(
tsdn
, &
a
);

159 
	`as£π_åue
(
ßw_lock_îr‹
, "Expected witnessÜockÉrror");

161 
	`wô√ss_u∆ock
(
tsdn
, &
a
);

162 
	`wô√ss_u∆ock
(
tsdn
, &
b
);

164 
	`wô√ss_as£π_lockÀss
(
tsdn
);

166 
wô√ss_lock_îr‹
 = 
wô√ss_lock_îr‹_‹ig
;

167 
	}
}

168 
TEST_END


170 
	$TEST_BEGIN
(
ã°_wô√ss_ªcursive
)

172 
wô√ss_t
 
a
;

173 
tsdn_t
 *
tsdn
;

175 
	`ã°_skù_if
(!
c⁄fig_debug
);

177 
wô√ss_nŸ_ow√r_îr‹_‹ig
 = 
wô√ss_nŸ_ow√r_îr‹
;

178 
wô√ss_nŸ_ow√r_îr‹
 = 
wô√ss_nŸ_ow√r_îr‹_öãr˚±
;

179 
ßw_nŸ_ow√r_îr‹
 = 
Ál£
;

181 
wô√ss_lock_îr‹_‹ig
 = 
wô√ss_lock_îr‹
;

182 
wô√ss_lock_îr‹
 = 
wô√ss_lock_îr‹_öãr˚±
;

183 
ßw_lock_îr‹
 = 
Ál£
;

185 
tsdn
 = 
	`tsdn_„tch
();

187 
	`wô√ss_as£π_lockÀss
(
tsdn
);

189 
	`wô√ss_öô
(&
a
, "a", 1, 
NULL
);

191 
	`wô√ss_lock
(
tsdn
, &
a
);

192 
	`as£π_Ál£
(
ßw_lock_îr‹
, "Unexpected witnessÜockÉrror");

193 
	`as£π_Ál£
(
ßw_nŸ_ow√r_îr‹
, "Unexpected witnessÇot ownerÉrror");

194 
	`wô√ss_lock
(
tsdn
, &
a
);

195 
	`as£π_åue
(
ßw_lock_îr‹
, "Expected witnessÜockÉrror");

196 
	`as£π_åue
(
ßw_nŸ_ow√r_îr‹
, "Expected witnessÇot ownerÉrror");

198 
	`wô√ss_u∆ock
(
tsdn
, &
a
);

200 
	`wô√ss_as£π_lockÀss
(
tsdn
);

202 
wô√ss_ow√r_îr‹
 = 
wô√ss_ow√r_îr‹_‹ig
;

203 
wô√ss_lock_îr‹
 = 
wô√ss_lock_îr‹_‹ig
;

205 
	}
}

206 
TEST_END


208 
	$TEST_BEGIN
(
ã°_wô√ss_u∆ock_nŸ_ow√d
)

210 
wô√ss_t
 
a
;

211 
tsdn_t
 *
tsdn
;

213 
	`ã°_skù_if
(!
c⁄fig_debug
);

215 
wô√ss_ow√r_îr‹_‹ig
 = 
wô√ss_ow√r_îr‹
;

216 
wô√ss_ow√r_îr‹
 = 
wô√ss_ow√r_îr‹_öãr˚±
;

217 
ßw_ow√r_îr‹
 = 
Ál£
;

219 
tsdn
 = 
	`tsdn_„tch
();

221 
	`wô√ss_as£π_lockÀss
(
tsdn
);

223 
	`wô√ss_öô
(&
a
, "a", 1, 
NULL
);

225 
	`as£π_Ál£
(
ßw_ow√r_îr‹
, "Unexpected ownerÉrror");

226 
	`wô√ss_u∆ock
(
tsdn
, &
a
);

227 
	`as£π_åue
(
ßw_ow√r_îr‹
, "Expected ownerÉrror");

229 
	`wô√ss_as£π_lockÀss
(
tsdn
);

231 
wô√ss_ow√r_îr‹
 = 
wô√ss_ow√r_îr‹_‹ig
;

232 
	}
}

233 
TEST_END


235 
	$TEST_BEGIN
(
ã°_wô√ss_lockful
)

237 
wô√ss_t
 
a
;

238 
tsdn_t
 *
tsdn
;

240 
	`ã°_skù_if
(!
c⁄fig_debug
);

242 
wô√ss_lockÀss_îr‹_‹ig
 = 
wô√ss_lockÀss_îr‹
;

243 
wô√ss_lockÀss_îr‹
 = 
wô√ss_lockÀss_îr‹_öãr˚±
;

244 
ßw_lockÀss_îr‹
 = 
Ál£
;

246 
tsdn
 = 
	`tsdn_„tch
();

248 
	`wô√ss_as£π_lockÀss
(
tsdn
);

250 
	`wô√ss_öô
(&
a
, "a", 1, 
NULL
);

252 
	`as£π_Ál£
(
ßw_lockÀss_îr‹
, "UnexpectedÜocklessÉrror");

253 
	`wô√ss_as£π_lockÀss
(
tsdn
);

255 
	`wô√ss_lock
(
tsdn
, &
a
);

256 
	`wô√ss_as£π_lockÀss
(
tsdn
);

257 
	`as£π_åue
(
ßw_lockÀss_îr‹
, "ExpectedÜocklessÉrror");

259 
	`wô√ss_u∆ock
(
tsdn
, &
a
);

261 
	`wô√ss_as£π_lockÀss
(
tsdn
);

263 
wô√ss_lockÀss_îr‹
 = 
wô√ss_lockÀss_îr‹_‹ig
;

264 
	}
}

265 
TEST_END


268 
	$maö
()

271  (
	`ã°
(

272 
ã°_wô√ss
,

273 
ã°_wô√ss_comp
,

274 
ã°_wô√ss_ªvîßl
,

275 
ã°_wô√ss_ªcursive
,

276 
ã°_wô√ss_u∆ock_nŸ_ow√d
,

277 
ã°_wô√ss_lockful
));

278 
	}
}

	@dep/jemalloc-4.2.0/test/unit/zero.c

1 
	~"ã°/jemÆloc_ã°.h
"

3 #ifde‡
JEMALLOC_FILL


4 c⁄° *
	gmÆloc_c⁄f
 =

9 
	$ã°_zîo
(
size_t
 
sz_mö
, size_à
sz_max
)

11 
uöt8_t
 *
s
;

12 
size_t
 
sz_¥ev
, 
sz
, 
i
;

13 
	#MAGIC
 ((
uöt8_t
)0x61)

	)

15 
sz_¥ev
 = 0;

16 
s
 = (
uöt8_t
 *)
	`mÆlocx
(
sz_mö
, 0);

17 
	`as£π_±r_nŸ_nuŒ
((*)
s
, "Unexpected mallocx() failure");

19 
sz
 = 
	`ßŒocx
(
s
, 0); sz <
sz_max
;

20 
sz_¥ev
 = 
sz
, sz = 
	`ßŒocx
(
s
, 0)) {

21 i‡(
sz_¥ev
 > 0) {

22 
	`as£π_u_eq
(
s
[0], 
MAGIC
,

24 
	`ZU
(0), 
sz_¥ev
);

25 
	`as£π_u_eq
(
s
[
sz_¥ev
-1], 
MAGIC
,

27 
sz_¥ev
-1, sz_prev);

30 
i
 = 
sz_¥ev
; i < 
sz
; i++) {

31 
	`as£π_u_eq
(
s
[
i
], 0x0,

33 
i
, 
sz
);

34 
s
[
i
] = 
MAGIC
;

37 i‡(
	`xÆlocx
(
s
, 
sz
+1, 0, 0) == sz) {

38 
s
 = (
uöt8_t
 *)
	`øŒocx
(s, 
sz
+1, 0);

39 
	`as£π_±r_nŸ_nuŒ
((*)
s
,

44 
	`dÆlocx
(
s
, 0);

45 #unde‡
MAGIC


46 
	}
}

48 
	$TEST_BEGIN
(
ã°_zîo_smÆl
)

51 
	`ã°_skù_if
(!
c⁄fig_fûl
);

52 
	`ã°_zîo
(1, 
SMALL_MAXCLASS
-1);

53 
	}
}

54 
TEST_END


56 
	$TEST_BEGIN
(
ã°_zîo_œrge
)

59 
	`ã°_skù_if
(!
c⁄fig_fûl
);

60 
	`ã°_zîo
(
SMALL_MAXCLASS
+1, 
œrge_max˛ass
);

61 
	}
}

62 
TEST_END


64 
	$TEST_BEGIN
(
ã°_zîo_huge
)

67 
	`ã°_skù_if
(!
c⁄fig_fûl
);

68 
	`ã°_zîo
(
œrge_max˛ass
+1, 
chunksize
*2);

69 
	}
}

70 
TEST_END


73 
	$maö
()

76  (
	`ã°
(

77 
ã°_zîo_smÆl
,

78 
ã°_zîo_œrge
,

79 
ã°_zîo_huge
));

80 
	}
}

	@dep/sds/sds.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<˘y≥.h
>

37 
	~<as£π.h
>

39 
	~<sds.h
>

40 
	~<sdßŒoc.h
>

43 
ölöe
 
	$sdsHdrSize
(
ty≥
) {

44 
ty≥
&
SDS_TYPE_MASK
) {

45 
SDS_TYPE_5
:

46  (
sdshdr5
);

47 
SDS_TYPE_8
:

48  (
sdshdr8
);

49 
SDS_TYPE_16
:

50  (
sdshdr16
);

51 
SDS_TYPE_32
:

52  (
sdshdr32
);

53 
SDS_TYPE_64
:

54  (
sdshdr64
);

57 
	}
}

60 
ölöe
 
	$sdsReqTy≥
(
size_t
 
°rög_size
) {

61 i‡(
°rög_size
 < 32)

62  
SDS_TYPE_5
;

63 i‡(
°rög_size
 < 0xff)

64  
SDS_TYPE_8
;

65 i‡(
°rög_size
 < 0xffff)

66  
SDS_TYPE_16
;

67 i‡(
°rög_size
 < 0xffffffff)

68  
SDS_TYPE_32
;

69  
SDS_TYPE_64
;

70 
	}
}

85 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

86 *
sh
;

87 
sds
 
s
;

89 
ty≥
 = 
	`sdsReqTy≥
(
öôÀn
);

93 i‡(
ty≥
 =
SDS_TYPE_5
 && 
öôÀn
 =0Ëty≥ = 
SDS_TYPE_8
;

95 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

96 *
Â
;

98 
sh
 = 
	`s_mÆloc
(
hdæí
+
öôÀn
+1);

99 i‡(!
öô
)

100 
	`mem£t
(
sh
, 0, 
hdæí
+
öôÀn
+1);

101 i‡(
sh
 =
NULL
)  NULL;

103 
s
 = (*)
sh
+
hdæí
;

105 
Â
 = ((*)
s
)-1;

107 
ty≥
) {

108 
SDS_TYPE_5
: {

109 *
Â
 = 
ty≥
 | (
öôÀn
 << 
SDS_TYPE_BITS
);

112 
SDS_TYPE_8
: {

113 
	`SDS_HDR_VAR
(8,
s
);

114 
sh
->
Àn
 = 
öôÀn
;

115 
sh
->
Æloc
 = 
öôÀn
;

116 *
Â
 = 
ty≥
;

119 
SDS_TYPE_16
: {

120 
	`SDS_HDR_VAR
(16,
s
);

121 
sh
->
Àn
 = 
öôÀn
;

122 
sh
->
Æloc
 = 
öôÀn
;

123 *
Â
 = 
ty≥
;

126 
SDS_TYPE_32
: {

127 
	`SDS_HDR_VAR
(32,
s
);

128 
sh
->
Àn
 = 
öôÀn
;

129 
sh
->
Æloc
 = 
öôÀn
;

130 *
Â
 = 
ty≥
;

133 
SDS_TYPE_64
: {

134 
	`SDS_HDR_VAR
(64,
s
);

135 
sh
->
Àn
 = 
öôÀn
;

136 
sh
->
Æloc
 = 
öôÀn
;

137 *
Â
 = 
ty≥
;

142 i‡(
öôÀn
 && 
öô
)

143 
	`mem˝y
(
s
, 
öô
, 
öôÀn
);

144 
s
[
öôÀn
] = '\0';

145  
s
;

146 
	}
}

151 
sds
 
	$sd£m±y
() {

152  
	`sd¢ewÀn
("",0);

153 
	}
}

157 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

158 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

159  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

160 
	}
}

164 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

165  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

166 
	}
}

170 
	$sds‰ì
(
sds
 
s
) {

171 i‡(
s
 =
NULL
) ;

172 
	`s_‰ì
((*)
s
-
	`sdsHdrSize
(s[-1]));

173 
	}
}

190 
	$sdsupd©ñí
(
sds
 
s
) {

191 
ªÆÀn
 = 
	`°æí
(
s
);

192 
	`sds£éí
(
s
, 
ªÆÀn
);

193 
	}
}

200 
	$sds˛ór
(
sds
 
s
) {

201 
	`sds£éí
(
s
, 0);

202 
s
[0] = '\0';

203 
	}
}

212 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

213 *
sh
, *
√wsh
;

215 
size_t
 
avaû
 = 
	`sdßvaû
(
s
);

216 
size_t
 
Àn
, 
√wÀn
;

217 
ty≥
, 
ﬁdty≥
 = 
s
[-1] & 
SDS_TYPE_MASK
;

218 
hdæí
;

222 i‡(
avaû
 >
addÀn
Ë 
s
;

225 
Àn
 = 
	`sd¶í
(
s
);

227 
sh
 = (*)
s
-
	`sdsHdrSize
(
ﬁdty≥
);

229 
√wÀn
 = (
Àn
+
addÀn
);

231 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

232 
√wÀn
 *= 2;

234 
√wÀn
 +
SDS_MAX_PREALLOC
;

237 
ty≥
 = 
	`sdsReqTy≥
(
√wÀn
);

243 i‡(
ty≥
 =
SDS_TYPE_5
Ëty≥ = 
SDS_TYPE_8
;

246 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

248 i‡(
ﬁdty≥
==
ty≥
) {

249 
√wsh
 = 
	`s_ªÆloc
(
sh
, 
hdæí
+
√wÀn
+1);

250 i‡(
√wsh
 =
NULL
)  NULL;

251 
s
 = (*)
√wsh
+
hdæí
;

255 
√wsh
 = 
	`s_mÆloc
(
hdæí
+
√wÀn
+1);

256 i‡(
√wsh
 =
NULL
)  NULL;

258 
	`mem˝y
((*)
√wsh
+
hdæí
, 
s
, 
Àn
+1);

260 
	`s_‰ì
(
sh
);

262 
s
 = (*)
√wsh
+
hdæí
;

263 
s
[-1] = 
ty≥
;

264 
	`sds£éí
(
s
, 
Àn
);

267 
	`sds£èŒoc
(
s
, 
√wÀn
);

268  
s
;

269 
	}
}

278 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

280 *
sh
, *
√wsh
;

281 
ty≥
, 
ﬁdty≥
 = 
s
[-1] & 
SDS_TYPE_MASK
;

282 
hdæí
;

283 
size_t
 
Àn
 = 
	`sd¶í
(
s
);

285 
sh
 = (*)
s
-
	`sdsHdrSize
(
ﬁdty≥
);

287 
ty≥
 = 
	`sdsReqTy≥
(
Àn
);

289 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

291 i‡(
ﬁdty≥
==
ty≥
) {

292 
√wsh
 = 
	`s_ªÆloc
(
sh
, 
hdæí
+
Àn
+1);

293 i‡(
√wsh
 =
NULL
)  NULL;

294 
s
 = (*)
√wsh
+
hdæí
;

296 
√wsh
 = 
	`s_mÆloc
(
hdæí
+
Àn
+1);

297 i‡(
√wsh
 =
NULL
)  NULL;

298 
	`mem˝y
((*)
√wsh
+
hdæí
, 
s
, 
Àn
+1);

299 
	`s_‰ì
(
sh
);

300 
s
 = (*)
√wsh
+
hdæí
;

301 
s
[-1] = 
ty≥
;

302 
	`sds£éí
(
s
, 
Àn
);

304 
	`sds£èŒoc
(
s
, 
Àn
);

305  
s
;

306 
	}
}

316 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

317 
size_t
 
Æloc
 = 
	`sdßŒoc
(
s
);

318  
	`sdsHdrSize
(
s
[-1])+
Æloc
+1;

319 
	}
}

324 *
	$sdsAŒocPå
(
sds
 
s
) {

325  (*Ë(
s
-
	`sdsHdrSize
(s[-1]));

326 
	}
}

352 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

353 
Êags
 = 
s
[-1];

354 
size_t
 
Àn
;

356 
Êags
&
SDS_TYPE_MASK
) {

357 
SDS_TYPE_5
: {

358 *
Â
 = ((*)
s
)-1;

359 
ﬁdÀn
 = 
	`SDS_TYPE_5_LEN
(
Êags
);

360 
	`as£π
((
ö¸
 > 0 && 
ﬁdÀn
+incr < 32) || (incr < 0 && oldlen >= ()(-incr)));

361 *
Â
 = 
SDS_TYPE_5
 | ((
ﬁdÀn
+
ö¸
Ë<< 
SDS_TYPE_BITS
);

362 
Àn
 = 
ﬁdÀn
+
ö¸
;

365 
SDS_TYPE_8
: {

366 
	`SDS_HDR_VAR
(8,
s
);

367 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= incr) || (incr < 0 && sh->len >= ()(-incr)));

368 
Àn
 = (
sh
->À¿+
ö¸
);

371 
SDS_TYPE_16
: {

372 
	`SDS_HDR_VAR
(16,
s
);

373 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= incr) || (incr < 0 && sh->len >= ()(-incr)));

374 
Àn
 = (
sh
->À¿+
ö¸
);

377 
SDS_TYPE_32
: {

378 
	`SDS_HDR_VAR
(32,
s
);

379 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= ()incr) || (incr < 0 && sh->len >= ()(-incr)));

380 
Àn
 = (
sh
->À¿+
ö¸
);

383 
SDS_TYPE_64
: {

384 
	`SDS_HDR_VAR
(64,
s
);

385 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >(
uöt64_t
)incr) || (incr < 0 && sh->len >= (uint64_t)(-incr)));

386 
Àn
 = (
sh
->À¿+
ö¸
);

389 : 
Àn
 = 0;

391 
s
[
Àn
] = '\0';

392 
	}
}

400 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

401 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

403 i‡(
Àn
 <
cuæí
Ë 
s
;

404 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

405 i‡(
s
 =
NULL
)  NULL;

408 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

409 
	`sds£éí
(
s
, 
Àn
);

410  
s
;

411 
	}
}

419 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

420 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

422 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

423 i‡(
s
 =
NULL
)  NULL;

424 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

425 
	`sds£éí
(
s
, 
cuæí
+
Àn
);

426 
s
[
cuæí
+
Àn
] = '\0';

427  
s
;

428 
	}
}

435 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

436  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

437 
	}
}

444 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

445  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

446 
	}
}

451 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

452 i‡(
	`sdßŒoc
(
s
Ë< 
Àn
) {

453 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
	`sd¶í
(s));

454 i‡(
s
 =
NULL
)  NULL;

456 
	`mem˝y
(
s
, 
t
, 
Àn
);

457 
s
[
Àn
] = '\0';

458 
	`sds£éí
(
s
, 
Àn
);

459  
s
;

460 
	}
}

465 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

466  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

467 
	}
}

475 
	#SDS_LLSTR_SIZE
 21

	)

477 
	$sd¶l2°r
(*
s
, 
vÆue
) {

478 *
p
, 
aux
;

479 
v
;

480 
size_t
 
l
;

485 
v
 = (
vÆue
 < 0) ? -value : value;

487 
p
 = 
s
;

489 *
p
++ = '0'+(
v
%10);

490 
v
 /= 10;

491 } 
v
);

492 i‡(
vÆue
 < 0Ë*
p
++ = '-';

496 
l
 = 
p
-
s
;

497 *
p
 = '\0';

500 
p
--;

501 
s
 < 
p
) {

502 
aux
 = *
s
;

503 *
s
 = *
p
;

504 *
p
 = 
aux
;

505 
s
++;

506 
p
--;

508  
l
;

509 
	}
}

513 
	$sdsuŒ2°r
(*
s
, 
v
) {

514 *
p
, 
aux
;

515 
size_t
 
l
;

519 
p
 = 
s
;

521 *
p
++ = '0'+(
v
%10);

522 
v
 /= 10;

523 } 
v
);

526 
l
 = 
p
-
s
;

527 *
p
 = '\0';

530 
p
--;

531 
s
 < 
p
) {

532 
aux
 = *
s
;

533 *
s
 = *
p
;

534 *
p
 = 
aux
;

535 
s
++;

536 
p
--;

538  
l
;

539 
	}
}

546 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

547 
buf
[
SDS_LLSTR_SIZE
];

548 
Àn
 = 
	`sd¶l2°r
(
buf
,
vÆue
);

550  
	`sd¢ewÀn
(
buf
,
Àn
);

551 
	}
}

555 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

556 
va_li°
 
˝y
;

557 
°©icbuf
[1024], *
buf
 = sèticbuf, *
t
;

558 
size_t
 
buÊí
 = 
	`°æí
(
fmt
)*2;

562 i‡(
buÊí
 > (
°©icbuf
)) {

563 
buf
 = 
	`s_mÆloc
(
buÊí
);

564 i‡(
buf
 =
NULL
)  NULL;

566 
buÊí
 = (
°©icbuf
);

572 
buf
[
buÊí
-2] = '\0';

573 
	`va_c›y
(
˝y
,
≠
);

574 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

575 
	`va_íd
(
˝y
);

576 i‡(
buf
[
buÊí
-2] != '\0') {

577 i‡(
buf
 !
°©icbuf
Ë
	`s_‰ì
(buf);

578 
buÊí
 *= 2;

579 
buf
 = 
	`s_mÆloc
(
buÊí
);

580 i‡(
buf
 =
NULL
)  NULL;

587 
t
 = 
	`sdsˇt
(
s
, 
buf
);

588 i‡(
buf
 !
°©icbuf
Ë
	`s_‰ì
(buf);

589  
t
;

590 
	}
}

609 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

610 
va_li°
 
≠
;

611 *
t
;

612 
	`va_°¨t
(
≠
, 
fmt
);

613 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

614 
	`va_íd
(
≠
);

615  
t
;

616 
	}
}

635 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

636 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

637 c⁄° *
f
 = 
fmt
;

638 
i
;

639 
va_li°
 
≠
;

641 
	`va_°¨t
(
≠
,
fmt
);

642 
f
 = 
fmt
;

643 
i
 = 
öôÀn
;

644 *
f
) {

645 
√xt
, *
°r
;

646 
size_t
 
l
;

647 
num
;

648 
unum
;

651 i‡(
	`sdßvaû
(
s
)==0) {

652 
s
 = 
	`sdsMakeRoomF‹
(s,1);

655 *
f
) {

657 
√xt
 = *(
f
+1);

658 
f
++;

659 
√xt
) {

662 
°r
 = 
	`va_¨g
(
≠
,*);

663 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

664 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

665 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

667 
	`mem˝y
(
s
+
i
,
°r
,
l
);

668 
	`sdsö˛í
(
s
,
l
);

669 
i
 +
l
;

673 i‡(
√xt
 == 'i')

674 
num
 = 
	`va_¨g
(
≠
,);

676 
num
 = 
	`va_¨g
(
≠
,);

678 
buf
[
SDS_LLSTR_SIZE
];

679 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

680 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

681 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

683 
	`mem˝y
(
s
+
i
,
buf
,
l
);

684 
	`sdsö˛í
(
s
,
l
);

685 
i
 +
l
;

690 i‡(
√xt
 == 'u')

691 
unum
 = 
	`va_¨g
(
≠
,);

693 
unum
 = 
	`va_¨g
(
≠
,);

695 
buf
[
SDS_LLSTR_SIZE
];

696 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

697 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

698 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

700 
	`mem˝y
(
s
+
i
,
buf
,
l
);

701 
	`sdsö˛í
(
s
,
l
);

702 
i
 +
l
;

706 
s
[
i
++] = 
√xt
;

707 
	`sdsö˛í
(
s
,1);

712 
s
[
i
++] = *
f
;

713 
	`sdsö˛í
(
s
,1);

716 
f
++;

718 
	`va_íd
(
≠
);

721 
s
[
i
] = '\0';

722  
s
;

723 
	}
}

740 
sds
 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

741 *
°¨t
, *
íd
, *
•
, *
ï
;

742 
size_t
 
Àn
;

744 
•
 = 
°¨t
 = 
s
;

745 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

746 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

747 
ï
 > 
•
 && 
	`°rchr
(
c£t
, *ep))Ép--;

748 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

749 i‡(
s
 !
•
Ë
	`memmove
(s, sp, 
Àn
);

750 
s
[
Àn
] = '\0';

751 
	`sds£éí
(
s
,
Àn
);

752  
s
;

753 
	}
}

772 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

773 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

775 i‡(
Àn
 == 0) ;

776 i‡(
°¨t
 < 0) {

777 
°¨t
 = 
Àn
+start;

778 i‡(
°¨t
 < 0) start = 0;

780 i‡(
íd
 < 0) {

781 
íd
 = 
Àn
+end;

782 i‡(
íd
 < 0)Énd = 0;

784 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

785 i‡(
√wÀn
 != 0) {

786 i‡(
°¨t
 >(sig√d)
Àn
) {

787 
√wÀn
 = 0;

788 } i‡(
íd
 >(sig√d)
Àn
) {

789 
íd
 = 
Àn
-1;

790 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

793 
°¨t
 = 0;

795 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
s
, s+start,Çewlen);

796 
s
[
√wÀn
] = 0;

797 
	`sds£éí
(
s
,
√wÀn
);

798 
	}
}

802 
	$sd°ﬁowî
(
sds
 
s
) {

803 
Àn
 = 
	`sd¶í
(
s
), 
j
;

805 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

806 
	}
}

810 
	$sd°ouµî
(
sds
 
s
) {

811 
Àn
 = 
	`sd¶í
(
s
), 
j
;

813 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

814 
	}
}

828 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

829 
size_t
 
l1
, 
l2
, 
möÀn
;

830 
cmp
;

832 
l1
 = 
	`sd¶í
(
s1
);

833 
l2
 = 
	`sd¶í
(
s2
);

834 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

835 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

836 i‡(
cmp
 =0Ë 
l1
-
l2
;

837  
cmp
;

838 
	}
}

857 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

858 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

859 
sds
 *
tokís
;

861 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

864 
tokís
 = 
	`s_mÆloc
((
sds
)*
¶Ÿs
);

865 i‡(
tokís
 =
NULL
)  NULL;

867 i‡(
Àn
 == 0) {

868 *
cou¡
 = 0;

869  
tokís
;

871 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

874 i‡(
¶Ÿs
 < 
ñemíts
+2) {

875 
sds
 *
√wtokís
;

877 
¶Ÿs
 *= 2;

878 
√wtokís
 = 
	`s_ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

879 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

880 
tokís
 = 
√wtokís
;

884 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

885 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

886 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

887 
ñemíts
++;

888 
°¨t
 = 
j
+
£∂í
;

889 
j
 = j+
£∂í
-1;

893 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

894 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

895 
ñemíts
++;

896 *
cou¡
 = 
ñemíts
;

897  
tokís
;

899 
˛ónup
:

901 
i
;

902 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

903 
	`s_‰ì
(
tokís
);

904 *
cou¡
 = 0;

905  
NULL
;

907 
	}
}

911 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

912 i‡(!
tokís
) ;

913 
cou¡
--)

914 
	`sds‰ì
(
tokís
[
cou¡
]);

915 
	`s_‰ì
(
tokís
);

916 
	}
}

926 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

929 
s
 = 
	`sdsˇéí
(s,"\"",1);

931 
Àn
--) {

932 *
p
) {

935 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

937 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

938 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

939 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

940 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

941 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

943 i‡(
	`i•röt
(*
p
))

944 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

946 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

949 
p
++;

951  
	`sdsˇéí
(
s
,"\"",1);

952 
	}
}

957 
	$is_hex_digô
(
c
) {

958  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

959 (
c
 >= 'A' && c <= 'F');

960 
	}
}

965 
	$hex_digô_to_öt
(
c
) {

966 
c
) {

985 
	}
}

1007 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

1008 c⁄° *
p
 = 
löe
;

1009 *
cuºít
 = 
NULL
;

1010 **
ve˘‹
 = 
NULL
;

1012 *
¨gc
 = 0;

1016 *
p
 && 
	`is•a˚
(*p))Ö++;

1017 i‡(*
p
) {

1019 
öq
=0;

1020 
ösq
=0;

1021 
d⁄e
=0;

1023 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

1024 !
d⁄e
) {

1025 i‡(
öq
) {

1026 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

1027 
	`is_hex_digô
(*(
p
+2)) &&

1028 
	`is_hex_digô
(*(
p
+3)))

1030 
byã
;

1032 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

1033 
	`hex_digô_to_öt
(*(
p
+3));

1034 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

1035 
p
 += 3;

1036 } i‡(*
p
 == '\\' && *(p+1)) {

1037 
c
;

1039 
p
++;

1040 *
p
) {

1041 'n': 
c
 = '\n'; ;

1042 'r': 
c
 = '\r'; ;

1043 't': 
c
 = '\t'; ;

1044 'b': 
c
 = '\b'; ;

1045 'a': 
c
 = '\a'; ;

1046 : 
c
 = *
p
; ;

1048 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

1049 } i‡(*
p
 == '"') {

1052 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

1053 
d⁄e
=1;

1054 } i‡(!*
p
) {

1056 
îr
;

1058 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1060 } i‡(
ösq
) {

1061 i‡(*
p
 == '\\' && *(p+1) == '\'') {

1062 
p
++;

1063 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

1064 } i‡(*
p
 == '\'') {

1067 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

1068 
d⁄e
=1;

1069 } i‡(!*
p
) {

1071 
îr
;

1073 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1076 *
p
) {

1082 
d⁄e
=1;

1085 
öq
=1;

1088 
ösq
=1;

1091 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1095 i‡(*
p
)Ö++;

1098 
ve˘‹
 = 
	`s_ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

1099 
ve˘‹
[*
¨gc
] = 
cuºít
;

1100 (*
¨gc
)++;

1101 
cuºít
 = 
NULL
;

1104 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`s_mÆloc
((*));

1105  
ve˘‹
;

1109 
îr
:

1110 (*
¨gc
)--)

1111 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

1112 
	`s_‰ì
(
ve˘‹
);

1113 i‡(
cuºít
Ë
	`sds‰ì
(current);

1114 *
¨gc
 = 0;

1115  
NULL
;

1116 
	}
}

1128 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

1129 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

1131 
j
 = 0; j < 
l
; j++) {

1132 
i
 = 0; i < 
£éí
; i++) {

1133 i‡(
s
[
j
] =
‰om
[
i
]) {

1134 
s
[
j
] = 
to
[
i
];

1139  
s
;

1140 
	}
}

1145 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
) {

1146 
sds
 
joö
 = 
	`sd£m±y
();

1147 
j
;

1149 
j
 = 0; j < 
¨gc
; j++) {

1150 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

1151 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇt
(joö,
£p
);

1153  
joö
;

1154 
	}
}

1158 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

1159 
sds
 
joö
 = 
	`sd£m±y
();

1160 
j
;

1162 
j
 = 0; j < 
¨gc
; j++) {

1163 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

1164 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

1166  
joö
;

1167 
	}
}

1170 
	$sdsIsNum
(
sds
 
s
) {

1171 
size_t
 
i
;

1173 i‡(
s
 =
NULL
 || 
	`sd¶í
(s) == 0) {

1177 
i
 = 0; i < 
	`sd¶í
(
s
); i ++) {

1178 if(*(
s
+
i
) < '0' || *(s+i) > '9'){

1184 
	}
}

1191 *
	$sds_mÆloc
(
size_t
 
size
Ë{  
	`s_mÆloc
(size); 
	}
}

1192 *
	$sds_ªÆloc
(*
±r
, 
size_t
 
size
Ë{  
	`s_ªÆloc
’å,size); 
	}
}

1193 
	$sds_‰ì
(*
±r
Ë{ 
	`s_‰ì
’å); 
	}
}

1195 #i‡
deföed
(
SDS_TEST_MAIN
)

1196 
	~<°dio.h
>

1197 
	~"ã°hñp.h
"

1198 
	~"limôs.h
"

1200 
	#UNUSED
(
x
Ë()(x)

	)

1202 
	$sdsTe°
() {

1204 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

1206 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

1207 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

1209 
	`sds‰ì
(
x
);

1210 
x
 = 
	`sd¢ewÀn
("foo",2);

1211 
	`ã°_c⁄d
("Createá string with specifiedÜength",

1212 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

1214 
x
 = 
	`sdsˇt
(x,"bar");

1215 
	`ã°_c⁄d
("Strings concatenation",

1216 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

1218 
x
 = 
	`sds˝y
(x,"a");

1219 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

1220 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

1222 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

1223 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1224 
	`sd¶í
(
x
) == 33 &&

1225 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1227 
	`sds‰ì
(
x
);

1228 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1229 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1230 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) == 0)

1232 
	`sds‰ì
(
x
);

1233 
x
 = 
	`sd¢ew
("--");

1234 
x
 = 
	`sdsˇtfmt
(x, "Hñlÿ%†W‹ld %I,%I--", "Hi!", 
LLONG_MIN
,
LLONG_MAX
);

1235 
	`ã°_c⁄d
("sdscatfmt() seems working inÅhe base case",

1236 
	`sd¶í
(
x
) == 60 &&

1237 
	`memcmp
(
x
,"--Hello Hi! World -9223372036854775808,"

1239 
	`¥ötf
("[%s]\n",
x
);

1241 
	`sds‰ì
(
x
);

1242 
x
 = 
	`sd¢ew
("--");

1243 
x
 = 
	`sdsˇtfmt
(x, "%u,%U--", 
UINT_MAX
, 
ULLONG_MAX
);

1244 
	`ã°_c⁄d
("sdscatfmt() seems working with unsignedÇumbers",

1245 
	`sd¶í
(
x
) == 35 &&

1246 
	`memcmp
(
x
,"--4294967295,18446744073709551615--",35) == 0)

1248 
	`sds‰ì
(
x
);

1249 
x
 = 
	`sd¢ew
(" x ");

1250 
	`sd°rim
(
x
," x");

1251 
	`ã°_c⁄d
("sdstrim() works whenáll chars match",

1252 
	`sd¶í
(
x
) == 0)

1254 
	`sds‰ì
(
x
);

1255 
x
 = 
	`sd¢ew
(" x ");

1256 
	`sd°rim
(
x
," ");

1257 
	`ã°_c⁄d
("sdstrim() works whená single charÑemains",

1258 
	`sd¶í
(
x
) == 1 && x[0] == 'x')

1260 
	`sds‰ì
(
x
);

1261 
x
 = 
	`sd¢ew
("xxciaoyyy");

1262 
	`sd°rim
(
x
,"xy");

1263 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1264 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1266 
y
 = 
	`sdsdup
(
x
);

1267 
	`sd§™ge
(
y
,1,1);

1268 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1269 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1271 
	`sds‰ì
(
y
);

1272 
y
 = 
	`sdsdup
(
x
);

1273 
	`sd§™ge
(
y
,1,-1);

1274 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1275 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1277 
	`sds‰ì
(
y
);

1278 
y
 = 
	`sdsdup
(
x
);

1279 
	`sd§™ge
(
y
,-2,-1);

1280 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1281 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1283 
	`sds‰ì
(
y
);

1284 
y
 = 
	`sdsdup
(
x
);

1285 
	`sd§™ge
(
y
,2,1);

1286 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1287 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1289 
	`sds‰ì
(
y
);

1290 
y
 = 
	`sdsdup
(
x
);

1291 
	`sd§™ge
(
y
,1,100);

1292 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1293 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1295 
	`sds‰ì
(
y
);

1296 
y
 = 
	`sdsdup
(
x
);

1297 
	`sd§™ge
(
y
,100,100);

1298 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1299 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1301 
	`sds‰ì
(
y
);

1302 
	`sds‰ì
(
x
);

1303 
x
 = 
	`sd¢ew
("foo");

1304 
y
 = 
	`sd¢ew
("foa");

1305 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1307 
	`sds‰ì
(
y
);

1308 
	`sds‰ì
(
x
);

1309 
x
 = 
	`sd¢ew
("bar");

1310 
y
 = 
	`sd¢ew
("bar");

1311 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1313 
	`sds‰ì
(
y
);

1314 
	`sds‰ì
(
x
);

1315 
x
 = 
	`sd¢ew
("aar");

1316 
y
 = 
	`sd¢ew
("bar");

1317 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1319 
	`sds‰ì
(
y
);

1320 
	`sds‰ì
(
x
);

1321 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1322 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1323 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1324 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1327 
ﬁd‰ì
;

1328 *
p
;

1329 
°ï
 = 10, 
j
, 
i
;

1331 
	`sds‰ì
(
x
);

1332 
	`sds‰ì
(
y
);

1333 
x
 = 
	`sd¢ew
("0");

1334 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
	`sd¶í
(
x
Ë=1 && 
	`sdßvaû
(x) == 0);

1338 
i
 = 0; i < 10; i++) {

1339 
ﬁdÀn
 = 
	`sd¶í
(
x
);

1340 
x
 = 
	`sdsMakeRoomF‹
(x,
°ï
);

1341 
ty≥
 = 
x
[-1]&
SDS_TYPE_MASK
;

1343 
	`ã°_c⁄d
("sdsMakeRoomF‹(ËÀn", 
	`sd¶í
(
x
Ë=
ﬁdÀn
);

1344 i‡(
ty≥
 !
SDS_TYPE_5
) {

1345 
	`ã°_c⁄d
("sdsMakeRoomF‹(Ë‰ì", 
	`sdßvaû
(
x
Ë>
°ï
);

1346 
ﬁd‰ì
 = 
	`sdßvaû
(
x
);

1348 
p
 = 
x
+
ﬁdÀn
;

1349 
j
 = 0; j < 
°ï
; j++) {

1350 
p
[
j
] = 'A'+j;

1352 
	`sdsIn¸Lí
(
x
,
°ï
);

1354 
	`ã°_c⁄d
("sdsMakeRoomFor() content",

1355 
	`memcmp
("0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ",
x
,101) == 0);

1356 
	`ã°_c⁄d
("sdsMakeRoomF‹(ËföÆÜígth",
	`sd¶í
(
x
)==101);

1358 
	`sds‰ì
(
x
);

1361 
	`ã°_ªp‹t
()

1363 
	}
}

1366 #ifde‡
SDS_TEST_MAIN


1367 
	$maö
() {

1368  
	`sdsTe°
();

1369 
	}
}

	@dep/sds/sds.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<˘y≥.h
>

37 
	~<as£π.h
>

39 
	~<sds.h
>

40 
	~<sdßŒoc.h
>

43 
ölöe
 
	$sdsHdrSize
(
ty≥
) {

44 
ty≥
&
SDS_TYPE_MASK
) {

45 
SDS_TYPE_5
:

46  (
sdshdr5
);

47 
SDS_TYPE_8
:

48  (
sdshdr8
);

49 
SDS_TYPE_16
:

50  (
sdshdr16
);

51 
SDS_TYPE_32
:

52  (
sdshdr32
);

53 
SDS_TYPE_64
:

54  (
sdshdr64
);

57 
	}
}

60 
ölöe
 
	$sdsReqTy≥
(
size_t
 
°rög_size
) {

61 i‡(
°rög_size
 < 32)

62  
SDS_TYPE_5
;

63 i‡(
°rög_size
 < 0xff)

64  
SDS_TYPE_8
;

65 i‡(
°rög_size
 < 0xffff)

66  
SDS_TYPE_16
;

67 i‡(
°rög_size
 < 0xffffffff)

68  
SDS_TYPE_32
;

69  
SDS_TYPE_64
;

70 
	}
}

85 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

86 *
sh
;

87 
sds
 
s
;

89 
ty≥
 = 
	`sdsReqTy≥
(
öôÀn
);

93 i‡(
ty≥
 =
SDS_TYPE_5
 && 
öôÀn
 =0Ëty≥ = 
SDS_TYPE_8
;

95 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

96 *
Â
;

98 
sh
 = 
	`s_mÆloc
(
hdæí
+
öôÀn
+1);

99 i‡(!
öô
)

100 
	`mem£t
(
sh
, 0, 
hdæí
+
öôÀn
+1);

101 i‡(
sh
 =
NULL
)  NULL;

103 
s
 = (*)
sh
+
hdæí
;

105 
Â
 = ((*)
s
)-1;

107 
ty≥
) {

108 
SDS_TYPE_5
: {

109 *
Â
 = 
ty≥
 | (
öôÀn
 << 
SDS_TYPE_BITS
);

112 
SDS_TYPE_8
: {

113 
	`SDS_HDR_VAR
(8,
s
);

114 
sh
->
Àn
 = 
öôÀn
;

115 
sh
->
Æloc
 = 
öôÀn
;

116 *
Â
 = 
ty≥
;

119 
SDS_TYPE_16
: {

120 
	`SDS_HDR_VAR
(16,
s
);

121 
sh
->
Àn
 = 
öôÀn
;

122 
sh
->
Æloc
 = 
öôÀn
;

123 *
Â
 = 
ty≥
;

126 
SDS_TYPE_32
: {

127 
	`SDS_HDR_VAR
(32,
s
);

128 
sh
->
Àn
 = 
öôÀn
;

129 
sh
->
Æloc
 = 
öôÀn
;

130 *
Â
 = 
ty≥
;

133 
SDS_TYPE_64
: {

134 
	`SDS_HDR_VAR
(64,
s
);

135 
sh
->
Àn
 = 
öôÀn
;

136 
sh
->
Æloc
 = 
öôÀn
;

137 *
Â
 = 
ty≥
;

142 i‡(
öôÀn
 && 
öô
)

143 
	`mem˝y
(
s
, 
öô
, 
öôÀn
);

144 
s
[
öôÀn
] = '\0';

145  
s
;

146 
	}
}

151 
sds
 
	$sd£m±y
() {

152  
	`sd¢ewÀn
("",0);

153 
	}
}

157 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

158 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

159  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

160 
	}
}

164 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

165  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

166 
	}
}

170 
	$sds‰ì
(
sds
 
s
) {

171 i‡(
s
 =
NULL
) ;

172 
	`s_‰ì
((*)
s
-
	`sdsHdrSize
(s[-1]));

173 
	}
}

190 
	$sdsupd©ñí
(
sds
 
s
) {

191 
ªÆÀn
 = 
	`°æí
(
s
);

192 
	`sds£éí
(
s
, 
ªÆÀn
);

193 
	}
}

200 
	$sds˛ór
(
sds
 
s
) {

201 
	`sds£éí
(
s
, 0);

202 
s
[0] = '\0';

203 
	}
}

212 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

213 *
sh
, *
√wsh
;

215 
size_t
 
avaû
 = 
	`sdßvaû
(
s
);

216 
size_t
 
Àn
, 
√wÀn
;

217 
ty≥
, 
ﬁdty≥
 = 
s
[-1] & 
SDS_TYPE_MASK
;

218 
hdæí
;

222 i‡(
avaû
 >
addÀn
Ë 
s
;

225 
Àn
 = 
	`sd¶í
(
s
);

227 
sh
 = (*)
s
-
	`sdsHdrSize
(
ﬁdty≥
);

229 
√wÀn
 = (
Àn
+
addÀn
);

231 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

232 
√wÀn
 *= 2;

234 
√wÀn
 +
SDS_MAX_PREALLOC
;

237 
ty≥
 = 
	`sdsReqTy≥
(
√wÀn
);

243 i‡(
ty≥
 =
SDS_TYPE_5
Ëty≥ = 
SDS_TYPE_8
;

246 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

248 i‡(
ﬁdty≥
==
ty≥
) {

249 
√wsh
 = 
	`s_ªÆloc
(
sh
, 
hdæí
+
√wÀn
+1);

250 i‡(
√wsh
 =
NULL
)  NULL;

251 
s
 = (*)
√wsh
+
hdæí
;

255 
√wsh
 = 
	`s_mÆloc
(
hdæí
+
√wÀn
+1);

256 i‡(
√wsh
 =
NULL
)  NULL;

258 
	`mem˝y
((*)
√wsh
+
hdæí
, 
s
, 
Àn
+1);

260 
	`s_‰ì
(
sh
);

262 
s
 = (*)
√wsh
+
hdæí
;

263 
s
[-1] = 
ty≥
;

264 
	`sds£éí
(
s
, 
Àn
);

267 
	`sds£èŒoc
(
s
, 
√wÀn
);

268  
s
;

269 
	}
}

278 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

280 *
sh
, *
√wsh
;

281 
ty≥
, 
ﬁdty≥
 = 
s
[-1] & 
SDS_TYPE_MASK
;

282 
hdæí
;

283 
size_t
 
Àn
 = 
	`sd¶í
(
s
);

285 
sh
 = (*)
s
-
	`sdsHdrSize
(
ﬁdty≥
);

287 
ty≥
 = 
	`sdsReqTy≥
(
Àn
);

289 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

291 i‡(
ﬁdty≥
==
ty≥
) {

292 
√wsh
 = 
	`s_ªÆloc
(
sh
, 
hdæí
+
Àn
+1);

293 i‡(
√wsh
 =
NULL
)  NULL;

294 
s
 = (*)
√wsh
+
hdæí
;

296 
√wsh
 = 
	`s_mÆloc
(
hdæí
+
Àn
+1);

297 i‡(
√wsh
 =
NULL
)  NULL;

298 
	`mem˝y
((*)
√wsh
+
hdæí
, 
s
, 
Àn
+1);

299 
	`s_‰ì
(
sh
);

300 
s
 = (*)
√wsh
+
hdæí
;

301 
s
[-1] = 
ty≥
;

302 
	`sds£éí
(
s
, 
Àn
);

304 
	`sds£èŒoc
(
s
, 
Àn
);

305  
s
;

306 
	}
}

316 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

317 
size_t
 
Æloc
 = 
	`sdßŒoc
(
s
);

318  
	`sdsHdrSize
(
s
[-1])+
Æloc
+1;

319 
	}
}

324 *
	$sdsAŒocPå
(
sds
 
s
) {

325  (*Ë(
s
-
	`sdsHdrSize
(s[-1]));

326 
	}
}

352 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

353 
Êags
 = 
s
[-1];

354 
size_t
 
Àn
;

356 
Êags
&
SDS_TYPE_MASK
) {

357 
SDS_TYPE_5
: {

358 *
Â
 = ((*)
s
)-1;

359 
ﬁdÀn
 = 
	`SDS_TYPE_5_LEN
(
Êags
);

360 
	`as£π
((
ö¸
 > 0 && 
ﬁdÀn
+incr < 32) || (incr < 0 && oldlen >= ()(-incr)));

361 *
Â
 = 
SDS_TYPE_5
 | ((
ﬁdÀn
+
ö¸
Ë<< 
SDS_TYPE_BITS
);

362 
Àn
 = 
ﬁdÀn
+
ö¸
;

365 
SDS_TYPE_8
: {

366 
	`SDS_HDR_VAR
(8,
s
);

367 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= incr) || (incr < 0 && sh->len >= ()(-incr)));

368 
Àn
 = (
sh
->À¿+
ö¸
);

371 
SDS_TYPE_16
: {

372 
	`SDS_HDR_VAR
(16,
s
);

373 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= incr) || (incr < 0 && sh->len >= ()(-incr)));

374 
Àn
 = (
sh
->À¿+
ö¸
);

377 
SDS_TYPE_32
: {

378 
	`SDS_HDR_VAR
(32,
s
);

379 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= ()incr) || (incr < 0 && sh->len >= ()(-incr)));

380 
Àn
 = (
sh
->À¿+
ö¸
);

383 
SDS_TYPE_64
: {

384 
	`SDS_HDR_VAR
(64,
s
);

385 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >(
uöt64_t
)incr) || (incr < 0 && sh->len >= (uint64_t)(-incr)));

386 
Àn
 = (
sh
->À¿+
ö¸
);

389 : 
Àn
 = 0;

391 
s
[
Àn
] = '\0';

392 
	}
}

400 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

401 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

403 i‡(
Àn
 <
cuæí
Ë 
s
;

404 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

405 i‡(
s
 =
NULL
)  NULL;

408 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

409 
	`sds£éí
(
s
, 
Àn
);

410  
s
;

411 
	}
}

419 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

420 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

422 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

423 i‡(
s
 =
NULL
)  NULL;

424 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

425 
	`sds£éí
(
s
, 
cuæí
+
Àn
);

426 
s
[
cuæí
+
Àn
] = '\0';

427  
s
;

428 
	}
}

435 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

436  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

437 
	}
}

444 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

445  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

446 
	}
}

451 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

452 i‡(
	`sdßŒoc
(
s
Ë< 
Àn
) {

453 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
	`sd¶í
(s));

454 i‡(
s
 =
NULL
)  NULL;

456 
	`mem˝y
(
s
, 
t
, 
Àn
);

457 
s
[
Àn
] = '\0';

458 
	`sds£éí
(
s
, 
Àn
);

459  
s
;

460 
	}
}

465 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

466  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

467 
	}
}

475 
	#SDS_LLSTR_SIZE
 21

	)

477 
	$sd¶l2°r
(*
s
, 
vÆue
) {

478 *
p
, 
aux
;

479 
v
;

480 
size_t
 
l
;

485 
v
 = (
vÆue
 < 0) ? -value : value;

487 
p
 = 
s
;

489 *
p
++ = '0'+(
v
%10);

490 
v
 /= 10;

491 } 
v
);

492 i‡(
vÆue
 < 0Ë*
p
++ = '-';

496 
l
 = 
p
-
s
;

497 *
p
 = '\0';

500 
p
--;

501 
s
 < 
p
) {

502 
aux
 = *
s
;

503 *
s
 = *
p
;

504 *
p
 = 
aux
;

505 
s
++;

506 
p
--;

508  
l
;

509 
	}
}

513 
	$sdsuŒ2°r
(*
s
, 
v
) {

514 *
p
, 
aux
;

515 
size_t
 
l
;

519 
p
 = 
s
;

521 *
p
++ = '0'+(
v
%10);

522 
v
 /= 10;

523 } 
v
);

526 
l
 = 
p
-
s
;

527 *
p
 = '\0';

530 
p
--;

531 
s
 < 
p
) {

532 
aux
 = *
s
;

533 *
s
 = *
p
;

534 *
p
 = 
aux
;

535 
s
++;

536 
p
--;

538  
l
;

539 
	}
}

546 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

547 
buf
[
SDS_LLSTR_SIZE
];

548 
Àn
 = 
	`sd¶l2°r
(
buf
,
vÆue
);

550  
	`sd¢ewÀn
(
buf
,
Àn
);

551 
	}
}

555 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

556 
va_li°
 
˝y
;

557 
°©icbuf
[1024], *
buf
 = sèticbuf, *
t
;

558 
size_t
 
buÊí
 = 
	`°æí
(
fmt
)*2;

562 i‡(
buÊí
 > (
°©icbuf
)) {

563 
buf
 = 
	`s_mÆloc
(
buÊí
);

564 i‡(
buf
 =
NULL
)  NULL;

566 
buÊí
 = (
°©icbuf
);

572 
buf
[
buÊí
-2] = '\0';

573 
	`va_c›y
(
˝y
,
≠
);

574 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

575 
	`va_íd
(
˝y
);

576 i‡(
buf
[
buÊí
-2] != '\0') {

577 i‡(
buf
 !
°©icbuf
Ë
	`s_‰ì
(buf);

578 
buÊí
 *= 2;

579 
buf
 = 
	`s_mÆloc
(
buÊí
);

580 i‡(
buf
 =
NULL
)  NULL;

587 
t
 = 
	`sdsˇt
(
s
, 
buf
);

588 i‡(
buf
 !
°©icbuf
Ë
	`s_‰ì
(buf);

589  
t
;

590 
	}
}

609 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

610 
va_li°
 
≠
;

611 *
t
;

612 
	`va_°¨t
(
≠
, 
fmt
);

613 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

614 
	`va_íd
(
≠
);

615  
t
;

616 
	}
}

635 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

636 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

637 c⁄° *
f
 = 
fmt
;

638 
i
;

639 
va_li°
 
≠
;

641 
	`va_°¨t
(
≠
,
fmt
);

642 
f
 = 
fmt
;

643 
i
 = 
öôÀn
;

644 *
f
) {

645 
√xt
, *
°r
;

646 
size_t
 
l
;

647 
num
;

648 
unum
;

651 i‡(
	`sdßvaû
(
s
)==0) {

652 
s
 = 
	`sdsMakeRoomF‹
(s,1);

655 *
f
) {

657 
√xt
 = *(
f
+1);

658 
f
++;

659 
√xt
) {

662 
°r
 = 
	`va_¨g
(
≠
,*);

663 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

664 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

665 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

667 
	`mem˝y
(
s
+
i
,
°r
,
l
);

668 
	`sdsö˛í
(
s
,
l
);

669 
i
 +
l
;

673 i‡(
√xt
 == 'i')

674 
num
 = 
	`va_¨g
(
≠
,);

676 
num
 = 
	`va_¨g
(
≠
,);

678 
buf
[
SDS_LLSTR_SIZE
];

679 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

680 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

681 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

683 
	`mem˝y
(
s
+
i
,
buf
,
l
);

684 
	`sdsö˛í
(
s
,
l
);

685 
i
 +
l
;

690 i‡(
√xt
 == 'u')

691 
unum
 = 
	`va_¨g
(
≠
,);

693 
unum
 = 
	`va_¨g
(
≠
,);

695 
buf
[
SDS_LLSTR_SIZE
];

696 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

697 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

698 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

700 
	`mem˝y
(
s
+
i
,
buf
,
l
);

701 
	`sdsö˛í
(
s
,
l
);

702 
i
 +
l
;

706 
s
[
i
++] = 
√xt
;

707 
	`sdsö˛í
(
s
,1);

712 
s
[
i
++] = *
f
;

713 
	`sdsö˛í
(
s
,1);

716 
f
++;

718 
	`va_íd
(
≠
);

721 
s
[
i
] = '\0';

722  
s
;

723 
	}
}

740 
sds
 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

741 *
°¨t
, *
íd
, *
•
, *
ï
;

742 
size_t
 
Àn
;

744 
•
 = 
°¨t
 = 
s
;

745 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

746 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

747 
ï
 > 
•
 && 
	`°rchr
(
c£t
, *ep))Ép--;

748 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

749 i‡(
s
 !
•
Ë
	`memmove
(s, sp, 
Àn
);

750 
s
[
Àn
] = '\0';

751 
	`sds£éí
(
s
,
Àn
);

752  
s
;

753 
	}
}

772 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

773 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

775 i‡(
Àn
 == 0) ;

776 i‡(
°¨t
 < 0) {

777 
°¨t
 = 
Àn
+start;

778 i‡(
°¨t
 < 0) start = 0;

780 i‡(
íd
 < 0) {

781 
íd
 = 
Àn
+end;

782 i‡(
íd
 < 0)Énd = 0;

784 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

785 i‡(
√wÀn
 != 0) {

786 i‡(
°¨t
 >(sig√d)
Àn
) {

787 
√wÀn
 = 0;

788 } i‡(
íd
 >(sig√d)
Àn
) {

789 
íd
 = 
Àn
-1;

790 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

793 
°¨t
 = 0;

795 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
s
, s+start,Çewlen);

796 
s
[
√wÀn
] = 0;

797 
	`sds£éí
(
s
,
√wÀn
);

798 
	}
}

802 
	$sd°ﬁowî
(
sds
 
s
) {

803 
Àn
 = 
	`sd¶í
(
s
), 
j
;

805 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

806 
	}
}

810 
	$sd°ouµî
(
sds
 
s
) {

811 
Àn
 = 
	`sd¶í
(
s
), 
j
;

813 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

814 
	}
}

828 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

829 
size_t
 
l1
, 
l2
, 
möÀn
;

830 
cmp
;

832 
l1
 = 
	`sd¶í
(
s1
);

833 
l2
 = 
	`sd¶í
(
s2
);

834 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

835 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

836 i‡(
cmp
 =0Ë 
l1
-
l2
;

837  
cmp
;

838 
	}
}

857 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

858 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

859 
sds
 *
tokís
;

861 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

864 
tokís
 = 
	`s_mÆloc
((
sds
)*
¶Ÿs
);

865 i‡(
tokís
 =
NULL
)  NULL;

867 i‡(
Àn
 == 0) {

868 *
cou¡
 = 0;

869  
tokís
;

871 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

874 i‡(
¶Ÿs
 < 
ñemíts
+2) {

875 
sds
 *
√wtokís
;

877 
¶Ÿs
 *= 2;

878 
√wtokís
 = 
	`s_ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

879 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

880 
tokís
 = 
√wtokís
;

884 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

885 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

886 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

887 
ñemíts
++;

888 
°¨t
 = 
j
+
£∂í
;

889 
j
 = j+
£∂í
-1;

893 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

894 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

895 
ñemíts
++;

896 *
cou¡
 = 
ñemíts
;

897  
tokís
;

899 
˛ónup
:

901 
i
;

902 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

903 
	`s_‰ì
(
tokís
);

904 *
cou¡
 = 0;

905  
NULL
;

907 
	}
}

911 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

912 i‡(!
tokís
) ;

913 
cou¡
--)

914 
	`sds‰ì
(
tokís
[
cou¡
]);

915 
	`s_‰ì
(
tokís
);

916 
	}
}

926 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

929 
s
 = 
	`sdsˇéí
(s,"\"",1);

931 
Àn
--) {

932 *
p
) {

935 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

937 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

938 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

939 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

940 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

941 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

943 i‡(
	`i•röt
(*
p
))

944 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

946 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

949 
p
++;

951  
	`sdsˇéí
(
s
,"\"",1);

952 
	}
}

957 
	$is_hex_digô
(
c
) {

958  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

959 (
c
 >= 'A' && c <= 'F');

960 
	}
}

965 
	$hex_digô_to_öt
(
c
) {

966 
c
) {

985 
	}
}

1007 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

1008 c⁄° *
p
 = 
löe
;

1009 *
cuºít
 = 
NULL
;

1010 **
ve˘‹
 = 
NULL
;

1012 *
¨gc
 = 0;

1016 *
p
 && 
	`is•a˚
(*p))Ö++;

1017 i‡(*
p
) {

1019 
öq
=0;

1020 
ösq
=0;

1021 
d⁄e
=0;

1023 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

1024 !
d⁄e
) {

1025 i‡(
öq
) {

1026 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

1027 
	`is_hex_digô
(*(
p
+2)) &&

1028 
	`is_hex_digô
(*(
p
+3)))

1030 
byã
;

1032 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

1033 
	`hex_digô_to_öt
(*(
p
+3));

1034 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

1035 
p
 += 3;

1036 } i‡(*
p
 == '\\' && *(p+1)) {

1037 
c
;

1039 
p
++;

1040 *
p
) {

1041 'n': 
c
 = '\n'; ;

1042 'r': 
c
 = '\r'; ;

1043 't': 
c
 = '\t'; ;

1044 'b': 
c
 = '\b'; ;

1045 'a': 
c
 = '\a'; ;

1046 : 
c
 = *
p
; ;

1048 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

1049 } i‡(*
p
 == '"') {

1052 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

1053 
d⁄e
=1;

1054 } i‡(!*
p
) {

1056 
îr
;

1058 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1060 } i‡(
ösq
) {

1061 i‡(*
p
 == '\\' && *(p+1) == '\'') {

1062 
p
++;

1063 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

1064 } i‡(*
p
 == '\'') {

1067 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

1068 
d⁄e
=1;

1069 } i‡(!*
p
) {

1071 
îr
;

1073 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1076 *
p
) {

1082 
d⁄e
=1;

1085 
öq
=1;

1088 
ösq
=1;

1091 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1095 i‡(*
p
)Ö++;

1098 
ve˘‹
 = 
	`s_ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

1099 
ve˘‹
[*
¨gc
] = 
cuºít
;

1100 (*
¨gc
)++;

1101 
cuºít
 = 
NULL
;

1104 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`s_mÆloc
((*));

1105  
ve˘‹
;

1109 
îr
:

1110 (*
¨gc
)--)

1111 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

1112 
	`s_‰ì
(
ve˘‹
);

1113 i‡(
cuºít
Ë
	`sds‰ì
(current);

1114 *
¨gc
 = 0;

1115  
NULL
;

1116 
	}
}

1128 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

1129 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

1131 
j
 = 0; j < 
l
; j++) {

1132 
i
 = 0; i < 
£éí
; i++) {

1133 i‡(
s
[
j
] =
‰om
[
i
]) {

1134 
s
[
j
] = 
to
[
i
];

1139  
s
;

1140 
	}
}

1145 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
) {

1146 
sds
 
joö
 = 
	`sd£m±y
();

1147 
j
;

1149 
j
 = 0; j < 
¨gc
; j++) {

1150 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

1151 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇt
(joö,
£p
);

1153  
joö
;

1154 
	}
}

1158 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

1159 
sds
 
joö
 = 
	`sd£m±y
();

1160 
j
;

1162 
j
 = 0; j < 
¨gc
; j++) {

1163 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

1164 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

1166  
joö
;

1167 
	}
}

1170 
	$sdsIsNum
(
sds
 
s
) {

1171 
size_t
 
i
;

1173 i‡(
s
 =
NULL
 || 
	`sd¶í
(s) == 0) {

1177 
i
 = 0; i < 
	`sd¶í
(
s
); i ++) {

1178 if(*(
s
+
i
) < '0' || *(s+i) > '9'){

1184 
	}
}

1191 *
	$sds_mÆloc
(
size_t
 
size
Ë{  
	`s_mÆloc
(size); 
	}
}

1192 *
	$sds_ªÆloc
(*
±r
, 
size_t
 
size
Ë{  
	`s_ªÆloc
’å,size); 
	}
}

1193 
	$sds_‰ì
(*
±r
Ë{ 
	`s_‰ì
’å); 
	}
}

1195 #i‡
deföed
(
SDS_TEST_MAIN
)

1196 
	~<°dio.h
>

1197 
	~"ã°hñp.h
"

1198 
	~"limôs.h
"

1200 
	#UNUSED
(
x
Ë()(x)

	)

1202 
	$sdsTe°
() {

1204 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

1206 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

1207 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

1209 
	`sds‰ì
(
x
);

1210 
x
 = 
	`sd¢ewÀn
("foo",2);

1211 
	`ã°_c⁄d
("Createá string with specifiedÜength",

1212 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

1214 
x
 = 
	`sdsˇt
(x,"bar");

1215 
	`ã°_c⁄d
("Strings concatenation",

1216 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

1218 
x
 = 
	`sds˝y
(x,"a");

1219 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

1220 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

1222 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

1223 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1224 
	`sd¶í
(
x
) == 33 &&

1225 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1227 
	`sds‰ì
(
x
);

1228 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1229 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1230 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) == 0)

1232 
	`sds‰ì
(
x
);

1233 
x
 = 
	`sd¢ew
("--");

1234 
x
 = 
	`sdsˇtfmt
(x, "Hñlÿ%†W‹ld %I,%I--", "Hi!", 
LLONG_MIN
,
LLONG_MAX
);

1235 
	`ã°_c⁄d
("sdscatfmt() seems working inÅhe base case",

1236 
	`sd¶í
(
x
) == 60 &&

1237 
	`memcmp
(
x
,"--Hello Hi! World -9223372036854775808,"

1239 
	`¥ötf
("[%s]\n",
x
);

1241 
	`sds‰ì
(
x
);

1242 
x
 = 
	`sd¢ew
("--");

1243 
x
 = 
	`sdsˇtfmt
(x, "%u,%U--", 
UINT_MAX
, 
ULLONG_MAX
);

1244 
	`ã°_c⁄d
("sdscatfmt() seems working with unsignedÇumbers",

1245 
	`sd¶í
(
x
) == 35 &&

1246 
	`memcmp
(
x
,"--4294967295,18446744073709551615--",35) == 0)

1248 
	`sds‰ì
(
x
);

1249 
x
 = 
	`sd¢ew
(" x ");

1250 
	`sd°rim
(
x
," x");

1251 
	`ã°_c⁄d
("sdstrim() works whenáll chars match",

1252 
	`sd¶í
(
x
) == 0)

1254 
	`sds‰ì
(
x
);

1255 
x
 = 
	`sd¢ew
(" x ");

1256 
	`sd°rim
(
x
," ");

1257 
	`ã°_c⁄d
("sdstrim() works whená single charÑemains",

1258 
	`sd¶í
(
x
) == 1 && x[0] == 'x')

1260 
	`sds‰ì
(
x
);

1261 
x
 = 
	`sd¢ew
("xxciaoyyy");

1262 
	`sd°rim
(
x
,"xy");

1263 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1264 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1266 
y
 = 
	`sdsdup
(
x
);

1267 
	`sd§™ge
(
y
,1,1);

1268 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1269 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1271 
	`sds‰ì
(
y
);

1272 
y
 = 
	`sdsdup
(
x
);

1273 
	`sd§™ge
(
y
,1,-1);

1274 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1275 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1277 
	`sds‰ì
(
y
);

1278 
y
 = 
	`sdsdup
(
x
);

1279 
	`sd§™ge
(
y
,-2,-1);

1280 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1281 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1283 
	`sds‰ì
(
y
);

1284 
y
 = 
	`sdsdup
(
x
);

1285 
	`sd§™ge
(
y
,2,1);

1286 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1287 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1289 
	`sds‰ì
(
y
);

1290 
y
 = 
	`sdsdup
(
x
);

1291 
	`sd§™ge
(
y
,1,100);

1292 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1293 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1295 
	`sds‰ì
(
y
);

1296 
y
 = 
	`sdsdup
(
x
);

1297 
	`sd§™ge
(
y
,100,100);

1298 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1299 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1301 
	`sds‰ì
(
y
);

1302 
	`sds‰ì
(
x
);

1303 
x
 = 
	`sd¢ew
("foo");

1304 
y
 = 
	`sd¢ew
("foa");

1305 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1307 
	`sds‰ì
(
y
);

1308 
	`sds‰ì
(
x
);

1309 
x
 = 
	`sd¢ew
("bar");

1310 
y
 = 
	`sd¢ew
("bar");

1311 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1313 
	`sds‰ì
(
y
);

1314 
	`sds‰ì
(
x
);

1315 
x
 = 
	`sd¢ew
("aar");

1316 
y
 = 
	`sd¢ew
("bar");

1317 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1319 
	`sds‰ì
(
y
);

1320 
	`sds‰ì
(
x
);

1321 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1322 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1323 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1324 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1327 
ﬁd‰ì
;

1328 *
p
;

1329 
°ï
 = 10, 
j
, 
i
;

1331 
	`sds‰ì
(
x
);

1332 
	`sds‰ì
(
y
);

1333 
x
 = 
	`sd¢ew
("0");

1334 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
	`sd¶í
(
x
Ë=1 && 
	`sdßvaû
(x) == 0);

1338 
i
 = 0; i < 10; i++) {

1339 
ﬁdÀn
 = 
	`sd¶í
(
x
);

1340 
x
 = 
	`sdsMakeRoomF‹
(x,
°ï
);

1341 
ty≥
 = 
x
[-1]&
SDS_TYPE_MASK
;

1343 
	`ã°_c⁄d
("sdsMakeRoomF‹(ËÀn", 
	`sd¶í
(
x
Ë=
ﬁdÀn
);

1344 i‡(
ty≥
 !
SDS_TYPE_5
) {

1345 
	`ã°_c⁄d
("sdsMakeRoomF‹(Ë‰ì", 
	`sdßvaû
(
x
Ë>
°ï
);

1346 
ﬁd‰ì
 = 
	`sdßvaû
(
x
);

1348 
p
 = 
x
+
ﬁdÀn
;

1349 
j
 = 0; j < 
°ï
; j++) {

1350 
p
[
j
] = 'A'+j;

1352 
	`sdsIn¸Lí
(
x
,
°ï
);

1354 
	`ã°_c⁄d
("sdsMakeRoomFor() content",

1355 
	`memcmp
("0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ",
x
,101) == 0);

1356 
	`ã°_c⁄d
("sdsMakeRoomF‹(ËföÆÜígth",
	`sd¶í
(
x
)==101);

1358 
	`sds‰ì
(
x
);

1361 
	`ã°_ªp‹t
()

1363 
	}
}

1366 #ifde‡
SDS_TEST_MAIN


1367 
	$maö
() {

1368  
	`sdsTe°
();

1369 
	}
}

	@dep/sds/sds.h

33 #i‚de‡
__SDS_H


34 
	#__SDS_H


	)

36 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

38 
	~<sys/ty≥s.h
>

39 
	~<°d¨g.h
>

40 
	~<°döt.h
>

42 *
	tsds
;

47 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr5
 {

49 
	gÊags
;

50 
	gbuf
[];

52 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr8
 {

54 
uöt8_t
 
	gÀn
;

56 
uöt8_t
 
	gÆloc
;

58 
	gÊags
;

59 
	gbuf
[];

62 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr16
 {

63 
uöt16_t
 
	gÀn
;

64 
uöt16_t
 
	gÆloc
;

65 
	gÊags
;

66 
	gbuf
[];

68 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr32
 {

69 
uöt32_t
 
	gÀn
;

70 
uöt32_t
 
	gÆloc
;

71 
	gÊags
;

72 
	gbuf
[];

74 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr64
 {

75 
uöt64_t
 
	gÀn
;

76 
uöt64_t
 
	gÆloc
;

77 
	gÊags
;

78 
	gbuf
[];

82 
	#SDS_TYPE_5
 0

	)

83 
	#SDS_TYPE_8
 1

	)

84 
	#SDS_TYPE_16
 2

	)

85 
	#SDS_TYPE_32
 3

	)

86 
	#SDS_TYPE_64
 4

	)

88 
	#SDS_TYPE_MASK
 7

	)

89 
	#SDS_TYPE_BITS
 3

	)

92 
	#SDS_HDR_VAR
(
T
,
s
Ë
sdshdr
##T *
sh
 = (*)((s)-((sdshdr##T)));

	)

94 
	#SDS_HDR
(
T
,
s
Ë((
sdshdr
##T *)((s)-((sdshdr##T))))

	)

96 
	#SDS_TYPE_5_LEN
(
f
Ë((f)>>
SDS_TYPE_BITS
)

	)

99 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

100 
Êags
 = 
s
[-1];

101 
Êags
&
SDS_TYPE_MASK
) {

102 
SDS_TYPE_5
:

103  
	`SDS_TYPE_5_LEN
(
Êags
);

104 
SDS_TYPE_8
:

105  
	`SDS_HDR
(8,
s
)->
Àn
;

106 
SDS_TYPE_16
:

107  
	`SDS_HDR
(16,
s
)->
Àn
;

108 
SDS_TYPE_32
:

109  
	`SDS_HDR
(32,
s
)->
Àn
;

110 
SDS_TYPE_64
:

111  
	`SDS_HDR
(64,
s
)->
Àn
;

114 
	}
}

118 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

120 
Êags
 = 
s
[-1];

121 
Êags
&
SDS_TYPE_MASK
) {

122 
SDS_TYPE_5
: {

125 
SDS_TYPE_8
: {

126 
	`SDS_HDR_VAR
(8,
s
);

127  
sh
->
Æloc
 - sh->
Àn
;

129 
SDS_TYPE_16
: {

130 
	`SDS_HDR_VAR
(16,
s
);

131  
sh
->
Æloc
 - sh->
Àn
;

133 
SDS_TYPE_32
: {

134 
	`SDS_HDR_VAR
(32,
s
);

135  
sh
->
Æloc
 - sh->
Àn
;

137 
SDS_TYPE_64
: {

138 
	`SDS_HDR_VAR
(64,
s
);

139  
sh
->
Æloc
 - sh->
Àn
;

143 
	}
}

146 
ölöe
 
	$sds£éí
(
sds
 
s
, 
size_t
 
√wÀn
) {

148 
Êags
 = 
s
[-1];

149 
Êags
&
SDS_TYPE_MASK
) {

150 
SDS_TYPE_5
:

152 *
Â
 = ((*)
s
)-1;

153 *
Â
 = 
SDS_TYPE_5
 | (
√wÀn
 << 
SDS_TYPE_BITS
);

156 
SDS_TYPE_8
:

157 
	`SDS_HDR
(8,
s
)->
Àn
 = 
√wÀn
;

159 
SDS_TYPE_16
:

160 
	`SDS_HDR
(16,
s
)->
Àn
 = 
√wÀn
;

162 
SDS_TYPE_32
:

163 
	`SDS_HDR
(32,
s
)->
Àn
 = 
√wÀn
;

165 
SDS_TYPE_64
:

166 
	`SDS_HDR
(64,
s
)->
Àn
 = 
√wÀn
;

169 
	}
}

172 
ölöe
 
	$sdsö˛í
(
sds
 
s
, 
size_t
 
öc
) {

173 
Êags
 = 
s
[-1];

174 
Êags
&
SDS_TYPE_MASK
) {

175 
SDS_TYPE_5
:

177 *
Â
 = ((*)
s
)-1;

179 
√wÀn
 = 
	`SDS_TYPE_5_LEN
(
Êags
)+
öc
;

181 *
Â
 = 
SDS_TYPE_5
 | (
√wÀn
 << 
SDS_TYPE_BITS
);

184 
SDS_TYPE_8
:

185 
	`SDS_HDR
(8,
s
)->
Àn
 +
öc
;

187 
SDS_TYPE_16
:

188 
	`SDS_HDR
(16,
s
)->
Àn
 +
öc
;

190 
SDS_TYPE_32
:

191 
	`SDS_HDR
(32,
s
)->
Àn
 +
öc
;

193 
SDS_TYPE_64
:

194 
	`SDS_HDR
(64,
s
)->
Àn
 +
öc
;

197 
	}
}

201 
ölöe
 
size_t
 
	$sdßŒoc
(c⁄° 
sds
 
s
) {

202 
Êags
 = 
s
[-1];

203 
Êags
&
SDS_TYPE_MASK
) {

204 
SDS_TYPE_5
:

205  
	`SDS_TYPE_5_LEN
(
Êags
);

206 
SDS_TYPE_8
:

207  
	`SDS_HDR
(8,
s
)->
Æloc
;

208 
SDS_TYPE_16
:

209  
	`SDS_HDR
(16,
s
)->
Æloc
;

210 
SDS_TYPE_32
:

211  
	`SDS_HDR
(32,
s
)->
Æloc
;

212 
SDS_TYPE_64
:

213  
	`SDS_HDR
(64,
s
)->
Æloc
;

216 
	}
}

218 
ölöe
 
	$sds£èŒoc
(
sds
 
s
, 
size_t
 
√wÀn
) {

219 
Êags
 = 
s
[-1];

220 
Êags
&
SDS_TYPE_MASK
) {

221 
SDS_TYPE_5
:

224 
SDS_TYPE_8
:

225 
	`SDS_HDR
(8,
s
)->
Æloc
 = 
√wÀn
;

227 
SDS_TYPE_16
:

228 
	`SDS_HDR
(16,
s
)->
Æloc
 = 
√wÀn
;

230 
SDS_TYPE_32
:

231 
	`SDS_HDR
(32,
s
)->
Æloc
 = 
√wÀn
;

233 
SDS_TYPE_64
:

234 
	`SDS_HDR
(64,
s
)->
Æloc
 = 
√wÀn
;

237 
	}
}

240 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

241 
sds
 
sd¢ew
(c⁄° *
öô
);

242 
sds
 
sd£m±y
();

243 
sds
 
sdsdup
(c⁄° sd†
s
);

244 
sds‰ì
(
sds
 
s
);

245 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

246 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

247 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

248 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

249 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

250 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

252 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

253 #ifde‡
__GNUC__


254 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

255 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

257 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

260 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

261 
sds
 
	`sd°rim
(sd†
s
, c⁄° *
c£t
);

262 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

263 
	`sdsupd©ñí
(
sds
 
s
);

264 
	`sds˛ór
(
sds
 
s
);

265 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

266 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

267 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

268 
	`sd°ﬁowî
(
sds
 
s
);

269 
	`sd°ouµî
(
sds
 
s
);

270 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

271 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

272 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

273 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

274 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
);

275 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

277 
	`sdsIsNum
(
sds
 
s
);

280 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

281 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

282 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

283 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

284 *
	`sdsAŒocPå
(
sds
 
s
);

290 *
	`sds_mÆloc
(
size_t
 
size
);

291 *
	`sds_ªÆloc
(*
±r
, 
size_t
 
size
);

292 
	`sds_‰ì
(*
±r
);

294 #ifde‡
REDIS_TEST


296 
	`sdsTe°
(
¨gc
, *
¨gv
[]);

	@dep/sds/sds.h

33 #i‚de‡
__SDS_H


34 
	#__SDS_H


	)

36 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

38 
	~<sys/ty≥s.h
>

39 
	~<°d¨g.h
>

40 
	~<°döt.h
>

42 *
	tsds
;

47 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr5
 {

49 
	gÊags
;

50 
	gbuf
[];

52 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr8
 {

54 
uöt8_t
 
	gÀn
;

56 
uöt8_t
 
	gÆloc
;

58 
	gÊags
;

59 
	gbuf
[];

62 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr16
 {

63 
uöt16_t
 
	gÀn
;

64 
uöt16_t
 
	gÆloc
;

65 
	gÊags
;

66 
	gbuf
[];

68 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr32
 {

69 
uöt32_t
 
	gÀn
;

70 
uöt32_t
 
	gÆloc
;

71 
	gÊags
;

72 
	gbuf
[];

74 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr64
 {

75 
uöt64_t
 
	gÀn
;

76 
uöt64_t
 
	gÆloc
;

77 
	gÊags
;

78 
	gbuf
[];

82 
	#SDS_TYPE_5
 0

	)

83 
	#SDS_TYPE_8
 1

	)

84 
	#SDS_TYPE_16
 2

	)

85 
	#SDS_TYPE_32
 3

	)

86 
	#SDS_TYPE_64
 4

	)

88 
	#SDS_TYPE_MASK
 7

	)

89 
	#SDS_TYPE_BITS
 3

	)

92 
	#SDS_HDR_VAR
(
T
,
s
Ë
sdshdr
##T *
sh
 = (*)((s)-((sdshdr##T)));

	)

94 
	#SDS_HDR
(
T
,
s
Ë((
sdshdr
##T *)((s)-((sdshdr##T))))

	)

96 
	#SDS_TYPE_5_LEN
(
f
Ë((f)>>
SDS_TYPE_BITS
)

	)

99 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

100 
Êags
 = 
s
[-1];

101 
Êags
&
SDS_TYPE_MASK
) {

102 
SDS_TYPE_5
:

103  
	`SDS_TYPE_5_LEN
(
Êags
);

104 
SDS_TYPE_8
:

105  
	`SDS_HDR
(8,
s
)->
Àn
;

106 
SDS_TYPE_16
:

107  
	`SDS_HDR
(16,
s
)->
Àn
;

108 
SDS_TYPE_32
:

109  
	`SDS_HDR
(32,
s
)->
Àn
;

110 
SDS_TYPE_64
:

111  
	`SDS_HDR
(64,
s
)->
Àn
;

114 
	}
}

118 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

120 
Êags
 = 
s
[-1];

121 
Êags
&
SDS_TYPE_MASK
) {

122 
SDS_TYPE_5
: {

125 
SDS_TYPE_8
: {

126 
	`SDS_HDR_VAR
(8,
s
);

127  
sh
->
Æloc
 - sh->
Àn
;

129 
SDS_TYPE_16
: {

130 
	`SDS_HDR_VAR
(16,
s
);

131  
sh
->
Æloc
 - sh->
Àn
;

133 
SDS_TYPE_32
: {

134 
	`SDS_HDR_VAR
(32,
s
);

135  
sh
->
Æloc
 - sh->
Àn
;

137 
SDS_TYPE_64
: {

138 
	`SDS_HDR_VAR
(64,
s
);

139  
sh
->
Æloc
 - sh->
Àn
;

143 
	}
}

146 
ölöe
 
	$sds£éí
(
sds
 
s
, 
size_t
 
√wÀn
) {

148 
Êags
 = 
s
[-1];

149 
Êags
&
SDS_TYPE_MASK
) {

150 
SDS_TYPE_5
:

152 *
Â
 = ((*)
s
)-1;

153 *
Â
 = 
SDS_TYPE_5
 | (
√wÀn
 << 
SDS_TYPE_BITS
);

156 
SDS_TYPE_8
:

157 
	`SDS_HDR
(8,
s
)->
Àn
 = 
√wÀn
;

159 
SDS_TYPE_16
:

160 
	`SDS_HDR
(16,
s
)->
Àn
 = 
√wÀn
;

162 
SDS_TYPE_32
:

163 
	`SDS_HDR
(32,
s
)->
Àn
 = 
√wÀn
;

165 
SDS_TYPE_64
:

166 
	`SDS_HDR
(64,
s
)->
Àn
 = 
√wÀn
;

169 
	}
}

172 
ölöe
 
	$sdsö˛í
(
sds
 
s
, 
size_t
 
öc
) {

173 
Êags
 = 
s
[-1];

174 
Êags
&
SDS_TYPE_MASK
) {

175 
SDS_TYPE_5
:

177 *
Â
 = ((*)
s
)-1;

179 
√wÀn
 = 
	`SDS_TYPE_5_LEN
(
Êags
)+
öc
;

181 *
Â
 = 
SDS_TYPE_5
 | (
√wÀn
 << 
SDS_TYPE_BITS
);

184 
SDS_TYPE_8
:

185 
	`SDS_HDR
(8,
s
)->
Àn
 +
öc
;

187 
SDS_TYPE_16
:

188 
	`SDS_HDR
(16,
s
)->
Àn
 +
öc
;

190 
SDS_TYPE_32
:

191 
	`SDS_HDR
(32,
s
)->
Àn
 +
öc
;

193 
SDS_TYPE_64
:

194 
	`SDS_HDR
(64,
s
)->
Àn
 +
öc
;

197 
	}
}

201 
ölöe
 
size_t
 
	$sdßŒoc
(c⁄° 
sds
 
s
) {

202 
Êags
 = 
s
[-1];

203 
Êags
&
SDS_TYPE_MASK
) {

204 
SDS_TYPE_5
:

205  
	`SDS_TYPE_5_LEN
(
Êags
);

206 
SDS_TYPE_8
:

207  
	`SDS_HDR
(8,
s
)->
Æloc
;

208 
SDS_TYPE_16
:

209  
	`SDS_HDR
(16,
s
)->
Æloc
;

210 
SDS_TYPE_32
:

211  
	`SDS_HDR
(32,
s
)->
Æloc
;

212 
SDS_TYPE_64
:

213  
	`SDS_HDR
(64,
s
)->
Æloc
;

216 
	}
}

218 
ölöe
 
	$sds£èŒoc
(
sds
 
s
, 
size_t
 
√wÀn
) {

219 
Êags
 = 
s
[-1];

220 
Êags
&
SDS_TYPE_MASK
) {

221 
SDS_TYPE_5
:

224 
SDS_TYPE_8
:

225 
	`SDS_HDR
(8,
s
)->
Æloc
 = 
√wÀn
;

227 
SDS_TYPE_16
:

228 
	`SDS_HDR
(16,
s
)->
Æloc
 = 
√wÀn
;

230 
SDS_TYPE_32
:

231 
	`SDS_HDR
(32,
s
)->
Æloc
 = 
√wÀn
;

233 
SDS_TYPE_64
:

234 
	`SDS_HDR
(64,
s
)->
Æloc
 = 
√wÀn
;

237 
	}
}

240 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

241 
sds
 
sd¢ew
(c⁄° *
öô
);

242 
sds
 
sd£m±y
();

243 
sds
 
sdsdup
(c⁄° sd†
s
);

244 
sds‰ì
(
sds
 
s
);

245 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

246 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

247 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

248 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

249 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

250 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

252 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

253 #ifde‡
__GNUC__


254 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

255 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

257 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

260 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

261 
sds
 
	`sd°rim
(sd†
s
, c⁄° *
c£t
);

262 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

263 
	`sdsupd©ñí
(
sds
 
s
);

264 
	`sds˛ór
(
sds
 
s
);

265 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

266 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

267 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

268 
	`sd°ﬁowî
(
sds
 
s
);

269 
	`sd°ouµî
(
sds
 
s
);

270 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

271 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

272 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

273 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

274 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
);

275 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

277 
	`sdsIsNum
(
sds
 
s
);

280 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

281 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

282 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

283 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

284 *
	`sdsAŒocPå
(
sds
 
s
);

290 *
	`sds_mÆloc
(
size_t
 
size
);

291 *
	`sds_ªÆloc
(*
±r
, 
size_t
 
size
);

292 
	`sds_‰ì
(*
±r
);

294 #ifde‡
REDIS_TEST


296 
	`sdsTe°
(
¨gc
, *
¨gv
[]);

	@dep/sds/sdsalloc.h

39 
	~<dmÆloc.h
>

41 
	#s_mÆloc
 
dÆloc


	)

42 
	#s_ªÆloc
 
dªÆloc


	)

43 
	#s_‰ì
 
d‰ì


	)

	@dep/sds/sdsalloc.h

39 
	~<dmÆloc.h
>

41 
	#s_mÆloc
 
dÆloc


	)

42 
	#s_ªÆloc
 
dªÆloc


	)

43 
	#s_‰ì
 
d‰ì


	)

	@dep/util/dlog.c

1 
	~<°dlib.h
>

2 
	~<°d¨g.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<time.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<î∫o.h
>

10 
	~<dutû.h
>

11 
	~<dlog.h
>

13 
loggî
 
	gloggî
;

17 
	$log_öô
(
Àvñ
, *
«me
)

19 
loggî
 *
l
 = &logger;

21 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

22 
l
->
«me
 =Çame;

23 i‡(
«me
 =
NULL
 || !
	`°æí
(name)) {

24 
l
->
fd
 = 
STDERR_FILENO
;

26 
l
->
fd
 = 
	`›í
(
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

27 i‡(
l
->
fd
 < 0) {

28 
	`log_°dîr
("›íögÜog fûê'%s' faûed: %s", 
«me
,

29 
	`°ªº‹
(
î∫o
));

35 
	}
}

38 
	$log_deöô
()

40 
loggî
 *
l
 = &logger;

42 i‡(
l
->
fd
 < 0 ||Ü->fd =
STDERR_FILENO
) {

46 
	`˛o£
(
l
->
fd
);

47 
	}
}

50 
	$log_ª›í
()

52 
loggî
 *
l
 = &logger;

54 i‡(
l
->
fd
 !
STDERR_FILENO
) {

55 
	`˛o£
(
l
->
fd
);

56 
l
->
fd
 = 
	`›í
÷->
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

57 i‡(
l
->
fd
 < 0) {

58 
	`log_°dîr_ß„
("ª›íögÜog fûê'%s' faûed, ign‹ed: %s", 
l
->
«me
,

59 
	`°ªº‹
(
î∫o
));

62 
	}
}

65 
	$log_Àvñ_up
()

67 
loggî
 *
l
 = &logger;

69 i‡(
l
->
Àvñ
 < 
LOG_PVERB
) {

70 
l
->
Àvñ
++;

71 
	`log_ß„
("u∞logÜevñÅÿ%d", 
l
->
Àvñ
);

73 
	}
}

76 
	$log_Àvñ_down
()

78 
loggî
 *
l
 = &logger;

80 i‡(
l
->
Àvñ
 > 
LOG_EMERG
) {

81 
l
->
Àvñ
--;

82 
	`log_ß„
("dow¿logÜevñÅÿ%d", 
l
->
Àvñ
);

84 
	}
}

87 
	$log_Àvñ_£t
(
Àvñ
)

89 
loggî
 *
l
 = &logger;

91 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

92 
	`loga
("£àlogÜevñÅÿ%d", 
l
->
Àvñ
);

93 
	}
}

96 
	$log_°ackåa˚
()

98 
loggî
 *
l
 = &logger;

100 i‡(
l
->
fd
 < 0) {

103 
	`d°ackåa˚_fd
(
l
->
fd
);

104 
	}
}

107 
	$log_loggabÀ
(
Àvñ
)

109 
loggî
 *
l
 = &logger;

111 i‡(
Àvñ
 > 
l
->level) {

116 
	}
}

119 
	$_log
(c⁄° *
fûe
, 
löe
, 
Àvñ
, 
∑nic
, c⁄° *
fmt
, ...)

121 
loggî
 *
l
 = &logger;

122 
Àn
, 
size
, 
î∫o_ßve
;

123 
buf
[
LOG_MAX_LEN
];

124 
va_li°
 
¨gs
;

125 
ssize_t
 
n
;

126 
timevÆ
 
tv
;

128 i‡(
l
->
fd
 < 0) {

132 
î∫o_ßve
 = 
î∫o
;

133 
Àn
 = 0;

134 
size
 = 
LOG_MAX_LEN
;

136 
	`gëtimeofday
(&
tv
, 
NULL
);

137 
buf
[
Àn
++] = '[';

138 
Àn
 +
	`d°r·ime
(
buf
 +Üí, 
size
 -Üí, "%Y-%m-%d %H:%M:%S.", 
	`loˇ…ime
(&
tv
.
tv_£c
));

139 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%03ld", 
tv
.
tv_u£c
/1000);

140 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "] %s:%d ", 
fûe
, 
löe
);

142 
	`va_°¨t
(
¨gs
, 
fmt
);

143 
Àn
 +
	`dvs˙¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

144 
	`va_íd
(
¨gs
);

146 
buf
[
Àn
++] = '\n';

148 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

149 i‡(
n
 < 0) {

150 
l
->
√º‹
++;

153 
î∫o
 = 
î∫o_ßve
;

155 i‡(
∑nic
) {

156 
	`ab‹t
();

158 
	}
}

161 
	$_log_°dîr
(c⁄° *
fmt
, ...)

163 
loggî
 *
l
 = &logger;

164 
Àn
, 
size
, 
î∫o_ßve
;

165 
buf
[4 * 
LOG_MAX_LEN
];

166 
va_li°
 
¨gs
;

167 
ssize_t
 
n
;

169 
î∫o_ßve
 = 
î∫o
;

170 
Àn
 = 0;

171 
size
 = 4 * 
LOG_MAX_LEN
;

173 
	`va_°¨t
(
¨gs
, 
fmt
);

174 
Àn
 +
	`dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

175 
	`va_íd
(
¨gs
);

177 
buf
[
Àn
++] = '\n';

179 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

180 i‡(
n
 < 0) {

181 
l
->
√º‹
++;

184 
î∫o
 = 
î∫o_ßve
;

185 
	}
}

188 
	$_log_°dout
(c⁄° *
fmt
, ...)

190 
loggî
 *
l
 = &logger;

191 
Àn
, 
size
, 
î∫o_ßve
;

192 
buf
[4 * 
LOG_MAX_LEN
];

193 
va_li°
 
¨gs
;

194 
ssize_t
 
n
;

196 
î∫o_ßve
 = 
î∫o
;

197 
Àn
 = 0;

198 
size
 = 4 * 
LOG_MAX_LEN
;

200 
	`va_°¨t
(
¨gs
, 
fmt
);

201 
Àn
 +
	`dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

202 
	`va_íd
(
¨gs
);

204 
buf
[
Àn
++] = '\n';

206 
n
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
Àn
);

207 i‡(
n
 < 0) {

208 
l
->
√º‹
++;

211 
î∫o
 = 
î∫o_ßve
;

212 
	}
}

219 
	$_log_hexdump
(c⁄° *
fûe
, 
löe
, *
d©a
, 
d©Æí
,

220 c⁄° *
fmt
, ...)

222 
loggî
 *
l
 = &logger;

223 
buf
[8 * 
LOG_MAX_LEN
];

224 
i
, 
off
, 
Àn
, 
size
, 
î∫o_ßve
;

225 
ssize_t
 
n
;

227 i‡(
l
->
fd
 < 0) {

232 
î∫o_ßve
 = 
î∫o
;

233 
off
 = 0;

234 
Àn
 = 0;

235 
size
 = 8 * 
LOG_MAX_LEN
;

237 
d©Æí
 !0 && (
Àn
 < 
size
 - 1)) {

238 *
ßve
, *
°r
;

239 
c
;

240 
ßvñí
;

242 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%08x ", 
off
);

244 
ßve
 = 
d©a
;

245 
ßvñí
 = 
d©Æí
;

247 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

248 
c
 = ()(*
d©a
);

249 
°r
 = (
i
 == 7) ? " " : " ";

250 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%02x%s", 
c
, 
°r
);

252  ; 
i
 < 16; i++) {

253 
°r
 = (
i
 == 7) ? " " : " ";

254 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, " %s", 
°r
);

257 
d©a
 = 
ßve
;

258 
d©Æí
 = 
ßvñí
;

260 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üen, " |");

262 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

263 
c
 = ()(
	`i•röt
(*
d©a
) ? *data : '.');

264 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%c", 
c
);

266 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "|\n");

268 
off
 += 16;

271 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

272 i‡(
n
 < 0) {

273 
l
->
√º‹
++;

276 i‡(
Àn
 >
size
 - 1) {

277 
n
 = 
	`wrôe
(
l
->
fd
, "\n", 1);

278 i‡(
n
 < 0) {

279 
l
->
√º‹
++;

283 
î∫o
 = 
î∫o_ßve
;

284 
	}
}

287 
	$_log_ß„
(c⁄° *
fmt
, ...)

289 
loggî
 *
l
 = &logger;

290 
Àn
, 
size
, 
î∫o_ßve
;

291 
buf
[
LOG_MAX_LEN
];

292 
va_li°
 
¨gs
;

293 
ssize_t
 
n
;

295 i‡(
l
->
fd
 < 0) {

299 
î∫o_ßve
 = 
î∫o
;

300 
Àn
 = 0;

301 
size
 = 
LOG_MAX_LEN
;

303 
Àn
 +
	`dß„_¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "[.......................] ");

305 
	`va_°¨t
(
¨gs
, 
fmt
);

306 
Àn
 +
	`dß„_v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

307 
	`va_íd
(
¨gs
);

309 
buf
[
Àn
++] = '\n';

311 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

312 i‡(
n
 < 0) {

313 
l
->
√º‹
++;

316 
î∫o
 = 
î∫o_ßve
;

317 
	}
}

320 
	$_log_°dîr_ß„
(c⁄° *
fmt
, ...)

322 
loggî
 *
l
 = &logger;

323 
Àn
, 
size
, 
î∫o_ßve
;

324 
buf
[
LOG_MAX_LEN
];

325 
va_li°
 
¨gs
;

326 
ssize_t
 
n
;

328 
î∫o_ßve
 = 
î∫o
;

329 
Àn
 = 0;

330 
size
 = 
LOG_MAX_LEN
;

332 
Àn
 +
	`dß„_¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "[.......................] ");

334 
	`va_°¨t
(
¨gs
, 
fmt
);

335 
Àn
 +
	`dß„_v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

336 
	`va_íd
(
¨gs
);

338 
buf
[
Àn
++] = '\n';

340 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

341 i‡(
n
 < 0) {

342 
l
->
√º‹
++;

345 
î∫o
 = 
î∫o_ßve
;

346 
	}
}

348 
	$log_wrôe_Àn
(*
°r
, 
size_t
 
Àn
)

350 
loggî
 *
l
 = &logger;

351 
î∫o_ßve
;

352 
ssize_t
 
n
;

354 i‡(
l
->
fd
 < 0) {

358 
î∫o_ßve
 = 
î∫o
;

359 
n
 = 
	`wrôe
(
l
->
fd
, 
°r
, 
Àn
);

360 i‡(
n
 < 0) {

361 
l
->
√º‹
++;

364 
î∫o
 = 
î∫o_ßve
;

365 
	}
}

	@dep/util/dlog.c

1 
	~<°dlib.h
>

2 
	~<°d¨g.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<time.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<î∫o.h
>

10 
	~<dutû.h
>

11 
	~<dlog.h
>

13 
loggî
 
	gloggî
;

17 
	$log_öô
(
Àvñ
, *
«me
)

19 
loggî
 *
l
 = &logger;

21 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

22 
l
->
«me
 =Çame;

23 i‡(
«me
 =
NULL
 || !
	`°æí
(name)) {

24 
l
->
fd
 = 
STDERR_FILENO
;

26 
l
->
fd
 = 
	`›í
(
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

27 i‡(
l
->
fd
 < 0) {

28 
	`log_°dîr
("›íögÜog fûê'%s' faûed: %s", 
«me
,

29 
	`°ªº‹
(
î∫o
));

35 
	}
}

38 
	$log_deöô
()

40 
loggî
 *
l
 = &logger;

42 i‡(
l
->
fd
 < 0 ||Ü->fd =
STDERR_FILENO
) {

46 
	`˛o£
(
l
->
fd
);

47 
	}
}

50 
	$log_ª›í
()

52 
loggî
 *
l
 = &logger;

54 i‡(
l
->
fd
 !
STDERR_FILENO
) {

55 
	`˛o£
(
l
->
fd
);

56 
l
->
fd
 = 
	`›í
÷->
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

57 i‡(
l
->
fd
 < 0) {

58 
	`log_°dîr_ß„
("ª›íögÜog fûê'%s' faûed, ign‹ed: %s", 
l
->
«me
,

59 
	`°ªº‹
(
î∫o
));

62 
	}
}

65 
	$log_Àvñ_up
()

67 
loggî
 *
l
 = &logger;

69 i‡(
l
->
Àvñ
 < 
LOG_PVERB
) {

70 
l
->
Àvñ
++;

71 
	`log_ß„
("u∞logÜevñÅÿ%d", 
l
->
Àvñ
);

73 
	}
}

76 
	$log_Àvñ_down
()

78 
loggî
 *
l
 = &logger;

80 i‡(
l
->
Àvñ
 > 
LOG_EMERG
) {

81 
l
->
Àvñ
--;

82 
	`log_ß„
("dow¿logÜevñÅÿ%d", 
l
->
Àvñ
);

84 
	}
}

87 
	$log_Àvñ_£t
(
Àvñ
)

89 
loggî
 *
l
 = &logger;

91 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

92 
	`loga
("£àlogÜevñÅÿ%d", 
l
->
Àvñ
);

93 
	}
}

96 
	$log_°ackåa˚
()

98 
loggî
 *
l
 = &logger;

100 i‡(
l
->
fd
 < 0) {

103 
	`d°ackåa˚_fd
(
l
->
fd
);

104 
	}
}

107 
	$log_loggabÀ
(
Àvñ
)

109 
loggî
 *
l
 = &logger;

111 i‡(
Àvñ
 > 
l
->level) {

116 
	}
}

119 
	$_log
(c⁄° *
fûe
, 
löe
, 
Àvñ
, 
∑nic
, c⁄° *
fmt
, ...)

121 
loggî
 *
l
 = &logger;

122 
Àn
, 
size
, 
î∫o_ßve
;

123 
buf
[
LOG_MAX_LEN
];

124 
va_li°
 
¨gs
;

125 
ssize_t
 
n
;

126 
timevÆ
 
tv
;

128 i‡(
l
->
fd
 < 0) {

132 
î∫o_ßve
 = 
î∫o
;

133 
Àn
 = 0;

134 
size
 = 
LOG_MAX_LEN
;

136 
	`gëtimeofday
(&
tv
, 
NULL
);

137 
buf
[
Àn
++] = '[';

138 
Àn
 +
	`d°r·ime
(
buf
 +Üí, 
size
 -Üí, "%Y-%m-%d %H:%M:%S.", 
	`loˇ…ime
(&
tv
.
tv_£c
));

139 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%03ld", 
tv
.
tv_u£c
/1000);

140 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "] %s:%d ", 
fûe
, 
löe
);

142 
	`va_°¨t
(
¨gs
, 
fmt
);

143 
Àn
 +
	`dvs˙¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

144 
	`va_íd
(
¨gs
);

146 
buf
[
Àn
++] = '\n';

148 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

149 i‡(
n
 < 0) {

150 
l
->
√º‹
++;

153 
î∫o
 = 
î∫o_ßve
;

155 i‡(
∑nic
) {

156 
	`ab‹t
();

158 
	}
}

161 
	$_log_°dîr
(c⁄° *
fmt
, ...)

163 
loggî
 *
l
 = &logger;

164 
Àn
, 
size
, 
î∫o_ßve
;

165 
buf
[4 * 
LOG_MAX_LEN
];

166 
va_li°
 
¨gs
;

167 
ssize_t
 
n
;

169 
î∫o_ßve
 = 
î∫o
;

170 
Àn
 = 0;

171 
size
 = 4 * 
LOG_MAX_LEN
;

173 
	`va_°¨t
(
¨gs
, 
fmt
);

174 
Àn
 +
	`dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

175 
	`va_íd
(
¨gs
);

177 
buf
[
Àn
++] = '\n';

179 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

180 i‡(
n
 < 0) {

181 
l
->
√º‹
++;

184 
î∫o
 = 
î∫o_ßve
;

185 
	}
}

188 
	$_log_°dout
(c⁄° *
fmt
, ...)

190 
loggî
 *
l
 = &logger;

191 
Àn
, 
size
, 
î∫o_ßve
;

192 
buf
[4 * 
LOG_MAX_LEN
];

193 
va_li°
 
¨gs
;

194 
ssize_t
 
n
;

196 
î∫o_ßve
 = 
î∫o
;

197 
Àn
 = 0;

198 
size
 = 4 * 
LOG_MAX_LEN
;

200 
	`va_°¨t
(
¨gs
, 
fmt
);

201 
Àn
 +
	`dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

202 
	`va_íd
(
¨gs
);

204 
buf
[
Àn
++] = '\n';

206 
n
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
Àn
);

207 i‡(
n
 < 0) {

208 
l
->
√º‹
++;

211 
î∫o
 = 
î∫o_ßve
;

212 
	}
}

219 
	$_log_hexdump
(c⁄° *
fûe
, 
löe
, *
d©a
, 
d©Æí
,

220 c⁄° *
fmt
, ...)

222 
loggî
 *
l
 = &logger;

223 
buf
[8 * 
LOG_MAX_LEN
];

224 
i
, 
off
, 
Àn
, 
size
, 
î∫o_ßve
;

225 
ssize_t
 
n
;

227 i‡(
l
->
fd
 < 0) {

232 
î∫o_ßve
 = 
î∫o
;

233 
off
 = 0;

234 
Àn
 = 0;

235 
size
 = 8 * 
LOG_MAX_LEN
;

237 
d©Æí
 !0 && (
Àn
 < 
size
 - 1)) {

238 *
ßve
, *
°r
;

239 
c
;

240 
ßvñí
;

242 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%08x ", 
off
);

244 
ßve
 = 
d©a
;

245 
ßvñí
 = 
d©Æí
;

247 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

248 
c
 = ()(*
d©a
);

249 
°r
 = (
i
 == 7) ? " " : " ";

250 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%02x%s", 
c
, 
°r
);

252  ; 
i
 < 16; i++) {

253 
°r
 = (
i
 == 7) ? " " : " ";

254 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, " %s", 
°r
);

257 
d©a
 = 
ßve
;

258 
d©Æí
 = 
ßvñí
;

260 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üen, " |");

262 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

263 
c
 = ()(
	`i•röt
(*
d©a
) ? *data : '.');

264 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%c", 
c
);

266 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "|\n");

268 
off
 += 16;

271 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

272 i‡(
n
 < 0) {

273 
l
->
√º‹
++;

276 i‡(
Àn
 >
size
 - 1) {

277 
n
 = 
	`wrôe
(
l
->
fd
, "\n", 1);

278 i‡(
n
 < 0) {

279 
l
->
√º‹
++;

283 
î∫o
 = 
î∫o_ßve
;

284 
	}
}

287 
	$_log_ß„
(c⁄° *
fmt
, ...)

289 
loggî
 *
l
 = &logger;

290 
Àn
, 
size
, 
î∫o_ßve
;

291 
buf
[
LOG_MAX_LEN
];

292 
va_li°
 
¨gs
;

293 
ssize_t
 
n
;

295 i‡(
l
->
fd
 < 0) {

299 
î∫o_ßve
 = 
î∫o
;

300 
Àn
 = 0;

301 
size
 = 
LOG_MAX_LEN
;

303 
Àn
 +
	`dß„_¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "[.......................] ");

305 
	`va_°¨t
(
¨gs
, 
fmt
);

306 
Àn
 +
	`dß„_v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

307 
	`va_íd
(
¨gs
);

309 
buf
[
Àn
++] = '\n';

311 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

312 i‡(
n
 < 0) {

313 
l
->
√º‹
++;

316 
î∫o
 = 
î∫o_ßve
;

317 
	}
}

320 
	$_log_°dîr_ß„
(c⁄° *
fmt
, ...)

322 
loggî
 *
l
 = &logger;

323 
Àn
, 
size
, 
î∫o_ßve
;

324 
buf
[
LOG_MAX_LEN
];

325 
va_li°
 
¨gs
;

326 
ssize_t
 
n
;

328 
î∫o_ßve
 = 
î∫o
;

329 
Àn
 = 0;

330 
size
 = 
LOG_MAX_LEN
;

332 
Àn
 +
	`dß„_¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "[.......................] ");

334 
	`va_°¨t
(
¨gs
, 
fmt
);

335 
Àn
 +
	`dß„_v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

336 
	`va_íd
(
¨gs
);

338 
buf
[
Àn
++] = '\n';

340 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

341 i‡(
n
 < 0) {

342 
l
->
√º‹
++;

345 
î∫o
 = 
î∫o_ßve
;

346 
	}
}

348 
	$log_wrôe_Àn
(*
°r
, 
size_t
 
Àn
)

350 
loggî
 *
l
 = &logger;

351 
î∫o_ßve
;

352 
ssize_t
 
n
;

354 i‡(
l
->
fd
 < 0) {

358 
î∫o_ßve
 = 
î∫o
;

359 
n
 = 
	`wrôe
(
l
->
fd
, 
°r
, 
Àn
);

360 i‡(
n
 < 0) {

361 
l
->
√º‹
++;

364 
î∫o
 = 
î∫o_ßve
;

365 
	}
}

	@dep/util/dlog.h

1 #i‚de‡
_DLOG_H_


2 
	#_DLOG_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	sloggî
 {

10 *
	m«me
;

12 
	mÀvñ
;

14 
	mfd
;

16 
	m√º‹
;

20 
	#LOG_EMERG
 0

	)

21 
	#LOG_ALERT
 1

	)

22 
	#LOG_CRIT
 2

	)

23 
	#LOG_ERR
 3

	)

24 
	#LOG_WARN
 4

	)

25 
	#LOG_NOTICE
 5

	)

26 
	#LOG_INFO
 6

	)

27 
	#LOG_DEBUG
 7

	)

28 
	#LOG_VERB
 8

	)

29 
	#LOG_VVERB
 9

	)

30 
	#LOG_VVVERB
 10

	)

31 
	#LOG_PVERB
 11

	)

33 
	#LOG_ZC
 12

	)

34 
	#LOG_MAX_LEN
 256

	)

47 #ifde‡
HAVE_DEBUG_LOG


49 
	#log_debug
(
_Àvñ
, ...) do { \

50 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

51 
	`_log
(
__FILE__
, 
__LINE__
, 
_Àvñ
, 0, 
__VA_ARGS__
); \

53 } 0)

	)

57 
	#log_debug
(
_Àvñ
, ...)

	)

61 
	#log_hexdump
(
_Àvñ
, 
_d©a
, 
_d©Æí
, ...) do { \

62 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

63 
	`_log
(
__FILE__
, 
__LINE__
, 
_Àvñ
, 0, 
__VA_ARGS__
); \

64 
	`_log_hexdump
(
__FILE__
, 
__LINE__
, (*)(
_d©a
), ()(
_d©Æí
), \

65 
__VA_ARGS__
); \

67 } 0)

	)

69 
	#log_°dîr
(...) do { \

70 
	`_log_°dîr
(
__VA_ARGS__
); \

71 } 0)

	)

73 
	#log_°dout
(...) do { \

74 
	`_log_°dout
(
__VA_ARGS__
); \

75 } 0)

	)

77 
	#log_ß„
(...) do { \

78 
	`_log_ß„
(
__VA_ARGS__
); \

79 } 0)

	)

81 
	#log_°dîr_ß„
(...) do { \

82 
	`_log_°dîr_ß„
(
__VA_ARGS__
); \

83 } 0)

	)

85 
	#loga
(...) do { \

86 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 0, 
__VA_ARGS__
); \

87 } 0)

	)

89 
	#loga_hexdump
(
_d©a
, 
_d©Æí
, ...) do { \

90 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 0, 
__VA_ARGS__
); \

91 
	`_log_hexdump
(
__FILE__
, 
__LINE__
, (*)(
_d©a
), ()(
_d©Æí
), \

92 
__VA_ARGS__
); \

94 

	)

95 
	#log_îr‹
(...) do { \

96 i‡(
	`log_loggabÀ
(
LOG_ERR
) != 0) { \

97 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_ERR
, 0, 
__VA_ARGS__
); \

99 } 0)

	)

101 
	#log_w¨n
(...) do { \

102 i‡(
	`log_loggabÀ
(
LOG_WARN
) != 0) { \

103 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_WARN
, 0, 
__VA_ARGS__
); \

105 } 0)

	)

107 
	#log_nŸi˚
(...) do { \

108 i‡(
	`log_loggabÀ
(
LOG_NOTICE
) != 0) { \

109 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_NOTICE
, 0, 
__VA_ARGS__
); \

111 } 0)

	)

113 
	#log_∑nic
(...) do { \

114 i‡(
	`log_loggabÀ
(
LOG_EMERG
) != 0) { \

115 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, 
__VA_ARGS__
); \

117 } 0)

	)

123 
	#log_zc
(...) do { \

124 i‡(
	`log_loggabÀ
(
LOG_ERR
) != 0) { \

125 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_ZC
, 0, 
__VA_ARGS__
); \

127 } 0)

	)

131 
log_öô
(
Àvñ
, *
fûíame
);

132 
log_deöô
();

133 
log_Àvñ_up
();

134 
log_Àvñ_down
();

135 
log_Àvñ_£t
(
Àvñ
);

136 
log_°ackåa˚
();

137 
log_ª›í
();

138 
log_loggabÀ
(
Àvñ
);

140 
_log
(c⁄° *
fûe
, 
löe
, 
Àvñ
, 
∑nic
, c⁄° *
fmt
, ...);

141 
_log_°dîr
(c⁄° *
fmt
, ...);

142 
_log_°dout
(c⁄° *
fmt
, ...);

143 
_log_ß„
(c⁄° *
fmt
, ...);

144 
_log_°dîr_ß„
(c⁄° *
fmt
, ...);

145 
_log_hexdump
(c⁄° *
fûe
, 
löe
, *
d©a
, 
d©Æí
, c⁄° *
fmt
, ...);

147 
log_wrôe_Àn
(* 
°r
, 
size_t
 
Àn
);

	@dep/util/dlog.h

1 #i‚de‡
_DLOG_H_


2 
	#_DLOG_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	sloggî
 {

10 *
	m«me
;

12 
	mÀvñ
;

14 
	mfd
;

16 
	m√º‹
;

20 
	#LOG_EMERG
 0

	)

21 
	#LOG_ALERT
 1

	)

22 
	#LOG_CRIT
 2

	)

23 
	#LOG_ERR
 3

	)

24 
	#LOG_WARN
 4

	)

25 
	#LOG_NOTICE
 5

	)

26 
	#LOG_INFO
 6

	)

27 
	#LOG_DEBUG
 7

	)

28 
	#LOG_VERB
 8

	)

29 
	#LOG_VVERB
 9

	)

30 
	#LOG_VVVERB
 10

	)

31 
	#LOG_PVERB
 11

	)

33 
	#LOG_ZC
 12

	)

34 
	#LOG_MAX_LEN
 256

	)

47 #ifde‡
HAVE_DEBUG_LOG


49 
	#log_debug
(
_Àvñ
, ...) do { \

50 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

51 
	`_log
(
__FILE__
, 
__LINE__
, 
_Àvñ
, 0, 
__VA_ARGS__
); \

53 } 0)

	)

57 
	#log_debug
(
_Àvñ
, ...)

	)

61 
	#log_hexdump
(
_Àvñ
, 
_d©a
, 
_d©Æí
, ...) do { \

62 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

63 
	`_log
(
__FILE__
, 
__LINE__
, 
_Àvñ
, 0, 
__VA_ARGS__
); \

64 
	`_log_hexdump
(
__FILE__
, 
__LINE__
, (*)(
_d©a
), ()(
_d©Æí
), \

65 
__VA_ARGS__
); \

67 } 0)

	)

69 
	#log_°dîr
(...) do { \

70 
	`_log_°dîr
(
__VA_ARGS__
); \

71 } 0)

	)

73 
	#log_°dout
(...) do { \

74 
	`_log_°dout
(
__VA_ARGS__
); \

75 } 0)

	)

77 
	#log_ß„
(...) do { \

78 
	`_log_ß„
(
__VA_ARGS__
); \

79 } 0)

	)

81 
	#log_°dîr_ß„
(...) do { \

82 
	`_log_°dîr_ß„
(
__VA_ARGS__
); \

83 } 0)

	)

85 
	#loga
(...) do { \

86 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 0, 
__VA_ARGS__
); \

87 } 0)

	)

89 
	#loga_hexdump
(
_d©a
, 
_d©Æí
, ...) do { \

90 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 0, 
__VA_ARGS__
); \

91 
	`_log_hexdump
(
__FILE__
, 
__LINE__
, (*)(
_d©a
), ()(
_d©Æí
), \

92 
__VA_ARGS__
); \

94 

	)

95 
	#log_îr‹
(...) do { \

96 i‡(
	`log_loggabÀ
(
LOG_ERR
) != 0) { \

97 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_ERR
, 0, 
__VA_ARGS__
); \

99 } 0)

	)

101 
	#log_w¨n
(...) do { \

102 i‡(
	`log_loggabÀ
(
LOG_WARN
) != 0) { \

103 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_WARN
, 0, 
__VA_ARGS__
); \

105 } 0)

	)

107 
	#log_nŸi˚
(...) do { \

108 i‡(
	`log_loggabÀ
(
LOG_NOTICE
) != 0) { \

109 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_NOTICE
, 0, 
__VA_ARGS__
); \

111 } 0)

	)

113 
	#log_∑nic
(...) do { \

114 i‡(
	`log_loggabÀ
(
LOG_EMERG
) != 0) { \

115 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, 
__VA_ARGS__
); \

117 } 0)

	)

123 
	#log_zc
(...) do { \

124 i‡(
	`log_loggabÀ
(
LOG_ERR
) != 0) { \

125 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_ZC
, 0, 
__VA_ARGS__
); \

127 } 0)

	)

131 
log_öô
(
Àvñ
, *
fûíame
);

132 
log_deöô
();

133 
log_Àvñ_up
();

134 
log_Àvñ_down
();

135 
log_Àvñ_£t
(
Àvñ
);

136 
log_°ackåa˚
();

137 
log_ª›í
();

138 
log_loggabÀ
(
Àvñ
);

140 
_log
(c⁄° *
fûe
, 
löe
, 
Àvñ
, 
∑nic
, c⁄° *
fmt
, ...);

141 
_log_°dîr
(c⁄° *
fmt
, ...);

142 
_log_°dout
(c⁄° *
fmt
, ...);

143 
_log_ß„
(c⁄° *
fmt
, ...);

144 
_log_°dîr_ß„
(c⁄° *
fmt
, ...);

145 
_log_hexdump
(c⁄° *
fûe
, 
löe
, *
d©a
, 
d©Æí
, c⁄° *
fmt
, ...);

147 
log_wrôe_Àn
(* 
°r
, 
size_t
 
Àn
);

	@dep/util/dspecialconfig.h

1 #i‚de‡
_DSPECIALCONFIG_H_


2 
	#_DSPECIALCONFIG_H_


	)

4 #ifde‡
__APPLE__


5 
	~<AvaûabûôyMa¸os.h
>

8 #ifde‡
__löux__


9 
	~<löux/vîsi⁄.h
>

10 
	~<„©uªs.h
>

13 #i‡(
__i386
 || 
__amd64
 || 
__powîpc__
Ë&& 
__GNUC__


14 
	#GNUC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

15 #i‡
deföed
(
__˛™g__
)

16 
	#HAVE_ATOMIC


	)

18 #i‡(
deföed
(
__GLIBC__
Ë&& deföed(
__GLIBC_PREREQ
))

19 #i‡(
GNUC_VERSION
 >40100 && 
__GLIBC_PREREQ
(2, 6))

20 
	#HAVE_ATOMIC


	)

26 #i‡
deföed
(
__sun
)

27 #i‡
deföed
(
__GNUC__
)

28 
	~<m©h.h
>

29 #unde‡
i¢™


30 
	#i¢™
(
x
) \

31 
	`__exãnsi⁄__
({ 
	`__ty≥of
 (
x
Ë
__x_a
 = (x); \

32 
	`__buûtö_ex≥˘
(
__x_a
 !__x_a, 0); })

	)

34 #unde‡
isföôe


35 
	#isföôe
(
x
) \

36 
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
x
Ë
__x_f
 = (x); \

37 
	`__buûtö_ex≥˘
(!
	`i¢™
(
__x_f
 - __x_f), 1); })

	)

39 #unde‡
isöf


40 
	#isöf
(
x
) \

41 
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
x
Ë
__x_i
 = (x); \

42 
	`__buûtö_ex≥˘
(!
	`i¢™
(
__x_i
Ë&& !
	`isföôe
(__x_i), 0); })

	)

44 
	#u_öt
 
uöt


	)

45 
	#u_öt32_t
 
uöt32_t


	)

51 #ifde‡
__löux__


52 
	#HAVE_PROC_STAT
 1

	)

53 
	#HAVE_PROC_MAPS
 1

	)

54 
	#HAVE_PROC_SMAPS
 1

	)

55 
	#HAVE_PROC_SOMAXCONN
 1

	)

59 #i‡
deföed
(
__APPLE__
)

60 
	#HAVE_TASKINFO
 1

	)

	@dep/util/dspecialconfig.h

1 #i‚de‡
_DSPECIALCONFIG_H_


2 
	#_DSPECIALCONFIG_H_


	)

4 #ifde‡
__APPLE__


5 
	~<AvaûabûôyMa¸os.h
>

8 #ifde‡
__löux__


9 
	~<löux/vîsi⁄.h
>

10 
	~<„©uªs.h
>

13 #i‡(
__i386
 || 
__amd64
 || 
__powîpc__
Ë&& 
__GNUC__


14 
	#GNUC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

15 #i‡
deföed
(
__˛™g__
)

16 
	#HAVE_ATOMIC


	)

18 #i‡(
deföed
(
__GLIBC__
Ë&& deföed(
__GLIBC_PREREQ
))

19 #i‡(
GNUC_VERSION
 >40100 && 
__GLIBC_PREREQ
(2, 6))

20 
	#HAVE_ATOMIC


	)

26 #i‡
deföed
(
__sun
)

27 #i‡
deföed
(
__GNUC__
)

28 
	~<m©h.h
>

29 #unde‡
i¢™


30 
	#i¢™
(
x
) \

31 
	`__exãnsi⁄__
({ 
	`__ty≥of
 (
x
Ë
__x_a
 = (x); \

32 
	`__buûtö_ex≥˘
(
__x_a
 !__x_a, 0); })

	)

34 #unde‡
isföôe


35 
	#isföôe
(
x
) \

36 
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
x
Ë
__x_f
 = (x); \

37 
	`__buûtö_ex≥˘
(!
	`i¢™
(
__x_f
 - __x_f), 1); })

	)

39 #unde‡
isöf


40 
	#isöf
(
x
) \

41 
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
x
Ë
__x_i
 = (x); \

42 
	`__buûtö_ex≥˘
(!
	`i¢™
(
__x_i
Ë&& !
	`isföôe
(__x_i), 0); })

	)

44 
	#u_öt
 
uöt


	)

45 
	#u_öt32_t
 
uöt32_t


	)

51 #ifde‡
__löux__


52 
	#HAVE_PROC_STAT
 1

	)

53 
	#HAVE_PROC_MAPS
 1

	)

54 
	#HAVE_PROC_SMAPS
 1

	)

55 
	#HAVE_PROC_SOMAXCONN
 1

	)

59 #i‡
deföed
(
__APPLE__
)

60 
	#HAVE_TASKINFO
 1

	)

	@dep/util/dutil.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

8 
	~<î∫o.h
>

10 
	~<sys/time.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<sys/io˘l.h
>

15 
	~<√töë/ö.h
>

16 
	~<√töë/t˝.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~<c⁄fig.h
>

22 #ifde‡
HAVE_BACKTRACE


23 
	~<execöfo.h
>

26 
	~<dlog.h
>

27 
	~<dutû.h
>

30 #i‡
deföed
(
__ATOMIC_RELAXED
)

32 #ñi‡
deföed
(
HAVE_ATOMIC
)

34 
±hªad_muãx_t
 
	g©omic_lockî
 = 
PTHREAD_MUTEX_INITIALIZER
;

38 
	$das£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

40 
	`log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

42 i‡(
∑nic
) {

43 
	`d°ackåa˚
(1);

44 
	`ab‹t
();

46 
	}
}

49 
	$d°ackåa˚
(
skù_cou¡
)

51 #ifde‡
HAVE_BACKTRACE


52 *
°ack
[64];

53 **
symbﬁs
;

54 
size
, 
i
, 
j
;

56 
size
 = 
	`backåa˚
(
°ack
, 64);

57 
symbﬁs
 = 
	`backåa˚_symbﬁs
(
°ack
, 
size
);

58 i‡(
symbﬁs
 =
NULL
) {

62 
skù_cou¡
++;

64 
i
 = 
skù_cou¡
, 
j
 = 0; i < 
size
; i++, j++) {

65 
	`loga
("[%d] %s", 
j
, 
symbﬁs
[
i
]);

68 
	`‰ì
(
symbﬁs
);

70 
	}
}

73 
	$d°ackåa˚_fd
(
fd
)

75 #ifde‡
HAVE_BACKTRACE


76 *
°ack
[64];

77 
size
;

79 
size
 = 
	`backåa˚
(
°ack
, 64);

80 
	`backåa˚_symbﬁs_fd
(
°ack
, 
size
, 
fd
);

82 
	}
}

85 
	$_dvs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

87 
n
;

89 
n
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

101 i‡(
n
 <= 0) {

105 i‡(
n
 < (Ë
size
) {

106  
n
;

109  ()(
size
 - 1);

110 
	}
}

113 
	$_ds˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

115 
va_li°
 
¨gs
;

116 
n
;

118 
	`va_°¨t
(
¨gs
, 
fmt
);

119 
n
 = 
	`_dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

120 
	`va_íd
(
¨gs
);

122  
n
;

123 
	}
}

126 
	$_ß„_utﬂ
(
_ba£
, 
uöt64_t
 
vÆ
, *
buf
)

128 
hex
[] = "0123456789abcdef";

129 
uöt32_t
 
ba£
 = (uöt32_tË
_ba£
;

130 *
buf
-- = 0;

132 *
buf
-- = 
hex
[
vÆ
 % 
ba£
];

133 } (
vÆ
 /
ba£
) != 0);

134  
buf
 + 1;

135 
	}
}

138 
	$_ß„_ôﬂ
(
ba£
, 
öt64_t
 
vÆ
, *
buf
)

140 
hex
[] = "0123456789abcdef";

141 *
‹ig_buf
 = 
buf
;

142 c⁄° 
öt32_t
 
is_√g
 = (
vÆ
 < 0);

143 *
buf
-- = 0;

145 i‡(
is_√g
) {

146 
vÆ
 = -val;

148 i‡(
is_√g
 && 
ba£
 == 16) {

149 
ix
;

150 
vÆ
 -= 1;

151 
ix
 = 0; ix < 16; ++ix)

152 
buf
[-
ix
] = '0';

156 *
buf
-- = 
hex
[
vÆ
 % 
ba£
];

157 } (
vÆ
 /
ba£
) != 0);

159 i‡(
is_√g
 && 
ba£
 == 10) {

160 *
buf
-- = '-';

163 i‡(
is_√g
 && 
ba£
 == 16) {

164 
ix
;

165 
buf
 = 
‹ig_buf
 - 1;

166 
ix
 = 0; ix < 16; ++ix, --
buf
) {

168 *
buf
) {

169 '0': *
buf
 = 'f'; ;

170 '1': *
buf
 = 'e'; ;

171 '2': *
buf
 = 'd'; ;

172 '3': *
buf
 = 'c'; ;

173 '4': *
buf
 = 'b'; ;

174 '5': *
buf
 = 'a'; ;

175 '6': *
buf
 = '9'; ;

176 '7': *
buf
 = '8'; ;

177 '8': *
buf
 = '7'; ;

178 '9': *
buf
 = '6'; ;

179 'a': *
buf
 = '5'; ;

180 'b': *
buf
 = '4'; ;

181 'c': *
buf
 = '3'; ;

182 'd': *
buf
 = '2'; ;

183 'e': *
buf
 = '1'; ;

184 'f': *
buf
 = '0'; ;

189  
buf
 + 1;

190 
	}
}

193 
	$_ß„_check_l⁄gl⁄g
(c⁄° *
fmt
, *
have_l⁄gl⁄g
)

195 *
have_l⁄gl⁄g
 = 0;

196 i‡(*
fmt
 == 'l') {

197 
fmt
++;

198 i‡(*
fmt
 != 'l') {

199 *
have_l⁄gl⁄g
 = (() == ());

201 
fmt
++;

202 *
have_l⁄gl⁄g
 = 1;

205  
fmt
;

206 
	}
}

209 
	$_ß„_v¢¥ötf
(*
to
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

211 *
°¨t
 = 
to
;

212 *
íd
 = 
°¨t
 + 
size
 - 1;

213 ; *
f‹m©
; ++format) {

214 
have_l⁄gl⁄g
 = 0;

215 i‡(*
f‹m©
 != '%') {

216 i‡(
to
 =
íd
) {

219 *
to
++ = *
f‹m©
;

222 ++
f‹m©
;

224 
f‹m©
 = 
	`_ß„_check_l⁄gl⁄g
(f‹m©, &
have_l⁄gl⁄g
);

226 *
f‹m©
) {

233 
öt64_t
 
ivÆ
 = 0;

234 
uöt64_t
 
uvÆ
 = 0;

235 i‡(*
f‹m©
 == 'p')

236 
have_l⁄gl⁄g
 = ((*Ë=(
uöt64_t
));

237 i‡(
have_l⁄gl⁄g
) {

238 i‡(*
f‹m©
 == 'u') {

239 
uvÆ
 = 
	`va_¨g
(
≠
, 
uöt64_t
);

241 
ivÆ
 = 
	`va_¨g
(
≠
, 
öt64_t
);

244 i‡(*
f‹m©
 == 'u') {

245 
uvÆ
 = 
	`va_¨g
(
≠
, 
uöt32_t
);

247 
ivÆ
 = 
	`va_¨g
(
≠
, 
öt32_t
);

252 
buff
[22];

253 c⁄° 
ba£
 = (*
f‹m©
 == 'x' || *format == 'p') ? 16 : 10;

256 *
vÆ_as_°r
 = (*
f‹m©
 == 'u') ?

257 
	`_ß„_utﬂ
(
ba£
, 
uvÆ
, &
buff
[(buff) - 1]) :

258 
	`_ß„_ôﬂ
(
ba£
, 
ivÆ
, &
buff
[(buff) - 1]);

262 i‡(*
f‹m©
 ='x' && !
have_l⁄gl⁄g
 && 
ivÆ
 < 0) {

263 
vÆ_as_°r
 += 8;

266 *
vÆ_as_°r
 && 
to
 < 
íd
) {

267 *
to
++ = *
vÆ_as_°r
++;

274 c⁄° *
vÆ
 = 
	`va_¨g
(
≠
, *);

275 i‡(!
vÆ
) {

276 
vÆ
 = "(null)";

278 *
vÆ
 && 
to
 < 
íd
) {

279 *
to
++ = *
vÆ
++;

285 *
to
 = 0;

286  ()(
to
 - 
°¨t
);

287 
	}
}

290 
	$_ß„_¢¥ötf
(*
to
, 
size_t
 
n
, c⁄° *
fmt
, ...)

292 
ªsu…
;

293 
va_li°
 
¨gs
;

294 
	`va_°¨t
(
¨gs
, 
fmt
);

295 
ªsu…
 = 
	`_ß„_v¢¥ötf
(
to
, 
n
, 
fmt
, 
¨gs
);

296 
	`va_íd
(
¨gs
);

297  
ªsu…
;

298 
	}
}

304 
	$du£c_now
()

306 
timevÆ
 
now
;

307 
öt64_t
 
u£c
;

308 
°©us
;

310 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

311 i‡(
°©us
 < 0) {

312 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

316 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

318  
u£c
;

319 
	}
}

325 
	$dm£c_now
()

327  
	`du£c_now
() / 1000LL;

328 
	}
}

334 
	$d£c_now
()

336  
	`du£c_now
() / 1000000LL;

337 
	}
}

340 
	$°rög_m©ch_Àn
(c⁄° *
∑âîn
, 
∑âînLí
,

341 c⁄° *
°rög
, 
°rögLí
, 
noˇ£
)

343 
∑âînLí
) {

344 
∑âîn
[0]) {

346 
∑âîn
[1] == '*') {

347 
∑âîn
++;

348 
∑âînLí
--;

350 i‡(
∑âînLí
 == 1)

352 
°rögLí
) {

353 i‡(
	`°rög_m©ch_Àn
(
∑âîn
+1, 
∑âînLí
-1,

354 
°rög
, 
°rögLí
, 
noˇ£
))

356 
°rög
++;

357 
°rögLí
--;

362 i‡(
°rögLí
 == 0)

364 
°rög
++;

365 
°rögLí
--;

369 
nŸ
, 
m©ch
;

371 
∑âîn
++;

372 
∑âînLí
--;

373 
nŸ
 = 
∑âîn
[0] == '^';

374 i‡(
nŸ
) {

375 
∑âîn
++;

376 
∑âînLí
--;

378 
m©ch
 = 0;

380 i‡(
∑âîn
[0] == '\\') {

381 
∑âîn
++;

382 
∑âînLí
--;

383 i‡(
∑âîn
[0] =
°rög
[0])

384 
m©ch
 = 1;

385 } i‡(
∑âîn
[0] == ']') {

387 } i‡(
∑âînLí
 == 0) {

388 
∑âîn
--;

389 
∑âînLí
++;

391 } i‡(
∑âîn
[1] ='-' && 
∑âînLí
 >= 3) {

392 
°¨t
 = 
∑âîn
[0];

393 
íd
 = 
∑âîn
[2];

394 
c
 = 
°rög
[0];

395 i‡(
°¨t
 > 
íd
) {

396 
t
 = 
°¨t
;

397 
°¨t
 = 
íd
;

398 
íd
 = 
t
;

400 i‡(
noˇ£
) {

401 
°¨t
 = 
	`tﬁowî
(start);

402 
íd
 = 
	`tﬁowî
(end);

403 
c
 = 
	`tﬁowî
(c);

405 
∑âîn
 += 2;

406 
∑âînLí
 -= 2;

407 i‡(
c
 >
°¨t
 && c <
íd
)

408 
m©ch
 = 1;

410 i‡(!
noˇ£
) {

411 i‡(
∑âîn
[0] =
°rög
[0])

412 
m©ch
 = 1;

414 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë=tﬁowî(()
°rög
[0]))

415 
m©ch
 = 1;

418 
∑âîn
++;

419 
∑âînLí
--;

421 i‡(
nŸ
)

422 
m©ch
 = !match;

423 i‡(!
m©ch
)

425 
°rög
++;

426 
°rögLí
--;

430 i‡(
∑âînLí
 >= 2) {

431 
∑âîn
++;

432 
∑âînLí
--;

436 i‡(!
noˇ£
) {

437 i‡(
∑âîn
[0] !
°rög
[0])

440 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë!tﬁowî(()
°rög
[0]))

443 
°rög
++;

444 
°rögLí
--;

447 
∑âîn
++;

448 
∑âînLí
--;

449 i‡(
°rögLí
 == 0) {

450 *
∑âîn
 == '*') {

451 
∑âîn
++;

452 
∑âînLí
--;

457 i‡(
∑âînLí
 =0 && 
°rögLí
 == 0)

460 
	}
}

462 
	$°rög_m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
) {

463  
	`°rög_m©ch_Àn
(
∑âîn
,
	`°æí
’©ã∫),
°rög
,°æí(°rög),
noˇ£
);

464 
	}
}

	@dep/util/dutil.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

8 
	~<î∫o.h
>

10 
	~<sys/time.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<sys/io˘l.h
>

15 
	~<√töë/ö.h
>

16 
	~<√töë/t˝.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~<c⁄fig.h
>

22 #ifde‡
HAVE_BACKTRACE


23 
	~<execöfo.h
>

26 
	~<dlog.h
>

27 
	~<dutû.h
>

30 #i‡
deföed
(
__ATOMIC_RELAXED
)

32 #ñi‡
deföed
(
HAVE_ATOMIC
)

34 
±hªad_muãx_t
 
	g©omic_lockî
 = 
PTHREAD_MUTEX_INITIALIZER
;

38 
	$das£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

40 
	`log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

42 i‡(
∑nic
) {

43 
	`d°ackåa˚
(1);

44 
	`ab‹t
();

46 
	}
}

49 
	$d°ackåa˚
(
skù_cou¡
)

51 #ifde‡
HAVE_BACKTRACE


52 *
°ack
[64];

53 **
symbﬁs
;

54 
size
, 
i
, 
j
;

56 
size
 = 
	`backåa˚
(
°ack
, 64);

57 
symbﬁs
 = 
	`backåa˚_symbﬁs
(
°ack
, 
size
);

58 i‡(
symbﬁs
 =
NULL
) {

62 
skù_cou¡
++;

64 
i
 = 
skù_cou¡
, 
j
 = 0; i < 
size
; i++, j++) {

65 
	`loga
("[%d] %s", 
j
, 
symbﬁs
[
i
]);

68 
	`‰ì
(
symbﬁs
);

70 
	}
}

73 
	$d°ackåa˚_fd
(
fd
)

75 #ifde‡
HAVE_BACKTRACE


76 *
°ack
[64];

77 
size
;

79 
size
 = 
	`backåa˚
(
°ack
, 64);

80 
	`backåa˚_symbﬁs_fd
(
°ack
, 
size
, 
fd
);

82 
	}
}

85 
	$_dvs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

87 
n
;

89 
n
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

101 i‡(
n
 <= 0) {

105 i‡(
n
 < (Ë
size
) {

106  
n
;

109  ()(
size
 - 1);

110 
	}
}

113 
	$_ds˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

115 
va_li°
 
¨gs
;

116 
n
;

118 
	`va_°¨t
(
¨gs
, 
fmt
);

119 
n
 = 
	`_dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

120 
	`va_íd
(
¨gs
);

122  
n
;

123 
	}
}

126 
	$_ß„_utﬂ
(
_ba£
, 
uöt64_t
 
vÆ
, *
buf
)

128 
hex
[] = "0123456789abcdef";

129 
uöt32_t
 
ba£
 = (uöt32_tË
_ba£
;

130 *
buf
-- = 0;

132 *
buf
-- = 
hex
[
vÆ
 % 
ba£
];

133 } (
vÆ
 /
ba£
) != 0);

134  
buf
 + 1;

135 
	}
}

138 
	$_ß„_ôﬂ
(
ba£
, 
öt64_t
 
vÆ
, *
buf
)

140 
hex
[] = "0123456789abcdef";

141 *
‹ig_buf
 = 
buf
;

142 c⁄° 
öt32_t
 
is_√g
 = (
vÆ
 < 0);

143 *
buf
-- = 0;

145 i‡(
is_√g
) {

146 
vÆ
 = -val;

148 i‡(
is_√g
 && 
ba£
 == 16) {

149 
ix
;

150 
vÆ
 -= 1;

151 
ix
 = 0; ix < 16; ++ix)

152 
buf
[-
ix
] = '0';

156 *
buf
-- = 
hex
[
vÆ
 % 
ba£
];

157 } (
vÆ
 /
ba£
) != 0);

159 i‡(
is_√g
 && 
ba£
 == 10) {

160 *
buf
-- = '-';

163 i‡(
is_√g
 && 
ba£
 == 16) {

164 
ix
;

165 
buf
 = 
‹ig_buf
 - 1;

166 
ix
 = 0; ix < 16; ++ix, --
buf
) {

168 *
buf
) {

169 '0': *
buf
 = 'f'; ;

170 '1': *
buf
 = 'e'; ;

171 '2': *
buf
 = 'd'; ;

172 '3': *
buf
 = 'c'; ;

173 '4': *
buf
 = 'b'; ;

174 '5': *
buf
 = 'a'; ;

175 '6': *
buf
 = '9'; ;

176 '7': *
buf
 = '8'; ;

177 '8': *
buf
 = '7'; ;

178 '9': *
buf
 = '6'; ;

179 'a': *
buf
 = '5'; ;

180 'b': *
buf
 = '4'; ;

181 'c': *
buf
 = '3'; ;

182 'd': *
buf
 = '2'; ;

183 'e': *
buf
 = '1'; ;

184 'f': *
buf
 = '0'; ;

189  
buf
 + 1;

190 
	}
}

193 
	$_ß„_check_l⁄gl⁄g
(c⁄° *
fmt
, *
have_l⁄gl⁄g
)

195 *
have_l⁄gl⁄g
 = 0;

196 i‡(*
fmt
 == 'l') {

197 
fmt
++;

198 i‡(*
fmt
 != 'l') {

199 *
have_l⁄gl⁄g
 = (() == ());

201 
fmt
++;

202 *
have_l⁄gl⁄g
 = 1;

205  
fmt
;

206 
	}
}

209 
	$_ß„_v¢¥ötf
(*
to
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

211 *
°¨t
 = 
to
;

212 *
íd
 = 
°¨t
 + 
size
 - 1;

213 ; *
f‹m©
; ++format) {

214 
have_l⁄gl⁄g
 = 0;

215 i‡(*
f‹m©
 != '%') {

216 i‡(
to
 =
íd
) {

219 *
to
++ = *
f‹m©
;

222 ++
f‹m©
;

224 
f‹m©
 = 
	`_ß„_check_l⁄gl⁄g
(f‹m©, &
have_l⁄gl⁄g
);

226 *
f‹m©
) {

233 
öt64_t
 
ivÆ
 = 0;

234 
uöt64_t
 
uvÆ
 = 0;

235 i‡(*
f‹m©
 == 'p')

236 
have_l⁄gl⁄g
 = ((*Ë=(
uöt64_t
));

237 i‡(
have_l⁄gl⁄g
) {

238 i‡(*
f‹m©
 == 'u') {

239 
uvÆ
 = 
	`va_¨g
(
≠
, 
uöt64_t
);

241 
ivÆ
 = 
	`va_¨g
(
≠
, 
öt64_t
);

244 i‡(*
f‹m©
 == 'u') {

245 
uvÆ
 = 
	`va_¨g
(
≠
, 
uöt32_t
);

247 
ivÆ
 = 
	`va_¨g
(
≠
, 
öt32_t
);

252 
buff
[22];

253 c⁄° 
ba£
 = (*
f‹m©
 == 'x' || *format == 'p') ? 16 : 10;

256 *
vÆ_as_°r
 = (*
f‹m©
 == 'u') ?

257 
	`_ß„_utﬂ
(
ba£
, 
uvÆ
, &
buff
[(buff) - 1]) :

258 
	`_ß„_ôﬂ
(
ba£
, 
ivÆ
, &
buff
[(buff) - 1]);

262 i‡(*
f‹m©
 ='x' && !
have_l⁄gl⁄g
 && 
ivÆ
 < 0) {

263 
vÆ_as_°r
 += 8;

266 *
vÆ_as_°r
 && 
to
 < 
íd
) {

267 *
to
++ = *
vÆ_as_°r
++;

274 c⁄° *
vÆ
 = 
	`va_¨g
(
≠
, *);

275 i‡(!
vÆ
) {

276 
vÆ
 = "(null)";

278 *
vÆ
 && 
to
 < 
íd
) {

279 *
to
++ = *
vÆ
++;

285 *
to
 = 0;

286  ()(
to
 - 
°¨t
);

287 
	}
}

290 
	$_ß„_¢¥ötf
(*
to
, 
size_t
 
n
, c⁄° *
fmt
, ...)

292 
ªsu…
;

293 
va_li°
 
¨gs
;

294 
	`va_°¨t
(
¨gs
, 
fmt
);

295 
ªsu…
 = 
	`_ß„_v¢¥ötf
(
to
, 
n
, 
fmt
, 
¨gs
);

296 
	`va_íd
(
¨gs
);

297  
ªsu…
;

298 
	}
}

304 
	$du£c_now
()

306 
timevÆ
 
now
;

307 
öt64_t
 
u£c
;

308 
°©us
;

310 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

311 i‡(
°©us
 < 0) {

312 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

316 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

318  
u£c
;

319 
	}
}

325 
	$dm£c_now
()

327  
	`du£c_now
() / 1000LL;

328 
	}
}

334 
	$d£c_now
()

336  
	`du£c_now
() / 1000000LL;

337 
	}
}

340 
	$°rög_m©ch_Àn
(c⁄° *
∑âîn
, 
∑âînLí
,

341 c⁄° *
°rög
, 
°rögLí
, 
noˇ£
)

343 
∑âînLí
) {

344 
∑âîn
[0]) {

346 
∑âîn
[1] == '*') {

347 
∑âîn
++;

348 
∑âînLí
--;

350 i‡(
∑âînLí
 == 1)

352 
°rögLí
) {

353 i‡(
	`°rög_m©ch_Àn
(
∑âîn
+1, 
∑âînLí
-1,

354 
°rög
, 
°rögLí
, 
noˇ£
))

356 
°rög
++;

357 
°rögLí
--;

362 i‡(
°rögLí
 == 0)

364 
°rög
++;

365 
°rögLí
--;

369 
nŸ
, 
m©ch
;

371 
∑âîn
++;

372 
∑âînLí
--;

373 
nŸ
 = 
∑âîn
[0] == '^';

374 i‡(
nŸ
) {

375 
∑âîn
++;

376 
∑âînLí
--;

378 
m©ch
 = 0;

380 i‡(
∑âîn
[0] == '\\') {

381 
∑âîn
++;

382 
∑âînLí
--;

383 i‡(
∑âîn
[0] =
°rög
[0])

384 
m©ch
 = 1;

385 } i‡(
∑âîn
[0] == ']') {

387 } i‡(
∑âînLí
 == 0) {

388 
∑âîn
--;

389 
∑âînLí
++;

391 } i‡(
∑âîn
[1] ='-' && 
∑âînLí
 >= 3) {

392 
°¨t
 = 
∑âîn
[0];

393 
íd
 = 
∑âîn
[2];

394 
c
 = 
°rög
[0];

395 i‡(
°¨t
 > 
íd
) {

396 
t
 = 
°¨t
;

397 
°¨t
 = 
íd
;

398 
íd
 = 
t
;

400 i‡(
noˇ£
) {

401 
°¨t
 = 
	`tﬁowî
(start);

402 
íd
 = 
	`tﬁowî
(end);

403 
c
 = 
	`tﬁowî
(c);

405 
∑âîn
 += 2;

406 
∑âînLí
 -= 2;

407 i‡(
c
 >
°¨t
 && c <
íd
)

408 
m©ch
 = 1;

410 i‡(!
noˇ£
) {

411 i‡(
∑âîn
[0] =
°rög
[0])

412 
m©ch
 = 1;

414 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë=tﬁowî(()
°rög
[0]))

415 
m©ch
 = 1;

418 
∑âîn
++;

419 
∑âînLí
--;

421 i‡(
nŸ
)

422 
m©ch
 = !match;

423 i‡(!
m©ch
)

425 
°rög
++;

426 
°rögLí
--;

430 i‡(
∑âînLí
 >= 2) {

431 
∑âîn
++;

432 
∑âînLí
--;

436 i‡(!
noˇ£
) {

437 i‡(
∑âîn
[0] !
°rög
[0])

440 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë!tﬁowî(()
°rög
[0]))

443 
°rög
++;

444 
°rögLí
--;

447 
∑âîn
++;

448 
∑âînLí
--;

449 i‡(
°rögLí
 == 0) {

450 *
∑âîn
 == '*') {

451 
∑âîn
++;

452 
∑âînLí
--;

457 i‡(
∑âînLí
 =0 && 
°rögLí
 == 0)

460 
	}
}

462 
	$°rög_m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
) {

463  
	`°rög_m©ch_Àn
(
∑âîn
,
	`°æí
’©ã∫),
°rög
,°æí(°rög),
noˇ£
);

464 
	}
}

	@dep/util/dutil.h

1 #i‚de‡
_DUTIL_H_


2 
	#_DUTIL_H_


	)

4 
	~<°d¨g.h
>

6 
	~<d•ecülc⁄fig.h
>

8 
	#UNUSED
(
x
Ë()(x)

	)

10 
	#LF
 (
uöt8_t
Ë10

	)

11 
	#CR
 (
uöt8_t
Ë13

	)

12 
	#CRLF
 "\x0d\x0a"

	)

13 
	#CRLF_LEN
 (("\x0d\x0a"Ë- 1)

	)

15 
	#NELEMS
(
a
Ë((◊)Ë/ (◊)[0]))

	)

17 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

18 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

20 
	#SQUARE
(
d
Ë((dË* (d))

	)

21 
	#VAR
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : ((s2Ë- 
	`SQUARE
(s)/“)Ë/ (“Ë- 1))

	)

22 
	#STDDEV
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : 
	`sqπ
(
	`VAR
((s), (s2), (n))))

	)

29 #ifde‡
HAVE_ASSERT_PANIC


31 
	#ASSERT
(
_x
) do { \

32 i‡(!(
_x
)) { \

33 
	`das£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

35 } 0)

	)

37 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

39 #ñi‡
HAVE_ASSERT_LOG


41 
	#ASSERT
(
_x
) do { \

42 i‡(!(
_x
)) { \

43 
	`das£π
(#_x, 
__FILE__
, 
__LINE__
, 0); \

45 } 0)

	)

47 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

51 
	#ASSERT
(
_x
)

	)

53 
	#NOT_REACHED
()

	)

57 
das£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

58 
d°ackåa˚
(
skù_cou¡
);

59 
d°ackåa˚_fd
(
fd
);

61 
_ds˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

62 
_dvs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

63 
du£c_now
();

64 
dm£c_now
();

65 
d£c_now
();

78 
_ß„_v¢¥ötf
(*
to
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

79 
_ß„_¢¥ötf
(*
to
, 
size_t
 
n
, c⁄° *
fmt
, ...);

81 
	#dß„_¢¥ötf
(
_s
, 
_n
, ...) \

82 
	`_ß„_¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

84 
	#dß„_v¢¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

85 
	`_ß„_v¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

101 
	#d¢¥ötf
(
_s
, 
_n
, ...) \

102 
	`¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

104 
	#ds˙¥ötf
(
_s
, 
_n
, ...) \

105 
	`_ds˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

107 
	#dv¢¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

108 
	`v¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

110 
	#dvs˙¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

111 
	`_dvs˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

113 
	#d°r·ime
(
_s
, 
_n
, 
fmt
, 
tm
) \

114 ()
	`°r·ime
((*)(
_s
), (
size_t
)(
_n
), 
fmt
, 
tm
)

	)

116 
°rög_m©ch_Àn
(c⁄° *
∑âîn
, 
∑âînLí
, c⁄° *
°rög
, 
°rögLí
, 
noˇ£
);

117 
°rög_m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
);

122 #i‡
deföed
(
__ATOMIC_RELAXED
)

123 
	#©omic_add
(
_vÆue
, 
_n
Ë
	`__©omic_add_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

124 
	#©omic_sub
(
_vÆue
, 
_n
Ë
	`__©omic_sub_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

125 
	#©omic_£t
(
_vÆue
, 
_n
Ë
	`__©omic_°‹e_n
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

126 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

127 
	`__©omic_lﬂd
(&
_vÆue
, 
_v
, 
__ATOMIC_RELAXED
); \

128 } 0)

	)

130 
	#ATOMIC_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

132 #ñi‡
deföed
(
HAVE_ATOMIC
)

133 
	#©omic_add
(
_vÆue
, 
_n
Ë
	`__sync_add_™d_„tch
(&_vÆue, (_n))

	)

134 
	#©omic_sub
(
_vÆue
, 
_n
Ë
	`__sync_sub_™d_„tch
(&_vÆue, (_n))

	)

135 
	#©omic_£t
(
_vÆue
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&_vÆue, (_n))

	)

136 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

137 (*
_v
Ë
	`__sync_add_™d_„tch
(&
_vÆue
, 0); \

138 } 0)

	)

140 
	#ATOMIC_LOCK_TYPE
 "HAVE_ATOMIC"

	)

142 
±hªad_muãx_t
 
©omic_lockî
;

144 
	#©omic_add
(
_vÆue
, 
_n
) do { \

145 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

146 
_vÆue
 +(
_n
); \

147 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

148 } 0)

	)

150 
	#©omic_sub
(
_vÆue
, 
_n
) do { \

151 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

152 
_vÆue
 -(
_n
); \

153 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

154 } 0)

	)

156 
	#©omic_£t
(
_vÆue
, 
_n
) do { \

157 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

158 
_vÆue
 = (
_n
); \

159 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

160 } 0)

	)

162 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

163 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

164 (*
_v
Ë
_vÆue
; \

165 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

166 } 0)

	)

168 
	#ATOMIC_LOCK_TYPE
 "±hªad_muãx_lock"

	)

	@dep/util/dutil.h

1 #i‚de‡
_DUTIL_H_


2 
	#_DUTIL_H_


	)

4 
	~<°d¨g.h
>

6 
	~<d•ecülc⁄fig.h
>

8 
	#UNUSED
(
x
Ë()(x)

	)

10 
	#LF
 (
uöt8_t
Ë10

	)

11 
	#CR
 (
uöt8_t
Ë13

	)

12 
	#CRLF
 "\x0d\x0a"

	)

13 
	#CRLF_LEN
 (("\x0d\x0a"Ë- 1)

	)

15 
	#NELEMS
(
a
Ë((◊)Ë/ (◊)[0]))

	)

17 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

18 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

20 
	#SQUARE
(
d
Ë((dË* (d))

	)

21 
	#VAR
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : ((s2Ë- 
	`SQUARE
(s)/“)Ë/ (“Ë- 1))

	)

22 
	#STDDEV
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : 
	`sqπ
(
	`VAR
((s), (s2), (n))))

	)

29 #ifde‡
HAVE_ASSERT_PANIC


31 
	#ASSERT
(
_x
) do { \

32 i‡(!(
_x
)) { \

33 
	`das£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

35 } 0)

	)

37 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

39 #ñi‡
HAVE_ASSERT_LOG


41 
	#ASSERT
(
_x
) do { \

42 i‡(!(
_x
)) { \

43 
	`das£π
(#_x, 
__FILE__
, 
__LINE__
, 0); \

45 } 0)

	)

47 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

51 
	#ASSERT
(
_x
)

	)

53 
	#NOT_REACHED
()

	)

57 
das£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

58 
d°ackåa˚
(
skù_cou¡
);

59 
d°ackåa˚_fd
(
fd
);

61 
_ds˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

62 
_dvs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

63 
du£c_now
();

64 
dm£c_now
();

65 
d£c_now
();

78 
_ß„_v¢¥ötf
(*
to
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

79 
_ß„_¢¥ötf
(*
to
, 
size_t
 
n
, c⁄° *
fmt
, ...);

81 
	#dß„_¢¥ötf
(
_s
, 
_n
, ...) \

82 
	`_ß„_¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

84 
	#dß„_v¢¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

85 
	`_ß„_v¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

101 
	#d¢¥ötf
(
_s
, 
_n
, ...) \

102 
	`¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

104 
	#ds˙¥ötf
(
_s
, 
_n
, ...) \

105 
	`_ds˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

107 
	#dv¢¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

108 
	`v¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

110 
	#dvs˙¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

111 
	`_dvs˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

113 
	#d°r·ime
(
_s
, 
_n
, 
fmt
, 
tm
) \

114 ()
	`°r·ime
((*)(
_s
), (
size_t
)(
_n
), 
fmt
, 
tm
)

	)

116 
°rög_m©ch_Àn
(c⁄° *
∑âîn
, 
∑âînLí
, c⁄° *
°rög
, 
°rögLí
, 
noˇ£
);

117 
°rög_m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
);

122 #i‡
deföed
(
__ATOMIC_RELAXED
)

123 
	#©omic_add
(
_vÆue
, 
_n
Ë
	`__©omic_add_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

124 
	#©omic_sub
(
_vÆue
, 
_n
Ë
	`__©omic_sub_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

125 
	#©omic_£t
(
_vÆue
, 
_n
Ë
	`__©omic_°‹e_n
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

126 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

127 
	`__©omic_lﬂd
(&
_vÆue
, 
_v
, 
__ATOMIC_RELAXED
); \

128 } 0)

	)

130 
	#ATOMIC_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

132 #ñi‡
deföed
(
HAVE_ATOMIC
)

133 
	#©omic_add
(
_vÆue
, 
_n
Ë
	`__sync_add_™d_„tch
(&_vÆue, (_n))

	)

134 
	#©omic_sub
(
_vÆue
, 
_n
Ë
	`__sync_sub_™d_„tch
(&_vÆue, (_n))

	)

135 
	#©omic_£t
(
_vÆue
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&_vÆue, (_n))

	)

136 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

137 (*
_v
Ë
	`__sync_add_™d_„tch
(&
_vÆue
, 0); \

138 } 0)

	)

140 
	#ATOMIC_LOCK_TYPE
 "HAVE_ATOMIC"

	)

142 
±hªad_muãx_t
 
©omic_lockî
;

144 
	#©omic_add
(
_vÆue
, 
_n
) do { \

145 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

146 
_vÆue
 +(
_n
); \

147 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

148 } 0)

	)

150 
	#©omic_sub
(
_vÆue
, 
_n
) do { \

151 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

152 
_vÆue
 -(
_n
); \

153 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

154 } 0)

	)

156 
	#©omic_£t
(
_vÆue
, 
_n
) do { \

157 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

158 
_vÆue
 = (
_n
); \

159 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

160 } 0)

	)

162 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

163 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

164 (*
_v
Ë
_vÆue
; \

165 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

166 } 0)

	)

168 
	#ATOMIC_LOCK_TYPE
 "±hªad_muãx_lock"

	)

	@src/vr.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<sig«l.h
>

5 
	~<gë›t.h
>

6 
	~<f˙é.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ut¢ame.h
>

10 
	~<vr_c‹e.h
>

11 
	~<vr_c⁄f.h
>

12 
	~<vr_sig«l.h
>

15 
	#VR_CONF_PATH
 "c⁄f/vúe.c⁄f"

	)

18 
	#VR_LOG_DEFAULT
 
LOG_ZC


	)

19 
	#VR_LOG_MIN
 
LOG_EMERG


	)

20 
	#VR_LOG_MAX
 
LOG_PVERB


	)

21 
	#VR_LOG_PATH
 
NULL


	)

24 
	#VR_PORT
 8889

	)

26 
	#VR_ADDR
 "0.0.0.0"

	)

28 
	#VR_INTERVAL
 (30 * 1000Ë

	)

30 
	#VR_PID_FILE
 
NULL


	)

32 
	#VR_THREAD_NUM_DEFAULT
 (
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)>6?6:sysc⁄f(_SC_NPROCESSORS_ONLN))

	)

34 #i‚de‡
PRINT_STACK


35 
	#PRINT_STACK
 12345

	)

38 
	$Pröt_Func
(*
°r
){

39 i‡(
PRINT_STACK
 != 12345)

43 
	`¥ötf
("\¬ow in:%s\n",
°r
);

44 
	}
}

47 c⁄° 
	gSHOWIMG
 = 1;

50 
	gshow_hñp
;

52 
	gshow_vîsi⁄
;

54 
	gã°_c⁄f
;

56 
	gd´m⁄ize
;

58 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

59 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

60 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

61 { "ã°-c⁄f", 
no_¨gumít
, 
NULL
, 't' },

62 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'd' },

63 { "vîbo£", 
ªquúed_¨gumít
, 
NULL
, 'v' },

64 { "ouçut", 
ªquúed_¨gumít
, 
NULL
, 'o' },

65 { "c⁄f-fûe", 
ªquúed_¨gumít
, 
NULL
, 'c' },

66 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'p' },

67 { "thªad-num", 
ªquúed_¨gumít
, 
NULL
, 'T' },

68 { 
NULL
, 0, NULL, 0 }

72 
	gsh‹t_›ti⁄s
[] = "hVtdv:o:c:p:T:";

75 
r°©us_t


76 
	$vr_d´m⁄ize
(
dump_c‹e
)

78 
r°©us_t
 
°©us
;

79 
pid_t
 
pid
, 
sid
;

80 
fd
;

82 
pid
 = 
	`f‹k
();

83 
pid
) {

85 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

86  
VR_ERROR
;

93 
	`_exô
(0);

98 
sid
 = 
	`£tsid
();

99 i‡(
sid
 < 0) {

100 
	`log_îr‹
("£tsid(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

101  
VR_ERROR
;

104 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

105 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

106  
VR_ERROR
;

109 
pid
 = 
	`f‹k
();

110 
pid
) {

112 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

113  
VR_ERROR
;

120 
	`_exô
(0);

126 i‡(
dump_c‹e
 == 0) {

127 
°©us
 = 
	`chdú
("/");

128 i‡(
°©us
 < 0) {

129 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

130  
VR_ERROR
;

135 
	`umask
(0);

139 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

140 i‡(
fd
 < 0) {

141 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

142  
VR_ERROR
;

145 
°©us
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

146 i‡(
°©us
 < 0) {

147 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

148 
	`˛o£
(
fd
);

149  
VR_ERROR
;

152 
°©us
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

153 i‡(
°©us
 < 0) {

154 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

155 
	`˛o£
(
fd
);

156  
VR_ERROR
;

159 
°©us
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

160 i‡(
°©us
 < 0) {

161 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

162 
	`˛o£
(
fd
);

163  
VR_ERROR
;

166 i‡(
fd
 > 
STDERR_FILENO
) {

167 
°©us
 = 
	`˛o£
(
fd
);

168 i‡(
°©us
 < 0) {

169 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

170  
VR_ERROR
;

174  
VR_OK
;

175 
	}
}

178 
	$vr_¥öt_run
(
ö°™˚
 *
nci
)

180 
°©us
;

181 
ut¢ame
 
«me
;

183 
°©us
 = 
	`u«me
(&
«me
);

190 *
ascii_logo1
 =

196 )/`.,'\\– \¿\
|. ,| \¿\
:6Ë (6; \¿\
\\`\\ _(\\ \¿\
\\._'; `.
___
...---..
________
...------.
_
 \
n
 \

201 \\ | ,' . . . . .`:. \¿\
\\`.' . . . . . . . \\ \
n
 \

203 `. . . \\ . . ..::: . :: \
n
 \

204 \\ . . . ..::::::::'' ': . || \¿\
\\ `. :. .:' \\ '. . ;; \¿\
`._ \\ ::: ; _,\ :. |/– \¿\
`.`::: /--....---''' \\ `. :. :`\\` \
n
 \

208 | |:': \\ `. :.\\ \¿\
| |' ; \\ (\\ .\\ \
n
 \

210 | |.: \\ \\`. : \
n
 \

211 |.| | ) / :.| \
n
 \

212 | |.| /./ | | \
n
 \

213 |.| | / / | | \
n
 \

214 | | | /./ |.| \
n
 \

215 ;
_
;_; ,'_/ ;_| \¿\
'-/
	`_
( '--' /,' \n \
" ;

218 
	`¥ötf
("%s",
ascii_logo1
);

224 i‡(
nci
->
log_fûíame
) {

225 *
ascii_logo
 = 
ascii_logo1
;

244 *
buf
 = 
	`dÆloc
(1024*16);

245 
	`¢¥ötf
(
buf
,1024*16,
ascii_logo
,

246 
VR_VERSION_STRING
,

248 "°™dÆ⁄e", 
£rvî
.
p‹t
,

249 (Ë
nci
->
pid
,

250 
°©us
 < 0 ? " ":
«me
.
sy¢ame
,

251 
°©us
 < 0 ? " ":
«me
.
ªÀa£
,

252 
°©us
 < 0 ? " ":
«me
.
machöe
);

253 
	`log_wrôe_Àn
(
buf
, 
	`°æí
(buf));

254 
	`d‰ì
(
buf
);

256 
buf
[256];

257 
	`¢¥ötf
(
buf
,256,"Vire %s, %s bit, %s mode,Öort %d,Öid %ld, built for %s %s %sÑeadyÅoÑun.\n",

258 
VR_VERSION_STRING
, (() == 8) ? "64" : "32",

259 "°™dÆ⁄e", 
£rvî
.
p‹t
, (Ë
nci
->
pid
,

260 
°©us
 < 0 ? " ":
«me
.
sy¢ame
,

261 
°©us
 < 0 ? " ":
«me
.
ªÀa£
,

262 
°©us
 < 0 ? " ":
«me
.
machöe
);

263 
	`log_wrôe_Àn
(
buf
, 
	`°æí
(buf));

265 
	}
}

268 
	$vr_¥öt_d⁄e
()

270 
	`loga
("done,Ñabbit done");

271 
	}
}

274 
	$vr_show_ußge
()

276 
	`log_°dîr
(

277 "Ußge: vúê[-?hVdt] [-v vîbosôyÜevñ] [-ÿouçuàfûe]" 
CRLF


278 " [-¯c⁄‡fûe] [-∞pid fûe]" 
CRLF


279 " [-T w‹kîÅhªad†numbî]" 
CRLF


281 
	`log_°dîr
(

282 "O±i⁄s:" 
CRLF


283 " -h, --hñ∞ :Åhi†hñp" 
CRLF


284 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


285 " -t, --ã°-c⁄‡ :Åe° c⁄figuøti⁄ f‹ sy¡axÉº‹†™dÉxô" 
CRLF


287 
	`log_°dîr
(

288 " -v, --vîbo£=N : sëÜoggögÜevñ (deÁu…: %d, mö: %d, max: %d)" 
CRLF


289 " -o, --ouçut=S : sëÜoggög fûê(deÁu…: %s)" 
CRLF


290 " -c, --c⁄f-fûe=S : së c⁄figuøti⁄ fûê(deÁu…: %s)" 
CRLF


291 " -p, --pid-fûe=S : sëÖid fûê(deÁu…: %s)" 
CRLF


292 " -T, --thªad_num=N : sëÅhêw‹kîÅhªad†numbî (deÁu…: %d)" 
CRLF


294 
VR_LOG_DEFAULT
, 
VR_LOG_MIN
, 
VR_LOG_MAX
,

295 
VR_LOG_PATH
 !
NULL
 ? VR_LOG_PATH : "stderr",

296 
VR_CONF_PATH
,

297 
VR_PID_FILE
 !
NULL
 ? VR_PID_FILE : "off",

298 
VR_THREAD_NUM_DEFAULT
);

299 
	}
}

301 
r°©us_t


302 
	$vr_¸óã_pidfûe
(
ö°™˚
 *
nci
)

304 
pid
[
VR_UINTMAX_MAXLEN
];

305 
fd
, 
pid_Àn
;

306 
ssize_t
 
n
;

308 
fd
 = 
	`›í
(
nci
->
pid_fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

309 i‡(
fd
 < 0) {

310 
	`log_îr‹
("›íögÖid fûê'%s' faûed: %s", 
nci
->
pid_fûíame
,

311 
	`°ªº‹
(
î∫o
));

312  
VR_ERROR
;

314 
nci
->
pidfûe
 = 1;

316 
pid_Àn
 = 
	`d¢¥ötf
(
pid
, 
VR_UINTMAX_MAXLEN
, "%d", 
nci
->pid);

318 
n
 = 
	`vr_wrôe
(
fd
, 
pid
, 
pid_Àn
);

319 i‡(
n
 < 0) {

320 
	`log_îr‹
("wrôêtÿpid fûê'%s' faûed: %s", 
nci
->
pid_fûíame
,

321 
	`°ªº‹
(
î∫o
));

322  
VR_ERROR
;

325 
	`˛o£
(
fd
);

327  
VR_OK
;

328 
	}
}

332 
	$vr_ªmove_pidfûe
(
ö°™˚
 *
nci
)

334 
°©us
;

336 
°©us
 = 
	`u∆ök
(
nci
->
pid_fûíame
);

337 i‡(
°©us
 < 0) {

338 
	`log_îr‹
("unlink ofÖid file '%s' failed, ignored: %s",

339 
nci
->
pid_fûíame
, 
	`°ªº‹
(
î∫o
));

341 
	}
}

344 
	$vr_£t_deÁu…_›ti⁄s
(
ö°™˚
 *
nci
)

347 
°©us
;

349 
nci
->
log_Àvñ
 = 
VR_LOG_DEFAULT
;

350 
nci
->
log_fûíame
 = 
VR_LOG_PATH
;

352 
nci
->
c⁄f_fûíame
 = 
VR_CONF_PATH
;

355 
°©us
 = 
	`vr_gëho°«me
(
nci
->
ho°«me
, 
VR_MAXHOSTNAMELEN
);

356 i‡(
°©us
 < 0) {

357 
	`log_w¨n
("gëho°«mêÁûed, ign‹ed: %s", 
	`°ªº‹
(
î∫o
));

358 
	`d¢¥ötf
(
nci
->
ho°«me
, 
VR_MAXHOSTNAMELEN
, "unknown");

360 
nci
->
ho°«me
[
VR_MAXHOSTNAMELEN
 - 1] = '\0';

362 
nci
->
pid
 = (
pid_t
)-1;

363 
nci
->
pid_fûíame
 = 
NULL
;

364 
nci
->
pidfûe
 = 0;

366 
nci
->
thªad_num
 = ()
VR_THREAD_NUM_DEFAULT
;

367 
	}
}

369 
r°©us_t


370 
	$vr_gë_›ti⁄s
(
¨gc
, **
¨gv
, 
ö°™˚
 *
nci
)

372 
c
, 
vÆue
;

374 
›ãº
 = 0;

378 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

379 i‡(
c
 == -1) {

384 
c
) {

386 
show_vîsi⁄
 = 1;

387 
show_hñp
 = 1;

391 
show_vîsi⁄
 = 1;

395 
ã°_c⁄f
 = 1;

399 
d´m⁄ize
 = 1;

403 
vÆue
 = 
	`vr_©oi
(
›èrg
, 
	`°æí
(optarg));

404 i‡(
vÆue
 < 0) {

405 
	`log_°dîr
("vire: option -vÑequiresáÇumber");

406  
VR_ERROR
;

408 
nci
->
log_Àvñ
 = 
vÆue
;

412 
nci
->
log_fûíame
 = 
›èrg
;

416 
nci
->
c⁄f_fûíame
 = 
›èrg
;

420 
nci
->
pid_fûíame
 = 
›èrg
;

424 
vÆue
 = 
	`vr_©oi
(
›èrg
, 
	`°æí
(optarg));

425 i‡(
vÆue
 < 0) {

426 
	`log_°dîr
("vire: option -TÑequiresáÇumber");

427  
VR_ERROR
;

430 
nci
->
thªad_num
 = 
vÆue
;

434 
›t›t
) {

438 
	`log_°dîr
("vire: option -%cÑequiresá fileÇame",

439 
›t›t
);

444 
	`log_°dîr
("vúe: o±i⁄ -%¯ªquúe†®numbî", 
›t›t
);

448 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

451  
VR_ERROR
;

454 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

455  
VR_ERROR
;

460  
VR_OK
;

461 
	}
}

468 
boﬁ


469 
	$vr_ã°_c⁄f
(
ö°™˚
 *
nci
, 
ã°
)

471 
vr_c⁄f
 *
cf
;

473 
cf
 = 
	`c⁄f_¸óã
(
nci
->
c⁄f_fûíame
);

475 i‡(
cf
 =
NULL
) {

476 i‡(
ã°
)

477 
	`log_°dîr
("vire: configuration file '%s' syntax is invalid",

478 
nci
->
c⁄f_fûíame
);

479  
Ál£
;

482 
	`c⁄f_de°roy
(
cf
);

484 i‡(
ã°
)

485 
	`log_°dîr
("vire: configuration file '%s' syntax is ok",

486 
nci
->
c⁄f_fûíame
);

487  
åue
;

488 
	}
}

492 
	$vr_¥e_run
(
ö°™˚
 *
nci
)

494 
ªt
;

496 
ªt
 = 
	`log_öô
(
nci
->
log_Àvñ
,Çci->
log_fûíame
);

497 i‡(
ªt
 !
VR_OK
) {

498  
ªt
;

501 
	`log_debug
(
LOG_VERB
, "Vúêu£dÜogfûe: %s", 
nci
->
c⁄f_fûíame
);

503 i‡(!
	`vr_ã°_c⁄f
(
nci
, 
Ál£
)) {

504 
	`log_îr‹
("c⁄‡fûê%†i†îr‹", 
nci
->
c⁄f_fûíame
);

505  
VR_ERROR
;

508 i‡(
d´m⁄ize
) {

509 
ªt
 = 
	`vr_d´m⁄ize
(1);

510 i‡(
ªt
 !
VR_OK
) {

511  
ªt
;

515 
nci
->
pid
 = 
	`gëpid
();

517 
ªt
 = 
	`sig«l_öô
();

518 i‡(
ªt
 !
VR_OK
) {

519  
ªt
;

522 i‡(
nci
->
pid_fûíame
) {

523 
ªt
 = 
	`vr_¸óã_pidfûe
(
nci
);

524 i‡(
ªt
 !
VR_OK
) {

525  
VR_ERROR
;

529 
ªt
 = 
	`öô_£rvî
(
nci
);

530 i‡(
ªt
 !
VR_OK
) {

531  
VR_ERROR
;

534 
	`vr_¥öt_run
(
nci
);

536  
VR_OK
;

537 
	}
}

540 
	$vr_po°_run
(
ö°™˚
 *
nci
)

544 
	`w‹kîs_deöô
();

546 
	`backíds_deöô
();

548 
	`ma°î_deöô
();

550 i‡(
nci
->
pidfûe
) {

551 
	`vr_ªmove_pidfûe
(
nci
);

554 
	`sig«l_deöô
();

556 
	`vr_¥öt_d⁄e
();

558 
	`log_deöô
();

559 
	}
}

563 
	$vr_run
(
ö°™˚
 *
nci
)

566 i‡(
nci
->
thªad_num
 <= 0) {

567 
	`log_îr‹
("number of workÅhreads must be greaterÅhan 0");

569 } i‡(
nci
->
thªad_num
 > 64) {

570 
	`log_w¨n
("WARNING: Settingá highÇumber of workerÅhreads isÇotÑecommended."

576 
	`ma°î_run
();

578 
	`w‹kîs_run
();

580 
	`backíds_run
();

584 
	`w‹kîs_waô
();

586 
	`backíds_waô
();

587 
	}
}

591 
	$maö
(
¨gc
, **
¨gv
)

593 
r°©us_t
 
°©us
;

594 
ö°™˚
 
nci
;

596 
	`vr_£t_deÁu…_›ti⁄s
(&
nci
);

598 
°©us
 = 
	`vr_gë_›ti⁄s
(
¨gc
, 
¨gv
, &
nci
);

599 i‡(
°©us
 !
VR_OK
) {

601 
	`vr_show_ußge
();

602 
	`exô
(1);

605 i‡(
show_vîsi⁄
) {

606 
	`log_°dîr
("Thi†i†vúe-%s" 
CRLF
, 
VR_VERSION_STRING
);

607 i‡(
show_hñp
) {

608 
	`vr_show_ußge
();

610 
	`exô
(0);

613 i‡(
ã°_c⁄f
) {

614 i‡(!
	`vr_ã°_c⁄f
(&
nci
, 
åue
)) {

615 
	`exô
(1);

617 
	`exô
(0);

620 
°©us
 = 
	`vr_¥e_run
(&
nci
);

621 i‡(
°©us
 !
VR_OK
) {

622 
	`vr_po°_run
(&
nci
);

623 
	`exô
(1);

627 
£rvî
.
execuèbÀ
 = 
	`gëAbsﬁuãP©h
(
¨gv
[0]);

629 
	`vr_run
(&
nci
);

631 
	`vr_po°_run
(&
nci
);

633  
VR_OK
;

634 
	}
}

	@src/vr.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<sig«l.h
>

5 
	~<gë›t.h
>

6 
	~<f˙é.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ut¢ame.h
>

10 
	~<vr_c‹e.h
>

11 
	~<vr_c⁄f.h
>

12 
	~<vr_sig«l.h
>

15 
	#VR_CONF_PATH
 "c⁄f/vúe.c⁄f"

	)

18 
	#VR_LOG_DEFAULT
 
LOG_ZC


	)

19 
	#VR_LOG_MIN
 
LOG_EMERG


	)

20 
	#VR_LOG_MAX
 
LOG_PVERB


	)

21 
	#VR_LOG_PATH
 
NULL


	)

24 
	#VR_PORT
 8889

	)

26 
	#VR_ADDR
 "0.0.0.0"

	)

28 
	#VR_INTERVAL
 (30 * 1000Ë

	)

30 
	#VR_PID_FILE
 
NULL


	)

32 
	#VR_THREAD_NUM_DEFAULT
 (
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)>6?6:sysc⁄f(_SC_NPROCESSORS_ONLN))

	)

34 #i‚de‡
PRINT_STACK


35 
	#PRINT_STACK
 12345

	)

38 
	$Pröt_Func
(*
°r
){

39 i‡(
PRINT_STACK
 != 12345)

43 
	`¥ötf
("\¬ow in:%s\n",
°r
);

44 
	}
}

47 c⁄° 
	gSHOWIMG
 = 1;

50 
	gshow_hñp
;

52 
	gshow_vîsi⁄
;

54 
	gã°_c⁄f
;

56 
	gd´m⁄ize
;

58 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

59 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

60 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

61 { "ã°-c⁄f", 
no_¨gumít
, 
NULL
, 't' },

62 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'd' },

63 { "vîbo£", 
ªquúed_¨gumít
, 
NULL
, 'v' },

64 { "ouçut", 
ªquúed_¨gumít
, 
NULL
, 'o' },

65 { "c⁄f-fûe", 
ªquúed_¨gumít
, 
NULL
, 'c' },

66 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'p' },

67 { "thªad-num", 
ªquúed_¨gumít
, 
NULL
, 'T' },

68 { 
NULL
, 0, NULL, 0 }

72 
	gsh‹t_›ti⁄s
[] = "hVtdv:o:c:p:T:";

75 
r°©us_t


76 
	$vr_d´m⁄ize
(
dump_c‹e
)

78 
r°©us_t
 
°©us
;

79 
pid_t
 
pid
, 
sid
;

80 
fd
;

82 
pid
 = 
	`f‹k
();

83 
pid
) {

85 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

86  
VR_ERROR
;

93 
	`_exô
(0);

98 
sid
 = 
	`£tsid
();

99 i‡(
sid
 < 0) {

100 
	`log_îr‹
("£tsid(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

101  
VR_ERROR
;

104 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

105 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

106  
VR_ERROR
;

109 
pid
 = 
	`f‹k
();

110 
pid
) {

112 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

113  
VR_ERROR
;

120 
	`_exô
(0);

126 i‡(
dump_c‹e
 == 0) {

127 
°©us
 = 
	`chdú
("/");

128 i‡(
°©us
 < 0) {

129 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

130  
VR_ERROR
;

135 
	`umask
(0);

139 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

140 i‡(
fd
 < 0) {

141 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

142  
VR_ERROR
;

145 
°©us
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

146 i‡(
°©us
 < 0) {

147 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

148 
	`˛o£
(
fd
);

149  
VR_ERROR
;

152 
°©us
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

153 i‡(
°©us
 < 0) {

154 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

155 
	`˛o£
(
fd
);

156  
VR_ERROR
;

159 
°©us
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

160 i‡(
°©us
 < 0) {

161 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

162 
	`˛o£
(
fd
);

163  
VR_ERROR
;

166 i‡(
fd
 > 
STDERR_FILENO
) {

167 
°©us
 = 
	`˛o£
(
fd
);

168 i‡(
°©us
 < 0) {

169 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

170  
VR_ERROR
;

174  
VR_OK
;

175 
	}
}

178 
	$vr_¥öt_run
(
ö°™˚
 *
nci
)

180 
°©us
;

181 
ut¢ame
 
«me
;

183 
°©us
 = 
	`u«me
(&
«me
);

190 *
ascii_logo1
 =

196 )/`.,'\\– \¿\
|. ,| \¿\
:6Ë (6; \¿\
\\`\\ _(\\ \¿\
\\._'; `.
___
...---..
________
...------.
_
 \
n
 \

201 \\ | ,' . . . . .`:. \¿\
\\`.' . . . . . . . \\ \
n
 \

203 `. . . \\ . . ..::: . :: \
n
 \

204 \\ . . . ..::::::::'' ': . || \¿\
\\ `. :. .:' \\ '. . ;; \¿\
`._ \\ ::: ; _,\ :. |/– \¿\
`.`::: /--....---''' \\ `. :. :`\\` \
n
 \

208 | |:': \\ `. :.\\ \¿\
| |' ; \\ (\\ .\\ \
n
 \

210 | |.: \\ \\`. : \
n
 \

211 |.| | ) / :.| \
n
 \

212 | |.| /./ | | \
n
 \

213 |.| | / / | | \
n
 \

214 | | | /./ |.| \
n
 \

215 ;
_
;_; ,'_/ ;_| \¿\
'-/
	`_
( '--' /,' \n \
" ;

218 
	`¥ötf
("%s",
ascii_logo1
);

224 i‡(
nci
->
log_fûíame
) {

225 *
ascii_logo
 = 
ascii_logo1
;

244 *
buf
 = 
	`dÆloc
(1024*16);

245 
	`¢¥ötf
(
buf
,1024*16,
ascii_logo
,

246 
VR_VERSION_STRING
,

248 "°™dÆ⁄e", 
£rvî
.
p‹t
,

249 (Ë
nci
->
pid
,

250 
°©us
 < 0 ? " ":
«me
.
sy¢ame
,

251 
°©us
 < 0 ? " ":
«me
.
ªÀa£
,

252 
°©us
 < 0 ? " ":
«me
.
machöe
);

253 
	`log_wrôe_Àn
(
buf
, 
	`°æí
(buf));

254 
	`d‰ì
(
buf
);

256 
buf
[256];

257 
	`¢¥ötf
(
buf
,256,"Vire %s, %s bit, %s mode,Öort %d,Öid %ld, built for %s %s %sÑeadyÅoÑun.\n",

258 
VR_VERSION_STRING
, (() == 8) ? "64" : "32",

259 "°™dÆ⁄e", 
£rvî
.
p‹t
, (Ë
nci
->
pid
,

260 
°©us
 < 0 ? " ":
«me
.
sy¢ame
,

261 
°©us
 < 0 ? " ":
«me
.
ªÀa£
,

262 
°©us
 < 0 ? " ":
«me
.
machöe
);

263 
	`log_wrôe_Àn
(
buf
, 
	`°æí
(buf));

265 
	}
}

268 
	$vr_¥öt_d⁄e
()

270 
	`loga
("done,Ñabbit done");

271 
	}
}

274 
	$vr_show_ußge
()

276 
	`log_°dîr
(

277 "Ußge: vúê[-?hVdt] [-v vîbosôyÜevñ] [-ÿouçuàfûe]" 
CRLF


278 " [-¯c⁄‡fûe] [-∞pid fûe]" 
CRLF


279 " [-T w‹kîÅhªad†numbî]" 
CRLF


281 
	`log_°dîr
(

282 "O±i⁄s:" 
CRLF


283 " -h, --hñ∞ :Åhi†hñp" 
CRLF


284 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


285 " -t, --ã°-c⁄‡ :Åe° c⁄figuøti⁄ f‹ sy¡axÉº‹†™dÉxô" 
CRLF


287 
	`log_°dîr
(

288 " -v, --vîbo£=N : sëÜoggögÜevñ (deÁu…: %d, mö: %d, max: %d)" 
CRLF


289 " -o, --ouçut=S : sëÜoggög fûê(deÁu…: %s)" 
CRLF


290 " -c, --c⁄f-fûe=S : së c⁄figuøti⁄ fûê(deÁu…: %s)" 
CRLF


291 " -p, --pid-fûe=S : sëÖid fûê(deÁu…: %s)" 
CRLF


292 " -T, --thªad_num=N : sëÅhêw‹kîÅhªad†numbî (deÁu…: %d)" 
CRLF


294 
VR_LOG_DEFAULT
, 
VR_LOG_MIN
, 
VR_LOG_MAX
,

295 
VR_LOG_PATH
 !
NULL
 ? VR_LOG_PATH : "stderr",

296 
VR_CONF_PATH
,

297 
VR_PID_FILE
 !
NULL
 ? VR_PID_FILE : "off",

298 
VR_THREAD_NUM_DEFAULT
);

299 
	}
}

301 
r°©us_t


302 
	$vr_¸óã_pidfûe
(
ö°™˚
 *
nci
)

304 
pid
[
VR_UINTMAX_MAXLEN
];

305 
fd
, 
pid_Àn
;

306 
ssize_t
 
n
;

308 
fd
 = 
	`›í
(
nci
->
pid_fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

309 i‡(
fd
 < 0) {

310 
	`log_îr‹
("›íögÖid fûê'%s' faûed: %s", 
nci
->
pid_fûíame
,

311 
	`°ªº‹
(
î∫o
));

312  
VR_ERROR
;

314 
nci
->
pidfûe
 = 1;

316 
pid_Àn
 = 
	`d¢¥ötf
(
pid
, 
VR_UINTMAX_MAXLEN
, "%d", 
nci
->pid);

318 
n
 = 
	`vr_wrôe
(
fd
, 
pid
, 
pid_Àn
);

319 i‡(
n
 < 0) {

320 
	`log_îr‹
("wrôêtÿpid fûê'%s' faûed: %s", 
nci
->
pid_fûíame
,

321 
	`°ªº‹
(
î∫o
));

322  
VR_ERROR
;

325 
	`˛o£
(
fd
);

327  
VR_OK
;

328 
	}
}

332 
	$vr_ªmove_pidfûe
(
ö°™˚
 *
nci
)

334 
°©us
;

336 
°©us
 = 
	`u∆ök
(
nci
->
pid_fûíame
);

337 i‡(
°©us
 < 0) {

338 
	`log_îr‹
("unlink ofÖid file '%s' failed, ignored: %s",

339 
nci
->
pid_fûíame
, 
	`°ªº‹
(
î∫o
));

341 
	}
}

344 
	$vr_£t_deÁu…_›ti⁄s
(
ö°™˚
 *
nci
)

347 
°©us
;

349 
nci
->
log_Àvñ
 = 
VR_LOG_DEFAULT
;

350 
nci
->
log_fûíame
 = 
VR_LOG_PATH
;

352 
nci
->
c⁄f_fûíame
 = 
VR_CONF_PATH
;

355 
°©us
 = 
	`vr_gëho°«me
(
nci
->
ho°«me
, 
VR_MAXHOSTNAMELEN
);

356 i‡(
°©us
 < 0) {

357 
	`log_w¨n
("gëho°«mêÁûed, ign‹ed: %s", 
	`°ªº‹
(
î∫o
));

358 
	`d¢¥ötf
(
nci
->
ho°«me
, 
VR_MAXHOSTNAMELEN
, "unknown");

360 
nci
->
ho°«me
[
VR_MAXHOSTNAMELEN
 - 1] = '\0';

362 
nci
->
pid
 = (
pid_t
)-1;

363 
nci
->
pid_fûíame
 = 
NULL
;

364 
nci
->
pidfûe
 = 0;

366 
nci
->
thªad_num
 = ()
VR_THREAD_NUM_DEFAULT
;

367 
	}
}

369 
r°©us_t


370 
	$vr_gë_›ti⁄s
(
¨gc
, **
¨gv
, 
ö°™˚
 *
nci
)

372 
c
, 
vÆue
;

374 
›ãº
 = 0;

378 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

379 i‡(
c
 == -1) {

384 
c
) {

386 
show_vîsi⁄
 = 1;

387 
show_hñp
 = 1;

391 
show_vîsi⁄
 = 1;

395 
ã°_c⁄f
 = 1;

399 
d´m⁄ize
 = 1;

403 
vÆue
 = 
	`vr_©oi
(
›èrg
, 
	`°æí
(optarg));

404 i‡(
vÆue
 < 0) {

405 
	`log_°dîr
("vire: option -vÑequiresáÇumber");

406  
VR_ERROR
;

408 
nci
->
log_Àvñ
 = 
vÆue
;

412 
nci
->
log_fûíame
 = 
›èrg
;

416 
nci
->
c⁄f_fûíame
 = 
›èrg
;

420 
nci
->
pid_fûíame
 = 
›èrg
;

424 
vÆue
 = 
	`vr_©oi
(
›èrg
, 
	`°æí
(optarg));

425 i‡(
vÆue
 < 0) {

426 
	`log_°dîr
("vire: option -TÑequiresáÇumber");

427  
VR_ERROR
;

430 
nci
->
thªad_num
 = 
vÆue
;

434 
›t›t
) {

438 
	`log_°dîr
("vire: option -%cÑequiresá fileÇame",

439 
›t›t
);

444 
	`log_°dîr
("vúe: o±i⁄ -%¯ªquúe†®numbî", 
›t›t
);

448 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

451  
VR_ERROR
;

454 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

455  
VR_ERROR
;

460  
VR_OK
;

461 
	}
}

468 
boﬁ


469 
	$vr_ã°_c⁄f
(
ö°™˚
 *
nci
, 
ã°
)

471 
vr_c⁄f
 *
cf
;

473 
cf
 = 
	`c⁄f_¸óã
(
nci
->
c⁄f_fûíame
);

475 i‡(
cf
 =
NULL
) {

476 i‡(
ã°
)

477 
	`log_°dîr
("vire: configuration file '%s' syntax is invalid",

478 
nci
->
c⁄f_fûíame
);

479  
Ál£
;

482 
	`c⁄f_de°roy
(
cf
);

484 i‡(
ã°
)

485 
	`log_°dîr
("vire: configuration file '%s' syntax is ok",

486 
nci
->
c⁄f_fûíame
);

487  
åue
;

488 
	}
}

492 
	$vr_¥e_run
(
ö°™˚
 *
nci
)

494 
ªt
;

496 
ªt
 = 
	`log_öô
(
nci
->
log_Àvñ
,Çci->
log_fûíame
);

497 i‡(
ªt
 !
VR_OK
) {

498  
ªt
;

501 
	`log_debug
(
LOG_VERB
, "Vúêu£dÜogfûe: %s", 
nci
->
c⁄f_fûíame
);

503 i‡(!
	`vr_ã°_c⁄f
(
nci
, 
Ál£
)) {

504 
	`log_îr‹
("c⁄‡fûê%†i†îr‹", 
nci
->
c⁄f_fûíame
);

505  
VR_ERROR
;

508 i‡(
d´m⁄ize
) {

509 
ªt
 = 
	`vr_d´m⁄ize
(1);

510 i‡(
ªt
 !
VR_OK
) {

511  
ªt
;

515 
nci
->
pid
 = 
	`gëpid
();

517 
ªt
 = 
	`sig«l_öô
();

518 i‡(
ªt
 !
VR_OK
) {

519  
ªt
;

522 i‡(
nci
->
pid_fûíame
) {

523 
ªt
 = 
	`vr_¸óã_pidfûe
(
nci
);

524 i‡(
ªt
 !
VR_OK
) {

525  
VR_ERROR
;

529 
ªt
 = 
	`öô_£rvî
(
nci
);

530 i‡(
ªt
 !
VR_OK
) {

531  
VR_ERROR
;

534 
	`vr_¥öt_run
(
nci
);

536  
VR_OK
;

537 
	}
}

540 
	$vr_po°_run
(
ö°™˚
 *
nci
)

544 
	`w‹kîs_deöô
();

546 
	`backíds_deöô
();

548 
	`ma°î_deöô
();

550 i‡(
nci
->
pidfûe
) {

551 
	`vr_ªmove_pidfûe
(
nci
);

554 
	`sig«l_deöô
();

556 
	`vr_¥öt_d⁄e
();

558 
	`log_deöô
();

559 
	}
}

563 
	$vr_run
(
ö°™˚
 *
nci
)

566 i‡(
nci
->
thªad_num
 <= 0) {

567 
	`log_îr‹
("number of workÅhreads must be greaterÅhan 0");

569 } i‡(
nci
->
thªad_num
 > 64) {

570 
	`log_w¨n
("WARNING: Settingá highÇumber of workerÅhreads isÇotÑecommended."

576 
	`ma°î_run
();

578 
	`w‹kîs_run
();

580 
	`backíds_run
();

584 
	`w‹kîs_waô
();

586 
	`backíds_waô
();

587 
	}
}

591 
	$maö
(
¨gc
, **
¨gv
)

593 
r°©us_t
 
°©us
;

594 
ö°™˚
 
nci
;

596 
	`vr_£t_deÁu…_›ti⁄s
(&
nci
);

598 
°©us
 = 
	`vr_gë_›ti⁄s
(
¨gc
, 
¨gv
, &
nci
);

599 i‡(
°©us
 !
VR_OK
) {

601 
	`vr_show_ußge
();

602 
	`exô
(1);

605 i‡(
show_vîsi⁄
) {

606 
	`log_°dîr
("Thi†i†vúe-%s" 
CRLF
, 
VR_VERSION_STRING
);

607 i‡(
show_hñp
) {

608 
	`vr_show_ußge
();

610 
	`exô
(0);

613 i‡(
ã°_c⁄f
) {

614 i‡(!
	`vr_ã°_c⁄f
(&
nci
, 
åue
)) {

615 
	`exô
(1);

617 
	`exô
(0);

620 
°©us
 = 
	`vr_¥e_run
(&
nci
);

621 i‡(
°©us
 !
VR_OK
) {

622 
	`vr_po°_run
(&
nci
);

623 
	`exô
(1);

627 
£rvî
.
execuèbÀ
 = 
	`gëAbsﬁuãP©h
(
¨gv
[0]);

629 
	`vr_run
(&
nci
);

631 
	`vr_po°_run
(&
nci
);

633  
VR_OK
;

634 
	}
}

	@src/vr_aof.c

1 
	~<vr_c‹e.h
>

4 
	$aofRewrôeBuf„rSize
() {

5 
dli°Node
 *
 
;

6 
dli°Iãr
 
li
;

7 
size
 = 0;

9 
	`dli°Rewöd
(
£rvî
.
aof_ªwrôe_buf_blocks
,&
li
);

10 (
 
 = 
	`dli°Next
(&
li
))) {

11 
ao‰wblock
 *
block
 = 
	`dli°NodeVÆue
(
 
);

12 
size
 +
block
->
u£d
;

14  
size
;

15 
	}
}

24 
sds
 
	$ˇtAµídO∆yExpúeAtComm™d
(
sds
 
buf
, 
ªdisComm™d
 *
cmd
, 
robj
 *
key
,Ñobj *
£c⁄ds
) {

25 
whí
;

26 
robj
 *
¨gv
[3];

29 
£c⁄ds
 = 
	`gëDecodedObje˘
(seconds);

30 
whí
 = 
	`°πﬁl
(
£c⁄ds
->
±r
,
NULL
,10);

32 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
£ãxComm™d
 ||

33 
cmd
->
¥oc
 =
expúótComm™d
)

35 
whí
 *= 1000;

38 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
≥xpúeComm™d
 ||

39 
cmd
->
¥oc
 =
£ãxComm™d
 || cmd->¥o¯=
p£ãxComm™d
)

41 
whí
 +
	`vr_m£c_now
();

43 
	`de¸RefCou¡
(
£c⁄ds
);

45 
¨gv
[0] = 
	`¸óãSåögObje˘
("PEXPIREAT",9);

46 
¨gv
[1] = 
key
;

47 
¨gv
[2] = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
whí
);

48 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf, 3, 
¨gv
);

49 
	`de¸RefCou¡
(
¨gv
[0]);

50 
	`de¸RefCou¡
(
¨gv
[2]);

51  
buf
;

52 
	}
}

54 
sds
 
	$ˇtAµídO∆yGíîicComm™d
(
sds
 
d°
, 
¨gc
, 
robj
 **
¨gv
) {

55 
buf
[32];

56 
Àn
, 
j
;

57 
robj
 *
o
;

59 
buf
[0] = '*';

60 
Àn
 = 1+
	`Œ2°rög
(
buf
+1,(buf)-1,
¨gc
);

61 
buf
[
Àn
++] = '\r';

62 
buf
[
Àn
++] = '\n';

63 
d°
 = 
	`sdsˇéí
(d°,
buf
,
Àn
);

65 
j
 = 0; j < 
¨gc
; j++) {

66 
o
 = 
	`gëDecodedObje˘
(
¨gv
[
j
]);

67 
buf
[0] = '$';

68 
Àn
 = 1+
	`Œ2°rög
(
buf
+1,(buf)-1,
	`sd¶í
(
o
->
±r
));

69 
buf
[
Àn
++] = '\r';

70 
buf
[
Àn
++] = '\n';

71 
d°
 = 
	`sdsˇéí
(d°,
buf
,
Àn
);

72 
d°
 = 
	`sdsˇéí
(d°,
o
->
±r
,
	`sd¶í
(o->ptr));

73 
d°
 = 
	`sdsˇéí
(dst,"\r\n",2);

74 
	`de¸RefCou¡
(
o
);

76  
d°
;

77 
	}
}

82 
	$aofChûdWrôeDiffD©a
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

83 
dli°Node
 *
 
;

84 
ao‰wblock
 *
block
;

85 
ssize_t
 
nwrôãn
;

86 
	`UNUSED
(
ñ
);

87 
	`UNUSED
(
fd
);

88 
	`UNUSED
(
¥ivd©a
);

89 
	`UNUSED
(
mask
);

92 
 
 = 
	`dli°Fú°
(
£rvî
.
aof_ªwrôe_buf_blocks
);

93 
block
 = 
 
 ?Ün->
vÆue
 : 
NULL
;

94 i‡(
£rvî
.
aof_°›_£ndög_diff
 || !
block
) {

95 
	`´DñëeFûeEvít
(
£rvî
.
ñ
,£rvî.
aof_pùe_wrôe_d©a_to_chûd
,

96 
AE_WRITABLE
);

99 i‡(
block
->
u£d
 > 0) {

100 
nwrôãn
 = 
	`vr_wrôe
(
£rvî
.
aof_pùe_wrôe_d©a_to_chûd
,

101 
block
->
buf
,block->
u£d
);

102 i‡(
nwrôãn
 <= 0) ;

103 
	`memmove
(
block
->
buf
,block->buf+
nwrôãn
,block->
u£d
-nwritten);

104 
block
->
u£d
 -
nwrôãn
;

106 i‡(
block
->
u£d
 =0Ë
	`dli°DñNode
(
£rvî
.
aof_ªwrôe_buf_blocks
,
 
);

108 
	}
}

111 
	$aofRewrôeBuf„rAµíd
(*
s
, 
Àn
) {

112 
dli°Node
 *
 
 = 
	`dli°La°
(
£rvî
.
aof_ªwrôe_buf_blocks
);

113 
ao‰wblock
 *
block
 = 
 
 ?Ün->
vÆue
 : 
NULL
;

115 
Àn
) {

118 i‡(
block
) {

119 
thi¶í
 = (
block
->
‰ì
 < 
Àn
) ? block->free :Üen;

120 i‡(
thi¶í
) {

121 
	`mem˝y
(
block
->
buf
+block->
u£d
, 
s
, 
thi¶í
);

122 
block
->
u£d
 +
thi¶í
;

123 
block
->
‰ì
 -
thi¶í
;

124 
s
 +
thi¶í
;

125 
Àn
 -
thi¶í
;

129 i‡(
Àn
) {

130 
numblocks
;

132 
block
 = 
	`dÆloc
((*block));

133 
block
->
‰ì
 = 
AOF_RW_BUF_BLOCK_SIZE
;

134 
block
->
u£d
 = 0;

135 
	`dli°AddNodeTaû
(
£rvî
.
aof_ªwrôe_buf_blocks
,
block
);

139 
numblocks
 = 
	`dli°Lígth
(
£rvî
.
aof_ªwrôe_buf_blocks
);

140 i‡(((
numblocks
+1) % 10) == 0) {

141 
Àvñ
 = ((
numblocks
+1Ë% 100Ë=0 ? 
LOG_WARN
 :

142 
LOG_NOTICE
;

143 
	`log_debug
(
Àvñ
, "Background AOF buffer size: %lu MB",

144 
	`aofRewrôeBuf„rSize
()/(1024*1024));

151 i‡(
	`´GëFûeEvíts
(
£rvî
.
ñ
,£rvî.
aof_pùe_wrôe_d©a_to_chûd
) == 0) {

152 
	`´Cª©eFûeEvít
(
£rvî
.
ñ
, sîvî.
aof_pùe_wrôe_d©a_to_chûd
,

153 
AE_WRITABLE
, 
aofChûdWrôeDiffD©a
, 
NULL
);

155 
	}
}

157 
	$„edAµídO∆yFûe
(
ªdisComm™d
 *
cmd
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

158 
sds
 
buf
 = 
	`sd£m±y
();

159 
robj
 *
tm∑rgv
[3];

163 i‡(
di˘id
 !
£rvî
.
aof_£À˘ed_db
) {

164 
£ldb
[64];

166 
	`¢¥ötf
(
£ldb
,(£ldb),"%d",
di˘id
);

167 
buf
 = 
	`sdsˇçrötf
(buf,"*2\r\n$6\r\nSELECT\r\n$%lu\r\n%s\r\n",

168 ()
	`°æí
(
£ldb
),seldb);

169 
£rvî
.
aof_£À˘ed_db
 = 
di˘id
;

172 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
≥xpúeComm™d
 ||

173 
cmd
->
¥oc
 =
expúótComm™d
) {

175 
buf
 = 
	`ˇtAµídO∆yExpúeAtComm™d
(buf,
cmd
,
¨gv
[1],argv[2]);

176 } i‡(
cmd
->
¥oc
 =
£ãxComm™d
 || cmd->¥o¯=
p£ãxComm™d
) {

178 
tm∑rgv
[0] = 
	`¸óãSåögObje˘
("SET",3);

179 
tm∑rgv
[1] = 
¨gv
[1];

180 
tm∑rgv
[2] = 
¨gv
[3];

181 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf,3,
tm∑rgv
);

182 
	`de¸RefCou¡
(
tm∑rgv
[0]);

183 
buf
 = 
	`ˇtAµídO∆yExpúeAtComm™d
(buf,
cmd
,
¨gv
[1],argv[2]);

188 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf,
¨gc
,
¨gv
);

194 i‡(
£rvî
.
aof_°©e
 =
AOF_ON
)

195 
£rvî
.
aof_buf
 = 
	`sdsˇéí
(£rvî.aof_buf,
buf
,
	`sd¶í
(buf));

201 i‡(
£rvî
.
aof_chûd_pid
 != -1)

202 
	`aofRewrôeBuf„rAµíd
((*)
buf
,
	`sd¶í
(buf));

204 
	`sds‰ì
(
buf
);

205 
	}
}

	@src/vr_aof.c

1 
	~<vr_c‹e.h
>

4 
	$aofRewrôeBuf„rSize
() {

5 
dli°Node
 *
 
;

6 
dli°Iãr
 
li
;

7 
size
 = 0;

9 
	`dli°Rewöd
(
£rvî
.
aof_ªwrôe_buf_blocks
,&
li
);

10 (
 
 = 
	`dli°Next
(&
li
))) {

11 
ao‰wblock
 *
block
 = 
	`dli°NodeVÆue
(
 
);

12 
size
 +
block
->
u£d
;

14  
size
;

15 
	}
}

24 
sds
 
	$ˇtAµídO∆yExpúeAtComm™d
(
sds
 
buf
, 
ªdisComm™d
 *
cmd
, 
robj
 *
key
,Ñobj *
£c⁄ds
) {

25 
whí
;

26 
robj
 *
¨gv
[3];

29 
£c⁄ds
 = 
	`gëDecodedObje˘
(seconds);

30 
whí
 = 
	`°πﬁl
(
£c⁄ds
->
±r
,
NULL
,10);

32 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
£ãxComm™d
 ||

33 
cmd
->
¥oc
 =
expúótComm™d
)

35 
whí
 *= 1000;

38 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
≥xpúeComm™d
 ||

39 
cmd
->
¥oc
 =
£ãxComm™d
 || cmd->¥o¯=
p£ãxComm™d
)

41 
whí
 +
	`vr_m£c_now
();

43 
	`de¸RefCou¡
(
£c⁄ds
);

45 
¨gv
[0] = 
	`¸óãSåögObje˘
("PEXPIREAT",9);

46 
¨gv
[1] = 
key
;

47 
¨gv
[2] = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
whí
);

48 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf, 3, 
¨gv
);

49 
	`de¸RefCou¡
(
¨gv
[0]);

50 
	`de¸RefCou¡
(
¨gv
[2]);

51  
buf
;

52 
	}
}

54 
sds
 
	$ˇtAµídO∆yGíîicComm™d
(
sds
 
d°
, 
¨gc
, 
robj
 **
¨gv
) {

55 
buf
[32];

56 
Àn
, 
j
;

57 
robj
 *
o
;

59 
buf
[0] = '*';

60 
Àn
 = 1+
	`Œ2°rög
(
buf
+1,(buf)-1,
¨gc
);

61 
buf
[
Àn
++] = '\r';

62 
buf
[
Àn
++] = '\n';

63 
d°
 = 
	`sdsˇéí
(d°,
buf
,
Àn
);

65 
j
 = 0; j < 
¨gc
; j++) {

66 
o
 = 
	`gëDecodedObje˘
(
¨gv
[
j
]);

67 
buf
[0] = '$';

68 
Àn
 = 1+
	`Œ2°rög
(
buf
+1,(buf)-1,
	`sd¶í
(
o
->
±r
));

69 
buf
[
Àn
++] = '\r';

70 
buf
[
Àn
++] = '\n';

71 
d°
 = 
	`sdsˇéí
(d°,
buf
,
Àn
);

72 
d°
 = 
	`sdsˇéí
(d°,
o
->
±r
,
	`sd¶í
(o->ptr));

73 
d°
 = 
	`sdsˇéí
(dst,"\r\n",2);

74 
	`de¸RefCou¡
(
o
);

76  
d°
;

77 
	}
}

82 
	$aofChûdWrôeDiffD©a
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

83 
dli°Node
 *
 
;

84 
ao‰wblock
 *
block
;

85 
ssize_t
 
nwrôãn
;

86 
	`UNUSED
(
ñ
);

87 
	`UNUSED
(
fd
);

88 
	`UNUSED
(
¥ivd©a
);

89 
	`UNUSED
(
mask
);

92 
 
 = 
	`dli°Fú°
(
£rvî
.
aof_ªwrôe_buf_blocks
);

93 
block
 = 
 
 ?Ün->
vÆue
 : 
NULL
;

94 i‡(
£rvî
.
aof_°›_£ndög_diff
 || !
block
) {

95 
	`´DñëeFûeEvít
(
£rvî
.
ñ
,£rvî.
aof_pùe_wrôe_d©a_to_chûd
,

96 
AE_WRITABLE
);

99 i‡(
block
->
u£d
 > 0) {

100 
nwrôãn
 = 
	`vr_wrôe
(
£rvî
.
aof_pùe_wrôe_d©a_to_chûd
,

101 
block
->
buf
,block->
u£d
);

102 i‡(
nwrôãn
 <= 0) ;

103 
	`memmove
(
block
->
buf
,block->buf+
nwrôãn
,block->
u£d
-nwritten);

104 
block
->
u£d
 -
nwrôãn
;

106 i‡(
block
->
u£d
 =0Ë
	`dli°DñNode
(
£rvî
.
aof_ªwrôe_buf_blocks
,
 
);

108 
	}
}

111 
	$aofRewrôeBuf„rAµíd
(*
s
, 
Àn
) {

112 
dli°Node
 *
 
 = 
	`dli°La°
(
£rvî
.
aof_ªwrôe_buf_blocks
);

113 
ao‰wblock
 *
block
 = 
 
 ?Ün->
vÆue
 : 
NULL
;

115 
Àn
) {

118 i‡(
block
) {

119 
thi¶í
 = (
block
->
‰ì
 < 
Àn
) ? block->free :Üen;

120 i‡(
thi¶í
) {

121 
	`mem˝y
(
block
->
buf
+block->
u£d
, 
s
, 
thi¶í
);

122 
block
->
u£d
 +
thi¶í
;

123 
block
->
‰ì
 -
thi¶í
;

124 
s
 +
thi¶í
;

125 
Àn
 -
thi¶í
;

129 i‡(
Àn
) {

130 
numblocks
;

132 
block
 = 
	`dÆloc
((*block));

133 
block
->
‰ì
 = 
AOF_RW_BUF_BLOCK_SIZE
;

134 
block
->
u£d
 = 0;

135 
	`dli°AddNodeTaû
(
£rvî
.
aof_ªwrôe_buf_blocks
,
block
);

139 
numblocks
 = 
	`dli°Lígth
(
£rvî
.
aof_ªwrôe_buf_blocks
);

140 i‡(((
numblocks
+1) % 10) == 0) {

141 
Àvñ
 = ((
numblocks
+1Ë% 100Ë=0 ? 
LOG_WARN
 :

142 
LOG_NOTICE
;

143 
	`log_debug
(
Àvñ
, "Background AOF buffer size: %lu MB",

144 
	`aofRewrôeBuf„rSize
()/(1024*1024));

151 i‡(
	`´GëFûeEvíts
(
£rvî
.
ñ
,£rvî.
aof_pùe_wrôe_d©a_to_chûd
) == 0) {

152 
	`´Cª©eFûeEvít
(
£rvî
.
ñ
, sîvî.
aof_pùe_wrôe_d©a_to_chûd
,

153 
AE_WRITABLE
, 
aofChûdWrôeDiffD©a
, 
NULL
);

155 
	}
}

157 
	$„edAµídO∆yFûe
(
ªdisComm™d
 *
cmd
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

158 
sds
 
buf
 = 
	`sd£m±y
();

159 
robj
 *
tm∑rgv
[3];

163 i‡(
di˘id
 !
£rvî
.
aof_£À˘ed_db
) {

164 
£ldb
[64];

166 
	`¢¥ötf
(
£ldb
,(£ldb),"%d",
di˘id
);

167 
buf
 = 
	`sdsˇçrötf
(buf,"*2\r\n$6\r\nSELECT\r\n$%lu\r\n%s\r\n",

168 ()
	`°æí
(
£ldb
),seldb);

169 
£rvî
.
aof_£À˘ed_db
 = 
di˘id
;

172 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
≥xpúeComm™d
 ||

173 
cmd
->
¥oc
 =
expúótComm™d
) {

175 
buf
 = 
	`ˇtAµídO∆yExpúeAtComm™d
(buf,
cmd
,
¨gv
[1],argv[2]);

176 } i‡(
cmd
->
¥oc
 =
£ãxComm™d
 || cmd->¥o¯=
p£ãxComm™d
) {

178 
tm∑rgv
[0] = 
	`¸óãSåögObje˘
("SET",3);

179 
tm∑rgv
[1] = 
¨gv
[1];

180 
tm∑rgv
[2] = 
¨gv
[3];

181 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf,3,
tm∑rgv
);

182 
	`de¸RefCou¡
(
tm∑rgv
[0]);

183 
buf
 = 
	`ˇtAµídO∆yExpúeAtComm™d
(buf,
cmd
,
¨gv
[1],argv[2]);

188 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf,
¨gc
,
¨gv
);

194 i‡(
£rvî
.
aof_°©e
 =
AOF_ON
)

195 
£rvî
.
aof_buf
 = 
	`sdsˇéí
(£rvî.aof_buf,
buf
,
	`sd¶í
(buf));

201 i‡(
£rvî
.
aof_chûd_pid
 != -1)

202 
	`aofRewrôeBuf„rAµíd
((*)
buf
,
	`sd¶í
(buf));

204 
	`sds‰ì
(
buf
);

205 
	}
}

	@src/vr_aof.h

1 #i‚de‡
_VR_AOF_H_


2 
	#_VR_AOF_H_


	)

5 
	#AOF_OFF
 0

	)

6 
	#AOF_ON
 1

	)

7 
	#AOF_WAIT_REWRITE
 2

	)

9 
	#AOF_AUTOSYNC_BYTES
 (1024*1024*32Ë

	)

25 
	#AOF_RW_BUF_BLOCK_SIZE
 (1024*1024*10Ë

	)

27 
	sao‰wblock
 {

28 
	mu£d
, 
	m‰ì
;

29 
	mbuf
[
AOF_RW_BUF_BLOCK_SIZE
];

30 } 
	tao‰wblock
;

32 
aofRewrôeBuf„rSize
();

33 
aofChûdWrôeDiffD©a
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

34 
sds
 
ˇtAµídO∆yExpúeAtComm™d
(sd†
buf
, 
ªdisComm™d
 *
cmd
, 
robj
 *
key
,Ñobj *
£c⁄ds
);

35 
sds
 
ˇtAµídO∆yGíîicComm™d
(sd†
d°
, 
¨gc
, 
robj
 **
¨gv
);

36 
aofRewrôeBuf„rAµíd
(*
s
, 
Àn
);

37 
„edAµídO∆yFûe
(
ªdisComm™d
 *
cmd
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

	@src/vr_aof.h

1 #i‚de‡
_VR_AOF_H_


2 
	#_VR_AOF_H_


	)

5 
	#AOF_OFF
 0

	)

6 
	#AOF_ON
 1

	)

7 
	#AOF_WAIT_REWRITE
 2

	)

9 
	#AOF_AUTOSYNC_BYTES
 (1024*1024*32Ë

	)

25 
	#AOF_RW_BUF_BLOCK_SIZE
 (1024*1024*10Ë

	)

27 
	sao‰wblock
 {

28 
	mu£d
, 
	m‰ì
;

29 
	mbuf
[
AOF_RW_BUF_BLOCK_SIZE
];

30 } 
	tao‰wblock
;

32 
aofRewrôeBuf„rSize
();

33 
aofChûdWrôeDiffD©a
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

34 
sds
 
ˇtAµídO∆yExpúeAtComm™d
(sd†
buf
, 
ªdisComm™d
 *
cmd
, 
robj
 *
key
,Ñobj *
£c⁄ds
);

35 
sds
 
ˇtAµídO∆yGíîicComm™d
(sd†
d°
, 
¨gc
, 
robj
 **
¨gv
);

36 
aofRewrôeBuf„rAµíd
(*
s
, 
Àn
);

37 
„edAµídO∆yFûe
(
ªdisComm™d
 *
cmd
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

	@src/vr_backend.c

1 
	~<vr_c‹e.h
>

4 
	gnum_backíd_thªads
;

6 
d¨øy
 
	gbackíds
;

8 *
backíd_thªad_run
(*
¨gs
);

11 
	$vr_backíd_öô
(
vr_backíd
 *
backíd
)

13 
r°©us_t
 
°©us
;

14 
thªads_num
;

16 i‡(
backíd
 =
NULL
) {

17  
VR_ERROR
;

20 
backíd
->
id
 = 0;

21 
backíd
->
cuºít_db
 = 0;

22 
backíd
->
timñimô_exô
 = 0;

23 
backíd
->
œ°_Á°_cy˛e
 = 0;

24 
backíd
->
ªsize_db
 = 0;

25 
backíd
->
ªhash_db
 = 0;

28 
	`vr_evíéo›_öô
(&
backíd
->
vñ
, 10);

29 
backíd
->
vñ
.
thªad
.
fun_run
 = 
backíd_thªad_run
;

30 
backíd
->
vñ
.
thªad
.
d©a
 = backend;

32  
VR_OK
;

33 
	}
}

36 
	$vr_backíd_deöô
(
vr_backíd
 *
backíd
)

38 i‡(
backíd
 =
NULL
) {

42 
	`vr_evíéo›_deöô
(&
backíd
->
vñ
);

43 
	}
}

46 
	$backíd_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

48 
vr_w‹kî
 *
backíd
 = 
˛õ¡D©a
;

50 
vr_evíéo›
 *
vñ
 = &
backíd
->vel;

51 
size_t
 
°©_u£d_mem‹y
, 
°©s_≥ak_mem‹y
;

53 
	`UNUSED
(
evítLo›
);

54 
	`UNUSED
(
id
);

55 
	`UNUSED
(
˛õ¡D©a
);

57 
	`ASSERT
(
evítLo›
 =
vñ
->
ñ
);

59 
vñ
->
unixtime
 = 
	`time
(
NULL
);

60 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

63 
°©_u£d_mem‹y
 = 
	`dÆloc_u£d_mem‹y
();

64 
	`upd©e_°©s_gë
(
vñ
->
°©s
, 
≥ak_mem‹y
, &
°©s_≥ak_mem‹y
);

65 i‡(
°©_u£d_mem‹y
 > 
°©s_≥ak_mem‹y
) {

66 
	`upd©e_°©s_£t
(
vñ
->
°©s
, 
≥ak_mem‹y
, 
°©_u£d_mem‹y
);

69 
	`d©aba£sCr⁄
(
backíd
);

72 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

73 
	`c⁄f_ˇche_upd©e
(&
vñ
->
cc
);

76 
vñ
->
¸⁄lo›s
 ++;

77  1000/
vñ
->
hz
;

78 
	}
}

81 
	$£tup_backíd
(
vr_backíd
 *
backíd
)

85 if(
	`´Cª©eTimeEvít
(
backíd
->
vñ
.
ñ
, 1, 
backíd_¸⁄
, backíd, 
NULL
Ë=
AE_ERR
) {

86 
	`£rvîP™ic
("Can't createÅhe serverCronÅimeÉvent.");

87  
VR_ERROR
;

90  
VR_OK
;

91 
	}
}

94 
	$backíd_thªad_run
(*
¨gs
)

96 
vr_w‹kî
 *
backíd
 = 
¨gs
;

99 
	`´Maö
(
backíd
->
vñ
.
ñ
);

101  
NULL
;

102 
	}
}

105 
	$backíds_öô
(
uöt32_t
 
backíd_cou¡
)

107 
r°©us_t
 
°©us
;

108 
uöt32_t
 
idx
;

109 
vr_backíd
 *
backíd
;

111 
	`d¨øy_öô
(&
backíds
, 
backíd_cou¡
, (
vr_backíd
));

113 
idx
 = 0; idx < 
backíd_cou¡
; idx ++) {

114 
backíd
 = 
	`d¨øy_push
(&
backíds
);

115 
	`vr_backíd_öô
(
backíd
);

116 
backíd
->
id
 = 
idx
;

117 
°©us
 = 
	`£tup_backíd
(
backíd
);

118 i‡(
°©us
 !
VR_OK
) {

119 
	`exô
(1);

123 
num_backíd_thªads
 = ()
	`d¨øy_n
(&
backíds
);

125  
VR_OK
;

126 
	}
}

129 
	$backíds_run
()

131 
uöt32_t
 
i
, 
thªad_cou¡
;

132 
vr_backíd
 *
backíd
;

134 
thªad_cou¡
 = (
uöt32_t
)
num_backíd_thªads
;

136 
i
 = 0; i < 
thªad_cou¡
; i ++) {

137 
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
i
);

138 
	`vr_thªad_°¨t
(&
backíd
->
vñ
.
thªad
);

141  
VR_OK
;

142 
	}
}

145 
	$backíds_waô
()

147 
uöt32_t
 
i
, 
thªad_cou¡
;

148 
vr_backíd
 *
backíd
;

150 
thªad_cou¡
 = (
uöt32_t
)
num_backíd_thªads
;

152 
i
 = 0; i < 
thªad_cou¡
; i ++) {

153 
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
i
);

154 
	`±hªad_joö
(
backíd
->
vñ
.
thªad
.
thªad_id
, 
NULL
);

157  
VR_OK
;

158 
	}
}

161 
	$backíds_deöô
()

163 
vr_backíd
 *
backíd
;

165 
	`d¨øy_n
(&
backíds
)) {

166 
backíd
 = 
	`d¨øy_p›
(&
backíds
);

167 
	`vr_backíd_deöô
(
backíd
);

169 
	}
}

	@src/vr_backend.c

1 
	~<vr_c‹e.h
>

4 
	gnum_backíd_thªads
;

6 
d¨øy
 
	gbackíds
;

8 *
backíd_thªad_run
(*
¨gs
);

11 
	$vr_backíd_öô
(
vr_backíd
 *
backíd
)

13 
r°©us_t
 
°©us
;

14 
thªads_num
;

16 i‡(
backíd
 =
NULL
) {

17  
VR_ERROR
;

20 
backíd
->
id
 = 0;

21 
backíd
->
cuºít_db
 = 0;

22 
backíd
->
timñimô_exô
 = 0;

23 
backíd
->
œ°_Á°_cy˛e
 = 0;

24 
backíd
->
ªsize_db
 = 0;

25 
backíd
->
ªhash_db
 = 0;

28 
	`vr_evíéo›_öô
(&
backíd
->
vñ
, 10);

29 
backíd
->
vñ
.
thªad
.
fun_run
 = 
backíd_thªad_run
;

30 
backíd
->
vñ
.
thªad
.
d©a
 = backend;

32  
VR_OK
;

33 
	}
}

36 
	$vr_backíd_deöô
(
vr_backíd
 *
backíd
)

38 i‡(
backíd
 =
NULL
) {

42 
	`vr_evíéo›_deöô
(&
backíd
->
vñ
);

43 
	}
}

46 
	$backíd_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

48 
vr_w‹kî
 *
backíd
 = 
˛õ¡D©a
;

50 
vr_evíéo›
 *
vñ
 = &
backíd
->vel;

51 
size_t
 
°©_u£d_mem‹y
, 
°©s_≥ak_mem‹y
;

53 
	`UNUSED
(
evítLo›
);

54 
	`UNUSED
(
id
);

55 
	`UNUSED
(
˛õ¡D©a
);

57 
	`ASSERT
(
evítLo›
 =
vñ
->
ñ
);

59 
vñ
->
unixtime
 = 
	`time
(
NULL
);

60 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

63 
°©_u£d_mem‹y
 = 
	`dÆloc_u£d_mem‹y
();

64 
	`upd©e_°©s_gë
(
vñ
->
°©s
, 
≥ak_mem‹y
, &
°©s_≥ak_mem‹y
);

65 i‡(
°©_u£d_mem‹y
 > 
°©s_≥ak_mem‹y
) {

66 
	`upd©e_°©s_£t
(
vñ
->
°©s
, 
≥ak_mem‹y
, 
°©_u£d_mem‹y
);

69 
	`d©aba£sCr⁄
(
backíd
);

72 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

73 
	`c⁄f_ˇche_upd©e
(&
vñ
->
cc
);

76 
vñ
->
¸⁄lo›s
 ++;

77  1000/
vñ
->
hz
;

78 
	}
}

81 
	$£tup_backíd
(
vr_backíd
 *
backíd
)

85 if(
	`´Cª©eTimeEvít
(
backíd
->
vñ
.
ñ
, 1, 
backíd_¸⁄
, backíd, 
NULL
Ë=
AE_ERR
) {

86 
	`£rvîP™ic
("Can't createÅhe serverCronÅimeÉvent.");

87  
VR_ERROR
;

90  
VR_OK
;

91 
	}
}

94 
	$backíd_thªad_run
(*
¨gs
)

96 
vr_w‹kî
 *
backíd
 = 
¨gs
;

99 
	`´Maö
(
backíd
->
vñ
.
ñ
);

101  
NULL
;

102 
	}
}

105 
	$backíds_öô
(
uöt32_t
 
backíd_cou¡
)

107 
r°©us_t
 
°©us
;

108 
uöt32_t
 
idx
;

109 
vr_backíd
 *
backíd
;

111 
	`d¨øy_öô
(&
backíds
, 
backíd_cou¡
, (
vr_backíd
));

113 
idx
 = 0; idx < 
backíd_cou¡
; idx ++) {

114 
backíd
 = 
	`d¨øy_push
(&
backíds
);

115 
	`vr_backíd_öô
(
backíd
);

116 
backíd
->
id
 = 
idx
;

117 
°©us
 = 
	`£tup_backíd
(
backíd
);

118 i‡(
°©us
 !
VR_OK
) {

119 
	`exô
(1);

123 
num_backíd_thªads
 = ()
	`d¨øy_n
(&
backíds
);

125  
VR_OK
;

126 
	}
}

129 
	$backíds_run
()

131 
uöt32_t
 
i
, 
thªad_cou¡
;

132 
vr_backíd
 *
backíd
;

134 
thªad_cou¡
 = (
uöt32_t
)
num_backíd_thªads
;

136 
i
 = 0; i < 
thªad_cou¡
; i ++) {

137 
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
i
);

138 
	`vr_thªad_°¨t
(&
backíd
->
vñ
.
thªad
);

141  
VR_OK
;

142 
	}
}

145 
	$backíds_waô
()

147 
uöt32_t
 
i
, 
thªad_cou¡
;

148 
vr_backíd
 *
backíd
;

150 
thªad_cou¡
 = (
uöt32_t
)
num_backíd_thªads
;

152 
i
 = 0; i < 
thªad_cou¡
; i ++) {

153 
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
i
);

154 
	`±hªad_joö
(
backíd
->
vñ
.
thªad
.
thªad_id
, 
NULL
);

157  
VR_OK
;

158 
	}
}

161 
	$backíds_deöô
()

163 
vr_backíd
 *
backíd
;

165 
	`d¨øy_n
(&
backíds
)) {

166 
backíd
 = 
	`d¨øy_p›
(&
backíds
);

167 
	`vr_backíd_deöô
(
backíd
);

169 
	}
}

	@src/vr_backend.h

1 #i‚de‡
_VR_BACKEND_H_


2 
	#_VR_BACKEND_H_


	)

4 
	svr_backíd
 {

6 
	mid
;

8 
vr_evíéo›
 
	mvñ
;

13 
	mcuºít_db
;

15 
	mtimñimô_exô
;

16 
	mœ°_Á°_cy˛e
;

21 
	mªsize_db
;

22 
	mªhash_db
;

23 }
	tvr_backíd
;

25 
d¨øy
 
backíds
;

27 
backíds_öô
(
uöt32_t
 
backíd_cou¡
);

28 
backíds_run
();

29 
backíds_waô
();

30 
backíds_deöô
();

	@src/vr_backend.h

1 #i‚de‡
_VR_BACKEND_H_


2 
	#_VR_BACKEND_H_


	)

4 
	svr_backíd
 {

6 
	mid
;

8 
vr_evíéo›
 
	mvñ
;

13 
	mcuºít_db
;

15 
	mtimñimô_exô
;

16 
	mœ°_Á°_cy˛e
;

21 
	mªsize_db
;

22 
	mªhash_db
;

23 }
	tvr_backíd
;

25 
d¨øy
 
backíds
;

27 
backíds_öô
(
uöt32_t
 
backíd_cou¡
);

28 
backíds_run
();

29 
backíds_waô
();

30 
backíds_deöô
();

	@src/vr_bitops.c

1 
	~<vr_c‹e.h
>

10 
size_t
 
	$ªdisP›cou¡
(*
s
, 
cou¡
) {

11 
size_t
 
bôs
 = 0;

12 *
p
 = 
s
;

13 
uöt32_t
 *
p4
;

14 c⁄° 
bôsöbyã
[256] = {0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8};

17 ()
p
 & 3 && 
cou¡
) {

18 
bôs
 +
bôsöbyã
[*
p
++];

19 
cou¡
--;

23 
p4
 = (
uöt32_t
*)
p
;

24 
cou¡
>=28) {

25 
uöt32_t
 
aux1
, 
aux2
, 
aux3
, 
aux4
, 
aux5
, 
aux6
, 
aux7
;

27 
aux1
 = *
p4
++;

28 
aux2
 = *
p4
++;

29 
aux3
 = *
p4
++;

30 
aux4
 = *
p4
++;

31 
aux5
 = *
p4
++;

32 
aux6
 = *
p4
++;

33 
aux7
 = *
p4
++;

34 
cou¡
 -= 28;

36 
aux1
 =áux1 - ((aux1 >> 1) & 0x55555555);

37 
aux1
 = (aux1 & 0x33333333) + ((aux1 >> 2) & 0x33333333);

38 
aux2
 =áux2 - ((aux2 >> 1) & 0x55555555);

39 
aux2
 = (aux2 & 0x33333333) + ((aux2 >> 2) & 0x33333333);

40 
aux3
 =áux3 - ((aux3 >> 1) & 0x55555555);

41 
aux3
 = (aux3 & 0x33333333) + ((aux3 >> 2) & 0x33333333);

42 
aux4
 =áux4 - ((aux4 >> 1) & 0x55555555);

43 
aux4
 = (aux4 & 0x33333333) + ((aux4 >> 2) & 0x33333333);

44 
aux5
 =áux5 - ((aux5 >> 1) & 0x55555555);

45 
aux5
 = (aux5 & 0x33333333) + ((aux5 >> 2) & 0x33333333);

46 
aux6
 =áux6 - ((aux6 >> 1) & 0x55555555);

47 
aux6
 = (aux6 & 0x33333333) + ((aux6 >> 2) & 0x33333333);

48 
aux7
 =áux7 - ((aux7 >> 1) & 0x55555555);

49 
aux7
 = (aux7 & 0x33333333) + ((aux7 >> 2) & 0x33333333);

50 
bôs
 +((((
aux1
 + (aux1 >> 4)) & 0x0F0F0F0F) +

51 ((
aux2
 + (aux2 >> 4)) & 0x0F0F0F0F) +

52 ((
aux3
 + (aux3 >> 4)) & 0x0F0F0F0F) +

53 ((
aux4
 + (aux4 >> 4)) & 0x0F0F0F0F) +

54 ((
aux5
 + (aux5 >> 4)) & 0x0F0F0F0F) +

55 ((
aux6
 + (aux6 >> 4)) & 0x0F0F0F0F) +

56 ((
aux7
 + (aux7 >> 4)) & 0x0F0F0F0F))* 0x01010101) >> 24;

59 
p
 = (*)
p4
;

60 
cou¡
--Ë
bôs
 +
bôsöbyã
[*
p
++];

61  
bôs
;

62 
	}
}

71 
	$ªdisBôpos
(*
s
, 
cou¡
, 
bô
) {

72 *
l
;

73 *
c
;

74 
skùvÆ
, 
w‹d
 = 0, 
⁄e
;

75 
pos
 = 0;

76 
j
;

88 
skùvÆ
 = 
bô
 ? 0 : 
UCHAR_MAX
;

89 
c
 = (*Ë
s
;

90 ()
c
 & ((*
l
)-1Ë&& 
cou¡
) {

91 i‡(*
c
 !
skùvÆ
) ;

92 
c
++;

93 
cou¡
--;

94 
pos
 += 8;

98 
skùvÆ
 = 
bô
 ? 0 : 
ULONG_MAX
;

99 
l
 = (*Ë
c
;

100 
cou¡
 >(*
l
)) {

101 i‡(*
l
 !
skùvÆ
) ;

102 
l
++;

103 
cou¡
 -(*
l
);

104 
pos
 +(*
l
)*8;

114 
c
 = (*)
l
;

115 
j
 = 0; j < (*
l
); j++) {

116 
w‹d
 <<= 8;

117 i‡(
cou¡
) {

118 
w‹d
 |*
c
;

119 
c
++;

120 
cou¡
--;

129 i‡(
bô
 =1 && 
w‹d
 == 0)  -1;

135 
⁄e
 = 
ULONG_MAX
;

136 
⁄e
 >>= 1;

137 
⁄e
 = ~one;

139 
⁄e
) {

140 i‡(((
⁄e
 & 
w‹d
Ë!0Ë=
bô
Ë 
pos
;

141 
pos
++;

142 
⁄e
 >>= 1;

147 
	`£rvîP™ic
("End ofÑedisBitpos()Ñeached.");

149 
	}
}

172 
	$£tUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, uöt64_à
vÆue
) {

173 
uöt64_t
 
byã
, 
bô
, 
byãvÆ
, 
bôvÆ
, 
j
;

175 
j
 = 0; j < 
bôs
; j++) {

176 
bôvÆ
 = (
vÆue
 & ((
uöt64_t
)1<<(
bôs
-1-
j
))) != 0;

177 
byã
 = 
off£t
 >> 3;

178 
bô
 = 7 - (
off£t
 & 0x7);

179 
byãvÆ
 = 
p
[
byã
];

180 
byãvÆ
 &~(1 << 
bô
);

181 
byãvÆ
 |
bôvÆ
 << 
bô
;

182 
p
[
byã
] = 
byãvÆ
 & 0xff;

183 
off£t
++;

185 
	}
}

187 
	$£tSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, 
öt64_t
 
vÆue
) {

188 
uöt64_t
 
uv
;

190 i‡(
vÆue
 >= 0)

191 
uv
 = 
vÆue
;

193 
uv
 = 
UINT64_MAX
 + 
vÆue
 + 1;

194 
	`£tUnsig√dBôfõld
(
p
,
off£t
,
bôs
,
uv
);

195 
	}
}

197 
uöt64_t
 
	$gëUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
) {

198 
uöt64_t
 
byã
, 
bô
, 
byãvÆ
, 
bôvÆ
, 
j
, 
vÆue
 = 0;

200 
j
 = 0; j < 
bôs
; j++) {

201 
byã
 = 
off£t
 >> 3;

202 
bô
 = 7 - (
off£t
 & 0x7);

203 
byãvÆ
 = 
p
[
byã
];

204 
bôvÆ
 = (
byãvÆ
 >> 
bô
) & 1;

205 
vÆue
 = (vÆue<<1Ë| 
bôvÆ
;

206 
off£t
++;

208  
vÆue
;

209 
	}
}

211 
öt64_t
 
	$gëSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
) {

212 
öt64_t
 
vÆue
 = 
	`gëUnsig√dBôfõld
(
p
,
off£t
,
bôs
);

216 i‡(
vÆue
 & ((
uöt64_t
)1 << (
bôs
-1)))

217 
vÆue
 |((
uöt64_t
)-1Ë<< 
bôs
;

218  
vÆue
;

219 
	}
}

240 
	#BFOVERFLOW_WRAP
 0

	)

241 
	#BFOVERFLOW_SAT
 1

	)

242 
	#BFOVERFLOW_FAIL
 2

	)

244 
	$checkUnsig√dBôfõldOvîÊow
(
uöt64_t
 
vÆue
, 
öt64_t
 
ö¸
, uöt64_à
bôs
, 
owty≥
, uöt64_à*
limô
) {

245 
uöt64_t
 
max
 = (
bôs
 =64Ë? 
UINT64_MAX
 : (((uint64_t)1<<bits)-1);

246 
öt64_t
 
maxö¸
 = 
max
-
vÆue
;

247 
öt64_t
 
möö¸
 = -
vÆue
;

249 i‡(
vÆue
 > 
max
 || (
ö¸
 > 0 && in¸ > 
maxö¸
)) {

250 i‡(
limô
) {

251 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

252 
h™dÀ_wøp
;

253 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

254 *
limô
 = 
max
;

258 } i‡(
ö¸
 < 0 && in¸ < 
möö¸
) {

259 i‡(
limô
) {

260 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

261 
h™dÀ_wøp
;

262 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

263 *
limô
 = 0;

270 
h™dÀ_wøp
:

272 
uöt64_t
 
mask
 = ((
öt64_t
)-1Ë<< 
bôs
;

273 
uöt64_t
 
ªs
 = 
vÆue
+
ö¸
;

275 
ªs
 &~
mask
;

276 *
limô
 = 
ªs
;

279 
	}
}

281 
	$checkSig√dBôfõldOvîÊow
(
öt64_t
 
vÆue
, i¡64_à
ö¸
, 
uöt64_t
 
bôs
, 
owty≥
, i¡64_à*
limô
) {

282 
öt64_t
 
max
 = (
bôs
 =64Ë? 
INT64_MAX
 : (((int64_t)1<<(bits-1))-1);

283 
öt64_t
 
mö
 = (-
max
)-1;

288 
öt64_t
 
maxö¸
 = 
max
-
vÆue
;

289 
öt64_t
 
möö¸
 = 
mö
-
vÆue
;

291 i‡(
vÆue
 > 
max
 || (
bôs
 !64 && 
ö¸
 > 
maxö¸
) || (value >= 0 && incr > 0 && incr > maxincr))

293 i‡(
limô
) {

294 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

295 
h™dÀ_wøp
;

296 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

297 *
limô
 = 
max
;

301 } i‡(
vÆue
 < 
mö
 || (
bôs
 !64 && 
ö¸
 < 
möö¸
) || (value < 0 && incr < 0 && incr < minincr)) {

302 i‡(
limô
) {

303 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

304 
h™dÀ_wøp
;

305 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

306 *
limô
 = 
mö
;

313 
h™dÀ_wøp
:

315 
uöt64_t
 
mask
 = ((
öt64_t
)-1Ë<< 
bôs
;

316 
uöt64_t
 
msb
 = (uöt64_t)1 << (
bôs
-1);

317 
uöt64_t
 
a
 = 
vÆue
, 
b
 = 
ö¸
, 
c
;

318 
c
 = 
a
+
b
;

323 i‡(
c
 & 
msb
) {

324 
c
 |
mask
;

326 
c
 &~
mask
;

328 *
limô
 = 
c
;

331 
	}
}

335 
	$¥ötBôs
(*
p
, 
cou¡
) {

336 
j
, 
i
, 
byã
;

338 
j
 = 0; j < 
cou¡
; j++) {

339 
byã
 = 
p
[
j
];

340 
i
 = 0x80; i > 0; i /= 2)

341 
	`¥ötf
("%c", (
byã
 & 
i
) ? '1' : '0');

342 
	`¥ötf
("|");

344 
	`¥ötf
("\n");

345 
	}
}

351 
	#BITOP_AND
 0

	)

352 
	#BITOP_OR
 1

	)

353 
	#BITOP_XOR
 2

	)

354 
	#BITOP_NOT
 3

	)

356 
	#BITFIELDOP_GET
 0

	)

357 
	#BITFIELDOP_SET
 1

	)

358 
	#BITFIELDOP_INCRBY
 2

	)

367 
	$gëBôOff£tFromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, 
size_t
 *
off£t
, 
hash
, 
bôs
) {

368 
loff£t
;

369 *
îr
 = "bit offset isÇotán integer or out ofÑange";

370 *
p
 = 
o
->
±r
;

371 
size_t
 
∂í
 = 
	`sd¶í
(
p
);

372 
u£hash
 = 0;

375 i‡(
p
[0] ='#' && 
hash
 && 
bôs
 > 0Ë
u£hash
 = 1;

377 i‡(
	`°rög2Œ
(
p
+
u£hash
,
∂í
-u£hash,&
loff£t
) == 0) {

378 
	`addRïlyEº‹
(
c
,
îr
);

379  
VR_ERROR
;

383 i‡(
u£hash
Ë
loff£t
 *
bôs
;

386 i‡((
loff£t
 < 0) || (()loffset >> 3) >= (512*1024*1024))

388 
	`addRïlyEº‹
(
c
,
îr
);

389  
VR_ERROR
;

392 *
off£t
 = (
size_t
)
loff£t
;

393  
VR_OK
;

394 
	}
}

403 
	$gëBôfõldTy≥FromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, *
sign
, *
bôs
) {

404 *
p
 = 
o
->
±r
;

405 *
îr
 = "Invalid bitfieldÅype. Use somethingÜike i16 u8. NoteÅhat u64 isÇot supported but i64 is.";

406 
Œbôs
;

408 i‡(
p
[0] == 'i') {

409 *
sign
 = 1;

410 } i‡(
p
[0] == 'u') {

411 *
sign
 = 0;

413 
	`addRïlyEº‹
(
c
,
îr
);

414  
VR_ERROR
;

417 i‡((
	`°rög2Œ
(
p
+1,
	`°æí
’+1),&
Œbôs
)) == 0 ||

418 
Œbôs
 < 1 ||

419 (*
sign
 =1 && 
Œbôs
 > 64) ||

420 (*
sign
 =0 && 
Œbôs
 > 63))

422 
	`addRïlyEº‹
(
c
,
îr
);

423  
VR_ERROR
;

425 *
bôs
 = 
Œbôs
;

426  
VR_OK
;

427 
	}
}

434 
robj
 *
	$lookupSåögF‹BôComm™d
(
˛õ¡
 *
c
, 
size_t
 
maxbô
, *
expúed
) {

435 
size_t
 
byã
 = 
maxbô
 >> 3;

436 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
expúed
);

438 i‡(
o
 =
NULL
) {

439 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
NULL
, 
byã
+1));

440 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

442 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)Ë 
NULL
;

443 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

444 
o
->
±r
 = 
	`sdsgrowzîo
(o->±r,
byã
+1);

446  
o
;

447 
	}
}

450 
	$£tbôComm™d
(
˛õ¡
 *
c
) {

451 
robj
 *
o
;

452 *
îr
 = "bit isÇotán integer or out ofÑange";

453 
size_t
 
bôoff£t
;

454 
ssize_t
 
byã
, 
bô
;

455 
byãvÆ
, 
bôvÆ
;

456 
⁄
;

457 
expúed
 = 0;

459 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[2],&
bôoff£t
,0,0Ë!
VR_OK
)

462 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
⁄
,
îr
Ë!
VR_OK
)

466 i‡(
⁄
 & ~1) {

467 
	`addRïlyEº‹
(
c
,
îr
);

471 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

472 
	`lockDbWrôe
(
c
->
db
);

473 i‡((
o
 = 
	`lookupSåögF‹BôComm™d
(
c
,
bôoff£t
,&
expúed
)Ë=
NULL
) {

474 
	`u∆ockDb
(
c
->
db
);

475 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

480 
byã
 = 
bôoff£t
 >> 3;

481 
byãvÆ
 = ((
uöt8_t
*)
o
->
±r
)[
byã
];

482 
bô
 = 7 - (
bôoff£t
 & 0x7);

483 
bôvÆ
 = 
byãvÆ
 & (1 << 
bô
);

486 
byãvÆ
 &~(1 << 
bô
);

487 
byãvÆ
 |((
⁄
 & 0x1Ë<< 
bô
);

488 ((
uöt8_t
*)
o
->
±r
)[
byã
] = 
byãvÆ
;

489 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

490 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£tbô",
c
->
¨gv
[1],c->
db
->
id
);

491 
c
->
vñ
->
dúty
++;

492 
	`addRïly
(
c
, 
bôvÆ
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

493 
	`u∆ockDb
(
c
->
db
);

494 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

495 
	}
}

498 
	$gëbôComm™d
(
˛õ¡
 *
c
) {

499 
robj
 *
o
;

500 
Œbuf
[32];

501 
size_t
 
bôoff£t
;

502 
size_t
 
byã
, 
bô
;

503 
size_t
 
bôvÆ
 = 0;

505 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[2],&
bôoff£t
,0,0Ë!
VR_OK
)

508 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

509 
	`lockDbRód
(
c
->
db
);

510 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

511 
	`u∆ockDb
(
c
->
db
);

512 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

514 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

515 
	`u∆ockDb
(
c
->
db
);

516 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

519 
byã
 = 
bôoff£t
 >> 3;

520 
bô
 = 7 - (
bôoff£t
 & 0x7);

521 i‡(
	`sdsEncodedObje˘
(
o
)) {

522 i‡(
byã
 < 
	`sd¶í
(
o
->
±r
))

523 
bôvÆ
 = ((
uöt8_t
*)
o
->
±r
)[
byã
] & (1 << 
bô
);

525 i‡(
byã
 < (
size_t
)
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
))

526 
bôvÆ
 = 
Œbuf
[
byã
] & (1 << 
bô
);

529 
	`addRïly
(
c
, 
bôvÆ
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

530 
	`u∆ockDb
(
c
->
db
);

531 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

532 
	}
}

535 
	$bô›Comm™d
(
˛õ¡
 *
c
) {

536 *
›«me
 = 
c
->
¨gv
[1]->
±r
;

537 
robj
 *
o
, *
èrgëkey
 = 
c
->
¨gv
[2];

538 
›
, 
j
, 
numkeys
;

539 
robj
 **
obje˘s
;

540 **
§c
;

541 *
Àn
, 
maxÀn
 = 0;

543 
möÀn
 = 0;

544 *
ªs
 = 
NULL
;

547 i‡((
›«me
[0] ='a' || o≤ame[0] ='A'Ë&& !
	`°rˇ£cmp
(opname,"and"))

548 
›
 = 
BITOP_AND
;

549 if((
›«me
[0] ='o' || o≤ame[0] ='O'Ë&& !
	`°rˇ£cmp
(opname,"or"))

550 
›
 = 
BITOP_OR
;

551 if((
›«me
[0] ='x' || o≤ame[0] ='X'Ë&& !
	`°rˇ£cmp
(opname,"xor"))

552 
›
 = 
BITOP_XOR
;

553 if((
›«me
[0] ='n' || o≤ame[0] ='N'Ë&& !
	`°rˇ£cmp
(opname,"not"))

554 
›
 = 
BITOP_NOT
;

556 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

561 i‡(
›
 =
BITOP_NOT
 && 
c
->
¨gc
 != 4) {

562 
	`addRïlyEº‹
(
c
,"BITOP NOT must be called withá single source key.");

567 
numkeys
 = 
c
->
¨gc
 - 3;

568 
§c
 = 
	`dÆloc
((*Ë* 
numkeys
);

569 
Àn
 = 
	`dÆloc
((Ë* 
numkeys
);

570 
obje˘s
 = 
	`dÆloc
((
robj
*Ë* 
numkeys
);

571 
j
 = 0; j < 
numkeys
; j++) {

572 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
+3]);

574 i‡(
o
 =
NULL
) {

575 
obje˘s
[
j
] = 
NULL
;

576 
§c
[
j
] = 
NULL
;

577 
Àn
[
j
] = 0;

578 
möÀn
 = 0;

582 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

583 
i
;

584 
i
 = 0; i < 
j
; i++) {

585 i‡(
obje˘s
[
i
])

586 
	`de¸RefCou¡
(
obje˘s
[
i
]);

588 
	`d‰ì
(
§c
);

589 
	`d‰ì
(
Àn
);

590 
	`d‰ì
(
obje˘s
);

593 
obje˘s
[
j
] = 
	`gëDecodedObje˘
(
o
);

594 
§c
[
j
] = 
obje˘s
[j]->
±r
;

595 
Àn
[
j
] = 
	`sd¶í
(
obje˘s
[j]->
±r
);

596 i‡(
Àn
[
j
] > 
maxÀn
) maxlen =Üen[j];

597 i‡(
j
 =0 || 
Àn
[j] < 
möÀn
) minlen =Üen[j];

601 i‡(
maxÀn
) {

602 
ªs
 = (*Ë
	`sd¢ewÀn
(
NULL
,
maxÀn
);

603 
ouçut
, 
byã
;

604 
i
;

609 
j
 = 0;

610 i‡(
möÀn
 >()*4 && 
numkeys
 <= 16) {

611 *
Õ
[16];

612 *
Ães
 = (*Ë
ªs
;

615 
	`mem˝y
(
Õ
,
§c
,(*)*
numkeys
);

616 
	`mem˝y
(
ªs
,
§c
[0],
möÀn
);

619 i‡(
›
 =
BITOP_AND
) {

620 
möÀn
 >= ()*4) {

621 
i
 = 1; i < 
numkeys
; i++) {

622 
Ães
[0] &
Õ
[
i
][0];

623 
Ães
[1] &
Õ
[
i
][1];

624 
Ães
[2] &
Õ
[
i
][2];

625 
Ães
[3] &
Õ
[
i
][3];

626 
Õ
[
i
]+=4;

628 
Ães
+=4;

629 
j
 += ()*4;

630 
möÀn
 -= ()*4;

632 } i‡(
›
 =
BITOP_OR
) {

633 
möÀn
 >= ()*4) {

634 
i
 = 1; i < 
numkeys
; i++) {

635 
Ães
[0] |
Õ
[
i
][0];

636 
Ães
[1] |
Õ
[
i
][1];

637 
Ães
[2] |
Õ
[
i
][2];

638 
Ães
[3] |
Õ
[
i
][3];

639 
Õ
[
i
]+=4;

641 
Ães
+=4;

642 
j
 += ()*4;

643 
möÀn
 -= ()*4;

645 } i‡(
›
 =
BITOP_XOR
) {

646 
möÀn
 >= ()*4) {

647 
i
 = 1; i < 
numkeys
; i++) {

648 
Ães
[0] ^
Õ
[
i
][0];

649 
Ães
[1] ^
Õ
[
i
][1];

650 
Ães
[2] ^
Õ
[
i
][2];

651 
Ães
[3] ^
Õ
[
i
][3];

652 
Õ
[
i
]+=4;

654 
Ães
+=4;

655 
j
 += ()*4;

656 
möÀn
 -= ()*4;

658 } i‡(
›
 =
BITOP_NOT
) {

659 
möÀn
 >= ()*4) {

660 
Ães
[0] = ~lres[0];

661 
Ães
[1] = ~lres[1];

662 
Ães
[2] = ~lres[2];

663 
Ães
[3] = ~lres[3];

664 
Ães
+=4;

665 
j
 += ()*4;

666 
möÀn
 -= ()*4;

672 ; 
j
 < 
maxÀn
; j++) {

673 
ouçut
 = (
Àn
[0] <
j
Ë? 0 : 
§c
[0][j];

674 i‡(
›
 =
BITOP_NOT
Ë
ouçut
 = ~output;

675 
i
 = 1; i < 
numkeys
; i++) {

676 
byã
 = (
Àn
[
i
] <
j
Ë? 0 : 
§c
[i][j];

677 
›
) {

678 
BITOP_AND
: 
ouçut
 &
byã
; ;

679 
BITOP_OR
: 
ouçut
 |
byã
; ;

680 
BITOP_XOR
: 
ouçut
 ^
byã
; ;

683 
ªs
[
j
] = 
ouçut
;

686 
j
 = 0; j < 
numkeys
; j++) {

687 i‡(
obje˘s
[
j
])

688 
	`de¸RefCou¡
(
obje˘s
[
j
]);

690 
	`d‰ì
(
§c
);

691 
	`d‰ì
(
Àn
);

692 
	`d‰ì
(
obje˘s
);

695 i‡(
maxÀn
) {

696 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
ªs
);

697 
	`£tKey
(
c
->
db
,
èrgëkey
,
o
,
NULL
);

698 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
èrgëkey
,
c
->
db
->
id
);

699 
	`de¸RefCou¡
(
o
);

700 } i‡(
	`dbDñëe
(
c
->
db
,
èrgëkey
)) {

701 
	`sig«lModifõdKey
(
c
->
db
,
èrgëkey
);

702 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
èrgëkey
,
c
->
db
->
id
);

704 
£rvî
.
dúty
++;

705 
	`addRïlyL⁄gL⁄g
(
c
,
maxÀn
);

706 
	}
}

709 
	$bôcou¡Comm™d
(
˛õ¡
 *
c
) {

710 
robj
 *
o
;

711 
°¨t
, 
íd
, 
°æí
;

712 *
p
;

713 
Œbuf
[32];

715 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

716 
	`lockDbRód
(
c
->
db
);

718 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

719 
	`u∆ockDb
(
c
->
db
);

720 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

722 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

723 
	`u∆ockDb
(
c
->
db
);

724 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

730 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

731 
p
 = (*Ë
Œbuf
;

732 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

734 
p
 = (*Ë
o
->
±r
;

735 
°æí
 = 
	`sd¶í
(
o
->
±r
);

739 i‡(
c
->
¨gc
 == 4) {

740 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
) {

741 
	`u∆ockDb
(
c
->
db
);

742 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

745 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
) {

746 
	`u∆ockDb
(
c
->
db
);

747 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

751 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

752 i‡(
íd
 < 0Ëíd = 
°æí
+end;

753 i‡(
°¨t
 < 0) start = 0;

754 i‡(
íd
 < 0)Énd = 0;

755 i‡(
íd
 >
°æí
)Énd = strlen-1;

756 } i‡(
c
->
¨gc
 == 2) {

758 
°¨t
 = 0;

759 
íd
 = 
°æí
-1;

761 
	`u∆ockDb
(
c
->
db
);

762 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

764 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

770 i‡(
°¨t
 > 
íd
) {

771 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

773 
byãs
 = 
íd
-
°¨t
+1;

775 
	`addRïlyL⁄gL⁄g
(
c
,
	`ªdisP›cou¡
(
p
+
°¨t
,
byãs
));

777 
	`u∆ockDb
(
c
->
db
);

778 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

779 
	}
}

782 
	$bôposComm™d
(
˛õ¡
 *
c
) {

783 
robj
 *
o
;

784 
bô
, 
°¨t
, 
íd
, 
°æí
;

785 *
p
;

786 
Œbuf
[32];

787 
íd_giví
 = 0;

791 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
bô
,
NULL
Ë!
VR_OK
)

793 i‡(
bô
 != 0 && bit != 1) {

794 
	`addRïlyEº‹
(
c
, "The bitárgument must be 1 or 0.");

798 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

799 
	`lockDbRód
(
c
->
db
);

803 i‡((
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1])Ë=
NULL
) {

804 
	`u∆ockDb
(
c
->
db
);

805 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

806 
	`addRïlyL⁄gL⁄g
(
c
, 
bô
 ? -1 : 0);

809 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

810 
	`u∆ockDb
(
c
->
db
);

811 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

817 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

818 
p
 = (*Ë
Œbuf
;

819 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

821 
p
 = (*Ë
o
->
±r
;

822 
°æí
 = 
	`sd¶í
(
o
->
±r
);

826 i‡(
c
->
¨gc
 == 4 || c->argc == 5) {

827 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
°¨t
,
NULL
Ë!
VR_OK
) {

828 
	`u∆ockDb
(
c
->
db
);

829 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

832 i‡(
c
->
¨gc
 == 5) {

833 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[4],&
íd
,
NULL
Ë!
VR_OK
) {

834 
	`u∆ockDb
(
c
->
db
);

835 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

838 
íd_giví
 = 1;

840 
íd
 = 
°æí
-1;

843 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

844 i‡(
íd
 < 0Ëíd = 
°æí
+end;

845 i‡(
°¨t
 < 0) start = 0;

846 i‡(
íd
 < 0)Énd = 0;

847 i‡(
íd
 >
°æí
)Énd = strlen-1;

848 } i‡(
c
->
¨gc
 == 3) {

850 
°¨t
 = 0;

851 
íd
 = 
°æí
-1;

853 
	`u∆ockDb
(
c
->
db
);

854 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

856 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

862 i‡(
°¨t
 > 
íd
) {

863 
	`addRïlyL⁄gL⁄g
(
c
, -1);

865 
byãs
 = 
íd
-
°¨t
+1;

866 
pos
 = 
	`ªdisBôpos
(
p
+
°¨t
,
byãs
,
bô
);

875 i‡(
íd_giví
 && 
bô
 =0 && 
pos
 =
byãs
*8) {

876 
	`u∆ockDb
(
c
->
db
);

877 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

878 
	`addRïlyL⁄gL⁄g
(
c
,-1);

881 i‡(
pos
 !-1Ëpo†+
°¨t
*8;

882 
	`addRïlyL⁄gL⁄g
(
c
,
pos
);

884 
	`u∆ockDb
(
c
->
db
);

885 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

886 
	}
}

898 
	sbôfõldOp
 {

899 
uöt64_t
 
	moff£t
;

900 
öt64_t
 
	mi64
;

901 
	m›code
;

902 
	mowty≥
;

903 
	mbôs
;

904 
	msign
;

907 
	$bôfõldComm™d
(
˛õ¡
 *
c
) {

908 
robj
 *
o
;

909 
size_t
 
bôoff£t
;

910 
j
, 
num›s
 = 0, 
ch™ges
 = 0;

911 
bôfõldOp
 *
›s
 = 
NULL
;

912 
owty≥
 = 
BFOVERFLOW_WRAP
;

914 
j
 = 2; j < 
c
->
¨gc
; j++) {

915 
ªm¨gs
 = 
c
->
¨gc
-
j
-1;

916 *
subcmd
 = 
c
->
¨gv
[
j
]->
±r
;

917 
›code
;

918 
i64
 = 0;

919 
sign
 = 0;

920 
bôs
 = 0;

922 i‡(!
	`°rˇ£cmp
(
subcmd
,"gë"Ë&& 
ªm¨gs
 >= 2)

923 
›code
 = 
BITFIELDOP_GET
;

924 i‡(!
	`°rˇ£cmp
(
subcmd
,"£t"Ë&& 
ªm¨gs
 >= 3)

925 
›code
 = 
BITFIELDOP_SET
;

926 i‡(!
	`°rˇ£cmp
(
subcmd
,"ö¸by"Ë&& 
ªm¨gs
 >= 3)

927 
›code
 = 
BITFIELDOP_INCRBY
;

928 i‡(!
	`°rˇ£cmp
(
subcmd
,"ovîÊow"Ë&& 
ªm¨gs
 >= 1) {

929 *
owty≥«me
 = 
c
->
¨gv
[
j
+1]->
±r
;

930 
j
++;

931 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"wrap"))

932 
owty≥
 = 
BFOVERFLOW_WRAP
;

933 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"sat"))

934 
owty≥
 = 
BFOVERFLOW_SAT
;

935 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"fail"))

936 
owty≥
 = 
BFOVERFLOW_FAIL
;

938 
	`addRïlyEº‹
(
c
,"Invalid OVERFLOWÅype specified");

939 
	`d‰ì
(
›s
);

944 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

945 
	`d‰ì
(
›s
);

950 i‡(
	`gëBôfõldTy≥FromArgumít
(
c
,c->
¨gv
[
j
+1],&
sign
,&
bôs
Ë!
VR_OK
) {

951 
	`d‰ì
(
›s
);

955 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[
j
+2],&
bôoff£t
,1,
bôs
Ë!
VR_OK
){

956 
	`d‰ì
(
›s
);

961 i‡(
›code
 !
BITFIELDOP_GET
) {

962 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
j
+3],&
i64
,
NULL
Ë!
VR_OK
){

963 
	`d‰ì
(
›s
);

969 
›s
 = 
	`dªÆloc
(›s,(*›s)*(
num›s
+1));

970 
›s
[
num›s
].
off£t
 = 
bôoff£t
;

971 
›s
[
num›s
].
i64
 = i64;

972 
›s
[
num›s
].
›code
 = opcode;

973 
›s
[
num›s
].
owty≥
 = owtype;

974 
›s
[
num›s
].
bôs
 = bits;

975 
›s
[
num›s
].
sign
 = sign;

976 
num›s
++;

978 
j
 +3 - (
›code
 =
BITFIELDOP_GET
);

981 
	`addRïlyMu…iBulkLí
(
c
,
num›s
);

984 
j
 = 0; j < 
num›s
; j++) {

985 
bôfõldOp
 *
this›
 = 
›s
+
j
;

988 i‡(
this›
->
›code
 =
BITFIELDOP_SET
 ||

989 
this›
->
›code
 =
BITFIELDOP_INCRBY
)

997 i‡((
o
 = 
	`lookupSåögF‹BôComm™d
(
c
,

998 
this›
->
off£t
 + (this›->
bôs
-1), 
NULL
)) == NULL) ;

1003 i‡(
this›
->
sign
) {

1004 
öt64_t
 
ﬁdvÆ
, 
√wvÆ
, 
wøµed
, 
ªtvÆ
;

1005 
ovîÊow
;

1007 
ﬁdvÆ
 = 
	`gëSig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1008 
this›
->
bôs
);

1010 i‡(
this›
->
›code
 =
BITFIELDOP_INCRBY
) {

1011 
√wvÆ
 = 
ﬁdvÆ
 + 
this›
->
i64
;

1012 
ovîÊow
 = 
	`checkSig√dBôfõldOvîÊow
(
ﬁdvÆ
,

1013 
this›
->
i64
,this›->
bôs
,this›->
owty≥
,&
wøµed
);

1014 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1015 
ªtvÆ
 = 
√wvÆ
;

1017 
√wvÆ
 = 
this›
->
i64
;

1018 
ovîÊow
 = 
	`checkSig√dBôfõldOvîÊow
(
√wvÆ
,

1019 0,
this›
->
bôs
,this›->
owty≥
,&
wøµed
);

1020 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1021 
ªtvÆ
 = 
ﬁdvÆ
;

1026 i‡(!(
ovîÊow
 && 
this›
->
owty≥
 =
BFOVERFLOW_FAIL
)) {

1027 
	`addRïlyL⁄gL⁄g
(
c
,
ªtvÆ
);

1028 
	`£tSig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1029 
this›
->
bôs
,
√wvÆ
);

1031 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1034 
uöt64_t
 
ﬁdvÆ
, 
√wvÆ
, 
wøµed
, 
ªtvÆ
;

1035 
ovîÊow
;

1037 
ﬁdvÆ
 = 
	`gëUnsig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1038 
this›
->
bôs
);

1040 i‡(
this›
->
›code
 =
BITFIELDOP_INCRBY
) {

1041 
√wvÆ
 = 
ﬁdvÆ
 + 
this›
->
i64
;

1042 
ovîÊow
 = 
	`checkUnsig√dBôfõldOvîÊow
(
ﬁdvÆ
,

1043 
this›
->
i64
,this›->
bôs
,this›->
owty≥
,&
wøµed
);

1044 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1045 
ªtvÆ
 = 
√wvÆ
;

1047 
√wvÆ
 = 
this›
->
i64
;

1048 
ovîÊow
 = 
	`checkUnsig√dBôfõldOvîÊow
(
√wvÆ
,

1049 0,
this›
->
bôs
,this›->
owty≥
,&
wøµed
);

1050 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1051 
ªtvÆ
 = 
ﬁdvÆ
;

1055 i‡(!(
ovîÊow
 && 
this›
->
owty≥
 =
BFOVERFLOW_FAIL
)) {

1056 
	`addRïlyL⁄gL⁄g
(
c
,
ªtvÆ
);

1057 
	`£tUnsig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1058 
this›
->
bôs
,
√wvÆ
);

1060 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1063 
ch™ges
++;

1066 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]);

1067 
size_t
 
ﬁí
 = (
o
 =
NULL
Ë? 0 : 
	`sd¶í
(o->
±r
);

1068 
buf
[9];

1074 
	`mem£t
(
buf
,0,9);

1075 *
§c
 = 
o
 ? o->
±r
 : 
NULL
;

1076 
i
;

1077 
size_t
 
byã
 = 
this›
->
off£t
 >> 3;

1078 
i
 = 0; i < 9; i++) {

1079 i‡(
§c
 =
NULL
 || 
i
+
byã
 >
ﬁí
) ;

1080 
buf
[
i
] = 
§c
[i+
byã
];

1085 i‡(
this›
->
sign
) {

1086 
öt64_t
 
vÆ
 = 
	`gëSig√dBôfõld
(
buf
,
this›
->
off£t
-(
byã
*8),

1087 
this›
->
bôs
);

1088 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1090 
uöt64_t
 
vÆ
 = 
	`gëUnsig√dBôfõld
(
buf
,
this›
->
off£t
-(
byã
*8),

1091 
this›
->
bôs
);

1092 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1097 i‡(
ch™ges
) {

1098 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1099 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£tbô",
c
->
¨gv
[1],c->
db
->
id
);

1100 
£rvî
.
dúty
 +
ch™ges
;

1102 
	`d‰ì
(
›s
);

1103 
	}
}

	@src/vr_bitops.c

1 
	~<vr_c‹e.h
>

10 
size_t
 
	$ªdisP›cou¡
(*
s
, 
cou¡
) {

11 
size_t
 
bôs
 = 0;

12 *
p
 = 
s
;

13 
uöt32_t
 *
p4
;

14 c⁄° 
bôsöbyã
[256] = {0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8};

17 ()
p
 & 3 && 
cou¡
) {

18 
bôs
 +
bôsöbyã
[*
p
++];

19 
cou¡
--;

23 
p4
 = (
uöt32_t
*)
p
;

24 
cou¡
>=28) {

25 
uöt32_t
 
aux1
, 
aux2
, 
aux3
, 
aux4
, 
aux5
, 
aux6
, 
aux7
;

27 
aux1
 = *
p4
++;

28 
aux2
 = *
p4
++;

29 
aux3
 = *
p4
++;

30 
aux4
 = *
p4
++;

31 
aux5
 = *
p4
++;

32 
aux6
 = *
p4
++;

33 
aux7
 = *
p4
++;

34 
cou¡
 -= 28;

36 
aux1
 =áux1 - ((aux1 >> 1) & 0x55555555);

37 
aux1
 = (aux1 & 0x33333333) + ((aux1 >> 2) & 0x33333333);

38 
aux2
 =áux2 - ((aux2 >> 1) & 0x55555555);

39 
aux2
 = (aux2 & 0x33333333) + ((aux2 >> 2) & 0x33333333);

40 
aux3
 =áux3 - ((aux3 >> 1) & 0x55555555);

41 
aux3
 = (aux3 & 0x33333333) + ((aux3 >> 2) & 0x33333333);

42 
aux4
 =áux4 - ((aux4 >> 1) & 0x55555555);

43 
aux4
 = (aux4 & 0x33333333) + ((aux4 >> 2) & 0x33333333);

44 
aux5
 =áux5 - ((aux5 >> 1) & 0x55555555);

45 
aux5
 = (aux5 & 0x33333333) + ((aux5 >> 2) & 0x33333333);

46 
aux6
 =áux6 - ((aux6 >> 1) & 0x55555555);

47 
aux6
 = (aux6 & 0x33333333) + ((aux6 >> 2) & 0x33333333);

48 
aux7
 =áux7 - ((aux7 >> 1) & 0x55555555);

49 
aux7
 = (aux7 & 0x33333333) + ((aux7 >> 2) & 0x33333333);

50 
bôs
 +((((
aux1
 + (aux1 >> 4)) & 0x0F0F0F0F) +

51 ((
aux2
 + (aux2 >> 4)) & 0x0F0F0F0F) +

52 ((
aux3
 + (aux3 >> 4)) & 0x0F0F0F0F) +

53 ((
aux4
 + (aux4 >> 4)) & 0x0F0F0F0F) +

54 ((
aux5
 + (aux5 >> 4)) & 0x0F0F0F0F) +

55 ((
aux6
 + (aux6 >> 4)) & 0x0F0F0F0F) +

56 ((
aux7
 + (aux7 >> 4)) & 0x0F0F0F0F))* 0x01010101) >> 24;

59 
p
 = (*)
p4
;

60 
cou¡
--Ë
bôs
 +
bôsöbyã
[*
p
++];

61  
bôs
;

62 
	}
}

71 
	$ªdisBôpos
(*
s
, 
cou¡
, 
bô
) {

72 *
l
;

73 *
c
;

74 
skùvÆ
, 
w‹d
 = 0, 
⁄e
;

75 
pos
 = 0;

76 
j
;

88 
skùvÆ
 = 
bô
 ? 0 : 
UCHAR_MAX
;

89 
c
 = (*Ë
s
;

90 ()
c
 & ((*
l
)-1Ë&& 
cou¡
) {

91 i‡(*
c
 !
skùvÆ
) ;

92 
c
++;

93 
cou¡
--;

94 
pos
 += 8;

98 
skùvÆ
 = 
bô
 ? 0 : 
ULONG_MAX
;

99 
l
 = (*Ë
c
;

100 
cou¡
 >(*
l
)) {

101 i‡(*
l
 !
skùvÆ
) ;

102 
l
++;

103 
cou¡
 -(*
l
);

104 
pos
 +(*
l
)*8;

114 
c
 = (*)
l
;

115 
j
 = 0; j < (*
l
); j++) {

116 
w‹d
 <<= 8;

117 i‡(
cou¡
) {

118 
w‹d
 |*
c
;

119 
c
++;

120 
cou¡
--;

129 i‡(
bô
 =1 && 
w‹d
 == 0)  -1;

135 
⁄e
 = 
ULONG_MAX
;

136 
⁄e
 >>= 1;

137 
⁄e
 = ~one;

139 
⁄e
) {

140 i‡(((
⁄e
 & 
w‹d
Ë!0Ë=
bô
Ë 
pos
;

141 
pos
++;

142 
⁄e
 >>= 1;

147 
	`£rvîP™ic
("End ofÑedisBitpos()Ñeached.");

149 
	}
}

172 
	$£tUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, uöt64_à
vÆue
) {

173 
uöt64_t
 
byã
, 
bô
, 
byãvÆ
, 
bôvÆ
, 
j
;

175 
j
 = 0; j < 
bôs
; j++) {

176 
bôvÆ
 = (
vÆue
 & ((
uöt64_t
)1<<(
bôs
-1-
j
))) != 0;

177 
byã
 = 
off£t
 >> 3;

178 
bô
 = 7 - (
off£t
 & 0x7);

179 
byãvÆ
 = 
p
[
byã
];

180 
byãvÆ
 &~(1 << 
bô
);

181 
byãvÆ
 |
bôvÆ
 << 
bô
;

182 
p
[
byã
] = 
byãvÆ
 & 0xff;

183 
off£t
++;

185 
	}
}

187 
	$£tSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, 
öt64_t
 
vÆue
) {

188 
uöt64_t
 
uv
;

190 i‡(
vÆue
 >= 0)

191 
uv
 = 
vÆue
;

193 
uv
 = 
UINT64_MAX
 + 
vÆue
 + 1;

194 
	`£tUnsig√dBôfõld
(
p
,
off£t
,
bôs
,
uv
);

195 
	}
}

197 
uöt64_t
 
	$gëUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
) {

198 
uöt64_t
 
byã
, 
bô
, 
byãvÆ
, 
bôvÆ
, 
j
, 
vÆue
 = 0;

200 
j
 = 0; j < 
bôs
; j++) {

201 
byã
 = 
off£t
 >> 3;

202 
bô
 = 7 - (
off£t
 & 0x7);

203 
byãvÆ
 = 
p
[
byã
];

204 
bôvÆ
 = (
byãvÆ
 >> 
bô
) & 1;

205 
vÆue
 = (vÆue<<1Ë| 
bôvÆ
;

206 
off£t
++;

208  
vÆue
;

209 
	}
}

211 
öt64_t
 
	$gëSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
) {

212 
öt64_t
 
vÆue
 = 
	`gëUnsig√dBôfõld
(
p
,
off£t
,
bôs
);

216 i‡(
vÆue
 & ((
uöt64_t
)1 << (
bôs
-1)))

217 
vÆue
 |((
uöt64_t
)-1Ë<< 
bôs
;

218  
vÆue
;

219 
	}
}

240 
	#BFOVERFLOW_WRAP
 0

	)

241 
	#BFOVERFLOW_SAT
 1

	)

242 
	#BFOVERFLOW_FAIL
 2

	)

244 
	$checkUnsig√dBôfõldOvîÊow
(
uöt64_t
 
vÆue
, 
öt64_t
 
ö¸
, uöt64_à
bôs
, 
owty≥
, uöt64_à*
limô
) {

245 
uöt64_t
 
max
 = (
bôs
 =64Ë? 
UINT64_MAX
 : (((uint64_t)1<<bits)-1);

246 
öt64_t
 
maxö¸
 = 
max
-
vÆue
;

247 
öt64_t
 
möö¸
 = -
vÆue
;

249 i‡(
vÆue
 > 
max
 || (
ö¸
 > 0 && in¸ > 
maxö¸
)) {

250 i‡(
limô
) {

251 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

252 
h™dÀ_wøp
;

253 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

254 *
limô
 = 
max
;

258 } i‡(
ö¸
 < 0 && in¸ < 
möö¸
) {

259 i‡(
limô
) {

260 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

261 
h™dÀ_wøp
;

262 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

263 *
limô
 = 0;

270 
h™dÀ_wøp
:

272 
uöt64_t
 
mask
 = ((
öt64_t
)-1Ë<< 
bôs
;

273 
uöt64_t
 
ªs
 = 
vÆue
+
ö¸
;

275 
ªs
 &~
mask
;

276 *
limô
 = 
ªs
;

279 
	}
}

281 
	$checkSig√dBôfõldOvîÊow
(
öt64_t
 
vÆue
, i¡64_à
ö¸
, 
uöt64_t
 
bôs
, 
owty≥
, i¡64_à*
limô
) {

282 
öt64_t
 
max
 = (
bôs
 =64Ë? 
INT64_MAX
 : (((int64_t)1<<(bits-1))-1);

283 
öt64_t
 
mö
 = (-
max
)-1;

288 
öt64_t
 
maxö¸
 = 
max
-
vÆue
;

289 
öt64_t
 
möö¸
 = 
mö
-
vÆue
;

291 i‡(
vÆue
 > 
max
 || (
bôs
 !64 && 
ö¸
 > 
maxö¸
) || (value >= 0 && incr > 0 && incr > maxincr))

293 i‡(
limô
) {

294 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

295 
h™dÀ_wøp
;

296 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

297 *
limô
 = 
max
;

301 } i‡(
vÆue
 < 
mö
 || (
bôs
 !64 && 
ö¸
 < 
möö¸
) || (value < 0 && incr < 0 && incr < minincr)) {

302 i‡(
limô
) {

303 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

304 
h™dÀ_wøp
;

305 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

306 *
limô
 = 
mö
;

313 
h™dÀ_wøp
:

315 
uöt64_t
 
mask
 = ((
öt64_t
)-1Ë<< 
bôs
;

316 
uöt64_t
 
msb
 = (uöt64_t)1 << (
bôs
-1);

317 
uöt64_t
 
a
 = 
vÆue
, 
b
 = 
ö¸
, 
c
;

318 
c
 = 
a
+
b
;

323 i‡(
c
 & 
msb
) {

324 
c
 |
mask
;

326 
c
 &~
mask
;

328 *
limô
 = 
c
;

331 
	}
}

335 
	$¥ötBôs
(*
p
, 
cou¡
) {

336 
j
, 
i
, 
byã
;

338 
j
 = 0; j < 
cou¡
; j++) {

339 
byã
 = 
p
[
j
];

340 
i
 = 0x80; i > 0; i /= 2)

341 
	`¥ötf
("%c", (
byã
 & 
i
) ? '1' : '0');

342 
	`¥ötf
("|");

344 
	`¥ötf
("\n");

345 
	}
}

351 
	#BITOP_AND
 0

	)

352 
	#BITOP_OR
 1

	)

353 
	#BITOP_XOR
 2

	)

354 
	#BITOP_NOT
 3

	)

356 
	#BITFIELDOP_GET
 0

	)

357 
	#BITFIELDOP_SET
 1

	)

358 
	#BITFIELDOP_INCRBY
 2

	)

367 
	$gëBôOff£tFromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, 
size_t
 *
off£t
, 
hash
, 
bôs
) {

368 
loff£t
;

369 *
îr
 = "bit offset isÇotán integer or out ofÑange";

370 *
p
 = 
o
->
±r
;

371 
size_t
 
∂í
 = 
	`sd¶í
(
p
);

372 
u£hash
 = 0;

375 i‡(
p
[0] ='#' && 
hash
 && 
bôs
 > 0Ë
u£hash
 = 1;

377 i‡(
	`°rög2Œ
(
p
+
u£hash
,
∂í
-u£hash,&
loff£t
) == 0) {

378 
	`addRïlyEº‹
(
c
,
îr
);

379  
VR_ERROR
;

383 i‡(
u£hash
Ë
loff£t
 *
bôs
;

386 i‡((
loff£t
 < 0) || (()loffset >> 3) >= (512*1024*1024))

388 
	`addRïlyEº‹
(
c
,
îr
);

389  
VR_ERROR
;

392 *
off£t
 = (
size_t
)
loff£t
;

393  
VR_OK
;

394 
	}
}

403 
	$gëBôfõldTy≥FromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, *
sign
, *
bôs
) {

404 *
p
 = 
o
->
±r
;

405 *
îr
 = "Invalid bitfieldÅype. Use somethingÜike i16 u8. NoteÅhat u64 isÇot supported but i64 is.";

406 
Œbôs
;

408 i‡(
p
[0] == 'i') {

409 *
sign
 = 1;

410 } i‡(
p
[0] == 'u') {

411 *
sign
 = 0;

413 
	`addRïlyEº‹
(
c
,
îr
);

414  
VR_ERROR
;

417 i‡((
	`°rög2Œ
(
p
+1,
	`°æí
’+1),&
Œbôs
)) == 0 ||

418 
Œbôs
 < 1 ||

419 (*
sign
 =1 && 
Œbôs
 > 64) ||

420 (*
sign
 =0 && 
Œbôs
 > 63))

422 
	`addRïlyEº‹
(
c
,
îr
);

423  
VR_ERROR
;

425 *
bôs
 = 
Œbôs
;

426  
VR_OK
;

427 
	}
}

434 
robj
 *
	$lookupSåögF‹BôComm™d
(
˛õ¡
 *
c
, 
size_t
 
maxbô
, *
expúed
) {

435 
size_t
 
byã
 = 
maxbô
 >> 3;

436 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
expúed
);

438 i‡(
o
 =
NULL
) {

439 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
NULL
, 
byã
+1));

440 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

442 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)Ë 
NULL
;

443 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

444 
o
->
±r
 = 
	`sdsgrowzîo
(o->±r,
byã
+1);

446  
o
;

447 
	}
}

450 
	$£tbôComm™d
(
˛õ¡
 *
c
) {

451 
robj
 *
o
;

452 *
îr
 = "bit isÇotán integer or out ofÑange";

453 
size_t
 
bôoff£t
;

454 
ssize_t
 
byã
, 
bô
;

455 
byãvÆ
, 
bôvÆ
;

456 
⁄
;

457 
expúed
 = 0;

459 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[2],&
bôoff£t
,0,0Ë!
VR_OK
)

462 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
⁄
,
îr
Ë!
VR_OK
)

466 i‡(
⁄
 & ~1) {

467 
	`addRïlyEº‹
(
c
,
îr
);

471 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

472 
	`lockDbWrôe
(
c
->
db
);

473 i‡((
o
 = 
	`lookupSåögF‹BôComm™d
(
c
,
bôoff£t
,&
expúed
)Ë=
NULL
) {

474 
	`u∆ockDb
(
c
->
db
);

475 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

480 
byã
 = 
bôoff£t
 >> 3;

481 
byãvÆ
 = ((
uöt8_t
*)
o
->
±r
)[
byã
];

482 
bô
 = 7 - (
bôoff£t
 & 0x7);

483 
bôvÆ
 = 
byãvÆ
 & (1 << 
bô
);

486 
byãvÆ
 &~(1 << 
bô
);

487 
byãvÆ
 |((
⁄
 & 0x1Ë<< 
bô
);

488 ((
uöt8_t
*)
o
->
±r
)[
byã
] = 
byãvÆ
;

489 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

490 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£tbô",
c
->
¨gv
[1],c->
db
->
id
);

491 
c
->
vñ
->
dúty
++;

492 
	`addRïly
(
c
, 
bôvÆ
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

493 
	`u∆ockDb
(
c
->
db
);

494 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

495 
	}
}

498 
	$gëbôComm™d
(
˛õ¡
 *
c
) {

499 
robj
 *
o
;

500 
Œbuf
[32];

501 
size_t
 
bôoff£t
;

502 
size_t
 
byã
, 
bô
;

503 
size_t
 
bôvÆ
 = 0;

505 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[2],&
bôoff£t
,0,0Ë!
VR_OK
)

508 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

509 
	`lockDbRód
(
c
->
db
);

510 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

511 
	`u∆ockDb
(
c
->
db
);

512 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

514 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

515 
	`u∆ockDb
(
c
->
db
);

516 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

519 
byã
 = 
bôoff£t
 >> 3;

520 
bô
 = 7 - (
bôoff£t
 & 0x7);

521 i‡(
	`sdsEncodedObje˘
(
o
)) {

522 i‡(
byã
 < 
	`sd¶í
(
o
->
±r
))

523 
bôvÆ
 = ((
uöt8_t
*)
o
->
±r
)[
byã
] & (1 << 
bô
);

525 i‡(
byã
 < (
size_t
)
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
))

526 
bôvÆ
 = 
Œbuf
[
byã
] & (1 << 
bô
);

529 
	`addRïly
(
c
, 
bôvÆ
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

530 
	`u∆ockDb
(
c
->
db
);

531 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

532 
	}
}

535 
	$bô›Comm™d
(
˛õ¡
 *
c
) {

536 *
›«me
 = 
c
->
¨gv
[1]->
±r
;

537 
robj
 *
o
, *
èrgëkey
 = 
c
->
¨gv
[2];

538 
›
, 
j
, 
numkeys
;

539 
robj
 **
obje˘s
;

540 **
§c
;

541 *
Àn
, 
maxÀn
 = 0;

543 
möÀn
 = 0;

544 *
ªs
 = 
NULL
;

547 i‡((
›«me
[0] ='a' || o≤ame[0] ='A'Ë&& !
	`°rˇ£cmp
(opname,"and"))

548 
›
 = 
BITOP_AND
;

549 if((
›«me
[0] ='o' || o≤ame[0] ='O'Ë&& !
	`°rˇ£cmp
(opname,"or"))

550 
›
 = 
BITOP_OR
;

551 if((
›«me
[0] ='x' || o≤ame[0] ='X'Ë&& !
	`°rˇ£cmp
(opname,"xor"))

552 
›
 = 
BITOP_XOR
;

553 if((
›«me
[0] ='n' || o≤ame[0] ='N'Ë&& !
	`°rˇ£cmp
(opname,"not"))

554 
›
 = 
BITOP_NOT
;

556 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

561 i‡(
›
 =
BITOP_NOT
 && 
c
->
¨gc
 != 4) {

562 
	`addRïlyEº‹
(
c
,"BITOP NOT must be called withá single source key.");

567 
numkeys
 = 
c
->
¨gc
 - 3;

568 
§c
 = 
	`dÆloc
((*Ë* 
numkeys
);

569 
Àn
 = 
	`dÆloc
((Ë* 
numkeys
);

570 
obje˘s
 = 
	`dÆloc
((
robj
*Ë* 
numkeys
);

571 
j
 = 0; j < 
numkeys
; j++) {

572 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
+3]);

574 i‡(
o
 =
NULL
) {

575 
obje˘s
[
j
] = 
NULL
;

576 
§c
[
j
] = 
NULL
;

577 
Àn
[
j
] = 0;

578 
möÀn
 = 0;

582 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

583 
i
;

584 
i
 = 0; i < 
j
; i++) {

585 i‡(
obje˘s
[
i
])

586 
	`de¸RefCou¡
(
obje˘s
[
i
]);

588 
	`d‰ì
(
§c
);

589 
	`d‰ì
(
Àn
);

590 
	`d‰ì
(
obje˘s
);

593 
obje˘s
[
j
] = 
	`gëDecodedObje˘
(
o
);

594 
§c
[
j
] = 
obje˘s
[j]->
±r
;

595 
Àn
[
j
] = 
	`sd¶í
(
obje˘s
[j]->
±r
);

596 i‡(
Àn
[
j
] > 
maxÀn
) maxlen =Üen[j];

597 i‡(
j
 =0 || 
Àn
[j] < 
möÀn
) minlen =Üen[j];

601 i‡(
maxÀn
) {

602 
ªs
 = (*Ë
	`sd¢ewÀn
(
NULL
,
maxÀn
);

603 
ouçut
, 
byã
;

604 
i
;

609 
j
 = 0;

610 i‡(
möÀn
 >()*4 && 
numkeys
 <= 16) {

611 *
Õ
[16];

612 *
Ães
 = (*Ë
ªs
;

615 
	`mem˝y
(
Õ
,
§c
,(*)*
numkeys
);

616 
	`mem˝y
(
ªs
,
§c
[0],
möÀn
);

619 i‡(
›
 =
BITOP_AND
) {

620 
möÀn
 >= ()*4) {

621 
i
 = 1; i < 
numkeys
; i++) {

622 
Ães
[0] &
Õ
[
i
][0];

623 
Ães
[1] &
Õ
[
i
][1];

624 
Ães
[2] &
Õ
[
i
][2];

625 
Ães
[3] &
Õ
[
i
][3];

626 
Õ
[
i
]+=4;

628 
Ães
+=4;

629 
j
 += ()*4;

630 
möÀn
 -= ()*4;

632 } i‡(
›
 =
BITOP_OR
) {

633 
möÀn
 >= ()*4) {

634 
i
 = 1; i < 
numkeys
; i++) {

635 
Ães
[0] |
Õ
[
i
][0];

636 
Ães
[1] |
Õ
[
i
][1];

637 
Ães
[2] |
Õ
[
i
][2];

638 
Ães
[3] |
Õ
[
i
][3];

639 
Õ
[
i
]+=4;

641 
Ães
+=4;

642 
j
 += ()*4;

643 
möÀn
 -= ()*4;

645 } i‡(
›
 =
BITOP_XOR
) {

646 
möÀn
 >= ()*4) {

647 
i
 = 1; i < 
numkeys
; i++) {

648 
Ães
[0] ^
Õ
[
i
][0];

649 
Ães
[1] ^
Õ
[
i
][1];

650 
Ães
[2] ^
Õ
[
i
][2];

651 
Ães
[3] ^
Õ
[
i
][3];

652 
Õ
[
i
]+=4;

654 
Ães
+=4;

655 
j
 += ()*4;

656 
möÀn
 -= ()*4;

658 } i‡(
›
 =
BITOP_NOT
) {

659 
möÀn
 >= ()*4) {

660 
Ães
[0] = ~lres[0];

661 
Ães
[1] = ~lres[1];

662 
Ães
[2] = ~lres[2];

663 
Ães
[3] = ~lres[3];

664 
Ães
+=4;

665 
j
 += ()*4;

666 
möÀn
 -= ()*4;

672 ; 
j
 < 
maxÀn
; j++) {

673 
ouçut
 = (
Àn
[0] <
j
Ë? 0 : 
§c
[0][j];

674 i‡(
›
 =
BITOP_NOT
Ë
ouçut
 = ~output;

675 
i
 = 1; i < 
numkeys
; i++) {

676 
byã
 = (
Àn
[
i
] <
j
Ë? 0 : 
§c
[i][j];

677 
›
) {

678 
BITOP_AND
: 
ouçut
 &
byã
; ;

679 
BITOP_OR
: 
ouçut
 |
byã
; ;

680 
BITOP_XOR
: 
ouçut
 ^
byã
; ;

683 
ªs
[
j
] = 
ouçut
;

686 
j
 = 0; j < 
numkeys
; j++) {

687 i‡(
obje˘s
[
j
])

688 
	`de¸RefCou¡
(
obje˘s
[
j
]);

690 
	`d‰ì
(
§c
);

691 
	`d‰ì
(
Àn
);

692 
	`d‰ì
(
obje˘s
);

695 i‡(
maxÀn
) {

696 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
ªs
);

697 
	`£tKey
(
c
->
db
,
èrgëkey
,
o
,
NULL
);

698 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
èrgëkey
,
c
->
db
->
id
);

699 
	`de¸RefCou¡
(
o
);

700 } i‡(
	`dbDñëe
(
c
->
db
,
èrgëkey
)) {

701 
	`sig«lModifõdKey
(
c
->
db
,
èrgëkey
);

702 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
èrgëkey
,
c
->
db
->
id
);

704 
£rvî
.
dúty
++;

705 
	`addRïlyL⁄gL⁄g
(
c
,
maxÀn
);

706 
	}
}

709 
	$bôcou¡Comm™d
(
˛õ¡
 *
c
) {

710 
robj
 *
o
;

711 
°¨t
, 
íd
, 
°æí
;

712 *
p
;

713 
Œbuf
[32];

715 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

716 
	`lockDbRód
(
c
->
db
);

718 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

719 
	`u∆ockDb
(
c
->
db
);

720 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

722 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

723 
	`u∆ockDb
(
c
->
db
);

724 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

730 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

731 
p
 = (*Ë
Œbuf
;

732 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

734 
p
 = (*Ë
o
->
±r
;

735 
°æí
 = 
	`sd¶í
(
o
->
±r
);

739 i‡(
c
->
¨gc
 == 4) {

740 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
) {

741 
	`u∆ockDb
(
c
->
db
);

742 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

745 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
) {

746 
	`u∆ockDb
(
c
->
db
);

747 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

751 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

752 i‡(
íd
 < 0Ëíd = 
°æí
+end;

753 i‡(
°¨t
 < 0) start = 0;

754 i‡(
íd
 < 0)Énd = 0;

755 i‡(
íd
 >
°æí
)Énd = strlen-1;

756 } i‡(
c
->
¨gc
 == 2) {

758 
°¨t
 = 0;

759 
íd
 = 
°æí
-1;

761 
	`u∆ockDb
(
c
->
db
);

762 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

764 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

770 i‡(
°¨t
 > 
íd
) {

771 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

773 
byãs
 = 
íd
-
°¨t
+1;

775 
	`addRïlyL⁄gL⁄g
(
c
,
	`ªdisP›cou¡
(
p
+
°¨t
,
byãs
));

777 
	`u∆ockDb
(
c
->
db
);

778 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

779 
	}
}

782 
	$bôposComm™d
(
˛õ¡
 *
c
) {

783 
robj
 *
o
;

784 
bô
, 
°¨t
, 
íd
, 
°æí
;

785 *
p
;

786 
Œbuf
[32];

787 
íd_giví
 = 0;

791 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
bô
,
NULL
Ë!
VR_OK
)

793 i‡(
bô
 != 0 && bit != 1) {

794 
	`addRïlyEº‹
(
c
, "The bitárgument must be 1 or 0.");

798 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

799 
	`lockDbRód
(
c
->
db
);

803 i‡((
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1])Ë=
NULL
) {

804 
	`u∆ockDb
(
c
->
db
);

805 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

806 
	`addRïlyL⁄gL⁄g
(
c
, 
bô
 ? -1 : 0);

809 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

810 
	`u∆ockDb
(
c
->
db
);

811 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

817 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

818 
p
 = (*Ë
Œbuf
;

819 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

821 
p
 = (*Ë
o
->
±r
;

822 
°æí
 = 
	`sd¶í
(
o
->
±r
);

826 i‡(
c
->
¨gc
 == 4 || c->argc == 5) {

827 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
°¨t
,
NULL
Ë!
VR_OK
) {

828 
	`u∆ockDb
(
c
->
db
);

829 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

832 i‡(
c
->
¨gc
 == 5) {

833 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[4],&
íd
,
NULL
Ë!
VR_OK
) {

834 
	`u∆ockDb
(
c
->
db
);

835 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

838 
íd_giví
 = 1;

840 
íd
 = 
°æí
-1;

843 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

844 i‡(
íd
 < 0Ëíd = 
°æí
+end;

845 i‡(
°¨t
 < 0) start = 0;

846 i‡(
íd
 < 0)Énd = 0;

847 i‡(
íd
 >
°æí
)Énd = strlen-1;

848 } i‡(
c
->
¨gc
 == 3) {

850 
°¨t
 = 0;

851 
íd
 = 
°æí
-1;

853 
	`u∆ockDb
(
c
->
db
);

854 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

856 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

862 i‡(
°¨t
 > 
íd
) {

863 
	`addRïlyL⁄gL⁄g
(
c
, -1);

865 
byãs
 = 
íd
-
°¨t
+1;

866 
pos
 = 
	`ªdisBôpos
(
p
+
°¨t
,
byãs
,
bô
);

875 i‡(
íd_giví
 && 
bô
 =0 && 
pos
 =
byãs
*8) {

876 
	`u∆ockDb
(
c
->
db
);

877 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

878 
	`addRïlyL⁄gL⁄g
(
c
,-1);

881 i‡(
pos
 !-1Ëpo†+
°¨t
*8;

882 
	`addRïlyL⁄gL⁄g
(
c
,
pos
);

884 
	`u∆ockDb
(
c
->
db
);

885 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

886 
	}
}

898 
	sbôfõldOp
 {

899 
uöt64_t
 
	moff£t
;

900 
öt64_t
 
	mi64
;

901 
	m›code
;

902 
	mowty≥
;

903 
	mbôs
;

904 
	msign
;

907 
	$bôfõldComm™d
(
˛õ¡
 *
c
) {

908 
robj
 *
o
;

909 
size_t
 
bôoff£t
;

910 
j
, 
num›s
 = 0, 
ch™ges
 = 0;

911 
bôfõldOp
 *
›s
 = 
NULL
;

912 
owty≥
 = 
BFOVERFLOW_WRAP
;

914 
j
 = 2; j < 
c
->
¨gc
; j++) {

915 
ªm¨gs
 = 
c
->
¨gc
-
j
-1;

916 *
subcmd
 = 
c
->
¨gv
[
j
]->
±r
;

917 
›code
;

918 
i64
 = 0;

919 
sign
 = 0;

920 
bôs
 = 0;

922 i‡(!
	`°rˇ£cmp
(
subcmd
,"gë"Ë&& 
ªm¨gs
 >= 2)

923 
›code
 = 
BITFIELDOP_GET
;

924 i‡(!
	`°rˇ£cmp
(
subcmd
,"£t"Ë&& 
ªm¨gs
 >= 3)

925 
›code
 = 
BITFIELDOP_SET
;

926 i‡(!
	`°rˇ£cmp
(
subcmd
,"ö¸by"Ë&& 
ªm¨gs
 >= 3)

927 
›code
 = 
BITFIELDOP_INCRBY
;

928 i‡(!
	`°rˇ£cmp
(
subcmd
,"ovîÊow"Ë&& 
ªm¨gs
 >= 1) {

929 *
owty≥«me
 = 
c
->
¨gv
[
j
+1]->
±r
;

930 
j
++;

931 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"wrap"))

932 
owty≥
 = 
BFOVERFLOW_WRAP
;

933 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"sat"))

934 
owty≥
 = 
BFOVERFLOW_SAT
;

935 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"fail"))

936 
owty≥
 = 
BFOVERFLOW_FAIL
;

938 
	`addRïlyEº‹
(
c
,"Invalid OVERFLOWÅype specified");

939 
	`d‰ì
(
›s
);

944 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

945 
	`d‰ì
(
›s
);

950 i‡(
	`gëBôfõldTy≥FromArgumít
(
c
,c->
¨gv
[
j
+1],&
sign
,&
bôs
Ë!
VR_OK
) {

951 
	`d‰ì
(
›s
);

955 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[
j
+2],&
bôoff£t
,1,
bôs
Ë!
VR_OK
){

956 
	`d‰ì
(
›s
);

961 i‡(
›code
 !
BITFIELDOP_GET
) {

962 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
j
+3],&
i64
,
NULL
Ë!
VR_OK
){

963 
	`d‰ì
(
›s
);

969 
›s
 = 
	`dªÆloc
(›s,(*›s)*(
num›s
+1));

970 
›s
[
num›s
].
off£t
 = 
bôoff£t
;

971 
›s
[
num›s
].
i64
 = i64;

972 
›s
[
num›s
].
›code
 = opcode;

973 
›s
[
num›s
].
owty≥
 = owtype;

974 
›s
[
num›s
].
bôs
 = bits;

975 
›s
[
num›s
].
sign
 = sign;

976 
num›s
++;

978 
j
 +3 - (
›code
 =
BITFIELDOP_GET
);

981 
	`addRïlyMu…iBulkLí
(
c
,
num›s
);

984 
j
 = 0; j < 
num›s
; j++) {

985 
bôfõldOp
 *
this›
 = 
›s
+
j
;

988 i‡(
this›
->
›code
 =
BITFIELDOP_SET
 ||

989 
this›
->
›code
 =
BITFIELDOP_INCRBY
)

997 i‡((
o
 = 
	`lookupSåögF‹BôComm™d
(
c
,

998 
this›
->
off£t
 + (this›->
bôs
-1), 
NULL
)) == NULL) ;

1003 i‡(
this›
->
sign
) {

1004 
öt64_t
 
ﬁdvÆ
, 
√wvÆ
, 
wøµed
, 
ªtvÆ
;

1005 
ovîÊow
;

1007 
ﬁdvÆ
 = 
	`gëSig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1008 
this›
->
bôs
);

1010 i‡(
this›
->
›code
 =
BITFIELDOP_INCRBY
) {

1011 
√wvÆ
 = 
ﬁdvÆ
 + 
this›
->
i64
;

1012 
ovîÊow
 = 
	`checkSig√dBôfõldOvîÊow
(
ﬁdvÆ
,

1013 
this›
->
i64
,this›->
bôs
,this›->
owty≥
,&
wøµed
);

1014 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1015 
ªtvÆ
 = 
√wvÆ
;

1017 
√wvÆ
 = 
this›
->
i64
;

1018 
ovîÊow
 = 
	`checkSig√dBôfõldOvîÊow
(
√wvÆ
,

1019 0,
this›
->
bôs
,this›->
owty≥
,&
wøµed
);

1020 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1021 
ªtvÆ
 = 
ﬁdvÆ
;

1026 i‡(!(
ovîÊow
 && 
this›
->
owty≥
 =
BFOVERFLOW_FAIL
)) {

1027 
	`addRïlyL⁄gL⁄g
(
c
,
ªtvÆ
);

1028 
	`£tSig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1029 
this›
->
bôs
,
√wvÆ
);

1031 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1034 
uöt64_t
 
ﬁdvÆ
, 
√wvÆ
, 
wøµed
, 
ªtvÆ
;

1035 
ovîÊow
;

1037 
ﬁdvÆ
 = 
	`gëUnsig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1038 
this›
->
bôs
);

1040 i‡(
this›
->
›code
 =
BITFIELDOP_INCRBY
) {

1041 
√wvÆ
 = 
ﬁdvÆ
 + 
this›
->
i64
;

1042 
ovîÊow
 = 
	`checkUnsig√dBôfõldOvîÊow
(
ﬁdvÆ
,

1043 
this›
->
i64
,this›->
bôs
,this›->
owty≥
,&
wøµed
);

1044 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1045 
ªtvÆ
 = 
√wvÆ
;

1047 
√wvÆ
 = 
this›
->
i64
;

1048 
ovîÊow
 = 
	`checkUnsig√dBôfõldOvîÊow
(
√wvÆ
,

1049 0,
this›
->
bôs
,this›->
owty≥
,&
wøµed
);

1050 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1051 
ªtvÆ
 = 
ﬁdvÆ
;

1055 i‡(!(
ovîÊow
 && 
this›
->
owty≥
 =
BFOVERFLOW_FAIL
)) {

1056 
	`addRïlyL⁄gL⁄g
(
c
,
ªtvÆ
);

1057 
	`£tUnsig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1058 
this›
->
bôs
,
√wvÆ
);

1060 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1063 
ch™ges
++;

1066 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]);

1067 
size_t
 
ﬁí
 = (
o
 =
NULL
Ë? 0 : 
	`sd¶í
(o->
±r
);

1068 
buf
[9];

1074 
	`mem£t
(
buf
,0,9);

1075 *
§c
 = 
o
 ? o->
±r
 : 
NULL
;

1076 
i
;

1077 
size_t
 
byã
 = 
this›
->
off£t
 >> 3;

1078 
i
 = 0; i < 9; i++) {

1079 i‡(
§c
 =
NULL
 || 
i
+
byã
 >
ﬁí
) ;

1080 
buf
[
i
] = 
§c
[i+
byã
];

1085 i‡(
this›
->
sign
) {

1086 
öt64_t
 
vÆ
 = 
	`gëSig√dBôfõld
(
buf
,
this›
->
off£t
-(
byã
*8),

1087 
this›
->
bôs
);

1088 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1090 
uöt64_t
 
vÆ
 = 
	`gëUnsig√dBôfõld
(
buf
,
this›
->
off£t
-(
byã
*8),

1091 
this›
->
bôs
);

1092 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1097 i‡(
ch™ges
) {

1098 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1099 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£tbô",
c
->
¨gv
[1],c->
db
->
id
);

1100 
£rvî
.
dúty
 +
ch™ges
;

1102 
	`d‰ì
(
›s
);

1103 
	}
}

	@src/vr_bitops.h

1 #i‚de‡
_VR_BITOPS_H_


2 
	#_VR_BITOPS_H_


	)

4 
size_t
 
ªdisP›cou¡
(*
s
, 
cou¡
);

5 
ªdisBôpos
(*
s
, 
cou¡
, 
bô
);

6 
£tUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, uöt64_à
vÆue
);

7 
£tSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, 
öt64_t
 
vÆue
);

8 
uöt64_t
 
gëUnsig√dBôfõld
(*
p
, uöt64_à
off£t
, uöt64_à
bôs
);

9 
öt64_t
 
gëSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
);

10 
checkUnsig√dBôfõldOvîÊow
(
uöt64_t
 
vÆue
, 
öt64_t
 
ö¸
, uöt64_à
bôs
, 
owty≥
, uöt64_à*
limô
);

11 
checkSig√dBôfõldOvîÊow
(
öt64_t
 
vÆue
, i¡64_à
ö¸
, 
uöt64_t
 
bôs
, 
owty≥
, i¡64_à*
limô
);

12 
¥ötBôs
(*
p
, 
cou¡
);

13 
gëBôOff£tFromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, 
size_t
 *
off£t
, 
hash
, 
bôs
);

14 
gëBôfõldTy≥FromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, *
sign
, *
bôs
);

15 
robj
 *
lookupSåögF‹BôComm™d
(
˛õ¡
 *
c
, 
size_t
 
maxbô
, *
expúed
);

16 
£tbôComm™d
(
˛õ¡
 *
c
);

17 
gëbôComm™d
(
˛õ¡
 *
c
);

18 
bô›Comm™d
(
˛õ¡
 *
c
);

19 
bôcou¡Comm™d
(
˛õ¡
 *
c
);

20 
bôposComm™d
(
˛õ¡
 *
c
);

21 
bôfõldComm™d
(
˛õ¡
 *
c
);

	@src/vr_bitops.h

1 #i‚de‡
_VR_BITOPS_H_


2 
	#_VR_BITOPS_H_


	)

4 
size_t
 
ªdisP›cou¡
(*
s
, 
cou¡
);

5 
ªdisBôpos
(*
s
, 
cou¡
, 
bô
);

6 
£tUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, uöt64_à
vÆue
);

7 
£tSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, 
öt64_t
 
vÆue
);

8 
uöt64_t
 
gëUnsig√dBôfõld
(*
p
, uöt64_à
off£t
, uöt64_à
bôs
);

9 
öt64_t
 
gëSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
);

10 
checkUnsig√dBôfõldOvîÊow
(
uöt64_t
 
vÆue
, 
öt64_t
 
ö¸
, uöt64_à
bôs
, 
owty≥
, uöt64_à*
limô
);

11 
checkSig√dBôfõldOvîÊow
(
öt64_t
 
vÆue
, i¡64_à
ö¸
, 
uöt64_t
 
bôs
, 
owty≥
, i¡64_à*
limô
);

12 
¥ötBôs
(*
p
, 
cou¡
);

13 
gëBôOff£tFromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, 
size_t
 *
off£t
, 
hash
, 
bôs
);

14 
gëBôfõldTy≥FromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, *
sign
, *
bôs
);

15 
robj
 *
lookupSåögF‹BôComm™d
(
˛õ¡
 *
c
, 
size_t
 
maxbô
, *
expúed
);

16 
£tbôComm™d
(
˛õ¡
 *
c
);

17 
gëbôComm™d
(
˛õ¡
 *
c
);

18 
bô›Comm™d
(
˛õ¡
 *
c
);

19 
bôcou¡Comm™d
(
˛õ¡
 *
c
);

20 
bôposComm™d
(
˛õ¡
 *
c
);

21 
bôfõldComm™d
(
˛õ¡
 *
c
);

	@src/vr_block.c

1 
	~<vr_c‹e.h
>

7 
	$unblockClõ¡
(
˛õ¡
 *
c
) {

8 i‡(
c
->
bty≥
 =
BLOCKED_LIST
) {

9 
	`unblockClõ¡WaôögD©a
(
c
);

10 } i‡(
c
->
bty≥
 =
BLOCKED_WAIT
) {

11 
	`unblockClõ¡WaôögRïliˇs
(
c
);

13 
	`£rvîP™ic
("Unknown btype in unblockClient().");

17 
c
->
Êags
 &~
CLIENT_BLOCKED
;

18 
c
->
bty≥
 = 
BLOCKED_NONE
;

19 
c
->
vñ
->
bp›_blocked_˛õ¡s
--;

22 i‡(!(
c
->
Êags
 & 
CLIENT_UNBLOCKED
)) {

23 
c
->
Êags
 |
CLIENT_UNBLOCKED
;

24 
	`dli°AddNodeTaû
(
c
->
vñ
->
unblocked_˛õ¡s
,c);

26 
	}
}

37 
	$gëTimeoutFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
obje˘
, *
timeout
, 
unô
) {

38 
tvÆ
;

40 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
obje˘
,&
tvÆ
,

41 "timeouài†nŸá¿öãgî o∏ouào‡ønge"Ë!
VR_OK
)

42  
VR_ERROR
;

44 i‡(
tvÆ
 < 0) {

45 
	`addRïlyEº‹
(
c
,"timeout isÇegative");

46  
VR_ERROR
;

49 i‡(
tvÆ
 > 0) {

50 i‡(
unô
 =
UNIT_SECONDS
Ë
tvÆ
 *= 1000;

51 
tvÆ
 +
	`vr_m£c_now
();

53 *
timeout
 = 
tvÆ
;

55  
VR_OK
;

56 
	}
}

62 
	$blockClõ¡
(
˛õ¡
 *
c
, 
bty≥
) {

63 
c
->
Êags
 |
CLIENT_BLOCKED
;

64 
c
->
bty≥
 = btype;

65 
c
->
vñ
->
bp›_blocked_˛õ¡s
++;

66 
	}
}

	@src/vr_block.c

1 
	~<vr_c‹e.h
>

7 
	$unblockClõ¡
(
˛õ¡
 *
c
) {

8 i‡(
c
->
bty≥
 =
BLOCKED_LIST
) {

9 
	`unblockClõ¡WaôögD©a
(
c
);

10 } i‡(
c
->
bty≥
 =
BLOCKED_WAIT
) {

11 
	`unblockClõ¡WaôögRïliˇs
(
c
);

13 
	`£rvîP™ic
("Unknown btype in unblockClient().");

17 
c
->
Êags
 &~
CLIENT_BLOCKED
;

18 
c
->
bty≥
 = 
BLOCKED_NONE
;

19 
c
->
vñ
->
bp›_blocked_˛õ¡s
--;

22 i‡(!(
c
->
Êags
 & 
CLIENT_UNBLOCKED
)) {

23 
c
->
Êags
 |
CLIENT_UNBLOCKED
;

24 
	`dli°AddNodeTaû
(
c
->
vñ
->
unblocked_˛õ¡s
,c);

26 
	}
}

37 
	$gëTimeoutFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
obje˘
, *
timeout
, 
unô
) {

38 
tvÆ
;

40 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
obje˘
,&
tvÆ
,

41 "timeouài†nŸá¿öãgî o∏ouào‡ønge"Ë!
VR_OK
)

42  
VR_ERROR
;

44 i‡(
tvÆ
 < 0) {

45 
	`addRïlyEº‹
(
c
,"timeout isÇegative");

46  
VR_ERROR
;

49 i‡(
tvÆ
 > 0) {

50 i‡(
unô
 =
UNIT_SECONDS
Ë
tvÆ
 *= 1000;

51 
tvÆ
 +
	`vr_m£c_now
();

53 *
timeout
 = 
tvÆ
;

55  
VR_OK
;

56 
	}
}

62 
	$blockClõ¡
(
˛õ¡
 *
c
, 
bty≥
) {

63 
c
->
Êags
 |
CLIENT_BLOCKED
;

64 
c
->
bty≥
 = btype;

65 
c
->
vñ
->
bp›_blocked_˛õ¡s
++;

66 
	}
}

	@src/vr_block.h

1 #i‚de‡
_VR_BLOCK_H_


2 
	#_VR_BLOCK_H_


	)

7 
	sblockögSèã
 {

10 
	mtimeout
;

15 
di˘
 *
	mkeys
;

18 
robj
 *
	mèrgë
;

23 
	mnumª∂iˇs
;

24 
	mª∂off£t
;

25 } 
	tblockögSèã
;

27 
blockClõ¡
(
˛õ¡
 *
c
, 
bty≥
);

28 
unblockClõ¡
(
˛õ¡
 *
c
);

29 
gëTimeoutFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
obje˘
, *
timeout
, 
unô
);

	@src/vr_block.h

1 #i‚de‡
_VR_BLOCK_H_


2 
	#_VR_BLOCK_H_


	)

7 
	sblockögSèã
 {

10 
	mtimeout
;

15 
di˘
 *
	mkeys
;

18 
robj
 *
	mèrgë
;

23 
	mnumª∂iˇs
;

24 
	mª∂off£t
;

25 } 
	tblockögSèã
;

27 
blockClõ¡
(
˛õ¡
 *
c
, 
bty≥
);

28 
unblockClõ¡
(
˛õ¡
 *
c
);

29 
gëTimeoutFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
obje˘
, *
timeout
, 
unô
);

	@src/vr_client.c

1 
	~<vr_c‹e.h
>

3 
	gncuº_cc⁄n
 = 0;

5 
£tPrŸocﬁEº‹
(
˛õ¡
 *
c
, 
pos
);

10 
size_t
 
	$sdsZmÆlocSize
(
sds
 
s
) {

11 *
sh
 = 
	`sdsAŒocPå
(
s
);

12  
	`dmÆloc_size
(
sh
);

13 
	}
}

15 *
	$dupClõ¡RïlyVÆue
(*
o
) {

16  
o
;

17 
	}
}

19 
	$‰ìClõ¡RïlyVÆue
(*
o
) {

20 
	`‰ìObje˘
(
o
);

21 
	}
}

23 
	$li°M©chObje˘s
(*
a
, *
b
) {

24  
	`equÆSåögObje˘s
(
a
,
b
);

25 
	}
}

27 
˛õ¡
 *
	$¸óãClõ¡
(
vr_evíéo›
 *
vñ
, 
c⁄n
 *conn) {

29 
˛õ¡
 *
c
 = 
	`dÆloc
((client));

36 i‡(
c⁄n
->
sd
 != -1) {

38 
	`vr_£t_n⁄blockög
(
c⁄n
->
sd
);

40 
	`vr_£t_t˝nodñay
(
c⁄n
->
sd
);

42 i‡(
£rvî
.
t˝kì∑live
)

43 
	`vr_£t_t˝kì∑live
(
c⁄n
->
sd
,
£rvî
.
t˝kì∑live
,0,0);

45 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
,
c⁄n
->
sd
,
AE_READABLE
,

46 
ªadQuîyFromClõ¡
, 
c
Ë=
AE_ERR
)

48 
	`log_îr‹
("UnrecoverableÉrror creating client ipfd fileÉvent.");

49 
	`d‰ì
(
c
);

50  
NULL
;

54 
	`£À˘Db
(
c
,0);

56 
c
->
id
 = 
vñ
->
√xt_˛õ¡_id
++;

58 
c
->
c⁄n
 = conn;

60 
c
->
vñ
 = vel;

62 
c
->
sˇnid
 = -1;

64 
c
->
«me
 = 
NULL
;

66 
c
->
buÂos
 = 0;

68 
c
->
quîybuf
 = 
	`sd£m±y
();

70 
c
->
quîybuf_≥ak
 = 0;

72 
c
->
ªqty≥
 = 0;

74 
c
->
¨gc
 = 0;

76 
c
->
¨gv
 = 
NULL
;

78 
c
->
cmd
 = c->
œ°cmd
 = 
NULL
;

80 
c
->
mu…ibulkÀn
 = 0;

81 
c
->
bulkÀn
 = -1;

82 
c
->
£¡Àn
 = 0;

83 
c
->
Êags
 = 0;

84 
c
->
˘ime
 = c->
œ°öãø˘i⁄
 = 
vñ
->
unixtime
;

85 
c
->
authítiˇãd
 = 0;

86 
c
->
ª∂°©e
 = 
REPL_STATE_NONE
;

87 
c
->
ª∂_put_⁄löe_⁄_ack
 = 0;

88 
c
->
ª∂off
 = 0;

89 
c
->
ª∂_ack_off
 = 0;

90 
c
->
ª∂_ack_time
 = 0;

91 
c
->
¶ave_li°íög_p‹t
 = 0;

92 
c
->
¶ave_ˇ∑
 = 
SLAVE_CAPA_NONE
;

93 
c
->
ª∂y
 = 
	`dli°Cª©e
();

94 
c
->
ª∂y_byãs
 = 0;

95 
c
->
obuf_so·_limô_ªached_time
 = 0;

97 
	`dli°SëFªeMëhod
(
c
->
ª∂y
,
‰ìClõ¡RïlyVÆue
);

98 
	`dli°SëDupMëhod
(
c
->
ª∂y
,
dupClõ¡RïlyVÆue
);

99 
c
->
bty≥
 = 
BLOCKED_NONE
;

100 
c
->
bp›
.
timeout
 = 0;

101 
c
->
bp›
.
keys
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

102 
c
->
bp›
.
èrgë
 = 
NULL
;

103 
c
->
bp›
.
numª∂iˇs
 = 0;

104 
c
->
bp›
.
ª∂off£t
 = 0;

105 
c
->
woff
 = 0;

106 
c
->
w©ched_keys
 = 
	`dli°Cª©e
();

107 
c
->
pubsub_ch™√ls
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

108 
c
->
pubsub_∑âîns
 = 
	`dli°Cª©e
();

109 
c
->
≥îid
 = 
NULL
;

110 
c
->
curidx
 = -1;

111 
c
->
èridx
 = -1;

112 
c
->
°ïs
 = 0;

113 
c
->
ˇche
 = 
NULL
;

114 
	`dli°SëFªeMëhod
(
c
->
pubsub_∑âîns
,
de¸RefCou¡Void
);

115 
	`dli°SëM©chMëhod
(
c
->
pubsub_∑âîns
,
li°M©chObje˘s
);

116 i‡(
c⁄n
->
sd
 !-1Ë
	`dli°AddNodeTaû
(
vñ
->
˛õ¡s
,
c
);

117 
	`öôClõ¡Mu…iSèã
(
c
);

118  
c
;

119 
	}
}

144 
	$¥ï¨eClõ¡ToWrôe
(
˛õ¡
 *
c
) {

147 i‡(
c
->
Êags
 & 
CLIENT_LUA
Ë 
VR_OK
;

150 i‡(
c
->
Êags
 & (
CLIENT_REPLY_OFF
|
CLIENT_REPLY_SKIP
)Ë 
VR_ERROR
;

155 i‡((
c
->
Êags
 & 
CLIENT_MASTER
) &&

156 !(
c
->
Êags
 & 
CLIENT_MASTER_FORCE_REPLY
)Ë 
VR_ERROR
;

158 i‡(
c
->
c⁄n
->
sd
 <0Ë 
VR_ERROR
;

165 i‡(!
	`˛õ¡HasPídögRïlõs
(
c
) &&

166 !(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) &&

167 (
c
->
ª∂°©e
 =
REPL_STATE_NONE
 ||

168 (
c
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 && !c->
ª∂_put_⁄löe_⁄_ack
)))

176 
c
->
Êags
 |
CLIENT_PENDING_WRITE
;

177 
	`dli°AddNodeHód
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,c);

181  
VR_OK
;

182 
	}
}

187 
robj
 *
	$dupLa°Obje˘IfNìded
(
dli°
 *
ª∂y
) {

188 
robj
 *
√w
, *
cur
;

189 
dli°Node
 *
 
;

190 
	`ASSERT
(
	`dli°Lígth
(
ª∂y
) > 0);

191 
 
 = 
	`dli°La°
(
ª∂y
);

192 
cur
 = 
	`dli°NodeVÆue
(
 
);

193 i‡(
cur
->
c⁄°™t
) {

194 
√w
 = 
	`dupSåögObje˘
(
cur
);

195 
	`dli°NodeVÆue
(
 
Ë
√w
;

197  
	`dli°NodeVÆue
(
 
);

198 
	}
}

204 
	$_addRïlyToBuf„r
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

205 
size_t
 
avaûabÀ
 = (
c
->
buf
)-c->
buÂos
;

207 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
Ë 
VR_OK
;

211 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë> 0Ë 
VR_ERROR
;

214 i‡(
Àn
 > 
avaûabÀ
Ë 
VR_ERROR
;

216 
	`mem˝y
(
c
->
buf
+c->
buÂos
,
s
,
Àn
);

217 
c
->
buÂos
+=
Àn
;

218  
VR_OK
;

219 
	}
}

222 
	$_addRïlyObje˘ToLi°
(
˛õ¡
 *
c
, 
robj
 *
o
) {

223 
robj
 *
èû
, *
obj
;

225 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

227 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

228 i‡(
o
->
c⁄°™t
)

229 
obj
 = 
o
;

231 
obj
 = 
	`dupSåögObje˘
(
o
);

232 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
obj
);

233 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
obj
);

235 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

238 i‡(
èû
->
±r
 !
NULL
 &&

239 
èû
->
ícodög
 =
OBJ_ENCODING_RAW
 &&

240 
	`sd¶í
(
èû
->
±r
)+sd¶í(
o
->±rË<
PROTO_REPLY_CHUNK_BYTES
)

242 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

243 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

244 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
o
->±r,
	`sd¶í
(o->ptr));

245 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

247 i‡(
o
->
c⁄°™t
)

248 
obj
 = 
o
;

250 
obj
 = 
	`dupSåögObje˘
(
o
);

251 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
obj
);

252 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
obj
);

255 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

256 
	}
}

261 
	$_addRïlySdsToLi°
(
˛õ¡
 *
c
, 
sds
 
s
) {

262 
robj
 *
èû
;

264 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) {

265 
	`sds‰ì
(
s
);

269 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

270 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
s
));

271 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
s
);

273 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

276 i‡(
èû
->
±r
 !
NULL
 &&Åaû->
ícodög
 =
OBJ_ENCODING_RAW
 &&

277 
	`sd¶í
(
èû
->
±r
)+sd¶í(
s
Ë<
PROTO_REPLY_CHUNK_BYTES
)

279 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

280 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

281 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
s
,
	`sd¶í
(s));

282 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

283 
	`sds‰ì
(
s
);

285 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
s
));

286 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
s
);

289 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

290 
	}
}

293 
	$_addRïlySåögToLi°
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

294 
robj
 *
èû
;

296 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

298 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

299 
robj
 *
o
 = 
	`¸óãSåögObje˘
(
s
,
Àn
);

301 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
o
);

302 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

304 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

307 i‡(
èû
->
±r
 !
NULL
 &&Åaû->
ícodög
 =
OBJ_ENCODING_RAW
 &&

308 
	`sd¶í
(
èû
->
±r
)+
Àn
 <
PROTO_REPLY_CHUNK_BYTES
)

310 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

311 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

312 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
s
,
Àn
);

313 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

315 
robj
 *
o
 = 
	`¸óãSåögObje˘
(
s
,
Àn
);

317 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
o
);

318 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

321 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

322 
	}
}

329 
	$addRïly
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

331 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) ;

341 i‡(
	`sdsEncodedObje˘
(
obj
)) {

342 i‡(
	`_addRïlyToBuf„r
(
c
,
obj
->
±r
,
	`sd¶í
(obj->±r)Ë!
VR_OK
)

343 
	`_addRïlyObje˘ToLi°
(
c
,
obj
);

344 } i‡(
obj
->
ícodög
 =
OBJ_ENCODING_INT
) {

346 
robj
 *
obj_√w
;

350 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë=0 && ((c->
buf
Ë- c->
buÂos
) >= 32) {

351 
buf
[32];

352 
Àn
;

354 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),()
obj
->
±r
);

356 i‡(
	`_addRïlyToBuf„r
(
c
,
buf
,
Àn
Ë=
VR_OK
)

362 
obj_√w
 = 
	`gëDecodedObje˘
(
obj
);

363 i‡(
	`_addRïlyToBuf„r
(
c
,
obj_√w
->
±r
,
	`sd¶í
(obj_√w->±r)Ë!
VR_OK
)

364 
	`_addRïlyObje˘ToLi°
(
c
,
obj_√w
);

365 i‡(
obj_√w
 !
obj
Ë
	`‰ìObje˘
(obj_new);

367 
	`£rvîP™ic
("Wrong obj->encoding ináddReply()");

369 
	}
}

372 
	$addRïlySds
(
˛õ¡
 *
c
, 
sds
 
s
) {

373 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) {

375 
	`sds‰ì
(
s
);

378 i‡(
	`_addRïlyToBuf„r
(
c
,
s
,
	`sd¶í
(s)Ë=
VR_OK
) {

379 
	`sds‰ì
(
s
);

382 
	`_addRïlySdsToLi°
(
c
,
s
);

384 
	}
}

386 
	$addRïlySåög
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

387 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) ;

388 i‡(
	`_addRïlyToBuf„r
(
c
,
s
,
Àn
Ë!
VR_OK
)

389 
	`_addRïlySåögToLi°
(
c
,
s
,
Àn
);

390 
	}
}

393 
	$addRïlyEº‹Lígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

394 
	`addRïlySåög
(
c
,"-ERR ",5);

395 
	`addRïlySåög
(
c
,
s
,
Àn
);

396 
	`addRïlySåög
(
c
,"\r\n",2);

397 
	}
}

399 
	$addRïlyEº‹
(
˛õ¡
 *
c
, c⁄° *
îr
) {

400 
	`addRïlyEº‹Lígth
(
c
,
îr
,
	`°æí
(err));

401 
	}
}

404 
	$addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...) {

405 
size_t
 
l
, 
j
;

406 
va_li°
 
≠
;

407 
	`va_°¨t
(
≠
,
fmt
);

408 
sds
 
s
 = 
	`sdsˇtv¥ötf
(
	`sd£m±y
(),
fmt
,
≠
);

409 
	`va_íd
(
≠
);

412 
l
 = 
	`sd¶í
(
s
);

413 
j
 = 0; j < 
l
; j++) {

414 i‡(
s
[
j
] == '\r' || s[j] == '\n') s[j] = ' ';

416 
	`addRïlyEº‹Lígth
(
c
,
s
,
	`sd¶í
(s));

417 
	`sds‰ì
(
s
);

418 
	}
}

420 
	$addRïlySètusLígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

421 
	`addRïlySåög
(
c
,"+",1);

422 
	`addRïlySåög
(
c
,
s
,
Àn
);

423 
	`addRïlySåög
(
c
,"\r\n",2);

424 
	}
}

426 
	$addRïlySètus
(
˛õ¡
 *
c
, c⁄° *
°©us
) {

427 
	`addRïlySètusLígth
(
c
,
°©us
,
	`°æí
(status));

428 
	}
}

431 
	$addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...) {

432 
va_li°
 
≠
;

433 
	`va_°¨t
(
≠
,
fmt
);

434 
sds
 
s
 = 
	`sdsˇtv¥ötf
(
	`sd£m±y
(),
fmt
,
≠
);

435 
	`va_íd
(
≠
);

436 
	`addRïlySètusLígth
(
c
,
s
,
	`sd¶í
(s));

437 
	`sds‰ì
(
s
);

438 
	}
}

442 *
	$addDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
) {

446 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
Ë 
NULL
;

447 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
NULL
));

448  
	`dli°La°
(
c
->
ª∂y
);

449 
	}
}

452 
	$£tDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
, *
node
, 
Àngth
) {

453 
dli°Node
 *
 
 = (dli°Node*)
node
;

454 
robj
 *
Àn
, *
√xt
;

457 i‡(
node
 =
NULL
) ;

459 
Àn
 = 
	`dli°NodeVÆue
(
 
);

460 
Àn
->
±r
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"*%ld\r\n",
Àngth
);

461 
Àn
->
ícodög
 = 
OBJ_ENCODING_RAW
;

462 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
Àn
->
±r
);

463 i‡(
 
->
√xt
 !
NULL
) {

464 
√xt
 = 
	`dli°NodeVÆue
(
 
->next);

467 i‡(
√xt
->
±r
 !
NULL
) {

468 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
Àn
->
±r
);

469 
c
->
ª∂y_byãs
 -
	`gëSåögObje˘SdsU£dMem‹y
(
√xt
);

470 
Àn
->
±r
 = 
	`sdsˇéí
÷í->±r,
√xt
->±r,
	`sd¶í
(next->ptr));

471 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
Àn
->
±r
);

472 
	`dli°DñNode
(
c
->
ª∂y
,
 
->
√xt
);

475 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

476 
	}
}

480 
	$addRïlyDoubÀ
(
˛õ¡
 *
c
, 
d
) {

481 
dbuf
[128], 
sbuf
[128];

482 
dÀn
, 
¶í
;

483 i‡(
	`isöf
(
d
)) {

486 
	`addRïlyBulkCSåög
(
c
, 
d
 > 0 ? "inf" : "-inf");

488 
dÀn
 = 
	`¢¥ötf
(
dbuf
,(dbuf),"%.17g",
d
);

489 
¶í
 = 
	`¢¥ötf
(
sbuf
,(sbuf),"$%d\r\n%s\r\n",
dÀn
,
dbuf
);

490 
	`addRïlySåög
(
c
,
sbuf
,
¶í
);

492 
	}
}

498 
	$addRïlyHum™L⁄gDoubÀ
(
˛õ¡
 *
c
, 
d
) {

499 
robj
 *
o
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
d
,1);

500 
	`addRïlyBulk
(
c
,
o
);

501 
	`de¸RefCou¡
(
o
);

502 
	}
}

507 
	$addRïlyL⁄gL⁄gWôhPªfix
(
˛õ¡
 *
c
, 
Œ
, 
¥efix
) {

508 
buf
[128];

509 
Àn
;

514 i‡(
¥efix
 ='*' && 
Œ
 < 
OBJ_SHARED_BULKHDR_LEN
 &&Ül >= 0) {

515 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[
Œ
]);

517 } i‡(
¥efix
 ='$' && 
Œ
 < 
OBJ_SHARED_BULKHDR_LEN
 &&Ül >= 0) {

518 
	`addRïly
(
c
,
sh¨ed
.
bulkhdr
[
Œ
]);

522 
buf
[0] = 
¥efix
;

523 
Àn
 = 
	`Œ2°rög
(
buf
+1,(buf)-1,
Œ
);

524 
buf
[
Àn
+1] = '\r';

525 
buf
[
Àn
+2] = '\n';

526 
	`addRïlySåög
(
c
,
buf
,
Àn
+3);

527 
	}
}

529 
	$addRïlyL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
) {

530 i‡(
Œ
 == 0)

531 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

532 i‡(
Œ
 == 1)

533 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

535 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Œ
,':');

536 
	}
}

538 
	$addRïlyMu…iBulkLí
(
˛õ¡
 *
c
, 
Àngth
) {

539 i‡(
Àngth
 < 
OBJ_SHARED_BULKHDR_LEN
)

540 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[
Àngth
]);

542 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àngth
,'*');

543 
	}
}

546 
	$addRïlyBulkLí
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

547 
size_t
 
Àn
;

549 i‡(
	`sdsEncodedObje˘
(
obj
)) {

550 
Àn
 = 
	`sd¶í
(
obj
->
±r
);

552 
n
 = ()
obj
->
±r
;

555 
Àn
 = 1;

556 i‡(
n
 < 0) {

557 
Àn
++;

558 
n
 = -n;

560 (
n
 =Ç/10) != 0) {

561 
Àn
++;

565 i‡(
Àn
 < 
OBJ_SHARED_BULKHDR_LEN
)

566 
	`addRïly
(
c
,
sh¨ed
.
bulkhdr
[
Àn
]);

568 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àn
,'$');

569 
	}
}

572 
	$addRïlyBulk
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

573 
	`addRïlyBulkLí
(
c
,
obj
);

574 
	`addRïly
(
c
,
obj
);

575 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

576 
	}
}

579 
	$addRïlyBulkCBuf„r
(
˛õ¡
 *
c
, c⁄° *
p
, 
size_t
 
Àn
) {

580 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àn
,'$');

581 
	`addRïlySåög
(
c
,
p
,
Àn
);

582 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

583 
	}
}

586 
	$addRïlyBulkSds
(
˛õ¡
 *
c
, 
sds
 
s
) {

587 
	`addRïlySds
(
c
,
	`sdsˇtfmt
(
	`sd£m±y
(),"$%u\r\n",

588 ()
	`sd¶í
(
s
)));

589 
	`addRïlySds
(
c
,
s
);

590 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

591 
	}
}

594 
	$addRïlyBulkCSåög
(
˛õ¡
 *
c
, c⁄° *
s
) {

595 i‡(
s
 =
NULL
) {

596 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

598 
	`addRïlyBulkCBuf„r
(
c
,
s
,
	`°æí
(s));

600 
	}
}

603 
	$addRïlyBulkL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
) {

604 
buf
[64];

605 
Àn
;

607 
Àn
 = 
	`Œ2°rög
(
buf
,64,
Œ
);

608 
	`addRïlyBulkCBuf„r
(
c
,
buf
,
Àn
);

609 
	}
}

615 
	$c›yClõ¡OuçutBuf„r
(
˛õ¡
 *
d°
, clõ¡ *
§c
) {

616 
	`dli°Rñó£
(
d°
->
ª∂y
);

617 
d°
->
ª∂y
 = 
	`dli°Dup
(
§c
->reply);

618 
	`mem˝y
(
d°
->
buf
,
§c
->buf,§c->
buÂos
);

619 
d°
->
buÂos
 = 
§c
->bufpos;

620 
d°
->
ª∂y_byãs
 = 
§c
->reply_bytes;

621 
	}
}

626 
	$˛õ¡HasPídögRïlõs
(
˛õ¡
 *
c
) {

627  
c
->
buÂos
 || 
	`dli°Lígth
(c->
ª∂y
);

628 
	}
}

630 
	$‰ìClõ¡Argv
(
˛õ¡
 *
c
) {

631 
j
;

632 
j
 = 0; j < 
c
->
¨gc
; j++)

633 
	`‰ìObje˘
(
c
->
¨gv
[
j
]);

634 
c
->
¨gc
 = 0;

635 
c
->
cmd
 = 
NULL
;

636 
	}
}

642 
	$disc⁄√˘Sœves
() {

643 
	`dli°Lígth
(
ª∂
.
¶aves
)) {

644 
dli°Node
 *
 
 = 
	`dli°Fú°
(
ª∂
.
¶aves
);

645 
	`‰ìClõ¡
((
˛õ¡
*)
 
->
vÆue
);

647 
	}
}

653 
	$u∆ökClõ¡FromEvíéo›
(
˛õ¡
 *
c
) {

654 
dli°Node
 *
 
;

655 
vr_evíéo›
 *
vñ
 = 
c
->vel;

657 
c
->
vñ
 = 
NULL
;

659 i‡(
c
->
°ïs
 >= 1) ;

662 i‡(
vñ
->
cuºít_˛õ¡
 =
c
Ëvñ->cuºít_˛õ¡ = 
NULL
;

667 i‡(
c
->
c⁄n
->
sd
 != -1) {

669 
 
 = 
	`dli°SórchKey
(
vñ
->
˛õ¡s
,
c
);

670 
	`ASSERT
(
 
 !
NULL
);

671 
	`dli°DñNode
(
vñ
->
˛õ¡s
,
 
);

674 
	`´DñëeFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_READABLE
);

675 
	`´DñëeFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_WRITABLE
);

679 i‡(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) {

680 
 
 = 
	`dli°SórchKey
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
c
);

681 
	`ASSERT
(
 
 !
NULL
);

682 
	`dli°DñNode
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

683 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

688 i‡(
c
->
Êags
 & 
CLIENT_UNBLOCKED
) {

689 
 
 = 
	`dli°SórchKey
(
vñ
->
unblocked_˛õ¡s
,
c
);

690 
	`ASSERT
(
 
 !
NULL
);

691 
	`dli°DñNode
(
vñ
->
unblocked_˛õ¡s
,
 
);

692 
c
->
Êags
 &~
CLIENT_UNBLOCKED
;

694 
	}
}

696 
	$lökClõ¡ToEvíéo›
(
˛õ¡
 *
c
,
vr_evíéo›
 *
vñ
) {

697 
	`dli°Push
(
vñ
->
˛õ¡s
,
c
);

698 
c
->
vñ
 = vel;

699 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_READABLE
,

700 
ªadQuîyFromClõ¡
,
c
Ë=
AE_ERR
)

702 
	`‰ìClõ¡
(
c
);

707 
	`¥o˚ssI≈utBuf„r
(
c
);

708 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

709 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

711 i‡(
	`˛õ¡HasPídögRïlõs
(
c
) &&

712 !(
c
->
Êags
&
CLIENT_PENDING_WRITE
)) {

713 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
, 
c
->
c⁄n
->
sd
, 
AE_WRITABLE
,

714 
£ndRïlyToClõ¡
, 
c
Ë=
AE_ERR
)

716 
	`‰ìClõ¡Async
(
c
);

720 
	}
}

725 
	$u∆ökClõ¡
(
˛õ¡
 *
c
) {

726 
dli°Node
 *
 
;

729 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =cËc->vñ->cuºít_˛õ¡ = 
NULL
;

734 i‡(
c
->
c⁄n
->
sd
 != -1) {

736 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s
,c);

737 
	`ASSERT
(
 
 !
NULL
);

738 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s
,
 
);

741 
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_READABLE
);

742 
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_WRITABLE
);

743 
	`c⁄n_put
(
c
->
c⁄n
);

744 
c
->
c⁄n
 = 
NULL
;

748 i‡(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) {

749 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,c);

750 
	`ASSERT
(
 
 !
NULL
);

751 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

752 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

757 i‡(
c
->
Êags
 & 
CLIENT_UNBLOCKED
) {

758 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
unblocked_˛õ¡s
,c);

759 
	`ASSERT
(
 
 !
NULL
);

760 
	`dli°DñNode
(
c
->
vñ
->
unblocked_˛õ¡s
,
 
);

761 
c
->
Êags
 &~
CLIENT_UNBLOCKED
;

763 
	}
}

765 
	$‰ìClõ¡
(
˛õ¡
 *
c
) {

766 
dli°Node
 *
 
;

773 i‡(
ª∂
.
rﬁe
 =
REPLICATION_ROLE_MASTER
 && 
c
->
Êags
 & 
CLIENT_MASTER
) {

774 
	`log_w¨n
("connection with masterÜost.");

775 i‡(!(
c
->
Êags
 & (
CLIENT_CLOSE_AFTER_REPLY
|

776 
CLIENT_CLOSE_ASAP
|

777 
CLIENT_BLOCKED
|

778 
CLIENT_UNBLOCKED
)))

780 
	`ª∂iˇti⁄CacheMa°î
(
c
);

786 i‡((
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& !(c->Êag†& 
CLIENT_MONITOR
)) {

787 
	`log_w¨n
("connection with slave %sÜost.",

788 
	`ª∂iˇti⁄GëSœveName
(
c
));

792 
	`sds‰ì
(
c
->
quîybuf
);

793 
c
->
quîybuf
 = 
NULL
;

796 i‡(
c
->
Êags
 & 
CLIENT_BLOCKED
Ë
	`unblockClõ¡
(c);

797 
	`di˘Rñó£
(
c
->
bp›
.
keys
);

800 
	`unw©chAŒKeys
(
c
);

801 
	`dli°Rñó£
(
c
->
w©ched_keys
);

804 
	`pubsubUnsubs¸ibeAŒCh™√ls
(
c
,0);

805 
	`pubsubUnsubs¸ibeAŒP©ã∫s
(
c
,0);

806 
	`di˘Rñó£
(
c
->
pubsub_ch™√ls
);

807 
	`dli°Rñó£
(
c
->
pubsub_∑âîns
);

810 
	`dli°Rñó£
(
c
->
ª∂y
);

811 
	`‰ìClõ¡Argv
(
c
);

816 
	`u∆ökClõ¡
(
c
);

820 i‡(
c
->
Êags
 & 
CLIENT_SLAVE
) {

821 i‡(
c
->
ª∂°©e
 =
SLAVE_STATE_SEND_BULK
) {

822 i‡(
c
->
ª∂dbfd
 !-1Ë
	`˛o£
(c->repldbfd);

823 i‡(
c
->
ª∂¥ómbÀ
Ë
	`sds‰ì
(c->replpreamble);

825 
dli°
 *
l
 = (
c
->
Êags
 & 
CLIENT_MONITOR
Ë? 
£rvî
.
m⁄ô‹s
 : 
ª∂
.
¶aves
;

826 
 
 = 
	`dli°SórchKey
(
l
,
c
);

827 
	`ASSERT
(
 
 !
NULL
);

828 
	`dli°DñNode
(
l
,
 
);

832 i‡(
c
->
Êags
 & 
CLIENT_SLAVE
 && 
	`dli°Lígth
(
ª∂
.
¶aves
) == 0)

833 
ª∂
.
ª∂_no_¶aves_sö˚
 = 
c
->
vñ
->
unixtime
;

834 
	`ª‰eshGoodSœvesCou¡
();

839 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ë
	`ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

843 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_ASAP
) {

844 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_to_˛o£
,c);

845 
	`ASSERT
(
 
 !
NULL
);

846 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_to_˛o£
,
 
);

851 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

852 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

853 
	`‰ìClõ¡Mu…iSèã
(
c
);

854 
	`sds‰ì
(
c
->
≥îid
);

855 
	`d‰ì
(
c
);

856 
	}
}

863 
	$‰ìClõ¡Async
(
˛õ¡
 *
c
) {

864 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_ASAP
 || c->Êag†& 
CLIENT_LUA
) ;

865 
c
->
Êags
 |
CLIENT_CLOSE_ASAP
;

866 
	`dli°AddNodeTaû
(
c
->
vñ
->
˛õ¡s_to_˛o£
,c);

867 
	}
}

869 
	$‰ìClõ¡sInAsyncFªeQueue
(
vr_evíéo›
 *
vñ
) {

870 
	`dli°Lígth
(
vñ
->
˛õ¡s_to_˛o£
)) {

871 
dli°Node
 *
 
 = 
	`dli°Fú°
(
vñ
->
˛õ¡s_to_˛o£
);

872 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

874 
c
->
Êags
 &~
CLIENT_CLOSE_ASAP
;

875 
	`‰ìClõ¡
(
c
);

876 
	`dli°DñNode
(
vñ
->
˛õ¡s_to_˛o£
,
 
);

878 
	}
}

883 
	$wrôeToClõ¡
(
fd
, 
˛õ¡
 *
c
, 
h™dÀr_ö°ÆÀd
) {

884 
ssize_t
 
nwrôãn
 = 0, 
tŸwrôãn
 = 0;

885 
size_t
 
objÀn
;

886 
size_t
 
objmem
;

887 
robj
 *
o
;

888 
maxmem‹y
;

890 
maxmem‹y
 = 
c
->
vñ
->
cc
.maxmemory;

891 
	`˛õ¡HasPídögRïlõs
(
c
)) {

893 i‡(
c
->
buÂos
 > 0) {

894 
nwrôãn
 = 
	`vr_wrôe
(
fd
,
c
->
buf
+c->
£¡Àn
,c->
buÂos
-c->sentlen);

895 i‡(
nwrôãn
 <= 0) ;

896 
c
->
£¡Àn
 +
nwrôãn
;

897 
tŸwrôãn
 +
nwrôãn
;

902 i‡(()
c
->
£¡Àn
 =c->
buÂos
) {

903 
c
->
buÂos
 = 0;

904 
c
->
£¡Àn
 = 0;

907 
o
 = 
	`dli°NodeVÆue
(
	`dli°Fú°
(
c
->
ª∂y
));

908 
objÀn
 = 
	`sd¶í
(
o
->
±r
);

909 
objmem
 = 
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

911 i‡(
objÀn
 == 0) {

912 
	`dli°DñNode
(
c
->
ª∂y
,
	`dli°Fú°
(c->reply));

913 
c
->
ª∂y_byãs
 -
objmem
;

917 
nwrôãn
 = 
	`vr_wrôe
(
fd
, ((*)
o
->
±r
)+
c
->
£¡Àn
,
objÀn
-c->sentlen);

918 i‡(
nwrôãn
 <= 0) ;

919 
c
->
£¡Àn
 +
nwrôãn
;

920 
tŸwrôãn
 +
nwrôãn
;

924 i‡(
c
->
£¡Àn
 =
objÀn
) {

925 
	`dli°DñNode
(
c
->
ª∂y
,
	`dli°Fú°
(c->reply));

926 
c
->
£¡Àn
 = 0;

927 
c
->
ª∂y_byãs
 -
objmem
;

938 i‡(
tŸwrôãn
 > 
NET_MAX_WRITES_PER_EVENT
 &&

939 (
maxmem‹y
 =0 || 
	`dÆloc_u£d_mem‹y
() < maxmemory))

942 i‡(
nwrôãn
 == -1) {

943 i‡(
î∫o
 =
EAGAIN
) {

944 
nwrôãn
 = 0;

946 
	`log_debug
(
LOG_VERB
,

947 "îr‹ wrôögÅÿ˛õ¡: %s", 
	`°ªº‹
(
î∫o
));

948 
	`‰ìClõ¡
(
c
);

949  
VR_ERROR
;

952 i‡(
tŸwrôãn
 > 0) {

953 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
√t_ouçut_byãs
, ()
tŸwrôãn
);

958 i‡(!(
c
->
Êags
 & 
CLIENT_MASTER
)Ëc->
œ°öãø˘i⁄
 = c->
vñ
->
unixtime
;

960 i‡(!
	`˛õ¡HasPídögRïlõs
(
c
)) {

961 
c
->
£¡Àn
 = 0;

962 i‡(
h™dÀr_ö°ÆÀd
Ë
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_WRITABLE
);

965 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) {

966 
	`‰ìClõ¡
(
c
);

967  
VR_ERROR
;

970  
VR_OK
;

971 
	}
}

974 
	$£ndRïlyToClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

975 
	`UNUSED
(
ñ
);

976 
	`UNUSED
(
mask
);

977 
	`wrôeToClõ¡
(
fd
,
¥ivd©a
,1);

978 
	}
}

984 
	$h™dÀClõ¡sWôhPídögWrôes
(
vr_evíéo›
 *
vñ
) {

985 
dli°Iãr
 
li
;

986 
dli°Node
 *
 
;

987 
¥o˚s£d
 = 
	`dli°Lígth
(
vñ
->
˛õ¡s_≥ndög_wrôe
);

989 
	`dli°Rewöd
(
vñ
->
˛õ¡s_≥ndög_wrôe
,&
li
);

990 (
 
 = 
	`dli°Next
(&
li
))) {

991 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

992 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

993 
	`dli°DñNode
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

996 i‡(
	`wrôeToClõ¡
(
c
->
c⁄n
->
sd
,c,0Ë=
VR_ERROR
) ;

1000 i‡(
	`˛õ¡HasPídögRïlõs
(
c
) &&

1001 
	`´Cª©eFûeEvít
(
vñ
->
ñ
, 
c
->
c⁄n
->
sd
, 
AE_WRITABLE
,

1002 
£ndRïlyToClõ¡
, 
c
Ë=
AE_ERR
)

1004 
	`‰ìClõ¡Async
(
c
);

1007  
¥o˚s£d
;

1008 
	}
}

1012 
	$ª£tClõ¡
(
˛õ¡
 *
c
) {

1013 
ªdisComm™dProc
 *
¥evcmd
 = 
c
->
cmd
 ? c->cmd->
¥oc
 : 
NULL
;

1015 i‡(
c
->
Êags
&
CLIENT_JUMP
)

1018 
	`‰ìClõ¡Argv
(
c
);

1019 
c
->
ªqty≥
 = 0;

1020 
c
->
mu…ibulkÀn
 = 0;

1021 
c
->
bulkÀn
 = -1;

1026 
c
->
Êags
 &~
CLIENT_REPLY_SKIP
;

1027 i‡(
c
->
Êags
 & 
CLIENT_REPLY_SKIP_NEXT
) {

1028 
c
->
Êags
 |
CLIENT_REPLY_SKIP
;

1029 
c
->
Êags
 &~
CLIENT_REPLY_SKIP_NEXT
;

1031 
	}
}

1034 
	$¥o˚ssI∆öeBuf„r
(
˛õ¡
 *
c
) {

1035 *
√wlöe
;

1036 
¨gc
, 
j
;

1037 
sds
 *
¨gv
, 
aux
;

1038 
size_t
 
quîyÀn
;

1042 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
,'\n');

1046 i‡(
√wlöe
 =
NULL
) {

1047 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1048 
	`addRïlyEº‹
(
c
,"ProtocolÉrror:Åoo big inlineÑequest");

1049 
	`£tPrŸocﬁEº‹
(
c
,0);

1051  
VR_ERROR
;

1056 i‡(
√wlöe
 &&Çewlöê!
c
->
quîybuf
 && *(newline-1) == '\r')

1057 
√wlöe
--;

1061 
quîyÀn
 = 
√wlöe
-(
c
->
quîybuf
);

1063 
aux
 = 
	`sd¢ewÀn
(
c
->
quîybuf
,
quîyÀn
);

1065 
¨gv
 = 
	`sds•lô¨gs
(
aux
,&
¨gc
);

1066 
	`sds‰ì
(
aux
);

1067 i‡(
¨gv
 =
NULL
) {

1068 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: unbalanced quotes inÑequest");

1069 
	`£tPrŸocﬁEº‹
(
c
,0);

1070  
VR_ERROR
;

1077 i‡(
quîyÀn
 =0 && 
c
->
Êags
 & 
CLIENT_SLAVE
)

1078 
c
->
ª∂_ack_time
 = c->
vñ
->
unixtime
;

1081 
	`sd§™ge
(
c
->
quîybuf
,
quîyÀn
+2,-1);

1084 i‡(
¨gc
) {

1085 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

1086 
c
->
¨gv
 = 
	`dÆloc
((
robj
*)*
¨gc
);

1091 
c
->
¨gc
 = 0, 
j
 = 0; j <árgc; j++) {

1092 i‡(
	`sd¶í
(
¨gv
[
j
])) {

1093 
c
->
¨gv
[c->
¨gc
] = 
	`¸óãObje˘
(
OBJ_STRING
,¨gv[
j
]);

1094 
c
->
¨gc
++;

1096 
	`sds‰ì
(
¨gv
[
j
]);

1099 
	`d‰ì
(
¨gv
);

1100  
VR_OK
;

1101 
	}
}

1106 
	$£tPrŸocﬁEº‹
(
˛õ¡
 *
c
, 
pos
) {

1107 i‡(
	`log_loggabÀ
(
LOG_VERB
)) {

1108 
sds
 
˛õ¡
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
);

1109 
	`log_debug
(
LOG_VERB
,

1110 "PrŸocﬁÉº‹ from clõ¡: %s", 
˛õ¡
);

1111 
	`sds‰ì
(
˛õ¡
);

1113 
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

1114 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1115 
	}
}

1117 
	$¥o˚ssMu…ibulkBuf„r
(
˛õ¡
 *
c
) {

1118 *
√wlöe
 = 
NULL
;

1119 
pos
 = 0, 
ok
;

1120 
Œ
;

1122 i‡(
c
->
mu…ibulkÀn
 == 0) {

1124 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
¨gc
 == 0);

1127 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
,'\r');

1128 i‡(
√wlöe
 =
NULL
) {

1129 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1130 
	`addRïlyEº‹
(
c
,"ProtocolÉrror:Åoo big mbulk count string");

1131 
	`£tPrŸocﬁEº‹
(
c
,0);

1133  
VR_ERROR
;

1138 i‡(
√wlöe
-(
c
->
quîybuf
Ë> ((sig√d)
	`sd¶í
(c->querybuf)-2))

1139  
VR_ERROR
;

1144 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
quîybuf
[0] == '*');

1146 
ok
 = 
	`°rög2Œ
(
c
->
quîybuf
+1,
√wlöe
-(c->quîybuf+1),&
Œ
);

1147 i‡(!
ok
 || 
Œ
 > 1024*1024) {

1148 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: invalid multibulkÜength");

1149 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1150  
VR_ERROR
;

1154 
pos
 = (
√wlöe
-
c
->
quîybuf
)+2;

1155 i‡(
Œ
 <= 0) {

1156 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1157  
VR_OK
;

1160 
c
->
mu…ibulkÀn
 = 
Œ
;

1163 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

1164 
c
->
¨gv
 = 
	`dÆloc
((
robj
*)*c->
mu…ibulkÀn
);

1167 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
mu…ibulkÀn
 > 0);

1169 
c
->
mu…ibulkÀn
) {

1171 i‡(
c
->
bulkÀn
 == -1) {

1173 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
+
pos
,'\r');

1174 i‡(
√wlöe
 =
NULL
) {

1175 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1176 
	`addRïlyEº‹
(
c
,

1178 
	`£tPrŸocﬁEº‹
(
c
,0);

1179  
VR_ERROR
;

1185 i‡(
√wlöe
-(
c
->
quîybuf
Ë> ((sig√d)
	`sd¶í
(c->querybuf)-2))

1188 i‡(
c
->
quîybuf
[
pos
] != '$') {

1189 
	`addRïlyEº‹F‹m©
(
c
,

1191 
c
->
quîybuf
[
pos
]);

1192 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1193  
VR_ERROR
;

1196 
ok
 = 
	`°rög2Œ
(
c
->
quîybuf
+
pos
+1,
√wlöe
-(c->quîybuf+pos+1),&
Œ
);

1197 i‡(!
ok
 || 
Œ
 < 0 ||Ül > 512*1024*1024) {

1198 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: invalid bulkÜength");

1199 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1200  
VR_ERROR
;

1203 
pos
 +
√wlöe
-(
c
->
quîybuf
+pos)+2;

1204 i‡(
Œ
 >
PROTO_MBULK_BIG_ARG
) {

1205 
size_t
 
qbÀn
;

1212 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1213 
pos
 = 0;

1214 
qbÀn
 = 
	`sd¶í
(
c
->
quîybuf
);

1218 i‡(
qbÀn
 < (
size_t
)
Œ
+2)

1219 
c
->
quîybuf
 = 
	`sdsMakeRoomF‹
(c->quîybuf,
Œ
+2-
qbÀn
);

1221 
c
->
bulkÀn
 = 
Œ
;

1225 i‡(
	`sd¶í
(
c
->
quîybuf
)-
pos
 < ()(c->
bulkÀn
+2)) {

1232 i‡(
pos
 == 0 &&

1233 
c
->
bulkÀn
 >
PROTO_MBULK_BIG_ARG
 &&

1234 (sig√dË
	`sd¶í
(
c
->
quîybuf
Ë=c->
bulkÀn
+2)

1237 
c
->
¨gv
[c->
¨gc
++] = 
	`¸óãObje˘
(
OBJ_STRING
,c->
quîybuf
);

1238 
	`sdsIn¸Lí
(
c
->
quîybuf
,-2);

1241 
c
->
quîybuf
 = 
	`sd¢ewÀn
(
NULL
,c->
bulkÀn
+2);

1242 
	`sds˛ór
(
c
->
quîybuf
);

1243 
pos
 = 0;

1245 
c
->
¨gv
[c->
¨gc
++] =

1246 
	`¸óãSåögObje˘
(
c
->
quîybuf
+
pos
,c->
bulkÀn
);

1247 
pos
 +
c
->
bulkÀn
+2;

1249 
c
->
bulkÀn
 = -1;

1250 
c
->
mu…ibulkÀn
--;

1255 i‡(
pos
Ë
	`sd§™ge
(
c
->
quîybuf
,pos,-1);

1258 i‡(
c
->
mu…ibulkÀn
 =0Ë 
VR_OK
;

1261  
VR_ERROR
;

1262 
	}
}

1264 
	$¥o˚ssI≈utBuf„r
(
˛õ¡
 *
c
) {

1265 
c
->
vñ
->
cuºít_˛õ¡
 = c;

1267 
	`sd¶í
(
c
->
quîybuf
)) {

1269 i‡(!(
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& 
	`˛õ¡sAªPau£d
(c->
vñ
)) ;

1272 i‡(
c
->
Êags
 & 
CLIENT_BLOCKED
) ;

1277 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

1280 i‡(!
c
->
ªqty≥
) {

1281 i‡(
c
->
quîybuf
[0] == '*') {

1283 
c
->
ªqty≥
 = 
PROTO_REQ_MULTIBULK
;

1285 
c
->
ªqty≥
 = 
PROTO_REQ_INLINE
;

1289 i‡(
c
->
ªqty≥
 =
PROTO_REQ_INLINE
) {

1290 i‡(
	`¥o˚ssI∆öeBuf„r
(
c
Ë!
VR_OK
) ;

1291 } i‡(
c
->
ªqty≥
 =
PROTO_REQ_MULTIBULK
) {

1293 i‡(
	`¥o˚ssMu…ibulkBuf„r
(
c
Ë!
VR_OK
) ;

1295 
	`£rvîP™ic
("UnknownÑequestÅype");

1300 i‡(
c
->
¨gc
 == 0) {

1301 
	`ª£tClõ¡
(
c
);

1305 i‡(
	`¥o˚ssComm™d
(
c
Ë=
VR_OK
)

1306 
	`ª£tClõ¡
(
c
);

1309 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =
NULL
) ;

1314 i‡(
c
->
Êags
&
CLIENT_JUMP
) ;

1317 
c
->
vñ
->
cuºít_˛õ¡
 = 
NULL
;

1318 
	}
}

1321 
	$ªadQuîyFromClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

1322 
˛õ¡
 *
c
 = (˛õ¡*Ë
¥ivd©a
;

1323 
ƒód
, 
ªadÀn
;

1324 
size_t
 
qbÀn
;

1325 
	`UNUSED
(
ñ
);

1326 
	`UNUSED
(
mask
);

1328 
ªadÀn
 = 
PROTO_IOBUF_LEN
;

1335 i‡(
c
->
ªqty≥
 =
PROTO_REQ_MULTIBULK
 && c->
mu…ibulkÀn
 && c->
bulkÀn
 != -1

1336 && 
c
->
bulkÀn
 >
PROTO_MBULK_BIG_ARG
)

1338 
ªmaöög
 = ()(
c
->
bulkÀn
+2)-
	`sd¶í
(c->
quîybuf
);

1340 i‡(
ªmaöög
 < 
ªadÀn
)Ñeadlen =Ñemaining;

1343 
qbÀn
 = 
	`sd¶í
(
c
->
quîybuf
);

1344 i‡(
c
->
quîybuf_≥ak
 < 
qbÀn
) c->querybuf_peak = qblen;

1345 
c
->
quîybuf
 = 
	`sdsMakeRoomF‹
(c->quîybuf, 
ªadÀn
);

1347 
ƒód
 = 
	`vr_ªad
(
fd
, 
c
->
quîybuf
+
qbÀn
, 
ªadÀn
);

1348 i‡(
ƒód
 == -1) {

1349 i‡(
î∫o
 =
EAGAIN
) {

1352 
	`log_debug
(
LOG_VERB
, "ªadög from clõ¡: %s",
	`°ªº‹
(
î∫o
));

1353 
	`‰ìClõ¡
(
c
);

1356 } i‡(
ƒód
 == 0) {

1357 
	`log_debug
(
LOG_VERB
, "client closed connection");

1358 
	`‰ìClõ¡
(
c
);

1362 
	`sdsIn¸Lí
(
c
->
quîybuf
,
ƒód
);

1363 
c
->
œ°öãø˘i⁄
 = c->
vñ
->
unixtime
;

1364 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ëc->
ª∂off
 +
ƒód
;

1365 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
√t_öput_byãs
, 
ƒód
);

1366 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
£rvî
.
˛õ¡_max_quîybuf_Àn
) {

1367 
sds
 
ci
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
), 
byãs
 = sdsempty();

1369 
byãs
 = 
	`sdsˇåïr
(byãs,
c
->
quîybuf
,64);

1370 
	`log_w¨n
("˛osög clõ¡Åh©Ñóched max quîy buf„∏Àngth: %†(qbu‡öôü»byãs: %s)", 
ci
, 
byãs
);

1371 
	`sds‰ì
(
ci
);

1372 
	`sds‰ì
(
byãs
);

1373 
	`‰ìClõ¡
(
c
);

1377 
	`¥o˚ssI≈utBuf„r
(
c
);

1380 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

1381 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

1383 
	}
}

1386 
	$gëClõ¡sMaxBuf„rs
(
vr_evíéo›
 *
vñ
, *
l⁄ge°_ouçut_li°
,

1387 *
bigge°_öput_buf„r
) {

1388 
˛õ¡
 *
c
;

1389 
dli°Node
 *
 
;

1390 
dli°Iãr
 
li
;

1391 
lﬁ
 = 0, 
bib
 = 0;

1394 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1395 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1396 
c
 = 
	`dli°NodeVÆue
(
 
);

1398 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë> 
lﬁ
)Üol = dlistLength(c->reply);

1399 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
bib
) bib = sdslen(c->querybuf);

1401 *
l⁄ge°_ouçut_li°
 = 
lﬁ
;

1402 *
bigge°_öput_buf„r
 = 
bib
;

1403 
	}
}

1417 
	$gíClõ¡PìrId
(
˛õ¡
 *˛õ¡, *
≥îid
,

1418 
size_t
 
≥îid_Àn
) {

1419 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNIX_SOCKET
) {

1421 
	`¢¥ötf
(
≥îid
,
≥îid_Àn
,"%s:0",
£rvî
.
unixsockë
);

1424 
	`vr_√t_f‹m©_≥î
(
˛õ¡
->
c⁄n
->
sd
,
≥îid
,
≥îid_Àn
);

1426 
	}
}

1434 *
	$gëClõ¡PìrId
(
˛õ¡
 *
c
) {

1435 
≥îid
[
VR_INET_PEER_ID_LEN
];

1437 i‡(
c
->
≥îid
 =
NULL
) {

1438 
	`gíClõ¡PìrId
(
c
,
≥îid
,(peerid));

1439 
c
->
≥îid
 = 
	`sd¢ew
(peerid);

1441  
c
->
≥îid
;

1442 
	}
}

1447 
sds
 
	$ˇtClõ¡InfoSåög
(
sds
 
s
, 
˛õ¡
 *client) {

1448 
Êags
[16], 
evíts
[3], *
p
;

1449 
emask
;

1451 
p
 = 
Êags
;

1453 i‡(
˛õ¡
->
Êags
 & 
CLIENT_SLAVE
) {

1454 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MONITOR
)

1455 *
p
++ = 'O';

1457 *
p
++ = 'S';

1459 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MASTER
Ë*
p
++ = 'M';

1460 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MULTI
Ë*
p
++ = 'x';

1461 i‡(
˛õ¡
->
Êags
 & 
CLIENT_BLOCKED
Ë*
p
++ = 'b';

1462 i‡(
˛õ¡
->
Êags
 & 
CLIENT_DIRTY_CAS
Ë*
p
++ = 'd';

1463 i‡(
˛õ¡
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
Ë*
p
++ = 'c';

1464 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNBLOCKED
Ë*
p
++ = 'u';

1465 i‡(
˛õ¡
->
Êags
 & 
CLIENT_CLOSE_ASAP
Ë*
p
++ = 'A';

1466 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNIX_SOCKET
Ë*
p
++ = 'U';

1467 i‡(
˛õ¡
->
Êags
 & 
CLIENT_READONLY
Ë*
p
++ = 'r';

1468 i‡(
p
 =
Êags
) *p++ = 'N';

1469 *
p
++ = '\0';

1471 
emask
 = 
˛õ¡
->
c⁄n
->
sd
 =-1 ? 0 : 
	`´GëFûeEvíts
(˛õ¡->
vñ
->
ñ
,client->conn->sd);

1472 
p
 = 
evíts
;

1473 i‡(
emask
 & 
AE_READABLE
Ë*
p
++ = 'r';

1474 i‡(
emask
 & 
AE_WRITABLE
Ë*
p
++ = 'w';

1475 *
p
 = '\0';

1477  
	`sdsˇtfmt
(
s
,

1479 
˛õ¡
->
curidx
,

1480 (Ë
˛õ¡
->
id
,

1481 
	`gëClõ¡PìrId
(
˛õ¡
),

1482 
˛õ¡
->
c⁄n
->
sd
,

1483 
˛õ¡
->
«me
 ? (*)˛õ¡->«me->
±r
 : "",

1484 ()(
˛õ¡
->
vñ
->
unixtime
 - clõ¡->
˘ime
),

1485 ()(
˛õ¡
->
vñ
->
unixtime
 - clõ¡->
œ°öãø˘i⁄
),

1486 
Êags
,

1487 
˛õ¡
->
di˘id
,

1488 (Ë
	`di˘Size
(
˛õ¡
->
pubsub_ch™√ls
),

1489 (Ë
	`dli°Lígth
(
˛õ¡
->
pubsub_∑âîns
),

1490 (
˛õ¡
->
Êags
 & 
CLIENT_MULTI
Ë? clõ¡->
m°©e
.
cou¡
 : -1,

1491 (Ë
	`sd¶í
(
˛õ¡
->
quîybuf
),

1492 (Ë
	`sdßvaû
(
˛õ¡
->
quîybuf
),

1493 (Ë
˛õ¡
->
buÂos
,

1494 (Ë
	`dli°Lígth
(
˛õ¡
->
ª∂y
),

1495 (Ë
	`gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
),

1496 
evíts
,

1497 
˛õ¡
->
œ°cmd
 ? clõ¡->œ°cmd->
«me
 : "NULL");

1498 
	}
}

1501 
sds
 
	$gëAŒClõ¡sInfoSåög
(
vr_evíéo›
 *
vñ
) {

1502 
dli°Node
 *
 
;

1503 
dli°Iãr
 
li
;

1504 
˛õ¡
 *client;

1505 
sds
 
o
 = 
	`sd¢ewÀn
(
NULL
,200*
	`dli°Lígth
(
vñ
->
˛õ¡s
));

1506 
	`sds˛ór
(
o
);

1507 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1508 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1509 
˛õ¡
 = 
	`dli°NodeVÆue
(
 
);

1510 
o
 = 
	`ˇtClõ¡InfoSåög
(o,
˛õ¡
);

1511 
o
 = 
	`sdsˇéí
(o,"\n",1);

1513  
o
;

1514 
	}
}

1516 
	s˛õ¡kûld©a
 {

1517 
sds
 
	maddr
;

1518 
	mty≥
;

1519 
uöt64_t
 
	mid
;

1520 
	mskùme
;

1521 
	mkûÀd
;

1522 
	m˛o£_this_˛õ¡
;

1525 
	$˛õ¡Comm™d
(
˛õ¡
 *
c
) {

1526 
dli°Node
 *
 
;

1527 
dli°Iãr
 
li
;

1528 
˛õ¡
 *client;

1530 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"li°"Ë&& c->
¨gc
 == 2) {

1532 
sds
 
°r
 = 
c
->
ˇche
;

1534 
sds
 
o
 = 
	`gëAŒClõ¡sInfoSåög
(
c
->
vñ
);

1536 
°r
 = 
	`sdsˇtsds
(°r?°r:
	`sd£m±y
(),
o
);

1538 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

1539 
	`addRïlyBulkCBuf„r
(
c
,
°r
,
	`sd¶í
(str));

1540 
c
->
°ïs
 = 0;

1541 
c
->
èridx
 = -1;

1542 
	`sds‰ì
(
°r
);

1543 
c
->
ˇche
 = 
NULL
;

1544 
c
->
Êags
 &~
CLIENT_JUMP
;

1546 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

1547 
c
->
Êags
 |
CLIENT_JUMP
;

1548 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1549 
c
->
ˇche
 = 
°r
;

1551 
	`sds‰ì
(
o
);

1554 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"kill")) {

1557 
˛õ¡kûld©a
 *
ckd
;

1559 i‡(
c
->
°ïs
 == 0) {

1560 
ckd
 = 
	`dÆloc
((
˛õ¡kûld©a
));

1561 
ckd
->
addr
 = 
NULL
;

1562 
ckd
->
ty≥
 = -1;

1563 
ckd
->
id
 = 0;

1564 
ckd
->
skùme
 = 1;

1565 
ckd
->
kûÀd
 = 0;

1566 
ckd
->
˛o£_this_˛õ¡
 = 0;

1568 i‡(
c
->
¨gc
 == 3) {

1570 
ckd
->
addr
 = 
	`sd¢ew
(
c
->
¨gv
[2]->
±r
);

1571 
ckd
->
skùme
 = 0;

1572 } i‡(
c
->
¨gc
 > 3) {

1573 
i
 = 2;

1576 
i
 < 
c
->
¨gc
) {

1577 
m‹órgs
 = 
c
->
¨gc
 > 
i
+1;

1579 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"id"Ë&& 
m‹órgs
) {

1580 
tmp
;

1582 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
i
+1],&
tmp
,
NULL
)

1583 !
VR_OK
) {

1584 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1585 
	`d‰ì
(
ckd
);

1588 
ckd
->
id
 = 
tmp
;

1589 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"ty≥"Ë&& 
m‹órgs
) {

1590 
ckd
->
ty≥
 = 
	`gëClõ¡Ty≥ByName
(
c
->
¨gv
[
i
+1]->
±r
);

1591 i‡(
ckd
->
ty≥
 == -1) {

1592 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1593 
	`d‰ì
(
ckd
);

1594 
	`addRïlyEº‹F‹m©
(
c
,"Unknown clientÅype '%s'",

1595 (*Ë
c
->
¨gv
[
i
+1]->
±r
);

1598 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"addr"Ë&& 
m‹órgs
) {

1599 
ckd
->
addr
 = 
	`sd¢ew
(
c
->
¨gv
[
i
+1]->
±r
);

1600 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"skùme"Ë&& 
m‹órgs
) {

1601 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
+1]->
±r
,"yes")) {

1602 
ckd
->
skùme
 = 1;

1603 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
+1]->
±r
,"no")) {

1604 
ckd
->
skùme
 = 0;

1606 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1607 
	`d‰ì
(
ckd
);

1608 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1612 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1613 
	`d‰ì
(
ckd
);

1614 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1617 
i
 += 2;

1620 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1621 
	`d‰ì
(
ckd
);

1622 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1626 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

1627 
c
->
Êags
 |
CLIENT_JUMP
;

1628 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1629 
c
->
ˇche
 = 
ckd
;

1631 
ckd
 = 
c
->
ˇche
;

1632 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1637 
	`dli°Rewöd
(
c
->
vñ
->
˛õ¡s
,&
li
);

1638 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1639 
˛õ¡
 = 
	`dli°NodeVÆue
(
 
);

1640 i‡(
ckd
->
addr
 && 
	`°rcmp
(
	`gëClõ¡PìrId
(
˛õ¡
),ckd->addr) != 0) ;

1641 i‡(
ckd
->
ty≥
 !-1 && 
	`gëClõ¡Ty≥
(
˛õ¡
) != ckd->type) ;

1642 i‡(
ckd
->
id
 !0 && 
˛õ¡
->id != ckd->id) ;

1643 i‡(
c
 =
˛õ¡
 && 
ckd
->
skùme
) ;

1646 i‡(
c
 =
˛õ¡
) {

1647 
ckd
->
˛o£_this_˛õ¡
 = 1;

1649 
	`‰ìClõ¡
(
˛õ¡
);

1651 
ckd
->
kûÀd
++;

1654 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

1656 i‡(
c
->
¨gc
 == 3) {

1657 i‡(
ckd
->
kûÀd
 == 0)

1658 
	`addRïlyEº‹
(
c
,"No such client");

1660 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1662 
	`addRïlyL⁄gL⁄g
(
c
,
ckd
->
kûÀd
);

1665 
c
->
°ïs
 = 0;

1666 
c
->
èridx
 = -1;

1667 
c
->
ˇche
 = 
NULL
;

1668 
c
->
Êags
 &~
CLIENT_JUMP
;

1672 i‡(
ckd
->
˛o£_this_˛õ¡
Ë
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

1674 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1675 
	`d‰ì
(
ckd
);

1679 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"£äame"Ë&& c->
¨gc
 == 3) {

1680 
j
, 
Àn
 = 
	`sd¶í
(
c
->
¨gv
[2]->
±r
);

1681 *
p
 = 
c
->
¨gv
[2]->
±r
;

1685 i‡(
Àn
 == 0) {

1686 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

1687 
c
->
«me
 = 
NULL
;

1688 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1695 
j
 = 0; j < 
Àn
; j++) {

1696 i‡(
p
[
j
] < '!' ||Ö[j] > '~') {

1697 
	`addRïlyEº‹
(
c
,

1703 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

1704 
c
->
«me
 = 
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]);

1705 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1707 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"gë«me"Ë&& c->
¨gc
 == 2) {

1708 i‡(
c
->
«me
)

1709 
	`addRïlyBulk
(
c
,c->
«me
);

1711 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1714 
	`addRïlyEº‹
(
c
, "SyntaxÉrror,Åry CLIENT (LIST | KILL ip:port | SETNAME connection-name)");

1718 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"ª∂y"Ë&& c->
¨gc
 == 3) {

1720 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"on")) {

1721 
c
->
Êags
 &~(
CLIENT_REPLY_SKIP
|
CLIENT_REPLY_OFF
);

1722 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1723 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"off")) {

1724 
c
->
Êags
 |
CLIENT_REPLY_OFF
;

1725 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"skip")) {

1726 i‡(!(
c
->
Êags
 & 
CLIENT_REPLY_OFF
))

1727 
c
->
Êags
 |
CLIENT_REPLY_SKIP_NEXT
;

1729 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1732 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"∑u£"Ë&& c->
¨gc
 == 3) {

1733 
duøti⁄
;

1735 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
duøti⁄
,
UNIT_MILLISECONDS
)

1736 !
VR_OK
) ;

1737 
	`∑u£Clõ¡s
(
NULL
, 
duøti⁄
);

1738 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1740 
	`addRïlyEº‹
(
c
, "SyntaxÉrror,Åry CLIENT (LIST | KILL ip:port | GETNAME | SETNAME connection-name)");

1742 
	}
}

1747 
	$ªwrôeClõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, ...) {

1748 
va_li°
 
≠
;

1749 
j
;

1750 
robj
 **
¨gv
;

1752 
¨gv
 = 
	`dÆloc
((
robj
*)*
¨gc
);

1753 
	`va_°¨t
(
≠
,
¨gc
);

1754 
j
 = 0; j < 
¨gc
; j++) {

1755 
robj
 *
a
;

1756 
a
 = 
	`va_¨g
(
≠
, 
robj
*);

1757 
¨gv
[
j
] = 
a
;

1760 
j
 = 0; j < 
c
->
¨gc
; j++Ë
	`‰ìObje˘
(c->
¨gv
[j]);

1761 
	`d‰ì
(
c
->
¨gv
);

1763 
c
->
¨gv
 =árgv;

1764 
c
->
¨gc
 =árgc;

1765 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1766 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1767 
	`va_íd
(
≠
);

1768 
	}
}

1772 
	$ª∂a˚Clõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, 
robj
 **
¨gv
) {

1773 
	`‰ìClõ¡Argv
(
c
);

1774 
	`d‰ì
(
c
->
¨gv
);

1775 
c
->
¨gv
 =árgv;

1776 
c
->
¨gc
 =árgc;

1777 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1778 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1779 
	}
}

1793 
	$ªwrôeClõ¡Comm™dArgumít
(
˛õ¡
 *
c
, 
i
, 
robj
 *
√wvÆ
) {

1794 
robj
 *
ﬁdvÆ
;

1796 i‡(
i
 >
c
->
¨gc
) {

1797 
c
->
¨gv
 = 
	`dªÆloc
(c->¨gv,(
robj
*)*(
i
+1));

1798 
c
->
¨gc
 = 
i
+1;

1799 
c
->
¨gv
[
i
] = 
NULL
;

1801 
ﬁdvÆ
 = 
c
->
¨gv
[
i
];

1802 
c
->
¨gv
[
i
] = 
√wvÆ
;

1803 i‡(
ﬁdvÆ
Ë
	`‰ìObje˘
(oldval);

1806 i‡(
i
 == 0) {

1807 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1808 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1810 
	}
}

1826 
	$gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
 *
c
) {

1827 
li°_ôem_size
 = (
dli°Node
)+(
robj
);

1829  
c
->
ª∂y_byãs
 + (
li°_ôem_size
*
	`dli°Lígth
(c->
ª∂y
));

1830 
	}
}

1842 
	$gëClõ¡Ty≥
(
˛õ¡
 *
c
) {

1843 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ë 
CLIENT_TYPE_MASTER
;

1844 i‡((
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& !(c->Êag†& 
CLIENT_MONITOR
))

1845  
CLIENT_TYPE_SLAVE
;

1846 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
Ë 
CLIENT_TYPE_PUBSUB
;

1847  
CLIENT_TYPE_NORMAL
;

1848 
	}
}

1851 
	$gëClõ¡Ty≥ByName
(*
«me
) {

1852 i‡(!
	`°rˇ£cmp
(
«me
,"n‹mÆ")Ë 
CLIENT_TYPE_NORMAL
;

1853 i‡(!
	`°rˇ£cmp
(
«me
,"¶ave")Ë 
CLIENT_TYPE_SLAVE
;

1854 i‡(!
	`°rˇ£cmp
(
«me
,"pubsub")Ë 
CLIENT_TYPE_PUBSUB
;

1855 i‡(!
	`°rˇ£cmp
(
«me
,"ma°î")Ë 
CLIENT_TYPE_MASTER
;

1857 
	}
}

1860 *
	$gëClõ¡Ty≥Name
(
˛ass
) {

1861 
˛ass
) {

1862 
CLIENT_TYPE_NORMAL
:  "normal";

1863 
CLIENT_TYPE_SLAVE
:  "slave";

1864 
CLIENT_TYPE_PUBSUB
:  "pubsub";

1865 
CLIENT_TYPE_MASTER
:  "master";

1866 :  
NULL
;

1868 
	}
}

1877 
	$checkClõ¡OuçutBuf„rLimôs
(
˛õ¡
 *
c
) {

1878 
so·
 = 0, 
h¨d
 = 0, 
˛ass
;

1879 
u£d_mem
 = 
	`gëClõ¡OuçutBuf„rMem‹yUßge
(
c
);

1881 
˛ass
 = 
	`gëClõ¡Ty≥
(
c
);

1884 i‡(
˛ass
 =
CLIENT_TYPE_MASTER
Ë˛as†
CLIENT_TYPE_NORMAL
;

1886 i‡(
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
h¨d_limô_byãs
 &&

1887 
u£d_mem
 >
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
h¨d_limô_byãs
)

1888 
h¨d
 = 1;

1889 i‡(
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_byãs
 &&

1890 
u£d_mem
 >
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_byãs
)

1891 
so·
 = 1;

1895 i‡(
so·
) {

1897 i‡(
c
->
obuf_so·_limô_ªached_time
 == 0) {

1898 
c
->
obuf_so·_limô_ªached_time
 = c->
vñ
->
unixtime
;

1899 
so·
 = 0;

1902 
time_t
 
ñ≠£d
 = 
c
->
vñ
->
unixtime
 - c->
obuf_so·_limô_ªached_time
;

1905 i‡(
ñ≠£d
 <=

1906 
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_£c⁄ds
) {

1907 
so·
 = 0;

1914 
c
->
obuf_so·_limô_ªached_time
 = 0;

1916  
so·
 || 
h¨d
;

1917 
	}
}

1927 
	$asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
˛õ¡
 *
c
) {

1928 
	`ASSERT
(
c
->
ª∂y_byãs
 < 
SIZE_MAX
-(1024*64));

1929 i‡(
c
->
ª∂y_byãs
 =0 || c->
Êags
 & 
CLIENT_CLOSE_ASAP
) ;

1930 i‡(
	`checkClõ¡OuçutBuf„rLimôs
(
c
)) {

1931 
sds
 
˛õ¡
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
);

1933 
	`‰ìClõ¡Async
(
c
);

1935 
	`log_w¨n
("Clõ¡ %†scheduÀdÅÿbê˛o£d ASAP f‹ ovîcomög o‡ouçuàbuf„∏limôs.", 
˛õ¡
);

1936 
	`sds‰ì
(
˛õ¡
);

1938 
	}
}

1946 
	$ÊushSœvesOuçutBuf„rs
() {

1947 
dli°Iãr
 
li
;

1948 
dli°Node
 *
 
;

1950 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

1951 (
 
 = 
	`dli°Next
(&
li
))) {

1952 
˛õ¡
 *
¶ave
 = 
	`dli°NodeVÆue
(
 
);

1953 
evíts
;

1961 
evíts
 = 
	`´GëFûeEvíts
(
ª∂
.
vñ
.
ñ
,
¶ave
->
c⁄n
->
sd
);

1963 i‡(
evíts
 & 
AE_WRITABLE
 &&

1964 
¶ave
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 &&

1965 
	`˛õ¡HasPídögRïlõs
(
¶ave
))

1967 
	`wrôeToClõ¡
(
¶ave
->
c⁄n
->
sd
,slave,0);

1970 
	}
}

1990 
	$∑u£Clõ¡s
(
vr_evíéo›
 *
vñ
, 
íd
) {

1991 i‡(
vñ
 =
NULL
) ;

1993 i‡(!
vñ
->
˛õ¡s_∑u£d
 || 
íd
 > vñ->
˛õ¡s_∑u£_íd_time
)

1994 
vñ
->
˛õ¡s_∑u£_íd_time
 = 
íd
;

1995 
vñ
->
˛õ¡s_∑u£d
 = 1;

1996 
	}
}

2001 
	$˛õ¡sAªPau£d
(
vr_evíéo›
 *
vñ
) {

2002 i‡(
vñ
->
˛õ¡s_∑u£d
 &&

2003 
vñ
->
˛õ¡s_∑u£_íd_time
 < vñ->
m°ime
)

2005 
dli°Node
 *
 
;

2006 
dli°Iãr
 
li
;

2007 
˛õ¡
 *
c
;

2009 
vñ
->
˛õ¡s_∑u£d
 = 0;

2013 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

2014 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

2015 
c
 = 
	`dli°NodeVÆue
(
 
);

2019 i‡(
c
->
Êags
 & (
CLIENT_SLAVE
|
CLIENT_BLOCKED
)) ;

2020 
c
->
Êags
 |
CLIENT_UNBLOCKED
;

2021 
	`dli°AddNodeTaû
(
vñ
->
unblocked_˛õ¡s
,
c
);

2024  
vñ
->
˛õ¡s_∑u£d
;

2025 
	}
}

2040 
	$¥o˚ssEvítsWhûeBlocked
(
vr_evíéo›
 *
vñ
) {

2041 
ôî©i⁄s
 = 4;

2042 
cou¡
 = 0;

2043 
ôî©i⁄s
--) {

2044 
evíts
 = 0;

2045 
evíts
 +
	`´Pro˚ssEvíts
(
vñ
->
ñ
, 
AE_FILE_EVENTS
|
AE_DONT_WAIT
);

2046 
evíts
 +
	`h™dÀClõ¡sWôhPídögWrôes
(
vñ
);

2047 i‡(!
evíts
) ;

2048 
cou¡
 +
evíts
;

2050  
cou¡
;

2051 
	}
}

2055 
	$cuºít_˛õ¡s
()

2057 
ccs
;

2059 #i‡
	`deföed
(
__ATOMIC_RELAXED
Ë|| deföed(
HAVE_ATOMIC
)

2060 
ccs
 = 
	`upd©e_cuº_˛õ¡s_add
(0);

2062 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
);

2063 
ccs
 = 
ncuº_cc⁄n
;

2064 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
);

2067  
ccs
;

2068 
	}
}

	@src/vr_client.c

1 
	~<vr_c‹e.h
>

3 
	gncuº_cc⁄n
 = 0;

5 
£tPrŸocﬁEº‹
(
˛õ¡
 *
c
, 
pos
);

10 
size_t
 
	$sdsZmÆlocSize
(
sds
 
s
) {

11 *
sh
 = 
	`sdsAŒocPå
(
s
);

12  
	`dmÆloc_size
(
sh
);

13 
	}
}

15 *
	$dupClõ¡RïlyVÆue
(*
o
) {

16  
o
;

17 
	}
}

19 
	$‰ìClõ¡RïlyVÆue
(*
o
) {

20 
	`‰ìObje˘
(
o
);

21 
	}
}

23 
	$li°M©chObje˘s
(*
a
, *
b
) {

24  
	`equÆSåögObje˘s
(
a
,
b
);

25 
	}
}

27 
˛õ¡
 *
	$¸óãClõ¡
(
vr_evíéo›
 *
vñ
, 
c⁄n
 *conn) {

29 
˛õ¡
 *
c
 = 
	`dÆloc
((client));

36 i‡(
c⁄n
->
sd
 != -1) {

38 
	`vr_£t_n⁄blockög
(
c⁄n
->
sd
);

40 
	`vr_£t_t˝nodñay
(
c⁄n
->
sd
);

42 i‡(
£rvî
.
t˝kì∑live
)

43 
	`vr_£t_t˝kì∑live
(
c⁄n
->
sd
,
£rvî
.
t˝kì∑live
,0,0);

45 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
,
c⁄n
->
sd
,
AE_READABLE
,

46 
ªadQuîyFromClõ¡
, 
c
Ë=
AE_ERR
)

48 
	`log_îr‹
("UnrecoverableÉrror creating client ipfd fileÉvent.");

49 
	`d‰ì
(
c
);

50  
NULL
;

54 
	`£À˘Db
(
c
,0);

56 
c
->
id
 = 
vñ
->
√xt_˛õ¡_id
++;

58 
c
->
c⁄n
 = conn;

60 
c
->
vñ
 = vel;

62 
c
->
sˇnid
 = -1;

64 
c
->
«me
 = 
NULL
;

66 
c
->
buÂos
 = 0;

68 
c
->
quîybuf
 = 
	`sd£m±y
();

70 
c
->
quîybuf_≥ak
 = 0;

72 
c
->
ªqty≥
 = 0;

74 
c
->
¨gc
 = 0;

76 
c
->
¨gv
 = 
NULL
;

78 
c
->
cmd
 = c->
œ°cmd
 = 
NULL
;

80 
c
->
mu…ibulkÀn
 = 0;

81 
c
->
bulkÀn
 = -1;

82 
c
->
£¡Àn
 = 0;

83 
c
->
Êags
 = 0;

84 
c
->
˘ime
 = c->
œ°öãø˘i⁄
 = 
vñ
->
unixtime
;

85 
c
->
authítiˇãd
 = 0;

86 
c
->
ª∂°©e
 = 
REPL_STATE_NONE
;

87 
c
->
ª∂_put_⁄löe_⁄_ack
 = 0;

88 
c
->
ª∂off
 = 0;

89 
c
->
ª∂_ack_off
 = 0;

90 
c
->
ª∂_ack_time
 = 0;

91 
c
->
¶ave_li°íög_p‹t
 = 0;

92 
c
->
¶ave_ˇ∑
 = 
SLAVE_CAPA_NONE
;

93 
c
->
ª∂y
 = 
	`dli°Cª©e
();

94 
c
->
ª∂y_byãs
 = 0;

95 
c
->
obuf_so·_limô_ªached_time
 = 0;

97 
	`dli°SëFªeMëhod
(
c
->
ª∂y
,
‰ìClõ¡RïlyVÆue
);

98 
	`dli°SëDupMëhod
(
c
->
ª∂y
,
dupClõ¡RïlyVÆue
);

99 
c
->
bty≥
 = 
BLOCKED_NONE
;

100 
c
->
bp›
.
timeout
 = 0;

101 
c
->
bp›
.
keys
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

102 
c
->
bp›
.
èrgë
 = 
NULL
;

103 
c
->
bp›
.
numª∂iˇs
 = 0;

104 
c
->
bp›
.
ª∂off£t
 = 0;

105 
c
->
woff
 = 0;

106 
c
->
w©ched_keys
 = 
	`dli°Cª©e
();

107 
c
->
pubsub_ch™√ls
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

108 
c
->
pubsub_∑âîns
 = 
	`dli°Cª©e
();

109 
c
->
≥îid
 = 
NULL
;

110 
c
->
curidx
 = -1;

111 
c
->
èridx
 = -1;

112 
c
->
°ïs
 = 0;

113 
c
->
ˇche
 = 
NULL
;

114 
	`dli°SëFªeMëhod
(
c
->
pubsub_∑âîns
,
de¸RefCou¡Void
);

115 
	`dli°SëM©chMëhod
(
c
->
pubsub_∑âîns
,
li°M©chObje˘s
);

116 i‡(
c⁄n
->
sd
 !-1Ë
	`dli°AddNodeTaû
(
vñ
->
˛õ¡s
,
c
);

117 
	`öôClõ¡Mu…iSèã
(
c
);

118  
c
;

119 
	}
}

144 
	$¥ï¨eClõ¡ToWrôe
(
˛õ¡
 *
c
) {

147 i‡(
c
->
Êags
 & 
CLIENT_LUA
Ë 
VR_OK
;

150 i‡(
c
->
Êags
 & (
CLIENT_REPLY_OFF
|
CLIENT_REPLY_SKIP
)Ë 
VR_ERROR
;

155 i‡((
c
->
Êags
 & 
CLIENT_MASTER
) &&

156 !(
c
->
Êags
 & 
CLIENT_MASTER_FORCE_REPLY
)Ë 
VR_ERROR
;

158 i‡(
c
->
c⁄n
->
sd
 <0Ë 
VR_ERROR
;

165 i‡(!
	`˛õ¡HasPídögRïlõs
(
c
) &&

166 !(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) &&

167 (
c
->
ª∂°©e
 =
REPL_STATE_NONE
 ||

168 (
c
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 && !c->
ª∂_put_⁄löe_⁄_ack
)))

176 
c
->
Êags
 |
CLIENT_PENDING_WRITE
;

177 
	`dli°AddNodeHód
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,c);

181  
VR_OK
;

182 
	}
}

187 
robj
 *
	$dupLa°Obje˘IfNìded
(
dli°
 *
ª∂y
) {

188 
robj
 *
√w
, *
cur
;

189 
dli°Node
 *
 
;

190 
	`ASSERT
(
	`dli°Lígth
(
ª∂y
) > 0);

191 
 
 = 
	`dli°La°
(
ª∂y
);

192 
cur
 = 
	`dli°NodeVÆue
(
 
);

193 i‡(
cur
->
c⁄°™t
) {

194 
√w
 = 
	`dupSåögObje˘
(
cur
);

195 
	`dli°NodeVÆue
(
 
Ë
√w
;

197  
	`dli°NodeVÆue
(
 
);

198 
	}
}

204 
	$_addRïlyToBuf„r
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

205 
size_t
 
avaûabÀ
 = (
c
->
buf
)-c->
buÂos
;

207 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
Ë 
VR_OK
;

211 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë> 0Ë 
VR_ERROR
;

214 i‡(
Àn
 > 
avaûabÀ
Ë 
VR_ERROR
;

216 
	`mem˝y
(
c
->
buf
+c->
buÂos
,
s
,
Àn
);

217 
c
->
buÂos
+=
Àn
;

218  
VR_OK
;

219 
	}
}

222 
	$_addRïlyObje˘ToLi°
(
˛õ¡
 *
c
, 
robj
 *
o
) {

223 
robj
 *
èû
, *
obj
;

225 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

227 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

228 i‡(
o
->
c⁄°™t
)

229 
obj
 = 
o
;

231 
obj
 = 
	`dupSåögObje˘
(
o
);

232 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
obj
);

233 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
obj
);

235 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

238 i‡(
èû
->
±r
 !
NULL
 &&

239 
èû
->
ícodög
 =
OBJ_ENCODING_RAW
 &&

240 
	`sd¶í
(
èû
->
±r
)+sd¶í(
o
->±rË<
PROTO_REPLY_CHUNK_BYTES
)

242 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

243 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

244 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
o
->±r,
	`sd¶í
(o->ptr));

245 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

247 i‡(
o
->
c⁄°™t
)

248 
obj
 = 
o
;

250 
obj
 = 
	`dupSåögObje˘
(
o
);

251 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
obj
);

252 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
obj
);

255 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

256 
	}
}

261 
	$_addRïlySdsToLi°
(
˛õ¡
 *
c
, 
sds
 
s
) {

262 
robj
 *
èû
;

264 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) {

265 
	`sds‰ì
(
s
);

269 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

270 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
s
));

271 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
s
);

273 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

276 i‡(
èû
->
±r
 !
NULL
 &&Åaû->
ícodög
 =
OBJ_ENCODING_RAW
 &&

277 
	`sd¶í
(
èû
->
±r
)+sd¶í(
s
Ë<
PROTO_REPLY_CHUNK_BYTES
)

279 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

280 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

281 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
s
,
	`sd¶í
(s));

282 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

283 
	`sds‰ì
(
s
);

285 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
s
));

286 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
s
);

289 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

290 
	}
}

293 
	$_addRïlySåögToLi°
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

294 
robj
 *
èû
;

296 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

298 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

299 
robj
 *
o
 = 
	`¸óãSåögObje˘
(
s
,
Àn
);

301 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
o
);

302 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

304 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

307 i‡(
èû
->
±r
 !
NULL
 &&Åaû->
ícodög
 =
OBJ_ENCODING_RAW
 &&

308 
	`sd¶í
(
èû
->
±r
)+
Àn
 <
PROTO_REPLY_CHUNK_BYTES
)

310 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

311 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

312 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
s
,
Àn
);

313 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

315 
robj
 *
o
 = 
	`¸óãSåögObje˘
(
s
,
Àn
);

317 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
o
);

318 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

321 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

322 
	}
}

329 
	$addRïly
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

331 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) ;

341 i‡(
	`sdsEncodedObje˘
(
obj
)) {

342 i‡(
	`_addRïlyToBuf„r
(
c
,
obj
->
±r
,
	`sd¶í
(obj->±r)Ë!
VR_OK
)

343 
	`_addRïlyObje˘ToLi°
(
c
,
obj
);

344 } i‡(
obj
->
ícodög
 =
OBJ_ENCODING_INT
) {

346 
robj
 *
obj_√w
;

350 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë=0 && ((c->
buf
Ë- c->
buÂos
) >= 32) {

351 
buf
[32];

352 
Àn
;

354 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),()
obj
->
±r
);

356 i‡(
	`_addRïlyToBuf„r
(
c
,
buf
,
Àn
Ë=
VR_OK
)

362 
obj_√w
 = 
	`gëDecodedObje˘
(
obj
);

363 i‡(
	`_addRïlyToBuf„r
(
c
,
obj_√w
->
±r
,
	`sd¶í
(obj_√w->±r)Ë!
VR_OK
)

364 
	`_addRïlyObje˘ToLi°
(
c
,
obj_√w
);

365 i‡(
obj_√w
 !
obj
Ë
	`‰ìObje˘
(obj_new);

367 
	`£rvîP™ic
("Wrong obj->encoding ináddReply()");

369 
	}
}

372 
	$addRïlySds
(
˛õ¡
 *
c
, 
sds
 
s
) {

373 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) {

375 
	`sds‰ì
(
s
);

378 i‡(
	`_addRïlyToBuf„r
(
c
,
s
,
	`sd¶í
(s)Ë=
VR_OK
) {

379 
	`sds‰ì
(
s
);

382 
	`_addRïlySdsToLi°
(
c
,
s
);

384 
	}
}

386 
	$addRïlySåög
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

387 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) ;

388 i‡(
	`_addRïlyToBuf„r
(
c
,
s
,
Àn
Ë!
VR_OK
)

389 
	`_addRïlySåögToLi°
(
c
,
s
,
Àn
);

390 
	}
}

393 
	$addRïlyEº‹Lígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

394 
	`addRïlySåög
(
c
,"-ERR ",5);

395 
	`addRïlySåög
(
c
,
s
,
Àn
);

396 
	`addRïlySåög
(
c
,"\r\n",2);

397 
	}
}

399 
	$addRïlyEº‹
(
˛õ¡
 *
c
, c⁄° *
îr
) {

400 
	`addRïlyEº‹Lígth
(
c
,
îr
,
	`°æí
(err));

401 
	}
}

404 
	$addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...) {

405 
size_t
 
l
, 
j
;

406 
va_li°
 
≠
;

407 
	`va_°¨t
(
≠
,
fmt
);

408 
sds
 
s
 = 
	`sdsˇtv¥ötf
(
	`sd£m±y
(),
fmt
,
≠
);

409 
	`va_íd
(
≠
);

412 
l
 = 
	`sd¶í
(
s
);

413 
j
 = 0; j < 
l
; j++) {

414 i‡(
s
[
j
] == '\r' || s[j] == '\n') s[j] = ' ';

416 
	`addRïlyEº‹Lígth
(
c
,
s
,
	`sd¶í
(s));

417 
	`sds‰ì
(
s
);

418 
	}
}

420 
	$addRïlySètusLígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

421 
	`addRïlySåög
(
c
,"+",1);

422 
	`addRïlySåög
(
c
,
s
,
Àn
);

423 
	`addRïlySåög
(
c
,"\r\n",2);

424 
	}
}

426 
	$addRïlySètus
(
˛õ¡
 *
c
, c⁄° *
°©us
) {

427 
	`addRïlySètusLígth
(
c
,
°©us
,
	`°æí
(status));

428 
	}
}

431 
	$addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...) {

432 
va_li°
 
≠
;

433 
	`va_°¨t
(
≠
,
fmt
);

434 
sds
 
s
 = 
	`sdsˇtv¥ötf
(
	`sd£m±y
(),
fmt
,
≠
);

435 
	`va_íd
(
≠
);

436 
	`addRïlySètusLígth
(
c
,
s
,
	`sd¶í
(s));

437 
	`sds‰ì
(
s
);

438 
	}
}

442 *
	$addDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
) {

446 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
Ë 
NULL
;

447 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
NULL
));

448  
	`dli°La°
(
c
->
ª∂y
);

449 
	}
}

452 
	$£tDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
, *
node
, 
Àngth
) {

453 
dli°Node
 *
 
 = (dli°Node*)
node
;

454 
robj
 *
Àn
, *
√xt
;

457 i‡(
node
 =
NULL
) ;

459 
Àn
 = 
	`dli°NodeVÆue
(
 
);

460 
Àn
->
±r
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"*%ld\r\n",
Àngth
);

461 
Àn
->
ícodög
 = 
OBJ_ENCODING_RAW
;

462 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
Àn
->
±r
);

463 i‡(
 
->
√xt
 !
NULL
) {

464 
√xt
 = 
	`dli°NodeVÆue
(
 
->next);

467 i‡(
√xt
->
±r
 !
NULL
) {

468 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
Àn
->
±r
);

469 
c
->
ª∂y_byãs
 -
	`gëSåögObje˘SdsU£dMem‹y
(
√xt
);

470 
Àn
->
±r
 = 
	`sdsˇéí
÷í->±r,
√xt
->±r,
	`sd¶í
(next->ptr));

471 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
Àn
->
±r
);

472 
	`dli°DñNode
(
c
->
ª∂y
,
 
->
√xt
);

475 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

476 
	}
}

480 
	$addRïlyDoubÀ
(
˛õ¡
 *
c
, 
d
) {

481 
dbuf
[128], 
sbuf
[128];

482 
dÀn
, 
¶í
;

483 i‡(
	`isöf
(
d
)) {

486 
	`addRïlyBulkCSåög
(
c
, 
d
 > 0 ? "inf" : "-inf");

488 
dÀn
 = 
	`¢¥ötf
(
dbuf
,(dbuf),"%.17g",
d
);

489 
¶í
 = 
	`¢¥ötf
(
sbuf
,(sbuf),"$%d\r\n%s\r\n",
dÀn
,
dbuf
);

490 
	`addRïlySåög
(
c
,
sbuf
,
¶í
);

492 
	}
}

498 
	$addRïlyHum™L⁄gDoubÀ
(
˛õ¡
 *
c
, 
d
) {

499 
robj
 *
o
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
d
,1);

500 
	`addRïlyBulk
(
c
,
o
);

501 
	`de¸RefCou¡
(
o
);

502 
	}
}

507 
	$addRïlyL⁄gL⁄gWôhPªfix
(
˛õ¡
 *
c
, 
Œ
, 
¥efix
) {

508 
buf
[128];

509 
Àn
;

514 i‡(
¥efix
 ='*' && 
Œ
 < 
OBJ_SHARED_BULKHDR_LEN
 &&Ül >= 0) {

515 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[
Œ
]);

517 } i‡(
¥efix
 ='$' && 
Œ
 < 
OBJ_SHARED_BULKHDR_LEN
 &&Ül >= 0) {

518 
	`addRïly
(
c
,
sh¨ed
.
bulkhdr
[
Œ
]);

522 
buf
[0] = 
¥efix
;

523 
Àn
 = 
	`Œ2°rög
(
buf
+1,(buf)-1,
Œ
);

524 
buf
[
Àn
+1] = '\r';

525 
buf
[
Àn
+2] = '\n';

526 
	`addRïlySåög
(
c
,
buf
,
Àn
+3);

527 
	}
}

529 
	$addRïlyL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
) {

530 i‡(
Œ
 == 0)

531 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

532 i‡(
Œ
 == 1)

533 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

535 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Œ
,':');

536 
	}
}

538 
	$addRïlyMu…iBulkLí
(
˛õ¡
 *
c
, 
Àngth
) {

539 i‡(
Àngth
 < 
OBJ_SHARED_BULKHDR_LEN
)

540 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[
Àngth
]);

542 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àngth
,'*');

543 
	}
}

546 
	$addRïlyBulkLí
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

547 
size_t
 
Àn
;

549 i‡(
	`sdsEncodedObje˘
(
obj
)) {

550 
Àn
 = 
	`sd¶í
(
obj
->
±r
);

552 
n
 = ()
obj
->
±r
;

555 
Àn
 = 1;

556 i‡(
n
 < 0) {

557 
Àn
++;

558 
n
 = -n;

560 (
n
 =Ç/10) != 0) {

561 
Àn
++;

565 i‡(
Àn
 < 
OBJ_SHARED_BULKHDR_LEN
)

566 
	`addRïly
(
c
,
sh¨ed
.
bulkhdr
[
Àn
]);

568 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àn
,'$');

569 
	}
}

572 
	$addRïlyBulk
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

573 
	`addRïlyBulkLí
(
c
,
obj
);

574 
	`addRïly
(
c
,
obj
);

575 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

576 
	}
}

579 
	$addRïlyBulkCBuf„r
(
˛õ¡
 *
c
, c⁄° *
p
, 
size_t
 
Àn
) {

580 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àn
,'$');

581 
	`addRïlySåög
(
c
,
p
,
Àn
);

582 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

583 
	}
}

586 
	$addRïlyBulkSds
(
˛õ¡
 *
c
, 
sds
 
s
) {

587 
	`addRïlySds
(
c
,
	`sdsˇtfmt
(
	`sd£m±y
(),"$%u\r\n",

588 ()
	`sd¶í
(
s
)));

589 
	`addRïlySds
(
c
,
s
);

590 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

591 
	}
}

594 
	$addRïlyBulkCSåög
(
˛õ¡
 *
c
, c⁄° *
s
) {

595 i‡(
s
 =
NULL
) {

596 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

598 
	`addRïlyBulkCBuf„r
(
c
,
s
,
	`°æí
(s));

600 
	}
}

603 
	$addRïlyBulkL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
) {

604 
buf
[64];

605 
Àn
;

607 
Àn
 = 
	`Œ2°rög
(
buf
,64,
Œ
);

608 
	`addRïlyBulkCBuf„r
(
c
,
buf
,
Àn
);

609 
	}
}

615 
	$c›yClõ¡OuçutBuf„r
(
˛õ¡
 *
d°
, clõ¡ *
§c
) {

616 
	`dli°Rñó£
(
d°
->
ª∂y
);

617 
d°
->
ª∂y
 = 
	`dli°Dup
(
§c
->reply);

618 
	`mem˝y
(
d°
->
buf
,
§c
->buf,§c->
buÂos
);

619 
d°
->
buÂos
 = 
§c
->bufpos;

620 
d°
->
ª∂y_byãs
 = 
§c
->reply_bytes;

621 
	}
}

626 
	$˛õ¡HasPídögRïlõs
(
˛õ¡
 *
c
) {

627  
c
->
buÂos
 || 
	`dli°Lígth
(c->
ª∂y
);

628 
	}
}

630 
	$‰ìClõ¡Argv
(
˛õ¡
 *
c
) {

631 
j
;

632 
j
 = 0; j < 
c
->
¨gc
; j++)

633 
	`‰ìObje˘
(
c
->
¨gv
[
j
]);

634 
c
->
¨gc
 = 0;

635 
c
->
cmd
 = 
NULL
;

636 
	}
}

642 
	$disc⁄√˘Sœves
() {

643 
	`dli°Lígth
(
ª∂
.
¶aves
)) {

644 
dli°Node
 *
 
 = 
	`dli°Fú°
(
ª∂
.
¶aves
);

645 
	`‰ìClõ¡
((
˛õ¡
*)
 
->
vÆue
);

647 
	}
}

653 
	$u∆ökClõ¡FromEvíéo›
(
˛õ¡
 *
c
) {

654 
dli°Node
 *
 
;

655 
vr_evíéo›
 *
vñ
 = 
c
->vel;

657 
c
->
vñ
 = 
NULL
;

659 i‡(
c
->
°ïs
 >= 1) ;

662 i‡(
vñ
->
cuºít_˛õ¡
 =
c
Ëvñ->cuºít_˛õ¡ = 
NULL
;

667 i‡(
c
->
c⁄n
->
sd
 != -1) {

669 
 
 = 
	`dli°SórchKey
(
vñ
->
˛õ¡s
,
c
);

670 
	`ASSERT
(
 
 !
NULL
);

671 
	`dli°DñNode
(
vñ
->
˛õ¡s
,
 
);

674 
	`´DñëeFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_READABLE
);

675 
	`´DñëeFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_WRITABLE
);

679 i‡(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) {

680 
 
 = 
	`dli°SórchKey
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
c
);

681 
	`ASSERT
(
 
 !
NULL
);

682 
	`dli°DñNode
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

683 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

688 i‡(
c
->
Êags
 & 
CLIENT_UNBLOCKED
) {

689 
 
 = 
	`dli°SórchKey
(
vñ
->
unblocked_˛õ¡s
,
c
);

690 
	`ASSERT
(
 
 !
NULL
);

691 
	`dli°DñNode
(
vñ
->
unblocked_˛õ¡s
,
 
);

692 
c
->
Êags
 &~
CLIENT_UNBLOCKED
;

694 
	}
}

696 
	$lökClõ¡ToEvíéo›
(
˛õ¡
 *
c
,
vr_evíéo›
 *
vñ
) {

697 
	`dli°Push
(
vñ
->
˛õ¡s
,
c
);

698 
c
->
vñ
 = vel;

699 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_READABLE
,

700 
ªadQuîyFromClõ¡
,
c
Ë=
AE_ERR
)

702 
	`‰ìClõ¡
(
c
);

707 
	`¥o˚ssI≈utBuf„r
(
c
);

708 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

709 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

711 i‡(
	`˛õ¡HasPídögRïlõs
(
c
) &&

712 !(
c
->
Êags
&
CLIENT_PENDING_WRITE
)) {

713 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
, 
c
->
c⁄n
->
sd
, 
AE_WRITABLE
,

714 
£ndRïlyToClõ¡
, 
c
Ë=
AE_ERR
)

716 
	`‰ìClõ¡Async
(
c
);

720 
	}
}

725 
	$u∆ökClõ¡
(
˛õ¡
 *
c
) {

726 
dli°Node
 *
 
;

729 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =cËc->vñ->cuºít_˛õ¡ = 
NULL
;

734 i‡(
c
->
c⁄n
->
sd
 != -1) {

736 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s
,c);

737 
	`ASSERT
(
 
 !
NULL
);

738 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s
,
 
);

741 
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_READABLE
);

742 
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_WRITABLE
);

743 
	`c⁄n_put
(
c
->
c⁄n
);

744 
c
->
c⁄n
 = 
NULL
;

748 i‡(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) {

749 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,c);

750 
	`ASSERT
(
 
 !
NULL
);

751 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

752 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

757 i‡(
c
->
Êags
 & 
CLIENT_UNBLOCKED
) {

758 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
unblocked_˛õ¡s
,c);

759 
	`ASSERT
(
 
 !
NULL
);

760 
	`dli°DñNode
(
c
->
vñ
->
unblocked_˛õ¡s
,
 
);

761 
c
->
Êags
 &~
CLIENT_UNBLOCKED
;

763 
	}
}

765 
	$‰ìClõ¡
(
˛õ¡
 *
c
) {

766 
dli°Node
 *
 
;

773 i‡(
ª∂
.
rﬁe
 =
REPLICATION_ROLE_MASTER
 && 
c
->
Êags
 & 
CLIENT_MASTER
) {

774 
	`log_w¨n
("connection with masterÜost.");

775 i‡(!(
c
->
Êags
 & (
CLIENT_CLOSE_AFTER_REPLY
|

776 
CLIENT_CLOSE_ASAP
|

777 
CLIENT_BLOCKED
|

778 
CLIENT_UNBLOCKED
)))

780 
	`ª∂iˇti⁄CacheMa°î
(
c
);

786 i‡((
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& !(c->Êag†& 
CLIENT_MONITOR
)) {

787 
	`log_w¨n
("connection with slave %sÜost.",

788 
	`ª∂iˇti⁄GëSœveName
(
c
));

792 
	`sds‰ì
(
c
->
quîybuf
);

793 
c
->
quîybuf
 = 
NULL
;

796 i‡(
c
->
Êags
 & 
CLIENT_BLOCKED
Ë
	`unblockClõ¡
(c);

797 
	`di˘Rñó£
(
c
->
bp›
.
keys
);

800 
	`unw©chAŒKeys
(
c
);

801 
	`dli°Rñó£
(
c
->
w©ched_keys
);

804 
	`pubsubUnsubs¸ibeAŒCh™√ls
(
c
,0);

805 
	`pubsubUnsubs¸ibeAŒP©ã∫s
(
c
,0);

806 
	`di˘Rñó£
(
c
->
pubsub_ch™√ls
);

807 
	`dli°Rñó£
(
c
->
pubsub_∑âîns
);

810 
	`dli°Rñó£
(
c
->
ª∂y
);

811 
	`‰ìClõ¡Argv
(
c
);

816 
	`u∆ökClõ¡
(
c
);

820 i‡(
c
->
Êags
 & 
CLIENT_SLAVE
) {

821 i‡(
c
->
ª∂°©e
 =
SLAVE_STATE_SEND_BULK
) {

822 i‡(
c
->
ª∂dbfd
 !-1Ë
	`˛o£
(c->repldbfd);

823 i‡(
c
->
ª∂¥ómbÀ
Ë
	`sds‰ì
(c->replpreamble);

825 
dli°
 *
l
 = (
c
->
Êags
 & 
CLIENT_MONITOR
Ë? 
£rvî
.
m⁄ô‹s
 : 
ª∂
.
¶aves
;

826 
 
 = 
	`dli°SórchKey
(
l
,
c
);

827 
	`ASSERT
(
 
 !
NULL
);

828 
	`dli°DñNode
(
l
,
 
);

832 i‡(
c
->
Êags
 & 
CLIENT_SLAVE
 && 
	`dli°Lígth
(
ª∂
.
¶aves
) == 0)

833 
ª∂
.
ª∂_no_¶aves_sö˚
 = 
c
->
vñ
->
unixtime
;

834 
	`ª‰eshGoodSœvesCou¡
();

839 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ë
	`ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

843 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_ASAP
) {

844 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_to_˛o£
,c);

845 
	`ASSERT
(
 
 !
NULL
);

846 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_to_˛o£
,
 
);

851 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

852 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

853 
	`‰ìClõ¡Mu…iSèã
(
c
);

854 
	`sds‰ì
(
c
->
≥îid
);

855 
	`d‰ì
(
c
);

856 
	}
}

863 
	$‰ìClõ¡Async
(
˛õ¡
 *
c
) {

864 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_ASAP
 || c->Êag†& 
CLIENT_LUA
) ;

865 
c
->
Êags
 |
CLIENT_CLOSE_ASAP
;

866 
	`dli°AddNodeTaû
(
c
->
vñ
->
˛õ¡s_to_˛o£
,c);

867 
	}
}

869 
	$‰ìClõ¡sInAsyncFªeQueue
(
vr_evíéo›
 *
vñ
) {

870 
	`dli°Lígth
(
vñ
->
˛õ¡s_to_˛o£
)) {

871 
dli°Node
 *
 
 = 
	`dli°Fú°
(
vñ
->
˛õ¡s_to_˛o£
);

872 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

874 
c
->
Êags
 &~
CLIENT_CLOSE_ASAP
;

875 
	`‰ìClõ¡
(
c
);

876 
	`dli°DñNode
(
vñ
->
˛õ¡s_to_˛o£
,
 
);

878 
	}
}

883 
	$wrôeToClõ¡
(
fd
, 
˛õ¡
 *
c
, 
h™dÀr_ö°ÆÀd
) {

884 
ssize_t
 
nwrôãn
 = 0, 
tŸwrôãn
 = 0;

885 
size_t
 
objÀn
;

886 
size_t
 
objmem
;

887 
robj
 *
o
;

888 
maxmem‹y
;

890 
maxmem‹y
 = 
c
->
vñ
->
cc
.maxmemory;

891 
	`˛õ¡HasPídögRïlõs
(
c
)) {

893 i‡(
c
->
buÂos
 > 0) {

894 
nwrôãn
 = 
	`vr_wrôe
(
fd
,
c
->
buf
+c->
£¡Àn
,c->
buÂos
-c->sentlen);

895 i‡(
nwrôãn
 <= 0) ;

896 
c
->
£¡Àn
 +
nwrôãn
;

897 
tŸwrôãn
 +
nwrôãn
;

902 i‡(()
c
->
£¡Àn
 =c->
buÂos
) {

903 
c
->
buÂos
 = 0;

904 
c
->
£¡Àn
 = 0;

907 
o
 = 
	`dli°NodeVÆue
(
	`dli°Fú°
(
c
->
ª∂y
));

908 
objÀn
 = 
	`sd¶í
(
o
->
±r
);

909 
objmem
 = 
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

911 i‡(
objÀn
 == 0) {

912 
	`dli°DñNode
(
c
->
ª∂y
,
	`dli°Fú°
(c->reply));

913 
c
->
ª∂y_byãs
 -
objmem
;

917 
nwrôãn
 = 
	`vr_wrôe
(
fd
, ((*)
o
->
±r
)+
c
->
£¡Àn
,
objÀn
-c->sentlen);

918 i‡(
nwrôãn
 <= 0) ;

919 
c
->
£¡Àn
 +
nwrôãn
;

920 
tŸwrôãn
 +
nwrôãn
;

924 i‡(
c
->
£¡Àn
 =
objÀn
) {

925 
	`dli°DñNode
(
c
->
ª∂y
,
	`dli°Fú°
(c->reply));

926 
c
->
£¡Àn
 = 0;

927 
c
->
ª∂y_byãs
 -
objmem
;

938 i‡(
tŸwrôãn
 > 
NET_MAX_WRITES_PER_EVENT
 &&

939 (
maxmem‹y
 =0 || 
	`dÆloc_u£d_mem‹y
() < maxmemory))

942 i‡(
nwrôãn
 == -1) {

943 i‡(
î∫o
 =
EAGAIN
) {

944 
nwrôãn
 = 0;

946 
	`log_debug
(
LOG_VERB
,

947 "îr‹ wrôögÅÿ˛õ¡: %s", 
	`°ªº‹
(
î∫o
));

948 
	`‰ìClõ¡
(
c
);

949  
VR_ERROR
;

952 i‡(
tŸwrôãn
 > 0) {

953 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
√t_ouçut_byãs
, ()
tŸwrôãn
);

958 i‡(!(
c
->
Êags
 & 
CLIENT_MASTER
)Ëc->
œ°öãø˘i⁄
 = c->
vñ
->
unixtime
;

960 i‡(!
	`˛õ¡HasPídögRïlõs
(
c
)) {

961 
c
->
£¡Àn
 = 0;

962 i‡(
h™dÀr_ö°ÆÀd
Ë
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_WRITABLE
);

965 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) {

966 
	`‰ìClõ¡
(
c
);

967  
VR_ERROR
;

970  
VR_OK
;

971 
	}
}

974 
	$£ndRïlyToClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

975 
	`UNUSED
(
ñ
);

976 
	`UNUSED
(
mask
);

977 
	`wrôeToClõ¡
(
fd
,
¥ivd©a
,1);

978 
	}
}

984 
	$h™dÀClõ¡sWôhPídögWrôes
(
vr_evíéo›
 *
vñ
) {

985 
dli°Iãr
 
li
;

986 
dli°Node
 *
 
;

987 
¥o˚s£d
 = 
	`dli°Lígth
(
vñ
->
˛õ¡s_≥ndög_wrôe
);

989 
	`dli°Rewöd
(
vñ
->
˛õ¡s_≥ndög_wrôe
,&
li
);

990 (
 
 = 
	`dli°Next
(&
li
))) {

991 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

992 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

993 
	`dli°DñNode
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

996 i‡(
	`wrôeToClõ¡
(
c
->
c⁄n
->
sd
,c,0Ë=
VR_ERROR
) ;

1000 i‡(
	`˛õ¡HasPídögRïlõs
(
c
) &&

1001 
	`´Cª©eFûeEvít
(
vñ
->
ñ
, 
c
->
c⁄n
->
sd
, 
AE_WRITABLE
,

1002 
£ndRïlyToClõ¡
, 
c
Ë=
AE_ERR
)

1004 
	`‰ìClõ¡Async
(
c
);

1007  
¥o˚s£d
;

1008 
	}
}

1012 
	$ª£tClõ¡
(
˛õ¡
 *
c
) {

1013 
ªdisComm™dProc
 *
¥evcmd
 = 
c
->
cmd
 ? c->cmd->
¥oc
 : 
NULL
;

1015 i‡(
c
->
Êags
&
CLIENT_JUMP
)

1018 
	`‰ìClõ¡Argv
(
c
);

1019 
c
->
ªqty≥
 = 0;

1020 
c
->
mu…ibulkÀn
 = 0;

1021 
c
->
bulkÀn
 = -1;

1026 
c
->
Êags
 &~
CLIENT_REPLY_SKIP
;

1027 i‡(
c
->
Êags
 & 
CLIENT_REPLY_SKIP_NEXT
) {

1028 
c
->
Êags
 |
CLIENT_REPLY_SKIP
;

1029 
c
->
Êags
 &~
CLIENT_REPLY_SKIP_NEXT
;

1031 
	}
}

1034 
	$¥o˚ssI∆öeBuf„r
(
˛õ¡
 *
c
) {

1035 *
√wlöe
;

1036 
¨gc
, 
j
;

1037 
sds
 *
¨gv
, 
aux
;

1038 
size_t
 
quîyÀn
;

1042 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
,'\n');

1046 i‡(
√wlöe
 =
NULL
) {

1047 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1048 
	`addRïlyEº‹
(
c
,"ProtocolÉrror:Åoo big inlineÑequest");

1049 
	`£tPrŸocﬁEº‹
(
c
,0);

1051  
VR_ERROR
;

1056 i‡(
√wlöe
 &&Çewlöê!
c
->
quîybuf
 && *(newline-1) == '\r')

1057 
√wlöe
--;

1061 
quîyÀn
 = 
√wlöe
-(
c
->
quîybuf
);

1063 
aux
 = 
	`sd¢ewÀn
(
c
->
quîybuf
,
quîyÀn
);

1065 
¨gv
 = 
	`sds•lô¨gs
(
aux
,&
¨gc
);

1066 
	`sds‰ì
(
aux
);

1067 i‡(
¨gv
 =
NULL
) {

1068 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: unbalanced quotes inÑequest");

1069 
	`£tPrŸocﬁEº‹
(
c
,0);

1070  
VR_ERROR
;

1077 i‡(
quîyÀn
 =0 && 
c
->
Êags
 & 
CLIENT_SLAVE
)

1078 
c
->
ª∂_ack_time
 = c->
vñ
->
unixtime
;

1081 
	`sd§™ge
(
c
->
quîybuf
,
quîyÀn
+2,-1);

1084 i‡(
¨gc
) {

1085 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

1086 
c
->
¨gv
 = 
	`dÆloc
((
robj
*)*
¨gc
);

1091 
c
->
¨gc
 = 0, 
j
 = 0; j <árgc; j++) {

1092 i‡(
	`sd¶í
(
¨gv
[
j
])) {

1093 
c
->
¨gv
[c->
¨gc
] = 
	`¸óãObje˘
(
OBJ_STRING
,¨gv[
j
]);

1094 
c
->
¨gc
++;

1096 
	`sds‰ì
(
¨gv
[
j
]);

1099 
	`d‰ì
(
¨gv
);

1100  
VR_OK
;

1101 
	}
}

1106 
	$£tPrŸocﬁEº‹
(
˛õ¡
 *
c
, 
pos
) {

1107 i‡(
	`log_loggabÀ
(
LOG_VERB
)) {

1108 
sds
 
˛õ¡
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
);

1109 
	`log_debug
(
LOG_VERB
,

1110 "PrŸocﬁÉº‹ from clõ¡: %s", 
˛õ¡
);

1111 
	`sds‰ì
(
˛õ¡
);

1113 
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

1114 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1115 
	}
}

1117 
	$¥o˚ssMu…ibulkBuf„r
(
˛õ¡
 *
c
) {

1118 *
√wlöe
 = 
NULL
;

1119 
pos
 = 0, 
ok
;

1120 
Œ
;

1122 i‡(
c
->
mu…ibulkÀn
 == 0) {

1124 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
¨gc
 == 0);

1127 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
,'\r');

1128 i‡(
√wlöe
 =
NULL
) {

1129 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1130 
	`addRïlyEº‹
(
c
,"ProtocolÉrror:Åoo big mbulk count string");

1131 
	`£tPrŸocﬁEº‹
(
c
,0);

1133  
VR_ERROR
;

1138 i‡(
√wlöe
-(
c
->
quîybuf
Ë> ((sig√d)
	`sd¶í
(c->querybuf)-2))

1139  
VR_ERROR
;

1144 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
quîybuf
[0] == '*');

1146 
ok
 = 
	`°rög2Œ
(
c
->
quîybuf
+1,
√wlöe
-(c->quîybuf+1),&
Œ
);

1147 i‡(!
ok
 || 
Œ
 > 1024*1024) {

1148 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: invalid multibulkÜength");

1149 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1150  
VR_ERROR
;

1154 
pos
 = (
√wlöe
-
c
->
quîybuf
)+2;

1155 i‡(
Œ
 <= 0) {

1156 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1157  
VR_OK
;

1160 
c
->
mu…ibulkÀn
 = 
Œ
;

1163 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

1164 
c
->
¨gv
 = 
	`dÆloc
((
robj
*)*c->
mu…ibulkÀn
);

1167 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
mu…ibulkÀn
 > 0);

1169 
c
->
mu…ibulkÀn
) {

1171 i‡(
c
->
bulkÀn
 == -1) {

1173 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
+
pos
,'\r');

1174 i‡(
√wlöe
 =
NULL
) {

1175 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1176 
	`addRïlyEº‹
(
c
,

1178 
	`£tPrŸocﬁEº‹
(
c
,0);

1179  
VR_ERROR
;

1185 i‡(
√wlöe
-(
c
->
quîybuf
Ë> ((sig√d)
	`sd¶í
(c->querybuf)-2))

1188 i‡(
c
->
quîybuf
[
pos
] != '$') {

1189 
	`addRïlyEº‹F‹m©
(
c
,

1191 
c
->
quîybuf
[
pos
]);

1192 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1193  
VR_ERROR
;

1196 
ok
 = 
	`°rög2Œ
(
c
->
quîybuf
+
pos
+1,
√wlöe
-(c->quîybuf+pos+1),&
Œ
);

1197 i‡(!
ok
 || 
Œ
 < 0 ||Ül > 512*1024*1024) {

1198 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: invalid bulkÜength");

1199 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1200  
VR_ERROR
;

1203 
pos
 +
√wlöe
-(
c
->
quîybuf
+pos)+2;

1204 i‡(
Œ
 >
PROTO_MBULK_BIG_ARG
) {

1205 
size_t
 
qbÀn
;

1212 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1213 
pos
 = 0;

1214 
qbÀn
 = 
	`sd¶í
(
c
->
quîybuf
);

1218 i‡(
qbÀn
 < (
size_t
)
Œ
+2)

1219 
c
->
quîybuf
 = 
	`sdsMakeRoomF‹
(c->quîybuf,
Œ
+2-
qbÀn
);

1221 
c
->
bulkÀn
 = 
Œ
;

1225 i‡(
	`sd¶í
(
c
->
quîybuf
)-
pos
 < ()(c->
bulkÀn
+2)) {

1232 i‡(
pos
 == 0 &&

1233 
c
->
bulkÀn
 >
PROTO_MBULK_BIG_ARG
 &&

1234 (sig√dË
	`sd¶í
(
c
->
quîybuf
Ë=c->
bulkÀn
+2)

1237 
c
->
¨gv
[c->
¨gc
++] = 
	`¸óãObje˘
(
OBJ_STRING
,c->
quîybuf
);

1238 
	`sdsIn¸Lí
(
c
->
quîybuf
,-2);

1241 
c
->
quîybuf
 = 
	`sd¢ewÀn
(
NULL
,c->
bulkÀn
+2);

1242 
	`sds˛ór
(
c
->
quîybuf
);

1243 
pos
 = 0;

1245 
c
->
¨gv
[c->
¨gc
++] =

1246 
	`¸óãSåögObje˘
(
c
->
quîybuf
+
pos
,c->
bulkÀn
);

1247 
pos
 +
c
->
bulkÀn
+2;

1249 
c
->
bulkÀn
 = -1;

1250 
c
->
mu…ibulkÀn
--;

1255 i‡(
pos
Ë
	`sd§™ge
(
c
->
quîybuf
,pos,-1);

1258 i‡(
c
->
mu…ibulkÀn
 =0Ë 
VR_OK
;

1261  
VR_ERROR
;

1262 
	}
}

1264 
	$¥o˚ssI≈utBuf„r
(
˛õ¡
 *
c
) {

1265 
c
->
vñ
->
cuºít_˛õ¡
 = c;

1267 
	`sd¶í
(
c
->
quîybuf
)) {

1269 i‡(!(
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& 
	`˛õ¡sAªPau£d
(c->
vñ
)) ;

1272 i‡(
c
->
Êags
 & 
CLIENT_BLOCKED
) ;

1277 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

1280 i‡(!
c
->
ªqty≥
) {

1281 i‡(
c
->
quîybuf
[0] == '*') {

1283 
c
->
ªqty≥
 = 
PROTO_REQ_MULTIBULK
;

1285 
c
->
ªqty≥
 = 
PROTO_REQ_INLINE
;

1289 i‡(
c
->
ªqty≥
 =
PROTO_REQ_INLINE
) {

1290 i‡(
	`¥o˚ssI∆öeBuf„r
(
c
Ë!
VR_OK
) ;

1291 } i‡(
c
->
ªqty≥
 =
PROTO_REQ_MULTIBULK
) {

1293 i‡(
	`¥o˚ssMu…ibulkBuf„r
(
c
Ë!
VR_OK
) ;

1295 
	`£rvîP™ic
("UnknownÑequestÅype");

1300 i‡(
c
->
¨gc
 == 0) {

1301 
	`ª£tClõ¡
(
c
);

1305 i‡(
	`¥o˚ssComm™d
(
c
Ë=
VR_OK
)

1306 
	`ª£tClõ¡
(
c
);

1309 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =
NULL
) ;

1314 i‡(
c
->
Êags
&
CLIENT_JUMP
) ;

1317 
c
->
vñ
->
cuºít_˛õ¡
 = 
NULL
;

1318 
	}
}

1321 
	$ªadQuîyFromClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

1322 
˛õ¡
 *
c
 = (˛õ¡*Ë
¥ivd©a
;

1323 
ƒód
, 
ªadÀn
;

1324 
size_t
 
qbÀn
;

1325 
	`UNUSED
(
ñ
);

1326 
	`UNUSED
(
mask
);

1328 
ªadÀn
 = 
PROTO_IOBUF_LEN
;

1335 i‡(
c
->
ªqty≥
 =
PROTO_REQ_MULTIBULK
 && c->
mu…ibulkÀn
 && c->
bulkÀn
 != -1

1336 && 
c
->
bulkÀn
 >
PROTO_MBULK_BIG_ARG
)

1338 
ªmaöög
 = ()(
c
->
bulkÀn
+2)-
	`sd¶í
(c->
quîybuf
);

1340 i‡(
ªmaöög
 < 
ªadÀn
)Ñeadlen =Ñemaining;

1343 
qbÀn
 = 
	`sd¶í
(
c
->
quîybuf
);

1344 i‡(
c
->
quîybuf_≥ak
 < 
qbÀn
) c->querybuf_peak = qblen;

1345 
c
->
quîybuf
 = 
	`sdsMakeRoomF‹
(c->quîybuf, 
ªadÀn
);

1347 
ƒód
 = 
	`vr_ªad
(
fd
, 
c
->
quîybuf
+
qbÀn
, 
ªadÀn
);

1348 i‡(
ƒód
 == -1) {

1349 i‡(
î∫o
 =
EAGAIN
) {

1352 
	`log_debug
(
LOG_VERB
, "ªadög from clõ¡: %s",
	`°ªº‹
(
î∫o
));

1353 
	`‰ìClõ¡
(
c
);

1356 } i‡(
ƒód
 == 0) {

1357 
	`log_debug
(
LOG_VERB
, "client closed connection");

1358 
	`‰ìClõ¡
(
c
);

1362 
	`sdsIn¸Lí
(
c
->
quîybuf
,
ƒód
);

1363 
c
->
œ°öãø˘i⁄
 = c->
vñ
->
unixtime
;

1364 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ëc->
ª∂off
 +
ƒód
;

1365 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
√t_öput_byãs
, 
ƒód
);

1366 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
£rvî
.
˛õ¡_max_quîybuf_Àn
) {

1367 
sds
 
ci
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
), 
byãs
 = sdsempty();

1369 
byãs
 = 
	`sdsˇåïr
(byãs,
c
->
quîybuf
,64);

1370 
	`log_w¨n
("˛osög clõ¡Åh©Ñóched max quîy buf„∏Àngth: %†(qbu‡öôü»byãs: %s)", 
ci
, 
byãs
);

1371 
	`sds‰ì
(
ci
);

1372 
	`sds‰ì
(
byãs
);

1373 
	`‰ìClõ¡
(
c
);

1377 
	`¥o˚ssI≈utBuf„r
(
c
);

1380 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

1381 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

1383 
	}
}

1386 
	$gëClõ¡sMaxBuf„rs
(
vr_evíéo›
 *
vñ
, *
l⁄ge°_ouçut_li°
,

1387 *
bigge°_öput_buf„r
) {

1388 
˛õ¡
 *
c
;

1389 
dli°Node
 *
 
;

1390 
dli°Iãr
 
li
;

1391 
lﬁ
 = 0, 
bib
 = 0;

1394 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1395 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1396 
c
 = 
	`dli°NodeVÆue
(
 
);

1398 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë> 
lﬁ
)Üol = dlistLength(c->reply);

1399 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
bib
) bib = sdslen(c->querybuf);

1401 *
l⁄ge°_ouçut_li°
 = 
lﬁ
;

1402 *
bigge°_öput_buf„r
 = 
bib
;

1403 
	}
}

1417 
	$gíClõ¡PìrId
(
˛õ¡
 *˛õ¡, *
≥îid
,

1418 
size_t
 
≥îid_Àn
) {

1419 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNIX_SOCKET
) {

1421 
	`¢¥ötf
(
≥îid
,
≥îid_Àn
,"%s:0",
£rvî
.
unixsockë
);

1424 
	`vr_√t_f‹m©_≥î
(
˛õ¡
->
c⁄n
->
sd
,
≥îid
,
≥îid_Àn
);

1426 
	}
}

1434 *
	$gëClõ¡PìrId
(
˛õ¡
 *
c
) {

1435 
≥îid
[
VR_INET_PEER_ID_LEN
];

1437 i‡(
c
->
≥îid
 =
NULL
) {

1438 
	`gíClõ¡PìrId
(
c
,
≥îid
,(peerid));

1439 
c
->
≥îid
 = 
	`sd¢ew
(peerid);

1441  
c
->
≥îid
;

1442 
	}
}

1447 
sds
 
	$ˇtClõ¡InfoSåög
(
sds
 
s
, 
˛õ¡
 *client) {

1448 
Êags
[16], 
evíts
[3], *
p
;

1449 
emask
;

1451 
p
 = 
Êags
;

1453 i‡(
˛õ¡
->
Êags
 & 
CLIENT_SLAVE
) {

1454 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MONITOR
)

1455 *
p
++ = 'O';

1457 *
p
++ = 'S';

1459 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MASTER
Ë*
p
++ = 'M';

1460 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MULTI
Ë*
p
++ = 'x';

1461 i‡(
˛õ¡
->
Êags
 & 
CLIENT_BLOCKED
Ë*
p
++ = 'b';

1462 i‡(
˛õ¡
->
Êags
 & 
CLIENT_DIRTY_CAS
Ë*
p
++ = 'd';

1463 i‡(
˛õ¡
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
Ë*
p
++ = 'c';

1464 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNBLOCKED
Ë*
p
++ = 'u';

1465 i‡(
˛õ¡
->
Êags
 & 
CLIENT_CLOSE_ASAP
Ë*
p
++ = 'A';

1466 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNIX_SOCKET
Ë*
p
++ = 'U';

1467 i‡(
˛õ¡
->
Êags
 & 
CLIENT_READONLY
Ë*
p
++ = 'r';

1468 i‡(
p
 =
Êags
) *p++ = 'N';

1469 *
p
++ = '\0';

1471 
emask
 = 
˛õ¡
->
c⁄n
->
sd
 =-1 ? 0 : 
	`´GëFûeEvíts
(˛õ¡->
vñ
->
ñ
,client->conn->sd);

1472 
p
 = 
evíts
;

1473 i‡(
emask
 & 
AE_READABLE
Ë*
p
++ = 'r';

1474 i‡(
emask
 & 
AE_WRITABLE
Ë*
p
++ = 'w';

1475 *
p
 = '\0';

1477  
	`sdsˇtfmt
(
s
,

1479 
˛õ¡
->
curidx
,

1480 (Ë
˛õ¡
->
id
,

1481 
	`gëClõ¡PìrId
(
˛õ¡
),

1482 
˛õ¡
->
c⁄n
->
sd
,

1483 
˛õ¡
->
«me
 ? (*)˛õ¡->«me->
±r
 : "",

1484 ()(
˛õ¡
->
vñ
->
unixtime
 - clõ¡->
˘ime
),

1485 ()(
˛õ¡
->
vñ
->
unixtime
 - clõ¡->
œ°öãø˘i⁄
),

1486 
Êags
,

1487 
˛õ¡
->
di˘id
,

1488 (Ë
	`di˘Size
(
˛õ¡
->
pubsub_ch™√ls
),

1489 (Ë
	`dli°Lígth
(
˛õ¡
->
pubsub_∑âîns
),

1490 (
˛õ¡
->
Êags
 & 
CLIENT_MULTI
Ë? clõ¡->
m°©e
.
cou¡
 : -1,

1491 (Ë
	`sd¶í
(
˛õ¡
->
quîybuf
),

1492 (Ë
	`sdßvaû
(
˛õ¡
->
quîybuf
),

1493 (Ë
˛õ¡
->
buÂos
,

1494 (Ë
	`dli°Lígth
(
˛õ¡
->
ª∂y
),

1495 (Ë
	`gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
),

1496 
evíts
,

1497 
˛õ¡
->
œ°cmd
 ? clõ¡->œ°cmd->
«me
 : "NULL");

1498 
	}
}

1501 
sds
 
	$gëAŒClõ¡sInfoSåög
(
vr_evíéo›
 *
vñ
) {

1502 
dli°Node
 *
 
;

1503 
dli°Iãr
 
li
;

1504 
˛õ¡
 *client;

1505 
sds
 
o
 = 
	`sd¢ewÀn
(
NULL
,200*
	`dli°Lígth
(
vñ
->
˛õ¡s
));

1506 
	`sds˛ór
(
o
);

1507 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1508 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1509 
˛õ¡
 = 
	`dli°NodeVÆue
(
 
);

1510 
o
 = 
	`ˇtClõ¡InfoSåög
(o,
˛õ¡
);

1511 
o
 = 
	`sdsˇéí
(o,"\n",1);

1513  
o
;

1514 
	}
}

1516 
	s˛õ¡kûld©a
 {

1517 
sds
 
	maddr
;

1518 
	mty≥
;

1519 
uöt64_t
 
	mid
;

1520 
	mskùme
;

1521 
	mkûÀd
;

1522 
	m˛o£_this_˛õ¡
;

1525 
	$˛õ¡Comm™d
(
˛õ¡
 *
c
) {

1526 
dli°Node
 *
 
;

1527 
dli°Iãr
 
li
;

1528 
˛õ¡
 *client;

1530 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"li°"Ë&& c->
¨gc
 == 2) {

1532 
sds
 
°r
 = 
c
->
ˇche
;

1534 
sds
 
o
 = 
	`gëAŒClõ¡sInfoSåög
(
c
->
vñ
);

1536 
°r
 = 
	`sdsˇtsds
(°r?°r:
	`sd£m±y
(),
o
);

1538 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

1539 
	`addRïlyBulkCBuf„r
(
c
,
°r
,
	`sd¶í
(str));

1540 
c
->
°ïs
 = 0;

1541 
c
->
èridx
 = -1;

1542 
	`sds‰ì
(
°r
);

1543 
c
->
ˇche
 = 
NULL
;

1544 
c
->
Êags
 &~
CLIENT_JUMP
;

1546 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

1547 
c
->
Êags
 |
CLIENT_JUMP
;

1548 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1549 
c
->
ˇche
 = 
°r
;

1551 
	`sds‰ì
(
o
);

1554 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"kill")) {

1557 
˛õ¡kûld©a
 *
ckd
;

1559 i‡(
c
->
°ïs
 == 0) {

1560 
ckd
 = 
	`dÆloc
((
˛õ¡kûld©a
));

1561 
ckd
->
addr
 = 
NULL
;

1562 
ckd
->
ty≥
 = -1;

1563 
ckd
->
id
 = 0;

1564 
ckd
->
skùme
 = 1;

1565 
ckd
->
kûÀd
 = 0;

1566 
ckd
->
˛o£_this_˛õ¡
 = 0;

1568 i‡(
c
->
¨gc
 == 3) {

1570 
ckd
->
addr
 = 
	`sd¢ew
(
c
->
¨gv
[2]->
±r
);

1571 
ckd
->
skùme
 = 0;

1572 } i‡(
c
->
¨gc
 > 3) {

1573 
i
 = 2;

1576 
i
 < 
c
->
¨gc
) {

1577 
m‹órgs
 = 
c
->
¨gc
 > 
i
+1;

1579 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"id"Ë&& 
m‹órgs
) {

1580 
tmp
;

1582 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
i
+1],&
tmp
,
NULL
)

1583 !
VR_OK
) {

1584 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1585 
	`d‰ì
(
ckd
);

1588 
ckd
->
id
 = 
tmp
;

1589 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"ty≥"Ë&& 
m‹órgs
) {

1590 
ckd
->
ty≥
 = 
	`gëClõ¡Ty≥ByName
(
c
->
¨gv
[
i
+1]->
±r
);

1591 i‡(
ckd
->
ty≥
 == -1) {

1592 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1593 
	`d‰ì
(
ckd
);

1594 
	`addRïlyEº‹F‹m©
(
c
,"Unknown clientÅype '%s'",

1595 (*Ë
c
->
¨gv
[
i
+1]->
±r
);

1598 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"addr"Ë&& 
m‹órgs
) {

1599 
ckd
->
addr
 = 
	`sd¢ew
(
c
->
¨gv
[
i
+1]->
±r
);

1600 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"skùme"Ë&& 
m‹órgs
) {

1601 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
+1]->
±r
,"yes")) {

1602 
ckd
->
skùme
 = 1;

1603 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
+1]->
±r
,"no")) {

1604 
ckd
->
skùme
 = 0;

1606 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1607 
	`d‰ì
(
ckd
);

1608 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1612 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1613 
	`d‰ì
(
ckd
);

1614 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1617 
i
 += 2;

1620 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1621 
	`d‰ì
(
ckd
);

1622 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1626 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

1627 
c
->
Êags
 |
CLIENT_JUMP
;

1628 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1629 
c
->
ˇche
 = 
ckd
;

1631 
ckd
 = 
c
->
ˇche
;

1632 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1637 
	`dli°Rewöd
(
c
->
vñ
->
˛õ¡s
,&
li
);

1638 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1639 
˛õ¡
 = 
	`dli°NodeVÆue
(
 
);

1640 i‡(
ckd
->
addr
 && 
	`°rcmp
(
	`gëClõ¡PìrId
(
˛õ¡
),ckd->addr) != 0) ;

1641 i‡(
ckd
->
ty≥
 !-1 && 
	`gëClõ¡Ty≥
(
˛õ¡
) != ckd->type) ;

1642 i‡(
ckd
->
id
 !0 && 
˛õ¡
->id != ckd->id) ;

1643 i‡(
c
 =
˛õ¡
 && 
ckd
->
skùme
) ;

1646 i‡(
c
 =
˛õ¡
) {

1647 
ckd
->
˛o£_this_˛õ¡
 = 1;

1649 
	`‰ìClõ¡
(
˛õ¡
);

1651 
ckd
->
kûÀd
++;

1654 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

1656 i‡(
c
->
¨gc
 == 3) {

1657 i‡(
ckd
->
kûÀd
 == 0)

1658 
	`addRïlyEº‹
(
c
,"No such client");

1660 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1662 
	`addRïlyL⁄gL⁄g
(
c
,
ckd
->
kûÀd
);

1665 
c
->
°ïs
 = 0;

1666 
c
->
èridx
 = -1;

1667 
c
->
ˇche
 = 
NULL
;

1668 
c
->
Êags
 &~
CLIENT_JUMP
;

1672 i‡(
ckd
->
˛o£_this_˛õ¡
Ë
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

1674 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1675 
	`d‰ì
(
ckd
);

1679 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"£äame"Ë&& c->
¨gc
 == 3) {

1680 
j
, 
Àn
 = 
	`sd¶í
(
c
->
¨gv
[2]->
±r
);

1681 *
p
 = 
c
->
¨gv
[2]->
±r
;

1685 i‡(
Àn
 == 0) {

1686 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

1687 
c
->
«me
 = 
NULL
;

1688 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1695 
j
 = 0; j < 
Àn
; j++) {

1696 i‡(
p
[
j
] < '!' ||Ö[j] > '~') {

1697 
	`addRïlyEº‹
(
c
,

1703 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

1704 
c
->
«me
 = 
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]);

1705 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1707 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"gë«me"Ë&& c->
¨gc
 == 2) {

1708 i‡(
c
->
«me
)

1709 
	`addRïlyBulk
(
c
,c->
«me
);

1711 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1714 
	`addRïlyEº‹
(
c
, "SyntaxÉrror,Åry CLIENT (LIST | KILL ip:port | SETNAME connection-name)");

1718 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"ª∂y"Ë&& c->
¨gc
 == 3) {

1720 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"on")) {

1721 
c
->
Êags
 &~(
CLIENT_REPLY_SKIP
|
CLIENT_REPLY_OFF
);

1722 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1723 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"off")) {

1724 
c
->
Êags
 |
CLIENT_REPLY_OFF
;

1725 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"skip")) {

1726 i‡(!(
c
->
Êags
 & 
CLIENT_REPLY_OFF
))

1727 
c
->
Êags
 |
CLIENT_REPLY_SKIP_NEXT
;

1729 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1732 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"∑u£"Ë&& c->
¨gc
 == 3) {

1733 
duøti⁄
;

1735 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
duøti⁄
,
UNIT_MILLISECONDS
)

1736 !
VR_OK
) ;

1737 
	`∑u£Clõ¡s
(
NULL
, 
duøti⁄
);

1738 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1740 
	`addRïlyEº‹
(
c
, "SyntaxÉrror,Åry CLIENT (LIST | KILL ip:port | GETNAME | SETNAME connection-name)");

1742 
	}
}

1747 
	$ªwrôeClõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, ...) {

1748 
va_li°
 
≠
;

1749 
j
;

1750 
robj
 **
¨gv
;

1752 
¨gv
 = 
	`dÆloc
((
robj
*)*
¨gc
);

1753 
	`va_°¨t
(
≠
,
¨gc
);

1754 
j
 = 0; j < 
¨gc
; j++) {

1755 
robj
 *
a
;

1756 
a
 = 
	`va_¨g
(
≠
, 
robj
*);

1757 
¨gv
[
j
] = 
a
;

1760 
j
 = 0; j < 
c
->
¨gc
; j++Ë
	`‰ìObje˘
(c->
¨gv
[j]);

1761 
	`d‰ì
(
c
->
¨gv
);

1763 
c
->
¨gv
 =árgv;

1764 
c
->
¨gc
 =árgc;

1765 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1766 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1767 
	`va_íd
(
≠
);

1768 
	}
}

1772 
	$ª∂a˚Clõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, 
robj
 **
¨gv
) {

1773 
	`‰ìClõ¡Argv
(
c
);

1774 
	`d‰ì
(
c
->
¨gv
);

1775 
c
->
¨gv
 =árgv;

1776 
c
->
¨gc
 =árgc;

1777 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1778 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1779 
	}
}

1793 
	$ªwrôeClõ¡Comm™dArgumít
(
˛õ¡
 *
c
, 
i
, 
robj
 *
√wvÆ
) {

1794 
robj
 *
ﬁdvÆ
;

1796 i‡(
i
 >
c
->
¨gc
) {

1797 
c
->
¨gv
 = 
	`dªÆloc
(c->¨gv,(
robj
*)*(
i
+1));

1798 
c
->
¨gc
 = 
i
+1;

1799 
c
->
¨gv
[
i
] = 
NULL
;

1801 
ﬁdvÆ
 = 
c
->
¨gv
[
i
];

1802 
c
->
¨gv
[
i
] = 
√wvÆ
;

1803 i‡(
ﬁdvÆ
Ë
	`‰ìObje˘
(oldval);

1806 i‡(
i
 == 0) {

1807 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1808 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1810 
	}
}

1826 
	$gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
 *
c
) {

1827 
li°_ôem_size
 = (
dli°Node
)+(
robj
);

1829  
c
->
ª∂y_byãs
 + (
li°_ôem_size
*
	`dli°Lígth
(c->
ª∂y
));

1830 
	}
}

1842 
	$gëClõ¡Ty≥
(
˛õ¡
 *
c
) {

1843 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ë 
CLIENT_TYPE_MASTER
;

1844 i‡((
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& !(c->Êag†& 
CLIENT_MONITOR
))

1845  
CLIENT_TYPE_SLAVE
;

1846 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
Ë 
CLIENT_TYPE_PUBSUB
;

1847  
CLIENT_TYPE_NORMAL
;

1848 
	}
}

1851 
	$gëClõ¡Ty≥ByName
(*
«me
) {

1852 i‡(!
	`°rˇ£cmp
(
«me
,"n‹mÆ")Ë 
CLIENT_TYPE_NORMAL
;

1853 i‡(!
	`°rˇ£cmp
(
«me
,"¶ave")Ë 
CLIENT_TYPE_SLAVE
;

1854 i‡(!
	`°rˇ£cmp
(
«me
,"pubsub")Ë 
CLIENT_TYPE_PUBSUB
;

1855 i‡(!
	`°rˇ£cmp
(
«me
,"ma°î")Ë 
CLIENT_TYPE_MASTER
;

1857 
	}
}

1860 *
	$gëClõ¡Ty≥Name
(
˛ass
) {

1861 
˛ass
) {

1862 
CLIENT_TYPE_NORMAL
:  "normal";

1863 
CLIENT_TYPE_SLAVE
:  "slave";

1864 
CLIENT_TYPE_PUBSUB
:  "pubsub";

1865 
CLIENT_TYPE_MASTER
:  "master";

1866 :  
NULL
;

1868 
	}
}

1877 
	$checkClõ¡OuçutBuf„rLimôs
(
˛õ¡
 *
c
) {

1878 
so·
 = 0, 
h¨d
 = 0, 
˛ass
;

1879 
u£d_mem
 = 
	`gëClõ¡OuçutBuf„rMem‹yUßge
(
c
);

1881 
˛ass
 = 
	`gëClõ¡Ty≥
(
c
);

1884 i‡(
˛ass
 =
CLIENT_TYPE_MASTER
Ë˛as†
CLIENT_TYPE_NORMAL
;

1886 i‡(
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
h¨d_limô_byãs
 &&

1887 
u£d_mem
 >
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
h¨d_limô_byãs
)

1888 
h¨d
 = 1;

1889 i‡(
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_byãs
 &&

1890 
u£d_mem
 >
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_byãs
)

1891 
so·
 = 1;

1895 i‡(
so·
) {

1897 i‡(
c
->
obuf_so·_limô_ªached_time
 == 0) {

1898 
c
->
obuf_so·_limô_ªached_time
 = c->
vñ
->
unixtime
;

1899 
so·
 = 0;

1902 
time_t
 
ñ≠£d
 = 
c
->
vñ
->
unixtime
 - c->
obuf_so·_limô_ªached_time
;

1905 i‡(
ñ≠£d
 <=

1906 
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_£c⁄ds
) {

1907 
so·
 = 0;

1914 
c
->
obuf_so·_limô_ªached_time
 = 0;

1916  
so·
 || 
h¨d
;

1917 
	}
}

1927 
	$asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
˛õ¡
 *
c
) {

1928 
	`ASSERT
(
c
->
ª∂y_byãs
 < 
SIZE_MAX
-(1024*64));

1929 i‡(
c
->
ª∂y_byãs
 =0 || c->
Êags
 & 
CLIENT_CLOSE_ASAP
) ;

1930 i‡(
	`checkClõ¡OuçutBuf„rLimôs
(
c
)) {

1931 
sds
 
˛õ¡
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
);

1933 
	`‰ìClõ¡Async
(
c
);

1935 
	`log_w¨n
("Clõ¡ %†scheduÀdÅÿbê˛o£d ASAP f‹ ovîcomög o‡ouçuàbuf„∏limôs.", 
˛õ¡
);

1936 
	`sds‰ì
(
˛õ¡
);

1938 
	}
}

1946 
	$ÊushSœvesOuçutBuf„rs
() {

1947 
dli°Iãr
 
li
;

1948 
dli°Node
 *
 
;

1950 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

1951 (
 
 = 
	`dli°Next
(&
li
))) {

1952 
˛õ¡
 *
¶ave
 = 
	`dli°NodeVÆue
(
 
);

1953 
evíts
;

1961 
evíts
 = 
	`´GëFûeEvíts
(
ª∂
.
vñ
.
ñ
,
¶ave
->
c⁄n
->
sd
);

1963 i‡(
evíts
 & 
AE_WRITABLE
 &&

1964 
¶ave
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 &&

1965 
	`˛õ¡HasPídögRïlõs
(
¶ave
))

1967 
	`wrôeToClõ¡
(
¶ave
->
c⁄n
->
sd
,slave,0);

1970 
	}
}

1990 
	$∑u£Clõ¡s
(
vr_evíéo›
 *
vñ
, 
íd
) {

1991 i‡(
vñ
 =
NULL
) ;

1993 i‡(!
vñ
->
˛õ¡s_∑u£d
 || 
íd
 > vñ->
˛õ¡s_∑u£_íd_time
)

1994 
vñ
->
˛õ¡s_∑u£_íd_time
 = 
íd
;

1995 
vñ
->
˛õ¡s_∑u£d
 = 1;

1996 
	}
}

2001 
	$˛õ¡sAªPau£d
(
vr_evíéo›
 *
vñ
) {

2002 i‡(
vñ
->
˛õ¡s_∑u£d
 &&

2003 
vñ
->
˛õ¡s_∑u£_íd_time
 < vñ->
m°ime
)

2005 
dli°Node
 *
 
;

2006 
dli°Iãr
 
li
;

2007 
˛õ¡
 *
c
;

2009 
vñ
->
˛õ¡s_∑u£d
 = 0;

2013 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

2014 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

2015 
c
 = 
	`dli°NodeVÆue
(
 
);

2019 i‡(
c
->
Êags
 & (
CLIENT_SLAVE
|
CLIENT_BLOCKED
)) ;

2020 
c
->
Êags
 |
CLIENT_UNBLOCKED
;

2021 
	`dli°AddNodeTaû
(
vñ
->
unblocked_˛õ¡s
,
c
);

2024  
vñ
->
˛õ¡s_∑u£d
;

2025 
	}
}

2040 
	$¥o˚ssEvítsWhûeBlocked
(
vr_evíéo›
 *
vñ
) {

2041 
ôî©i⁄s
 = 4;

2042 
cou¡
 = 0;

2043 
ôî©i⁄s
--) {

2044 
evíts
 = 0;

2045 
evíts
 +
	`´Pro˚ssEvíts
(
vñ
->
ñ
, 
AE_FILE_EVENTS
|
AE_DONT_WAIT
);

2046 
evíts
 +
	`h™dÀClõ¡sWôhPídögWrôes
(
vñ
);

2047 i‡(!
evíts
) ;

2048 
cou¡
 +
evíts
;

2050  
cou¡
;

2051 
	}
}

2055 
	$cuºít_˛õ¡s
()

2057 
ccs
;

2059 #i‡
	`deföed
(
__ATOMIC_RELAXED
Ë|| deföed(
HAVE_ATOMIC
)

2060 
ccs
 = 
	`upd©e_cuº_˛õ¡s_add
(0);

2062 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
);

2063 
ccs
 = 
ncuº_cc⁄n
;

2064 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
);

2067  
ccs
;

2068 
	}
}

	@src/vr_client.h

1 #i‚de‡
_VR_CLIENT_H_


2 
	#_VR_CLIENT_H_


	)

4 
	#NET_MAX_WRITES_PER_EVENT
 (1024*64)

	)

6 
	#PROTO_MAX_QUERYBUF_LEN
 (1024*1024*1024Ë

	)

7 
	#PROTO_IOBUF_LEN
 (1024*16Ë

	)

8 
	#PROTO_REPLY_CHUNK_BYTES
 (16*1024Ë

	)

9 
	#PROTO_INLINE_MAX_SIZE
 (1024*64Ë

	)

10 
	#PROTO_MBULK_BIG_ARG
 (1024*32)

	)

13 
	#CLIENT_SLAVE
 (1<<0Ë

	)

14 
	#CLIENT_MASTER
 (1<<1Ë

	)

15 
	#CLIENT_MONITOR
 (1<<2Ë

	)

16 
	#CLIENT_MULTI
 (1<<3Ë

	)

17 
	#CLIENT_BLOCKED
 (1<<4Ë

	)

18 
	#CLIENT_DIRTY_CAS
 (1<<5Ë

	)

19 
	#CLIENT_CLOSE_AFTER_REPLY
 (1<<6Ë

	)

20 
	#CLIENT_UNBLOCKED
 (1<<7Ë

	)

22 
	#CLIENT_LUA
 (1<<8Ë

	)

23 
	#CLIENT_ASKING
 (1<<9Ë

	)

24 
	#CLIENT_CLOSE_ASAP
 (1<<10)

	)

25 
	#CLIENT_UNIX_SOCKET
 (1<<11Ë

	)

26 
	#CLIENT_DIRTY_EXEC
 (1<<12Ë

	)

27 
	#CLIENT_MASTER_FORCE_REPLY
 (1<<13Ë

	)

28 
	#CLIENT_FORCE_AOF
 (1<<14Ë

	)

29 
	#CLIENT_FORCE_REPL
 (1<<15Ë

	)

30 
	#CLIENT_PRE_PSYNC
 (1<<16Ë

	)

31 
	#CLIENT_READONLY
 (1<<17Ë

	)

32 
	#CLIENT_PUBSUB
 (1<<18Ë

	)

33 
	#CLIENT_PREVENT_AOF_PROP
 (1<<19Ë

	)

34 
	#CLIENT_PREVENT_REPL_PROP
 (1<<20Ë

	)

35 
	#CLIENT_PREVENT_PROP
 (
CLIENT_PREVENT_AOF_PROP
|
CLIENT_PREVENT_REPL_PROP
)

	)

36 
	#CLIENT_PENDING_WRITE
 (1<<21Ë

	)

38 
	#CLIENT_REPLY_OFF
 (1<<22Ë

	)

39 
	#CLIENT_REPLY_SKIP_NEXT
 (1<<23Ë

	)

40 
	#CLIENT_REPLY_SKIP
 (1<<24Ë

	)

41 
	#CLIENT_LUA_DEBUG
 (1<<25Ë

	)

42 
	#CLIENT_LUA_DEBUG_SYNC
 (1<<26Ë

	)

43 
	#CLIENT_JUMP
 (1<<27)

	)

45 
	#REDIS_REPLY_CHUNK_BYTES
 (16*1024Ë

	)

48 
	#PROTO_REQ_INLINE
 1

	)

49 
	#PROTO_REQ_MULTIBULK
 2

	)

53 
	#CLIENT_TYPE_NORMAL
 0

	)

54 
	#CLIENT_TYPE_SLAVE
 1

	)

55 
	#CLIENT_TYPE_PUBSUB
 2

	)

56 
	#CLIENT_TYPE_MASTER
 3

	)

57 
	#CLIENT_TYPE_OBUF_COUNT
 3

	)

63 
	#BLOCKED_NONE
 0

	)

64 
	#BLOCKED_LIST
 1

	)

65 
	#BLOCKED_WAIT
 2

	)

70 
	s˛õ¡
 {

72 
uöt64_t
 
	mid
;

75 
c⁄n
 *
	mc⁄n
;

77 
vr_evíéo›
 *
	mvñ
;

80 
ªdisDb
 *
	mdb
;

82 
	mdi˘id
;

84 
	msˇnid
;

86 
robj
 *
	m«me
;

88 
sds
 
	mquîybuf
;

90 
size_t
 
	mquîybuf_≥ak
;

92 
	m¨gc
;

94 
robj
 **
	m¨gv
;

96 
ªdisComm™d
 *
	mcmd
, *
	mœ°cmd
;

98 
	mªqty≥
;

100 
	mmu…ibulkÀn
;

101 
	mbulkÀn
;

103 
dli°
 *
	mª∂y
;

105 
	mª∂y_byãs
;

107 
size_t
 
	m£¡Àn
;

110 
time_t
 
	m˘ime
;

112 
time_t
 
	mœ°öãø˘i⁄
;

113 
time_t
 
	mobuf_so·_limô_ªached_time
;

115 
	mÊags
;

117 
	mauthítiˇãd
;

119 
	mª∂°©e
;

121 
	mª∂_put_⁄löe_⁄_ack
;

122 
	mª∂dbfd
;

123 
off_t
 
	mª∂dboff
;

124 
off_t
 
	mª∂dbsize
;

125 
sds
 
	mª∂¥ómbÀ
;

126 
	mª∂off
;

127 
	mª∂_ack_off
;

128 
	mª∂_ack_time
;

129 
	mpsync_öôül_off£t
;

133 
	mª∂runid
[
CONFIG_RUN_ID_SIZE
+1];

134 
	m¶ave_li°íög_p‹t
;

135 
	m¶ave_ˇ∑
;

136 
mu…iSèã
 
	mm°©e
;

137 
	mbty≥
;

138 
blockögSèã
 
	mbp›
;

139 
	mwoff
;

141 
dli°
 *
	mw©ched_keys
;

142 
di˘
 *
	mpubsub_ch™√ls
;

143 
dli°
 *
	mpubsub_∑âîns
;

144 
sds
 
	m≥îid
;

147 
	mcuridx
;

148 
	mèridx
;

149 
	m°ïs
;

150 *
	mˇche
;

154 
	mbuÂos
;

155 
	mbuf
[
PROTO_REPLY_CHUNK_BYTES
];

156 } 
	t˛õ¡
;

159 
	s˛õ¡Buf„rLimôsC⁄fig
 {

160 
	mh¨d_limô_byãs
;

161 
	mso·_limô_byãs
;

162 
time_t
 
	mso·_limô_£c⁄ds
;

163 } 
	t˛õ¡Buf„rLimôsC⁄fig
;

167 
˛õ¡
 *
¸óãClõ¡
(
vr_evíéo›
 *
vñ
, 
c⁄n
 *conn);

168 
˛o£TimedoutClõ¡s
();

169 
‰ìClõ¡
(
˛õ¡
 *
c
);

170 
‰ìClõ¡Async
(
˛õ¡
 *
c
);

171 
ª£tClõ¡
(
˛õ¡
 *
c
);

172 
£ndRïlyToClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

173 *
addDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
);

174 
£tDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
, *
node
, 
Àngth
);

175 
¥o˚ssI≈utBuf„r
(
˛õ¡
 *
c
);

176 
ªadQuîyFromClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

177 
addRïlyBulk
(
˛õ¡
 *
c
, 
robj
 *
obj
);

178 
addRïlyBulkCSåög
(
˛õ¡
 *
c
, c⁄° *
s
);

179 
addRïlyBulkCBuf„r
(
˛õ¡
 *
c
, c⁄° *
p
, 
size_t
 
Àn
);

180 
addRïlyBulkL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
);

181 
addRïly
(
˛õ¡
 *
c
, 
robj
 *
obj
);

182 
addRïlySds
(
˛õ¡
 *
c
, 
sds
 
s
);

183 
addRïlySåög
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

184 
addRïlyEº‹Lígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

185 
addRïlyBulkSds
(
˛õ¡
 *
c
, 
sds
 
s
);

186 
addRïlyEº‹
(
˛õ¡
 *
c
, c⁄° *
îr
);

187 
addRïlySètusLígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

188 
addRïlySètus
(
˛õ¡
 *
c
, c⁄° *
°©us
);

189 
addRïlyDoubÀ
(
˛õ¡
 *
c
, 
d
);

190 
addRïlyHum™L⁄gDoubÀ
(
˛õ¡
 *
c
, 
d
);

191 
addRïlyL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
);

192 
addRïlyMu…iBulkLí
(
˛õ¡
 *
c
, 
Àngth
);

193 
c›yClõ¡OuçutBuf„r
(
˛õ¡
 *
d°
, clõ¡ *
§c
);

194 *
dupClõ¡RïlyVÆue
(*
o
);

195 
‰ìClõ¡RïlyVÆue
(*
o
);

196 
gëClõ¡sMaxBuf„rs
(
vr_evíéo›
 *
vñ
, *
l⁄ge°_ouçut_li°
,

197 *
bigge°_öput_buf„r
);

198 *
gëClõ¡PìrId
(
˛õ¡
 *client);

199 
sds
 
ˇtClõ¡InfoSåög
(sd†
s
, 
˛õ¡
 *client);

200 
sds
 
gëAŒClõ¡sInfoSåög
(
vr_evíéo›
 *
vñ
);

201 
˛õ¡Comm™d
(
˛õ¡
 *
c
);

202 
ªwrôeClõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, ...);

203 
ªwrôeClõ¡Comm™dArgumít
(
˛õ¡
 *
c
, 
i
, 
robj
 *
√wvÆ
);

204 
ª∂a˚Clõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, 
robj
 **
¨gv
);

205 
gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
 *
c
);

206 
‰ìClõ¡sInAsyncFªeQueue
(
vr_evíéo›
 *
vñ
);

207 
asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
˛õ¡
 *
c
);

208 
gëClõ¡Ty≥
(
˛õ¡
 *
c
);

209 
gëClõ¡Ty≥ByName
(*
«me
);

210 *
gëClõ¡Ty≥Name
(
˛ass
);

211 
ÊushSœvesOuçutBuf„rs
();

212 
disc⁄√˘Sœves
();

213 
li°íToP‹t
(
p‹t
, *
fds
, *
cou¡
);

214 
∑u£Clõ¡s
(
vr_evíéo›
 *
vñ
, 
duøti⁄
);

215 
˛õ¡sAªPau£d
(
vr_evíéo›
 *
vñ
);

216 
¥o˚ssEvítsWhûeBlocked
(
vr_evíéo›
 *
vñ
);

217 
h™dÀClõ¡sWôhPídögWrôes
(
vr_evíéo›
 *
vñ
);

218 
˛õ¡HasPídögRïlõs
(
˛õ¡
 *
c
);

219 
u∆ökClõ¡FromEvíéo›
(
˛õ¡
 *
c
);

220 
lökClõ¡ToEvíéo›
(
˛õ¡
 *
c
,
vr_evíéo›
 *
vñ
);

221 
u∆ökClõ¡
(
˛õ¡
 *
c
);

222 
wrôeToClõ¡
(
fd
, 
˛õ¡
 *
c
, 
h™dÀr_ö°ÆÀd
);

224 #ifde‡
__GNUC__


225 
	$addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...)

226 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

227 
	$addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...)

228 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

230 
	`addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...);

231 
	`addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...);

234 
ncuº_cc⁄n
;

236 #i‡
	`deföed
(
__ATOMIC_RELAXED
)

237 
	#upd©e_cuº_˛õ¡s_add
(
__n
Ë
	`__©omic_add_„tch
(&
ncuº_cc⁄n
, (__n), 
__ATOMIC_RELAXED
)

	)

238 
	#upd©e_cuº_˛õ¡s_sub
(
__n
Ë
	`__©omic_sub_„tch
(&
ncuº_cc⁄n
, (__n), 
__ATOMIC_RELAXED
)

	)

239 #ñi‡
	`deföed
(
HAVE_ATOMIC
)

240 
	#upd©e_cuº_˛õ¡s_add
(
__n
Ë
	`__sync_add_™d_„tch
(&
ncuº_cc⁄n
, (__n))

	)

241 
	#upd©e_cuº_˛õ¡s_sub
(
__n
Ë
	`__sync_sub_™d_„tch
(&
ncuº_cc⁄n
, (__n))

	)

243 
±hªad_muãx_t
 
cuº_˛õ¡s_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

245 
	#upd©e_cuº_˛õ¡s_add
(
__n
) do { \

246 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
); \

247 
ncuº_cc⁄n
 +(
__n
); \

248 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
); \

249 
	}
} 0)

	)

251 
	#upd©e_cuº_˛õ¡s_sub
(
__n
) do { \

252 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
); \

253 
ncuº_cc⁄n
 -(
__n
); \

254 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
); \

255 } 0)

	)

258 
cuºít_˛õ¡s
();

	@src/vr_client.h

1 #i‚de‡
_VR_CLIENT_H_


2 
	#_VR_CLIENT_H_


	)

4 
	#NET_MAX_WRITES_PER_EVENT
 (1024*64)

	)

6 
	#PROTO_MAX_QUERYBUF_LEN
 (1024*1024*1024Ë

	)

7 
	#PROTO_IOBUF_LEN
 (1024*16Ë

	)

8 
	#PROTO_REPLY_CHUNK_BYTES
 (16*1024Ë

	)

9 
	#PROTO_INLINE_MAX_SIZE
 (1024*64Ë

	)

10 
	#PROTO_MBULK_BIG_ARG
 (1024*32)

	)

13 
	#CLIENT_SLAVE
 (1<<0Ë

	)

14 
	#CLIENT_MASTER
 (1<<1Ë

	)

15 
	#CLIENT_MONITOR
 (1<<2Ë

	)

16 
	#CLIENT_MULTI
 (1<<3Ë

	)

17 
	#CLIENT_BLOCKED
 (1<<4Ë

	)

18 
	#CLIENT_DIRTY_CAS
 (1<<5Ë

	)

19 
	#CLIENT_CLOSE_AFTER_REPLY
 (1<<6Ë

	)

20 
	#CLIENT_UNBLOCKED
 (1<<7Ë

	)

22 
	#CLIENT_LUA
 (1<<8Ë

	)

23 
	#CLIENT_ASKING
 (1<<9Ë

	)

24 
	#CLIENT_CLOSE_ASAP
 (1<<10)

	)

25 
	#CLIENT_UNIX_SOCKET
 (1<<11Ë

	)

26 
	#CLIENT_DIRTY_EXEC
 (1<<12Ë

	)

27 
	#CLIENT_MASTER_FORCE_REPLY
 (1<<13Ë

	)

28 
	#CLIENT_FORCE_AOF
 (1<<14Ë

	)

29 
	#CLIENT_FORCE_REPL
 (1<<15Ë

	)

30 
	#CLIENT_PRE_PSYNC
 (1<<16Ë

	)

31 
	#CLIENT_READONLY
 (1<<17Ë

	)

32 
	#CLIENT_PUBSUB
 (1<<18Ë

	)

33 
	#CLIENT_PREVENT_AOF_PROP
 (1<<19Ë

	)

34 
	#CLIENT_PREVENT_REPL_PROP
 (1<<20Ë

	)

35 
	#CLIENT_PREVENT_PROP
 (
CLIENT_PREVENT_AOF_PROP
|
CLIENT_PREVENT_REPL_PROP
)

	)

36 
	#CLIENT_PENDING_WRITE
 (1<<21Ë

	)

38 
	#CLIENT_REPLY_OFF
 (1<<22Ë

	)

39 
	#CLIENT_REPLY_SKIP_NEXT
 (1<<23Ë

	)

40 
	#CLIENT_REPLY_SKIP
 (1<<24Ë

	)

41 
	#CLIENT_LUA_DEBUG
 (1<<25Ë

	)

42 
	#CLIENT_LUA_DEBUG_SYNC
 (1<<26Ë

	)

43 
	#CLIENT_JUMP
 (1<<27)

	)

45 
	#REDIS_REPLY_CHUNK_BYTES
 (16*1024Ë

	)

48 
	#PROTO_REQ_INLINE
 1

	)

49 
	#PROTO_REQ_MULTIBULK
 2

	)

53 
	#CLIENT_TYPE_NORMAL
 0

	)

54 
	#CLIENT_TYPE_SLAVE
 1

	)

55 
	#CLIENT_TYPE_PUBSUB
 2

	)

56 
	#CLIENT_TYPE_MASTER
 3

	)

57 
	#CLIENT_TYPE_OBUF_COUNT
 3

	)

63 
	#BLOCKED_NONE
 0

	)

64 
	#BLOCKED_LIST
 1

	)

65 
	#BLOCKED_WAIT
 2

	)

70 
	s˛õ¡
 {

72 
uöt64_t
 
	mid
;

75 
c⁄n
 *
	mc⁄n
;

77 
vr_evíéo›
 *
	mvñ
;

80 
ªdisDb
 *
	mdb
;

82 
	mdi˘id
;

84 
	msˇnid
;

86 
robj
 *
	m«me
;

88 
sds
 
	mquîybuf
;

90 
size_t
 
	mquîybuf_≥ak
;

92 
	m¨gc
;

94 
robj
 **
	m¨gv
;

96 
ªdisComm™d
 *
	mcmd
, *
	mœ°cmd
;

98 
	mªqty≥
;

100 
	mmu…ibulkÀn
;

101 
	mbulkÀn
;

103 
dli°
 *
	mª∂y
;

105 
	mª∂y_byãs
;

107 
size_t
 
	m£¡Àn
;

110 
time_t
 
	m˘ime
;

112 
time_t
 
	mœ°öãø˘i⁄
;

113 
time_t
 
	mobuf_so·_limô_ªached_time
;

115 
	mÊags
;

117 
	mauthítiˇãd
;

119 
	mª∂°©e
;

121 
	mª∂_put_⁄löe_⁄_ack
;

122 
	mª∂dbfd
;

123 
off_t
 
	mª∂dboff
;

124 
off_t
 
	mª∂dbsize
;

125 
sds
 
	mª∂¥ómbÀ
;

126 
	mª∂off
;

127 
	mª∂_ack_off
;

128 
	mª∂_ack_time
;

129 
	mpsync_öôül_off£t
;

133 
	mª∂runid
[
CONFIG_RUN_ID_SIZE
+1];

134 
	m¶ave_li°íög_p‹t
;

135 
	m¶ave_ˇ∑
;

136 
mu…iSèã
 
	mm°©e
;

137 
	mbty≥
;

138 
blockögSèã
 
	mbp›
;

139 
	mwoff
;

141 
dli°
 *
	mw©ched_keys
;

142 
di˘
 *
	mpubsub_ch™√ls
;

143 
dli°
 *
	mpubsub_∑âîns
;

144 
sds
 
	m≥îid
;

147 
	mcuridx
;

148 
	mèridx
;

149 
	m°ïs
;

150 *
	mˇche
;

154 
	mbuÂos
;

155 
	mbuf
[
PROTO_REPLY_CHUNK_BYTES
];

156 } 
	t˛õ¡
;

159 
	s˛õ¡Buf„rLimôsC⁄fig
 {

160 
	mh¨d_limô_byãs
;

161 
	mso·_limô_byãs
;

162 
time_t
 
	mso·_limô_£c⁄ds
;

163 } 
	t˛õ¡Buf„rLimôsC⁄fig
;

167 
˛õ¡
 *
¸óãClõ¡
(
vr_evíéo›
 *
vñ
, 
c⁄n
 *conn);

168 
˛o£TimedoutClõ¡s
();

169 
‰ìClõ¡
(
˛õ¡
 *
c
);

170 
‰ìClõ¡Async
(
˛õ¡
 *
c
);

171 
ª£tClõ¡
(
˛õ¡
 *
c
);

172 
£ndRïlyToClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

173 *
addDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
);

174 
£tDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
, *
node
, 
Àngth
);

175 
¥o˚ssI≈utBuf„r
(
˛õ¡
 *
c
);

176 
ªadQuîyFromClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

177 
addRïlyBulk
(
˛õ¡
 *
c
, 
robj
 *
obj
);

178 
addRïlyBulkCSåög
(
˛õ¡
 *
c
, c⁄° *
s
);

179 
addRïlyBulkCBuf„r
(
˛õ¡
 *
c
, c⁄° *
p
, 
size_t
 
Àn
);

180 
addRïlyBulkL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
);

181 
addRïly
(
˛õ¡
 *
c
, 
robj
 *
obj
);

182 
addRïlySds
(
˛õ¡
 *
c
, 
sds
 
s
);

183 
addRïlySåög
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

184 
addRïlyEº‹Lígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

185 
addRïlyBulkSds
(
˛õ¡
 *
c
, 
sds
 
s
);

186 
addRïlyEº‹
(
˛õ¡
 *
c
, c⁄° *
îr
);

187 
addRïlySètusLígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

188 
addRïlySètus
(
˛õ¡
 *
c
, c⁄° *
°©us
);

189 
addRïlyDoubÀ
(
˛õ¡
 *
c
, 
d
);

190 
addRïlyHum™L⁄gDoubÀ
(
˛õ¡
 *
c
, 
d
);

191 
addRïlyL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
);

192 
addRïlyMu…iBulkLí
(
˛õ¡
 *
c
, 
Àngth
);

193 
c›yClõ¡OuçutBuf„r
(
˛õ¡
 *
d°
, clõ¡ *
§c
);

194 *
dupClõ¡RïlyVÆue
(*
o
);

195 
‰ìClõ¡RïlyVÆue
(*
o
);

196 
gëClõ¡sMaxBuf„rs
(
vr_evíéo›
 *
vñ
, *
l⁄ge°_ouçut_li°
,

197 *
bigge°_öput_buf„r
);

198 *
gëClõ¡PìrId
(
˛õ¡
 *client);

199 
sds
 
ˇtClõ¡InfoSåög
(sd†
s
, 
˛õ¡
 *client);

200 
sds
 
gëAŒClõ¡sInfoSåög
(
vr_evíéo›
 *
vñ
);

201 
˛õ¡Comm™d
(
˛õ¡
 *
c
);

202 
ªwrôeClõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, ...);

203 
ªwrôeClõ¡Comm™dArgumít
(
˛õ¡
 *
c
, 
i
, 
robj
 *
√wvÆ
);

204 
ª∂a˚Clõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, 
robj
 **
¨gv
);

205 
gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
 *
c
);

206 
‰ìClõ¡sInAsyncFªeQueue
(
vr_evíéo›
 *
vñ
);

207 
asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
˛õ¡
 *
c
);

208 
gëClõ¡Ty≥
(
˛õ¡
 *
c
);

209 
gëClõ¡Ty≥ByName
(*
«me
);

210 *
gëClõ¡Ty≥Name
(
˛ass
);

211 
ÊushSœvesOuçutBuf„rs
();

212 
disc⁄√˘Sœves
();

213 
li°íToP‹t
(
p‹t
, *
fds
, *
cou¡
);

214 
∑u£Clõ¡s
(
vr_evíéo›
 *
vñ
, 
duøti⁄
);

215 
˛õ¡sAªPau£d
(
vr_evíéo›
 *
vñ
);

216 
¥o˚ssEvítsWhûeBlocked
(
vr_evíéo›
 *
vñ
);

217 
h™dÀClõ¡sWôhPídögWrôes
(
vr_evíéo›
 *
vñ
);

218 
˛õ¡HasPídögRïlõs
(
˛õ¡
 *
c
);

219 
u∆ökClõ¡FromEvíéo›
(
˛õ¡
 *
c
);

220 
lökClõ¡ToEvíéo›
(
˛õ¡
 *
c
,
vr_evíéo›
 *
vñ
);

221 
u∆ökClõ¡
(
˛õ¡
 *
c
);

222 
wrôeToClõ¡
(
fd
, 
˛õ¡
 *
c
, 
h™dÀr_ö°ÆÀd
);

224 #ifde‡
__GNUC__


225 
	$addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...)

226 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

227 
	$addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...)

228 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

230 
	`addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...);

231 
	`addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...);

234 
ncuº_cc⁄n
;

236 #i‡
	`deföed
(
__ATOMIC_RELAXED
)

237 
	#upd©e_cuº_˛õ¡s_add
(
__n
Ë
	`__©omic_add_„tch
(&
ncuº_cc⁄n
, (__n), 
__ATOMIC_RELAXED
)

	)

238 
	#upd©e_cuº_˛õ¡s_sub
(
__n
Ë
	`__©omic_sub_„tch
(&
ncuº_cc⁄n
, (__n), 
__ATOMIC_RELAXED
)

	)

239 #ñi‡
	`deföed
(
HAVE_ATOMIC
)

240 
	#upd©e_cuº_˛õ¡s_add
(
__n
Ë
	`__sync_add_™d_„tch
(&
ncuº_cc⁄n
, (__n))

	)

241 
	#upd©e_cuº_˛õ¡s_sub
(
__n
Ë
	`__sync_sub_™d_„tch
(&
ncuº_cc⁄n
, (__n))

	)

243 
±hªad_muãx_t
 
cuº_˛õ¡s_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

245 
	#upd©e_cuº_˛õ¡s_add
(
__n
) do { \

246 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
); \

247 
ncuº_cc⁄n
 +(
__n
); \

248 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
); \

249 
	}
} 0)

	)

251 
	#upd©e_cuº_˛õ¡s_sub
(
__n
) do { \

252 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
); \

253 
ncuº_cc⁄n
 -(
__n
); \

254 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
); \

255 } 0)

	)

258 
cuºít_˛õ¡s
();

	@src/vr_command.c

1 
	~<vr_c‹e.h
>

5 
di˘Ty≥
 
	gcomm™dTabÀDi˘Ty≥
 = {

6 
di˘SdsCa£Hash
,

7 
NULL
,

8 
NULL
,

9 
di˘SdsKeyCa£Com∑ª
,

10 
di˘SdsDe°ru˘‹
,

11 
NULL


68 
ªdisComm™d
 
	gªdisComm™dTabÀ
[] = {

70 {"pög",
pögComm™d
,-1,"tF",0,
NULL
,0,0,0,0,0},

71 {"echo",
echoComm™d
,2,"F",0,
NULL
,0,0,0,0,0},

72 {"£À˘",
£À˘Comm™d
,2,"lF",0,
NULL
,0,0,0,0,0},

73 {"auth",
authComm™d
,2,"¶tF",0,
NULL
,0,0,0,0,0},

74 {"admö",
admöComm™d
,2,"¶tF",0,
NULL
,0,0,0,0,0},

76 {"öfo",
öfoComm™d
,-1,"…",0,
NULL
,0,0,0,0,0},

77 {"Êushdb",
ÊushdbComm™d
,1,"w",0,
NULL
,0,0,0,0,0},

78 {"ÊushÆl",
ÊushÆlComm™d
,1,"w",0,
NULL
,0,0,0,0,0},

79 {"time",
timeComm™d
,1,"RF",0,
NULL
,0,0,0,0,0},

80 {"dbsize",
dbsizeComm™d
,1,"rF",0,
NULL
,0,0,0,0,0},

81 {"comm™d",
comm™dComm™d
,0,"…",0,
NULL
,0,0,0,0,0},

82 {"c⁄fig",
c⁄figComm™d
,-2,"œt",0,
NULL
,0,0,0,0,0},

83 {"˛õ¡",
˛õ¡Comm™d
,-2,"as",0,
NULL
,0,0,0,0,0},

84 {"¶owlog",
¶owlogComm™d
,-2,"a",0,
NULL
,0,0,0,0,0},

86 {"dñ",
dñComm™d
,-2,"w",0,
NULL
,1,-1,1,0,0},

87 {"exi°s",
exi°sComm™d
,-2,"rF",0,
NULL
,1,-1,1,0,0},

88 {"âl",
âlComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

89 {"±é",
±éComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

90 {"expúe",
expúeComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

91 {"expúót",
expúótComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

92 {"≥xpúe",
≥xpúeComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

93 {"≥xpúót",
≥xpúótComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

94 {"≥rsi°",
≥rsi°Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

95 {"øndomkey",
øndomkeyComm™d
,1,"rR",0,
NULL
,0,0,0,0,0},

96 {"ty≥",
ty≥Comm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

97 {"keys",
keysComm™d
,2,"rS",0,
NULL
,0,0,0,0,0},

98 {"sˇn",
sˇnComm™d
,-2,"rR",0,
NULL
,0,0,0,0,0},

99 {"obje˘",
obje˘Comm™d
,3,"r",0,
NULL
,2,2,2,0,0},

101 {"gë",
gëComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

102 {"£t",
£tComm™d
,-3,"wm",0,
NULL
,1,1,1,0,0},

103 {"£äx",
£äxComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

104 {"£ãx",
£ãxComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

105 {"p£ãx",
p£ãxComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

106 {"ö¸",
ö¸Comm™d
,2,"wmF",0,
NULL
,1,1,1,0,0},

107 {"de¸",
de¸Comm™d
,2,"wmF",0,
NULL
,1,1,1,0,0},

108 {"ö¸by",
ö¸byComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

109 {"de¸by",
de¸byComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

110 {"≠≥nd",
≠≥ndComm™d
,3,"wm",0,
NULL
,1,1,1,0,0},

111 {"°æí",
°æíComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

112 {"gë£t",
gë£tComm™d
,3,"wm",0,
NULL
,1,1,1,0,0},

113 {"ö¸byÊﬂt",
ö¸byÊﬂtComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

114 {"£tbô",
£tbôComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

115 {"gëbô",
gëbôComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

116 {"£å™ge",
£å™geComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

117 {"gëønge",
gëøngeComm™d
,4,"r",0,
NULL
,1,1,1,0,0},

118 {"bôcou¡",
bôcou¡Comm™d
,-2,"r",0,
NULL
,1,1,1,0,0},

119 {"bôpos",
bôposComm™d
,-3,"r",0,
NULL
,1,1,1,0,0},

120 {"mgë",
mgëComm™d
,-2,"r",0,
NULL
,1,-1,1,0,0},

121 {"m£t",
m£tComm™d
,-3,"wm",0,
NULL
,1,-1,2,0,0},

123 {"h£t",
h£tComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

124 {"hgë",
hgëComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

125 {"hÀn",
hÀnComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

126 {"hdñ",
hdñComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

127 {"hexi°s",
hexi°sComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

128 {"hkeys",
hkeysComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

129 {"hvÆs",
hvÆsComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

130 {"hgëÆl",
hgëÆlComm™d
,2,"r",0,
NULL
,1,1,1,0,0},

131 {"hö¸by",
hö¸byComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

132 {"hö¸byÊﬂt",
hö¸byÊﬂtComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

133 {"hmgë",
hmgëComm™d
,-3,"r",0,
NULL
,1,1,1,0,0},

134 {"hm£t",
hm£tComm™d
,-4,"wm",0,
NULL
,1,1,1,0,0},

135 {"h£äx",
h£äxComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

136 {"h°æí",
h°æíComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

137 {"hsˇn",
hsˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

139 {"Ωush",
ΩushComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

140 {"Õush",
ÕushComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

141 {"Ã™ge",
Ã™geComm™d
,4,"r",0,
NULL
,1,1,1,0,0},

142 {"Ω›",
Ω›Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

143 {"Õ›",
Õ›Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

144 {"Œí",
ŒíComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

145 {"Ãem",
ÃemComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

146 {"…rim",
…rimComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

147 {"lödex",
lödexComm™d
,3,"r",0,
NULL
,1,1,1,0,0},

148 {"l£t",
l£tComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

150 {"ßdd",
ßddComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

151 {"smembîs",
smembîsComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

152 {"sˇrd",
sˇrdComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

153 {"§em",
§emComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

154 {"•›",
•›Comm™d
,-2,"wRsF",0,
NULL
,1,1,1,0,0},

155 {"sismembî",
sismembîComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

156 {"ssˇn",
ssˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

157 {"suni⁄",
suni⁄Comm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

158 {"suni⁄°‹e",
suni⁄°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

159 {"sdiff",
sdiffComm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

160 {"sdiff°‹e",
sdiff°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

161 {"söãr",
söãrComm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

162 {"söãr°‹e",
söãr°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

164 {"zadd",
zaddComm™d
,-4,"wmF",0,
NULL
,1,1,1,0,0},

165 {"zö¸by",
zö¸byComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

166 {"zønge",
zøngeComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

167 {"zªvønge",
zªvøngeComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

168 {"zªm",
zªmComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

169 {"zˇrd",
zˇrdComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

170 {"zcou¡",
zcou¡Comm™d
,4,"rF",0,
NULL
,1,1,1,0,0},

171 {"zøngebysc‹e",
zøngebysc‹eComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

172 {"zªvøngebysc‹e",
zªvøngebysc‹eComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

173 {"zønk",
zønkComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

174 {"zªvønk",
zªvønkComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

175 {"zsc‹e",
zsc‹eComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

176 {"zªmøngebysc‹e",
zªmøngebysc‹eComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

177 {"zªmøngebyønk",
zªmøngebyønkComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

178 {"zªmøngebyÀx",
zªmøngebyÀxComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

179 {"zsˇn",
zsˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

181 {"pÁdd",
pÁddComm™d
,-2,"wmF",0,
NULL
,1,1,1,0,0},

182 {"pfcou¡",
pfcou¡Comm™d
,-2,"r",0,
NULL
,1,-1,1,0,0}

189 
	$p›uœãComm™dTabÀ
() {

190 
j
;

192 
numcomm™ds
 = (
ªdisComm™dTabÀ
)/(
ªdisComm™d
);

195 
j
 = 0; j < 
numcomm™ds
; j++) {

197 
ªdisComm™d
 *
c
 = 
ªdisComm™dTabÀ
+
j
;

198 *
f
 = 
c
->
sÊags
;

199 
ªtvÆ1
;

201 *
f
 != '\0') {

202 *
f
) {

203 'w': 
c
->
Êags
 |
CMD_WRITE
; ;

204 'r': 
c
->
Êags
 |
CMD_READONLY
; ;

205 'm': 
c
->
Êags
 |
CMD_DENYOOM
; ;

206 'a': 
c
->
Êags
 |
CMD_ADMIN
; ;

207 'p': 
c
->
Êags
 |
CMD_PUBSUB
; ;

208 's': 
c
->
Êags
 |
CMD_NOSCRIPT
; ;

209 'R': 
c
->
Êags
 |
CMD_RANDOM
; ;

210 'S': 
c
->
Êags
 |
CMD_SORT_FOR_SCRIPT
; ;

211 'l': 
c
->
Êags
 |
CMD_LOADING
; ;

212 't': 
c
->
Êags
 |
CMD_STALE
; ;

213 'M': 
c
->
Êags
 |
CMD_SKIP_MONITOR
; ;

214 'k': 
c
->
Êags
 |
CMD_ASKING
; ;

215 'F': 
c
->
Êags
 |
CMD_FAST
; ;

216 : 
	`£rvîP™ic
("Unsupported command flag"); ;

218 
f
++;

221 
ªtvÆ1
 = 
	`di˘Add
(
£rvî
.
comm™ds
, 
	`sd¢ew
(
c
->
«me
), c);

222 
	`ASSERT
(
ªtvÆ1
 =
DICT_OK
);

224 
c
->
idx
 = 
j
;

226 
	}
}

229 
	$p›uœãComm™dsNìdAdmö∑ss
() {

230 
d¨øy
 
comm™ds_√ed_admö∑ss
;

231 
sds
 *
comm™d_«me
;

232 
ªdisComm™d
 *
comm™d
;

235 
	`d¨øy_öô
(&
comm™ds_√ed_admö∑ss
,1,(
sds
));

237 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_COMMANDSNAP
,&
comm™ds_√ed_admö∑ss
);

239 
	`d¨øy_n
(&
comm™ds_√ed_admö∑ss
)) {

241 
comm™d_«me
 = 
	`d¨øy_p›
(&
comm™ds_√ed_admö∑ss
);

244 
comm™d
 = 
	`lookupComm™d
(*
comm™d_«me
);

245 i‡(
comm™d
 =
NULL
) {

246 
	`log_îr‹
("Unknow command %s for commands-need-amdminpass",

247 
comm™d_«me
);

248  
VR_ERROR
;

251 
comm™d
->
√edadmö
 = 1;

252 
	`sds‰ì
(*
comm™d_«me
);

254 
	`d¨øy_deöô
(&
comm™ds_√ed_admö∑ss
);

256  
VR_OK
;

257 
	}
}

259 
ªdisComm™d
 *
	$lookupComm™d
(
sds
 
«me
) {

260  
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

261 
	}
}

272 
ªdisComm™d
 *
	$lookupComm™dOrOrigöÆ
(
sds
 
«me
) {

273 
ªdisComm™d
 *
cmd
 = 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

275 i‡(!
cmd
Ëcmd = 
	`di˘FëchVÆue
(
£rvî
.
‹ig_comm™ds
,
«me
);

276  
cmd
;

277 
	}
}

280 
ªdisComm™d
 *
	$lookupComm™dByCSåög
(*
s
) {

281 
ªdisComm™d
 *
cmd
;

282 
sds
 
«me
 = 
	`sd¢ew
(
s
);

284 
cmd
 = 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

285 
	`sds‰ì
(
«me
);

286  
cmd
;

287 
	}
}

328 
	$ˇŒ
(
˛õ¡
 *
c
, 
Êags
) {

329 
dúty
, 
°¨t
, 
duøti⁄
;

330 
˛õ¡_ﬁd_Êags
 = 
c
->
Êags
;

334 i‡(
	`dli°Lígth
(
£rvî
.
m⁄ô‹s
) &&

335 !
£rvî
.
lﬂdög
 &&

336 !(
c
->
cmd
->
Êags
 & (
CMD_SKIP_MONITOR
|
CMD_ADMIN
)))

338 
	`ª∂iˇti⁄FìdM⁄ô‹s
(
c
,
£rvî
.
m⁄ô‹s
,c->
db
->
id
,c->
¨gv
,c->
¨gc
);

343 
c
->
Êags
 &~(
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

344 
	`ªdisOpAºayInô
(&
£rvî
.
Æso_¥›ag©e
);

347 
dúty
 = 
c
->
vñ
->dirty;

348 
°¨t
 = 
	`vr_u£c_now
();

349 
c
->
cmd
->
	`¥oc
(c);

350 
duøti⁄
 = 
	`vr_u£c_now
()-
°¨t
;

351 
dúty
 = 
c
->
vñ
->dirty-dirty;

352 i‡(
dúty
 < 0) dirty = 0;

356 i‡(
£rvî
.
lﬂdög
 && 
c
->
Êags
 & 
CLIENT_LUA
)

357 
Êags
 &~(
CMD_CALL_SLOWLOG
 | 
CMD_CALL_STATS
);

362 i‡(
c
->
Êags
 & 
CLIENT_LUA
 && 
£rvî
.
lua_ˇŒî
) {

363 i‡(
c
->
Êags
 & 
CLIENT_FORCE_REPL
)

364 
£rvî
.
lua_ˇŒî
->
Êags
 |
CLIENT_FORCE_REPL
;

365 i‡(
c
->
Êags
 & 
CLIENT_FORCE_AOF
)

366 
£rvî
.
lua_ˇŒî
->
Êags
 |
CLIENT_FORCE_AOF
;

371 i‡(
Êags
 & 
CMD_CALL_SLOWLOG
 && 
c
->
cmd
->
¥oc
 !
execComm™d
) {

375 
	`¶owlogPushE¡ryIfNìded
(
c
->
vñ
,c->
¨gv
,c->
¨gc
,
duøti⁄
);

377 i‡(
Êags
 & 
CMD_CALL_STATS
) {

378 
comm™dSèts
 *
c°©s
 = 
	`d¨øy_gë
(
c
->
vñ
->
c°abÀ
,c->
œ°cmd
->
idx
);

379 
c°©s
->
mi¸o£c⁄ds
 +
duøti⁄
;

380 
c°©s
->
ˇŒs
++;

384 i‡(
Êags
 & 
CMD_CALL_PROPAGATE
 &&

385 (
c
->
Êags
 & 
CLIENT_PREVENT_PROP
) != CLIENT_PREVENT_PROP)

387 
¥›ag©e_Êags
 = 
PROPAGATE_NONE
;

391 i‡(
dúty
Ë
¥›ag©e_Êags
 |(
PROPAGATE_AOF
|
PROPAGATE_REPL
);

395 i‡(
c
->
Êags
 & 
CLIENT_FORCE_REPL
Ë
¥›ag©e_Êags
 |
PROPAGATE_REPL
;

396 i‡(
c
->
Êags
 & 
CLIENT_FORCE_AOF
Ë
¥›ag©e_Êags
 |
PROPAGATE_AOF
;

401 i‡(
c
->
Êags
 & 
CLIENT_PREVENT_REPL_PROP
 ||

402 !(
Êags
 & 
CMD_CALL_PROPAGATE_REPL
))

403 
¥›ag©e_Êags
 &~
PROPAGATE_REPL
;

404 i‡(
c
->
Êags
 & 
CLIENT_PREVENT_AOF_PROP
 ||

405 !(
Êags
 & 
CMD_CALL_PROPAGATE_AOF
))

406 
¥›ag©e_Êags
 &~
PROPAGATE_AOF
;

410 i‡(
¥›ag©e_Êags
 !
PROPAGATE_NONE
)

411 
	`¥›ag©e
(
c
->
cmd
,c->
db
->
id
,c->
¨gv
,c->
¨gc
,
¥›ag©e_Êags
);

416 
c
->
Êags
 &~(
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

417 
c
->
Êags
 |
˛õ¡_ﬁd_Êags
 &

418 (
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

423 i‡(
£rvî
.
Æso_¥›ag©e
.
num›s
) {

424 
j
;

425 
ªdisOp
 *
r›
;

427 i‡(
Êags
 & 
CMD_CALL_PROPAGATE
) {

428 
j
 = 0; j < 
£rvî
.
Æso_¥›ag©e
.
num›s
; j++) {

429 
r›
 = &
£rvî
.
Æso_¥›ag©e
.
›s
[
j
];

430 
èrgë
 = 
r›
->target;

432 i‡(!(
Êags
&
CMD_CALL_PROPAGATE_AOF
)Ë
èrgë
 &~
PROPAGATE_AOF
;

433 i‡(!(
Êags
&
CMD_CALL_PROPAGATE_REPL
)Ë
èrgë
 &~
PROPAGATE_REPL
;

434 i‡(
èrgë
)

435 
	`¥›ag©e
(
r›
->
cmd
,r›->
dbid
,r›->
¨gv
,r›->
¨gc
,
èrgë
);

438 
	`ªdisOpAºayFªe
(&
£rvî
.
Æso_¥›ag©e
);

440 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
numcomm™ds
, 1);

441 
	}
}

452 
	$¥o˚ssComm™d
(
˛õ¡
 *
c
) {

453 
maxmem‹y
;

460 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[0]->
±r
,"quit")) {

461 
	`addRïly
(
c
,
sh¨ed
.
ok
);

462 
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

463  
VR_ERROR
;

469 
c
->
cmd
 = c->
œ°cmd
 = 
	`lookupComm™d
(c->
¨gv
[0]->
±r
);

470 i‡(!
c
->
cmd
) {

471 
	`ÊagTønß˘i⁄
(
c
);

472 
	`addRïlyEº‹F‹m©
(
c
,"unknown command '%s'",

473 (*)
c
->
¨gv
[0]->
±r
);

474  
VR_OK
;

475 } i‡((
c
->
cmd
->
¨ôy
 > 0 && c->cmd->¨ôy !c->
¨gc
) ||

476 (
c
->
¨gc
 < -c->
cmd
->
¨ôy
)) {

477 
	`ÊagTønß˘i⁄
(
c
);

478 
	`addRïlyEº‹F‹m©
(
c
,"wrongÇumber ofárguments for '%s' command",

479 
c
->
cmd
->
«me
);

480  
VR_OK
;

485 i‡(
c
->
vñ
->
cc
.
ªquúïass
 && !c->
authítiˇãd
 &&

486 
c
->
cmd
->
¥oc
 !
authComm™d
 && c->cmd->¥o¯!
admöComm™d
)

488 
	`ÊagTønß˘i⁄
(
c
);

489 
	`addRïly
(
c
,
sh¨ed
.
nﬂuthîr
);

490  
VR_OK
;

493 i‡(
c
->
cmd
->
√edadmö
 && c->
vñ
->
cc
.
admö∑ss
 &&

494 
c
->
authítiˇãd
 < 2 && c->
cmd
->
¥oc
 !
admöComm™d
)

496 
	`ÊagTønß˘i⁄
(
c
);

497 
	`addRïly
(
c
,
sh¨ed
.
nﬂdmöîr
);

498  
VR_OK
;

507 
maxmem‹y
 = 
c
->
vñ
->
cc
.maxmemory;

508 i‡(
maxmem‹y
) {

509 
ªtvÆ
 = 
	`‰ìMem‹yIfNìded
(
c
->
vñ
);

512 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =
NULL
Ë 
VR_ERROR
;

516 i‡((
c
->
cmd
->
Êags
 & 
CMD_DENYOOM
Ë&& 
ªtvÆ
 =
VR_ERROR
) {

517 
	`ÊagTønß˘i⁄
(
c
);

518 
	`addRïly
(
c
, 
sh¨ed
.
oomîr
);

519  
VR_OK
;

525 i‡(((
£rvî
.
°›_wrôes_⁄_bgßve_îr
 &&

526 
£rvî
.
ßvï¨am¶í
 > 0 &&

527 
£rvî
.
œ°bgßve_°©us
 =
VR_ERROR
) ||

528 
£rvî
.
aof_œ°_wrôe_°©us
 =
VR_ERROR
) &&

529 
ª∂
.
ma°îho°
 =
NULL
 &&

530 (
c
->
cmd
->
Êags
 & 
CMD_WRITE
 ||

531 
c
->
cmd
->
¥oc
 =
pögComm™d
))

533 
	`ÊagTønß˘i⁄
(
c
);

534 i‡(
£rvî
.
aof_œ°_wrôe_°©us
 =
VR_OK
)

535 
	`addRïly
(
c
, 
sh¨ed
.
bgßvìº
);

537 
	`addRïlySds
(
c
,

538 
	`sdsˇçrötf
(
	`sd£m±y
(),

540 
	`°ªº‹
(
£rvî
.
aof_œ°_wrôe_î∫o
)));

541  
VR_OK
;

546 i‡(
ª∂
.
ma°îho°
 =
NULL
 &&

547 
ª∂
.
ª∂_mö_¶aves_to_wrôe
 &&

548 
ª∂
.
ª∂_mö_¶aves_max_œg
 &&

549 
c
->
cmd
->
Êags
 & 
CMD_WRITE
 &&

550 
ª∂
.
ª∂_good_¶aves_cou¡
 <Ñïl.
ª∂_mö_¶aves_to_wrôe
)

552 
	`ÊagTønß˘i⁄
(
c
);

553 
	`addRïly
(
c
, 
sh¨ed
.
n‹ïliˇ£º
);

554  
VR_OK
;

559 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ª∂_¶ave_ro
 &&

560 !(
c
->
Êags
 & 
CLIENT_MASTER
) &&

561 
c
->
cmd
->
Êags
 & 
CMD_WRITE
)

563 
	`addRïly
(
c
, 
sh¨ed
.
ro¶avìº
);

564  
VR_OK
;

568 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
 &&

569 
c
->
cmd
->
¥oc
 !
pögComm™d
 &&

570 
c
->
cmd
->
¥oc
 !
subs¸ibeComm™d
 &&

571 
c
->
cmd
->
¥oc
 !
unsubs¸ibeComm™d
 &&

572 
c
->
cmd
->
¥oc
 !
psubs¸ibeComm™d
 &&

573 
c
->
cmd
->
¥oc
 !
punsubs¸ibeComm™d
) {

574 
	`addRïlyEº‹
(
c
,"only (P)SUBSCRIBE / (P)UNSUBSCRIBE / PING / QUITállowed inÅhis context");

575  
VR_OK
;

580 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ª∂_°©e
 !
REPL_STATE_CONNECTED
 &&

581 
ª∂
.
ª∂_£rve_°Æe_d©a
 == 0 &&

582 !(
c
->
cmd
->
Êags
 & 
CMD_STALE
))

584 
	`ÊagTønß˘i⁄
(
c
);

585 
	`addRïly
(
c
, 
sh¨ed
.
ma°îdow√º
);

586  
VR_OK
;

591 i‡(
£rvî
.
lﬂdög
 && !(
c
->
cmd
->
Êags
 & 
CMD_LOADING
)) {

592 
	`addRïly
(
c
, 
sh¨ed
.
lﬂdögîr
);

593  
VR_OK
;

597 i‡(
£rvî
.
lua_timedout
 &&

598 
c
->
cmd
->
¥oc
 !
authComm™d
 &&

599 
c
->
cmd
->
¥oc
 !
ª∂c⁄fComm™d
 &&

600 !(
c
->
cmd
->
¥oc
 =
shutdownComm™d
 &&

601 
c
->
¨gc
 == 2 &&

602 
	`tﬁowî
(((*)
c
->
¨gv
[1]->
±r
)[0]) == 'n') &&

603 !(
c
->
cmd
->
¥oc
 =
s¸ùtComm™d
 &&

604 
c
->
¨gc
 == 2 &&

605 
	`tﬁowî
(((*)
c
->
¨gv
[1]->
±r
)[0]) == 'k'))

607 
	`ÊagTønß˘i⁄
(
c
);

608 
	`addRïly
(
c
, 
sh¨ed
.
¶ows¸ùãº
);

609  
VR_OK
;

613 i‡(
c
->
Êags
 & 
CLIENT_MULTI
 &&

614 
c
->
cmd
->
¥oc
 !
execComm™d
 && c->cmd->¥o¯!
disˇrdComm™d
 &&

615 
c
->
cmd
->
¥oc
 !
mu…iComm™d
 && c->cmd->¥o¯!
w©chComm™d
)

617 
	`queueMu…iComm™d
(
c
);

618 
	`addRïly
(
c
,
sh¨ed
.
queued
);

620 
	`ˇŒ
(
c
,
CMD_CALL_FULL
);

621 
c
->
woff
 = 
ª∂
.
ma°î_ª∂_off£t
;

622 i‡(
	`dli°Lígth
(
£rvî
.
ªady_keys
))

623 
	`h™dÀClõ¡sBlockedOnLi°s
();

626  
VR_OK
;

627 
	}
}

632 
	$ªdisOpAºayInô
(
ªdisOpAºay
 *
ﬂ
) {

633 
ﬂ
->
›s
 = 
NULL
;

634 
ﬂ
->
num›s
 = 0;

635 
	}
}

638 
	$ªdisOpAºayAµíd
(
ªdisOpAºay
 *
ﬂ
, 
ªdisComm™d
 *
cmd
, 
dbid
,

639 
robj
 **
¨gv
, 
¨gc
, 
èrgë
)

641 
ªdisOp
 *
›
;

643 
ﬂ
->
›s
 = 
	`dªÆloc
(ﬂ->›s,(
ªdisOp
)*((
size_t
)ﬂ->
num›s
+1));

644 
›
 = 
ﬂ
->
›s
+ﬂ->
num›s
;

645 
›
->
cmd
 = cmd;

646 
›
->
dbid
 = dbid;

647 
›
->
¨gv
 =árgv;

648 
›
->
¨gc
 =árgc;

649 
›
->
èrgë
 =Åarget;

650 
ﬂ
->
num›s
++;

651  
ﬂ
->
num›s
;

652 
	}
}

655 
	$ªdisOpAºayFªe
(
ªdisOpAºay
 *
ﬂ
) {

656 
ﬂ
->
num›s
) {

657 
j
;

658 
ªdisOp
 *
›
;

660 
ﬂ
->
num›s
--;

661 
›
 = 
ﬂ
->
›s
+ﬂ->
num›s
;

662 
j
 = 0; j < 
›
->
¨gc
; j++)

663 
	`de¸RefCou¡
(
›
->
¨gv
[
j
]);

664 
	`d‰ì
(
›
->
¨gv
);

666 
	`d‰ì
(
ﬂ
->
›s
);

667 
	}
}

681 
	$¥›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
,

682 
Êags
)

684 i‡(
£rvî
.
aof_°©e
 !
AOF_OFF
 && 
Êags
 & 
PROPAGATE_AOF
)

685 
	`„edAµídO∆yFûe
(
cmd
,
dbid
,
¨gv
,
¨gc
);

686 i‡(
Êags
 & 
PROPAGATE_REPL
)

687 
	`ª∂iˇti⁄FìdSœves
(
ª∂
.
¶aves
,
dbid
,
¨gv
,
¨gc
);

688 
	}
}

702 
	$ÆsoPr›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
,

703 
èrgë
)

705 
robj
 **
¨gvc›y
;

706 
j
;

708 i‡(
£rvî
.
lﬂdög
) ;

710 
¨gvc›y
 = 
	`dÆloc
((
robj
*)*(
size_t
)
¨gc
);

711 
j
 = 0; j < 
¨gc
; j++) {

712 
¨gvc›y
[
j
] = 
	`dupSåögObje˘Unc⁄°™t
(
¨gv
[j]);

714 
	`ªdisOpAºayAµíd
(&
£rvî
.
Æso_¥›ag©e
,
cmd
,
dbid
,
¨gvc›y
,
¨gc
,
èrgë
);

715 
	}
}

720 
	$f‹˚Comm™dPr›ag©i⁄
(
˛õ¡
 *
c
, 
Êags
) {

721 i‡(
Êags
 & 
PROPAGATE_REPL
Ë
c
->Êag†|
CLIENT_FORCE_REPL
;

722 i‡(
Êags
 & 
PROPAGATE_AOF
Ë
c
->Êag†|
CLIENT_FORCE_AOF
;

723 
	}
}

728 
	$¥evítComm™dPr›ag©i⁄
(
˛õ¡
 *
c
) {

729 
c
->
Êags
 |
CLIENT_PREVENT_PROP
;

730 
	}
}

733 
	$¥evítComm™dAOF
(
˛õ¡
 *
c
) {

734 
c
->
Êags
 |
CLIENT_PREVENT_AOF_PROP
;

735 
	}
}

738 
	$¥evítComm™dRïliˇti⁄
(
˛õ¡
 *
c
) {

739 
c
->
Êags
 |
CLIENT_PREVENT_REPL_PROP
;

740 
	}
}

744 
	$addRïlyComm™dFœg
(
˛õ¡
 *
c
, 
ªdisComm™d
 *
cmd
, 
f
, *
ª∂y
) {

745 i‡(
cmd
->
Êags
 & 
f
) {

746 
	`addRïlySètus
(
c
, 
ª∂y
);

750 
	}
}

754 
	$addRïlyComm™d
(
˛õ¡
 *
c
, 
ªdisComm™d
 *
cmd
) {

755 i‡(!
cmd
) {

756 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

759 
	`addRïlyMu…iBulkLí
(
c
, 6);

760 
	`addRïlyBulkCSåög
(
c
, 
cmd
->
«me
);

761 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
¨ôy
);

763 
Êagcou¡
 = 0;

764 *
ÊagÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

765 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_WRITE
, "write");

766 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_READONLY
, "readonly");

767 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_DENYOOM
, "denyoom");

768 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_ADMIN
, "admin");

769 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_PUBSUB
, "pubsub");

770 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_NOSCRIPT
, "noscript");

771 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_RANDOM
, "random");

772 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_SORT_FOR_SCRIPT
,"sort_for_script");

773 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_LOADING
, "loading");

774 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_STALE
, "stale");

775 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_SKIP_MONITOR
, "skip_monitor");

776 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_ASKING
, "asking");

777 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_FAST
, "fast");

778 i‡(
cmd
->
gëkeys_¥oc
) {

779 
	`addRïlySètus
(
c
, "movablekeys");

780 
Êagcou¡
 += 1;

782 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ÊagÀn
, 
Êagcou¡
);

784 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
fú°key
);

785 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
œ°key
);

786 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
key°ï
);

788 
	}
}

792 
	$comm™dComm™d
(
˛õ¡
 *
c
) {

793 i‡(
c
->
¨gc
 == 1) {

794 
di˘Iãøt‹
 *
di
;

795 
di˘E¡ry
 *
de
;

797 
	`addRïlyMu…iBulkLí
(
c
, 
	`di˘Size
(
£rvî
.
comm™ds
));

798 
di
 = 
	`di˘GëIãøt‹
(
£rvî
.
comm™ds
);

799 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

800 
	`addRïlyComm™d
(
c
, 
	`di˘GëVÆ
(
de
));

802 
	`di˘Rñó£Iãøt‹
(
di
);

803 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "info")) {

804 
i
;

805 
	`addRïlyMu…iBulkLí
(
c
, c->
¨gc
-2);

806 
i
 = 2; i < 
c
->
¨gc
; i++) {

807 
	`addRïlyComm™d
(
c
, 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, c->
¨gv
[
i
]->
±r
));

809 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "cou¡"Ë&& c->
¨gc
 == 2) {

810 
	`addRïlyL⁄gL⁄g
(
c
, 
	`di˘Size
(
£rvî
.
comm™ds
));

811 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"gëkeys"Ë&& c->
¨gc
 >= 3) {

812 
ªdisComm™d
 *
cmd
 = 
	`lookupComm™d
(
c
->
¨gv
[2]->
±r
);

813 *
keys
, 
numkeys
, 
j
;

815 i‡(!
cmd
) {

816 
	`addRïlyEº‹F‹m©
(
c
,"Invalid command specified");

818 } i‡((
cmd
->
¨ôy
 > 0 && cmd->¨ôy !
c
->
¨gc
-2) ||

819 ((
c
->
¨gc
-2Ë< -
cmd
->
¨ôy
))

821 
	`addRïlyEº‹
(
c
,"InvalidÇumber ofárguments specified for command");

825 
keys
 = 
	`gëKeysFromComm™d
(
cmd
,
c
->
¨gv
+2,c->
¨gc
-2,&
numkeys
);

826 
	`addRïlyMu…iBulkLí
(
c
,
numkeys
);

827 
j
 = 0; j < 
numkeys
; j++Ë
	`addRïlyBulk
(
c
,c->
¨gv
[
keys
[j]+2]);

828 
	`gëKeysFªeResu…
(
keys
);

829 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "°©s"Ë&& c->
¨gc
 == 2) {

830 
j
;

831 
d¨øy
 *
c°abÀÆl
;

832 
¨øy
 *
c°abÀ
 = 
c
->
vñ
->cstable;

833 
comm™dSèts
 *
c°©s
, *
c°©ßŒ
;

835 i‡(
c
->
°ïs
 == 0) {

836 
c°abÀÆl
 = 
	`comm™dSètsTabÀCª©e
();

837 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

838 
c
->
Êags
 |
CLIENT_JUMP
;

839 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

840 
c
->
ˇche
 = 
c°abÀÆl
;

842 
c°abÀÆl
 = 
c
->
ˇche
;

843 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

846 
j
 = 0; j < 
	`d¨øy_n
(
c°abÀ
); j ++) {

847 
c°©s
 = 
	`d¨øy_gë
(
c°abÀ
, 
j
);

848 i‡(!
c°©s
->
ˇŒs
) ;

850 
c°©ßŒ
 = 
	`d¨øy_gë
(
c°abÀÆl
, 
j
);

851 
c°©ßŒ
->
mi¸o£c⁄ds
 +
c°©s
->microseconds;

852 
c°©ßŒ
->
ˇŒs
 +
c°©s
->calls;

855 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

856 
sds
 
comm™d_°©s_öfo
;

857 *
ª∂yÀn_node
;

858 
ª∂yÀn
 = 0;

860 
c
->
°ïs
 = 0;

861 
c
->
èridx
 = -1;

862 
c
->
ˇche
 = 
NULL
;

863 
c
->
Êags
 &~
CLIENT_JUMP
;

865 
ª∂yÀn_node
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

866 
j
 = 0; j < 
	`d¨øy_n
(
c°abÀÆl
); j ++) {

867 
c°©ßŒ
 = 
	`d¨øy_gë
(
c°abÀÆl
, 
j
);

868 i‡(!
c°©ßŒ
->
ˇŒs
) ;

870 
comm™d_°©s_öfo
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),

872 
c°©ßŒ
->
«me
, c°©ßŒ->
ˇŒs
, c°©ßŒ->
mi¸o£c⁄ds
,

873 ()
c°©ßŒ
->
mi¸o£c⁄ds
/c°©ßŒ->
ˇŒs
);

874 
	`addRïlyBulkSds
(
c
,
comm™d_°©s_öfo
);

875 
ª∂yÀn
 ++;

878 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn_node
,
ª∂yÀn
);

880 
	`comm™dSètsTabÀDe°roy
(
c°abÀÆl
);

883 
	`addRïlyEº‹
(
c
, "Unknown subcommand or wrongÇumber ofárguments.");

886 
	}
}

889 
d¨øy
 *

890 
	$comm™dSètsTabÀCª©e
()

892 
j
;

893 
comm™dSèts
 *
c°©s
;

894 
d¨øy
 *
c°©°abÀ
;

895 
numcomm™ds
 = (
ªdisComm™dTabÀ
)/(
ªdisComm™d
);

898 
c°©°abÀ
 = 
	`d¨øy_¸óã
(
numcomm™ds
,(
comm™dSèts
));

899 i‡(
c°©°abÀ
 =
NULL
)  NULL;

900 
j
 = 0; j < 
numcomm™ds
; j ++) {

901 
ªdisComm™d
 *
c
 = 
ªdisComm™dTabÀ
+
j
;

902 
c°©s
 = 
	`d¨øy_push
(
c°©°abÀ
);

903 
c°©s
->
«me
 = 
c
->name;

904 
c°©s
->
mi¸o£c⁄ds
 = 0;

905 
c°©s
->
ˇŒs
 = 0;

906 
	`ASSERT
(
j
 =
c
->
idx
);

909  
c°©°abÀ
;

910 
	}
}

913 
	$comm™dSètsTabÀDe°roy
(
d¨øy
 *
c°©°abÀ
)

915 
c°©°abÀ
->
√Àm
 = 0;

916 
	`d¨øy_de°roy
(
c°©°abÀ
);

917 
	}
}

	@src/vr_command.c

1 
	~<vr_c‹e.h
>

5 
di˘Ty≥
 
	gcomm™dTabÀDi˘Ty≥
 = {

6 
di˘SdsCa£Hash
,

7 
NULL
,

8 
NULL
,

9 
di˘SdsKeyCa£Com∑ª
,

10 
di˘SdsDe°ru˘‹
,

11 
NULL


68 
ªdisComm™d
 
	gªdisComm™dTabÀ
[] = {

70 {"pög",
pögComm™d
,-1,"tF",0,
NULL
,0,0,0,0,0},

71 {"echo",
echoComm™d
,2,"F",0,
NULL
,0,0,0,0,0},

72 {"£À˘",
£À˘Comm™d
,2,"lF",0,
NULL
,0,0,0,0,0},

73 {"auth",
authComm™d
,2,"¶tF",0,
NULL
,0,0,0,0,0},

74 {"admö",
admöComm™d
,2,"¶tF",0,
NULL
,0,0,0,0,0},

76 {"öfo",
öfoComm™d
,-1,"…",0,
NULL
,0,0,0,0,0},

77 {"Êushdb",
ÊushdbComm™d
,1,"w",0,
NULL
,0,0,0,0,0},

78 {"ÊushÆl",
ÊushÆlComm™d
,1,"w",0,
NULL
,0,0,0,0,0},

79 {"time",
timeComm™d
,1,"RF",0,
NULL
,0,0,0,0,0},

80 {"dbsize",
dbsizeComm™d
,1,"rF",0,
NULL
,0,0,0,0,0},

81 {"comm™d",
comm™dComm™d
,0,"…",0,
NULL
,0,0,0,0,0},

82 {"c⁄fig",
c⁄figComm™d
,-2,"œt",0,
NULL
,0,0,0,0,0},

83 {"˛õ¡",
˛õ¡Comm™d
,-2,"as",0,
NULL
,0,0,0,0,0},

84 {"¶owlog",
¶owlogComm™d
,-2,"a",0,
NULL
,0,0,0,0,0},

86 {"dñ",
dñComm™d
,-2,"w",0,
NULL
,1,-1,1,0,0},

87 {"exi°s",
exi°sComm™d
,-2,"rF",0,
NULL
,1,-1,1,0,0},

88 {"âl",
âlComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

89 {"±é",
±éComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

90 {"expúe",
expúeComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

91 {"expúót",
expúótComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

92 {"≥xpúe",
≥xpúeComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

93 {"≥xpúót",
≥xpúótComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

94 {"≥rsi°",
≥rsi°Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

95 {"øndomkey",
øndomkeyComm™d
,1,"rR",0,
NULL
,0,0,0,0,0},

96 {"ty≥",
ty≥Comm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

97 {"keys",
keysComm™d
,2,"rS",0,
NULL
,0,0,0,0,0},

98 {"sˇn",
sˇnComm™d
,-2,"rR",0,
NULL
,0,0,0,0,0},

99 {"obje˘",
obje˘Comm™d
,3,"r",0,
NULL
,2,2,2,0,0},

101 {"gë",
gëComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

102 {"£t",
£tComm™d
,-3,"wm",0,
NULL
,1,1,1,0,0},

103 {"£äx",
£äxComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

104 {"£ãx",
£ãxComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

105 {"p£ãx",
p£ãxComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

106 {"ö¸",
ö¸Comm™d
,2,"wmF",0,
NULL
,1,1,1,0,0},

107 {"de¸",
de¸Comm™d
,2,"wmF",0,
NULL
,1,1,1,0,0},

108 {"ö¸by",
ö¸byComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

109 {"de¸by",
de¸byComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

110 {"≠≥nd",
≠≥ndComm™d
,3,"wm",0,
NULL
,1,1,1,0,0},

111 {"°æí",
°æíComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

112 {"gë£t",
gë£tComm™d
,3,"wm",0,
NULL
,1,1,1,0,0},

113 {"ö¸byÊﬂt",
ö¸byÊﬂtComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

114 {"£tbô",
£tbôComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

115 {"gëbô",
gëbôComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

116 {"£å™ge",
£å™geComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

117 {"gëønge",
gëøngeComm™d
,4,"r",0,
NULL
,1,1,1,0,0},

118 {"bôcou¡",
bôcou¡Comm™d
,-2,"r",0,
NULL
,1,1,1,0,0},

119 {"bôpos",
bôposComm™d
,-3,"r",0,
NULL
,1,1,1,0,0},

120 {"mgë",
mgëComm™d
,-2,"r",0,
NULL
,1,-1,1,0,0},

121 {"m£t",
m£tComm™d
,-3,"wm",0,
NULL
,1,-1,2,0,0},

123 {"h£t",
h£tComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

124 {"hgë",
hgëComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

125 {"hÀn",
hÀnComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

126 {"hdñ",
hdñComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

127 {"hexi°s",
hexi°sComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

128 {"hkeys",
hkeysComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

129 {"hvÆs",
hvÆsComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

130 {"hgëÆl",
hgëÆlComm™d
,2,"r",0,
NULL
,1,1,1,0,0},

131 {"hö¸by",
hö¸byComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

132 {"hö¸byÊﬂt",
hö¸byÊﬂtComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

133 {"hmgë",
hmgëComm™d
,-3,"r",0,
NULL
,1,1,1,0,0},

134 {"hm£t",
hm£tComm™d
,-4,"wm",0,
NULL
,1,1,1,0,0},

135 {"h£äx",
h£äxComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

136 {"h°æí",
h°æíComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

137 {"hsˇn",
hsˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

139 {"Ωush",
ΩushComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

140 {"Õush",
ÕushComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

141 {"Ã™ge",
Ã™geComm™d
,4,"r",0,
NULL
,1,1,1,0,0},

142 {"Ω›",
Ω›Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

143 {"Õ›",
Õ›Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

144 {"Œí",
ŒíComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

145 {"Ãem",
ÃemComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

146 {"…rim",
…rimComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

147 {"lödex",
lödexComm™d
,3,"r",0,
NULL
,1,1,1,0,0},

148 {"l£t",
l£tComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

150 {"ßdd",
ßddComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

151 {"smembîs",
smembîsComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

152 {"sˇrd",
sˇrdComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

153 {"§em",
§emComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

154 {"•›",
•›Comm™d
,-2,"wRsF",0,
NULL
,1,1,1,0,0},

155 {"sismembî",
sismembîComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

156 {"ssˇn",
ssˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

157 {"suni⁄",
suni⁄Comm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

158 {"suni⁄°‹e",
suni⁄°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

159 {"sdiff",
sdiffComm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

160 {"sdiff°‹e",
sdiff°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

161 {"söãr",
söãrComm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

162 {"söãr°‹e",
söãr°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

164 {"zadd",
zaddComm™d
,-4,"wmF",0,
NULL
,1,1,1,0,0},

165 {"zö¸by",
zö¸byComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

166 {"zønge",
zøngeComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

167 {"zªvønge",
zªvøngeComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

168 {"zªm",
zªmComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

169 {"zˇrd",
zˇrdComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

170 {"zcou¡",
zcou¡Comm™d
,4,"rF",0,
NULL
,1,1,1,0,0},

171 {"zøngebysc‹e",
zøngebysc‹eComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

172 {"zªvøngebysc‹e",
zªvøngebysc‹eComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

173 {"zønk",
zønkComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

174 {"zªvønk",
zªvønkComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

175 {"zsc‹e",
zsc‹eComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

176 {"zªmøngebysc‹e",
zªmøngebysc‹eComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

177 {"zªmøngebyønk",
zªmøngebyønkComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

178 {"zªmøngebyÀx",
zªmøngebyÀxComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

179 {"zsˇn",
zsˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

181 {"pÁdd",
pÁddComm™d
,-2,"wmF",0,
NULL
,1,1,1,0,0},

182 {"pfcou¡",
pfcou¡Comm™d
,-2,"r",0,
NULL
,1,-1,1,0,0}

189 
	$p›uœãComm™dTabÀ
() {

190 
j
;

192 
numcomm™ds
 = (
ªdisComm™dTabÀ
)/(
ªdisComm™d
);

195 
j
 = 0; j < 
numcomm™ds
; j++) {

197 
ªdisComm™d
 *
c
 = 
ªdisComm™dTabÀ
+
j
;

198 *
f
 = 
c
->
sÊags
;

199 
ªtvÆ1
;

201 *
f
 != '\0') {

202 *
f
) {

203 'w': 
c
->
Êags
 |
CMD_WRITE
; ;

204 'r': 
c
->
Êags
 |
CMD_READONLY
; ;

205 'm': 
c
->
Êags
 |
CMD_DENYOOM
; ;

206 'a': 
c
->
Êags
 |
CMD_ADMIN
; ;

207 'p': 
c
->
Êags
 |
CMD_PUBSUB
; ;

208 's': 
c
->
Êags
 |
CMD_NOSCRIPT
; ;

209 'R': 
c
->
Êags
 |
CMD_RANDOM
; ;

210 'S': 
c
->
Êags
 |
CMD_SORT_FOR_SCRIPT
; ;

211 'l': 
c
->
Êags
 |
CMD_LOADING
; ;

212 't': 
c
->
Êags
 |
CMD_STALE
; ;

213 'M': 
c
->
Êags
 |
CMD_SKIP_MONITOR
; ;

214 'k': 
c
->
Êags
 |
CMD_ASKING
; ;

215 'F': 
c
->
Êags
 |
CMD_FAST
; ;

216 : 
	`£rvîP™ic
("Unsupported command flag"); ;

218 
f
++;

221 
ªtvÆ1
 = 
	`di˘Add
(
£rvî
.
comm™ds
, 
	`sd¢ew
(
c
->
«me
), c);

222 
	`ASSERT
(
ªtvÆ1
 =
DICT_OK
);

224 
c
->
idx
 = 
j
;

226 
	}
}

229 
	$p›uœãComm™dsNìdAdmö∑ss
() {

230 
d¨øy
 
comm™ds_√ed_admö∑ss
;

231 
sds
 *
comm™d_«me
;

232 
ªdisComm™d
 *
comm™d
;

235 
	`d¨øy_öô
(&
comm™ds_√ed_admö∑ss
,1,(
sds
));

237 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_COMMANDSNAP
,&
comm™ds_√ed_admö∑ss
);

239 
	`d¨øy_n
(&
comm™ds_√ed_admö∑ss
)) {

241 
comm™d_«me
 = 
	`d¨øy_p›
(&
comm™ds_√ed_admö∑ss
);

244 
comm™d
 = 
	`lookupComm™d
(*
comm™d_«me
);

245 i‡(
comm™d
 =
NULL
) {

246 
	`log_îr‹
("Unknow command %s for commands-need-amdminpass",

247 
comm™d_«me
);

248  
VR_ERROR
;

251 
comm™d
->
√edadmö
 = 1;

252 
	`sds‰ì
(*
comm™d_«me
);

254 
	`d¨øy_deöô
(&
comm™ds_√ed_admö∑ss
);

256  
VR_OK
;

257 
	}
}

259 
ªdisComm™d
 *
	$lookupComm™d
(
sds
 
«me
) {

260  
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

261 
	}
}

272 
ªdisComm™d
 *
	$lookupComm™dOrOrigöÆ
(
sds
 
«me
) {

273 
ªdisComm™d
 *
cmd
 = 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

275 i‡(!
cmd
Ëcmd = 
	`di˘FëchVÆue
(
£rvî
.
‹ig_comm™ds
,
«me
);

276  
cmd
;

277 
	}
}

280 
ªdisComm™d
 *
	$lookupComm™dByCSåög
(*
s
) {

281 
ªdisComm™d
 *
cmd
;

282 
sds
 
«me
 = 
	`sd¢ew
(
s
);

284 
cmd
 = 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

285 
	`sds‰ì
(
«me
);

286  
cmd
;

287 
	}
}

328 
	$ˇŒ
(
˛õ¡
 *
c
, 
Êags
) {

329 
dúty
, 
°¨t
, 
duøti⁄
;

330 
˛õ¡_ﬁd_Êags
 = 
c
->
Êags
;

334 i‡(
	`dli°Lígth
(
£rvî
.
m⁄ô‹s
) &&

335 !
£rvî
.
lﬂdög
 &&

336 !(
c
->
cmd
->
Êags
 & (
CMD_SKIP_MONITOR
|
CMD_ADMIN
)))

338 
	`ª∂iˇti⁄FìdM⁄ô‹s
(
c
,
£rvî
.
m⁄ô‹s
,c->
db
->
id
,c->
¨gv
,c->
¨gc
);

343 
c
->
Êags
 &~(
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

344 
	`ªdisOpAºayInô
(&
£rvî
.
Æso_¥›ag©e
);

347 
dúty
 = 
c
->
vñ
->dirty;

348 
°¨t
 = 
	`vr_u£c_now
();

349 
c
->
cmd
->
	`¥oc
(c);

350 
duøti⁄
 = 
	`vr_u£c_now
()-
°¨t
;

351 
dúty
 = 
c
->
vñ
->dirty-dirty;

352 i‡(
dúty
 < 0) dirty = 0;

356 i‡(
£rvî
.
lﬂdög
 && 
c
->
Êags
 & 
CLIENT_LUA
)

357 
Êags
 &~(
CMD_CALL_SLOWLOG
 | 
CMD_CALL_STATS
);

362 i‡(
c
->
Êags
 & 
CLIENT_LUA
 && 
£rvî
.
lua_ˇŒî
) {

363 i‡(
c
->
Êags
 & 
CLIENT_FORCE_REPL
)

364 
£rvî
.
lua_ˇŒî
->
Êags
 |
CLIENT_FORCE_REPL
;

365 i‡(
c
->
Êags
 & 
CLIENT_FORCE_AOF
)

366 
£rvî
.
lua_ˇŒî
->
Êags
 |
CLIENT_FORCE_AOF
;

371 i‡(
Êags
 & 
CMD_CALL_SLOWLOG
 && 
c
->
cmd
->
¥oc
 !
execComm™d
) {

375 
	`¶owlogPushE¡ryIfNìded
(
c
->
vñ
,c->
¨gv
,c->
¨gc
,
duøti⁄
);

377 i‡(
Êags
 & 
CMD_CALL_STATS
) {

378 
comm™dSèts
 *
c°©s
 = 
	`d¨øy_gë
(
c
->
vñ
->
c°abÀ
,c->
œ°cmd
->
idx
);

379 
c°©s
->
mi¸o£c⁄ds
 +
duøti⁄
;

380 
c°©s
->
ˇŒs
++;

384 i‡(
Êags
 & 
CMD_CALL_PROPAGATE
 &&

385 (
c
->
Êags
 & 
CLIENT_PREVENT_PROP
) != CLIENT_PREVENT_PROP)

387 
¥›ag©e_Êags
 = 
PROPAGATE_NONE
;

391 i‡(
dúty
Ë
¥›ag©e_Êags
 |(
PROPAGATE_AOF
|
PROPAGATE_REPL
);

395 i‡(
c
->
Êags
 & 
CLIENT_FORCE_REPL
Ë
¥›ag©e_Êags
 |
PROPAGATE_REPL
;

396 i‡(
c
->
Êags
 & 
CLIENT_FORCE_AOF
Ë
¥›ag©e_Êags
 |
PROPAGATE_AOF
;

401 i‡(
c
->
Êags
 & 
CLIENT_PREVENT_REPL_PROP
 ||

402 !(
Êags
 & 
CMD_CALL_PROPAGATE_REPL
))

403 
¥›ag©e_Êags
 &~
PROPAGATE_REPL
;

404 i‡(
c
->
Êags
 & 
CLIENT_PREVENT_AOF_PROP
 ||

405 !(
Êags
 & 
CMD_CALL_PROPAGATE_AOF
))

406 
¥›ag©e_Êags
 &~
PROPAGATE_AOF
;

410 i‡(
¥›ag©e_Êags
 !
PROPAGATE_NONE
)

411 
	`¥›ag©e
(
c
->
cmd
,c->
db
->
id
,c->
¨gv
,c->
¨gc
,
¥›ag©e_Êags
);

416 
c
->
Êags
 &~(
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

417 
c
->
Êags
 |
˛õ¡_ﬁd_Êags
 &

418 (
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

423 i‡(
£rvî
.
Æso_¥›ag©e
.
num›s
) {

424 
j
;

425 
ªdisOp
 *
r›
;

427 i‡(
Êags
 & 
CMD_CALL_PROPAGATE
) {

428 
j
 = 0; j < 
£rvî
.
Æso_¥›ag©e
.
num›s
; j++) {

429 
r›
 = &
£rvî
.
Æso_¥›ag©e
.
›s
[
j
];

430 
èrgë
 = 
r›
->target;

432 i‡(!(
Êags
&
CMD_CALL_PROPAGATE_AOF
)Ë
èrgë
 &~
PROPAGATE_AOF
;

433 i‡(!(
Êags
&
CMD_CALL_PROPAGATE_REPL
)Ë
èrgë
 &~
PROPAGATE_REPL
;

434 i‡(
èrgë
)

435 
	`¥›ag©e
(
r›
->
cmd
,r›->
dbid
,r›->
¨gv
,r›->
¨gc
,
èrgë
);

438 
	`ªdisOpAºayFªe
(&
£rvî
.
Æso_¥›ag©e
);

440 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
numcomm™ds
, 1);

441 
	}
}

452 
	$¥o˚ssComm™d
(
˛õ¡
 *
c
) {

453 
maxmem‹y
;

460 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[0]->
±r
,"quit")) {

461 
	`addRïly
(
c
,
sh¨ed
.
ok
);

462 
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

463  
VR_ERROR
;

469 
c
->
cmd
 = c->
œ°cmd
 = 
	`lookupComm™d
(c->
¨gv
[0]->
±r
);

470 i‡(!
c
->
cmd
) {

471 
	`ÊagTønß˘i⁄
(
c
);

472 
	`addRïlyEº‹F‹m©
(
c
,"unknown command '%s'",

473 (*)
c
->
¨gv
[0]->
±r
);

474  
VR_OK
;

475 } i‡((
c
->
cmd
->
¨ôy
 > 0 && c->cmd->¨ôy !c->
¨gc
) ||

476 (
c
->
¨gc
 < -c->
cmd
->
¨ôy
)) {

477 
	`ÊagTønß˘i⁄
(
c
);

478 
	`addRïlyEº‹F‹m©
(
c
,"wrongÇumber ofárguments for '%s' command",

479 
c
->
cmd
->
«me
);

480  
VR_OK
;

485 i‡(
c
->
vñ
->
cc
.
ªquúïass
 && !c->
authítiˇãd
 &&

486 
c
->
cmd
->
¥oc
 !
authComm™d
 && c->cmd->¥o¯!
admöComm™d
)

488 
	`ÊagTønß˘i⁄
(
c
);

489 
	`addRïly
(
c
,
sh¨ed
.
nﬂuthîr
);

490  
VR_OK
;

493 i‡(
c
->
cmd
->
√edadmö
 && c->
vñ
->
cc
.
admö∑ss
 &&

494 
c
->
authítiˇãd
 < 2 && c->
cmd
->
¥oc
 !
admöComm™d
)

496 
	`ÊagTønß˘i⁄
(
c
);

497 
	`addRïly
(
c
,
sh¨ed
.
nﬂdmöîr
);

498  
VR_OK
;

507 
maxmem‹y
 = 
c
->
vñ
->
cc
.maxmemory;

508 i‡(
maxmem‹y
) {

509 
ªtvÆ
 = 
	`‰ìMem‹yIfNìded
(
c
->
vñ
);

512 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =
NULL
Ë 
VR_ERROR
;

516 i‡((
c
->
cmd
->
Êags
 & 
CMD_DENYOOM
Ë&& 
ªtvÆ
 =
VR_ERROR
) {

517 
	`ÊagTønß˘i⁄
(
c
);

518 
	`addRïly
(
c
, 
sh¨ed
.
oomîr
);

519  
VR_OK
;

525 i‡(((
£rvî
.
°›_wrôes_⁄_bgßve_îr
 &&

526 
£rvî
.
ßvï¨am¶í
 > 0 &&

527 
£rvî
.
œ°bgßve_°©us
 =
VR_ERROR
) ||

528 
£rvî
.
aof_œ°_wrôe_°©us
 =
VR_ERROR
) &&

529 
ª∂
.
ma°îho°
 =
NULL
 &&

530 (
c
->
cmd
->
Êags
 & 
CMD_WRITE
 ||

531 
c
->
cmd
->
¥oc
 =
pögComm™d
))

533 
	`ÊagTønß˘i⁄
(
c
);

534 i‡(
£rvî
.
aof_œ°_wrôe_°©us
 =
VR_OK
)

535 
	`addRïly
(
c
, 
sh¨ed
.
bgßvìº
);

537 
	`addRïlySds
(
c
,

538 
	`sdsˇçrötf
(
	`sd£m±y
(),

540 
	`°ªº‹
(
£rvî
.
aof_œ°_wrôe_î∫o
)));

541  
VR_OK
;

546 i‡(
ª∂
.
ma°îho°
 =
NULL
 &&

547 
ª∂
.
ª∂_mö_¶aves_to_wrôe
 &&

548 
ª∂
.
ª∂_mö_¶aves_max_œg
 &&

549 
c
->
cmd
->
Êags
 & 
CMD_WRITE
 &&

550 
ª∂
.
ª∂_good_¶aves_cou¡
 <Ñïl.
ª∂_mö_¶aves_to_wrôe
)

552 
	`ÊagTønß˘i⁄
(
c
);

553 
	`addRïly
(
c
, 
sh¨ed
.
n‹ïliˇ£º
);

554  
VR_OK
;

559 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ª∂_¶ave_ro
 &&

560 !(
c
->
Êags
 & 
CLIENT_MASTER
) &&

561 
c
->
cmd
->
Êags
 & 
CMD_WRITE
)

563 
	`addRïly
(
c
, 
sh¨ed
.
ro¶avìº
);

564  
VR_OK
;

568 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
 &&

569 
c
->
cmd
->
¥oc
 !
pögComm™d
 &&

570 
c
->
cmd
->
¥oc
 !
subs¸ibeComm™d
 &&

571 
c
->
cmd
->
¥oc
 !
unsubs¸ibeComm™d
 &&

572 
c
->
cmd
->
¥oc
 !
psubs¸ibeComm™d
 &&

573 
c
->
cmd
->
¥oc
 !
punsubs¸ibeComm™d
) {

574 
	`addRïlyEº‹
(
c
,"only (P)SUBSCRIBE / (P)UNSUBSCRIBE / PING / QUITállowed inÅhis context");

575  
VR_OK
;

580 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ª∂_°©e
 !
REPL_STATE_CONNECTED
 &&

581 
ª∂
.
ª∂_£rve_°Æe_d©a
 == 0 &&

582 !(
c
->
cmd
->
Êags
 & 
CMD_STALE
))

584 
	`ÊagTønß˘i⁄
(
c
);

585 
	`addRïly
(
c
, 
sh¨ed
.
ma°îdow√º
);

586  
VR_OK
;

591 i‡(
£rvî
.
lﬂdög
 && !(
c
->
cmd
->
Êags
 & 
CMD_LOADING
)) {

592 
	`addRïly
(
c
, 
sh¨ed
.
lﬂdögîr
);

593  
VR_OK
;

597 i‡(
£rvî
.
lua_timedout
 &&

598 
c
->
cmd
->
¥oc
 !
authComm™d
 &&

599 
c
->
cmd
->
¥oc
 !
ª∂c⁄fComm™d
 &&

600 !(
c
->
cmd
->
¥oc
 =
shutdownComm™d
 &&

601 
c
->
¨gc
 == 2 &&

602 
	`tﬁowî
(((*)
c
->
¨gv
[1]->
±r
)[0]) == 'n') &&

603 !(
c
->
cmd
->
¥oc
 =
s¸ùtComm™d
 &&

604 
c
->
¨gc
 == 2 &&

605 
	`tﬁowî
(((*)
c
->
¨gv
[1]->
±r
)[0]) == 'k'))

607 
	`ÊagTønß˘i⁄
(
c
);

608 
	`addRïly
(
c
, 
sh¨ed
.
¶ows¸ùãº
);

609  
VR_OK
;

613 i‡(
c
->
Êags
 & 
CLIENT_MULTI
 &&

614 
c
->
cmd
->
¥oc
 !
execComm™d
 && c->cmd->¥o¯!
disˇrdComm™d
 &&

615 
c
->
cmd
->
¥oc
 !
mu…iComm™d
 && c->cmd->¥o¯!
w©chComm™d
)

617 
	`queueMu…iComm™d
(
c
);

618 
	`addRïly
(
c
,
sh¨ed
.
queued
);

620 
	`ˇŒ
(
c
,
CMD_CALL_FULL
);

621 
c
->
woff
 = 
ª∂
.
ma°î_ª∂_off£t
;

622 i‡(
	`dli°Lígth
(
£rvî
.
ªady_keys
))

623 
	`h™dÀClõ¡sBlockedOnLi°s
();

626  
VR_OK
;

627 
	}
}

632 
	$ªdisOpAºayInô
(
ªdisOpAºay
 *
ﬂ
) {

633 
ﬂ
->
›s
 = 
NULL
;

634 
ﬂ
->
num›s
 = 0;

635 
	}
}

638 
	$ªdisOpAºayAµíd
(
ªdisOpAºay
 *
ﬂ
, 
ªdisComm™d
 *
cmd
, 
dbid
,

639 
robj
 **
¨gv
, 
¨gc
, 
èrgë
)

641 
ªdisOp
 *
›
;

643 
ﬂ
->
›s
 = 
	`dªÆloc
(ﬂ->›s,(
ªdisOp
)*((
size_t
)ﬂ->
num›s
+1));

644 
›
 = 
ﬂ
->
›s
+ﬂ->
num›s
;

645 
›
->
cmd
 = cmd;

646 
›
->
dbid
 = dbid;

647 
›
->
¨gv
 =árgv;

648 
›
->
¨gc
 =árgc;

649 
›
->
èrgë
 =Åarget;

650 
ﬂ
->
num›s
++;

651  
ﬂ
->
num›s
;

652 
	}
}

655 
	$ªdisOpAºayFªe
(
ªdisOpAºay
 *
ﬂ
) {

656 
ﬂ
->
num›s
) {

657 
j
;

658 
ªdisOp
 *
›
;

660 
ﬂ
->
num›s
--;

661 
›
 = 
ﬂ
->
›s
+ﬂ->
num›s
;

662 
j
 = 0; j < 
›
->
¨gc
; j++)

663 
	`de¸RefCou¡
(
›
->
¨gv
[
j
]);

664 
	`d‰ì
(
›
->
¨gv
);

666 
	`d‰ì
(
ﬂ
->
›s
);

667 
	}
}

681 
	$¥›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
,

682 
Êags
)

684 i‡(
£rvî
.
aof_°©e
 !
AOF_OFF
 && 
Êags
 & 
PROPAGATE_AOF
)

685 
	`„edAµídO∆yFûe
(
cmd
,
dbid
,
¨gv
,
¨gc
);

686 i‡(
Êags
 & 
PROPAGATE_REPL
)

687 
	`ª∂iˇti⁄FìdSœves
(
ª∂
.
¶aves
,
dbid
,
¨gv
,
¨gc
);

688 
	}
}

702 
	$ÆsoPr›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
,

703 
èrgë
)

705 
robj
 **
¨gvc›y
;

706 
j
;

708 i‡(
£rvî
.
lﬂdög
) ;

710 
¨gvc›y
 = 
	`dÆloc
((
robj
*)*(
size_t
)
¨gc
);

711 
j
 = 0; j < 
¨gc
; j++) {

712 
¨gvc›y
[
j
] = 
	`dupSåögObje˘Unc⁄°™t
(
¨gv
[j]);

714 
	`ªdisOpAºayAµíd
(&
£rvî
.
Æso_¥›ag©e
,
cmd
,
dbid
,
¨gvc›y
,
¨gc
,
èrgë
);

715 
	}
}

720 
	$f‹˚Comm™dPr›ag©i⁄
(
˛õ¡
 *
c
, 
Êags
) {

721 i‡(
Êags
 & 
PROPAGATE_REPL
Ë
c
->Êag†|
CLIENT_FORCE_REPL
;

722 i‡(
Êags
 & 
PROPAGATE_AOF
Ë
c
->Êag†|
CLIENT_FORCE_AOF
;

723 
	}
}

728 
	$¥evítComm™dPr›ag©i⁄
(
˛õ¡
 *
c
) {

729 
c
->
Êags
 |
CLIENT_PREVENT_PROP
;

730 
	}
}

733 
	$¥evítComm™dAOF
(
˛õ¡
 *
c
) {

734 
c
->
Êags
 |
CLIENT_PREVENT_AOF_PROP
;

735 
	}
}

738 
	$¥evítComm™dRïliˇti⁄
(
˛õ¡
 *
c
) {

739 
c
->
Êags
 |
CLIENT_PREVENT_REPL_PROP
;

740 
	}
}

744 
	$addRïlyComm™dFœg
(
˛õ¡
 *
c
, 
ªdisComm™d
 *
cmd
, 
f
, *
ª∂y
) {

745 i‡(
cmd
->
Êags
 & 
f
) {

746 
	`addRïlySètus
(
c
, 
ª∂y
);

750 
	}
}

754 
	$addRïlyComm™d
(
˛õ¡
 *
c
, 
ªdisComm™d
 *
cmd
) {

755 i‡(!
cmd
) {

756 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

759 
	`addRïlyMu…iBulkLí
(
c
, 6);

760 
	`addRïlyBulkCSåög
(
c
, 
cmd
->
«me
);

761 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
¨ôy
);

763 
Êagcou¡
 = 0;

764 *
ÊagÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

765 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_WRITE
, "write");

766 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_READONLY
, "readonly");

767 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_DENYOOM
, "denyoom");

768 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_ADMIN
, "admin");

769 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_PUBSUB
, "pubsub");

770 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_NOSCRIPT
, "noscript");

771 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_RANDOM
, "random");

772 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_SORT_FOR_SCRIPT
,"sort_for_script");

773 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_LOADING
, "loading");

774 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_STALE
, "stale");

775 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_SKIP_MONITOR
, "skip_monitor");

776 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_ASKING
, "asking");

777 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_FAST
, "fast");

778 i‡(
cmd
->
gëkeys_¥oc
) {

779 
	`addRïlySètus
(
c
, "movablekeys");

780 
Êagcou¡
 += 1;

782 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ÊagÀn
, 
Êagcou¡
);

784 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
fú°key
);

785 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
œ°key
);

786 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
key°ï
);

788 
	}
}

792 
	$comm™dComm™d
(
˛õ¡
 *
c
) {

793 i‡(
c
->
¨gc
 == 1) {

794 
di˘Iãøt‹
 *
di
;

795 
di˘E¡ry
 *
de
;

797 
	`addRïlyMu…iBulkLí
(
c
, 
	`di˘Size
(
£rvî
.
comm™ds
));

798 
di
 = 
	`di˘GëIãøt‹
(
£rvî
.
comm™ds
);

799 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

800 
	`addRïlyComm™d
(
c
, 
	`di˘GëVÆ
(
de
));

802 
	`di˘Rñó£Iãøt‹
(
di
);

803 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "info")) {

804 
i
;

805 
	`addRïlyMu…iBulkLí
(
c
, c->
¨gc
-2);

806 
i
 = 2; i < 
c
->
¨gc
; i++) {

807 
	`addRïlyComm™d
(
c
, 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, c->
¨gv
[
i
]->
±r
));

809 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "cou¡"Ë&& c->
¨gc
 == 2) {

810 
	`addRïlyL⁄gL⁄g
(
c
, 
	`di˘Size
(
£rvî
.
comm™ds
));

811 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"gëkeys"Ë&& c->
¨gc
 >= 3) {

812 
ªdisComm™d
 *
cmd
 = 
	`lookupComm™d
(
c
->
¨gv
[2]->
±r
);

813 *
keys
, 
numkeys
, 
j
;

815 i‡(!
cmd
) {

816 
	`addRïlyEº‹F‹m©
(
c
,"Invalid command specified");

818 } i‡((
cmd
->
¨ôy
 > 0 && cmd->¨ôy !
c
->
¨gc
-2) ||

819 ((
c
->
¨gc
-2Ë< -
cmd
->
¨ôy
))

821 
	`addRïlyEº‹
(
c
,"InvalidÇumber ofárguments specified for command");

825 
keys
 = 
	`gëKeysFromComm™d
(
cmd
,
c
->
¨gv
+2,c->
¨gc
-2,&
numkeys
);

826 
	`addRïlyMu…iBulkLí
(
c
,
numkeys
);

827 
j
 = 0; j < 
numkeys
; j++Ë
	`addRïlyBulk
(
c
,c->
¨gv
[
keys
[j]+2]);

828 
	`gëKeysFªeResu…
(
keys
);

829 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "°©s"Ë&& c->
¨gc
 == 2) {

830 
j
;

831 
d¨øy
 *
c°abÀÆl
;

832 
¨øy
 *
c°abÀ
 = 
c
->
vñ
->cstable;

833 
comm™dSèts
 *
c°©s
, *
c°©ßŒ
;

835 i‡(
c
->
°ïs
 == 0) {

836 
c°abÀÆl
 = 
	`comm™dSètsTabÀCª©e
();

837 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

838 
c
->
Êags
 |
CLIENT_JUMP
;

839 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

840 
c
->
ˇche
 = 
c°abÀÆl
;

842 
c°abÀÆl
 = 
c
->
ˇche
;

843 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

846 
j
 = 0; j < 
	`d¨øy_n
(
c°abÀ
); j ++) {

847 
c°©s
 = 
	`d¨øy_gë
(
c°abÀ
, 
j
);

848 i‡(!
c°©s
->
ˇŒs
) ;

850 
c°©ßŒ
 = 
	`d¨øy_gë
(
c°abÀÆl
, 
j
);

851 
c°©ßŒ
->
mi¸o£c⁄ds
 +
c°©s
->microseconds;

852 
c°©ßŒ
->
ˇŒs
 +
c°©s
->calls;

855 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

856 
sds
 
comm™d_°©s_öfo
;

857 *
ª∂yÀn_node
;

858 
ª∂yÀn
 = 0;

860 
c
->
°ïs
 = 0;

861 
c
->
èridx
 = -1;

862 
c
->
ˇche
 = 
NULL
;

863 
c
->
Êags
 &~
CLIENT_JUMP
;

865 
ª∂yÀn_node
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

866 
j
 = 0; j < 
	`d¨øy_n
(
c°abÀÆl
); j ++) {

867 
c°©ßŒ
 = 
	`d¨øy_gë
(
c°abÀÆl
, 
j
);

868 i‡(!
c°©ßŒ
->
ˇŒs
) ;

870 
comm™d_°©s_öfo
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),

872 
c°©ßŒ
->
«me
, c°©ßŒ->
ˇŒs
, c°©ßŒ->
mi¸o£c⁄ds
,

873 ()
c°©ßŒ
->
mi¸o£c⁄ds
/c°©ßŒ->
ˇŒs
);

874 
	`addRïlyBulkSds
(
c
,
comm™d_°©s_öfo
);

875 
ª∂yÀn
 ++;

878 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn_node
,
ª∂yÀn
);

880 
	`comm™dSètsTabÀDe°roy
(
c°abÀÆl
);

883 
	`addRïlyEº‹
(
c
, "Unknown subcommand or wrongÇumber ofárguments.");

886 
	}
}

889 
d¨øy
 *

890 
	$comm™dSètsTabÀCª©e
()

892 
j
;

893 
comm™dSèts
 *
c°©s
;

894 
d¨øy
 *
c°©°abÀ
;

895 
numcomm™ds
 = (
ªdisComm™dTabÀ
)/(
ªdisComm™d
);

898 
c°©°abÀ
 = 
	`d¨øy_¸óã
(
numcomm™ds
,(
comm™dSèts
));

899 i‡(
c°©°abÀ
 =
NULL
)  NULL;

900 
j
 = 0; j < 
numcomm™ds
; j ++) {

901 
ªdisComm™d
 *
c
 = 
ªdisComm™dTabÀ
+
j
;

902 
c°©s
 = 
	`d¨øy_push
(
c°©°abÀ
);

903 
c°©s
->
«me
 = 
c
->name;

904 
c°©s
->
mi¸o£c⁄ds
 = 0;

905 
c°©s
->
ˇŒs
 = 0;

906 
	`ASSERT
(
j
 =
c
->
idx
);

909  
c°©°abÀ
;

910 
	}
}

913 
	$comm™dSètsTabÀDe°roy
(
d¨øy
 *
c°©°abÀ
)

915 
c°©°abÀ
->
√Àm
 = 0;

916 
	`d¨øy_de°roy
(
c°©°abÀ
);

917 
	}
}

	@src/vr_command.h

1 #i‚de‡
_VR_COMMAND_H_


2 
	#_VR_COMMAND_H_


	)

8 
	#CMD_WRITE
 1

	)

9 
	#CMD_READONLY
 2

	)

10 
	#CMD_DENYOOM
 4

	)

11 
	#CMD_NOT_USED_1
 8

	)

12 
	#CMD_ADMIN
 16

	)

13 
	#CMD_PUBSUB
 32

	)

14 
	#CMD_NOSCRIPT
 64

	)

15 
	#CMD_RANDOM
 128

	)

16 
	#CMD_SORT_FOR_SCRIPT
 256

	)

17 
	#CMD_LOADING
 512

	)

18 
	#CMD_STALE
 1024

	)

19 
	#CMD_SKIP_MONITOR
 2048

	)

20 
	#CMD_ASKING
 4096

	)

21 
	#CMD_FAST
 8192

	)

25 
	#CMD_CALL_NONE
 0

	)

26 
	#CMD_CALL_SLOWLOG
 (1<<0)

	)

27 
	#CMD_CALL_STATS
 (1<<1)

	)

28 
	#CMD_CALL_PROPAGATE_AOF
 (1<<2)

	)

29 
	#CMD_CALL_PROPAGATE_REPL
 (1<<3)

	)

30 
	#CMD_CALL_PROPAGATE
 (
CMD_CALL_PROPAGATE_AOF
|
CMD_CALL_PROPAGATE_REPL
)

	)

31 
	#CMD_CALL_FULL
 (
CMD_CALL_SLOWLOG
 | 
CMD_CALL_STATS
 | 
CMD_CALL_PROPAGATE
)

	)

35 
	#PROPAGATE_NONE
 0

	)

36 
	#PROPAGATE_AOF
 1

	)

37 
	#PROPAGATE_REPL
 2

	)

41 
	#SHUTDOWN_NOFLAGS
 0

	)

42 
	#SHUTDOWN_SAVE
 1

	)

44 
	#SHUTDOWN_NOSAVE
 2

	)

47 
	tªdisComm™dProc
(
	t˛õ¡
 *
	tc
);

48 *
	tªdisGëKeysProc
(
	tªdisComm™d
 *
	tcmd
, 
	trobj
 **
	t¨gv
, 
	t¨gc
, *
	tnumkeys
);

50 
	sªdisComm™d
 {

52 *
	m«me
;

54 
ªdisComm™dProc
 *
	m¥oc
;

56 
	m¨ôy
;

58 *
	msÊags
;

60 
	mÊags
;

64 
ªdisGëKeysProc
 *
	mgëkeys_¥oc
;

67 
	mfú°key
;

69 
	mœ°key
;

71 
	mkey°ï
;

72 
	midx
;

74 
	m√edadmö
;

78 
	scomm™dSèts
 {

80 *
	m«me
;

82 
	mmi¸o£c⁄ds
;

84 
	mˇŒs
;

85 }
	tcomm™dSèts
;

94 
	sªdisOp
 {

96 
robj
 **
	m¨gv
;

98 
	m¨gc
, 
	mdbid
, 
	mèrgë
;

100 
ªdisComm™d
 *
	mcmd
;

101 } 
	tªdisOp
;

111 
	sªdisOpAºay
 {

112 
ªdisOp
 *
	m›s
;

114 
	mnum›s
;

115 } 
	tªdisOpAºay
;

118 
di˘Ty≥
 
comm™dTabÀDi˘Ty≥
;

121 
p›uœãComm™dTabÀ
();

123 
p›uœãComm™dsNìdAdmö∑ss
();

126 
ªdisComm™d
 *
lookupComm™d
(
sds
 
«me
);

128 
ªdisComm™d
 *
lookupComm™dOrOrigöÆ
(
sds
 
«me
);

130 
ªdisComm™d
 *
lookupComm™dByCSåög
(*
s
);

133 
ˇŒ
(
˛õ¡
 *
c
, 
Êags
);

135 
¥o˚ssComm™d
(
˛õ¡
 *
c
);

138 
ªdisOpAºayInô
(
ªdisOpAºay
 *
ﬂ
);

139 
ªdisOpAºayAµíd
(
ªdisOpAºay
 *
ﬂ
, 
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
èrgë
);

140 
ªdisOpAºayFªe
(
ªdisOpAºay
 *
ﬂ
);

142 
¥›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
Êags
);

143 
ÆsoPr›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
èrgë
);

144 
f‹˚Comm™dPr›ag©i⁄
(
˛õ¡
 *
c
, 
Êags
);

145 
¥evítComm™dPr›ag©i⁄
(
˛õ¡
 *
c
);

146 
¥evítComm™dAOF
(
˛õ¡
 *
c
);

147 
¥evítComm™dRïliˇti⁄
(
˛õ¡
 *
c
);

149 
comm™dComm™d
(
˛õ¡
 *
c
);

151 
d¨øy
 *
comm™dSètsTabÀCª©e
();

152 
comm™dSètsTabÀDe°roy
(
d¨øy
 *
c°©°abÀ
);

	@src/vr_command.h

1 #i‚de‡
_VR_COMMAND_H_


2 
	#_VR_COMMAND_H_


	)

8 
	#CMD_WRITE
 1

	)

9 
	#CMD_READONLY
 2

	)

10 
	#CMD_DENYOOM
 4

	)

11 
	#CMD_NOT_USED_1
 8

	)

12 
	#CMD_ADMIN
 16

	)

13 
	#CMD_PUBSUB
 32

	)

14 
	#CMD_NOSCRIPT
 64

	)

15 
	#CMD_RANDOM
 128

	)

16 
	#CMD_SORT_FOR_SCRIPT
 256

	)

17 
	#CMD_LOADING
 512

	)

18 
	#CMD_STALE
 1024

	)

19 
	#CMD_SKIP_MONITOR
 2048

	)

20 
	#CMD_ASKING
 4096

	)

21 
	#CMD_FAST
 8192

	)

25 
	#CMD_CALL_NONE
 0

	)

26 
	#CMD_CALL_SLOWLOG
 (1<<0)

	)

27 
	#CMD_CALL_STATS
 (1<<1)

	)

28 
	#CMD_CALL_PROPAGATE_AOF
 (1<<2)

	)

29 
	#CMD_CALL_PROPAGATE_REPL
 (1<<3)

	)

30 
	#CMD_CALL_PROPAGATE
 (
CMD_CALL_PROPAGATE_AOF
|
CMD_CALL_PROPAGATE_REPL
)

	)

31 
	#CMD_CALL_FULL
 (
CMD_CALL_SLOWLOG
 | 
CMD_CALL_STATS
 | 
CMD_CALL_PROPAGATE
)

	)

35 
	#PROPAGATE_NONE
 0

	)

36 
	#PROPAGATE_AOF
 1

	)

37 
	#PROPAGATE_REPL
 2

	)

41 
	#SHUTDOWN_NOFLAGS
 0

	)

42 
	#SHUTDOWN_SAVE
 1

	)

44 
	#SHUTDOWN_NOSAVE
 2

	)

47 
	tªdisComm™dProc
(
	t˛õ¡
 *
	tc
);

48 *
	tªdisGëKeysProc
(
	tªdisComm™d
 *
	tcmd
, 
	trobj
 **
	t¨gv
, 
	t¨gc
, *
	tnumkeys
);

50 
	sªdisComm™d
 {

52 *
	m«me
;

54 
ªdisComm™dProc
 *
	m¥oc
;

56 
	m¨ôy
;

58 *
	msÊags
;

60 
	mÊags
;

64 
ªdisGëKeysProc
 *
	mgëkeys_¥oc
;

67 
	mfú°key
;

69 
	mœ°key
;

71 
	mkey°ï
;

72 
	midx
;

74 
	m√edadmö
;

78 
	scomm™dSèts
 {

80 *
	m«me
;

82 
	mmi¸o£c⁄ds
;

84 
	mˇŒs
;

85 }
	tcomm™dSèts
;

94 
	sªdisOp
 {

96 
robj
 **
	m¨gv
;

98 
	m¨gc
, 
	mdbid
, 
	mèrgë
;

100 
ªdisComm™d
 *
	mcmd
;

101 } 
	tªdisOp
;

111 
	sªdisOpAºay
 {

112 
ªdisOp
 *
	m›s
;

114 
	mnum›s
;

115 } 
	tªdisOpAºay
;

118 
di˘Ty≥
 
comm™dTabÀDi˘Ty≥
;

121 
p›uœãComm™dTabÀ
();

123 
p›uœãComm™dsNìdAdmö∑ss
();

126 
ªdisComm™d
 *
lookupComm™d
(
sds
 
«me
);

128 
ªdisComm™d
 *
lookupComm™dOrOrigöÆ
(
sds
 
«me
);

130 
ªdisComm™d
 *
lookupComm™dByCSåög
(*
s
);

133 
ˇŒ
(
˛õ¡
 *
c
, 
Êags
);

135 
¥o˚ssComm™d
(
˛õ¡
 *
c
);

138 
ªdisOpAºayInô
(
ªdisOpAºay
 *
ﬂ
);

139 
ªdisOpAºayAµíd
(
ªdisOpAºay
 *
ﬂ
, 
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
èrgë
);

140 
ªdisOpAºayFªe
(
ªdisOpAºay
 *
ﬂ
);

142 
¥›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
Êags
);

143 
ÆsoPr›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
èrgë
);

144 
f‹˚Comm™dPr›ag©i⁄
(
˛õ¡
 *
c
, 
Êags
);

145 
¥evítComm™dPr›ag©i⁄
(
˛õ¡
 *
c
);

146 
¥evítComm™dAOF
(
˛õ¡
 *
c
);

147 
¥evítComm™dRïliˇti⁄
(
˛õ¡
 *
c
);

149 
comm™dComm™d
(
˛õ¡
 *
c
);

151 
d¨øy
 *
comm™dSètsTabÀCª©e
();

152 
comm™dSètsTabÀDe°roy
(
d¨øy
 *
c°©°abÀ
);

	@src/vr_conf.c

1 
	~<f˙é.h
>

3 
	~<vr_c‹e.h
>

5 c⁄° *(*
	tc⁄figEnumGëSåFun
)(
	tty≥
);

7 
	#CONF_TOKEN_ORGANIZATION_START
 "["

	)

8 
	#CONF_TOKEN_ORGANIZATION_END
 "]"

	)

9 
	#CONF_TOKEN_KEY_VALUE_BETWEEN
 ":"

	)

10 
	#CONF_TOKEN_ARRAY_START
 "-"

	)

12 
	#CONF_ORGANIZATION_NAME_COMMAN
 "comm⁄"

	)

13 
	#CONF_ORGANIZATION_NAME_SERVER
 "£rvî"

	)

15 
	#CONF_VALUE_YES
 "yes"

	)

16 
	#CONF_VALUE_NO
 "no"

	)

18 
	#CONF_MAX_LINE
 1024

	)

20 
	#CONF_TAG_DEFAULT_TYPE
 
GROUP_TYPE_SINGLE


	)

21 
	#CONF_TAG_DEFAULT_HASH
 
HASH_FNV1_64


	)

22 
	#CONF_TAG_DEFAULT_HASH_TAG
 
NULL


	)

23 
	#CONF_TAG_DEFAULT_DISTRIBUTION
 "këama"

	)

24 
	#CONF_TAG_DEFAULT_REDIS_AUTH
 
NULL


	)

25 
	#CONF_TAG_DEFAULT_REDIS_DB
 0

	)

26 
	#CONF_TAG_DEFAULT_TIMEOUT
 300

	)

27 
	#CONF_TAG_DEFAULT_SERVERS
 "127.0.0.1:6379"

	)

28 
	#CONF_TAG_DEFAULT_LISTEN
 "127.0.0.1:6380"

	)

29 
	#CONF_TAG_DEFAULT_MAXMEMORY
 1073741824

30 
	#CONF_TAG_DEFAULT_THREADS
 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)

	)

31 
	#CONF_TAG_DEFAULT_NOREPLY
 "Ál£"

	)

32 
	#CONF_TAG_DEFAULT_RDB_DISKLESS
 "Ál£"

	)

34 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë(*)(#_«me),

	)

35 * 
	ghash_°rögs
[] = {

36 
HASH_CODEC
–
DEFINE_ACTION
 )

37 
NULL


39 #unde‡
DEFINE_ACTION


41 
	#DEFINE_ACTION
(
_di°
, 
_«me
Ë(*)(#_«me),

	)

42 * 
	gdi°_°rögs
[] = {

43 
DIST_CODEC
–
DEFINE_ACTION
 )

44 
NULL


46 #unde‡
DEFINE_ACTION


48 
	#DEFINE_ACTION
(
_pﬁicy
, 
_«me
Ë(*)(#_«me),

	)

50 * 
	gevi˘pﬁicy_°rögs
[] = {

51 
EVICTPOLICY_CODEC
–
DEFINE_ACTION
 )

52 
NULL


54 #unde‡
DEFINE_ACTION


56 
c⁄f_›ti⁄
 
	gc⁄f_£rvî_›ti⁄s
[] = {

57 { (*)
CONFIG_SOPN_DATABASES
,

58 
CONF_FIELD_TYPE_INT
, 1,

59 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

60 
off£tof
(
c⁄f_£rvî
, 
d©aba£s
) },

61 { (*)
CONFIG_SOPN_IDPDATABASE
,

62 
CONF_FIELD_TYPE_INT
, 1,

63 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

64 
off£tof
(
c⁄f_£rvî
, 
öã∫Æ_dbs_≥r_d©aba£s
) },

65 { (*)
CONFIG_SOPN_MAXMEMORY
,

66 
CONF_FIELD_TYPE_LONGLONG
, 0,

67 
c⁄f_£t_maxmem‹y
, 
c⁄f_gë_l⁄gl⁄g
,

68 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y
) },

69 { (*)
CONFIG_SOPN_MAXMEMORYP
,

70 
CONF_FIELD_TYPE_INT
, 0,

71 
c⁄f_£t_maxmem‹y_pﬁicy
, 
c⁄f_gë_öt
,

72 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y_pﬁicy
) },

73 { (*)
CONFIG_SOPN_MAXMEMORYS
,

74 
CONF_FIELD_TYPE_INT
, 0,

75 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

76 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y_ßm∂es
) },

77 { (*)
CONFIG_SOPN_MTCLIMIT
,

78 
CONF_FIELD_TYPE_LONGLONG
, 0,

79 
c⁄f_£t_l⁄gl⁄g
, 
c⁄f_gë_l⁄gl⁄g
,

80 
off£tof
(
c⁄f_£rvî
, 
max_time_com∂exôy_limô
) },

81 { (*)
CONFIG_SOPN_BIND
,

82 
CONF_FIELD_TYPE_ARRAYSDS
, 1,

83 
c⁄f_£t_¨øy_sds
, 
c⁄f_gë_¨øy_sds
,

84 
off£tof
(
c⁄f_£rvî
, 
böds
) },

85 { (*)
CONFIG_SOPN_PORT
,

86 
CONF_FIELD_TYPE_INT
, 1,

87 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

88 
off£tof
(
c⁄f_£rvî
, 
p‹t
) },

89 { (*)
CONFIG_SOPN_THREADS
,

90 
CONF_FIELD_TYPE_INT
, 1,

91 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

92 
off£tof
(
c⁄f_£rvî
, 
thªads
) },

93 { (*)
CONFIG_SOPN_MAXCLIENTS
,

94 
CONF_FIELD_TYPE_INT
, 0,

95 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

96 
off£tof
(
c⁄f_£rvî
, 
max˛õ¡s
) },

97 { (*)
CONFIG_SOPN_SLOWLOGLST
,

98 
CONF_FIELD_TYPE_LONGLONG
, 0,

99 
c⁄f_£t_l⁄gl⁄g
, 
c⁄f_gë_l⁄gl⁄g
,

100 
off£tof
(
c⁄f_£rvî
, 
¶owlog_log_¶owî_th™
) },

101 { (*)
CONFIG_SOPN_SLOWLOGML
,

102 
CONF_FIELD_TYPE_INT
, 0,

103 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

104 
off£tof
(
c⁄f_£rvî
, 
¶owlog_max_Àn
) },

105 { (*)
CONFIG_SOPN_REQUIREPASS
,

106 
CONF_FIELD_TYPE_SDS
, 0,

107 
c⁄f_£t_∑ssw‹d
, 
c⁄f_gë_sds
,

108 
off£tof
(
c⁄f_£rvî
, 
ªquúïass
) },

109 { (*)
CONFIG_SOPN_ADMINPASS
,

110 
CONF_FIELD_TYPE_SDS
, 0,

111 
c⁄f_£t_∑ssw‹d
, 
c⁄f_gë_sds
,

112 
off£tof
(
c⁄f_£rvî
, 
admö∑ss
) },

113 { (*)
CONFIG_SOPN_COMMANDSNAP
,

114 
CONF_FIELD_TYPE_ARRAYSDS
, 1,

115 
c⁄f_£t_comm™ds_√ed_admö∑ss
, 
c⁄f_gë_¨øy_sds
,

116 
off£tof
(
c⁄f_£rvî
, 
comm™ds_√ed_admö∑ss
) },

117 { 
NULL
, NULL, 0 }

120 
vr_c⁄f
 *
	gc⁄f
 = 
NULL
;

121 
c⁄f_£rvî
 *
	gc£rvî
 = 
NULL
;

124 
	$c⁄f_vÆue_dump
(
c⁄f_vÆue
 *
cv
, 
log_Àvñ
)

126 
uöt32_t
 
i
;

127 
c⁄f_vÆue
 **
cv_sub
;

129 if(
cv
 =
NULL
){

133 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

134 
	`log_debug
(
log_Àvñ
, "%.*s", 
	`sd¶í
(
cv
->
vÆue
), cv->value);

135 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

136 
i
 = 0; i < 
	`d¨øy_n
(
cv
->
vÆue
); i++){

137 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
i
);

138 
	`c⁄f_vÆue_dump
(*
cv_sub
, 
log_Àvñ
);

141 
	`NOT_REACHED
();

143 
	}
}

147 
	$c⁄f_‹g™iz©i⁄_dump
(
sds
 
«me
, 
di˘
 *
‹g
, 
log_Àvñ
)

149 
di˘Iãøt‹
 *
di
;

150 
di˘E¡ry
 *
de
;

151 
sds
 
key
;

152 
c⁄f_vÆue
 *
cv
;

154 if(
«me
 =
NULL
 || 
‹g
 == NULL){

158 
	`log_debug
(
log_Àvñ
, "[%.*s]", 
	`sd¶í
(
«me
),Çame);

160 
di
 = 
	`di˘GëIãøt‹
(
‹g
);

162 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
){

163 
key
 = 
	`di˘GëKey
(
de
);

164 
cv
 = 
	`di˘GëVÆ
(
de
);

166 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

167 
	`log_debug
(
log_Àvñ
, "%.*s: %.*s",

168 
	`sd¶í
(
key
), key,

169 
	`sd¶í
(
cv
->
vÆue
), cv->value);

170 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

171 
	`log_debug
(
log_Àvñ
, "%.*s:",
	`sd¶í
(
key
), key);

172 
	`c⁄f_vÆue_dump
(
cv
, 
log_Àvñ
);

174 
	`NOT_REACHED
();

178 
	`di˘Rñó£Iãøt‹
(
di
);

179 
	}
}

182 
	$c⁄f_‹g™iz©i⁄s_dump
(
vr_c⁄f
 *
cf
)

184 
di˘
 *
‹gs
, *
‹g
;

185 
di˘Iãøt‹
 *
di
;

186 
di˘E¡ry
 *
de
;

187 
sds
 
«me
;

188 
log_Àvñ
 = 
LOG_VERB
;

190 if(
cf
 =
NULL
){

194 
‹gs
 = 
cf
->
‹g™iz©i⁄s
;

195 if(
‹gs
 =
NULL
){

196 
	`log_debug
(
log_Àvñ
, "organization is NULL");

200 
di
 = 
	`di˘GëIãøt‹
(
‹gs
);

202 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
){

203 
«me
 = 
	`di˘GëKey
(
de
);

204 
‹g
 = 
	`di˘GëVÆ
(
de
);

206 
	`c⁄f_‹g™iz©i⁄_dump
(
«me
, 
‹g
, 
log_Àvñ
);

207 
	`log_debug
(
log_Àvñ
, "");

210 
	`di˘Rñó£Iãøt‹
(
di
);

211 
	}
}

215 
	$c⁄f_£t_maxmem‹y
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

217 
uöt8_t
 *
p
;

218 
c⁄f_vÆue
 *
cv
 = 
d©a
;

219 
vÆue
;

220 *
gt
;

221 
îr
;

223 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

224 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

225 
›t
->
«me
);

226  
VR_ERROR
;

229 
	`CONF_WLOCK
();

231 
p
 = 
obj
;

232 
gt
 = (*)(
p
 + 
›t
->
off£t
);

234 
vÆue
 = 
	`memtﬁl
(
cv
->vÆue, &
îr
);

235 if(
îr
 !0 || 
vÆue
 < 0){

236 
	`CONF_UNLOCK
();

237 
	`log_îr‹
("value forÅhe key %s in conf file is invalid",

238 
›t
->
«me
);

239  
VR_ERROR
;

242 *
gt
 = 
vÆue
;

243 
c⁄f
->
vîsi⁄
 ++;

244 
	`CONF_UNLOCK
();

245  
VR_OK
;

246 
	}
}

249 
	$c⁄f_£t_maxmem‹y_pﬁicy
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

251 
uöt8_t
 *
p
;

252 
c⁄f_vÆue
 *
cv
 = 
d©a
;

253 *
gt
;

254 **
pﬁicy
;

256 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

257 
	`log_îr‹
("conf server inÅhe conf file isÇotá string");

258  
VR_ERROR
;

261 
	`CONF_WLOCK
();

263 
p
 = 
obj
;

264 
gt
 = (*)(
p
 + 
›t
->
off£t
);

266 
pﬁicy
 = 
evi˘pﬁicy_°rögs
; *policy;Öolicy ++) {

267 i‡(
	`°rcmp
(
cv
->
vÆue
, *
pﬁicy
) == 0) {

269 *
gt
 = 
pﬁicy
 - 
evi˘pﬁicy_°rögs
;

274 i‡(*
pﬁicy
 =
NULL
) {

275 
	`CONF_UNLOCK
();

276 
	`log_îr‹
("ERROR: Conf maxmemoryÖolicy '%s' is invalid",

277 
cv
->
vÆue
);

278  
VR_ERROR
;

281 i‡(*
gt
 =
MAXMEMORY_VOLATILE_LRU
 || *gà=
MAXMEMORY_ALLKEYS_LRU
) {

282 
	`CONF_UNLOCK
();

283 
	`log_îr‹
("ERROR: Conf maxmemoryÖolicyÇow isÇot support %sánd %s",

284 
evi˘pﬁicy_°rögs
[
MAXMEMORY_VOLATILE_LRU
],

285 
evi˘pﬁicy_°rögs
[
MAXMEMORY_ALLKEYS_LRU
]);

286  
VR_ERROR
;

289 
	`CONF_UNLOCK
();

290  
VR_OK
;

291 
	}
}

294 
	$c⁄f_£t_öt_n⁄_zîo
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

296 
uöt8_t
 *
p
;

297 
c⁄f_vÆue
 *
cv
 = 
d©a
;

298 *
gt
;

300 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

301 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

302 
›t
->
«me
);

303  
VR_ERROR
;

306 
	`CONF_WLOCK
();

309 
p
 = 
obj
;

310 
gt
 = (*)(
p
 + 
›t
->
off£t
);

312 if(!
	`sdsIsNum
(
cv
->
vÆue
)){

313 
	`CONF_UNLOCK
();

314 
	`log_îr‹
("value ofÅhe key %s in conf file isÇotáÇumber",

315 
›t
->
«me
);

316  
VR_ERROR
;

319 *
gt
 = 
	`vr_©oi
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

321 i‡(*
gt
 < 0) {

322 
	`CONF_UNLOCK
();

323 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

324 
›t
->
«me
);

325  
VR_ERROR
;

326 } i‡(*
gt
 < 1) {

327 
	`CONF_UNLOCK
();

328 
	`log_îr‹
("value ofÅhe key %s in conf file must be 1 or greater",

329 
›t
->
«me
);

330  
VR_ERROR
;

332 
c⁄f
->
vîsi⁄
 ++;

333 
	`CONF_UNLOCK
();

334  
VR_OK
;

335 
	}
}

339 
	$c⁄f_gë_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

341 
uöt8_t
 *
p
;

342 
sds
 *
°r
 = 
d©a
;

343 
sds
 *
gt
;

345 i‡(
d©a
 =
NULL
)

346  
VR_ERROR
;

348 
	`CONF_RLOCK
();

349 
p
 = 
obj
;

350 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

351 i‡(*
gt
 =
NULL
Ë*
°r
 = NULL;

352 *
°r
 = 
	`sdsdup
(*
gt
);

353 
	`CONF_UNLOCK
();

354  
VR_OK
;

355 
	}
}

358 
	$c⁄f_£t_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

360 
uöt8_t
 *
p
;

361 
c⁄f_vÆue
 *
cv
 = 
d©a
;

362 
sds
 *
gt
;

364 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

365 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string",

366 
›t
->
«me
);

367  
VR_ERROR
;

370 
	`CONF_WLOCK
();

371 
p
 = 
obj
;

372 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

374 *
gt
 = 
	`sd¢ewÀn
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

375 
c⁄f
->
vîsi⁄
 ++;

376 
	`CONF_UNLOCK
();

377  
VR_OK
;

378 
	}
}

381 
	$c⁄f_£t_∑ssw‹d
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

383 
uöt8_t
 *
p
;

384 
c⁄f_vÆue
 *
cv
 = 
d©a
;

385 
sds
 *
gt
;

387 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

388 
	`log_îr‹
("ConfÖool %s inÅhe conf file isÇotá string",

389 
›t
->
«me
);

390  
VR_ERROR
;

391 } i‡(
	`sd¶í
(
cv
->
vÆue
Ë> 
CONFIG_AUTHPASS_MAX_LEN
) {

392 
	`log_îr‹
("Password isÜongerÅhan CONFIG_AUTHPASS_MAX_LEN");

393  
VR_ERROR
;

396 
	`CONF_WLOCK
();

397 
p
 = 
obj
;

398 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

400 i‡(*
gt
 !
NULL
Ë
	`sds‰ì
(*gt);

401 i‡(
	`sd¶í
(
cv
->
vÆue
Ë=0Ë*
gt
 = 
NULL
;

402 *
gt
 = 
	`sd¢ewÀn
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

403 
c⁄f
->
vîsi⁄
 ++;

404 
	`CONF_UNLOCK
();

405  
VR_OK
;

406 
	}
}

409 
	$c⁄f_gë_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

411 
uöt8_t
 *
p
;

412 *
öãgî
 = 
d©a
;

413 *
gt
;

415 i‡(
d©a
 =
NULL
)

416  
VR_ERROR
;

418 
	`CONF_RLOCK
();

419 
p
 = 
obj
;

420 
gt
 = (*)(
p
 + 
›t
->
off£t
);

421 *
öãgî
 = *
gt
;

422 
	`CONF_UNLOCK
();

423  
VR_OK
;

424 
	}
}

427 
	$c⁄f_£t_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

429 
uöt8_t
 *
p
;

430 
c⁄f_vÆue
 *
cv
 = 
d©a
;

431 *
gt
;

433 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

434 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

435 
›t
->
«me
);

436  
VR_ERROR
;

439 
	`CONF_WLOCK
();

441 
p
 = 
obj
;

442 
gt
 = (*)(
p
 + 
›t
->
off£t
);

444 if(!
	`sdsIsNum
(
cv
->
vÆue
)){

445 
	`CONF_UNLOCK
();

446 
	`log_îr‹
("value ofÅhe key %s in conf file isÇotáÇumber",

447 
›t
->
«me
);

448  
VR_ERROR
;

451 *
gt
 = 
	`vr_©oi
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

453 i‡(*
gt
 < 0) {

454 
	`CONF_UNLOCK
();

455 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

456 
›t
->
«me
);

457  
VR_ERROR
;

459 
c⁄f
->
vîsi⁄
 ++;

460 
	`CONF_UNLOCK
();

461  
VR_OK
;

462 
	}
}

465 
	$c⁄f_gë_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

467 
uöt8_t
 *
p
;

468 *
öãgî
 = 
d©a
;

469 *
gt
;

471 i‡(
d©a
 =
NULL
)

472  
VR_ERROR
;

474 
	`CONF_RLOCK
();

475 
p
 = 
obj
;

476 
gt
 = (*)(
p
 + 
›t
->
off£t
);

477 *
öãgî
 = *
gt
;

478 
	`CONF_UNLOCK
();

479  
VR_OK
;

480 
	}
}

483 
	$c⁄f_£t_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

485 
uöt8_t
 *
p
;

486 
c⁄f_vÆue
 *
cv
 = 
d©a
;

487 *
gt
;

489 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

490 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

491 
›t
->
«me
);

492  
VR_ERROR
;

495 
	`CONF_WLOCK
();

497 
p
 = 
obj
;

498 
gt
 = (*)(
p
 + 
›t
->
off£t
);

500 i‡(!
	`°rög2Œ
(
cv
->
vÆue
, 
	`sd¶í
(cv->vÆue), 
gt
)) {

501 
	`CONF_UNLOCK
();

502 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

503 
›t
->
«me
);

504  
VR_ERROR
;

506 
c⁄f
->
vîsi⁄
 ++;

507 
	`CONF_UNLOCK
();

508  
VR_OK
;

509 
	}
}

512 
	$c⁄f_£t_yes‹no
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

514 
uöt8_t
 *
p
;

515 
c⁄f_vÆue
 *
cv
 = 
d©a
;

516 *
gt
;

518 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

519 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

520 
›t
->
«me
);

521  
VR_ERROR
;

524 
	`CONF_WLOCK
();

526 
p
 = 
obj
;

527 
gt
 = (*)(
p
 + 
›t
->
off£t
);

529 if(!
	`°rˇ£cmp
(
cv
->
vÆue
, 
CONF_VALUE_YES
)){

530 *
gt
 = 1;

531 }if(!
	`°rˇ£cmp
(
cv
->
vÆue
, 
CONF_VALUE_NO
)){

532 *
gt
 = 0;

534 
	`CONF_UNLOCK
();

535 
	`log_îr‹
("key %s in conf file must be %s or %s",

536 
›t
->
«me
, 
CONF_VALUE_YES
, 
CONF_VALUE_NO
);

537  
VR_ERROR
;

539 
c⁄f
->
vîsi⁄
 ++;

540 
	`CONF_UNLOCK
();

541  
VR_OK
;

542 
	}
}

545 
	$c⁄f_£t_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

547 
uöt8_t
 *
p
;

548 
uöt32_t
 
j
;

549 
c⁄f_vÆue
 **
cv_sub
, *
cv
 = 
d©a
;

550 
d¨øy
 *
gt
;

551 
sds
 *
°r
;

553 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
 &&

554 
cv
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
){

555 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string orárray",

556 
›t
->
«me
);

557  
VR_ERROR
;

558 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

559 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

560 i‡((*
cv_sub
)->
ty≥
 !
CONF_VALUE_TYPE_STRING
) {

561 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá stringárray",

562 
›t
->
«me
);

563  
VR_ERROR
;

567 
	`CONF_WLOCK
();

568 
p
 = 
obj
;

569 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

571 
	`d¨øy_n
(
gt
) > 0) {

572 
°r
 = 
	`d¨øy_p›
(
gt
);

573 
	`sds‰ì
(*
°r
);

576 i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
) {

577 
°r
 = 
	`d¨øy_push
(
gt
);

578 *
°r
 = 
	`sdsdup
(
cv
->
vÆue
);

579 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

580 
j
 = 0; j < 
	`d¨øy_n
(
cv
->
vÆue
); j ++) {

581 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

582 
°r
 = 
	`d¨øy_push
(
gt
);

583 *
°r
 = 
	`sdsdup
((*
cv_sub
)->
vÆue
);

586 
c⁄f
->
vîsi⁄
 ++;

587 
	`CONF_UNLOCK
();

588  
VR_OK
;

589 
	}
}

592 
	$c⁄f_£t_comm™ds_√ed_admö∑ss
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

594 
uöt8_t
 *
p
;

595 
uöt32_t
 
j
;

596 
c⁄f_vÆue
 **
cv_sub
, *
cv
 = 
d©a
;

597 
d¨øy
 *
gt
;

598 
sds
 *
°r
;

600 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
 &&

601 
cv
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
){

602 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string orárray",

603 
›t
->
«me
);

604  
VR_ERROR
;

605 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

606 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

607 i‡((*
cv_sub
)->
ty≥
 !
CONF_VALUE_TYPE_STRING
) {

608 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá stringárray",

609 
›t
->
«me
);

610  
VR_ERROR
;

614 
	`CONF_WLOCK
();

615 
p
 = 
obj
;

616 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

618 
	`d¨øy_n
(
gt
) > 0) {

619 
°r
 = 
	`d¨øy_p›
(
gt
);

620 
	`sds‰ì
(*
°r
);

623 i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
) {

624 
°r
 = 
	`d¨øy_push
(
gt
);

625 *
°r
 = 
	`sdsdup
(
cv
->
vÆue
);

626 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

627 
j
 = 0; j < 
	`d¨øy_n
(
cv
->
vÆue
); j ++) {

628 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

629 
°r
 = 
	`d¨øy_push
(
gt
);

630 *
°r
 = 
	`sdsdup
((*
cv_sub
)->
vÆue
);

633 
c⁄f
->
vîsi⁄
 ++;

634 
	`CONF_UNLOCK
();

635  
VR_OK
;

636 
	}
}

639 
	$c⁄f_gë_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

641 
uöt8_t
 *
p
;

642 
uöt32_t
 
j
;

643 
d¨øy
 *
°rs
 = 
d©a
;

644 
¨øy
 *
gt
;

645 
sds
 *
°r1
, *
°r2
;

647 i‡(
d©a
 =
NULL
) {

648  
VR_ERROR
;

651 
	`CONF_RLOCK
();

652 
p
 = 
obj
;

653 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

655 
	`ASSERT
(
	`d¨øy_n
(
°rs
) == 0);

657 
j
 = 0; j < 
	`d¨øy_n
(
gt
); j ++) {

658 
°r1
 = 
	`d¨øy_gë
(
gt
, 
j
);

659 
°r2
 = 
	`d¨øy_push
(
°rs
);

660 *
°r2
 = 
	`sdsdup
(*
°r1
);

663 
	`CONF_UNLOCK
();

664  
VR_OK
;

665 
	}
}

667 
	$di˘C⁄fVÆueDe°ru˘‹
(*
¥ivd©a
, *
vÆ
)

669 
	`DICT_NOTUSED
(
¥ivd©a
);

671 
	`c⁄f_vÆue_de°roy
(
vÆ
);

672 
	}
}

674 
	$di˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

676 
	`DICT_NOTUSED
(
¥ivd©a
);

678 
	`di˘Rñó£
(
vÆ
);

679 
	}
}

682 
di˘Ty≥
 
	gOrg™iz©i⁄Di˘Ty≥
 = {

683 
di˘SdsHash
,

684 
NULL
,

685 
NULL
,

686 
di˘SdsKeyCom∑ª
,

687 
di˘SdsDe°ru˘‹
,

688 
di˘De°ru˘‹


692 
di˘Ty≥
 
	gKeyVÆueDi˘Ty≥
 = {

693 
di˘SdsHash
,

694 
NULL
,

695 
NULL
,

696 
di˘SdsKeyCom∑ª
,

697 
di˘SdsDe°ru˘‹
,

698 
di˘C⁄fVÆueDe°ru˘‹


702 
di˘Ty≥
 
	gC⁄fTabÀDi˘Ty≥
 = {

703 
di˘SåCa£Hash
,

704 
NULL
,

705 
NULL
,

706 
di˘SåKeyCa£Com∑ª
,

707 
NULL
,

708 
NULL


712 
c⁄f_vÆue
 *
	$c⁄f_vÆue_¸óã
(
ty≥
)

714 
c⁄f_vÆue
 *
cv
;

716 
cv
 = 
	`dÆloc
((*cv));

717 if(
cv
 =
NULL
){

718  
NULL
;

721 
cv
->
ty≥
 =Åype;

722 
cv
->
vÆue
 = 
NULL
;

724 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

725 
cv
->
vÆue
 = 
	`d¨øy_¸óã
(3, (
c⁄f_vÆue
*));

726 if(
cv
->
vÆue
 =
NULL
){

727 
	`d‰ì
(
cv
);

728  
NULL
;

732  
cv
;

733 
	}
}

736 
	$c⁄f_vÆue_de°roy
(
c⁄f_vÆue
 *
cv
)

738 
c⁄f_vÆue
 **
cv_sub
;

740 if(
cv
 =
NULL
){

744 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_UNKNOW
){

745 
	`d‰ì
(
cv
);

747 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

748 if(
cv
->
vÆue
 !
NULL
){

749 
	`sds‰ì
(
cv
->
vÆue
);

751 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

752 if(
cv
->
vÆue
 !
NULL
){

753 
	`d¨øy_n
(
cv
->
vÆue
) > 0){

754 
cv_sub
 = 
	`d¨øy_p›
(
cv
->
vÆue
);

755 
	`c⁄f_vÆue_de°roy
(*
cv_sub
);

758 
	`d¨øy_de°roy
(
cv
->
vÆue
);

761 
	`NOT_REACHED
();

764 
	`d‰ì
(
cv
);

765 
	}
}

768 
	$c⁄f_£rvî_öô
(
c⁄f_£rvî
 *
cs
)

770 if(
cs
 =
NULL
){

771  
VR_ERROR
;

774 
cs
->
˘abÀ
 = 
	`di˘Cª©e
(&
C⁄fTabÀDi˘Ty≥
,
NULL
);

776 
cs
->
d©aba£s
 = 
CONF_UNSET_NUM
;

777 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONF_UNSET_NUM
;

778 
cs
->
max_time_com∂exôy_limô
 = 
CONF_UNSET_NUM
;

779 
cs
->
maxmem‹y
 = 
CONF_UNSET_NUM
;

780 
cs
->
maxmem‹y_pﬁicy
 = 
CONF_UNSET_NUM
;

781 
cs
->
maxmem‹y_ßm∂es
 = 
CONF_UNSET_NUM
;

782 
cs
->
max˛õ¡s
 = 
CONF_UNSET_NUM
;

783 
cs
->
thªads
 = 
CONF_UNSET_NUM
;

784 
	`d¨øy_öô
(&
cs
->
böds
,1,(
sds
));

785 
cs
->
p‹t
 = 
CONF_UNSET_NUM
;

786 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

787 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

788 
cs
->
dú
 = 
CONF_UNSET_PTR
;

789 
	`d¨øy_öô
(&
cs
->
comm™ds_√ed_admö∑ss
,1,(
sds
));

791  
VR_OK
;

792 
	}
}

795 
	$c⁄f_£rvî_£t_deÁu…
(
c⁄f_£rvî
 *
cs
)

797 
sds
 *
°r
;

798 
c⁄f_›ti⁄
 *
›t
;

800 if(
cs
 =
NULL
){

801  
VR_ERROR
;

804 
›t
 = 
c⁄f_£rvî_›ti⁄s
; o±&&›t->
«me
; opt++) {

805 
	`di˘Add
(
cs
->
˘abÀ
,
›t
->
«me
,opt);

808 
cs
->
d©aba£s
 = 
CONFIG_DEFAULT_LOGICAL_DBNUM
;

809 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONFIG_DEFAULT_INTERNAL_DBNUM
;

810 
cs
->
max_time_com∂exôy_limô
 = 
CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
;

811 
cs
->
maxmem‹y
 = 
CONFIG_DEFAULT_MAXMEMORY
;

812 
cs
->
maxmem‹y_pﬁicy
 = 
CONFIG_DEFAULT_MAXMEMORY_POLICY
;

813 
cs
->
maxmem‹y_ßm∂es
 = 
CONFIG_DEFAULT_MAXMEMORY_SAMPLES
;

814 
cs
->
max˛õ¡s
 = 
CONFIG_DEFAULT_MAX_CLIENTS
;

815 
cs
->
thªads
 = 
CONFIG_DEFAULT_THREADS_NUM
;

816 
cs
->
¶owlog_log_¶owî_th™
 = 
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
;

817 
cs
->
¶owlog_max_Àn
 = 
CONFIG_DEFAULT_SLOWLOG_MAX_LEN
;

818 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

819 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

821 
	`d¨øy_n
(&
cs
->
böds
) > 0) {

822 
°r
 = 
	`d¨øy_p›
(&
cs
->
böds
);

823 
	`sds‰ì
(*
°r
);

825 
°r
 = 
	`d¨øy_push
(&
cs
->
böds
);

826 *
°r
 = 
	`sd¢ew
(
CONFIG_DEFAULT_HOST
);

828 
cs
->
p‹t
 = 
CONFIG_DEFAULT_SERVER_PORT
;

830 i‡(
cs
->
dú
 !
CONF_UNSET_PTR
) {

831 
	`sds‰ì
(
cs
->
dú
);

833 
cs
->
dú
 = 
	`sd¢ew
(
CONFIG_DEFAULT_DATA_DIR
);

835 
	`d¨øy_n
(&
cs
->
comm™ds_√ed_admö∑ss
) > 0) {

836 
°r
 = 
	`d¨øy_p›
(&
cs
->
comm™ds_√ed_admö∑ss
);

837 
	`sds‰ì
(*
°r
);

840  
VR_OK
;

841 
	}
}

843 
	$c⁄f_£rvî_deöô
(
c⁄f_£rvî
 *
cs
)

845 
sds
 *
°r
;

847 if(
cs
 =
NULL
){

851 
cs
->
d©aba£s
 = 
CONF_UNSET_NUM
;

852 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONF_UNSET_NUM
;

853 
cs
->
maxmem‹y
 = 
CONF_UNSET_NUM
;

854 
cs
->
maxmem‹y_pﬁicy
 = 
CONF_UNSET_NUM
;

855 
cs
->
maxmem‹y_ßm∂es
 = 
CONF_UNSET_NUM
;

856 
cs
->
max_time_com∂exôy_limô
 = 
CONF_UNSET_NUM
;

857 
cs
->
max˛õ¡s
 = 
CONF_UNSET_NUM
;

858 
cs
->
thªads
 = 
CONF_UNSET_NUM
;

860 
	`d¨øy_n
(&
cs
->
böds
) > 0) {

861 
°r
 = 
	`d¨øy_p›
(&
cs
->
böds
);

862 
	`sds‰ì
(*
°r
);

864 
	`d¨øy_deöô
(&
cs
->
böds
);

866 
cs
->
p‹t
 = 
CONF_UNSET_NUM
;

868 i‡(
cs
->
dú
 !
CONF_UNSET_PTR
) {

869 
	`sds‰ì
(
cs
->
dú
);

870 
cs
->
dú
 = 
CONF_UNSET_PTR
;

873 i‡(
cs
->
ªquúïass
 !
CONF_UNSET_PTR
) {

874 
	`sds‰ì
(
cs
->
ªquúïass
);

875 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

877 i‡(
cs
->
admö∑ss
 !
CONF_UNSET_PTR
) {

878 
	`sds‰ì
(
cs
->
admö∑ss
);

879 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

882 
	`d¨øy_n
(&
cs
->
comm™ds_√ed_admö∑ss
) > 0) {

883 
°r
 = 
	`d¨øy_p›
(&
cs
->
comm™ds_√ed_admö∑ss
);

884 
	`sds‰ì
(*
°r
);

886 
	`d¨øy_deöô
(&
cs
->
comm™ds_√ed_admö∑ss
);

887 
	}
}

891 
	$c⁄f_£rvî_gë
(c⁄° *
›ti⁄_«me
, *
vÆue
)

893 
c⁄f_›ti⁄
 *
›t
;

895 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
›ti⁄_«me
);

896 i‡(
›t
 =
NULL
)

897  
VR_ERROR
;

899  
›t
->
	`gë
(
c£rvî
, o±, 
vÆue
);

900 
	}
}

903 
	$c⁄f_£rvî_£t
(c⁄° *
›ti⁄_«me
, 
c⁄f_vÆue
 *
vÆue
)

905 
c⁄f_›ti⁄
 *
›t
;

907 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
›ti⁄_«me
);

908 i‡(
›t
 =
NULL
 || o±->
Êags
&
CONF_FIELD_FLAGS_NO_MODIFY
)

909  
VR_ERROR
;

911  
›t
->
	`£t
(
c£rvî
, o±, 
vÆue
);

912 
	}
}

915 
	$c⁄f_öô
(
vr_c⁄f
 *
cf
)

917 
ªt
;

919 if(
cf
 =
NULL
){

920  
VR_ERROR
;

924 
cf
->
‚ame
 = 
NULL
;

926 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

928 
cf
->
vîsi⁄
 = 0;

929 
	`±hªad_rwlock_öô
(&
cf
->
rwl
, 
NULL
);

930 
	`±hªad_muãx_öô
(&
cf
->
Êock
, 
NULL
);

932 
cf
->
‹g™iz©i⁄s
 = 
	`di˘Cª©e
(&
Org™iz©i⁄Di˘Ty≥
, 
NULL
);

933 i‡(
cf
->
‹g™iz©i⁄s
 =
NULL
) {

934  
VR_ERROR
;

938 
	`c⁄f_£rvî_öô
(&
cf
->
c£rvî
);

940 
c⁄f
 = 
cf
;

942  
VR_OK
;

943 
	}
}

946 
	$c⁄f_£t_deÁu…
(
vr_c⁄f
 *
cf
)

948 
	`CONF_WLOCK
();

949 
	`c⁄f_£rvî_£t_deÁu…
(&
cf
->
c£rvî
);

950 
	`CONF_UNLOCK
();

951  
VR_OK
;

952 
	}
}

954 
	$c⁄f_deöô
(
vr_c⁄f
 *
cf
)

956 if(
cf
 =
NULL
){

960 i‡(
cf
->
‚ame
 !
NULL
) {

961 
	`sds‰ì
(
cf
->
‚ame
);

962 
cf
->
‚ame
 = 
NULL
;

965 if(
cf
->
‹g™iz©i⁄s
 !
NULL
){

966 
	`di˘Rñó£
(
cf
->
‹g™iz©i⁄s
);

967 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

970 
	`c⁄f_£rvî_deöô
(&
cf
->
c£rvî
);

972 
cf
->
vîsi⁄
 = 0;

973 
	`±hªad_rwlock_de°roy
(&
cf
->
rwl
);

974 
	`±hªad_muãx_de°roy
(&
cf
->
Êock
);

975 
	}
}

979 
	$c⁄f_£rvî_dump
(
c⁄f_£rvî
 *
cs
, 
log_Àvñ
)

981 if(
cs
 =
NULL
){

985 
	`log_debug
(
log_Àvñ
, " d©aba£†: %d", 
cs
->
d©aba£s
);

986 
	`log_debug
(
log_Àvñ
, " i¡î«l_dbs_≥r_d©aba£†: %d", 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
);

987 
	`log_debug
(
log_Àvñ
, " maxmem‹y : %Œd", 
cs
->
maxmem‹y
);

988 
	`log_debug
(
log_Àvñ
, " maxmem‹y_pﬁicy : %d", 
cs
->
maxmem‹y_pﬁicy
);

989 
	`log_debug
(
log_Àvñ
, " maxmem‹y_ßm∂e†: %d", 
cs
->
maxmem‹y_ßm∂es
);

990 
	`log_debug
(
log_Àvñ
, " max_time_com∂exôy_limô : %Œd", 
cs
->
max_time_com∂exôy_limô
);

991 
	}
}

995 
	$c⁄f_dump
(
vr_c⁄f
 *
cf
)

997 
log_Àvñ
 = 
LOG_VERB
;

998 
c⁄f_£rvî
 *
cs
;

1000 if(
cf
 =
NULL
){

1004 
cs
 = &
cf
->
c£rvî
;

1005 
	`log_debug
(
log_Àvñ
, "server in conf file");

1006 
	`c⁄f_£rvî_dump
(
cs
, 
log_Àvñ
);

1007 
	`log_debug
(
log_Àvñ
, "");

1008 
	}
}

1015 
	$c⁄f_key_vÆue_ö£π
(
di˘
 *
‹g
, 
sds
 
key
, 
c⁄f_vÆue
 *
cv
)

1017 i‡(
key
 =
NULL
) {

1018 
	`log_îr‹
("value in conf file hasÇo key");

1022 i‡(
cv
 =
NULL
) {

1023 
	`log_îr‹
("key %†ö c⁄‡fûêha†nÿvÆue", 
key
);

1027 i‡(
‹g
 =
NULL
) {

1028 
	`log_îr‹
("key %s in conf file hasÇo organization",

1029 
key
);

1033 i‡(
	`di˘Add
(
‹g
,
key
,
cv
Ë!
DICT_OK
) {

1034 
di˘E¡ry
 *
de
;

1035 
c⁄f_vÆue
 *
cv_ﬁd
, *
cv_√w
, **
cv_sub
;

1036 
de
 = 
	`di˘Föd
(
‹g
,
key
);

1037 
cv_ﬁd
 = 
	`di˘GëVÆ
(
de
);

1038 i‡(
cv_ﬁd
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
) {

1039 
cv_√w
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_ARRAY
);

1040 
cv_sub
 = 
	`d¨øy_push
(
cv_√w
->
vÆue
);

1041 *
cv_sub
 = 
cv_ﬁd
;

1042 
cv_sub
 = 
	`d¨øy_push
(
cv_√w
->
vÆue
);

1043 *
cv_sub
 = 
cv
;

1044 
	`di˘SëVÆ
(
‹g
,
de
,
cv_√w
);

1046 
cv_sub
 = 
	`d¨øy_push
(
cv_ﬁd
->
vÆue
);

1047 *
cv_sub
 = 
cv
;

1053 
	}
}

1057 
	$c⁄f_¥e_lﬂd_‰om_°rög
(
vr_c⁄f
 *
cf
, *
c⁄fig
)

1059 
ªt
;

1060 
löíum
 = 0, 
tŸlöes
, 
i
, 
j
;

1061 
¶aveof_löíum
 = 0;

1062 
sds
 *
löes
 = 
NULL
;

1063 
di˘
 *
‹g
 = 
NULL
;

1064 
sds
 
‹g_«me
 = 
NULL
;

1065 
di˘E¡ry
 *
de
;

1066 
sds
 
key
 = 
NULL
;

1067 
c⁄f_vÆue
 *
cv
 = 
NULL
;

1069 
löes
 = 
	`sds•lôÀn
(
c⁄fig
,
	`°æí
(c⁄fig),"\n",1,&
tŸlöes
);

1073 
i
 = 0; i < 
tŸlöes
; i++) {

1074 
sds
 *
¨gv
;

1075 
¨gc
;

1077 
löíum
 = 
i
+1;

1079 
löes
[
i
] = 
	`sd°rim
(lines[i]," \t\r\n");

1083 i‡(
löes
[
i
][0] == '#' ||Üines[i][0] == '\0') ;

1086 i‡(
löes
[
i
][0] == '[') {

1088 i‡(
	`sd¶í
(
löes
[
i
]) <= 2 ||Üines[i][sdslen(lines[i])-1] == ']') {

1089 
	`log_îr‹
("OrganizationÇame %s in conf file %sÉrror",

1090 
löes
[
i
], 
cf
->
‚ame
);

1091 
lﬂdîr
;

1094 
‹g_«me
 = 
	`sd¢ewÀn
(
löes
[
i
]+1,
	`sd¶í
(lines[i])-2);

1095 
de
 = 
	`di˘Föd
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
);

1096 i‡(
de
 =
NULL
) {

1098 
‹g
 = 
	`di˘Cª©e
(&
KeyVÆueDi˘Ty≥
, 
NULL
);

1099 
	`di˘Add
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
,
‹g
);

1102 
‹g
 = 
	`di˘GëVÆ
(
de
);

1103 
	`sds‰ì
(
‹g_«me
);

1112 
¨gv
 = 
	`sds•lô¨gs
(
löes
[
i
],&
¨gc
);

1113 i‡(
¨gv
 =
NULL
) {

1114 
	`log_îr‹
("Unbalanced quotes in configurationÜine");

1115 
lﬂdîr
;

1119 i‡(
¨gc
 == 0) {

1120 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1124 
	`sd°ﬁowî
(
¨gv
[0]);

1127 i‡(
‹g
 =
NULL
) {

1128 
‹g_«me
 = 
	`sd¢ew
("server");

1129 
‹g
 = 
	`di˘Cª©e
(&
KeyVÆueDi˘Ty≥
, 
NULL
);

1130 
	`di˘Add
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
,
‹g
);

1134 
key
 = 
¨gv
[0];

1135 
¨gv
[0] = 
NULL
;

1136 
j
 = 1; j < 
¨gc
; j ++) {

1138 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1139 
cv
->
vÆue
 = 
¨gv
[
j
];

1140 
¨gv
[
j
] = 
NULL
;

1141 
ªt
 = 
	`c⁄f_key_vÆue_ö£π
(
‹g
, 
key
, 
cv
);

1142 if(
ªt
 == -1){

1143 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1144 
	`sds‰ì
(
key
);

1145 
	`c⁄f_vÆue_de°roy
(
cv
);

1146 
	`log_îr‹
("key value insert into organization failed");

1147 
lﬂdîr
;

1148 } i‡(
j
 =1 && 
ªt
 == 0) {

1149 
	`sds‰ì
(
key
);

1153 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1156 i‡(
löes
) {

1157 
	`sds‰ì•lôªs
(
löes
,
löíum
);

1159  
VR_OK
;

1161 
lﬂdîr
:

1162 i‡(
löes
) {

1163 
	`sds‰ì•lôªs
(
löes
,
löíum
);

1165  
VR_ERROR
;

1166 
	}
}

1170 
	$c⁄f_¥e_vÆid©e
(
vr_c⁄f
 *
cf
)

1172 
ªt
;

1173 
sds
 
c⁄fig
 = 
	`sd£m±y
();

1174 
buf
[
CONF_MAX_LINE
+1];

1178 i‡(
cf
->
‚ame
) {

1179 
FILE
 *
Â
;

1181 i‡(
cf
->
‚ame
[0] == '-' && cf->fname[1] == '\0') {

1182 
Â
 = 
°dö
;

1184 i‡((
Â
 = 
	`f›í
(
cf
->
‚ame
,"r")Ë=
NULL
) {

1185 
	`log_îr‹
("O≥¿c⁄fig fûê'%s' faûed: %s", 
cf
->
‚ame
, 
	`°ªº‹
(
î∫o
));

1186 
	`sds‰ì
(
c⁄fig
);

1187  
VR_ERROR
;

1190 
	`fgës
(
buf
,
CONF_MAX_LINE
+1,
Â
Ë!
NULL
)

1191 
c⁄fig
 = 
	`sdsˇt
(c⁄fig,
buf
);

1192 i‡(
Â
 !
°dö
Ë
	`f˛o£
(fp);

1195 
ªt
 = 
	`c⁄f_¥e_lﬂd_‰om_°rög
(
cf
,
c⁄fig
);

1196 i‡(
ªt
 !
VR_OK
) {

1197 
	`sds‰ì
(
c⁄fig
);

1198  
VR_ERROR
;

1201 
	`sds‰ì
(
c⁄fig
);

1202  
VR_OK
;

1203 
	}
}

1207 
	$c⁄f_∑r£_c⁄f_£rvî
(
c⁄f_£rvî
 *
cs
, 
di˘
 *
‹g
)

1209 
ªt
;

1210 
c⁄f_›ti⁄
 *
›t
;

1211 
di˘E¡ry
 *
de
;

1212 
sds
 
key
;

1214 if(
cs
 =
NULL
 || 
‹g
 == NULL){

1215  
VR_ERROR
;

1218 
key
 = 
	`sd£m±y
();

1220 
›t
 = 
c⁄f_£rvî_›ti⁄s
; o±&&›t->
«me
; opt++) {

1221 
key
 = 
	`sds˝y
(key,
›t
->
«me
);

1223 
de
 = 
	`di˘Föd
(
‹g
,
key
);

1225 i‡(
de
 !
NULL
) {

1227 
ªt
 = 
›t
->
	`£t
(
cs
, o±, 
	`di˘GëVÆ
(
de
));

1228 if(
ªt
 !
VR_OK
){

1229 
	`log_îr‹
("∑r£ key %†ö c⁄‡fûêîr‹", 
key
);

1230 
	`sds‰ì
(
key
);

1231  
VR_ERROR
;

1236 
	`sds‰ì
(
key
);

1237  
VR_OK
;

1238 
	}
}

1243 
	$c⁄f_∑r£
(
vr_c⁄f
 *
cf
)

1245 
ªt
;

1246 
di˘
 *
‹gs
, *
‹g
;

1247 
di˘E¡ry
 *
de
;

1248 
sds
 
key
;

1250 i‡(
cf
 =
NULL
) {

1251  
VR_ERROR
;

1254 
‹gs
 = 
cf
->
‹g™iz©i⁄s
;

1255 i‡(
‹gs
 =
NULL
) {

1256  
VR_ERROR
;

1261 
key
 = 
	`sd¢ew
(
CONF_ORGANIZATION_NAME_SERVER
);

1262 
de
 = 
	`di˘Föd
(
‹gs
, 
key
);

1263 i‡(
de
 =
NULL
) {

1264 
	`log_îr‹
("canÇot find %s organization in conf file %s",

1265 
CONF_ORGANIZATION_NAME_SERVER
, 
cf
->
‚ame
);

1266 
	`sds‰ì
(
key
);

1267  
VR_ERROR
;

1270 
‹g
 = 
	`di˘GëVÆ
(
de
);

1271 i‡(
‹g
 =
NULL
) {

1272 
	`log_îr‹
("di˘ %†íåy vÆuêi†NULL", 
	`di˘GëKey
(
de
));

1273 
	`sds‰ì
(
key
);

1274  
VR_ERROR
;

1278 
ªt
 = 
	`c⁄f_∑r£_c⁄f_£rvî
(&
cf
->
c£rvî
, 
‹g
);

1279 if–
ªt
 !
VR_OK
) {

1280 
	`log_îr‹
("common confÖarseÉrror");

1281 
	`sds‰ì
(
key
);

1282  
VR_ERROR
;

1285 
	`sds‰ì
(
key
);

1287  
VR_OK
;

1288 
	}
}

1292 
	$c⁄f_po°_vÆid©e
(
vr_c⁄f
 *
cf
)

1294 if(
cf
 =
NULL
){

1295  
VR_ERROR
;

1298 if(
cf
->
‹g™iz©i⁄s
 !
NULL
){

1299 
	`di˘Rñó£
(
cf
->
‹g™iz©i⁄s
);

1300 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

1303  
VR_OK
;

1304 
	}
}

1306 
vr_c⁄f
 *

1307 
	$c⁄f_›í
(*
fûíame
)

1309 
ªt
;

1310 
vr_c⁄f
 *
cf
 = 
NULL
;

1311 
sds
 
∑th
 = 
NULL
;

1313 i‡(
fûíame
 =
NULL
) {

1314 
	`log_îr‹
("configuration fileÇame is NULL.");

1315  
NULL
;

1318 
∑th
 = 
	`gëAbsﬁuãP©h
(
fûíame
);

1319 i‡(
∑th
 =
NULL
) {

1320 
	`log_îr‹
("c⁄figuøti⁄ fûê«mê'%s' i†îr‹.", 
fûíame
);

1321 
îr‹
;

1324 
cf
 = 
	`dÆloc
((*cf));

1325 i‡(
cf
 =
NULL
) {

1326 
îr‹
;

1329 
ªt
 = 
	`c⁄f_öô
(
cf
);

1330 if(
ªt
 !
VR_OK
){

1331 
îr‹
;

1335 
ªt
 = 
	`c⁄f_£t_deÁu…
(
cf
);

1336 i‡(
ªt
 !
VR_OK
) {

1337 
îr‹
;

1340 
cf
->
‚ame
 = 
∑th
;

1342  
cf
;

1344 
îr‹
:

1346 i‡(
cf
 !
NULL
) {

1347 
	`c⁄f_de°roy
(
cf
);

1350 i‡(
∑th
 !
NULL
) {

1351 
	`sds‰ì
(
∑th
);

1354  
NULL
;

1355 
	}
}

1358 
vr_c⁄f
 *

1359 
	$c⁄f_¸óã
(*
fûíame
)

1361 
ªt
;

1362 
vr_c⁄f
 *
cf
;

1364 
cf
 = 
	`c⁄f_›í
(
fûíame
);

1365 i‡(
cf
 =
NULL
) {

1366  
NULL
;

1371 
ªt
 = 
	`c⁄f_¥e_vÆid©e
(
cf
);

1372 i‡(
ªt
 !
VR_OK
) {

1373 
îr‹
;

1377 
	`c⁄f_‹g™iz©i⁄s_dump
(
cf
);

1381 
ªt
 = 
	`c⁄f_∑r£
(
cf
);

1382 i‡(
ªt
 !
VR_OK
) {

1383 
îr‹
;

1387 
ªt
 = 
	`c⁄f_po°_vÆid©e
(
cf
);

1388 i‡(
ªt
 !
VR_OK
) {

1389 
îr‹
;

1392 
	`c⁄f_dump
(
cf
);

1394 
c£rvî
 = &
cf
->cserver;

1396  
cf
;

1398 
îr‹
:

1399 
	`c⁄f_de°roy
(
cf
);

1400  
NULL
;

1401 
	}
}

1404 
	$c⁄f_de°roy
(
vr_c⁄f
 *
cf
)

1406 i‡(
cf
 =
NULL
) {

1410 
	`c⁄f_deöô
(
cf
);

1412 
	`d‰ì
(
cf
);

1413 
	}
}

1416 
	$c⁄f_vîsi⁄_gë
()

1418 
vîsi⁄
;

1420 
	`CONF_RLOCK
();

1421 
vîsi⁄
 = 
c⁄f
->version;

1422 
	`CONF_UNLOCK
();

1424  
vîsi⁄
;

1425 
	}
}

1429 
	$CONF_RLOCK
()

1431  
	`±hªad_rwlock_rdlock
(&
c⁄f
->
rwl
);

1432 
	}
}

1435 
	$CONF_WLOCK
()

1437  
	`±hªad_rwlock_wæock
(&
c⁄f
->
rwl
);

1438 
	}
}

1442 
	$CONF_UNLOCK
()

1444  
	`±hªad_rwlock_u∆ock
(&
c⁄f
->
rwl
);

1445 
	}
}

1449 
	$CONFF_LOCK
()

1451  
	`±hªad_muãx_lock
(&
c⁄f
->
Êock
);

1452 
	}
}

1455 
	$CONFF_UNLOCK
()

1457  
	`±hªad_muãx_u∆ock
(&
c⁄f
->
Êock
);

1458 
	}
}

1461 
	$gë_evi˘pﬁicy_°rögs
(
evi˘pﬁicy_ty≥
)

1463  
evi˘pﬁicy_°rögs
[
evi˘pﬁicy_ty≥
];

1464 
	}
}

1471 
	$c⁄figSëComm™d
(
˛õ¡
 *
c
) {

1472 
ªt
;

1473 
sds
 
vÆue
;

1474 
sds
 *
fõlds
;

1475 
fõlds_cou¡
 = 0;

1476 
c⁄f_›ti⁄
 *
›t
;

1477 
c⁄f_vÆue
 *
cv
;

1479 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[2],
	`sdsEncodedObje˘
(c->argv[2]));

1480 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[3],
	`sdsEncodedObje˘
(c->argv[3]));

1483 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
c
->
¨gv
[2]->
±r
);

1485 i‡(
›t
 =
NULL
) {

1486 
	`addRïlyEº‹F‹m©
(
c
,"Unsupported CONFIGÖarameter: %s",

1487 (*)
c
->
¨gv
[2]->
±r
);

1489 } i‡(
›t
->
Êags
&
CONF_FIELD_FLAGS_NO_MODIFY
) {

1490 
	`addRïlyEº‹F‹m©
(
c
,"Unsupported modifyÅhis CONFIGÖarameter: %s",

1491 (*)
c
->
¨gv
[2]->
±r
);

1495 
vÆue
 = 
c
->
¨gv
[3]->
±r
;

1498 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,
CONFIG_SOPN_MAXCLIENTS
)) {

1499 
max˛õ¡s
;

1500 
fûñimô
, 
thªads
;

1501 i‡(
	`°rög2l
(
vÆue
,
	`sd¶í
(vÆue),&
max˛õ¡s
Ë=0 || max˛õ¡†< 1Ë
badfmt
;

1502 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads
);

1504 
fûñimô
 = 
	`adju°O≥nFûesLimô
(()
max˛õ¡s
);

1505 i‡((
fûñimô
-
thªads
*2-
CONFIG_MIN_RESERVED_FDS
Ë!
max˛õ¡s
) {

1506 
	`addRïlyEº‹F‹m©
(
c
,"The operating system isÇotábleÅo handleÅhe specifiedÇumber of clients");

1509 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,
CONFIG_SOPN_ADMINPASS
)) {

1510 i‡(
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2) {

1511 
	`addRïlyEº‹F‹m©
(
c
,"YouÇeedádminpassÅo setÅhis CONFIGÖarameter: %s",

1512 (*)
c
->
¨gv
[2]->
±r
);

1517 
fõlds
 = 
	`sds•lôÀn
(
vÆue
,
	`sd¶í
(vÆue)," ",1,&
fõlds_cou¡
);

1518 i‡(
fõlds
 =
NULL
) {

1519 
badfmt
;

1520 } i‡(
fõlds_cou¡
 == 0) {

1521 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1522 
cv
->
vÆue
 = 
	`sd£m±y
();

1523 } i‡(
fõlds_cou¡
 == 1) {

1524 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1525 
cv
->
vÆue
 = 
fõlds
[0];

1526 
fõlds
[0] = 
NULL
;

1527 } i‡(
fõlds_cou¡
 > 1) {

1528 
c⁄f_vÆue
 **
cv_sub
;

1529 
uöt32_t
 
i
;

1531 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_ARRAY
);

1532 
i
 = 0; i < 
fõlds_cou¡
; i ++) {

1533 
cv_sub
 = 
	`d¨øy_push
(
cv
->
vÆue
);

1534 *
cv_sub
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1535 (*
cv_sub
)->
vÆue
 = 
fõlds
[
i
];

1536 
fõlds
[
i
] = 
NULL
;

1539 
	`log_debug
(
LOG_NOTICE
, "fõlds_cou¡: %d", 
fõlds_cou¡
);

1540 
	`£rvîP™ic
("Error config set value");

1542 
	`sds‰ì•lôªs
(
fõlds
,
fõlds_cou¡
);

1545 
ªt
 = 
›t
->
	`£t
(
c£rvî
, o±, 
cv
);

1546 
	`c⁄f_vÆue_de°roy
(
cv
);

1547 i‡(
ªt
 !
VR_OK
) {

1548 
badfmt
;

1552 i‡(!
	`°rcmp
(
›t
->
«me
,
CONFIG_SOPN_MAXMEMORY
)) {

1553 
maxmem‹y
;

1554 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
maxmem‹y
);

1555 i‡(
maxmem‹y
) {

1556 i‡(
maxmem‹y
 < 
	`dÆloc_u£d_mem‹y
()) {

1557 
	`log_w¨n
("WARNING:ÅheÇew maxmemory value set via CONFIG SET is smallerÅhanÅhe current memory usage. This willÑesult in keysÉvictionánd/or inabilityÅoácceptÇew write commands depending onÅhe maxmemory-policy.");

1558 
	`‰ìMem‹yIfNìded
(
c
->
vñ
);

1564 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1567 
badfmt
:

1568 
	`addRïlyEº‹F‹m©
(
c
,"Invalidárgument '%s' for CONFIG SET '%s'",

1569 (*)
vÆue
,

1570 (*)
c
->
¨gv
[2]->
±r
);

1571 
	}
}

1577 
	$addRïlyC⁄fO±i⁄
(
˛õ¡
 *
c
,
c⁄f_›ti⁄
 *
c›
)

1579 
	`addRïlyBulkCSåög
(
c
,
c›
->
«me
);

1580 i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_INT
) {

1581 
vÆue
;

1583 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1585 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_MAXMEMORYP
)) {

1586 
	`addRïlyBulkCSåög
(
c
,
	`gë_evi˘pﬁicy_°rögs
(
vÆue
));

1588 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vÆue
);

1590 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_LONGLONG
) {

1591 
vÆue
;

1592 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1593 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vÆue
);

1594 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_SDS
) {

1595 
sds
 
vÆue
;

1596 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1597 i‡(
vÆue
 =
NULL
) {

1598 
	`addRïlyBulkCSåög
(
c
,"");

1600 
	`addRïlyBulkSds
(
c
,
vÆue
);

1602 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_ARRAYSDS
) {

1603 
d¨øy
 
vÆues
;

1604 
sds
 
vÆue
 = 
	`sd£m±y
();

1605 
sds
 *
ñem
;

1607 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

1608 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆues
);

1609 
	`d¨øy_n
(&
vÆues
) > 0) {

1610 
ñem
 = 
	`d¨øy_p›
(&
vÆues
);

1611 
vÆue
 = 
	`sdsˇtsds
(vÆue,*
ñem
);

1612 
vÆue
 = 
	`sdsˇt
(value," ");

1613 
	`sds‰ì
(*
ñem
);

1615 
	`d¨øy_deöô
(&
vÆues
);

1616 i‡(
	`sd¶í
(
vÆue
Ë> 0Ë
	`sd§™ge
(value,0,-2);

1617 
	`addRïlyBulkSds
(
c
,
vÆue
);

1619 
	`£rvîP™ic
("Error conf fieldÅype");

1621 
	}
}

1623 
	$c⁄figGëComm™d
(
˛õ¡
 *
c
) {

1624 
robj
 *
o
 = 
c
->
¨gv
[2];

1625 *
∑âîn
 = 
o
->
±r
;

1626 
c⁄f_›ti⁄
 *
c›
;

1627 
	`£rvîAs£πWôhInfo
(
c
,
o
,
	`sdsEncodedObje˘
(o));

1629 
c›
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
∑âîn
);

1630 i‡(
c›
 !
NULL
) {

1632 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_ADMINPASS
) &&

1633 
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2) {

1634 
	`addRïly
(
c
,
sh¨ed
.
nﬂdmöîr
);

1636 
	`addRïlyMu…iBulkLí
(
c
,2);

1637 
	`addRïlyC⁄fO±i⁄
(
c
,
c›
);

1640 
m©ches
 = 0;

1641 * 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

1642 
c›
 = 
c⁄f_£rvî_›ti⁄s
; c›&&c›->
«me
; cop++) {

1643 i‡(
	`°rögm©ch
(
∑âîn
,
c›
->
«me
,1)) {

1645 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_ADMINPASS
) &&

1646 
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2)

1649 
	`addRïlyC⁄fO±i⁄
(
c
,
c›
);

1650 
m©ches
 ++;

1653 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn
,
m©ches
*2);

1655 
	}
}

1663 
	sªwrôeC⁄figSèã
 {

1664 
di˘
 *
	m›ti⁄_to_löe
;

1665 
di˘
 *
	mªwrôãn
;

1666 
	mnumlöes
;

1667 
sds
 *
	mlöes
;

1668 
	mhas_èû
;

1674 
	$ªwrôeC⁄figAµídLöe
(
ªwrôeC⁄figSèã
 *
°©e
, 
sds
 
löe
) {

1675 
°©e
->
löes
 = 
	`dªÆloc
(°©e->löes, (*Ë* (°©e->
numlöes
+1));

1676 
°©e
->
löes
[°©e->
numlöes
++] = 
löe
;

1677 
	}
}

1681 
	$ªwrôeC⁄figAddLöeNumbîToO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, 
sds
 
›ti⁄
, 
löíum
) {

1682 
dli°
 *
l
 = 
	`di˘FëchVÆue
(
°©e
->
›ti⁄_to_löe
,
›ti⁄
);

1684 i‡(
l
 =
NULL
) {

1685 
l
 = 
	`dli°Cª©e
();

1686 
	`di˘Add
(
°©e
->
›ti⁄_to_löe
,
	`sdsdup
(
›ti⁄
),
l
);

1688 
	`dli°AddNodeTaû
(
l
,(*)()
löíum
);

1689 
	}
}

1691 
di˘Ty≥
 
	g›ti⁄ToLöeDi˘Ty≥
 = {

1692 
di˘SdsCa£Hash
,

1693 
NULL
,

1694 
NULL
,

1695 
di˘SdsKeyCa£Com∑ª
,

1696 
di˘SdsDe°ru˘‹
,

1697 
di˘Li°De°ru˘‹


1700 
di˘Ty≥
 
	g›ti⁄SëDi˘Ty≥
 = {

1701 
di˘SdsCa£Hash
,

1702 
NULL
,

1703 
NULL
,

1704 
di˘SdsKeyCa£Com∑ª
,

1705 
di˘SdsDe°ru˘‹
,

1706 
NULL


1709 
	#CONFIG_MAX_LINE
 1024

	)

1710 
	#REDIS_CONFIG_REWRITE_SIGNATURE
 "# Gíî©ed by CONFIG REWRITE"

	)

1716 
ªwrôeC⁄figSèã
 *
	$ªwrôeC⁄figRódOldFûe
(*
∑th
) {

1717 
FILE
 *
Â
 = 
	`f›í
(
∑th
,"r");

1718 
ªwrôeC⁄figSèã
 *
°©e
 = 
	`dÆloc
((*state));

1719 
buf
[
CONFIG_MAX_LINE
+1];

1720 
löíum
 = -1;

1722 i‡(
Â
 =
NULL
 && 
î∫o
 !
ENOENT
)  NULL;

1724 
°©e
->
›ti⁄_to_löe
 = 
	`di˘Cª©e
(&
›ti⁄ToLöeDi˘Ty≥
,
NULL
);

1725 
°©e
->
ªwrôãn
 = 
	`di˘Cª©e
(&
›ti⁄SëDi˘Ty≥
,
NULL
);

1726 
°©e
->
numlöes
 = 0;

1727 
°©e
->
löes
 = 
NULL
;

1728 
°©e
->
has_èû
 = 0;

1729 i‡(
Â
 =
NULL
Ë 
°©e
;

1732 
	`fgës
(
buf
,
CONFIG_MAX_LINE
+1,
Â
Ë!
NULL
) {

1733 
¨gc
;

1734 
sds
 *
¨gv
;

1735 
sds
 
löe
 = 
	`sd°rim
(
	`sd¢ew
(
buf
),"\r\n\t ");

1737 
löíum
++;

1740 i‡(
löe
[0] == '#' ||Üine[0] == '\0') {

1741 i‡(!
°©e
->
has_èû
 && !
	`°rcmp
(
löe
,
REDIS_CONFIG_REWRITE_SIGNATURE
))

1742 
°©e
->
has_èû
 = 1;

1743 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1748 
¨gv
 = 
	`sds•lô¨gs
(
löe
,&
¨gc
);

1749 i‡(
¨gv
 =
NULL
) {

1753 
sds
 
aux
 = 
	`sd¢ew
("# ??? ");

1754 
aux
 = 
	`sdsˇtsds
◊ux,
löe
);

1755 
	`sds‰ì
(
löe
);

1756 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
aux
);

1760 
	`sd°ﬁowî
(
¨gv
[0]);

1764 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1765 
	`ªwrôeC⁄figAddLöeNumbîToO±i⁄
(
°©e
,
¨gv
[0],
löíum
);

1767 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1769 
	`f˛o£
(
Â
);

1770  
°©e
;

1771 
	}
}

1777 
	$ªwrôeC⁄figM¨kAsPro˚s£d
(
ªwrôeC⁄figSèã
 *
°©e
, c⁄° *
›ti⁄
) {

1778 
sds
 
›t
 = 
	`sd¢ew
(
›ti⁄
);

1780 i‡(
	`di˘Add
(
°©e
->
ªwrôãn
,
›t
,
NULL
Ë!
DICT_OK
Ë
	`sds‰ì
(opt);

1781 
	}
}

1799 
	$ªwrôeC⁄figRewrôeLöe
(
ªwrôeC⁄figSèã
 *
°©e
, c⁄° *
›ti⁄
, 
sds
 
löe
, 
f‹˚
) {

1800 
sds
 
o
 = 
	`sd¢ew
(
›ti⁄
);

1801 
dli°
 *
l
 = 
	`di˘FëchVÆue
(
°©e
->
›ti⁄_to_löe
,
o
);

1803 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

1805 i‡(!
l
 && !
f‹˚
) {

1807 
	`sds‰ì
(
löe
);

1808 
	`sds‰ì
(
o
);

1812 i‡(
l
) {

1813 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

1814 
löíum
 = (Ë
 
->
vÆue
;

1818 
	`dli°DñNode
(
l
,
 
);

1819 i‡(
	`dli°Lígth
(
l
Ë=0Ë
	`di˘Dñëe
(
°©e
->
›ti⁄_to_löe
,
o
);

1820 
	`sds‰ì
(
°©e
->
löes
[
löíum
]);

1821 
°©e
->
löes
[
löíum
] = 
löe
;

1824 i‡(!
°©e
->
has_èû
) {

1825 
	`ªwrôeC⁄figAµídLöe
(
°©e
,

1826 
	`sd¢ew
(
REDIS_CONFIG_REWRITE_SIGNATURE
));

1827 
°©e
->
has_èû
 = 1;

1829 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1831 
	`sds‰ì
(
o
);

1832 
	}
}

1835 
	$ªwrôeC⁄figRñó£Sèã
(
ªwrôeC⁄figSèã
 *
°©e
) {

1836 
	`sds‰ì•lôªs
(
°©e
->
löes
,°©e->
numlöes
);

1837 
	`di˘Rñó£
(
°©e
->
›ti⁄_to_löe
);

1838 
	`di˘Rñó£
(
°©e
->
ªwrôãn
);

1839 
	`d‰ì
(
°©e
);

1840 
	}
}

1850 
	$ªwrôeC⁄figRemoveOΩh™ed
(
ªwrôeC⁄figSèã
 *
°©e
) {

1851 
di˘Iãøt‹
 *
di
 = 
	`di˘GëIãøt‹
(
°©e
->
›ti⁄_to_löe
);

1852 
di˘E¡ry
 *
de
;

1854 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

1855 
dli°
 *
l
 = 
	`di˘GëVÆ
(
de
);

1856 
sds
 
›ti⁄
 = 
	`di˘GëKey
(
de
);

1860 i‡(
	`di˘Föd
(
°©e
->
ªwrôãn
,
›ti⁄
Ë=
NULL
) {

1861 
	`log_debug
(
LOG_DEBUG
,"NŸÑewrôã¿›ti⁄: %s", 
›ti⁄
);

1865 
	`dli°Lígth
(
l
)) {

1866 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

1867 
löíum
 = (Ë
 
->
vÆue
;

1869 
	`sds‰ì
(
°©e
->
löes
[
löíum
]);

1870 
°©e
->
löes
[
löíum
] = 
	`sd£m±y
();

1871 
	`dli°DñNode
(
l
,
 
);

1874 
	`di˘Rñó£Iãøt‹
(
di
);

1875 
	}
}

1879 
sds
 
	$ªwrôeC⁄figGëC⁄ã¡FromSèã
(
ªwrôeC⁄figSèã
 *
°©e
) {

1880 
sds
 
c⁄ã¡
 = 
	`sd£m±y
();

1881 
j
, 
was_em±y
 = 0;

1883 
j
 = 0; j < 
°©e
->
numlöes
; j++) {

1885 i‡(
	`sd¶í
(
°©e
->
löes
[
j
]) == 0) {

1886 i‡(
was_em±y
) ;

1887 
was_em±y
 = 1;

1889 
was_em±y
 = 0;

1891 
c⁄ã¡
 = 
	`sdsˇtsds
(c⁄ã¡,
°©e
->
löes
[
j
]);

1892 
c⁄ã¡
 = 
	`sdsˇéí
(content,"\n",1);

1894  
c⁄ã¡
;

1895 
	}
}

1909 
	$ªwrôeC⁄figOvîwrôeFûe
(*
c⁄figfûe
, 
sds
 
c⁄ã¡
) {

1910 
ªtvÆ
 = 0;

1911 
fd
 = 
	`›í
(
c⁄figfûe
,
O_RDWR
|
O_CREAT
,0644);

1912 
c⁄ã¡_size
 = 
	`sd¶í
(
c⁄ã¡
), 
∑ddög
 = 0;

1913 
°©
 
sb
;

1914 
sds
 
c⁄ã¡_∑dded
;

1918 i‡(
fd
 == -1)  -1;

1919 i‡(
	`f°©
(
fd
,&
sb
) == -1) {

1920 
	`˛o£
(
fd
);

1925 
c⁄ã¡_∑dded
 = 
	`sdsdup
(
c⁄ã¡
);

1926 i‡(
c⁄ã¡_size
 < 
sb
.
°_size
) {

1929 
∑ddög
 = 
sb
.
°_size
 - 
c⁄ã¡_size
;

1930 
c⁄ã¡_∑dded
 = 
	`sdsgrowzîo
(c⁄ã¡_∑dded,
sb
.
°_size
);

1931 
c⁄ã¡_∑dded
[
c⁄ã¡_size
] = '\n';

1932 
	`mem£t
(
c⁄ã¡_∑dded
+
c⁄ã¡_size
+1,'#',
∑ddög
-1);

1936 i‡(
	`wrôe
(
fd
,
c⁄ã¡_∑dded
,
	`°æí
(content_padded)) == -1) {

1937 
ªtvÆ
 = -1;

1938 
˛ónup
;

1942 i‡(
∑ddög
) {

1943 i‡(
	`·runˇã
(
fd
,
c⁄ã¡_size
) == -1) {

1948 
˛ónup
:

1949 
	`sds‰ì
(
c⁄ã¡_∑dded
);

1950 
	`˛o£
(
fd
);

1951  
ªtvÆ
;

1952 
	}
}

1955 
	$ªwrôeC⁄figI¡O±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1956 
vÆue
;

1957 
f‹˚
;

1958 
sds
 
löe
;

1960 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1961 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%d",
›ti⁄
,
vÆue
);

1962 
f‹˚
 = 
vÆue
 !
defvÆue
;

1964 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1965 
	}
}

1968 
	$ªwrôeC⁄figSdsO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
sds
 
defvÆue
) {

1969 
sds
 
vÆue
;

1970 
f‹˚
;

1971 
sds
 
löe
;

1973 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1974 i‡(
defvÆue
 =
NULL
 && 
vÆue
 == NULL) {

1975 
f‹˚
 = 0;

1976 } i‡(
defvÆue
 !
NULL
 && 
vÆue
 !NULL && !
	`sdscmp
(value,defvalue)) {

1977 
f‹˚
 = 0;

1979 
f‹˚
 = 1;

1982 i‡(
vÆue
 =
NULL
) {

1983 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†\"\"",
›ti⁄
);

1985 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
vÆue
);

1986 
	`sds‰ì
(
vÆue
);

1989 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1990 
	}
}

1993 
	$ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1994 
vÆue
;

1995 
f‹˚
;

1996 
sds
 
löe
;

1998 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1999 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%Œd",
›ti⁄
,
vÆue
);

2000 
f‹˚
 = 
vÆue
 !
defvÆue
;

2002 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2003 
	}
}

2007 
	$ªwrôeC⁄figF‹m©Mem‹y
(*
buf
, 
size_t
 
Àn
, 
byãs
) {

2008 
gb
 = 1024*1024*1024;

2009 
mb
 = 1024*1024;

2010 
kb
 = 1024;

2012 i‡(
byãs
 && (byã†% 
gb
) == 0) {

2013  
	`¢¥ötf
(
buf
,
Àn
,"%Œdgb",
byãs
/
gb
);

2014 } i‡(
byãs
 && (byã†% 
mb
) == 0) {

2015  
	`¢¥ötf
(
buf
,
Àn
,"%Œdmb",
byãs
/
mb
);

2016 } i‡(
byãs
 && (byã†% 
kb
) == 0) {

2017  
	`¢¥ötf
(
buf
,
Àn
,"%Œdkb",
byãs
/
kb
);

2019  
	`¢¥ötf
(
buf
,
Àn
,"%Œd",
byãs
);

2021 
	}
}

2024 
	$ªwrôeC⁄figByãsO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

2025 
vÆue
;

2026 
buf
[64];

2027 
f‹˚
;

2028 
sds
 
löe
;

2030 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

2031 
f‹˚
 = 
vÆue
 !
defvÆue
;

2033 
	`ªwrôeC⁄figF‹m©Mem‹y
(
buf
,(buf),
vÆue
);

2034 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
buf
);

2035 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2036 
	}
}

2041 
	$ªwrôeC⁄figEnumO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
c⁄figEnumGëSåFun
 
fun
, 
defvÆ
) {

2042 
vÆue
;

2043 
sds
 
löe
;

2044 c⁄° *
«me
;

2045 
f‹˚
;

2047 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

2048 
f‹˚
 = 
vÆue
 !
defvÆ
;

2049 
«me
 = 
	`fun
(
vÆue
);

2050 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
«me
);

2051 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2052 
	}
}

2055 
	$ªwrôeC⁄figBödO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
) {

2056 
d¨øy
 
vÆues
;

2057 
sds
 *
vÆue
, 
löe
;

2058 
f‹˚
 = 1;

2059 *
›ti⁄
 = 
CONFIG_SOPN_BIND
;

2061 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

2062 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆues
);

2064 i‡(
	`d¨øy_n
(&
vÆues
) == 0) {

2065 
	`d¨øy_deöô
(&
vÆues
);

2066 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2071 
löe
 = 
	`sd¢ew
(
›ti⁄
);

2072 
	`d¨øy_n
(&
vÆues
) > 0) {

2073 
löe
 = 
	`sdsˇt
(line," ");

2074 
vÆue
 = 
	`d¨øy_p›
(&
vÆues
);

2075 
löe
 = 
	`sdsˇtsds
÷öe,*
vÆue
);

2076 
	`sds‰ì
(*
vÆue
);

2078 
	`d¨øy_deöô
(&
vÆues
);

2080 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2081 
	}
}

2084 
	$ªwrôeC⁄figComm™dsNAPO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
) {

2085 
d¨øy
 
vÆues
;

2086 
sds
 *
vÆue
, 
löe
;

2087 
f‹˚
 = 1;

2088 *
›ti⁄
 = 
CONFIG_SOPN_COMMANDSNAP
;

2090 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

2091 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆues
);

2093 i‡(
	`d¨øy_n
(&
vÆues
) == 0) {

2094 
	`d¨øy_deöô
(&
vÆues
);

2095 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2099 
	`d¨øy_n
(&
vÆues
) > 0) {

2100 
vÆue
 = 
	`d¨øy_p›
(&
vÆues
);

2101 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,*
vÆue
);

2102 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2103 
	`sds‰ì
(*
vÆue
);

2105 
	`d¨øy_deöô
(&
vÆues
);

2106 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2107 
	}
}

2117 
	$ªwrôeC⁄fig
(*
∑th
) {

2118 
ªwrôeC⁄figSèã
 *
°©e
;

2119 
sds
 
√wc⁄ã¡
;

2120 
ªtvÆ
;

2121 
c⁄f_›ti⁄
 *
c›
;

2123 
	`CONFF_LOCK
();

2125 i‡((
°©e
 = 
	`ªwrôeC⁄figRódOldFûe
(
∑th
)Ë=
NULL
) {

2126 
	`CONFF_UNLOCK
();

2132 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_DATABASES
,
CONFIG_DEFAULT_LOGICAL_DBNUM
);

2133 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_IDPDATABASE
,
CONFIG_DEFAULT_INTERNAL_DBNUM
);

2134 
	`ªwrôeC⁄figByãsO±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORY
,
CONFIG_DEFAULT_MAXMEMORY
);

2135 
	`ªwrôeC⁄figEnumO±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORYP
,
gë_evi˘pﬁicy_°rögs
,
CONFIG_DEFAULT_MAXMEMORY_POLICY
);

2136 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORYS
,
CONFIG_DEFAULT_MAXMEMORY_SAMPLES
);

2137 
	`ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
°©e
,
CONFIG_SOPN_MTCLIMIT
,
CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
);

2138 
	`ªwrôeC⁄figBödO±i⁄
(
°©e
);

2139 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_PORT
,
CONFIG_DEFAULT_SERVER_PORT
);

2140 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_THREADS
,
CONFIG_DEFAULT_THREADS_NUM
);

2141 
	`ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
°©e
,
CONFIG_SOPN_SLOWLOGLST
,
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
);

2142 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_SLOWLOGML
,
CONFIG_DEFAULT_SLOWLOG_MAX_LEN
);

2143 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_MAXCLIENTS
,
CONFIG_DEFAULT_MAX_CLIENTS
);

2144 
	`ªwrôeC⁄figSdsO±i⁄
(
°©e
,
CONFIG_SOPN_REQUIREPASS
,
NULL
);

2145 
	`ªwrôeC⁄figSdsO±i⁄
(
°©e
,
CONFIG_SOPN_ADMINPASS
,
NULL
);

2146 
	`ªwrôeC⁄figComm™dsNAPO±i⁄
(
°©e
);

2151 
	`ªwrôeC⁄figRemoveOΩh™ed
(
°©e
);

2155 
√wc⁄ã¡
 = 
	`ªwrôeC⁄figGëC⁄ã¡FromSèã
(
°©e
);

2156 
ªtvÆ
 = 
	`ªwrôeC⁄figOvîwrôeFûe
(
£rvî
.
c⁄figfûe
,
√wc⁄ã¡
);

2157 
	`CONFF_UNLOCK
();

2159 
	`sds‰ì
(
√wc⁄ã¡
);

2160 
	`ªwrôeC⁄figRñó£Sèã
(
°©e
);

2161  
ªtvÆ
;

2162 
	}
}

2168 
	$c⁄figComm™d
(
˛õ¡
 *
c
) {

2170 i‡(
£rvî
.
lﬂdög
 && 
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get")) {

2171 
	`addRïlyEº‹
(
c
,"Only CONFIG GET isállowed duringÜoading");

2175 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"set")) {

2176 i‡(
c
->
¨gc
 !4Ë
bad¨ôy
;

2177 
	`c⁄figSëComm™d
(
c
);

2178 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get")) {

2179 i‡(
c
->
¨gc
 !3Ë
bad¨ôy
;

2180 
	`c⁄figGëComm™d
(
c
);

2186  i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"rewrite")) {

2187 i‡(
c
->
¨gc
 !2Ë
bad¨ôy
;

2188 i‡(
£rvî
.
c⁄figfûe
 =
NULL
) {

2189 
	`addRïlyEº‹
(
c
,"The server isÑunning withoutá config file");

2192 i‡(
	`ªwrôeC⁄fig
(
£rvî
.
c⁄figfûe
) == -1) {

2193 
	`log_w¨n
("CONFIG REWRITE faûed: %s", 
	`°ªº‹
(
î∫o
));

2194 
	`addRïlyEº‹F‹m©
(
c
,"Rewrôög c⁄fig fûe: %s", 
	`°ªº‹
(
î∫o
));

2196 
	`log_w¨n
("CONFIG REWRITEÉxecuted with success.");

2197 
	`addRïly
(
c
,
sh¨ed
.
ok
);

2200 
	`addRïlyEº‹
(
c
,

2206 
bad¨ôy
:

2207 
	`addRïlyEº‹F‹m©
(
c
,"WrongÇumber ofárguments for CONFIG %s",

2208 (*Ë
c
->
¨gv
[1]->
±r
);

2209 
	}
}

2212 
	$c⁄f_ˇche_öô
(
c⁄f_ˇche
 *
cc
)

2214 
cc
->
ˇche_vîsi⁄
 = 0;

2215 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
cc
->
max˛õ¡s
);

2216 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
cc
->
ªquúïass
);

2217 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
cc
->
admö∑ss
);

2218 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
cc
->
maxmem‹y
);

2219 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MTCLIMIT
,&
cc
->
max_time_com∂exôy_limô
);

2220 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGLST
,&
cc
->
¶owlog_log_¶owî_th™
);

2222  
VR_OK
;

2223 
	}
}

2226 
	$c⁄f_ˇche_deöô
(
c⁄f_ˇche
 *
cc
)

2228 
cc
->
ˇche_vîsi⁄
 = 0;

2229 i‡(
cc
->
ªquúïass
 !
NULL
) {

2230 
	`sds‰ì
(
cc
->
ªquúïass
);

2231 
cc
->
ªquúïass
 = 
NULL
;

2233 i‡(
cc
->
admö∑ss
 !
NULL
) {

2234 
	`sds‰ì
(
cc
->
admö∑ss
);

2235 
cc
->
admö∑ss
 = 
NULL
;

2238  
VR_OK
;

2239 
	}
}

2242 
	$c⁄f_ˇche_upd©e
(
c⁄f_ˇche
 *
cc
)

2244 
cvîsi⁄
 = 
	`c⁄f_vîsi⁄_gë
();

2247 i‡(
cvîsi⁄
 <
cc
->
ˇche_vîsi⁄
) {

2251 i‡(
cc
->
ªquúïass
 !
NULL
) {

2252 
	`sds‰ì
(
cc
->
ªquúïass
);

2253 
cc
->
ªquúïass
 = 
NULL
;

2255 i‡(
cc
->
admö∑ss
 !
NULL
) {

2256 
	`sds‰ì
(
cc
->
admö∑ss
);

2257 
cc
->
admö∑ss
 = 
NULL
;

2260 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
cc
->
max˛õ¡s
);

2261 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
cc
->
ªquúïass
);

2262 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
cc
->
admö∑ss
);

2263 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
cc
->
maxmem‹y
);

2264 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MTCLIMIT
,&
cc
->
max_time_com∂exôy_limô
);

2265 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGLST
,&
cc
->
¶owlog_log_¶owî_th™
);

2267 
cc
->
ˇche_vîsi⁄
 = 
cvîsi⁄
;

2269  
VR_OK
;

2270 
	}
}

	@src/vr_conf.c

1 
	~<f˙é.h
>

3 
	~<vr_c‹e.h
>

5 c⁄° *(*
	tc⁄figEnumGëSåFun
)(
	tty≥
);

7 
	#CONF_TOKEN_ORGANIZATION_START
 "["

	)

8 
	#CONF_TOKEN_ORGANIZATION_END
 "]"

	)

9 
	#CONF_TOKEN_KEY_VALUE_BETWEEN
 ":"

	)

10 
	#CONF_TOKEN_ARRAY_START
 "-"

	)

12 
	#CONF_ORGANIZATION_NAME_COMMAN
 "comm⁄"

	)

13 
	#CONF_ORGANIZATION_NAME_SERVER
 "£rvî"

	)

15 
	#CONF_VALUE_YES
 "yes"

	)

16 
	#CONF_VALUE_NO
 "no"

	)

18 
	#CONF_MAX_LINE
 1024

	)

20 
	#CONF_TAG_DEFAULT_TYPE
 
GROUP_TYPE_SINGLE


	)

21 
	#CONF_TAG_DEFAULT_HASH
 
HASH_FNV1_64


	)

22 
	#CONF_TAG_DEFAULT_HASH_TAG
 
NULL


	)

23 
	#CONF_TAG_DEFAULT_DISTRIBUTION
 "këama"

	)

24 
	#CONF_TAG_DEFAULT_REDIS_AUTH
 
NULL


	)

25 
	#CONF_TAG_DEFAULT_REDIS_DB
 0

	)

26 
	#CONF_TAG_DEFAULT_TIMEOUT
 300

	)

27 
	#CONF_TAG_DEFAULT_SERVERS
 "127.0.0.1:6379"

	)

28 
	#CONF_TAG_DEFAULT_LISTEN
 "127.0.0.1:6380"

	)

29 
	#CONF_TAG_DEFAULT_MAXMEMORY
 1073741824

30 
	#CONF_TAG_DEFAULT_THREADS
 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)

	)

31 
	#CONF_TAG_DEFAULT_NOREPLY
 "Ál£"

	)

32 
	#CONF_TAG_DEFAULT_RDB_DISKLESS
 "Ál£"

	)

34 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë(*)(#_«me),

	)

35 * 
	ghash_°rögs
[] = {

36 
HASH_CODEC
–
DEFINE_ACTION
 )

37 
NULL


39 #unde‡
DEFINE_ACTION


41 
	#DEFINE_ACTION
(
_di°
, 
_«me
Ë(*)(#_«me),

	)

42 * 
	gdi°_°rögs
[] = {

43 
DIST_CODEC
–
DEFINE_ACTION
 )

44 
NULL


46 #unde‡
DEFINE_ACTION


48 
	#DEFINE_ACTION
(
_pﬁicy
, 
_«me
Ë(*)(#_«me),

	)

50 * 
	gevi˘pﬁicy_°rögs
[] = {

51 
EVICTPOLICY_CODEC
–
DEFINE_ACTION
 )

52 
NULL


54 #unde‡
DEFINE_ACTION


56 
c⁄f_›ti⁄
 
	gc⁄f_£rvî_›ti⁄s
[] = {

57 { (*)
CONFIG_SOPN_DATABASES
,

58 
CONF_FIELD_TYPE_INT
, 1,

59 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

60 
off£tof
(
c⁄f_£rvî
, 
d©aba£s
) },

61 { (*)
CONFIG_SOPN_IDPDATABASE
,

62 
CONF_FIELD_TYPE_INT
, 1,

63 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

64 
off£tof
(
c⁄f_£rvî
, 
öã∫Æ_dbs_≥r_d©aba£s
) },

65 { (*)
CONFIG_SOPN_MAXMEMORY
,

66 
CONF_FIELD_TYPE_LONGLONG
, 0,

67 
c⁄f_£t_maxmem‹y
, 
c⁄f_gë_l⁄gl⁄g
,

68 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y
) },

69 { (*)
CONFIG_SOPN_MAXMEMORYP
,

70 
CONF_FIELD_TYPE_INT
, 0,

71 
c⁄f_£t_maxmem‹y_pﬁicy
, 
c⁄f_gë_öt
,

72 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y_pﬁicy
) },

73 { (*)
CONFIG_SOPN_MAXMEMORYS
,

74 
CONF_FIELD_TYPE_INT
, 0,

75 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

76 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y_ßm∂es
) },

77 { (*)
CONFIG_SOPN_MTCLIMIT
,

78 
CONF_FIELD_TYPE_LONGLONG
, 0,

79 
c⁄f_£t_l⁄gl⁄g
, 
c⁄f_gë_l⁄gl⁄g
,

80 
off£tof
(
c⁄f_£rvî
, 
max_time_com∂exôy_limô
) },

81 { (*)
CONFIG_SOPN_BIND
,

82 
CONF_FIELD_TYPE_ARRAYSDS
, 1,

83 
c⁄f_£t_¨øy_sds
, 
c⁄f_gë_¨øy_sds
,

84 
off£tof
(
c⁄f_£rvî
, 
böds
) },

85 { (*)
CONFIG_SOPN_PORT
,

86 
CONF_FIELD_TYPE_INT
, 1,

87 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

88 
off£tof
(
c⁄f_£rvî
, 
p‹t
) },

89 { (*)
CONFIG_SOPN_THREADS
,

90 
CONF_FIELD_TYPE_INT
, 1,

91 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

92 
off£tof
(
c⁄f_£rvî
, 
thªads
) },

93 { (*)
CONFIG_SOPN_MAXCLIENTS
,

94 
CONF_FIELD_TYPE_INT
, 0,

95 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

96 
off£tof
(
c⁄f_£rvî
, 
max˛õ¡s
) },

97 { (*)
CONFIG_SOPN_SLOWLOGLST
,

98 
CONF_FIELD_TYPE_LONGLONG
, 0,

99 
c⁄f_£t_l⁄gl⁄g
, 
c⁄f_gë_l⁄gl⁄g
,

100 
off£tof
(
c⁄f_£rvî
, 
¶owlog_log_¶owî_th™
) },

101 { (*)
CONFIG_SOPN_SLOWLOGML
,

102 
CONF_FIELD_TYPE_INT
, 0,

103 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

104 
off£tof
(
c⁄f_£rvî
, 
¶owlog_max_Àn
) },

105 { (*)
CONFIG_SOPN_REQUIREPASS
,

106 
CONF_FIELD_TYPE_SDS
, 0,

107 
c⁄f_£t_∑ssw‹d
, 
c⁄f_gë_sds
,

108 
off£tof
(
c⁄f_£rvî
, 
ªquúïass
) },

109 { (*)
CONFIG_SOPN_ADMINPASS
,

110 
CONF_FIELD_TYPE_SDS
, 0,

111 
c⁄f_£t_∑ssw‹d
, 
c⁄f_gë_sds
,

112 
off£tof
(
c⁄f_£rvî
, 
admö∑ss
) },

113 { (*)
CONFIG_SOPN_COMMANDSNAP
,

114 
CONF_FIELD_TYPE_ARRAYSDS
, 1,

115 
c⁄f_£t_comm™ds_√ed_admö∑ss
, 
c⁄f_gë_¨øy_sds
,

116 
off£tof
(
c⁄f_£rvî
, 
comm™ds_√ed_admö∑ss
) },

117 { 
NULL
, NULL, 0 }

120 
vr_c⁄f
 *
	gc⁄f
 = 
NULL
;

121 
c⁄f_£rvî
 *
	gc£rvî
 = 
NULL
;

124 
	$c⁄f_vÆue_dump
(
c⁄f_vÆue
 *
cv
, 
log_Àvñ
)

126 
uöt32_t
 
i
;

127 
c⁄f_vÆue
 **
cv_sub
;

129 if(
cv
 =
NULL
){

133 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

134 
	`log_debug
(
log_Àvñ
, "%.*s", 
	`sd¶í
(
cv
->
vÆue
), cv->value);

135 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

136 
i
 = 0; i < 
	`d¨øy_n
(
cv
->
vÆue
); i++){

137 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
i
);

138 
	`c⁄f_vÆue_dump
(*
cv_sub
, 
log_Àvñ
);

141 
	`NOT_REACHED
();

143 
	}
}

147 
	$c⁄f_‹g™iz©i⁄_dump
(
sds
 
«me
, 
di˘
 *
‹g
, 
log_Àvñ
)

149 
di˘Iãøt‹
 *
di
;

150 
di˘E¡ry
 *
de
;

151 
sds
 
key
;

152 
c⁄f_vÆue
 *
cv
;

154 if(
«me
 =
NULL
 || 
‹g
 == NULL){

158 
	`log_debug
(
log_Àvñ
, "[%.*s]", 
	`sd¶í
(
«me
),Çame);

160 
di
 = 
	`di˘GëIãøt‹
(
‹g
);

162 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
){

163 
key
 = 
	`di˘GëKey
(
de
);

164 
cv
 = 
	`di˘GëVÆ
(
de
);

166 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

167 
	`log_debug
(
log_Àvñ
, "%.*s: %.*s",

168 
	`sd¶í
(
key
), key,

169 
	`sd¶í
(
cv
->
vÆue
), cv->value);

170 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

171 
	`log_debug
(
log_Àvñ
, "%.*s:",
	`sd¶í
(
key
), key);

172 
	`c⁄f_vÆue_dump
(
cv
, 
log_Àvñ
);

174 
	`NOT_REACHED
();

178 
	`di˘Rñó£Iãøt‹
(
di
);

179 
	}
}

182 
	$c⁄f_‹g™iz©i⁄s_dump
(
vr_c⁄f
 *
cf
)

184 
di˘
 *
‹gs
, *
‹g
;

185 
di˘Iãøt‹
 *
di
;

186 
di˘E¡ry
 *
de
;

187 
sds
 
«me
;

188 
log_Àvñ
 = 
LOG_VERB
;

190 if(
cf
 =
NULL
){

194 
‹gs
 = 
cf
->
‹g™iz©i⁄s
;

195 if(
‹gs
 =
NULL
){

196 
	`log_debug
(
log_Àvñ
, "organization is NULL");

200 
di
 = 
	`di˘GëIãøt‹
(
‹gs
);

202 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
){

203 
«me
 = 
	`di˘GëKey
(
de
);

204 
‹g
 = 
	`di˘GëVÆ
(
de
);

206 
	`c⁄f_‹g™iz©i⁄_dump
(
«me
, 
‹g
, 
log_Àvñ
);

207 
	`log_debug
(
log_Àvñ
, "");

210 
	`di˘Rñó£Iãøt‹
(
di
);

211 
	}
}

215 
	$c⁄f_£t_maxmem‹y
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

217 
uöt8_t
 *
p
;

218 
c⁄f_vÆue
 *
cv
 = 
d©a
;

219 
vÆue
;

220 *
gt
;

221 
îr
;

223 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

224 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

225 
›t
->
«me
);

226  
VR_ERROR
;

229 
	`CONF_WLOCK
();

231 
p
 = 
obj
;

232 
gt
 = (*)(
p
 + 
›t
->
off£t
);

234 
vÆue
 = 
	`memtﬁl
(
cv
->vÆue, &
îr
);

235 if(
îr
 !0 || 
vÆue
 < 0){

236 
	`CONF_UNLOCK
();

237 
	`log_îr‹
("value forÅhe key %s in conf file is invalid",

238 
›t
->
«me
);

239  
VR_ERROR
;

242 *
gt
 = 
vÆue
;

243 
c⁄f
->
vîsi⁄
 ++;

244 
	`CONF_UNLOCK
();

245  
VR_OK
;

246 
	}
}

249 
	$c⁄f_£t_maxmem‹y_pﬁicy
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

251 
uöt8_t
 *
p
;

252 
c⁄f_vÆue
 *
cv
 = 
d©a
;

253 *
gt
;

254 **
pﬁicy
;

256 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

257 
	`log_îr‹
("conf server inÅhe conf file isÇotá string");

258  
VR_ERROR
;

261 
	`CONF_WLOCK
();

263 
p
 = 
obj
;

264 
gt
 = (*)(
p
 + 
›t
->
off£t
);

266 
pﬁicy
 = 
evi˘pﬁicy_°rögs
; *policy;Öolicy ++) {

267 i‡(
	`°rcmp
(
cv
->
vÆue
, *
pﬁicy
) == 0) {

269 *
gt
 = 
pﬁicy
 - 
evi˘pﬁicy_°rögs
;

274 i‡(*
pﬁicy
 =
NULL
) {

275 
	`CONF_UNLOCK
();

276 
	`log_îr‹
("ERROR: Conf maxmemoryÖolicy '%s' is invalid",

277 
cv
->
vÆue
);

278  
VR_ERROR
;

281 i‡(*
gt
 =
MAXMEMORY_VOLATILE_LRU
 || *gà=
MAXMEMORY_ALLKEYS_LRU
) {

282 
	`CONF_UNLOCK
();

283 
	`log_îr‹
("ERROR: Conf maxmemoryÖolicyÇow isÇot support %sánd %s",

284 
evi˘pﬁicy_°rögs
[
MAXMEMORY_VOLATILE_LRU
],

285 
evi˘pﬁicy_°rögs
[
MAXMEMORY_ALLKEYS_LRU
]);

286  
VR_ERROR
;

289 
	`CONF_UNLOCK
();

290  
VR_OK
;

291 
	}
}

294 
	$c⁄f_£t_öt_n⁄_zîo
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

296 
uöt8_t
 *
p
;

297 
c⁄f_vÆue
 *
cv
 = 
d©a
;

298 *
gt
;

300 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

301 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

302 
›t
->
«me
);

303  
VR_ERROR
;

306 
	`CONF_WLOCK
();

309 
p
 = 
obj
;

310 
gt
 = (*)(
p
 + 
›t
->
off£t
);

312 if(!
	`sdsIsNum
(
cv
->
vÆue
)){

313 
	`CONF_UNLOCK
();

314 
	`log_îr‹
("value ofÅhe key %s in conf file isÇotáÇumber",

315 
›t
->
«me
);

316  
VR_ERROR
;

319 *
gt
 = 
	`vr_©oi
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

321 i‡(*
gt
 < 0) {

322 
	`CONF_UNLOCK
();

323 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

324 
›t
->
«me
);

325  
VR_ERROR
;

326 } i‡(*
gt
 < 1) {

327 
	`CONF_UNLOCK
();

328 
	`log_îr‹
("value ofÅhe key %s in conf file must be 1 or greater",

329 
›t
->
«me
);

330  
VR_ERROR
;

332 
c⁄f
->
vîsi⁄
 ++;

333 
	`CONF_UNLOCK
();

334  
VR_OK
;

335 
	}
}

339 
	$c⁄f_gë_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

341 
uöt8_t
 *
p
;

342 
sds
 *
°r
 = 
d©a
;

343 
sds
 *
gt
;

345 i‡(
d©a
 =
NULL
)

346  
VR_ERROR
;

348 
	`CONF_RLOCK
();

349 
p
 = 
obj
;

350 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

351 i‡(*
gt
 =
NULL
Ë*
°r
 = NULL;

352 *
°r
 = 
	`sdsdup
(*
gt
);

353 
	`CONF_UNLOCK
();

354  
VR_OK
;

355 
	}
}

358 
	$c⁄f_£t_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

360 
uöt8_t
 *
p
;

361 
c⁄f_vÆue
 *
cv
 = 
d©a
;

362 
sds
 *
gt
;

364 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

365 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string",

366 
›t
->
«me
);

367  
VR_ERROR
;

370 
	`CONF_WLOCK
();

371 
p
 = 
obj
;

372 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

374 *
gt
 = 
	`sd¢ewÀn
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

375 
c⁄f
->
vîsi⁄
 ++;

376 
	`CONF_UNLOCK
();

377  
VR_OK
;

378 
	}
}

381 
	$c⁄f_£t_∑ssw‹d
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

383 
uöt8_t
 *
p
;

384 
c⁄f_vÆue
 *
cv
 = 
d©a
;

385 
sds
 *
gt
;

387 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

388 
	`log_îr‹
("ConfÖool %s inÅhe conf file isÇotá string",

389 
›t
->
«me
);

390  
VR_ERROR
;

391 } i‡(
	`sd¶í
(
cv
->
vÆue
Ë> 
CONFIG_AUTHPASS_MAX_LEN
) {

392 
	`log_îr‹
("Password isÜongerÅhan CONFIG_AUTHPASS_MAX_LEN");

393  
VR_ERROR
;

396 
	`CONF_WLOCK
();

397 
p
 = 
obj
;

398 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

400 i‡(*
gt
 !
NULL
Ë
	`sds‰ì
(*gt);

401 i‡(
	`sd¶í
(
cv
->
vÆue
Ë=0Ë*
gt
 = 
NULL
;

402 *
gt
 = 
	`sd¢ewÀn
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

403 
c⁄f
->
vîsi⁄
 ++;

404 
	`CONF_UNLOCK
();

405  
VR_OK
;

406 
	}
}

409 
	$c⁄f_gë_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

411 
uöt8_t
 *
p
;

412 *
öãgî
 = 
d©a
;

413 *
gt
;

415 i‡(
d©a
 =
NULL
)

416  
VR_ERROR
;

418 
	`CONF_RLOCK
();

419 
p
 = 
obj
;

420 
gt
 = (*)(
p
 + 
›t
->
off£t
);

421 *
öãgî
 = *
gt
;

422 
	`CONF_UNLOCK
();

423  
VR_OK
;

424 
	}
}

427 
	$c⁄f_£t_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

429 
uöt8_t
 *
p
;

430 
c⁄f_vÆue
 *
cv
 = 
d©a
;

431 *
gt
;

433 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

434 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

435 
›t
->
«me
);

436  
VR_ERROR
;

439 
	`CONF_WLOCK
();

441 
p
 = 
obj
;

442 
gt
 = (*)(
p
 + 
›t
->
off£t
);

444 if(!
	`sdsIsNum
(
cv
->
vÆue
)){

445 
	`CONF_UNLOCK
();

446 
	`log_îr‹
("value ofÅhe key %s in conf file isÇotáÇumber",

447 
›t
->
«me
);

448  
VR_ERROR
;

451 *
gt
 = 
	`vr_©oi
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

453 i‡(*
gt
 < 0) {

454 
	`CONF_UNLOCK
();

455 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

456 
›t
->
«me
);

457  
VR_ERROR
;

459 
c⁄f
->
vîsi⁄
 ++;

460 
	`CONF_UNLOCK
();

461  
VR_OK
;

462 
	}
}

465 
	$c⁄f_gë_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

467 
uöt8_t
 *
p
;

468 *
öãgî
 = 
d©a
;

469 *
gt
;

471 i‡(
d©a
 =
NULL
)

472  
VR_ERROR
;

474 
	`CONF_RLOCK
();

475 
p
 = 
obj
;

476 
gt
 = (*)(
p
 + 
›t
->
off£t
);

477 *
öãgî
 = *
gt
;

478 
	`CONF_UNLOCK
();

479  
VR_OK
;

480 
	}
}

483 
	$c⁄f_£t_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

485 
uöt8_t
 *
p
;

486 
c⁄f_vÆue
 *
cv
 = 
d©a
;

487 *
gt
;

489 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

490 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

491 
›t
->
«me
);

492  
VR_ERROR
;

495 
	`CONF_WLOCK
();

497 
p
 = 
obj
;

498 
gt
 = (*)(
p
 + 
›t
->
off£t
);

500 i‡(!
	`°rög2Œ
(
cv
->
vÆue
, 
	`sd¶í
(cv->vÆue), 
gt
)) {

501 
	`CONF_UNLOCK
();

502 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

503 
›t
->
«me
);

504  
VR_ERROR
;

506 
c⁄f
->
vîsi⁄
 ++;

507 
	`CONF_UNLOCK
();

508  
VR_OK
;

509 
	}
}

512 
	$c⁄f_£t_yes‹no
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

514 
uöt8_t
 *
p
;

515 
c⁄f_vÆue
 *
cv
 = 
d©a
;

516 *
gt
;

518 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

519 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

520 
›t
->
«me
);

521  
VR_ERROR
;

524 
	`CONF_WLOCK
();

526 
p
 = 
obj
;

527 
gt
 = (*)(
p
 + 
›t
->
off£t
);

529 if(!
	`°rˇ£cmp
(
cv
->
vÆue
, 
CONF_VALUE_YES
)){

530 *
gt
 = 1;

531 }if(!
	`°rˇ£cmp
(
cv
->
vÆue
, 
CONF_VALUE_NO
)){

532 *
gt
 = 0;

534 
	`CONF_UNLOCK
();

535 
	`log_îr‹
("key %s in conf file must be %s or %s",

536 
›t
->
«me
, 
CONF_VALUE_YES
, 
CONF_VALUE_NO
);

537  
VR_ERROR
;

539 
c⁄f
->
vîsi⁄
 ++;

540 
	`CONF_UNLOCK
();

541  
VR_OK
;

542 
	}
}

545 
	$c⁄f_£t_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

547 
uöt8_t
 *
p
;

548 
uöt32_t
 
j
;

549 
c⁄f_vÆue
 **
cv_sub
, *
cv
 = 
d©a
;

550 
d¨øy
 *
gt
;

551 
sds
 *
°r
;

553 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
 &&

554 
cv
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
){

555 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string orárray",

556 
›t
->
«me
);

557  
VR_ERROR
;

558 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

559 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

560 i‡((*
cv_sub
)->
ty≥
 !
CONF_VALUE_TYPE_STRING
) {

561 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá stringárray",

562 
›t
->
«me
);

563  
VR_ERROR
;

567 
	`CONF_WLOCK
();

568 
p
 = 
obj
;

569 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

571 
	`d¨øy_n
(
gt
) > 0) {

572 
°r
 = 
	`d¨øy_p›
(
gt
);

573 
	`sds‰ì
(*
°r
);

576 i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
) {

577 
°r
 = 
	`d¨øy_push
(
gt
);

578 *
°r
 = 
	`sdsdup
(
cv
->
vÆue
);

579 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

580 
j
 = 0; j < 
	`d¨øy_n
(
cv
->
vÆue
); j ++) {

581 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

582 
°r
 = 
	`d¨øy_push
(
gt
);

583 *
°r
 = 
	`sdsdup
((*
cv_sub
)->
vÆue
);

586 
c⁄f
->
vîsi⁄
 ++;

587 
	`CONF_UNLOCK
();

588  
VR_OK
;

589 
	}
}

592 
	$c⁄f_£t_comm™ds_√ed_admö∑ss
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

594 
uöt8_t
 *
p
;

595 
uöt32_t
 
j
;

596 
c⁄f_vÆue
 **
cv_sub
, *
cv
 = 
d©a
;

597 
d¨øy
 *
gt
;

598 
sds
 *
°r
;

600 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
 &&

601 
cv
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
){

602 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string orárray",

603 
›t
->
«me
);

604  
VR_ERROR
;

605 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

606 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

607 i‡((*
cv_sub
)->
ty≥
 !
CONF_VALUE_TYPE_STRING
) {

608 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá stringárray",

609 
›t
->
«me
);

610  
VR_ERROR
;

614 
	`CONF_WLOCK
();

615 
p
 = 
obj
;

616 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

618 
	`d¨øy_n
(
gt
) > 0) {

619 
°r
 = 
	`d¨øy_p›
(
gt
);

620 
	`sds‰ì
(*
°r
);

623 i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
) {

624 
°r
 = 
	`d¨øy_push
(
gt
);

625 *
°r
 = 
	`sdsdup
(
cv
->
vÆue
);

626 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

627 
j
 = 0; j < 
	`d¨øy_n
(
cv
->
vÆue
); j ++) {

628 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

629 
°r
 = 
	`d¨øy_push
(
gt
);

630 *
°r
 = 
	`sdsdup
((*
cv_sub
)->
vÆue
);

633 
c⁄f
->
vîsi⁄
 ++;

634 
	`CONF_UNLOCK
();

635  
VR_OK
;

636 
	}
}

639 
	$c⁄f_gë_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

641 
uöt8_t
 *
p
;

642 
uöt32_t
 
j
;

643 
d¨øy
 *
°rs
 = 
d©a
;

644 
¨øy
 *
gt
;

645 
sds
 *
°r1
, *
°r2
;

647 i‡(
d©a
 =
NULL
) {

648  
VR_ERROR
;

651 
	`CONF_RLOCK
();

652 
p
 = 
obj
;

653 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

655 
	`ASSERT
(
	`d¨øy_n
(
°rs
) == 0);

657 
j
 = 0; j < 
	`d¨øy_n
(
gt
); j ++) {

658 
°r1
 = 
	`d¨øy_gë
(
gt
, 
j
);

659 
°r2
 = 
	`d¨øy_push
(
°rs
);

660 *
°r2
 = 
	`sdsdup
(*
°r1
);

663 
	`CONF_UNLOCK
();

664  
VR_OK
;

665 
	}
}

667 
	$di˘C⁄fVÆueDe°ru˘‹
(*
¥ivd©a
, *
vÆ
)

669 
	`DICT_NOTUSED
(
¥ivd©a
);

671 
	`c⁄f_vÆue_de°roy
(
vÆ
);

672 
	}
}

674 
	$di˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

676 
	`DICT_NOTUSED
(
¥ivd©a
);

678 
	`di˘Rñó£
(
vÆ
);

679 
	}
}

682 
di˘Ty≥
 
	gOrg™iz©i⁄Di˘Ty≥
 = {

683 
di˘SdsHash
,

684 
NULL
,

685 
NULL
,

686 
di˘SdsKeyCom∑ª
,

687 
di˘SdsDe°ru˘‹
,

688 
di˘De°ru˘‹


692 
di˘Ty≥
 
	gKeyVÆueDi˘Ty≥
 = {

693 
di˘SdsHash
,

694 
NULL
,

695 
NULL
,

696 
di˘SdsKeyCom∑ª
,

697 
di˘SdsDe°ru˘‹
,

698 
di˘C⁄fVÆueDe°ru˘‹


702 
di˘Ty≥
 
	gC⁄fTabÀDi˘Ty≥
 = {

703 
di˘SåCa£Hash
,

704 
NULL
,

705 
NULL
,

706 
di˘SåKeyCa£Com∑ª
,

707 
NULL
,

708 
NULL


712 
c⁄f_vÆue
 *
	$c⁄f_vÆue_¸óã
(
ty≥
)

714 
c⁄f_vÆue
 *
cv
;

716 
cv
 = 
	`dÆloc
((*cv));

717 if(
cv
 =
NULL
){

718  
NULL
;

721 
cv
->
ty≥
 =Åype;

722 
cv
->
vÆue
 = 
NULL
;

724 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

725 
cv
->
vÆue
 = 
	`d¨øy_¸óã
(3, (
c⁄f_vÆue
*));

726 if(
cv
->
vÆue
 =
NULL
){

727 
	`d‰ì
(
cv
);

728  
NULL
;

732  
cv
;

733 
	}
}

736 
	$c⁄f_vÆue_de°roy
(
c⁄f_vÆue
 *
cv
)

738 
c⁄f_vÆue
 **
cv_sub
;

740 if(
cv
 =
NULL
){

744 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_UNKNOW
){

745 
	`d‰ì
(
cv
);

747 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

748 if(
cv
->
vÆue
 !
NULL
){

749 
	`sds‰ì
(
cv
->
vÆue
);

751 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

752 if(
cv
->
vÆue
 !
NULL
){

753 
	`d¨øy_n
(
cv
->
vÆue
) > 0){

754 
cv_sub
 = 
	`d¨øy_p›
(
cv
->
vÆue
);

755 
	`c⁄f_vÆue_de°roy
(*
cv_sub
);

758 
	`d¨øy_de°roy
(
cv
->
vÆue
);

761 
	`NOT_REACHED
();

764 
	`d‰ì
(
cv
);

765 
	}
}

768 
	$c⁄f_£rvî_öô
(
c⁄f_£rvî
 *
cs
)

770 if(
cs
 =
NULL
){

771  
VR_ERROR
;

774 
cs
->
˘abÀ
 = 
	`di˘Cª©e
(&
C⁄fTabÀDi˘Ty≥
,
NULL
);

776 
cs
->
d©aba£s
 = 
CONF_UNSET_NUM
;

777 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONF_UNSET_NUM
;

778 
cs
->
max_time_com∂exôy_limô
 = 
CONF_UNSET_NUM
;

779 
cs
->
maxmem‹y
 = 
CONF_UNSET_NUM
;

780 
cs
->
maxmem‹y_pﬁicy
 = 
CONF_UNSET_NUM
;

781 
cs
->
maxmem‹y_ßm∂es
 = 
CONF_UNSET_NUM
;

782 
cs
->
max˛õ¡s
 = 
CONF_UNSET_NUM
;

783 
cs
->
thªads
 = 
CONF_UNSET_NUM
;

784 
	`d¨øy_öô
(&
cs
->
böds
,1,(
sds
));

785 
cs
->
p‹t
 = 
CONF_UNSET_NUM
;

786 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

787 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

788 
cs
->
dú
 = 
CONF_UNSET_PTR
;

789 
	`d¨øy_öô
(&
cs
->
comm™ds_√ed_admö∑ss
,1,(
sds
));

791  
VR_OK
;

792 
	}
}

795 
	$c⁄f_£rvî_£t_deÁu…
(
c⁄f_£rvî
 *
cs
)

797 
sds
 *
°r
;

798 
c⁄f_›ti⁄
 *
›t
;

800 if(
cs
 =
NULL
){

801  
VR_ERROR
;

804 
›t
 = 
c⁄f_£rvî_›ti⁄s
; o±&&›t->
«me
; opt++) {

805 
	`di˘Add
(
cs
->
˘abÀ
,
›t
->
«me
,opt);

808 
cs
->
d©aba£s
 = 
CONFIG_DEFAULT_LOGICAL_DBNUM
;

809 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONFIG_DEFAULT_INTERNAL_DBNUM
;

810 
cs
->
max_time_com∂exôy_limô
 = 
CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
;

811 
cs
->
maxmem‹y
 = 
CONFIG_DEFAULT_MAXMEMORY
;

812 
cs
->
maxmem‹y_pﬁicy
 = 
CONFIG_DEFAULT_MAXMEMORY_POLICY
;

813 
cs
->
maxmem‹y_ßm∂es
 = 
CONFIG_DEFAULT_MAXMEMORY_SAMPLES
;

814 
cs
->
max˛õ¡s
 = 
CONFIG_DEFAULT_MAX_CLIENTS
;

815 
cs
->
thªads
 = 
CONFIG_DEFAULT_THREADS_NUM
;

816 
cs
->
¶owlog_log_¶owî_th™
 = 
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
;

817 
cs
->
¶owlog_max_Àn
 = 
CONFIG_DEFAULT_SLOWLOG_MAX_LEN
;

818 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

819 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

821 
	`d¨øy_n
(&
cs
->
böds
) > 0) {

822 
°r
 = 
	`d¨øy_p›
(&
cs
->
böds
);

823 
	`sds‰ì
(*
°r
);

825 
°r
 = 
	`d¨øy_push
(&
cs
->
böds
);

826 *
°r
 = 
	`sd¢ew
(
CONFIG_DEFAULT_HOST
);

828 
cs
->
p‹t
 = 
CONFIG_DEFAULT_SERVER_PORT
;

830 i‡(
cs
->
dú
 !
CONF_UNSET_PTR
) {

831 
	`sds‰ì
(
cs
->
dú
);

833 
cs
->
dú
 = 
	`sd¢ew
(
CONFIG_DEFAULT_DATA_DIR
);

835 
	`d¨øy_n
(&
cs
->
comm™ds_√ed_admö∑ss
) > 0) {

836 
°r
 = 
	`d¨øy_p›
(&
cs
->
comm™ds_√ed_admö∑ss
);

837 
	`sds‰ì
(*
°r
);

840  
VR_OK
;

841 
	}
}

843 
	$c⁄f_£rvî_deöô
(
c⁄f_£rvî
 *
cs
)

845 
sds
 *
°r
;

847 if(
cs
 =
NULL
){

851 
cs
->
d©aba£s
 = 
CONF_UNSET_NUM
;

852 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONF_UNSET_NUM
;

853 
cs
->
maxmem‹y
 = 
CONF_UNSET_NUM
;

854 
cs
->
maxmem‹y_pﬁicy
 = 
CONF_UNSET_NUM
;

855 
cs
->
maxmem‹y_ßm∂es
 = 
CONF_UNSET_NUM
;

856 
cs
->
max_time_com∂exôy_limô
 = 
CONF_UNSET_NUM
;

857 
cs
->
max˛õ¡s
 = 
CONF_UNSET_NUM
;

858 
cs
->
thªads
 = 
CONF_UNSET_NUM
;

860 
	`d¨øy_n
(&
cs
->
böds
) > 0) {

861 
°r
 = 
	`d¨øy_p›
(&
cs
->
böds
);

862 
	`sds‰ì
(*
°r
);

864 
	`d¨øy_deöô
(&
cs
->
böds
);

866 
cs
->
p‹t
 = 
CONF_UNSET_NUM
;

868 i‡(
cs
->
dú
 !
CONF_UNSET_PTR
) {

869 
	`sds‰ì
(
cs
->
dú
);

870 
cs
->
dú
 = 
CONF_UNSET_PTR
;

873 i‡(
cs
->
ªquúïass
 !
CONF_UNSET_PTR
) {

874 
	`sds‰ì
(
cs
->
ªquúïass
);

875 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

877 i‡(
cs
->
admö∑ss
 !
CONF_UNSET_PTR
) {

878 
	`sds‰ì
(
cs
->
admö∑ss
);

879 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

882 
	`d¨øy_n
(&
cs
->
comm™ds_√ed_admö∑ss
) > 0) {

883 
°r
 = 
	`d¨øy_p›
(&
cs
->
comm™ds_√ed_admö∑ss
);

884 
	`sds‰ì
(*
°r
);

886 
	`d¨øy_deöô
(&
cs
->
comm™ds_√ed_admö∑ss
);

887 
	}
}

891 
	$c⁄f_£rvî_gë
(c⁄° *
›ti⁄_«me
, *
vÆue
)

893 
c⁄f_›ti⁄
 *
›t
;

895 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
›ti⁄_«me
);

896 i‡(
›t
 =
NULL
)

897  
VR_ERROR
;

899  
›t
->
	`gë
(
c£rvî
, o±, 
vÆue
);

900 
	}
}

903 
	$c⁄f_£rvî_£t
(c⁄° *
›ti⁄_«me
, 
c⁄f_vÆue
 *
vÆue
)

905 
c⁄f_›ti⁄
 *
›t
;

907 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
›ti⁄_«me
);

908 i‡(
›t
 =
NULL
 || o±->
Êags
&
CONF_FIELD_FLAGS_NO_MODIFY
)

909  
VR_ERROR
;

911  
›t
->
	`£t
(
c£rvî
, o±, 
vÆue
);

912 
	}
}

915 
	$c⁄f_öô
(
vr_c⁄f
 *
cf
)

917 
ªt
;

919 if(
cf
 =
NULL
){

920  
VR_ERROR
;

924 
cf
->
‚ame
 = 
NULL
;

926 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

928 
cf
->
vîsi⁄
 = 0;

929 
	`±hªad_rwlock_öô
(&
cf
->
rwl
, 
NULL
);

930 
	`±hªad_muãx_öô
(&
cf
->
Êock
, 
NULL
);

932 
cf
->
‹g™iz©i⁄s
 = 
	`di˘Cª©e
(&
Org™iz©i⁄Di˘Ty≥
, 
NULL
);

933 i‡(
cf
->
‹g™iz©i⁄s
 =
NULL
) {

934  
VR_ERROR
;

938 
	`c⁄f_£rvî_öô
(&
cf
->
c£rvî
);

940 
c⁄f
 = 
cf
;

942  
VR_OK
;

943 
	}
}

946 
	$c⁄f_£t_deÁu…
(
vr_c⁄f
 *
cf
)

948 
	`CONF_WLOCK
();

949 
	`c⁄f_£rvî_£t_deÁu…
(&
cf
->
c£rvî
);

950 
	`CONF_UNLOCK
();

951  
VR_OK
;

952 
	}
}

954 
	$c⁄f_deöô
(
vr_c⁄f
 *
cf
)

956 if(
cf
 =
NULL
){

960 i‡(
cf
->
‚ame
 !
NULL
) {

961 
	`sds‰ì
(
cf
->
‚ame
);

962 
cf
->
‚ame
 = 
NULL
;

965 if(
cf
->
‹g™iz©i⁄s
 !
NULL
){

966 
	`di˘Rñó£
(
cf
->
‹g™iz©i⁄s
);

967 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

970 
	`c⁄f_£rvî_deöô
(&
cf
->
c£rvî
);

972 
cf
->
vîsi⁄
 = 0;

973 
	`±hªad_rwlock_de°roy
(&
cf
->
rwl
);

974 
	`±hªad_muãx_de°roy
(&
cf
->
Êock
);

975 
	}
}

979 
	$c⁄f_£rvî_dump
(
c⁄f_£rvî
 *
cs
, 
log_Àvñ
)

981 if(
cs
 =
NULL
){

985 
	`log_debug
(
log_Àvñ
, " d©aba£†: %d", 
cs
->
d©aba£s
);

986 
	`log_debug
(
log_Àvñ
, " i¡î«l_dbs_≥r_d©aba£†: %d", 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
);

987 
	`log_debug
(
log_Àvñ
, " maxmem‹y : %Œd", 
cs
->
maxmem‹y
);

988 
	`log_debug
(
log_Àvñ
, " maxmem‹y_pﬁicy : %d", 
cs
->
maxmem‹y_pﬁicy
);

989 
	`log_debug
(
log_Àvñ
, " maxmem‹y_ßm∂e†: %d", 
cs
->
maxmem‹y_ßm∂es
);

990 
	`log_debug
(
log_Àvñ
, " max_time_com∂exôy_limô : %Œd", 
cs
->
max_time_com∂exôy_limô
);

991 
	}
}

995 
	$c⁄f_dump
(
vr_c⁄f
 *
cf
)

997 
log_Àvñ
 = 
LOG_VERB
;

998 
c⁄f_£rvî
 *
cs
;

1000 if(
cf
 =
NULL
){

1004 
cs
 = &
cf
->
c£rvî
;

1005 
	`log_debug
(
log_Àvñ
, "server in conf file");

1006 
	`c⁄f_£rvî_dump
(
cs
, 
log_Àvñ
);

1007 
	`log_debug
(
log_Àvñ
, "");

1008 
	}
}

1015 
	$c⁄f_key_vÆue_ö£π
(
di˘
 *
‹g
, 
sds
 
key
, 
c⁄f_vÆue
 *
cv
)

1017 i‡(
key
 =
NULL
) {

1018 
	`log_îr‹
("value in conf file hasÇo key");

1022 i‡(
cv
 =
NULL
) {

1023 
	`log_îr‹
("key %†ö c⁄‡fûêha†nÿvÆue", 
key
);

1027 i‡(
‹g
 =
NULL
) {

1028 
	`log_îr‹
("key %s in conf file hasÇo organization",

1029 
key
);

1033 i‡(
	`di˘Add
(
‹g
,
key
,
cv
Ë!
DICT_OK
) {

1034 
di˘E¡ry
 *
de
;

1035 
c⁄f_vÆue
 *
cv_ﬁd
, *
cv_√w
, **
cv_sub
;

1036 
de
 = 
	`di˘Föd
(
‹g
,
key
);

1037 
cv_ﬁd
 = 
	`di˘GëVÆ
(
de
);

1038 i‡(
cv_ﬁd
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
) {

1039 
cv_√w
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_ARRAY
);

1040 
cv_sub
 = 
	`d¨øy_push
(
cv_√w
->
vÆue
);

1041 *
cv_sub
 = 
cv_ﬁd
;

1042 
cv_sub
 = 
	`d¨øy_push
(
cv_√w
->
vÆue
);

1043 *
cv_sub
 = 
cv
;

1044 
	`di˘SëVÆ
(
‹g
,
de
,
cv_√w
);

1046 
cv_sub
 = 
	`d¨øy_push
(
cv_ﬁd
->
vÆue
);

1047 *
cv_sub
 = 
cv
;

1053 
	}
}

1057 
	$c⁄f_¥e_lﬂd_‰om_°rög
(
vr_c⁄f
 *
cf
, *
c⁄fig
)

1059 
ªt
;

1060 
löíum
 = 0, 
tŸlöes
, 
i
, 
j
;

1061 
¶aveof_löíum
 = 0;

1062 
sds
 *
löes
 = 
NULL
;

1063 
di˘
 *
‹g
 = 
NULL
;

1064 
sds
 
‹g_«me
 = 
NULL
;

1065 
di˘E¡ry
 *
de
;

1066 
sds
 
key
 = 
NULL
;

1067 
c⁄f_vÆue
 *
cv
 = 
NULL
;

1069 
löes
 = 
	`sds•lôÀn
(
c⁄fig
,
	`°æí
(c⁄fig),"\n",1,&
tŸlöes
);

1073 
i
 = 0; i < 
tŸlöes
; i++) {

1074 
sds
 *
¨gv
;

1075 
¨gc
;

1077 
löíum
 = 
i
+1;

1079 
löes
[
i
] = 
	`sd°rim
(lines[i]," \t\r\n");

1083 i‡(
löes
[
i
][0] == '#' ||Üines[i][0] == '\0') ;

1086 i‡(
löes
[
i
][0] == '[') {

1088 i‡(
	`sd¶í
(
löes
[
i
]) <= 2 ||Üines[i][sdslen(lines[i])-1] == ']') {

1089 
	`log_îr‹
("OrganizationÇame %s in conf file %sÉrror",

1090 
löes
[
i
], 
cf
->
‚ame
);

1091 
lﬂdîr
;

1094 
‹g_«me
 = 
	`sd¢ewÀn
(
löes
[
i
]+1,
	`sd¶í
(lines[i])-2);

1095 
de
 = 
	`di˘Föd
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
);

1096 i‡(
de
 =
NULL
) {

1098 
‹g
 = 
	`di˘Cª©e
(&
KeyVÆueDi˘Ty≥
, 
NULL
);

1099 
	`di˘Add
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
,
‹g
);

1102 
‹g
 = 
	`di˘GëVÆ
(
de
);

1103 
	`sds‰ì
(
‹g_«me
);

1112 
¨gv
 = 
	`sds•lô¨gs
(
löes
[
i
],&
¨gc
);

1113 i‡(
¨gv
 =
NULL
) {

1114 
	`log_îr‹
("Unbalanced quotes in configurationÜine");

1115 
lﬂdîr
;

1119 i‡(
¨gc
 == 0) {

1120 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1124 
	`sd°ﬁowî
(
¨gv
[0]);

1127 i‡(
‹g
 =
NULL
) {

1128 
‹g_«me
 = 
	`sd¢ew
("server");

1129 
‹g
 = 
	`di˘Cª©e
(&
KeyVÆueDi˘Ty≥
, 
NULL
);

1130 
	`di˘Add
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
,
‹g
);

1134 
key
 = 
¨gv
[0];

1135 
¨gv
[0] = 
NULL
;

1136 
j
 = 1; j < 
¨gc
; j ++) {

1138 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1139 
cv
->
vÆue
 = 
¨gv
[
j
];

1140 
¨gv
[
j
] = 
NULL
;

1141 
ªt
 = 
	`c⁄f_key_vÆue_ö£π
(
‹g
, 
key
, 
cv
);

1142 if(
ªt
 == -1){

1143 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1144 
	`sds‰ì
(
key
);

1145 
	`c⁄f_vÆue_de°roy
(
cv
);

1146 
	`log_îr‹
("key value insert into organization failed");

1147 
lﬂdîr
;

1148 } i‡(
j
 =1 && 
ªt
 == 0) {

1149 
	`sds‰ì
(
key
);

1153 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1156 i‡(
löes
) {

1157 
	`sds‰ì•lôªs
(
löes
,
löíum
);

1159  
VR_OK
;

1161 
lﬂdîr
:

1162 i‡(
löes
) {

1163 
	`sds‰ì•lôªs
(
löes
,
löíum
);

1165  
VR_ERROR
;

1166 
	}
}

1170 
	$c⁄f_¥e_vÆid©e
(
vr_c⁄f
 *
cf
)

1172 
ªt
;

1173 
sds
 
c⁄fig
 = 
	`sd£m±y
();

1174 
buf
[
CONF_MAX_LINE
+1];

1178 i‡(
cf
->
‚ame
) {

1179 
FILE
 *
Â
;

1181 i‡(
cf
->
‚ame
[0] == '-' && cf->fname[1] == '\0') {

1182 
Â
 = 
°dö
;

1184 i‡((
Â
 = 
	`f›í
(
cf
->
‚ame
,"r")Ë=
NULL
) {

1185 
	`log_îr‹
("O≥¿c⁄fig fûê'%s' faûed: %s", 
cf
->
‚ame
, 
	`°ªº‹
(
î∫o
));

1186 
	`sds‰ì
(
c⁄fig
);

1187  
VR_ERROR
;

1190 
	`fgës
(
buf
,
CONF_MAX_LINE
+1,
Â
Ë!
NULL
)

1191 
c⁄fig
 = 
	`sdsˇt
(c⁄fig,
buf
);

1192 i‡(
Â
 !
°dö
Ë
	`f˛o£
(fp);

1195 
ªt
 = 
	`c⁄f_¥e_lﬂd_‰om_°rög
(
cf
,
c⁄fig
);

1196 i‡(
ªt
 !
VR_OK
) {

1197 
	`sds‰ì
(
c⁄fig
);

1198  
VR_ERROR
;

1201 
	`sds‰ì
(
c⁄fig
);

1202  
VR_OK
;

1203 
	}
}

1207 
	$c⁄f_∑r£_c⁄f_£rvî
(
c⁄f_£rvî
 *
cs
, 
di˘
 *
‹g
)

1209 
ªt
;

1210 
c⁄f_›ti⁄
 *
›t
;

1211 
di˘E¡ry
 *
de
;

1212 
sds
 
key
;

1214 if(
cs
 =
NULL
 || 
‹g
 == NULL){

1215  
VR_ERROR
;

1218 
key
 = 
	`sd£m±y
();

1220 
›t
 = 
c⁄f_£rvî_›ti⁄s
; o±&&›t->
«me
; opt++) {

1221 
key
 = 
	`sds˝y
(key,
›t
->
«me
);

1223 
de
 = 
	`di˘Föd
(
‹g
,
key
);

1225 i‡(
de
 !
NULL
) {

1227 
ªt
 = 
›t
->
	`£t
(
cs
, o±, 
	`di˘GëVÆ
(
de
));

1228 if(
ªt
 !
VR_OK
){

1229 
	`log_îr‹
("∑r£ key %†ö c⁄‡fûêîr‹", 
key
);

1230 
	`sds‰ì
(
key
);

1231  
VR_ERROR
;

1236 
	`sds‰ì
(
key
);

1237  
VR_OK
;

1238 
	}
}

1243 
	$c⁄f_∑r£
(
vr_c⁄f
 *
cf
)

1245 
ªt
;

1246 
di˘
 *
‹gs
, *
‹g
;

1247 
di˘E¡ry
 *
de
;

1248 
sds
 
key
;

1250 i‡(
cf
 =
NULL
) {

1251  
VR_ERROR
;

1254 
‹gs
 = 
cf
->
‹g™iz©i⁄s
;

1255 i‡(
‹gs
 =
NULL
) {

1256  
VR_ERROR
;

1261 
key
 = 
	`sd¢ew
(
CONF_ORGANIZATION_NAME_SERVER
);

1262 
de
 = 
	`di˘Föd
(
‹gs
, 
key
);

1263 i‡(
de
 =
NULL
) {

1264 
	`log_îr‹
("canÇot find %s organization in conf file %s",

1265 
CONF_ORGANIZATION_NAME_SERVER
, 
cf
->
‚ame
);

1266 
	`sds‰ì
(
key
);

1267  
VR_ERROR
;

1270 
‹g
 = 
	`di˘GëVÆ
(
de
);

1271 i‡(
‹g
 =
NULL
) {

1272 
	`log_îr‹
("di˘ %†íåy vÆuêi†NULL", 
	`di˘GëKey
(
de
));

1273 
	`sds‰ì
(
key
);

1274  
VR_ERROR
;

1278 
ªt
 = 
	`c⁄f_∑r£_c⁄f_£rvî
(&
cf
->
c£rvî
, 
‹g
);

1279 if–
ªt
 !
VR_OK
) {

1280 
	`log_îr‹
("common confÖarseÉrror");

1281 
	`sds‰ì
(
key
);

1282  
VR_ERROR
;

1285 
	`sds‰ì
(
key
);

1287  
VR_OK
;

1288 
	}
}

1292 
	$c⁄f_po°_vÆid©e
(
vr_c⁄f
 *
cf
)

1294 if(
cf
 =
NULL
){

1295  
VR_ERROR
;

1298 if(
cf
->
‹g™iz©i⁄s
 !
NULL
){

1299 
	`di˘Rñó£
(
cf
->
‹g™iz©i⁄s
);

1300 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

1303  
VR_OK
;

1304 
	}
}

1306 
vr_c⁄f
 *

1307 
	$c⁄f_›í
(*
fûíame
)

1309 
ªt
;

1310 
vr_c⁄f
 *
cf
 = 
NULL
;

1311 
sds
 
∑th
 = 
NULL
;

1313 i‡(
fûíame
 =
NULL
) {

1314 
	`log_îr‹
("configuration fileÇame is NULL.");

1315  
NULL
;

1318 
∑th
 = 
	`gëAbsﬁuãP©h
(
fûíame
);

1319 i‡(
∑th
 =
NULL
) {

1320 
	`log_îr‹
("c⁄figuøti⁄ fûê«mê'%s' i†îr‹.", 
fûíame
);

1321 
îr‹
;

1324 
cf
 = 
	`dÆloc
((*cf));

1325 i‡(
cf
 =
NULL
) {

1326 
îr‹
;

1329 
ªt
 = 
	`c⁄f_öô
(
cf
);

1330 if(
ªt
 !
VR_OK
){

1331 
îr‹
;

1335 
ªt
 = 
	`c⁄f_£t_deÁu…
(
cf
);

1336 i‡(
ªt
 !
VR_OK
) {

1337 
îr‹
;

1340 
cf
->
‚ame
 = 
∑th
;

1342  
cf
;

1344 
îr‹
:

1346 i‡(
cf
 !
NULL
) {

1347 
	`c⁄f_de°roy
(
cf
);

1350 i‡(
∑th
 !
NULL
) {

1351 
	`sds‰ì
(
∑th
);

1354  
NULL
;

1355 
	}
}

1358 
vr_c⁄f
 *

1359 
	$c⁄f_¸óã
(*
fûíame
)

1361 
ªt
;

1362 
vr_c⁄f
 *
cf
;

1364 
cf
 = 
	`c⁄f_›í
(
fûíame
);

1365 i‡(
cf
 =
NULL
) {

1366  
NULL
;

1371 
ªt
 = 
	`c⁄f_¥e_vÆid©e
(
cf
);

1372 i‡(
ªt
 !
VR_OK
) {

1373 
îr‹
;

1377 
	`c⁄f_‹g™iz©i⁄s_dump
(
cf
);

1381 
ªt
 = 
	`c⁄f_∑r£
(
cf
);

1382 i‡(
ªt
 !
VR_OK
) {

1383 
îr‹
;

1387 
ªt
 = 
	`c⁄f_po°_vÆid©e
(
cf
);

1388 i‡(
ªt
 !
VR_OK
) {

1389 
îr‹
;

1392 
	`c⁄f_dump
(
cf
);

1394 
c£rvî
 = &
cf
->cserver;

1396  
cf
;

1398 
îr‹
:

1399 
	`c⁄f_de°roy
(
cf
);

1400  
NULL
;

1401 
	}
}

1404 
	$c⁄f_de°roy
(
vr_c⁄f
 *
cf
)

1406 i‡(
cf
 =
NULL
) {

1410 
	`c⁄f_deöô
(
cf
);

1412 
	`d‰ì
(
cf
);

1413 
	}
}

1416 
	$c⁄f_vîsi⁄_gë
()

1418 
vîsi⁄
;

1420 
	`CONF_RLOCK
();

1421 
vîsi⁄
 = 
c⁄f
->version;

1422 
	`CONF_UNLOCK
();

1424  
vîsi⁄
;

1425 
	}
}

1429 
	$CONF_RLOCK
()

1431  
	`±hªad_rwlock_rdlock
(&
c⁄f
->
rwl
);

1432 
	}
}

1435 
	$CONF_WLOCK
()

1437  
	`±hªad_rwlock_wæock
(&
c⁄f
->
rwl
);

1438 
	}
}

1442 
	$CONF_UNLOCK
()

1444  
	`±hªad_rwlock_u∆ock
(&
c⁄f
->
rwl
);

1445 
	}
}

1449 
	$CONFF_LOCK
()

1451  
	`±hªad_muãx_lock
(&
c⁄f
->
Êock
);

1452 
	}
}

1455 
	$CONFF_UNLOCK
()

1457  
	`±hªad_muãx_u∆ock
(&
c⁄f
->
Êock
);

1458 
	}
}

1461 
	$gë_evi˘pﬁicy_°rögs
(
evi˘pﬁicy_ty≥
)

1463  
evi˘pﬁicy_°rögs
[
evi˘pﬁicy_ty≥
];

1464 
	}
}

1471 
	$c⁄figSëComm™d
(
˛õ¡
 *
c
) {

1472 
ªt
;

1473 
sds
 
vÆue
;

1474 
sds
 *
fõlds
;

1475 
fõlds_cou¡
 = 0;

1476 
c⁄f_›ti⁄
 *
›t
;

1477 
c⁄f_vÆue
 *
cv
;

1479 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[2],
	`sdsEncodedObje˘
(c->argv[2]));

1480 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[3],
	`sdsEncodedObje˘
(c->argv[3]));

1483 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
c
->
¨gv
[2]->
±r
);

1485 i‡(
›t
 =
NULL
) {

1486 
	`addRïlyEº‹F‹m©
(
c
,"Unsupported CONFIGÖarameter: %s",

1487 (*)
c
->
¨gv
[2]->
±r
);

1489 } i‡(
›t
->
Êags
&
CONF_FIELD_FLAGS_NO_MODIFY
) {

1490 
	`addRïlyEº‹F‹m©
(
c
,"Unsupported modifyÅhis CONFIGÖarameter: %s",

1491 (*)
c
->
¨gv
[2]->
±r
);

1495 
vÆue
 = 
c
->
¨gv
[3]->
±r
;

1498 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,
CONFIG_SOPN_MAXCLIENTS
)) {

1499 
max˛õ¡s
;

1500 
fûñimô
, 
thªads
;

1501 i‡(
	`°rög2l
(
vÆue
,
	`sd¶í
(vÆue),&
max˛õ¡s
Ë=0 || max˛õ¡†< 1Ë
badfmt
;

1502 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads
);

1504 
fûñimô
 = 
	`adju°O≥nFûesLimô
(()
max˛õ¡s
);

1505 i‡((
fûñimô
-
thªads
*2-
CONFIG_MIN_RESERVED_FDS
Ë!
max˛õ¡s
) {

1506 
	`addRïlyEº‹F‹m©
(
c
,"The operating system isÇotábleÅo handleÅhe specifiedÇumber of clients");

1509 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,
CONFIG_SOPN_ADMINPASS
)) {

1510 i‡(
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2) {

1511 
	`addRïlyEº‹F‹m©
(
c
,"YouÇeedádminpassÅo setÅhis CONFIGÖarameter: %s",

1512 (*)
c
->
¨gv
[2]->
±r
);

1517 
fõlds
 = 
	`sds•lôÀn
(
vÆue
,
	`sd¶í
(vÆue)," ",1,&
fõlds_cou¡
);

1518 i‡(
fõlds
 =
NULL
) {

1519 
badfmt
;

1520 } i‡(
fõlds_cou¡
 == 0) {

1521 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1522 
cv
->
vÆue
 = 
	`sd£m±y
();

1523 } i‡(
fõlds_cou¡
 == 1) {

1524 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1525 
cv
->
vÆue
 = 
fõlds
[0];

1526 
fõlds
[0] = 
NULL
;

1527 } i‡(
fõlds_cou¡
 > 1) {

1528 
c⁄f_vÆue
 **
cv_sub
;

1529 
uöt32_t
 
i
;

1531 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_ARRAY
);

1532 
i
 = 0; i < 
fõlds_cou¡
; i ++) {

1533 
cv_sub
 = 
	`d¨øy_push
(
cv
->
vÆue
);

1534 *
cv_sub
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1535 (*
cv_sub
)->
vÆue
 = 
fõlds
[
i
];

1536 
fõlds
[
i
] = 
NULL
;

1539 
	`log_debug
(
LOG_NOTICE
, "fõlds_cou¡: %d", 
fõlds_cou¡
);

1540 
	`£rvîP™ic
("Error config set value");

1542 
	`sds‰ì•lôªs
(
fõlds
,
fõlds_cou¡
);

1545 
ªt
 = 
›t
->
	`£t
(
c£rvî
, o±, 
cv
);

1546 
	`c⁄f_vÆue_de°roy
(
cv
);

1547 i‡(
ªt
 !
VR_OK
) {

1548 
badfmt
;

1552 i‡(!
	`°rcmp
(
›t
->
«me
,
CONFIG_SOPN_MAXMEMORY
)) {

1553 
maxmem‹y
;

1554 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
maxmem‹y
);

1555 i‡(
maxmem‹y
) {

1556 i‡(
maxmem‹y
 < 
	`dÆloc_u£d_mem‹y
()) {

1557 
	`log_w¨n
("WARNING:ÅheÇew maxmemory value set via CONFIG SET is smallerÅhanÅhe current memory usage. This willÑesult in keysÉvictionánd/or inabilityÅoácceptÇew write commands depending onÅhe maxmemory-policy.");

1558 
	`‰ìMem‹yIfNìded
(
c
->
vñ
);

1564 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1567 
badfmt
:

1568 
	`addRïlyEº‹F‹m©
(
c
,"Invalidárgument '%s' for CONFIG SET '%s'",

1569 (*)
vÆue
,

1570 (*)
c
->
¨gv
[2]->
±r
);

1571 
	}
}

1577 
	$addRïlyC⁄fO±i⁄
(
˛õ¡
 *
c
,
c⁄f_›ti⁄
 *
c›
)

1579 
	`addRïlyBulkCSåög
(
c
,
c›
->
«me
);

1580 i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_INT
) {

1581 
vÆue
;

1583 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1585 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_MAXMEMORYP
)) {

1586 
	`addRïlyBulkCSåög
(
c
,
	`gë_evi˘pﬁicy_°rögs
(
vÆue
));

1588 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vÆue
);

1590 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_LONGLONG
) {

1591 
vÆue
;

1592 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1593 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vÆue
);

1594 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_SDS
) {

1595 
sds
 
vÆue
;

1596 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1597 i‡(
vÆue
 =
NULL
) {

1598 
	`addRïlyBulkCSåög
(
c
,"");

1600 
	`addRïlyBulkSds
(
c
,
vÆue
);

1602 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_ARRAYSDS
) {

1603 
d¨øy
 
vÆues
;

1604 
sds
 
vÆue
 = 
	`sd£m±y
();

1605 
sds
 *
ñem
;

1607 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

1608 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆues
);

1609 
	`d¨øy_n
(&
vÆues
) > 0) {

1610 
ñem
 = 
	`d¨øy_p›
(&
vÆues
);

1611 
vÆue
 = 
	`sdsˇtsds
(vÆue,*
ñem
);

1612 
vÆue
 = 
	`sdsˇt
(value," ");

1613 
	`sds‰ì
(*
ñem
);

1615 
	`d¨øy_deöô
(&
vÆues
);

1616 i‡(
	`sd¶í
(
vÆue
Ë> 0Ë
	`sd§™ge
(value,0,-2);

1617 
	`addRïlyBulkSds
(
c
,
vÆue
);

1619 
	`£rvîP™ic
("Error conf fieldÅype");

1621 
	}
}

1623 
	$c⁄figGëComm™d
(
˛õ¡
 *
c
) {

1624 
robj
 *
o
 = 
c
->
¨gv
[2];

1625 *
∑âîn
 = 
o
->
±r
;

1626 
c⁄f_›ti⁄
 *
c›
;

1627 
	`£rvîAs£πWôhInfo
(
c
,
o
,
	`sdsEncodedObje˘
(o));

1629 
c›
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
∑âîn
);

1630 i‡(
c›
 !
NULL
) {

1632 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_ADMINPASS
) &&

1633 
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2) {

1634 
	`addRïly
(
c
,
sh¨ed
.
nﬂdmöîr
);

1636 
	`addRïlyMu…iBulkLí
(
c
,2);

1637 
	`addRïlyC⁄fO±i⁄
(
c
,
c›
);

1640 
m©ches
 = 0;

1641 * 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

1642 
c›
 = 
c⁄f_£rvî_›ti⁄s
; c›&&c›->
«me
; cop++) {

1643 i‡(
	`°rögm©ch
(
∑âîn
,
c›
->
«me
,1)) {

1645 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_ADMINPASS
) &&

1646 
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2)

1649 
	`addRïlyC⁄fO±i⁄
(
c
,
c›
);

1650 
m©ches
 ++;

1653 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn
,
m©ches
*2);

1655 
	}
}

1663 
	sªwrôeC⁄figSèã
 {

1664 
di˘
 *
	m›ti⁄_to_löe
;

1665 
di˘
 *
	mªwrôãn
;

1666 
	mnumlöes
;

1667 
sds
 *
	mlöes
;

1668 
	mhas_èû
;

1674 
	$ªwrôeC⁄figAµídLöe
(
ªwrôeC⁄figSèã
 *
°©e
, 
sds
 
löe
) {

1675 
°©e
->
löes
 = 
	`dªÆloc
(°©e->löes, (*Ë* (°©e->
numlöes
+1));

1676 
°©e
->
löes
[°©e->
numlöes
++] = 
löe
;

1677 
	}
}

1681 
	$ªwrôeC⁄figAddLöeNumbîToO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, 
sds
 
›ti⁄
, 
löíum
) {

1682 
dli°
 *
l
 = 
	`di˘FëchVÆue
(
°©e
->
›ti⁄_to_löe
,
›ti⁄
);

1684 i‡(
l
 =
NULL
) {

1685 
l
 = 
	`dli°Cª©e
();

1686 
	`di˘Add
(
°©e
->
›ti⁄_to_löe
,
	`sdsdup
(
›ti⁄
),
l
);

1688 
	`dli°AddNodeTaû
(
l
,(*)()
löíum
);

1689 
	}
}

1691 
di˘Ty≥
 
	g›ti⁄ToLöeDi˘Ty≥
 = {

1692 
di˘SdsCa£Hash
,

1693 
NULL
,

1694 
NULL
,

1695 
di˘SdsKeyCa£Com∑ª
,

1696 
di˘SdsDe°ru˘‹
,

1697 
di˘Li°De°ru˘‹


1700 
di˘Ty≥
 
	g›ti⁄SëDi˘Ty≥
 = {

1701 
di˘SdsCa£Hash
,

1702 
NULL
,

1703 
NULL
,

1704 
di˘SdsKeyCa£Com∑ª
,

1705 
di˘SdsDe°ru˘‹
,

1706 
NULL


1709 
	#CONFIG_MAX_LINE
 1024

	)

1710 
	#REDIS_CONFIG_REWRITE_SIGNATURE
 "# Gíî©ed by CONFIG REWRITE"

	)

1716 
ªwrôeC⁄figSèã
 *
	$ªwrôeC⁄figRódOldFûe
(*
∑th
) {

1717 
FILE
 *
Â
 = 
	`f›í
(
∑th
,"r");

1718 
ªwrôeC⁄figSèã
 *
°©e
 = 
	`dÆloc
((*state));

1719 
buf
[
CONFIG_MAX_LINE
+1];

1720 
löíum
 = -1;

1722 i‡(
Â
 =
NULL
 && 
î∫o
 !
ENOENT
)  NULL;

1724 
°©e
->
›ti⁄_to_löe
 = 
	`di˘Cª©e
(&
›ti⁄ToLöeDi˘Ty≥
,
NULL
);

1725 
°©e
->
ªwrôãn
 = 
	`di˘Cª©e
(&
›ti⁄SëDi˘Ty≥
,
NULL
);

1726 
°©e
->
numlöes
 = 0;

1727 
°©e
->
löes
 = 
NULL
;

1728 
°©e
->
has_èû
 = 0;

1729 i‡(
Â
 =
NULL
Ë 
°©e
;

1732 
	`fgës
(
buf
,
CONFIG_MAX_LINE
+1,
Â
Ë!
NULL
) {

1733 
¨gc
;

1734 
sds
 *
¨gv
;

1735 
sds
 
löe
 = 
	`sd°rim
(
	`sd¢ew
(
buf
),"\r\n\t ");

1737 
löíum
++;

1740 i‡(
löe
[0] == '#' ||Üine[0] == '\0') {

1741 i‡(!
°©e
->
has_èû
 && !
	`°rcmp
(
löe
,
REDIS_CONFIG_REWRITE_SIGNATURE
))

1742 
°©e
->
has_èû
 = 1;

1743 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1748 
¨gv
 = 
	`sds•lô¨gs
(
löe
,&
¨gc
);

1749 i‡(
¨gv
 =
NULL
) {

1753 
sds
 
aux
 = 
	`sd¢ew
("# ??? ");

1754 
aux
 = 
	`sdsˇtsds
◊ux,
löe
);

1755 
	`sds‰ì
(
löe
);

1756 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
aux
);

1760 
	`sd°ﬁowî
(
¨gv
[0]);

1764 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1765 
	`ªwrôeC⁄figAddLöeNumbîToO±i⁄
(
°©e
,
¨gv
[0],
löíum
);

1767 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1769 
	`f˛o£
(
Â
);

1770  
°©e
;

1771 
	}
}

1777 
	$ªwrôeC⁄figM¨kAsPro˚s£d
(
ªwrôeC⁄figSèã
 *
°©e
, c⁄° *
›ti⁄
) {

1778 
sds
 
›t
 = 
	`sd¢ew
(
›ti⁄
);

1780 i‡(
	`di˘Add
(
°©e
->
ªwrôãn
,
›t
,
NULL
Ë!
DICT_OK
Ë
	`sds‰ì
(opt);

1781 
	}
}

1799 
	$ªwrôeC⁄figRewrôeLöe
(
ªwrôeC⁄figSèã
 *
°©e
, c⁄° *
›ti⁄
, 
sds
 
löe
, 
f‹˚
) {

1800 
sds
 
o
 = 
	`sd¢ew
(
›ti⁄
);

1801 
dli°
 *
l
 = 
	`di˘FëchVÆue
(
°©e
->
›ti⁄_to_löe
,
o
);

1803 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

1805 i‡(!
l
 && !
f‹˚
) {

1807 
	`sds‰ì
(
löe
);

1808 
	`sds‰ì
(
o
);

1812 i‡(
l
) {

1813 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

1814 
löíum
 = (Ë
 
->
vÆue
;

1818 
	`dli°DñNode
(
l
,
 
);

1819 i‡(
	`dli°Lígth
(
l
Ë=0Ë
	`di˘Dñëe
(
°©e
->
›ti⁄_to_löe
,
o
);

1820 
	`sds‰ì
(
°©e
->
löes
[
löíum
]);

1821 
°©e
->
löes
[
löíum
] = 
löe
;

1824 i‡(!
°©e
->
has_èû
) {

1825 
	`ªwrôeC⁄figAµídLöe
(
°©e
,

1826 
	`sd¢ew
(
REDIS_CONFIG_REWRITE_SIGNATURE
));

1827 
°©e
->
has_èû
 = 1;

1829 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1831 
	`sds‰ì
(
o
);

1832 
	}
}

1835 
	$ªwrôeC⁄figRñó£Sèã
(
ªwrôeC⁄figSèã
 *
°©e
) {

1836 
	`sds‰ì•lôªs
(
°©e
->
löes
,°©e->
numlöes
);

1837 
	`di˘Rñó£
(
°©e
->
›ti⁄_to_löe
);

1838 
	`di˘Rñó£
(
°©e
->
ªwrôãn
);

1839 
	`d‰ì
(
°©e
);

1840 
	}
}

1850 
	$ªwrôeC⁄figRemoveOΩh™ed
(
ªwrôeC⁄figSèã
 *
°©e
) {

1851 
di˘Iãøt‹
 *
di
 = 
	`di˘GëIãøt‹
(
°©e
->
›ti⁄_to_löe
);

1852 
di˘E¡ry
 *
de
;

1854 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

1855 
dli°
 *
l
 = 
	`di˘GëVÆ
(
de
);

1856 
sds
 
›ti⁄
 = 
	`di˘GëKey
(
de
);

1860 i‡(
	`di˘Föd
(
°©e
->
ªwrôãn
,
›ti⁄
Ë=
NULL
) {

1861 
	`log_debug
(
LOG_DEBUG
,"NŸÑewrôã¿›ti⁄: %s", 
›ti⁄
);

1865 
	`dli°Lígth
(
l
)) {

1866 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

1867 
löíum
 = (Ë
 
->
vÆue
;

1869 
	`sds‰ì
(
°©e
->
löes
[
löíum
]);

1870 
°©e
->
löes
[
löíum
] = 
	`sd£m±y
();

1871 
	`dli°DñNode
(
l
,
 
);

1874 
	`di˘Rñó£Iãøt‹
(
di
);

1875 
	}
}

1879 
sds
 
	$ªwrôeC⁄figGëC⁄ã¡FromSèã
(
ªwrôeC⁄figSèã
 *
°©e
) {

1880 
sds
 
c⁄ã¡
 = 
	`sd£m±y
();

1881 
j
, 
was_em±y
 = 0;

1883 
j
 = 0; j < 
°©e
->
numlöes
; j++) {

1885 i‡(
	`sd¶í
(
°©e
->
löes
[
j
]) == 0) {

1886 i‡(
was_em±y
) ;

1887 
was_em±y
 = 1;

1889 
was_em±y
 = 0;

1891 
c⁄ã¡
 = 
	`sdsˇtsds
(c⁄ã¡,
°©e
->
löes
[
j
]);

1892 
c⁄ã¡
 = 
	`sdsˇéí
(content,"\n",1);

1894  
c⁄ã¡
;

1895 
	}
}

1909 
	$ªwrôeC⁄figOvîwrôeFûe
(*
c⁄figfûe
, 
sds
 
c⁄ã¡
) {

1910 
ªtvÆ
 = 0;

1911 
fd
 = 
	`›í
(
c⁄figfûe
,
O_RDWR
|
O_CREAT
,0644);

1912 
c⁄ã¡_size
 = 
	`sd¶í
(
c⁄ã¡
), 
∑ddög
 = 0;

1913 
°©
 
sb
;

1914 
sds
 
c⁄ã¡_∑dded
;

1918 i‡(
fd
 == -1)  -1;

1919 i‡(
	`f°©
(
fd
,&
sb
) == -1) {

1920 
	`˛o£
(
fd
);

1925 
c⁄ã¡_∑dded
 = 
	`sdsdup
(
c⁄ã¡
);

1926 i‡(
c⁄ã¡_size
 < 
sb
.
°_size
) {

1929 
∑ddög
 = 
sb
.
°_size
 - 
c⁄ã¡_size
;

1930 
c⁄ã¡_∑dded
 = 
	`sdsgrowzîo
(c⁄ã¡_∑dded,
sb
.
°_size
);

1931 
c⁄ã¡_∑dded
[
c⁄ã¡_size
] = '\n';

1932 
	`mem£t
(
c⁄ã¡_∑dded
+
c⁄ã¡_size
+1,'#',
∑ddög
-1);

1936 i‡(
	`wrôe
(
fd
,
c⁄ã¡_∑dded
,
	`°æí
(content_padded)) == -1) {

1937 
ªtvÆ
 = -1;

1938 
˛ónup
;

1942 i‡(
∑ddög
) {

1943 i‡(
	`·runˇã
(
fd
,
c⁄ã¡_size
) == -1) {

1948 
˛ónup
:

1949 
	`sds‰ì
(
c⁄ã¡_∑dded
);

1950 
	`˛o£
(
fd
);

1951  
ªtvÆ
;

1952 
	}
}

1955 
	$ªwrôeC⁄figI¡O±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1956 
vÆue
;

1957 
f‹˚
;

1958 
sds
 
löe
;

1960 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1961 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%d",
›ti⁄
,
vÆue
);

1962 
f‹˚
 = 
vÆue
 !
defvÆue
;

1964 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1965 
	}
}

1968 
	$ªwrôeC⁄figSdsO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
sds
 
defvÆue
) {

1969 
sds
 
vÆue
;

1970 
f‹˚
;

1971 
sds
 
löe
;

1973 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1974 i‡(
defvÆue
 =
NULL
 && 
vÆue
 == NULL) {

1975 
f‹˚
 = 0;

1976 } i‡(
defvÆue
 !
NULL
 && 
vÆue
 !NULL && !
	`sdscmp
(value,defvalue)) {

1977 
f‹˚
 = 0;

1979 
f‹˚
 = 1;

1982 i‡(
vÆue
 =
NULL
) {

1983 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†\"\"",
›ti⁄
);

1985 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
vÆue
);

1986 
	`sds‰ì
(
vÆue
);

1989 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1990 
	}
}

1993 
	$ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1994 
vÆue
;

1995 
f‹˚
;

1996 
sds
 
löe
;

1998 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1999 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%Œd",
›ti⁄
,
vÆue
);

2000 
f‹˚
 = 
vÆue
 !
defvÆue
;

2002 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2003 
	}
}

2007 
	$ªwrôeC⁄figF‹m©Mem‹y
(*
buf
, 
size_t
 
Àn
, 
byãs
) {

2008 
gb
 = 1024*1024*1024;

2009 
mb
 = 1024*1024;

2010 
kb
 = 1024;

2012 i‡(
byãs
 && (byã†% 
gb
) == 0) {

2013  
	`¢¥ötf
(
buf
,
Àn
,"%Œdgb",
byãs
/
gb
);

2014 } i‡(
byãs
 && (byã†% 
mb
) == 0) {

2015  
	`¢¥ötf
(
buf
,
Àn
,"%Œdmb",
byãs
/
mb
);

2016 } i‡(
byãs
 && (byã†% 
kb
) == 0) {

2017  
	`¢¥ötf
(
buf
,
Àn
,"%Œdkb",
byãs
/
kb
);

2019  
	`¢¥ötf
(
buf
,
Àn
,"%Œd",
byãs
);

2021 
	}
}

2024 
	$ªwrôeC⁄figByãsO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

2025 
vÆue
;

2026 
buf
[64];

2027 
f‹˚
;

2028 
sds
 
löe
;

2030 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

2031 
f‹˚
 = 
vÆue
 !
defvÆue
;

2033 
	`ªwrôeC⁄figF‹m©Mem‹y
(
buf
,(buf),
vÆue
);

2034 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
buf
);

2035 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2036 
	}
}

2041 
	$ªwrôeC⁄figEnumO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
c⁄figEnumGëSåFun
 
fun
, 
defvÆ
) {

2042 
vÆue
;

2043 
sds
 
löe
;

2044 c⁄° *
«me
;

2045 
f‹˚
;

2047 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

2048 
f‹˚
 = 
vÆue
 !
defvÆ
;

2049 
«me
 = 
	`fun
(
vÆue
);

2050 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
«me
);

2051 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2052 
	}
}

2055 
	$ªwrôeC⁄figBödO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
) {

2056 
d¨øy
 
vÆues
;

2057 
sds
 *
vÆue
, 
löe
;

2058 
f‹˚
 = 1;

2059 *
›ti⁄
 = 
CONFIG_SOPN_BIND
;

2061 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

2062 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆues
);

2064 i‡(
	`d¨øy_n
(&
vÆues
) == 0) {

2065 
	`d¨øy_deöô
(&
vÆues
);

2066 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2071 
löe
 = 
	`sd¢ew
(
›ti⁄
);

2072 
	`d¨øy_n
(&
vÆues
) > 0) {

2073 
löe
 = 
	`sdsˇt
(line," ");

2074 
vÆue
 = 
	`d¨øy_p›
(&
vÆues
);

2075 
löe
 = 
	`sdsˇtsds
÷öe,*
vÆue
);

2076 
	`sds‰ì
(*
vÆue
);

2078 
	`d¨øy_deöô
(&
vÆues
);

2080 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2081 
	}
}

2084 
	$ªwrôeC⁄figComm™dsNAPO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
) {

2085 
d¨øy
 
vÆues
;

2086 
sds
 *
vÆue
, 
löe
;

2087 
f‹˚
 = 1;

2088 *
›ti⁄
 = 
CONFIG_SOPN_COMMANDSNAP
;

2090 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

2091 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆues
);

2093 i‡(
	`d¨øy_n
(&
vÆues
) == 0) {

2094 
	`d¨øy_deöô
(&
vÆues
);

2095 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2099 
	`d¨øy_n
(&
vÆues
) > 0) {

2100 
vÆue
 = 
	`d¨øy_p›
(&
vÆues
);

2101 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,*
vÆue
);

2102 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2103 
	`sds‰ì
(*
vÆue
);

2105 
	`d¨øy_deöô
(&
vÆues
);

2106 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2107 
	}
}

2117 
	$ªwrôeC⁄fig
(*
∑th
) {

2118 
ªwrôeC⁄figSèã
 *
°©e
;

2119 
sds
 
√wc⁄ã¡
;

2120 
ªtvÆ
;

2121 
c⁄f_›ti⁄
 *
c›
;

2123 
	`CONFF_LOCK
();

2125 i‡((
°©e
 = 
	`ªwrôeC⁄figRódOldFûe
(
∑th
)Ë=
NULL
) {

2126 
	`CONFF_UNLOCK
();

2132 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_DATABASES
,
CONFIG_DEFAULT_LOGICAL_DBNUM
);

2133 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_IDPDATABASE
,
CONFIG_DEFAULT_INTERNAL_DBNUM
);

2134 
	`ªwrôeC⁄figByãsO±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORY
,
CONFIG_DEFAULT_MAXMEMORY
);

2135 
	`ªwrôeC⁄figEnumO±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORYP
,
gë_evi˘pﬁicy_°rögs
,
CONFIG_DEFAULT_MAXMEMORY_POLICY
);

2136 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORYS
,
CONFIG_DEFAULT_MAXMEMORY_SAMPLES
);

2137 
	`ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
°©e
,
CONFIG_SOPN_MTCLIMIT
,
CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
);

2138 
	`ªwrôeC⁄figBödO±i⁄
(
°©e
);

2139 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_PORT
,
CONFIG_DEFAULT_SERVER_PORT
);

2140 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_THREADS
,
CONFIG_DEFAULT_THREADS_NUM
);

2141 
	`ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
°©e
,
CONFIG_SOPN_SLOWLOGLST
,
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
);

2142 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_SLOWLOGML
,
CONFIG_DEFAULT_SLOWLOG_MAX_LEN
);

2143 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_MAXCLIENTS
,
CONFIG_DEFAULT_MAX_CLIENTS
);

2144 
	`ªwrôeC⁄figSdsO±i⁄
(
°©e
,
CONFIG_SOPN_REQUIREPASS
,
NULL
);

2145 
	`ªwrôeC⁄figSdsO±i⁄
(
°©e
,
CONFIG_SOPN_ADMINPASS
,
NULL
);

2146 
	`ªwrôeC⁄figComm™dsNAPO±i⁄
(
°©e
);

2151 
	`ªwrôeC⁄figRemoveOΩh™ed
(
°©e
);

2155 
√wc⁄ã¡
 = 
	`ªwrôeC⁄figGëC⁄ã¡FromSèã
(
°©e
);

2156 
ªtvÆ
 = 
	`ªwrôeC⁄figOvîwrôeFûe
(
£rvî
.
c⁄figfûe
,
√wc⁄ã¡
);

2157 
	`CONFF_UNLOCK
();

2159 
	`sds‰ì
(
√wc⁄ã¡
);

2160 
	`ªwrôeC⁄figRñó£Sèã
(
°©e
);

2161  
ªtvÆ
;

2162 
	}
}

2168 
	$c⁄figComm™d
(
˛õ¡
 *
c
) {

2170 i‡(
£rvî
.
lﬂdög
 && 
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get")) {

2171 
	`addRïlyEº‹
(
c
,"Only CONFIG GET isállowed duringÜoading");

2175 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"set")) {

2176 i‡(
c
->
¨gc
 !4Ë
bad¨ôy
;

2177 
	`c⁄figSëComm™d
(
c
);

2178 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get")) {

2179 i‡(
c
->
¨gc
 !3Ë
bad¨ôy
;

2180 
	`c⁄figGëComm™d
(
c
);

2186  i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"rewrite")) {

2187 i‡(
c
->
¨gc
 !2Ë
bad¨ôy
;

2188 i‡(
£rvî
.
c⁄figfûe
 =
NULL
) {

2189 
	`addRïlyEº‹
(
c
,"The server isÑunning withoutá config file");

2192 i‡(
	`ªwrôeC⁄fig
(
£rvî
.
c⁄figfûe
) == -1) {

2193 
	`log_w¨n
("CONFIG REWRITE faûed: %s", 
	`°ªº‹
(
î∫o
));

2194 
	`addRïlyEº‹F‹m©
(
c
,"Rewrôög c⁄fig fûe: %s", 
	`°ªº‹
(
î∫o
));

2196 
	`log_w¨n
("CONFIG REWRITEÉxecuted with success.");

2197 
	`addRïly
(
c
,
sh¨ed
.
ok
);

2200 
	`addRïlyEº‹
(
c
,

2206 
bad¨ôy
:

2207 
	`addRïlyEº‹F‹m©
(
c
,"WrongÇumber ofárguments for CONFIG %s",

2208 (*Ë
c
->
¨gv
[1]->
±r
);

2209 
	}
}

2212 
	$c⁄f_ˇche_öô
(
c⁄f_ˇche
 *
cc
)

2214 
cc
->
ˇche_vîsi⁄
 = 0;

2215 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
cc
->
max˛õ¡s
);

2216 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
cc
->
ªquúïass
);

2217 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
cc
->
admö∑ss
);

2218 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
cc
->
maxmem‹y
);

2219 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MTCLIMIT
,&
cc
->
max_time_com∂exôy_limô
);

2220 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGLST
,&
cc
->
¶owlog_log_¶owî_th™
);

2222  
VR_OK
;

2223 
	}
}

2226 
	$c⁄f_ˇche_deöô
(
c⁄f_ˇche
 *
cc
)

2228 
cc
->
ˇche_vîsi⁄
 = 0;

2229 i‡(
cc
->
ªquúïass
 !
NULL
) {

2230 
	`sds‰ì
(
cc
->
ªquúïass
);

2231 
cc
->
ªquúïass
 = 
NULL
;

2233 i‡(
cc
->
admö∑ss
 !
NULL
) {

2234 
	`sds‰ì
(
cc
->
admö∑ss
);

2235 
cc
->
admö∑ss
 = 
NULL
;

2238  
VR_OK
;

2239 
	}
}

2242 
	$c⁄f_ˇche_upd©e
(
c⁄f_ˇche
 *
cc
)

2244 
cvîsi⁄
 = 
	`c⁄f_vîsi⁄_gë
();

2247 i‡(
cvîsi⁄
 <
cc
->
ˇche_vîsi⁄
) {

2251 i‡(
cc
->
ªquúïass
 !
NULL
) {

2252 
	`sds‰ì
(
cc
->
ªquúïass
);

2253 
cc
->
ªquúïass
 = 
NULL
;

2255 i‡(
cc
->
admö∑ss
 !
NULL
) {

2256 
	`sds‰ì
(
cc
->
admö∑ss
);

2257 
cc
->
admö∑ss
 = 
NULL
;

2260 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
cc
->
max˛õ¡s
);

2261 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
cc
->
ªquúïass
);

2262 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
cc
->
admö∑ss
);

2263 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
cc
->
maxmem‹y
);

2264 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MTCLIMIT
,&
cc
->
max_time_com∂exôy_limô
);

2265 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGLST
,&
cc
->
¶owlog_log_¶owî_th™
);

2267 
cc
->
ˇche_vîsi⁄
 = 
cvîsi⁄
;

2269  
VR_OK
;

2270 
	}
}

	@src/vr_conf.h

1 #i‚de‡
_VR_CONF_H_


2 
	#_VR_CONF_H_


	)

5 
	#CONFIG_SOPN_DATABASES
 "d©aba£s"

	)

6 
	#CONFIG_SOPN_IDPDATABASE
 "öã∫Æ-dbs-≥r-d©aba£s"

	)

7 
	#CONFIG_SOPN_MAXMEMORY
 "maxmem‹y"

	)

8 
	#CONFIG_SOPN_MAXMEMORYP
 "maxmem‹y-pﬁicy"

	)

9 
	#CONFIG_SOPN_MAXMEMORYS
 "maxmem‹y-ßm∂es"

	)

10 
	#CONFIG_SOPN_MTCLIMIT
 "max-time-com∂exôy-limô"

	)

11 
	#CONFIG_SOPN_BIND
 "böd"

	)

12 
	#CONFIG_SOPN_PORT
 "p‹t"

	)

13 
	#CONFIG_SOPN_THREADS
 "thªads"

	)

14 
	#CONFIG_SOPN_DIR
 "dú"

	)

15 
	#CONFIG_SOPN_MAXCLIENTS
 "max˛õ¡s"

	)

16 
	#CONFIG_SOPN_SLOWLOGLST
 "¶owlog-log-¶owî-th™"

	)

17 
	#CONFIG_SOPN_SLOWLOGML
 "¶owlog-max-Àn"

	)

18 
	#CONFIG_SOPN_REQUIREPASS
 "ªquúïass"

	)

19 
	#CONFIG_SOPN_ADMINPASS
 "admö∑ss"

	)

20 
	#CONFIG_SOPN_COMMANDSNAP
 "comm™ds-√ed-admö∑ss"

	)

22 
	#CONFIG_RUN_ID_SIZE
 40

	)

23 
	#CONFIG_DEFAULT_ACTIVE_REHASHING
 1

	)

25 
	#CONFIG_DEFAULT_LOGICAL_DBNUM
 6

	)

26 
	#CONFIG_DEFAULT_INTERNAL_DBNUM
 6

	)

28 
	#CONFIG_DEFAULT_MAXMEMORY
 0

	)

29 
	#CONFIG_DEFAULT_MAXMEMORY_SAMPLES
 5

	)

30 
	#CONFIG_DEFAULT_MAX_CLIENTS
 10000

	)

32 
	#CONFIG_DEFAULT_MAX_CLIENTS
 10000

	)

34 
	#CONFIG_DEFAULT_THREADS_NUM
 (
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)>6?6:sysc⁄f(_SC_NPROCESSORS_ONLN))

	)

36 
	#CONFIG_DEFAULT_HOST
 "0.0.0.0"

	)

38 
	#CONFIG_DEFAULT_SERVER_PORT
 55555

	)

40 
	#CONFIG_DEFAULT_DATA_DIR
 "vúed©a"

	)

42 
	#CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
 0

	)

44 
	#CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
 10000

	)

45 
	#CONFIG_DEFAULT_SLOWLOG_MAX_LEN
 128

	)

47 
	#CONFIG_AUTHPASS_MAX_LEN
 512

	)

49 
	#CONFIG_BINDADDR_MAX
 16

	)

51 
	#CONF_UNSET_NUM
 -1

	)

52 
	#CONF_UNSET_PTR
 
NULL


	)

53 
	#CONF_UNSET_GROUP
 (
group_ty≥_t
Ë-1

	)

54 
	#CONF_UNSET_HASH
 (
hash_ty≥_t
Ë-1

	)

55 
	#CONF_UNSET_DIST
 (
di°_ty≥_t
Ë-1

	)

58 
	#CONF_FIELD_TYPE_INT
 0

	)

59 
	#CONF_FIELD_TYPE_LONGLONG
 1

	)

60 
	#CONF_FIELD_TYPE_SDS
 2

	)

61 
	#CONF_FIELD_TYPE_ARRAYSDS
 3

	)

64 
	#CONF_FIELD_FLAGS_NO_MODIFY
 (1<<0)

	)

66 
	sc⁄f_›ti⁄
 {

67 *
	m«me
;

68 
	mty≥
;

69 
	mÊags
;

70 (*
	m£t
)(*
	mcf
, 
c⁄f_›ti⁄
 *
	m›t
, *
	md©a
);

71 (*
	mgë
)(*
	mcf
, 
c⁄f_›ti⁄
 *
	m›t
, *
	md©a
);

72 
	moff£t
;

73 }
	tc⁄f_›ti⁄
;

76 
	#EVICTPOLICY_CODEC
(
ACTION
) \

77 
	`ACTION
–
MAXMEMORY_VOLATILE_LRU
, vﬁ©ûe-
Ãu
) \

78 
	`ACTION
–
MAXMEMORY_VOLATILE_RANDOM
, vﬁ©ûe-
øndom
) \

79 
	`ACTION
–
MAXMEMORY_VOLATILE_TTL
, vﬁ©ûe-
âl
) \

80 
	`ACTION
–
MAXMEMORY_ALLKEYS_LRU
, 
Ælkeys
-
Ãu
) \

81 
	`ACTION
–
MAXMEMORY_ALLKEYS_RANDOM
, 
Ælkeys
-
øndom
) \

82 
	`ACTION
–
MAXMEMORY_NO_EVICTION
, 
n€vi˘i⁄
) \

83 

	)

84 
	#DEFINE_ACTION
(
_pﬁicy
, 
_«me
Ë_pﬁicy,

	)

85 
	eevi˘pﬁicy_ty≥
 {

86 
EVICTPOLICY_CODEC
–
DEFINE_ACTION
 )

87 
	mEVICTPOLICY_SENTINEL


88 } 
	tevi˘pﬁicy_ty≥_t
;

89 #unde‡
DEFINE_ACTION


91 
	sc⁄f_£rvî
 {

93 
di˘
 *
	m˘abÀ
;

95 
	md©aba£s
;

97 
	möã∫Æ_dbs_≥r_d©aba£s
;

101 
	mmax_time_com∂exôy_limô
;

103 
	mmaxmem‹y
;

105 
	mmaxmem‹y_pﬁicy
;

106 
	mmaxmem‹y_ßm∂es
;

108 
	mmax˛õ¡s
;

110 
	mthªads
;

113 
d¨øy
 
	mböds
;

115 
	mp‹t
;

117 
sds
 
	mdú
;

119 
	m¶owlog_log_¶owî_th™
;

121 
	m¶owlog_max_Àn
;

124 
sds
 
	mªquúïass
;

126 
sds
 
	madmö∑ss
;

127 
d¨øy
 
	mcomm™ds_√ed_admö∑ss
;

128 } 
	tc⁄f_£rvî
;

131 
	svr_c⁄f
 {

133 
sds
 
	m‚ame
;

135 
di˘
 *
	m‹g™iz©i⁄s
;

138 
c⁄f_£rvî
 
	mc£rvî
;

140 
	mvîsi⁄
;

142 
±hªad_rwlock_t
 
	mrwl
;

144 
±hªad_muãx_t
 
	mÊock
;

145 }
	tvr_c⁄f
;

147 
	#CONF_VALUE_TYPE_UNKNOW
 0

	)

148 
	#CONF_VALUE_TYPE_STRING
 1

	)

149 
	#CONF_VALUE_TYPE_ARRAY
 2

	)

152 
	sc⁄f_vÆue
{

153 
	mty≥
;

154 *
	mvÆue
;

155 }
	tc⁄f_vÆue
;

160 
	sc⁄f_ˇche
 {

161 
	mˇche_vîsi⁄
;

163 
	mmax˛õ¡s
;

164 
sds
 
	mªquúïass
;

165 
sds
 
	madmö∑ss
;

166 
	mmaxmem‹y
;

167 
	mmax_time_com∂exôy_limô
;

168 
	m¶owlog_log_¶owî_th™
;

169 }
	tc⁄f_ˇche
;

172 
vr_c⁄f
 *
c⁄f
;

173 
c⁄f_£rvî
 *
c£rvî
;

175 
c⁄f_vÆue
 *
c⁄f_vÆue_¸óã
(
ty≥
);

176 
c⁄f_vÆue_de°roy
(
c⁄f_vÆue
 *
cv
);

178 
vr_c⁄f
 *
c⁄f_¸óã
(*
fûíame
);

179 
c⁄f_de°roy
(
vr_c⁄f
 *
cf
);

181 
c⁄f_vîsi⁄_gë
();

183 
c⁄f_£rvî_gë
(c⁄° *
›ti⁄_«me
, *
vÆue
);

184 
c⁄f_£rvî_£t
(c⁄° *
›ti⁄_«me
, 
c⁄f_vÆue
 *
vÆue
);

186 
c⁄f_£t_maxmem‹y
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

187 
c⁄f_£t_maxmem‹y_pﬁicy
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

188 
c⁄f_£t_öt_n⁄_zîo
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

190 
c⁄f_gë_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

191 
c⁄f_gë_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

192 
c⁄f_gë_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

193 
c⁄f_gë_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

195 
c⁄f_£t_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

196 
c⁄f_£t_∑ssw‹d
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

197 
c⁄f_£t_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

198 
c⁄f_£t_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

199 
c⁄f_£t_yes‹no
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

200 
c⁄f_£t_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

201 
c⁄f_£t_comm™ds_√ed_admö∑ss
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

203 
CONF_RLOCK
();

204 
CONF_WLOCK
();

205 
CONF_UNLOCK
();

207 
CONFF_LOCK
();

208 
CONFF_UNLOCK
();

210 c⁄° *
gë_evi˘pﬁicy_°rögs
(
evi˘pﬁicy_ty≥
);

212 
c⁄figComm™d
(
˛õ¡
 *
c
);

214 
c⁄f_ˇche_öô
(
c⁄f_ˇche
 *
cc
);

215 
c⁄f_ˇche_deöô
(
c⁄f_ˇche
 *
cc
);

216 
c⁄f_ˇche_upd©e
(
c⁄f_ˇche
 *
cc
);

	@src/vr_conf.h

1 #i‚de‡
_VR_CONF_H_


2 
	#_VR_CONF_H_


	)

5 
	#CONFIG_SOPN_DATABASES
 "d©aba£s"

	)

6 
	#CONFIG_SOPN_IDPDATABASE
 "öã∫Æ-dbs-≥r-d©aba£s"

	)

7 
	#CONFIG_SOPN_MAXMEMORY
 "maxmem‹y"

	)

8 
	#CONFIG_SOPN_MAXMEMORYP
 "maxmem‹y-pﬁicy"

	)

9 
	#CONFIG_SOPN_MAXMEMORYS
 "maxmem‹y-ßm∂es"

	)

10 
	#CONFIG_SOPN_MTCLIMIT
 "max-time-com∂exôy-limô"

	)

11 
	#CONFIG_SOPN_BIND
 "böd"

	)

12 
	#CONFIG_SOPN_PORT
 "p‹t"

	)

13 
	#CONFIG_SOPN_THREADS
 "thªads"

	)

14 
	#CONFIG_SOPN_DIR
 "dú"

	)

15 
	#CONFIG_SOPN_MAXCLIENTS
 "max˛õ¡s"

	)

16 
	#CONFIG_SOPN_SLOWLOGLST
 "¶owlog-log-¶owî-th™"

	)

17 
	#CONFIG_SOPN_SLOWLOGML
 "¶owlog-max-Àn"

	)

18 
	#CONFIG_SOPN_REQUIREPASS
 "ªquúïass"

	)

19 
	#CONFIG_SOPN_ADMINPASS
 "admö∑ss"

	)

20 
	#CONFIG_SOPN_COMMANDSNAP
 "comm™ds-√ed-admö∑ss"

	)

22 
	#CONFIG_RUN_ID_SIZE
 40

	)

23 
	#CONFIG_DEFAULT_ACTIVE_REHASHING
 1

	)

25 
	#CONFIG_DEFAULT_LOGICAL_DBNUM
 6

	)

26 
	#CONFIG_DEFAULT_INTERNAL_DBNUM
 6

	)

28 
	#CONFIG_DEFAULT_MAXMEMORY
 0

	)

29 
	#CONFIG_DEFAULT_MAXMEMORY_SAMPLES
 5

	)

30 
	#CONFIG_DEFAULT_MAX_CLIENTS
 10000

	)

32 
	#CONFIG_DEFAULT_MAX_CLIENTS
 10000

	)

34 
	#CONFIG_DEFAULT_THREADS_NUM
 (
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)>6?6:sysc⁄f(_SC_NPROCESSORS_ONLN))

	)

36 
	#CONFIG_DEFAULT_HOST
 "0.0.0.0"

	)

38 
	#CONFIG_DEFAULT_SERVER_PORT
 55555

	)

40 
	#CONFIG_DEFAULT_DATA_DIR
 "vúed©a"

	)

42 
	#CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
 0

	)

44 
	#CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
 10000

	)

45 
	#CONFIG_DEFAULT_SLOWLOG_MAX_LEN
 128

	)

47 
	#CONFIG_AUTHPASS_MAX_LEN
 512

	)

49 
	#CONFIG_BINDADDR_MAX
 16

	)

51 
	#CONF_UNSET_NUM
 -1

	)

52 
	#CONF_UNSET_PTR
 
NULL


	)

53 
	#CONF_UNSET_GROUP
 (
group_ty≥_t
Ë-1

	)

54 
	#CONF_UNSET_HASH
 (
hash_ty≥_t
Ë-1

	)

55 
	#CONF_UNSET_DIST
 (
di°_ty≥_t
Ë-1

	)

58 
	#CONF_FIELD_TYPE_INT
 0

	)

59 
	#CONF_FIELD_TYPE_LONGLONG
 1

	)

60 
	#CONF_FIELD_TYPE_SDS
 2

	)

61 
	#CONF_FIELD_TYPE_ARRAYSDS
 3

	)

64 
	#CONF_FIELD_FLAGS_NO_MODIFY
 (1<<0)

	)

66 
	sc⁄f_›ti⁄
 {

67 *
	m«me
;

68 
	mty≥
;

69 
	mÊags
;

70 (*
	m£t
)(*
	mcf
, 
c⁄f_›ti⁄
 *
	m›t
, *
	md©a
);

71 (*
	mgë
)(*
	mcf
, 
c⁄f_›ti⁄
 *
	m›t
, *
	md©a
);

72 
	moff£t
;

73 }
	tc⁄f_›ti⁄
;

76 
	#EVICTPOLICY_CODEC
(
ACTION
) \

77 
	`ACTION
–
MAXMEMORY_VOLATILE_LRU
, vﬁ©ûe-
Ãu
) \

78 
	`ACTION
–
MAXMEMORY_VOLATILE_RANDOM
, vﬁ©ûe-
øndom
) \

79 
	`ACTION
–
MAXMEMORY_VOLATILE_TTL
, vﬁ©ûe-
âl
) \

80 
	`ACTION
–
MAXMEMORY_ALLKEYS_LRU
, 
Ælkeys
-
Ãu
) \

81 
	`ACTION
–
MAXMEMORY_ALLKEYS_RANDOM
, 
Ælkeys
-
øndom
) \

82 
	`ACTION
–
MAXMEMORY_NO_EVICTION
, 
n€vi˘i⁄
) \

83 

	)

84 
	#DEFINE_ACTION
(
_pﬁicy
, 
_«me
Ë_pﬁicy,

	)

85 
	eevi˘pﬁicy_ty≥
 {

86 
EVICTPOLICY_CODEC
–
DEFINE_ACTION
 )

87 
	mEVICTPOLICY_SENTINEL


88 } 
	tevi˘pﬁicy_ty≥_t
;

89 #unde‡
DEFINE_ACTION


91 
	sc⁄f_£rvî
 {

93 
di˘
 *
	m˘abÀ
;

95 
	md©aba£s
;

97 
	möã∫Æ_dbs_≥r_d©aba£s
;

101 
	mmax_time_com∂exôy_limô
;

103 
	mmaxmem‹y
;

105 
	mmaxmem‹y_pﬁicy
;

106 
	mmaxmem‹y_ßm∂es
;

108 
	mmax˛õ¡s
;

110 
	mthªads
;

113 
d¨øy
 
	mböds
;

115 
	mp‹t
;

117 
sds
 
	mdú
;

119 
	m¶owlog_log_¶owî_th™
;

121 
	m¶owlog_max_Àn
;

124 
sds
 
	mªquúïass
;

126 
sds
 
	madmö∑ss
;

127 
d¨øy
 
	mcomm™ds_√ed_admö∑ss
;

128 } 
	tc⁄f_£rvî
;

131 
	svr_c⁄f
 {

133 
sds
 
	m‚ame
;

135 
di˘
 *
	m‹g™iz©i⁄s
;

138 
c⁄f_£rvî
 
	mc£rvî
;

140 
	mvîsi⁄
;

142 
±hªad_rwlock_t
 
	mrwl
;

144 
±hªad_muãx_t
 
	mÊock
;

145 }
	tvr_c⁄f
;

147 
	#CONF_VALUE_TYPE_UNKNOW
 0

	)

148 
	#CONF_VALUE_TYPE_STRING
 1

	)

149 
	#CONF_VALUE_TYPE_ARRAY
 2

	)

152 
	sc⁄f_vÆue
{

153 
	mty≥
;

154 *
	mvÆue
;

155 }
	tc⁄f_vÆue
;

160 
	sc⁄f_ˇche
 {

161 
	mˇche_vîsi⁄
;

163 
	mmax˛õ¡s
;

164 
sds
 
	mªquúïass
;

165 
sds
 
	madmö∑ss
;

166 
	mmaxmem‹y
;

167 
	mmax_time_com∂exôy_limô
;

168 
	m¶owlog_log_¶owî_th™
;

169 }
	tc⁄f_ˇche
;

172 
vr_c⁄f
 *
c⁄f
;

173 
c⁄f_£rvî
 *
c£rvî
;

175 
c⁄f_vÆue
 *
c⁄f_vÆue_¸óã
(
ty≥
);

176 
c⁄f_vÆue_de°roy
(
c⁄f_vÆue
 *
cv
);

178 
vr_c⁄f
 *
c⁄f_¸óã
(*
fûíame
);

179 
c⁄f_de°roy
(
vr_c⁄f
 *
cf
);

181 
c⁄f_vîsi⁄_gë
();

183 
c⁄f_£rvî_gë
(c⁄° *
›ti⁄_«me
, *
vÆue
);

184 
c⁄f_£rvî_£t
(c⁄° *
›ti⁄_«me
, 
c⁄f_vÆue
 *
vÆue
);

186 
c⁄f_£t_maxmem‹y
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

187 
c⁄f_£t_maxmem‹y_pﬁicy
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

188 
c⁄f_£t_öt_n⁄_zîo
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

190 
c⁄f_gë_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

191 
c⁄f_gë_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

192 
c⁄f_gë_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

193 
c⁄f_gë_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

195 
c⁄f_£t_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

196 
c⁄f_£t_∑ssw‹d
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

197 
c⁄f_£t_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

198 
c⁄f_£t_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

199 
c⁄f_£t_yes‹no
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

200 
c⁄f_£t_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

201 
c⁄f_£t_comm™ds_√ed_admö∑ss
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

203 
CONF_RLOCK
();

204 
CONF_WLOCK
();

205 
CONF_UNLOCK
();

207 
CONFF_LOCK
();

208 
CONFF_UNLOCK
();

210 c⁄° *
gë_evi˘pﬁicy_°rögs
(
evi˘pﬁicy_ty≥
);

212 
c⁄figComm™d
(
˛õ¡
 *
c
);

214 
c⁄f_ˇche_öô
(
c⁄f_ˇche
 *
cc
);

215 
c⁄f_ˇche_deöô
(
c⁄f_ˇche
 *
cc
);

216 
c⁄f_ˇche_upd©e
(
c⁄f_ˇche
 *
cc
);

	@src/vr_connection.c

1 
	~<sys/uio.h
>

3 
	~<vr_c‹e.h
>

5 
c⁄n_‰ì
(
c⁄n
 *conn);

8 
c⁄n
 *

9 
	$_c⁄n_gë
(
c⁄n_ba£
 *
cb
)

11 
c⁄n
 *conn;

13 i‡(
cb
 !
NULL
 && 
	`dli°Lígth
(cb->
‰ì_c⁄nq
) > 0) {

14 
c⁄n
 = 
	`dli°P›
(
cb
->
‰ì_c⁄nq
);

16 
c⁄n
 = 
	`dÆloc
((*conn));

17 i‡(
c⁄n
 =
NULL
) {

18  
NULL
;

20 
c⁄n
->
cb
 = cb;

22 
c⁄n
->
öqueue
 = 
NULL
;

23 
c⁄n
->
outqueue
 = 
NULL
;

26 
c⁄n
->
ow√r
 = 
NULL
;

28 
c⁄n
->
sd
 = -1;

30 
c⁄n
->
£nd_byãs
 = 0;

31 
c⁄n
->
ªcv_byãs
 = 0;

33 
c⁄n
->
îr
 = 0;

34 
c⁄n
->
ªcv_a˘ive
 = 0;

35 
c⁄n
->
ªcv_ªady
 = 0;

36 
c⁄n
->
£nd_a˘ive
 = 0;

37 
c⁄n
->
£nd_ªady
 = 0;

39 
c⁄n
->
c⁄√˘ög
 = 0;

40 
c⁄n
->
c⁄√˘ed
 = 0;

41 
c⁄n
->
eof
 = 0;

42 
c⁄n
->
d⁄e
 = 0;

44 i‡(
c⁄n
->
öqueue
 =
NULL
) {

45 
c⁄n
->
öqueue
 = 
	`dli°Cª©e
();

46 i‡(
c⁄n
->
öqueue
 =
NULL
) {

47 
	`c⁄n_‰ì
(
c⁄n
);

48  
NULL
;

52 i‡(
c⁄n
->
outqueue
 =
NULL
) {

53 
c⁄n
->
outqueue
 = 
	`dli°Cª©e
();

54 i‡(
c⁄n
->
outqueue
 =
NULL
) {

55 
	`c⁄n_‰ì
(
c⁄n
);

56  
NULL
;

60 i‡(
cb
 !
NULL
) {

61 
cb
->
¡ŸÆ_c⁄n
++;

62 
cb
->
ncuº_c⁄n
++;

65  
c⁄n
;

66 
	}
}

68 
c⁄n
 *

69 
	$c⁄n_gë
(
c⁄n_ba£
 *
cb
)

71 
c⁄n
 *conn;

73 
c⁄n
 = 
	`_c⁄n_gë
(
cb
);

74 i‡(
c⁄n
 =
NULL
) {

75  
NULL
;

78 
	`log_debug
(
LOG_VVERB
, "gë c⁄¿%∞˛õ¡ %d", 
c⁄n
, c⁄n->
sd
);

80  
c⁄n
;

81 
	}
}

84 
	$c⁄n_‰ì
(
c⁄n
 *conn)

86 
	`log_debug
(
LOG_VVERB
, "‰ì c⁄¿%p", 
c⁄n
);

88 i‡(
c⁄n
 =
NULL
) {

92 i‡(
c⁄n
->
sd
 > 0) {

93 
	`˛o£
(
c⁄n
->
sd
);

94 
c⁄n
->
sd
 = -1;

95 
	`upd©e_cuº_˛õ¡s_sub
(1);

98 i‡(
c⁄n
->
öqueue
) {

99 
sds
 
buf
;

100 
buf
 = 
	`dli°P›
(
c⁄n
->
öqueue
)) {

101 
	`sds‰ì
(
buf
);

103 
	`dli°Rñó£
(
c⁄n
->
öqueue
);

104 
c⁄n
->
öqueue
 = 
NULL
;

107 i‡(
c⁄n
->
outqueue
) {

108 
sds
 
buf
;

109 
buf
 = 
	`dli°P›
(
c⁄n
->
outqueue
)) {

110 
	`sds‰ì
(
buf
);

112 
	`dli°Rñó£
(
c⁄n
->
outqueue
);

113 
c⁄n
->
outqueue
 = 
NULL
;

116 
	`d‰ì
(
c⁄n
);

117 
	}
}

121 
	$c⁄n_put
(
c⁄n
 *conn)

124 
c⁄n_ba£
 *
cb
 = 
c⁄n
->cb;

126 
	`ASSERT
(
c⁄n
->
ow√r
 =
NULL
);

128 
	`log_debug
(
LOG_VVERB
, "puàc⁄¿%p", 
c⁄n
);

131 i‡(
c⁄n
->
sd
 > 0) {

132 
	`˛o£
(
c⁄n
->
sd
);

133 
c⁄n
->
sd
 = -1;

134 
	`upd©e_cuº_˛õ¡s_sub
(1);

137 i‡(
cb
 =
NULL
) {

138 
	`c⁄n_‰ì
(
c⁄n
);

142 i‡(
c⁄n
->
öqueue
) {

143 
sds
 
buf
;

144 
buf
 = 
	`dli°P›
(
c⁄n
->
öqueue
)) {

145 
	`sds‰ì
(
buf
);

149 i‡(
c⁄n
->
outqueue
) {

150 
sds
 
buf
;

151 
buf
 = 
	`dli°P›
(
c⁄n
->
outqueue
)) {

152 
	`sds‰ì
(
buf
);

156 
	`dli°Push
(
cb
->
‰ì_c⁄nq
, 
c⁄n
);

157 
cb
->
ncuº_cc⁄n
--;

158 
cb
->
ncuº_c⁄n
--;

159 
	}
}

163 
	$c⁄n_öô
(
c⁄n_ba£
 *
cb
)

165 
	`log_debug
(
LOG_DEBUG
, "c⁄¿sizê%d", (
c⁄n
));

167 
cb
->
‰ì_c⁄nq
 = 
NULL
;

168 
cb
->
¡ŸÆ_c⁄n
 = 0;

169 
cb
->
ncuº_cc⁄n
 = 0;

170 
cb
->
ncuº_cc⁄n
 = 0;

172 
cb
->
‰ì_c⁄nq
 = 
	`dli°Cª©e
();

173 i‡(
cb
->
‰ì_c⁄nq
 =
NULL
) {

174  
VR_ENOMEM
;

177  
VR_OK
;

178 
	}
}

181 
	$c⁄n_deöô
(
c⁄n_ba£
 *
cb
)

183 
c⁄n
 *conn;

185 i‡(
cb
->
‰ì_c⁄nq
) {

186 
c⁄n
 = 
	`dli°P›
(
cb
->
‰ì_c⁄nq
)) {

187 
	`c⁄n_‰ì
(
c⁄n
);

189 
	`ASSERT
(
	`dli°Lígth
(
cb
->
‰ì_c⁄nq
) == 0);

190 
	`dli°Rñó£
(
cb
->
‰ì_c⁄nq
);

192 
	}
}

194 
ssize_t


195 
	$c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
)

197 
ssize_t
 
n
;

199 
	`ASSERT
(
buf
 !
NULL
);

200 
	`ASSERT
(
size
 > 0);

201 
	`ASSERT
(
c⁄n
->
ªcv_ªady
);

205 
n
 = 
	`vr_ªad
(
c⁄n
->
sd
, 
buf
, 
size
);

208 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %d %zd o‡%zu", 
c⁄n
->
sd
, 
n
, 
size
);

211 i‡(
n
 > 0) {

212 i‡(
n
 < (
ssize_t
Ë
size
) {

213 
c⁄n
->
ªcv_ªady
 = 0;

215 
c⁄n
->
ªcv_byãs
 +(
size_t
)
n
;

216  
n
;

219 i‡(
n
 == 0) {

220 
c⁄n
->
ªcv_ªady
 = 0;

221 
c⁄n
->
eof
 = 1;

222 
	`log_debug
(
LOG_INFO
, "ªcv o¿sd %dÉo‡rb %zu sb %zu", 
c⁄n
->
sd
,

223 
c⁄n
->
ªcv_byãs
, c⁄n->
£nd_byãs
);

224  
n
;

227 i‡(
î∫o
 =
EINTR
) {

228 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

230 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

231 
c⁄n
->
ªcv_ªady
 = 0;

232 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

233  
VR_EAGAIN
;

235 
c⁄n
->
ªcv_ªady
 = 0;

236 
c⁄n
->
îr
 = 
î∫o
;

237 
	`log_îr‹
("ªcv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

238  
VR_ERROR
;

242 
	`NOT_REACHED
();

244  
VR_ERROR
;

245 
	}
}

247 
ssize_t


248 
	$c⁄n_£nd
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
n£nd
)

250 
ssize_t
 
n
;

252 
	`ASSERT
(
n£nd
 != 0);

253 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

257 
n
 = 
	`vr_wrôe
(
c⁄n
->
sd
, 
buf
, 
n£nd
);

259 
	`log_debug
(
LOG_VERB
, "send on sd %d %zd of %zu",

260 
c⁄n
->
sd
, 
n
, 
n£nd
);

262 i‡(
n
 > 0) {

263 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

264 
c⁄n
->
£nd_ªady
 = 0;

266 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

267  
n
;

270 i‡(
n
 == 0) {

271 
	`log_w¨n
("£nd o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

272 
c⁄n
->
£nd_ªady
 = 0;

276 i‡(
î∫o
 =
EINTR
) {

277 
	`log_debug
(
LOG_VERB
, "£nd o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

279 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

280 
c⁄n
->
£nd_ªady
 = 0;

281 
	`log_debug
(
LOG_VERB
, "£nd o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

282  
VR_EAGAIN
;

284 
c⁄n
->
£nd_ªady
 = 0;

285 
c⁄n
->
îr
 = 
î∫o
;

286 
	`log_îr‹
("£nd o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

287  
VR_ERROR
;

291 
	`NOT_REACHED
();

293  
VR_ERROR
;

294 
	}
}

296 
ssize_t


297 
	$c⁄n_£ndv
(
c⁄n
 *c⁄n, 
d¨øy
 *
£ndv
, 
size_t
 
n£nd
)

299 
ssize_t
 
n
;

301 
	`ASSERT
(
	`d¨øy_n
(
£ndv
) > 0);

302 
	`ASSERT
(
n£nd
 != 0);

303 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

306 
n
 = 
	`vr_wrôev
(
c⁄n
->
sd
, 
£ndv
->
ñem
, sídv->
√Àm
);

308 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %d %zd o‡%zu i¿%"
PRIu32
" buffers",

309 
c⁄n
->
sd
, 
n
, 
n£nd
, 
£ndv
->
√Àm
);

311 i‡(
n
 > 0) {

312 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

313 
c⁄n
->
£nd_ªady
 = 0;

315 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

316  
n
;

319 i‡(
n
 == 0) {

320 
	`log_w¨n
("£ndv o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

321 
c⁄n
->
£nd_ªady
 = 0;

325 i‡(
î∫o
 =
EINTR
) {

326 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

328 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

329 
c⁄n
->
£nd_ªady
 = 0;

330 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

331  
VR_EAGAIN
;

333 
c⁄n
->
£nd_ªady
 = 0;

334 
c⁄n
->
îr
 = 
î∫o
;

335 
	`log_îr‹
("£ndv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

336  
VR_ERROR
;

340 
	`NOT_REACHED
();

342  
VR_ERROR
;

343 
	}
}

	@src/vr_connection.c

1 
	~<sys/uio.h
>

3 
	~<vr_c‹e.h
>

5 
c⁄n_‰ì
(
c⁄n
 *conn);

8 
c⁄n
 *

9 
	$_c⁄n_gë
(
c⁄n_ba£
 *
cb
)

11 
c⁄n
 *conn;

13 i‡(
cb
 !
NULL
 && 
	`dli°Lígth
(cb->
‰ì_c⁄nq
) > 0) {

14 
c⁄n
 = 
	`dli°P›
(
cb
->
‰ì_c⁄nq
);

16 
c⁄n
 = 
	`dÆloc
((*conn));

17 i‡(
c⁄n
 =
NULL
) {

18  
NULL
;

20 
c⁄n
->
cb
 = cb;

22 
c⁄n
->
öqueue
 = 
NULL
;

23 
c⁄n
->
outqueue
 = 
NULL
;

26 
c⁄n
->
ow√r
 = 
NULL
;

28 
c⁄n
->
sd
 = -1;

30 
c⁄n
->
£nd_byãs
 = 0;

31 
c⁄n
->
ªcv_byãs
 = 0;

33 
c⁄n
->
îr
 = 0;

34 
c⁄n
->
ªcv_a˘ive
 = 0;

35 
c⁄n
->
ªcv_ªady
 = 0;

36 
c⁄n
->
£nd_a˘ive
 = 0;

37 
c⁄n
->
£nd_ªady
 = 0;

39 
c⁄n
->
c⁄√˘ög
 = 0;

40 
c⁄n
->
c⁄√˘ed
 = 0;

41 
c⁄n
->
eof
 = 0;

42 
c⁄n
->
d⁄e
 = 0;

44 i‡(
c⁄n
->
öqueue
 =
NULL
) {

45 
c⁄n
->
öqueue
 = 
	`dli°Cª©e
();

46 i‡(
c⁄n
->
öqueue
 =
NULL
) {

47 
	`c⁄n_‰ì
(
c⁄n
);

48  
NULL
;

52 i‡(
c⁄n
->
outqueue
 =
NULL
) {

53 
c⁄n
->
outqueue
 = 
	`dli°Cª©e
();

54 i‡(
c⁄n
->
outqueue
 =
NULL
) {

55 
	`c⁄n_‰ì
(
c⁄n
);

56  
NULL
;

60 i‡(
cb
 !
NULL
) {

61 
cb
->
¡ŸÆ_c⁄n
++;

62 
cb
->
ncuº_c⁄n
++;

65  
c⁄n
;

66 
	}
}

68 
c⁄n
 *

69 
	$c⁄n_gë
(
c⁄n_ba£
 *
cb
)

71 
c⁄n
 *conn;

73 
c⁄n
 = 
	`_c⁄n_gë
(
cb
);

74 i‡(
c⁄n
 =
NULL
) {

75  
NULL
;

78 
	`log_debug
(
LOG_VVERB
, "gë c⁄¿%∞˛õ¡ %d", 
c⁄n
, c⁄n->
sd
);

80  
c⁄n
;

81 
	}
}

84 
	$c⁄n_‰ì
(
c⁄n
 *conn)

86 
	`log_debug
(
LOG_VVERB
, "‰ì c⁄¿%p", 
c⁄n
);

88 i‡(
c⁄n
 =
NULL
) {

92 i‡(
c⁄n
->
sd
 > 0) {

93 
	`˛o£
(
c⁄n
->
sd
);

94 
c⁄n
->
sd
 = -1;

95 
	`upd©e_cuº_˛õ¡s_sub
(1);

98 i‡(
c⁄n
->
öqueue
) {

99 
sds
 
buf
;

100 
buf
 = 
	`dli°P›
(
c⁄n
->
öqueue
)) {

101 
	`sds‰ì
(
buf
);

103 
	`dli°Rñó£
(
c⁄n
->
öqueue
);

104 
c⁄n
->
öqueue
 = 
NULL
;

107 i‡(
c⁄n
->
outqueue
) {

108 
sds
 
buf
;

109 
buf
 = 
	`dli°P›
(
c⁄n
->
outqueue
)) {

110 
	`sds‰ì
(
buf
);

112 
	`dli°Rñó£
(
c⁄n
->
outqueue
);

113 
c⁄n
->
outqueue
 = 
NULL
;

116 
	`d‰ì
(
c⁄n
);

117 
	}
}

121 
	$c⁄n_put
(
c⁄n
 *conn)

124 
c⁄n_ba£
 *
cb
 = 
c⁄n
->cb;

126 
	`ASSERT
(
c⁄n
->
ow√r
 =
NULL
);

128 
	`log_debug
(
LOG_VVERB
, "puàc⁄¿%p", 
c⁄n
);

131 i‡(
c⁄n
->
sd
 > 0) {

132 
	`˛o£
(
c⁄n
->
sd
);

133 
c⁄n
->
sd
 = -1;

134 
	`upd©e_cuº_˛õ¡s_sub
(1);

137 i‡(
cb
 =
NULL
) {

138 
	`c⁄n_‰ì
(
c⁄n
);

142 i‡(
c⁄n
->
öqueue
) {

143 
sds
 
buf
;

144 
buf
 = 
	`dli°P›
(
c⁄n
->
öqueue
)) {

145 
	`sds‰ì
(
buf
);

149 i‡(
c⁄n
->
outqueue
) {

150 
sds
 
buf
;

151 
buf
 = 
	`dli°P›
(
c⁄n
->
outqueue
)) {

152 
	`sds‰ì
(
buf
);

156 
	`dli°Push
(
cb
->
‰ì_c⁄nq
, 
c⁄n
);

157 
cb
->
ncuº_cc⁄n
--;

158 
cb
->
ncuº_c⁄n
--;

159 
	}
}

163 
	$c⁄n_öô
(
c⁄n_ba£
 *
cb
)

165 
	`log_debug
(
LOG_DEBUG
, "c⁄¿sizê%d", (
c⁄n
));

167 
cb
->
‰ì_c⁄nq
 = 
NULL
;

168 
cb
->
¡ŸÆ_c⁄n
 = 0;

169 
cb
->
ncuº_cc⁄n
 = 0;

170 
cb
->
ncuº_cc⁄n
 = 0;

172 
cb
->
‰ì_c⁄nq
 = 
	`dli°Cª©e
();

173 i‡(
cb
->
‰ì_c⁄nq
 =
NULL
) {

174  
VR_ENOMEM
;

177  
VR_OK
;

178 
	}
}

181 
	$c⁄n_deöô
(
c⁄n_ba£
 *
cb
)

183 
c⁄n
 *conn;

185 i‡(
cb
->
‰ì_c⁄nq
) {

186 
c⁄n
 = 
	`dli°P›
(
cb
->
‰ì_c⁄nq
)) {

187 
	`c⁄n_‰ì
(
c⁄n
);

189 
	`ASSERT
(
	`dli°Lígth
(
cb
->
‰ì_c⁄nq
) == 0);

190 
	`dli°Rñó£
(
cb
->
‰ì_c⁄nq
);

192 
	}
}

194 
ssize_t


195 
	$c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
)

197 
ssize_t
 
n
;

199 
	`ASSERT
(
buf
 !
NULL
);

200 
	`ASSERT
(
size
 > 0);

201 
	`ASSERT
(
c⁄n
->
ªcv_ªady
);

205 
n
 = 
	`vr_ªad
(
c⁄n
->
sd
, 
buf
, 
size
);

208 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %d %zd o‡%zu", 
c⁄n
->
sd
, 
n
, 
size
);

211 i‡(
n
 > 0) {

212 i‡(
n
 < (
ssize_t
Ë
size
) {

213 
c⁄n
->
ªcv_ªady
 = 0;

215 
c⁄n
->
ªcv_byãs
 +(
size_t
)
n
;

216  
n
;

219 i‡(
n
 == 0) {

220 
c⁄n
->
ªcv_ªady
 = 0;

221 
c⁄n
->
eof
 = 1;

222 
	`log_debug
(
LOG_INFO
, "ªcv o¿sd %dÉo‡rb %zu sb %zu", 
c⁄n
->
sd
,

223 
c⁄n
->
ªcv_byãs
, c⁄n->
£nd_byãs
);

224  
n
;

227 i‡(
î∫o
 =
EINTR
) {

228 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

230 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

231 
c⁄n
->
ªcv_ªady
 = 0;

232 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

233  
VR_EAGAIN
;

235 
c⁄n
->
ªcv_ªady
 = 0;

236 
c⁄n
->
îr
 = 
î∫o
;

237 
	`log_îr‹
("ªcv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

238  
VR_ERROR
;

242 
	`NOT_REACHED
();

244  
VR_ERROR
;

245 
	}
}

247 
ssize_t


248 
	$c⁄n_£nd
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
n£nd
)

250 
ssize_t
 
n
;

252 
	`ASSERT
(
n£nd
 != 0);

253 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

257 
n
 = 
	`vr_wrôe
(
c⁄n
->
sd
, 
buf
, 
n£nd
);

259 
	`log_debug
(
LOG_VERB
, "send on sd %d %zd of %zu",

260 
c⁄n
->
sd
, 
n
, 
n£nd
);

262 i‡(
n
 > 0) {

263 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

264 
c⁄n
->
£nd_ªady
 = 0;

266 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

267  
n
;

270 i‡(
n
 == 0) {

271 
	`log_w¨n
("£nd o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

272 
c⁄n
->
£nd_ªady
 = 0;

276 i‡(
î∫o
 =
EINTR
) {

277 
	`log_debug
(
LOG_VERB
, "£nd o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

279 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

280 
c⁄n
->
£nd_ªady
 = 0;

281 
	`log_debug
(
LOG_VERB
, "£nd o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

282  
VR_EAGAIN
;

284 
c⁄n
->
£nd_ªady
 = 0;

285 
c⁄n
->
îr
 = 
î∫o
;

286 
	`log_îr‹
("£nd o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

287  
VR_ERROR
;

291 
	`NOT_REACHED
();

293  
VR_ERROR
;

294 
	}
}

296 
ssize_t


297 
	$c⁄n_£ndv
(
c⁄n
 *c⁄n, 
d¨øy
 *
£ndv
, 
size_t
 
n£nd
)

299 
ssize_t
 
n
;

301 
	`ASSERT
(
	`d¨øy_n
(
£ndv
) > 0);

302 
	`ASSERT
(
n£nd
 != 0);

303 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

306 
n
 = 
	`vr_wrôev
(
c⁄n
->
sd
, 
£ndv
->
ñem
, sídv->
√Àm
);

308 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %d %zd o‡%zu i¿%"
PRIu32
" buffers",

309 
c⁄n
->
sd
, 
n
, 
n£nd
, 
£ndv
->
√Àm
);

311 i‡(
n
 > 0) {

312 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

313 
c⁄n
->
£nd_ªady
 = 0;

315 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

316  
n
;

319 i‡(
n
 == 0) {

320 
	`log_w¨n
("£ndv o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

321 
c⁄n
->
£nd_ªady
 = 0;

325 i‡(
î∫o
 =
EINTR
) {

326 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

328 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

329 
c⁄n
->
£nd_ªady
 = 0;

330 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

331  
VR_EAGAIN
;

333 
c⁄n
->
£nd_ªady
 = 0;

334 
c⁄n
->
îr
 = 
î∫o
;

335 
	`log_îr‹
("£ndv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

336  
VR_ERROR
;

340 
	`NOT_REACHED
();

342  
VR_ERROR
;

343 
	}
}

	@src/vr_connection.h

1 #i‚de‡
_VR_CONNECTION_H_


2 
	#_VR_CONNECTION_H_


	)

5 
	sc⁄n_ba£
 {

6 
dli°
 *
	m‰ì_c⁄nq
;

7 
uöt64_t
 
	m¡ŸÆ_c⁄n
;

8 
uöt32_t
 
	mncuº_c⁄n
;

9 
uöt32_t
 
	mncuº_cc⁄n
;

10 }
	tc⁄n_ba£
;

13 
	sc⁄n
 {

15 *
	mow√r
;

17 
c⁄n_ba£
 *
	mcb
;

19 
	msd
;

21 
size_t
 
	mªcv_byãs
;

23 
size_t
 
	m£nd_byãs
;

25 
îr_t
 
	mîr
;

27 
	mªcv_a˘ive
:1;

28 
	mªcv_ªady
:1;

29 
	m£nd_a˘ive
:1;

30 
	m£nd_ªady
:1;

32 
	mc⁄√˘ög
:1;

33 
	mc⁄√˘ed
:1;

35 
	meof
:1;

36 
	md⁄e
:1;

39 
dli°
 *
	möqueue
;

40 
dli°
 *
	moutqueue
;

43 
c⁄n
 *
c⁄n_gë
(
c⁄n_ba£
 *
cb
);

44 
c⁄n_put
(
c⁄n
 *conn);

46 
c⁄n_öô
(
c⁄n_ba£
 *
cb
);

47 
c⁄n_deöô
(
c⁄n_ba£
 *
cb
);

49 
ssize_t
 
c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
);

50 
ssize_t
 
c⁄n_£nd
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
n£nd
);

51 
ssize_t
 
c⁄n_£ndv
(
c⁄n
 *c⁄n, 
d¨øy
 *
£ndv
, 
size_t
 
n£nd
);

	@src/vr_connection.h

1 #i‚de‡
_VR_CONNECTION_H_


2 
	#_VR_CONNECTION_H_


	)

5 
	sc⁄n_ba£
 {

6 
dli°
 *
	m‰ì_c⁄nq
;

7 
uöt64_t
 
	m¡ŸÆ_c⁄n
;

8 
uöt32_t
 
	mncuº_c⁄n
;

9 
uöt32_t
 
	mncuº_cc⁄n
;

10 }
	tc⁄n_ba£
;

13 
	sc⁄n
 {

15 *
	mow√r
;

17 
c⁄n_ba£
 *
	mcb
;

19 
	msd
;

21 
size_t
 
	mªcv_byãs
;

23 
size_t
 
	m£nd_byãs
;

25 
îr_t
 
	mîr
;

27 
	mªcv_a˘ive
:1;

28 
	mªcv_ªady
:1;

29 
	m£nd_a˘ive
:1;

30 
	m£nd_ªady
:1;

32 
	mc⁄√˘ög
:1;

33 
	mc⁄√˘ed
:1;

35 
	meof
:1;

36 
	md⁄e
:1;

39 
dli°
 *
	möqueue
;

40 
dli°
 *
	moutqueue
;

43 
c⁄n
 *
c⁄n_gë
(
c⁄n_ba£
 *
cb
);

44 
c⁄n_put
(
c⁄n
 *conn);

46 
c⁄n_öô
(
c⁄n_ba£
 *
cb
);

47 
c⁄n_deöô
(
c⁄n_ba£
 *
cb
);

49 
ssize_t
 
c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
);

50 
ssize_t
 
c⁄n_£nd
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
n£nd
);

51 
ssize_t
 
c⁄n_£ndv
(
c⁄n
 *c⁄n, 
d¨øy
 *
£ndv
, 
size_t
 
n£nd
);

	@src/vr_core.c

1 
	~<°dlib.h
>

2 
	~<uni°d.h
>

4 
	~<vr_c‹e.h
>

6 
uöt32_t
 
	gª£rved_fds
 = 0;

	@src/vr_core.c

1 
	~<°dlib.h
>

2 
	~<uni°d.h
>

4 
	~<vr_c‹e.h
>

6 
uöt32_t
 
	gª£rved_fds
 = 0;

	@src/vr_core.h

1 #i‚de‡
_VR_CORE_H_


2 
	#_VR_CORE_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 #ifde‡
HAVE_STATS


11 
	#VR_STATS
 1

	)

13 
	#VR_STATS
 0

	)

16 #ifde‡
HAVE_LITTLE_ENDIAN


17 
	#VR_LITTLE_ENDIAN
 1

	)

20 #ifde‡
HAVE_BACKTRACE


21 
	#VR_HAVE_BACKTRACE
 1

	)

24 #ifde‡
HAVE_SPINLOCK


25 
	#VR_USE_SPINLOCK
 1

	)

28 
	#VR_OK
 0

	)

29 
	#VR_ERROR
 -1

	)

30 
	#VR_EAGAIN
 -2

	)

31 
	#VR_ENOMEM
 -3

	)

34 
	#RESERVED_FDS
 32

	)

36 
	tr°©us_t
;

37 
	tîr_t
;

39 
	tm°ime_t
;

41 
	gö°™˚
;

42 
	gd¨øy
;

43 
	gc⁄n
;

44 
	g˛õ¡
;

45 
	g˛õ¡Buf„rLimôsC⁄fig
;

46 
	gªdisComm™d
;

47 
	gvr_w‹kî
;

49 
	~<°ddef.h
>

50 
	~<°döt.h
>

51 
	~<öây≥s.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<˘y≥.h
>

55 
	~<î∫o.h
>

56 
	~<limôs.h
>

57 
	~<time.h
>

58 
	~<uni°d.h
>

59 
	~<±hªad.h
>

61 
	~<sys/ty≥s.h
>

62 
	~<sys/sockë.h
>

63 
	~<sys/un.h
>

64 
	~<sys/time.h
>

65 
	~<sys/ªsour˚.h
>

66 
	~<√töë/ö.h
>

68 
	~<´.h
>

69 
	~<sds.h
>

70 
	~<dutû.h
>

71 
	~<dlog.h
>

72 
	~<dhashkô.h
>

73 
	~<dmÆloc.h
>

74 
	~<d¨øy.h
>

75 
	~<dli°.h
>

77 
	~<vr_utû.h
>

78 
	~<vr_sig«l.h
>

80 
	~<vr_zùli°.h
>

81 
	~<vr_zùm≠.h
>

82 
	~<vr_di˘.h
>

83 
	~<vr_rbåì.h
>

84 
	~<vr_öt£t.h
>

85 
	~<vr_quickli°.h
>

87 
	~<vr_lzf.h
>

88 
	~<vr_lzfP.h
>

90 
	~<vr_obje˘.h
>

92 
	~<vr_li°í.h
>

93 
	~<vr_c⁄√˘i⁄.h
>

95 
	~<vr_°©s.h
>

96 
	~<vr_c⁄f.h
>

98 
	~<vr_thªad.h
>

99 
	~<vr_evíéo›.h
>

100 
	~<vr_ma°î.h
>

101 
	~<vr_w‹kî.h
>

102 
	~<vr_backíd.h
>

104 
	~<vr_db.h
>

105 
	~<vr_mu…i.h
>

107 
	~<vr_comm™d.h
>

108 
	~<vr_block.h
>

109 
	~<vr_˛õ¡.h
>

110 
	~<vr_£rvî.h
>

112 
	~<vr_nŸify.h
>

113 
	~<vr_pubsub.h
>

115 
	~<vr_rdb.h
>

116 
	~<vr_aof.h
>

117 
	~<vr_ª∂iˇti⁄.h
>

118 
	~<vr_s¸ùtög.h
>

120 
	~<vr_t_hash.h
>

121 
	~<vr_t_li°.h
>

122 
	~<vr_t_£t.h
>

123 
	~<vr_t_°rög.h
>

124 
	~<vr_t_z£t.h
>

126 
	~<vr_bô›s.h
>

128 
	~<vr_hy≥æoglog.h
>

130 
	~<vr_¶owlog.h
>

132 
	sö°™˚
 {

134 
	mlog_Àvñ
;

136 *
	mlog_fûíame
;

138 *
	mc⁄f_fûíame
;

140 
	mho°«me
[
VR_MAXHOSTNAMELEN
];

142 
size_t
 
	mmbuf_chunk_size
;

144 
pid_t
 
	mpid
;

145 *
	mpid_fûíame
;

147 
	mpidfûe
:1;

149 
	mthªad_num
;

	@src/vr_core.h

1 #i‚de‡
_VR_CORE_H_


2 
	#_VR_CORE_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 #ifde‡
HAVE_STATS


11 
	#VR_STATS
 1

	)

13 
	#VR_STATS
 0

	)

16 #ifde‡
HAVE_LITTLE_ENDIAN


17 
	#VR_LITTLE_ENDIAN
 1

	)

20 #ifde‡
HAVE_BACKTRACE


21 
	#VR_HAVE_BACKTRACE
 1

	)

24 #ifde‡
HAVE_SPINLOCK


25 
	#VR_USE_SPINLOCK
 1

	)

28 
	#VR_OK
 0

	)

29 
	#VR_ERROR
 -1

	)

30 
	#VR_EAGAIN
 -2

	)

31 
	#VR_ENOMEM
 -3

	)

34 
	#RESERVED_FDS
 32

	)

36 
	tr°©us_t
;

37 
	tîr_t
;

39 
	tm°ime_t
;

41 
	gö°™˚
;

42 
	gd¨øy
;

43 
	gc⁄n
;

44 
	g˛õ¡
;

45 
	g˛õ¡Buf„rLimôsC⁄fig
;

46 
	gªdisComm™d
;

47 
	gvr_w‹kî
;

49 
	~<°ddef.h
>

50 
	~<°döt.h
>

51 
	~<öây≥s.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<˘y≥.h
>

55 
	~<î∫o.h
>

56 
	~<limôs.h
>

57 
	~<time.h
>

58 
	~<uni°d.h
>

59 
	~<±hªad.h
>

61 
	~<sys/ty≥s.h
>

62 
	~<sys/sockë.h
>

63 
	~<sys/un.h
>

64 
	~<sys/time.h
>

65 
	~<sys/ªsour˚.h
>

66 
	~<√töë/ö.h
>

68 
	~<´.h
>

69 
	~<sds.h
>

70 
	~<dutû.h
>

71 
	~<dlog.h
>

72 
	~<dhashkô.h
>

73 
	~<dmÆloc.h
>

74 
	~<d¨øy.h
>

75 
	~<dli°.h
>

77 
	~<vr_utû.h
>

78 
	~<vr_sig«l.h
>

80 
	~<vr_zùli°.h
>

81 
	~<vr_zùm≠.h
>

82 
	~<vr_di˘.h
>

83 
	~<vr_rbåì.h
>

84 
	~<vr_öt£t.h
>

85 
	~<vr_quickli°.h
>

87 
	~<vr_lzf.h
>

88 
	~<vr_lzfP.h
>

90 
	~<vr_obje˘.h
>

92 
	~<vr_li°í.h
>

93 
	~<vr_c⁄√˘i⁄.h
>

95 
	~<vr_°©s.h
>

96 
	~<vr_c⁄f.h
>

98 
	~<vr_thªad.h
>

99 
	~<vr_evíéo›.h
>

100 
	~<vr_ma°î.h
>

101 
	~<vr_w‹kî.h
>

102 
	~<vr_backíd.h
>

104 
	~<vr_db.h
>

105 
	~<vr_mu…i.h
>

107 
	~<vr_comm™d.h
>

108 
	~<vr_block.h
>

109 
	~<vr_˛õ¡.h
>

110 
	~<vr_£rvî.h
>

112 
	~<vr_nŸify.h
>

113 
	~<vr_pubsub.h
>

115 
	~<vr_rdb.h
>

116 
	~<vr_aof.h
>

117 
	~<vr_ª∂iˇti⁄.h
>

118 
	~<vr_s¸ùtög.h
>

120 
	~<vr_t_hash.h
>

121 
	~<vr_t_li°.h
>

122 
	~<vr_t_£t.h
>

123 
	~<vr_t_°rög.h
>

124 
	~<vr_t_z£t.h
>

126 
	~<vr_bô›s.h
>

128 
	~<vr_hy≥æoglog.h
>

130 
	~<vr_¶owlog.h
>

132 
	sö°™˚
 {

134 
	mlog_Àvñ
;

136 *
	mlog_fûíame
;

138 *
	mc⁄f_fûíame
;

140 
	mho°«me
[
VR_MAXHOSTNAMELEN
];

142 
size_t
 
	mmbuf_chunk_size
;

144 
pid_t
 
	mpid
;

145 *
	mpid_fûíame
;

147 
	mpidfûe
:1;

149 
	mthªad_num
;

	@src/vr_db.c

1 
	~<sig«l.h
>

2 
	~<˘y≥.h
>

4 
	~<vr_c‹e.h
>

7 
di˘Ty≥
 
	gdbDi˘Ty≥
 = {

8 
di˘SdsHash
,

9 
NULL
,

10 
NULL
,

11 
di˘SdsKeyCom∑ª
,

12 
di˘SdsDe°ru˘‹
,

13 
di˘Obje˘De°ru˘‹


17 
di˘Ty≥
 
	gkey±rDi˘Ty≥
 = {

18 
di˘SdsHash
,

19 
NULL
,

20 
NULL
,

21 
di˘SdsKeyCom∑ª
,

22 
NULL
,

23 
NULL


29 
di˘Ty≥
 
	gkeyli°Di˘Ty≥
 = {

30 
di˘ObjHash
,

31 
NULL
,

32 
NULL
,

33 
di˘ObjKeyCom∑ª
,

34 
di˘Obje˘De°ru˘‹
,

35 
di˘Li°De°ru˘‹


39 
evi˘i⁄PoﬁE¡ry
 *
	$evi˘i⁄PoﬁAŒoc
() {

40 
evi˘i⁄PoﬁE¡ry
 *
ï
;

41 
j
;

43 
ï
 = 
	`dÆloc
((*ï)*
MAXMEMORY_EVICTION_POOL_SIZE
);

44 
j
 = 0; j < 
MAXMEMORY_EVICTION_POOL_SIZE
; j++) {

45 
ï
[
j
].
idÀ
 = 0;

46 
ï
[
j
].
key
 = 
NULL
;

48  
ï
;

49 
	}
}

55 
	$ªdisDbInô
(
ªdisDb
 *
db
)

57 
db
->
di˘
 = 
	`di˘Cª©e
(&
dbDi˘Ty≥
,
NULL
);

58 
db
->
expúes
 = 
	`di˘Cª©e
(&
key±rDi˘Ty≥
,
NULL
);

59 
db
->
blockög_keys
 = 
	`di˘Cª©e
(&
keyli°Di˘Ty≥
,
NULL
);

60 
db
->
ªady_keys
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

61 
db
->
w©ched_keys
 = 
	`di˘Cª©e
(&
keyli°Di˘Ty≥
,
NULL
);

62 
db
->
evi˘i⁄_poﬁ
 = 
	`evi˘i⁄PoﬁAŒoc
();

63 
db
->
avg_âl
 = 0;

65 
	`±hªad_rwlock_öô
(&
db
->
rwl
, 
NULL
);

67  
VR_OK
;

68 
	}
}

71 
	$ªdisDbDeöô
(
ªdisDb
 *
db
)

73 
	`±hªad_rwlock_de°roy
(&
db
->
rwl
);

74  
VR_OK
;

75 
	}
}

78 
	$lockDbRód
(
ªdisDb
 *
db
)

80 
	`±hªad_rwlock_rdlock
(&
db
->
rwl
);

81  
VR_OK
;

82 
	}
}

85 
	$lockDbWrôe
(
ªdisDb
 *
db
)

87 
	`±hªad_rwlock_wæock
(&
db
->
rwl
);

88  
VR_OK
;

89 
	}
}

92 
	$u∆ockDb
(
ªdisDb
 *
db
)

94 
	`±hªad_rwlock_u∆ock
(&
db
->
rwl
);

95  
VR_OK
;

96 
	}
}

98 
robj
 *
	$lookupKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

99 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

100 i‡(
de
) {

101 
robj
 *
vÆ
 = 
	`di˘GëVÆ
(
de
);

106 i‡(
£rvî
.
rdb_chûd_pid
 =-1 && sîvî.
aof_chûd_pid
 == -1)

108 
vÆ
->
Ãu
 = 0;

109  
vÆ
;

111  
NULL
;

113 
	}
}

115 
robj
 *
	$lookupKeyRód
(
ªdisDb
 *
db
, 
robj
 *
key
) {

116 i‡(
	`checkIfExpúed
(
db
, 
key
)Ë 
NULL
;

117  
	`lookupKey
(
db
,
key
);

118 
	}
}

120 
robj
 *
	$lookupKeyWrôe
(
ªdisDb
 *
db
, 
robj
 *
key
, *
expúed
) {

121 i‡(
expúed
Ë*expúed = 
	`expúeIfNìded
(
db
,
key
);

122  
	`lookupKey
(
db
,
key
);

123 
	}
}

125 
robj
 *
	$lookupKeyRódOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
) {

126 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
, 
key
);

127 i‡(!
o
Ë
	`addRïly
(
c
,
ª∂y
);

128  
o
;

129 
	}
}

131 
robj
 *
	$lookupKeyWrôeOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
, *
expúed
) {

132 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
, 
key
, 
expúed
);

133 i‡(!
o
Ë
	`addRïly
(
c
,
ª∂y
);

134  
o
;

135 
	}
}

142 
	$dbAdd
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
) {

143 
sds
 
c›y
 = 
	`sdsdup
(
key
->
±r
);

144 
ªtvÆ
 = 
	`di˘Add
(
db
->
di˘
, 
c›y
, 
vÆ
);

145 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
ªtvÆ
 =
DICT_OK
);

146 i‡(
vÆ
->
ty≥
 =
OBJ_LIST
Ë
	`sig«lLi°AsRódy
(
db
, 
key
);

147 
	}
}

155 
	$dbOvîwrôe
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
) {

156 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

158 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
de
 != NULL);

159 
	`di˘Rïœ˚
(
db
->
di˘
, 
key
->
±r
, 
vÆ
);

160 
	}
}

168 
	$£tKey
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
, *
expúed
) {

169 i‡(
	`lookupKeyWrôe
(
db
,
key
,
expúed
Ë=
NULL
) {

170 
	`dbAdd
(
db
,
key
,
vÆ
);

172 
	`dbOvîwrôe
(
db
,
key
,
vÆ
);

175 
	`ªmoveExpúe
(
db
,
key
);

176 
	}
}

178 
	$dbExi°s
(
ªdisDb
 *
db
, 
robj
 *
key
) {

179  
	`di˘Föd
(
db
->
di˘
,
key
->
±r
Ë!
NULL
;

180 
	}
}

186 
robj
 *
	$dbR™domKey
(
ªdisDb
 *
db
) {

187 
di˘E¡ry
 *
de
;

190 
sds
 
key
;

191 
robj
 *
keyobj
;

193 
	`lockDbRód
(
db
);

194 
de
 = 
	`di˘GëR™domKey
(
db
->
di˘
);

195 i‡(
de
 =
NULL
) {

196 
	`u∆ockDb
(
db
);

197  
NULL
;

200 
key
 = 
	`di˘GëKey
(
de
);

201 
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

202 i‡(
	`di˘Föd
(
db
->
expúes
,
key
)) {

203 i‡(
	`checkIfExpúed
(
db
,
keyobj
)) {

204 
	`u∆ockDb
(
db
);

205 
	`‰ìObje˘
(
keyobj
);

209 
	`u∆ockDb
(
db
);

210  
keyobj
;

212 
	}
}

215 
	$dbDñëe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

218 i‡(
	`di˘Size
(
db
->
expúes
Ë> 0Ë
	`di˘Dñëe
(db->expúes,
key
->
±r
);

219 i‡(
	`di˘Dñëe
(
db
->
di˘
,
key
->
±r
Ë=
DICT_OK
) {

224 
	}
}

226 
robj
 *
	$dbUnsh¨eSåögVÆue
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
o
) {

227 
	`ASSERT
(
o
->
ty≥
 =
OBJ_STRING
);

228 i‡(
o
->
c⁄°™t
 || o->
ícodög
 !
OBJ_ENCODING_RAW
) {

229 
robj
 *
decoded
, *
√w
;

230 
decoded
 = 
	`gëDecodedObje˘
(
o
);

231 
√w
 = 
	`¸óãRawSåögObje˘
(
decoded
->
±r
, 
	`sd¶í
(decoded->ptr));

232 i‡(
decoded
 !
o
Ë
	`‰ìObje˘
(decoded);

233 
	`dbOvîwrôe
(
db
,
key
,
√w
);

234  
√w
;

236  
o
;

237 
	}
}

239 
em±yDb
((
ˇŒback
)(*)) {

240 
j
;

241 
ªmoved
 = 0;

242 
ªdisDb
 *
db
;

244 
j
 = 0; j < 
£rvî
.
dbnum
; j++) {

245 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)
j
);

246 
ªmoved
 +
	`di˘Size
(
db
->
di˘
);

247 
	`di˘Em±y
(
db
->
di˘
,
ˇŒback
);

248 
	`di˘Em±y
(
db
->
expúes
,
ˇŒback
);

251  
ªmoved
;

252 
	}
}

254 
	$£À˘Db
(
˛õ¡
 *
c
, 
id
) {

255 
ªdisDb
 *
db
;

257 i‡(
id
 < 0 || id >
£rvî
.
db um
)

258  
VR_ERROR
;

260 
c
->
di˘id
 = 
id
;

261  
VR_OK
;

262 
	}
}

273 
	$sig«lModifõdKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

274 
	`touchW©chedKey
(
db
,
key
);

275 
	}
}

277 
	$sig«lFlushedDb
(
dbid
) {

278 
	`touchW©chedKeysOnFlush
(
dbid
);

279 
	}
}

285 
	$ÊushdbComm™d
(
˛õ¡
 *
c
) {

286 
idx
;

288 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

289 
	`„tchI¡î«lDbById
(
c
, 
idx
);

290 
	`lockDbWrôe
(
c
->
db
);

291 
c
->
vñ
->
dúty
 +
	`di˘Size
(c->
db
->
di˘
);

292 
	`sig«lFlushedDb
(
c
->
db
->
id
);

293 
	`di˘Em±y
(
c
->
db
->
di˘
,
NULL
);

294 
	`di˘Em±y
(
c
->
db
->
expúes
,
NULL
);

295 
	`u∆ockDb
(
c
->
db
);

298 
	`addRïly
(
c
,
sh¨ed
.
ok
);

299 
	}
}

301 
	$ÊushÆlComm™d
(
˛õ¡
 *
c
) {

302 
idx
;

303 
ªdisDb
 *
db
;

305 
idx
 = 0; idx < 
£rvî
.
dbnum
; idx ++) {

306 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)
idx
);

307 
	`lockDbWrôe
(
db
);

308 
	`di˘Em±y
(
db
->
di˘
,
NULL
);

309 
	`di˘Em±y
(
db
->
expúes
,
NULL
);

310 
	`u∆ockDb
(
db
);

313 
	`addRïly
(
c
,
sh¨ed
.
ok
);

314 
	}
}

316 
	$dñComm™d
(
˛õ¡
 *
c
) {

317 
dñëed
 = 0, 
j
;

318 
expúed
 = 0;

320 
j
 = 1; j < 
c
->
¨gc
; j++) {

321 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[
j
]);

322 
	`lockDbWrôe
(
c
->
db
);

323 
expúed
 +
	`expúeIfNìded
(
c
->
db
,c->
¨gv
[
j
]);

324 i‡(
	`dbDñëe
(
c
->
db
,c->
¨gv
[
j
])) {

325 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[
j
]);

326 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,

327 "dñ",
c
->
¨gv
[
j
],c->
db
->
id
);

328 
c
->
vñ
->
dúty
++;

329 
dñëed
++;

331 
	`u∆ockDb
(
c
->
db
);

333 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

335 i‡(
expúed
 > 0) {

336 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 
expúed
);

338 
	}
}

342 
	$exi°sComm™d
(
˛õ¡
 *
c
) {

343 
cou¡
 = 0;

344 
j
;

346 
j
 = 1; j < 
c
->
¨gc
; j++) {

347 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

348 
	`lockDbRód
(
c
->
db
);

349 i‡(
	`checkIfExpúed
(
c
->
db
,c->
¨gv
[
j
])) {

350 
	`u∆ockDb
(
c
->
db
);

353 i‡(
	`dbExi°s
(
c
->
db
,c->
¨gv
[
j
])Ë
cou¡
++;

354 
	`u∆ockDb
(
c
->
db
);

356 
	`addRïlyL⁄gL⁄g
(
c
,
cou¡
);

358 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 
cou¡
);

359 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, c->
¨gc
-1-
cou¡
);

360 
	}
}

362 
	$£À˘Comm™d
(
˛õ¡
 *
c
) {

363 
id
;

365 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[1], &
id
,

366 "övÆid DB index"Ë!
VR_OK
)

369 i‡(
	`£À˘Db
(
c
,
id
Ë=
VR_ERROR
) {

370 
	`addRïlyEº‹
(
c
,"invalid DB index");

372 
	`addRïly
(
c
,
sh¨ed
.
ok
);

374 
	}
}

376 
	$øndomkeyComm™d
(
˛õ¡
 *
c
) {

377 
robj
 *
key
;

378 
idx
, 
ªåy_cou¡
 = 0;

380 
idx
 = 
	`øndom
()%
£rvî
.
dböum
;

382 
ªåy
:

383 
	`„tchI¡î«lDbById
(
c
, 
idx
);

384 i‡((
key
 = 
	`dbR™domKey
(
c
->
db
)Ë=
NULL
) {

385 i‡(
ªåy_cou¡
++ < 
£rvî
.
dböum
) {

386 i‡(++
idx
 >
£rvî
.
dböum
) {

387 
idx
 = 0;

389 
ªåy
;

392 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

396 
	`addRïlyBulk
(
c
,
key
);

397 
	`‰ìObje˘
(
key
);

398 
	}
}

400 
	$keysComm™d
(
˛õ¡
 *
c
) {

401 
di˘Iãøt‹
 *
di
;

402 
di˘E¡ry
 *
de
;

403 
sds
 
∑âîn
 = 
c
->
¨gv
[1]->
±r
;

404 
∂í
 = 
	`sd¶í
(
∑âîn
), 
Ælkeys
;

405 
numkeys
 = 0;

406 *
ª∂yÀn
;

407 
idx
;

408 
keys_cou¡
 = 0;

409 
expúed
 = 0;

410 
max_time_com∂exôy_limô
;

413 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

414 
	`„tchI¡î«lDbById
(
c
, 
idx
);

415 
	`lockDbWrôe
(
c
->
db
);

416 
keys_cou¡
 +
	`di˘Size
(
c
->
db
->
di˘
);

417 
	`u∆ockDb
(
c
->
db
);

420 
max_time_com∂exôy_limô
 = 
c
->
vñ
->
cc
.max_time_complexity_limit;

421 i‡(
max_time_com∂exôy_limô
 &&

422 
keys_cou¡
 > 
max_time_com∂exôy_limô
) {

423 
	`addRïly
(
c
,
sh¨ed
.
outofcom∂exôylimô
);

427 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

428 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

429 
	`„tchI¡î«lDbById
(
c
,
idx
);

430 
	`lockDbWrôe
(
c
->
db
);

431 
di
 = 
	`di˘GëSa„Iãøt‹
(
c
->
db
->
di˘
);

432 
Ælkeys
 = (
∑âîn
[0] == '*' &&Öattern[1] == '\0');

433 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

434 
sds
 
key
 = 
	`di˘GëKey
(
de
);

435 
robj
 *
keyobj
;

437 i‡(
Ælkeys
 || 
	`°rögm©chÀn
(
∑âîn
,
∂í
,
key
,
	`sd¶í
(key),0)) {

438 
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

439 i‡(
	`expúeIfNìded
(
c
->
db
,
keyobj
) == 0) {

440 
	`addRïlyBulk
(
c
,
keyobj
);

441 
numkeys
++;

443 
expúed
 ++;

445 
	`‰ìObje˘
(
keyobj
);

448 
	`di˘Rñó£Iãøt‹
(
di
);

449 
	`u∆ockDb
(
c
->
db
);

451 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn
,
numkeys
);

452 
	}
}

456 
	$sˇnCÆlback
(*
¥ivd©a
, c⁄° 
di˘E¡ry
 *
de
) {

457 **
pd
 = (**Ë
¥ivd©a
;

458 
dli°
 *
keys
 = 
pd
[0];

459 
robj
 *
o
 = 
pd
[1];

460 
robj
 *
key
, *
vÆ
 = 
NULL
;

462 i‡(
o
 =
NULL
) {

463 
sds
 
sdskey
 = 
	`di˘GëKey
(
de
);

464 
key
 = 
	`¸óãSåögObje˘
(
sdskey
, 
	`sd¶í
(sdskey));

465 } i‡(
o
->
ty≥
 =
OBJ_SET
) {

466 
key
 = 
	`di˘GëKey
(
de
);

467 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

468 } i‡(
o
->
ty≥
 =
OBJ_HASH
) {

469 
key
 = 
	`di˘GëKey
(
de
);

470 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

471 
vÆ
 = 
	`di˘GëVÆ
(
de
);

472 
vÆ
 = 
	`dupSåögObje˘Unc⁄°™t
(val);

473 } i‡(
o
->
ty≥
 =
OBJ_ZSET
) {

474 
key
 = 
	`di˘GëKey
(
de
);

475 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

476 
vÆ
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(*(*)
	`di˘GëVÆ
(
de
),0);

478 
	`£rvîP™ic
("TypeÇot handled in SCAN callback.");

481 
	`dli°AddNodeTaû
(
keys
, 
key
);

482 i‡(
vÆ
Ë
	`dli°AddNodeTaû
(
keys
, val);

483 
	}
}

489 
	$∑r£SˇnCurs‹OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
curs‹
) {

490 *
ïå
;

494 
î∫o
 = 0;

495 *
curs‹
 = 
	`°πoul
(
o
->
±r
, &
ïå
, 10);

496 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] !'\0' || 
î∫o
 =
ERANGE
)

498 
	`addRïlyEº‹
(
c
, "invalid cursor");

499  
VR_ERROR
;

501  
VR_OK
;

502 
	}
}

515 
	$sˇnGíîicComm™d
(
˛õ¡
 *
c
, 
sˇ¡y≥
) {

516 
i
, 
j
;

517 
dli°
 *
keys
 = 
	`dli°Cª©e
();

518 
dli°Node
 *
node
, *
√xäode
;

519 
cou¡
 = 10;

520 
sds
 
∑t
 = 
NULL
;

521 
∑éí
 = 0, 
u£_∑âîn
 = 0;

522 
curs‹
;

523 
robj
 *
o
;

524 
di˘
 *
ht
;

527 
i
 = (
sˇ¡y≥
 =
SCAN_TYPE_KEY
) ? 2 : 3;

528 i‡(
	`∑r£SˇnCurs‹OrRïly
(
c
,c->
¨gv
[
i
-1],&
curs‹
Ë=
VR_ERROR
) ;

531 
i
 < 
c
->
¨gc
) {

532 
j
 = 
c
->
¨gc
 - 
i
;

533 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
, "cou¡"Ë&& 
j
 >= 2) {

534 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
i
+1], &
cou¡
, 
NULL
)

535 !
VR_OK
)

537 
˛ónup
;

540 i‡(
cou¡
 < 1) {

541 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

542 
˛ónup
;

545 
i
 += 2;

546 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
, "m©ch"Ë&& 
j
 >= 2) {

547 
∑t
 = 
c
->
¨gv
[
i
+1]->
±r
;

548 
∑éí
 = 
	`sd¶í
(
∑t
);

552 
u£_∑âîn
 = !(
∑t
[0] ='*' && 
∑éí
 == 1);

554 
i
 += 2;

556 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

557 
˛ónup
;

561 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

562 
o
 = 
NULL
;

563 i‡(
c
->
sˇnid
 =-1 || 
curs‹
 == 0) c->scanid = 0;

564 
	`„tchI¡î«lDbById
(
c
, c->
sˇnid
);

565 
	`lockDbRód
(
c
->
db
);

566 } i‡(
sˇ¡y≥
 =
SCAN_TYPE_HASH
 ||

567 
sˇ¡y≥
 =
SCAN_TYPE_SET
 ||

568 
sˇ¡y≥
 =
SCAN_TYPE_ZSET
) {

569 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

570 
	`lockDbRód
(
c
->
db
);

571 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ysˇn
)Ë=
NULL
) {

572 
	`u∆ockDb
(
c
->
db
);

573 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

578 
sˇ¡y≥
) {

579 
SCAN_TYPE_KEY
:

580 
	`ASSERT
(
o
 =
NULL
);

582 
SCAN_TYPE_HASH
:

583 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

584 
	`u∆ockDb
(
c
->
db
);

585 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

589 
SCAN_TYPE_SET
:

590 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_SET
)) {

591 
	`u∆ockDb
(
c
->
db
);

592 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

596 
SCAN_TYPE_ZSET
:

597 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_ZSET
)) {

598 
	`u∆ockDb
(
c
->
db
);

599 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

607 
	`ASSERT
(
o
 =
NULL
 || o->
ty≥
 =
OBJ_SET
 || o->ty≥ =
OBJ_HASH
 ||

608 
o
->
ty≥
 =
OBJ_ZSET
);

610 
sˇn_ªåy
:

621 
ht
 = 
NULL
;

622 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

623 
ht
 = 
c
->
db
->
di˘
;

624 } i‡(
o
->
ty≥
 =
OBJ_SET
 && o->
ícodög
 =
OBJ_ENCODING_HT
) {

625 
ht
 = 
o
->
±r
;

626 } i‡(
o
->
ty≥
 =
OBJ_HASH
 && o->
ícodög
 =
OBJ_ENCODING_HT
) {

627 
ht
 = 
o
->
±r
;

628 
cou¡
 *= 2;

629 } i‡(
o
->
ty≥
 =
OBJ_ZSET
 && o->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

630 
z£t
 *
zs
 = 
o
->
±r
;

631 
ht
 = 
zs
->
di˘
;

632 
cou¡
 *= 2;

635 i‡(
ht
) {

636 *
¥ivd©a
[2];

641 
maxôî©i⁄s
 = 
cou¡
*10;

646 
¥ivd©a
[0] = 
keys
;

647 
¥ivd©a
[1] = 
o
;

649 
curs‹
 = 
	`di˘Sˇn
(
ht
, curs‹, 
sˇnCÆlback
, 
¥ivd©a
);

650 } 
curs‹
 &&

651 
maxôî©i⁄s
-- &&

652 
	`dli°Lígth
(
keys
Ë< ()
cou¡
);

653 } i‡(
o
->
ty≥
 =
OBJ_SET
) {

654 
pos
 = 0;

655 
öt64_t
 
Œ
;

657 
	`öt£tGë
(
o
->
±r
,
pos
++,&
Œ
))

658 
	`dli°AddNodeTaû
(
keys
,
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œ
));

659 
curs‹
 = 0;

660 } i‡(
o
->
ty≥
 =
OBJ_HASH
 || o->ty≥ =
OBJ_ZSET
) {

661 *
p
 = 
	`zùli°Index
(
o
->
±r
,0);

662 *
v°r
;

663 
vÀn
;

664 
vŒ
;

666 
p
) {

667 
	`zùli°Gë
(
p
,&
v°r
,&
vÀn
,&
vŒ
);

668 
	`dli°AddNodeTaû
(
keys
,

669 (
v°r
 !
NULL
Ë? 
	`¸óãSåögObje˘
((*)v°r,
vÀn
) :

670 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
));

671 
p
 = 
	`zùli°Next
(
o
->
±r
,p);

673 
curs‹
 = 0;

675 
	`£rvîP™ic
("Not handledÉncoding in SCAN.");

678 
	`u∆ockDb
(
c
->
db
);

679 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

680 i‡(
curs‹
 == 0) {

681 i‡(
c
->
sˇnid
 < (
£rvî
.
dböum
 - 1)) {

682 
c
->
sˇnid
 ++;

683 
	`„tchI¡î«lDbById
(
c
, c->
sˇnid
);

684 
	`lockDbRód
(
c
->
db
);

685 
sˇn_ªåy
;

687 
c
->
sˇnid
 = -1;

690 } i‡(
sˇ¡y≥
 =
SCAN_TYPE_HASH
 ||

691 
sˇ¡y≥
 =
SCAN_TYPE_SET
 ||

692 
sˇ¡y≥
 =
SCAN_TYPE_ZSET
) {

693 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

697 
node
 = 
	`dli°Fú°
(
keys
);

698 
node
) {

699 
robj
 *
kobj
 = 
	`dli°NodeVÆue
(
node
);

700 
√xäode
 = 
	`dli°NextNode
(
node
);

701 
fûãr
 = 0;

704 i‡(!
fûãr
 && 
u£_∑âîn
) {

705 i‡(
	`sdsEncodedObje˘
(
kobj
)) {

706 i‡(!
	`°rögm©chÀn
(
∑t
, 
∑éí
, 
kobj
->
±r
, 
	`sd¶í
(kobj->ptr), 0))

707 
fûãr
 = 1;

709 
buf
[
LONG_STR_SIZE
];

710 
Àn
;

712 
	`ASSERT
(
kobj
->
ícodög
 =
OBJ_ENCODING_INT
);

713 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),()
kobj
->
±r
);

714 i‡(!
	`°rögm©chÀn
(
∑t
, 
∑éí
, 
buf
, 
Àn
, 0)Ë
fûãr
 = 1;

719 i‡(!
fûãr
 && 
o
 =
NULL
 && 
	`checkIfExpúed
(
c
->
db
,
kobj
)) filter = 1;

722 i‡(
fûãr
) {

723 
	`‰ìObje˘
(
kobj
);

724 
	`dli°DñNode
(
keys
, 
node
);

730 i‡(
o
 && (o->
ty≥
 =
OBJ_ZSET
 || o->ty≥ =
OBJ_HASH
)) {

731 
node
 = 
√xäode
;

732 
√xäode
 = 
	`dli°NextNode
(
node
);

733 i‡(
fûãr
) {

734 
kobj
 = 
	`dli°NodeVÆue
(
node
);

735 
	`‰ìObje˘
(
kobj
);

736 
	`dli°DñNode
(
keys
, 
node
);

739 
node
 = 
√xäode
;

743 
	`addRïlyMu…iBulkLí
(
c
, 2);

744 
	`addRïlyBulkL⁄gL⁄g
(
c
,
curs‹
);

746 
	`addRïlyMu…iBulkLí
(
c
, 
	`dli°Lígth
(
keys
));

747 (
node
 = 
	`dli°Fú°
(
keys
)Ë!
NULL
) {

748 
robj
 *
kobj
 = 
	`dli°NodeVÆue
(
node
);

749 
	`addRïlyBulk
(
c
, 
kobj
);

750 
	`‰ìObje˘
(
kobj
);

751 
	`dli°DñNode
(
keys
, 
node
);

754 
˛ónup
:

755 
	`dli°SëFªeMëhod
(
keys
,
‰ìObje˘Void
);

756 
	`dli°Rñó£
(
keys
);

757 
	}
}

760 
	$sˇnComm™d
(
˛õ¡
 *
c
) {

761 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_KEY
);

762 
	}
}

764 
	$dbsizeComm™d
(
˛õ¡
 *
c
) {

765 
idx
;

766 
cou¡
 = 0;

768 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

769 
	`„tchI¡î«lDbById
(
c
, 
idx
);

770 
	`lockDbRód
(
c
->
db
);

771 
cou¡
 +
	`di˘Size
(
c
->
db
->
di˘
);

772 
	`u∆ockDb
(
c
->
db
);

775 
	`addRïlyL⁄gL⁄g
(
c
,
cou¡
);

776 
	}
}

778 
	$œ°ßveComm™d
(
˛õ¡
 *
c
) {

779 
	`addRïlyL⁄gL⁄g
(
c
,
£rvî
.
œ°ßve
);

780 
	}
}

782 
	$ty≥Comm™d
(
˛õ¡
 *
c
) {

783 
robj
 *
o
;

784 *
ty≥
;

786 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

787 
	`lockDbRód
(
c
->
db
);

788 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]);

789 i‡(
o
 =
NULL
) {

790 
ty≥
 = "none";

791 
	`u∆ockDb
(
c
->
db
);

792 
	`addRïlySètus
(
c
,
ty≥
);

793 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

796 
o
->
ty≥
) {

797 
OBJ_STRING
: 
ty≥
 = "string"; ;

798 
OBJ_LIST
: 
ty≥
 = "list"; ;

799 
OBJ_SET
: 
ty≥
 = "set"; ;

800 
OBJ_ZSET
: 
ty≥
 = "zset"; ;

801 
OBJ_HASH
: 
ty≥
 = "hash"; ;

802 : 
ty≥
 = "unknown"; ;

806 
	`u∆ockDb
(
c
->
db
);

807 
	`addRïlySètus
(
c
,
ty≥
);

808 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

809 
	}
}

811 
	$shutdownComm™d
(
˛õ¡
 *
c
) {

812 
Êags
 = 0;

814 i‡(
c
->
¨gc
 > 2) {

815 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

817 } i‡(
c
->
¨gc
 == 2) {

818 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"nosave")) {

819 
Êags
 |
SHUTDOWN_NOSAVE
;

820 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"save")) {

821 
Êags
 |
SHUTDOWN_SAVE
;

823 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

833 i‡(
£rvî
.
lﬂdög
)

834 
Êags
 = (Êag†& ~
SHUTDOWN_SAVE
Ë| 
SHUTDOWN_NOSAVE
;

836 
	`addRïlyEº‹
(
c
,"ErrorsÅryingÅo SHUTDOWN. CheckÜogs.");

837 
	}
}

839 
	$ª«meGíîicComm™d
(
˛õ¡
 *
c
, 
nx
) {

840 
robj
 *
o
;

841 
expúe
;

842 
ßmekey
 = 0;

846 i‡(
	`sdscmp
(
c
->
¨gv
[1]->
±r
,c->¨gv[2]->±rË=0Ë
ßmekey
 = 1;

848 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nokeyîr
,
NULL
)) == NULL)

851 i‡(
ßmekey
) {

852 
	`addRïly
(
c
,
nx
 ? 
sh¨ed
.
czîo
 : sh¨ed.
ok
);

856 
	`ö¸RefCou¡
(
o
);

857 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

858 i‡(
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
) != NULL) {

859 i‡(
nx
) {

860 
	`de¸RefCou¡
(
o
);

861 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

866 
	`dbDñëe
(
c
->
db
,c->
¨gv
[2]);

868 
	`dbAdd
(
c
->
db
,c->
¨gv
[2],
o
);

869 i‡(
expúe
 !-1Ë
	`£tExpúe
(
c
->
db
,c->
¨gv
[2],expire);

870 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

871 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

872 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[2]);

873 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"rename_from",

874 
c
->
¨gv
[1],c->
db
->
id
);

875 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"rename_to",

876 
c
->
¨gv
[2],c->
db
->
id
);

877 
£rvî
.
dúty
++;

878 
	`addRïly
(
c
,
nx
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
ok
);

879 
	}
}

881 
	$ª«meComm™d
(
˛õ¡
 *
c
) {

882 
	`ª«meGíîicComm™d
(
c
,0);

883 
	}
}

885 
	$ª«míxComm™d
(
˛õ¡
 *
c
) {

886 
	`ª«meGíîicComm™d
(
c
,1);

887 
	}
}

889 
	$moveComm™d
(
˛õ¡
 *
c
) {

890 
robj
 *
o
;

891 
ªdisDb
 *
§c
, *
d°
;

892 
§cid
;

893 
dbid
, 
expúe
;

896 
§c
 = 
c
->
db
;

897 
§cid
 = 
c
->
db
->
id
;

899 i‡(
	`gëL⁄gL⁄gFromObje˘
(
c
->
¨gv
[2],&
dbid
Ë=
VR_ERROR
 ||

900 
dbid
 < 
INT_MIN
 || dbid > 
INT_MAX
 ||

901 
	`£À˘Db
(
c
,
dbid
Ë=
VR_ERROR
)

903 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

906 
d°
 = 
c
->
db
;

907 
	`£À˘Db
(
c
,
§cid
);

911 i‡(
§c
 =
d°
) {

912 
	`addRïly
(
c
,
sh¨ed
.
ßmeobje˘îr
);

917 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

918 i‡(!
o
) {

919 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

922 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

925 i‡(
	`lookupKeyWrôe
(
d°
,
c
->
¨gv
[1],
NULL
) != NULL) {

926 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

929 
	`dbAdd
(
d°
,
c
->
¨gv
[1],
o
);

930 i‡(
expúe
 !-1Ë
	`£tExpúe
(
d°
,
c
->
¨gv
[1],expire);

931 
	`ö¸RefCou¡
(
o
);

934 
	`dbDñëe
(
§c
,
c
->
¨gv
[1]);

935 
£rvî
.
dúty
++;

936 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

937 
	}
}

943 
	$ªmoveExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

946 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
	`di˘Föd
(
db
->
di˘
,key->
±r
) != NULL);

947  
	`di˘Dñëe
(
db
->
expúes
,
key
->
±r
Ë=
DICT_OK
;

948 
	}
}

950 
	$£tExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
, 
whí
) {

951 
di˘E¡ry
 *
kde
, *
de
;

954 
kde
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

955 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
kde
 != NULL);

956 
de
 = 
	`di˘Rïœ˚Raw
(
db
->
expúes
,
	`di˘GëKey
(
kde
));

957 
	`di˘SëSig√dI¡egîVÆ
(
de
,
whí
);

958 
	}
}

962 
	$gëExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

963 
di˘E¡ry
 *
de
;

966 i‡(
	`di˘Size
(
db
->
expúes
) == 0 ||

967 (
de
 = 
	`di˘Föd
(
db
->
expúes
,
key
->
±r
)Ë=
NULL
)  -1;

971 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
	`di˘Föd
(
db
->
di˘
,key->
±r
) != NULL);

972  
	`di˘GëSig√dI¡egîVÆ
(
de
);

973 
	}
}

983 
	$¥›ag©eExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

984 
robj
 *
¨gv
[2];

986 
¨gv
[0] = 
sh¨ed
.
dñ
;

987 
¨gv
[1] = 
key
;

988 
	`ö¸RefCou¡
(
¨gv
[0]);

989 
	`ö¸RefCou¡
(
¨gv
[1]);

991 i‡(
£rvî
.
aof_°©e
 !
AOF_OFF
)

992 
	`„edAµídO∆yFûe
(
£rvî
.
dñComm™d
,
db
->
id
,
¨gv
,2);

993 
	`ª∂iˇti⁄FìdSœves
(
ª∂
.
¶aves
,
db
->
id
,
¨gv
,2);

995 
	`de¸RefCou¡
(
¨gv
[0]);

996 
	`de¸RefCou¡
(
¨gv
[1]);

997 
	}
}

1000 
	$checkIfExpúed
(
ªdisDb
 *
db
, 
robj
 *
key
) {

1001 
whí
;

1003 
whí
 = 
	`gëExpúe
(
db
,
key
);

1004 i‡(
whí
 > 0 && 
	`vr_m£c_now
() > when) {

1009 
	}
}

1011 
	$expúeIfNìded
(
ªdisDb
 *
db
, 
robj
 *
key
) {

1012 
whí
 = 
	`gëExpúe
(
db
,
key
);

1013 
now
;

1015 i‡(
whí
 < 0)  0;

1018 i‡(
£rvî
.
lﬂdög
)  0;

1025 
now
 = 
£rvî
.
lua_ˇŒî
 ? sîvî.
lua_time_°¨t
 : 
	`vr_m£c_now
();

1034 i‡(
ª∂
.
ma°îho°
 !
NULL
Ë 
now
 > 
whí
;

1037 i‡(
now
 <
whí
)  0;

1041 
	`nŸifyKey•a˚Evít
(
NOTIFY_EXPIRED
,

1042 "expúed",
key
,
db
->
id
);

1043  
	`dbDñëe
(
db
,
key
);

1044 
	}
}

1057 
	$expúeGíîicComm™d
(
˛õ¡
 *
c
, 
ba£time
, 
unô
) {

1058 
robj
 *
key
 = 
c
->
¨gv
[1], *
∑øm
 = c->argv[2];

1059 
whí
;

1060 
expúed
 = 0;

1062 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
∑øm
, &
whí
, 
NULL
Ë!
VR_OK
)

1065 i‡(
unô
 =
UNIT_SECONDS
Ë
whí
 *= 1000;

1066 
whí
 +
ba£time
;

1068 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1069 
	`lockDbWrôe
(
c
->
db
);

1071 i‡(
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
Ë=
NULL
) {

1072 
	`u∆ockDb
(
c
->
db
);

1073 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1074 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1084 i‡(
whí
 <
	`vr_m£c_now
(Ë&& !
£rvî
.
lﬂdög
 && !
ª∂
.
ma°îho°
) {

1085 
robj
 *
aux
;

1087 
	`£rvîAs£πWôhInfo
(
c
,
key
,
	`dbDñëe
(c->
db
,key));

1088 
c
->
vñ
->
dúty
++;

1091 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
key
);

1092 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,
sh¨ed
.
dñ
,
aux
);

1093 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1094 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1095 
	`u∆ockDb
(
c
->
db
);

1096 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1097 
	`addRïly
(
c
, 
sh¨ed
.
c⁄e
);

1100 
	`£tExpúe
(
c
->
db
,
key
,
whí
);

1101 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

1102 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1103 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"expúe",
key
,
c
->
db
->
id
);

1104 
	`u∆ockDb
(
c
->
db
);

1105 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1106 
c
->
vñ
->
dúty
++;

1109 
	}
}

1111 
	$expúeComm™d
(
˛õ¡
 *
c
) {

1112 
	`expúeGíîicComm™d
(
c
,
	`vr_m£c_now
(),
UNIT_SECONDS
);

1113 
	}
}

1115 
	$expúótComm™d
(
˛õ¡
 *
c
) {

1116 
	`expúeGíîicComm™d
(
c
,0,
UNIT_SECONDS
);

1117 
	}
}

1119 
	$≥xpúeComm™d
(
˛õ¡
 *
c
) {

1120 
	`expúeGíîicComm™d
(
c
,
	`vr_m£c_now
(),
UNIT_MILLISECONDS
);

1121 
	}
}

1123 
	$≥xpúótComm™d
(
˛õ¡
 *
c
) {

1124 
	`expúeGíîicComm™d
(
c
,0,
UNIT_MILLISECONDS
);

1125 
	}
}

1127 
	$âlGíîicComm™d
(
˛õ¡
 *
c
, 
ouçut_ms
) {

1128 
expúe
, 
âl
 = -1;

1130 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1131 
	`lockDbRód
(
c
->
db
);

1133 i‡(
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]Ë=
NULL
) {

1134 
	`u∆ockDb
(
c
->
db
);

1135 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

1136 
	`addRïlyL⁄gL⁄g
(
c
,-2);

1141 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

1142 
	`u∆ockDb
(
c
->
db
);

1143 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

1145 i‡(
expúe
 != -1) {

1146 
âl
 = 
expúe
-
	`vr_m£c_now
();

1147 i‡(
âl
 < 0)Åtl = 0;

1149 i‡(
âl
 == -1) {

1150 
	`addRïlyL⁄gL⁄g
(
c
,-1);

1152 
	`addRïlyL⁄gL⁄g
(
c
,
ouçut_ms
 ? 
âl
 : ((ttl+500)/1000));

1154 
	}
}

1156 
	$âlComm™d
(
˛õ¡
 *
c
) {

1157 
	`âlGíîicComm™d
(
c
, 0);

1158 
	}
}

1160 
	$±éComm™d
(
˛õ¡
 *
c
) {

1161 
	`âlGíîicComm™d
(
c
, 1);

1162 
	}
}

1164 
	$≥rsi°Comm™d
(
˛õ¡
 *
c
) {

1165 
di˘E¡ry
 *
de
;

1167 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1168 
	`lockDbWrôe
(
c
->
db
);

1169 
de
 = 
	`di˘Föd
(
c
->
db
->
di˘
,c->
¨gv
[1]->
±r
);

1170 i‡(
de
 =
NULL
) {

1171 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1173 i‡(
	`ªmoveExpúe
(
c
->
db
,c->
¨gv
[1])) {

1174 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

1175 
c
->
vñ
->
dúty
++;

1177 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1180 
	`u∆ockDb
(
c
->
db
);

1181 
	}
}

1189 *
	$gëKeysUsögComm™dTabÀ
(
ªdisComm™d
 *
cmd
,
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1190 
j
, 
i
 = 0, 
œ°
, *
keys
;

1191 
	`UNUSED
(
¨gv
);

1193 i‡(
cmd
->
fú°key
 == 0) {

1194 *
numkeys
 = 0;

1195  
NULL
;

1197 
œ°
 = 
cmd
->
œ°key
;

1198 i‡(
œ°
 < 0Ëœ° = 
¨gc
+last;

1199 
keys
 = 
	`dÆloc
(()*((
œ°
 - 
cmd
->
fú°key
)+1));

1200 
j
 = 
cmd
->
fú°key
; j <
œ°
; j +cmd->
key°ï
) {

1201 
	`ASSERT
(
j
 < 
¨gc
);

1202 
keys
[
i
++] = 
j
;

1204 *
numkeys
 = 
i
;

1205  
keys
;

1206 
	}
}

1219 *
	$gëKeysFromComm™d
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1220 i‡(
cmd
->
gëkeys_¥oc
) {

1221  
cmd
->
	`gëkeys_¥oc
(cmd,
¨gv
,
¨gc
,
numkeys
);

1223  
	`gëKeysUsögComm™dTabÀ
(
cmd
,
¨gv
,
¨gc
,
numkeys
);

1225 
	}
}

1228 
	$gëKeysFªeResu…
(*
ªsu…
) {

1229 
	`d‰ì
(
ªsu…
);

1230 
	}
}

1235 *
	$zuni⁄I¡îGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1236 
i
, 
num
, *
keys
;

1237 
	`UNUSED
(
cmd
);

1239 
num
 = 
	`©oi
(
¨gv
[2]->
±r
);

1242 i‡(
num
 > (
¨gc
-3)) {

1243 *
numkeys
 = 0;

1244  
NULL
;

1250 
keys
 = 
	`dÆloc
(()*(
num
+1));

1253 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 3+i;

1256 
keys
[
num
] = 1;

1257 *
numkeys
 = 
num
+1;

1258  
keys
;

1259 
	}
}

1264 *
	$evÆGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1265 
i
, 
num
, *
keys
;

1266 
	`UNUSED
(
cmd
);

1268 
num
 = 
	`©oi
(
¨gv
[2]->
±r
);

1271 i‡(
num
 > (
¨gc
-3)) {

1272 *
numkeys
 = 0;

1273  
NULL
;

1276 
keys
 = 
	`dÆloc
(()*
num
);

1277 *
numkeys
 = 
num
;

1280 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 3+i;

1282  
keys
;

1283 
	}
}

1292 *
	$s‹tGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1293 
i
, 
j
, 
num
, *
keys
, 
found_°‹e
 = 0;

1294 
	`UNUSED
(
cmd
);

1296 
num
 = 0;

1297 
keys
 = 
	`dÆloc
(()*2);

1299 
keys
[
num
++] = 1;

1306 *
«me
;

1307 
skù
;

1308 } 
skùli°
[] = {

1312 {
NULL
, 0}

1315 
i
 = 2; i < 
¨gc
; i++) {

1316 
j
 = 0; 
skùli°
[j].
«me
 !
NULL
; j++) {

1317 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,
skùli°
[
j
].
«me
)) {

1318 
i
 +
skùli°
[
j
].
skù
;

1320 } i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,"°‹e"Ë&& i+1 < 
¨gc
) {

1324 
found_°‹e
 = 1;

1325 
keys
[
num
] = 
i
+1;

1330 *
numkeys
 = 
num
 + 
found_°‹e
;

1331  
keys
;

1332 
	}
}

1334 *
	$migøãGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1335 
i
, 
num
, 
fú°
, *
keys
;

1336 
	`UNUSED
(
cmd
);

1339 
fú°
 = 3;

1340 
num
 = 1;

1343 i‡(
¨gc
 > 6) {

1344 
i
 = 6; i < 
¨gc
; i++) {

1345 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,"keys") &&

1346 
	`sd¶í
(
¨gv
[3]->
±r
) == 0)

1348 
fú°
 = 
i
+1;

1349 
num
 = 
¨gc
-
fú°
;

1355 
keys
 = 
	`dÆloc
(()*
num
);

1356 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 
fú°
+i;

1357 *
numkeys
 = 
num
;

1358  
keys
;

1359 
	}
}

1361 
	$„tchI¡î«lDbByKey
(
˛õ¡
 *
c
, 
robj
 *
key
) {

1362 
c
->
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
	`hash_¸c16
(
key
->
±r
,
	`°rögObje˘Lí
(key))&0x3FFF)%£rvî.
dböum
+c->
di˘id
*server.dbinum);

1363  
VR_OK
;

1364 
	}
}

1366 
	$„tchI¡î«lDbById
(
˛õ¡
 *
c
, 
idx
) {

1367 
c
->
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
idx
+c->
di˘id
*£rvî.
dböum
);

1368  
VR_OK
;

1369 
	}
}

1373 
	$åyResizeHashTabÀsF‹Db
(
dbid
) {

1374 
ªdisDb
 *
db
;

1376 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
dbid
);

1377 
	`lockDbWrôe
(
db
);

1378 i‡(
	`htNìdsResize
(
db
->
di˘
))

1379 
	`di˘Resize
(
db
->
di˘
);

1380 i‡(
	`htNìdsResize
(
db
->
expúes
))

1381 
	`di˘Resize
(
db
->
expúes
);

1382 
	`u∆ockDb
(
db
);

1383 
	}
}

1392 
	$ö¸emíèŒyRehashF‹Db
(
dbid
) {

1393 
ªdisDb
 *
db
;

1395 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
dbid
);

1396 
	`lockDbWrôe
(
db
);

1399 i‡(
	`di˘IsRehashög
(
db
->
di˘
)) {

1400 
	`di˘RehashMûli£c⁄ds
(
db
->
di˘
,1);

1401 
	`u∆ockDb
(
db
);

1405 i‡(
	`di˘IsRehashög
(
db
->
expúes
)) {

1406 
	`di˘RehashMûli£c⁄ds
(
db
->
expúes
,1);

1407 
	`u∆ockDb
(
db
);

1411 
	`u∆ockDb
(
db
);

1413 
	}
}

1437 
	$a˘iveExpúeCy˛e
(
vr_backíd
 *
backíd
, 
ty≥
) {

1438 
j
, 
ôî©i⁄
 = 0;

1439 
dbs_≥r_ˇŒ
 = 
CRON_DBS_PER_CALL
;

1440 
°¨t
 = 
	`vr_u£c_now
(), 
timñimô
;

1441 
expúed_tŸÆ
 = 0;

1443 i‡(
ty≥
 =
ACTIVE_EXPIRE_CYCLE_FAST
) {

1447 i‡(!
backíd
->
timñimô_exô
) ;

1448 i‡(
°¨t
 < 
backíd
->
œ°_Á°_cy˛e
 + 
ACTIVE_EXPIRE_CYCLE_FAST_DURATION
*2) ;

1449 
backíd
->
œ°_Á°_cy˛e
 = 
°¨t
;

1459 i‡(
dbs_≥r_ˇŒ
 > 
£rvî
.
dbnum
 || 
backíd
->
timñimô_exô
)

1460 
dbs_≥r_ˇŒ
 = 
£rvî
.
dbnum
;

1466 
timñimô
 = 1000000*
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC
/
£rvî
.
hz
/100;

1467 
backíd
->
timñimô_exô
 = 0;

1468 i‡(
timñimô
 <= 0)Åimelimit = 1;

1470 i‡(
ty≥
 =
ACTIVE_EXPIRE_CYCLE_FAST
)

1471 
timñimô
 = 
ACTIVE_EXPIRE_CYCLE_FAST_DURATION
;

1473 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1474 
expúed
;

1475 
ªdisDb
 *
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
backíd
->
cuºít_db
%£rvî.
dbnum
);

1480 
backíd
->
cuºít_db
++;

1482 
	`lockDbWrôe
(
db
);

1486 
num
, 
¶Ÿs
;

1487 
now
, 
âl_sum
;

1488 
âl_ßm∂es
;

1490 i‡((
num
 = 
	`di˘Size
(
db
->
expúes
)) == 0) {

1491 
db
->
avg_âl
 = 0;

1494 
¶Ÿs
 = 
	`di˘SlŸs
(
db
->
expúes
);

1495 
now
 = 
	`vr_m£c_now
();

1500 i‡(
num
 && 
¶Ÿs
 > 
DICT_HT_INITIAL_SIZE
 &&

1501 (
num
*100/
¶Ÿs
 < 1)) ;

1505 
expúed
 = 0;

1506 
âl_sum
 = 0;

1507 
âl_ßm∂es
 = 0;

1509 i‡(
num
 > 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
)

1510 
num
 = 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
;

1512 
num
--) {

1513 
di˘E¡ry
 *
de
;

1514 
âl
;

1516 i‡((
de
 = 
	`di˘GëR™domKey
(
db
->
expúes
)Ë=
NULL
) ;

1517 
âl
 = 
	`di˘GëSig√dI¡egîVÆ
(
de
)-
now
;

1518 i‡(
	`a˘iveExpúeCy˛eTryExpúe
(
db
,
de
,
now
)Ë
expúed
++;

1519 i‡(
âl
 > 0) {

1521 
âl_sum
 +
âl
;

1522 
âl_ßm∂es
++;

1526 
expúed_tŸÆ
 +
expúed
;

1529 i‡(
âl_ßm∂es
) {

1530 
avg_âl
 = 
âl_sum
/
âl_ßm∂es
;

1535 i‡(
db
->
avg_âl
 == 0) db->avg_ttl =ávg_ttl;

1536 
db
->
avg_âl
 = (db->avg_ttl/50)*49 + (avg_ttl/50);

1542 
ôî©i⁄
++;

1543 i‡((
ôî©i⁄
 & 0xf) == 0) {

1544 
ñ≠£d
 = 
	`vr_u£c_now
()-
°¨t
;

1547 i‡(
ñ≠£d
 > 
timñimô
Ë
backíd
->
timñimô_exô
 = 1;

1549 i‡(
backíd
->
timñimô_exô
) {

1550 
	`u∆ockDb
(
db
);

1552 i‡(
expúed_tŸÆ
 > 0) {

1553 
	`upd©e_°©s_add
(
backíd
->
vñ
.
°©s
, 
expúedkeys
, 
expúed_tŸÆ
);

1559 } 
expúed
 > 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
/4);

1560 
	`u∆ockDb
(
db
);

1563 i‡(
expúed_tŸÆ
 > 0) {

1564 
	`upd©e_°©s_add
(
backíd
->
vñ
.
°©s
, 
expúedkeys
, 
expúed_tŸÆ
);

1566 
	}
}

1568 
	$a˘iveExpúeCy˛eTryExpúe
(
ªdisDb
 *
db
, 
di˘E¡ry
 *
de
, 
now
) {

1569 
t
 = 
	`di˘GëSig√dI¡egîVÆ
(
de
);

1570 i‡(
now
 > 
t
) {

1571 
sds
 
key
 = 
	`di˘GëKey
(
de
);

1572 
robj
 *
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

1573 
	`dbDñëe
(
db
,
keyobj
);

1574 
	`‰ìObje˘
(
keyobj
);

1579 
	}
}

1584 
	$d©aba£sCr⁄
(
vr_backíd
 *
backíd
) {

1587 i‡(
ª∂
.
ma°îho°
 =
NULL
)

1588 
	`a˘iveExpúeCy˛e
(
backíd
, 
ACTIVE_EXPIRE_CYCLE_SLOW
);

1593 i‡(
£rvî
.
rdb_chûd_pid
 =-1 && sîvî.
aof_chûd_pid
 == -1) {

1594 
dbs_≥r_ˇŒ
 = 
CRON_DBS_PER_CALL
;

1595 
j
;

1598 i‡(
dbs_≥r_ˇŒ
 > 
£rvî
.
dbnum
) dbs_per_call = server.dbnum;

1601 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1602 
	`åyResizeHashTabÀsF‹Db
(
backíd
->
ªsize_db
%
£rvî
.
dbnum
);

1603 
backíd
->
ªsize_db
++;

1607 i‡(
£rvî
.
a˘ivîehashög
) {

1608 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1609 
w‹k_d⁄e
 = 
	`ö¸emíèŒyRehashF‹Db
(
backíd
->
ªhash_db
%
£rvî
.
dbnum
);

1610 
backíd
->
ªhash_db
++;

1611 i‡(
w‹k_d⁄e
) {

1619 
	}
}

	@src/vr_db.c

1 
	~<sig«l.h
>

2 
	~<˘y≥.h
>

4 
	~<vr_c‹e.h
>

7 
di˘Ty≥
 
	gdbDi˘Ty≥
 = {

8 
di˘SdsHash
,

9 
NULL
,

10 
NULL
,

11 
di˘SdsKeyCom∑ª
,

12 
di˘SdsDe°ru˘‹
,

13 
di˘Obje˘De°ru˘‹


17 
di˘Ty≥
 
	gkey±rDi˘Ty≥
 = {

18 
di˘SdsHash
,

19 
NULL
,

20 
NULL
,

21 
di˘SdsKeyCom∑ª
,

22 
NULL
,

23 
NULL


29 
di˘Ty≥
 
	gkeyli°Di˘Ty≥
 = {

30 
di˘ObjHash
,

31 
NULL
,

32 
NULL
,

33 
di˘ObjKeyCom∑ª
,

34 
di˘Obje˘De°ru˘‹
,

35 
di˘Li°De°ru˘‹


39 
evi˘i⁄PoﬁE¡ry
 *
	$evi˘i⁄PoﬁAŒoc
() {

40 
evi˘i⁄PoﬁE¡ry
 *
ï
;

41 
j
;

43 
ï
 = 
	`dÆloc
((*ï)*
MAXMEMORY_EVICTION_POOL_SIZE
);

44 
j
 = 0; j < 
MAXMEMORY_EVICTION_POOL_SIZE
; j++) {

45 
ï
[
j
].
idÀ
 = 0;

46 
ï
[
j
].
key
 = 
NULL
;

48  
ï
;

49 
	}
}

55 
	$ªdisDbInô
(
ªdisDb
 *
db
)

57 
db
->
di˘
 = 
	`di˘Cª©e
(&
dbDi˘Ty≥
,
NULL
);

58 
db
->
expúes
 = 
	`di˘Cª©e
(&
key±rDi˘Ty≥
,
NULL
);

59 
db
->
blockög_keys
 = 
	`di˘Cª©e
(&
keyli°Di˘Ty≥
,
NULL
);

60 
db
->
ªady_keys
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

61 
db
->
w©ched_keys
 = 
	`di˘Cª©e
(&
keyli°Di˘Ty≥
,
NULL
);

62 
db
->
evi˘i⁄_poﬁ
 = 
	`evi˘i⁄PoﬁAŒoc
();

63 
db
->
avg_âl
 = 0;

65 
	`±hªad_rwlock_öô
(&
db
->
rwl
, 
NULL
);

67  
VR_OK
;

68 
	}
}

71 
	$ªdisDbDeöô
(
ªdisDb
 *
db
)

73 
	`±hªad_rwlock_de°roy
(&
db
->
rwl
);

74  
VR_OK
;

75 
	}
}

78 
	$lockDbRód
(
ªdisDb
 *
db
)

80 
	`±hªad_rwlock_rdlock
(&
db
->
rwl
);

81  
VR_OK
;

82 
	}
}

85 
	$lockDbWrôe
(
ªdisDb
 *
db
)

87 
	`±hªad_rwlock_wæock
(&
db
->
rwl
);

88  
VR_OK
;

89 
	}
}

92 
	$u∆ockDb
(
ªdisDb
 *
db
)

94 
	`±hªad_rwlock_u∆ock
(&
db
->
rwl
);

95  
VR_OK
;

96 
	}
}

98 
robj
 *
	$lookupKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

99 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

100 i‡(
de
) {

101 
robj
 *
vÆ
 = 
	`di˘GëVÆ
(
de
);

106 i‡(
£rvî
.
rdb_chûd_pid
 =-1 && sîvî.
aof_chûd_pid
 == -1)

108 
vÆ
->
Ãu
 = 0;

109  
vÆ
;

111  
NULL
;

113 
	}
}

115 
robj
 *
	$lookupKeyRód
(
ªdisDb
 *
db
, 
robj
 *
key
) {

116 i‡(
	`checkIfExpúed
(
db
, 
key
)Ë 
NULL
;

117  
	`lookupKey
(
db
,
key
);

118 
	}
}

120 
robj
 *
	$lookupKeyWrôe
(
ªdisDb
 *
db
, 
robj
 *
key
, *
expúed
) {

121 i‡(
expúed
Ë*expúed = 
	`expúeIfNìded
(
db
,
key
);

122  
	`lookupKey
(
db
,
key
);

123 
	}
}

125 
robj
 *
	$lookupKeyRódOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
) {

126 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
, 
key
);

127 i‡(!
o
Ë
	`addRïly
(
c
,
ª∂y
);

128  
o
;

129 
	}
}

131 
robj
 *
	$lookupKeyWrôeOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
, *
expúed
) {

132 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
, 
key
, 
expúed
);

133 i‡(!
o
Ë
	`addRïly
(
c
,
ª∂y
);

134  
o
;

135 
	}
}

142 
	$dbAdd
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
) {

143 
sds
 
c›y
 = 
	`sdsdup
(
key
->
±r
);

144 
ªtvÆ
 = 
	`di˘Add
(
db
->
di˘
, 
c›y
, 
vÆ
);

145 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
ªtvÆ
 =
DICT_OK
);

146 i‡(
vÆ
->
ty≥
 =
OBJ_LIST
Ë
	`sig«lLi°AsRódy
(
db
, 
key
);

147 
	}
}

155 
	$dbOvîwrôe
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
) {

156 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

158 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
de
 != NULL);

159 
	`di˘Rïœ˚
(
db
->
di˘
, 
key
->
±r
, 
vÆ
);

160 
	}
}

168 
	$£tKey
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
, *
expúed
) {

169 i‡(
	`lookupKeyWrôe
(
db
,
key
,
expúed
Ë=
NULL
) {

170 
	`dbAdd
(
db
,
key
,
vÆ
);

172 
	`dbOvîwrôe
(
db
,
key
,
vÆ
);

175 
	`ªmoveExpúe
(
db
,
key
);

176 
	}
}

178 
	$dbExi°s
(
ªdisDb
 *
db
, 
robj
 *
key
) {

179  
	`di˘Föd
(
db
->
di˘
,
key
->
±r
Ë!
NULL
;

180 
	}
}

186 
robj
 *
	$dbR™domKey
(
ªdisDb
 *
db
) {

187 
di˘E¡ry
 *
de
;

190 
sds
 
key
;

191 
robj
 *
keyobj
;

193 
	`lockDbRód
(
db
);

194 
de
 = 
	`di˘GëR™domKey
(
db
->
di˘
);

195 i‡(
de
 =
NULL
) {

196 
	`u∆ockDb
(
db
);

197  
NULL
;

200 
key
 = 
	`di˘GëKey
(
de
);

201 
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

202 i‡(
	`di˘Föd
(
db
->
expúes
,
key
)) {

203 i‡(
	`checkIfExpúed
(
db
,
keyobj
)) {

204 
	`u∆ockDb
(
db
);

205 
	`‰ìObje˘
(
keyobj
);

209 
	`u∆ockDb
(
db
);

210  
keyobj
;

212 
	}
}

215 
	$dbDñëe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

218 i‡(
	`di˘Size
(
db
->
expúes
Ë> 0Ë
	`di˘Dñëe
(db->expúes,
key
->
±r
);

219 i‡(
	`di˘Dñëe
(
db
->
di˘
,
key
->
±r
Ë=
DICT_OK
) {

224 
	}
}

226 
robj
 *
	$dbUnsh¨eSåögVÆue
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
o
) {

227 
	`ASSERT
(
o
->
ty≥
 =
OBJ_STRING
);

228 i‡(
o
->
c⁄°™t
 || o->
ícodög
 !
OBJ_ENCODING_RAW
) {

229 
robj
 *
decoded
, *
√w
;

230 
decoded
 = 
	`gëDecodedObje˘
(
o
);

231 
√w
 = 
	`¸óãRawSåögObje˘
(
decoded
->
±r
, 
	`sd¶í
(decoded->ptr));

232 i‡(
decoded
 !
o
Ë
	`‰ìObje˘
(decoded);

233 
	`dbOvîwrôe
(
db
,
key
,
√w
);

234  
√w
;

236  
o
;

237 
	}
}

239 
em±yDb
((
ˇŒback
)(*)) {

240 
j
;

241 
ªmoved
 = 0;

242 
ªdisDb
 *
db
;

244 
j
 = 0; j < 
£rvî
.
dbnum
; j++) {

245 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)
j
);

246 
ªmoved
 +
	`di˘Size
(
db
->
di˘
);

247 
	`di˘Em±y
(
db
->
di˘
,
ˇŒback
);

248 
	`di˘Em±y
(
db
->
expúes
,
ˇŒback
);

251  
ªmoved
;

252 
	}
}

254 
	$£À˘Db
(
˛õ¡
 *
c
, 
id
) {

255 
ªdisDb
 *
db
;

257 i‡(
id
 < 0 || id >
£rvî
.
db um
)

258  
VR_ERROR
;

260 
c
->
di˘id
 = 
id
;

261  
VR_OK
;

262 
	}
}

273 
	$sig«lModifõdKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

274 
	`touchW©chedKey
(
db
,
key
);

275 
	}
}

277 
	$sig«lFlushedDb
(
dbid
) {

278 
	`touchW©chedKeysOnFlush
(
dbid
);

279 
	}
}

285 
	$ÊushdbComm™d
(
˛õ¡
 *
c
) {

286 
idx
;

288 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

289 
	`„tchI¡î«lDbById
(
c
, 
idx
);

290 
	`lockDbWrôe
(
c
->
db
);

291 
c
->
vñ
->
dúty
 +
	`di˘Size
(c->
db
->
di˘
);

292 
	`sig«lFlushedDb
(
c
->
db
->
id
);

293 
	`di˘Em±y
(
c
->
db
->
di˘
,
NULL
);

294 
	`di˘Em±y
(
c
->
db
->
expúes
,
NULL
);

295 
	`u∆ockDb
(
c
->
db
);

298 
	`addRïly
(
c
,
sh¨ed
.
ok
);

299 
	}
}

301 
	$ÊushÆlComm™d
(
˛õ¡
 *
c
) {

302 
idx
;

303 
ªdisDb
 *
db
;

305 
idx
 = 0; idx < 
£rvî
.
dbnum
; idx ++) {

306 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)
idx
);

307 
	`lockDbWrôe
(
db
);

308 
	`di˘Em±y
(
db
->
di˘
,
NULL
);

309 
	`di˘Em±y
(
db
->
expúes
,
NULL
);

310 
	`u∆ockDb
(
db
);

313 
	`addRïly
(
c
,
sh¨ed
.
ok
);

314 
	}
}

316 
	$dñComm™d
(
˛õ¡
 *
c
) {

317 
dñëed
 = 0, 
j
;

318 
expúed
 = 0;

320 
j
 = 1; j < 
c
->
¨gc
; j++) {

321 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[
j
]);

322 
	`lockDbWrôe
(
c
->
db
);

323 
expúed
 +
	`expúeIfNìded
(
c
->
db
,c->
¨gv
[
j
]);

324 i‡(
	`dbDñëe
(
c
->
db
,c->
¨gv
[
j
])) {

325 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[
j
]);

326 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,

327 "dñ",
c
->
¨gv
[
j
],c->
db
->
id
);

328 
c
->
vñ
->
dúty
++;

329 
dñëed
++;

331 
	`u∆ockDb
(
c
->
db
);

333 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

335 i‡(
expúed
 > 0) {

336 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 
expúed
);

338 
	}
}

342 
	$exi°sComm™d
(
˛õ¡
 *
c
) {

343 
cou¡
 = 0;

344 
j
;

346 
j
 = 1; j < 
c
->
¨gc
; j++) {

347 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

348 
	`lockDbRód
(
c
->
db
);

349 i‡(
	`checkIfExpúed
(
c
->
db
,c->
¨gv
[
j
])) {

350 
	`u∆ockDb
(
c
->
db
);

353 i‡(
	`dbExi°s
(
c
->
db
,c->
¨gv
[
j
])Ë
cou¡
++;

354 
	`u∆ockDb
(
c
->
db
);

356 
	`addRïlyL⁄gL⁄g
(
c
,
cou¡
);

358 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 
cou¡
);

359 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, c->
¨gc
-1-
cou¡
);

360 
	}
}

362 
	$£À˘Comm™d
(
˛õ¡
 *
c
) {

363 
id
;

365 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[1], &
id
,

366 "övÆid DB index"Ë!
VR_OK
)

369 i‡(
	`£À˘Db
(
c
,
id
Ë=
VR_ERROR
) {

370 
	`addRïlyEº‹
(
c
,"invalid DB index");

372 
	`addRïly
(
c
,
sh¨ed
.
ok
);

374 
	}
}

376 
	$øndomkeyComm™d
(
˛õ¡
 *
c
) {

377 
robj
 *
key
;

378 
idx
, 
ªåy_cou¡
 = 0;

380 
idx
 = 
	`øndom
()%
£rvî
.
dböum
;

382 
ªåy
:

383 
	`„tchI¡î«lDbById
(
c
, 
idx
);

384 i‡((
key
 = 
	`dbR™domKey
(
c
->
db
)Ë=
NULL
) {

385 i‡(
ªåy_cou¡
++ < 
£rvî
.
dböum
) {

386 i‡(++
idx
 >
£rvî
.
dböum
) {

387 
idx
 = 0;

389 
ªåy
;

392 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

396 
	`addRïlyBulk
(
c
,
key
);

397 
	`‰ìObje˘
(
key
);

398 
	}
}

400 
	$keysComm™d
(
˛õ¡
 *
c
) {

401 
di˘Iãøt‹
 *
di
;

402 
di˘E¡ry
 *
de
;

403 
sds
 
∑âîn
 = 
c
->
¨gv
[1]->
±r
;

404 
∂í
 = 
	`sd¶í
(
∑âîn
), 
Ælkeys
;

405 
numkeys
 = 0;

406 *
ª∂yÀn
;

407 
idx
;

408 
keys_cou¡
 = 0;

409 
expúed
 = 0;

410 
max_time_com∂exôy_limô
;

413 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

414 
	`„tchI¡î«lDbById
(
c
, 
idx
);

415 
	`lockDbWrôe
(
c
->
db
);

416 
keys_cou¡
 +
	`di˘Size
(
c
->
db
->
di˘
);

417 
	`u∆ockDb
(
c
->
db
);

420 
max_time_com∂exôy_limô
 = 
c
->
vñ
->
cc
.max_time_complexity_limit;

421 i‡(
max_time_com∂exôy_limô
 &&

422 
keys_cou¡
 > 
max_time_com∂exôy_limô
) {

423 
	`addRïly
(
c
,
sh¨ed
.
outofcom∂exôylimô
);

427 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

428 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

429 
	`„tchI¡î«lDbById
(
c
,
idx
);

430 
	`lockDbWrôe
(
c
->
db
);

431 
di
 = 
	`di˘GëSa„Iãøt‹
(
c
->
db
->
di˘
);

432 
Ælkeys
 = (
∑âîn
[0] == '*' &&Öattern[1] == '\0');

433 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

434 
sds
 
key
 = 
	`di˘GëKey
(
de
);

435 
robj
 *
keyobj
;

437 i‡(
Ælkeys
 || 
	`°rögm©chÀn
(
∑âîn
,
∂í
,
key
,
	`sd¶í
(key),0)) {

438 
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

439 i‡(
	`expúeIfNìded
(
c
->
db
,
keyobj
) == 0) {

440 
	`addRïlyBulk
(
c
,
keyobj
);

441 
numkeys
++;

443 
expúed
 ++;

445 
	`‰ìObje˘
(
keyobj
);

448 
	`di˘Rñó£Iãøt‹
(
di
);

449 
	`u∆ockDb
(
c
->
db
);

451 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn
,
numkeys
);

452 
	}
}

456 
	$sˇnCÆlback
(*
¥ivd©a
, c⁄° 
di˘E¡ry
 *
de
) {

457 **
pd
 = (**Ë
¥ivd©a
;

458 
dli°
 *
keys
 = 
pd
[0];

459 
robj
 *
o
 = 
pd
[1];

460 
robj
 *
key
, *
vÆ
 = 
NULL
;

462 i‡(
o
 =
NULL
) {

463 
sds
 
sdskey
 = 
	`di˘GëKey
(
de
);

464 
key
 = 
	`¸óãSåögObje˘
(
sdskey
, 
	`sd¶í
(sdskey));

465 } i‡(
o
->
ty≥
 =
OBJ_SET
) {

466 
key
 = 
	`di˘GëKey
(
de
);

467 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

468 } i‡(
o
->
ty≥
 =
OBJ_HASH
) {

469 
key
 = 
	`di˘GëKey
(
de
);

470 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

471 
vÆ
 = 
	`di˘GëVÆ
(
de
);

472 
vÆ
 = 
	`dupSåögObje˘Unc⁄°™t
(val);

473 } i‡(
o
->
ty≥
 =
OBJ_ZSET
) {

474 
key
 = 
	`di˘GëKey
(
de
);

475 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

476 
vÆ
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(*(*)
	`di˘GëVÆ
(
de
),0);

478 
	`£rvîP™ic
("TypeÇot handled in SCAN callback.");

481 
	`dli°AddNodeTaû
(
keys
, 
key
);

482 i‡(
vÆ
Ë
	`dli°AddNodeTaû
(
keys
, val);

483 
	}
}

489 
	$∑r£SˇnCurs‹OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
curs‹
) {

490 *
ïå
;

494 
î∫o
 = 0;

495 *
curs‹
 = 
	`°πoul
(
o
->
±r
, &
ïå
, 10);

496 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] !'\0' || 
î∫o
 =
ERANGE
)

498 
	`addRïlyEº‹
(
c
, "invalid cursor");

499  
VR_ERROR
;

501  
VR_OK
;

502 
	}
}

515 
	$sˇnGíîicComm™d
(
˛õ¡
 *
c
, 
sˇ¡y≥
) {

516 
i
, 
j
;

517 
dli°
 *
keys
 = 
	`dli°Cª©e
();

518 
dli°Node
 *
node
, *
√xäode
;

519 
cou¡
 = 10;

520 
sds
 
∑t
 = 
NULL
;

521 
∑éí
 = 0, 
u£_∑âîn
 = 0;

522 
curs‹
;

523 
robj
 *
o
;

524 
di˘
 *
ht
;

527 
i
 = (
sˇ¡y≥
 =
SCAN_TYPE_KEY
) ? 2 : 3;

528 i‡(
	`∑r£SˇnCurs‹OrRïly
(
c
,c->
¨gv
[
i
-1],&
curs‹
Ë=
VR_ERROR
) ;

531 
i
 < 
c
->
¨gc
) {

532 
j
 = 
c
->
¨gc
 - 
i
;

533 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
, "cou¡"Ë&& 
j
 >= 2) {

534 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
i
+1], &
cou¡
, 
NULL
)

535 !
VR_OK
)

537 
˛ónup
;

540 i‡(
cou¡
 < 1) {

541 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

542 
˛ónup
;

545 
i
 += 2;

546 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
, "m©ch"Ë&& 
j
 >= 2) {

547 
∑t
 = 
c
->
¨gv
[
i
+1]->
±r
;

548 
∑éí
 = 
	`sd¶í
(
∑t
);

552 
u£_∑âîn
 = !(
∑t
[0] ='*' && 
∑éí
 == 1);

554 
i
 += 2;

556 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

557 
˛ónup
;

561 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

562 
o
 = 
NULL
;

563 i‡(
c
->
sˇnid
 =-1 || 
curs‹
 == 0) c->scanid = 0;

564 
	`„tchI¡î«lDbById
(
c
, c->
sˇnid
);

565 
	`lockDbRód
(
c
->
db
);

566 } i‡(
sˇ¡y≥
 =
SCAN_TYPE_HASH
 ||

567 
sˇ¡y≥
 =
SCAN_TYPE_SET
 ||

568 
sˇ¡y≥
 =
SCAN_TYPE_ZSET
) {

569 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

570 
	`lockDbRód
(
c
->
db
);

571 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ysˇn
)Ë=
NULL
) {

572 
	`u∆ockDb
(
c
->
db
);

573 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

578 
sˇ¡y≥
) {

579 
SCAN_TYPE_KEY
:

580 
	`ASSERT
(
o
 =
NULL
);

582 
SCAN_TYPE_HASH
:

583 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

584 
	`u∆ockDb
(
c
->
db
);

585 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

589 
SCAN_TYPE_SET
:

590 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_SET
)) {

591 
	`u∆ockDb
(
c
->
db
);

592 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

596 
SCAN_TYPE_ZSET
:

597 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_ZSET
)) {

598 
	`u∆ockDb
(
c
->
db
);

599 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

607 
	`ASSERT
(
o
 =
NULL
 || o->
ty≥
 =
OBJ_SET
 || o->ty≥ =
OBJ_HASH
 ||

608 
o
->
ty≥
 =
OBJ_ZSET
);

610 
sˇn_ªåy
:

621 
ht
 = 
NULL
;

622 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

623 
ht
 = 
c
->
db
->
di˘
;

624 } i‡(
o
->
ty≥
 =
OBJ_SET
 && o->
ícodög
 =
OBJ_ENCODING_HT
) {

625 
ht
 = 
o
->
±r
;

626 } i‡(
o
->
ty≥
 =
OBJ_HASH
 && o->
ícodög
 =
OBJ_ENCODING_HT
) {

627 
ht
 = 
o
->
±r
;

628 
cou¡
 *= 2;

629 } i‡(
o
->
ty≥
 =
OBJ_ZSET
 && o->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

630 
z£t
 *
zs
 = 
o
->
±r
;

631 
ht
 = 
zs
->
di˘
;

632 
cou¡
 *= 2;

635 i‡(
ht
) {

636 *
¥ivd©a
[2];

641 
maxôî©i⁄s
 = 
cou¡
*10;

646 
¥ivd©a
[0] = 
keys
;

647 
¥ivd©a
[1] = 
o
;

649 
curs‹
 = 
	`di˘Sˇn
(
ht
, curs‹, 
sˇnCÆlback
, 
¥ivd©a
);

650 } 
curs‹
 &&

651 
maxôî©i⁄s
-- &&

652 
	`dli°Lígth
(
keys
Ë< ()
cou¡
);

653 } i‡(
o
->
ty≥
 =
OBJ_SET
) {

654 
pos
 = 0;

655 
öt64_t
 
Œ
;

657 
	`öt£tGë
(
o
->
±r
,
pos
++,&
Œ
))

658 
	`dli°AddNodeTaû
(
keys
,
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œ
));

659 
curs‹
 = 0;

660 } i‡(
o
->
ty≥
 =
OBJ_HASH
 || o->ty≥ =
OBJ_ZSET
) {

661 *
p
 = 
	`zùli°Index
(
o
->
±r
,0);

662 *
v°r
;

663 
vÀn
;

664 
vŒ
;

666 
p
) {

667 
	`zùli°Gë
(
p
,&
v°r
,&
vÀn
,&
vŒ
);

668 
	`dli°AddNodeTaû
(
keys
,

669 (
v°r
 !
NULL
Ë? 
	`¸óãSåögObje˘
((*)v°r,
vÀn
) :

670 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
));

671 
p
 = 
	`zùli°Next
(
o
->
±r
,p);

673 
curs‹
 = 0;

675 
	`£rvîP™ic
("Not handledÉncoding in SCAN.");

678 
	`u∆ockDb
(
c
->
db
);

679 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

680 i‡(
curs‹
 == 0) {

681 i‡(
c
->
sˇnid
 < (
£rvî
.
dböum
 - 1)) {

682 
c
->
sˇnid
 ++;

683 
	`„tchI¡î«lDbById
(
c
, c->
sˇnid
);

684 
	`lockDbRód
(
c
->
db
);

685 
sˇn_ªåy
;

687 
c
->
sˇnid
 = -1;

690 } i‡(
sˇ¡y≥
 =
SCAN_TYPE_HASH
 ||

691 
sˇ¡y≥
 =
SCAN_TYPE_SET
 ||

692 
sˇ¡y≥
 =
SCAN_TYPE_ZSET
) {

693 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

697 
node
 = 
	`dli°Fú°
(
keys
);

698 
node
) {

699 
robj
 *
kobj
 = 
	`dli°NodeVÆue
(
node
);

700 
√xäode
 = 
	`dli°NextNode
(
node
);

701 
fûãr
 = 0;

704 i‡(!
fûãr
 && 
u£_∑âîn
) {

705 i‡(
	`sdsEncodedObje˘
(
kobj
)) {

706 i‡(!
	`°rögm©chÀn
(
∑t
, 
∑éí
, 
kobj
->
±r
, 
	`sd¶í
(kobj->ptr), 0))

707 
fûãr
 = 1;

709 
buf
[
LONG_STR_SIZE
];

710 
Àn
;

712 
	`ASSERT
(
kobj
->
ícodög
 =
OBJ_ENCODING_INT
);

713 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),()
kobj
->
±r
);

714 i‡(!
	`°rögm©chÀn
(
∑t
, 
∑éí
, 
buf
, 
Àn
, 0)Ë
fûãr
 = 1;

719 i‡(!
fûãr
 && 
o
 =
NULL
 && 
	`checkIfExpúed
(
c
->
db
,
kobj
)) filter = 1;

722 i‡(
fûãr
) {

723 
	`‰ìObje˘
(
kobj
);

724 
	`dli°DñNode
(
keys
, 
node
);

730 i‡(
o
 && (o->
ty≥
 =
OBJ_ZSET
 || o->ty≥ =
OBJ_HASH
)) {

731 
node
 = 
√xäode
;

732 
√xäode
 = 
	`dli°NextNode
(
node
);

733 i‡(
fûãr
) {

734 
kobj
 = 
	`dli°NodeVÆue
(
node
);

735 
	`‰ìObje˘
(
kobj
);

736 
	`dli°DñNode
(
keys
, 
node
);

739 
node
 = 
√xäode
;

743 
	`addRïlyMu…iBulkLí
(
c
, 2);

744 
	`addRïlyBulkL⁄gL⁄g
(
c
,
curs‹
);

746 
	`addRïlyMu…iBulkLí
(
c
, 
	`dli°Lígth
(
keys
));

747 (
node
 = 
	`dli°Fú°
(
keys
)Ë!
NULL
) {

748 
robj
 *
kobj
 = 
	`dli°NodeVÆue
(
node
);

749 
	`addRïlyBulk
(
c
, 
kobj
);

750 
	`‰ìObje˘
(
kobj
);

751 
	`dli°DñNode
(
keys
, 
node
);

754 
˛ónup
:

755 
	`dli°SëFªeMëhod
(
keys
,
‰ìObje˘Void
);

756 
	`dli°Rñó£
(
keys
);

757 
	}
}

760 
	$sˇnComm™d
(
˛õ¡
 *
c
) {

761 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_KEY
);

762 
	}
}

764 
	$dbsizeComm™d
(
˛õ¡
 *
c
) {

765 
idx
;

766 
cou¡
 = 0;

768 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

769 
	`„tchI¡î«lDbById
(
c
, 
idx
);

770 
	`lockDbRód
(
c
->
db
);

771 
cou¡
 +
	`di˘Size
(
c
->
db
->
di˘
);

772 
	`u∆ockDb
(
c
->
db
);

775 
	`addRïlyL⁄gL⁄g
(
c
,
cou¡
);

776 
	}
}

778 
	$œ°ßveComm™d
(
˛õ¡
 *
c
) {

779 
	`addRïlyL⁄gL⁄g
(
c
,
£rvî
.
œ°ßve
);

780 
	}
}

782 
	$ty≥Comm™d
(
˛õ¡
 *
c
) {

783 
robj
 *
o
;

784 *
ty≥
;

786 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

787 
	`lockDbRód
(
c
->
db
);

788 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]);

789 i‡(
o
 =
NULL
) {

790 
ty≥
 = "none";

791 
	`u∆ockDb
(
c
->
db
);

792 
	`addRïlySètus
(
c
,
ty≥
);

793 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

796 
o
->
ty≥
) {

797 
OBJ_STRING
: 
ty≥
 = "string"; ;

798 
OBJ_LIST
: 
ty≥
 = "list"; ;

799 
OBJ_SET
: 
ty≥
 = "set"; ;

800 
OBJ_ZSET
: 
ty≥
 = "zset"; ;

801 
OBJ_HASH
: 
ty≥
 = "hash"; ;

802 : 
ty≥
 = "unknown"; ;

806 
	`u∆ockDb
(
c
->
db
);

807 
	`addRïlySètus
(
c
,
ty≥
);

808 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

809 
	}
}

811 
	$shutdownComm™d
(
˛õ¡
 *
c
) {

812 
Êags
 = 0;

814 i‡(
c
->
¨gc
 > 2) {

815 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

817 } i‡(
c
->
¨gc
 == 2) {

818 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"nosave")) {

819 
Êags
 |
SHUTDOWN_NOSAVE
;

820 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"save")) {

821 
Êags
 |
SHUTDOWN_SAVE
;

823 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

833 i‡(
£rvî
.
lﬂdög
)

834 
Êags
 = (Êag†& ~
SHUTDOWN_SAVE
Ë| 
SHUTDOWN_NOSAVE
;

836 
	`addRïlyEº‹
(
c
,"ErrorsÅryingÅo SHUTDOWN. CheckÜogs.");

837 
	}
}

839 
	$ª«meGíîicComm™d
(
˛õ¡
 *
c
, 
nx
) {

840 
robj
 *
o
;

841 
expúe
;

842 
ßmekey
 = 0;

846 i‡(
	`sdscmp
(
c
->
¨gv
[1]->
±r
,c->¨gv[2]->±rË=0Ë
ßmekey
 = 1;

848 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nokeyîr
,
NULL
)) == NULL)

851 i‡(
ßmekey
) {

852 
	`addRïly
(
c
,
nx
 ? 
sh¨ed
.
czîo
 : sh¨ed.
ok
);

856 
	`ö¸RefCou¡
(
o
);

857 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

858 i‡(
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
) != NULL) {

859 i‡(
nx
) {

860 
	`de¸RefCou¡
(
o
);

861 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

866 
	`dbDñëe
(
c
->
db
,c->
¨gv
[2]);

868 
	`dbAdd
(
c
->
db
,c->
¨gv
[2],
o
);

869 i‡(
expúe
 !-1Ë
	`£tExpúe
(
c
->
db
,c->
¨gv
[2],expire);

870 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

871 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

872 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[2]);

873 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"rename_from",

874 
c
->
¨gv
[1],c->
db
->
id
);

875 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"rename_to",

876 
c
->
¨gv
[2],c->
db
->
id
);

877 
£rvî
.
dúty
++;

878 
	`addRïly
(
c
,
nx
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
ok
);

879 
	}
}

881 
	$ª«meComm™d
(
˛õ¡
 *
c
) {

882 
	`ª«meGíîicComm™d
(
c
,0);

883 
	}
}

885 
	$ª«míxComm™d
(
˛õ¡
 *
c
) {

886 
	`ª«meGíîicComm™d
(
c
,1);

887 
	}
}

889 
	$moveComm™d
(
˛õ¡
 *
c
) {

890 
robj
 *
o
;

891 
ªdisDb
 *
§c
, *
d°
;

892 
§cid
;

893 
dbid
, 
expúe
;

896 
§c
 = 
c
->
db
;

897 
§cid
 = 
c
->
db
->
id
;

899 i‡(
	`gëL⁄gL⁄gFromObje˘
(
c
->
¨gv
[2],&
dbid
Ë=
VR_ERROR
 ||

900 
dbid
 < 
INT_MIN
 || dbid > 
INT_MAX
 ||

901 
	`£À˘Db
(
c
,
dbid
Ë=
VR_ERROR
)

903 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

906 
d°
 = 
c
->
db
;

907 
	`£À˘Db
(
c
,
§cid
);

911 i‡(
§c
 =
d°
) {

912 
	`addRïly
(
c
,
sh¨ed
.
ßmeobje˘îr
);

917 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

918 i‡(!
o
) {

919 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

922 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

925 i‡(
	`lookupKeyWrôe
(
d°
,
c
->
¨gv
[1],
NULL
) != NULL) {

926 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

929 
	`dbAdd
(
d°
,
c
->
¨gv
[1],
o
);

930 i‡(
expúe
 !-1Ë
	`£tExpúe
(
d°
,
c
->
¨gv
[1],expire);

931 
	`ö¸RefCou¡
(
o
);

934 
	`dbDñëe
(
§c
,
c
->
¨gv
[1]);

935 
£rvî
.
dúty
++;

936 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

937 
	}
}

943 
	$ªmoveExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

946 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
	`di˘Föd
(
db
->
di˘
,key->
±r
) != NULL);

947  
	`di˘Dñëe
(
db
->
expúes
,
key
->
±r
Ë=
DICT_OK
;

948 
	}
}

950 
	$£tExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
, 
whí
) {

951 
di˘E¡ry
 *
kde
, *
de
;

954 
kde
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

955 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
kde
 != NULL);

956 
de
 = 
	`di˘Rïœ˚Raw
(
db
->
expúes
,
	`di˘GëKey
(
kde
));

957 
	`di˘SëSig√dI¡egîVÆ
(
de
,
whí
);

958 
	}
}

962 
	$gëExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

963 
di˘E¡ry
 *
de
;

966 i‡(
	`di˘Size
(
db
->
expúes
) == 0 ||

967 (
de
 = 
	`di˘Föd
(
db
->
expúes
,
key
->
±r
)Ë=
NULL
)  -1;

971 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
	`di˘Föd
(
db
->
di˘
,key->
±r
) != NULL);

972  
	`di˘GëSig√dI¡egîVÆ
(
de
);

973 
	}
}

983 
	$¥›ag©eExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

984 
robj
 *
¨gv
[2];

986 
¨gv
[0] = 
sh¨ed
.
dñ
;

987 
¨gv
[1] = 
key
;

988 
	`ö¸RefCou¡
(
¨gv
[0]);

989 
	`ö¸RefCou¡
(
¨gv
[1]);

991 i‡(
£rvî
.
aof_°©e
 !
AOF_OFF
)

992 
	`„edAµídO∆yFûe
(
£rvî
.
dñComm™d
,
db
->
id
,
¨gv
,2);

993 
	`ª∂iˇti⁄FìdSœves
(
ª∂
.
¶aves
,
db
->
id
,
¨gv
,2);

995 
	`de¸RefCou¡
(
¨gv
[0]);

996 
	`de¸RefCou¡
(
¨gv
[1]);

997 
	}
}

1000 
	$checkIfExpúed
(
ªdisDb
 *
db
, 
robj
 *
key
) {

1001 
whí
;

1003 
whí
 = 
	`gëExpúe
(
db
,
key
);

1004 i‡(
whí
 > 0 && 
	`vr_m£c_now
() > when) {

1009 
	}
}

1011 
	$expúeIfNìded
(
ªdisDb
 *
db
, 
robj
 *
key
) {

1012 
whí
 = 
	`gëExpúe
(
db
,
key
);

1013 
now
;

1015 i‡(
whí
 < 0)  0;

1018 i‡(
£rvî
.
lﬂdög
)  0;

1025 
now
 = 
£rvî
.
lua_ˇŒî
 ? sîvî.
lua_time_°¨t
 : 
	`vr_m£c_now
();

1034 i‡(
ª∂
.
ma°îho°
 !
NULL
Ë 
now
 > 
whí
;

1037 i‡(
now
 <
whí
)  0;

1041 
	`nŸifyKey•a˚Evít
(
NOTIFY_EXPIRED
,

1042 "expúed",
key
,
db
->
id
);

1043  
	`dbDñëe
(
db
,
key
);

1044 
	}
}

1057 
	$expúeGíîicComm™d
(
˛õ¡
 *
c
, 
ba£time
, 
unô
) {

1058 
robj
 *
key
 = 
c
->
¨gv
[1], *
∑øm
 = c->argv[2];

1059 
whí
;

1060 
expúed
 = 0;

1062 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
∑øm
, &
whí
, 
NULL
Ë!
VR_OK
)

1065 i‡(
unô
 =
UNIT_SECONDS
Ë
whí
 *= 1000;

1066 
whí
 +
ba£time
;

1068 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1069 
	`lockDbWrôe
(
c
->
db
);

1071 i‡(
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
Ë=
NULL
) {

1072 
	`u∆ockDb
(
c
->
db
);

1073 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1074 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1084 i‡(
whí
 <
	`vr_m£c_now
(Ë&& !
£rvî
.
lﬂdög
 && !
ª∂
.
ma°îho°
) {

1085 
robj
 *
aux
;

1087 
	`£rvîAs£πWôhInfo
(
c
,
key
,
	`dbDñëe
(c->
db
,key));

1088 
c
->
vñ
->
dúty
++;

1091 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
key
);

1092 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,
sh¨ed
.
dñ
,
aux
);

1093 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1094 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1095 
	`u∆ockDb
(
c
->
db
);

1096 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1097 
	`addRïly
(
c
, 
sh¨ed
.
c⁄e
);

1100 
	`£tExpúe
(
c
->
db
,
key
,
whí
);

1101 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

1102 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1103 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"expúe",
key
,
c
->
db
->
id
);

1104 
	`u∆ockDb
(
c
->
db
);

1105 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1106 
c
->
vñ
->
dúty
++;

1109 
	}
}

1111 
	$expúeComm™d
(
˛õ¡
 *
c
) {

1112 
	`expúeGíîicComm™d
(
c
,
	`vr_m£c_now
(),
UNIT_SECONDS
);

1113 
	}
}

1115 
	$expúótComm™d
(
˛õ¡
 *
c
) {

1116 
	`expúeGíîicComm™d
(
c
,0,
UNIT_SECONDS
);

1117 
	}
}

1119 
	$≥xpúeComm™d
(
˛õ¡
 *
c
) {

1120 
	`expúeGíîicComm™d
(
c
,
	`vr_m£c_now
(),
UNIT_MILLISECONDS
);

1121 
	}
}

1123 
	$≥xpúótComm™d
(
˛õ¡
 *
c
) {

1124 
	`expúeGíîicComm™d
(
c
,0,
UNIT_MILLISECONDS
);

1125 
	}
}

1127 
	$âlGíîicComm™d
(
˛õ¡
 *
c
, 
ouçut_ms
) {

1128 
expúe
, 
âl
 = -1;

1130 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1131 
	`lockDbRód
(
c
->
db
);

1133 i‡(
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]Ë=
NULL
) {

1134 
	`u∆ockDb
(
c
->
db
);

1135 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

1136 
	`addRïlyL⁄gL⁄g
(
c
,-2);

1141 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

1142 
	`u∆ockDb
(
c
->
db
);

1143 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

1145 i‡(
expúe
 != -1) {

1146 
âl
 = 
expúe
-
	`vr_m£c_now
();

1147 i‡(
âl
 < 0)Åtl = 0;

1149 i‡(
âl
 == -1) {

1150 
	`addRïlyL⁄gL⁄g
(
c
,-1);

1152 
	`addRïlyL⁄gL⁄g
(
c
,
ouçut_ms
 ? 
âl
 : ((ttl+500)/1000));

1154 
	}
}

1156 
	$âlComm™d
(
˛õ¡
 *
c
) {

1157 
	`âlGíîicComm™d
(
c
, 0);

1158 
	}
}

1160 
	$±éComm™d
(
˛õ¡
 *
c
) {

1161 
	`âlGíîicComm™d
(
c
, 1);

1162 
	}
}

1164 
	$≥rsi°Comm™d
(
˛õ¡
 *
c
) {

1165 
di˘E¡ry
 *
de
;

1167 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1168 
	`lockDbWrôe
(
c
->
db
);

1169 
de
 = 
	`di˘Föd
(
c
->
db
->
di˘
,c->
¨gv
[1]->
±r
);

1170 i‡(
de
 =
NULL
) {

1171 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1173 i‡(
	`ªmoveExpúe
(
c
->
db
,c->
¨gv
[1])) {

1174 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

1175 
c
->
vñ
->
dúty
++;

1177 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1180 
	`u∆ockDb
(
c
->
db
);

1181 
	}
}

1189 *
	$gëKeysUsögComm™dTabÀ
(
ªdisComm™d
 *
cmd
,
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1190 
j
, 
i
 = 0, 
œ°
, *
keys
;

1191 
	`UNUSED
(
¨gv
);

1193 i‡(
cmd
->
fú°key
 == 0) {

1194 *
numkeys
 = 0;

1195  
NULL
;

1197 
œ°
 = 
cmd
->
œ°key
;

1198 i‡(
œ°
 < 0Ëœ° = 
¨gc
+last;

1199 
keys
 = 
	`dÆloc
(()*((
œ°
 - 
cmd
->
fú°key
)+1));

1200 
j
 = 
cmd
->
fú°key
; j <
œ°
; j +cmd->
key°ï
) {

1201 
	`ASSERT
(
j
 < 
¨gc
);

1202 
keys
[
i
++] = 
j
;

1204 *
numkeys
 = 
i
;

1205  
keys
;

1206 
	}
}

1219 *
	$gëKeysFromComm™d
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1220 i‡(
cmd
->
gëkeys_¥oc
) {

1221  
cmd
->
	`gëkeys_¥oc
(cmd,
¨gv
,
¨gc
,
numkeys
);

1223  
	`gëKeysUsögComm™dTabÀ
(
cmd
,
¨gv
,
¨gc
,
numkeys
);

1225 
	}
}

1228 
	$gëKeysFªeResu…
(*
ªsu…
) {

1229 
	`d‰ì
(
ªsu…
);

1230 
	}
}

1235 *
	$zuni⁄I¡îGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1236 
i
, 
num
, *
keys
;

1237 
	`UNUSED
(
cmd
);

1239 
num
 = 
	`©oi
(
¨gv
[2]->
±r
);

1242 i‡(
num
 > (
¨gc
-3)) {

1243 *
numkeys
 = 0;

1244  
NULL
;

1250 
keys
 = 
	`dÆloc
(()*(
num
+1));

1253 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 3+i;

1256 
keys
[
num
] = 1;

1257 *
numkeys
 = 
num
+1;

1258  
keys
;

1259 
	}
}

1264 *
	$evÆGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1265 
i
, 
num
, *
keys
;

1266 
	`UNUSED
(
cmd
);

1268 
num
 = 
	`©oi
(
¨gv
[2]->
±r
);

1271 i‡(
num
 > (
¨gc
-3)) {

1272 *
numkeys
 = 0;

1273  
NULL
;

1276 
keys
 = 
	`dÆloc
(()*
num
);

1277 *
numkeys
 = 
num
;

1280 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 3+i;

1282  
keys
;

1283 
	}
}

1292 *
	$s‹tGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1293 
i
, 
j
, 
num
, *
keys
, 
found_°‹e
 = 0;

1294 
	`UNUSED
(
cmd
);

1296 
num
 = 0;

1297 
keys
 = 
	`dÆloc
(()*2);

1299 
keys
[
num
++] = 1;

1306 *
«me
;

1307 
skù
;

1308 } 
skùli°
[] = {

1312 {
NULL
, 0}

1315 
i
 = 2; i < 
¨gc
; i++) {

1316 
j
 = 0; 
skùli°
[j].
«me
 !
NULL
; j++) {

1317 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,
skùli°
[
j
].
«me
)) {

1318 
i
 +
skùli°
[
j
].
skù
;

1320 } i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,"°‹e"Ë&& i+1 < 
¨gc
) {

1324 
found_°‹e
 = 1;

1325 
keys
[
num
] = 
i
+1;

1330 *
numkeys
 = 
num
 + 
found_°‹e
;

1331  
keys
;

1332 
	}
}

1334 *
	$migøãGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1335 
i
, 
num
, 
fú°
, *
keys
;

1336 
	`UNUSED
(
cmd
);

1339 
fú°
 = 3;

1340 
num
 = 1;

1343 i‡(
¨gc
 > 6) {

1344 
i
 = 6; i < 
¨gc
; i++) {

1345 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,"keys") &&

1346 
	`sd¶í
(
¨gv
[3]->
±r
) == 0)

1348 
fú°
 = 
i
+1;

1349 
num
 = 
¨gc
-
fú°
;

1355 
keys
 = 
	`dÆloc
(()*
num
);

1356 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 
fú°
+i;

1357 *
numkeys
 = 
num
;

1358  
keys
;

1359 
	}
}

1361 
	$„tchI¡î«lDbByKey
(
˛õ¡
 *
c
, 
robj
 *
key
) {

1362 
c
->
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
	`hash_¸c16
(
key
->
±r
,
	`°rögObje˘Lí
(key))&0x3FFF)%£rvî.
dböum
+c->
di˘id
*server.dbinum);

1363  
VR_OK
;

1364 
	}
}

1366 
	$„tchI¡î«lDbById
(
˛õ¡
 *
c
, 
idx
) {

1367 
c
->
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
idx
+c->
di˘id
*£rvî.
dböum
);

1368  
VR_OK
;

1369 
	}
}

1373 
	$åyResizeHashTabÀsF‹Db
(
dbid
) {

1374 
ªdisDb
 *
db
;

1376 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
dbid
);

1377 
	`lockDbWrôe
(
db
);

1378 i‡(
	`htNìdsResize
(
db
->
di˘
))

1379 
	`di˘Resize
(
db
->
di˘
);

1380 i‡(
	`htNìdsResize
(
db
->
expúes
))

1381 
	`di˘Resize
(
db
->
expúes
);

1382 
	`u∆ockDb
(
db
);

1383 
	}
}

1392 
	$ö¸emíèŒyRehashF‹Db
(
dbid
) {

1393 
ªdisDb
 *
db
;

1395 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
dbid
);

1396 
	`lockDbWrôe
(
db
);

1399 i‡(
	`di˘IsRehashög
(
db
->
di˘
)) {

1400 
	`di˘RehashMûli£c⁄ds
(
db
->
di˘
,1);

1401 
	`u∆ockDb
(
db
);

1405 i‡(
	`di˘IsRehashög
(
db
->
expúes
)) {

1406 
	`di˘RehashMûli£c⁄ds
(
db
->
expúes
,1);

1407 
	`u∆ockDb
(
db
);

1411 
	`u∆ockDb
(
db
);

1413 
	}
}

1437 
	$a˘iveExpúeCy˛e
(
vr_backíd
 *
backíd
, 
ty≥
) {

1438 
j
, 
ôî©i⁄
 = 0;

1439 
dbs_≥r_ˇŒ
 = 
CRON_DBS_PER_CALL
;

1440 
°¨t
 = 
	`vr_u£c_now
(), 
timñimô
;

1441 
expúed_tŸÆ
 = 0;

1443 i‡(
ty≥
 =
ACTIVE_EXPIRE_CYCLE_FAST
) {

1447 i‡(!
backíd
->
timñimô_exô
) ;

1448 i‡(
°¨t
 < 
backíd
->
œ°_Á°_cy˛e
 + 
ACTIVE_EXPIRE_CYCLE_FAST_DURATION
*2) ;

1449 
backíd
->
œ°_Á°_cy˛e
 = 
°¨t
;

1459 i‡(
dbs_≥r_ˇŒ
 > 
£rvî
.
dbnum
 || 
backíd
->
timñimô_exô
)

1460 
dbs_≥r_ˇŒ
 = 
£rvî
.
dbnum
;

1466 
timñimô
 = 1000000*
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC
/
£rvî
.
hz
/100;

1467 
backíd
->
timñimô_exô
 = 0;

1468 i‡(
timñimô
 <= 0)Åimelimit = 1;

1470 i‡(
ty≥
 =
ACTIVE_EXPIRE_CYCLE_FAST
)

1471 
timñimô
 = 
ACTIVE_EXPIRE_CYCLE_FAST_DURATION
;

1473 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1474 
expúed
;

1475 
ªdisDb
 *
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
backíd
->
cuºít_db
%£rvî.
dbnum
);

1480 
backíd
->
cuºít_db
++;

1482 
	`lockDbWrôe
(
db
);

1486 
num
, 
¶Ÿs
;

1487 
now
, 
âl_sum
;

1488 
âl_ßm∂es
;

1490 i‡((
num
 = 
	`di˘Size
(
db
->
expúes
)) == 0) {

1491 
db
->
avg_âl
 = 0;

1494 
¶Ÿs
 = 
	`di˘SlŸs
(
db
->
expúes
);

1495 
now
 = 
	`vr_m£c_now
();

1500 i‡(
num
 && 
¶Ÿs
 > 
DICT_HT_INITIAL_SIZE
 &&

1501 (
num
*100/
¶Ÿs
 < 1)) ;

1505 
expúed
 = 0;

1506 
âl_sum
 = 0;

1507 
âl_ßm∂es
 = 0;

1509 i‡(
num
 > 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
)

1510 
num
 = 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
;

1512 
num
--) {

1513 
di˘E¡ry
 *
de
;

1514 
âl
;

1516 i‡((
de
 = 
	`di˘GëR™domKey
(
db
->
expúes
)Ë=
NULL
) ;

1517 
âl
 = 
	`di˘GëSig√dI¡egîVÆ
(
de
)-
now
;

1518 i‡(
	`a˘iveExpúeCy˛eTryExpúe
(
db
,
de
,
now
)Ë
expúed
++;

1519 i‡(
âl
 > 0) {

1521 
âl_sum
 +
âl
;

1522 
âl_ßm∂es
++;

1526 
expúed_tŸÆ
 +
expúed
;

1529 i‡(
âl_ßm∂es
) {

1530 
avg_âl
 = 
âl_sum
/
âl_ßm∂es
;

1535 i‡(
db
->
avg_âl
 == 0) db->avg_ttl =ávg_ttl;

1536 
db
->
avg_âl
 = (db->avg_ttl/50)*49 + (avg_ttl/50);

1542 
ôî©i⁄
++;

1543 i‡((
ôî©i⁄
 & 0xf) == 0) {

1544 
ñ≠£d
 = 
	`vr_u£c_now
()-
°¨t
;

1547 i‡(
ñ≠£d
 > 
timñimô
Ë
backíd
->
timñimô_exô
 = 1;

1549 i‡(
backíd
->
timñimô_exô
) {

1550 
	`u∆ockDb
(
db
);

1552 i‡(
expúed_tŸÆ
 > 0) {

1553 
	`upd©e_°©s_add
(
backíd
->
vñ
.
°©s
, 
expúedkeys
, 
expúed_tŸÆ
);

1559 } 
expúed
 > 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
/4);

1560 
	`u∆ockDb
(
db
);

1563 i‡(
expúed_tŸÆ
 > 0) {

1564 
	`upd©e_°©s_add
(
backíd
->
vñ
.
°©s
, 
expúedkeys
, 
expúed_tŸÆ
);

1566 
	}
}

1568 
	$a˘iveExpúeCy˛eTryExpúe
(
ªdisDb
 *
db
, 
di˘E¡ry
 *
de
, 
now
) {

1569 
t
 = 
	`di˘GëSig√dI¡egîVÆ
(
de
);

1570 i‡(
now
 > 
t
) {

1571 
sds
 
key
 = 
	`di˘GëKey
(
de
);

1572 
robj
 *
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

1573 
	`dbDñëe
(
db
,
keyobj
);

1574 
	`‰ìObje˘
(
keyobj
);

1579 
	}
}

1584 
	$d©aba£sCr⁄
(
vr_backíd
 *
backíd
) {

1587 i‡(
ª∂
.
ma°îho°
 =
NULL
)

1588 
	`a˘iveExpúeCy˛e
(
backíd
, 
ACTIVE_EXPIRE_CYCLE_SLOW
);

1593 i‡(
£rvî
.
rdb_chûd_pid
 =-1 && sîvî.
aof_chûd_pid
 == -1) {

1594 
dbs_≥r_ˇŒ
 = 
CRON_DBS_PER_CALL
;

1595 
j
;

1598 i‡(
dbs_≥r_ˇŒ
 > 
£rvî
.
dbnum
) dbs_per_call = server.dbnum;

1601 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1602 
	`åyResizeHashTabÀsF‹Db
(
backíd
->
ªsize_db
%
£rvî
.
dbnum
);

1603 
backíd
->
ªsize_db
++;

1607 i‡(
£rvî
.
a˘ivîehashög
) {

1608 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1609 
w‹k_d⁄e
 = 
	`ö¸emíèŒyRehashF‹Db
(
backíd
->
ªhash_db
%
£rvî
.
dbnum
);

1610 
backíd
->
ªhash_db
++;

1611 i‡(
w‹k_d⁄e
) {

1619 
	}
}

	@src/vr_db.h

1 #i‚de‡
_VR_DB_H_


2 
	#_VR_DB_H_


	)

11 
	#MAXMEMORY_EVICTION_POOL_SIZE
 16

	)

13 
	sevi˘i⁄PoﬁE¡ry
 {

14 
	midÀ
;

15 
sds
 
	mkey
;

22 
	sªdisDb
 {

23 
di˘
 *
	mdi˘
;

24 
di˘
 *
	mexpúes
;

25 
di˘
 *
	mblockög_keys
;

26 
di˘
 *
	mªady_keys
;

27 
di˘
 *
	mw©ched_keys
;

28 
evi˘i⁄PoﬁE¡ry
 *
	mevi˘i⁄_poﬁ
;

29 
	mid
;

30 
	mavg_âl
;

32 
±hªad_rwlock_t
 
	mrwl
;

33 } 
	tªdisDb
;

35 
di˘Ty≥
 
dbDi˘Ty≥
;

36 
di˘Ty≥
 
key±rDi˘Ty≥
;

37 
di˘Ty≥
 
keyli°Di˘Ty≥
;

39 
ªdisDbInô
(
ªdisDb
 *
db
);

40 
ªdisDbDeöô
(
ªdisDb
 *
db
);

42 
lockDbRód
(
ªdisDb
 *
db
);

43 
lockDbWrôe
(
ªdisDb
 *
db
);

44 
u∆ockDb
(
ªdisDb
 *
db
);

46 
robj
 *
lookupKey
(
ªdisDb
 *
db
,Ñobj *
key
);

47 
robj
 *
lookupKeyRód
(
ªdisDb
 *
db
,Ñobj *
key
);

48 
robj
 *
lookupKeyWrôe
(
ªdisDb
 *
db
,Ñobj *
key
, *
expúed
);

49 
robj
 *
lookupKeyRódOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
);

50 
robj
 *
lookupKeyWrôeOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
, *
expúed
);

51 
dbAdd
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
);

52 
dbOvîwrôe
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
);

53 
£tKey
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
, *
expúed
);

54 
dbExi°s
(
ªdisDb
 *
db
, 
robj
 *
key
);

55 
robj
 *
dbR™domKey
(
ªdisDb
 *
db
);

56 
dbDñëe
(
ªdisDb
 *
db
, 
robj
 *
key
);

57 
robj
 *
dbUnsh¨eSåögVÆue
(
ªdisDb
 *
db
,Ñobj *
key
,Ñobj *
o
);

58 
em±yDb
((
ˇŒback
)(*));

59 
	`£À˘Db
(
˛õ¡
 *
c
, 
id
);

60 
	`sig«lModifõdKey
(
ªdisDb
 *
db
, 
robj
 *
key
);

61 
	`sig«lFlushedDb
(
dbid
);

62 
	`ÊushdbComm™d
(
˛õ¡
 *
c
);

63 
	`ÊushÆlComm™d
(
˛õ¡
 *
c
);

64 
	`dñComm™d
(
˛õ¡
 *
c
);

65 
	`exi°sComm™d
(
˛õ¡
 *
c
);

66 
	`£À˘Comm™d
(
˛õ¡
 *
c
);

67 
	`øndomkeyComm™d
(
˛õ¡
 *
c
);

68 
	`keysComm™d
(
˛õ¡
 *
c
);

69 
	`sˇnCÆlback
(*
¥ivd©a
, c⁄° 
di˘E¡ry
 *
de
);

70 
	`∑r£SˇnCurs‹OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
curs‹
);

71 
	`sˇnGíîicComm™d
(
˛õ¡
 *
c
, 
sˇ¡y≥
);

72 
	`sˇnComm™d
(
˛õ¡
 *
c
);

73 
	`dbsizeComm™d
(
˛õ¡
 *
c
);

74 
	`œ°ßveComm™d
(
˛õ¡
 *
c
);

75 
	`ty≥Comm™d
(
˛õ¡
 *
c
);

76 
	`shutdownComm™d
(
˛õ¡
 *
c
);

77 
	`ª«meGíîicComm™d
(
˛õ¡
 *
c
, 
nx
);

78 
	`ª«meComm™d
(
˛õ¡
 *
c
);

79 
	`ª«míxComm™d
(
˛õ¡
 *
c
);

80 
	`moveComm™d
(
˛õ¡
 *
c
);

81 
	`ªmoveExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

82 
	`£tExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
, 
whí
);

83 
	`gëExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

84 
	`¥›ag©eExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

85 
	`checkIfExpúed
(
ªdisDb
 *
db
, 
robj
 *
key
);

86 
	`expúeIfNìded
(
ªdisDb
 *
db
, 
robj
 *
key
);

87 
	`expúeGíîicComm™d
(
˛õ¡
 *
c
, 
ba£time
, 
unô
);

88 
	`expúeComm™d
(
˛õ¡
 *
c
);

89 
	`expúótComm™d
(
˛õ¡
 *
c
);

90 
	`≥xpúeComm™d
(
˛õ¡
 *
c
);

91 
	`≥xpúótComm™d
(
˛õ¡
 *
c
);

92 
	`âlGíîicComm™d
(
˛õ¡
 *
c
, 
ouçut_ms
);

93 
	`âlComm™d
(
˛õ¡
 *
c
);

94 
	`±éComm™d
(
˛õ¡
 *
c
);

95 
	`≥rsi°Comm™d
(
˛õ¡
 *
c
);

96 *
	`gëKeysUsögComm™dTabÀ
(
ªdisComm™d
 *
cmd
,
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

97 *
	`gëKeysFromComm™d
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

98 
	`gëKeysFªeResu…
(*
ªsu…
);

99 *
	`zuni⁄I¡îGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

100 *
	`evÆGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

101 *
	`s‹tGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

102 *
	`migøãGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

104 
	`„tchI¡î«lDbByKey
(
˛õ¡
 *
c
, 
robj
 *
key
);

105 
	`„tchI¡î«lDbById
(
˛õ¡
 *
c
, 
idx
);

107 
	`åyResizeHashTabÀsF‹Db
(
dbid
);

108 
	`ö¸emíèŒyRehashF‹Db
(
dbid
);

109 
	`a˘iveExpúeCy˛e
(
vr_backíd
 *
backíd
, 
ty≥
);

110 
	`a˘iveExpúeCy˛eTryExpúe
(
ªdisDb
 *
db
, 
di˘E¡ry
 *
de
, 
now
);

111 
	`d©aba£sCr⁄
(
vr_backíd
 *
backíd
);

	@src/vr_db.h

1 #i‚de‡
_VR_DB_H_


2 
	#_VR_DB_H_


	)

11 
	#MAXMEMORY_EVICTION_POOL_SIZE
 16

	)

13 
	sevi˘i⁄PoﬁE¡ry
 {

14 
	midÀ
;

15 
sds
 
	mkey
;

22 
	sªdisDb
 {

23 
di˘
 *
	mdi˘
;

24 
di˘
 *
	mexpúes
;

25 
di˘
 *
	mblockög_keys
;

26 
di˘
 *
	mªady_keys
;

27 
di˘
 *
	mw©ched_keys
;

28 
evi˘i⁄PoﬁE¡ry
 *
	mevi˘i⁄_poﬁ
;

29 
	mid
;

30 
	mavg_âl
;

32 
±hªad_rwlock_t
 
	mrwl
;

33 } 
	tªdisDb
;

35 
di˘Ty≥
 
dbDi˘Ty≥
;

36 
di˘Ty≥
 
key±rDi˘Ty≥
;

37 
di˘Ty≥
 
keyli°Di˘Ty≥
;

39 
ªdisDbInô
(
ªdisDb
 *
db
);

40 
ªdisDbDeöô
(
ªdisDb
 *
db
);

42 
lockDbRód
(
ªdisDb
 *
db
);

43 
lockDbWrôe
(
ªdisDb
 *
db
);

44 
u∆ockDb
(
ªdisDb
 *
db
);

46 
robj
 *
lookupKey
(
ªdisDb
 *
db
,Ñobj *
key
);

47 
robj
 *
lookupKeyRód
(
ªdisDb
 *
db
,Ñobj *
key
);

48 
robj
 *
lookupKeyWrôe
(
ªdisDb
 *
db
,Ñobj *
key
, *
expúed
);

49 
robj
 *
lookupKeyRódOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
);

50 
robj
 *
lookupKeyWrôeOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
, *
expúed
);

51 
dbAdd
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
);

52 
dbOvîwrôe
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
);

53 
£tKey
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
, *
expúed
);

54 
dbExi°s
(
ªdisDb
 *
db
, 
robj
 *
key
);

55 
robj
 *
dbR™domKey
(
ªdisDb
 *
db
);

56 
dbDñëe
(
ªdisDb
 *
db
, 
robj
 *
key
);

57 
robj
 *
dbUnsh¨eSåögVÆue
(
ªdisDb
 *
db
,Ñobj *
key
,Ñobj *
o
);

58 
em±yDb
((
ˇŒback
)(*));

59 
	`£À˘Db
(
˛õ¡
 *
c
, 
id
);

60 
	`sig«lModifõdKey
(
ªdisDb
 *
db
, 
robj
 *
key
);

61 
	`sig«lFlushedDb
(
dbid
);

62 
	`ÊushdbComm™d
(
˛õ¡
 *
c
);

63 
	`ÊushÆlComm™d
(
˛õ¡
 *
c
);

64 
	`dñComm™d
(
˛õ¡
 *
c
);

65 
	`exi°sComm™d
(
˛õ¡
 *
c
);

66 
	`£À˘Comm™d
(
˛õ¡
 *
c
);

67 
	`øndomkeyComm™d
(
˛õ¡
 *
c
);

68 
	`keysComm™d
(
˛õ¡
 *
c
);

69 
	`sˇnCÆlback
(*
¥ivd©a
, c⁄° 
di˘E¡ry
 *
de
);

70 
	`∑r£SˇnCurs‹OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
curs‹
);

71 
	`sˇnGíîicComm™d
(
˛õ¡
 *
c
, 
sˇ¡y≥
);

72 
	`sˇnComm™d
(
˛õ¡
 *
c
);

73 
	`dbsizeComm™d
(
˛õ¡
 *
c
);

74 
	`œ°ßveComm™d
(
˛õ¡
 *
c
);

75 
	`ty≥Comm™d
(
˛õ¡
 *
c
);

76 
	`shutdownComm™d
(
˛õ¡
 *
c
);

77 
	`ª«meGíîicComm™d
(
˛õ¡
 *
c
, 
nx
);

78 
	`ª«meComm™d
(
˛õ¡
 *
c
);

79 
	`ª«míxComm™d
(
˛õ¡
 *
c
);

80 
	`moveComm™d
(
˛õ¡
 *
c
);

81 
	`ªmoveExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

82 
	`£tExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
, 
whí
);

83 
	`gëExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

84 
	`¥›ag©eExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

85 
	`checkIfExpúed
(
ªdisDb
 *
db
, 
robj
 *
key
);

86 
	`expúeIfNìded
(
ªdisDb
 *
db
, 
robj
 *
key
);

87 
	`expúeGíîicComm™d
(
˛õ¡
 *
c
, 
ba£time
, 
unô
);

88 
	`expúeComm™d
(
˛õ¡
 *
c
);

89 
	`expúótComm™d
(
˛õ¡
 *
c
);

90 
	`≥xpúeComm™d
(
˛õ¡
 *
c
);

91 
	`≥xpúótComm™d
(
˛õ¡
 *
c
);

92 
	`âlGíîicComm™d
(
˛õ¡
 *
c
, 
ouçut_ms
);

93 
	`âlComm™d
(
˛õ¡
 *
c
);

94 
	`±éComm™d
(
˛õ¡
 *
c
);

95 
	`≥rsi°Comm™d
(
˛õ¡
 *
c
);

96 *
	`gëKeysUsögComm™dTabÀ
(
ªdisComm™d
 *
cmd
,
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

97 *
	`gëKeysFromComm™d
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

98 
	`gëKeysFªeResu…
(*
ªsu…
);

99 *
	`zuni⁄I¡îGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

100 *
	`evÆGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

101 *
	`s‹tGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

102 *
	`migøãGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

104 
	`„tchI¡î«lDbByKey
(
˛õ¡
 *
c
, 
robj
 *
key
);

105 
	`„tchI¡î«lDbById
(
˛õ¡
 *
c
, 
idx
);

107 
	`åyResizeHashTabÀsF‹Db
(
dbid
);

108 
	`ö¸emíèŒyRehashF‹Db
(
dbid
);

109 
	`a˘iveExpúeCy˛e
(
vr_backíd
 *
backíd
, 
ty≥
);

110 
	`a˘iveExpúeCy˛eTryExpúe
(
ªdisDb
 *
db
, 
di˘E¡ry
 *
de
, 
now
);

111 
	`d©aba£sCr⁄
(
vr_backíd
 *
backíd
);

	@src/vr_dict.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

5 
	~<limôs.h
>

6 
	~<sys/time.h
>

7 
	~<˘y≥.h
>

9 
	~<vr_c‹e.h
>

19 
	gdi˘_ˇn_ªsize
 = 1;

20 
	gdi˘_f‹˚_ªsize_øtio
 = 5;

24 
_di˘Ex∑ndIfNìded
(
di˘
 *
ht
);

25 
_di˘NextPowî
(
size
);

26 
_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
);

27 
_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

32 
	$di˘I¡HashFun˘i⁄
(
key
)

34 
key
 += ~(key << 15);

35 
key
 ^= (key >> 10);

36 
key
 += (key << 3);

37 
key
 ^= (key >> 6);

38 
key
 += ~(key << 11);

39 
key
 ^= (key >> 16);

40  
key
;

41 
	}
}

43 
uöt32_t
 
	gdi˘_hash_fun˘i⁄_£ed
 = 5381;

45 
	$di˘SëHashFun˘i⁄Sìd
(
uöt32_t
 
£ed
) {

46 
di˘_hash_fun˘i⁄_£ed
 = 
£ed
;

47 
	}
}

49 
uöt32_t
 
	$di˘GëHashFun˘i⁄Sìd
() {

50  
di˘_hash_fun˘i⁄_£ed
;

51 
	}
}

64 
	$di˘GíHashFun˘i⁄
(c⁄° *
key
, 
Àn
) {

67 
uöt32_t
 
£ed
 = 
di˘_hash_fun˘i⁄_£ed
;

68 c⁄° 
uöt32_t
 
m
 = 0x5bd1e995;

69 c⁄° 
r
 = 24;

72 
uöt32_t
 
h
 = 
£ed
 ^ 
Àn
;

75 c⁄° *
d©a
 = (c⁄° *)
key
;

77 
Àn
 >= 4) {

78 
uöt32_t
 
k
 = *(uöt32_t*)
d©a
;

80 
k
 *
m
;

81 
k
 ^k >> 
r
;

82 
k
 *
m
;

84 
h
 *
m
;

85 
h
 ^
k
;

87 
d©a
 += 4;

88 
Àn
 -= 4;

92 
Àn
) {

93 3: 
h
 ^
d©a
[2] << 16;

94 2: 
h
 ^
d©a
[1] << 8;

95 1: 
h
 ^
d©a
[0]; h *
m
;

100 
h
 ^= h >> 13;

101 
h
 *
m
;

102 
h
 ^= h >> 15;

104  ()
h
;

105 
	}
}

108 
	$di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

109 
hash
 = ()
di˘_hash_fun˘i⁄_£ed
;

111 
Àn
--)

112 
hash
 = ((hash << 5Ë+ hashË+ (
	`tﬁowî
(*
buf
++));

113  
hash
;

114 
	}
}

120 
	$_di˘Re£t
(
di˘ht
 *
ht
)

122 
ht
->
èbÀ
 = 
NULL
;

123 
ht
->
size
 = 0;

124 
ht
->
sizemask
 = 0;

125 
ht
->
u£d
 = 0;

126 
	}
}

129 
di˘
 *
	$di˘Cª©e
(
di˘Ty≥
 *
ty≥
,

130 *
¥ivD©aPå
)

132 
di˘
 *
d
 = 
	`dÆloc
((*d));

134 
	`_di˘Inô
(
d
,
ty≥
,
¥ivD©aPå
);

135  
d
;

136 
	}
}

139 
	$_di˘Inô
(
di˘
 *
d
, 
di˘Ty≥
 *
ty≥
,

140 *
¥ivD©aPå
)

142 
	`_di˘Re£t
(&
d
->
ht
[0]);

143 
	`_di˘Re£t
(&
d
->
ht
[1]);

144 
d
->
ty≥
 =Åype;

145 
d
->
¥ivd©a
 = 
¥ivD©aPå
;

146 
d
->
ªhashidx
 = -1;

147 
d
->
ôî©‹s
 = 0;

148  
DICT_OK
;

149 
	}
}

153 
	$di˘Resize
(
di˘
 *
d
)

155 
möimÆ
;

157 i‡(!
di˘_ˇn_ªsize
 || 
	`di˘IsRehashög
(
d
)Ë 
DICT_ERR
;

158 
möimÆ
 = 
d
->
ht
[0].
u£d
;

159 i‡(
möimÆ
 < 
DICT_HT_INITIAL_SIZE
)

160 
möimÆ
 = 
DICT_HT_INITIAL_SIZE
;

161  
	`di˘Ex∑nd
(
d
, 
möimÆ
);

162 
	}
}

165 
	$di˘Ex∑nd
(
di˘
 *
d
, 
size
)

167 
di˘ht
 
n
;

168 
ªÆsize
 = 
	`_di˘NextPowî
(
size
);

172 i‡(
	`di˘IsRehashög
(
d
Ë|| d->
ht
[0].
u£d
 > 
size
)

173  
DICT_ERR
;

176 i‡(
ªÆsize
 =
d
->
ht
[0].
size
Ë 
DICT_ERR
;

179 
n
.
size
 = 
ªÆsize
;

180 
n
.
sizemask
 = 
ªÆsize
-1;

181 
n
.
èbÀ
 = 
	`dˇŒoc
(
ªÆsize
, (
di˘E¡ry
*));

182 
n
.
u£d
 = 0;

186 i‡(
d
->
ht
[0].
èbÀ
 =
NULL
) {

187 
d
->
ht
[0] = 
n
;

188  
DICT_OK
;

192 
d
->
ht
[1] = 
n
;

193 
d
->
ªhashidx
 = 0;

194  
DICT_OK
;

195 
	}
}

206 
	$di˘Rehash
(
di˘
 *
d
, 
n
) {

207 
em±y_visôs
 = 
n
*10;

208 i‡(!
	`di˘IsRehashög
(
d
))  0;

210 
n
-- && 
d
->
ht
[0].
u£d
 != 0) {

211 
di˘E¡ry
 *
de
, *
√xtde
;

215 
	`ASSERT
(
d
->
ht
[0].
size
 > ()d->
ªhashidx
);

216 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] =
NULL
) {

217 
d
->
ªhashidx
++;

218 i‡(--
em±y_visôs
 == 0)  1;

220 
de
 = 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
];

222 
de
) {

223 
h
;

225 
√xtde
 = 
de
->
√xt
;

227 
h
 = 
	`di˘HashKey
(
d
, 
de
->
key
Ë& d->
ht
[1].
sizemask
;

228 
de
->
√xt
 = 
d
->
ht
[1].
èbÀ
[
h
];

229 
d
->
ht
[1].
èbÀ
[
h
] = 
de
;

230 
d
->
ht
[0].
u£d
--;

231 
d
->
ht
[1].
u£d
++;

232 
de
 = 
√xtde
;

234 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] = 
NULL
;

235 
d
->
ªhashidx
++;

239 i‡(
d
->
ht
[0].
u£d
 == 0) {

240 
	`d‰ì
(
d
->
ht
[0].
èbÀ
);

241 
d
->
ht
[0] = d->ht[1];

242 
	`_di˘Re£t
(&
d
->
ht
[1]);

243 
d
->
ªhashidx
 = -1;

249 
	}
}

251 
	$timeInMûli£c⁄ds
() {

252 
timevÆ
 
tv
;

254 
	`gëtimeofday
(&
tv
,
NULL
);

255  ((()
tv
.
tv_£c
)*1000)+—v.
tv_u£c
/1000);

256 
	}
}

259 
	$di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
) {

260 
°¨t
 = 
	`timeInMûli£c⁄ds
();

261 
ªhashes
 = 0;

263 
	`di˘Rehash
(
d
,100)) {

264 
ªhashes
 += 100;

265 i‡(
	`timeInMûli£c⁄ds
()-
°¨t
 > 
ms
) ;

267  
ªhashes
;

268 
	}
}

278 
	$_di˘RehashSãp
(
di˘
 *
d
) {

279 i‡(
d
->
ôî©‹s
 =0Ë
	`di˘Rehash
(d,1);

280 
	}
}

283 
	$di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
)

285 
di˘E¡ry
 *
íåy
 = 
	`di˘AddRaw
(
d
,
key
);

287 i‡(!
íåy
Ë 
DICT_ERR
;

288 
	`di˘SëVÆ
(
d
, 
íåy
, 
vÆ
);

289  
DICT_OK
;

290 
	}
}

307 
di˘E¡ry
 *
	$di˘AddRaw
(
di˘
 *
d
, *
key
)

309 
ödex
;

310 
di˘E¡ry
 *
íåy
;

311 
di˘ht
 *
ht
;

313 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

317 i‡((
ödex
 = 
	`_di˘KeyIndex
(
d
, 
key
)) == -1)

318  
NULL
;

324 
ht
 = 
	`di˘IsRehashög
(
d
) ? &d->ht[1] : &d->ht[0];

325 
íåy
 = 
	`dÆloc
((*entry));

326 
íåy
->
√xt
 = 
ht
->
èbÀ
[
ödex
];

327 
ht
->
èbÀ
[
ödex
] = 
íåy
;

328 
ht
->
u£d
++;

331 
	`di˘SëKey
(
d
, 
íåy
, 
key
);

332  
íåy
;

333 
	}
}

339 
	$di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
)

341 
di˘E¡ry
 *
íåy
, 
auxíåy
;

345 i‡(
	`di˘Add
(
d
, 
key
, 
vÆ
Ë=
DICT_OK
)

348 
íåy
 = 
	`di˘Föd
(
d
, 
key
);

354 
auxíåy
 = *
íåy
;

355 
	`di˘SëVÆ
(
d
, 
íåy
, 
vÆ
);

356 
	`di˘FªeVÆ
(
d
, &
auxíåy
);

358 
	}
}

366 
di˘E¡ry
 *
	$di˘Rïœ˚Raw
(
di˘
 *
d
, *
key
) {

367 
di˘E¡ry
 *
íåy
 = 
	`di˘Föd
(
d
,
key
);

369  
íåy
 ?É¡ry : 
	`di˘AddRaw
(
d
,
key
);

370 
	}
}

373 
	$di˘GíîicDñëe
(
di˘
 *
d
, c⁄° *
key
, 
no‰ì
)

375 
h
, 
idx
;

376 
di˘E¡ry
 *
he
, *
¥evHe
;

377 
èbÀ
;

379 i‡(
d
->
ht
[0].
size
 =0Ë 
DICT_ERR
;

380 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

381 
h
 = 
	`di˘HashKey
(
d
, 
key
);

383 
èbÀ
 = 0;Åable <= 1;Åable++) {

384 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

385 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

386 
¥evHe
 = 
NULL
;

387 
he
) {

388 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key)) {

390 i‡(
¥evHe
)

391 
¥evHe
->
√xt
 = 
he
->next;

393 
d
->
ht
[
èbÀ
].èbÀ[
idx
] = 
he
->
√xt
;

394 i‡(!
no‰ì
) {

395 
	`di˘FªeKey
(
d
, 
he
);

396 
	`di˘FªeVÆ
(
d
, 
he
);

398 
	`d‰ì
(
he
);

399 
d
->
ht
[
èbÀ
].
u£d
--;

400  
DICT_OK
;

402 
¥evHe
 = 
he
;

403 
he
 = he->
√xt
;

405 i‡(!
	`di˘IsRehashög
(
d
)) ;

407  
DICT_ERR
;

408 
	}
}

410 
	$di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
) {

411  
	`di˘GíîicDñëe
(
ht
,
key
,0);

412 
	}
}

414 
	$di˘DñëeNoFªe
(
di˘
 *
ht
, c⁄° *
key
) {

415  
	`di˘GíîicDñëe
(
ht
,
key
,1);

416 
	}
}

419 
_di˘CÀ¨
(
di˘
 *
d
, 
di˘ht
 *
ht
, (
ˇŒback
)(*)) {

420 
i
;

423 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

424 
di˘E¡ry
 *
he
, *
√xtHe
;

426 i‡(
ˇŒback
 && (
i
 & 65535Ë=0Ë
	`ˇŒback
(
d
->
¥ivd©a
);

428 i‡((
he
 = 
ht
->
èbÀ
[
i
]Ë=
NULL
) ;

429 
he
) {

430 
√xtHe
 = 
he
->
√xt
;

431 
	`di˘FªeKey
(
d
, 
he
);

432 
	`di˘FªeVÆ
(
d
, 
he
);

433 
	`d‰ì
(
he
);

434 
ht
->
u£d
--;

435 
he
 = 
√xtHe
;

439 if(
ht
->
èbÀ
Ë
	`d‰ì
(ht->table);

441 
	`_di˘Re£t
(
ht
);

442  
DICT_OK
;

443 
	}
}

446 
	$di˘Rñó£
(
di˘
 *
d
)

448 
	`_di˘CÀ¨
(
d
,&d->
ht
[0],
NULL
);

449 
	`_di˘CÀ¨
(
d
,&d->
ht
[1],
NULL
);

450 
	`d‰ì
(
d
);

451 
	}
}

453 
di˘E¡ry
 *
	$di˘Föd
(
di˘
 *
d
, c⁄° *
key
)

455 
di˘E¡ry
 *
he
;

456 
h
, 
idx
, 
èbÀ
;

458 i‡(
d
->
ht
[0].
u£d
 + d->ht[1].u£d =0Ë 
NULL
;

460 
h
 = 
	`di˘HashKey
(
d
, 
key
);

461 
èbÀ
 = 0;Åable <= 1;Åable++) {

462 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

463 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

464 
he
) {

465 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key))

466  
he
;

467 
he
 = he->
√xt
;

469 i‡(!
	`di˘IsRehashög
(
d
)Ë 
NULL
;

471  
NULL
;

472 
	}
}

474 *
	$di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
) {

475 
di˘E¡ry
 *
he
;

477 
he
 = 
	`di˘Föd
(
d
,
key
);

478  
he
 ? 
	`di˘GëVÆ
(heË: 
NULL
;

479 
	}
}

487 
	$di˘Fögî¥öt
(
di˘
 *
d
) {

488 
öãgîs
[6], 
hash
 = 0;

489 
j
;

491 
öãgîs
[0] = (Ë
d
->
ht
[0].
èbÀ
;

492 
öãgîs
[1] = 
d
->
ht
[0].
size
;

493 
öãgîs
[2] = 
d
->
ht
[0].
u£d
;

494 
öãgîs
[3] = (Ë
d
->
ht
[1].
èbÀ
;

495 
öãgîs
[4] = 
d
->
ht
[1].
size
;

496 
öãgîs
[5] = 
d
->
ht
[1].
u£d
;

505 
j
 = 0; j < 6; j++) {

506 
hash
 +
öãgîs
[
j
];

508 
hash
 = (~hash) + (hash << 21);

509 
hash
 = hash ^ (hash >> 24);

510 
hash
 = (hash + (hash << 3)) + (hash << 8);

511 
hash
 = hash ^ (hash >> 14);

512 
hash
 = (hash + (hash << 2)) + (hash << 4);

513 
hash
 = hash ^ (hash >> 28);

514 
hash
 = hash + (hash << 31);

516  
hash
;

517 
	}
}

519 
di˘Iãøt‹
 *
	$di˘GëIãøt‹
(
di˘
 *
d
)

521 
di˘Iãøt‹
 *
ôî
 = 
	`dÆloc
((*iter));

523 
ôî
->
d
 = d;

524 
ôî
->
èbÀ
 = 0;

525 
ôî
->
ödex
 = -1;

526 
ôî
->
ß„
 = 0;

527 
ôî
->
íåy
 = 
NULL
;

528 
ôî
->
√xtE¡ry
 = 
NULL
;

529  
ôî
;

530 
	}
}

532 
di˘Iãøt‹
 *
	$di˘GëSa„Iãøt‹
(
di˘
 *
d
) {

533 
di˘Iãøt‹
 *
i
 = 
	`di˘GëIãøt‹
(
d
);

535 
i
->
ß„
 = 1;

536  
i
;

537 
	}
}

539 
di˘E¡ry
 *
	$di˘Next
(
di˘Iãøt‹
 *
ôî
)

542 i‡(
ôî
->
íåy
 =
NULL
) {

543 
di˘ht
 *
ht
 = &
ôî
->
d
->ht[ôî->
èbÀ
];

544 i‡(
ôî
->
ödex
 =-1 && iãr->
èbÀ
 == 0) {

545 i‡(
ôî
->
ß„
)

546 
ôî
->
d
->
ôî©‹s
++;

548 
ôî
->
fögî¥öt
 = 
	`di˘Fögî¥öt
(ôî->
d
);

550 
ôî
->
ödex
++;

551 i‡(
ôî
->
ödex
 >(Ë
ht
->
size
) {

552 i‡(
	`di˘IsRehashög
(
ôî
->
d
Ë&& iãr->
èbÀ
 == 0) {

553 
ôî
->
èbÀ
++;

554 
ôî
->
ödex
 = 0;

555 
ht
 = &
ôî
->
d
->ht[1];

560 
ôî
->
íåy
 = 
ht
->
èbÀ
[ôî->
ödex
];

562 
ôî
->
íåy
 = iãr->
√xtE¡ry
;

564 i‡(
ôî
->
íåy
) {

567 
ôî
->
√xtE¡ry
 = iãr->
íåy
->
√xt
;

568  
ôî
->
íåy
;

571  
NULL
;

572 
	}
}

574 
	$di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
)

576 i‡(!(
ôî
->
ödex
 =-1 && iãr->
èbÀ
 == 0)) {

577 i‡(
ôî
->
ß„
) {

578 
ôî
->
d
->
ôî©‹s
--;

580 
hv
 = 
	`di˘Fögî¥öt
(
ôî
->
d
);

581 
	`ASSERT
(
ôî
->
fögî¥öt
 =
hv
);

584 
	`d‰ì
(
ôî
);

585 
	}
}

589 
di˘E¡ry
 *
	$di˘GëR™domKey
(
di˘
 *
d
)

591 
di˘E¡ry
 *
he
, *
‹ighe
;

592 
h
;

593 
li°Àn
, 
li°ñe
;

595 i‡(
	`di˘Size
(
d
Ë=0Ë 
NULL
;

596 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

597 i‡(
	`di˘IsRehashög
(
d
)) {

601 
h
 = 
d
->
ªhashidx
 + (
	`øndom
(Ë% (d->
ht
[0].
size
 +

602 
d
->
ht
[1].
size
 -

603 
d
->
ªhashidx
));

604 
he
 = (
h
 >
d
->
ht
[0].
size
Ë? d->ht[1].
èbÀ
[h - d->ht[0].size] :

605 
d
->
ht
[0].
èbÀ
[
h
];

606 } 
he
 =
NULL
);

609 
h
 = 
	`øndom
(Ë& 
d
->
ht
[0].
sizemask
;

610 
he
 = 
d
->
ht
[0].
èbÀ
[
h
];

611 } 
he
 =
NULL
);

618 
li°Àn
 = 0;

619 
‹ighe
 = 
he
;

620 
he
) {

621 
he
 = he->
√xt
;

622 
li°Àn
++;

624 
li°ñe
 = 
	`øndom
(Ë% 
li°Àn
;

625 
he
 = 
‹ighe
;

626 
li°ñe
--Ë
he
 = he->
√xt
;

627  
he
;

628 
	}
}

652 
	$di˘GëSomeKeys
(
di˘
 *
d
, 
di˘E¡ry
 **
des
, 
cou¡
) {

653 
j
;

654 
èbÀs
;

655 
°‹ed
 = 0, 
maxsizemask
;

656 
max°ïs
;

658 i‡(
	`di˘Size
(
d
Ë< 
cou¡
) count = dictSize(d);

659 
max°ïs
 = 
cou¡
*10;

662 
j
 = 0; j < 
cou¡
; j++) {

663 i‡(
	`di˘IsRehashög
(
d
))

664 
	`_di˘RehashSãp
(
d
);

669 
èbÀs
 = 
	`di˘IsRehashög
(
d
) ? 2 : 1;

670 
maxsizemask
 = 
d
->
ht
[0].
sizemask
;

671 i‡(
èbÀs
 > 1 && 
maxsizemask
 < 
d
->
ht
[1].
sizemask
)

672 
maxsizemask
 = 
d
->
ht
[1].
sizemask
;

675 
i
 = 
	`øndom
(Ë& 
maxsizemask
;

676 
em±yÀn
 = 0;

677 
°‹ed
 < 
cou¡
 && 
max°ïs
--) {

678 
j
 = 0; j < 
èbÀs
; j++) {

682 i‡(
èbÀs
 =2 && 
j
 =0 && 
i
 < (Ë
d
->
ªhashidx
) {

687 i‡(
i
 >
d
->
ht
[1].
size
Ëòd->
ªhashidx
;

690 i‡(
i
 >
d
->
ht
[
j
].
size
) ;

691 
di˘E¡ry
 *
he
 = 
d
->
ht
[
j
].
èbÀ
[
i
];

695 i‡(
he
 =
NULL
) {

696 
em±yÀn
++;

697 i‡(
em±yÀn
 >5 &&Ém±yÀ¿> 
cou¡
) {

698 
i
 = 
	`øndom
(Ë& 
maxsizemask
;

699 
em±yÀn
 = 0;

702 
em±yÀn
 = 0;

703 
he
) {

706 *
des
 = 
he
;

707 
des
++;

708 
he
 = he->
√xt
;

709 
°‹ed
++;

710 i‡(
°‹ed
 =
cou¡
)  stored;

714 
i
 = (i+1Ë& 
maxsizemask
;

716  
°‹ed
;

717 
	}
}

721 
	$ªv
(
v
) {

722 
s
 = 8 * (
v
);

723 
mask
 = ~0;

724 (
s
 >>= 1) > 0) {

725 
mask
 ^(mask << 
s
);

726 
v
 = ((v >> 
s
Ë& 
mask
) | ((v << s) & ~mask);

728  
v
;

729 
	}
}

815 
	$di˘Sˇn
(
di˘
 *
d
,

816 
v
,

817 
di˘SˇnFun˘i⁄
 *
‚
,

818 *
¥ivd©a
)

820 
di˘ht
 *
t0
, *
t1
;

821 c⁄° 
di˘E¡ry
 *
de
;

822 
m0
, 
m1
;

824 i‡(
	`di˘Size
(
d
) == 0)  0;

826 i‡(!
	`di˘IsRehashög
(
d
)) {

827 
t0
 = &(
d
->
ht
[0]);

828 
m0
 = 
t0
->
sizemask
;

831 
de
 = 
t0
->
èbÀ
[
v
 & 
m0
];

832 
de
) {

833 
	`‚
(
¥ivd©a
, 
de
);

834 
de
 = de->
√xt
;

838 
t0
 = &
d
->
ht
[0];

839 
t1
 = &
d
->
ht
[1];

842 i‡(
t0
->
size
 > 
t1
->size) {

843 
t0
 = &
d
->
ht
[1];

844 
t1
 = &
d
->
ht
[0];

847 
m0
 = 
t0
->
sizemask
;

848 
m1
 = 
t1
->
sizemask
;

851 
de
 = 
t0
->
èbÀ
[
v
 & 
m0
];

852 
de
) {

853 
	`‚
(
¥ivd©a
, 
de
);

854 
de
 = de->
√xt
;

861 
de
 = 
t1
->
èbÀ
[
v
 & 
m1
];

862 
de
) {

863 
	`‚
(
¥ivd©a
, 
de
);

864 
de
 = de->
√xt
;

868 
v
 = (((v | 
m0
) + 1) & ~m0) | (v & m0);

871 } 
v
 & (
m0
 ^ 
m1
));

876 
v
 |~
m0
;

879 
v
 = 
	`ªv
(v);

880 
v
++;

881 
v
 = 
	`ªv
(v);

883  
v
;

884 
	}
}

889 
	$_di˘Ex∑ndIfNìded
(
di˘
 *
d
)

892 i‡(
	`di˘IsRehashög
(
d
)Ë 
DICT_OK
;

895 i‡(
d
->
ht
[0].
size
 =0Ë 
	`di˘Ex∑nd
(d, 
DICT_HT_INITIAL_SIZE
);

901 i‡(
d
->
ht
[0].
u£d
 >d->ht[0].
size
 &&

902 (
di˘_ˇn_ªsize
 ||

903 
d
->
ht
[0].
u£d
/d->ht[0].
size
 > 
di˘_f‹˚_ªsize_øtio
))

905  
	`di˘Ex∑nd
(
d
, d->
ht
[0].
u£d
*2);

907  
DICT_OK
;

908 
	}
}

911 
	$_di˘NextPowî
(
size
)

913 
i
 = 
DICT_HT_INITIAL_SIZE
;

915 i‡(
size
 >
LONG_MAX
)  LONG_MAX;

917 i‡(
i
 >
size
)

918  
i
;

919 
i
 *= 2;

921 
	}
}

929 
	$_di˘KeyIndex
(
di˘
 *
d
, c⁄° *
key
)

931 
h
, 
idx
, 
èbÀ
;

932 
di˘E¡ry
 *
he
;

935 i‡(
	`_di˘Ex∑ndIfNìded
(
d
Ë=
DICT_ERR
)

938 
h
 = 
	`di˘HashKey
(
d
, 
key
);

939 
èbÀ
 = 0;Åable <= 1;Åable++) {

940 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

942 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

943 
he
) {

944 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key))

946 
he
 = he->
√xt
;

948 i‡(!
	`di˘IsRehashög
(
d
)) ;

950  
idx
;

951 
	}
}

953 
di˘Em±y
(
di˘
 *
d
, (
ˇŒback
)(*)) {

954 
	`_di˘CÀ¨
(
d
,&d->
ht
[0],
ˇŒback
);

955 
	`_di˘CÀ¨
(
d
,&d->
ht
[1],
ˇŒback
);

956 
d
->
ªhashidx
 = -1;

957 
d
->
ôî©‹s
 = 0;

958 
	}
}

960 
	$di˘E«bÀResize
() {

961 
di˘_ˇn_ªsize
 = 1;

962 
	}
}

964 
	$di˘DißbÀResize
() {

965 
di˘_ˇn_ªsize
 = 0;

966 
	}
}

970 
	#DICT_STATS_VECTLEN
 50

	)

971 
size_t
 
	$_di˘GëSètsHt
(*
buf
, 
size_t
 
bufsize
, 
di˘ht
 *
ht
, 
èbÀid
) {

972 
i
, 
¶Ÿs
 = 0, 
chaöÀn
, 
maxchaöÀn
 = 0;

973 
tŸchaöÀn
 = 0;

974 
˛ve˘‹
[
DICT_STATS_VECTLEN
];

975 
size_t
 
l
 = 0;

977 i‡(
ht
->
u£d
 == 0) {

978  
	`¢¥ötf
(
buf
,
bufsize
,

983 
i
 = 0; i < 
DICT_STATS_VECTLEN
; i++Ë
˛ve˘‹
[i] = 0;

984 
i
 = 0; i < 
ht
->
size
; i++) {

985 
di˘E¡ry
 *
he
;

987 i‡(
ht
->
èbÀ
[
i
] =
NULL
) {

988 
˛ve˘‹
[0]++;

991 
¶Ÿs
++;

993 
chaöÀn
 = 0;

994 
he
 = 
ht
->
èbÀ
[
i
];

995 
he
) {

996 
chaöÀn
++;

997 
he
 = he->
√xt
;

999 
˛ve˘‹
[(
chaöÀn
 < 
DICT_STATS_VECTLEN
) ? chainlen : (DICT_STATS_VECTLEN-1)]++;

1000 i‡(
chaöÀn
 > 
maxchaöÀn
) maxchainlen = chainlen;

1001 
tŸchaöÀn
 +
chaöÀn
;

1005 
l
 +
	`¢¥ötf
(
buf
+l,
bufsize
-l,

1014 
èbÀid
, (tableid == 0) ? "main hashÅable" : "rehashingÅarget",

1015 
ht
->
size
, ht->
u£d
, 
¶Ÿs
, 
maxchaöÀn
,

1016 ()
tŸchaöÀn
/
¶Ÿs
, ()
ht
->
u£d
/slots);

1018 
i
 = 0; i < 
DICT_STATS_VECTLEN
-1; i++) {

1019 i‡(
˛ve˘‹
[
i
] == 0) ;

1020 i‡(
l
 >
bufsize
) ;

1021 
l
 +
	`¢¥ötf
(
buf
+l,
bufsize
-l,

1023 (
i
 =
DICT_STATS_VECTLEN
-1)?">= ":"",

1024 
i
, 
˛ve˘‹
[i], (()˛ve˘‹[i]/
ht
->
size
)*100);

1028 i‡(
bufsize
Ë
buf
[bufsize-1] = '\0';

1029  
	`°æí
(
buf
);

1030 
	}
}

1032 
	$di˘GëSèts
(*
buf
, 
size_t
 
bufsize
, 
di˘
 *
d
) {

1033 
size_t
 
l
;

1034 *
‹ig_buf
 = 
buf
;

1035 
size_t
 
‹ig_bufsize
 = 
bufsize
;

1037 
l
 = 
	`_di˘GëSètsHt
(
buf
,
bufsize
,&
d
->
ht
[0],0);

1038 
buf
 +
l
;

1039 
bufsize
 -
l
;

1040 i‡(
	`di˘IsRehashög
(
d
Ë&& 
bufsize
 > 0) {

1041 
	`_di˘GëSètsHt
(
buf
,
bufsize
,&
d
->
ht
[1],1);

1044 i‡(
‹ig_bufsize
Ë
‹ig_buf
[orig_bufsize-1] = '\0';

1045 
	}
}

	@src/vr_dict.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

5 
	~<limôs.h
>

6 
	~<sys/time.h
>

7 
	~<˘y≥.h
>

9 
	~<vr_c‹e.h
>

19 
	gdi˘_ˇn_ªsize
 = 1;

20 
	gdi˘_f‹˚_ªsize_øtio
 = 5;

24 
_di˘Ex∑ndIfNìded
(
di˘
 *
ht
);

25 
_di˘NextPowî
(
size
);

26 
_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
);

27 
_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

32 
	$di˘I¡HashFun˘i⁄
(
key
)

34 
key
 += ~(key << 15);

35 
key
 ^= (key >> 10);

36 
key
 += (key << 3);

37 
key
 ^= (key >> 6);

38 
key
 += ~(key << 11);

39 
key
 ^= (key >> 16);

40  
key
;

41 
	}
}

43 
uöt32_t
 
	gdi˘_hash_fun˘i⁄_£ed
 = 5381;

45 
	$di˘SëHashFun˘i⁄Sìd
(
uöt32_t
 
£ed
) {

46 
di˘_hash_fun˘i⁄_£ed
 = 
£ed
;

47 
	}
}

49 
uöt32_t
 
	$di˘GëHashFun˘i⁄Sìd
() {

50  
di˘_hash_fun˘i⁄_£ed
;

51 
	}
}

64 
	$di˘GíHashFun˘i⁄
(c⁄° *
key
, 
Àn
) {

67 
uöt32_t
 
£ed
 = 
di˘_hash_fun˘i⁄_£ed
;

68 c⁄° 
uöt32_t
 
m
 = 0x5bd1e995;

69 c⁄° 
r
 = 24;

72 
uöt32_t
 
h
 = 
£ed
 ^ 
Àn
;

75 c⁄° *
d©a
 = (c⁄° *)
key
;

77 
Àn
 >= 4) {

78 
uöt32_t
 
k
 = *(uöt32_t*)
d©a
;

80 
k
 *
m
;

81 
k
 ^k >> 
r
;

82 
k
 *
m
;

84 
h
 *
m
;

85 
h
 ^
k
;

87 
d©a
 += 4;

88 
Àn
 -= 4;

92 
Àn
) {

93 3: 
h
 ^
d©a
[2] << 16;

94 2: 
h
 ^
d©a
[1] << 8;

95 1: 
h
 ^
d©a
[0]; h *
m
;

100 
h
 ^= h >> 13;

101 
h
 *
m
;

102 
h
 ^= h >> 15;

104  ()
h
;

105 
	}
}

108 
	$di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

109 
hash
 = ()
di˘_hash_fun˘i⁄_£ed
;

111 
Àn
--)

112 
hash
 = ((hash << 5Ë+ hashË+ (
	`tﬁowî
(*
buf
++));

113  
hash
;

114 
	}
}

120 
	$_di˘Re£t
(
di˘ht
 *
ht
)

122 
ht
->
èbÀ
 = 
NULL
;

123 
ht
->
size
 = 0;

124 
ht
->
sizemask
 = 0;

125 
ht
->
u£d
 = 0;

126 
	}
}

129 
di˘
 *
	$di˘Cª©e
(
di˘Ty≥
 *
ty≥
,

130 *
¥ivD©aPå
)

132 
di˘
 *
d
 = 
	`dÆloc
((*d));

134 
	`_di˘Inô
(
d
,
ty≥
,
¥ivD©aPå
);

135  
d
;

136 
	}
}

139 
	$_di˘Inô
(
di˘
 *
d
, 
di˘Ty≥
 *
ty≥
,

140 *
¥ivD©aPå
)

142 
	`_di˘Re£t
(&
d
->
ht
[0]);

143 
	`_di˘Re£t
(&
d
->
ht
[1]);

144 
d
->
ty≥
 =Åype;

145 
d
->
¥ivd©a
 = 
¥ivD©aPå
;

146 
d
->
ªhashidx
 = -1;

147 
d
->
ôî©‹s
 = 0;

148  
DICT_OK
;

149 
	}
}

153 
	$di˘Resize
(
di˘
 *
d
)

155 
möimÆ
;

157 i‡(!
di˘_ˇn_ªsize
 || 
	`di˘IsRehashög
(
d
)Ë 
DICT_ERR
;

158 
möimÆ
 = 
d
->
ht
[0].
u£d
;

159 i‡(
möimÆ
 < 
DICT_HT_INITIAL_SIZE
)

160 
möimÆ
 = 
DICT_HT_INITIAL_SIZE
;

161  
	`di˘Ex∑nd
(
d
, 
möimÆ
);

162 
	}
}

165 
	$di˘Ex∑nd
(
di˘
 *
d
, 
size
)

167 
di˘ht
 
n
;

168 
ªÆsize
 = 
	`_di˘NextPowî
(
size
);

172 i‡(
	`di˘IsRehashög
(
d
Ë|| d->
ht
[0].
u£d
 > 
size
)

173  
DICT_ERR
;

176 i‡(
ªÆsize
 =
d
->
ht
[0].
size
Ë 
DICT_ERR
;

179 
n
.
size
 = 
ªÆsize
;

180 
n
.
sizemask
 = 
ªÆsize
-1;

181 
n
.
èbÀ
 = 
	`dˇŒoc
(
ªÆsize
, (
di˘E¡ry
*));

182 
n
.
u£d
 = 0;

186 i‡(
d
->
ht
[0].
èbÀ
 =
NULL
) {

187 
d
->
ht
[0] = 
n
;

188  
DICT_OK
;

192 
d
->
ht
[1] = 
n
;

193 
d
->
ªhashidx
 = 0;

194  
DICT_OK
;

195 
	}
}

206 
	$di˘Rehash
(
di˘
 *
d
, 
n
) {

207 
em±y_visôs
 = 
n
*10;

208 i‡(!
	`di˘IsRehashög
(
d
))  0;

210 
n
-- && 
d
->
ht
[0].
u£d
 != 0) {

211 
di˘E¡ry
 *
de
, *
√xtde
;

215 
	`ASSERT
(
d
->
ht
[0].
size
 > ()d->
ªhashidx
);

216 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] =
NULL
) {

217 
d
->
ªhashidx
++;

218 i‡(--
em±y_visôs
 == 0)  1;

220 
de
 = 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
];

222 
de
) {

223 
h
;

225 
√xtde
 = 
de
->
√xt
;

227 
h
 = 
	`di˘HashKey
(
d
, 
de
->
key
Ë& d->
ht
[1].
sizemask
;

228 
de
->
√xt
 = 
d
->
ht
[1].
èbÀ
[
h
];

229 
d
->
ht
[1].
èbÀ
[
h
] = 
de
;

230 
d
->
ht
[0].
u£d
--;

231 
d
->
ht
[1].
u£d
++;

232 
de
 = 
√xtde
;

234 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] = 
NULL
;

235 
d
->
ªhashidx
++;

239 i‡(
d
->
ht
[0].
u£d
 == 0) {

240 
	`d‰ì
(
d
->
ht
[0].
èbÀ
);

241 
d
->
ht
[0] = d->ht[1];

242 
	`_di˘Re£t
(&
d
->
ht
[1]);

243 
d
->
ªhashidx
 = -1;

249 
	}
}

251 
	$timeInMûli£c⁄ds
() {

252 
timevÆ
 
tv
;

254 
	`gëtimeofday
(&
tv
,
NULL
);

255  ((()
tv
.
tv_£c
)*1000)+—v.
tv_u£c
/1000);

256 
	}
}

259 
	$di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
) {

260 
°¨t
 = 
	`timeInMûli£c⁄ds
();

261 
ªhashes
 = 0;

263 
	`di˘Rehash
(
d
,100)) {

264 
ªhashes
 += 100;

265 i‡(
	`timeInMûli£c⁄ds
()-
°¨t
 > 
ms
) ;

267  
ªhashes
;

268 
	}
}

278 
	$_di˘RehashSãp
(
di˘
 *
d
) {

279 i‡(
d
->
ôî©‹s
 =0Ë
	`di˘Rehash
(d,1);

280 
	}
}

283 
	$di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
)

285 
di˘E¡ry
 *
íåy
 = 
	`di˘AddRaw
(
d
,
key
);

287 i‡(!
íåy
Ë 
DICT_ERR
;

288 
	`di˘SëVÆ
(
d
, 
íåy
, 
vÆ
);

289  
DICT_OK
;

290 
	}
}

307 
di˘E¡ry
 *
	$di˘AddRaw
(
di˘
 *
d
, *
key
)

309 
ödex
;

310 
di˘E¡ry
 *
íåy
;

311 
di˘ht
 *
ht
;

313 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

317 i‡((
ödex
 = 
	`_di˘KeyIndex
(
d
, 
key
)) == -1)

318  
NULL
;

324 
ht
 = 
	`di˘IsRehashög
(
d
) ? &d->ht[1] : &d->ht[0];

325 
íåy
 = 
	`dÆloc
((*entry));

326 
íåy
->
√xt
 = 
ht
->
èbÀ
[
ödex
];

327 
ht
->
èbÀ
[
ödex
] = 
íåy
;

328 
ht
->
u£d
++;

331 
	`di˘SëKey
(
d
, 
íåy
, 
key
);

332  
íåy
;

333 
	}
}

339 
	$di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
)

341 
di˘E¡ry
 *
íåy
, 
auxíåy
;

345 i‡(
	`di˘Add
(
d
, 
key
, 
vÆ
Ë=
DICT_OK
)

348 
íåy
 = 
	`di˘Föd
(
d
, 
key
);

354 
auxíåy
 = *
íåy
;

355 
	`di˘SëVÆ
(
d
, 
íåy
, 
vÆ
);

356 
	`di˘FªeVÆ
(
d
, &
auxíåy
);

358 
	}
}

366 
di˘E¡ry
 *
	$di˘Rïœ˚Raw
(
di˘
 *
d
, *
key
) {

367 
di˘E¡ry
 *
íåy
 = 
	`di˘Föd
(
d
,
key
);

369  
íåy
 ?É¡ry : 
	`di˘AddRaw
(
d
,
key
);

370 
	}
}

373 
	$di˘GíîicDñëe
(
di˘
 *
d
, c⁄° *
key
, 
no‰ì
)

375 
h
, 
idx
;

376 
di˘E¡ry
 *
he
, *
¥evHe
;

377 
èbÀ
;

379 i‡(
d
->
ht
[0].
size
 =0Ë 
DICT_ERR
;

380 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

381 
h
 = 
	`di˘HashKey
(
d
, 
key
);

383 
èbÀ
 = 0;Åable <= 1;Åable++) {

384 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

385 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

386 
¥evHe
 = 
NULL
;

387 
he
) {

388 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key)) {

390 i‡(
¥evHe
)

391 
¥evHe
->
√xt
 = 
he
->next;

393 
d
->
ht
[
èbÀ
].èbÀ[
idx
] = 
he
->
√xt
;

394 i‡(!
no‰ì
) {

395 
	`di˘FªeKey
(
d
, 
he
);

396 
	`di˘FªeVÆ
(
d
, 
he
);

398 
	`d‰ì
(
he
);

399 
d
->
ht
[
èbÀ
].
u£d
--;

400  
DICT_OK
;

402 
¥evHe
 = 
he
;

403 
he
 = he->
√xt
;

405 i‡(!
	`di˘IsRehashög
(
d
)) ;

407  
DICT_ERR
;

408 
	}
}

410 
	$di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
) {

411  
	`di˘GíîicDñëe
(
ht
,
key
,0);

412 
	}
}

414 
	$di˘DñëeNoFªe
(
di˘
 *
ht
, c⁄° *
key
) {

415  
	`di˘GíîicDñëe
(
ht
,
key
,1);

416 
	}
}

419 
_di˘CÀ¨
(
di˘
 *
d
, 
di˘ht
 *
ht
, (
ˇŒback
)(*)) {

420 
i
;

423 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

424 
di˘E¡ry
 *
he
, *
√xtHe
;

426 i‡(
ˇŒback
 && (
i
 & 65535Ë=0Ë
	`ˇŒback
(
d
->
¥ivd©a
);

428 i‡((
he
 = 
ht
->
èbÀ
[
i
]Ë=
NULL
) ;

429 
he
) {

430 
√xtHe
 = 
he
->
√xt
;

431 
	`di˘FªeKey
(
d
, 
he
);

432 
	`di˘FªeVÆ
(
d
, 
he
);

433 
	`d‰ì
(
he
);

434 
ht
->
u£d
--;

435 
he
 = 
√xtHe
;

439 if(
ht
->
èbÀ
Ë
	`d‰ì
(ht->table);

441 
	`_di˘Re£t
(
ht
);

442  
DICT_OK
;

443 
	}
}

446 
	$di˘Rñó£
(
di˘
 *
d
)

448 
	`_di˘CÀ¨
(
d
,&d->
ht
[0],
NULL
);

449 
	`_di˘CÀ¨
(
d
,&d->
ht
[1],
NULL
);

450 
	`d‰ì
(
d
);

451 
	}
}

453 
di˘E¡ry
 *
	$di˘Föd
(
di˘
 *
d
, c⁄° *
key
)

455 
di˘E¡ry
 *
he
;

456 
h
, 
idx
, 
èbÀ
;

458 i‡(
d
->
ht
[0].
u£d
 + d->ht[1].u£d =0Ë 
NULL
;

460 
h
 = 
	`di˘HashKey
(
d
, 
key
);

461 
èbÀ
 = 0;Åable <= 1;Åable++) {

462 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

463 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

464 
he
) {

465 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key))

466  
he
;

467 
he
 = he->
√xt
;

469 i‡(!
	`di˘IsRehashög
(
d
)Ë 
NULL
;

471  
NULL
;

472 
	}
}

474 *
	$di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
) {

475 
di˘E¡ry
 *
he
;

477 
he
 = 
	`di˘Föd
(
d
,
key
);

478  
he
 ? 
	`di˘GëVÆ
(heË: 
NULL
;

479 
	}
}

487 
	$di˘Fögî¥öt
(
di˘
 *
d
) {

488 
öãgîs
[6], 
hash
 = 0;

489 
j
;

491 
öãgîs
[0] = (Ë
d
->
ht
[0].
èbÀ
;

492 
öãgîs
[1] = 
d
->
ht
[0].
size
;

493 
öãgîs
[2] = 
d
->
ht
[0].
u£d
;

494 
öãgîs
[3] = (Ë
d
->
ht
[1].
èbÀ
;

495 
öãgîs
[4] = 
d
->
ht
[1].
size
;

496 
öãgîs
[5] = 
d
->
ht
[1].
u£d
;

505 
j
 = 0; j < 6; j++) {

506 
hash
 +
öãgîs
[
j
];

508 
hash
 = (~hash) + (hash << 21);

509 
hash
 = hash ^ (hash >> 24);

510 
hash
 = (hash + (hash << 3)) + (hash << 8);

511 
hash
 = hash ^ (hash >> 14);

512 
hash
 = (hash + (hash << 2)) + (hash << 4);

513 
hash
 = hash ^ (hash >> 28);

514 
hash
 = hash + (hash << 31);

516  
hash
;

517 
	}
}

519 
di˘Iãøt‹
 *
	$di˘GëIãøt‹
(
di˘
 *
d
)

521 
di˘Iãøt‹
 *
ôî
 = 
	`dÆloc
((*iter));

523 
ôî
->
d
 = d;

524 
ôî
->
èbÀ
 = 0;

525 
ôî
->
ödex
 = -1;

526 
ôî
->
ß„
 = 0;

527 
ôî
->
íåy
 = 
NULL
;

528 
ôî
->
√xtE¡ry
 = 
NULL
;

529  
ôî
;

530 
	}
}

532 
di˘Iãøt‹
 *
	$di˘GëSa„Iãøt‹
(
di˘
 *
d
) {

533 
di˘Iãøt‹
 *
i
 = 
	`di˘GëIãøt‹
(
d
);

535 
i
->
ß„
 = 1;

536  
i
;

537 
	}
}

539 
di˘E¡ry
 *
	$di˘Next
(
di˘Iãøt‹
 *
ôî
)

542 i‡(
ôî
->
íåy
 =
NULL
) {

543 
di˘ht
 *
ht
 = &
ôî
->
d
->ht[ôî->
èbÀ
];

544 i‡(
ôî
->
ödex
 =-1 && iãr->
èbÀ
 == 0) {

545 i‡(
ôî
->
ß„
)

546 
ôî
->
d
->
ôî©‹s
++;

548 
ôî
->
fögî¥öt
 = 
	`di˘Fögî¥öt
(ôî->
d
);

550 
ôî
->
ödex
++;

551 i‡(
ôî
->
ödex
 >(Ë
ht
->
size
) {

552 i‡(
	`di˘IsRehashög
(
ôî
->
d
Ë&& iãr->
èbÀ
 == 0) {

553 
ôî
->
èbÀ
++;

554 
ôî
->
ödex
 = 0;

555 
ht
 = &
ôî
->
d
->ht[1];

560 
ôî
->
íåy
 = 
ht
->
èbÀ
[ôî->
ödex
];

562 
ôî
->
íåy
 = iãr->
√xtE¡ry
;

564 i‡(
ôî
->
íåy
) {

567 
ôî
->
√xtE¡ry
 = iãr->
íåy
->
√xt
;

568  
ôî
->
íåy
;

571  
NULL
;

572 
	}
}

574 
	$di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
)

576 i‡(!(
ôî
->
ödex
 =-1 && iãr->
èbÀ
 == 0)) {

577 i‡(
ôî
->
ß„
) {

578 
ôî
->
d
->
ôî©‹s
--;

580 
hv
 = 
	`di˘Fögî¥öt
(
ôî
->
d
);

581 
	`ASSERT
(
ôî
->
fögî¥öt
 =
hv
);

584 
	`d‰ì
(
ôî
);

585 
	}
}

589 
di˘E¡ry
 *
	$di˘GëR™domKey
(
di˘
 *
d
)

591 
di˘E¡ry
 *
he
, *
‹ighe
;

592 
h
;

593 
li°Àn
, 
li°ñe
;

595 i‡(
	`di˘Size
(
d
Ë=0Ë 
NULL
;

596 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

597 i‡(
	`di˘IsRehashög
(
d
)) {

601 
h
 = 
d
->
ªhashidx
 + (
	`øndom
(Ë% (d->
ht
[0].
size
 +

602 
d
->
ht
[1].
size
 -

603 
d
->
ªhashidx
));

604 
he
 = (
h
 >
d
->
ht
[0].
size
Ë? d->ht[1].
èbÀ
[h - d->ht[0].size] :

605 
d
->
ht
[0].
èbÀ
[
h
];

606 } 
he
 =
NULL
);

609 
h
 = 
	`øndom
(Ë& 
d
->
ht
[0].
sizemask
;

610 
he
 = 
d
->
ht
[0].
èbÀ
[
h
];

611 } 
he
 =
NULL
);

618 
li°Àn
 = 0;

619 
‹ighe
 = 
he
;

620 
he
) {

621 
he
 = he->
√xt
;

622 
li°Àn
++;

624 
li°ñe
 = 
	`øndom
(Ë% 
li°Àn
;

625 
he
 = 
‹ighe
;

626 
li°ñe
--Ë
he
 = he->
√xt
;

627  
he
;

628 
	}
}

652 
	$di˘GëSomeKeys
(
di˘
 *
d
, 
di˘E¡ry
 **
des
, 
cou¡
) {

653 
j
;

654 
èbÀs
;

655 
°‹ed
 = 0, 
maxsizemask
;

656 
max°ïs
;

658 i‡(
	`di˘Size
(
d
Ë< 
cou¡
) count = dictSize(d);

659 
max°ïs
 = 
cou¡
*10;

662 
j
 = 0; j < 
cou¡
; j++) {

663 i‡(
	`di˘IsRehashög
(
d
))

664 
	`_di˘RehashSãp
(
d
);

669 
èbÀs
 = 
	`di˘IsRehashög
(
d
) ? 2 : 1;

670 
maxsizemask
 = 
d
->
ht
[0].
sizemask
;

671 i‡(
èbÀs
 > 1 && 
maxsizemask
 < 
d
->
ht
[1].
sizemask
)

672 
maxsizemask
 = 
d
->
ht
[1].
sizemask
;

675 
i
 = 
	`øndom
(Ë& 
maxsizemask
;

676 
em±yÀn
 = 0;

677 
°‹ed
 < 
cou¡
 && 
max°ïs
--) {

678 
j
 = 0; j < 
èbÀs
; j++) {

682 i‡(
èbÀs
 =2 && 
j
 =0 && 
i
 < (Ë
d
->
ªhashidx
) {

687 i‡(
i
 >
d
->
ht
[1].
size
Ëòd->
ªhashidx
;

690 i‡(
i
 >
d
->
ht
[
j
].
size
) ;

691 
di˘E¡ry
 *
he
 = 
d
->
ht
[
j
].
èbÀ
[
i
];

695 i‡(
he
 =
NULL
) {

696 
em±yÀn
++;

697 i‡(
em±yÀn
 >5 &&Ém±yÀ¿> 
cou¡
) {

698 
i
 = 
	`øndom
(Ë& 
maxsizemask
;

699 
em±yÀn
 = 0;

702 
em±yÀn
 = 0;

703 
he
) {

706 *
des
 = 
he
;

707 
des
++;

708 
he
 = he->
√xt
;

709 
°‹ed
++;

710 i‡(
°‹ed
 =
cou¡
)  stored;

714 
i
 = (i+1Ë& 
maxsizemask
;

716  
°‹ed
;

717 
	}
}

721 
	$ªv
(
v
) {

722 
s
 = 8 * (
v
);

723 
mask
 = ~0;

724 (
s
 >>= 1) > 0) {

725 
mask
 ^(mask << 
s
);

726 
v
 = ((v >> 
s
Ë& 
mask
) | ((v << s) & ~mask);

728  
v
;

729 
	}
}

815 
	$di˘Sˇn
(
di˘
 *
d
,

816 
v
,

817 
di˘SˇnFun˘i⁄
 *
‚
,

818 *
¥ivd©a
)

820 
di˘ht
 *
t0
, *
t1
;

821 c⁄° 
di˘E¡ry
 *
de
;

822 
m0
, 
m1
;

824 i‡(
	`di˘Size
(
d
) == 0)  0;

826 i‡(!
	`di˘IsRehashög
(
d
)) {

827 
t0
 = &(
d
->
ht
[0]);

828 
m0
 = 
t0
->
sizemask
;

831 
de
 = 
t0
->
èbÀ
[
v
 & 
m0
];

832 
de
) {

833 
	`‚
(
¥ivd©a
, 
de
);

834 
de
 = de->
√xt
;

838 
t0
 = &
d
->
ht
[0];

839 
t1
 = &
d
->
ht
[1];

842 i‡(
t0
->
size
 > 
t1
->size) {

843 
t0
 = &
d
->
ht
[1];

844 
t1
 = &
d
->
ht
[0];

847 
m0
 = 
t0
->
sizemask
;

848 
m1
 = 
t1
->
sizemask
;

851 
de
 = 
t0
->
èbÀ
[
v
 & 
m0
];

852 
de
) {

853 
	`‚
(
¥ivd©a
, 
de
);

854 
de
 = de->
√xt
;

861 
de
 = 
t1
->
èbÀ
[
v
 & 
m1
];

862 
de
) {

863 
	`‚
(
¥ivd©a
, 
de
);

864 
de
 = de->
√xt
;

868 
v
 = (((v | 
m0
) + 1) & ~m0) | (v & m0);

871 } 
v
 & (
m0
 ^ 
m1
));

876 
v
 |~
m0
;

879 
v
 = 
	`ªv
(v);

880 
v
++;

881 
v
 = 
	`ªv
(v);

883  
v
;

884 
	}
}

889 
	$_di˘Ex∑ndIfNìded
(
di˘
 *
d
)

892 i‡(
	`di˘IsRehashög
(
d
)Ë 
DICT_OK
;

895 i‡(
d
->
ht
[0].
size
 =0Ë 
	`di˘Ex∑nd
(d, 
DICT_HT_INITIAL_SIZE
);

901 i‡(
d
->
ht
[0].
u£d
 >d->ht[0].
size
 &&

902 (
di˘_ˇn_ªsize
 ||

903 
d
->
ht
[0].
u£d
/d->ht[0].
size
 > 
di˘_f‹˚_ªsize_øtio
))

905  
	`di˘Ex∑nd
(
d
, d->
ht
[0].
u£d
*2);

907  
DICT_OK
;

908 
	}
}

911 
	$_di˘NextPowî
(
size
)

913 
i
 = 
DICT_HT_INITIAL_SIZE
;

915 i‡(
size
 >
LONG_MAX
)  LONG_MAX;

917 i‡(
i
 >
size
)

918  
i
;

919 
i
 *= 2;

921 
	}
}

929 
	$_di˘KeyIndex
(
di˘
 *
d
, c⁄° *
key
)

931 
h
, 
idx
, 
èbÀ
;

932 
di˘E¡ry
 *
he
;

935 i‡(
	`_di˘Ex∑ndIfNìded
(
d
Ë=
DICT_ERR
)

938 
h
 = 
	`di˘HashKey
(
d
, 
key
);

939 
èbÀ
 = 0;Åable <= 1;Åable++) {

940 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

942 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

943 
he
) {

944 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key))

946 
he
 = he->
√xt
;

948 i‡(!
	`di˘IsRehashög
(
d
)) ;

950  
idx
;

951 
	}
}

953 
di˘Em±y
(
di˘
 *
d
, (
ˇŒback
)(*)) {

954 
	`_di˘CÀ¨
(
d
,&d->
ht
[0],
ˇŒback
);

955 
	`_di˘CÀ¨
(
d
,&d->
ht
[1],
ˇŒback
);

956 
d
->
ªhashidx
 = -1;

957 
d
->
ôî©‹s
 = 0;

958 
	}
}

960 
	$di˘E«bÀResize
() {

961 
di˘_ˇn_ªsize
 = 1;

962 
	}
}

964 
	$di˘DißbÀResize
() {

965 
di˘_ˇn_ªsize
 = 0;

966 
	}
}

970 
	#DICT_STATS_VECTLEN
 50

	)

971 
size_t
 
	$_di˘GëSètsHt
(*
buf
, 
size_t
 
bufsize
, 
di˘ht
 *
ht
, 
èbÀid
) {

972 
i
, 
¶Ÿs
 = 0, 
chaöÀn
, 
maxchaöÀn
 = 0;

973 
tŸchaöÀn
 = 0;

974 
˛ve˘‹
[
DICT_STATS_VECTLEN
];

975 
size_t
 
l
 = 0;

977 i‡(
ht
->
u£d
 == 0) {

978  
	`¢¥ötf
(
buf
,
bufsize
,

983 
i
 = 0; i < 
DICT_STATS_VECTLEN
; i++Ë
˛ve˘‹
[i] = 0;

984 
i
 = 0; i < 
ht
->
size
; i++) {

985 
di˘E¡ry
 *
he
;

987 i‡(
ht
->
èbÀ
[
i
] =
NULL
) {

988 
˛ve˘‹
[0]++;

991 
¶Ÿs
++;

993 
chaöÀn
 = 0;

994 
he
 = 
ht
->
èbÀ
[
i
];

995 
he
) {

996 
chaöÀn
++;

997 
he
 = he->
√xt
;

999 
˛ve˘‹
[(
chaöÀn
 < 
DICT_STATS_VECTLEN
) ? chainlen : (DICT_STATS_VECTLEN-1)]++;

1000 i‡(
chaöÀn
 > 
maxchaöÀn
) maxchainlen = chainlen;

1001 
tŸchaöÀn
 +
chaöÀn
;

1005 
l
 +
	`¢¥ötf
(
buf
+l,
bufsize
-l,

1014 
èbÀid
, (tableid == 0) ? "main hashÅable" : "rehashingÅarget",

1015 
ht
->
size
, ht->
u£d
, 
¶Ÿs
, 
maxchaöÀn
,

1016 ()
tŸchaöÀn
/
¶Ÿs
, ()
ht
->
u£d
/slots);

1018 
i
 = 0; i < 
DICT_STATS_VECTLEN
-1; i++) {

1019 i‡(
˛ve˘‹
[
i
] == 0) ;

1020 i‡(
l
 >
bufsize
) ;

1021 
l
 +
	`¢¥ötf
(
buf
+l,
bufsize
-l,

1023 (
i
 =
DICT_STATS_VECTLEN
-1)?">= ":"",

1024 
i
, 
˛ve˘‹
[i], (()˛ve˘‹[i]/
ht
->
size
)*100);

1028 i‡(
bufsize
Ë
buf
[bufsize-1] = '\0';

1029  
	`°æí
(
buf
);

1030 
	}
}

1032 
	$di˘GëSèts
(*
buf
, 
size_t
 
bufsize
, 
di˘
 *
d
) {

1033 
size_t
 
l
;

1034 *
‹ig_buf
 = 
buf
;

1035 
size_t
 
‹ig_bufsize
 = 
bufsize
;

1037 
l
 = 
	`_di˘GëSètsHt
(
buf
,
bufsize
,&
d
->
ht
[0],0);

1038 
buf
 +
l
;

1039 
bufsize
 -
l
;

1040 i‡(
	`di˘IsRehashög
(
d
Ë&& 
bufsize
 > 0) {

1041 
	`_di˘GëSètsHt
(
buf
,
bufsize
,&
d
->
ht
[1],1);

1044 i‡(
‹ig_bufsize
Ë
‹ig_buf
[orig_bufsize-1] = '\0';

1045 
	}
}

	@src/vr_dict.h

1 #i‚de‡
_VR_DICT_H_


2 
	#_VR_DICT_H_


	)

4 
	~<°döt.h
>

6 
	#DICT_OK
 0

	)

7 
	#DICT_ERR
 1

	)

10 
	#DICT_NOTUSED
(
V
Ë((ËV)

	)

12 
	sdi˘E¡ry
 {

13 *
	mkey
;

15 *
	mvÆ
;

16 
uöt64_t
 
	mu64
;

17 
öt64_t
 
	ms64
;

18 
	md
;

19 } 
	mv
;

20 
di˘E¡ry
 *
	m√xt
;

21 } 
	tdi˘E¡ry
;

23 
	sdi˘Ty≥
 {

24 (*
	mhashFun˘i⁄
)(c⁄° *
	mkey
);

25 *(*
	mkeyDup
)(*
	m¥ivd©a
, c⁄° *
	mkey
);

26 *(*
	mvÆDup
)(*
	m¥ivd©a
, c⁄° *
	mobj
);

27 (*
	mkeyCom∑ª
)(*
	m¥ivd©a
, c⁄° *
	mkey1
, c⁄° *
	mkey2
);

28 (*
	mkeyDe°ru˘‹
)(*
	m¥ivd©a
, *
	mkey
);

29 (*
	mvÆDe°ru˘‹
)(*
	m¥ivd©a
, *
	mobj
);

30 } 
	tdi˘Ty≥
;

34 
	sdi˘ht
 {

35 
di˘E¡ry
 **
	mèbÀ
;

36 
	msize
;

37 
	msizemask
;

38 
	mu£d
;

39 } 
	tdi˘ht
;

41 
	sdi˘
 {

42 
di˘Ty≥
 *
	mty≥
;

43 *
	m¥ivd©a
;

44 
di˘ht
 
	mht
[2];

45 
	mªhashidx
;

46 
	môî©‹s
;

47 } 
	tdi˘
;

53 
	sdi˘Iãøt‹
 {

54 
di˘
 *
	md
;

55 
	mödex
;

56 
	mèbÀ
, 
	mß„
;

57 
di˘E¡ry
 *
	míåy
, *
	m√xtE¡ry
;

59 
	mfögî¥öt
;

60 } 
	tdi˘Iãøt‹
;

62 (
	tdi˘SˇnFun˘i⁄
)(*
	t¥ivd©a
, c⁄° 
	tdi˘E¡ry
 *
	tde
);

65 
	#DICT_HT_INITIAL_SIZE
 4

	)

68 
	#di˘FªeVÆ
(
d
, 
íåy
) \

69 i‡((
d
)->
ty≥
->
vÆDe°ru˘‹
) \

70 (
d
)->
ty≥
->
	`vÆDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
v
.
vÆ
)

	)

72 
	#di˘SëVÆ
(
d
, 
íåy
, 
_vÆ_
) do { \

73 i‡((
d
)->
ty≥
->
vÆDup
) \

74 
íåy
->
v
.
vÆ
 = (
d
)->
ty≥
->
	`vÆDup
((d)->
¥ivd©a
, 
_vÆ_
); \

76 
íåy
->
v
.
vÆ
 = (
_vÆ_
); \

77 
	}
} 0)

	)

79 
	#di˘SëSig√dI¡egîVÆ
(
íåy
, 
_vÆ_
) \

80 dÿ{ 
íåy
->
v
.
s64
 = 
_vÆ_
; } 0)

	)

82 
	#di˘SëUnsig√dI¡egîVÆ
(
íåy
, 
_vÆ_
) \

83 dÿ{ 
íåy
->
v
.
u64
 = 
_vÆ_
; } 0)

	)

85 
	#di˘SëDoubÀVÆ
(
íåy
, 
_vÆ_
) \

86 dÿ{ 
íåy
->
v
.
d
 = 
_vÆ_
; } 0)

	)

88 
	#di˘FªeKey
(
d
, 
íåy
) \

89 i‡((
d
)->
ty≥
->
keyDe°ru˘‹
) \

90 (
d
)->
ty≥
->
	`keyDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
key
)

	)

92 
	#di˘SëKey
(
d
, 
íåy
, 
_key_
) do { \

93 i‡((
d
)->
ty≥
->
keyDup
) \

94 
íåy
->
key
 = (
d
)->
ty≥
->
	`keyDup
((d)->
¥ivd©a
, 
_key_
); \

96 
íåy
->
key
 = (
_key_
); \

97 } 0)

	)

99 
	#di˘Com∑ªKeys
(
d
, 
key1
, 
key2
) \

100 (((
d
)->
ty≥
->
keyCom∑ª
) ? \

101 (
d
)->
ty≥
->
	`keyCom∑ª
((d)->
¥ivd©a
, 
key1
, 
key2
) : \

102 (
key1
Ë=(
key2
))

	)

104 
	#di˘HashKey
(
d
, 
key
Ë(d)->
ty≥
->
	`hashFun˘i⁄
(key)

	)

105 
	#di˘GëKey
(
he
Ë((he)->
key
)

	)

106 
	#di˘GëVÆ
(
he
Ë((he)->
v
.
vÆ
)

	)

107 
	#di˘GëSig√dI¡egîVÆ
(
he
Ë((he)->
v
.
s64
)

	)

108 
	#di˘GëUnsig√dI¡egîVÆ
(
he
Ë((he)->
v
.
u64
)

	)

109 
	#di˘GëDoubÀVÆ
(
he
Ë((he)->
v
.
d
)

	)

110 
	#di˘SlŸs
(
d
Ë((d)->
ht
[0].
size
+(d)->ht[1].size)

	)

111 
	#di˘Size
(
d
Ë((d)->
ht
[0].
u£d
+(d)->ht[1].u£d)

	)

112 
	#di˘IsRehashög
(
d
Ë((d)->
ªhashidx
 !-1)

	)

115 
di˘
 *
di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

116 
di˘Ex∑nd
(
di˘
 *
d
, 
size
);

117 
di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
);

118 
di˘E¡ry
 *
di˘AddRaw
(
di˘
 *
d
, *
key
);

119 
di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
);

120 
di˘E¡ry
 *
di˘Rïœ˚Raw
(
di˘
 *
d
, *
key
);

121 
di˘Dñëe
(
di˘
 *
d
, c⁄° *
key
);

122 
di˘DñëeNoFªe
(
di˘
 *
d
, c⁄° *
key
);

123 
di˘Rñó£
(
di˘
 *
d
);

124 
di˘E¡ry
 * 
di˘Föd
(
di˘
 *
d
, c⁄° *
key
);

125 *
di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
);

126 
di˘Resize
(
di˘
 *
d
);

127 
di˘Iãøt‹
 *
di˘GëIãøt‹
(
di˘
 *
d
);

128 
di˘Iãøt‹
 *
di˘GëSa„Iãøt‹
(
di˘
 *
d
);

129 
di˘E¡ry
 *
di˘Next
(
di˘Iãøt‹
 *
ôî
);

130 
di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
);

131 
di˘E¡ry
 *
di˘GëR™domKey
(
di˘
 *
d
);

132 
di˘GëSomeKeys
(
di˘
 *
d
, 
di˘E¡ry
 **
des
, 
cou¡
);

133 
di˘GëSèts
(*
buf
, 
size_t
 
bufsize
, 
di˘
 *
d
);

134 
di˘GíHashFun˘i⁄
(c⁄° *
key
, 
Àn
);

135 
di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

136 
di˘Em±y
(
di˘
 *
d
, (
ˇŒback
)(*));

137 
	`di˘E«bÀResize
();

138 
	`di˘DißbÀResize
();

139 
	`di˘Rehash
(
di˘
 *
d
, 
n
);

140 
	`di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
);

141 
	`di˘SëHashFun˘i⁄Sìd
(
öôvÆ
);

142 
	`di˘GëHashFun˘i⁄Sìd
();

143 
	`di˘Sˇn
(
di˘
 *
d
, 
v
, 
di˘SˇnFun˘i⁄
 *
‚
, *
¥ivd©a
);

146 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKey
;

147 
di˘Ty≥
 
di˘Ty≥HópSåögs
;

148 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKeyVÆue
;

	@src/vr_dict.h

1 #i‚de‡
_VR_DICT_H_


2 
	#_VR_DICT_H_


	)

4 
	~<°döt.h
>

6 
	#DICT_OK
 0

	)

7 
	#DICT_ERR
 1

	)

10 
	#DICT_NOTUSED
(
V
Ë((ËV)

	)

12 
	sdi˘E¡ry
 {

13 *
	mkey
;

15 *
	mvÆ
;

16 
uöt64_t
 
	mu64
;

17 
öt64_t
 
	ms64
;

18 
	md
;

19 } 
	mv
;

20 
di˘E¡ry
 *
	m√xt
;

21 } 
	tdi˘E¡ry
;

23 
	sdi˘Ty≥
 {

24 (*
	mhashFun˘i⁄
)(c⁄° *
	mkey
);

25 *(*
	mkeyDup
)(*
	m¥ivd©a
, c⁄° *
	mkey
);

26 *(*
	mvÆDup
)(*
	m¥ivd©a
, c⁄° *
	mobj
);

27 (*
	mkeyCom∑ª
)(*
	m¥ivd©a
, c⁄° *
	mkey1
, c⁄° *
	mkey2
);

28 (*
	mkeyDe°ru˘‹
)(*
	m¥ivd©a
, *
	mkey
);

29 (*
	mvÆDe°ru˘‹
)(*
	m¥ivd©a
, *
	mobj
);

30 } 
	tdi˘Ty≥
;

34 
	sdi˘ht
 {

35 
di˘E¡ry
 **
	mèbÀ
;

36 
	msize
;

37 
	msizemask
;

38 
	mu£d
;

39 } 
	tdi˘ht
;

41 
	sdi˘
 {

42 
di˘Ty≥
 *
	mty≥
;

43 *
	m¥ivd©a
;

44 
di˘ht
 
	mht
[2];

45 
	mªhashidx
;

46 
	môî©‹s
;

47 } 
	tdi˘
;

53 
	sdi˘Iãøt‹
 {

54 
di˘
 *
	md
;

55 
	mödex
;

56 
	mèbÀ
, 
	mß„
;

57 
di˘E¡ry
 *
	míåy
, *
	m√xtE¡ry
;

59 
	mfögî¥öt
;

60 } 
	tdi˘Iãøt‹
;

62 (
	tdi˘SˇnFun˘i⁄
)(*
	t¥ivd©a
, c⁄° 
	tdi˘E¡ry
 *
	tde
);

65 
	#DICT_HT_INITIAL_SIZE
 4

	)

68 
	#di˘FªeVÆ
(
d
, 
íåy
) \

69 i‡((
d
)->
ty≥
->
vÆDe°ru˘‹
) \

70 (
d
)->
ty≥
->
	`vÆDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
v
.
vÆ
)

	)

72 
	#di˘SëVÆ
(
d
, 
íåy
, 
_vÆ_
) do { \

73 i‡((
d
)->
ty≥
->
vÆDup
) \

74 
íåy
->
v
.
vÆ
 = (
d
)->
ty≥
->
	`vÆDup
((d)->
¥ivd©a
, 
_vÆ_
); \

76 
íåy
->
v
.
vÆ
 = (
_vÆ_
); \

77 
	}
} 0)

	)

79 
	#di˘SëSig√dI¡egîVÆ
(
íåy
, 
_vÆ_
) \

80 dÿ{ 
íåy
->
v
.
s64
 = 
_vÆ_
; } 0)

	)

82 
	#di˘SëUnsig√dI¡egîVÆ
(
íåy
, 
_vÆ_
) \

83 dÿ{ 
íåy
->
v
.
u64
 = 
_vÆ_
; } 0)

	)

85 
	#di˘SëDoubÀVÆ
(
íåy
, 
_vÆ_
) \

86 dÿ{ 
íåy
->
v
.
d
 = 
_vÆ_
; } 0)

	)

88 
	#di˘FªeKey
(
d
, 
íåy
) \

89 i‡((
d
)->
ty≥
->
keyDe°ru˘‹
) \

90 (
d
)->
ty≥
->
	`keyDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
key
)

	)

92 
	#di˘SëKey
(
d
, 
íåy
, 
_key_
) do { \

93 i‡((
d
)->
ty≥
->
keyDup
) \

94 
íåy
->
key
 = (
d
)->
ty≥
->
	`keyDup
((d)->
¥ivd©a
, 
_key_
); \

96 
íåy
->
key
 = (
_key_
); \

97 } 0)

	)

99 
	#di˘Com∑ªKeys
(
d
, 
key1
, 
key2
) \

100 (((
d
)->
ty≥
->
keyCom∑ª
) ? \

101 (
d
)->
ty≥
->
	`keyCom∑ª
((d)->
¥ivd©a
, 
key1
, 
key2
) : \

102 (
key1
Ë=(
key2
))

	)

104 
	#di˘HashKey
(
d
, 
key
Ë(d)->
ty≥
->
	`hashFun˘i⁄
(key)

	)

105 
	#di˘GëKey
(
he
Ë((he)->
key
)

	)

106 
	#di˘GëVÆ
(
he
Ë((he)->
v
.
vÆ
)

	)

107 
	#di˘GëSig√dI¡egîVÆ
(
he
Ë((he)->
v
.
s64
)

	)

108 
	#di˘GëUnsig√dI¡egîVÆ
(
he
Ë((he)->
v
.
u64
)

	)

109 
	#di˘GëDoubÀVÆ
(
he
Ë((he)->
v
.
d
)

	)

110 
	#di˘SlŸs
(
d
Ë((d)->
ht
[0].
size
+(d)->ht[1].size)

	)

111 
	#di˘Size
(
d
Ë((d)->
ht
[0].
u£d
+(d)->ht[1].u£d)

	)

112 
	#di˘IsRehashög
(
d
Ë((d)->
ªhashidx
 !-1)

	)

115 
di˘
 *
di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

116 
di˘Ex∑nd
(
di˘
 *
d
, 
size
);

117 
di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
);

118 
di˘E¡ry
 *
di˘AddRaw
(
di˘
 *
d
, *
key
);

119 
di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
);

120 
di˘E¡ry
 *
di˘Rïœ˚Raw
(
di˘
 *
d
, *
key
);

121 
di˘Dñëe
(
di˘
 *
d
, c⁄° *
key
);

122 
di˘DñëeNoFªe
(
di˘
 *
d
, c⁄° *
key
);

123 
di˘Rñó£
(
di˘
 *
d
);

124 
di˘E¡ry
 * 
di˘Föd
(
di˘
 *
d
, c⁄° *
key
);

125 *
di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
);

126 
di˘Resize
(
di˘
 *
d
);

127 
di˘Iãøt‹
 *
di˘GëIãøt‹
(
di˘
 *
d
);

128 
di˘Iãøt‹
 *
di˘GëSa„Iãøt‹
(
di˘
 *
d
);

129 
di˘E¡ry
 *
di˘Next
(
di˘Iãøt‹
 *
ôî
);

130 
di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
);

131 
di˘E¡ry
 *
di˘GëR™domKey
(
di˘
 *
d
);

132 
di˘GëSomeKeys
(
di˘
 *
d
, 
di˘E¡ry
 **
des
, 
cou¡
);

133 
di˘GëSèts
(*
buf
, 
size_t
 
bufsize
, 
di˘
 *
d
);

134 
di˘GíHashFun˘i⁄
(c⁄° *
key
, 
Àn
);

135 
di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

136 
di˘Em±y
(
di˘
 *
d
, (
ˇŒback
)(*));

137 
	`di˘E«bÀResize
();

138 
	`di˘DißbÀResize
();

139 
	`di˘Rehash
(
di˘
 *
d
, 
n
);

140 
	`di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
);

141 
	`di˘SëHashFun˘i⁄Sìd
(
öôvÆ
);

142 
	`di˘GëHashFun˘i⁄Sìd
();

143 
	`di˘Sˇn
(
di˘
 *
d
, 
v
, 
di˘SˇnFun˘i⁄
 *
‚
, *
¥ivd©a
);

146 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKey
;

147 
di˘Ty≥
 
di˘Ty≥HópSåögs
;

148 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKeyVÆue
;

	@src/vr_eventloop.c

1 
	~<vr_c‹e.h
>

5 
	$vr_evíéo›_öô
(
vr_evíéo›
 *
vñ
, 
fûñimô
)

7 
r°©us_t
 
°©us
;

8 
max˛õ¡s
, 
thªads_num
;

10 i‡(
vñ
 =
NULL
 || 
fûñimô
 <= 0) {

11  
VR_ERROR
;

14 
	`vr_thªad_öô
(&
vñ
->
thªad
);

16 
vñ
->
ñ
 = 
NULL
;

17 
vñ
->
hz
 = 10;

18 
vñ
->
¸⁄lo›s
 = 0;

19 
vñ
->
unixtime
 = 
	`time
(
NULL
);

20 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

21 
vñ
->
Ãu˛ock
 = 
	`gëLRUClock
();

22 
vñ
->
cb
 = 
NULL
;

23 
vñ
->
√xt_˛õ¡_id
 = 1;

24 
vñ
->
cuºít_˛õ¡
 = 
NULL
;

25 
vñ
->
˛õ¡s
 = 
NULL
;

26 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
NULL
;

27 
vñ
->
˛õ¡s_to_˛o£
 = 
NULL
;

28 
vñ
->
˛õ¡s_∑u£d
 = 0;

29 
vñ
->
˛õ¡s_∑u£_íd_time
 = 0;

30 
vñ
->
°©s
 = 
NULL
;

31 
vñ
->
ªsidít_£t_size
 = 0;

32 
vñ
->
dúty
 = 0;

33 
vñ
->
bp›_blocked_˛õ¡s
 = 0;

34 
vñ
->
unblocked_˛õ¡s
 = 
NULL
;

35 
vñ
->
˛õ¡s_waôög_acks
 = 
NULL
;

36 
vñ
->
pubsub_ch™√ls
 = 
NULL
;

37 
vñ
->
pubsub_∑âîns
 = 
NULL
;

38 
vñ
->
nŸify_key•a˚_evíts
 = 0;

39 
vñ
->
c°abÀ
 = 
NULL
;

41 
vñ
->
ñ
 = 
	`´Cª©eEvítLo›
(
fûñimô
);

42 i‡(
vñ
->
ñ
 =
NULL
) {

43 
	`log_îr‹
("createÉventloop failed.");

44  
VR_ERROR
;

47 
vñ
->
cb
 = 
	`dÆloc
((
c⁄n_ba£
));

48 i‡(
vñ
->
cb
 =
NULL
) {

49 
	`log_îr‹
("create conn_base failed: out of memory");

50  
VR_ENOMEM
;

52 
°©us
 = 
	`c⁄n_öô
(
vñ
->
cb
);

53 i‡(
°©us
 !
VR_OK
) {

54 
	`log_îr‹
("init conn_base failed");

55  
VR_ERROR
;

58 
vñ
->
˛õ¡s
 = 
	`dli°Cª©e
();

59 i‡(
vñ
->
˛õ¡s
 =
NULL
) {

60 
	`log_îr‹
("createÜist failed: out of memory");

61  
VR_ENOMEM
;

64 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
	`dli°Cª©e
();

65 i‡(
vñ
->
˛õ¡s_≥ndög_wrôe
 =
NULL
) {

66 
	`log_îr‹
("createÜist failed: out of memory");

67  
VR_ENOMEM
;

70 
vñ
->
˛õ¡s_to_˛o£
 = 
	`dli°Cª©e
();

71 i‡(
vñ
->
˛õ¡s_to_˛o£
 =
NULL
) {

72 
	`log_îr‹
("createÜist failed: out of memory");

73  
VR_ENOMEM
;

76 
vñ
->
unblocked_˛õ¡s
 = 
	`dli°Cª©e
();

77 i‡(
vñ
->
unblocked_˛õ¡s
 =
NULL
) {

78 
	`log_îr‹
("createÜist failed: out of memory");

79  
VR_ENOMEM
;

82 
vñ
->
°©s
 = 
	`dÆloc
((
vr_°©s
));

83 i‡(
vñ
->
°©s
 =
NULL
) {

84 
	`log_îr‹
("out of memory");

85  
VR_ENOMEM
;

88 
	`vr_°©s_öô
(
vñ
->
°©s
);

90 
	`c⁄f_ˇche_öô
(&
vñ
->
cc
);

92  
VR_OK
;

93 
	}
}

96 
	$vr_evíéo›_deöô
(
vr_evíéo›
 *
vñ
)

98 i‡(
vñ
 =
NULL
) {

102 
	`vr_thªad_deöô
(&
vñ
->
thªad
);

104 i‡(
vñ
->
ñ
 !
NULL
) {

105 
	`´DñëeEvítLo›
(
vñ
->
ñ
);

106 
vñ
->
ñ
 = 
NULL
;

109 i‡(
vñ
->
˛õ¡s
 !
NULL
) {

110 
˛õ¡
 *
c
;

111 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s
)) {

112 
	`‰ìClõ¡
(
c
);

114 
	`dli°Rñó£
(
vñ
->
˛õ¡s
);

115 
vñ
->
˛õ¡s
 = 
NULL
;

118 i‡(
vñ
->
˛õ¡s_≥ndög_wrôe
 !
NULL
) {

119 
˛õ¡
 *
c
;

120 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s_≥ndög_wrôe
)) {}

121 
	`dli°Rñó£
(
vñ
->
˛õ¡s_≥ndög_wrôe
);

122 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
NULL
;

125 i‡(
vñ
->
˛õ¡s_to_˛o£
 !
NULL
) {

126 
˛õ¡
 *
c
;

127 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s_to_˛o£
)) {

128 
	`‰ìClõ¡
(
c
);

130 
	`dli°Rñó£
(
vñ
->
˛õ¡s_to_˛o£
);

131 
vñ
->
˛õ¡s_to_˛o£
 = 
NULL
;

134 i‡(
vñ
->
unblocked_˛õ¡s
 !
NULL
) {

135 
˛õ¡
 *
c
;

136 
c
 = 
	`dli°P›
(
vñ
->
unblocked_˛õ¡s
)) {}

137 
	`dli°Rñó£
(
vñ
->
unblocked_˛õ¡s
);

138 
vñ
->
unblocked_˛õ¡s
 = 
NULL
;

141 i‡(
vñ
->
cb
 !
NULL
) {

142 
	`c⁄n_deöô
(
vñ
->
cb
);

143 
	`d‰ì
(
vñ
->
cb
);

144 
vñ
->
cb
 = 
NULL
;

147 i‡(
vñ
->
°©s
 !
NULL
) {

148 
	`vr_°©s_deöô
(
vñ
->
°©s
);

149 
	`d‰ì
(
vñ
->
°©s
);

150 
vñ
->
°©s
 = 
NULL
;

153 i‡(
vñ
->
c°abÀ
 !
NULL
) {

154 
	`comm™dSètsTabÀDe°roy
(
vñ
->
c°abÀ
);

155 
vñ
->
c°abÀ
 = 
NULL
;

158 
	`c⁄f_ˇche_deöô
(&
vñ
->
cc
);

159 
	}
}

	@src/vr_eventloop.c

1 
	~<vr_c‹e.h
>

5 
	$vr_evíéo›_öô
(
vr_evíéo›
 *
vñ
, 
fûñimô
)

7 
r°©us_t
 
°©us
;

8 
max˛õ¡s
, 
thªads_num
;

10 i‡(
vñ
 =
NULL
 || 
fûñimô
 <= 0) {

11  
VR_ERROR
;

14 
	`vr_thªad_öô
(&
vñ
->
thªad
);

16 
vñ
->
ñ
 = 
NULL
;

17 
vñ
->
hz
 = 10;

18 
vñ
->
¸⁄lo›s
 = 0;

19 
vñ
->
unixtime
 = 
	`time
(
NULL
);

20 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

21 
vñ
->
Ãu˛ock
 = 
	`gëLRUClock
();

22 
vñ
->
cb
 = 
NULL
;

23 
vñ
->
√xt_˛õ¡_id
 = 1;

24 
vñ
->
cuºít_˛õ¡
 = 
NULL
;

25 
vñ
->
˛õ¡s
 = 
NULL
;

26 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
NULL
;

27 
vñ
->
˛õ¡s_to_˛o£
 = 
NULL
;

28 
vñ
->
˛õ¡s_∑u£d
 = 0;

29 
vñ
->
˛õ¡s_∑u£_íd_time
 = 0;

30 
vñ
->
°©s
 = 
NULL
;

31 
vñ
->
ªsidít_£t_size
 = 0;

32 
vñ
->
dúty
 = 0;

33 
vñ
->
bp›_blocked_˛õ¡s
 = 0;

34 
vñ
->
unblocked_˛õ¡s
 = 
NULL
;

35 
vñ
->
˛õ¡s_waôög_acks
 = 
NULL
;

36 
vñ
->
pubsub_ch™√ls
 = 
NULL
;

37 
vñ
->
pubsub_∑âîns
 = 
NULL
;

38 
vñ
->
nŸify_key•a˚_evíts
 = 0;

39 
vñ
->
c°abÀ
 = 
NULL
;

41 
vñ
->
ñ
 = 
	`´Cª©eEvítLo›
(
fûñimô
);

42 i‡(
vñ
->
ñ
 =
NULL
) {

43 
	`log_îr‹
("createÉventloop failed.");

44  
VR_ERROR
;

47 
vñ
->
cb
 = 
	`dÆloc
((
c⁄n_ba£
));

48 i‡(
vñ
->
cb
 =
NULL
) {

49 
	`log_îr‹
("create conn_base failed: out of memory");

50  
VR_ENOMEM
;

52 
°©us
 = 
	`c⁄n_öô
(
vñ
->
cb
);

53 i‡(
°©us
 !
VR_OK
) {

54 
	`log_îr‹
("init conn_base failed");

55  
VR_ERROR
;

58 
vñ
->
˛õ¡s
 = 
	`dli°Cª©e
();

59 i‡(
vñ
->
˛õ¡s
 =
NULL
) {

60 
	`log_îr‹
("createÜist failed: out of memory");

61  
VR_ENOMEM
;

64 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
	`dli°Cª©e
();

65 i‡(
vñ
->
˛õ¡s_≥ndög_wrôe
 =
NULL
) {

66 
	`log_îr‹
("createÜist failed: out of memory");

67  
VR_ENOMEM
;

70 
vñ
->
˛õ¡s_to_˛o£
 = 
	`dli°Cª©e
();

71 i‡(
vñ
->
˛õ¡s_to_˛o£
 =
NULL
) {

72 
	`log_îr‹
("createÜist failed: out of memory");

73  
VR_ENOMEM
;

76 
vñ
->
unblocked_˛õ¡s
 = 
	`dli°Cª©e
();

77 i‡(
vñ
->
unblocked_˛õ¡s
 =
NULL
) {

78 
	`log_îr‹
("createÜist failed: out of memory");

79  
VR_ENOMEM
;

82 
vñ
->
°©s
 = 
	`dÆloc
((
vr_°©s
));

83 i‡(
vñ
->
°©s
 =
NULL
) {

84 
	`log_îr‹
("out of memory");

85  
VR_ENOMEM
;

88 
	`vr_°©s_öô
(
vñ
->
°©s
);

90 
	`c⁄f_ˇche_öô
(&
vñ
->
cc
);

92  
VR_OK
;

93 
	}
}

96 
	$vr_evíéo›_deöô
(
vr_evíéo›
 *
vñ
)

98 i‡(
vñ
 =
NULL
) {

102 
	`vr_thªad_deöô
(&
vñ
->
thªad
);

104 i‡(
vñ
->
ñ
 !
NULL
) {

105 
	`´DñëeEvítLo›
(
vñ
->
ñ
);

106 
vñ
->
ñ
 = 
NULL
;

109 i‡(
vñ
->
˛õ¡s
 !
NULL
) {

110 
˛õ¡
 *
c
;

111 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s
)) {

112 
	`‰ìClõ¡
(
c
);

114 
	`dli°Rñó£
(
vñ
->
˛õ¡s
);

115 
vñ
->
˛õ¡s
 = 
NULL
;

118 i‡(
vñ
->
˛õ¡s_≥ndög_wrôe
 !
NULL
) {

119 
˛õ¡
 *
c
;

120 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s_≥ndög_wrôe
)) {}

121 
	`dli°Rñó£
(
vñ
->
˛õ¡s_≥ndög_wrôe
);

122 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
NULL
;

125 i‡(
vñ
->
˛õ¡s_to_˛o£
 !
NULL
) {

126 
˛õ¡
 *
c
;

127 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s_to_˛o£
)) {

128 
	`‰ìClõ¡
(
c
);

130 
	`dli°Rñó£
(
vñ
->
˛õ¡s_to_˛o£
);

131 
vñ
->
˛õ¡s_to_˛o£
 = 
NULL
;

134 i‡(
vñ
->
unblocked_˛õ¡s
 !
NULL
) {

135 
˛õ¡
 *
c
;

136 
c
 = 
	`dli°P›
(
vñ
->
unblocked_˛õ¡s
)) {}

137 
	`dli°Rñó£
(
vñ
->
unblocked_˛õ¡s
);

138 
vñ
->
unblocked_˛õ¡s
 = 
NULL
;

141 i‡(
vñ
->
cb
 !
NULL
) {

142 
	`c⁄n_deöô
(
vñ
->
cb
);

143 
	`d‰ì
(
vñ
->
cb
);

144 
vñ
->
cb
 = 
NULL
;

147 i‡(
vñ
->
°©s
 !
NULL
) {

148 
	`vr_°©s_deöô
(
vñ
->
°©s
);

149 
	`d‰ì
(
vñ
->
°©s
);

150 
vñ
->
°©s
 = 
NULL
;

153 i‡(
vñ
->
c°abÀ
 !
NULL
) {

154 
	`comm™dSètsTabÀDe°roy
(
vñ
->
c°abÀ
);

155 
vñ
->
c°abÀ
 = 
NULL
;

158 
	`c⁄f_ˇche_deöô
(&
vñ
->
cc
);

159 
	}
}

	@src/vr_eventloop.h

1 #i‚de‡
_VR_EVENTLOOP_H_


2 
	#_VR_EVENTLOOP_H_


	)

4 
	svr_evíéo›
 {

6 
vr_thªad
 
	mthªad
;

9 
´EvítLo›
 *
	mñ
;

11 
	mhz
;

13 
	m¸⁄lo›s
;

18 
time_t
 
	munixtime
;

20 
	mm°ime
;

23 
	mÃu˛ock
:
LRU_BITS
;

26 
c⁄n_ba£
 *
	mcb
;

29 
uöt64_t
 
	m√xt_˛õ¡_id
;

31 
˛õ¡
 *
	mcuºít_˛õ¡
;

33 
dli°
 *
	m˛õ¡s
;

36 
dli°
 *
	m˛õ¡s_≥ndög_wrôe
;

38 
dli°
 *
	m˛õ¡s_to_˛o£
;

41 
	m˛õ¡s_∑u£d
;

43 
	m˛õ¡s_∑u£_íd_time
;

46 
vr_°©s
 *
	m°©s
;

48 
size_t
 
	mªsidít_£t_size
;

51 
	mdúty
;

54 
	mbp›_blocked_˛õ¡s
;

56 
dli°
 *
	munblocked_˛õ¡s
;

60 
dli°
 *
	m˛õ¡s_waôög_acks
;

64 
di˘
 *
	mpubsub_ch™√ls
;

66 
dli°
 *
	mpubsub_∑âîns
;

68 
	mnŸify_key•a˚_evíts
;

72 
c⁄f_ˇche
 
	mcc
;

75 
d¨øy
 *
	mc°abÀ
;

76 }
	tvr_evíéo›
;

78 
vr_evíéo›_öô
(
vr_evíéo›
 *
vñ
, 
fûñimô
);

79 
vr_evíéo›_deöô
(
vr_evíéo›
 *
vñ
);

	@src/vr_eventloop.h

1 #i‚de‡
_VR_EVENTLOOP_H_


2 
	#_VR_EVENTLOOP_H_


	)

4 
	svr_evíéo›
 {

6 
vr_thªad
 
	mthªad
;

9 
´EvítLo›
 *
	mñ
;

11 
	mhz
;

13 
	m¸⁄lo›s
;

18 
time_t
 
	munixtime
;

20 
	mm°ime
;

23 
	mÃu˛ock
:
LRU_BITS
;

26 
c⁄n_ba£
 *
	mcb
;

29 
uöt64_t
 
	m√xt_˛õ¡_id
;

31 
˛õ¡
 *
	mcuºít_˛õ¡
;

33 
dli°
 *
	m˛õ¡s
;

36 
dli°
 *
	m˛õ¡s_≥ndög_wrôe
;

38 
dli°
 *
	m˛õ¡s_to_˛o£
;

41 
	m˛õ¡s_∑u£d
;

43 
	m˛õ¡s_∑u£_íd_time
;

46 
vr_°©s
 *
	m°©s
;

48 
size_t
 
	mªsidít_£t_size
;

51 
	mdúty
;

54 
	mbp›_blocked_˛õ¡s
;

56 
dli°
 *
	munblocked_˛õ¡s
;

60 
dli°
 *
	m˛õ¡s_waôög_acks
;

64 
di˘
 *
	mpubsub_ch™√ls
;

66 
dli°
 *
	mpubsub_∑âîns
;

68 
	mnŸify_key•a˚_evíts
;

72 
c⁄f_ˇche
 
	mcc
;

75 
d¨øy
 *
	mc°abÀ
;

76 }
	tvr_evíéo›
;

78 
vr_evíéo›_öô
(
vr_evíéo›
 *
vñ
, 
fûñimô
);

79 
vr_evíéo›_deöô
(
vr_evíéo›
 *
vñ
);

	@src/vr_hyperloglog.c

1 
	~<vr_c‹e.h
>

3 
	~<°döt.h
>

4 
	~<m©h.h
>

151 
	shŒhdr
 {

152 
	mmagic
[4];

153 
uöt8_t
 
	mícodög
;

154 
uöt8_t
 
	mnŸu£d
[3];

155 
uöt8_t
 
	mˇrd
[8];

156 
uöt8_t
 
	mªgi°îs
[];

160 
	#HLL_INVALIDATE_CACHE
(
hdr
Ë(hdr)->
ˇrd
[7] |(1<<7)

	)

161 
	#HLL_VALID_CACHE
(
hdr
Ë(((hdr)->
ˇrd
[7] & (1<<7)Ë=0)

	)

163 
	#HLL_P
 14

	)

164 
	#HLL_REGISTERS
 (1<<
HLL_P
Ë

	)

165 
	#HLL_P_MASK
 (
HLL_REGISTERS
-1Ë

	)

166 
	#HLL_BITS
 6

	)

167 
	#HLL_REGISTER_MAX
 ((1<<
HLL_BITS
)-1)

	)

168 
	#HLL_HDR_SIZE
 (
hŒhdr
)

	)

169 
	#HLL_DENSE_SIZE
 (
HLL_HDR_SIZE
+((
HLL_REGISTERS
*
HLL_BITS
+7)/8))

	)

170 
	#HLL_DENSE
 0

	)

171 
	#HLL_SPARSE
 1

	)

172 
	#HLL_RAW
 255

	)

173 
	#HLL_MAX_ENCODING
 1

	)

175 *
	gövÆid_hŒ_îr
 = "-INVALIDOBJ Corrupted HLL object detected\r\n";

306 
	#HLL_DENSE_GET_REGISTER
(
èrgë
,
p
,
ªgnum
) do { \

307 
uöt8_t
 *
_p
 = (uöt8_t*Ë
p
; \

308 
_byã
 = 
ªgnum
*
HLL_BITS
/8; \

309 
_fb
 = 
ªgnum
*
HLL_BITS
&7; \

310 
_fb8
 = 8 - 
_fb
; \

311 
b0
 = 
_p
[
_byã
]; \

312 
b1
 = 
_p
[
_byã
+1]; \

313 
èrgë
 = ((
b0
 >> 
_fb
Ë| (
b1
 << 
_fb8
)Ë& 
HLL_REGISTER_MAX
; \

314 } 0)

	)

318 
	#HLL_DENSE_SET_REGISTER
(
p
,
ªgnum
,
vÆ
) do { \

319 
uöt8_t
 *
_p
 = (uöt8_t*Ë
p
; \

320 
_byã
 = 
ªgnum
*
HLL_BITS
/8; \

321 
_fb
 = 
ªgnum
*
HLL_BITS
&7; \

322 
_fb8
 = 8 - 
_fb
; \

323 
_v
 = 
vÆ
; \

324 
_p
[
_byã
] &~(
HLL_REGISTER_MAX
 << 
_fb
); \

325 
_p
[
_byã
] |
_v
 << 
_fb
; \

326 
_p
[
_byã
+1] &~(
HLL_REGISTER_MAX
 >> 
_fb8
); \

327 
_p
[
_byã
+1] |
_v
 >> 
_fb8
; \

328 } 0)

	)

332 
	#HLL_SPARSE_XZERO_BIT
 0x40

	)

333 
	#HLL_SPARSE_VAL_BIT
 0x80

	)

334 
	#HLL_SPARSE_IS_ZERO
(
p
Ë(((*’)Ë& 0xc0Ë=0Ë

	)

335 
	#HLL_SPARSE_IS_XZERO
(
p
Ë(((*’)Ë& 0xc0Ë=
HLL_SPARSE_XZERO_BIT
)

	)

336 
	#HLL_SPARSE_IS_VAL
(
p
Ë((*’)Ë& 
HLL_SPARSE_VAL_BIT
)

	)

337 
	#HLL_SPARSE_ZERO_LEN
(
p
Ë(((*’)Ë& 0x3f)+1)

	)

338 
	#HLL_SPARSE_XZERO_LEN
(
p
Ë(((((*’)Ë& 0x3fË<< 8Ë| (*(’)+1)))+1)

	)

339 
	#HLL_SPARSE_VAL_VALUE
(
p
Ë((((*’)Ë>> 2Ë& 0x1f)+1)

	)

340 
	#HLL_SPARSE_VAL_LEN
(
p
Ë(((*’)Ë& 0x3)+1)

	)

341 
	#HLL_SPARSE_VAL_MAX_VALUE
 32

	)

342 
	#HLL_SPARSE_VAL_MAX_LEN
 4

	)

343 
	#HLL_SPARSE_ZERO_MAX_LEN
 64

	)

344 
	#HLL_SPARSE_XZERO_MAX_LEN
 16384

	)

345 
	#HLL_SPARSE_VAL_SET
(
p
,
vÆ
,
Àn
) do { \

346 *(
p
Ë(((
vÆ
)-1)<<2|((
Àn
)-1))|
HLL_SPARSE_VAL_BIT
; \

347 } 0)

	)

348 
	#HLL_SPARSE_ZERO_SET
(
p
,
Àn
) do { \

349 *(
p
Ë(
Àn
)-1; \

350 } 0)

	)

351 
	#HLL_SPARSE_XZERO_SET
(
p
,
Àn
) do { \

352 
_l
 = (
Àn
)-1; \

353 *(
p
Ë(
_l
>>8Ë| 
HLL_SPARSE_XZERO_BIT
; \

354 *((
p
)+1Ë(
_l
&0xff); \

355 } 0)

	)

362 
uöt64_t
 
	$MurmurHash64A
 (c⁄° * 
key
, 
Àn
, 
£ed
) {

363 c⁄° 
uöt64_t
 
m
 = 0xc6a4a7935bd1e995;

364 c⁄° 
r
 = 47;

365 
uöt64_t
 
h
 = 
£ed
 ^ (
Àn
 * 
m
);

366 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*)
key
;

367 c⁄° 
uöt8_t
 *
íd
 = 
d©a
 + (
Àn
-(len&7));

369 
d©a
 !
íd
) {

370 
uöt64_t
 
k
;

372 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

373 
k
 = *((
uöt64_t
*)
d©a
);

375 
k
 = (
uöt64_t
Ë
d©a
[0];

376 
k
 |(
uöt64_t
Ë
d©a
[1] << 8;

377 
k
 |(
uöt64_t
Ë
d©a
[2] << 16;

378 
k
 |(
uöt64_t
Ë
d©a
[3] << 24;

379 
k
 |(
uöt64_t
Ë
d©a
[4] << 32;

380 
k
 |(
uöt64_t
Ë
d©a
[5] << 40;

381 
k
 |(
uöt64_t
Ë
d©a
[6] << 48;

382 
k
 |(
uöt64_t
Ë
d©a
[7] << 56;

385 
k
 *
m
;

386 
k
 ^k >> 
r
;

387 
k
 *
m
;

388 
h
 ^
k
;

389 
h
 *
m
;

390 
d©a
 += 8;

393 
Àn
 & 7) {

394 7: 
h
 ^(
uöt64_t
)
d©a
[6] << 48;

395 6: 
h
 ^(
uöt64_t
)
d©a
[5] << 40;

396 5: 
h
 ^(
uöt64_t
)
d©a
[4] << 32;

397 4: 
h
 ^(
uöt64_t
)
d©a
[3] << 24;

398 3: 
h
 ^(
uöt64_t
)
d©a
[2] << 16;

399 2: 
h
 ^(
uöt64_t
)
d©a
[1] << 8;

400 1: 
h
 ^(
uöt64_t
)
d©a
[0];

401 
h
 *
m
;

404 
h
 ^h >> 
r
;

405 
h
 *
m
;

406 
h
 ^h >> 
r
;

407  
h
;

408 
	}
}

413 
	$hŒP©Lí
(*
ñe
, 
size_t
 
ñesize
, *
ªgp
) {

414 
uöt64_t
 
hash
, 
bô
, 
ödex
;

415 
cou¡
;

428 
hash
 = 
	`MurmurHash64A
(
ñe
,
ñesize
,0xadc83b19ULL);

429 
ödex
 = 
hash
 & 
HLL_P_MASK
;

430 
hash
 |((
uöt64_t
)1<<63);

431 
bô
 = 
HLL_REGISTERS
;

432 
cou¡
 = 1;

433 (
hash
 & 
bô
) == 0) {

434 
cou¡
++;

435 
bô
 <<= 1;

437 *
ªgp
 = (Ë
ödex
;

438  
cou¡
;

439 
	}
}

454 
	$hŒDí£Add
(
uöt8_t
 *
ªgi°îs
, *
ñe
, 
size_t
 
ñesize
) {

455 
uöt8_t
 
ﬁdcou¡
, 
cou¡
;

456 
ödex
;

459 
cou¡
 = 
	`hŒP©Lí
(
ñe
,
ñesize
,&
ödex
);

460 
	`HLL_DENSE_GET_REGISTER
(
ﬁdcou¡
,
ªgi°îs
,
ödex
);

461 i‡(
cou¡
 > 
ﬁdcou¡
) {

462 
	`HLL_DENSE_SET_REGISTER
(
ªgi°îs
,
ödex
,
cou¡
);

467 
	}
}

473 
	$hŒDí£Sum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
) {

474 
E
 = 0;

475 
j
, 
ez
 = 0;

480 i‡(
HLL_REGISTERS
 =16384 && 
HLL_BITS
 == 6) {

481 
uöt8_t
 *
r
 = 
ªgi°îs
;

482 
r0
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
, 
r9
,

483 
r10
, 
r11
, 
r12
, 
r13
, 
r14
, 
r15
;

484 
j
 = 0; j < 1024; j++) {

486 
r0
 = 
r
[0] & 63; i‡‘0 =0Ë
ez
++;

487 
r1
 = (
r
[0] >> 6 |Ñ[1] << 2Ë& 63; i‡‘1 =0Ë
ez
++;

488 
r2
 = (
r
[1] >> 4 |Ñ[2] << 4Ë& 63; i‡‘2 =0Ë
ez
++;

489 
r3
 = (
r
[2] >> 2Ë& 63; i‡‘3 =0Ë
ez
++;

490 
r4
 = 
r
[3] & 63; i‡‘4 =0Ë
ez
++;

491 
r5
 = (
r
[3] >> 6 |Ñ[4] << 2Ë& 63; i‡‘5 =0Ë
ez
++;

492 
r6
 = (
r
[4] >> 4 |Ñ[5] << 4Ë& 63; i‡‘6 =0Ë
ez
++;

493 
r7
 = (
r
[5] >> 2Ë& 63; i‡‘7 =0Ë
ez
++;

494 
r8
 = 
r
[6] & 63; i‡‘8 =0Ë
ez
++;

495 
r9
 = (
r
[6] >> 6 |Ñ[7] << 2Ë& 63; i‡‘9 =0Ë
ez
++;

496 
r10
 = (
r
[7] >> 4 |Ñ[8] << 4Ë& 63; i‡‘10 =0Ë
ez
++;

497 
r11
 = (
r
[8] >> 2Ë& 63; i‡‘11 =0Ë
ez
++;

498 
r12
 = 
r
[9] & 63; i‡‘12 =0Ë
ez
++;

499 
r13
 = (
r
[9] >> 6 |Ñ[10] << 2Ë& 63; i‡‘13 =0Ë
ez
++;

500 
r14
 = (
r
[10] >> 4 |Ñ[11] << 4Ë& 63; i‡‘14 =0Ë
ez
++;

501 
r15
 = (
r
[11] >> 2Ë& 63; i‡‘15 =0Ë
ez
++;

506 
E
 +(
PE
[
r0
] + PE[
r1
]Ë+ (PE[
r2
] + PE[
r3
]Ë+ (PE[
r4
] + PE[
r5
]) +

507 (
PE
[
r6
] + PE[
r7
]Ë+ (PE[
r8
] + PE[
r9
]Ë+ (PE[
r10
] + PE[
r11
]) +

508 (
PE
[
r12
] + PE[
r13
]Ë+ (PE[
r14
] + PE[
r15
]);

509 
r
 += 12;

512 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

513 
ªg
;

515 
	`HLL_DENSE_GET_REGISTER
(
ªg
,
ªgi°îs
,
j
);

516 i‡(
ªg
 == 0) {

517 
ez
++;

520 
E
 +
PE
[
ªg
];

523 
E
 +
ez
;

525 *
ezp
 = 
ez
;

526  
E
;

527 
	}
}

537 
	$hŒS∑r£ToDí£
(
robj
 *
o
) {

538 
sds
 
•¨£
 = 
o
->
±r
, 
dí£
;

539 
hŒhdr
 *
hdr
, *
ﬁdhdr
 = (hŒhdr*)
•¨£
;

540 
idx
 = 0, 
ru∆í
, 
ªgvÆ
;

541 
uöt8_t
 *
p
 = (uöt8_t*)
•¨£
, *
íd
 =Ö+
	`sd¶í
(sparse);

544 
hdr
 = (
hŒhdr
*Ë
•¨£
;

545 i‡(
hdr
->
ícodög
 =
HLL_DENSE
Ë 
VR_OK
;

550 
dí£
 = 
	`sd¢ewÀn
(
NULL
,
HLL_DENSE_SIZE
);

551 
hdr
 = (
hŒhdr
*Ë
dí£
;

552 *
hdr
 = *
ﬁdhdr
;

553 
hdr
->
ícodög
 = 
HLL_DENSE
;

557 
p
 +
HLL_HDR_SIZE
;

558 
p
 < 
íd
) {

559 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

560 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

561 
idx
 +
ru∆í
;

562 
p
++;

563 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

564 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

565 
idx
 +
ru∆í
;

566 
p
 += 2;

568 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

569 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

570 
ru∆í
--) {

571 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
idx
,
ªgvÆ
);

572 
idx
++;

574 
p
++;

580 i‡(
idx
 !
HLL_REGISTERS
) {

581 
	`sds‰ì
(
dí£
);

582  
VR_ERROR
;

586 
	`sds‰ì
(
o
->
±r
);

587 
o
->
±r
 = 
dí£
;

588  
VR_OK
;

589 
	}
}

607 
	$hŒS∑r£Add
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
) {

608 
hŒhdr
 *
hdr
;

609 
uöt8_t
 
ﬁdcou¡
, 
cou¡
, *
•¨£
, *
íd
, *
p
, *
¥ev
, *
√xt
;

610 
ödex
, 
fú°
, 
•™
;

611 
is_zîo
 = 0, 
is_xzîo
 = 0, 
is_vÆ
 = 0, 
ru∆í
 = 0;

614 
cou¡
 = 
	`hŒP©Lí
(
ñe
,
ñesize
,&
ödex
);

618 i‡(
cou¡
 > 
HLL_SPARSE_VAL_MAX_VALUE
Ë
¥omŸe
;

625 
o
->
±r
 = 
	`sdsMakeRoomF‹
(o->ptr,3);

629 
•¨£
 = 
p
 = ((
uöt8_t
*)
o
->
±r
Ë+ 
HLL_HDR_SIZE
;

630 
íd
 = 
p
 + 
	`sd¶í
(
o
->
±r
Ë- 
HLL_HDR_SIZE
;

632 
fú°
 = 0;

633 
¥ev
 = 
NULL
;

634 
√xt
 = 
NULL
;

635 
•™
 = 0;

636 
p
 < 
íd
) {

637 
›Àn
;

644 
›Àn
 = 1;

645 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

646 
•™
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

647 } i‡(
	`HLL_SPARSE_IS_VAL
(
p
)) {

648 
•™
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

650 
•™
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

651 
›Àn
 = 2;

654 i‡(
ödex
 <
fú°
+
•™
-1) ;

655 
¥ev
 = 
p
;

656 
p
 +
›Àn
;

657 
fú°
 +
•™
;

659 i‡(
•™
 == 0)  -1;

661 
√xt
 = 
	`HLL_SPARSE_IS_XZERO
(
p
) ?Ö+2 :Ö+1;

662 i‡(
√xt
 >
íd
Ë√xà
NULL
;

667 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

668 
is_zîo
 = 1;

669 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

670 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

671 
is_xzîo
 = 1;

672 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

674 
is_vÆ
 = 1;

675 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

699 i‡(
is_vÆ
) {

700 
ﬁdcou¡
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

702 i‡(
ﬁdcou¡
 >
cou¡
)  0;

705 i‡(
ru∆í
 == 1) {

706 
	`HLL_SPARSE_VAL_SET
(
p
,
cou¡
,1);

707 
upd©ed
;

713 i‡(
is_zîo
 && 
ru∆í
 == 1) {

714 
	`HLL_SPARSE_VAL_SET
(
p
,
cou¡
,1);

715 
upd©ed
;

733 
uöt8_t
 
£q
[5], *
n
 = seq;

734 
œ°
 = 
fú°
+
•™
-1;

735 
Àn
;

737 i‡(
is_zîo
 || 
is_xzîo
) {

739 i‡(
ödex
 !
fú°
) {

740 
Àn
 = 
ödex
-
fú°
;

741 i‡(
Àn
 > 
HLL_SPARSE_ZERO_MAX_LEN
) {

742 
	`HLL_SPARSE_XZERO_SET
(
n
,
Àn
);

743 
n
 += 2;

745 
	`HLL_SPARSE_ZERO_SET
(
n
,
Àn
);

746 
n
++;

749 
	`HLL_SPARSE_VAL_SET
(
n
,
cou¡
,1);

750 
n
++;

751 i‡(
ödex
 !
œ°
) {

752 
Àn
 = 
œ°
-
ödex
;

753 i‡(
Àn
 > 
HLL_SPARSE_ZERO_MAX_LEN
) {

754 
	`HLL_SPARSE_XZERO_SET
(
n
,
Àn
);

755 
n
 += 2;

757 
	`HLL_SPARSE_ZERO_SET
(
n
,
Àn
);

758 
n
++;

763 
curvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

765 i‡(
ödex
 !
fú°
) {

766 
Àn
 = 
ödex
-
fú°
;

767 
	`HLL_SPARSE_VAL_SET
(
n
,
curvÆ
,
Àn
);

768 
n
++;

770 
	`HLL_SPARSE_VAL_SET
(
n
,
cou¡
,1);

771 
n
++;

772 i‡(
ödex
 !
œ°
) {

773 
Àn
 = 
œ°
-
ödex
;

774 
	`HLL_SPARSE_VAL_SET
(
n
,
curvÆ
,
Àn
);

775 
n
++;

783 
£qÀn
 = 
n
-
£q
;

784 
ﬁdÀn
 = 
is_xzîo
 ? 2 : 1;

785 
dñèÀn
 = 
£qÀn
-
ﬁdÀn
;

787 i‡(
dñèÀn
 > 0 &&

788 
	`sd¶í
(
o
->
±r
)+
dñèÀn
 > 
£rvî
.
hŒ_•¨£_max_byãs
Ë
¥omŸe
;

789 i‡(
dñèÀn
 && 
√xt
Ë
	`memmove
“ext+dñèÀn,√xt,
íd
-next);

790 
	`sdsIn¸Lí
(
o
->
±r
,
dñèÀn
);

791 
	`mem˝y
(
p
,
£q
,
£qÀn
);

792 
íd
 +
dñèÀn
;

794 
upd©ed
:

800 
p
 = 
¥ev
 ?Öªv : 
•¨£
;

801 
sˇ∆í
 = 5;

802 
p
 < 
íd
 && 
sˇ∆í
--) {

803 i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

804 
p
 += 2;

806 } i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

807 
p
++;

812 i‡(
p
+1 < 
íd
 && 
	`HLL_SPARSE_IS_VAL
(p+1)) {

813 
v1
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

814 
v2
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
+1);

815 i‡(
v1
 =
v2
) {

816 
Àn
 = 
	`HLL_SPARSE_VAL_LEN
(
p
)+HLL_SPARSE_VAL_LEN(p+1);

817 i‡(
Àn
 <
HLL_SPARSE_VAL_MAX_LEN
) {

818 
	`HLL_SPARSE_VAL_SET
(
p
+1,
v1
,
Àn
);

819 
	`memmove
(
p
,p+1,
íd
-p);

820 
	`sdsIn¸Lí
(
o
->
±r
,-1);

821 
íd
--;

829 
p
++;

833 
hdr
 = 
o
->
±r
;

834 
	`HLL_INVALIDATE_CACHE
(
hdr
);

837 
¥omŸe
:

838 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
)  -1;

839 
hdr
 = 
o
->
±r
;

848 
dí£_ªtvÆ
 = 
	`hŒDí£Add
(
hdr
->
ªgi°îs
, 
ñe
, 
ñesize
);

849 
	`ASSERT
(
dí£_ªtvÆ
 == 1);

850  
dí£_ªtvÆ
;

851 
	}
}

857 
	$hŒS∑r£Sum
(
uöt8_t
 *
•¨£
, 
•¨£Àn
, *
PE
, *
ezp
, *
övÆid
) {

858 
E
 = 0;

859 
ez
 = 0, 
idx
 = 0, 
ru∆í
, 
ªgvÆ
;

860 
uöt8_t
 *
íd
 = 
•¨£
+
•¨£Àn
, *
p
 = sparse;

862 
p
 < 
íd
) {

863 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

864 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

865 
idx
 +
ru∆í
;

866 
ez
 +
ru∆í
;

868 
p
++;

869 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

870 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

871 
idx
 +
ru∆í
;

872 
ez
 +
ru∆í
;

874 
p
 += 2;

876 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

877 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

878 
idx
 +
ru∆í
;

879 
E
 +
PE
[
ªgvÆ
]*
ru∆í
;

880 
p
++;

883 i‡(
idx
 !
HLL_REGISTERS
 && 
övÆid
) *invalid = 1;

884 
E
 +
ez
;

885 *
ezp
 = 
ez
;

886  
E
;

887 
	}
}

897 
	$hŒRawSum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
) {

898 
E
 = 0;

899 
j
, 
ez
 = 0;

900 
uöt64_t
 *
w‹d
 = (uöt64_t*Ë
ªgi°îs
;

901 
uöt8_t
 *
byãs
;

903 
j
 = 0; j < 
HLL_REGISTERS
/8; j++) {

904 i‡(*
w‹d
 == 0) {

905 
ez
 += 8;

907 
byãs
 = (
uöt8_t
*Ë
w‹d
;

908 i‡(
byãs
[0]Ë
E
 +
PE
[byãs[0]]; 
ez
++;

909 i‡(
byãs
[1]Ë
E
 +
PE
[byãs[1]]; 
ez
++;

910 i‡(
byãs
[2]Ë
E
 +
PE
[byãs[2]]; 
ez
++;

911 i‡(
byãs
[3]Ë
E
 +
PE
[byãs[3]]; 
ez
++;

912 i‡(
byãs
[4]Ë
E
 +
PE
[byãs[4]]; 
ez
++;

913 i‡(
byãs
[5]Ë
E
 +
PE
[byãs[5]]; 
ez
++;

914 i‡(
byãs
[6]Ë
E
 +
PE
[byãs[6]]; 
ez
++;

915 i‡(
byãs
[7]Ë
E
 +
PE
[byãs[7]]; 
ez
++;

917 
w‹d
++;

919 
E
 +
ez
;

921 *
ezp
 = 
ez
;

922  
E
;

923 
	}
}

936 
uöt64_t
 
	$hŒCou¡
(
hŒhdr
 *
hdr
, *
övÆid
) {

937 
m
 = 
HLL_REGISTERS
;

938 
E
, 
Æpha
 = 0.7213/(1+1.079/
m
);

939 
j
, 
ez
;

943 
öôülized
 = 0;

944 
PE
[64];

945 i‡(!
öôülized
) {

946 
PE
[0] = 1;

947 
j
 = 1; j < 64; j++) {

949 
PE
[
j
] = 1.0/(1ULL << j);

951 
öôülized
 = 1;

955 i‡(
hdr
->
ícodög
 =
HLL_DENSE
) {

956 
E
 = 
	`hŒDí£Sum
(
hdr
->
ªgi°îs
,
PE
,&
ez
);

957 } i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

958 
E
 = 
	`hŒS∑r£Sum
(
hdr
->
ªgi°îs
,

959 
	`sd¶í
((
sds
)
hdr
)-
HLL_HDR_SIZE
,
PE
,&
ez
,
övÆid
);

960 } i‡(
hdr
->
ícodög
 =
HLL_RAW
) {

961 
E
 = 
	`hŒRawSum
(
hdr
->
ªgi°îs
,
PE
,&
ez
);

963 
	`£rvîP™ic
("Unknown HyperLogLogÉncoding in hllCount()");

967 
E
 = (1/E)*
Æpha
*
m
*m;

974 i‡(
E
 < 
m
*2.5 && 
ez
 != 0) {

975 
E
 = 
m
*
	`log
(m/
ez
);

976 } i‡(
m
 =16384 && 
E
 < 72000) {

981 
büs
 = 5.9119*1.0e-18*(
E
*E*E*E)

982 -1.4253*1.0e-12*(
E
*E*E)+

983 1.2940*1.0e-7*(
E
*E)

984 -5.2921*1.0e-3*
E
+

986 
E
 -E*(
büs
/100);

992  (
uöt64_t
Ë
E
;

993 
	}
}

996 
	$hŒAdd
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
) {

997 
hŒhdr
 *
hdr
 = 
o
->
±r
;

998 
hdr
->
ícodög
) {

999 
HLL_DENSE
:  
	`hŒDí£Add
(
hdr
->
ªgi°îs
,
ñe
,
ñesize
);

1000 
HLL_SPARSE
:  
	`hŒS∑r£Add
(
o
,
ñe
,
ñesize
);

1003 
	}
}

1013 
	$hŒMîge
(
uöt8_t
 *
max
, 
robj
 *
hŒ
) {

1014 
hŒhdr
 *
hdr
 = 
hŒ
->
±r
;

1015 
i
;

1017 i‡(
hdr
->
ícodög
 =
HLL_DENSE
) {

1018 
uöt8_t
 
vÆ
;

1020 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1021 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
i
);

1022 i‡(
vÆ
 > 
max
[
i
]) max[i] = val;

1025 
uöt8_t
 *
p
 = 
hŒ
->
±r
, *
íd
 =Ö + 
	`sd¶í
(hll->ptr);

1026 
ru∆í
, 
ªgvÆ
;

1028 
p
 +
HLL_HDR_SIZE
;

1029 
i
 = 0;

1030 
p
 < 
íd
) {

1031 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

1032 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

1033 
i
 +
ru∆í
;

1034 
p
++;

1035 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

1036 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

1037 
i
 +
ru∆í
;

1038 
p
 += 2;

1040 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

1041 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

1042 
ru∆í
--) {

1043 i‡(
ªgvÆ
 > 
max
[
i
]) max[i] =Ñegval;

1044 
i
++;

1046 
p
++;

1049 i‡(
i
 !
HLL_REGISTERS
Ë 
VR_ERROR
;

1051  
VR_OK
;

1052 
	}
}

1058 
robj
 *
	$¸óãHLLObje˘
() {

1059 
robj
 *
o
;

1060 
hŒhdr
 *
hdr
;

1061 
sds
 
s
;

1062 
uöt8_t
 *
p
;

1063 
•¨£Àn
 = 
HLL_HDR_SIZE
 +

1064 (((
HLL_REGISTERS
+(
HLL_SPARSE_XZERO_MAX_LEN
-1)) /

1065 
HLL_SPARSE_XZERO_MAX_LEN
)*2);

1066 
aux
;

1070 
aux
 = 
HLL_REGISTERS
;

1071 
s
 = 
	`sd¢ewÀn
(
NULL
,
•¨£Àn
);

1072 
p
 = (
uöt8_t
*)
s
 + 
HLL_HDR_SIZE
;

1073 
aux
) {

1074 
xzîo
 = 
HLL_SPARSE_XZERO_MAX_LEN
;

1075 i‡(
xzîo
 > 
aux
) xzero =áux;

1076 
	`HLL_SPARSE_XZERO_SET
(
p
,
xzîo
);

1077 
p
 += 2;

1078 
aux
 -
xzîo
;

1080 
	`ASSERT
((
p
-(
uöt8_t
*)
s
Ë=
•¨£Àn
);

1083 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
s
);

1084 
hdr
 = 
o
->
±r
;

1085 
	`mem˝y
(
hdr
->
magic
,"HYLL",4);

1086 
hdr
->
ícodög
 = 
HLL_SPARSE
;

1087  
o
;

1088 
	}
}

1093 
	$isHLLObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
) {

1094 
hŒhdr
 *
hdr
;

1097 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
))

1098  
VR_ERROR
;

1100 i‡(
	`°rögObje˘Lí
(
o
Ë< (*
hdr
)Ë
övÆid
;

1101 
hdr
 = 
o
->
±r
;

1104 i‡(
hdr
->
magic
[0] != 'H' || hdr->magic[1] != 'Y' ||

1105 
hdr
->
magic
[2] !'L' || hdr->magic[3] !'L'Ë
övÆid
;

1107 i‡(
hdr
->
ícodög
 > 
HLL_MAX_ENCODING
Ë
övÆid
;

1110 i‡(
hdr
->
ícodög
 =
HLL_DENSE
 &&

1111 
	`°rögObje˘Lí
(
o
Ë!
HLL_DENSE_SIZE
Ë
övÆid
;

1114  
VR_OK
;

1116 
övÆid
:

1117 
	`addRïlySds
(
c
,

1118 
	`sd¢ew
("-WRONGTYPE Key isÇotá valid "

1120  
VR_ERROR
;

1121 
	}
}

1124 
	$pÁddComm™d
(
˛õ¡
 *
c
) {

1125 
robj
 *
o
;

1126 
hŒhdr
 *
hdr
;

1127 
upd©ed
 = 0, 
j
;

1128 
expúed
 = 0;

1130 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1131 
	`lockDbWrôe
(
c
->
db
);

1132 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

1133 i‡(
o
 =
NULL
) {

1137 
o
 = 
	`¸óãHLLObje˘
();

1138 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

1139 
upd©ed
++;

1141 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1142 
	`u∆ockDb
(
c
->
db
);

1143 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1146 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1149 
j
 = 2; j < 
c
->
¨gc
; j++) {

1150 
ªtvÆ
 = 
	`hŒAdd
(
o
, (*)
c
->
¨gv
[
j
]->
±r
,

1151 
	`sd¶í
(
c
->
¨gv
[
j
]->
±r
));

1152 
ªtvÆ
) {

1154 
upd©ed
++;

1157 
	`u∆ockDb
(
c
->
db
);

1158 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1159 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1163 
hdr
 = 
o
->
±r
;

1164 i‡(
upd©ed
) {

1165 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1166 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"pÁdd",
c
->
¨gv
[1],c->
db
->
id
);

1167 
c
->
vñ
->
dúty
++;

1168 
	`HLL_INVALIDATE_CACHE
(
hdr
);

1170 
	`addRïly
(
c
, 
upd©ed
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

1171 
	`u∆ockDb
(
c
->
db
);

1172 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1173 
	}
}

1176 
	$pfcou¡Comm™d
(
˛õ¡
 *
c
) {

1177 
robj
 *
o
;

1178 
hŒhdr
 *
hdr
;

1179 
uöt64_t
 
ˇrd
;

1180 
expúed
;

1186 i‡(
c
->
¨gc
 > 2) {

1187 
uöt8_t
 
max
[
HLL_HDR_SIZE
+
HLL_REGISTERS
], *
ªgi°îs
;

1188 
j
;

1191 
	`mem£t
(
max
,0,(max));

1192 
hdr
 = (
hŒhdr
*Ë
max
;

1193 
hdr
->
ícodög
 = 
HLL_RAW
;

1194 
ªgi°îs
 = 
max
 + 
HLL_HDR_SIZE
;

1195 
j
 = 1; j < 
c
->
¨gc
; j++) {

1197 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

1198 
	`lockDbRód
(
c
->
db
);

1199 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

1200 i‡(
o
 =
NULL
) {

1201 
	`u∆ockDb
(
c
->
db
);

1204 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1205 
	`u∆ockDb
(
c
->
db
);

1210 i‡(
	`hŒMîge
(
ªgi°îs
,
o
Ë=
VR_ERROR
) {

1211 
	`u∆ockDb
(
c
->
db
);

1212 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1216 
	`u∆ockDb
(
c
->
db
);

1220 
	`addRïlyL⁄gL⁄g
(
c
,
	`hŒCou¡
(
hdr
,
NULL
));

1228 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

1229 
	`lockDbWrôe
(
c
->
db
);

1230 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

1231 i‡(
o
 =
NULL
) {

1234 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1236 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1237 
	`u∆ockDb
(
c
->
db
);

1238 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1241 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1244 
hdr
 = 
o
->
±r
;

1245 i‡(
	`HLL_VALID_CACHE
(
hdr
)) {

1247 
ˇrd
 = (
uöt64_t
)
hdr
->card[0];

1248 
ˇrd
 |(
uöt64_t
)
hdr
->card[1] << 8;

1249 
ˇrd
 |(
uöt64_t
)
hdr
->card[2] << 16;

1250 
ˇrd
 |(
uöt64_t
)
hdr
->card[3] << 24;

1251 
ˇrd
 |(
uöt64_t
)
hdr
->card[4] << 32;

1252 
ˇrd
 |(
uöt64_t
)
hdr
->card[5] << 40;

1253 
ˇrd
 |(
uöt64_t
)
hdr
->card[6] << 48;

1254 
ˇrd
 |(
uöt64_t
)
hdr
->card[7] << 56;

1256 
övÆid
 = 0;

1258 
ˇrd
 = 
	`hŒCou¡
(
hdr
,&
övÆid
);

1259 i‡(
övÆid
) {

1260 
	`u∆ockDb
(
c
->
db
);

1261 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1262 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1265 
hdr
->
ˇrd
[0] = card & 0xff;

1266 
hdr
->
ˇrd
[1] = (card >> 8) & 0xff;

1267 
hdr
->
ˇrd
[2] = (card >> 16) & 0xff;

1268 
hdr
->
ˇrd
[3] = (card >> 24) & 0xff;

1269 
hdr
->
ˇrd
[4] = (card >> 32) & 0xff;

1270 
hdr
->
ˇrd
[5] = (card >> 40) & 0xff;

1271 
hdr
->
ˇrd
[6] = (card >> 48) & 0xff;

1272 
hdr
->
ˇrd
[7] = (card >> 56) & 0xff;

1277 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1278 
£rvî
.
dúty
++;

1279 
c
->
vñ
->
dúty
++;

1281 
	`addRïlyL⁄gL⁄g
(
c
,
ˇrd
);

1284 
	`u∆ockDb
(
c
->
db
);

1285 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1286 
	}
}

1289 
	$pfmîgeComm™d
(
˛õ¡
 *
c
) {

1290 
uöt8_t
 
max
[
HLL_REGISTERS
];

1291 
hŒhdr
 *
hdr
;

1292 
j
;

1297 
	`mem£t
(
max
,0,(max));

1298 
j
 = 1; j < 
c
->
¨gc
; j++) {

1300 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

1301 i‡(
o
 =
NULL
) ;

1302 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) ;

1306 i‡(
	`hŒMîge
(
max
,
o
Ë=
VR_ERROR
) {

1307 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1313 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

1314 i‡(
o
 =
NULL
) {

1318 
o
 = 
	`¸óãHLLObje˘
();

1319 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

1324 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1328 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1329 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1335 
hdr
 = 
o
->
±r
;

1336 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

1337 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
j
,
max
[j]);

1339 
	`HLL_INVALIDATE_CACHE
(
hdr
);

1341 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1344 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"pÁdd",
c
->
¨gv
[1],c->
db
->
id
);

1345 
£rvî
.
dúty
++;

1346 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1347 
	}
}

1354 
	#HLL_TEST_CYCLES
 1000

	)

1355 
	$pf£l·e°Comm™d
(
˛õ¡
 *
c
) {

1356 
j
, 
i
;

1357 
sds
 
bôcou¡îs
 = 
	`sd¢ewÀn
(
NULL
,
HLL_DENSE_SIZE
);

1358 
hŒhdr
 *
hdr
 = (hŒhdr*Ë
bôcou¡îs
, *
hdr2
;

1359 
robj
 *
o
 = 
NULL
;

1360 
uöt8_t
 
byãcou¡îs
[
HLL_REGISTERS
];

1366 
j
 = 0; j < 
HLL_TEST_CYCLES
; j++) {

1369 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1370 
r
 = 
	`ønd
(Ë& 
HLL_REGISTER_MAX
;

1372 
byãcou¡îs
[
i
] = 
r
;

1373 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
i
,
r
);

1376 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1377 
vÆ
;

1379 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
i
);

1380 i‡(
vÆ
 !
byãcou¡îs
[
i
]) {

1381 
	`addRïlyEº‹F‹m©
(
c
,

1383 
i
, (Ë
byãcou¡îs
[i], (Ë
vÆ
);

1384 
˛ónup
;

1399 
	`mem£t
(
hdr
->
ªgi°îs
,0,
HLL_DENSE_SIZE
-
HLL_HDR_SIZE
);

1400 
o
 = 
	`¸óãHLLObje˘
();

1401 
ªÀº
 = 1.04/
	`sqπ
(
HLL_REGISTERS
);

1402 
öt64_t
 
checkpoöt
 = 1;

1403 
uöt64_t
 
£ed
 = (uöt64_t)
	`ønd
() | (uint64_t)rand() << 32;

1404 
uöt64_t
 
ñe
;

1405 
j
 = 1; j <= 10000000; j++) {

1406 
ñe
 = 
j
 ^ 
£ed
;

1407 
	`hŒDí£Add
(
hdr
->
ªgi°îs
,(*)&
ñe
,(ele));

1408 
	`hŒAdd
(
o
,(*)&
ñe
,(ele));

1412 i‡(
j
 =
checkpoöt
 && j < 
£rvî
.
hŒ_•¨£_max_byãs
/2) {

1413 
hdr2
 = 
o
->
±r
;

1414 i‡(
hdr2
->
ícodög
 !
HLL_SPARSE
) {

1415 
	`addRïlyEº‹
(
c
, "TESTFAILED sparseÉncodingÇot used");

1416 
˛ónup
;

1421 i‡(
j
 =
checkpoöt
 && 
	`hŒCou¡
(
hdr
,
NULL
Ë!hŒCou¡(
o
->
±r
,NULL)) {

1422 
	`addRïlyEº‹
(
c
, "TESTFAILED dense/sparse disagree");

1423 
˛ónup
;

1427 i‡(
j
 =
checkpoöt
) {

1428 
öt64_t
 
ab£º
 = 
checkpoöt
 - (öt64_t)
	`hŒCou¡
(
hdr
,
NULL
);

1429 
uöt64_t
 
maxîr
 = 
	`˚û
(
ªÀº
*6*
checkpoöt
);

1435 i‡(
j
 =10Ë
maxîr
 = 1;

1437 i‡(
ab£º
 < 0)ábserr = -abserr;

1438 i‡(
ab£º
 > (
öt64_t
)
maxîr
) {

1439 
	`addRïlyEº‹F‹m©
(
c
,

1441 (Ë
checkpoöt
,

1442 (Ë
ab£º
);

1443 
˛ónup
;

1445 
checkpoöt
 *= 10;

1450 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1452 
˛ónup
:

1453 
	`sds‰ì
(
bôcou¡îs
);

1454 i‡(
o
Ë
	`de¸RefCou¡
(o);

1455 
	}
}

1459 
	$pfdebugComm™d
(
˛õ¡
 *
c
) {

1460 *
cmd
 = 
c
->
¨gv
[1]->
±r
;

1461 
hŒhdr
 *
hdr
;

1462 
robj
 *
o
;

1463 
j
;

1465 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

1466 i‡(
o
 =
NULL
) {

1467 
	`addRïlyEº‹
(
c
,"The specified key doesÇotÉxist");

1470 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) ;

1471 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[2],o);

1472 
hdr
 = 
o
->
±r
;

1475 i‡(!
	`°rˇ£cmp
(
cmd
,"getreg")) {

1476 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1478 i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

1479 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1480 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1483 
£rvî
.
dúty
++;

1486 
hdr
 = 
o
->
±r
;

1487 
	`addRïlyMu…iBulkLí
(
c
,
HLL_REGISTERS
);

1488 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

1489 
uöt8_t
 
vÆ
;

1491 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
j
);

1492 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1496 i‡(!
	`°rˇ£cmp
(
cmd
,"decode")) {

1497 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1499 
uöt8_t
 *
p
 = 
o
->
±r
, *
íd
 =Ö+
	`sd¶í
(o->ptr);

1500 
sds
 
decoded
 = 
	`sd£m±y
();

1502 i‡(
hdr
->
ícodög
 !
HLL_SPARSE
) {

1503 
	`addRïlyEº‹
(
c
,"HLLÉncoding isÇot sparse");

1507 
p
 +
HLL_HDR_SIZE
;

1508 
p
 < 
íd
) {

1509 
ru∆í
, 
ªgvÆ
;

1511 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

1512 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

1513 
p
++;

1514 
decoded
 = 
	`sdsˇçrötf
(decoded,"z:%d ",
ru∆í
);

1515 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

1516 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

1517 
p
 += 2;

1518 
decoded
 = 
	`sdsˇçrötf
(decoded,"Z:%d ",
ru∆í
);

1520 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

1521 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

1522 
p
++;

1523 
decoded
 = 
	`sdsˇçrötf
(decoded,"v:%d,%d ",
ªgvÆ
,
ru∆í
);

1526 
decoded
 = 
	`sd°rim
(decoded," ");

1527 
	`addRïlyBulkCBuf„r
(
c
,
decoded
,
	`sd¶í
(decoded));

1528 
	`sds‰ì
(
decoded
);

1531 i‡(!
	`°rˇ£cmp
(
cmd
,"encoding")) {

1532 *
ícodög°r
[2] = {"dense","sparse"};

1533 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1535 
	`addRïlySètus
(
c
,
ícodög°r
[
hdr
->
ícodög
]);

1538 i‡(!
	`°rˇ£cmp
(
cmd
,"todense")) {

1539 
c⁄v
 = 0;

1540 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1542 i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

1543 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1544 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1547 
c⁄v
 = 1;

1548 
£rvî
.
dúty
++;

1550 
	`addRïly
(
c
,
c⁄v
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

1552 
	`addRïlyEº‹F‹m©
(
c
,"Unknow¿PFDEBUG subcomm™d '%s'", 
cmd
);

1556 
¨ôyîr
:

1557 
	`addRïlyEº‹F‹m©
(
c
,

1558 "Wr⁄gÇumbî o‡¨gumít†f‹Åhê'%s' subcomm™d",
cmd
);

1559 
	}
}

	@src/vr_hyperloglog.c

1 
	~<vr_c‹e.h
>

3 
	~<°döt.h
>

4 
	~<m©h.h
>

151 
	shŒhdr
 {

152 
	mmagic
[4];

153 
uöt8_t
 
	mícodög
;

154 
uöt8_t
 
	mnŸu£d
[3];

155 
uöt8_t
 
	mˇrd
[8];

156 
uöt8_t
 
	mªgi°îs
[];

160 
	#HLL_INVALIDATE_CACHE
(
hdr
Ë(hdr)->
ˇrd
[7] |(1<<7)

	)

161 
	#HLL_VALID_CACHE
(
hdr
Ë(((hdr)->
ˇrd
[7] & (1<<7)Ë=0)

	)

163 
	#HLL_P
 14

	)

164 
	#HLL_REGISTERS
 (1<<
HLL_P
Ë

	)

165 
	#HLL_P_MASK
 (
HLL_REGISTERS
-1Ë

	)

166 
	#HLL_BITS
 6

	)

167 
	#HLL_REGISTER_MAX
 ((1<<
HLL_BITS
)-1)

	)

168 
	#HLL_HDR_SIZE
 (
hŒhdr
)

	)

169 
	#HLL_DENSE_SIZE
 (
HLL_HDR_SIZE
+((
HLL_REGISTERS
*
HLL_BITS
+7)/8))

	)

170 
	#HLL_DENSE
 0

	)

171 
	#HLL_SPARSE
 1

	)

172 
	#HLL_RAW
 255

	)

173 
	#HLL_MAX_ENCODING
 1

	)

175 *
	gövÆid_hŒ_îr
 = "-INVALIDOBJ Corrupted HLL object detected\r\n";

306 
	#HLL_DENSE_GET_REGISTER
(
èrgë
,
p
,
ªgnum
) do { \

307 
uöt8_t
 *
_p
 = (uöt8_t*Ë
p
; \

308 
_byã
 = 
ªgnum
*
HLL_BITS
/8; \

309 
_fb
 = 
ªgnum
*
HLL_BITS
&7; \

310 
_fb8
 = 8 - 
_fb
; \

311 
b0
 = 
_p
[
_byã
]; \

312 
b1
 = 
_p
[
_byã
+1]; \

313 
èrgë
 = ((
b0
 >> 
_fb
Ë| (
b1
 << 
_fb8
)Ë& 
HLL_REGISTER_MAX
; \

314 } 0)

	)

318 
	#HLL_DENSE_SET_REGISTER
(
p
,
ªgnum
,
vÆ
) do { \

319 
uöt8_t
 *
_p
 = (uöt8_t*Ë
p
; \

320 
_byã
 = 
ªgnum
*
HLL_BITS
/8; \

321 
_fb
 = 
ªgnum
*
HLL_BITS
&7; \

322 
_fb8
 = 8 - 
_fb
; \

323 
_v
 = 
vÆ
; \

324 
_p
[
_byã
] &~(
HLL_REGISTER_MAX
 << 
_fb
); \

325 
_p
[
_byã
] |
_v
 << 
_fb
; \

326 
_p
[
_byã
+1] &~(
HLL_REGISTER_MAX
 >> 
_fb8
); \

327 
_p
[
_byã
+1] |
_v
 >> 
_fb8
; \

328 } 0)

	)

332 
	#HLL_SPARSE_XZERO_BIT
 0x40

	)

333 
	#HLL_SPARSE_VAL_BIT
 0x80

	)

334 
	#HLL_SPARSE_IS_ZERO
(
p
Ë(((*’)Ë& 0xc0Ë=0Ë

	)

335 
	#HLL_SPARSE_IS_XZERO
(
p
Ë(((*’)Ë& 0xc0Ë=
HLL_SPARSE_XZERO_BIT
)

	)

336 
	#HLL_SPARSE_IS_VAL
(
p
Ë((*’)Ë& 
HLL_SPARSE_VAL_BIT
)

	)

337 
	#HLL_SPARSE_ZERO_LEN
(
p
Ë(((*’)Ë& 0x3f)+1)

	)

338 
	#HLL_SPARSE_XZERO_LEN
(
p
Ë(((((*’)Ë& 0x3fË<< 8Ë| (*(’)+1)))+1)

	)

339 
	#HLL_SPARSE_VAL_VALUE
(
p
Ë((((*’)Ë>> 2Ë& 0x1f)+1)

	)

340 
	#HLL_SPARSE_VAL_LEN
(
p
Ë(((*’)Ë& 0x3)+1)

	)

341 
	#HLL_SPARSE_VAL_MAX_VALUE
 32

	)

342 
	#HLL_SPARSE_VAL_MAX_LEN
 4

	)

343 
	#HLL_SPARSE_ZERO_MAX_LEN
 64

	)

344 
	#HLL_SPARSE_XZERO_MAX_LEN
 16384

	)

345 
	#HLL_SPARSE_VAL_SET
(
p
,
vÆ
,
Àn
) do { \

346 *(
p
Ë(((
vÆ
)-1)<<2|((
Àn
)-1))|
HLL_SPARSE_VAL_BIT
; \

347 } 0)

	)

348 
	#HLL_SPARSE_ZERO_SET
(
p
,
Àn
) do { \

349 *(
p
Ë(
Àn
)-1; \

350 } 0)

	)

351 
	#HLL_SPARSE_XZERO_SET
(
p
,
Àn
) do { \

352 
_l
 = (
Àn
)-1; \

353 *(
p
Ë(
_l
>>8Ë| 
HLL_SPARSE_XZERO_BIT
; \

354 *((
p
)+1Ë(
_l
&0xff); \

355 } 0)

	)

362 
uöt64_t
 
	$MurmurHash64A
 (c⁄° * 
key
, 
Àn
, 
£ed
) {

363 c⁄° 
uöt64_t
 
m
 = 0xc6a4a7935bd1e995;

364 c⁄° 
r
 = 47;

365 
uöt64_t
 
h
 = 
£ed
 ^ (
Àn
 * 
m
);

366 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*)
key
;

367 c⁄° 
uöt8_t
 *
íd
 = 
d©a
 + (
Àn
-(len&7));

369 
d©a
 !
íd
) {

370 
uöt64_t
 
k
;

372 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

373 
k
 = *((
uöt64_t
*)
d©a
);

375 
k
 = (
uöt64_t
Ë
d©a
[0];

376 
k
 |(
uöt64_t
Ë
d©a
[1] << 8;

377 
k
 |(
uöt64_t
Ë
d©a
[2] << 16;

378 
k
 |(
uöt64_t
Ë
d©a
[3] << 24;

379 
k
 |(
uöt64_t
Ë
d©a
[4] << 32;

380 
k
 |(
uöt64_t
Ë
d©a
[5] << 40;

381 
k
 |(
uöt64_t
Ë
d©a
[6] << 48;

382 
k
 |(
uöt64_t
Ë
d©a
[7] << 56;

385 
k
 *
m
;

386 
k
 ^k >> 
r
;

387 
k
 *
m
;

388 
h
 ^
k
;

389 
h
 *
m
;

390 
d©a
 += 8;

393 
Àn
 & 7) {

394 7: 
h
 ^(
uöt64_t
)
d©a
[6] << 48;

395 6: 
h
 ^(
uöt64_t
)
d©a
[5] << 40;

396 5: 
h
 ^(
uöt64_t
)
d©a
[4] << 32;

397 4: 
h
 ^(
uöt64_t
)
d©a
[3] << 24;

398 3: 
h
 ^(
uöt64_t
)
d©a
[2] << 16;

399 2: 
h
 ^(
uöt64_t
)
d©a
[1] << 8;

400 1: 
h
 ^(
uöt64_t
)
d©a
[0];

401 
h
 *
m
;

404 
h
 ^h >> 
r
;

405 
h
 *
m
;

406 
h
 ^h >> 
r
;

407  
h
;

408 
	}
}

413 
	$hŒP©Lí
(*
ñe
, 
size_t
 
ñesize
, *
ªgp
) {

414 
uöt64_t
 
hash
, 
bô
, 
ödex
;

415 
cou¡
;

428 
hash
 = 
	`MurmurHash64A
(
ñe
,
ñesize
,0xadc83b19ULL);

429 
ödex
 = 
hash
 & 
HLL_P_MASK
;

430 
hash
 |((
uöt64_t
)1<<63);

431 
bô
 = 
HLL_REGISTERS
;

432 
cou¡
 = 1;

433 (
hash
 & 
bô
) == 0) {

434 
cou¡
++;

435 
bô
 <<= 1;

437 *
ªgp
 = (Ë
ödex
;

438  
cou¡
;

439 
	}
}

454 
	$hŒDí£Add
(
uöt8_t
 *
ªgi°îs
, *
ñe
, 
size_t
 
ñesize
) {

455 
uöt8_t
 
ﬁdcou¡
, 
cou¡
;

456 
ödex
;

459 
cou¡
 = 
	`hŒP©Lí
(
ñe
,
ñesize
,&
ödex
);

460 
	`HLL_DENSE_GET_REGISTER
(
ﬁdcou¡
,
ªgi°îs
,
ödex
);

461 i‡(
cou¡
 > 
ﬁdcou¡
) {

462 
	`HLL_DENSE_SET_REGISTER
(
ªgi°îs
,
ödex
,
cou¡
);

467 
	}
}

473 
	$hŒDí£Sum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
) {

474 
E
 = 0;

475 
j
, 
ez
 = 0;

480 i‡(
HLL_REGISTERS
 =16384 && 
HLL_BITS
 == 6) {

481 
uöt8_t
 *
r
 = 
ªgi°îs
;

482 
r0
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
, 
r9
,

483 
r10
, 
r11
, 
r12
, 
r13
, 
r14
, 
r15
;

484 
j
 = 0; j < 1024; j++) {

486 
r0
 = 
r
[0] & 63; i‡‘0 =0Ë
ez
++;

487 
r1
 = (
r
[0] >> 6 |Ñ[1] << 2Ë& 63; i‡‘1 =0Ë
ez
++;

488 
r2
 = (
r
[1] >> 4 |Ñ[2] << 4Ë& 63; i‡‘2 =0Ë
ez
++;

489 
r3
 = (
r
[2] >> 2Ë& 63; i‡‘3 =0Ë
ez
++;

490 
r4
 = 
r
[3] & 63; i‡‘4 =0Ë
ez
++;

491 
r5
 = (
r
[3] >> 6 |Ñ[4] << 2Ë& 63; i‡‘5 =0Ë
ez
++;

492 
r6
 = (
r
[4] >> 4 |Ñ[5] << 4Ë& 63; i‡‘6 =0Ë
ez
++;

493 
r7
 = (
r
[5] >> 2Ë& 63; i‡‘7 =0Ë
ez
++;

494 
r8
 = 
r
[6] & 63; i‡‘8 =0Ë
ez
++;

495 
r9
 = (
r
[6] >> 6 |Ñ[7] << 2Ë& 63; i‡‘9 =0Ë
ez
++;

496 
r10
 = (
r
[7] >> 4 |Ñ[8] << 4Ë& 63; i‡‘10 =0Ë
ez
++;

497 
r11
 = (
r
[8] >> 2Ë& 63; i‡‘11 =0Ë
ez
++;

498 
r12
 = 
r
[9] & 63; i‡‘12 =0Ë
ez
++;

499 
r13
 = (
r
[9] >> 6 |Ñ[10] << 2Ë& 63; i‡‘13 =0Ë
ez
++;

500 
r14
 = (
r
[10] >> 4 |Ñ[11] << 4Ë& 63; i‡‘14 =0Ë
ez
++;

501 
r15
 = (
r
[11] >> 2Ë& 63; i‡‘15 =0Ë
ez
++;

506 
E
 +(
PE
[
r0
] + PE[
r1
]Ë+ (PE[
r2
] + PE[
r3
]Ë+ (PE[
r4
] + PE[
r5
]) +

507 (
PE
[
r6
] + PE[
r7
]Ë+ (PE[
r8
] + PE[
r9
]Ë+ (PE[
r10
] + PE[
r11
]) +

508 (
PE
[
r12
] + PE[
r13
]Ë+ (PE[
r14
] + PE[
r15
]);

509 
r
 += 12;

512 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

513 
ªg
;

515 
	`HLL_DENSE_GET_REGISTER
(
ªg
,
ªgi°îs
,
j
);

516 i‡(
ªg
 == 0) {

517 
ez
++;

520 
E
 +
PE
[
ªg
];

523 
E
 +
ez
;

525 *
ezp
 = 
ez
;

526  
E
;

527 
	}
}

537 
	$hŒS∑r£ToDí£
(
robj
 *
o
) {

538 
sds
 
•¨£
 = 
o
->
±r
, 
dí£
;

539 
hŒhdr
 *
hdr
, *
ﬁdhdr
 = (hŒhdr*)
•¨£
;

540 
idx
 = 0, 
ru∆í
, 
ªgvÆ
;

541 
uöt8_t
 *
p
 = (uöt8_t*)
•¨£
, *
íd
 =Ö+
	`sd¶í
(sparse);

544 
hdr
 = (
hŒhdr
*Ë
•¨£
;

545 i‡(
hdr
->
ícodög
 =
HLL_DENSE
Ë 
VR_OK
;

550 
dí£
 = 
	`sd¢ewÀn
(
NULL
,
HLL_DENSE_SIZE
);

551 
hdr
 = (
hŒhdr
*Ë
dí£
;

552 *
hdr
 = *
ﬁdhdr
;

553 
hdr
->
ícodög
 = 
HLL_DENSE
;

557 
p
 +
HLL_HDR_SIZE
;

558 
p
 < 
íd
) {

559 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

560 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

561 
idx
 +
ru∆í
;

562 
p
++;

563 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

564 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

565 
idx
 +
ru∆í
;

566 
p
 += 2;

568 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

569 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

570 
ru∆í
--) {

571 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
idx
,
ªgvÆ
);

572 
idx
++;

574 
p
++;

580 i‡(
idx
 !
HLL_REGISTERS
) {

581 
	`sds‰ì
(
dí£
);

582  
VR_ERROR
;

586 
	`sds‰ì
(
o
->
±r
);

587 
o
->
±r
 = 
dí£
;

588  
VR_OK
;

589 
	}
}

607 
	$hŒS∑r£Add
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
) {

608 
hŒhdr
 *
hdr
;

609 
uöt8_t
 
ﬁdcou¡
, 
cou¡
, *
•¨£
, *
íd
, *
p
, *
¥ev
, *
√xt
;

610 
ödex
, 
fú°
, 
•™
;

611 
is_zîo
 = 0, 
is_xzîo
 = 0, 
is_vÆ
 = 0, 
ru∆í
 = 0;

614 
cou¡
 = 
	`hŒP©Lí
(
ñe
,
ñesize
,&
ödex
);

618 i‡(
cou¡
 > 
HLL_SPARSE_VAL_MAX_VALUE
Ë
¥omŸe
;

625 
o
->
±r
 = 
	`sdsMakeRoomF‹
(o->ptr,3);

629 
•¨£
 = 
p
 = ((
uöt8_t
*)
o
->
±r
Ë+ 
HLL_HDR_SIZE
;

630 
íd
 = 
p
 + 
	`sd¶í
(
o
->
±r
Ë- 
HLL_HDR_SIZE
;

632 
fú°
 = 0;

633 
¥ev
 = 
NULL
;

634 
√xt
 = 
NULL
;

635 
•™
 = 0;

636 
p
 < 
íd
) {

637 
›Àn
;

644 
›Àn
 = 1;

645 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

646 
•™
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

647 } i‡(
	`HLL_SPARSE_IS_VAL
(
p
)) {

648 
•™
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

650 
•™
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

651 
›Àn
 = 2;

654 i‡(
ödex
 <
fú°
+
•™
-1) ;

655 
¥ev
 = 
p
;

656 
p
 +
›Àn
;

657 
fú°
 +
•™
;

659 i‡(
•™
 == 0)  -1;

661 
√xt
 = 
	`HLL_SPARSE_IS_XZERO
(
p
) ?Ö+2 :Ö+1;

662 i‡(
√xt
 >
íd
Ë√xà
NULL
;

667 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

668 
is_zîo
 = 1;

669 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

670 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

671 
is_xzîo
 = 1;

672 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

674 
is_vÆ
 = 1;

675 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

699 i‡(
is_vÆ
) {

700 
ﬁdcou¡
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

702 i‡(
ﬁdcou¡
 >
cou¡
)  0;

705 i‡(
ru∆í
 == 1) {

706 
	`HLL_SPARSE_VAL_SET
(
p
,
cou¡
,1);

707 
upd©ed
;

713 i‡(
is_zîo
 && 
ru∆í
 == 1) {

714 
	`HLL_SPARSE_VAL_SET
(
p
,
cou¡
,1);

715 
upd©ed
;

733 
uöt8_t
 
£q
[5], *
n
 = seq;

734 
œ°
 = 
fú°
+
•™
-1;

735 
Àn
;

737 i‡(
is_zîo
 || 
is_xzîo
) {

739 i‡(
ödex
 !
fú°
) {

740 
Àn
 = 
ödex
-
fú°
;

741 i‡(
Àn
 > 
HLL_SPARSE_ZERO_MAX_LEN
) {

742 
	`HLL_SPARSE_XZERO_SET
(
n
,
Àn
);

743 
n
 += 2;

745 
	`HLL_SPARSE_ZERO_SET
(
n
,
Àn
);

746 
n
++;

749 
	`HLL_SPARSE_VAL_SET
(
n
,
cou¡
,1);

750 
n
++;

751 i‡(
ödex
 !
œ°
) {

752 
Àn
 = 
œ°
-
ödex
;

753 i‡(
Àn
 > 
HLL_SPARSE_ZERO_MAX_LEN
) {

754 
	`HLL_SPARSE_XZERO_SET
(
n
,
Àn
);

755 
n
 += 2;

757 
	`HLL_SPARSE_ZERO_SET
(
n
,
Àn
);

758 
n
++;

763 
curvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

765 i‡(
ödex
 !
fú°
) {

766 
Àn
 = 
ödex
-
fú°
;

767 
	`HLL_SPARSE_VAL_SET
(
n
,
curvÆ
,
Àn
);

768 
n
++;

770 
	`HLL_SPARSE_VAL_SET
(
n
,
cou¡
,1);

771 
n
++;

772 i‡(
ödex
 !
œ°
) {

773 
Àn
 = 
œ°
-
ödex
;

774 
	`HLL_SPARSE_VAL_SET
(
n
,
curvÆ
,
Àn
);

775 
n
++;

783 
£qÀn
 = 
n
-
£q
;

784 
ﬁdÀn
 = 
is_xzîo
 ? 2 : 1;

785 
dñèÀn
 = 
£qÀn
-
ﬁdÀn
;

787 i‡(
dñèÀn
 > 0 &&

788 
	`sd¶í
(
o
->
±r
)+
dñèÀn
 > 
£rvî
.
hŒ_•¨£_max_byãs
Ë
¥omŸe
;

789 i‡(
dñèÀn
 && 
√xt
Ë
	`memmove
“ext+dñèÀn,√xt,
íd
-next);

790 
	`sdsIn¸Lí
(
o
->
±r
,
dñèÀn
);

791 
	`mem˝y
(
p
,
£q
,
£qÀn
);

792 
íd
 +
dñèÀn
;

794 
upd©ed
:

800 
p
 = 
¥ev
 ?Öªv : 
•¨£
;

801 
sˇ∆í
 = 5;

802 
p
 < 
íd
 && 
sˇ∆í
--) {

803 i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

804 
p
 += 2;

806 } i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

807 
p
++;

812 i‡(
p
+1 < 
íd
 && 
	`HLL_SPARSE_IS_VAL
(p+1)) {

813 
v1
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

814 
v2
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
+1);

815 i‡(
v1
 =
v2
) {

816 
Àn
 = 
	`HLL_SPARSE_VAL_LEN
(
p
)+HLL_SPARSE_VAL_LEN(p+1);

817 i‡(
Àn
 <
HLL_SPARSE_VAL_MAX_LEN
) {

818 
	`HLL_SPARSE_VAL_SET
(
p
+1,
v1
,
Àn
);

819 
	`memmove
(
p
,p+1,
íd
-p);

820 
	`sdsIn¸Lí
(
o
->
±r
,-1);

821 
íd
--;

829 
p
++;

833 
hdr
 = 
o
->
±r
;

834 
	`HLL_INVALIDATE_CACHE
(
hdr
);

837 
¥omŸe
:

838 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
)  -1;

839 
hdr
 = 
o
->
±r
;

848 
dí£_ªtvÆ
 = 
	`hŒDí£Add
(
hdr
->
ªgi°îs
, 
ñe
, 
ñesize
);

849 
	`ASSERT
(
dí£_ªtvÆ
 == 1);

850  
dí£_ªtvÆ
;

851 
	}
}

857 
	$hŒS∑r£Sum
(
uöt8_t
 *
•¨£
, 
•¨£Àn
, *
PE
, *
ezp
, *
övÆid
) {

858 
E
 = 0;

859 
ez
 = 0, 
idx
 = 0, 
ru∆í
, 
ªgvÆ
;

860 
uöt8_t
 *
íd
 = 
•¨£
+
•¨£Àn
, *
p
 = sparse;

862 
p
 < 
íd
) {

863 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

864 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

865 
idx
 +
ru∆í
;

866 
ez
 +
ru∆í
;

868 
p
++;

869 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

870 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

871 
idx
 +
ru∆í
;

872 
ez
 +
ru∆í
;

874 
p
 += 2;

876 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

877 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

878 
idx
 +
ru∆í
;

879 
E
 +
PE
[
ªgvÆ
]*
ru∆í
;

880 
p
++;

883 i‡(
idx
 !
HLL_REGISTERS
 && 
övÆid
) *invalid = 1;

884 
E
 +
ez
;

885 *
ezp
 = 
ez
;

886  
E
;

887 
	}
}

897 
	$hŒRawSum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
) {

898 
E
 = 0;

899 
j
, 
ez
 = 0;

900 
uöt64_t
 *
w‹d
 = (uöt64_t*Ë
ªgi°îs
;

901 
uöt8_t
 *
byãs
;

903 
j
 = 0; j < 
HLL_REGISTERS
/8; j++) {

904 i‡(*
w‹d
 == 0) {

905 
ez
 += 8;

907 
byãs
 = (
uöt8_t
*Ë
w‹d
;

908 i‡(
byãs
[0]Ë
E
 +
PE
[byãs[0]]; 
ez
++;

909 i‡(
byãs
[1]Ë
E
 +
PE
[byãs[1]]; 
ez
++;

910 i‡(
byãs
[2]Ë
E
 +
PE
[byãs[2]]; 
ez
++;

911 i‡(
byãs
[3]Ë
E
 +
PE
[byãs[3]]; 
ez
++;

912 i‡(
byãs
[4]Ë
E
 +
PE
[byãs[4]]; 
ez
++;

913 i‡(
byãs
[5]Ë
E
 +
PE
[byãs[5]]; 
ez
++;

914 i‡(
byãs
[6]Ë
E
 +
PE
[byãs[6]]; 
ez
++;

915 i‡(
byãs
[7]Ë
E
 +
PE
[byãs[7]]; 
ez
++;

917 
w‹d
++;

919 
E
 +
ez
;

921 *
ezp
 = 
ez
;

922  
E
;

923 
	}
}

936 
uöt64_t
 
	$hŒCou¡
(
hŒhdr
 *
hdr
, *
övÆid
) {

937 
m
 = 
HLL_REGISTERS
;

938 
E
, 
Æpha
 = 0.7213/(1+1.079/
m
);

939 
j
, 
ez
;

943 
öôülized
 = 0;

944 
PE
[64];

945 i‡(!
öôülized
) {

946 
PE
[0] = 1;

947 
j
 = 1; j < 64; j++) {

949 
PE
[
j
] = 1.0/(1ULL << j);

951 
öôülized
 = 1;

955 i‡(
hdr
->
ícodög
 =
HLL_DENSE
) {

956 
E
 = 
	`hŒDí£Sum
(
hdr
->
ªgi°îs
,
PE
,&
ez
);

957 } i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

958 
E
 = 
	`hŒS∑r£Sum
(
hdr
->
ªgi°îs
,

959 
	`sd¶í
((
sds
)
hdr
)-
HLL_HDR_SIZE
,
PE
,&
ez
,
övÆid
);

960 } i‡(
hdr
->
ícodög
 =
HLL_RAW
) {

961 
E
 = 
	`hŒRawSum
(
hdr
->
ªgi°îs
,
PE
,&
ez
);

963 
	`£rvîP™ic
("Unknown HyperLogLogÉncoding in hllCount()");

967 
E
 = (1/E)*
Æpha
*
m
*m;

974 i‡(
E
 < 
m
*2.5 && 
ez
 != 0) {

975 
E
 = 
m
*
	`log
(m/
ez
);

976 } i‡(
m
 =16384 && 
E
 < 72000) {

981 
büs
 = 5.9119*1.0e-18*(
E
*E*E*E)

982 -1.4253*1.0e-12*(
E
*E*E)+

983 1.2940*1.0e-7*(
E
*E)

984 -5.2921*1.0e-3*
E
+

986 
E
 -E*(
büs
/100);

992  (
uöt64_t
Ë
E
;

993 
	}
}

996 
	$hŒAdd
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
) {

997 
hŒhdr
 *
hdr
 = 
o
->
±r
;

998 
hdr
->
ícodög
) {

999 
HLL_DENSE
:  
	`hŒDí£Add
(
hdr
->
ªgi°îs
,
ñe
,
ñesize
);

1000 
HLL_SPARSE
:  
	`hŒS∑r£Add
(
o
,
ñe
,
ñesize
);

1003 
	}
}

1013 
	$hŒMîge
(
uöt8_t
 *
max
, 
robj
 *
hŒ
) {

1014 
hŒhdr
 *
hdr
 = 
hŒ
->
±r
;

1015 
i
;

1017 i‡(
hdr
->
ícodög
 =
HLL_DENSE
) {

1018 
uöt8_t
 
vÆ
;

1020 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1021 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
i
);

1022 i‡(
vÆ
 > 
max
[
i
]) max[i] = val;

1025 
uöt8_t
 *
p
 = 
hŒ
->
±r
, *
íd
 =Ö + 
	`sd¶í
(hll->ptr);

1026 
ru∆í
, 
ªgvÆ
;

1028 
p
 +
HLL_HDR_SIZE
;

1029 
i
 = 0;

1030 
p
 < 
íd
) {

1031 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

1032 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

1033 
i
 +
ru∆í
;

1034 
p
++;

1035 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

1036 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

1037 
i
 +
ru∆í
;

1038 
p
 += 2;

1040 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

1041 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

1042 
ru∆í
--) {

1043 i‡(
ªgvÆ
 > 
max
[
i
]) max[i] =Ñegval;

1044 
i
++;

1046 
p
++;

1049 i‡(
i
 !
HLL_REGISTERS
Ë 
VR_ERROR
;

1051  
VR_OK
;

1052 
	}
}

1058 
robj
 *
	$¸óãHLLObje˘
() {

1059 
robj
 *
o
;

1060 
hŒhdr
 *
hdr
;

1061 
sds
 
s
;

1062 
uöt8_t
 *
p
;

1063 
•¨£Àn
 = 
HLL_HDR_SIZE
 +

1064 (((
HLL_REGISTERS
+(
HLL_SPARSE_XZERO_MAX_LEN
-1)) /

1065 
HLL_SPARSE_XZERO_MAX_LEN
)*2);

1066 
aux
;

1070 
aux
 = 
HLL_REGISTERS
;

1071 
s
 = 
	`sd¢ewÀn
(
NULL
,
•¨£Àn
);

1072 
p
 = (
uöt8_t
*)
s
 + 
HLL_HDR_SIZE
;

1073 
aux
) {

1074 
xzîo
 = 
HLL_SPARSE_XZERO_MAX_LEN
;

1075 i‡(
xzîo
 > 
aux
) xzero =áux;

1076 
	`HLL_SPARSE_XZERO_SET
(
p
,
xzîo
);

1077 
p
 += 2;

1078 
aux
 -
xzîo
;

1080 
	`ASSERT
((
p
-(
uöt8_t
*)
s
Ë=
•¨£Àn
);

1083 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
s
);

1084 
hdr
 = 
o
->
±r
;

1085 
	`mem˝y
(
hdr
->
magic
,"HYLL",4);

1086 
hdr
->
ícodög
 = 
HLL_SPARSE
;

1087  
o
;

1088 
	}
}

1093 
	$isHLLObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
) {

1094 
hŒhdr
 *
hdr
;

1097 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
))

1098  
VR_ERROR
;

1100 i‡(
	`°rögObje˘Lí
(
o
Ë< (*
hdr
)Ë
övÆid
;

1101 
hdr
 = 
o
->
±r
;

1104 i‡(
hdr
->
magic
[0] != 'H' || hdr->magic[1] != 'Y' ||

1105 
hdr
->
magic
[2] !'L' || hdr->magic[3] !'L'Ë
övÆid
;

1107 i‡(
hdr
->
ícodög
 > 
HLL_MAX_ENCODING
Ë
övÆid
;

1110 i‡(
hdr
->
ícodög
 =
HLL_DENSE
 &&

1111 
	`°rögObje˘Lí
(
o
Ë!
HLL_DENSE_SIZE
Ë
övÆid
;

1114  
VR_OK
;

1116 
övÆid
:

1117 
	`addRïlySds
(
c
,

1118 
	`sd¢ew
("-WRONGTYPE Key isÇotá valid "

1120  
VR_ERROR
;

1121 
	}
}

1124 
	$pÁddComm™d
(
˛õ¡
 *
c
) {

1125 
robj
 *
o
;

1126 
hŒhdr
 *
hdr
;

1127 
upd©ed
 = 0, 
j
;

1128 
expúed
 = 0;

1130 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1131 
	`lockDbWrôe
(
c
->
db
);

1132 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

1133 i‡(
o
 =
NULL
) {

1137 
o
 = 
	`¸óãHLLObje˘
();

1138 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

1139 
upd©ed
++;

1141 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1142 
	`u∆ockDb
(
c
->
db
);

1143 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1146 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1149 
j
 = 2; j < 
c
->
¨gc
; j++) {

1150 
ªtvÆ
 = 
	`hŒAdd
(
o
, (*)
c
->
¨gv
[
j
]->
±r
,

1151 
	`sd¶í
(
c
->
¨gv
[
j
]->
±r
));

1152 
ªtvÆ
) {

1154 
upd©ed
++;

1157 
	`u∆ockDb
(
c
->
db
);

1158 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1159 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1163 
hdr
 = 
o
->
±r
;

1164 i‡(
upd©ed
) {

1165 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1166 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"pÁdd",
c
->
¨gv
[1],c->
db
->
id
);

1167 
c
->
vñ
->
dúty
++;

1168 
	`HLL_INVALIDATE_CACHE
(
hdr
);

1170 
	`addRïly
(
c
, 
upd©ed
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

1171 
	`u∆ockDb
(
c
->
db
);

1172 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1173 
	}
}

1176 
	$pfcou¡Comm™d
(
˛õ¡
 *
c
) {

1177 
robj
 *
o
;

1178 
hŒhdr
 *
hdr
;

1179 
uöt64_t
 
ˇrd
;

1180 
expúed
;

1186 i‡(
c
->
¨gc
 > 2) {

1187 
uöt8_t
 
max
[
HLL_HDR_SIZE
+
HLL_REGISTERS
], *
ªgi°îs
;

1188 
j
;

1191 
	`mem£t
(
max
,0,(max));

1192 
hdr
 = (
hŒhdr
*Ë
max
;

1193 
hdr
->
ícodög
 = 
HLL_RAW
;

1194 
ªgi°îs
 = 
max
 + 
HLL_HDR_SIZE
;

1195 
j
 = 1; j < 
c
->
¨gc
; j++) {

1197 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

1198 
	`lockDbRód
(
c
->
db
);

1199 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

1200 i‡(
o
 =
NULL
) {

1201 
	`u∆ockDb
(
c
->
db
);

1204 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1205 
	`u∆ockDb
(
c
->
db
);

1210 i‡(
	`hŒMîge
(
ªgi°îs
,
o
Ë=
VR_ERROR
) {

1211 
	`u∆ockDb
(
c
->
db
);

1212 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1216 
	`u∆ockDb
(
c
->
db
);

1220 
	`addRïlyL⁄gL⁄g
(
c
,
	`hŒCou¡
(
hdr
,
NULL
));

1228 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

1229 
	`lockDbWrôe
(
c
->
db
);

1230 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

1231 i‡(
o
 =
NULL
) {

1234 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1236 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1237 
	`u∆ockDb
(
c
->
db
);

1238 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1241 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1244 
hdr
 = 
o
->
±r
;

1245 i‡(
	`HLL_VALID_CACHE
(
hdr
)) {

1247 
ˇrd
 = (
uöt64_t
)
hdr
->card[0];

1248 
ˇrd
 |(
uöt64_t
)
hdr
->card[1] << 8;

1249 
ˇrd
 |(
uöt64_t
)
hdr
->card[2] << 16;

1250 
ˇrd
 |(
uöt64_t
)
hdr
->card[3] << 24;

1251 
ˇrd
 |(
uöt64_t
)
hdr
->card[4] << 32;

1252 
ˇrd
 |(
uöt64_t
)
hdr
->card[5] << 40;

1253 
ˇrd
 |(
uöt64_t
)
hdr
->card[6] << 48;

1254 
ˇrd
 |(
uöt64_t
)
hdr
->card[7] << 56;

1256 
övÆid
 = 0;

1258 
ˇrd
 = 
	`hŒCou¡
(
hdr
,&
övÆid
);

1259 i‡(
övÆid
) {

1260 
	`u∆ockDb
(
c
->
db
);

1261 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1262 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1265 
hdr
->
ˇrd
[0] = card & 0xff;

1266 
hdr
->
ˇrd
[1] = (card >> 8) & 0xff;

1267 
hdr
->
ˇrd
[2] = (card >> 16) & 0xff;

1268 
hdr
->
ˇrd
[3] = (card >> 24) & 0xff;

1269 
hdr
->
ˇrd
[4] = (card >> 32) & 0xff;

1270 
hdr
->
ˇrd
[5] = (card >> 40) & 0xff;

1271 
hdr
->
ˇrd
[6] = (card >> 48) & 0xff;

1272 
hdr
->
ˇrd
[7] = (card >> 56) & 0xff;

1277 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1278 
£rvî
.
dúty
++;

1279 
c
->
vñ
->
dúty
++;

1281 
	`addRïlyL⁄gL⁄g
(
c
,
ˇrd
);

1284 
	`u∆ockDb
(
c
->
db
);

1285 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1286 
	}
}

1289 
	$pfmîgeComm™d
(
˛õ¡
 *
c
) {

1290 
uöt8_t
 
max
[
HLL_REGISTERS
];

1291 
hŒhdr
 *
hdr
;

1292 
j
;

1297 
	`mem£t
(
max
,0,(max));

1298 
j
 = 1; j < 
c
->
¨gc
; j++) {

1300 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

1301 i‡(
o
 =
NULL
) ;

1302 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) ;

1306 i‡(
	`hŒMîge
(
max
,
o
Ë=
VR_ERROR
) {

1307 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1313 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

1314 i‡(
o
 =
NULL
) {

1318 
o
 = 
	`¸óãHLLObje˘
();

1319 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

1324 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1328 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1329 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1335 
hdr
 = 
o
->
±r
;

1336 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

1337 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
j
,
max
[j]);

1339 
	`HLL_INVALIDATE_CACHE
(
hdr
);

1341 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1344 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"pÁdd",
c
->
¨gv
[1],c->
db
->
id
);

1345 
£rvî
.
dúty
++;

1346 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1347 
	}
}

1354 
	#HLL_TEST_CYCLES
 1000

	)

1355 
	$pf£l·e°Comm™d
(
˛õ¡
 *
c
) {

1356 
j
, 
i
;

1357 
sds
 
bôcou¡îs
 = 
	`sd¢ewÀn
(
NULL
,
HLL_DENSE_SIZE
);

1358 
hŒhdr
 *
hdr
 = (hŒhdr*Ë
bôcou¡îs
, *
hdr2
;

1359 
robj
 *
o
 = 
NULL
;

1360 
uöt8_t
 
byãcou¡îs
[
HLL_REGISTERS
];

1366 
j
 = 0; j < 
HLL_TEST_CYCLES
; j++) {

1369 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1370 
r
 = 
	`ønd
(Ë& 
HLL_REGISTER_MAX
;

1372 
byãcou¡îs
[
i
] = 
r
;

1373 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
i
,
r
);

1376 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1377 
vÆ
;

1379 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
i
);

1380 i‡(
vÆ
 !
byãcou¡îs
[
i
]) {

1381 
	`addRïlyEº‹F‹m©
(
c
,

1383 
i
, (Ë
byãcou¡îs
[i], (Ë
vÆ
);

1384 
˛ónup
;

1399 
	`mem£t
(
hdr
->
ªgi°îs
,0,
HLL_DENSE_SIZE
-
HLL_HDR_SIZE
);

1400 
o
 = 
	`¸óãHLLObje˘
();

1401 
ªÀº
 = 1.04/
	`sqπ
(
HLL_REGISTERS
);

1402 
öt64_t
 
checkpoöt
 = 1;

1403 
uöt64_t
 
£ed
 = (uöt64_t)
	`ønd
() | (uint64_t)rand() << 32;

1404 
uöt64_t
 
ñe
;

1405 
j
 = 1; j <= 10000000; j++) {

1406 
ñe
 = 
j
 ^ 
£ed
;

1407 
	`hŒDí£Add
(
hdr
->
ªgi°îs
,(*)&
ñe
,(ele));

1408 
	`hŒAdd
(
o
,(*)&
ñe
,(ele));

1412 i‡(
j
 =
checkpoöt
 && j < 
£rvî
.
hŒ_•¨£_max_byãs
/2) {

1413 
hdr2
 = 
o
->
±r
;

1414 i‡(
hdr2
->
ícodög
 !
HLL_SPARSE
) {

1415 
	`addRïlyEº‹
(
c
, "TESTFAILED sparseÉncodingÇot used");

1416 
˛ónup
;

1421 i‡(
j
 =
checkpoöt
 && 
	`hŒCou¡
(
hdr
,
NULL
Ë!hŒCou¡(
o
->
±r
,NULL)) {

1422 
	`addRïlyEº‹
(
c
, "TESTFAILED dense/sparse disagree");

1423 
˛ónup
;

1427 i‡(
j
 =
checkpoöt
) {

1428 
öt64_t
 
ab£º
 = 
checkpoöt
 - (öt64_t)
	`hŒCou¡
(
hdr
,
NULL
);

1429 
uöt64_t
 
maxîr
 = 
	`˚û
(
ªÀº
*6*
checkpoöt
);

1435 i‡(
j
 =10Ë
maxîr
 = 1;

1437 i‡(
ab£º
 < 0)ábserr = -abserr;

1438 i‡(
ab£º
 > (
öt64_t
)
maxîr
) {

1439 
	`addRïlyEº‹F‹m©
(
c
,

1441 (Ë
checkpoöt
,

1442 (Ë
ab£º
);

1443 
˛ónup
;

1445 
checkpoöt
 *= 10;

1450 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1452 
˛ónup
:

1453 
	`sds‰ì
(
bôcou¡îs
);

1454 i‡(
o
Ë
	`de¸RefCou¡
(o);

1455 
	}
}

1459 
	$pfdebugComm™d
(
˛õ¡
 *
c
) {

1460 *
cmd
 = 
c
->
¨gv
[1]->
±r
;

1461 
hŒhdr
 *
hdr
;

1462 
robj
 *
o
;

1463 
j
;

1465 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

1466 i‡(
o
 =
NULL
) {

1467 
	`addRïlyEº‹
(
c
,"The specified key doesÇotÉxist");

1470 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) ;

1471 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[2],o);

1472 
hdr
 = 
o
->
±r
;

1475 i‡(!
	`°rˇ£cmp
(
cmd
,"getreg")) {

1476 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1478 i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

1479 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1480 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1483 
£rvî
.
dúty
++;

1486 
hdr
 = 
o
->
±r
;

1487 
	`addRïlyMu…iBulkLí
(
c
,
HLL_REGISTERS
);

1488 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

1489 
uöt8_t
 
vÆ
;

1491 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
j
);

1492 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1496 i‡(!
	`°rˇ£cmp
(
cmd
,"decode")) {

1497 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1499 
uöt8_t
 *
p
 = 
o
->
±r
, *
íd
 =Ö+
	`sd¶í
(o->ptr);

1500 
sds
 
decoded
 = 
	`sd£m±y
();

1502 i‡(
hdr
->
ícodög
 !
HLL_SPARSE
) {

1503 
	`addRïlyEº‹
(
c
,"HLLÉncoding isÇot sparse");

1507 
p
 +
HLL_HDR_SIZE
;

1508 
p
 < 
íd
) {

1509 
ru∆í
, 
ªgvÆ
;

1511 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

1512 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

1513 
p
++;

1514 
decoded
 = 
	`sdsˇçrötf
(decoded,"z:%d ",
ru∆í
);

1515 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

1516 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

1517 
p
 += 2;

1518 
decoded
 = 
	`sdsˇçrötf
(decoded,"Z:%d ",
ru∆í
);

1520 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

1521 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

1522 
p
++;

1523 
decoded
 = 
	`sdsˇçrötf
(decoded,"v:%d,%d ",
ªgvÆ
,
ru∆í
);

1526 
decoded
 = 
	`sd°rim
(decoded," ");

1527 
	`addRïlyBulkCBuf„r
(
c
,
decoded
,
	`sd¶í
(decoded));

1528 
	`sds‰ì
(
decoded
);

1531 i‡(!
	`°rˇ£cmp
(
cmd
,"encoding")) {

1532 *
ícodög°r
[2] = {"dense","sparse"};

1533 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1535 
	`addRïlySètus
(
c
,
ícodög°r
[
hdr
->
ícodög
]);

1538 i‡(!
	`°rˇ£cmp
(
cmd
,"todense")) {

1539 
c⁄v
 = 0;

1540 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1542 i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

1543 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1544 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1547 
c⁄v
 = 1;

1548 
£rvî
.
dúty
++;

1550 
	`addRïly
(
c
,
c⁄v
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

1552 
	`addRïlyEº‹F‹m©
(
c
,"Unknow¿PFDEBUG subcomm™d '%s'", 
cmd
);

1556 
¨ôyîr
:

1557 
	`addRïlyEº‹F‹m©
(
c
,

1558 "Wr⁄gÇumbî o‡¨gumít†f‹Åhê'%s' subcomm™d",
cmd
);

1559 
	}
}

	@src/vr_hyperloglog.h

1 #i‚de‡
_VR_HYPERLOGLOG_H_


2 
	#_VR_HYPERLOGLOG_H_


	)

4 
uöt64_t
 
MurmurHash64A
 (c⁄° * 
key
, 
Àn
, 
£ed
);

5 
hŒP©Lí
(*
ñe
, 
size_t
 
ñesize
, *
ªgp
);

6 
hŒDí£Add
(
uöt8_t
 *
ªgi°îs
, *
ñe
, 
size_t
 
ñesize
);

7 
hŒDí£Sum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
);

8 
hŒS∑r£ToDí£
(
robj
 *
o
);

9 
hŒS∑r£Add
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
);

10 
hŒS∑r£Sum
(
uöt8_t
 *
•¨£
, 
•¨£Àn
, *
PE
, *
ezp
, *
övÆid
);

11 
hŒRawSum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
);

12 
hŒAdd
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
);

13 
hŒMîge
(
uöt8_t
 *
max
, 
robj
 *
hŒ
);

14 
robj
 *
¸óãHLLObje˘
();

15 
isHLLObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
);

16 
pÁddComm™d
(
˛õ¡
 *
c
);

17 
pfcou¡Comm™d
(
˛õ¡
 *
c
);

18 
pfmîgeComm™d
(
˛õ¡
 *
c
);

19 
pf£l·e°Comm™d
(
˛õ¡
 *
c
);

20 
pfdebugComm™d
(
˛õ¡
 *
c
);

	@src/vr_hyperloglog.h

1 #i‚de‡
_VR_HYPERLOGLOG_H_


2 
	#_VR_HYPERLOGLOG_H_


	)

4 
uöt64_t
 
MurmurHash64A
 (c⁄° * 
key
, 
Àn
, 
£ed
);

5 
hŒP©Lí
(*
ñe
, 
size_t
 
ñesize
, *
ªgp
);

6 
hŒDí£Add
(
uöt8_t
 *
ªgi°îs
, *
ñe
, 
size_t
 
ñesize
);

7 
hŒDí£Sum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
);

8 
hŒS∑r£ToDí£
(
robj
 *
o
);

9 
hŒS∑r£Add
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
);

10 
hŒS∑r£Sum
(
uöt8_t
 *
•¨£
, 
•¨£Àn
, *
PE
, *
ezp
, *
övÆid
);

11 
hŒRawSum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
);

12 
hŒAdd
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
);

13 
hŒMîge
(
uöt8_t
 *
max
, 
robj
 *
hŒ
);

14 
robj
 *
¸óãHLLObje˘
();

15 
isHLLObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
);

16 
pÁddComm™d
(
˛õ¡
 *
c
);

17 
pfcou¡Comm™d
(
˛õ¡
 *
c
);

18 
pfmîgeComm™d
(
˛õ¡
 *
c
);

19 
pf£l·e°Comm™d
(
˛õ¡
 *
c
);

20 
pfdebugComm™d
(
˛õ¡
 *
c
);

	@src/vr_intset.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<vr_c‹e.h
>

9 
	#INTSET_ENC_INT16
 ((
öt16_t
))

	)

10 
	#INTSET_ENC_INT32
 ((
öt32_t
))

	)

11 
	#INTSET_ENC_INT64
 ((
öt64_t
))

	)

14 
uöt8_t
 
	$_öt£tVÆueEncodög
(
öt64_t
 
v
) {

15 i‡(
v
 < 
INT32_MIN
 || v > 
INT32_MAX
)

16  
INTSET_ENC_INT64
;

17 i‡(
v
 < 
INT16_MIN
 || v > 
INT16_MAX
)

18  
INTSET_ENC_INT32
;

20  
INTSET_ENC_INT16
;

21 
	}
}

24 
öt64_t
 
	$_öt£tGëEncoded
(
öt£t
 *
is
, 
pos
, 
uöt8_t
 
íc
) {

25 
öt64_t
 
v64
;

26 
öt32_t
 
v32
;

27 
öt16_t
 
v16
;

29 i‡(
íc
 =
INTSET_ENC_INT64
) {

30 
	`mem˝y
(&
v64
,((
öt64_t
*)
is
->
c⁄ã¡s
)+
pos
,(v64));

31 
	`memªv64ifbe
(&
v64
);

32  
v64
;

33 } i‡(
íc
 =
INTSET_ENC_INT32
) {

34 
	`mem˝y
(&
v32
,((
öt32_t
*)
is
->
c⁄ã¡s
)+
pos
,(v32));

35 
	`memªv32ifbe
(&
v32
);

36  
v32
;

38 
	`mem˝y
(&
v16
,((
öt16_t
*)
is
->
c⁄ã¡s
)+
pos
,(v16));

39 
	`memªv16ifbe
(&
v16
);

40  
v16
;

42 
	}
}

45 
öt64_t
 
	$_öt£tGë
(
öt£t
 *
is
, 
pos
) {

46  
	`_öt£tGëEncoded
(
is
,
pos
,
	`öåev32ifbe
(is->
ícodög
));

47 
	}
}

50 
	$_öt£tSë
(
öt£t
 *
is
, 
pos
, 
öt64_t
 
vÆue
) {

51 
uöt32_t
 
ícodög
 = 
	`öåev32ifbe
(
is
->encoding);

53 i‡(
ícodög
 =
INTSET_ENC_INT64
) {

54 ((
öt64_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

55 
	`memªv64ifbe
(((
öt64_t
*)
is
->
c⁄ã¡s
)+
pos
);

56 } i‡(
ícodög
 =
INTSET_ENC_INT32
) {

57 ((
öt32_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

58 
	`memªv32ifbe
(((
öt32_t
*)
is
->
c⁄ã¡s
)+
pos
);

60 ((
öt16_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

61 
	`memªv16ifbe
(((
öt16_t
*)
is
->
c⁄ã¡s
)+
pos
);

63 
	}
}

66 
öt£t
 *
	$öt£tNew
() {

67 
öt£t
 *
is
 = 
	`dÆloc
((intset));

68 
is
->
ícodög
 = 
	`öåev32ifbe
(
INTSET_ENC_INT16
);

69 
is
->
Àngth
 = 0;

70  
is
;

71 
	}
}

74 
öt£t
 *
	$öt£tResize
(
öt£t
 *
is
, 
uöt32_t
 
Àn
) {

75 
uöt32_t
 
size
 = 
Àn
*
	`öåev32ifbe
(
is
->
ícodög
);

76 
is
 = 
	`dªÆloc
(is,(
öt£t
)+
size
);

77  
is
;

78 
	}
}

84 
uöt8_t
 
	$öt£tSórch
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, 
uöt32_t
 *
pos
) {

85 
mö
 = 0, 
max
 = 
	`öåev32ifbe
(
is
->
Àngth
)-1, 
mid
 = -1;

86 
öt64_t
 
cur
 = -1;

89 i‡(
	`öåev32ifbe
(
is
->
Àngth
) == 0) {

90 i‡(
pos
) *pos = 0;

95 i‡(
vÆue
 > 
	`_öt£tGë
(
is
,
	`öåev32ifbe
(is->
Àngth
)-1)) {

96 i‡(
pos
Ë*po†
	`öåev32ifbe
(
is
->
Àngth
);

98 } i‡(
vÆue
 < 
	`_öt£tGë
(
is
,0)) {

99 i‡(
pos
) *pos = 0;

104 
max
 >
mö
) {

105 
mid
 = (()
mö
 + ()
max
) >> 1;

106 
cur
 = 
	`_öt£tGë
(
is
,
mid
);

107 i‡(
vÆue
 > 
cur
) {

108 
mö
 = 
mid
+1;

109 } i‡(
vÆue
 < 
cur
) {

110 
max
 = 
mid
-1;

116 i‡(
vÆue
 =
cur
) {

117 i‡(
pos
Ë*po†
mid
;

120 i‡(
pos
Ë*po†
mö
;

123 
	}
}

126 
öt£t
 *
	$öt£tUpgødeAndAdd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
) {

127 
uöt8_t
 
cuªnc
 = 
	`öåev32ifbe
(
is
->
ícodög
);

128 
uöt8_t
 
√wíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

129 
Àngth
 = 
	`öåev32ifbe
(
is
->length);

130 
¥ïíd
 = 
vÆue
 < 0 ? 1 : 0;

133 
is
->
ícodög
 = 
	`öåev32ifbe
(
√wíc
);

134 
is
 = 
	`öt£tResize
(is,
	`öåev32ifbe
(is->
Àngth
)+1);

139 
Àngth
--)

140 
	`_öt£tSë
(
is
,
Àngth
+
¥ïíd
,
	`_öt£tGëEncoded
(is,Àngth,
cuªnc
));

143 i‡(
¥ïíd
)

144 
	`_öt£tSë
(
is
,0,
vÆue
);

146 
	`_öt£tSë
(
is
,
	`öåev32ifbe
(is->
Àngth
),
vÆue
);

147 
is
->
Àngth
 = 
	`öåev32ifbe
(intrev32ifbe(is->length)+1);

148  
is
;

149 
	}
}

151 
	$öt£tMoveTaû
(
öt£t
 *
is
, 
uöt32_t
 
‰om
, uöt32_à
to
) {

152 *
§c
, *
d°
;

153 
uöt32_t
 
byãs
 = 
	`öåev32ifbe
(
is
->
Àngth
)-
‰om
;

154 
uöt32_t
 
ícodög
 = 
	`öåev32ifbe
(
is
->encoding);

156 i‡(
ícodög
 =
INTSET_ENC_INT64
) {

157 
§c
 = (
öt64_t
*)
is
->
c⁄ã¡s
+
‰om
;

158 
d°
 = (
öt64_t
*)
is
->
c⁄ã¡s
+
to
;

159 
byãs
 *(
öt64_t
);

160 } i‡(
ícodög
 =
INTSET_ENC_INT32
) {

161 
§c
 = (
öt32_t
*)
is
->
c⁄ã¡s
+
‰om
;

162 
d°
 = (
öt32_t
*)
is
->
c⁄ã¡s
+
to
;

163 
byãs
 *(
öt32_t
);

165 
§c
 = (
öt16_t
*)
is
->
c⁄ã¡s
+
‰om
;

166 
d°
 = (
öt16_t
*)
is
->
c⁄ã¡s
+
to
;

167 
byãs
 *(
öt16_t
);

169 
	`memmove
(
d°
,
§c
,
byãs
);

170 
	}
}

173 
öt£t
 *
	$öt£tAdd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, 
uöt8_t
 *
suc˚ss
) {

174 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

175 
uöt32_t
 
pos
;

176 i‡(
suc˚ss
) *success = 1;

181 i‡(
vÆíc
 > 
	`öåev32ifbe
(
is
->
ícodög
)) {

183  
	`öt£tUpgødeAndAdd
(
is
,
vÆue
);

188 i‡(
	`öt£tSórch
(
is
,
vÆue
,&
pos
)) {

189 i‡(
suc˚ss
) *success = 0;

190  
is
;

193 
is
 = 
	`öt£tResize
(is,
	`öåev32ifbe
(is->
Àngth
)+1);

194 i‡(
pos
 < 
	`öåev32ifbe
(
is
->
Àngth
)Ë
	`öt£tMoveTaû
(is,pos,pos+1);

197 
	`_öt£tSë
(
is
,
pos
,
vÆue
);

198 
is
->
Àngth
 = 
	`öåev32ifbe
(intrev32ifbe(is->length)+1);

199  
is
;

200 
	}
}

203 
öt£t
 *
	$öt£tRemove
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, *
suc˚ss
) {

204 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

205 
uöt32_t
 
pos
;

206 i‡(
suc˚ss
) *success = 0;

208 i‡(
vÆíc
 <
	`öåev32ifbe
(
is
->
ícodög
Ë&& 
	`öt£tSórch
(is,
vÆue
,&
pos
)) {

209 
uöt32_t
 
Àn
 = 
	`öåev32ifbe
(
is
->
Àngth
);

212 i‡(
suc˚ss
) *success = 1;

215 i‡(
pos
 < (
Àn
-1)Ë
	`öt£tMoveTaû
(
is
,pos+1,pos);

216 
is
 = 
	`öt£tResize
(is,
Àn
-1);

217 
is
->
Àngth
 = 
	`öåev32ifbe
(
Àn
-1);

219  
is
;

220 
	}
}

223 
uöt8_t
 
	$öt£tFöd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
) {

224 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

225  
vÆíc
 <
	`öåev32ifbe
(
is
->
ícodög
Ë&& 
	`öt£tSórch
(is,
vÆue
,
NULL
);

226 
	}
}

229 
öt64_t
 
	$öt£tR™dom
(
öt£t
 *
is
) {

230  
	`_öt£tGë
(
is
,
	`ønd
()%
	`öåev32ifbe
(is->
Àngth
));

231 
	}
}

235 
uöt8_t
 
	$öt£tGë
(
öt£t
 *
is
, 
uöt32_t
 
pos
, 
öt64_t
 *
vÆue
) {

236 i‡(
pos
 < 
	`öåev32ifbe
(
is
->
Àngth
)) {

237 *
vÆue
 = 
	`_öt£tGë
(
is
,
pos
);

241 
	}
}

244 
uöt32_t
 
	$öt£tLí
(
öt£t
 *
is
) {

245  
	`öåev32ifbe
(
is
->
Àngth
);

246 
	}
}

249 
size_t
 
	$öt£tBlobLí
(
öt£t
 *
is
) {

250  (
öt£t
)+
	`öåev32ifbe
(
is
->
Àngth
)*öåev32ifbe(is->
ícodög
);

251 
	}
}

	@src/vr_intset.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<vr_c‹e.h
>

9 
	#INTSET_ENC_INT16
 ((
öt16_t
))

	)

10 
	#INTSET_ENC_INT32
 ((
öt32_t
))

	)

11 
	#INTSET_ENC_INT64
 ((
öt64_t
))

	)

14 
uöt8_t
 
	$_öt£tVÆueEncodög
(
öt64_t
 
v
) {

15 i‡(
v
 < 
INT32_MIN
 || v > 
INT32_MAX
)

16  
INTSET_ENC_INT64
;

17 i‡(
v
 < 
INT16_MIN
 || v > 
INT16_MAX
)

18  
INTSET_ENC_INT32
;

20  
INTSET_ENC_INT16
;

21 
	}
}

24 
öt64_t
 
	$_öt£tGëEncoded
(
öt£t
 *
is
, 
pos
, 
uöt8_t
 
íc
) {

25 
öt64_t
 
v64
;

26 
öt32_t
 
v32
;

27 
öt16_t
 
v16
;

29 i‡(
íc
 =
INTSET_ENC_INT64
) {

30 
	`mem˝y
(&
v64
,((
öt64_t
*)
is
->
c⁄ã¡s
)+
pos
,(v64));

31 
	`memªv64ifbe
(&
v64
);

32  
v64
;

33 } i‡(
íc
 =
INTSET_ENC_INT32
) {

34 
	`mem˝y
(&
v32
,((
öt32_t
*)
is
->
c⁄ã¡s
)+
pos
,(v32));

35 
	`memªv32ifbe
(&
v32
);

36  
v32
;

38 
	`mem˝y
(&
v16
,((
öt16_t
*)
is
->
c⁄ã¡s
)+
pos
,(v16));

39 
	`memªv16ifbe
(&
v16
);

40  
v16
;

42 
	}
}

45 
öt64_t
 
	$_öt£tGë
(
öt£t
 *
is
, 
pos
) {

46  
	`_öt£tGëEncoded
(
is
,
pos
,
	`öåev32ifbe
(is->
ícodög
));

47 
	}
}

50 
	$_öt£tSë
(
öt£t
 *
is
, 
pos
, 
öt64_t
 
vÆue
) {

51 
uöt32_t
 
ícodög
 = 
	`öåev32ifbe
(
is
->encoding);

53 i‡(
ícodög
 =
INTSET_ENC_INT64
) {

54 ((
öt64_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

55 
	`memªv64ifbe
(((
öt64_t
*)
is
->
c⁄ã¡s
)+
pos
);

56 } i‡(
ícodög
 =
INTSET_ENC_INT32
) {

57 ((
öt32_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

58 
	`memªv32ifbe
(((
öt32_t
*)
is
->
c⁄ã¡s
)+
pos
);

60 ((
öt16_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

61 
	`memªv16ifbe
(((
öt16_t
*)
is
->
c⁄ã¡s
)+
pos
);

63 
	}
}

66 
öt£t
 *
	$öt£tNew
() {

67 
öt£t
 *
is
 = 
	`dÆloc
((intset));

68 
is
->
ícodög
 = 
	`öåev32ifbe
(
INTSET_ENC_INT16
);

69 
is
->
Àngth
 = 0;

70  
is
;

71 
	}
}

74 
öt£t
 *
	$öt£tResize
(
öt£t
 *
is
, 
uöt32_t
 
Àn
) {

75 
uöt32_t
 
size
 = 
Àn
*
	`öåev32ifbe
(
is
->
ícodög
);

76 
is
 = 
	`dªÆloc
(is,(
öt£t
)+
size
);

77  
is
;

78 
	}
}

84 
uöt8_t
 
	$öt£tSórch
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, 
uöt32_t
 *
pos
) {

85 
mö
 = 0, 
max
 = 
	`öåev32ifbe
(
is
->
Àngth
)-1, 
mid
 = -1;

86 
öt64_t
 
cur
 = -1;

89 i‡(
	`öåev32ifbe
(
is
->
Àngth
) == 0) {

90 i‡(
pos
) *pos = 0;

95 i‡(
vÆue
 > 
	`_öt£tGë
(
is
,
	`öåev32ifbe
(is->
Àngth
)-1)) {

96 i‡(
pos
Ë*po†
	`öåev32ifbe
(
is
->
Àngth
);

98 } i‡(
vÆue
 < 
	`_öt£tGë
(
is
,0)) {

99 i‡(
pos
) *pos = 0;

104 
max
 >
mö
) {

105 
mid
 = (()
mö
 + ()
max
) >> 1;

106 
cur
 = 
	`_öt£tGë
(
is
,
mid
);

107 i‡(
vÆue
 > 
cur
) {

108 
mö
 = 
mid
+1;

109 } i‡(
vÆue
 < 
cur
) {

110 
max
 = 
mid
-1;

116 i‡(
vÆue
 =
cur
) {

117 i‡(
pos
Ë*po†
mid
;

120 i‡(
pos
Ë*po†
mö
;

123 
	}
}

126 
öt£t
 *
	$öt£tUpgødeAndAdd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
) {

127 
uöt8_t
 
cuªnc
 = 
	`öåev32ifbe
(
is
->
ícodög
);

128 
uöt8_t
 
√wíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

129 
Àngth
 = 
	`öåev32ifbe
(
is
->length);

130 
¥ïíd
 = 
vÆue
 < 0 ? 1 : 0;

133 
is
->
ícodög
 = 
	`öåev32ifbe
(
√wíc
);

134 
is
 = 
	`öt£tResize
(is,
	`öåev32ifbe
(is->
Àngth
)+1);

139 
Àngth
--)

140 
	`_öt£tSë
(
is
,
Àngth
+
¥ïíd
,
	`_öt£tGëEncoded
(is,Àngth,
cuªnc
));

143 i‡(
¥ïíd
)

144 
	`_öt£tSë
(
is
,0,
vÆue
);

146 
	`_öt£tSë
(
is
,
	`öåev32ifbe
(is->
Àngth
),
vÆue
);

147 
is
->
Àngth
 = 
	`öåev32ifbe
(intrev32ifbe(is->length)+1);

148  
is
;

149 
	}
}

151 
	$öt£tMoveTaû
(
öt£t
 *
is
, 
uöt32_t
 
‰om
, uöt32_à
to
) {

152 *
§c
, *
d°
;

153 
uöt32_t
 
byãs
 = 
	`öåev32ifbe
(
is
->
Àngth
)-
‰om
;

154 
uöt32_t
 
ícodög
 = 
	`öåev32ifbe
(
is
->encoding);

156 i‡(
ícodög
 =
INTSET_ENC_INT64
) {

157 
§c
 = (
öt64_t
*)
is
->
c⁄ã¡s
+
‰om
;

158 
d°
 = (
öt64_t
*)
is
->
c⁄ã¡s
+
to
;

159 
byãs
 *(
öt64_t
);

160 } i‡(
ícodög
 =
INTSET_ENC_INT32
) {

161 
§c
 = (
öt32_t
*)
is
->
c⁄ã¡s
+
‰om
;

162 
d°
 = (
öt32_t
*)
is
->
c⁄ã¡s
+
to
;

163 
byãs
 *(
öt32_t
);

165 
§c
 = (
öt16_t
*)
is
->
c⁄ã¡s
+
‰om
;

166 
d°
 = (
öt16_t
*)
is
->
c⁄ã¡s
+
to
;

167 
byãs
 *(
öt16_t
);

169 
	`memmove
(
d°
,
§c
,
byãs
);

170 
	}
}

173 
öt£t
 *
	$öt£tAdd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, 
uöt8_t
 *
suc˚ss
) {

174 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

175 
uöt32_t
 
pos
;

176 i‡(
suc˚ss
) *success = 1;

181 i‡(
vÆíc
 > 
	`öåev32ifbe
(
is
->
ícodög
)) {

183  
	`öt£tUpgødeAndAdd
(
is
,
vÆue
);

188 i‡(
	`öt£tSórch
(
is
,
vÆue
,&
pos
)) {

189 i‡(
suc˚ss
) *success = 0;

190  
is
;

193 
is
 = 
	`öt£tResize
(is,
	`öåev32ifbe
(is->
Àngth
)+1);

194 i‡(
pos
 < 
	`öåev32ifbe
(
is
->
Àngth
)Ë
	`öt£tMoveTaû
(is,pos,pos+1);

197 
	`_öt£tSë
(
is
,
pos
,
vÆue
);

198 
is
->
Àngth
 = 
	`öåev32ifbe
(intrev32ifbe(is->length)+1);

199  
is
;

200 
	}
}

203 
öt£t
 *
	$öt£tRemove
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, *
suc˚ss
) {

204 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

205 
uöt32_t
 
pos
;

206 i‡(
suc˚ss
) *success = 0;

208 i‡(
vÆíc
 <
	`öåev32ifbe
(
is
->
ícodög
Ë&& 
	`öt£tSórch
(is,
vÆue
,&
pos
)) {

209 
uöt32_t
 
Àn
 = 
	`öåev32ifbe
(
is
->
Àngth
);

212 i‡(
suc˚ss
) *success = 1;

215 i‡(
pos
 < (
Àn
-1)Ë
	`öt£tMoveTaû
(
is
,pos+1,pos);

216 
is
 = 
	`öt£tResize
(is,
Àn
-1);

217 
is
->
Àngth
 = 
	`öåev32ifbe
(
Àn
-1);

219  
is
;

220 
	}
}

223 
uöt8_t
 
	$öt£tFöd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
) {

224 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

225  
vÆíc
 <
	`öåev32ifbe
(
is
->
ícodög
Ë&& 
	`öt£tSórch
(is,
vÆue
,
NULL
);

226 
	}
}

229 
öt64_t
 
	$öt£tR™dom
(
öt£t
 *
is
) {

230  
	`_öt£tGë
(
is
,
	`ønd
()%
	`öåev32ifbe
(is->
Àngth
));

231 
	}
}

235 
uöt8_t
 
	$öt£tGë
(
öt£t
 *
is
, 
uöt32_t
 
pos
, 
öt64_t
 *
vÆue
) {

236 i‡(
pos
 < 
	`öåev32ifbe
(
is
->
Àngth
)) {

237 *
vÆue
 = 
	`_öt£tGë
(
is
,
pos
);

241 
	}
}

244 
uöt32_t
 
	$öt£tLí
(
öt£t
 *
is
) {

245  
	`öåev32ifbe
(
is
->
Àngth
);

246 
	}
}

249 
size_t
 
	$öt£tBlobLí
(
öt£t
 *
is
) {

250  (
öt£t
)+
	`öåev32ifbe
(
is
->
Àngth
)*öåev32ifbe(is->
ícodög
);

251 
	}
}

	@src/vr_intset.h

1 #i‚de‡
_VR_INTSET_H_


2 
	#_VR_INTSET_H_


	)

4 
	~<°döt.h
>

6 
	söt£t
 {

7 
uöt32_t
 
	mícodög
;

8 
uöt32_t
 
	mÀngth
;

9 
öt8_t
 
	mc⁄ã¡s
[];

10 } 
	töt£t
;

12 
öt£t
 *
öt£tNew
();

13 
öt£t
 *
öt£tAdd
(öt£à*
is
, 
öt64_t
 
vÆue
, 
uöt8_t
 *
suc˚ss
);

14 
öt£t
 *
öt£tRemove
(öt£à*
is
, 
öt64_t
 
vÆue
, *
suc˚ss
);

15 
uöt8_t
 
öt£tFöd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
);

16 
öt64_t
 
öt£tR™dom
(
öt£t
 *
is
);

17 
uöt8_t
 
öt£tGë
(
öt£t
 *
is
, 
uöt32_t
 
pos
, 
öt64_t
 *
vÆue
);

18 
uöt32_t
 
öt£tLí
(
öt£t
 *
is
);

19 
size_t
 
öt£tBlobLí
(
öt£t
 *
is
);

	@src/vr_intset.h

1 #i‚de‡
_VR_INTSET_H_


2 
	#_VR_INTSET_H_


	)

4 
	~<°döt.h
>

6 
	söt£t
 {

7 
uöt32_t
 
	mícodög
;

8 
uöt32_t
 
	mÀngth
;

9 
öt8_t
 
	mc⁄ã¡s
[];

10 } 
	töt£t
;

12 
öt£t
 *
öt£tNew
();

13 
öt£t
 *
öt£tAdd
(öt£à*
is
, 
öt64_t
 
vÆue
, 
uöt8_t
 *
suc˚ss
);

14 
öt£t
 *
öt£tRemove
(öt£à*
is
, 
öt64_t
 
vÆue
, *
suc˚ss
);

15 
uöt8_t
 
öt£tFöd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
);

16 
öt64_t
 
öt£tR™dom
(
öt£t
 *
is
);

17 
uöt8_t
 
öt£tGë
(
öt£t
 *
is
, 
uöt32_t
 
pos
, 
öt64_t
 *
vÆue
);

18 
uöt32_t
 
öt£tLí
(
öt£t
 *
is
);

19 
size_t
 
öt£tBlobLí
(
öt£t
 *
is
);

	@src/vr_listen.c

1 
	~<sys/°©.h
>

2 
	~<sys/un.h
>

4 
	~<vr_c‹e.h
>

7 
vr_li°í
 *

8 
	$vr_li°í_¸óã
(
sds
 
li°í_°r
)

10 
r°©us_t
 
°©us
;

11 
vr_li°í
 *
vli°í
;

12 
uöt8_t
 *
p
, *
«me
;

13 
uöt32_t
 
«mñí
;

15 i‡(
li°í_°r
 =
NULL
) {

16  
NULL
;

19 
vli°í
 = 
	`dÆloc
((
vr_li°í
));

20 i‡(
vli°í
 =
NULL
) {

21  
NULL
;

24 
vli°í
->
«me
 = 
NULL
;

25 
vli°í
->
p‹t
 = 0;

26 
	`mem£t
(&
vli°í
->
öfo
, 0, (vlisten->info));

27 
vli°í
->
sd
 = -1;

29 i‡(
li°í_°r
 == '/') {

30 
uöt8_t
 *
q
, *
°¨t
, *
≥rm
;

31 
uöt32_t
 
≥rmÀn
;

34 
p
 = 
li°í_°r
 + 
	`sd¶í
(listen_str) - 1;

35 
°¨t
 = 
li°í_°r
;

36 
q
 = 
	`vr_°ºchr
(
p
, 
°¨t
, ' ');

37 i‡(
q
 =
NULL
) {

39 
«me
 = 
li°í_°r
;

40 
«mñí
 = 
	`sd¶í
(
li°í_°r
);

42 
≥rm
 = 
q
 + 1;

43 
≥rmÀn
 = (
uöt32_t
)(
p
 - 
≥rm
 + 1);

45 
p
 = 
q
 - 1;

46 
«me
 = 
°¨t
;

47 
«mñí
 = (
uöt32_t
)(
p
 - 
°¨t
 + 1);

49 
î∫o
 = 0;

50 
vli°í
->
≥rm
 = (
mode_t
)
	`°πﬁ
((*Ìîm, 
NULL
, 8);

51 i‡(
î∫o
 || 
vli°í
->
≥rm
 > 0777) {

52 
	`log_îr‹
("config file hasán invalid fileÖermission in \"socket_pathÖermission\" format string");

53 
	`vr_li°í_de°roy
(
vli°í
);

54  
NULL
;

58 
uöt8_t
 *
q
, *
°¨t
, *
p‹t
;

59 
uöt32_t
 
p‹éí
;

62 
p
 = 
li°í_°r
 + 
	`sd¶í
(listen_str) - 1;

63 
°¨t
 = 
li°í_°r
;

64 
q
 = 
	`vr_°ºchr
(
p
, 
°¨t
, ':');

65 i‡(
q
 =
NULL
) {

66 
	`log_îr‹
("config file hasán invalid \"hostname:port\" format string");

67 
	`vr_li°í_de°roy
(
vli°í
);

68  
NULL
;

71 
p‹t
 = 
q
 + 1;

72 
p‹éí
 = (
uöt32_t
)(
p
 - 
p‹t
 + 1);

74 
p
 = 
q
 - 1;

76 
«me
 = 
°¨t
;

77 
«mñí
 = (
uöt32_t
)(
p
 - 
°¨t
 + 1);

79 
vli°í
->
p‹t
 = 
	`vr_©oi
’‹t, 
p‹éí
);

80 i‡(
vli°í
->
p‹t
 < 0 || !
	`vr_vÆid_p‹t
(vlisten->port)) {

81 
	`log_îr‹
("config file hasán invalidÖort in \"hostname:port\" format string");

82 
	`vr_li°í_de°roy
(
vli°í
);

83  
NULL
;

87 
vli°í
->
«me
 = 
	`sd¢ewÀn
“ame, 
«mñí
);

88 i‡(
vli°í
->
«me
 =
NULL
) {

89 
	`log_îr‹
("createá sds string failed: out of memory.");

90 
	`vr_li°í_de°roy
(
vli°í
);

91  
NULL
;

94 
°©us
 = 
	`vr_ªsﬁve
(
vli°í
->
«me
, vli°í->
p‹t
, &vli°í->
öfo
);

95 i‡(
°©us
 !
VR_OK
) {

96 
	`vr_li°í_de°roy
(
vli°í
);

97  
NULL
;

100  
vli°í
;

101 
	}
}

104 
	$vr_li°í_de°roy
(
vr_li°í
 *
vli°⁄
)

106 i‡(
vli°⁄
 =
NULL
) {

110 i‡(
vli°⁄
->
«me
) {

111 
	`sds‰ì
(
vli°⁄
->
«me
);

112 
vli°⁄
->
«me
 = 
NULL
;

115 i‡(
vli°⁄
->
sd
 > 0) {

116 
	`˛o£
(
vli°⁄
->
sd
);

117 
vli°⁄
->
sd
 = -1;

120 
	`d‰ì
(
vli°⁄
);

121 
	}
}

123 
r°©us_t


124 
	$vr_li°í_ªu£
(
vr_li°í
 *
p
)

126 
r°©us_t
 
°©us
;

127 
sockaddr_un
 *
un
;

129 
p
->
öfo
.
Ámûy
) {

130 
AF_INET
:

131 
AF_INET6
:

132 
°©us
 = 
	`vr_£t_ªu£addr
(
p
->
sd
);

135 
AF_UNIX
:

141 
un
 = (
sockaddr_un
 *Ë&
p
->
öfo
.
addr
;

142 
	`u∆ök
(
un
->
sun_∑th
);

143 
°©us
 = 
VR_OK
;

147 
	`NOT_REACHED
();

148 
°©us
 = 
VR_ERROR
;

151  
°©us
;

152 
	}
}

154 
r°©us_t


155 
	$vr_li°í_begö
(
vr_li°í
 *
vli°í
)

157 
r°©us_t
 
°©us
;

159 
vli°í
->
sd
 = 
	`sockë
(vli°í->
öfo
.
Ámûy
, 
SOCK_STREAM
, 0);

160 i‡(
vli°í
->
sd
 < 0) {

161 
	`log_îr‹
("sockë faûed: %s", 
	`°ªº‹
(
î∫o
));

162  
VR_ERROR
;

165 
°©us
 = 
	`vr_li°í_ªu£
(
vli°í
);

166 i‡(
°©us
 < 0) {

167 
	`log_îr‹
("reuse ofáddr %s forÜistening onÖ %d failed: %s",

168 
vli°í
->
«me
, vli°í->
sd
, 
	`°ªº‹
(
î∫o
));

169  
VR_ERROR
;

172 
°©us
 = 
	`böd
(
vli°í
->
sd
, (
sockaddr
 *)&vli°í->
öfo
.
addr
, vli°í->öfo.
addæí
);

173 i‡(
°©us
 < 0) {

174 
	`log_îr‹
("böd o¿∞%dÅÿadd∏%†Áûed: %s", 
vli°í
->
sd
,

175 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

176  
VR_ERROR
;

179 i‡(
vli°í
->
öfo
.
Ámûy
 =
AF_UNIX
 && vli°í->
≥rm
) {

180 
sockaddr_un
 *
un
 = (sockaddr_u¿*)&
vli°í
->
öfo
.
addr
;

181 
°©us
 = 
	`chmod
(
un
->
sun_∑th
, 
vli°í
->
≥rm
);

182 i‡(
°©us
 < 0) {

183 
	`log_îr‹
("chmod o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

184 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

185  
VR_ERROR
;

189 
°©us
 = 
	`li°í
(
vli°í
->
sd
, 512);

190 i‡(
°©us
 < 0) {

191 
	`log_îr‹
("li°í o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

192 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

193  
VR_ERROR
;

196 
°©us
 = 
	`vr_£t_n⁄blockög
(
vli°í
->
sd
);

197 i‡(
°©us
 < 0) {

198 
	`log_îr‹
("£àn⁄block o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

199 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

200  
VR_ERROR
;

203  
VR_OK
;

204 
	}
}

207 
	$vr_li°í_ac˚±
(
vr_li°í
 *
vli°í
)

209 
r°©us_t
 
°©us
;

210 
sd
;

211 
max˛õ¡s
;

213 
	`ASSERT
(
vli°í
->
sd
 > 0);

215 
	`log_debug
(
LOG_DEBUG
,"client_accept");

217 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
max˛õ¡s
);

220 
sd
 = 
	`ac˚±
(
vli°í
->sd, 
NULL
, NULL);

221 i‡(
sd
 < 0) {

222 i‡(
î∫o
 =
EINTR
) {

223 
	`log_debug
(
LOG_VERB
, "ac˚± o¿∞%dÇŸÑódy -Éöå", 
vli°í
->
sd
);

227 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||Éºnÿ=
ECONNABORTED
) {

228 
	`log_debug
(
LOG_VERB
, "ac˚± o¿∞%dÇŸÑódy -Éagaö", 
vli°í
->
sd
);

232 i‡(
î∫o
 =
EMFILE
 ||Éºnÿ=
ENFILE
) {

233 
	`log_debug
(
LOG_CRIT
, "accept onÖ %d "

236 
vli°í
->
sd
, 
max˛õ¡s
,

237 
	`cuºít_˛õ¡s
(), 
	`°ªº‹
(
î∫o
));

241 
	`log_w¨n
("ac˚± o¿∞%d faûed: %s", 
vli°í
->
sd
, 
	`°ªº‹
(
î∫o
));

249 i‡(
	`cuºít_˛õ¡s
(Ë>
max˛õ¡s
) {

250 
	`log_debug
(
LOG_CRIT
, "client connections %dÉxceedÜimit %d",

251 
	`cuºít_˛õ¡s
(), 
max˛õ¡s
);

252 
°©us
 = 
	`˛o£
(
sd
);

253 i‡(
°©us
 < 0) {

254 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

257 
	`upd©e_°©s_add
(
ma°î
.
vñ
.
°©s
, 
ªje˘ed_c⁄n
, 1);

262  
sd
;

263 
	}
}

	@src/vr_listen.c

1 
	~<sys/°©.h
>

2 
	~<sys/un.h
>

4 
	~<vr_c‹e.h
>

7 
vr_li°í
 *

8 
	$vr_li°í_¸óã
(
sds
 
li°í_°r
)

10 
r°©us_t
 
°©us
;

11 
vr_li°í
 *
vli°í
;

12 
uöt8_t
 *
p
, *
«me
;

13 
uöt32_t
 
«mñí
;

15 i‡(
li°í_°r
 =
NULL
) {

16  
NULL
;

19 
vli°í
 = 
	`dÆloc
((
vr_li°í
));

20 i‡(
vli°í
 =
NULL
) {

21  
NULL
;

24 
vli°í
->
«me
 = 
NULL
;

25 
vli°í
->
p‹t
 = 0;

26 
	`mem£t
(&
vli°í
->
öfo
, 0, (vlisten->info));

27 
vli°í
->
sd
 = -1;

29 i‡(
li°í_°r
 == '/') {

30 
uöt8_t
 *
q
, *
°¨t
, *
≥rm
;

31 
uöt32_t
 
≥rmÀn
;

34 
p
 = 
li°í_°r
 + 
	`sd¶í
(listen_str) - 1;

35 
°¨t
 = 
li°í_°r
;

36 
q
 = 
	`vr_°ºchr
(
p
, 
°¨t
, ' ');

37 i‡(
q
 =
NULL
) {

39 
«me
 = 
li°í_°r
;

40 
«mñí
 = 
	`sd¶í
(
li°í_°r
);

42 
≥rm
 = 
q
 + 1;

43 
≥rmÀn
 = (
uöt32_t
)(
p
 - 
≥rm
 + 1);

45 
p
 = 
q
 - 1;

46 
«me
 = 
°¨t
;

47 
«mñí
 = (
uöt32_t
)(
p
 - 
°¨t
 + 1);

49 
î∫o
 = 0;

50 
vli°í
->
≥rm
 = (
mode_t
)
	`°πﬁ
((*Ìîm, 
NULL
, 8);

51 i‡(
î∫o
 || 
vli°í
->
≥rm
 > 0777) {

52 
	`log_îr‹
("config file hasán invalid fileÖermission in \"socket_pathÖermission\" format string");

53 
	`vr_li°í_de°roy
(
vli°í
);

54  
NULL
;

58 
uöt8_t
 *
q
, *
°¨t
, *
p‹t
;

59 
uöt32_t
 
p‹éí
;

62 
p
 = 
li°í_°r
 + 
	`sd¶í
(listen_str) - 1;

63 
°¨t
 = 
li°í_°r
;

64 
q
 = 
	`vr_°ºchr
(
p
, 
°¨t
, ':');

65 i‡(
q
 =
NULL
) {

66 
	`log_îr‹
("config file hasán invalid \"hostname:port\" format string");

67 
	`vr_li°í_de°roy
(
vli°í
);

68  
NULL
;

71 
p‹t
 = 
q
 + 1;

72 
p‹éí
 = (
uöt32_t
)(
p
 - 
p‹t
 + 1);

74 
p
 = 
q
 - 1;

76 
«me
 = 
°¨t
;

77 
«mñí
 = (
uöt32_t
)(
p
 - 
°¨t
 + 1);

79 
vli°í
->
p‹t
 = 
	`vr_©oi
’‹t, 
p‹éí
);

80 i‡(
vli°í
->
p‹t
 < 0 || !
	`vr_vÆid_p‹t
(vlisten->port)) {

81 
	`log_îr‹
("config file hasán invalidÖort in \"hostname:port\" format string");

82 
	`vr_li°í_de°roy
(
vli°í
);

83  
NULL
;

87 
vli°í
->
«me
 = 
	`sd¢ewÀn
“ame, 
«mñí
);

88 i‡(
vli°í
->
«me
 =
NULL
) {

89 
	`log_îr‹
("createá sds string failed: out of memory.");

90 
	`vr_li°í_de°roy
(
vli°í
);

91  
NULL
;

94 
°©us
 = 
	`vr_ªsﬁve
(
vli°í
->
«me
, vli°í->
p‹t
, &vli°í->
öfo
);

95 i‡(
°©us
 !
VR_OK
) {

96 
	`vr_li°í_de°roy
(
vli°í
);

97  
NULL
;

100  
vli°í
;

101 
	}
}

104 
	$vr_li°í_de°roy
(
vr_li°í
 *
vli°⁄
)

106 i‡(
vli°⁄
 =
NULL
) {

110 i‡(
vli°⁄
->
«me
) {

111 
	`sds‰ì
(
vli°⁄
->
«me
);

112 
vli°⁄
->
«me
 = 
NULL
;

115 i‡(
vli°⁄
->
sd
 > 0) {

116 
	`˛o£
(
vli°⁄
->
sd
);

117 
vli°⁄
->
sd
 = -1;

120 
	`d‰ì
(
vli°⁄
);

121 
	}
}

123 
r°©us_t


124 
	$vr_li°í_ªu£
(
vr_li°í
 *
p
)

126 
r°©us_t
 
°©us
;

127 
sockaddr_un
 *
un
;

129 
p
->
öfo
.
Ámûy
) {

130 
AF_INET
:

131 
AF_INET6
:

132 
°©us
 = 
	`vr_£t_ªu£addr
(
p
->
sd
);

135 
AF_UNIX
:

141 
un
 = (
sockaddr_un
 *Ë&
p
->
öfo
.
addr
;

142 
	`u∆ök
(
un
->
sun_∑th
);

143 
°©us
 = 
VR_OK
;

147 
	`NOT_REACHED
();

148 
°©us
 = 
VR_ERROR
;

151  
°©us
;

152 
	}
}

154 
r°©us_t


155 
	$vr_li°í_begö
(
vr_li°í
 *
vli°í
)

157 
r°©us_t
 
°©us
;

159 
vli°í
->
sd
 = 
	`sockë
(vli°í->
öfo
.
Ámûy
, 
SOCK_STREAM
, 0);

160 i‡(
vli°í
->
sd
 < 0) {

161 
	`log_îr‹
("sockë faûed: %s", 
	`°ªº‹
(
î∫o
));

162  
VR_ERROR
;

165 
°©us
 = 
	`vr_li°í_ªu£
(
vli°í
);

166 i‡(
°©us
 < 0) {

167 
	`log_îr‹
("reuse ofáddr %s forÜistening onÖ %d failed: %s",

168 
vli°í
->
«me
, vli°í->
sd
, 
	`°ªº‹
(
î∫o
));

169  
VR_ERROR
;

172 
°©us
 = 
	`böd
(
vli°í
->
sd
, (
sockaddr
 *)&vli°í->
öfo
.
addr
, vli°í->öfo.
addæí
);

173 i‡(
°©us
 < 0) {

174 
	`log_îr‹
("böd o¿∞%dÅÿadd∏%†Áûed: %s", 
vli°í
->
sd
,

175 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

176  
VR_ERROR
;

179 i‡(
vli°í
->
öfo
.
Ámûy
 =
AF_UNIX
 && vli°í->
≥rm
) {

180 
sockaddr_un
 *
un
 = (sockaddr_u¿*)&
vli°í
->
öfo
.
addr
;

181 
°©us
 = 
	`chmod
(
un
->
sun_∑th
, 
vli°í
->
≥rm
);

182 i‡(
°©us
 < 0) {

183 
	`log_îr‹
("chmod o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

184 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

185  
VR_ERROR
;

189 
°©us
 = 
	`li°í
(
vli°í
->
sd
, 512);

190 i‡(
°©us
 < 0) {

191 
	`log_îr‹
("li°í o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

192 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

193  
VR_ERROR
;

196 
°©us
 = 
	`vr_£t_n⁄blockög
(
vli°í
->
sd
);

197 i‡(
°©us
 < 0) {

198 
	`log_îr‹
("£àn⁄block o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

199 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

200  
VR_ERROR
;

203  
VR_OK
;

204 
	}
}

207 
	$vr_li°í_ac˚±
(
vr_li°í
 *
vli°í
)

209 
r°©us_t
 
°©us
;

210 
sd
;

211 
max˛õ¡s
;

213 
	`ASSERT
(
vli°í
->
sd
 > 0);

215 
	`log_debug
(
LOG_DEBUG
,"client_accept");

217 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
max˛õ¡s
);

220 
sd
 = 
	`ac˚±
(
vli°í
->sd, 
NULL
, NULL);

221 i‡(
sd
 < 0) {

222 i‡(
î∫o
 =
EINTR
) {

223 
	`log_debug
(
LOG_VERB
, "ac˚± o¿∞%dÇŸÑódy -Éöå", 
vli°í
->
sd
);

227 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||Éºnÿ=
ECONNABORTED
) {

228 
	`log_debug
(
LOG_VERB
, "ac˚± o¿∞%dÇŸÑódy -Éagaö", 
vli°í
->
sd
);

232 i‡(
î∫o
 =
EMFILE
 ||Éºnÿ=
ENFILE
) {

233 
	`log_debug
(
LOG_CRIT
, "accept onÖ %d "

236 
vli°í
->
sd
, 
max˛õ¡s
,

237 
	`cuºít_˛õ¡s
(), 
	`°ªº‹
(
î∫o
));

241 
	`log_w¨n
("ac˚± o¿∞%d faûed: %s", 
vli°í
->
sd
, 
	`°ªº‹
(
î∫o
));

249 i‡(
	`cuºít_˛õ¡s
(Ë>
max˛õ¡s
) {

250 
	`log_debug
(
LOG_CRIT
, "client connections %dÉxceedÜimit %d",

251 
	`cuºít_˛õ¡s
(), 
max˛õ¡s
);

252 
°©us
 = 
	`˛o£
(
sd
);

253 i‡(
°©us
 < 0) {

254 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

257 
	`upd©e_°©s_add
(
ma°î
.
vñ
.
°©s
, 
ªje˘ed_c⁄n
, 1);

262  
sd
;

263 
	}
}

	@src/vr_listen.h

1 #i‚de‡
_VR_LISTEN_H_


2 
	#_VR_LISTEN_H_


	)

5 
	svr_li°í
 {

6 
sds
 
	m«me
;

7 
	mp‹t
;

8 
mode_t
 
	m≥rm
;

9 
socköfo
 
	möfo
;

10 
	msd
;

11 }
	tvr_li°í
;

13 
vr_li°í
 *
vr_li°í_¸óã
(
sds
 
löãn_°r
);

14 
vr_li°í_de°roy
(
vr_li°í
 *
vli°⁄
);

15 
r°©us_t
 
vr_li°í_begö
(
vr_li°í
 *
vli°í
);

16 
vr_li°í_ac˚±
(
vr_li°í
 *
vli°í
);

	@src/vr_listen.h

1 #i‚de‡
_VR_LISTEN_H_


2 
	#_VR_LISTEN_H_


	)

5 
	svr_li°í
 {

6 
sds
 
	m«me
;

7 
	mp‹t
;

8 
mode_t
 
	m≥rm
;

9 
socköfo
 
	möfo
;

10 
	msd
;

11 }
	tvr_li°í
;

13 
vr_li°í
 *
vr_li°í_¸óã
(
sds
 
löãn_°r
);

14 
vr_li°í_de°roy
(
vr_li°í
 *
vli°⁄
);

15 
r°©us_t
 
vr_li°í_begö
(
vr_li°í
 *
vli°í
);

16 
vr_li°í_ac˚±
(
vr_li°í
 *
vli°í
);

	@src/vr_lzf.h

1 #i‚de‡
_VR_LZF_H_


2 
	#_VR_LZF_H_


	)

13 
	#LZF_VERSION
 0x0105

	)

41 
lzf_com¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

42 *
out_d©a
, 
out_Àn
);

60 
lzf_decom¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

61 *
out_d©a
, 
out_Àn
);

	@src/vr_lzf.h

1 #i‚de‡
_VR_LZF_H_


2 
	#_VR_LZF_H_


	)

13 
	#LZF_VERSION
 0x0105

	)

41 
lzf_com¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

42 *
out_d©a
, 
out_Àn
);

60 
lzf_decom¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

61 *
out_d©a
, 
out_Àn
);

	@src/vr_lzfP.h

1 #i‚de‡
_VR_LZFP_H_


2 
	#_VR_LZFP_H_


	)

4 
	#STANDALONE
 1

	)

6 #i‚de‡
STANDALONE


7 
	~<vr_lzf.h
>

18 #i‚de‡
HLOG


19 
	#HLOG
 16

	)

27 #i‚de‡
VERY_FAST


28 
	#VERY_FAST
 1

	)

38 #i‚de‡
ULTRA_FAST


39 
	#ULTRA_FAST
 0

	)

45 #i‚de‡
STRICT_ALIGN


46 
	#STRICT_ALIGN
 !(
	`deföed
(
__i386
Ë|| deföed (
__amd64
))

	)

54 #i‚de‡
INIT_HTAB


55 
	#INIT_HTAB
 0

	)

63 #i‚de‡
AVOID_ERRNO


64 
	#AVOID_ERRNO
 0

	)

72 #i‚de‡
LZF_STATE_ARG


73 
	#LZF_STATE_ARG
 0

	)

84 #i‚de‡
CHECK_INPUT


85 
	#CHECK_INPUT
 1

	)

98 #ifde‡
__˝lu•lus


99 
	~<c°rög
>

100 
	~<˛imôs
>

101 
usög
 
«me•a˚
 
	g°d
;

103 
	~<°rög.h
>

104 
	~<limôs.h
>

107 #i‚de‡
LZF_USE_OFFSETS


108 #i‡
deföed
 (
WIN32
)

109 
	#LZF_USE_OFFSETS
 
	`deföed
(
_M_X64
)

	)

111 #i‡
__˝lu•lus
 > 199711L

112 
	~<c°döt
>

114 
	~<°döt.h
>

116 
	#LZF_USE_OFFSETS
 (
UINTPTR_MAX
 > 0xffffffffU)

	)

120 
	tu8
;

122 #i‡
LZF_USE_OFFSETS


123 
	#LZF_HSLOT_BIAS
 ((c⁄° 
u8
 *)
ö_d©a
)

	)

124 
	tLZF_HSLOT
;

126 
	#LZF_HSLOT_BIAS
 0

	)

127 c⁄° 
	tu8
 *
	tLZF_HSLOT
;

130 
LZF_HSLOT
 
	tLZF_STATE
[1 << (
HLOG
)];

132 #i‡!
STRICT_ALIGN


134 #i‡
USHRT_MAX
 == 65535

135 
	tu16
;

136 #ñi‡
UINT_MAX
 == 65535

137 
	tu16
;

139 #unde‡
STRICT_ALIGN


140 
	#STRICT_ALIGN
 1

	)

144 #i‡
ULTRA_FAST


145 #unde‡
VERY_FAST


	@src/vr_lzfP.h

1 #i‚de‡
_VR_LZFP_H_


2 
	#_VR_LZFP_H_


	)

4 
	#STANDALONE
 1

	)

6 #i‚de‡
STANDALONE


7 
	~<vr_lzf.h
>

18 #i‚de‡
HLOG


19 
	#HLOG
 16

	)

27 #i‚de‡
VERY_FAST


28 
	#VERY_FAST
 1

	)

38 #i‚de‡
ULTRA_FAST


39 
	#ULTRA_FAST
 0

	)

45 #i‚de‡
STRICT_ALIGN


46 
	#STRICT_ALIGN
 !(
	`deföed
(
__i386
Ë|| deföed (
__amd64
))

	)

54 #i‚de‡
INIT_HTAB


55 
	#INIT_HTAB
 0

	)

63 #i‚de‡
AVOID_ERRNO


64 
	#AVOID_ERRNO
 0

	)

72 #i‚de‡
LZF_STATE_ARG


73 
	#LZF_STATE_ARG
 0

	)

84 #i‚de‡
CHECK_INPUT


85 
	#CHECK_INPUT
 1

	)

98 #ifde‡
__˝lu•lus


99 
	~<c°rög
>

100 
	~<˛imôs
>

101 
usög
 
«me•a˚
 
	g°d
;

103 
	~<°rög.h
>

104 
	~<limôs.h
>

107 #i‚de‡
LZF_USE_OFFSETS


108 #i‡
deföed
 (
WIN32
)

109 
	#LZF_USE_OFFSETS
 
	`deföed
(
_M_X64
)

	)

111 #i‡
__˝lu•lus
 > 199711L

112 
	~<c°döt
>

114 
	~<°döt.h
>

116 
	#LZF_USE_OFFSETS
 (
UINTPTR_MAX
 > 0xffffffffU)

	)

120 
	tu8
;

122 #i‡
LZF_USE_OFFSETS


123 
	#LZF_HSLOT_BIAS
 ((c⁄° 
u8
 *)
ö_d©a
)

	)

124 
	tLZF_HSLOT
;

126 
	#LZF_HSLOT_BIAS
 0

	)

127 c⁄° 
	tu8
 *
	tLZF_HSLOT
;

130 
LZF_HSLOT
 
	tLZF_STATE
[1 << (
HLOG
)];

132 #i‡!
STRICT_ALIGN


134 #i‡
USHRT_MAX
 == 65535

135 
	tu16
;

136 #ñi‡
UINT_MAX
 == 65535

137 
	tu16
;

139 #unde‡
STRICT_ALIGN


140 
	#STRICT_ALIGN
 1

	)

144 #i‡
ULTRA_FAST


145 #unde‡
VERY_FAST


	@src/vr_lzf_c.c

1 
	~<vr_lzfP.h
>

3 
	#HSIZE
 (1 << (
HLOG
))

	)

11 #i‚de‡
FRST


12 
	#FRST
(
p
Ë((’[0]Ë<< 8Ë|Ö[1])

	)

13 
	#NEXT
(
v
,
p
Ë(((vË<< 8Ë|Ö[2])

	)

14 #i‡
ULTRA_FAST


15 
	#IDX
(
h
Ë((–h >> (3*8 - 
HLOG
)Ë- h ) & (
HSIZE
 - 1))

	)

16 #ñi‡
VERY_FAST


17 
	#IDX
(
h
Ë((–h >> (3*8 - 
HLOG
)Ë- h*5Ë& (
HSIZE
 - 1))

	)

19 
	#IDX
(
h
Ë((((h ^ (h << 5)Ë>> (3*8 - 
HLOG
)Ë- h*5Ë& (
HSIZE
 - 1))

	)

33 
	#FRST
(
p
Ë’[0] << 5Ë^Ö[1]

	)

34 
	#NEXT
(
v
,
p
Ë((vË<< 5Ë^Ö[2]

	)

35 
	#IDX
(
h
Ë((hË& (
HSIZE
 - 1))

	)

38 
	#MAX_LIT
 (1 << 5)

	)

39 
	#MAX_OFF
 (1 << 13)

	)

40 
	#MAX_REF
 ((1 << 8Ë+ (1 << 3))

	)

42 #i‡
__GNUC__
 >= 3

43 
	#ex≥˘
(
ex¥
,
vÆue
Ë
	`__buûtö_ex≥˘
 (”x¥),(vÆue))

	)

44 
	#ölöe
 
ölöe


	)

46 
	#ex≥˘
(
ex¥
,
vÆue
Ë”x¥)

	)

47 
	#ölöe
 

	)

50 
	#ex≥˘_Ál£
(
ex¥
Ë
	`ex≥˘
 (”x¥Ë!0, 0)

	)

51 
	#ex≥˘_åue
(
ex¥
Ë
	`ex≥˘
 (”x¥Ë!0, 1)

	)

63 
lzf_com¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

64 *
out_d©a
, 
out_Àn


65 #i‡
LZF_STATE_ARG


66 , 
LZF_STATE
 
hèb


70 #i‡!
LZF_STATE_ARG


71 
LZF_STATE
 
	ghèb
;

73 c⁄° 
u8
 *
	gù
 = (c⁄° u8 *)
ö_d©a
;

74 
u8
 *
	g›
 = (u8 *)
out_d©a
;

75 c⁄° 
u8
 *
	gö_íd
 = 
ù
 + 
ö_Àn
;

76 
u8
 *
	gout_íd
 = 
›
 + 
out_Àn
;

77 c⁄° 
u8
 *
	gªf
;

86 #i‡
deföed
 (
WIN32
Ë&& deföed (
_M_X64
)

87 
_öt64
 
	goff
;

89 
	goff
;

91 
	ghvÆ
;

92 
	glô
;

94 i‡(!
	gö_Àn
 || !
	gout_Àn
)

97 #i‡
INIT_HTAB


98 
mem£t
 (
hèb
, 0,  (htab));

101 
	glô
 = 0; 
	g›
++;

103 
	ghvÆ
 = 
FRST
 (
ù
);

104 
	gù
 < 
	gö_íd
 - 2)

106 
LZF_HSLOT
 *
	gh¶Ÿ
;

108 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

109 
	gh¶Ÿ
 = 
hèb
 + 
IDX
 (
hvÆ
);

110 
	gªf
 = *
h¶Ÿ
 + 
LZF_HSLOT_BIAS
; *
	gh¶Ÿ
 = 
ù
 - LZF_HSLOT_BIAS;

113 #i‡
INIT_HTAB


114 && 
	gªf
 < 
	gù


116 && (
	goff
 = 
ù
 - 
ªf
 - 1Ë< 
MAX_OFF


117 && 
ªf
 > (
u8
 *)
ö_d©a


118 && 
ªf
[2] =
ù
[2]

119 #i‡
STRICT_ALIGN


120 && ((
ªf
[1] << 8Ë|Ñef[0]Ë=((
ù
[1] << 8) | ip[0])

122 && *(
u16
 *)
ªf
 =*(u16 *)
ù


127 
Àn
 = 2;

128 
	gmaxÀn
 = 
ö_íd
 - 
ù
 - 
Àn
;

129 
	gmaxÀn
 = 
maxÀn
 > 
MAX_REF
 ? MAX_REF : maxlen;

131 i‡(
ex≥˘_Ál£
 (
›
 + 3 + 1 >
out_íd
))

132 i‡(
›
 - !
lô
 + 3 + 1 >
out_íd
)

135 
	g›
 [- 
lô
 - 1] =Üit - 1;

136 
	g›
 -!
lô
;

140 i‡(
ex≥˘_åue
 (
maxÀn
 > 16))

142 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

143 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

144 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

145 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

147 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

148 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

149 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

150 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

152 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

153 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

154 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

155 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

157 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

158 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

159 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

160 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

164 
	gÀn
++;

165 
	gÀn
 < 
	gmaxÀn
 && 
	gªf
[
Àn
] =
ù
[len]);

170 
	gÀn
 -= 2;

171 
	gù
++;

173 i‡(
	gÀn
 < 7)

175 *
	g›
++ = (
off
 >> 8Ë+ (
Àn
 << 5);

179 *
	g›
++ = (
off
 >> 8) + ( 7 << 5);

180 *
	g›
++ = 
Àn
 - 7;

183 *
	g›
++ = 
off
;

185 
	glô
 = 0; 
	g›
++;

187 
	gù
 +
Àn
 + 1;

189 i‡(
ex≥˘_Ál£
 (
ù
 >
ö_íd
 - 2))

192 #i‡
ULTRA_FAST
 || 
VERY_FAST


193 --
	gù
;

194 #i‡
VERY_FAST
 && !
ULTRA_FAST


195 --
	gù
;

197 
	ghvÆ
 = 
FRST
 (
ù
);

199 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

200 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

201 
	gù
++;

203 #i‡
VERY_FAST
 && !
ULTRA_FAST


204 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

205 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

206 
	gù
++;

209 
	gù
 -
Àn
 + 1;

213 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

214 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

215 
	gù
++;

217 
	gÀn
--);

223 i‡(
ex≥˘_Ál£
 (
›
 >
out_íd
))

226 
	glô
++; *
	g›
++ = *
ù
++;

228 i‡(
ex≥˘_Ál£
 (
lô
 =
MAX_LIT
))

230 
›
 [- 
lô
 - 1] =Üit - 1;

231 
	glô
 = 0; 
	g›
++;

236 i‡(
	g›
 + 3 > 
	gout_íd
)

239 
	gù
 < 
	gö_íd
)

241 
	glô
++; *
	g›
++ = *
ù
++;

243 i‡(
ex≥˘_Ál£
 (
lô
 =
MAX_LIT
))

245 
›
 [- 
lô
 - 1] =Üit - 1;

246 
	glô
 = 0; 
	g›
++;

250 
	g›
 [- 
lô
 - 1] =Üit - 1;

251 
	g›
 -!
lô
;

253  
	g›
 - (
	gu8
 *)
	gout_d©a
;

	@src/vr_lzf_c.c

1 
	~<vr_lzfP.h
>

3 
	#HSIZE
 (1 << (
HLOG
))

	)

11 #i‚de‡
FRST


12 
	#FRST
(
p
Ë((’[0]Ë<< 8Ë|Ö[1])

	)

13 
	#NEXT
(
v
,
p
Ë(((vË<< 8Ë|Ö[2])

	)

14 #i‡
ULTRA_FAST


15 
	#IDX
(
h
Ë((–h >> (3*8 - 
HLOG
)Ë- h ) & (
HSIZE
 - 1))

	)

16 #ñi‡
VERY_FAST


17 
	#IDX
(
h
Ë((–h >> (3*8 - 
HLOG
)Ë- h*5Ë& (
HSIZE
 - 1))

	)

19 
	#IDX
(
h
Ë((((h ^ (h << 5)Ë>> (3*8 - 
HLOG
)Ë- h*5Ë& (
HSIZE
 - 1))

	)

33 
	#FRST
(
p
Ë’[0] << 5Ë^Ö[1]

	)

34 
	#NEXT
(
v
,
p
Ë((vË<< 5Ë^Ö[2]

	)

35 
	#IDX
(
h
Ë((hË& (
HSIZE
 - 1))

	)

38 
	#MAX_LIT
 (1 << 5)

	)

39 
	#MAX_OFF
 (1 << 13)

	)

40 
	#MAX_REF
 ((1 << 8Ë+ (1 << 3))

	)

42 #i‡
__GNUC__
 >= 3

43 
	#ex≥˘
(
ex¥
,
vÆue
Ë
	`__buûtö_ex≥˘
 (”x¥),(vÆue))

	)

44 
	#ölöe
 
ölöe


	)

46 
	#ex≥˘
(
ex¥
,
vÆue
Ë”x¥)

	)

47 
	#ölöe
 

	)

50 
	#ex≥˘_Ál£
(
ex¥
Ë
	`ex≥˘
 (”x¥Ë!0, 0)

	)

51 
	#ex≥˘_åue
(
ex¥
Ë
	`ex≥˘
 (”x¥Ë!0, 1)

	)

63 
lzf_com¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

64 *
out_d©a
, 
out_Àn


65 #i‡
LZF_STATE_ARG


66 , 
LZF_STATE
 
hèb


70 #i‡!
LZF_STATE_ARG


71 
LZF_STATE
 
	ghèb
;

73 c⁄° 
u8
 *
	gù
 = (c⁄° u8 *)
ö_d©a
;

74 
u8
 *
	g›
 = (u8 *)
out_d©a
;

75 c⁄° 
u8
 *
	gö_íd
 = 
ù
 + 
ö_Àn
;

76 
u8
 *
	gout_íd
 = 
›
 + 
out_Àn
;

77 c⁄° 
u8
 *
	gªf
;

86 #i‡
deföed
 (
WIN32
Ë&& deföed (
_M_X64
)

87 
_öt64
 
	goff
;

89 
	goff
;

91 
	ghvÆ
;

92 
	glô
;

94 i‡(!
	gö_Àn
 || !
	gout_Àn
)

97 #i‡
INIT_HTAB


98 
mem£t
 (
hèb
, 0,  (htab));

101 
	glô
 = 0; 
	g›
++;

103 
	ghvÆ
 = 
FRST
 (
ù
);

104 
	gù
 < 
	gö_íd
 - 2)

106 
LZF_HSLOT
 *
	gh¶Ÿ
;

108 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

109 
	gh¶Ÿ
 = 
hèb
 + 
IDX
 (
hvÆ
);

110 
	gªf
 = *
h¶Ÿ
 + 
LZF_HSLOT_BIAS
; *
	gh¶Ÿ
 = 
ù
 - LZF_HSLOT_BIAS;

113 #i‡
INIT_HTAB


114 && 
	gªf
 < 
	gù


116 && (
	goff
 = 
ù
 - 
ªf
 - 1Ë< 
MAX_OFF


117 && 
ªf
 > (
u8
 *)
ö_d©a


118 && 
ªf
[2] =
ù
[2]

119 #i‡
STRICT_ALIGN


120 && ((
ªf
[1] << 8Ë|Ñef[0]Ë=((
ù
[1] << 8) | ip[0])

122 && *(
u16
 *)
ªf
 =*(u16 *)
ù


127 
Àn
 = 2;

128 
	gmaxÀn
 = 
ö_íd
 - 
ù
 - 
Àn
;

129 
	gmaxÀn
 = 
maxÀn
 > 
MAX_REF
 ? MAX_REF : maxlen;

131 i‡(
ex≥˘_Ál£
 (
›
 + 3 + 1 >
out_íd
))

132 i‡(
›
 - !
lô
 + 3 + 1 >
out_íd
)

135 
	g›
 [- 
lô
 - 1] =Üit - 1;

136 
	g›
 -!
lô
;

140 i‡(
ex≥˘_åue
 (
maxÀn
 > 16))

142 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

143 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

144 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

145 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

147 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

148 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

149 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

150 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

152 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

153 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

154 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

155 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

157 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

158 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

159 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

160 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

164 
	gÀn
++;

165 
	gÀn
 < 
	gmaxÀn
 && 
	gªf
[
Àn
] =
ù
[len]);

170 
	gÀn
 -= 2;

171 
	gù
++;

173 i‡(
	gÀn
 < 7)

175 *
	g›
++ = (
off
 >> 8Ë+ (
Àn
 << 5);

179 *
	g›
++ = (
off
 >> 8) + ( 7 << 5);

180 *
	g›
++ = 
Àn
 - 7;

183 *
	g›
++ = 
off
;

185 
	glô
 = 0; 
	g›
++;

187 
	gù
 +
Àn
 + 1;

189 i‡(
ex≥˘_Ál£
 (
ù
 >
ö_íd
 - 2))

192 #i‡
ULTRA_FAST
 || 
VERY_FAST


193 --
	gù
;

194 #i‡
VERY_FAST
 && !
ULTRA_FAST


195 --
	gù
;

197 
	ghvÆ
 = 
FRST
 (
ù
);

199 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

200 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

201 
	gù
++;

203 #i‡
VERY_FAST
 && !
ULTRA_FAST


204 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

205 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

206 
	gù
++;

209 
	gù
 -
Àn
 + 1;

213 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

214 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

215 
	gù
++;

217 
	gÀn
--);

223 i‡(
ex≥˘_Ál£
 (
›
 >
out_íd
))

226 
	glô
++; *
	g›
++ = *
ù
++;

228 i‡(
ex≥˘_Ál£
 (
lô
 =
MAX_LIT
))

230 
›
 [- 
lô
 - 1] =Üit - 1;

231 
	glô
 = 0; 
	g›
++;

236 i‡(
	g›
 + 3 > 
	gout_íd
)

239 
	gù
 < 
	gö_íd
)

241 
	glô
++; *
	g›
++ = *
ù
++;

243 i‡(
ex≥˘_Ál£
 (
lô
 =
MAX_LIT
))

245 
›
 [- 
lô
 - 1] =Üit - 1;

246 
	glô
 = 0; 
	g›
++;

250 
	g›
 [- 
lô
 - 1] =Üit - 1;

251 
	g›
 -!
lô
;

253  
	g›
 - (
	gu8
 *)
	gout_d©a
;

	@src/vr_lzf_d.c

1 
	~<vr_lzfP.h
>

3 #i‡
AVOID_ERRNO


4 
	#SET_ERRNO
(
n
)

	)

6 
	~<î∫o.h
>

7 
	#SET_ERRNO
(
n
Ë
î∫o
 = (n)

	)

10 #i‡
USE_REP_MOVSB


11 #i‡(
__i386
 || 
__amd64
Ë&& 
__GNUC__
 >= 3

12 
	#lzf_movsb
(
d°
, 
§c
, 
Àn
) \

13 
	`asm
 ("rep movsb" \

14 : "=D" (
d°
), "=S" (
§c
), "=c" (
Àn
) \

15 : "0" (
d°
), "1" (
§c
), "2" (
Àn
));

	)

20 
	$lzf_decom¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

21 *
out_d©a
, 
out_Àn
)

23 
u8
 c⁄° *
ù
 = (c⁄° u8 *)
ö_d©a
;

24 
u8
 *
›
 = (u8 *)
out_d©a
;

25 
u8
 c⁄° *c⁄° 
ö_íd
 = 
ù
 + 
ö_Àn
;

26 
u8
 *c⁄° 
out_íd
 = 
›
 + 
out_Àn
;

30 
˘æ
 = *
ù
++;

32 i‡(
˘æ
 < (1 << 5))

34 
˘æ
++;

36 i‡(
›
 + 
˘æ
 > 
out_íd
)

38 
	`SET_ERRNO
 (
E2BIG
);

42 #i‡
CHECK_INPUT


43 i‡(
ù
 + 
˘æ
 > 
ö_íd
)

45 
	`SET_ERRNO
 (
EINVAL
);

50 #ifde‡
lzf_movsb


51 
	`lzf_movsb
 (
›
, 
ù
, 
˘æ
);

53 
˘æ
)

55 32: *
›
++ = *
ù
++; 31: *op++ = *ip++; 30: *op++ = *ip++; 29: *op++ = *ip++;

56 28: *
›
++ = *
ù
++; 27: *op++ = *ip++; 26: *op++ = *ip++; 25: *op++ = *ip++;

57 24: *
›
++ = *
ù
++; 23: *op++ = *ip++; 22: *op++ = *ip++; 21: *op++ = *ip++;

58 20: *
›
++ = *
ù
++; 19: *op++ = *ip++; 18: *op++ = *ip++; 17: *op++ = *ip++;

59 16: *
›
++ = *
ù
++; 15: *op++ = *ip++; 14: *op++ = *ip++; 13: *op++ = *ip++;

60 12: *
›
++ = *
ù
++; 11: *op++ = *ip++; 10: *op++ = *ip++; 9: *op++ = *ip++;

61 8: *
›
++ = *
ù
++; 7: *op++ = *ip++; 6: *op++ = *ip++; 5: *op++ = *ip++;

62 4: *
›
++ = *
ù
++; 3: *op++ = *ip++; 2: *op++ = *ip++; 1: *op++ = *ip++;

68 
Àn
 = 
˘æ
 >> 5;

70 
u8
 *
ªf
 = 
›
 - ((
˘æ
 & 0x1f) << 8) - 1;

72 #i‡
CHECK_INPUT


73 i‡(
ù
 >
ö_íd
)

75 
	`SET_ERRNO
 (
EINVAL
);

79 i‡(
Àn
 == 7)

81 
Àn
 +*
ù
++;

82 #i‡
CHECK_INPUT


83 i‡(
ù
 >
ö_íd
)

85 
	`SET_ERRNO
 (
EINVAL
);

91 
ªf
 -*
ù
++;

93 i‡(
›
 + 
Àn
 + 2 > 
out_íd
)

95 
	`SET_ERRNO
 (
E2BIG
);

99 i‡(
ªf
 < (
u8
 *)
out_d©a
)

101 
	`SET_ERRNO
 (
EINVAL
);

105 #ifde‡
lzf_movsb


106 
Àn
 += 2;

107 
	`lzf_movsb
 (
›
, 
ªf
, 
Àn
);

109 
Àn
)

112 
Àn
 += 2;

114 i‡(
›
 >
ªf
 + 
Àn
)

117 
	`mem˝y
 (
›
, 
ªf
, 
Àn
);

118 
›
 +
Àn
;

124 *
›
++ = *
ªf
++;

125 --
Àn
);

130 9: *
›
++ = *
ªf
++;

131 8: *
›
++ = *
ªf
++;

132 7: *
›
++ = *
ªf
++;

133 6: *
›
++ = *
ªf
++;

134 5: *
›
++ = *
ªf
++;

135 4: *
›
++ = *
ªf
++;

136 3: *
›
++ = *
ªf
++;

137 2: *
›
++ = *
ªf
++;

138 1: *
›
++ = *
ªf
++;

139 0: *
›
++ = *
ªf
++;

140 *
›
++ = *
ªf
++;

145 
ù
 < 
ö_íd
);

147  
›
 - (
u8
 *)
out_d©a
;

148 
	}
}

	@src/vr_lzf_d.c

1 
	~<vr_lzfP.h
>

3 #i‡
AVOID_ERRNO


4 
	#SET_ERRNO
(
n
)

	)

6 
	~<î∫o.h
>

7 
	#SET_ERRNO
(
n
Ë
î∫o
 = (n)

	)

10 #i‡
USE_REP_MOVSB


11 #i‡(
__i386
 || 
__amd64
Ë&& 
__GNUC__
 >= 3

12 
	#lzf_movsb
(
d°
, 
§c
, 
Àn
) \

13 
	`asm
 ("rep movsb" \

14 : "=D" (
d°
), "=S" (
§c
), "=c" (
Àn
) \

15 : "0" (
d°
), "1" (
§c
), "2" (
Àn
));

	)

20 
	$lzf_decom¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

21 *
out_d©a
, 
out_Àn
)

23 
u8
 c⁄° *
ù
 = (c⁄° u8 *)
ö_d©a
;

24 
u8
 *
›
 = (u8 *)
out_d©a
;

25 
u8
 c⁄° *c⁄° 
ö_íd
 = 
ù
 + 
ö_Àn
;

26 
u8
 *c⁄° 
out_íd
 = 
›
 + 
out_Àn
;

30 
˘æ
 = *
ù
++;

32 i‡(
˘æ
 < (1 << 5))

34 
˘æ
++;

36 i‡(
›
 + 
˘æ
 > 
out_íd
)

38 
	`SET_ERRNO
 (
E2BIG
);

42 #i‡
CHECK_INPUT


43 i‡(
ù
 + 
˘æ
 > 
ö_íd
)

45 
	`SET_ERRNO
 (
EINVAL
);

50 #ifde‡
lzf_movsb


51 
	`lzf_movsb
 (
›
, 
ù
, 
˘æ
);

53 
˘æ
)

55 32: *
›
++ = *
ù
++; 31: *op++ = *ip++; 30: *op++ = *ip++; 29: *op++ = *ip++;

56 28: *
›
++ = *
ù
++; 27: *op++ = *ip++; 26: *op++ = *ip++; 25: *op++ = *ip++;

57 24: *
›
++ = *
ù
++; 23: *op++ = *ip++; 22: *op++ = *ip++; 21: *op++ = *ip++;

58 20: *
›
++ = *
ù
++; 19: *op++ = *ip++; 18: *op++ = *ip++; 17: *op++ = *ip++;

59 16: *
›
++ = *
ù
++; 15: *op++ = *ip++; 14: *op++ = *ip++; 13: *op++ = *ip++;

60 12: *
›
++ = *
ù
++; 11: *op++ = *ip++; 10: *op++ = *ip++; 9: *op++ = *ip++;

61 8: *
›
++ = *
ù
++; 7: *op++ = *ip++; 6: *op++ = *ip++; 5: *op++ = *ip++;

62 4: *
›
++ = *
ù
++; 3: *op++ = *ip++; 2: *op++ = *ip++; 1: *op++ = *ip++;

68 
Àn
 = 
˘æ
 >> 5;

70 
u8
 *
ªf
 = 
›
 - ((
˘æ
 & 0x1f) << 8) - 1;

72 #i‡
CHECK_INPUT


73 i‡(
ù
 >
ö_íd
)

75 
	`SET_ERRNO
 (
EINVAL
);

79 i‡(
Àn
 == 7)

81 
Àn
 +*
ù
++;

82 #i‡
CHECK_INPUT


83 i‡(
ù
 >
ö_íd
)

85 
	`SET_ERRNO
 (
EINVAL
);

91 
ªf
 -*
ù
++;

93 i‡(
›
 + 
Àn
 + 2 > 
out_íd
)

95 
	`SET_ERRNO
 (
E2BIG
);

99 i‡(
ªf
 < (
u8
 *)
out_d©a
)

101 
	`SET_ERRNO
 (
EINVAL
);

105 #ifde‡
lzf_movsb


106 
Àn
 += 2;

107 
	`lzf_movsb
 (
›
, 
ªf
, 
Àn
);

109 
Àn
)

112 
Àn
 += 2;

114 i‡(
›
 >
ªf
 + 
Àn
)

117 
	`mem˝y
 (
›
, 
ªf
, 
Àn
);

118 
›
 +
Àn
;

124 *
›
++ = *
ªf
++;

125 --
Àn
);

130 9: *
›
++ = *
ªf
++;

131 8: *
›
++ = *
ªf
++;

132 7: *
›
++ = *
ªf
++;

133 6: *
›
++ = *
ªf
++;

134 5: *
›
++ = *
ªf
++;

135 4: *
›
++ = *
ªf
++;

136 3: *
›
++ = *
ªf
++;

137 2: *
›
++ = *
ªf
++;

138 1: *
›
++ = *
ªf
++;

139 0: *
›
++ = *
ªf
++;

140 *
›
++ = *
ªf
++;

145 
ù
 < 
ö_íd
);

147  
›
 - (
u8
 *)
out_d©a
;

148 
	}
}

	@src/vr_master.c

1 
	~<vr_c‹e.h
>

3 
vr_ma°î
 
	gma°î
;

5 
£tup_ma°î
();

6 *
ma°î_thªad_run
(*
¨gs
);

9 
	$ma°î_öô
(
vr_c⁄f
 *
c⁄f
)

11 
r°©us_t
 
°©us
;

12 
uöt32_t
 
j
;

13 
sds
 *
ho°
, 
li°í_°r
;

15 
vr_li°í
 **
vli°í
;

17 
thªads_num
;

19 
fûñimô
;

22 
ma°î
.
cbsul
 = 
NULL
;

23 
	`±hªad_muãx_öô
(&
ma°î
.
cbsuŒock
, 
NULL
);

25 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads_num
);

27 
fûñimô
 = 
thªads_num
*2+
CONFIG_MIN_RESERVED_FDS
;

29 
	`vr_evíéo›_öô
(&
ma°î
.
vñ
,
fûñimô
);

31 
ma°î
.
vñ
.
thªad
.
fun_run
 = 
ma°î_thªad_run
;

33 
	`d¨øy_öô
(&
ma°î
.
li°ís
,
	`d¨øy_n
(&
c£rvî
->
böds
),(
vr_li°í
*));

36 
j
 = 0; j < 
	`d¨øy_n
(&
c£rvî
->
böds
); j ++) {

38 
ho°
 = 
	`d¨øy_gë
(&
c£rvî
->
böds
,
j
);

40 
li°í_°r
 = 
	`sdsdup
(*
ho°
);

42 
li°í_°r
 = 
	`sdsˇtfmt
÷i°í_°r, ":%i", 
c£rvî
->
p‹t
);

44 
vli°í
 = 
	`d¨øy_push
(&
ma°î
.
li°ís
);

45 *
vli°í
 = 
	`vr_li°í_¸óã
(
li°í_°r
);

47 i‡(*
vli°í
 =
NULL
) {

48 
	`d¨øy_p›
(&
ma°î
.
li°ís
);

49 
	`log_îr‹
("Cª©êli°í %†Áûed", 
li°í_°r
);

50 
	`sds‰ì
(
li°í_°r
);

51  
VR_ERROR
;

53 
	`sds‰ì
(
li°í_°r
);

56 
j
 = 0; j < 
	`d¨øy_n
(&
ma°î
.
li°ís
); j ++) {

57 
vli°í
 = 
	`d¨øy_gë
(&
ma°î
.
li°ís
, 
j
);

58 
°©us
 = 
	`vr_li°í_begö
(*
vli°í
);

59 i‡(
°©us
 !
VR_OK
) {

60 
	`log_îr‹
("BegöÜi°íÅÿ%†Áûed", (*
vli°í
)->
«me
);

61  
VR_ERROR
;

65 
ma°î
.
cbsul
 = 
	`dli°Cª©e
();

66 i‡(
ma°î
.
cbsul
 =
NULL
) {

67 
	`log_îr‹
("CreateÜist failed: out of memory");

68  
VR_ENOMEM
;

71 
	`£tup_ma°î
();

73  
VR_OK
;

74 
	}
}

77 
	$ma°î_deöô
()

79 
vr_li°í
 **
vli°í
;

81 
	`vr_evíéo›_deöô
(&
ma°î
.
vñ
);

83 
	`d¨øy_n
(&
ma°î
.
li°ís
) > 0) {

84 
vli°í
 = 
	`d¨øy_p›
(&
ma°î
.
li°ís
);

85 
	`vr_li°í_de°roy
(*
vli°í
);

87 
	`d¨øy_deöô
(&
ma°î
.
li°ís
);

89 
	}
}

93 
	$˛õ¡_ac˚±
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

94 
sd
;

95 
vr_li°í
 *
vli°í
 = 
¥ivd©a
;

97 (
sd
 = 
	`vr_li°í_ac˚±
(
vli°í
)) > 0) {

98 
	`di•©ch_c⁄n_√w
(
vli°í
, 
sd
);

100 
	}
}

104 
	$cbsul_push
(
c⁄nsw≠unô
 *
su
)

106 
	`±hªad_muãx_lock
(&
ma°î
.
cbsuŒock
);

107 
	`dli°Push
(
ma°î
.
cbsul
, 
su
);

108 
	`±hªad_muãx_u∆ock
(&
ma°î
.
cbsuŒock
);

109 
	}
}

111 
c⁄nsw≠unô
 *

112 
	$cbsul_p›
()

114 
c⁄nsw≠unô
 *
su
 = 
NULL
;

116 
	`±hªad_muãx_lock
(&
ma°î
.
cbsuŒock
);

117 
su
 = 
	`dli°P›
(
ma°î
.
cbsul
);

118 
	`±hªad_muãx_u∆ock
(&
ma°î
.
cbsuŒock
);

120  
su
;

121 
	}
}

124 
	$di•©ch_c⁄n_exi°
(
˛õ¡
 *
c
, 
tid
)

126 
c⁄nsw≠unô
 *
su
 = 
	`csui_√w
();

127 
buf
[1];

128 
vr_w‹kî
 *
w‹kî
;

130 i‡(
su
 =
NULL
) {

131 
	`‰ìClõ¡
(
c
);

133 
	`log_îr‹
("FailedÅoállocate memory for connection swap object\n");

137 
su
->
num
 = 
tid
;

138 
su
->
d©a
 = 
c
;

140 
	`u∆ökClõ¡FromEvíéo›
(
c
);

142 
	`cbsul_push
(
su
);

145 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
c
->
curidx
);

149 
buf
[0] = 'b';

150 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[1], 
buf
, 1) != 1) {

151 
	`log_îr‹
("NoticeÅhe worker failed.");

153 
	}
}

156 
	$thªad_evít_¥o˚ss
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

158 
r°©us_t
 
°©us
;

159 
vr_w‹kî
 *
w‹kî
 = 
¥ivd©a
;

160 
buf
[1];

161 
idx
;

162 
˛õ¡
 *
c
;

163 
c⁄nsw≠unô
 *
su
;

165 
	`ASSERT
(
ñ
 =
ma°î
.
vñ
.el);

166 
	`ASSERT
(
fd
 =
w‹kî
->
sockë∑ús
[0]);

168 i‡(
	`vr_ªad
(
fd
, 
buf
, 1) != 1) {

169 
	`log_w¨n
("Can'tÑead for worker(id:%d) socketpairs[1](%d)",

170 
w‹kî
->
vñ
.
thªad
.
id
, 
fd
);

171 
buf
[0] = 'b';

174 
buf
[0]) {

178 
su
 = 
	`cbsul_p›
();

179 i‡(
su
 =
NULL
) {

180 
	`log_w¨n
("Pop from connection back swapÜist isÇull");

184 
idx
 = 
su
->
num
;

185 
su
->
num
 = 
w‹kî
->
id
;

187 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
idx
);

189 
	`csul_push
(
w‹kî
, 
su
);

193 
buf
[0] = 'j';

194 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[0], 
buf
, 1) != 1) {

195 
	`log_îr‹
("NoticeÅhe worker failed.");

199 
	`log_îr‹
("readÉrror char '%c' for worker(id:%d) socketpairs[0](%d)",

200 
buf
[0], 
w‹kî
->
vñ
.
thªad
.
id
, w‹kî->
sockë∑ús
[1]);

203 
	}
}

207 
	$£tup_ma°î
()

209 
r°©us_t
 
°©us
;

210 
uöt32_t
 
j
;

211 
vr_li°í
 **
vli°í
;

212 
vr_w‹kî
 *
w‹kî
;

215 
j
 = 0; j < 
	`d¨øy_n
(&
w‹kîs
); j ++) {

216 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
j
);

218 
°©us
 = 
	`´Cª©eFûeEvít
(
ma°î
.
vñ
.
ñ
, 
w‹kî
->
sockë∑ús
[0],

219 
AE_READABLE
, 
thªad_evít_¥o˚ss
, 
w‹kî
);

220 i‡(
°©us
 =
AE_ERR
) {

221 
	`log_îr‹
("UnrecoverableÉrror creating master ipfd fileÉvent.");

222  
VR_ERROR
;

227 
j
 = 0; j < 
	`d¨øy_n
(&
ma°î
.
li°ís
); j ++) {

228 
vli°í
 = 
	`d¨øy_gë
(&
ma°î
.
li°ís
,
j
);

229 
°©us
 = 
	`´Cª©eFûeEvít
(
ma°î
.
vñ
.
ñ
, (*
vli°í
)->
sd
, 
AE_READABLE
,

230 
˛õ¡_ac˚±
, *
vli°í
);

231 i‡(
°©us
 =
AE_ERR
) {

232 
	`log_îr‹
("UnrecoverableÉrror creating master ipfd fileÉvent.");

233  
VR_ERROR
;

237  
VR_OK
;

238 
	}
}

242 
	$ma°î_thªad_run
(*
¨gs
)

245 
	`´Maö
(
ma°î
.
vñ
.
ñ
);

247  
NULL
;

248 
	}
}

251 
	$ma°î_run
()

253 
	`vr_thªad_°¨t
(&
ma°î
.
vñ
.
thªad
);

254  
VR_OK
;

255 
	}
}

	@src/vr_master.c

1 
	~<vr_c‹e.h
>

3 
vr_ma°î
 
	gma°î
;

5 
£tup_ma°î
();

6 *
ma°î_thªad_run
(*
¨gs
);

9 
	$ma°î_öô
(
vr_c⁄f
 *
c⁄f
)

11 
r°©us_t
 
°©us
;

12 
uöt32_t
 
j
;

13 
sds
 *
ho°
, 
li°í_°r
;

15 
vr_li°í
 **
vli°í
;

17 
thªads_num
;

19 
fûñimô
;

22 
ma°î
.
cbsul
 = 
NULL
;

23 
	`±hªad_muãx_öô
(&
ma°î
.
cbsuŒock
, 
NULL
);

25 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads_num
);

27 
fûñimô
 = 
thªads_num
*2+
CONFIG_MIN_RESERVED_FDS
;

29 
	`vr_evíéo›_öô
(&
ma°î
.
vñ
,
fûñimô
);

31 
ma°î
.
vñ
.
thªad
.
fun_run
 = 
ma°î_thªad_run
;

33 
	`d¨øy_öô
(&
ma°î
.
li°ís
,
	`d¨øy_n
(&
c£rvî
->
böds
),(
vr_li°í
*));

36 
j
 = 0; j < 
	`d¨øy_n
(&
c£rvî
->
böds
); j ++) {

38 
ho°
 = 
	`d¨øy_gë
(&
c£rvî
->
böds
,
j
);

40 
li°í_°r
 = 
	`sdsdup
(*
ho°
);

42 
li°í_°r
 = 
	`sdsˇtfmt
÷i°í_°r, ":%i", 
c£rvî
->
p‹t
);

44 
vli°í
 = 
	`d¨øy_push
(&
ma°î
.
li°ís
);

45 *
vli°í
 = 
	`vr_li°í_¸óã
(
li°í_°r
);

47 i‡(*
vli°í
 =
NULL
) {

48 
	`d¨øy_p›
(&
ma°î
.
li°ís
);

49 
	`log_îr‹
("Cª©êli°í %†Áûed", 
li°í_°r
);

50 
	`sds‰ì
(
li°í_°r
);

51  
VR_ERROR
;

53 
	`sds‰ì
(
li°í_°r
);

56 
j
 = 0; j < 
	`d¨øy_n
(&
ma°î
.
li°ís
); j ++) {

57 
vli°í
 = 
	`d¨øy_gë
(&
ma°î
.
li°ís
, 
j
);

58 
°©us
 = 
	`vr_li°í_begö
(*
vli°í
);

59 i‡(
°©us
 !
VR_OK
) {

60 
	`log_îr‹
("BegöÜi°íÅÿ%†Áûed", (*
vli°í
)->
«me
);

61  
VR_ERROR
;

65 
ma°î
.
cbsul
 = 
	`dli°Cª©e
();

66 i‡(
ma°î
.
cbsul
 =
NULL
) {

67 
	`log_îr‹
("CreateÜist failed: out of memory");

68  
VR_ENOMEM
;

71 
	`£tup_ma°î
();

73  
VR_OK
;

74 
	}
}

77 
	$ma°î_deöô
()

79 
vr_li°í
 **
vli°í
;

81 
	`vr_evíéo›_deöô
(&
ma°î
.
vñ
);

83 
	`d¨øy_n
(&
ma°î
.
li°ís
) > 0) {

84 
vli°í
 = 
	`d¨øy_p›
(&
ma°î
.
li°ís
);

85 
	`vr_li°í_de°roy
(*
vli°í
);

87 
	`d¨øy_deöô
(&
ma°î
.
li°ís
);

89 
	}
}

93 
	$˛õ¡_ac˚±
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

94 
sd
;

95 
vr_li°í
 *
vli°í
 = 
¥ivd©a
;

97 (
sd
 = 
	`vr_li°í_ac˚±
(
vli°í
)) > 0) {

98 
	`di•©ch_c⁄n_√w
(
vli°í
, 
sd
);

100 
	}
}

104 
	$cbsul_push
(
c⁄nsw≠unô
 *
su
)

106 
	`±hªad_muãx_lock
(&
ma°î
.
cbsuŒock
);

107 
	`dli°Push
(
ma°î
.
cbsul
, 
su
);

108 
	`±hªad_muãx_u∆ock
(&
ma°î
.
cbsuŒock
);

109 
	}
}

111 
c⁄nsw≠unô
 *

112 
	$cbsul_p›
()

114 
c⁄nsw≠unô
 *
su
 = 
NULL
;

116 
	`±hªad_muãx_lock
(&
ma°î
.
cbsuŒock
);

117 
su
 = 
	`dli°P›
(
ma°î
.
cbsul
);

118 
	`±hªad_muãx_u∆ock
(&
ma°î
.
cbsuŒock
);

120  
su
;

121 
	}
}

124 
	$di•©ch_c⁄n_exi°
(
˛õ¡
 *
c
, 
tid
)

126 
c⁄nsw≠unô
 *
su
 = 
	`csui_√w
();

127 
buf
[1];

128 
vr_w‹kî
 *
w‹kî
;

130 i‡(
su
 =
NULL
) {

131 
	`‰ìClõ¡
(
c
);

133 
	`log_îr‹
("FailedÅoállocate memory for connection swap object\n");

137 
su
->
num
 = 
tid
;

138 
su
->
d©a
 = 
c
;

140 
	`u∆ökClõ¡FromEvíéo›
(
c
);

142 
	`cbsul_push
(
su
);

145 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
c
->
curidx
);

149 
buf
[0] = 'b';

150 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[1], 
buf
, 1) != 1) {

151 
	`log_îr‹
("NoticeÅhe worker failed.");

153 
	}
}

156 
	$thªad_evít_¥o˚ss
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

158 
r°©us_t
 
°©us
;

159 
vr_w‹kî
 *
w‹kî
 = 
¥ivd©a
;

160 
buf
[1];

161 
idx
;

162 
˛õ¡
 *
c
;

163 
c⁄nsw≠unô
 *
su
;

165 
	`ASSERT
(
ñ
 =
ma°î
.
vñ
.el);

166 
	`ASSERT
(
fd
 =
w‹kî
->
sockë∑ús
[0]);

168 i‡(
	`vr_ªad
(
fd
, 
buf
, 1) != 1) {

169 
	`log_w¨n
("Can'tÑead for worker(id:%d) socketpairs[1](%d)",

170 
w‹kî
->
vñ
.
thªad
.
id
, 
fd
);

171 
buf
[0] = 'b';

174 
buf
[0]) {

178 
su
 = 
	`cbsul_p›
();

179 i‡(
su
 =
NULL
) {

180 
	`log_w¨n
("Pop from connection back swapÜist isÇull");

184 
idx
 = 
su
->
num
;

185 
su
->
num
 = 
w‹kî
->
id
;

187 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
idx
);

189 
	`csul_push
(
w‹kî
, 
su
);

193 
buf
[0] = 'j';

194 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[0], 
buf
, 1) != 1) {

195 
	`log_îr‹
("NoticeÅhe worker failed.");

199 
	`log_îr‹
("readÉrror char '%c' for worker(id:%d) socketpairs[0](%d)",

200 
buf
[0], 
w‹kî
->
vñ
.
thªad
.
id
, w‹kî->
sockë∑ús
[1]);

203 
	}
}

207 
	$£tup_ma°î
()

209 
r°©us_t
 
°©us
;

210 
uöt32_t
 
j
;

211 
vr_li°í
 **
vli°í
;

212 
vr_w‹kî
 *
w‹kî
;

215 
j
 = 0; j < 
	`d¨øy_n
(&
w‹kîs
); j ++) {

216 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
j
);

218 
°©us
 = 
	`´Cª©eFûeEvít
(
ma°î
.
vñ
.
ñ
, 
w‹kî
->
sockë∑ús
[0],

219 
AE_READABLE
, 
thªad_evít_¥o˚ss
, 
w‹kî
);

220 i‡(
°©us
 =
AE_ERR
) {

221 
	`log_îr‹
("UnrecoverableÉrror creating master ipfd fileÉvent.");

222  
VR_ERROR
;

227 
j
 = 0; j < 
	`d¨øy_n
(&
ma°î
.
li°ís
); j ++) {

228 
vli°í
 = 
	`d¨øy_gë
(&
ma°î
.
li°ís
,
j
);

229 
°©us
 = 
	`´Cª©eFûeEvít
(
ma°î
.
vñ
.
ñ
, (*
vli°í
)->
sd
, 
AE_READABLE
,

230 
˛õ¡_ac˚±
, *
vli°í
);

231 i‡(
°©us
 =
AE_ERR
) {

232 
	`log_îr‹
("UnrecoverableÉrror creating master ipfd fileÉvent.");

233  
VR_ERROR
;

237  
VR_OK
;

238 
	}
}

242 
	$ma°î_thªad_run
(*
¨gs
)

245 
	`´Maö
(
ma°î
.
vñ
.
ñ
);

247  
NULL
;

248 
	}
}

251 
	$ma°î_run
()

253 
	`vr_thªad_°¨t
(&
ma°î
.
vñ
.
thªad
);

254  
VR_OK
;

255 
	}
}

	@src/vr_master.h

1 #i‚de‡
_VR_MASTER_H_


2 
	#_VR_MASTER_H_


	)

4 
	svr_ma°î
 {

7 
vr_evíéo›
 
	mvñ
;

9 
d¨øy
 
	mli°ís
;

11 
dli°
 *
	mcbsul
;

13 
±hªad_muãx_t
 
	mcbsuŒock
;

14 }
	tvr_ma°î
;

16 
vr_ma°î
 
ma°î
;

18 
ma°î_öô
(
vr_c⁄f
 *
c⁄f
);

19 
ma°î_deöô
();

21 
di•©ch_c⁄n_exi°
(
˛õ¡
 *
c
, 
tid
);

23 
ma°î_run
();

	@src/vr_master.h

1 #i‚de‡
_VR_MASTER_H_


2 
	#_VR_MASTER_H_


	)

4 
	svr_ma°î
 {

7 
vr_evíéo›
 
	mvñ
;

9 
d¨øy
 
	mli°ís
;

11 
dli°
 *
	mcbsul
;

13 
±hªad_muãx_t
 
	mcbsuŒock
;

14 }
	tvr_ma°î
;

16 
vr_ma°î
 
ma°î
;

18 
ma°î_öô
(
vr_c⁄f
 *
c⁄f
);

19 
ma°î_deöô
();

21 
di•©ch_c⁄n_exi°
(
˛õ¡
 *
c
, 
tid
);

23 
ma°î_run
();

	@src/vr_multi.c

1 
	~<vr_c‹e.h
>

16 
	sw©chedKey
 {

17 
robj
 *
	mkey
;

18 
ªdisDb
 *
	mdb
;

19 } 
	tw©chedKey
;

24 
	$unw©chAŒKeys
(
˛õ¡
 *
c
) {

25 
dli°Iãr
 
li
;

26 
dli°Node
 *
 
;

28 i‡(
	`dli°Lígth
(
c
->
w©ched_keys
) == 0) ;

29 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li
);

30 (
 
 = 
	`dli°Next
(&
li
))) {

31 
dli°
 *
˛õ¡s
;

32 
w©chedKey
 *
wk
;

36 
wk
 = 
	`dli°NodeVÆue
(
 
);

37 
˛õ¡s
 = 
	`di˘FëchVÆue
(
wk
->
db
->
w©ched_keys
, wk->
key
);

38 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
˛õ¡s
 != NULL);

39 
	`dli°DñNode
(
˛õ¡s
,
	`dli°SórchKey
(˛õ¡s,
c
));

41 i‡(
	`dli°Lígth
(
˛õ¡s
) == 0)

42 
	`di˘Dñëe
(
wk
->
db
->
w©ched_keys
, wk->
key
);

44 
	`dli°DñNode
(
c
->
w©ched_keys
,
 
);

45 
	`de¸RefCou¡
(
wk
->
key
);

46 
	`d‰ì
(
wk
);

48 
	}
}

51 
	$öôClõ¡Mu…iSèã
(
˛õ¡
 *
c
) {

52 
c
->
m°©e
.
comm™ds
 = 
NULL
;

53 
c
->
m°©e
.
cou¡
 = 0;

54 
	}
}

57 
	$‰ìClõ¡Mu…iSèã
(
˛õ¡
 *
c
) {

58 
j
;

60 
j
 = 0; j < 
c
->
m°©e
.
cou¡
; j++) {

61 
i
;

62 
mu…iCmd
 *
mc
 = 
c
->
m°©e
.
comm™ds
+
j
;

64 
i
 = 0; i < 
mc
->
¨gc
; i++)

65 
	`de¸RefCou¡
(
mc
->
¨gv
[
i
]);

66 
	`d‰ì
(
mc
->
¨gv
);

68 i‡(
c
->
m°©e
.
comm™ds
Ë
	`d‰ì
(c->mstate.commands);

69 
	}
}

72 
	$queueMu…iComm™d
(
˛õ¡
 *
c
) {

73 
mu…iCmd
 *
mc
;

74 
j
;

76 
c
->
m°©e
.
comm™ds
 = 
	`dªÆloc
(c->mstate.commands,

77 (
mu…iCmd
)*(
c
->
m°©e
.
cou¡
+1));

78 
mc
 = 
c
->
m°©e
.
comm™ds
+c->m°©e.
cou¡
;

79 
mc
->
cmd
 = 
c
->cmd;

80 
mc
->
¨gc
 = 
c
->argc;

81 
mc
->
¨gv
 = 
	`dÆloc
((
robj
*)*
c
->
¨gc
);

82 
	`mem˝y
(
mc
->
¨gv
,
c
->¨gv,(
robj
*)*c->
¨gc
);

83 
j
 = 0; j < 
c
->
¨gc
; j++)

84 
	`ö¸RefCou¡
(
mc
->
¨gv
[
j
]);

85 
c
->
m°©e
.
cou¡
++;

86 
	}
}

90 
	$ÊagTønß˘i⁄
(
˛õ¡
 *
c
) {

91 i‡(
c
->
Êags
 & 
CLIENT_MULTI
)

92 
c
->
Êags
 |
CLIENT_DIRTY_EXEC
;

93 
	}
}

95 
	$execComm™d
(
˛õ¡
 *
c
) {

96 
	`addRïly
(
c
,
sh¨ed
.
ok
);

97 
	}
}

99 
	$disˇrdComm™d
(
˛õ¡
 *
c
) {

100 i‡(!(
c
->
Êags
 & 
CLIENT_MULTI
)) {

101 
	`addRïlyEº‹
(
c
,"DISCARD without MULTI");

104 
	`disˇrdTønß˘i⁄
(
c
);

105 
	`addRïly
(
c
,
sh¨ed
.
ok
);

106 
	}
}

108 
	$disˇrdTønß˘i⁄
(
˛õ¡
 *
c
) {

109 
	`‰ìClõ¡Mu…iSèã
(
c
);

110 
	`öôClõ¡Mu…iSèã
(
c
);

111 
c
->
Êags
 &~(
CLIENT_MULTI
|
CLIENT_DIRTY_CAS
|
CLIENT_DIRTY_EXEC
);

112 
	`unw©chAŒKeys
(
c
);

113 
	}
}

115 
	$mu…iComm™d
(
˛õ¡
 *
c
) {

116 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

117 
	`addRïlyEº‹
(
c
,"MULTI calls canÇot beÇested");

120 
c
->
Êags
 |
CLIENT_MULTI
;

121 
	`addRïly
(
c
,
sh¨ed
.
ok
);

122 
	}
}

125 
	$w©chF‹Key
(
˛õ¡
 *
c
, 
robj
 *
key
) {

126 
dli°
 *
˛õ¡s
 = 
NULL
;

127 
dli°Iãr
 
li
;

128 
dli°Node
 *
 
;

129 
w©chedKey
 *
wk
;

132 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li
);

133 (
 
 = 
	`dli°Next
(&
li
))) {

134 
wk
 = 
	`dli°NodeVÆue
(
 
);

135 i‡(
wk
->
db
 =
c
->db && 
	`equÆSåögObje˘s
(
key
,wk->key))

139 
˛õ¡s
 = 
	`di˘FëchVÆue
(
c
->
db
->
w©ched_keys
,
key
);

140 i‡(!
˛õ¡s
) {

141 
˛õ¡s
 = 
	`dli°Cª©e
();

142 
	`di˘Add
(
c
->
db
->
w©ched_keys
,
key
,
˛õ¡s
);

143 
	`ö¸RefCou¡
(
key
);

145 
	`dli°AddNodeTaû
(
˛õ¡s
,
c
);

147 
wk
 = 
	`dÆloc
((*wk));

148 
wk
->
key
 = key;

149 
wk
->
db
 = 
c
->db;

150 
	`ö¸RefCou¡
(
key
);

151 
	`dli°AddNodeTaû
(
c
->
w©ched_keys
,
wk
);

152 
	}
}

154 
	$w©chComm™d
(
˛õ¡
 *
c
) {

155 
j
;

157 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

158 
	`addRïlyEº‹
(
c
,"WATCH inside MULTI isÇotállowed");

161 
j
 = 1; j < 
c
->
¨gc
; j++)

162 
	`w©chF‹Key
(
c
,c->
¨gv
[
j
]);

163 
	`addRïly
(
c
,
sh¨ed
.
ok
);

164 
	}
}

168 
	$touchW©chedKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

169 
dli°
 *
˛õ¡s
;

170 
dli°Iãr
 
li
;

171 
dli°Node
 *
 
;

173 i‡(
	`di˘Size
(
db
->
w©ched_keys
) == 0) ;

174 
˛õ¡s
 = 
	`di˘FëchVÆue
(
db
->
w©ched_keys
, 
key
);

175 i‡(!
˛õ¡s
) ;

179 
	`dli°Rewöd
(
˛õ¡s
,&
li
);

180 (
 
 = 
	`dli°Next
(&
li
))) {

181 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

183 
c
->
Êags
 |
CLIENT_DIRTY_CAS
;

185 
	}
}

191 
	$touchW©chedKeysOnFlush
(
dbid
) {

192 
dli°Iãr
 
li1
, 
li2
;

193 
dli°Node
 *
 
;

196 
	`dli°Rewöd
(
£rvî
.
˛õ¡s
,&
li1
);

197 (
 
 = 
	`dli°Next
(&
li1
))) {

198 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

199 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li2
);

200 (
 
 = 
	`dli°Next
(&
li2
))) {

201 
w©chedKey
 *
wk
 = 
	`dli°NodeVÆue
(
 
);

206 i‡(
dbid
 =-1 || 
wk
->
db
->
id
 == dbid) {

207 i‡(
	`di˘Föd
(
wk
->
db
->
di˘
, wk->
key
->
±r
Ë!
NULL
)

208 
c
->
Êags
 |
CLIENT_DIRTY_CAS
;

212 
	}
}

	@src/vr_multi.c

1 
	~<vr_c‹e.h
>

16 
	sw©chedKey
 {

17 
robj
 *
	mkey
;

18 
ªdisDb
 *
	mdb
;

19 } 
	tw©chedKey
;

24 
	$unw©chAŒKeys
(
˛õ¡
 *
c
) {

25 
dli°Iãr
 
li
;

26 
dli°Node
 *
 
;

28 i‡(
	`dli°Lígth
(
c
->
w©ched_keys
) == 0) ;

29 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li
);

30 (
 
 = 
	`dli°Next
(&
li
))) {

31 
dli°
 *
˛õ¡s
;

32 
w©chedKey
 *
wk
;

36 
wk
 = 
	`dli°NodeVÆue
(
 
);

37 
˛õ¡s
 = 
	`di˘FëchVÆue
(
wk
->
db
->
w©ched_keys
, wk->
key
);

38 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
˛õ¡s
 != NULL);

39 
	`dli°DñNode
(
˛õ¡s
,
	`dli°SórchKey
(˛õ¡s,
c
));

41 i‡(
	`dli°Lígth
(
˛õ¡s
) == 0)

42 
	`di˘Dñëe
(
wk
->
db
->
w©ched_keys
, wk->
key
);

44 
	`dli°DñNode
(
c
->
w©ched_keys
,
 
);

45 
	`de¸RefCou¡
(
wk
->
key
);

46 
	`d‰ì
(
wk
);

48 
	}
}

51 
	$öôClõ¡Mu…iSèã
(
˛õ¡
 *
c
) {

52 
c
->
m°©e
.
comm™ds
 = 
NULL
;

53 
c
->
m°©e
.
cou¡
 = 0;

54 
	}
}

57 
	$‰ìClõ¡Mu…iSèã
(
˛õ¡
 *
c
) {

58 
j
;

60 
j
 = 0; j < 
c
->
m°©e
.
cou¡
; j++) {

61 
i
;

62 
mu…iCmd
 *
mc
 = 
c
->
m°©e
.
comm™ds
+
j
;

64 
i
 = 0; i < 
mc
->
¨gc
; i++)

65 
	`de¸RefCou¡
(
mc
->
¨gv
[
i
]);

66 
	`d‰ì
(
mc
->
¨gv
);

68 i‡(
c
->
m°©e
.
comm™ds
Ë
	`d‰ì
(c->mstate.commands);

69 
	}
}

72 
	$queueMu…iComm™d
(
˛õ¡
 *
c
) {

73 
mu…iCmd
 *
mc
;

74 
j
;

76 
c
->
m°©e
.
comm™ds
 = 
	`dªÆloc
(c->mstate.commands,

77 (
mu…iCmd
)*(
c
->
m°©e
.
cou¡
+1));

78 
mc
 = 
c
->
m°©e
.
comm™ds
+c->m°©e.
cou¡
;

79 
mc
->
cmd
 = 
c
->cmd;

80 
mc
->
¨gc
 = 
c
->argc;

81 
mc
->
¨gv
 = 
	`dÆloc
((
robj
*)*
c
->
¨gc
);

82 
	`mem˝y
(
mc
->
¨gv
,
c
->¨gv,(
robj
*)*c->
¨gc
);

83 
j
 = 0; j < 
c
->
¨gc
; j++)

84 
	`ö¸RefCou¡
(
mc
->
¨gv
[
j
]);

85 
c
->
m°©e
.
cou¡
++;

86 
	}
}

90 
	$ÊagTønß˘i⁄
(
˛õ¡
 *
c
) {

91 i‡(
c
->
Êags
 & 
CLIENT_MULTI
)

92 
c
->
Êags
 |
CLIENT_DIRTY_EXEC
;

93 
	}
}

95 
	$execComm™d
(
˛õ¡
 *
c
) {

96 
	`addRïly
(
c
,
sh¨ed
.
ok
);

97 
	}
}

99 
	$disˇrdComm™d
(
˛õ¡
 *
c
) {

100 i‡(!(
c
->
Êags
 & 
CLIENT_MULTI
)) {

101 
	`addRïlyEº‹
(
c
,"DISCARD without MULTI");

104 
	`disˇrdTønß˘i⁄
(
c
);

105 
	`addRïly
(
c
,
sh¨ed
.
ok
);

106 
	}
}

108 
	$disˇrdTønß˘i⁄
(
˛õ¡
 *
c
) {

109 
	`‰ìClõ¡Mu…iSèã
(
c
);

110 
	`öôClõ¡Mu…iSèã
(
c
);

111 
c
->
Êags
 &~(
CLIENT_MULTI
|
CLIENT_DIRTY_CAS
|
CLIENT_DIRTY_EXEC
);

112 
	`unw©chAŒKeys
(
c
);

113 
	}
}

115 
	$mu…iComm™d
(
˛õ¡
 *
c
) {

116 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

117 
	`addRïlyEº‹
(
c
,"MULTI calls canÇot beÇested");

120 
c
->
Êags
 |
CLIENT_MULTI
;

121 
	`addRïly
(
c
,
sh¨ed
.
ok
);

122 
	}
}

125 
	$w©chF‹Key
(
˛õ¡
 *
c
, 
robj
 *
key
) {

126 
dli°
 *
˛õ¡s
 = 
NULL
;

127 
dli°Iãr
 
li
;

128 
dli°Node
 *
 
;

129 
w©chedKey
 *
wk
;

132 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li
);

133 (
 
 = 
	`dli°Next
(&
li
))) {

134 
wk
 = 
	`dli°NodeVÆue
(
 
);

135 i‡(
wk
->
db
 =
c
->db && 
	`equÆSåögObje˘s
(
key
,wk->key))

139 
˛õ¡s
 = 
	`di˘FëchVÆue
(
c
->
db
->
w©ched_keys
,
key
);

140 i‡(!
˛õ¡s
) {

141 
˛õ¡s
 = 
	`dli°Cª©e
();

142 
	`di˘Add
(
c
->
db
->
w©ched_keys
,
key
,
˛õ¡s
);

143 
	`ö¸RefCou¡
(
key
);

145 
	`dli°AddNodeTaû
(
˛õ¡s
,
c
);

147 
wk
 = 
	`dÆloc
((*wk));

148 
wk
->
key
 = key;

149 
wk
->
db
 = 
c
->db;

150 
	`ö¸RefCou¡
(
key
);

151 
	`dli°AddNodeTaû
(
c
->
w©ched_keys
,
wk
);

152 
	}
}

154 
	$w©chComm™d
(
˛õ¡
 *
c
) {

155 
j
;

157 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

158 
	`addRïlyEº‹
(
c
,"WATCH inside MULTI isÇotállowed");

161 
j
 = 1; j < 
c
->
¨gc
; j++)

162 
	`w©chF‹Key
(
c
,c->
¨gv
[
j
]);

163 
	`addRïly
(
c
,
sh¨ed
.
ok
);

164 
	}
}

168 
	$touchW©chedKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

169 
dli°
 *
˛õ¡s
;

170 
dli°Iãr
 
li
;

171 
dli°Node
 *
 
;

173 i‡(
	`di˘Size
(
db
->
w©ched_keys
) == 0) ;

174 
˛õ¡s
 = 
	`di˘FëchVÆue
(
db
->
w©ched_keys
, 
key
);

175 i‡(!
˛õ¡s
) ;

179 
	`dli°Rewöd
(
˛õ¡s
,&
li
);

180 (
 
 = 
	`dli°Next
(&
li
))) {

181 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

183 
c
->
Êags
 |
CLIENT_DIRTY_CAS
;

185 
	}
}

191 
	$touchW©chedKeysOnFlush
(
dbid
) {

192 
dli°Iãr
 
li1
, 
li2
;

193 
dli°Node
 *
 
;

196 
	`dli°Rewöd
(
£rvî
.
˛õ¡s
,&
li1
);

197 (
 
 = 
	`dli°Next
(&
li1
))) {

198 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

199 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li2
);

200 (
 
 = 
	`dli°Next
(&
li2
))) {

201 
w©chedKey
 *
wk
 = 
	`dli°NodeVÆue
(
 
);

206 i‡(
dbid
 =-1 || 
wk
->
db
->
id
 == dbid) {

207 i‡(
	`di˘Föd
(
wk
->
db
->
di˘
, wk->
key
->
±r
Ë!
NULL
)

208 
c
->
Êags
 |
CLIENT_DIRTY_CAS
;

212 
	}
}

	@src/vr_multi.h

1 #i‚de‡
_VR_MULTI_H_


2 
	#_VR_MULTI_H_


	)

5 
	smu…iCmd
 {

6 
robj
 **
	m¨gv
;

7 
	m¨gc
;

8 
ªdisComm™d
 *
	mcmd
;

9 } 
	tmu…iCmd
;

11 
	smu…iSèã
 {

12 
mu…iCmd
 *
	mcomm™ds
;

13 
	mcou¡
;

14 
	mmöª∂iˇs
;

15 
time_t
 
	mmöª∂iˇs_timeout
;

16 } 
	tmu…iSèã
;

18 
unw©chAŒKeys
(
˛õ¡
 *
c
);

19 
öôClõ¡Mu…iSèã
(
˛õ¡
 *
c
);

20 
‰ìClõ¡Mu…iSèã
(
˛õ¡
 *
c
);

21 
queueMu…iComm™d
(
˛õ¡
 *
c
);

23 
ÊagTønß˘i⁄
(
˛õ¡
 *
c
);

24 
execComm™d
(
˛õ¡
 *
c
);

25 
disˇrdComm™d
(
˛õ¡
 *
c
);

26 
disˇrdTønß˘i⁄
(
˛õ¡
 *
c
);

27 
mu…iComm™d
(
˛õ¡
 *
c
);

28 
w©chF‹Key
(
˛õ¡
 *
c
, 
robj
 *
key
);

29 
w©chComm™d
(
˛õ¡
 *
c
);

30 
touchW©chedKey
(
ªdisDb
 *
db
, 
robj
 *
key
);

31 
touchW©chedKeysOnFlush
(
dbid
) ;

	@src/vr_multi.h

1 #i‚de‡
_VR_MULTI_H_


2 
	#_VR_MULTI_H_


	)

5 
	smu…iCmd
 {

6 
robj
 **
	m¨gv
;

7 
	m¨gc
;

8 
ªdisComm™d
 *
	mcmd
;

9 } 
	tmu…iCmd
;

11 
	smu…iSèã
 {

12 
mu…iCmd
 *
	mcomm™ds
;

13 
	mcou¡
;

14 
	mmöª∂iˇs
;

15 
time_t
 
	mmöª∂iˇs_timeout
;

16 } 
	tmu…iSèã
;

18 
unw©chAŒKeys
(
˛õ¡
 *
c
);

19 
öôClõ¡Mu…iSèã
(
˛õ¡
 *
c
);

20 
‰ìClõ¡Mu…iSèã
(
˛õ¡
 *
c
);

21 
queueMu…iComm™d
(
˛õ¡
 *
c
);

23 
ÊagTønß˘i⁄
(
˛õ¡
 *
c
);

24 
execComm™d
(
˛õ¡
 *
c
);

25 
disˇrdComm™d
(
˛õ¡
 *
c
);

26 
disˇrdTønß˘i⁄
(
˛õ¡
 *
c
);

27 
mu…iComm™d
(
˛õ¡
 *
c
);

28 
w©chF‹Key
(
˛õ¡
 *
c
, 
robj
 *
key
);

29 
w©chComm™d
(
˛õ¡
 *
c
);

30 
touchW©chedKey
(
ªdisDb
 *
db
, 
robj
 *
key
);

31 
touchW©chedKeysOnFlush
(
dbid
) ;

	@src/vr_notify.c

1 
	~<vr_c‹e.h
>

12 
	$key•a˚EvítsSåögToFœgs
(*
˛as£s
) {

13 *
p
 = 
˛as£s
;

14 
c
, 
Êags
 = 0;

16 (
c
 = *
p
++) != '\0') {

17 
c
) {

18 'A': 
Êags
 |
NOTIFY_ALL
; ;

19 'g': 
Êags
 |
NOTIFY_GENERIC
; ;

20 '$': 
Êags
 |
NOTIFY_STRING
; ;

21 'l': 
Êags
 |
NOTIFY_LIST
; ;

22 's': 
Êags
 |
NOTIFY_SET
; ;

23 'h': 
Êags
 |
NOTIFY_HASH
; ;

24 'z': 
Êags
 |
NOTIFY_ZSET
; ;

25 'x': 
Êags
 |
NOTIFY_EXPIRED
; ;

26 'e': 
Êags
 |
NOTIFY_EVICTED
; ;

27 'K': 
Êags
 |
NOTIFY_KEYSPACE
; ;

28 'E': 
Êags
 |
NOTIFY_KEYEVENT
; ;

32  
Êags
;

33 
	}
}

40 
sds
 
	$key•a˚EvítsFœgsToSåög
(
Êags
) {

41 
sds
 
ªs
;

43 
ªs
 = 
	`sd£m±y
();

44 i‡((
Êags
 & 
NOTIFY_ALL
) == NOTIFY_ALL) {

45 
ªs
 = 
	`sdsˇéí
(res,"A",1);

47 i‡(
Êags
 & 
NOTIFY_GENERIC
Ë
ªs
 = 
	`sdsˇéí
(res,"g",1);

48 i‡(
Êags
 & 
NOTIFY_STRING
Ë
ªs
 = 
	`sdsˇéí
(res,"$",1);

49 i‡(
Êags
 & 
NOTIFY_LIST
Ë
ªs
 = 
	`sdsˇéí
(res,"l",1);

50 i‡(
Êags
 & 
NOTIFY_SET
Ë
ªs
 = 
	`sdsˇéí
(res,"s",1);

51 i‡(
Êags
 & 
NOTIFY_HASH
Ë
ªs
 = 
	`sdsˇéí
(res,"h",1);

52 i‡(
Êags
 & 
NOTIFY_ZSET
Ë
ªs
 = 
	`sdsˇéí
(res,"z",1);

53 i‡(
Êags
 & 
NOTIFY_EXPIRED
Ë
ªs
 = 
	`sdsˇéí
(res,"x",1);

54 i‡(
Êags
 & 
NOTIFY_EVICTED
Ë
ªs
 = 
	`sdsˇéí
(res,"e",1);

56 i‡(
Êags
 & 
NOTIFY_KEYSPACE
Ë
ªs
 = 
	`sdsˇéí
(res,"K",1);

57 i‡(
Êags
 & 
NOTIFY_KEYEVENT
Ë
ªs
 = 
	`sdsˇéí
(res,"E",1);

58  
ªs
;

59 
	}
}

69 
	$nŸifyKey•a˚Evít
(
ty≥
, *
evít
, 
robj
 *
key
, 
dbid
) {

70 
sds
 
ch™
;

71 
robj
 *
ch™obj
, *
evítobj
;

72 
Àn
 = -1;

73 
buf
[24];

76 i‡(!(
£rvî
.
nŸify_key•a˚_evíts
 & 
ty≥
)) ;

78 
evítobj
 = 
	`¸óãSåögObje˘
(
evít
,
	`°æí
(event));

81 i‡(
£rvî
.
nŸify_key•a˚_evíts
 & 
NOTIFY_KEYSPACE
) {

82 
ch™
 = 
	`sd¢ewÀn
("__keyspace@",11);

84 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),
dbid
);

86 
ch™
 = 
	`sdsˇéí
(ch™, 
buf
, 
Àn
);

87 
ch™
 = 
	`sdsˇéí
(chan, "__:", 3);

88 
ch™
 = 
	`sdsˇtsds
(ch™, 
key
->
±r
);

89 
ch™obj
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
ch™
);

91 
	`pubsubPublishMesßge
(
ch™obj
, 
evítobj
);

92 
	`de¸RefCou¡
(
ch™obj
);

96 i‡(
£rvî
.
nŸify_key•a˚_evíts
 & 
NOTIFY_KEYEVENT
) {

97 
ch™
 = 
	`sd¢ewÀn
("__keyevent@",11);

98 i‡(
Àn
 =-1ËÀ¿
	`Œ2°rög
(
buf
,(buf),
dbid
);

99 
ch™
 = 
	`sdsˇéí
(ch™, 
buf
, 
Àn
);

100 
ch™
 = 
	`sdsˇéí
(chan, "__:", 3);

101 
ch™
 = 
	`sdsˇtsds
(ch™, 
evítobj
->
±r
);

102 
ch™obj
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
ch™
);

103 
	`pubsubPublishMesßge
(
ch™obj
, 
key
);

104 
	`de¸RefCou¡
(
ch™obj
);

106 
	`de¸RefCou¡
(
evítobj
);

107 
	}
}

	@src/vr_notify.c

1 
	~<vr_c‹e.h
>

12 
	$key•a˚EvítsSåögToFœgs
(*
˛as£s
) {

13 *
p
 = 
˛as£s
;

14 
c
, 
Êags
 = 0;

16 (
c
 = *
p
++) != '\0') {

17 
c
) {

18 'A': 
Êags
 |
NOTIFY_ALL
; ;

19 'g': 
Êags
 |
NOTIFY_GENERIC
; ;

20 '$': 
Êags
 |
NOTIFY_STRING
; ;

21 'l': 
Êags
 |
NOTIFY_LIST
; ;

22 's': 
Êags
 |
NOTIFY_SET
; ;

23 'h': 
Êags
 |
NOTIFY_HASH
; ;

24 'z': 
Êags
 |
NOTIFY_ZSET
; ;

25 'x': 
Êags
 |
NOTIFY_EXPIRED
; ;

26 'e': 
Êags
 |
NOTIFY_EVICTED
; ;

27 'K': 
Êags
 |
NOTIFY_KEYSPACE
; ;

28 'E': 
Êags
 |
NOTIFY_KEYEVENT
; ;

32  
Êags
;

33 
	}
}

40 
sds
 
	$key•a˚EvítsFœgsToSåög
(
Êags
) {

41 
sds
 
ªs
;

43 
ªs
 = 
	`sd£m±y
();

44 i‡((
Êags
 & 
NOTIFY_ALL
) == NOTIFY_ALL) {

45 
ªs
 = 
	`sdsˇéí
(res,"A",1);

47 i‡(
Êags
 & 
NOTIFY_GENERIC
Ë
ªs
 = 
	`sdsˇéí
(res,"g",1);

48 i‡(
Êags
 & 
NOTIFY_STRING
Ë
ªs
 = 
	`sdsˇéí
(res,"$",1);

49 i‡(
Êags
 & 
NOTIFY_LIST
Ë
ªs
 = 
	`sdsˇéí
(res,"l",1);

50 i‡(
Êags
 & 
NOTIFY_SET
Ë
ªs
 = 
	`sdsˇéí
(res,"s",1);

51 i‡(
Êags
 & 
NOTIFY_HASH
Ë
ªs
 = 
	`sdsˇéí
(res,"h",1);

52 i‡(
Êags
 & 
NOTIFY_ZSET
Ë
ªs
 = 
	`sdsˇéí
(res,"z",1);

53 i‡(
Êags
 & 
NOTIFY_EXPIRED
Ë
ªs
 = 
	`sdsˇéí
(res,"x",1);

54 i‡(
Êags
 & 
NOTIFY_EVICTED
Ë
ªs
 = 
	`sdsˇéí
(res,"e",1);

56 i‡(
Êags
 & 
NOTIFY_KEYSPACE
Ë
ªs
 = 
	`sdsˇéí
(res,"K",1);

57 i‡(
Êags
 & 
NOTIFY_KEYEVENT
Ë
ªs
 = 
	`sdsˇéí
(res,"E",1);

58  
ªs
;

59 
	}
}

69 
	$nŸifyKey•a˚Evít
(
ty≥
, *
evít
, 
robj
 *
key
, 
dbid
) {

70 
sds
 
ch™
;

71 
robj
 *
ch™obj
, *
evítobj
;

72 
Àn
 = -1;

73 
buf
[24];

76 i‡(!(
£rvî
.
nŸify_key•a˚_evíts
 & 
ty≥
)) ;

78 
evítobj
 = 
	`¸óãSåögObje˘
(
evít
,
	`°æí
(event));

81 i‡(
£rvî
.
nŸify_key•a˚_evíts
 & 
NOTIFY_KEYSPACE
) {

82 
ch™
 = 
	`sd¢ewÀn
("__keyspace@",11);

84 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),
dbid
);

86 
ch™
 = 
	`sdsˇéí
(ch™, 
buf
, 
Àn
);

87 
ch™
 = 
	`sdsˇéí
(chan, "__:", 3);

88 
ch™
 = 
	`sdsˇtsds
(ch™, 
key
->
±r
);

89 
ch™obj
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
ch™
);

91 
	`pubsubPublishMesßge
(
ch™obj
, 
evítobj
);

92 
	`de¸RefCou¡
(
ch™obj
);

96 i‡(
£rvî
.
nŸify_key•a˚_evíts
 & 
NOTIFY_KEYEVENT
) {

97 
ch™
 = 
	`sd¢ewÀn
("__keyevent@",11);

98 i‡(
Àn
 =-1ËÀ¿
	`Œ2°rög
(
buf
,(buf),
dbid
);

99 
ch™
 = 
	`sdsˇéí
(ch™, 
buf
, 
Àn
);

100 
ch™
 = 
	`sdsˇéí
(chan, "__:", 3);

101 
ch™
 = 
	`sdsˇtsds
(ch™, 
evítobj
->
±r
);

102 
ch™obj
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
ch™
);

103 
	`pubsubPublishMesßge
(
ch™obj
, 
key
);

104 
	`de¸RefCou¡
(
ch™obj
);

106 
	`de¸RefCou¡
(
evítobj
);

107 
	}
}

	@src/vr_notify.h

1 #i‚de‡
_VR_NOTIFY_H_


2 
	#_VR_NOTIFY_H_


	)

6 
	#NOTIFY_KEYSPACE
 (1<<0Ë

	)

7 
	#NOTIFY_KEYEVENT
 (1<<1Ë

	)

8 
	#NOTIFY_GENERIC
 (1<<2Ë

	)

9 
	#NOTIFY_STRING
 (1<<3Ë

	)

10 
	#NOTIFY_LIST
 (1<<4Ë

	)

11 
	#NOTIFY_SET
 (1<<5Ë

	)

12 
	#NOTIFY_HASH
 (1<<6Ë

	)

13 
	#NOTIFY_ZSET
 (1<<7Ë

	)

14 
	#NOTIFY_EXPIRED
 (1<<8Ë

	)

15 
	#NOTIFY_EVICTED
 (1<<9Ë

	)

16 
	#NOTIFY_ALL
 (
NOTIFY_GENERIC
 | 
NOTIFY_STRING
 | 
NOTIFY_LIST
 | 
NOTIFY_SET
 | 
NOTIFY_HASH
 | 
NOTIFY_ZSET
 | 
NOTIFY_EXPIRED
 | 
NOTIFY_EVICTED
Ë

	)

	@src/vr_notify.h

1 #i‚de‡
_VR_NOTIFY_H_


2 
	#_VR_NOTIFY_H_


	)

6 
	#NOTIFY_KEYSPACE
 (1<<0Ë

	)

7 
	#NOTIFY_KEYEVENT
 (1<<1Ë

	)

8 
	#NOTIFY_GENERIC
 (1<<2Ë

	)

9 
	#NOTIFY_STRING
 (1<<3Ë

	)

10 
	#NOTIFY_LIST
 (1<<4Ë

	)

11 
	#NOTIFY_SET
 (1<<5Ë

	)

12 
	#NOTIFY_HASH
 (1<<6Ë

	)

13 
	#NOTIFY_ZSET
 (1<<7Ë

	)

14 
	#NOTIFY_EXPIRED
 (1<<8Ë

	)

15 
	#NOTIFY_EVICTED
 (1<<9Ë

	)

16 
	#NOTIFY_ALL
 (
NOTIFY_GENERIC
 | 
NOTIFY_STRING
 | 
NOTIFY_LIST
 | 
NOTIFY_SET
 | 
NOTIFY_HASH
 | 
NOTIFY_ZSET
 | 
NOTIFY_EXPIRED
 | 
NOTIFY_EVICTED
Ë

	)

	@src/vr_object.c

1 
	~<m©h.h
>

2 
	~<˘y≥.h
>

4 
	~<vr_c‹e.h
>

7 #ifde‡
__CYGWIN__


8 
	#°πﬁd
(
a
,
b
Ë(()
	`°πod
(◊),(b)))

	)

12 
robj
 *
	$¸óãObje˘
(
ty≥
, *
±r
) {

14 
robj
 *
o
 = 
	`dÆloc
((*o));

16 
o
->
ty≥
 =Åype;

18 
o
->
ícodög
 = 
OBJ_ENCODING_RAW
;

20 
o
->
±r
 =Ötr;

22 
o
->
c⁄°™t
 = 0;

24 
o
->
ªfcou¡
 = -1;

26 
o
->
Ãu
 = 0;

27  
o
;

28 
	}
}

34 
robj
 *
	$¸óãRawSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

35  
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
±r
,
Àn
));

36 
	}
}

42 
robj
 *
	$¸óãEmbeddedSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

44 
robj
 *
o
 = 
	`dÆloc
(‘obj)+(
sdshdr8
)+
Àn
+1);

45 
sdshdr8
 *
sh
 = (*)(
o
+1);

47 
o
->
ty≥
 = 
OBJ_STRING
;

48 
o
->
ícodög
 = 
OBJ_ENCODING_EMBSTR
;

49 
o
->
±r
 = 
sh
+1;

50 
o
->
c⁄°™t
 = 0;

51 
o
->
ªfcou¡
 = -1;

52 
o
->
Ãu
 = 0;

54 
sh
->
Àn
 =Üen;

55 
sh
->
Æloc
 = 
Àn
;

56 
sh
->
Êags
 = 
SDS_TYPE_8
;

57 i‡(
±r
) {

58 
	`mem˝y
(
sh
->
buf
,
±r
,
Àn
);

59 
sh
->
buf
[
Àn
] = '\0';

61 
	`mem£t
(
sh
->
buf
,0,
Àn
+1);

63  
o
;

64 
	}
}

72 
	#OBJ_ENCODING_EMBSTR_SIZE_LIMIT
 44

	)

74 
robj
 *
	$¸óãSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

75 i‡(
Àn
 <
OBJ_ENCODING_EMBSTR_SIZE_LIMIT
)

76  
	`¸óãEmbeddedSåögObje˘
(
±r
,
Àn
);

78  
	`¸óãRawSåögObje˘
(
±r
,
Àn
);

79 
	}
}

81 
robj
 *
	$¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
) {

82 
robj
 *
o
;

83 i‡(
vÆue
 >0 && vÆuê< 
OBJ_SHARED_INTEGERS
) {

84 
o
 = 
sh¨ed
.
öãgîs
[
vÆue
];

86 i‡(
vÆue
 >
LONG_MIN
 && vÆuê<
LONG_MAX
) {

87 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
NULL
);

88 
o
->
ícodög
 = 
OBJ_ENCODING_INT
;

89 
o
->
±r
 = (*)(()
vÆue
);

91 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sds‰oml⁄gl⁄g
(
vÆue
));

94  
o
;

95 
	}
}

104 
robj
 *
	$¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
, 
hum™‰õndly
) {

105 
buf
[256];

106 
Àn
;

108 i‡(
	`isöf
(
vÆue
)) {

111 i‡(
vÆue
 > 0) {

112 
	`mem˝y
(
buf
,"inf",3);

113 
Àn
 = 3;

115 
	`mem˝y
(
buf
,"-inf",4);

116 
Àn
 = 4;

118 } i‡(
hum™‰õndly
) {

124 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%.17Lf", 
vÆue
);

126 i‡(
	`°rchr
(
buf
,'.'Ë!
NULL
) {

127 *
p
 = 
buf
+
Àn
-1;

128 *
p
 == '0') {

129 
p
--;

130 
Àn
--;

132 i‡(*
p
 ='.'Ë
Àn
--;

135 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%.17Lg", 
vÆue
);

137  
	`¸óãSåögObje˘
(
buf
,
Àn
);

138 
	}
}

149 
robj
 *
	$dupSåögObje˘
(
robj
 *
o
) {

150 
robj
 *
d
;

152 
	`ASSERT
(
o
->
ty≥
 =
OBJ_STRING
);

154 
o
->
ícodög
) {

155 
OBJ_ENCODING_RAW
:

156  
	`¸óãRawSåögObje˘
(
o
->
±r
,
	`sd¶í
(o->ptr));

157 
OBJ_ENCODING_EMBSTR
:

158  
	`¸óãEmbeddedSåögObje˘
(
o
->
±r
,
	`sd¶í
(o->ptr));

159 
OBJ_ENCODING_INT
:

160 
d
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
NULL
);

161 
d
->
ícodög
 = 
OBJ_ENCODING_INT
;

162 
d
->
±r
 = 
o
->ptr;

163  
d
;

165 
	`£rvîP™ic
("WrongÉncoding.");

168 
	}
}

170 
robj
 *
	$dupSåögObje˘Unc⁄°™t
(
robj
 *
o
) {

171 i‡(
o
->
c⁄°™t
)  o;

172  
	`dupSåögObje˘
(
o
);

173 
	}
}

175 
robj
 *
	$¸óãQuickli°Obje˘
() {

176 
quickli°
 *
l
 = 
	`quickli°Cª©e
();

177 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_LIST
,
l
);

178 
o
->
ícodög
 = 
OBJ_ENCODING_QUICKLIST
;

179  
o
;

180 
	}
}

182 
robj
 *
	$¸óãZùli°Obje˘
() {

183 *
zl
 = 
	`zùli°New
();

184 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_LIST
,
zl
);

185 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

186  
o
;

187 
	}
}

189 
robj
 *
	$¸óãSëObje˘
() {

190 
di˘
 *
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

191 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_SET
,
d
);

192 
o
->
ícodög
 = 
OBJ_ENCODING_HT
;

193  
o
;

194 
	}
}

196 
robj
 *
	$¸óãI¡£tObje˘
() {

197 
öt£t
 *
is
 = 
	`öt£tNew
();

198 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_SET
,
is
);

199 
o
->
ícodög
 = 
OBJ_ENCODING_INTSET
;

200  
o
;

201 
	}
}

203 
robj
 *
	$¸óãHashObje˘
() {

204 *
zl
 = 
	`zùli°New
();

205 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_HASH
, 
zl
);

206 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

207  
o
;

208 
	}
}

214 
robj
 *
	$¸óãZ£tObje˘
() {

215 
z£t
 *
zs
 = 
	`dÆloc
((*zs));

216 
robj
 *
o
;

218 
zs
->
di˘
 = 
	`di˘Cª©e
(&
z£tDi˘Ty≥
,
NULL
);

219 
zs
->
z¶
 = 
	`z¶Cª©e
();

220 
o
 = 
	`¸óãObje˘
(
OBJ_ZSET
,
zs
);

221 
o
->
ícodög
 = 
OBJ_ENCODING_SKIPLIST
;

222  
o
;

223 
	}
}

225 
robj
 *
	$¸óãZ£tZùli°Obje˘
() {

226 *
zl
 = 
	`zùli°New
();

227 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_ZSET
,
zl
);

228 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

229  
o
;

230 
	}
}

232 
	$‰ìSåögObje˘
(
robj
 *
o
) {

233 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
) {

234 
	`sds‰ì
(
o
->
±r
);

236 
	}
}

238 
	$‰ìLi°Obje˘
(
robj
 *
o
) {

239 
o
->
ícodög
) {

240 
OBJ_ENCODING_QUICKLIST
:

241 
	`quickli°Rñó£
(
o
->
±r
);

244 
	`£rvîP™ic
("UnknownÜistÉncodingÅype");

246 
	}
}

248 
	$‰ìSëObje˘
(
robj
 *
o
) {

249 
o
->
ícodög
) {

250 
OBJ_ENCODING_HT
:

251 
	`di˘Rñó£
((
di˘
*Ë
o
->
±r
);

253 
OBJ_ENCODING_INTSET
:

254 
	`d‰ì
(
o
->
±r
);

257 
	`£rvîP™ic
("Unknown setÉncodingÅype");

259 
	}
}

261 
	$‰ìZ£tObje˘
(
robj
 *
o
) {

262 
z£t
 *
zs
;

263 
o
->
ícodög
) {

264 
OBJ_ENCODING_SKIPLIST
:

265 
zs
 = 
o
->
±r
;

266 
	`di˘Rñó£
(
zs
->
di˘
);

267 
	`z¶Fªe
(
zs
->
z¶
);

268 
	`d‰ì
(
zs
);

270 
OBJ_ENCODING_ZIPLIST
:

271 
	`d‰ì
(
o
->
±r
);

274 
	`£rvîP™ic
("Unknown sorted setÉncoding");

276 
	}
}

278 
	$‰ìHashObje˘
(
robj
 *
o
) {

279 
o
->
ícodög
) {

280 
OBJ_ENCODING_HT
:

281 
	`di˘Rñó£
((
di˘
*Ë
o
->
±r
);

283 
OBJ_ENCODING_ZIPLIST
:

284 
	`d‰ì
(
o
->
±r
);

287 
	`£rvîP™ic
("Unknown hashÉncodingÅype");

290 
	}
}

292 
	$ö¸RefCou¡
(
robj
 *
o
) {

293 
o
->
ªfcou¡
++;

294 
	}
}

296 
	$de¸RefCou¡
(
robj
 *
o
) {

297 i‡(
o
->
ªfcou¡
 <0Ë
	`£rvîP™ic
("decrRefCountágainstÑefcount <= 0");

298 i‡(
o
->
ªfcou¡
 == 1) {

299 
o
->
ty≥
) {

300 
OBJ_STRING
: 
	`‰ìSåögObje˘
(
o
); ;

301 
OBJ_LIST
: 
	`‰ìLi°Obje˘
(
o
); ;

302 
OBJ_SET
: 
	`‰ìSëObje˘
(
o
); ;

303 
OBJ_ZSET
: 
	`‰ìZ£tObje˘
(
o
); ;

304 
OBJ_HASH
: 
	`‰ìHashObje˘
(
o
); ;

305 : 
	`£rvîP™ic
("Unknown objectÅype"); ;

307 
	`d‰ì
(
o
);

309 
o
->
ªfcou¡
--;

311 
	}
}

316 
	$de¸RefCou¡Void
(*
o
) {

317 
	`de¸RefCou¡
(
o
);

318 
	}
}

320 
	$‰ìObje˘
(
robj
 *
o
) {

321 i‡(
o
->
c⁄°™t
) ;

323 
o
->
ty≥
) {

324 
OBJ_STRING
: 
	`‰ìSåögObje˘
(
o
); ;

325 
OBJ_LIST
: 
	`‰ìLi°Obje˘
(
o
); ;

326 
OBJ_SET
: 
	`‰ìSëObje˘
(
o
); ;

327 
OBJ_ZSET
: 
	`‰ìZ£tObje˘
(
o
); ;

328 
OBJ_HASH
: 
	`‰ìHashObje˘
(
o
); ;

329 : 
	`£rvîP™ic
("Unknown objectÅype"); ;

331 
	`d‰ì
(
o
);

332 
	}
}

334 
	$‰ìObje˘Void
(*
o
) {

335 
	`‰ìObje˘
(
o
);

336 
	}
}

350 
robj
 *
	$ª£tRefCou¡
(
robj
 *
obj
) {

351 
obj
->
ªfcou¡
 = 0;

352  
obj
;

353 
	}
}

355 
	$checkTy≥
(
˛õ¡
 *
c
, 
robj
 *
o
, 
ty≥
) {

356 i‡(
o
->
ty≥
 !=Åype) {

357 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

361 
	}
}

363 
	$isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
robj
 *
o
, *
ŒvÆ
) {

364 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

365 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

366 i‡(
ŒvÆ
Ë*ŒvÆ = (Ë
o
->
±r
;

367  
VR_OK
;

369  
	`°rög2Œ
(
o
->
±r
,
	`sd¶í
(o->±r),
ŒvÆ
Ë? 
VR_OK
 : 
VR_ERROR
;

371 
	}
}

375 
robj
 *
	$åyObje˘Encodög
(
robj
 *
o
) {

376 
vÆue
;

377 
sds
 
s
 = 
o
->
±r
;

378 
size_t
 
Àn
;

384 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

390 i‡(!
	`sdsEncodedObje˘
(
o
))  o;

393 i‡(
o
->
c⁄°™t
)  o;

398 
Àn
 = 
	`sd¶í
(
s
);

400 i‡(
Àn
 <21 && 
	`°rög2l
(
s
,Àn,&
vÆue
)) {

409 
vÆue
 >= 0 &&

410 
vÆue
 < 
OBJ_SHARED_INTEGERS
)

412 
	`‰ìObje˘
(
o
);

413  
sh¨ed
.
öãgîs
[
vÆue
];

415 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
Ë
	`sds‰ì
(o->
±r
);

416 
o
->
ícodög
 = 
OBJ_ENCODING_INT
;

417 
o
->
±r
 = (*Ë
vÆue
;

418  
o
;

426 i‡(
Àn
 <
OBJ_ENCODING_EMBSTR_SIZE_LIMIT
) {

427 
robj
 *
emb
;

429 i‡(
o
->
ícodög
 =
OBJ_ENCODING_EMBSTR
)  o;

430 
emb
 = 
	`¸óãEmbeddedSåögObje˘
(
s
,
	`sd¶í
(s));

431 
	`‰ìObje˘
(
o
);

432  
emb
;

444 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
 &&

445 
	`sdßvaû
(
s
Ë> 
Àn
/10)

447 
o
->
±r
 = 
	`sdsRemoveFªeS∑˚
(o->ptr);

451  
o
;

452 
	}
}

457 
robj
 *
	$gëDecodedObje˘
(
robj
 *
o
) {

458 
robj
 *
dec
;

460 i‡(
	`sdsEncodedObje˘
(
o
)) {

461  
o
;

463 i‡(
o
->
ty≥
 =
OBJ_STRING
 && o->
ícodög
 =
OBJ_ENCODING_INT
) {

464 
buf
[32];

466 
	`Œ2°rög
(
buf
,32,()
o
->
±r
);

467 
dec
 = 
	`¸óãSåögObje˘
(
buf
,
	`°æí
(buf));

468  
dec
;

470 
	`£rvîP™ic
("UnknownÉncodingÅype");

472 
	}
}

482 
	#REDIS_COMPARE_BINARY
 (1<<0)

	)

483 
	#REDIS_COMPARE_COLL
 (1<<1)

	)

485 
	$com∑ªSåögObje˘sWôhFœgs
(
robj
 *
a
,Ñobj *
b
, 
Êags
) {

486 
	`£rvîAs£πWôhInfo
(
NULL
,
a
,a->
ty≥
 =
OBJ_STRING
 && 
b
->type == OBJ_STRING);

487 
buÁ
[128], 
bufb
[128], *
a°r
, *
b°r
;

488 
size_t
 
Æí
, 
bÀn
, 
möÀn
;

490 i‡(
a
 =
b
)  0;

491 i‡(
	`sdsEncodedObje˘
(
a
)) {

492 
a°r
 = 
a
->
±r
;

493 
Æí
 = 
	`sd¶í
(
a°r
);

495 
Æí
 = 
	`Œ2°rög
(
buÁ
,(buÁ),(Ë
a
->
±r
);

496 
a°r
 = 
buÁ
;

498 i‡(
	`sdsEncodedObje˘
(
b
)) {

499 
b°r
 = 
b
->
±r
;

500 
bÀn
 = 
	`sd¶í
(
b°r
);

502 
bÀn
 = 
	`Œ2°rög
(
bufb
,(bufb),(Ë
b
->
±r
);

503 
b°r
 = 
bufb
;

506 i‡(
Êags
 & 
REDIS_COMPARE_COLL
) {

507  
	`°rcﬁl
(
a°r
,
b°r
);

509 
cmp
;

511 
möÀn
 = (
Æí
 < 
bÀn
) ?álen : blen;

512 
cmp
 = 
	`memcmp
(
a°r
,
b°r
,
möÀn
);

513 i‡(
cmp
 =0Ë 
Æí
-
bÀn
;

514  
cmp
;

516 
	}
}

519 
	$com∑ªSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

520  
	`com∑ªSåögObje˘sWôhFœgs
(
a
,
b
,
REDIS_COMPARE_BINARY
);

521 
	}
}

525 
	$cﬁœãSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

526  
	`com∑ªSåögObje˘sWôhFœgs
(
a
,
b
,
REDIS_COMPARE_COLL
);

527 
	}
}

534 
	$equÆSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

535 i‡(
a
->
ícodög
 =
OBJ_ENCODING_INT
 &&

536 
b
->
ícodög
 =
OBJ_ENCODING_INT
){

539  
a
->
±r
 =
b
->ptr;

541  
	`com∑ªSåögObje˘s
(
a
,
b
) == 0;

543 
	}
}

545 
size_t
 
	$°rögObje˘Lí
(
robj
 *
o
) {

546 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

547 i‡(
	`sdsEncodedObje˘
(
o
)) {

548  
	`sd¶í
(
o
->
±r
);

550  
	`sdigôs10
(()
o
->
±r
);

552 
	}
}

554 
	$gëDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
) {

555 
vÆue
;

556 *
ïå
;

558 i‡(
o
 =
NULL
) {

559 
vÆue
 = 0;

561 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

562 i‡(
	`sdsEncodedObje˘
(
o
)) {

563 
î∫o
 = 0;

564 
vÆue
 = 
	`°πod
(
o
->
±r
, &
ïå
);

565 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]) ||

566 
ïå
[0] != '\0' ||

567 (
î∫o
 =
ERANGE
 &&

568 (
vÆue
 =
HUGE_VAL
 || value == -HUGE_VAL || value == 0)) ||

569 
î∫o
 =
EINVAL
 ||

570 
	`i¢™
(
vÆue
))

571  
VR_ERROR
;

572 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

573 
vÆue
 = ()
o
->
±r
;

575 
	`£rvîP™ic
("Unknown stringÉncoding");

578 *
èrgë
 = 
vÆue
;

579  
VR_OK
;

580 
	}
}

583 
	$gëDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

584 
vÆue
;

585 i‡(
	`gëDoubÀFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

586 i‡(
msg
 !
NULL
) {

587 
	`addRïlyEº‹
(
c
,(*)
msg
);

589 
	`addRïlyEº‹
(
c
,"value isÇotá valid float");

591  
VR_ERROR
;

593 *
èrgë
 = 
vÆue
;

594  
VR_OK
;

595 
	}
}

597 
	$gëL⁄gDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
) {

598 
vÆue
;

599 *
ïå
;

601 i‡(
o
 =
NULL
) {

602 
vÆue
 = 0;

604 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

605 i‡(
	`sdsEncodedObje˘
(
o
)) {

606 
î∫o
 = 0;

607 
vÆue
 = 
	`°πﬁd
(
o
->
±r
, &
ïå
);

608 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] != '\0' ||

609 
î∫o
 =
ERANGE
 || 
	`i¢™
(
vÆue
))

610  
VR_ERROR
;

611 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

612 
vÆue
 = ()
o
->
±r
;

614 
	`£rvîP™ic
("Unknown stringÉncoding");

617 *
èrgë
 = 
vÆue
;

618  
VR_OK
;

619 
	}
}

621 
	$gëL⁄gDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

622 
vÆue
;

623 i‡(
	`gëL⁄gDoubÀFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

624 i‡(
msg
 !
NULL
) {

625 
	`addRïlyEº‹
(
c
,(*)
msg
);

627 
	`addRïlyEº‹
(
c
,"value isÇotá valid float");

629  
VR_ERROR
;

631 *
èrgë
 = 
vÆue
;

632  
VR_OK
;

633 
	}
}

635 
	$gëL⁄gL⁄gFromObje˘
(
robj
 *
o
, *
èrgë
) {

636 
vÆue
;

637 *
ïå
;

639 i‡(
o
 =
NULL
) {

640 
vÆue
 = 0;

642 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

643 i‡(
	`sdsEncodedObje˘
(
o
)) {

644 
î∫o
 = 0;

645 
vÆue
 = 
	`°πﬁl
(
o
->
±r
, &
ïå
, 10);

646 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] != '\0' ||

647 
î∫o
 =
ERANGE
)

648  
VR_ERROR
;

649 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

650 
vÆue
 = ()
o
->
±r
;

652 
	`£rvîP™ic
("Unknown stringÉncoding");

655 i‡(
èrgë
Ë*èrgë = 
vÆue
;

656  
VR_OK
;

657 
	}
}

659 
	$gëL⁄gL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

660 
vÆue
;

661 i‡(
	`gëL⁄gL⁄gFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

662 i‡(
msg
 !
NULL
) {

663 
	`addRïlyEº‹
(
c
,(*)
msg
);

665 
	`addRïlyEº‹
(
c
,"value isÇotán integer or out ofÑange");

667  
VR_ERROR
;

669 *
èrgë
 = 
vÆue
;

670  
VR_OK
;

671 
	}
}

673 
	$gëL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

674 
vÆue
;

676 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
o
, &
vÆue
, 
msg
Ë!
VR_OK
Ë 
VR_ERROR
;

677 i‡(
vÆue
 < 
LONG_MIN
 || vÆuê> 
LONG_MAX
) {

678 i‡(
msg
 !
NULL
) {

679 
	`addRïlyEº‹
(
c
,(*)
msg
);

681 
	`addRïlyEº‹
(
c
,"value is out ofÑange");

683  
VR_ERROR
;

685 *
èrgë
 = 
vÆue
;

686  
VR_OK
;

687 
	}
}

689 *
	$°rEncodög
(
ícodög
) {

690 
ícodög
) {

691 
OBJ_ENCODING_RAW
:  "raw";

692 
OBJ_ENCODING_INT
:  "int";

693 
OBJ_ENCODING_HT
:  "hashtable";

694 
OBJ_ENCODING_QUICKLIST
:  "quicklist";

695 
OBJ_ENCODING_ZIPLIST
:  "ziplist";

696 
OBJ_ENCODING_INTSET
:  "intset";

697 
OBJ_ENCODING_SKIPLIST
:  "skiplist";

698 
OBJ_ENCODING_EMBSTR
:  "embstr";

701 
	}
}

705 
	$e°im©eObje˘IdÀTime
(
robj
 *
o
) {

706 
Ãu˛ock
 = 
	`LRU_CLOCK
();

707 i‡(
Ãu˛ock
 >
o
->
Ãu
) {

708  (
Ãu˛ock
 - 
o
->
Ãu
Ë* 
LRU_CLOCK_RESOLUTION
;

710  (
Ãu˛ock
 + (
LRU_CLOCK_MAX
 - 
o
->
Ãu
)) *

711 
LRU_CLOCK_RESOLUTION
;

713 
	}
}

717 
size_t
 
	$gëSåögObje˘SdsU£dMem‹y
(
robj
 *
o
) {

718 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

719 
o
->
ícodög
) {

720 
OBJ_ENCODING_RAW
:  
	`sdsZmÆlocSize
(
o
->
±r
);

721 
OBJ_ENCODING_EMBSTR
:  
	`dmÆloc_size
(
o
)-(
robj
);

724 
	}
}

729 
robj
 *
	$obje˘Comm™dLookup
(
˛õ¡
 *
c
, 
robj
 *
key
) {

730 
di˘E¡ry
 *
de
;

732 i‡((
de
 = 
	`di˘Föd
(
c
->
db
->
di˘
,
key
->
±r
)Ë=
NULL
)  NULL;

733  (
robj
*Ë
	`di˘GëVÆ
(
de
);

734 
	}
}

736 
robj
 *
	$obje˘Comm™dLookupOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
) {

737 
robj
 *
o
 = 
	`obje˘Comm™dLookup
(
c
,
key
);

739 i‡(!
o
Ë
	`addRïly
(
c
, 
ª∂y
);

740  
o
;

741 
	}
}

746 
	$obje˘Comm™d
(
˛õ¡
 *
c
) {

747 
robj
 *
o
;

749 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"ícodög"Ë&& c->
¨gc
 == 3) {

750 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[2]);

751 
	`lockDbRód
(
c
->
db
);

752 i‡((
o
 = 
	`obje˘Comm™dLookupOrRïly
(
c
,c->
¨gv
[2],
sh¨ed
.
nuŒbulk
))

753 =
NULL
) {

754 
	`u∆ockDb
(
c
->
db
);

757 
	`addRïlyBulkCSåög
(
c
,
	`°rEncodög
(
o
->
ícodög
));

758 
	`u∆ockDb
(
c
->
db
);

759 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"idÀtime"Ë&& c->
¨gc
 == 3) {

760 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[2]);

761 
	`lockDbRód
(
c
->
db
);

762 i‡((
o
 = 
	`obje˘Comm™dLookupOrRïly
(
c
,c->
¨gv
[2],
sh¨ed
.
nuŒbulk
))

763 =
NULL
) {

764 
	`u∆ockDb
(
c
->
db
);

767 
	`addRïlyL⁄gL⁄g
(
c
,
	`e°im©eObje˘IdÀTime
(
o
)/1000);

768 
	`u∆ockDb
(
c
->
db
);

770 
	`addRïlyEº‹
(
c
,"SyntaxÉrror. Try OBJECT (encoding|idletime)");

772 
	}
}

	@src/vr_object.c

1 
	~<m©h.h
>

2 
	~<˘y≥.h
>

4 
	~<vr_c‹e.h
>

7 #ifde‡
__CYGWIN__


8 
	#°πﬁd
(
a
,
b
Ë(()
	`°πod
(◊),(b)))

	)

12 
robj
 *
	$¸óãObje˘
(
ty≥
, *
±r
) {

14 
robj
 *
o
 = 
	`dÆloc
((*o));

16 
o
->
ty≥
 =Åype;

18 
o
->
ícodög
 = 
OBJ_ENCODING_RAW
;

20 
o
->
±r
 =Ötr;

22 
o
->
c⁄°™t
 = 0;

24 
o
->
ªfcou¡
 = -1;

26 
o
->
Ãu
 = 0;

27  
o
;

28 
	}
}

34 
robj
 *
	$¸óãRawSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

35  
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
±r
,
Àn
));

36 
	}
}

42 
robj
 *
	$¸óãEmbeddedSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

44 
robj
 *
o
 = 
	`dÆloc
(‘obj)+(
sdshdr8
)+
Àn
+1);

45 
sdshdr8
 *
sh
 = (*)(
o
+1);

47 
o
->
ty≥
 = 
OBJ_STRING
;

48 
o
->
ícodög
 = 
OBJ_ENCODING_EMBSTR
;

49 
o
->
±r
 = 
sh
+1;

50 
o
->
c⁄°™t
 = 0;

51 
o
->
ªfcou¡
 = -1;

52 
o
->
Ãu
 = 0;

54 
sh
->
Àn
 =Üen;

55 
sh
->
Æloc
 = 
Àn
;

56 
sh
->
Êags
 = 
SDS_TYPE_8
;

57 i‡(
±r
) {

58 
	`mem˝y
(
sh
->
buf
,
±r
,
Àn
);

59 
sh
->
buf
[
Àn
] = '\0';

61 
	`mem£t
(
sh
->
buf
,0,
Àn
+1);

63  
o
;

64 
	}
}

72 
	#OBJ_ENCODING_EMBSTR_SIZE_LIMIT
 44

	)

74 
robj
 *
	$¸óãSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

75 i‡(
Àn
 <
OBJ_ENCODING_EMBSTR_SIZE_LIMIT
)

76  
	`¸óãEmbeddedSåögObje˘
(
±r
,
Àn
);

78  
	`¸óãRawSåögObje˘
(
±r
,
Àn
);

79 
	}
}

81 
robj
 *
	$¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
) {

82 
robj
 *
o
;

83 i‡(
vÆue
 >0 && vÆuê< 
OBJ_SHARED_INTEGERS
) {

84 
o
 = 
sh¨ed
.
öãgîs
[
vÆue
];

86 i‡(
vÆue
 >
LONG_MIN
 && vÆuê<
LONG_MAX
) {

87 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
NULL
);

88 
o
->
ícodög
 = 
OBJ_ENCODING_INT
;

89 
o
->
±r
 = (*)(()
vÆue
);

91 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sds‰oml⁄gl⁄g
(
vÆue
));

94  
o
;

95 
	}
}

104 
robj
 *
	$¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
, 
hum™‰õndly
) {

105 
buf
[256];

106 
Àn
;

108 i‡(
	`isöf
(
vÆue
)) {

111 i‡(
vÆue
 > 0) {

112 
	`mem˝y
(
buf
,"inf",3);

113 
Àn
 = 3;

115 
	`mem˝y
(
buf
,"-inf",4);

116 
Àn
 = 4;

118 } i‡(
hum™‰õndly
) {

124 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%.17Lf", 
vÆue
);

126 i‡(
	`°rchr
(
buf
,'.'Ë!
NULL
) {

127 *
p
 = 
buf
+
Àn
-1;

128 *
p
 == '0') {

129 
p
--;

130 
Àn
--;

132 i‡(*
p
 ='.'Ë
Àn
--;

135 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%.17Lg", 
vÆue
);

137  
	`¸óãSåögObje˘
(
buf
,
Àn
);

138 
	}
}

149 
robj
 *
	$dupSåögObje˘
(
robj
 *
o
) {

150 
robj
 *
d
;

152 
	`ASSERT
(
o
->
ty≥
 =
OBJ_STRING
);

154 
o
->
ícodög
) {

155 
OBJ_ENCODING_RAW
:

156  
	`¸óãRawSåögObje˘
(
o
->
±r
,
	`sd¶í
(o->ptr));

157 
OBJ_ENCODING_EMBSTR
:

158  
	`¸óãEmbeddedSåögObje˘
(
o
->
±r
,
	`sd¶í
(o->ptr));

159 
OBJ_ENCODING_INT
:

160 
d
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
NULL
);

161 
d
->
ícodög
 = 
OBJ_ENCODING_INT
;

162 
d
->
±r
 = 
o
->ptr;

163  
d
;

165 
	`£rvîP™ic
("WrongÉncoding.");

168 
	}
}

170 
robj
 *
	$dupSåögObje˘Unc⁄°™t
(
robj
 *
o
) {

171 i‡(
o
->
c⁄°™t
)  o;

172  
	`dupSåögObje˘
(
o
);

173 
	}
}

175 
robj
 *
	$¸óãQuickli°Obje˘
() {

176 
quickli°
 *
l
 = 
	`quickli°Cª©e
();

177 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_LIST
,
l
);

178 
o
->
ícodög
 = 
OBJ_ENCODING_QUICKLIST
;

179  
o
;

180 
	}
}

182 
robj
 *
	$¸óãZùli°Obje˘
() {

183 *
zl
 = 
	`zùli°New
();

184 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_LIST
,
zl
);

185 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

186  
o
;

187 
	}
}

189 
robj
 *
	$¸óãSëObje˘
() {

190 
di˘
 *
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

191 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_SET
,
d
);

192 
o
->
ícodög
 = 
OBJ_ENCODING_HT
;

193  
o
;

194 
	}
}

196 
robj
 *
	$¸óãI¡£tObje˘
() {

197 
öt£t
 *
is
 = 
	`öt£tNew
();

198 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_SET
,
is
);

199 
o
->
ícodög
 = 
OBJ_ENCODING_INTSET
;

200  
o
;

201 
	}
}

203 
robj
 *
	$¸óãHashObje˘
() {

204 *
zl
 = 
	`zùli°New
();

205 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_HASH
, 
zl
);

206 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

207  
o
;

208 
	}
}

214 
robj
 *
	$¸óãZ£tObje˘
() {

215 
z£t
 *
zs
 = 
	`dÆloc
((*zs));

216 
robj
 *
o
;

218 
zs
->
di˘
 = 
	`di˘Cª©e
(&
z£tDi˘Ty≥
,
NULL
);

219 
zs
->
z¶
 = 
	`z¶Cª©e
();

220 
o
 = 
	`¸óãObje˘
(
OBJ_ZSET
,
zs
);

221 
o
->
ícodög
 = 
OBJ_ENCODING_SKIPLIST
;

222  
o
;

223 
	}
}

225 
robj
 *
	$¸óãZ£tZùli°Obje˘
() {

226 *
zl
 = 
	`zùli°New
();

227 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_ZSET
,
zl
);

228 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

229  
o
;

230 
	}
}

232 
	$‰ìSåögObje˘
(
robj
 *
o
) {

233 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
) {

234 
	`sds‰ì
(
o
->
±r
);

236 
	}
}

238 
	$‰ìLi°Obje˘
(
robj
 *
o
) {

239 
o
->
ícodög
) {

240 
OBJ_ENCODING_QUICKLIST
:

241 
	`quickli°Rñó£
(
o
->
±r
);

244 
	`£rvîP™ic
("UnknownÜistÉncodingÅype");

246 
	}
}

248 
	$‰ìSëObje˘
(
robj
 *
o
) {

249 
o
->
ícodög
) {

250 
OBJ_ENCODING_HT
:

251 
	`di˘Rñó£
((
di˘
*Ë
o
->
±r
);

253 
OBJ_ENCODING_INTSET
:

254 
	`d‰ì
(
o
->
±r
);

257 
	`£rvîP™ic
("Unknown setÉncodingÅype");

259 
	}
}

261 
	$‰ìZ£tObje˘
(
robj
 *
o
) {

262 
z£t
 *
zs
;

263 
o
->
ícodög
) {

264 
OBJ_ENCODING_SKIPLIST
:

265 
zs
 = 
o
->
±r
;

266 
	`di˘Rñó£
(
zs
->
di˘
);

267 
	`z¶Fªe
(
zs
->
z¶
);

268 
	`d‰ì
(
zs
);

270 
OBJ_ENCODING_ZIPLIST
:

271 
	`d‰ì
(
o
->
±r
);

274 
	`£rvîP™ic
("Unknown sorted setÉncoding");

276 
	}
}

278 
	$‰ìHashObje˘
(
robj
 *
o
) {

279 
o
->
ícodög
) {

280 
OBJ_ENCODING_HT
:

281 
	`di˘Rñó£
((
di˘
*Ë
o
->
±r
);

283 
OBJ_ENCODING_ZIPLIST
:

284 
	`d‰ì
(
o
->
±r
);

287 
	`£rvîP™ic
("Unknown hashÉncodingÅype");

290 
	}
}

292 
	$ö¸RefCou¡
(
robj
 *
o
) {

293 
o
->
ªfcou¡
++;

294 
	}
}

296 
	$de¸RefCou¡
(
robj
 *
o
) {

297 i‡(
o
->
ªfcou¡
 <0Ë
	`£rvîP™ic
("decrRefCountágainstÑefcount <= 0");

298 i‡(
o
->
ªfcou¡
 == 1) {

299 
o
->
ty≥
) {

300 
OBJ_STRING
: 
	`‰ìSåögObje˘
(
o
); ;

301 
OBJ_LIST
: 
	`‰ìLi°Obje˘
(
o
); ;

302 
OBJ_SET
: 
	`‰ìSëObje˘
(
o
); ;

303 
OBJ_ZSET
: 
	`‰ìZ£tObje˘
(
o
); ;

304 
OBJ_HASH
: 
	`‰ìHashObje˘
(
o
); ;

305 : 
	`£rvîP™ic
("Unknown objectÅype"); ;

307 
	`d‰ì
(
o
);

309 
o
->
ªfcou¡
--;

311 
	}
}

316 
	$de¸RefCou¡Void
(*
o
) {

317 
	`de¸RefCou¡
(
o
);

318 
	}
}

320 
	$‰ìObje˘
(
robj
 *
o
) {

321 i‡(
o
->
c⁄°™t
) ;

323 
o
->
ty≥
) {

324 
OBJ_STRING
: 
	`‰ìSåögObje˘
(
o
); ;

325 
OBJ_LIST
: 
	`‰ìLi°Obje˘
(
o
); ;

326 
OBJ_SET
: 
	`‰ìSëObje˘
(
o
); ;

327 
OBJ_ZSET
: 
	`‰ìZ£tObje˘
(
o
); ;

328 
OBJ_HASH
: 
	`‰ìHashObje˘
(
o
); ;

329 : 
	`£rvîP™ic
("Unknown objectÅype"); ;

331 
	`d‰ì
(
o
);

332 
	}
}

334 
	$‰ìObje˘Void
(*
o
) {

335 
	`‰ìObje˘
(
o
);

336 
	}
}

350 
robj
 *
	$ª£tRefCou¡
(
robj
 *
obj
) {

351 
obj
->
ªfcou¡
 = 0;

352  
obj
;

353 
	}
}

355 
	$checkTy≥
(
˛õ¡
 *
c
, 
robj
 *
o
, 
ty≥
) {

356 i‡(
o
->
ty≥
 !=Åype) {

357 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

361 
	}
}

363 
	$isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
robj
 *
o
, *
ŒvÆ
) {

364 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

365 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

366 i‡(
ŒvÆ
Ë*ŒvÆ = (Ë
o
->
±r
;

367  
VR_OK
;

369  
	`°rög2Œ
(
o
->
±r
,
	`sd¶í
(o->±r),
ŒvÆ
Ë? 
VR_OK
 : 
VR_ERROR
;

371 
	}
}

375 
robj
 *
	$åyObje˘Encodög
(
robj
 *
o
) {

376 
vÆue
;

377 
sds
 
s
 = 
o
->
±r
;

378 
size_t
 
Àn
;

384 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

390 i‡(!
	`sdsEncodedObje˘
(
o
))  o;

393 i‡(
o
->
c⁄°™t
)  o;

398 
Àn
 = 
	`sd¶í
(
s
);

400 i‡(
Àn
 <21 && 
	`°rög2l
(
s
,Àn,&
vÆue
)) {

409 
vÆue
 >= 0 &&

410 
vÆue
 < 
OBJ_SHARED_INTEGERS
)

412 
	`‰ìObje˘
(
o
);

413  
sh¨ed
.
öãgîs
[
vÆue
];

415 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
Ë
	`sds‰ì
(o->
±r
);

416 
o
->
ícodög
 = 
OBJ_ENCODING_INT
;

417 
o
->
±r
 = (*Ë
vÆue
;

418  
o
;

426 i‡(
Àn
 <
OBJ_ENCODING_EMBSTR_SIZE_LIMIT
) {

427 
robj
 *
emb
;

429 i‡(
o
->
ícodög
 =
OBJ_ENCODING_EMBSTR
)  o;

430 
emb
 = 
	`¸óãEmbeddedSåögObje˘
(
s
,
	`sd¶í
(s));

431 
	`‰ìObje˘
(
o
);

432  
emb
;

444 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
 &&

445 
	`sdßvaû
(
s
Ë> 
Àn
/10)

447 
o
->
±r
 = 
	`sdsRemoveFªeS∑˚
(o->ptr);

451  
o
;

452 
	}
}

457 
robj
 *
	$gëDecodedObje˘
(
robj
 *
o
) {

458 
robj
 *
dec
;

460 i‡(
	`sdsEncodedObje˘
(
o
)) {

461  
o
;

463 i‡(
o
->
ty≥
 =
OBJ_STRING
 && o->
ícodög
 =
OBJ_ENCODING_INT
) {

464 
buf
[32];

466 
	`Œ2°rög
(
buf
,32,()
o
->
±r
);

467 
dec
 = 
	`¸óãSåögObje˘
(
buf
,
	`°æí
(buf));

468  
dec
;

470 
	`£rvîP™ic
("UnknownÉncodingÅype");

472 
	}
}

482 
	#REDIS_COMPARE_BINARY
 (1<<0)

	)

483 
	#REDIS_COMPARE_COLL
 (1<<1)

	)

485 
	$com∑ªSåögObje˘sWôhFœgs
(
robj
 *
a
,Ñobj *
b
, 
Êags
) {

486 
	`£rvîAs£πWôhInfo
(
NULL
,
a
,a->
ty≥
 =
OBJ_STRING
 && 
b
->type == OBJ_STRING);

487 
buÁ
[128], 
bufb
[128], *
a°r
, *
b°r
;

488 
size_t
 
Æí
, 
bÀn
, 
möÀn
;

490 i‡(
a
 =
b
)  0;

491 i‡(
	`sdsEncodedObje˘
(
a
)) {

492 
a°r
 = 
a
->
±r
;

493 
Æí
 = 
	`sd¶í
(
a°r
);

495 
Æí
 = 
	`Œ2°rög
(
buÁ
,(buÁ),(Ë
a
->
±r
);

496 
a°r
 = 
buÁ
;

498 i‡(
	`sdsEncodedObje˘
(
b
)) {

499 
b°r
 = 
b
->
±r
;

500 
bÀn
 = 
	`sd¶í
(
b°r
);

502 
bÀn
 = 
	`Œ2°rög
(
bufb
,(bufb),(Ë
b
->
±r
);

503 
b°r
 = 
bufb
;

506 i‡(
Êags
 & 
REDIS_COMPARE_COLL
) {

507  
	`°rcﬁl
(
a°r
,
b°r
);

509 
cmp
;

511 
möÀn
 = (
Æí
 < 
bÀn
) ?álen : blen;

512 
cmp
 = 
	`memcmp
(
a°r
,
b°r
,
möÀn
);

513 i‡(
cmp
 =0Ë 
Æí
-
bÀn
;

514  
cmp
;

516 
	}
}

519 
	$com∑ªSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

520  
	`com∑ªSåögObje˘sWôhFœgs
(
a
,
b
,
REDIS_COMPARE_BINARY
);

521 
	}
}

525 
	$cﬁœãSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

526  
	`com∑ªSåögObje˘sWôhFœgs
(
a
,
b
,
REDIS_COMPARE_COLL
);

527 
	}
}

534 
	$equÆSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

535 i‡(
a
->
ícodög
 =
OBJ_ENCODING_INT
 &&

536 
b
->
ícodög
 =
OBJ_ENCODING_INT
){

539  
a
->
±r
 =
b
->ptr;

541  
	`com∑ªSåögObje˘s
(
a
,
b
) == 0;

543 
	}
}

545 
size_t
 
	$°rögObje˘Lí
(
robj
 *
o
) {

546 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

547 i‡(
	`sdsEncodedObje˘
(
o
)) {

548  
	`sd¶í
(
o
->
±r
);

550  
	`sdigôs10
(()
o
->
±r
);

552 
	}
}

554 
	$gëDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
) {

555 
vÆue
;

556 *
ïå
;

558 i‡(
o
 =
NULL
) {

559 
vÆue
 = 0;

561 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

562 i‡(
	`sdsEncodedObje˘
(
o
)) {

563 
î∫o
 = 0;

564 
vÆue
 = 
	`°πod
(
o
->
±r
, &
ïå
);

565 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]) ||

566 
ïå
[0] != '\0' ||

567 (
î∫o
 =
ERANGE
 &&

568 (
vÆue
 =
HUGE_VAL
 || value == -HUGE_VAL || value == 0)) ||

569 
î∫o
 =
EINVAL
 ||

570 
	`i¢™
(
vÆue
))

571  
VR_ERROR
;

572 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

573 
vÆue
 = ()
o
->
±r
;

575 
	`£rvîP™ic
("Unknown stringÉncoding");

578 *
èrgë
 = 
vÆue
;

579  
VR_OK
;

580 
	}
}

583 
	$gëDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

584 
vÆue
;

585 i‡(
	`gëDoubÀFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

586 i‡(
msg
 !
NULL
) {

587 
	`addRïlyEº‹
(
c
,(*)
msg
);

589 
	`addRïlyEº‹
(
c
,"value isÇotá valid float");

591  
VR_ERROR
;

593 *
èrgë
 = 
vÆue
;

594  
VR_OK
;

595 
	}
}

597 
	$gëL⁄gDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
) {

598 
vÆue
;

599 *
ïå
;

601 i‡(
o
 =
NULL
) {

602 
vÆue
 = 0;

604 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

605 i‡(
	`sdsEncodedObje˘
(
o
)) {

606 
î∫o
 = 0;

607 
vÆue
 = 
	`°πﬁd
(
o
->
±r
, &
ïå
);

608 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] != '\0' ||

609 
î∫o
 =
ERANGE
 || 
	`i¢™
(
vÆue
))

610  
VR_ERROR
;

611 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

612 
vÆue
 = ()
o
->
±r
;

614 
	`£rvîP™ic
("Unknown stringÉncoding");

617 *
èrgë
 = 
vÆue
;

618  
VR_OK
;

619 
	}
}

621 
	$gëL⁄gDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

622 
vÆue
;

623 i‡(
	`gëL⁄gDoubÀFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

624 i‡(
msg
 !
NULL
) {

625 
	`addRïlyEº‹
(
c
,(*)
msg
);

627 
	`addRïlyEº‹
(
c
,"value isÇotá valid float");

629  
VR_ERROR
;

631 *
èrgë
 = 
vÆue
;

632  
VR_OK
;

633 
	}
}

635 
	$gëL⁄gL⁄gFromObje˘
(
robj
 *
o
, *
èrgë
) {

636 
vÆue
;

637 *
ïå
;

639 i‡(
o
 =
NULL
) {

640 
vÆue
 = 0;

642 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

643 i‡(
	`sdsEncodedObje˘
(
o
)) {

644 
î∫o
 = 0;

645 
vÆue
 = 
	`°πﬁl
(
o
->
±r
, &
ïå
, 10);

646 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] != '\0' ||

647 
î∫o
 =
ERANGE
)

648  
VR_ERROR
;

649 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

650 
vÆue
 = ()
o
->
±r
;

652 
	`£rvîP™ic
("Unknown stringÉncoding");

655 i‡(
èrgë
Ë*èrgë = 
vÆue
;

656  
VR_OK
;

657 
	}
}

659 
	$gëL⁄gL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

660 
vÆue
;

661 i‡(
	`gëL⁄gL⁄gFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

662 i‡(
msg
 !
NULL
) {

663 
	`addRïlyEº‹
(
c
,(*)
msg
);

665 
	`addRïlyEº‹
(
c
,"value isÇotán integer or out ofÑange");

667  
VR_ERROR
;

669 *
èrgë
 = 
vÆue
;

670  
VR_OK
;

671 
	}
}

673 
	$gëL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

674 
vÆue
;

676 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
o
, &
vÆue
, 
msg
Ë!
VR_OK
Ë 
VR_ERROR
;

677 i‡(
vÆue
 < 
LONG_MIN
 || vÆuê> 
LONG_MAX
) {

678 i‡(
msg
 !
NULL
) {

679 
	`addRïlyEº‹
(
c
,(*)
msg
);

681 
	`addRïlyEº‹
(
c
,"value is out ofÑange");

683  
VR_ERROR
;

685 *
èrgë
 = 
vÆue
;

686  
VR_OK
;

687 
	}
}

689 *
	$°rEncodög
(
ícodög
) {

690 
ícodög
) {

691 
OBJ_ENCODING_RAW
:  "raw";

692 
OBJ_ENCODING_INT
:  "int";

693 
OBJ_ENCODING_HT
:  "hashtable";

694 
OBJ_ENCODING_QUICKLIST
:  "quicklist";

695 
OBJ_ENCODING_ZIPLIST
:  "ziplist";

696 
OBJ_ENCODING_INTSET
:  "intset";

697 
OBJ_ENCODING_SKIPLIST
:  "skiplist";

698 
OBJ_ENCODING_EMBSTR
:  "embstr";

701 
	}
}

705 
	$e°im©eObje˘IdÀTime
(
robj
 *
o
) {

706 
Ãu˛ock
 = 
	`LRU_CLOCK
();

707 i‡(
Ãu˛ock
 >
o
->
Ãu
) {

708  (
Ãu˛ock
 - 
o
->
Ãu
Ë* 
LRU_CLOCK_RESOLUTION
;

710  (
Ãu˛ock
 + (
LRU_CLOCK_MAX
 - 
o
->
Ãu
)) *

711 
LRU_CLOCK_RESOLUTION
;

713 
	}
}

717 
size_t
 
	$gëSåögObje˘SdsU£dMem‹y
(
robj
 *
o
) {

718 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

719 
o
->
ícodög
) {

720 
OBJ_ENCODING_RAW
:  
	`sdsZmÆlocSize
(
o
->
±r
);

721 
OBJ_ENCODING_EMBSTR
:  
	`dmÆloc_size
(
o
)-(
robj
);

724 
	}
}

729 
robj
 *
	$obje˘Comm™dLookup
(
˛õ¡
 *
c
, 
robj
 *
key
) {

730 
di˘E¡ry
 *
de
;

732 i‡((
de
 = 
	`di˘Föd
(
c
->
db
->
di˘
,
key
->
±r
)Ë=
NULL
)  NULL;

733  (
robj
*Ë
	`di˘GëVÆ
(
de
);

734 
	}
}

736 
robj
 *
	$obje˘Comm™dLookupOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
) {

737 
robj
 *
o
 = 
	`obje˘Comm™dLookup
(
c
,
key
);

739 i‡(!
o
Ë
	`addRïly
(
c
, 
ª∂y
);

740  
o
;

741 
	}
}

746 
	$obje˘Comm™d
(
˛õ¡
 *
c
) {

747 
robj
 *
o
;

749 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"ícodög"Ë&& c->
¨gc
 == 3) {

750 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[2]);

751 
	`lockDbRód
(
c
->
db
);

752 i‡((
o
 = 
	`obje˘Comm™dLookupOrRïly
(
c
,c->
¨gv
[2],
sh¨ed
.
nuŒbulk
))

753 =
NULL
) {

754 
	`u∆ockDb
(
c
->
db
);

757 
	`addRïlyBulkCSåög
(
c
,
	`°rEncodög
(
o
->
ícodög
));

758 
	`u∆ockDb
(
c
->
db
);

759 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"idÀtime"Ë&& c->
¨gc
 == 3) {

760 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[2]);

761 
	`lockDbRód
(
c
->
db
);

762 i‡((
o
 = 
	`obje˘Comm™dLookupOrRïly
(
c
,c->
¨gv
[2],
sh¨ed
.
nuŒbulk
))

763 =
NULL
) {

764 
	`u∆ockDb
(
c
->
db
);

767 
	`addRïlyL⁄gL⁄g
(
c
,
	`e°im©eObje˘IdÀTime
(
o
)/1000);

768 
	`u∆ockDb
(
c
->
db
);

770 
	`addRïlyEº‹
(
c
,"SyntaxÉrror. Try OBJECT (encoding|idletime)");

772 
	}
}

	@src/vr_object.h

1 #i‚de‡
_VR_OBJECT_H_


2 
	#_VR_OBJECT_H_


	)

4 
	#OBJ_SHARED_INTEGERS
 10000

	)

5 
	#OBJ_SHARED_BULKHDR_LEN
 32

	)

9 
	#OBJ_STRING
 0

	)

10 
	#OBJ_LIST
 1

	)

11 
	#OBJ_SET
 2

	)

12 
	#OBJ_ZSET
 3

	)

13 
	#OBJ_HASH
 4

	)

20 
	#OBJ_ENCODING_RAW
 0

	)

22 
	#OBJ_ENCODING_INT
 1

	)

24 
	#OBJ_ENCODING_HT
 2

	)

26 
	#OBJ_ENCODING_ZIPMAP
 3

	)

28 
	#OBJ_ENCODING_LINKEDLIST
 4

	)

30 
	#OBJ_ENCODING_ZIPLIST
 5

	)

32 
	#OBJ_ENCODING_INTSET
 6

	)

34 
	#OBJ_ENCODING_SKIPLIST
 7

	)

36 
	#OBJ_ENCODING_EMBSTR
 8

	)

38 
	#OBJ_ENCODING_QUICKLIST
 9

	)

41 
	#OBJ_HASH_KEY
 1

	)

43 
	#OBJ_HASH_VALUE
 2

	)

46 
	#sdsEncodedObje˘
(
obj±r
Ë(obj±r->
ícodög
 =
OBJ_ENCODING_RAW
 || obj±r->ícodög =
OBJ_ENCODING_EMBSTR
)

	)

50 
	#LRU_BITS
 24

	)

51 
	#LRU_CLOCK_MAX
 ((1<<
LRU_BITS
)-1Ë

	)

52 
	#LRU_CLOCK_RESOLUTION
 1000

	)

55 
	svr_obje˘
 {

57 
	mty≥
:4;

59 
	mícodög
:4;

61 
	mÃu
:
LRU_BITS
;

63 
	mc⁄°™t
:1;

65 
	mªfcou¡
;

67 *
	m±r
;

68 } 
	trobj
;

73 
de¸RefCou¡
(
robj
 *
o
);

74 
de¸RefCou¡Void
(*
o
);

75 
ö¸RefCou¡
(
robj
 *
o
);

76 
robj
 *
ª£tRefCou¡
‘obj *
obj
);

77 
‰ìObje˘
(
robj
 *
o
);

78 
‰ìObje˘Void
(*
o
);

79 
‰ìSåögObje˘
(
robj
 *
o
);

80 
‰ìLi°Obje˘
(
robj
 *
o
);

81 
‰ìSëObje˘
(
robj
 *
o
);

82 
‰ìZ£tObje˘
(
robj
 *
o
);

83 
‰ìHashObje˘
(
robj
 *
o
);

84 
robj
 *
¸óãObje˘
(
ty≥
, *
±r
);

85 
robj
 *
¸óãSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

86 
robj
 *
¸óãRawSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

87 
robj
 *
¸óãEmbeddedSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

88 
robj
 *
dupSåögObje˘
‘obj *
o
);

89 
robj
 *
dupSåögObje˘Unc⁄°™t
‘obj *
o
);

90 
isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
robj
 *
o
, *
Œ⁄gvÆ
);

91 
robj
 *
åyObje˘Encodög
‘obj *
o
);

92 
robj
 *
gëDecodedObje˘
‘obj *
o
);

93 
size_t
 
°rögObje˘Lí
(
robj
 *
o
);

94 
robj
 *
¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

95 
robj
 *
¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
, 
hum™‰õndly
);

96 
robj
 *
¸óãQuickli°Obje˘
();

97 
robj
 *
¸óãZùli°Obje˘
();

98 
robj
 *
¸óãSëObje˘
();

99 
robj
 *
¸óãI¡£tObje˘
();

100 
robj
 *
¸óãHashObje˘
();

101 
robj
 *
¸óãZ£tObje˘
();

102 
robj
 *
¸óãZ£tZùli°Obje˘
();

103 
gëL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

104 
checkTy≥
(
˛õ¡
 *
c
, 
robj
 *
o
, 
ty≥
);

105 
gëL⁄gL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

106 
gëDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

107 
gëL⁄gL⁄gFromObje˘
(
robj
 *
o
, *
èrgë
);

108 
gëL⁄gDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
);

109 
gëL⁄gDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

110 *
°rEncodög
(
ícodög
);

111 
com∑ªSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

112 
cﬁœãSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

113 
equÆSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

114 
e°im©eObje˘IdÀTime
(
robj
 *
o
);

116 
size_t
 
gëSåögObje˘SdsU£dMem‹y
(
robj
 *
o
);

118 
robj
 *
obje˘Comm™dLookup
(
˛õ¡
 *
c
,Ñobj *
key
);

119 
robj
 *
obje˘Comm™dLookupOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
);

120 
obje˘Comm™d
(
˛õ¡
 *
c
);

	@src/vr_object.h

1 #i‚de‡
_VR_OBJECT_H_


2 
	#_VR_OBJECT_H_


	)

4 
	#OBJ_SHARED_INTEGERS
 10000

	)

5 
	#OBJ_SHARED_BULKHDR_LEN
 32

	)

9 
	#OBJ_STRING
 0

	)

10 
	#OBJ_LIST
 1

	)

11 
	#OBJ_SET
 2

	)

12 
	#OBJ_ZSET
 3

	)

13 
	#OBJ_HASH
 4

	)

20 
	#OBJ_ENCODING_RAW
 0

	)

22 
	#OBJ_ENCODING_INT
 1

	)

24 
	#OBJ_ENCODING_HT
 2

	)

26 
	#OBJ_ENCODING_ZIPMAP
 3

	)

28 
	#OBJ_ENCODING_LINKEDLIST
 4

	)

30 
	#OBJ_ENCODING_ZIPLIST
 5

	)

32 
	#OBJ_ENCODING_INTSET
 6

	)

34 
	#OBJ_ENCODING_SKIPLIST
 7

	)

36 
	#OBJ_ENCODING_EMBSTR
 8

	)

38 
	#OBJ_ENCODING_QUICKLIST
 9

	)

41 
	#OBJ_HASH_KEY
 1

	)

43 
	#OBJ_HASH_VALUE
 2

	)

46 
	#sdsEncodedObje˘
(
obj±r
Ë(obj±r->
ícodög
 =
OBJ_ENCODING_RAW
 || obj±r->ícodög =
OBJ_ENCODING_EMBSTR
)

	)

50 
	#LRU_BITS
 24

	)

51 
	#LRU_CLOCK_MAX
 ((1<<
LRU_BITS
)-1Ë

	)

52 
	#LRU_CLOCK_RESOLUTION
 1000

	)

55 
	svr_obje˘
 {

57 
	mty≥
:4;

59 
	mícodög
:4;

61 
	mÃu
:
LRU_BITS
;

63 
	mc⁄°™t
:1;

65 
	mªfcou¡
;

67 *
	m±r
;

68 } 
	trobj
;

73 
de¸RefCou¡
(
robj
 *
o
);

74 
de¸RefCou¡Void
(*
o
);

75 
ö¸RefCou¡
(
robj
 *
o
);

76 
robj
 *
ª£tRefCou¡
‘obj *
obj
);

77 
‰ìObje˘
(
robj
 *
o
);

78 
‰ìObje˘Void
(*
o
);

79 
‰ìSåögObje˘
(
robj
 *
o
);

80 
‰ìLi°Obje˘
(
robj
 *
o
);

81 
‰ìSëObje˘
(
robj
 *
o
);

82 
‰ìZ£tObje˘
(
robj
 *
o
);

83 
‰ìHashObje˘
(
robj
 *
o
);

84 
robj
 *
¸óãObje˘
(
ty≥
, *
±r
);

85 
robj
 *
¸óãSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

86 
robj
 *
¸óãRawSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

87 
robj
 *
¸óãEmbeddedSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

88 
robj
 *
dupSåögObje˘
‘obj *
o
);

89 
robj
 *
dupSåögObje˘Unc⁄°™t
‘obj *
o
);

90 
isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
robj
 *
o
, *
Œ⁄gvÆ
);

91 
robj
 *
åyObje˘Encodög
‘obj *
o
);

92 
robj
 *
gëDecodedObje˘
‘obj *
o
);

93 
size_t
 
°rögObje˘Lí
(
robj
 *
o
);

94 
robj
 *
¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

95 
robj
 *
¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
, 
hum™‰õndly
);

96 
robj
 *
¸óãQuickli°Obje˘
();

97 
robj
 *
¸óãZùli°Obje˘
();

98 
robj
 *
¸óãSëObje˘
();

99 
robj
 *
¸óãI¡£tObje˘
();

100 
robj
 *
¸óãHashObje˘
();

101 
robj
 *
¸óãZ£tObje˘
();

102 
robj
 *
¸óãZ£tZùli°Obje˘
();

103 
gëL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

104 
checkTy≥
(
˛õ¡
 *
c
, 
robj
 *
o
, 
ty≥
);

105 
gëL⁄gL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

106 
gëDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

107 
gëL⁄gL⁄gFromObje˘
(
robj
 *
o
, *
èrgë
);

108 
gëL⁄gDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
);

109 
gëL⁄gDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

110 *
°rEncodög
(
ícodög
);

111 
com∑ªSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

112 
cﬁœãSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

113 
equÆSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

114 
e°im©eObje˘IdÀTime
(
robj
 *
o
);

116 
size_t
 
gëSåögObje˘SdsU£dMem‹y
(
robj
 *
o
);

118 
robj
 *
obje˘Comm™dLookup
(
˛õ¡
 *
c
,Ñobj *
key
);

119 
robj
 *
obje˘Comm™dLookupOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
);

120 
obje˘Comm™d
(
˛õ¡
 *
c
);

	@src/vr_pubsub.c

1 
	~<vr_c‹e.h
>

5 
	$pubsubUnsubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
, 
nŸify
) {

6 
di˘E¡ry
 *
de
;

7 
dli°
 *
˛õ¡s
;

8 
dli°Node
 *
 
;

9 
ªtvÆ
 = 0;

12 
	`ö¸RefCou¡
(
ch™√l
);

14 i‡(
	`di˘Dñëe
(
c
->
pubsub_ch™√ls
,
ch™√l
Ë=
DICT_OK
) {

15 
ªtvÆ
 = 1;

17 
de
 = 
	`di˘Föd
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

18 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
de
 != NULL);

19 
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

20 
 
 = 
	`dli°SórchKey
(
˛õ¡s
,
c
);

21 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
 
 != NULL);

22 
	`dli°DñNode
(
˛õ¡s
,
 
);

23 i‡(
	`dli°Lígth
(
˛õ¡s
) == 0) {

27 
	`di˘Dñëe
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

31 i‡(
nŸify
) {

32 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

33 
	`addRïly
(
c
,
sh¨ed
.
unsubs¸ibebulk
);

34 
	`addRïlyBulk
(
c
,
ch™√l
);

35 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

36 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

39 
	`de¸RefCou¡
(
ch™√l
);

40  
ªtvÆ
;

41 
	}
}

45 
	$pubsubUnsubs¸ibeAŒCh™√ls
(
˛õ¡
 *
c
, 
nŸify
) {

46 
di˘Iãøt‹
 *
di
 = 
	`di˘GëSa„Iãøt‹
(
c
->
pubsub_ch™√ls
);

47 
di˘E¡ry
 *
de
;

48 
cou¡
 = 0;

50 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

51 
robj
 *
ch™√l
 = 
	`di˘GëKey
(
de
);

53 
cou¡
 +
	`pubsubUnsubs¸ibeCh™√l
(
c
,
ch™√l
,
nŸify
);

56 i‡(
nŸify
 && 
cou¡
 == 0) {

57 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

58 
	`addRïly
(
c
,
sh¨ed
.
unsubs¸ibebulk
);

59 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

60 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

61 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

63 
	`di˘Rñó£Iãøt‹
(
di
);

64  
cou¡
;

65 
	}
}

69 
	$pubsubUnsubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
, 
nŸify
) {

70 
dli°Node
 *
 
;

71 
pubsubP©ã∫
 
∑t
;

72 
ªtvÆ
 = 0;

74 
	`ö¸RefCou¡
(
∑âîn
);

75 i‡((
 
 = 
	`dli°SórchKey
(
c
->
pubsub_∑âîns
,
∑âîn
)Ë!
NULL
) {

76 
ªtvÆ
 = 1;

77 
	`dli°DñNode
(
c
->
pubsub_∑âîns
,
 
);

78 
∑t
.
˛õ¡
 = 
c
;

79 
∑t
.
∑âîn
 =Öattern;

80 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
pubsub_∑âîns
,&
∑t
);

81 
	`dli°DñNode
(
c
->
vñ
->
pubsub_∑âîns
,
 
);

84 i‡(
nŸify
) {

85 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

86 
	`addRïly
(
c
,
sh¨ed
.
punsubs¸ibebulk
);

87 
	`addRïlyBulk
(
c
,
∑âîn
);

88 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

89 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

91 
	`de¸RefCou¡
(
∑âîn
);

92  
ªtvÆ
;

93 
	}
}

97 
	$pubsubUnsubs¸ibeAŒP©ã∫s
(
˛õ¡
 *
c
, 
nŸify
) {

98 
dli°Node
 *
 
;

99 
dli°Iãr
 
li
;

100 
cou¡
 = 0;

102 
	`dli°Rewöd
(
c
->
pubsub_∑âîns
,&
li
);

103 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

104 
robj
 *
∑âîn
 = 
 
->
vÆue
;

106 
cou¡
 +
	`pubsubUnsubs¸ibeP©ã∫
(
c
,
∑âîn
,
nŸify
);

108 i‡(
nŸify
 && 
cou¡
 == 0) {

110 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

111 
	`addRïly
(
c
,
sh¨ed
.
punsubs¸ibebulk
);

112 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

113 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

114 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

116  
cou¡
;

117 
	}
}

126 
	$pubsubSubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
) {

127 
di˘E¡ry
 *
de
;

128 
dli°
 *
˛õ¡s
 = 
NULL
;

129 
ªtvÆ
 = 0;

132 i‡(
	`di˘Add
(
c
->
pubsub_ch™√ls
,
ch™√l
,
NULL
Ë=
DICT_OK
) {

133 
ªtvÆ
 = 1;

134 
	`ö¸RefCou¡
(
ch™√l
);

136 
de
 = 
	`di˘Föd
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

137 i‡(
de
 =
NULL
) {

138 
˛õ¡s
 = 
	`dli°Cª©e
();

139 
	`di˘Add
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
,
˛õ¡s
);

140 
	`ö¸RefCou¡
(
ch™√l
);

142 
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

144 
	`dli°AddNodeTaû
(
˛õ¡s
,
c
);

147 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

148 
	`addRïly
(
c
,
sh¨ed
.
subs¸ibebulk
);

149 
	`addRïlyBulk
(
c
,
ch™√l
);

150 
	`addRïlyL⁄gL⁄g
(
c
,
	`˛õ¡Subs¸ùti⁄sCou¡
(c));

151  
ªtvÆ
;

152 
	}
}

154 
	$subs¸ibeComm™d
(
˛õ¡
 *
c
) {

155 
j
;

157 
j
 = 1; j < 
c
->
¨gc
; j++)

158 
	`pubsubSubs¸ibeCh™√l
(
c
,c->
¨gv
[
j
]);

159 
c
->
Êags
 |
CLIENT_PUBSUB
;

160 
	}
}

163 
	$˛õ¡Subs¸ùti⁄sCou¡
(
˛õ¡
 *
c
) {

164  
	`di˘Size
(
c
->
pubsub_ch™√ls
)+

165 
	`dli°Lígth
(
c
->
pubsub_∑âîns
);

166 
	}
}

168 
	$unsubs¸ibeComm™d
(
˛õ¡
 *
c
) {

169 i‡(
c
->
¨gc
 == 1) {

170 
	`pubsubUnsubs¸ibeAŒCh™√ls
(
c
,1);

172 
j
;

174 
j
 = 1; j < 
c
->
¨gc
; j++)

175 
	`pubsubUnsubs¸ibeCh™√l
(
c
,c->
¨gv
[
j
],1);

177 i‡(
	`˛õ¡Subs¸ùti⁄sCou¡
(
c
Ë=0Ëc->
Êags
 &~
CLIENT_PUBSUB
;

178 
	}
}

181 
	$pubsubSubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
) {

182 
ªtvÆ
 = 0;

184 i‡(
	`dli°SórchKey
(
c
->
pubsub_∑âîns
,
∑âîn
Ë=
NULL
) {

185 
ªtvÆ
 = 1;

186 
pubsubP©ã∫
 *
∑t
;

187 
	`dli°AddNodeTaû
(
c
->
pubsub_∑âîns
,
∑âîn
);

188 
	`ö¸RefCou¡
(
∑âîn
);

189 
∑t
 = 
	`dÆloc
((*pat));

190 
∑t
->
∑âîn
 = 
	`gëDecodedObje˘
(pattern);

191 
∑t
->
˛õ¡
 = 
c
;

192 
	`dli°AddNodeTaû
(
c
->
vñ
->
pubsub_∑âîns
,
∑t
);

195 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

196 
	`addRïly
(
c
,
sh¨ed
.
psubs¸ibebulk
);

197 
	`addRïlyBulk
(
c
,
∑âîn
);

198 
	`addRïlyL⁄gL⁄g
(
c
,
	`˛õ¡Subs¸ùti⁄sCou¡
(c));

199  
ªtvÆ
;

200 
	}
}

202 
	$psubs¸ibeComm™d
(
˛õ¡
 *
c
) {

203 
j
;

205 
j
 = 1; j < 
c
->
¨gc
; j++)

206 
	`pubsubSubs¸ibeP©ã∫
(
c
,c->
¨gv
[
j
]);

207 
c
->
Êags
 |
CLIENT_PUBSUB
;

208 
	}
}

210 
	$punsubs¸ibeComm™d
(
˛õ¡
 *
c
) {

211 i‡(
c
->
¨gc
 == 1) {

212 
	`pubsubUnsubs¸ibeAŒP©ã∫s
(
c
,1);

214 
j
;

216 
j
 = 1; j < 
c
->
¨gc
; j++)

217 
	`pubsubUnsubs¸ibeP©ã∫
(
c
,c->
¨gv
[
j
],1);

219 i‡(
	`˛õ¡Subs¸ùti⁄sCou¡
(
c
Ë=0Ëc->
Êags
 &~
CLIENT_PUBSUB
;

220 
	}
}

223 
	$pubsubPublishMesßge
(
robj
 *
ch™√l
,Ñobj *
mesßge
) {

224 
ª˚ivîs
 = 0;

225 
di˘E¡ry
 *
de
;

226 
dli°Node
 *
 
;

227 
dli°Iãr
 
li
;

230 
de
 = 
	`di˘Föd
(
£rvî
.
pubsub_ch™√ls
,
ch™√l
);

231 i‡(
de
) {

232 
dli°
 *
li°
 = 
	`di˘GëVÆ
(
de
);

233 
dli°Node
 *
 
;

234 
dli°Iãr
 
li
;

236 
	`dli°Rewöd
(
li°
,&
li
);

237 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

238 
˛õ¡
 *
c
 = 
 
->
vÆue
;

240 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

241 
	`addRïly
(
c
,
sh¨ed
.
mesßgebulk
);

242 
	`addRïlyBulk
(
c
,
ch™√l
);

243 
	`addRïlyBulk
(
c
,
mesßge
);

244 
ª˚ivîs
++;

248 i‡(
	`dli°Lígth
(
£rvî
.
pubsub_∑âîns
)) {

249 
	`dli°Rewöd
(
£rvî
.
pubsub_∑âîns
,&
li
);

250 
ch™√l
 = 
	`gëDecodedObje˘
(channel);

251 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

252 
pubsubP©ã∫
 *
∑t
 = 
 
->
vÆue
;

254 i‡(
	`°rögm©chÀn
((*)
∑t
->
∑âîn
->
±r
,

255 
	`sd¶í
(
∑t
->
∑âîn
->
±r
),

256 (*)
ch™√l
->
±r
,

257 
	`sd¶í
(
ch™√l
->
±r
),0)) {

258 
	`addRïly
(
∑t
->
˛õ¡
,
sh¨ed
.
mbulkhdr
[4]);

259 
	`addRïly
(
∑t
->
˛õ¡
,
sh¨ed
.
pmesßgebulk
);

260 
	`addRïlyBulk
(
∑t
->
˛õ¡
,∑t->
∑âîn
);

261 
	`addRïlyBulk
(
∑t
->
˛õ¡
,
ch™√l
);

262 
	`addRïlyBulk
(
∑t
->
˛õ¡
,
mesßge
);

263 
ª˚ivîs
++;

266 
	`de¸RefCou¡
(
ch™√l
);

268  
ª˚ivîs
;

269 
	}
}

	@src/vr_pubsub.c

1 
	~<vr_c‹e.h
>

5 
	$pubsubUnsubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
, 
nŸify
) {

6 
di˘E¡ry
 *
de
;

7 
dli°
 *
˛õ¡s
;

8 
dli°Node
 *
 
;

9 
ªtvÆ
 = 0;

12 
	`ö¸RefCou¡
(
ch™√l
);

14 i‡(
	`di˘Dñëe
(
c
->
pubsub_ch™√ls
,
ch™√l
Ë=
DICT_OK
) {

15 
ªtvÆ
 = 1;

17 
de
 = 
	`di˘Föd
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

18 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
de
 != NULL);

19 
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

20 
 
 = 
	`dli°SórchKey
(
˛õ¡s
,
c
);

21 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
 
 != NULL);

22 
	`dli°DñNode
(
˛õ¡s
,
 
);

23 i‡(
	`dli°Lígth
(
˛õ¡s
) == 0) {

27 
	`di˘Dñëe
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

31 i‡(
nŸify
) {

32 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

33 
	`addRïly
(
c
,
sh¨ed
.
unsubs¸ibebulk
);

34 
	`addRïlyBulk
(
c
,
ch™√l
);

35 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

36 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

39 
	`de¸RefCou¡
(
ch™√l
);

40  
ªtvÆ
;

41 
	}
}

45 
	$pubsubUnsubs¸ibeAŒCh™√ls
(
˛õ¡
 *
c
, 
nŸify
) {

46 
di˘Iãøt‹
 *
di
 = 
	`di˘GëSa„Iãøt‹
(
c
->
pubsub_ch™√ls
);

47 
di˘E¡ry
 *
de
;

48 
cou¡
 = 0;

50 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

51 
robj
 *
ch™√l
 = 
	`di˘GëKey
(
de
);

53 
cou¡
 +
	`pubsubUnsubs¸ibeCh™√l
(
c
,
ch™√l
,
nŸify
);

56 i‡(
nŸify
 && 
cou¡
 == 0) {

57 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

58 
	`addRïly
(
c
,
sh¨ed
.
unsubs¸ibebulk
);

59 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

60 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

61 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

63 
	`di˘Rñó£Iãøt‹
(
di
);

64  
cou¡
;

65 
	}
}

69 
	$pubsubUnsubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
, 
nŸify
) {

70 
dli°Node
 *
 
;

71 
pubsubP©ã∫
 
∑t
;

72 
ªtvÆ
 = 0;

74 
	`ö¸RefCou¡
(
∑âîn
);

75 i‡((
 
 = 
	`dli°SórchKey
(
c
->
pubsub_∑âîns
,
∑âîn
)Ë!
NULL
) {

76 
ªtvÆ
 = 1;

77 
	`dli°DñNode
(
c
->
pubsub_∑âîns
,
 
);

78 
∑t
.
˛õ¡
 = 
c
;

79 
∑t
.
∑âîn
 =Öattern;

80 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
pubsub_∑âîns
,&
∑t
);

81 
	`dli°DñNode
(
c
->
vñ
->
pubsub_∑âîns
,
 
);

84 i‡(
nŸify
) {

85 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

86 
	`addRïly
(
c
,
sh¨ed
.
punsubs¸ibebulk
);

87 
	`addRïlyBulk
(
c
,
∑âîn
);

88 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

89 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

91 
	`de¸RefCou¡
(
∑âîn
);

92  
ªtvÆ
;

93 
	}
}

97 
	$pubsubUnsubs¸ibeAŒP©ã∫s
(
˛õ¡
 *
c
, 
nŸify
) {

98 
dli°Node
 *
 
;

99 
dli°Iãr
 
li
;

100 
cou¡
 = 0;

102 
	`dli°Rewöd
(
c
->
pubsub_∑âîns
,&
li
);

103 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

104 
robj
 *
∑âîn
 = 
 
->
vÆue
;

106 
cou¡
 +
	`pubsubUnsubs¸ibeP©ã∫
(
c
,
∑âîn
,
nŸify
);

108 i‡(
nŸify
 && 
cou¡
 == 0) {

110 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

111 
	`addRïly
(
c
,
sh¨ed
.
punsubs¸ibebulk
);

112 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

113 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

114 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

116  
cou¡
;

117 
	}
}

126 
	$pubsubSubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
) {

127 
di˘E¡ry
 *
de
;

128 
dli°
 *
˛õ¡s
 = 
NULL
;

129 
ªtvÆ
 = 0;

132 i‡(
	`di˘Add
(
c
->
pubsub_ch™√ls
,
ch™√l
,
NULL
Ë=
DICT_OK
) {

133 
ªtvÆ
 = 1;

134 
	`ö¸RefCou¡
(
ch™√l
);

136 
de
 = 
	`di˘Föd
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

137 i‡(
de
 =
NULL
) {

138 
˛õ¡s
 = 
	`dli°Cª©e
();

139 
	`di˘Add
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
,
˛õ¡s
);

140 
	`ö¸RefCou¡
(
ch™√l
);

142 
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

144 
	`dli°AddNodeTaû
(
˛õ¡s
,
c
);

147 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

148 
	`addRïly
(
c
,
sh¨ed
.
subs¸ibebulk
);

149 
	`addRïlyBulk
(
c
,
ch™√l
);

150 
	`addRïlyL⁄gL⁄g
(
c
,
	`˛õ¡Subs¸ùti⁄sCou¡
(c));

151  
ªtvÆ
;

152 
	}
}

154 
	$subs¸ibeComm™d
(
˛õ¡
 *
c
) {

155 
j
;

157 
j
 = 1; j < 
c
->
¨gc
; j++)

158 
	`pubsubSubs¸ibeCh™√l
(
c
,c->
¨gv
[
j
]);

159 
c
->
Êags
 |
CLIENT_PUBSUB
;

160 
	}
}

163 
	$˛õ¡Subs¸ùti⁄sCou¡
(
˛õ¡
 *
c
) {

164  
	`di˘Size
(
c
->
pubsub_ch™√ls
)+

165 
	`dli°Lígth
(
c
->
pubsub_∑âîns
);

166 
	}
}

168 
	$unsubs¸ibeComm™d
(
˛õ¡
 *
c
) {

169 i‡(
c
->
¨gc
 == 1) {

170 
	`pubsubUnsubs¸ibeAŒCh™√ls
(
c
,1);

172 
j
;

174 
j
 = 1; j < 
c
->
¨gc
; j++)

175 
	`pubsubUnsubs¸ibeCh™√l
(
c
,c->
¨gv
[
j
],1);

177 i‡(
	`˛õ¡Subs¸ùti⁄sCou¡
(
c
Ë=0Ëc->
Êags
 &~
CLIENT_PUBSUB
;

178 
	}
}

181 
	$pubsubSubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
) {

182 
ªtvÆ
 = 0;

184 i‡(
	`dli°SórchKey
(
c
->
pubsub_∑âîns
,
∑âîn
Ë=
NULL
) {

185 
ªtvÆ
 = 1;

186 
pubsubP©ã∫
 *
∑t
;

187 
	`dli°AddNodeTaû
(
c
->
pubsub_∑âîns
,
∑âîn
);

188 
	`ö¸RefCou¡
(
∑âîn
);

189 
∑t
 = 
	`dÆloc
((*pat));

190 
∑t
->
∑âîn
 = 
	`gëDecodedObje˘
(pattern);

191 
∑t
->
˛õ¡
 = 
c
;

192 
	`dli°AddNodeTaû
(
c
->
vñ
->
pubsub_∑âîns
,
∑t
);

195 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

196 
	`addRïly
(
c
,
sh¨ed
.
psubs¸ibebulk
);

197 
	`addRïlyBulk
(
c
,
∑âîn
);

198 
	`addRïlyL⁄gL⁄g
(
c
,
	`˛õ¡Subs¸ùti⁄sCou¡
(c));

199  
ªtvÆ
;

200 
	}
}

202 
	$psubs¸ibeComm™d
(
˛õ¡
 *
c
) {

203 
j
;

205 
j
 = 1; j < 
c
->
¨gc
; j++)

206 
	`pubsubSubs¸ibeP©ã∫
(
c
,c->
¨gv
[
j
]);

207 
c
->
Êags
 |
CLIENT_PUBSUB
;

208 
	}
}

210 
	$punsubs¸ibeComm™d
(
˛õ¡
 *
c
) {

211 i‡(
c
->
¨gc
 == 1) {

212 
	`pubsubUnsubs¸ibeAŒP©ã∫s
(
c
,1);

214 
j
;

216 
j
 = 1; j < 
c
->
¨gc
; j++)

217 
	`pubsubUnsubs¸ibeP©ã∫
(
c
,c->
¨gv
[
j
],1);

219 i‡(
	`˛õ¡Subs¸ùti⁄sCou¡
(
c
Ë=0Ëc->
Êags
 &~
CLIENT_PUBSUB
;

220 
	}
}

223 
	$pubsubPublishMesßge
(
robj
 *
ch™√l
,Ñobj *
mesßge
) {

224 
ª˚ivîs
 = 0;

225 
di˘E¡ry
 *
de
;

226 
dli°Node
 *
 
;

227 
dli°Iãr
 
li
;

230 
de
 = 
	`di˘Föd
(
£rvî
.
pubsub_ch™√ls
,
ch™√l
);

231 i‡(
de
) {

232 
dli°
 *
li°
 = 
	`di˘GëVÆ
(
de
);

233 
dli°Node
 *
 
;

234 
dli°Iãr
 
li
;

236 
	`dli°Rewöd
(
li°
,&
li
);

237 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

238 
˛õ¡
 *
c
 = 
 
->
vÆue
;

240 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

241 
	`addRïly
(
c
,
sh¨ed
.
mesßgebulk
);

242 
	`addRïlyBulk
(
c
,
ch™√l
);

243 
	`addRïlyBulk
(
c
,
mesßge
);

244 
ª˚ivîs
++;

248 i‡(
	`dli°Lígth
(
£rvî
.
pubsub_∑âîns
)) {

249 
	`dli°Rewöd
(
£rvî
.
pubsub_∑âîns
,&
li
);

250 
ch™√l
 = 
	`gëDecodedObje˘
(channel);

251 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

252 
pubsubP©ã∫
 *
∑t
 = 
 
->
vÆue
;

254 i‡(
	`°rögm©chÀn
((*)
∑t
->
∑âîn
->
±r
,

255 
	`sd¶í
(
∑t
->
∑âîn
->
±r
),

256 (*)
ch™√l
->
±r
,

257 
	`sd¶í
(
ch™√l
->
±r
),0)) {

258 
	`addRïly
(
∑t
->
˛õ¡
,
sh¨ed
.
mbulkhdr
[4]);

259 
	`addRïly
(
∑t
->
˛õ¡
,
sh¨ed
.
pmesßgebulk
);

260 
	`addRïlyBulk
(
∑t
->
˛õ¡
,∑t->
∑âîn
);

261 
	`addRïlyBulk
(
∑t
->
˛õ¡
,
ch™√l
);

262 
	`addRïlyBulk
(
∑t
->
˛õ¡
,
mesßge
);

263 
ª˚ivîs
++;

266 
	`de¸RefCou¡
(
ch™√l
);

268  
ª˚ivîs
;

269 
	}
}

	@src/vr_pubsub.h

1 #i‚de‡
_VR_PUBSUB_H_


2 
	#_VR_PUBSUB_H_


	)

4 
	spubsubP©ã∫
 {

5 
˛õ¡
 *
	m˛õ¡
;

6 
robj
 *
	m∑âîn
;

7 } 
	tpubsubP©ã∫
;

9 
pubsubUnsubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
, 
nŸify
);

10 
pubsubUnsubs¸ibeAŒCh™√ls
(
˛õ¡
 *
c
, 
nŸify
);

11 
pubsubUnsubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
, 
nŸify
);

12 
pubsubUnsubs¸ibeAŒP©ã∫s
(
˛õ¡
 *
c
, 
nŸify
);

13 
pubsubSubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
);

14 
˛õ¡Subs¸ùti⁄sCou¡
(
˛õ¡
 *
c
);

15 
subs¸ibeComm™d
(
˛õ¡
 *
c
);

16 
unsubs¸ibeComm™d
(
˛õ¡
 *
c
);

17 
psubs¸ibeComm™d
(
˛õ¡
 *
c
);

18 
punsubs¸ibeComm™d
(
˛õ¡
 *
c
);

19 
pubsubSubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
);

20 
pubsubPublishMesßge
(
robj
 *
ch™√l
,Ñobj *
mesßge
);

	@src/vr_pubsub.h

1 #i‚de‡
_VR_PUBSUB_H_


2 
	#_VR_PUBSUB_H_


	)

4 
	spubsubP©ã∫
 {

5 
˛õ¡
 *
	m˛õ¡
;

6 
robj
 *
	m∑âîn
;

7 } 
	tpubsubP©ã∫
;

9 
pubsubUnsubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
, 
nŸify
);

10 
pubsubUnsubs¸ibeAŒCh™√ls
(
˛õ¡
 *
c
, 
nŸify
);

11 
pubsubUnsubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
, 
nŸify
);

12 
pubsubUnsubs¸ibeAŒP©ã∫s
(
˛õ¡
 *
c
, 
nŸify
);

13 
pubsubSubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
);

14 
˛õ¡Subs¸ùti⁄sCou¡
(
˛õ¡
 *
c
);

15 
subs¸ibeComm™d
(
˛õ¡
 *
c
);

16 
unsubs¸ibeComm™d
(
˛õ¡
 *
c
);

17 
psubs¸ibeComm™d
(
˛õ¡
 *
c
);

18 
punsubs¸ibeComm™d
(
˛õ¡
 *
c
);

19 
pubsubSubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
);

20 
pubsubPublishMesßge
(
robj
 *
ch™√l
,Ñobj *
mesßge
);

	@src/vr_quicklist.c

1 
	~<°rög.h
>

3 
	~<vr_c‹e.h
>

5 #i‡
deföed
(
REDIS_TEST
Ë|| deföed(
REDIS_TEST_VERBOSE
)

6 
	~<°dio.h
>

9 #i‚de‡
REDIS_STATIC


10 
	#REDIS_STATIC
 

	)

14 c⁄° 
size_t
 
	g›timiz©i⁄_Àvñ
[] = {4096, 8192, 16384, 32768, 65536};

18 
	#SIZE_SAFETY_LIMIT
 8192

	)

21 
	#MIN_COMPRESS_BYTES
 48

	)

26 
	#MIN_COMPRESS_IMPROVE
 8

	)

29 #i‚de‡
REDIS_TEST_VERBOSE


30 
	#D
(...)

	)

32 
	#D
(...) \

34 
	`¥ötf
("%s:%s:%d:\t", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

35 
	`¥ötf
(
__VA_ARGS__
); \

36 
	`¥ötf
("\n"); \

37 } 0);

	)

41 
	#öôE¡ry
(
e
) \

43 (
e
)->
zi
 = (e)->
vÆue
 = 
NULL
; \

44 (
e
)->
l⁄gvÆ
 = -123456789; \

45 (
e
)->
quickli°
 = 
NULL
; \

46 (
e
)->
node
 = 
NULL
; \

47 (
e
)->
off£t
 = 123456789; \

48 (
e
)->
sz
 = 0; \

49 } 0)

	)

51 #i‡
__GNUC__
 >= 3

52 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

53 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

55 
	#likñy
(
x
Ë(x)

	)

56 
	#u∆ikñy
(
x
Ë(x)

	)

61 
quickli°
 *
	$quickli°Cª©e
() {

62 
quickli°
 *quicklist;

64 
quickli°
 = 
	`dÆloc
((*quicklist));

65 
quickli°
->
hód
 = quickli°->
èû
 = 
NULL
;

66 
quickli°
->
Àn
 = 0;

67 
quickli°
->
cou¡
 = 0;

68 
quickli°
->
com¥ess
 = 0;

69 
quickli°
->
fûl
 = -2;

70  
quickli°
;

71 
	}
}

73 
	#COMPRESS_MAX
 (1 << 16)

	)

74 
	$quickli°SëCom¥essDïth
(
quickli°
 *quickli°, 
com¥ess
) {

75 i‡(
com¥ess
 > 
COMPRESS_MAX
) {

76 
com¥ess
 = 
COMPRESS_MAX
;

77 } i‡(
com¥ess
 < 0) {

78 
com¥ess
 = 0;

80 
quickli°
->
com¥ess
 = compress;

81 
	}
}

83 
	#FILL_MAX
 (1 << 15)

	)

84 
	$quickli°SëFûl
(
quickli°
 *quickli°, 
fûl
) {

85 i‡(
fûl
 > 
FILL_MAX
) {

86 
fûl
 = 
FILL_MAX
;

87 } i‡(
fûl
 < -5) {

88 
fûl
 = -5;

90 
quickli°
->
fûl
 = fill;

91 
	}
}

93 
	$quickli°SëO±i⁄s
(
quickli°
 *quickli°, 
fûl
, 
dïth
) {

94 
	`quickli°SëFûl
(
quickli°
, 
fûl
);

95 
	`quickli°SëCom¥essDïth
(
quickli°
, 
dïth
);

96 
	}
}

99 
quickli°
 *
	$quickli°New
(
fûl
, 
com¥ess
) {

100 
quickli°
 *quickli° = 
	`quickli°Cª©e
();

101 
	`quickli°SëO±i⁄s
(
quickli°
, 
fûl
, 
com¥ess
);

102  
quickli°
;

103 
	}
}

105 
REDIS_STATIC
 
quickli°Node
 *
	$quickli°Cª©eNode
() {

106 
quickli°Node
 *
node
;

107 
node
 = 
	`dÆloc
((*node));

108 
node
->
zl
 = 
NULL
;

109 
node
->
cou¡
 = 0;

110 
node
->
sz
 = 0;

111 
node
->
√xt
 =Çode->
¥ev
 = 
NULL
;

112 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_RAW
;

113 
node
->
c⁄èöî
 = 
QUICKLIST_NODE_CONTAINER_ZIPLIST
;

114 
node
->
ªcom¥ess
 = 0;

115  
node
;

116 
	}
}

119 
	$quickli°Cou¡
(
quickli°
 *
ql
Ë{  ql->
cou¡
; 
	}
}

122 
	$quickli°Rñó£
(
quickli°
 *quicklist) {

123 
Àn
;

124 
quickli°Node
 *
cuºít
, *
√xt
;

126 
cuºít
 = 
quickli°
->
hód
;

127 
Àn
 = 
quickli°
->len;

128 
Àn
--) {

129 
√xt
 = 
cuºít
->next;

131 
	`d‰ì
(
cuºít
->
zl
);

132 
quickli°
->
cou¡
 -
cuºít
->count;

134 
	`d‰ì
(
cuºít
);

136 
quickli°
->
Àn
--;

137 
cuºít
 = 
√xt
;

139 
	`d‰ì
(
quickli°
);

140 
	}
}

145 
REDIS_STATIC
 
	$__quickli°Com¥essNode
(
quickli°Node
 *
node
) {

146 #ifde‡
REDIS_TEST


147 
node
->
©ãm±ed_com¥ess
 = 1;

151 i‡(
node
->
sz
 < 
MIN_COMPRESS_BYTES
)

154 
quickli°LZF
 *
lzf
 = 
	`dÆloc
((*lzfË+ 
node
->
sz
);

157 i‡(((
lzf
->
sz
 = 
	`lzf_com¥ess
(
node
->
zl
,Çode->sz,Üzf->
com¥es£d
,

158 
node
->
sz
)) == 0) ||

159 
lzf
->
sz
 + 
MIN_COMPRESS_IMPROVE
 >
node
->sz) {

161 
	`d‰ì
(
lzf
);

164 
lzf
 = 
	`dªÆloc
÷zf, (*lzfË+Üzf->
sz
);

165 
	`d‰ì
(
node
->
zl
);

166 
node
->
zl
 = (*)
lzf
;

167 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_LZF
;

168 
node
->
ªcom¥ess
 = 0;

170 
	}
}

173 
	#quickli°Com¥essNode
(
_node
) \

175 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_RAW
) { \

176 
	`__quickli°Com¥essNode
((
_node
)); \

178 } 0)

	)

182 
REDIS_STATIC
 
	$__quickli°Decom¥essNode
(
quickli°Node
 *
node
) {

183 #ifde‡
REDIS_TEST


184 
node
->
©ãm±ed_com¥ess
 = 0;

187 *
decom¥es£d
 = 
	`dÆloc
(
node
->
sz
);

188 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

189 i‡(
	`lzf_decom¥ess
(
lzf
->
com¥es£d
,Üzf->
sz
, 
decom¥es£d
, 
node
->sz) == 0) {

191 
	`d‰ì
(
decom¥es£d
);

194 
	`d‰ì
(
lzf
);

195 
node
->
zl
 = 
decom¥es£d
;

196 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_RAW
;

198 
	}
}

201 
	#quickli°Decom¥essNode
(
_node
) \

203 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) { \

204 
	`__quickli°Decom¥essNode
((
_node
)); \

206 } 0)

	)

209 
	#quickli°Decom¥essNodeF‹U£
(
_node
) \

211 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) { \

212 
	`__quickli°Decom¥essNode
((
_node
)); \

213 (
_node
)->
ªcom¥ess
 = 1; \

215 } 0)

	)

220 
size_t
 
	$quickli°GëLzf
(c⁄° 
quickli°Node
 *
node
, **
d©a
) {

221 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

222 *
d©a
 = 
lzf
->
com¥es£d
;

223  
lzf
->
sz
;

224 
	}
}

226 
	#quickli°AŒowsCom¥essi⁄
(
_ql
Ë((_ql)->
com¥ess
 !0)

	)

232 
REDIS_STATIC
 
	$__quickli°Com¥ess
(c⁄° 
quickli°
 *quicklist,

233 
quickli°Node
 *
node
) {

236 i‡(!
	`quickli°AŒowsCom¥essi⁄
(
quickli°
) ||

237 
quickli°
->
Àn
 < ()(quickli°->
com¥ess
 * 2))

242 i‡(
quickli°
->
com¥ess
 == 1) {

243 
quickli°Node
 *
h
 = 
quickli°
->
hód
, *
t
 = quickli°->
èû
;

244 
	`quickli°Decom¥essNode
(
h
);

245 
	`quickli°Decom¥essNode
(
t
);

246 i‡(
h
 !
node
 && 
t
 !=Çode)

247 
	`quickli°Com¥essNode
(
node
);

249 } i‡(
quickli°
->
com¥ess
 == 2) {

250 
quickli°Node
 *
h
 = 
quickli°
->
hód
, *
hn
 = h->
√xt
, *
h¬
 = hn->next;

251 
quickli°Node
 *
t
 = 
quickli°
->
èû
, *
ç
 =Å->
¥ev
, *
çp
 =Åp->prev;

252 
	`quickli°Decom¥essNode
(
h
);

253 
	`quickli°Decom¥essNode
(
hn
);

254 
	`quickli°Decom¥essNode
(
t
);

255 
	`quickli°Decom¥essNode
(
ç
);

256 i‡(
h
 !
node
 && 
hn
 !nodê&& 
t
 !nodê&& 
ç
 !=Çode) {

257 
	`quickli°Com¥essNode
(
node
);

259 i‡(
h¬
 !
t
) {

260 
	`quickli°Com¥essNode
(
h¬
);

262 i‡(
çp
 !
h
) {

263 
	`quickli°Com¥essNode
(
çp
);

272 
quickli°Node
 *
f‹w¨d
 = 
quickli°
->
hód
;

273 
quickli°Node
 *
ªvî£
 = 
quickli°
->
èû
;

274 
dïth
 = 0;

275 
ö_dïth
 = 0;

276 
dïth
++ < 
quickli°
->
com¥ess
) {

277 
	`quickli°Decom¥essNode
(
f‹w¨d
);

278 
	`quickli°Decom¥essNode
(
ªvî£
);

280 i‡(
f‹w¨d
 =
node
 || 
ªvî£
 ==Çode)

281 
ö_dïth
 = 1;

283 i‡(
f‹w¨d
 =
ªvî£
)

286 
f‹w¨d
 = f‹w¨d->
√xt
;

287 
ªvî£
 =Ñevî£->
¥ev
;

290 i‡(!
ö_dïth
)

291 
	`quickli°Com¥essNode
(
node
);

293 i‡(
dïth
 > 2) {

295 
	`quickli°Com¥essNode
(
f‹w¨d
);

296 
	`quickli°Com¥essNode
(
ªvî£
);

298 
	}
}

300 
	#quickli°Com¥ess
(
_ql
, 
_node
) \

302 i‡((
_node
)->
ªcom¥ess
) \

303 
	`quickli°Com¥essNode
((
_node
)); \

305 
	`__quickli°Com¥ess
((
_ql
), (
_node
)); \

306 } 0)

	)

309 
	#quickli°Recom¥essO∆y
(
_ql
, 
_node
) \

311 i‡((
_node
)->
ªcom¥ess
) \

312 
	`quickli°Com¥essNode
((
_node
)); \

313 } 0)

	)

319 
REDIS_STATIC
 
	$__quickli°In£πNode
(
quickli°
 *quicklist,

320 
quickli°Node
 *
ﬁd_node
,

321 
quickli°Node
 *
√w_node
, 
a·î
) {

322 i‡(
a·î
) {

323 
√w_node
->
¥ev
 = 
ﬁd_node
;

324 i‡(
ﬁd_node
) {

325 
√w_node
->
√xt
 = 
ﬁd_node
->next;

326 i‡(
ﬁd_node
->
√xt
)

327 
ﬁd_node
->
√xt
->
¥ev
 = 
√w_node
;

328 
ﬁd_node
->
√xt
 = 
√w_node
;

330 i‡(
quickli°
->
èû
 =
ﬁd_node
)

331 
quickli°
->
èû
 = 
√w_node
;

333 
√w_node
->
√xt
 = 
ﬁd_node
;

334 i‡(
ﬁd_node
) {

335 
√w_node
->
¥ev
 = 
ﬁd_node
->prev;

336 i‡(
ﬁd_node
->
¥ev
)

337 
ﬁd_node
->
¥ev
->
√xt
 = 
√w_node
;

338 
ﬁd_node
->
¥ev
 = 
√w_node
;

340 i‡(
quickli°
->
hód
 =
ﬁd_node
)

341 
quickli°
->
hód
 = 
√w_node
;

344 i‡(
quickli°
->
Àn
 == 0) {

345 
quickli°
->
hód
 = quickli°->
èû
 = 
√w_node
;

348 i‡(
ﬁd_node
)

349 
	`quickli°Com¥ess
(
quickli°
, 
ﬁd_node
);

351 
quickli°
->
Àn
++;

352 
	}
}

355 
REDIS_STATIC
 
	$_quickli°In£πNodeBef‹e
(
quickli°
 *quicklist,

356 
quickli°Node
 *
ﬁd_node
,

357 
quickli°Node
 *
√w_node
) {

358 
	`__quickli°In£πNode
(
quickli°
, 
ﬁd_node
, 
√w_node
, 0);

359 
	}
}

361 
REDIS_STATIC
 
	$_quickli°In£πNodeA·î
(
quickli°
 *quicklist,

362 
quickli°Node
 *
ﬁd_node
,

363 
quickli°Node
 *
√w_node
) {

364 
	`__quickli°In£πNode
(
quickli°
, 
ﬁd_node
, 
√w_node
, 1);

365 
	}
}

367 
REDIS_STATIC
 

368 
	$_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(c⁄° 
size_t
 
sz
,

369 c⁄° 
fûl
) {

370 i‡(
fûl
 >= 0)

373 
size_t
 
off£t
 = (-
fûl
) - 1;

374 i‡(
off£t
 < ((
›timiz©i⁄_Àvñ
) / (*optimization_level))) {

375 i‡(
sz
 <
›timiz©i⁄_Àvñ
[
off£t
]) {

383 
	}
}

385 
	#sizeMìtsSa„tyLimô
(
sz
Ë((szË<
SIZE_SAFETY_LIMIT
)

	)

387 
REDIS_STATIC
 
	$_quickli°NodeAŒowIn£π
(c⁄° 
quickli°Node
 *
node
,

388 c⁄° 
fûl
, c⁄° 
size_t
 
sz
) {

389 i‡(
	`u∆ikñy
(!
node
))

392 
zùli°_ovîhód
;

394 i‡(
sz
 < 254)

395 
zùli°_ovîhód
 = 1;

397 
zùli°_ovîhód
 = 5;

400 i‡(
sz
 < 64)

401 
zùli°_ovîhód
 += 1;

402 i‡(
	`likñy
(
sz
 < 16384))

403 
zùli°_ovîhód
 += 2;

405 
zùli°_ovîhód
 += 5;

408 
√w_sz
 = 
node
->
sz
 + sz + 
zùli°_ovîhód
;

409 i‡(
	`likñy
(
	`_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(
√w_sz
, 
fûl
)))

411 i‡(!
	`sizeMìtsSa„tyLimô
(
√w_sz
))

413 i‡(()
node
->
cou¡
 < 
fûl
)

417 
	}
}

419 
REDIS_STATIC
 
	$_quickli°NodeAŒowMîge
(c⁄° 
quickli°Node
 *
a
,

420 c⁄° 
quickli°Node
 *
b
,

421 c⁄° 
fûl
) {

422 i‡(!
a
 || !
b
)

427 
mîge_sz
 = 
a
->
sz
 + 
b
->sz - 11;

428 i‡(
	`likñy
(
	`_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(
mîge_sz
, 
fûl
)))

430 i‡(!
	`sizeMìtsSa„tyLimô
(
mîge_sz
))

432 i‡(()(
a
->
cou¡
 + 
b
->cou¡Ë<
fûl
)

436 
	}
}

438 
	#quickli°NodeUpd©eSz
(
node
) \

440 (
node
)->
sz
 = 
	`zùli°BlobLí
(“ode)->
zl
); \

441 } 0)

	)

447 
	$quickli°PushHód
(
quickli°
 *quickli°, *
vÆue
, 
size_t
 
sz
) {

448 
quickli°Node
 *
‹ig_hód
 = 
quickli°
->
hód
;

449 i‡(
	`likñy
(

450 
	`_quickli°NodeAŒowIn£π
(
quickli°
->
hód
, quickli°->
fûl
, 
sz
))) {

451 
quickli°
->
hód
->
zl
 =

452 
	`zùli°Push
(
quickli°
->
hód
->
zl
, 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

453 
	`quickli°NodeUpd©eSz
(
quickli°
->
hód
);

455 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

456 
node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

458 
	`quickli°NodeUpd©eSz
(
node
);

459 
	`_quickli°In£πNodeBef‹e
(
quickli°
, quickli°->
hód
, 
node
);

461 
quickli°
->
cou¡
++;

462 
quickli°
->
hód
->
cou¡
++;

463  (
‹ig_hód
 !
quickli°
->
hód
);

464 
	}
}

470 
	$quickli°PushTaû
(
quickli°
 *quickli°, *
vÆue
, 
size_t
 
sz
) {

471 
quickli°Node
 *
‹ig_èû
 = 
quickli°
->
èû
;

472 i‡(
	`likñy
(

473 
	`_quickli°NodeAŒowIn£π
(
quickli°
->
èû
, quickli°->
fûl
, 
sz
))) {

474 
quickli°
->
èû
->
zl
 =

475 
	`zùli°Push
(
quickli°
->
èû
->
zl
, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

476 
	`quickli°NodeUpd©eSz
(
quickli°
->
èû
);

478 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

479 
node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

481 
	`quickli°NodeUpd©eSz
(
node
);

482 
	`_quickli°In£πNodeA·î
(
quickli°
, quickli°->
èû
, 
node
);

484 
quickli°
->
cou¡
++;

485 
quickli°
->
èû
->
cou¡
++;

486  (
‹ig_èû
 !
quickli°
->
èû
);

487 
	}
}

492 
	$quickli°AµídZùli°
(
quickli°
 *quickli°, *
zl
) {

493 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

495 
node
->
zl
 = zl;

496 
node
->
cou¡
 = 
	`zùli°Lí
“ode->
zl
);

497 
node
->
sz
 = 
	`zùli°BlobLí
(
zl
);

499 
	`_quickli°In£πNodeA·î
(
quickli°
, quickli°->
èû
, 
node
);

500 
quickli°
->
cou¡
 +
node
->count;

501 
	}
}

509 
quickli°
 *
	$quickli°AµídVÆuesFromZùli°
(
quickli°
 *quicklist,

510 *
zl
) {

511 *
vÆue
;

512 
sz
;

513 
l⁄gvÆ
;

514 
l⁄g°r
[32] = {0};

516 *
p
 = 
	`zùli°Index
(
zl
, 0);

517 
	`zùli°Gë
(
p
, &
vÆue
, &
sz
, &
l⁄gvÆ
)) {

518 i‡(!
vÆue
) {

520 
sz
 = 
	`Œ2°rög
(
l⁄g°r
, ÷⁄g°r), 
l⁄gvÆ
);

521 
vÆue
 = (*)
l⁄g°r
;

523 
	`quickli°PushTaû
(
quickli°
, 
vÆue
, 
sz
);

524 
p
 = 
	`zùli°Next
(
zl
,Ö);

526 
	`d‰ì
(
zl
);

527  
quickli°
;

528 
	}
}

533 
quickli°
 *
	$quickli°Cª©eFromZùli°
(
fûl
, 
com¥ess
,

534 *
zl
) {

535  
	`quickli°AµídVÆuesFromZùli°
(
	`quickli°New
(
fûl
, 
com¥ess
), 
zl
);

536 
	}
}

538 
	#quickli°DñëeIfEm±y
(
ql
, 
n
) \

540 i‡((
n
)->
cou¡
 == 0) { \

541 
	`__quickli°DñNode
((
ql
), (
n
)); \

542 (
n
Ë
NULL
; \

544 } 0)

	)

546 
REDIS_STATIC
 
	$__quickli°DñNode
(
quickli°
 *quicklist,

547 
quickli°Node
 *
node
) {

548 i‡(
node
->
√xt
)

549 
node
->
√xt
->
¥ev
 =Çode->prev;

550 i‡(
node
->
¥ev
)

551 
node
->
¥ev
->
√xt
 =Çode->next;

553 i‡(
node
 =
quickli°
->
èû
) {

554 
quickli°
->
èû
 = 
node
->
¥ev
;

557 i‡(
node
 =
quickli°
->
hód
) {

558 
quickli°
->
hód
 = 
node
->
√xt
;

563 
	`__quickli°Com¥ess
(
quickli°
, 
NULL
);

565 
quickli°
->
cou¡
 -
node
->count;

567 
	`d‰ì
(
node
->
zl
);

568 
	`d‰ì
(
node
);

569 
quickli°
->
Àn
--;

570 
	}
}

580 
REDIS_STATIC
 
	$quickli°DñIndex
(
quickli°
 *quickli°, 
quickli°Node
 *
node
,

581 **
p
) {

582 
g⁄e
 = 0;

584 
node
->
zl
 = 
	`zùli°Dñëe
“ode->zl, 
p
);

585 
node
->
cou¡
--;

586 i‡(
node
->
cou¡
 == 0) {

587 
g⁄e
 = 1;

588 
	`__quickli°DñNode
(
quickli°
, 
node
);

590 
	`quickli°NodeUpd©eSz
(
node
);

592 
quickli°
->
cou¡
--;

594  
g⁄e
 ? 1 : 0;

595 
	}
}

601 
	$quickli°DñE¡ry
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
) {

602 
quickli°Node
 *
¥ev
 = 
íåy
->
node
->prev;

603 
quickli°Node
 *
√xt
 = 
íåy
->
node
->next;

604 
dñëed_node
 = 
	`quickli°DñIndex
((
quickli°
 *)
íåy
->quicklist,

605 
íåy
->
node
, &íåy->
zi
);

608 
ôî
->
zi
 = 
NULL
;

611 i‡(
dñëed_node
) {

612 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

613 
ôî
->
cuºít
 = 
√xt
;

614 
ôî
->
off£t
 = 0;

615 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

616 
ôî
->
cuºít
 = 
¥ev
;

617 
ôî
->
off£t
 = -1;

628 
	}
}

634 
	$quickli°Rïœ˚AtIndex
(
quickli°
 *quickli°, 
ödex
, *
d©a
,

635 
sz
) {

636 
quickli°E¡ry
 
íåy
;

637 i‡(
	`likñy
(
	`quickli°Index
(
quickli°
, 
ödex
, &
íåy
))) {

639 
íåy
.
node
->
zl
 = 
	`zùli°Dñëe
”¡ry.node->zl, &íåy.
zi
);

640 
íåy
.
node
->
zl
 = 
	`zùli°In£π
”¡ry.node->zl,É¡ry.
zi
, 
d©a
, 
sz
);

641 
	`quickli°Com¥ess
(
quickli°
, 
íåy
.
node
);

646 
	}
}

661 
REDIS_STATIC
 
quickli°Node
 *
	$_quickli°Zùli°Mîge
(
quickli°
 *quicklist,

662 
quickli°Node
 *
a
,

663 
quickli°Node
 *
b
) {

664 
	`D
("Reque°ed mîgê◊,bË(%u, %u)", 
a
->
cou¡
, 
b
->count);

666 
	`quickli°Decom¥essNode
(
a
);

667 
	`quickli°Decom¥essNode
(
b
);

668 i‡((
	`zùli°Mîge
(&
a
->
zl
, &
b
->zl))) {

670 
quickli°Node
 *
kìp
 = 
NULL
, *
nokìp
 = NULL;

671 i‡(!
a
->
zl
) {

672 
nokìp
 = 
a
;

673 
kìp
 = 
b
;

674 } i‡(!
b
->
zl
) {

675 
nokìp
 = 
b
;

676 
kìp
 = 
a
;

678 
kìp
->
cou¡
 = 
	`zùli°Lí
(kìp->
zl
);

679 
	`quickli°NodeUpd©eSz
(
kìp
);

681 
nokìp
->
cou¡
 = 0;

682 
	`__quickli°DñNode
(
quickli°
, 
nokìp
);

683 
	`quickli°Com¥ess
(
quickli°
, 
kìp
);

684  
kìp
;

687  
NULL
;

689 
	}
}

699 
REDIS_STATIC
 
	$_quickli°MîgeNodes
(
quickli°
 *quicklist,

700 
quickli°Node
 *
˚¡î
) {

701 
fûl
 = 
quickli°
->fill;

702 
quickli°Node
 *
¥ev
, *
¥ev_¥ev
, *
√xt
, *
√xt_√xt
, *
èrgë
;

703 
¥ev
 = 
¥ev_¥ev
 = 
√xt
 = 
√xt_√xt
 = 
èrgë
 = 
NULL
;

705 i‡(
˚¡î
->
¥ev
) {

706 
¥ev
 = 
˚¡î
->prev;

707 i‡(
˚¡î
->
¥ev
->prev)

708 
¥ev_¥ev
 = 
˚¡î
->
¥ev
->prev;

711 i‡(
˚¡î
->
√xt
) {

712 
√xt
 = 
˚¡î
->next;

713 i‡(
˚¡î
->
√xt
->next)

714 
√xt_√xt
 = 
˚¡î
->
√xt
->next;

718 i‡(
	`_quickli°NodeAŒowMîge
(
¥ev
, 
¥ev_¥ev
, 
fûl
)) {

719 
	`_quickli°Zùli°Mîge
(
quickli°
, 
¥ev_¥ev
, 
¥ev
);

720 
¥ev_¥ev
 = 
¥ev
 = 
NULL
;

724 i‡(
	`_quickli°NodeAŒowMîge
(
√xt
, 
√xt_√xt
, 
fûl
)) {

725 
	`_quickli°Zùli°Mîge
(
quickli°
, 
√xt
, 
√xt_√xt
);

726 
√xt
 = 
√xt_√xt
 = 
NULL
;

730 i‡(
	`_quickli°NodeAŒowMîge
(
˚¡î
, cíãr->
¥ev
, 
fûl
)) {

731 
èrgë
 = 
	`_quickli°Zùli°Mîge
(
quickli°
, 
˚¡î
->
¥ev
, center);

732 
˚¡î
 = 
NULL
;

735 
èrgë
 = 
˚¡î
;

739 i‡(
	`_quickli°NodeAŒowMîge
(
èrgë
,Å¨gë->
√xt
, 
fûl
)) {

740 
	`_quickli°Zùli°Mîge
(
quickli°
, 
èrgë
,Å¨gë->
√xt
);

742 
	}
}

763 
REDIS_STATIC
 
quickli°Node
 *
	$_quickli°S∂ôNode
(
quickli°Node
 *
node
, 
off£t
,

764 
a·î
) {

765 
size_t
 
zl_sz
 = 
node
->
sz
;

767 
quickli°Node
 *
√w_node
 = 
	`quickli°Cª©eNode
();

768 
√w_node
->
zl
 = 
	`dÆloc
(
zl_sz
);

771 
	`mem˝y
(
√w_node
->
zl
, 
node
->zl, 
zl_sz
);

774 
‹ig_°¨t
 = 
a·î
 ? 
off£t
 + 1 : 0;

775 
‹ig_exã¡
 = 
a·î
 ? -1 : 
off£t
;

776 
√w_°¨t
 = 
a·î
 ? 0 : 
off£t
;

777 
√w_exã¡
 = 
a·î
 ? 
off£t
 + 1 : -1;

779 
	`D
("A·î %d (%d);Ñ™ges: [%d, %d], [%d, %d]", 
a·î
, 
off£t
, 
‹ig_°¨t
,

780 
‹ig_exã¡
, 
√w_°¨t
, 
√w_exã¡
);

782 
node
->
zl
 = 
	`zùli°DñëeR™ge
“ode->zl, 
‹ig_°¨t
, 
‹ig_exã¡
);

783 
node
->
cou¡
 = 
	`zùli°Lí
“ode->
zl
);

784 
	`quickli°NodeUpd©eSz
(
node
);

786 
√w_node
->
zl
 = 
	`zùli°DñëeR™ge
“ew_node->zl, 
√w_°¨t
, 
√w_exã¡
);

787 
√w_node
->
cou¡
 = 
	`zùli°Lí
“ew_node->
zl
);

788 
	`quickli°NodeUpd©eSz
(
√w_node
);

790 
	`D
("A·î s∂ôÜígths: orig (%d),Çew (%d)", 
node
->
cou¡
, 
√w_node
->count);

791  
√w_node
;

792 
	}
}

798 
REDIS_STATIC
 
	$_quickli°In£π
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

799 *
vÆue
, c⁄° 
size_t
 
sz
, 
a·î
) {

800 
fuŒ
 = 0, 
©_èû
 = 0, 
©_hód
 = 0, 
fuŒ_√xt
 = 0, 
fuŒ_¥ev
 = 0;

801 
fûl
 = 
quickli°
->fill;

802 
quickli°Node
 *
node
 = 
íåy
->node;

803 
quickli°Node
 *
√w_node
 = 
NULL
;

805 i‡(!
node
) {

807 
	`D
("NoÇode given!");

808 
√w_node
 = 
	`quickli°Cª©eNode
();

809 
√w_node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

810 
	`__quickli°In£πNode
(
quickli°
, 
NULL
, 
√w_node
, 
a·î
);

811 
√w_node
->
cou¡
++;

812 
quickli°
->
cou¡
++;

817 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
, 
fûl
, 
sz
)) {

818 
	`D
("CurrentÇode is full with count %d withÑequested fill %lu",

819 
node
->
cou¡
, 
fûl
);

820 
fuŒ
 = 1;

823 i‡(
a·î
 && (
íåy
->
off£t
 =
node
->
cou¡
)) {

824 
	`D
("At Tail of current ziplist");

825 
©_èû
 = 1;

826 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
->
√xt
, 
fûl
, 
sz
)) {

827 
	`D
("NextÇode is fullÅoo.");

828 
fuŒ_√xt
 = 1;

832 i‡(!
a·î
 && (
íåy
->
off£t
 == 0)) {

833 
	`D
("At Head");

834 
©_hód
 = 1;

835 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
->
¥ev
, 
fûl
, 
sz
)) {

836 
	`D
("PrevÇode is fullÅoo.");

837 
fuŒ_¥ev
 = 1;

842 i‡(!
fuŒ
 && 
a·î
) {

843 
	`D
("Not full, insertingáfter currentÖosition.");

844 
	`quickli°Decom¥essNodeF‹U£
(
node
);

845 *
√xt
 = 
	`zùli°Next
(
node
->
zl
, 
íåy
->
zi
);

846 i‡(
√xt
 =
NULL
) {

847 
node
->
zl
 = 
	`zùli°Push
“ode->zl, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

849 
node
->
zl
 = 
	`zùli°In£π
“ode->zl, 
√xt
, 
vÆue
, 
sz
);

851 
node
->
cou¡
++;

852 
	`quickli°NodeUpd©eSz
(
node
);

853 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

854 } i‡(!
fuŒ
 && !
a·î
) {

855 
	`D
("Not full, inserting before currentÖosition.");

856 
	`quickli°Decom¥essNodeF‹U£
(
node
);

857 
node
->
zl
 = 
	`zùli°In£π
“ode->zl, 
íåy
->
zi
, 
vÆue
, 
sz
);

858 
node
->
cou¡
++;

859 
	`quickli°NodeUpd©eSz
(
node
);

860 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

861 } i‡(
fuŒ
 && 
©_èû
 && 
node
->
√xt
 && !
fuŒ_√xt
 && 
a·î
) {

864 
	`D
("FullándÅail, butÇext isn't full; insertingÇextÇode head");

865 
√w_node
 = 
node
->
√xt
;

866 
	`quickli°Decom¥essNodeF‹U£
(
√w_node
);

867 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

868 
√w_node
->
cou¡
++;

869 
	`quickli°NodeUpd©eSz
(
√w_node
);

870 
	`quickli°Recom¥essO∆y
(
quickli°
, 
√w_node
);

871 } i‡(
fuŒ
 && 
©_hód
 && 
node
->
¥ev
 && !
fuŒ_¥ev
 && !
a·î
) {

874 
	`D
("Fullánd head, butÖrev isn't full, insertingÖrevÇodeÅail");

875 
√w_node
 = 
node
->
¥ev
;

876 
	`quickli°Decom¥essNodeF‹U£
(
√w_node
);

877 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

878 
√w_node
->
cou¡
++;

879 
	`quickli°NodeUpd©eSz
(
√w_node
);

880 
	`quickli°Recom¥essO∆y
(
quickli°
, 
√w_node
);

881 } i‡(
fuŒ
 && ((
©_èû
 && 
node
->
√xt
 && 
fuŒ_√xt
 && 
a·î
) ||

882 (
©_hód
 && 
node
->
¥ev
 && 
fuŒ_¥ev
 && !
a·î
))) {

885 
	`D
("\tprovisioningÇewÇode...");

886 
√w_node
 = 
	`quickli°Cª©eNode
();

887 
√w_node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

888 
√w_node
->
cou¡
++;

889 
	`quickli°NodeUpd©eSz
(
√w_node
);

890 
	`__quickli°In£πNode
(
quickli°
, 
node
, 
√w_node
, 
a·î
);

891 } i‡(
fuŒ
) {

894 
	`D
("\tsplittingÇode...");

895 
	`quickli°Decom¥essNodeF‹U£
(
node
);

896 
√w_node
 = 
	`_quickli°S∂ôNode
(
node
, 
íåy
->
off£t
, 
a·î
);

897 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
,

898 
a·î
 ? 
ZIPLIST_HEAD
 : 
ZIPLIST_TAIL
);

899 
√w_node
->
cou¡
++;

900 
	`quickli°NodeUpd©eSz
(
√w_node
);

901 
	`__quickli°In£πNode
(
quickli°
, 
node
, 
√w_node
, 
a·î
);

902 
	`_quickli°MîgeNodes
(
quickli°
, 
node
);

905 
quickli°
->
cou¡
++;

906 
	}
}

908 
	$quickli°In£πBef‹e
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

909 *
vÆue
, c⁄° 
size_t
 
sz
) {

910 
	`_quickli°In£π
(
quickli°
, 
íåy
, 
vÆue
, 
sz
, 0);

911 
	}
}

913 
	$quickli°In£πA·î
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

914 *
vÆue
, c⁄° 
size_t
 
sz
) {

915 
	`_quickli°In£π
(
quickli°
, 
íåy
, 
vÆue
, 
sz
, 1);

916 
	}
}

924 
	$quickli°DñR™ge
(
quickli°
 *quickli°, c⁄° 
°¨t
,

925 c⁄° 
cou¡
) {

926 i‡(
cou¡
 <= 0)

929 
exã¡
 = 
cou¡
;

931 i‡(
°¨t
 >0 && 
exã¡
 > (
quickli°
->
cou¡
 - start)) {

933 
exã¡
 = 
quickli°
->
cou¡
 - 
°¨t
;

934 } i‡(
°¨t
 < 0 && 
exã¡
 > ()(-start)) {

936 
exã¡
 = -
°¨t
;

939 
quickli°E¡ry
 
íåy
;

940 i‡(!
	`quickli°Index
(
quickli°
, 
°¨t
, &
íåy
))

943 
	`D
("Quickli° dñëêªque° f‹ sèπ %ld, cou¡ %ld,Éxã¡: %ld", 
°¨t
,

944 
cou¡
, 
exã¡
);

945 
quickli°Node
 *
node
 = 
íåy
.node;

948 
exã¡
) {

949 
quickli°Node
 *
√xt
 = 
node
->next;

951 
dñ
;

952 
dñëe_ítúe_node
 = 0;

953 i‡(
íåy
.
off£t
 =0 && 
exã¡
 >
node
->
cou¡
) {

956 
dñëe_ítúe_node
 = 1;

957 
dñ
 = 
node
->
cou¡
;

958 } i‡(
íåy
.
off£t
 >0 && 
exã¡
 >
node
->
cou¡
) {

961 
dñ
 = 
node
->
cou¡
 - 
íåy
.
off£t
;

962 } i‡(
íåy
.
off£t
 < 0) {

968 
dñ
 = -
íåy
.
off£t
;

973 i‡(
dñ
 > 
exã¡
)

974 
dñ
 = 
exã¡
;

978 
dñ
 = 
exã¡
;

981 
	`D
("[%ld]:áskingÅo del: %ld because offset: %d; (ENTIRE NODE: %d), "

983 
exã¡
, 
dñ
, 
íåy
.
off£t
, 
dñëe_ítúe_node
, 
node
->
cou¡
);

985 i‡(
dñëe_ítúe_node
) {

986 
	`__quickli°DñNode
(
quickli°
, 
node
);

988 
	`quickli°Decom¥essNodeF‹U£
(
node
);

989 
node
->
zl
 = 
	`zùli°DñëeR™ge
“ode->zl, 
íåy
.
off£t
, 
dñ
);

990 
	`quickli°NodeUpd©eSz
(
node
);

991 
node
->
cou¡
 -
dñ
;

992 
quickli°
->
cou¡
 -
dñ
;

993 
	`quickli°DñëeIfEm±y
(
quickli°
, 
node
);

994 i‡(
node
)

995 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

998 
exã¡
 -
dñ
;

1000 
node
 = 
√xt
;

1002 
íåy
.
off£t
 = 0;

1005 
	}
}

1008 
	$quickli°Com∑ª
(*
p1
, *
p2
, 
p2_Àn
) {

1009  
	`zùli°Com∑ª
(
p1
, 
p2
, 
p2_Àn
);

1010 
	}
}

1014 
quickli°Iãr
 *
	$quickli°GëIãøt‹
(c⁄° 
quickli°
 *quickli°, 
dúe˘i⁄
) {

1015 
quickli°Iãr
 *
ôî
;

1017 
ôî
 = 
	`dÆloc
((*iter));

1019 i‡(
dúe˘i⁄
 =
AL_START_HEAD
) {

1020 
ôî
->
cuºít
 = 
quickli°
->
hód
;

1021 
ôî
->
off£t
 = 0;

1022 } i‡(
dúe˘i⁄
 =
AL_START_TAIL
) {

1023 
ôî
->
cuºít
 = 
quickli°
->
èû
;

1024 
ôî
->
off£t
 = -1;

1027 
ôî
->
dúe˘i⁄
 = direction;

1028 
ôî
->
quickli°
 = quicklist;

1030 
ôî
->
zi
 = 
NULL
;

1032  
ôî
;

1033 
	}
}

1037 
quickli°Iãr
 *
	$quickli°GëIãøt‹AtIdx
(c⁄° 
quickli°
 *quicklist,

1038 c⁄° 
dúe˘i⁄
,

1039 c⁄° 
idx
) {

1040 
quickli°E¡ry
 
íåy
;

1042 i‡(
	`quickli°Index
(
quickli°
, 
idx
, &
íåy
)) {

1043 
quickli°Iãr
 *
ba£
 = 
	`quickli°GëIãøt‹
(
quickli°
, 
dúe˘i⁄
);

1044 
ba£
->
zi
 = 
NULL
;

1045 
ba£
->
cuºít
 = 
íåy
.
node
;

1046 
ba£
->
off£t
 = 
íåy
.offset;

1047  
ba£
;

1049  
NULL
;

1051 
	}
}

1055 
	$quickli°Rñó£Iãøt‹
(
quickli°Iãr
 *
ôî
) {

1056 i‡(
ôî
->
cuºít
)

1057 
	`quickli°Com¥ess
(
ôî
->
quickli°
, iãr->
cuºít
);

1059 
	`d‰ì
(
ôî
);

1060 
	}
}

1083 
	$quickli°Next
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
) {

1084 
	`öôE¡ry
(
íåy
);

1086 i‡(!
ôî
) {

1087 
	`D
("Returning becauseÇo iter!");

1091 
íåy
->
quickli°
 = 
ôî
->quicklist;

1092 
íåy
->
node
 = 
ôî
->
cuºít
;

1094 i‡(!
ôî
->
cuºít
) {

1095 
	`D
("Returning because currentÇode is NULL")

1099 *(*
√xtFn
)(*, *Ë
NULL
;

1100 
off£t_upd©e
 = 0;

1102 i‡(!
ôî
->
zi
) {

1104 
	`quickli°Decom¥essNodeF‹U£
(
ôî
->
cuºít
);

1105 
ôî
->
zi
 = 
	`zùli°Index
(ôî->
cuºít
->
zl
, iãr->
off£t
);

1108 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

1109 
√xtFn
 = 
zùli°Next
;

1110 
off£t_upd©e
 = 1;

1111 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

1112 
√xtFn
 = 
zùli°Pªv
;

1113 
off£t_upd©e
 = -1;

1115 
ôî
->
zi
 = 
	`√xtFn
(ôî->
cuºít
->
zl
, iter->zi);

1116 
ôî
->
off£t
 +
off£t_upd©e
;

1119 
íåy
->
zi
 = 
ôî
->zi;

1120 
íåy
->
off£t
 = 
ôî
->offset;

1122 i‡(
ôî
->
zi
) {

1124 
	`zùli°Gë
(
íåy
->
zi
, &íåy->
vÆue
, &íåy->
sz
, &íåy->
l⁄gvÆ
);

1129 
	`quickli°Com¥ess
(
ôî
->
quickli°
, iãr->
cuºít
);

1130 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

1132 
	`D
("JumpingÅo start ofÇextÇode");

1133 
ôî
->
cuºít
 = iãr->cuºít->
√xt
;

1134 
ôî
->
off£t
 = 0;

1135 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

1137 
	`D
("JumpingÅoÉnd ofÖreviousÇode");

1138 
ôî
->
cuºít
 = iãr->cuºít->
¥ev
;

1139 
ôî
->
off£t
 = -1;

1141 
ôî
->
zi
 = 
NULL
;

1142  
	`quickli°Next
(
ôî
, 
íåy
);

1144 
	}
}

1152 
quickli°
 *
	$quickli°Dup
(
quickli°
 *
‹ig
) {

1153 
quickli°
 *
c›y
;

1154 
quickli°Node
 *
cuºít
;

1156 
c›y
 = 
	`quickli°New
(
‹ig
->
fûl
, orig->
com¥ess
);

1158 
cuºít
 = 
‹ig
->
hód
; current;

1159 
cuºít
 = cuºít->
√xt
) {

1160 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

1162 i‡(
node
->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) {

1163 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

1164 
size_t
 
lzf_sz
 = (*
lzf
Ë+Üzf->
sz
;

1165 
node
->
zl
 = 
	`dÆloc
(
lzf_sz
);

1166 
	`mem˝y
(
node
->
zl
, 
cuºít
->zl, 
lzf_sz
);

1167 } i‡(
node
->
ícodög
 =
QUICKLIST_NODE_ENCODING_RAW
) {

1168 
node
->
zl
 = 
	`dÆloc
(
cuºít
->
sz
);

1169 
	`mem˝y
(
node
->
zl
, 
cuºít
->zl, cuºít->
sz
);

1172 
node
->
cou¡
 = 
cuºít
->count;

1173 
c›y
->
cou¡
 +
node
->count;

1174 
node
->
sz
 = 
cuºít
->sz;

1175 
node
->
ícodög
 = 
cuºít
->encoding;

1177 
	`_quickli°In£πNodeA·î
(
c›y
, c›y->
èû
, 
node
);

1181  
c›y
;

1182 
	}
}

1192 
	$quickli°Index
(c⁄° 
quickli°
 *quickli°, c⁄° 
idx
,

1193 
quickli°E¡ry
 *
íåy
) {

1194 
quickli°Node
 *
n
;

1195 
accum
 = 0;

1196 
ödex
;

1197 
f‹w¨d
 = 
idx
 < 0 ? 0 : 1;

1199 
	`öôE¡ry
(
íåy
);

1200 
íåy
->
quickli°
 = quicklist;

1202 i‡(!
f‹w¨d
) {

1203 
ödex
 = (-
idx
) - 1;

1204 
n
 = 
quickli°
->
èû
;

1206 
ödex
 = 
idx
;

1207 
n
 = 
quickli°
->
hód
;

1210 i‡(
ödex
 >
quickli°
->
cou¡
)

1213 
	`likñy
(
n
)) {

1214 i‡((
accum
 + 
n
->
cou¡
Ë> 
ödex
) {

1217 
	`D
("Skùpög ovî (%pË%uáàaccum %Œd", (*)
n
,Ç->
cou¡
,

1218 
accum
);

1219 
accum
 +
n
->
cou¡
;

1220 
n
 = 
f‹w¨d
 ?Ç->
√xt
 :Ç->
¥ev
;

1224 i‡(!
n
)

1227 
	`D
("FoundÇode: %∞©áccum %Œu, idx %Œu, sub+ %Œu, sub- %Œu", (*)
n
,

1228 
accum
, 
ödex
, index -áccum, (-index) - 1 +áccum);

1230 
íåy
->
node
 = 
n
;

1231 i‡(
f‹w¨d
) {

1233 
íåy
->
off£t
 = 
ödex
 - 
accum
;

1237 
íåy
->
off£t
 = (-
ödex
Ë- 1 + 
accum
;

1240 
	`quickli°Decom¥essNodeF‹U£
(
íåy
->
node
);

1241 
íåy
->
zi
 = 
	`zùli°Index
”¡ry->
node
->
zl
,É¡ry->
off£t
);

1242 
	`zùli°Gë
(
íåy
->
zi
, &íåy->
vÆue
, &íåy->
sz
, &íåy->
l⁄gvÆ
);

1246 
	}
}

1249 
	$quickli°RŸ©e
(
quickli°
 *quicklist) {

1250 i‡(
quickli°
->
cou¡
 <= 1)

1254 *
p
 = 
	`zùli°Index
(
quickli°
->
èû
->
zl
, -1);

1255 *
vÆue
;

1256 
l⁄gvÆ
;

1257 
sz
;

1258 
l⁄g°r
[32] = {0};

1259 
	`zùli°Gë
(
p
, &
vÆue
, &
sz
, &
l⁄gvÆ
);

1262 i‡(!
vÆue
) {

1264 
sz
 = 
	`Œ2°rög
(
l⁄g°r
, ÷⁄g°r), 
l⁄gvÆ
);

1265 
vÆue
 = (*)
l⁄g°r
;

1269 
	`quickli°PushHód
(
quickli°
, 
vÆue
, 
sz
);

1274 i‡(
quickli°
->
Àn
 == 1) {

1275 
p
 = 
	`zùli°Index
(
quickli°
->
èû
->
zl
, -1);

1279 
	`quickli°DñIndex
(
quickli°
, quickli°->
èû
, &
p
);

1280 
	}
}

1291 
	$quickli°P›Cu°om
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

1292 *
sz
, *
svÆ
,

1293 *(*
ßvî
)(*
d©a
, 
sz
)) {

1294 *
p
;

1295 *
v°r
;

1296 
vÀn
;

1297 
vl⁄g
;

1298 
pos
 = (
whîe
 =
QUICKLIST_HEAD
) ? 0 : -1;

1300 i‡(
quickli°
->
cou¡
 == 0)

1303 i‡(
d©a
)

1304 *
d©a
 = 
NULL
;

1305 i‡(
sz
)

1306 *
sz
 = 0;

1307 i‡(
svÆ
)

1308 *
svÆ
 = -123456789;

1310 
quickli°Node
 *
node
;

1311 i‡(
whîe
 =
QUICKLIST_HEAD
 && 
quickli°
->
hód
) {

1312 
node
 = 
quickli°
->
hód
;

1313 } i‡(
whîe
 =
QUICKLIST_TAIL
 && 
quickli°
->
èû
) {

1314 
node
 = 
quickli°
->
èû
;

1319 
p
 = 
	`zùli°Index
(
node
->
zl
, 
pos
);

1320 i‡(
	`zùli°Gë
(
p
, &
v°r
, &
vÀn
, &
vl⁄g
)) {

1321 i‡(
v°r
) {

1322 i‡(
d©a
)

1323 *
d©a
 = 
	`ßvî
(
v°r
, 
vÀn
);

1324 i‡(
sz
)

1325 *
sz
 = 
vÀn
;

1327 i‡(
d©a
)

1328 *
d©a
 = 
NULL
;

1329 i‡(
svÆ
)

1330 *
svÆ
 = 
vl⁄g
;

1332 
	`quickli°DñIndex
(
quickli°
, 
node
, &
p
);

1336 
	}
}

1339 
REDIS_STATIC
 *
	$_quickli°Savî
(*
d©a
, 
sz
) {

1340 *
v°r
;

1341 i‡(
d©a
) {

1342 
v°r
 = 
	`dÆloc
(
sz
);

1343 
	`mem˝y
(
v°r
, 
d©a
, 
sz
);

1344  
v°r
;

1346  
NULL
;

1347 
	}
}

1352 
	$quickli°P›
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

1353 *
sz
, *
¶⁄g
) {

1354 *
v°r
;

1355 
vÀn
;

1356 
vl⁄g
;

1357 i‡(
quickli°
->
cou¡
 == 0)

1359 
ªt
 = 
	`quickli°P›Cu°om
(
quickli°
, 
whîe
, &
v°r
, &
vÀn
, &
vl⁄g
,

1360 
_quickli°Savî
);

1361 i‡(
d©a
)

1362 *
d©a
 = 
v°r
;

1363 i‡(
¶⁄g
)

1364 *
¶⁄g
 = 
vl⁄g
;

1365 i‡(
sz
)

1366 *
sz
 = 
vÀn
;

1367  
ªt
;

1368 
	}
}

1371 
	$quickli°Push
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
,

1372 
whîe
) {

1373 i‡(
whîe
 =
QUICKLIST_HEAD
) {

1374 
	`quickli°PushHód
(
quickli°
, 
vÆue
, 
sz
);

1375 } i‡(
whîe
 =
QUICKLIST_TAIL
) {

1376 
	`quickli°PushTaû
(
quickli°
, 
vÆue
, 
sz
);

1378 
	}
}

	@src/vr_quicklist.c

1 
	~<°rög.h
>

3 
	~<vr_c‹e.h
>

5 #i‡
deföed
(
REDIS_TEST
Ë|| deföed(
REDIS_TEST_VERBOSE
)

6 
	~<°dio.h
>

9 #i‚de‡
REDIS_STATIC


10 
	#REDIS_STATIC
 

	)

14 c⁄° 
size_t
 
	g›timiz©i⁄_Àvñ
[] = {4096, 8192, 16384, 32768, 65536};

18 
	#SIZE_SAFETY_LIMIT
 8192

	)

21 
	#MIN_COMPRESS_BYTES
 48

	)

26 
	#MIN_COMPRESS_IMPROVE
 8

	)

29 #i‚de‡
REDIS_TEST_VERBOSE


30 
	#D
(...)

	)

32 
	#D
(...) \

34 
	`¥ötf
("%s:%s:%d:\t", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

35 
	`¥ötf
(
__VA_ARGS__
); \

36 
	`¥ötf
("\n"); \

37 } 0);

	)

41 
	#öôE¡ry
(
e
) \

43 (
e
)->
zi
 = (e)->
vÆue
 = 
NULL
; \

44 (
e
)->
l⁄gvÆ
 = -123456789; \

45 (
e
)->
quickli°
 = 
NULL
; \

46 (
e
)->
node
 = 
NULL
; \

47 (
e
)->
off£t
 = 123456789; \

48 (
e
)->
sz
 = 0; \

49 } 0)

	)

51 #i‡
__GNUC__
 >= 3

52 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

53 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

55 
	#likñy
(
x
Ë(x)

	)

56 
	#u∆ikñy
(
x
Ë(x)

	)

61 
quickli°
 *
	$quickli°Cª©e
() {

62 
quickli°
 *quicklist;

64 
quickli°
 = 
	`dÆloc
((*quicklist));

65 
quickli°
->
hód
 = quickli°->
èû
 = 
NULL
;

66 
quickli°
->
Àn
 = 0;

67 
quickli°
->
cou¡
 = 0;

68 
quickli°
->
com¥ess
 = 0;

69 
quickli°
->
fûl
 = -2;

70  
quickli°
;

71 
	}
}

73 
	#COMPRESS_MAX
 (1 << 16)

	)

74 
	$quickli°SëCom¥essDïth
(
quickli°
 *quickli°, 
com¥ess
) {

75 i‡(
com¥ess
 > 
COMPRESS_MAX
) {

76 
com¥ess
 = 
COMPRESS_MAX
;

77 } i‡(
com¥ess
 < 0) {

78 
com¥ess
 = 0;

80 
quickli°
->
com¥ess
 = compress;

81 
	}
}

83 
	#FILL_MAX
 (1 << 15)

	)

84 
	$quickli°SëFûl
(
quickli°
 *quickli°, 
fûl
) {

85 i‡(
fûl
 > 
FILL_MAX
) {

86 
fûl
 = 
FILL_MAX
;

87 } i‡(
fûl
 < -5) {

88 
fûl
 = -5;

90 
quickli°
->
fûl
 = fill;

91 
	}
}

93 
	$quickli°SëO±i⁄s
(
quickli°
 *quickli°, 
fûl
, 
dïth
) {

94 
	`quickli°SëFûl
(
quickli°
, 
fûl
);

95 
	`quickli°SëCom¥essDïth
(
quickli°
, 
dïth
);

96 
	}
}

99 
quickli°
 *
	$quickli°New
(
fûl
, 
com¥ess
) {

100 
quickli°
 *quickli° = 
	`quickli°Cª©e
();

101 
	`quickli°SëO±i⁄s
(
quickli°
, 
fûl
, 
com¥ess
);

102  
quickli°
;

103 
	}
}

105 
REDIS_STATIC
 
quickli°Node
 *
	$quickli°Cª©eNode
() {

106 
quickli°Node
 *
node
;

107 
node
 = 
	`dÆloc
((*node));

108 
node
->
zl
 = 
NULL
;

109 
node
->
cou¡
 = 0;

110 
node
->
sz
 = 0;

111 
node
->
√xt
 =Çode->
¥ev
 = 
NULL
;

112 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_RAW
;

113 
node
->
c⁄èöî
 = 
QUICKLIST_NODE_CONTAINER_ZIPLIST
;

114 
node
->
ªcom¥ess
 = 0;

115  
node
;

116 
	}
}

119 
	$quickli°Cou¡
(
quickli°
 *
ql
Ë{  ql->
cou¡
; 
	}
}

122 
	$quickli°Rñó£
(
quickli°
 *quicklist) {

123 
Àn
;

124 
quickli°Node
 *
cuºít
, *
√xt
;

126 
cuºít
 = 
quickli°
->
hód
;

127 
Àn
 = 
quickli°
->len;

128 
Àn
--) {

129 
√xt
 = 
cuºít
->next;

131 
	`d‰ì
(
cuºít
->
zl
);

132 
quickli°
->
cou¡
 -
cuºít
->count;

134 
	`d‰ì
(
cuºít
);

136 
quickli°
->
Àn
--;

137 
cuºít
 = 
√xt
;

139 
	`d‰ì
(
quickli°
);

140 
	}
}

145 
REDIS_STATIC
 
	$__quickli°Com¥essNode
(
quickli°Node
 *
node
) {

146 #ifde‡
REDIS_TEST


147 
node
->
©ãm±ed_com¥ess
 = 1;

151 i‡(
node
->
sz
 < 
MIN_COMPRESS_BYTES
)

154 
quickli°LZF
 *
lzf
 = 
	`dÆloc
((*lzfË+ 
node
->
sz
);

157 i‡(((
lzf
->
sz
 = 
	`lzf_com¥ess
(
node
->
zl
,Çode->sz,Üzf->
com¥es£d
,

158 
node
->
sz
)) == 0) ||

159 
lzf
->
sz
 + 
MIN_COMPRESS_IMPROVE
 >
node
->sz) {

161 
	`d‰ì
(
lzf
);

164 
lzf
 = 
	`dªÆloc
÷zf, (*lzfË+Üzf->
sz
);

165 
	`d‰ì
(
node
->
zl
);

166 
node
->
zl
 = (*)
lzf
;

167 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_LZF
;

168 
node
->
ªcom¥ess
 = 0;

170 
	}
}

173 
	#quickli°Com¥essNode
(
_node
) \

175 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_RAW
) { \

176 
	`__quickli°Com¥essNode
((
_node
)); \

178 } 0)

	)

182 
REDIS_STATIC
 
	$__quickli°Decom¥essNode
(
quickli°Node
 *
node
) {

183 #ifde‡
REDIS_TEST


184 
node
->
©ãm±ed_com¥ess
 = 0;

187 *
decom¥es£d
 = 
	`dÆloc
(
node
->
sz
);

188 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

189 i‡(
	`lzf_decom¥ess
(
lzf
->
com¥es£d
,Üzf->
sz
, 
decom¥es£d
, 
node
->sz) == 0) {

191 
	`d‰ì
(
decom¥es£d
);

194 
	`d‰ì
(
lzf
);

195 
node
->
zl
 = 
decom¥es£d
;

196 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_RAW
;

198 
	}
}

201 
	#quickli°Decom¥essNode
(
_node
) \

203 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) { \

204 
	`__quickli°Decom¥essNode
((
_node
)); \

206 } 0)

	)

209 
	#quickli°Decom¥essNodeF‹U£
(
_node
) \

211 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) { \

212 
	`__quickli°Decom¥essNode
((
_node
)); \

213 (
_node
)->
ªcom¥ess
 = 1; \

215 } 0)

	)

220 
size_t
 
	$quickli°GëLzf
(c⁄° 
quickli°Node
 *
node
, **
d©a
) {

221 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

222 *
d©a
 = 
lzf
->
com¥es£d
;

223  
lzf
->
sz
;

224 
	}
}

226 
	#quickli°AŒowsCom¥essi⁄
(
_ql
Ë((_ql)->
com¥ess
 !0)

	)

232 
REDIS_STATIC
 
	$__quickli°Com¥ess
(c⁄° 
quickli°
 *quicklist,

233 
quickli°Node
 *
node
) {

236 i‡(!
	`quickli°AŒowsCom¥essi⁄
(
quickli°
) ||

237 
quickli°
->
Àn
 < ()(quickli°->
com¥ess
 * 2))

242 i‡(
quickli°
->
com¥ess
 == 1) {

243 
quickli°Node
 *
h
 = 
quickli°
->
hód
, *
t
 = quickli°->
èû
;

244 
	`quickli°Decom¥essNode
(
h
);

245 
	`quickli°Decom¥essNode
(
t
);

246 i‡(
h
 !
node
 && 
t
 !=Çode)

247 
	`quickli°Com¥essNode
(
node
);

249 } i‡(
quickli°
->
com¥ess
 == 2) {

250 
quickli°Node
 *
h
 = 
quickli°
->
hód
, *
hn
 = h->
√xt
, *
h¬
 = hn->next;

251 
quickli°Node
 *
t
 = 
quickli°
->
èû
, *
ç
 =Å->
¥ev
, *
çp
 =Åp->prev;

252 
	`quickli°Decom¥essNode
(
h
);

253 
	`quickli°Decom¥essNode
(
hn
);

254 
	`quickli°Decom¥essNode
(
t
);

255 
	`quickli°Decom¥essNode
(
ç
);

256 i‡(
h
 !
node
 && 
hn
 !nodê&& 
t
 !nodê&& 
ç
 !=Çode) {

257 
	`quickli°Com¥essNode
(
node
);

259 i‡(
h¬
 !
t
) {

260 
	`quickli°Com¥essNode
(
h¬
);

262 i‡(
çp
 !
h
) {

263 
	`quickli°Com¥essNode
(
çp
);

272 
quickli°Node
 *
f‹w¨d
 = 
quickli°
->
hód
;

273 
quickli°Node
 *
ªvî£
 = 
quickli°
->
èû
;

274 
dïth
 = 0;

275 
ö_dïth
 = 0;

276 
dïth
++ < 
quickli°
->
com¥ess
) {

277 
	`quickli°Decom¥essNode
(
f‹w¨d
);

278 
	`quickli°Decom¥essNode
(
ªvî£
);

280 i‡(
f‹w¨d
 =
node
 || 
ªvî£
 ==Çode)

281 
ö_dïth
 = 1;

283 i‡(
f‹w¨d
 =
ªvî£
)

286 
f‹w¨d
 = f‹w¨d->
√xt
;

287 
ªvî£
 =Ñevî£->
¥ev
;

290 i‡(!
ö_dïth
)

291 
	`quickli°Com¥essNode
(
node
);

293 i‡(
dïth
 > 2) {

295 
	`quickli°Com¥essNode
(
f‹w¨d
);

296 
	`quickli°Com¥essNode
(
ªvî£
);

298 
	}
}

300 
	#quickli°Com¥ess
(
_ql
, 
_node
) \

302 i‡((
_node
)->
ªcom¥ess
) \

303 
	`quickli°Com¥essNode
((
_node
)); \

305 
	`__quickli°Com¥ess
((
_ql
), (
_node
)); \

306 } 0)

	)

309 
	#quickli°Recom¥essO∆y
(
_ql
, 
_node
) \

311 i‡((
_node
)->
ªcom¥ess
) \

312 
	`quickli°Com¥essNode
((
_node
)); \

313 } 0)

	)

319 
REDIS_STATIC
 
	$__quickli°In£πNode
(
quickli°
 *quicklist,

320 
quickli°Node
 *
ﬁd_node
,

321 
quickli°Node
 *
√w_node
, 
a·î
) {

322 i‡(
a·î
) {

323 
√w_node
->
¥ev
 = 
ﬁd_node
;

324 i‡(
ﬁd_node
) {

325 
√w_node
->
√xt
 = 
ﬁd_node
->next;

326 i‡(
ﬁd_node
->
√xt
)

327 
ﬁd_node
->
√xt
->
¥ev
 = 
√w_node
;

328 
ﬁd_node
->
√xt
 = 
√w_node
;

330 i‡(
quickli°
->
èû
 =
ﬁd_node
)

331 
quickli°
->
èû
 = 
√w_node
;

333 
√w_node
->
√xt
 = 
ﬁd_node
;

334 i‡(
ﬁd_node
) {

335 
√w_node
->
¥ev
 = 
ﬁd_node
->prev;

336 i‡(
ﬁd_node
->
¥ev
)

337 
ﬁd_node
->
¥ev
->
√xt
 = 
√w_node
;

338 
ﬁd_node
->
¥ev
 = 
√w_node
;

340 i‡(
quickli°
->
hód
 =
ﬁd_node
)

341 
quickli°
->
hód
 = 
√w_node
;

344 i‡(
quickli°
->
Àn
 == 0) {

345 
quickli°
->
hód
 = quickli°->
èû
 = 
√w_node
;

348 i‡(
ﬁd_node
)

349 
	`quickli°Com¥ess
(
quickli°
, 
ﬁd_node
);

351 
quickli°
->
Àn
++;

352 
	}
}

355 
REDIS_STATIC
 
	$_quickli°In£πNodeBef‹e
(
quickli°
 *quicklist,

356 
quickli°Node
 *
ﬁd_node
,

357 
quickli°Node
 *
√w_node
) {

358 
	`__quickli°In£πNode
(
quickli°
, 
ﬁd_node
, 
√w_node
, 0);

359 
	}
}

361 
REDIS_STATIC
 
	$_quickli°In£πNodeA·î
(
quickli°
 *quicklist,

362 
quickli°Node
 *
ﬁd_node
,

363 
quickli°Node
 *
√w_node
) {

364 
	`__quickli°In£πNode
(
quickli°
, 
ﬁd_node
, 
√w_node
, 1);

365 
	}
}

367 
REDIS_STATIC
 

368 
	$_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(c⁄° 
size_t
 
sz
,

369 c⁄° 
fûl
) {

370 i‡(
fûl
 >= 0)

373 
size_t
 
off£t
 = (-
fûl
) - 1;

374 i‡(
off£t
 < ((
›timiz©i⁄_Àvñ
) / (*optimization_level))) {

375 i‡(
sz
 <
›timiz©i⁄_Àvñ
[
off£t
]) {

383 
	}
}

385 
	#sizeMìtsSa„tyLimô
(
sz
Ë((szË<
SIZE_SAFETY_LIMIT
)

	)

387 
REDIS_STATIC
 
	$_quickli°NodeAŒowIn£π
(c⁄° 
quickli°Node
 *
node
,

388 c⁄° 
fûl
, c⁄° 
size_t
 
sz
) {

389 i‡(
	`u∆ikñy
(!
node
))

392 
zùli°_ovîhód
;

394 i‡(
sz
 < 254)

395 
zùli°_ovîhód
 = 1;

397 
zùli°_ovîhód
 = 5;

400 i‡(
sz
 < 64)

401 
zùli°_ovîhód
 += 1;

402 i‡(
	`likñy
(
sz
 < 16384))

403 
zùli°_ovîhód
 += 2;

405 
zùli°_ovîhód
 += 5;

408 
√w_sz
 = 
node
->
sz
 + sz + 
zùli°_ovîhód
;

409 i‡(
	`likñy
(
	`_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(
√w_sz
, 
fûl
)))

411 i‡(!
	`sizeMìtsSa„tyLimô
(
√w_sz
))

413 i‡(()
node
->
cou¡
 < 
fûl
)

417 
	}
}

419 
REDIS_STATIC
 
	$_quickli°NodeAŒowMîge
(c⁄° 
quickli°Node
 *
a
,

420 c⁄° 
quickli°Node
 *
b
,

421 c⁄° 
fûl
) {

422 i‡(!
a
 || !
b
)

427 
mîge_sz
 = 
a
->
sz
 + 
b
->sz - 11;

428 i‡(
	`likñy
(
	`_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(
mîge_sz
, 
fûl
)))

430 i‡(!
	`sizeMìtsSa„tyLimô
(
mîge_sz
))

432 i‡(()(
a
->
cou¡
 + 
b
->cou¡Ë<
fûl
)

436 
	}
}

438 
	#quickli°NodeUpd©eSz
(
node
) \

440 (
node
)->
sz
 = 
	`zùli°BlobLí
(“ode)->
zl
); \

441 } 0)

	)

447 
	$quickli°PushHód
(
quickli°
 *quickli°, *
vÆue
, 
size_t
 
sz
) {

448 
quickli°Node
 *
‹ig_hód
 = 
quickli°
->
hód
;

449 i‡(
	`likñy
(

450 
	`_quickli°NodeAŒowIn£π
(
quickli°
->
hód
, quickli°->
fûl
, 
sz
))) {

451 
quickli°
->
hód
->
zl
 =

452 
	`zùli°Push
(
quickli°
->
hód
->
zl
, 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

453 
	`quickli°NodeUpd©eSz
(
quickli°
->
hód
);

455 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

456 
node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

458 
	`quickli°NodeUpd©eSz
(
node
);

459 
	`_quickli°In£πNodeBef‹e
(
quickli°
, quickli°->
hód
, 
node
);

461 
quickli°
->
cou¡
++;

462 
quickli°
->
hód
->
cou¡
++;

463  (
‹ig_hód
 !
quickli°
->
hód
);

464 
	}
}

470 
	$quickli°PushTaû
(
quickli°
 *quickli°, *
vÆue
, 
size_t
 
sz
) {

471 
quickli°Node
 *
‹ig_èû
 = 
quickli°
->
èû
;

472 i‡(
	`likñy
(

473 
	`_quickli°NodeAŒowIn£π
(
quickli°
->
èû
, quickli°->
fûl
, 
sz
))) {

474 
quickli°
->
èû
->
zl
 =

475 
	`zùli°Push
(
quickli°
->
èû
->
zl
, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

476 
	`quickli°NodeUpd©eSz
(
quickli°
->
èû
);

478 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

479 
node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

481 
	`quickli°NodeUpd©eSz
(
node
);

482 
	`_quickli°In£πNodeA·î
(
quickli°
, quickli°->
èû
, 
node
);

484 
quickli°
->
cou¡
++;

485 
quickli°
->
èû
->
cou¡
++;

486  (
‹ig_èû
 !
quickli°
->
èû
);

487 
	}
}

492 
	$quickli°AµídZùli°
(
quickli°
 *quickli°, *
zl
) {

493 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

495 
node
->
zl
 = zl;

496 
node
->
cou¡
 = 
	`zùli°Lí
“ode->
zl
);

497 
node
->
sz
 = 
	`zùli°BlobLí
(
zl
);

499 
	`_quickli°In£πNodeA·î
(
quickli°
, quickli°->
èû
, 
node
);

500 
quickli°
->
cou¡
 +
node
->count;

501 
	}
}

509 
quickli°
 *
	$quickli°AµídVÆuesFromZùli°
(
quickli°
 *quicklist,

510 *
zl
) {

511 *
vÆue
;

512 
sz
;

513 
l⁄gvÆ
;

514 
l⁄g°r
[32] = {0};

516 *
p
 = 
	`zùli°Index
(
zl
, 0);

517 
	`zùli°Gë
(
p
, &
vÆue
, &
sz
, &
l⁄gvÆ
)) {

518 i‡(!
vÆue
) {

520 
sz
 = 
	`Œ2°rög
(
l⁄g°r
, ÷⁄g°r), 
l⁄gvÆ
);

521 
vÆue
 = (*)
l⁄g°r
;

523 
	`quickli°PushTaû
(
quickli°
, 
vÆue
, 
sz
);

524 
p
 = 
	`zùli°Next
(
zl
,Ö);

526 
	`d‰ì
(
zl
);

527  
quickli°
;

528 
	}
}

533 
quickli°
 *
	$quickli°Cª©eFromZùli°
(
fûl
, 
com¥ess
,

534 *
zl
) {

535  
	`quickli°AµídVÆuesFromZùli°
(
	`quickli°New
(
fûl
, 
com¥ess
), 
zl
);

536 
	}
}

538 
	#quickli°DñëeIfEm±y
(
ql
, 
n
) \

540 i‡((
n
)->
cou¡
 == 0) { \

541 
	`__quickli°DñNode
((
ql
), (
n
)); \

542 (
n
Ë
NULL
; \

544 } 0)

	)

546 
REDIS_STATIC
 
	$__quickli°DñNode
(
quickli°
 *quicklist,

547 
quickli°Node
 *
node
) {

548 i‡(
node
->
√xt
)

549 
node
->
√xt
->
¥ev
 =Çode->prev;

550 i‡(
node
->
¥ev
)

551 
node
->
¥ev
->
√xt
 =Çode->next;

553 i‡(
node
 =
quickli°
->
èû
) {

554 
quickli°
->
èû
 = 
node
->
¥ev
;

557 i‡(
node
 =
quickli°
->
hód
) {

558 
quickli°
->
hód
 = 
node
->
√xt
;

563 
	`__quickli°Com¥ess
(
quickli°
, 
NULL
);

565 
quickli°
->
cou¡
 -
node
->count;

567 
	`d‰ì
(
node
->
zl
);

568 
	`d‰ì
(
node
);

569 
quickli°
->
Àn
--;

570 
	}
}

580 
REDIS_STATIC
 
	$quickli°DñIndex
(
quickli°
 *quickli°, 
quickli°Node
 *
node
,

581 **
p
) {

582 
g⁄e
 = 0;

584 
node
->
zl
 = 
	`zùli°Dñëe
“ode->zl, 
p
);

585 
node
->
cou¡
--;

586 i‡(
node
->
cou¡
 == 0) {

587 
g⁄e
 = 1;

588 
	`__quickli°DñNode
(
quickli°
, 
node
);

590 
	`quickli°NodeUpd©eSz
(
node
);

592 
quickli°
->
cou¡
--;

594  
g⁄e
 ? 1 : 0;

595 
	}
}

601 
	$quickli°DñE¡ry
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
) {

602 
quickli°Node
 *
¥ev
 = 
íåy
->
node
->prev;

603 
quickli°Node
 *
√xt
 = 
íåy
->
node
->next;

604 
dñëed_node
 = 
	`quickli°DñIndex
((
quickli°
 *)
íåy
->quicklist,

605 
íåy
->
node
, &íåy->
zi
);

608 
ôî
->
zi
 = 
NULL
;

611 i‡(
dñëed_node
) {

612 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

613 
ôî
->
cuºít
 = 
√xt
;

614 
ôî
->
off£t
 = 0;

615 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

616 
ôî
->
cuºít
 = 
¥ev
;

617 
ôî
->
off£t
 = -1;

628 
	}
}

634 
	$quickli°Rïœ˚AtIndex
(
quickli°
 *quickli°, 
ödex
, *
d©a
,

635 
sz
) {

636 
quickli°E¡ry
 
íåy
;

637 i‡(
	`likñy
(
	`quickli°Index
(
quickli°
, 
ödex
, &
íåy
))) {

639 
íåy
.
node
->
zl
 = 
	`zùli°Dñëe
”¡ry.node->zl, &íåy.
zi
);

640 
íåy
.
node
->
zl
 = 
	`zùli°In£π
”¡ry.node->zl,É¡ry.
zi
, 
d©a
, 
sz
);

641 
	`quickli°Com¥ess
(
quickli°
, 
íåy
.
node
);

646 
	}
}

661 
REDIS_STATIC
 
quickli°Node
 *
	$_quickli°Zùli°Mîge
(
quickli°
 *quicklist,

662 
quickli°Node
 *
a
,

663 
quickli°Node
 *
b
) {

664 
	`D
("Reque°ed mîgê◊,bË(%u, %u)", 
a
->
cou¡
, 
b
->count);

666 
	`quickli°Decom¥essNode
(
a
);

667 
	`quickli°Decom¥essNode
(
b
);

668 i‡((
	`zùli°Mîge
(&
a
->
zl
, &
b
->zl))) {

670 
quickli°Node
 *
kìp
 = 
NULL
, *
nokìp
 = NULL;

671 i‡(!
a
->
zl
) {

672 
nokìp
 = 
a
;

673 
kìp
 = 
b
;

674 } i‡(!
b
->
zl
) {

675 
nokìp
 = 
b
;

676 
kìp
 = 
a
;

678 
kìp
->
cou¡
 = 
	`zùli°Lí
(kìp->
zl
);

679 
	`quickli°NodeUpd©eSz
(
kìp
);

681 
nokìp
->
cou¡
 = 0;

682 
	`__quickli°DñNode
(
quickli°
, 
nokìp
);

683 
	`quickli°Com¥ess
(
quickli°
, 
kìp
);

684  
kìp
;

687  
NULL
;

689 
	}
}

699 
REDIS_STATIC
 
	$_quickli°MîgeNodes
(
quickli°
 *quicklist,

700 
quickli°Node
 *
˚¡î
) {

701 
fûl
 = 
quickli°
->fill;

702 
quickli°Node
 *
¥ev
, *
¥ev_¥ev
, *
√xt
, *
√xt_√xt
, *
èrgë
;

703 
¥ev
 = 
¥ev_¥ev
 = 
√xt
 = 
√xt_√xt
 = 
èrgë
 = 
NULL
;

705 i‡(
˚¡î
->
¥ev
) {

706 
¥ev
 = 
˚¡î
->prev;

707 i‡(
˚¡î
->
¥ev
->prev)

708 
¥ev_¥ev
 = 
˚¡î
->
¥ev
->prev;

711 i‡(
˚¡î
->
√xt
) {

712 
√xt
 = 
˚¡î
->next;

713 i‡(
˚¡î
->
√xt
->next)

714 
√xt_√xt
 = 
˚¡î
->
√xt
->next;

718 i‡(
	`_quickli°NodeAŒowMîge
(
¥ev
, 
¥ev_¥ev
, 
fûl
)) {

719 
	`_quickli°Zùli°Mîge
(
quickli°
, 
¥ev_¥ev
, 
¥ev
);

720 
¥ev_¥ev
 = 
¥ev
 = 
NULL
;

724 i‡(
	`_quickli°NodeAŒowMîge
(
√xt
, 
√xt_√xt
, 
fûl
)) {

725 
	`_quickli°Zùli°Mîge
(
quickli°
, 
√xt
, 
√xt_√xt
);

726 
√xt
 = 
√xt_√xt
 = 
NULL
;

730 i‡(
	`_quickli°NodeAŒowMîge
(
˚¡î
, cíãr->
¥ev
, 
fûl
)) {

731 
èrgë
 = 
	`_quickli°Zùli°Mîge
(
quickli°
, 
˚¡î
->
¥ev
, center);

732 
˚¡î
 = 
NULL
;

735 
èrgë
 = 
˚¡î
;

739 i‡(
	`_quickli°NodeAŒowMîge
(
èrgë
,Å¨gë->
√xt
, 
fûl
)) {

740 
	`_quickli°Zùli°Mîge
(
quickli°
, 
èrgë
,Å¨gë->
√xt
);

742 
	}
}

763 
REDIS_STATIC
 
quickli°Node
 *
	$_quickli°S∂ôNode
(
quickli°Node
 *
node
, 
off£t
,

764 
a·î
) {

765 
size_t
 
zl_sz
 = 
node
->
sz
;

767 
quickli°Node
 *
√w_node
 = 
	`quickli°Cª©eNode
();

768 
√w_node
->
zl
 = 
	`dÆloc
(
zl_sz
);

771 
	`mem˝y
(
√w_node
->
zl
, 
node
->zl, 
zl_sz
);

774 
‹ig_°¨t
 = 
a·î
 ? 
off£t
 + 1 : 0;

775 
‹ig_exã¡
 = 
a·î
 ? -1 : 
off£t
;

776 
√w_°¨t
 = 
a·î
 ? 0 : 
off£t
;

777 
√w_exã¡
 = 
a·î
 ? 
off£t
 + 1 : -1;

779 
	`D
("A·î %d (%d);Ñ™ges: [%d, %d], [%d, %d]", 
a·î
, 
off£t
, 
‹ig_°¨t
,

780 
‹ig_exã¡
, 
√w_°¨t
, 
√w_exã¡
);

782 
node
->
zl
 = 
	`zùli°DñëeR™ge
“ode->zl, 
‹ig_°¨t
, 
‹ig_exã¡
);

783 
node
->
cou¡
 = 
	`zùli°Lí
“ode->
zl
);

784 
	`quickli°NodeUpd©eSz
(
node
);

786 
√w_node
->
zl
 = 
	`zùli°DñëeR™ge
“ew_node->zl, 
√w_°¨t
, 
√w_exã¡
);

787 
√w_node
->
cou¡
 = 
	`zùli°Lí
“ew_node->
zl
);

788 
	`quickli°NodeUpd©eSz
(
√w_node
);

790 
	`D
("A·î s∂ôÜígths: orig (%d),Çew (%d)", 
node
->
cou¡
, 
√w_node
->count);

791  
√w_node
;

792 
	}
}

798 
REDIS_STATIC
 
	$_quickli°In£π
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

799 *
vÆue
, c⁄° 
size_t
 
sz
, 
a·î
) {

800 
fuŒ
 = 0, 
©_èû
 = 0, 
©_hód
 = 0, 
fuŒ_√xt
 = 0, 
fuŒ_¥ev
 = 0;

801 
fûl
 = 
quickli°
->fill;

802 
quickli°Node
 *
node
 = 
íåy
->node;

803 
quickli°Node
 *
√w_node
 = 
NULL
;

805 i‡(!
node
) {

807 
	`D
("NoÇode given!");

808 
√w_node
 = 
	`quickli°Cª©eNode
();

809 
√w_node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

810 
	`__quickli°In£πNode
(
quickli°
, 
NULL
, 
√w_node
, 
a·î
);

811 
√w_node
->
cou¡
++;

812 
quickli°
->
cou¡
++;

817 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
, 
fûl
, 
sz
)) {

818 
	`D
("CurrentÇode is full with count %d withÑequested fill %lu",

819 
node
->
cou¡
, 
fûl
);

820 
fuŒ
 = 1;

823 i‡(
a·î
 && (
íåy
->
off£t
 =
node
->
cou¡
)) {

824 
	`D
("At Tail of current ziplist");

825 
©_èû
 = 1;

826 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
->
√xt
, 
fûl
, 
sz
)) {

827 
	`D
("NextÇode is fullÅoo.");

828 
fuŒ_√xt
 = 1;

832 i‡(!
a·î
 && (
íåy
->
off£t
 == 0)) {

833 
	`D
("At Head");

834 
©_hód
 = 1;

835 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
->
¥ev
, 
fûl
, 
sz
)) {

836 
	`D
("PrevÇode is fullÅoo.");

837 
fuŒ_¥ev
 = 1;

842 i‡(!
fuŒ
 && 
a·î
) {

843 
	`D
("Not full, insertingáfter currentÖosition.");

844 
	`quickli°Decom¥essNodeF‹U£
(
node
);

845 *
√xt
 = 
	`zùli°Next
(
node
->
zl
, 
íåy
->
zi
);

846 i‡(
√xt
 =
NULL
) {

847 
node
->
zl
 = 
	`zùli°Push
“ode->zl, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

849 
node
->
zl
 = 
	`zùli°In£π
“ode->zl, 
√xt
, 
vÆue
, 
sz
);

851 
node
->
cou¡
++;

852 
	`quickli°NodeUpd©eSz
(
node
);

853 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

854 } i‡(!
fuŒ
 && !
a·î
) {

855 
	`D
("Not full, inserting before currentÖosition.");

856 
	`quickli°Decom¥essNodeF‹U£
(
node
);

857 
node
->
zl
 = 
	`zùli°In£π
“ode->zl, 
íåy
->
zi
, 
vÆue
, 
sz
);

858 
node
->
cou¡
++;

859 
	`quickli°NodeUpd©eSz
(
node
);

860 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

861 } i‡(
fuŒ
 && 
©_èû
 && 
node
->
√xt
 && !
fuŒ_√xt
 && 
a·î
) {

864 
	`D
("FullándÅail, butÇext isn't full; insertingÇextÇode head");

865 
√w_node
 = 
node
->
√xt
;

866 
	`quickli°Decom¥essNodeF‹U£
(
√w_node
);

867 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

868 
√w_node
->
cou¡
++;

869 
	`quickli°NodeUpd©eSz
(
√w_node
);

870 
	`quickli°Recom¥essO∆y
(
quickli°
, 
√w_node
);

871 } i‡(
fuŒ
 && 
©_hód
 && 
node
->
¥ev
 && !
fuŒ_¥ev
 && !
a·î
) {

874 
	`D
("Fullánd head, butÖrev isn't full, insertingÖrevÇodeÅail");

875 
√w_node
 = 
node
->
¥ev
;

876 
	`quickli°Decom¥essNodeF‹U£
(
√w_node
);

877 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

878 
√w_node
->
cou¡
++;

879 
	`quickli°NodeUpd©eSz
(
√w_node
);

880 
	`quickli°Recom¥essO∆y
(
quickli°
, 
√w_node
);

881 } i‡(
fuŒ
 && ((
©_èû
 && 
node
->
√xt
 && 
fuŒ_√xt
 && 
a·î
) ||

882 (
©_hód
 && 
node
->
¥ev
 && 
fuŒ_¥ev
 && !
a·î
))) {

885 
	`D
("\tprovisioningÇewÇode...");

886 
√w_node
 = 
	`quickli°Cª©eNode
();

887 
√w_node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

888 
√w_node
->
cou¡
++;

889 
	`quickli°NodeUpd©eSz
(
√w_node
);

890 
	`__quickli°In£πNode
(
quickli°
, 
node
, 
√w_node
, 
a·î
);

891 } i‡(
fuŒ
) {

894 
	`D
("\tsplittingÇode...");

895 
	`quickli°Decom¥essNodeF‹U£
(
node
);

896 
√w_node
 = 
	`_quickli°S∂ôNode
(
node
, 
íåy
->
off£t
, 
a·î
);

897 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
,

898 
a·î
 ? 
ZIPLIST_HEAD
 : 
ZIPLIST_TAIL
);

899 
√w_node
->
cou¡
++;

900 
	`quickli°NodeUpd©eSz
(
√w_node
);

901 
	`__quickli°In£πNode
(
quickli°
, 
node
, 
√w_node
, 
a·î
);

902 
	`_quickli°MîgeNodes
(
quickli°
, 
node
);

905 
quickli°
->
cou¡
++;

906 
	}
}

908 
	$quickli°In£πBef‹e
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

909 *
vÆue
, c⁄° 
size_t
 
sz
) {

910 
	`_quickli°In£π
(
quickli°
, 
íåy
, 
vÆue
, 
sz
, 0);

911 
	}
}

913 
	$quickli°In£πA·î
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

914 *
vÆue
, c⁄° 
size_t
 
sz
) {

915 
	`_quickli°In£π
(
quickli°
, 
íåy
, 
vÆue
, 
sz
, 1);

916 
	}
}

924 
	$quickli°DñR™ge
(
quickli°
 *quickli°, c⁄° 
°¨t
,

925 c⁄° 
cou¡
) {

926 i‡(
cou¡
 <= 0)

929 
exã¡
 = 
cou¡
;

931 i‡(
°¨t
 >0 && 
exã¡
 > (
quickli°
->
cou¡
 - start)) {

933 
exã¡
 = 
quickli°
->
cou¡
 - 
°¨t
;

934 } i‡(
°¨t
 < 0 && 
exã¡
 > ()(-start)) {

936 
exã¡
 = -
°¨t
;

939 
quickli°E¡ry
 
íåy
;

940 i‡(!
	`quickli°Index
(
quickli°
, 
°¨t
, &
íåy
))

943 
	`D
("Quickli° dñëêªque° f‹ sèπ %ld, cou¡ %ld,Éxã¡: %ld", 
°¨t
,

944 
cou¡
, 
exã¡
);

945 
quickli°Node
 *
node
 = 
íåy
.node;

948 
exã¡
) {

949 
quickli°Node
 *
√xt
 = 
node
->next;

951 
dñ
;

952 
dñëe_ítúe_node
 = 0;

953 i‡(
íåy
.
off£t
 =0 && 
exã¡
 >
node
->
cou¡
) {

956 
dñëe_ítúe_node
 = 1;

957 
dñ
 = 
node
->
cou¡
;

958 } i‡(
íåy
.
off£t
 >0 && 
exã¡
 >
node
->
cou¡
) {

961 
dñ
 = 
node
->
cou¡
 - 
íåy
.
off£t
;

962 } i‡(
íåy
.
off£t
 < 0) {

968 
dñ
 = -
íåy
.
off£t
;

973 i‡(
dñ
 > 
exã¡
)

974 
dñ
 = 
exã¡
;

978 
dñ
 = 
exã¡
;

981 
	`D
("[%ld]:áskingÅo del: %ld because offset: %d; (ENTIRE NODE: %d), "

983 
exã¡
, 
dñ
, 
íåy
.
off£t
, 
dñëe_ítúe_node
, 
node
->
cou¡
);

985 i‡(
dñëe_ítúe_node
) {

986 
	`__quickli°DñNode
(
quickli°
, 
node
);

988 
	`quickli°Decom¥essNodeF‹U£
(
node
);

989 
node
->
zl
 = 
	`zùli°DñëeR™ge
“ode->zl, 
íåy
.
off£t
, 
dñ
);

990 
	`quickli°NodeUpd©eSz
(
node
);

991 
node
->
cou¡
 -
dñ
;

992 
quickli°
->
cou¡
 -
dñ
;

993 
	`quickli°DñëeIfEm±y
(
quickli°
, 
node
);

994 i‡(
node
)

995 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

998 
exã¡
 -
dñ
;

1000 
node
 = 
√xt
;

1002 
íåy
.
off£t
 = 0;

1005 
	}
}

1008 
	$quickli°Com∑ª
(*
p1
, *
p2
, 
p2_Àn
) {

1009  
	`zùli°Com∑ª
(
p1
, 
p2
, 
p2_Àn
);

1010 
	}
}

1014 
quickli°Iãr
 *
	$quickli°GëIãøt‹
(c⁄° 
quickli°
 *quickli°, 
dúe˘i⁄
) {

1015 
quickli°Iãr
 *
ôî
;

1017 
ôî
 = 
	`dÆloc
((*iter));

1019 i‡(
dúe˘i⁄
 =
AL_START_HEAD
) {

1020 
ôî
->
cuºít
 = 
quickli°
->
hód
;

1021 
ôî
->
off£t
 = 0;

1022 } i‡(
dúe˘i⁄
 =
AL_START_TAIL
) {

1023 
ôî
->
cuºít
 = 
quickli°
->
èû
;

1024 
ôî
->
off£t
 = -1;

1027 
ôî
->
dúe˘i⁄
 = direction;

1028 
ôî
->
quickli°
 = quicklist;

1030 
ôî
->
zi
 = 
NULL
;

1032  
ôî
;

1033 
	}
}

1037 
quickli°Iãr
 *
	$quickli°GëIãøt‹AtIdx
(c⁄° 
quickli°
 *quicklist,

1038 c⁄° 
dúe˘i⁄
,

1039 c⁄° 
idx
) {

1040 
quickli°E¡ry
 
íåy
;

1042 i‡(
	`quickli°Index
(
quickli°
, 
idx
, &
íåy
)) {

1043 
quickli°Iãr
 *
ba£
 = 
	`quickli°GëIãøt‹
(
quickli°
, 
dúe˘i⁄
);

1044 
ba£
->
zi
 = 
NULL
;

1045 
ba£
->
cuºít
 = 
íåy
.
node
;

1046 
ba£
->
off£t
 = 
íåy
.offset;

1047  
ba£
;

1049  
NULL
;

1051 
	}
}

1055 
	$quickli°Rñó£Iãøt‹
(
quickli°Iãr
 *
ôî
) {

1056 i‡(
ôî
->
cuºít
)

1057 
	`quickli°Com¥ess
(
ôî
->
quickli°
, iãr->
cuºít
);

1059 
	`d‰ì
(
ôî
);

1060 
	}
}

1083 
	$quickli°Next
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
) {

1084 
	`öôE¡ry
(
íåy
);

1086 i‡(!
ôî
) {

1087 
	`D
("Returning becauseÇo iter!");

1091 
íåy
->
quickli°
 = 
ôî
->quicklist;

1092 
íåy
->
node
 = 
ôî
->
cuºít
;

1094 i‡(!
ôî
->
cuºít
) {

1095 
	`D
("Returning because currentÇode is NULL")

1099 *(*
√xtFn
)(*, *Ë
NULL
;

1100 
off£t_upd©e
 = 0;

1102 i‡(!
ôî
->
zi
) {

1104 
	`quickli°Decom¥essNodeF‹U£
(
ôî
->
cuºít
);

1105 
ôî
->
zi
 = 
	`zùli°Index
(ôî->
cuºít
->
zl
, iãr->
off£t
);

1108 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

1109 
√xtFn
 = 
zùli°Next
;

1110 
off£t_upd©e
 = 1;

1111 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

1112 
√xtFn
 = 
zùli°Pªv
;

1113 
off£t_upd©e
 = -1;

1115 
ôî
->
zi
 = 
	`√xtFn
(ôî->
cuºít
->
zl
, iter->zi);

1116 
ôî
->
off£t
 +
off£t_upd©e
;

1119 
íåy
->
zi
 = 
ôî
->zi;

1120 
íåy
->
off£t
 = 
ôî
->offset;

1122 i‡(
ôî
->
zi
) {

1124 
	`zùli°Gë
(
íåy
->
zi
, &íåy->
vÆue
, &íåy->
sz
, &íåy->
l⁄gvÆ
);

1129 
	`quickli°Com¥ess
(
ôî
->
quickli°
, iãr->
cuºít
);

1130 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

1132 
	`D
("JumpingÅo start ofÇextÇode");

1133 
ôî
->
cuºít
 = iãr->cuºít->
√xt
;

1134 
ôî
->
off£t
 = 0;

1135 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

1137 
	`D
("JumpingÅoÉnd ofÖreviousÇode");

1138 
ôî
->
cuºít
 = iãr->cuºít->
¥ev
;

1139 
ôî
->
off£t
 = -1;

1141 
ôî
->
zi
 = 
NULL
;

1142  
	`quickli°Next
(
ôî
, 
íåy
);

1144 
	}
}

1152 
quickli°
 *
	$quickli°Dup
(
quickli°
 *
‹ig
) {

1153 
quickli°
 *
c›y
;

1154 
quickli°Node
 *
cuºít
;

1156 
c›y
 = 
	`quickli°New
(
‹ig
->
fûl
, orig->
com¥ess
);

1158 
cuºít
 = 
‹ig
->
hód
; current;

1159 
cuºít
 = cuºít->
√xt
) {

1160 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

1162 i‡(
node
->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) {

1163 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

1164 
size_t
 
lzf_sz
 = (*
lzf
Ë+Üzf->
sz
;

1165 
node
->
zl
 = 
	`dÆloc
(
lzf_sz
);

1166 
	`mem˝y
(
node
->
zl
, 
cuºít
->zl, 
lzf_sz
);

1167 } i‡(
node
->
ícodög
 =
QUICKLIST_NODE_ENCODING_RAW
) {

1168 
node
->
zl
 = 
	`dÆloc
(
cuºít
->
sz
);

1169 
	`mem˝y
(
node
->
zl
, 
cuºít
->zl, cuºít->
sz
);

1172 
node
->
cou¡
 = 
cuºít
->count;

1173 
c›y
->
cou¡
 +
node
->count;

1174 
node
->
sz
 = 
cuºít
->sz;

1175 
node
->
ícodög
 = 
cuºít
->encoding;

1177 
	`_quickli°In£πNodeA·î
(
c›y
, c›y->
èû
, 
node
);

1181  
c›y
;

1182 
	}
}

1192 
	$quickli°Index
(c⁄° 
quickli°
 *quickli°, c⁄° 
idx
,

1193 
quickli°E¡ry
 *
íåy
) {

1194 
quickli°Node
 *
n
;

1195 
accum
 = 0;

1196 
ödex
;

1197 
f‹w¨d
 = 
idx
 < 0 ? 0 : 1;

1199 
	`öôE¡ry
(
íåy
);

1200 
íåy
->
quickli°
 = quicklist;

1202 i‡(!
f‹w¨d
) {

1203 
ödex
 = (-
idx
) - 1;

1204 
n
 = 
quickli°
->
èû
;

1206 
ödex
 = 
idx
;

1207 
n
 = 
quickli°
->
hód
;

1210 i‡(
ödex
 >
quickli°
->
cou¡
)

1213 
	`likñy
(
n
)) {

1214 i‡((
accum
 + 
n
->
cou¡
Ë> 
ödex
) {

1217 
	`D
("Skùpög ovî (%pË%uáàaccum %Œd", (*)
n
,Ç->
cou¡
,

1218 
accum
);

1219 
accum
 +
n
->
cou¡
;

1220 
n
 = 
f‹w¨d
 ?Ç->
√xt
 :Ç->
¥ev
;

1224 i‡(!
n
)

1227 
	`D
("FoundÇode: %∞©áccum %Œu, idx %Œu, sub+ %Œu, sub- %Œu", (*)
n
,

1228 
accum
, 
ödex
, index -áccum, (-index) - 1 +áccum);

1230 
íåy
->
node
 = 
n
;

1231 i‡(
f‹w¨d
) {

1233 
íåy
->
off£t
 = 
ödex
 - 
accum
;

1237 
íåy
->
off£t
 = (-
ödex
Ë- 1 + 
accum
;

1240 
	`quickli°Decom¥essNodeF‹U£
(
íåy
->
node
);

1241 
íåy
->
zi
 = 
	`zùli°Index
”¡ry->
node
->
zl
,É¡ry->
off£t
);

1242 
	`zùli°Gë
(
íåy
->
zi
, &íåy->
vÆue
, &íåy->
sz
, &íåy->
l⁄gvÆ
);

1246 
	}
}

1249 
	$quickli°RŸ©e
(
quickli°
 *quicklist) {

1250 i‡(
quickli°
->
cou¡
 <= 1)

1254 *
p
 = 
	`zùli°Index
(
quickli°
->
èû
->
zl
, -1);

1255 *
vÆue
;

1256 
l⁄gvÆ
;

1257 
sz
;

1258 
l⁄g°r
[32] = {0};

1259 
	`zùli°Gë
(
p
, &
vÆue
, &
sz
, &
l⁄gvÆ
);

1262 i‡(!
vÆue
) {

1264 
sz
 = 
	`Œ2°rög
(
l⁄g°r
, ÷⁄g°r), 
l⁄gvÆ
);

1265 
vÆue
 = (*)
l⁄g°r
;

1269 
	`quickli°PushHód
(
quickli°
, 
vÆue
, 
sz
);

1274 i‡(
quickli°
->
Àn
 == 1) {

1275 
p
 = 
	`zùli°Index
(
quickli°
->
èû
->
zl
, -1);

1279 
	`quickli°DñIndex
(
quickli°
, quickli°->
èû
, &
p
);

1280 
	}
}

1291 
	$quickli°P›Cu°om
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

1292 *
sz
, *
svÆ
,

1293 *(*
ßvî
)(*
d©a
, 
sz
)) {

1294 *
p
;

1295 *
v°r
;

1296 
vÀn
;

1297 
vl⁄g
;

1298 
pos
 = (
whîe
 =
QUICKLIST_HEAD
) ? 0 : -1;

1300 i‡(
quickli°
->
cou¡
 == 0)

1303 i‡(
d©a
)

1304 *
d©a
 = 
NULL
;

1305 i‡(
sz
)

1306 *
sz
 = 0;

1307 i‡(
svÆ
)

1308 *
svÆ
 = -123456789;

1310 
quickli°Node
 *
node
;

1311 i‡(
whîe
 =
QUICKLIST_HEAD
 && 
quickli°
->
hód
) {

1312 
node
 = 
quickli°
->
hód
;

1313 } i‡(
whîe
 =
QUICKLIST_TAIL
 && 
quickli°
->
èû
) {

1314 
node
 = 
quickli°
->
èû
;

1319 
p
 = 
	`zùli°Index
(
node
->
zl
, 
pos
);

1320 i‡(
	`zùli°Gë
(
p
, &
v°r
, &
vÀn
, &
vl⁄g
)) {

1321 i‡(
v°r
) {

1322 i‡(
d©a
)

1323 *
d©a
 = 
	`ßvî
(
v°r
, 
vÀn
);

1324 i‡(
sz
)

1325 *
sz
 = 
vÀn
;

1327 i‡(
d©a
)

1328 *
d©a
 = 
NULL
;

1329 i‡(
svÆ
)

1330 *
svÆ
 = 
vl⁄g
;

1332 
	`quickli°DñIndex
(
quickli°
, 
node
, &
p
);

1336 
	}
}

1339 
REDIS_STATIC
 *
	$_quickli°Savî
(*
d©a
, 
sz
) {

1340 *
v°r
;

1341 i‡(
d©a
) {

1342 
v°r
 = 
	`dÆloc
(
sz
);

1343 
	`mem˝y
(
v°r
, 
d©a
, 
sz
);

1344  
v°r
;

1346  
NULL
;

1347 
	}
}

1352 
	$quickli°P›
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

1353 *
sz
, *
¶⁄g
) {

1354 *
v°r
;

1355 
vÀn
;

1356 
vl⁄g
;

1357 i‡(
quickli°
->
cou¡
 == 0)

1359 
ªt
 = 
	`quickli°P›Cu°om
(
quickli°
, 
whîe
, &
v°r
, &
vÀn
, &
vl⁄g
,

1360 
_quickli°Savî
);

1361 i‡(
d©a
)

1362 *
d©a
 = 
v°r
;

1363 i‡(
¶⁄g
)

1364 *
¶⁄g
 = 
vl⁄g
;

1365 i‡(
sz
)

1366 *
sz
 = 
vÀn
;

1367  
ªt
;

1368 
	}
}

1371 
	$quickli°Push
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
,

1372 
whîe
) {

1373 i‡(
whîe
 =
QUICKLIST_HEAD
) {

1374 
	`quickli°PushHód
(
quickli°
, 
vÆue
, 
sz
);

1375 } i‡(
whîe
 =
QUICKLIST_TAIL
) {

1376 
	`quickli°PushTaû
(
quickli°
, 
vÆue
, 
sz
);

1378 
	}
}

	@src/vr_quicklist.h

1 #i‚de‡
_VR_QUICKLIST_H_


2 
	#_VR_QUICKLIST_H_


	)

14 
	squickli°Node
 {

15 
quickli°Node
 *
	m¥ev
;

16 
quickli°Node
 *
	m√xt
;

17 *
	mzl
;

18 
	msz
;

19 
	mcou¡
 : 16;

20 
	mícodög
 : 2;

21 
	mc⁄èöî
 : 2;

22 
	mªcom¥ess
 : 1;

23 
	m©ãm±ed_com¥ess
 : 1;

24 
	mexåa
 : 10;

25 } 
	tquickli°Node
;

32 
	squickli°LZF
 {

33 
	msz
;

34 
	mcom¥es£d
[];

35 } 
	tquickli°LZF
;

43 
	squickli°
 {

44 
quickli°Node
 *
	mhód
;

45 
quickli°Node
 *
	mèû
;

46 
	mcou¡
;

47 
	mÀn
;

48 
	mfûl
 : 16;

49 
	mcom¥ess
 : 16;

50 } 
	tquickli°
;

52 
	squickli°Iãr
 {

53 c⁄° 
quickli°
 *
	mquickli°
;

54 
quickli°Node
 *
	mcuºít
;

55 *
	mzi
;

56 
	moff£t
;

57 
	mdúe˘i⁄
;

58 } 
	tquickli°Iãr
;

60 
	squickli°E¡ry
 {

61 c⁄° 
quickli°
 *
	mquickli°
;

62 
quickli°Node
 *
	mnode
;

63 *
	mzi
;

64 *
	mvÆue
;

65 
	msz
;

66 
	ml⁄gvÆ
;

67 
	moff£t
;

68 } 
	tquickli°E¡ry
;

70 
	#QUICKLIST_HEAD
 0

	)

71 
	#QUICKLIST_TAIL
 -1

	)

74 
	#QUICKLIST_NODE_ENCODING_RAW
 1

	)

75 
	#QUICKLIST_NODE_ENCODING_LZF
 2

	)

78 
	#QUICKLIST_NOCOMPRESS
 0

	)

81 
	#QUICKLIST_NODE_CONTAINER_NONE
 1

	)

82 
	#QUICKLIST_NODE_CONTAINER_ZIPLIST
 2

	)

84 
	#quickli°NodeIsCom¥es£d
(
node
) \

85 ((
node
)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
)

	)

88 
quickli°
 *
quickli°Cª©e
();

89 
quickli°
 *
quickli°New
(
fûl
, 
com¥ess
);

90 
quickli°SëCom¥essDïth
(
quickli°
 *quickli°, 
dïth
);

91 
quickli°SëFûl
(
quickli°
 *quickli°, 
fûl
);

92 
quickli°SëO±i⁄s
(
quickli°
 *quickli°, 
fûl
, 
dïth
);

93 
quickli°Rñó£
(
quickli°
 *quicklist);

94 
quickli°PushHód
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
);

95 
quickli°PushTaû
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
);

96 
quickli°Push
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
,

97 
whîe
);

98 
quickli°AµídZùli°
(
quickli°
 *quickli°, *
zl
);

99 
quickli°
 *
quickli°AµídVÆuesFromZùli°
(quicklist *quicklist,

100 *
zl
);

101 
quickli°
 *
quickli°Cª©eFromZùli°
(
fûl
, 
com¥ess
,

102 *
zl
);

103 
quickli°In£πA·î
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
node
,

104 *
vÆue
, c⁄° 
size_t
 
sz
);

105 
quickli°In£πBef‹e
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
node
,

106 *
vÆue
, c⁄° 
size_t
 
sz
);

107 
quickli°DñE¡ry
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
);

108 
quickli°Rïœ˚AtIndex
(
quickli°
 *quickli°, 
ödex
, *
d©a
,

109 
sz
);

110 
quickli°DñR™ge
(
quickli°
 *quickli°, c⁄° 
°¨t
, c⁄° 
°›
);

111 
quickli°Iãr
 *
quickli°GëIãøt‹
(c⁄° 
quickli°
 *quickli°, 
dúe˘i⁄
);

112 
quickli°Iãr
 *
quickli°GëIãøt‹AtIdx
(c⁄° 
quickli°
 *quicklist,

113 
dúe˘i⁄
, c⁄° 
idx
);

114 
quickli°Next
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
node
);

115 
quickli°Rñó£Iãøt‹
(
quickli°Iãr
 *
ôî
);

116 
quickli°
 *
quickli°Dup
(quickli° *
‹ig
);

117 
quickli°Index
(c⁄° 
quickli°
 *quickli°, c⁄° 
ödex
,

118 
quickli°E¡ry
 *
íåy
);

119 
quickli°Rewöd
(
quickli°
 *quickli°, 
quickli°Iãr
 *
li
);

120 
quickli°RewödTaû
(
quickli°
 *quickli°, 
quickli°Iãr
 *
li
);

121 
quickli°RŸ©e
(
quickli°
 *quicklist);

122 
quickli°P›Cu°om
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

123 *
sz
, *
svÆ
,

124 *(*
ßvî
)(*
d©a
, 
sz
));

125 
quickli°P›
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

126 *
sz
, *
¶⁄g
);

127 
quickli°Cou¡
(
quickli°
 *
ql
);

128 
quickli°Com∑ª
(*
p1
, *
p2
, 
p2_Àn
);

129 
size_t
 
quickli°GëLzf
(c⁄° 
quickli°Node
 *
node
, **
d©a
);

132 
	#AL_START_HEAD
 0

	)

133 
	#AL_START_TAIL
 1

	)

	@src/vr_quicklist.h

1 #i‚de‡
_VR_QUICKLIST_H_


2 
	#_VR_QUICKLIST_H_


	)

14 
	squickli°Node
 {

15 
quickli°Node
 *
	m¥ev
;

16 
quickli°Node
 *
	m√xt
;

17 *
	mzl
;

18 
	msz
;

19 
	mcou¡
 : 16;

20 
	mícodög
 : 2;

21 
	mc⁄èöî
 : 2;

22 
	mªcom¥ess
 : 1;

23 
	m©ãm±ed_com¥ess
 : 1;

24 
	mexåa
 : 10;

25 } 
	tquickli°Node
;

32 
	squickli°LZF
 {

33 
	msz
;

34 
	mcom¥es£d
[];

35 } 
	tquickli°LZF
;

43 
	squickli°
 {

44 
quickli°Node
 *
	mhód
;

45 
quickli°Node
 *
	mèû
;

46 
	mcou¡
;

47 
	mÀn
;

48 
	mfûl
 : 16;

49 
	mcom¥ess
 : 16;

50 } 
	tquickli°
;

52 
	squickli°Iãr
 {

53 c⁄° 
quickli°
 *
	mquickli°
;

54 
quickli°Node
 *
	mcuºít
;

55 *
	mzi
;

56 
	moff£t
;

57 
	mdúe˘i⁄
;

58 } 
	tquickli°Iãr
;

60 
	squickli°E¡ry
 {

61 c⁄° 
quickli°
 *
	mquickli°
;

62 
quickli°Node
 *
	mnode
;

63 *
	mzi
;

64 *
	mvÆue
;

65 
	msz
;

66 
	ml⁄gvÆ
;

67 
	moff£t
;

68 } 
	tquickli°E¡ry
;

70 
	#QUICKLIST_HEAD
 0

	)

71 
	#QUICKLIST_TAIL
 -1

	)

74 
	#QUICKLIST_NODE_ENCODING_RAW
 1

	)

75 
	#QUICKLIST_NODE_ENCODING_LZF
 2

	)

78 
	#QUICKLIST_NOCOMPRESS
 0

	)

81 
	#QUICKLIST_NODE_CONTAINER_NONE
 1

	)

82 
	#QUICKLIST_NODE_CONTAINER_ZIPLIST
 2

	)

84 
	#quickli°NodeIsCom¥es£d
(
node
) \

85 ((
node
)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
)

	)

88 
quickli°
 *
quickli°Cª©e
();

89 
quickli°
 *
quickli°New
(
fûl
, 
com¥ess
);

90 
quickli°SëCom¥essDïth
(
quickli°
 *quickli°, 
dïth
);

91 
quickli°SëFûl
(
quickli°
 *quickli°, 
fûl
);

92 
quickli°SëO±i⁄s
(
quickli°
 *quickli°, 
fûl
, 
dïth
);

93 
quickli°Rñó£
(
quickli°
 *quicklist);

94 
quickli°PushHód
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
);

95 
quickli°PushTaû
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
);

96 
quickli°Push
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
,

97 
whîe
);

98 
quickli°AµídZùli°
(
quickli°
 *quickli°, *
zl
);

99 
quickli°
 *
quickli°AµídVÆuesFromZùli°
(quicklist *quicklist,

100 *
zl
);

101 
quickli°
 *
quickli°Cª©eFromZùli°
(
fûl
, 
com¥ess
,

102 *
zl
);

103 
quickli°In£πA·î
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
node
,

104 *
vÆue
, c⁄° 
size_t
 
sz
);

105 
quickli°In£πBef‹e
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
node
,

106 *
vÆue
, c⁄° 
size_t
 
sz
);

107 
quickli°DñE¡ry
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
);

108 
quickli°Rïœ˚AtIndex
(
quickli°
 *quickli°, 
ödex
, *
d©a
,

109 
sz
);

110 
quickli°DñR™ge
(
quickli°
 *quickli°, c⁄° 
°¨t
, c⁄° 
°›
);

111 
quickli°Iãr
 *
quickli°GëIãøt‹
(c⁄° 
quickli°
 *quickli°, 
dúe˘i⁄
);

112 
quickli°Iãr
 *
quickli°GëIãøt‹AtIdx
(c⁄° 
quickli°
 *quicklist,

113 
dúe˘i⁄
, c⁄° 
idx
);

114 
quickli°Next
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
node
);

115 
quickli°Rñó£Iãøt‹
(
quickli°Iãr
 *
ôî
);

116 
quickli°
 *
quickli°Dup
(quickli° *
‹ig
);

117 
quickli°Index
(c⁄° 
quickli°
 *quickli°, c⁄° 
ödex
,

118 
quickli°E¡ry
 *
íåy
);

119 
quickli°Rewöd
(
quickli°
 *quickli°, 
quickli°Iãr
 *
li
);

120 
quickli°RewödTaû
(
quickli°
 *quickli°, 
quickli°Iãr
 *
li
);

121 
quickli°RŸ©e
(
quickli°
 *quicklist);

122 
quickli°P›Cu°om
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

123 *
sz
, *
svÆ
,

124 *(*
ßvî
)(*
d©a
, 
sz
));

125 
quickli°P›
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

126 *
sz
, *
¶⁄g
);

127 
quickli°Cou¡
(
quickli°
 *
ql
);

128 
quickli°Com∑ª
(*
p1
, *
p2
, 
p2_Àn
);

129 
size_t
 
quickli°GëLzf
(c⁄° 
quickli°Node
 *
node
, **
d©a
);

132 
	#AL_START_HEAD
 0

	)

133 
	#AL_START_TAIL
 1

	)

	@src/vr_rbtree.c

1 
	~<vr_c‹e.h
>

4 
	$rbåì_node_öô
(
rbnode
 *
node
)

6 
node
->
À·
 = 
NULL
;

7 
node
->
right
 = 
NULL
;

8 
node
->
∑ª¡
 = 
NULL
;

9 
node
->
key
 = 0ULL;

10 
node
->
d©a
 = 
NULL
;

12 
	}
}

15 
	$rbåì_öô
(
rbåì
 *
åì
, 
rbnode
 *
node
)

17 
	`rbåì_node_öô
(
node
);

18 
	`rbåì_bœck
(
node
);

19 
åì
->
roŸ
 = 
node
;

20 
åì
->
£¡öñ
 = 
node
;

21 
	}
}

23 
rbnode
 *

24 
	$rbåì_node_mö
(
rbnode
 *
node
, rbnodê*
£¡öñ
)

28 
node
->
À·
 !
£¡öñ
) {

29 
node
 =Çode->
À·
;

32  
node
;

33 
	}
}

35 
rbnode
 *

36 
	$rbåì_mö
(
rbåì
 *
åì
)

38 
rbnode
 *
node
 = 
åì
->
roŸ
;

39 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

43 i‡(
node
 =
£¡öñ
) {

44  
NULL
;

47  
	`rbåì_node_mö
(
node
, 
£¡öñ
);

48 
	}
}

51 
	$rbåì_À·_rŸ©e
(
rbnode
 **
roŸ
, rbnodê*
£¡öñ
,

52 
rbnode
 *
node
)

54 
rbnode
 *
ãmp
;

56 
ãmp
 = 
node
->
right
;

57 
node
->
right
 = 
ãmp
->
À·
;

59 i‡(
ãmp
->
À·
 !
£¡öñ
) {

60 
ãmp
->
À·
->
∑ª¡
 = 
node
;

63 
ãmp
->
∑ª¡
 = 
node
->parent;

65 i‡(
node
 =*
roŸ
) {

66 *
roŸ
 = 
ãmp
;

67 } i‡(
node
 =node->
∑ª¡
->
À·
) {

68 
node
->
∑ª¡
->
À·
 = 
ãmp
;

70 
node
->
∑ª¡
->
right
 = 
ãmp
;

73 
ãmp
->
À·
 = 
node
;

74 
node
->
∑ª¡
 = 
ãmp
;

75 
	}
}

78 
	$rbåì_right_rŸ©e
(
rbnode
 **
roŸ
, rbnodê*
£¡öñ
,

79 
rbnode
 *
node
)

81 
rbnode
 *
ãmp
;

83 
ãmp
 = 
node
->
À·
;

84 
node
->
À·
 = 
ãmp
->
right
;

86 i‡(
ãmp
->
right
 !
£¡öñ
) {

87 
ãmp
->
right
->
∑ª¡
 = 
node
;

90 
ãmp
->
∑ª¡
 = 
node
->parent;

92 i‡(
node
 =*
roŸ
) {

93 *
roŸ
 = 
ãmp
;

94 } i‡(
node
 =node->
∑ª¡
->
right
) {

95 
node
->
∑ª¡
->
right
 = 
ãmp
;

97 
node
->
∑ª¡
->
À·
 = 
ãmp
;

100 
ãmp
->
right
 = 
node
;

101 
node
->
∑ª¡
 = 
ãmp
;

102 
	}
}

105 
	$rbåì_ö£π
(
rbåì
 *
åì
, 
rbnode
 *
node
)

107 
rbnode
 **
roŸ
 = &
åì
->root;

108 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

109 
rbnode
 *
ãmp
, **
p
;

113 i‡(*
roŸ
 =
£¡öñ
) {

114 
node
->
∑ª¡
 = 
NULL
;

115 
node
->
À·
 = 
£¡öñ
;

116 
node
->
right
 = 
£¡öñ
;

117 
	`rbåì_bœck
(
node
);

118 *
roŸ
 = 
node
;

124 
ãmp
 = *
roŸ
;

127 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

128 i‡(*
p
 =
£¡öñ
) {

131 
ãmp
 = *
p
;

134 *
p
 = 
node
;

135 
node
->
∑ª¡
 = 
ãmp
;

136 
node
->
À·
 = 
£¡öñ
;

137 
node
->
right
 = 
£¡öñ
;

138 
	`rbåì_ªd
(
node
);

142 
node
 !*
roŸ
 && 
	`rbåì_is_ªd
“ode->
∑ª¡
)) {

144 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

145 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

147 i‡(
	`rbåì_is_ªd
(
ãmp
)) {

148 
	`rbåì_bœck
(
node
->
∑ª¡
);

149 
	`rbåì_bœck
(
ãmp
);

150 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

151 
node
 =Çode->
∑ª¡
->parent;

153 i‡(
node
 =node->
∑ª¡
->
right
) {

154 
node
 =Çode->
∑ª¡
;

155 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

158 
	`rbåì_bœck
(
node
->
∑ª¡
);

159 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

160 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

163 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

165 i‡(
	`rbåì_is_ªd
(
ãmp
)) {

166 
	`rbåì_bœck
(
node
->
∑ª¡
);

167 
	`rbåì_bœck
(
ãmp
);

168 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

169 
node
 =Çode->
∑ª¡
->parent;

171 i‡(
node
 =node->
∑ª¡
->
À·
) {

172 
node
 =Çode->
∑ª¡
;

173 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

176 
	`rbåì_bœck
(
node
->
∑ª¡
);

177 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

178 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

183 
	`rbåì_bœck
(*
roŸ
);

184 
	}
}

187 
	$rbåì_dñëe
(
rbåì
 *
åì
, 
rbnode
 *
node
)

189 
rbnode
 **
roŸ
 = &
åì
->root;

190 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

191 
rbnode
 *
sub°
, *
ãmp
, *
w
;

192 
uöt8_t
 
ªd
;

196 i‡(
node
->
À·
 =
£¡öñ
) {

197 
ãmp
 = 
node
->
right
;

198 
sub°
 = 
node
;

199 } i‡(
node
->
right
 =
£¡öñ
) {

200 
ãmp
 = 
node
->
À·
;

201 
sub°
 = 
node
;

203 
sub°
 = 
	`rbåì_node_mö
(
node
->
right
, 
£¡öñ
);

204 
ãmp
 = 
sub°
->
right
;

207 i‡(
sub°
 =*
roŸ
) {

208 *
roŸ
 = 
ãmp
;

209 
	`rbåì_bœck
(
ãmp
);

211 
	`rbåì_node_öô
(
node
);

216 
ªd
 = 
	`rbåì_is_ªd
(
sub°
);

218 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

219 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

221 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

224 i‡(
sub°
 =
node
) {

225 
ãmp
->
∑ª¡
 = 
sub°
->parent;

228 i‡(
sub°
->
∑ª¡
 =
node
) {

229 
ãmp
->
∑ª¡
 = 
sub°
;

231 
ãmp
->
∑ª¡
 = 
sub°
->parent;

234 
sub°
->
À·
 = 
node
->left;

235 
sub°
->
right
 = 
node
->right;

236 
sub°
->
∑ª¡
 = 
node
->parent;

237 
	`rbåì_c›y_cﬁ‹
(
sub°
, 
node
);

239 i‡(
node
 =*
roŸ
) {

240 *
roŸ
 = 
sub°
;

242 i‡(
node
 =node->
∑ª¡
->
À·
) {

243 
node
->
∑ª¡
->
À·
 = 
sub°
;

245 
node
->
∑ª¡
->
right
 = 
sub°
;

249 i‡(
sub°
->
À·
 !
£¡öñ
) {

250 
sub°
->
À·
->
∑ª¡
 = subst;

253 i‡(
sub°
->
right
 !
£¡öñ
) {

254 
sub°
->
right
->
∑ª¡
 = subst;

258 
	`rbåì_node_öô
(
node
);

260 i‡(
ªd
) {

266 
ãmp
 !*
roŸ
 && 
	`rbåì_is_bœck
(temp)) {

268 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

269 
w
 = 
ãmp
->
∑ª¡
->
right
;

271 i‡(
	`rbåì_is_ªd
(
w
)) {

272 
	`rbåì_bœck
(
w
);

273 
	`rbåì_ªd
(
ãmp
->
∑ª¡
);

274 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

275 
w
 = 
ãmp
->
∑ª¡
->
right
;

278 i‡(
	`rbåì_is_bœck
(
w
->
À·
Ë&&Ñbåì_is_bœck(w->
right
)) {

279 
	`rbåì_ªd
(
w
);

280 
ãmp
 =Åemp->
∑ª¡
;

282 i‡(
	`rbåì_is_bœck
(
w
->
right
)) {

283 
	`rbåì_bœck
(
w
->
À·
);

284 
	`rbåì_ªd
(
w
);

285 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

286 
w
 = 
ãmp
->
∑ª¡
->
right
;

289 
	`rbåì_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

290 
	`rbåì_bœck
(
ãmp
->
∑ª¡
);

291 
	`rbåì_bœck
(
w
->
right
);

292 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

293 
ãmp
 = *
roŸ
;

297 
w
 = 
ãmp
->
∑ª¡
->
À·
;

299 i‡(
	`rbåì_is_ªd
(
w
)) {

300 
	`rbåì_bœck
(
w
);

301 
	`rbåì_ªd
(
ãmp
->
∑ª¡
);

302 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

303 
w
 = 
ãmp
->
∑ª¡
->
À·
;

306 i‡(
	`rbåì_is_bœck
(
w
->
À·
Ë&&Ñbåì_is_bœck(w->
right
)) {

307 
	`rbåì_ªd
(
w
);

308 
ãmp
 =Åemp->
∑ª¡
;

310 i‡(
	`rbåì_is_bœck
(
w
->
À·
)) {

311 
	`rbåì_bœck
(
w
->
right
);

312 
	`rbåì_ªd
(
w
);

313 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

314 
w
 = 
ãmp
->
∑ª¡
->
À·
;

317 
	`rbåì_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

318 
	`rbåì_bœck
(
ãmp
->
∑ª¡
);

319 
	`rbåì_bœck
(
w
->
À·
);

320 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

321 
ãmp
 = *
roŸ
;

326 
	`rbåì_bœck
(
ãmp
);

327 
	}
}

	@src/vr_rbtree.c

1 
	~<vr_c‹e.h
>

4 
	$rbåì_node_öô
(
rbnode
 *
node
)

6 
node
->
À·
 = 
NULL
;

7 
node
->
right
 = 
NULL
;

8 
node
->
∑ª¡
 = 
NULL
;

9 
node
->
key
 = 0ULL;

10 
node
->
d©a
 = 
NULL
;

12 
	}
}

15 
	$rbåì_öô
(
rbåì
 *
åì
, 
rbnode
 *
node
)

17 
	`rbåì_node_öô
(
node
);

18 
	`rbåì_bœck
(
node
);

19 
åì
->
roŸ
 = 
node
;

20 
åì
->
£¡öñ
 = 
node
;

21 
	}
}

23 
rbnode
 *

24 
	$rbåì_node_mö
(
rbnode
 *
node
, rbnodê*
£¡öñ
)

28 
node
->
À·
 !
£¡öñ
) {

29 
node
 =Çode->
À·
;

32  
node
;

33 
	}
}

35 
rbnode
 *

36 
	$rbåì_mö
(
rbåì
 *
åì
)

38 
rbnode
 *
node
 = 
åì
->
roŸ
;

39 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

43 i‡(
node
 =
£¡öñ
) {

44  
NULL
;

47  
	`rbåì_node_mö
(
node
, 
£¡öñ
);

48 
	}
}

51 
	$rbåì_À·_rŸ©e
(
rbnode
 **
roŸ
, rbnodê*
£¡öñ
,

52 
rbnode
 *
node
)

54 
rbnode
 *
ãmp
;

56 
ãmp
 = 
node
->
right
;

57 
node
->
right
 = 
ãmp
->
À·
;

59 i‡(
ãmp
->
À·
 !
£¡öñ
) {

60 
ãmp
->
À·
->
∑ª¡
 = 
node
;

63 
ãmp
->
∑ª¡
 = 
node
->parent;

65 i‡(
node
 =*
roŸ
) {

66 *
roŸ
 = 
ãmp
;

67 } i‡(
node
 =node->
∑ª¡
->
À·
) {

68 
node
->
∑ª¡
->
À·
 = 
ãmp
;

70 
node
->
∑ª¡
->
right
 = 
ãmp
;

73 
ãmp
->
À·
 = 
node
;

74 
node
->
∑ª¡
 = 
ãmp
;

75 
	}
}

78 
	$rbåì_right_rŸ©e
(
rbnode
 **
roŸ
, rbnodê*
£¡öñ
,

79 
rbnode
 *
node
)

81 
rbnode
 *
ãmp
;

83 
ãmp
 = 
node
->
À·
;

84 
node
->
À·
 = 
ãmp
->
right
;

86 i‡(
ãmp
->
right
 !
£¡öñ
) {

87 
ãmp
->
right
->
∑ª¡
 = 
node
;

90 
ãmp
->
∑ª¡
 = 
node
->parent;

92 i‡(
node
 =*
roŸ
) {

93 *
roŸ
 = 
ãmp
;

94 } i‡(
node
 =node->
∑ª¡
->
right
) {

95 
node
->
∑ª¡
->
right
 = 
ãmp
;

97 
node
->
∑ª¡
->
À·
 = 
ãmp
;

100 
ãmp
->
right
 = 
node
;

101 
node
->
∑ª¡
 = 
ãmp
;

102 
	}
}

105 
	$rbåì_ö£π
(
rbåì
 *
åì
, 
rbnode
 *
node
)

107 
rbnode
 **
roŸ
 = &
åì
->root;

108 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

109 
rbnode
 *
ãmp
, **
p
;

113 i‡(*
roŸ
 =
£¡öñ
) {

114 
node
->
∑ª¡
 = 
NULL
;

115 
node
->
À·
 = 
£¡öñ
;

116 
node
->
right
 = 
£¡öñ
;

117 
	`rbåì_bœck
(
node
);

118 *
roŸ
 = 
node
;

124 
ãmp
 = *
roŸ
;

127 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

128 i‡(*
p
 =
£¡öñ
) {

131 
ãmp
 = *
p
;

134 *
p
 = 
node
;

135 
node
->
∑ª¡
 = 
ãmp
;

136 
node
->
À·
 = 
£¡öñ
;

137 
node
->
right
 = 
£¡öñ
;

138 
	`rbåì_ªd
(
node
);

142 
node
 !*
roŸ
 && 
	`rbåì_is_ªd
“ode->
∑ª¡
)) {

144 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

145 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

147 i‡(
	`rbåì_is_ªd
(
ãmp
)) {

148 
	`rbåì_bœck
(
node
->
∑ª¡
);

149 
	`rbåì_bœck
(
ãmp
);

150 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

151 
node
 =Çode->
∑ª¡
->parent;

153 i‡(
node
 =node->
∑ª¡
->
right
) {

154 
node
 =Çode->
∑ª¡
;

155 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

158 
	`rbåì_bœck
(
node
->
∑ª¡
);

159 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

160 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

163 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

165 i‡(
	`rbåì_is_ªd
(
ãmp
)) {

166 
	`rbåì_bœck
(
node
->
∑ª¡
);

167 
	`rbåì_bœck
(
ãmp
);

168 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

169 
node
 =Çode->
∑ª¡
->parent;

171 i‡(
node
 =node->
∑ª¡
->
À·
) {

172 
node
 =Çode->
∑ª¡
;

173 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

176 
	`rbåì_bœck
(
node
->
∑ª¡
);

177 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

178 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

183 
	`rbåì_bœck
(*
roŸ
);

184 
	}
}

187 
	$rbåì_dñëe
(
rbåì
 *
åì
, 
rbnode
 *
node
)

189 
rbnode
 **
roŸ
 = &
åì
->root;

190 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

191 
rbnode
 *
sub°
, *
ãmp
, *
w
;

192 
uöt8_t
 
ªd
;

196 i‡(
node
->
À·
 =
£¡öñ
) {

197 
ãmp
 = 
node
->
right
;

198 
sub°
 = 
node
;

199 } i‡(
node
->
right
 =
£¡öñ
) {

200 
ãmp
 = 
node
->
À·
;

201 
sub°
 = 
node
;

203 
sub°
 = 
	`rbåì_node_mö
(
node
->
right
, 
£¡öñ
);

204 
ãmp
 = 
sub°
->
right
;

207 i‡(
sub°
 =*
roŸ
) {

208 *
roŸ
 = 
ãmp
;

209 
	`rbåì_bœck
(
ãmp
);

211 
	`rbåì_node_öô
(
node
);

216 
ªd
 = 
	`rbåì_is_ªd
(
sub°
);

218 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

219 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

221 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

224 i‡(
sub°
 =
node
) {

225 
ãmp
->
∑ª¡
 = 
sub°
->parent;

228 i‡(
sub°
->
∑ª¡
 =
node
) {

229 
ãmp
->
∑ª¡
 = 
sub°
;

231 
ãmp
->
∑ª¡
 = 
sub°
->parent;

234 
sub°
->
À·
 = 
node
->left;

235 
sub°
->
right
 = 
node
->right;

236 
sub°
->
∑ª¡
 = 
node
->parent;

237 
	`rbåì_c›y_cﬁ‹
(
sub°
, 
node
);

239 i‡(
node
 =*
roŸ
) {

240 *
roŸ
 = 
sub°
;

242 i‡(
node
 =node->
∑ª¡
->
À·
) {

243 
node
->
∑ª¡
->
À·
 = 
sub°
;

245 
node
->
∑ª¡
->
right
 = 
sub°
;

249 i‡(
sub°
->
À·
 !
£¡öñ
) {

250 
sub°
->
À·
->
∑ª¡
 = subst;

253 i‡(
sub°
->
right
 !
£¡öñ
) {

254 
sub°
->
right
->
∑ª¡
 = subst;

258 
	`rbåì_node_öô
(
node
);

260 i‡(
ªd
) {

266 
ãmp
 !*
roŸ
 && 
	`rbåì_is_bœck
(temp)) {

268 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

269 
w
 = 
ãmp
->
∑ª¡
->
right
;

271 i‡(
	`rbåì_is_ªd
(
w
)) {

272 
	`rbåì_bœck
(
w
);

273 
	`rbåì_ªd
(
ãmp
->
∑ª¡
);

274 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

275 
w
 = 
ãmp
->
∑ª¡
->
right
;

278 i‡(
	`rbåì_is_bœck
(
w
->
À·
Ë&&Ñbåì_is_bœck(w->
right
)) {

279 
	`rbåì_ªd
(
w
);

280 
ãmp
 =Åemp->
∑ª¡
;

282 i‡(
	`rbåì_is_bœck
(
w
->
right
)) {

283 
	`rbåì_bœck
(
w
->
À·
);

284 
	`rbåì_ªd
(
w
);

285 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

286 
w
 = 
ãmp
->
∑ª¡
->
right
;

289 
	`rbåì_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

290 
	`rbåì_bœck
(
ãmp
->
∑ª¡
);

291 
	`rbåì_bœck
(
w
->
right
);

292 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

293 
ãmp
 = *
roŸ
;

297 
w
 = 
ãmp
->
∑ª¡
->
À·
;

299 i‡(
	`rbåì_is_ªd
(
w
)) {

300 
	`rbåì_bœck
(
w
);

301 
	`rbåì_ªd
(
ãmp
->
∑ª¡
);

302 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

303 
w
 = 
ãmp
->
∑ª¡
->
À·
;

306 i‡(
	`rbåì_is_bœck
(
w
->
À·
Ë&&Ñbåì_is_bœck(w->
right
)) {

307 
	`rbåì_ªd
(
w
);

308 
ãmp
 =Åemp->
∑ª¡
;

310 i‡(
	`rbåì_is_bœck
(
w
->
À·
)) {

311 
	`rbåì_bœck
(
w
->
right
);

312 
	`rbåì_ªd
(
w
);

313 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

314 
w
 = 
ãmp
->
∑ª¡
->
À·
;

317 
	`rbåì_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

318 
	`rbåì_bœck
(
ãmp
->
∑ª¡
);

319 
	`rbåì_bœck
(
w
->
À·
);

320 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

321 
ãmp
 = *
roŸ
;

326 
	`rbåì_bœck
(
ãmp
);

327 
	}
}

	@src/vr_rbtree.h

1 #i‚de‡
_VR_RBTREE_


2 
	#_VR_RBTREE_


	)

4 
	#rbåì_ªd
(
_node
Ë((_node)->
cﬁ‹
 = 1)

	)

5 
	#rbåì_bœck
(
_node
Ë((_node)->
cﬁ‹
 = 0)

	)

6 
	#rbåì_is_ªd
(
_node
Ë((_node)->
cﬁ‹
)

	)

7 
	#rbåì_is_bœck
(
_node
Ë(!
	`rbåì_is_ªd
(_node))

	)

8 
	#rbåì_c›y_cﬁ‹
(
_n1
, 
_n2
Ë((_n1)->
cﬁ‹
 = (_n2)->cﬁ‹)

	)

10 
	srbnode
 {

11 
rbnode
 *
	mÀ·
;

12 
rbnode
 *
	mright
;

13 
rbnode
 *
	m∑ª¡
;

14 
öt64_t
 
	mkey
;

15 *
	md©a
;

16 
uöt8_t
 
	mcﬁ‹
;

19 
	srbåì
 {

20 
rbnode
 *
	mroŸ
;

21 
rbnode
 *
	m£¡öñ
;

24 
rbåì_node_öô
(
rbnode
 *
node
);

25 
rbåì_öô
(
rbåì
 *
åì
, 
rbnode
 *
node
);

26 
rbnode
 *
rbåì_mö
(
rbåì
 *
åì
);

27 
rbåì_ö£π
(
rbåì
 *
åì
, 
rbnode
 *
node
);

28 
rbåì_dñëe
(
rbåì
 *
åì
, 
rbnode
 *
node
);

	@src/vr_rbtree.h

1 #i‚de‡
_VR_RBTREE_


2 
	#_VR_RBTREE_


	)

4 
	#rbåì_ªd
(
_node
Ë((_node)->
cﬁ‹
 = 1)

	)

5 
	#rbåì_bœck
(
_node
Ë((_node)->
cﬁ‹
 = 0)

	)

6 
	#rbåì_is_ªd
(
_node
Ë((_node)->
cﬁ‹
)

	)

7 
	#rbåì_is_bœck
(
_node
Ë(!
	`rbåì_is_ªd
(_node))

	)

8 
	#rbåì_c›y_cﬁ‹
(
_n1
, 
_n2
Ë((_n1)->
cﬁ‹
 = (_n2)->cﬁ‹)

	)

10 
	srbnode
 {

11 
rbnode
 *
	mÀ·
;

12 
rbnode
 *
	mright
;

13 
rbnode
 *
	m∑ª¡
;

14 
öt64_t
 
	mkey
;

15 *
	md©a
;

16 
uöt8_t
 
	mcﬁ‹
;

19 
	srbåì
 {

20 
rbnode
 *
	mroŸ
;

21 
rbnode
 *
	m£¡öñ
;

24 
rbåì_node_öô
(
rbnode
 *
node
);

25 
rbåì_öô
(
rbåì
 *
åì
, 
rbnode
 *
node
);

26 
rbnode
 *
rbåì_mö
(
rbåì
 *
åì
);

27 
rbåì_ö£π
(
rbåì
 *
åì
, 
rbnode
 *
node
);

28 
rbåì_dñëe
(
rbåì
 *
åì
, 
rbnode
 *
node
);

	@src/vr_rdb.c

1 
	~<vr_c‹e.h
>

4 
	$rdbSave
(*
fûíame
) {

5  
VR_OK
;

6 
	}
}

8 
	$rdbRemoveTempFûe
(
pid_t
 
chûdpid
) {

9 
tmpfûe
[256];

11 
	`¢¥ötf
(
tmpfûe
,—mpfûe),"ãmp-%d.rdb", (Ë
chûdpid
);

12 
	`u∆ök
(
tmpfûe
);

13 
	}
}

	@src/vr_rdb.c

1 
	~<vr_c‹e.h
>

4 
	$rdbSave
(*
fûíame
) {

5  
VR_OK
;

6 
	}
}

8 
	$rdbRemoveTempFûe
(
pid_t
 
chûdpid
) {

9 
tmpfûe
[256];

11 
	`¢¥ötf
(
tmpfûe
,—mpfûe),"ãmp-%d.rdb", (Ë
chûdpid
);

12 
	`u∆ök
(
tmpfûe
);

13 
	}
}

	@src/vr_rdb.h

1 #i‚de‡
_VR_RDB_H_


2 
	#_VR_RDB_H_


	)

17 
	#RDB_6BITLEN
 0

	)

18 
	#RDB_14BITLEN
 1

	)

19 
	#RDB_32BITLEN
 2

	)

20 
	#RDB_ENCVAL
 3

	)

21 
	#RDB_LENERR
 
UINT_MAX


	)

26 
	#RDB_ENC_INT8
 0

	)

27 
	#RDB_ENC_INT16
 1

	)

28 
	#RDB_ENC_INT32
 2

	)

29 
	#RDB_ENC_LZF
 3

	)

31 
	sßvï¨am
 {

32 
time_t
 
	m£c⁄ds
;

33 
	mch™ges
;

36 
rdbSave
(*
fûíame
);

37 
rdbRemoveTempFûe
(
pid_t
 
chûdpid
);

	@src/vr_rdb.h

1 #i‚de‡
_VR_RDB_H_


2 
	#_VR_RDB_H_


	)

17 
	#RDB_6BITLEN
 0

	)

18 
	#RDB_14BITLEN
 1

	)

19 
	#RDB_32BITLEN
 2

	)

20 
	#RDB_ENCVAL
 3

	)

21 
	#RDB_LENERR
 
UINT_MAX


	)

26 
	#RDB_ENC_INT8
 0

	)

27 
	#RDB_ENC_INT16
 1

	)

28 
	#RDB_ENC_INT32
 2

	)

29 
	#RDB_ENC_LZF
 3

	)

31 
	sßvï¨am
 {

32 
time_t
 
	m£c⁄ds
;

33 
	mch™ges
;

36 
rdbSave
(*
fûíame
);

37 
rdbRemoveTempFûe
(
pid_t
 
chûdpid
);

	@src/vr_replication.c

1 
	~<vr_c‹e.h
>

3 
vr_ª∂iˇti⁄
 
	gª∂
;

5 
	$vr_ª∂iˇti⁄_öô
()

7 
	`vr_evíéo›_öô
(&
ª∂
.
vñ
,1000);

9 
ª∂
.
rﬁe
 = 
REPLICATION_ROLE_MASTER
;

10 
ª∂
.
ma°î
 = 
NULL
;

11 
ª∂
.
ˇched_ma°î
 = 
NULL
;

12 
ª∂
.
¶aves
 = 
NULL
;

13 
ª∂
.
ª∂_no_¶aves_sö˚
 = 0;

14 
ª∂
.
ª∂_mö_¶aves_to_wrôe
 = 0;

15 
ª∂
.
ª∂_mö_¶aves_max_œg
 = 0;

16 
ª∂
.
ª∂_good_¶aves_cou¡
 = 0;

17 
ª∂
.
ª∂_°©e
 = 
REPL_STATE_NONE
;

18 
ª∂
.
ª∂_down_sö˚
 = 0;

21 
ª∂
.
ª∂_backlog
 = 
NULL
;

22 
ª∂
.
ª∂_backlog_size
 = 
CONFIG_DEFAULT_REPL_BACKLOG_SIZE
;

23 
ª∂
.
ª∂_backlog_hi°Àn
 = 0;

24 
ª∂
.
ª∂_backlog_idx
 = 0;

25 
ª∂
.
ª∂_backlog_off
 = 0;

26 
ª∂
.
ª∂_backlog_time_limô
 = 
CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT
;

27 
ª∂
.
ª∂_no_¶aves_sö˚
 = 
	`time
(
NULL
);

29 
ª∂
.
¶aves
 = 
	`dli°Cª©e
();

31  
VR_OK
;

32 
	}
}

34 
	$vr_ª∂iˇti⁄_deöô
()

36 
	`vr_evíéo›_deöô
(&
ª∂
.
vñ
);

38 i‡(
ª∂
.
ma°î
 !
NULL
) {

39 
	`‰ìClõ¡
(
ª∂
.
ma°î
);

40 
ª∂
.
ma°î
 = 
NULL
;

43 i‡(
ª∂
.
ˇched_ma°î
 !
NULL
) {

44 
	`‰ìClõ¡
(
ª∂
.
ˇched_ma°î
);

45 
ª∂
.
ˇched_ma°î
 = 
NULL
;

48 i‡(
ª∂
.
ª∂_backlog
 !
NULL
) {

49 
	`d‰ì
(
ª∂
.
ª∂_backlog
);

50 
ª∂
.
ª∂_backlog
 = 
NULL
;

53 i‡(
ª∂
.
¶aves
 !
NULL
) {

54 
˛õ¡
 *
¶ave
;

55 
¶ave
 = 
	`dli°P›
(
ª∂
.
¶aves
)) {

56 
	`‰ìClõ¡
(
¶ave
);

58 
	`dli°Rñó£
(
ª∂
.
¶aves
);

59 
ª∂
.
¶aves
 = 
NULL
;

61 
	}
}

68 
	$unblockClõ¡WaôögRïliˇs
(
˛õ¡
 *
c
) {

69 
dli°Node
 *
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_waôög_acks
,c);

70 
	`ASSERT
(
 
 !
NULL
);

71 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_waôög_acks
,
 
);

72 
	}
}

80 
	$ª‰eshGoodSœvesCou¡
() {

81 
dli°Iãr
 
li
;

82 
dli°Node
 *
 
;

83 
good
 = 0;

85 i‡(!
ª∂
.
ª∂_mö_¶aves_to_wrôe
 ||

86 !
ª∂
.
ª∂_mö_¶aves_max_œg
) ;

88 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

89 (
 
 = 
	`dli°Next
(&
li
))) {

90 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

91 
time_t
 
œg
 = 
ª∂
.
vñ
.
unixtime
 - 
¶ave
->
ª∂_ack_time
;

93 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 &&

94 
œg
 <
ª∂
.
ª∂_mö_¶aves_max_œg
Ë
good
++;

96 
ª∂
.
ª∂_good_¶aves_cou¡
 = 
good
;

97 
	}
}

102 
	$ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
() {

103 
ª∂
.
ma°î
 = 
NULL
;

104 
ª∂
.
ª∂_°©e
 = 
REPL_STATE_CONNECT
;

105 
ª∂
.
ª∂_down_sö˚
 =Ñïl.
vñ
.
unixtime
;

109 
	}
}

133 
	$ª∂iˇti⁄CacheMa°î
(
˛õ¡
 *
c
) {

134 
	`ASSERT
(
ª∂
.
ma°î
 !
NULL
 &&Ñïl.
ˇched_ma°î
 == NULL);

135 
	`log_debug
(
LOG_NOTICE
,"CachingÅhe disconnected master state.");

138 
	`u∆ökClõ¡
(
c
);

142 
ª∂
.
ˇched_ma°î
 =Ñïl.
ma°î
;

145 i‡(
c
->
≥îid
) {

146 
	`sds‰ì
(
c
->
≥îid
);

147 
c
->
≥îid
 = 
NULL
;

153 
	`ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

154 
	}
}

161 *
	$ª∂iˇti⁄GëSœveName
(
˛õ¡
 *
c
) {

162 
buf
[
VR_INET_PEER_ID_LEN
];

163 
ù
[
VR_INET_ADDRSTRLEN
];

165 
ù
[0] = '\0';

166 
buf
[0] = '\0';

168  
buf
;

169 
	}
}

184 
	$ª∂c⁄fComm™d
(
˛õ¡
 *
c
) {

185 
j
;

187 i‡((
c
->
¨gc
 % 2) == 0) {

190 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

195 
j
 = 1; j < 
c
->
¨gc
; j+=2) {

196 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"listening-port")) {

197 
p‹t
;

199 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
j
+1],

200 &
p‹t
,
NULL
Ë!
VR_OK
))

202 
c
->
¶ave_li°íög_p‹t
 = 
p‹t
;

203 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"capa")) {

205 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
+1]->
±r
,"eof"))

206 
c
->
¶ave_ˇ∑
 |
SLAVE_CAPA_EOF
;

207 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"ack")) {

211 
off£t
;

213 i‡(!(
c
->
Êags
 & 
CLIENT_SLAVE
)) ;

214 i‡((
	`gëL⁄gL⁄gFromObje˘
(
c
->
¨gv
[
j
+1], &
off£t
Ë!
VR_OK
))

216 i‡(
off£t
 > 
c
->
ª∂_ack_off
)

217 
c
->
ª∂_ack_off
 = 
off£t
;

218 
c
->
ª∂_ack_time
 = c->
vñ
->
unixtime
;

222 i‡(
c
->
ª∂_put_⁄löe_⁄_ack
 && c->
ª∂°©e
 =
SLAVE_STATE_ONLINE
)

223 
	`putSœveO∆öe
(
c
);

226 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"getack")) {

229 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ma°î
Ë
	`ª∂iˇti⁄SídAck
();

232 
	`addRïlyEº‹F‹m©
(
c
,"Unrecognized REPLCONF option: %s",

233 (*)
c
->
¨gv
[
j
]->
±r
);

237 
	`addRïly
(
c
,
sh¨ed
.
ok
);

238 
	}
}

252 
	$putSœveO∆öe
(
˛õ¡
 *
¶ave
) {

253 
¶ave
->
ª∂°©e
 = 
SLAVE_STATE_ONLINE
;

254 
¶ave
->
ª∂_put_⁄löe_⁄_ack
 = 0;

255 
¶ave
->
ª∂_ack_time
 = sœve->
vñ
->
unixtime
;

256 i‡(
	`´Cª©eFûeEvít
(
¶ave
->
vñ
->
ñ
, sœve->
c⁄n
->
sd
, 
AE_WRITABLE
,

257 
£ndRïlyToClõ¡
, 
¶ave
Ë=
AE_ERR
) {

258 
	`log_w¨n
("u«bÀÅÿªgi°î wrôabÀÉvíàf‹ sœvêbulkÅøns„r: %s", 
	`°ªº‹
(
î∫o
));

259 
	`‰ìClõ¡
(
¶ave
);

262 
	`ª‰eshGoodSœvesCou¡
();

263 
	`log_debug
(
LOG_NOTICE
,"Synchronization with slave %s succeeded",

264 
	`ª∂iˇti⁄GëSœveName
(
¶ave
));

265 
	}
}

270 
	$ª∂iˇti⁄SídAck
() {

271 
˛õ¡
 *
c
 = 
ª∂
.
ma°î
;

273 i‡(
c
 !
NULL
) {

274 
c
->
Êags
 |
CLIENT_MASTER_FORCE_REPLY
;

275 
	`addRïlyMu…iBulkLí
(
c
,3);

276 
	`addRïlyBulkCSåög
(
c
,"REPLCONF");

277 
	`addRïlyBulkCSåög
(
c
,"ACK");

278 
	`addRïlyBulkL⁄gL⁄g
(
c
,c->
ª∂off
);

279 
c
->
Êags
 &~
CLIENT_MASTER_FORCE_REPLY
;

281 
	}
}

283 
	$ª∂iˇti⁄FìdM⁄ô‹s
(
˛õ¡
 *
c
, 
dli°
 *
m⁄ô‹s
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

284 
dli°Node
 *
 
;

285 
dli°Iãr
 
li
;

286 
j
;

287 
sds
 
cmdª¥
 = 
	`sd¢ew
("+");

288 
robj
 *
cmdobj
;

289 
timevÆ
 
tv
;

291 
	`gëtimeofday
(&
tv
,
NULL
);

292 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"%ld.%06ld ",()
tv
.
tv_£c
,(Èv.
tv_u£c
);

293 i‡(
c
->
Êags
 & 
CLIENT_LUA
) {

294 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%dÜua] ",
di˘id
);

295 } i‡(
c
->
Êags
 & 
CLIENT_UNIX_SOCKET
) {

296 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%d unix:%s] ",
di˘id
,
£rvî
.
unixsockë
);

298 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%d %s] ",
di˘id
,
	`gëClõ¡PìrId
(
c
));

301 
j
 = 0; j < 
¨gc
; j++) {

302 i‡(
¨gv
[
j
]->
ícodög
 =
OBJ_ENCODING_INT
) {

303 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥, "\"%ld\"", ()
¨gv
[
j
]->
±r
);

305 
cmdª¥
 = 
	`sdsˇåïr
(cmdª¥,(*)
¨gv
[
j
]->
±r
,

306 
	`sd¶í
(
¨gv
[
j
]->
±r
));

308 i‡(
j
 !
¨gc
-1)

309 
cmdª¥
 = 
	`sdsˇéí
(cmdrepr," ",1);

311 
cmdª¥
 = 
	`sdsˇéí
(cmdrepr,"\r\n",2);

312 
cmdobj
 = 
	`¸óãObje˘
(
OBJ_STRING
,
cmdª¥
);

314 
	`dli°Rewöd
(
m⁄ô‹s
,&
li
);

315 (
 
 = 
	`dli°Next
(&
li
))) {

316 
˛õ¡
 *
m⁄ô‹
 = 
 
->
vÆue
;

317 
	`addRïly
(
m⁄ô‹
,
cmdobj
);

319 
	`de¸RefCou¡
(
cmdobj
);

320 
	}
}

326 
	$„edRïliˇti⁄Backlog
(*
±r
, 
size_t
 
Àn
) {

327 *
p
 = 
±r
;

329 
ª∂
.
ma°î_ª∂_off£t
 +
Àn
;

333 
Àn
) {

334 
size_t
 
thi¶í
 = 
ª∂
.
ª∂_backlog_size
 -Ñïl.
ª∂_backlog_idx
;

335 i‡(
thi¶í
 > 
Àn
)Åhislen =Üen;

336 
	`mem˝y
(
ª∂
.
ª∂_backlog
+ª∂.
ª∂_backlog_idx
,
p
,
thi¶í
);

337 
ª∂
.
ª∂_backlog_idx
 +
thi¶í
;

338 i‡(
ª∂
.
ª∂_backlog_idx
 =ª∂.
ª∂_backlog_size
)

339 
ª∂
.
ª∂_backlog_idx
 = 0;

340 
Àn
 -
thi¶í
;

341 
p
 +
thi¶í
;

342 
ª∂
.
ª∂_backlog_hi°Àn
 +
thi¶í
;

344 i‡(
ª∂
.
ª∂_backlog_hi°Àn
 >Ñïl.
ª∂_backlog_size
)

345 
ª∂
.
ª∂_backlog_hi°Àn
 =Ñïl.
ª∂_backlog_size
;

347 
ª∂
.
ª∂_backlog_off
 =Ñïl.
ma°î_ª∂_off£t
 -

348 
ª∂
.
ª∂_backlog_hi°Àn
 + 1;

349 
	}
}

353 
	$„edRïliˇti⁄BacklogWôhObje˘
(
robj
 *
o
) {

354 
Œ°r
[
LONG_STR_SIZE
];

355 *
p
;

356 
size_t
 
Àn
;

358 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

359 
Àn
 = 
	`Œ2°rög
(
Œ°r
,÷l°r),()
o
->
±r
);

360 
p
 = 
Œ°r
;

362 
Àn
 = 
	`sd¶í
(
o
->
±r
);

363 
p
 = 
o
->
±r
;

365 
	`„edRïliˇti⁄Backlog
(
p
,
Àn
);

366 
	}
}

368 
	$ª∂iˇti⁄FìdSœves
(
dli°
 *
¶aves
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

369 
dli°Node
 *
 
;

370 
dli°Iãr
 
li
;

371 
j
, 
Àn
;

372 
Œ°r
[
LONG_STR_SIZE
];

376 i‡(
ª∂
.
ª∂_backlog
 =
NULL
 && 
	`dli°Lígth
(
¶aves
) == 0) ;

379 
	`ASSERT
(!(
	`dli°Lígth
(
¶aves
Ë!0 && 
ª∂
.
ª∂_backlog
 =
NULL
));

382 i‡(
ª∂
.
¶ave£ldb
 !
di˘id
) {

383 
robj
 *
£À˘cmd
;

386 i‡(
di˘id
 >0 && di˘id < 
PROTO_SHARED_SELECT_CMDS
) {

387 
£À˘cmd
 = 
sh¨ed
.
£À˘
[
di˘id
];

389 
di˘id_Àn
;

391 
di˘id_Àn
 = 
	`Œ2°rög
(
Œ°r
,÷l°r),
di˘id
);

392 
£À˘cmd
 = 
	`¸óãObje˘
(
OBJ_STRING
,

393 
	`sdsˇçrötf
(
	`sd£m±y
(),

395 
di˘id_Àn
, 
Œ°r
));

399 i‡(
ª∂
.
ª∂_backlog
Ë
	`„edRïliˇti⁄BacklogWôhObje˘
(
£À˘cmd
);

402 
	`dli°Rewöd
(
¶aves
,&
li
);

403 (
 
 = 
	`dli°Next
(&
li
))) {

404 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

405 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_WAIT_BGSAVE_START
) ;

406 
	`addRïly
(
¶ave
,
£À˘cmd
);

409 i‡(
di˘id
 < 0 || di˘id >
PROTO_SHARED_SELECT_CMDS
)

410 
	`de¸RefCou¡
(
£À˘cmd
);

412 
ª∂
.
¶ave£ldb
 = 
di˘id
;

415 i‡(
ª∂
.
ª∂_backlog
) {

416 
aux
[
LONG_STR_SIZE
+3];

419 
aux
[0] = '*';

420 
Àn
 = 
	`Œ2°rög
(
aux
+1,◊ux)-1,
¨gc
);

421 
aux
[
Àn
+1] = '\r';

422 
aux
[
Àn
+2] = '\n';

423 
	`„edRïliˇti⁄Backlog
(
aux
,
Àn
+3);

425 
j
 = 0; j < 
¨gc
; j++) {

426 
objÀn
 = 
	`°rögObje˘Lí
(
¨gv
[
j
]);

431 
aux
[0] = '$';

432 
Àn
 = 
	`Œ2°rög
(
aux
+1,◊ux)-1,
objÀn
);

433 
aux
[
Àn
+1] = '\r';

434 
aux
[
Àn
+2] = '\n';

435 
	`„edRïliˇti⁄Backlog
(
aux
,
Àn
+3);

436 
	`„edRïliˇti⁄BacklogWôhObje˘
(
¨gv
[
j
]);

437 
	`„edRïliˇti⁄Backlog
(
aux
+
Àn
+1,2);

442 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

443 (
 
 = 
	`dli°Next
(&
li
))) {

444 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

447 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_WAIT_BGSAVE_START
) ;

454 
	`addRïlyMu…iBulkLí
(
¶ave
,
¨gc
);

458 
j
 = 0; j < 
¨gc
; j++)

459 
	`addRïlyBulk
(
¶ave
,
¨gv
[
j
]);

461 
	}
}

	@src/vr_replication.c

1 
	~<vr_c‹e.h
>

3 
vr_ª∂iˇti⁄
 
	gª∂
;

5 
	$vr_ª∂iˇti⁄_öô
()

7 
	`vr_evíéo›_öô
(&
ª∂
.
vñ
,1000);

9 
ª∂
.
rﬁe
 = 
REPLICATION_ROLE_MASTER
;

10 
ª∂
.
ma°î
 = 
NULL
;

11 
ª∂
.
ˇched_ma°î
 = 
NULL
;

12 
ª∂
.
¶aves
 = 
NULL
;

13 
ª∂
.
ª∂_no_¶aves_sö˚
 = 0;

14 
ª∂
.
ª∂_mö_¶aves_to_wrôe
 = 0;

15 
ª∂
.
ª∂_mö_¶aves_max_œg
 = 0;

16 
ª∂
.
ª∂_good_¶aves_cou¡
 = 0;

17 
ª∂
.
ª∂_°©e
 = 
REPL_STATE_NONE
;

18 
ª∂
.
ª∂_down_sö˚
 = 0;

21 
ª∂
.
ª∂_backlog
 = 
NULL
;

22 
ª∂
.
ª∂_backlog_size
 = 
CONFIG_DEFAULT_REPL_BACKLOG_SIZE
;

23 
ª∂
.
ª∂_backlog_hi°Àn
 = 0;

24 
ª∂
.
ª∂_backlog_idx
 = 0;

25 
ª∂
.
ª∂_backlog_off
 = 0;

26 
ª∂
.
ª∂_backlog_time_limô
 = 
CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT
;

27 
ª∂
.
ª∂_no_¶aves_sö˚
 = 
	`time
(
NULL
);

29 
ª∂
.
¶aves
 = 
	`dli°Cª©e
();

31  
VR_OK
;

32 
	}
}

34 
	$vr_ª∂iˇti⁄_deöô
()

36 
	`vr_evíéo›_deöô
(&
ª∂
.
vñ
);

38 i‡(
ª∂
.
ma°î
 !
NULL
) {

39 
	`‰ìClõ¡
(
ª∂
.
ma°î
);

40 
ª∂
.
ma°î
 = 
NULL
;

43 i‡(
ª∂
.
ˇched_ma°î
 !
NULL
) {

44 
	`‰ìClõ¡
(
ª∂
.
ˇched_ma°î
);

45 
ª∂
.
ˇched_ma°î
 = 
NULL
;

48 i‡(
ª∂
.
ª∂_backlog
 !
NULL
) {

49 
	`d‰ì
(
ª∂
.
ª∂_backlog
);

50 
ª∂
.
ª∂_backlog
 = 
NULL
;

53 i‡(
ª∂
.
¶aves
 !
NULL
) {

54 
˛õ¡
 *
¶ave
;

55 
¶ave
 = 
	`dli°P›
(
ª∂
.
¶aves
)) {

56 
	`‰ìClõ¡
(
¶ave
);

58 
	`dli°Rñó£
(
ª∂
.
¶aves
);

59 
ª∂
.
¶aves
 = 
NULL
;

61 
	}
}

68 
	$unblockClõ¡WaôögRïliˇs
(
˛õ¡
 *
c
) {

69 
dli°Node
 *
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_waôög_acks
,c);

70 
	`ASSERT
(
 
 !
NULL
);

71 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_waôög_acks
,
 
);

72 
	}
}

80 
	$ª‰eshGoodSœvesCou¡
() {

81 
dli°Iãr
 
li
;

82 
dli°Node
 *
 
;

83 
good
 = 0;

85 i‡(!
ª∂
.
ª∂_mö_¶aves_to_wrôe
 ||

86 !
ª∂
.
ª∂_mö_¶aves_max_œg
) ;

88 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

89 (
 
 = 
	`dli°Next
(&
li
))) {

90 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

91 
time_t
 
œg
 = 
ª∂
.
vñ
.
unixtime
 - 
¶ave
->
ª∂_ack_time
;

93 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 &&

94 
œg
 <
ª∂
.
ª∂_mö_¶aves_max_œg
Ë
good
++;

96 
ª∂
.
ª∂_good_¶aves_cou¡
 = 
good
;

97 
	}
}

102 
	$ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
() {

103 
ª∂
.
ma°î
 = 
NULL
;

104 
ª∂
.
ª∂_°©e
 = 
REPL_STATE_CONNECT
;

105 
ª∂
.
ª∂_down_sö˚
 =Ñïl.
vñ
.
unixtime
;

109 
	}
}

133 
	$ª∂iˇti⁄CacheMa°î
(
˛õ¡
 *
c
) {

134 
	`ASSERT
(
ª∂
.
ma°î
 !
NULL
 &&Ñïl.
ˇched_ma°î
 == NULL);

135 
	`log_debug
(
LOG_NOTICE
,"CachingÅhe disconnected master state.");

138 
	`u∆ökClõ¡
(
c
);

142 
ª∂
.
ˇched_ma°î
 =Ñïl.
ma°î
;

145 i‡(
c
->
≥îid
) {

146 
	`sds‰ì
(
c
->
≥îid
);

147 
c
->
≥îid
 = 
NULL
;

153 
	`ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

154 
	}
}

161 *
	$ª∂iˇti⁄GëSœveName
(
˛õ¡
 *
c
) {

162 
buf
[
VR_INET_PEER_ID_LEN
];

163 
ù
[
VR_INET_ADDRSTRLEN
];

165 
ù
[0] = '\0';

166 
buf
[0] = '\0';

168  
buf
;

169 
	}
}

184 
	$ª∂c⁄fComm™d
(
˛õ¡
 *
c
) {

185 
j
;

187 i‡((
c
->
¨gc
 % 2) == 0) {

190 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

195 
j
 = 1; j < 
c
->
¨gc
; j+=2) {

196 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"listening-port")) {

197 
p‹t
;

199 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
j
+1],

200 &
p‹t
,
NULL
Ë!
VR_OK
))

202 
c
->
¶ave_li°íög_p‹t
 = 
p‹t
;

203 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"capa")) {

205 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
+1]->
±r
,"eof"))

206 
c
->
¶ave_ˇ∑
 |
SLAVE_CAPA_EOF
;

207 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"ack")) {

211 
off£t
;

213 i‡(!(
c
->
Êags
 & 
CLIENT_SLAVE
)) ;

214 i‡((
	`gëL⁄gL⁄gFromObje˘
(
c
->
¨gv
[
j
+1], &
off£t
Ë!
VR_OK
))

216 i‡(
off£t
 > 
c
->
ª∂_ack_off
)

217 
c
->
ª∂_ack_off
 = 
off£t
;

218 
c
->
ª∂_ack_time
 = c->
vñ
->
unixtime
;

222 i‡(
c
->
ª∂_put_⁄löe_⁄_ack
 && c->
ª∂°©e
 =
SLAVE_STATE_ONLINE
)

223 
	`putSœveO∆öe
(
c
);

226 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"getack")) {

229 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ma°î
Ë
	`ª∂iˇti⁄SídAck
();

232 
	`addRïlyEº‹F‹m©
(
c
,"Unrecognized REPLCONF option: %s",

233 (*)
c
->
¨gv
[
j
]->
±r
);

237 
	`addRïly
(
c
,
sh¨ed
.
ok
);

238 
	}
}

252 
	$putSœveO∆öe
(
˛õ¡
 *
¶ave
) {

253 
¶ave
->
ª∂°©e
 = 
SLAVE_STATE_ONLINE
;

254 
¶ave
->
ª∂_put_⁄löe_⁄_ack
 = 0;

255 
¶ave
->
ª∂_ack_time
 = sœve->
vñ
->
unixtime
;

256 i‡(
	`´Cª©eFûeEvít
(
¶ave
->
vñ
->
ñ
, sœve->
c⁄n
->
sd
, 
AE_WRITABLE
,

257 
£ndRïlyToClõ¡
, 
¶ave
Ë=
AE_ERR
) {

258 
	`log_w¨n
("u«bÀÅÿªgi°î wrôabÀÉvíàf‹ sœvêbulkÅøns„r: %s", 
	`°ªº‹
(
î∫o
));

259 
	`‰ìClõ¡
(
¶ave
);

262 
	`ª‰eshGoodSœvesCou¡
();

263 
	`log_debug
(
LOG_NOTICE
,"Synchronization with slave %s succeeded",

264 
	`ª∂iˇti⁄GëSœveName
(
¶ave
));

265 
	}
}

270 
	$ª∂iˇti⁄SídAck
() {

271 
˛õ¡
 *
c
 = 
ª∂
.
ma°î
;

273 i‡(
c
 !
NULL
) {

274 
c
->
Êags
 |
CLIENT_MASTER_FORCE_REPLY
;

275 
	`addRïlyMu…iBulkLí
(
c
,3);

276 
	`addRïlyBulkCSåög
(
c
,"REPLCONF");

277 
	`addRïlyBulkCSåög
(
c
,"ACK");

278 
	`addRïlyBulkL⁄gL⁄g
(
c
,c->
ª∂off
);

279 
c
->
Êags
 &~
CLIENT_MASTER_FORCE_REPLY
;

281 
	}
}

283 
	$ª∂iˇti⁄FìdM⁄ô‹s
(
˛õ¡
 *
c
, 
dli°
 *
m⁄ô‹s
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

284 
dli°Node
 *
 
;

285 
dli°Iãr
 
li
;

286 
j
;

287 
sds
 
cmdª¥
 = 
	`sd¢ew
("+");

288 
robj
 *
cmdobj
;

289 
timevÆ
 
tv
;

291 
	`gëtimeofday
(&
tv
,
NULL
);

292 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"%ld.%06ld ",()
tv
.
tv_£c
,(Èv.
tv_u£c
);

293 i‡(
c
->
Êags
 & 
CLIENT_LUA
) {

294 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%dÜua] ",
di˘id
);

295 } i‡(
c
->
Êags
 & 
CLIENT_UNIX_SOCKET
) {

296 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%d unix:%s] ",
di˘id
,
£rvî
.
unixsockë
);

298 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%d %s] ",
di˘id
,
	`gëClõ¡PìrId
(
c
));

301 
j
 = 0; j < 
¨gc
; j++) {

302 i‡(
¨gv
[
j
]->
ícodög
 =
OBJ_ENCODING_INT
) {

303 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥, "\"%ld\"", ()
¨gv
[
j
]->
±r
);

305 
cmdª¥
 = 
	`sdsˇåïr
(cmdª¥,(*)
¨gv
[
j
]->
±r
,

306 
	`sd¶í
(
¨gv
[
j
]->
±r
));

308 i‡(
j
 !
¨gc
-1)

309 
cmdª¥
 = 
	`sdsˇéí
(cmdrepr," ",1);

311 
cmdª¥
 = 
	`sdsˇéí
(cmdrepr,"\r\n",2);

312 
cmdobj
 = 
	`¸óãObje˘
(
OBJ_STRING
,
cmdª¥
);

314 
	`dli°Rewöd
(
m⁄ô‹s
,&
li
);

315 (
 
 = 
	`dli°Next
(&
li
))) {

316 
˛õ¡
 *
m⁄ô‹
 = 
 
->
vÆue
;

317 
	`addRïly
(
m⁄ô‹
,
cmdobj
);

319 
	`de¸RefCou¡
(
cmdobj
);

320 
	}
}

326 
	$„edRïliˇti⁄Backlog
(*
±r
, 
size_t
 
Àn
) {

327 *
p
 = 
±r
;

329 
ª∂
.
ma°î_ª∂_off£t
 +
Àn
;

333 
Àn
) {

334 
size_t
 
thi¶í
 = 
ª∂
.
ª∂_backlog_size
 -Ñïl.
ª∂_backlog_idx
;

335 i‡(
thi¶í
 > 
Àn
)Åhislen =Üen;

336 
	`mem˝y
(
ª∂
.
ª∂_backlog
+ª∂.
ª∂_backlog_idx
,
p
,
thi¶í
);

337 
ª∂
.
ª∂_backlog_idx
 +
thi¶í
;

338 i‡(
ª∂
.
ª∂_backlog_idx
 =ª∂.
ª∂_backlog_size
)

339 
ª∂
.
ª∂_backlog_idx
 = 0;

340 
Àn
 -
thi¶í
;

341 
p
 +
thi¶í
;

342 
ª∂
.
ª∂_backlog_hi°Àn
 +
thi¶í
;

344 i‡(
ª∂
.
ª∂_backlog_hi°Àn
 >Ñïl.
ª∂_backlog_size
)

345 
ª∂
.
ª∂_backlog_hi°Àn
 =Ñïl.
ª∂_backlog_size
;

347 
ª∂
.
ª∂_backlog_off
 =Ñïl.
ma°î_ª∂_off£t
 -

348 
ª∂
.
ª∂_backlog_hi°Àn
 + 1;

349 
	}
}

353 
	$„edRïliˇti⁄BacklogWôhObje˘
(
robj
 *
o
) {

354 
Œ°r
[
LONG_STR_SIZE
];

355 *
p
;

356 
size_t
 
Àn
;

358 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

359 
Àn
 = 
	`Œ2°rög
(
Œ°r
,÷l°r),()
o
->
±r
);

360 
p
 = 
Œ°r
;

362 
Àn
 = 
	`sd¶í
(
o
->
±r
);

363 
p
 = 
o
->
±r
;

365 
	`„edRïliˇti⁄Backlog
(
p
,
Àn
);

366 
	}
}

368 
	$ª∂iˇti⁄FìdSœves
(
dli°
 *
¶aves
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

369 
dli°Node
 *
 
;

370 
dli°Iãr
 
li
;

371 
j
, 
Àn
;

372 
Œ°r
[
LONG_STR_SIZE
];

376 i‡(
ª∂
.
ª∂_backlog
 =
NULL
 && 
	`dli°Lígth
(
¶aves
) == 0) ;

379 
	`ASSERT
(!(
	`dli°Lígth
(
¶aves
Ë!0 && 
ª∂
.
ª∂_backlog
 =
NULL
));

382 i‡(
ª∂
.
¶ave£ldb
 !
di˘id
) {

383 
robj
 *
£À˘cmd
;

386 i‡(
di˘id
 >0 && di˘id < 
PROTO_SHARED_SELECT_CMDS
) {

387 
£À˘cmd
 = 
sh¨ed
.
£À˘
[
di˘id
];

389 
di˘id_Àn
;

391 
di˘id_Àn
 = 
	`Œ2°rög
(
Œ°r
,÷l°r),
di˘id
);

392 
£À˘cmd
 = 
	`¸óãObje˘
(
OBJ_STRING
,

393 
	`sdsˇçrötf
(
	`sd£m±y
(),

395 
di˘id_Àn
, 
Œ°r
));

399 i‡(
ª∂
.
ª∂_backlog
Ë
	`„edRïliˇti⁄BacklogWôhObje˘
(
£À˘cmd
);

402 
	`dli°Rewöd
(
¶aves
,&
li
);

403 (
 
 = 
	`dli°Next
(&
li
))) {

404 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

405 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_WAIT_BGSAVE_START
) ;

406 
	`addRïly
(
¶ave
,
£À˘cmd
);

409 i‡(
di˘id
 < 0 || di˘id >
PROTO_SHARED_SELECT_CMDS
)

410 
	`de¸RefCou¡
(
£À˘cmd
);

412 
ª∂
.
¶ave£ldb
 = 
di˘id
;

415 i‡(
ª∂
.
ª∂_backlog
) {

416 
aux
[
LONG_STR_SIZE
+3];

419 
aux
[0] = '*';

420 
Àn
 = 
	`Œ2°rög
(
aux
+1,◊ux)-1,
¨gc
);

421 
aux
[
Àn
+1] = '\r';

422 
aux
[
Àn
+2] = '\n';

423 
	`„edRïliˇti⁄Backlog
(
aux
,
Àn
+3);

425 
j
 = 0; j < 
¨gc
; j++) {

426 
objÀn
 = 
	`°rögObje˘Lí
(
¨gv
[
j
]);

431 
aux
[0] = '$';

432 
Àn
 = 
	`Œ2°rög
(
aux
+1,◊ux)-1,
objÀn
);

433 
aux
[
Àn
+1] = '\r';

434 
aux
[
Àn
+2] = '\n';

435 
	`„edRïliˇti⁄Backlog
(
aux
,
Àn
+3);

436 
	`„edRïliˇti⁄BacklogWôhObje˘
(
¨gv
[
j
]);

437 
	`„edRïliˇti⁄Backlog
(
aux
+
Àn
+1,2);

442 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

443 (
 
 = 
	`dli°Next
(&
li
))) {

444 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

447 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_WAIT_BGSAVE_START
) ;

454 
	`addRïlyMu…iBulkLí
(
¶ave
,
¨gc
);

458 
j
 = 0; j < 
¨gc
; j++)

459 
	`addRïlyBulk
(
¶ave
,
¨gv
[
j
]);

461 
	}
}

	@src/vr_replication.h

1 #i‚de‡
_VR_REPLICATION_H_


2 
	#_VR_REPLICATION_H_


	)

10 
	#REPL_STATE_NONE
 0

	)

11 
	#REPL_STATE_CONNECT
 1

	)

12 
	#REPL_STATE_CONNECTING
 2

	)

17 
	#REPL_STATE_RECEIVE_PONG
 3

	)

21 
	#REPL_STATE_SEND_AUTH
 4

	)

23 
	#REPL_STATE_RECEIVE_AUTH
 5

	)

27 
	#REPL_STATE_SEND_PORT
 6

	)

29 
	#REPL_STATE_RECEIVE_PORT
 7

	)

32 
	#REPL_STATE_SEND_CAPA
 8

	)

34 
	#REPL_STATE_RECEIVE_CAPA
 9

	)

37 
	#REPL_STATE_SEND_PSYNC
 10

	)

39 
	#REPL_STATE_RECEIVE_PSYNC
 11

	)

45 
	#REPL_STATE_TRANSFER
 12

	)

47 
	#REPL_STATE_CONNECTED
 13

	)

56 
	#SLAVE_STATE_WAIT_BGSAVE_START
 6

	)

58 
	#SLAVE_STATE_WAIT_BGSAVE_END
 7

	)

60 
	#SLAVE_STATE_SEND_BULK
 8

	)

62 
	#SLAVE_STATE_ONLINE
 9

	)

66 
	#SLAVE_CAPA_NONE
 0

	)

67 
	#SLAVE_CAPA_EOF
 (1<<0Ë

	)

70 
	#CONFIG_REPL_SYNCIO_TIMEOUT
 5

	)

72 
	#REPLICATION_ROLE_MASTER
 0

	)

73 
	#REPLICATION_ROLE_SLAVE
 1

	)

76 
	#CONFIG_DEFAULT_REPL_BACKLOG_SIZE
 (1024*1024Ë

	)

77 
	#CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT
 (60*60Ë

	)

78 
	#CONFIG_REPL_BACKLOG_MIN_SIZE
 (1024*16Ë

	)

81 
	svr_ª∂iˇti⁄
 {

82 
vr_evíéo›
 
	mvñ
;

84 
	mrﬁe
;

88 
dli°
 *
	m¶aves
;

90 
	m¶ave£ldb
;

92 
	mma°î_ª∂_off£t
;

94 
	mª∂_pög_¶ave_≥riod
;

96 *
	mª∂_backlog
;

98 
	mª∂_backlog_size
;

100 
	mª∂_backlog_hi°Àn
;

102 
	mª∂_backlog_idx
;

104 
	mª∂_backlog_off
;

107 
time_t
 
	mª∂_backlog_time_limô
;

110 
time_t
 
	mª∂_no_¶aves_sö˚
;

114 
	mª∂_mö_¶aves_to_wrôe
;

115 
	mª∂_mö_¶aves_max_œg
;

117 
	mª∂_good_¶aves_cou¡
;

119 
	mª∂_diskÀss_sync
;

121 
	mª∂_diskÀss_sync_dñay
;

125 *
	mma°îauth
;

127 *
	mma°îho°
;

129 
	mma°îp‹t
;

131 
	mª∂_timeout
;

133 
˛õ¡
 *
	mma°î
;

135 
˛õ¡
 *
	mˇched_ma°î
;

137 
	mª∂_syncio_timeout
;

139 
	mª∂_°©e
;

141 
off_t
 
	mª∂_å™s„r_size
;

143 
off_t
 
	mª∂_å™s„r_ªad
;

145 
off_t
 
	mª∂_å™s„r_œ°_fsync_off
;

147 
	mª∂_å™s„r_s
;

149 
	mª∂_å™s„r_fd
;

152 *
	mª∂_å™s„r_tmpfûe
;

153 
time_t
 
	mª∂_å™s„r_œ°io
;

154 
	mª∂_£rve_°Æe_d©a
;

155 
	mª∂_¶ave_ro
;

156 
time_t
 
	mª∂_down_sö˚
;

158 
	mª∂_dißbÀ_t˝_nodñay
;

160 
	m¶ave_¥i‹ôy
;

162 
	mª∂_ma°î_runid
[
CONFIG_RUN_ID_SIZE
+1];

163 
	mª∂_ma°î_öôül_off£t
;

166 
vr_ª∂iˇti⁄
 
ª∂
;

168 
vr_ª∂iˇti⁄_öô
();

169 
vr_ª∂iˇti⁄_deöô
();

171 
unblockClõ¡WaôögRïliˇs
(
˛õ¡
 *
c
);

172 
ª‰eshGoodSœvesCou¡
();

173 
ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

174 
ª∂iˇti⁄CacheMa°î
(
˛õ¡
 *
c
);

175 *
ª∂iˇti⁄GëSœveName
(
˛õ¡
 *
c
);

176 
ª∂c⁄fComm™d
(
˛õ¡
 *
c
);

177 
putSœveO∆öe
(
˛õ¡
 *
¶ave
);

178 
ª∂iˇti⁄SídAck
();

179 
ª∂iˇti⁄FìdM⁄ô‹s
(
˛õ¡
 *
c
, 
dli°
 *
m⁄ô‹s
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

180 
ª∂iˇti⁄FìdSœves
(
dli°
 *
¶aves
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

181 
„edRïliˇti⁄BacklogWôhObje˘
(
robj
 *
o
);

182 
„edRïliˇti⁄Backlog
(*
±r
, 
size_t
 
Àn
);

	@src/vr_replication.h

1 #i‚de‡
_VR_REPLICATION_H_


2 
	#_VR_REPLICATION_H_


	)

10 
	#REPL_STATE_NONE
 0

	)

11 
	#REPL_STATE_CONNECT
 1

	)

12 
	#REPL_STATE_CONNECTING
 2

	)

17 
	#REPL_STATE_RECEIVE_PONG
 3

	)

21 
	#REPL_STATE_SEND_AUTH
 4

	)

23 
	#REPL_STATE_RECEIVE_AUTH
 5

	)

27 
	#REPL_STATE_SEND_PORT
 6

	)

29 
	#REPL_STATE_RECEIVE_PORT
 7

	)

32 
	#REPL_STATE_SEND_CAPA
 8

	)

34 
	#REPL_STATE_RECEIVE_CAPA
 9

	)

37 
	#REPL_STATE_SEND_PSYNC
 10

	)

39 
	#REPL_STATE_RECEIVE_PSYNC
 11

	)

45 
	#REPL_STATE_TRANSFER
 12

	)

47 
	#REPL_STATE_CONNECTED
 13

	)

56 
	#SLAVE_STATE_WAIT_BGSAVE_START
 6

	)

58 
	#SLAVE_STATE_WAIT_BGSAVE_END
 7

	)

60 
	#SLAVE_STATE_SEND_BULK
 8

	)

62 
	#SLAVE_STATE_ONLINE
 9

	)

66 
	#SLAVE_CAPA_NONE
 0

	)

67 
	#SLAVE_CAPA_EOF
 (1<<0Ë

	)

70 
	#CONFIG_REPL_SYNCIO_TIMEOUT
 5

	)

72 
	#REPLICATION_ROLE_MASTER
 0

	)

73 
	#REPLICATION_ROLE_SLAVE
 1

	)

76 
	#CONFIG_DEFAULT_REPL_BACKLOG_SIZE
 (1024*1024Ë

	)

77 
	#CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT
 (60*60Ë

	)

78 
	#CONFIG_REPL_BACKLOG_MIN_SIZE
 (1024*16Ë

	)

81 
	svr_ª∂iˇti⁄
 {

82 
vr_evíéo›
 
	mvñ
;

84 
	mrﬁe
;

88 
dli°
 *
	m¶aves
;

90 
	m¶ave£ldb
;

92 
	mma°î_ª∂_off£t
;

94 
	mª∂_pög_¶ave_≥riod
;

96 *
	mª∂_backlog
;

98 
	mª∂_backlog_size
;

100 
	mª∂_backlog_hi°Àn
;

102 
	mª∂_backlog_idx
;

104 
	mª∂_backlog_off
;

107 
time_t
 
	mª∂_backlog_time_limô
;

110 
time_t
 
	mª∂_no_¶aves_sö˚
;

114 
	mª∂_mö_¶aves_to_wrôe
;

115 
	mª∂_mö_¶aves_max_œg
;

117 
	mª∂_good_¶aves_cou¡
;

119 
	mª∂_diskÀss_sync
;

121 
	mª∂_diskÀss_sync_dñay
;

125 *
	mma°îauth
;

127 *
	mma°îho°
;

129 
	mma°îp‹t
;

131 
	mª∂_timeout
;

133 
˛õ¡
 *
	mma°î
;

135 
˛õ¡
 *
	mˇched_ma°î
;

137 
	mª∂_syncio_timeout
;

139 
	mª∂_°©e
;

141 
off_t
 
	mª∂_å™s„r_size
;

143 
off_t
 
	mª∂_å™s„r_ªad
;

145 
off_t
 
	mª∂_å™s„r_œ°_fsync_off
;

147 
	mª∂_å™s„r_s
;

149 
	mª∂_å™s„r_fd
;

152 *
	mª∂_å™s„r_tmpfûe
;

153 
time_t
 
	mª∂_å™s„r_œ°io
;

154 
	mª∂_£rve_°Æe_d©a
;

155 
	mª∂_¶ave_ro
;

156 
time_t
 
	mª∂_down_sö˚
;

158 
	mª∂_dißbÀ_t˝_nodñay
;

160 
	m¶ave_¥i‹ôy
;

162 
	mª∂_ma°î_runid
[
CONFIG_RUN_ID_SIZE
+1];

163 
	mª∂_ma°î_öôül_off£t
;

166 
vr_ª∂iˇti⁄
 
ª∂
;

168 
vr_ª∂iˇti⁄_öô
();

169 
vr_ª∂iˇti⁄_deöô
();

171 
unblockClõ¡WaôögRïliˇs
(
˛õ¡
 *
c
);

172 
ª‰eshGoodSœvesCou¡
();

173 
ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

174 
ª∂iˇti⁄CacheMa°î
(
˛õ¡
 *
c
);

175 *
ª∂iˇti⁄GëSœveName
(
˛õ¡
 *
c
);

176 
ª∂c⁄fComm™d
(
˛õ¡
 *
c
);

177 
putSœveO∆öe
(
˛õ¡
 *
¶ave
);

178 
ª∂iˇti⁄SídAck
();

179 
ª∂iˇti⁄FìdM⁄ô‹s
(
˛õ¡
 *
c
, 
dli°
 *
m⁄ô‹s
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

180 
ª∂iˇti⁄FìdSœves
(
dli°
 *
¶aves
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

181 
„edRïliˇti⁄BacklogWôhObje˘
(
robj
 *
o
);

182 
„edRïliˇti⁄Backlog
(*
±r
, 
size_t
 
Àn
);

	@src/vr_scripting.c

1 
	~<vr_c‹e.h
>

3 
	$s¸ùtComm™d
(
˛õ¡
 *
c
) {

4 
	`addRïly
(
c
,
sh¨ed
.
ok
);

5 
	}
}

	@src/vr_scripting.c

1 
	~<vr_c‹e.h
>

3 
	$s¸ùtComm™d
(
˛õ¡
 *
c
) {

4 
	`addRïly
(
c
,
sh¨ed
.
ok
);

5 
	}
}

	@src/vr_scripting.h

1 #i‚de‡
_VR_SCRIPTING_H_


2 
	#_VR_SCRIPTING_H_


	)

4 
s¸ùtComm™d
(
˛õ¡
 *
c
);

	@src/vr_scripting.h

1 #i‚de‡
_VR_SCRIPTING_H_


2 
	#_VR_SCRIPTING_H_


	)

4 
s¸ùtComm™d
(
˛õ¡
 *
c
);

	@src/vr_server.c

1 
	~<sys/ut¢ame.h
>

3 
	~<vr_c‹e.h
>

6 
vr_£rvî
 
	g£rvî
;

9 
sh¨edObje˘sSåu˘
 
	gsh¨ed
;

13 
	$di˘SåHash
(c⁄° *
key
) {

14  
	`di˘GíHashFun˘i⁄
((*)
key
, 
	`°æí
((*)key));

15 
	}
}

18 
	$di˘SåCa£Hash
(c⁄° *
key
) {

19  
	`di˘GíCa£HashFun˘i⁄
((*)
key
, 
	`°æí
((*)key));

20 
	}
}

23 
	$di˘SdsHash
(c⁄° *
key
) {

24  
	`di˘GíHashFun˘i⁄
((*)
key
, 
	`sd¶í
((*)key));

25 
	}
}

28 
	$di˘SdsCa£Hash
(c⁄° *
key
) {

29  
	`di˘GíCa£HashFun˘i⁄
((*)
key
, 
	`sd¶í
((*)key));

30 
	}
}

33 
	$di˘SåKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

34 c⁄° *
key2
)

36 
l1
,
l2
;

37 
	`DICT_NOTUSED
(
¥ivd©a
);

39 
l1
 = 
	`°æí
((*)
key1
);

40 
l2
 = 
	`°æí
((*)
key2
);

41 i‡(
l1
 !
l2
)  0;

42  
	`memcmp
(
key1
, 
key2
, 
l1
) == 0;

43 
	}
}

48 
	$di˘SåKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
,

49 c⁄° *
key2
)

51 
	`DICT_NOTUSED
(
¥ivd©a
);

53  
	`°rˇ£cmp
(
key1
, 
key2
) == 0;

54 
	}
}

57 
	$di˘SdsKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

58 c⁄° *
key2
)

60 
l1
,
l2
;

61 
	`DICT_NOTUSED
(
¥ivd©a
);

63 
l1
 = 
	`sd¶í
((
sds
)
key1
);

64 
l2
 = 
	`sd¶í
((
sds
)
key2
);

65 i‡(
l1
 !
l2
)  0;

66  
	`memcmp
(
key1
, 
key2
, 
l1
) == 0;

67 
	}
}

72 
	$di˘SdsKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
,

73 c⁄° *
key2
)

75 
	`DICT_NOTUSED
(
¥ivd©a
);

77  
	`°rˇ£cmp
(
key1
, 
key2
) == 0;

78 
	}
}

81 
	$di˘SdsKeyDupFromSå
(*
¥ivd©a
, c⁄° *
key
)

83 
	`DICT_NOTUSED
(
¥ivd©a
);

85  
	`sd¢ew
(
key
);

86 
	}
}

89 
	$di˘SdsDe°ru˘‹
(*
¥ivd©a
, *
vÆ
)

91 
	`DICT_NOTUSED
(
¥ivd©a
);

93 
	`sds‰ì
(
vÆ
);

94 
	}
}

97 
	$di˘Obje˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

99 
	`DICT_NOTUSED
(
¥ivd©a
);

101 i‡(
vÆ
 =
NULL
) ;

102 
	`‰ìObje˘
(
vÆ
);

103 
	}
}

106 
	$di˘EncObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

107 c⁄° *
key2
)

109 
robj
 *
o1
 = (robj*Ë
key1
, *
o2
 = (robj*Ë
key2
;

110 
robj
 *
o1_√w
, *
o2_√w
;

111 
cmp
;

113 i‡(
o1
->
ícodög
 =
OBJ_ENCODING_INT
 &&

114 
o2
->
ícodög
 =
OBJ_ENCODING_INT
)

115  
o1
->
±r
 =
o2
->ptr;

117 
o1_√w
 = 
	`gëDecodedObje˘
(
o1
);

118 
o2_√w
 = 
	`gëDecodedObje˘
(
o2
);

119 
cmp
 = 
	`di˘SdsKeyCom∑ª
(
¥ivd©a
,
o1_√w
->
±r
,
o2_√w
->ptr);

120 i‡(
o1_√w
 !
o1
Ë
	`‰ìObje˘
(o1_new);

121 i‡(
o2_√w
 !
o2
Ë
	`‰ìObje˘
(o2_new);

122  
cmp
;

123 
	}
}

126 
	$di˘EncObjHash
(c⁄° *
key
) {

127 
robj
 *
o
 = (robj*Ë
key
;

129 i‡(
	`sdsEncodedObje˘
(
o
)) {

130  
	`di˘GíHashFun˘i⁄
(
o
->
±r
, 
	`sd¶í
((
sds
)o->ptr));

132 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

133 
buf
[32];

134 
Àn
;

136 
Àn
 = 
	`Œ2°rög
(
buf
,32,()
o
->
±r
);

137  
	`di˘GíHashFun˘i⁄
((*)
buf
, 
Àn
);

139 
hash
;

140 
robj
 *
o_√w
;

142 
o_√w
 = 
	`gëDecodedObje˘
(
o
);

143 
hash
 = 
	`di˘GíHashFun˘i⁄
(
o_√w
->
±r
, 
	`sd¶í
((
sds
)o_new->ptr));

144 i‡(
o_√w
!
o
Ë
	`‰ìObje˘
(o_new);

145  
hash
;

148 
	}
}

151 
	$di˘ObjHash
(c⁄° *
key
) {

152 c⁄° 
robj
 *
o
 = 
key
;

153  
	`di˘GíHashFun˘i⁄
(
o
->
±r
, 
	`sd¶í
((
sds
)o->ptr));

154 
	}
}

157 
	$di˘ObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

158 c⁄° *
key2
)

160 c⁄° 
robj
 *
o1
 = 
key1
, *
o2
 = 
key2
;

161  
	`di˘SdsKeyCom∑ª
(
¥ivd©a
,
o1
->
±r
,
o2
->ptr);

162 
	}
}

165 
	$di˘Li°De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

167 
	`DICT_NOTUSED
(
¥ivd©a
);

168 
	`dli°Rñó£
((
dli°
*)
vÆ
);

169 
	}
}

172 
di˘Ty≥
 
	ghashDi˘Ty≥
 = {

173 
di˘EncObjHash
,

174 
NULL
,

175 
NULL
,

176 
di˘EncObjKeyCom∑ª
,

177 
di˘Obje˘De°ru˘‹
,

178 
di˘Obje˘De°ru˘‹


182 
di˘Ty≥
 
	g£tDi˘Ty≥
 = {

183 
di˘EncObjHash
,

184 
NULL
,

185 
NULL
,

186 
di˘EncObjKeyCom∑ª
,

187 
di˘Obje˘De°ru˘‹
,

188 
NULL


192 
di˘Ty≥
 
	gz£tDi˘Ty≥
 = {

193 
di˘EncObjHash
,

194 
NULL
,

195 
NULL
,

196 
di˘EncObjKeyCom∑ª
,

197 
di˘Obje˘De°ru˘‹
,

198 
NULL


205 
	$¸óãSh¨edObje˘s
() {

206 
j
;

207 
robj
 **
obj
;

209 
sh¨ed
.
¸lf
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("\r\n"));

210 
sh¨ed
.
ok
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+OK\r\n"));

211 
sh¨ed
.
îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("-ERR\r\n"));

212 
sh¨ed
.
em±ybulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("$0\r\n\r\n"));

213 
sh¨ed
.
czîo
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":0\r\n"));

214 
sh¨ed
.
c⁄e
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":1\r\n"));

215 
sh¨ed
.
˙eg⁄e
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":-1\r\n"));

216 
sh¨ed
.
nuŒbulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("$-1\r\n"));

217 
sh¨ed
.
nuŒmu…ibulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*-1\r\n"));

218 
sh¨ed
.
em±ymu…ibulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*0\r\n"));

219 
sh¨ed
.
p⁄g
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+PONG\r\n"));

220 
sh¨ed
.
queued
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+QUEUED\r\n"));

221 
sh¨ed
.
em±ysˇn
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*2\r\n$1\r\n0\r\n*0\r\n"));

222 
sh¨ed
.
wr⁄gty≥îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

224 
sh¨ed
.
nokeyîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

226 
sh¨ed
.
sy¡axîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

228 
sh¨ed
.
ßmeobje˘îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

230 
sh¨ed
.
outo‰™gìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

232 
sh¨ed
.
nos¸ùãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

234 
sh¨ed
.
lﬂdögîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

236 
sh¨ed
.
¶ows¸ùãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

238 
sh¨ed
.
ma°îdow√º
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

240 
sh¨ed
.
bgßvìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

242 
sh¨ed
.
ro¶avìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

244 
sh¨ed
.
nﬂuthîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

246 
sh¨ed
.
nﬂdmöîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

248 
sh¨ed
.
oomîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

250 
sh¨ed
.
exeˇb‹ãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

252 
sh¨ed
.
n‹ïliˇ£º
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

254 
sh¨ed
.
busykeyîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

256 
sh¨ed
.
•a˚
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(" "));

257 
sh¨ed
.
cﬁ⁄
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":"));

258 
sh¨ed
.
∂us
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+"));

260 
j
 = 0; j < 
PROTO_SHARED_SELECT_CMDS
; j++) {

261 
di˘id_°r
[64];

262 
di˘id_Àn
;

264 
di˘id_Àn
 = 
	`Œ2°rög
(
di˘id_°r
,(di˘id_°r),
j
);

265 
sh¨ed
.
£À˘
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

266 
	`sdsˇçrötf
(
	`sd£m±y
(),

268 
di˘id_Àn
, 
di˘id_°r
));

270 
sh¨ed
.
mesßgebulk
 = 
	`¸óãSåögObje˘
("$7\r\nmessage\r\n",13);

271 
sh¨ed
.
pmesßgebulk
 = 
	`¸óãSåögObje˘
("$8\r\npmessage\r\n",14);

272 
sh¨ed
.
subs¸ibebulk
 = 
	`¸óãSåögObje˘
("$9\r\nsubscribe\r\n",15);

273 
sh¨ed
.
unsubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$11\r\nunsubscribe\r\n",18);

274 
sh¨ed
.
psubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$10\r\npsubscribe\r\n",17);

275 
sh¨ed
.
punsubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$12\r\npunsubscribe\r\n",19);

276 
sh¨ed
.
dñ
 = 
	`¸óãSåögObje˘
("DEL",3);

277 
sh¨ed
.
Ω›
 = 
	`¸óãSåögObje˘
("RPOP",4);

278 
sh¨ed
.
Õ›
 = 
	`¸óãSåögObje˘
("LPOP",4);

279 
sh¨ed
.
Õush
 = 
	`¸óãSåögObje˘
("LPUSH",5);

280 
j
 = 0; j < 
OBJ_SHARED_INTEGERS
; j++) {

281 
sh¨ed
.
öãgîs
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,(*)()j);

282 
sh¨ed
.
öãgîs
[
j
]->
ícodög
 = 
OBJ_ENCODING_INT
;

284 
j
 = 0; j < 
OBJ_SHARED_BULKHDR_LEN
; j++) {

285 
sh¨ed
.
mbulkhdr
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

286 
	`sdsˇçrötf
(
	`sd£m±y
(),"*%d\r\n",
j
));

287 
sh¨ed
.
bulkhdr
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

288 
	`sdsˇçrötf
(
	`sd£m±y
(),"$%d\r\n",
j
));

294 
sh¨ed
.
mö°rög
 = 
	`¸óãSåögObje˘
("minstring",9);

295 
sh¨ed
.
max°rög
 = 
	`¸óãSåögObje˘
("maxstring",9);

297 
sh¨ed
.
outofcom∂exôylimô
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

301 
obj
 = &
sh¨ed
; *obj !
NULL
; obj ++) {

302 (*
obj
)->
c⁄°™t
 = 1;

304 
	}
}

308 
	$öô_£rvî
(
ö°™˚
 *
nci
)

310 
ªt
;

311 
uöt32_t
 
i
;

312 
ªdisDb
 *
db
;

314 
£rvî
.
pid
 = 
	`gëpid
();

315 
£rvî
.
¨ch_bôs
 = (() == 8) ? 64 : 32;

316 
£rvî
.
°¨âime
 = 
	`time
(
NULL
);

317 
	`gë_øndom_hex_ch¨s
(
£rvî
.
runid
, 
CONFIG_RUN_ID_SIZE
);

319 
£rvî
.
comm™ds
 = 
	`di˘Cª©e
(&
comm™dTabÀDi˘Ty≥
,
NULL
);

321 
	`p›uœãComm™dTabÀ
();

323 
£rvî
.
dñComm™d
 = 
	`lookupComm™dByCSåög
("del");

324 
£rvî
.
mu…iComm™d
 = 
	`lookupComm™dByCSåög
("multi");

325 
£rvî
.
ÕushComm™d
 = 
	`lookupComm™dByCSåög
("lpush");

326 
£rvî
.
Õ›Comm™d
 = 
	`lookupComm™dByCSåög
("lpop");

327 
£rvî
.
Ω›Comm™d
 = 
	`lookupComm™dByCSåög
("rpop");

328 
£rvî
.
§emComm™d
 = 
	`lookupComm™dByCSåög
("srem");

329 
£rvî
.
execComm™d
 = 
	`lookupComm™dByCSåög
("exec");

332 
c⁄f
 = 
	`c⁄f_¸óã
(
nci
->
c⁄f_fûíame
);

335 
ªt
 = 
	`p›uœãComm™dsNìdAdmö∑ss
();

336 i‡(
ªt
 !
VR_OK
) {

337 
	`log_îr‹
("PopulateÇeedádminpass commands failed");

338  
VR_ERROR
;

341 
£rvî
.
c⁄figfûe
 = 
	`gëAbsﬁuãP©h
(
nci
->
c⁄f_fûíame
);

342 
£rvî
.
hz
 = 10;

343 
£rvî
.
db um
 = 
c£rvî
->
d©aba£s
;

344 
£rvî
.
dböum
 = 
c£rvî
->
öã∫Æ_dbs_≥r_d©aba£s
;

345 
£rvî
.
dbnum
 = sîvî.
db um
*£rvî.
dböum
;

347 
	`d¨øy_öô
(&
£rvî
.
dbs
, sîvî.
dbnum
, (
ªdisDb
));

348 
£rvî
.
pidfûe
 = 
nci
->
pid_fûíame
;

349 
£rvî
.
execuèbÀ
 = 
NULL
;

350 
£rvî
.
a˘ivîehashög
 = 
CONFIG_DEFAULT_ACTIVE_REHASHING
;

352 
£rvî
.
˛õ¡_max_quîybuf_Àn
 = 
PROTO_MAX_QUERYBUF_LEN
;

355 
i
 = 0; i < 
£rvî
.
dbnum
; i ++) {

356 
db
 = 
	`d¨øy_push
(&
£rvî
.
dbs
);

357 
	`ªdisDbInô
(
db
);

360 
£rvî
.
˛õ¡s
 = 
	`dli°Cª©e
();

362 
£rvî
.
m⁄ô‹s
 = 
	`dli°Cª©e
();

364 
£rvî
.
lﬂdög
 = 0;

366 
£rvî
.
lua_timedout
 = 0;

368 
£rvî
.
aof_°©e
 = 
AOF_OFF
;

370 
£rvî
.
°›_wrôes_⁄_bgßve_îr
 = 0;

372 
£rvî
.
ªady_keys
 = 
	`dli°Cª©e
();

374 
£rvî
.
sy°em_mem‹y_size
 = 
	`dÆloc_gë_mem‹y_size
();

376 
£rvî
.
rdb_chûd_pid
 = -1;

377 
£rvî
.
aof_chûd_pid
 = -1;

379 
£rvî
.
hash_max_zùli°_íåõs
 = 
OBJ_HASH_MAX_ZIPLIST_ENTRIES
;

380 
£rvî
.
hash_max_zùli°_vÆue
 = 
OBJ_HASH_MAX_ZIPLIST_VALUE
;

381 
£rvî
.
li°_max_zùli°_size
 = 
OBJ_LIST_MAX_ZIPLIST_SIZE
;

382 
£rvî
.
li°_com¥ess_dïth
 = 
OBJ_LIST_COMPRESS_DEPTH
;

383 
£rvî
.
£t_max_öt£t_íåõs
 = 
OBJ_SET_MAX_INTSET_ENTRIES
;

384 
£rvî
.
z£t_max_zùli°_íåõs
 = 
OBJ_ZSET_MAX_ZIPLIST_ENTRIES
;

385 
£rvî
.
z£t_max_zùli°_vÆue
 = 
OBJ_ZSET_MAX_ZIPLIST_VALUE
;

386 
£rvî
.
hŒ_•¨£_max_byãs
 = 
CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES
;

388 
£rvî
.
nŸify_key•a˚_evíts
 = 0;

390 
	`¶owlogInô
();

392 
	`vr_ª∂iˇti⁄_öô
();

394 
	`¸óãSh¨edObje˘s
();

399 
£rvî
.
p‹t
 = 
c£rvî
->port;

403 
ªt
 = 
	`w‹kîs_öô
(
nci
->
thªad_num
);

404 i‡(
ªt
 !
VR_OK
) {

405 
	`log_îr‹
("Init workerÅhreads failed");

406  
VR_ERROR
;

411 
ªt
 = 
	`ma°î_öô
(
c⁄f
);

412 i‡(
ªt
 !
VR_OK
) {

413 
	`log_îr‹
("Init masterÅhread failed");

414  
VR_ERROR
;

417 
ªt
 = 
	`backíds_öô
(1);

418 i‡(
ªt
 !
VR_OK
) {

419 
	`log_îr‹
("Init backendÅhreads failed");

420  
VR_ERROR
;

423 
	`log_debug
(
LOG_NOTICE
, "mem‹yáŒo¯lockÅy≥: %s", 
	`mÆloc_lock_ty≥
());

424 
	`log_debug
(
LOG_NOTICE
, "mÆlo¯lib: %s", 
DMALLOC_LIB
);

426 
	`log_debug
(
LOG_NOTICE
, "°©†lockÅy≥: %s", 
STATS_LOCK_TYPE
);

428  
VR_OK
;

429 
	}
}

431 
	$gëLRUClock
() {

432  (
	`vr_m£c_now
()/
LRU_CLOCK_RESOLUTION
Ë& 
LRU_CLOCK_MAX
;

433 
	}
}

444 
	#EVICTION_SAMPLES_ARRAY_SIZE
 16

	)

445 
	$evi˘i⁄PoﬁP›uœã
(
di˘
 *
ßm∂edi˘
, di˘ *
keydi˘
,

446 
evi˘i⁄PoﬁE¡ry
 *
poﬁ
, 
maxmem‹y_ßm∂es
) {

447 
j
, 
k
, 
cou¡
;

448 
di˘E¡ry
 *
_ßm∂es
[
EVICTION_SAMPLES_ARRAY_SIZE
];

449 
di˘E¡ry
 **
ßm∂es
;

453 i‡(
maxmem‹y_ßm∂es
 <
EVICTION_SAMPLES_ARRAY_SIZE
) {

454 
ßm∂es
 = 
_ßm∂es
;

456 
ßm∂es
 = 
	`dÆloc
((ßm∂es[0])*
maxmem‹y_ßm∂es
);

459 
cou¡
 = 
	`di˘GëSomeKeys
(
ßm∂edi˘
,
ßm∂es
,
maxmem‹y_ßm∂es
);

460 
j
 = 0; j < 
cou¡
; j++) {

461 
idÀ
;

462 
sds
 
key
;

463 
robj
 *
o
;

464 
di˘E¡ry
 *
de
;

466 
de
 = 
ßm∂es
[
j
];

467 
key
 = 
	`di˘GëKey
(
de
);

471 i‡(
ßm∂edi˘
 !
keydi˘
Ë
de
 = 
	`di˘Föd
(keydi˘, 
key
);

472 
o
 = 
	`di˘GëVÆ
(
de
);

473 
idÀ
 = 
	`e°im©eObje˘IdÀTime
(
o
);

478 
k
 = 0;

479 
k
 < 
MAXMEMORY_EVICTION_POOL_SIZE
 &&

480 
poﬁ
[
k
].
key
 &&

481 
poﬁ
[
k
].
idÀ
 < idle) k++;

482 i‡(
k
 =0 && 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 !
NULL
) {

486 } i‡(
k
 < 
MAXMEMORY_EVICTION_POOL_SIZE
 && 
poﬁ
[k].
key
 =
NULL
) {

491 i‡(
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 =
NULL
) {

494 
	`memmove
(
poﬁ
+
k
+1,pool+k,

495 (
poﬁ
[0])*(
MAXMEMORY_EVICTION_POOL_SIZE
-
k
-1));

498 
k
--;

501 
	`sds‰ì
(
poﬁ
[0].
key
);

502 
	`memmove
(
poﬁ
,poﬁ+1,’oﬁ[0])*
k
);

505 
poﬁ
[
k
].
key
 = 
	`sdsdup
(key);

506 
poﬁ
[
k
].
idÀ
 = idle;

508 i‡(
ßm∂es
 !
_ßm∂es
Ë
	`d‰ì
(samples);

509 
	}
}

511 
	$‰ìMem‹yIfNìded
(
vr_evíéo›
 *
vñ
) {

512 
size_t
 
mem_u£d
, 
mem_to‰ì
, 
mem_‰ìd
;

513 
m°ime_t
 
œãncy
, 
evi˘i⁄_œãncy
;

514 
keys_‰ìd
 = 0;

515 
maxmem‹y
;

516 
maxmem‹y_pﬁicy
, 
maxmem‹y_ßm∂es
;

517 
ªt
;

519 
maxmem‹y
 = 
vñ
->
cc
.maxmemory;

520 i‡(
	`dÆloc_u£d_mem‹y
(Ë<
maxmem‹y
)

521  
VR_OK
;

523 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYP
, &
maxmem‹y_pﬁicy
);

524 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_NO_EVICTION
)

525  
VR_ERROR
;

527 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYS
, &
maxmem‹y_ßm∂es
);

529 
j
, 
k
;

531 
j
 = 0; j < 
£rvî
.
dbnum
; j++) {

532 
be°vÆ
 = 0;

533 
sds
 
be°key
 = 
NULL
;

534 
di˘E¡ry
 *
de
;

535 
ªdisDb
 *
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
j
);

536 
di˘
 *dict;

538 
	`lockDbWrôe
(
db
);

539 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_LRU
 ||

540 
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_RANDOM
)

542 
di˘
 = 
db
->dict;

544 
di˘
 = 
db
->
expúes
;

546 i‡(
	`di˘Size
(
di˘
) == 0) {

547 
	`u∆ockDb
(
db
);

552 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_RANDOM
 ||

553 
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_RANDOM
)

555 
de
 = 
	`di˘GëR™domKey
(
di˘
);

556 
be°key
 = 
	`di˘GëKey
(
de
);

560 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_LRU
 ||

561 
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_LRU
)

563 
evi˘i⁄PoﬁE¡ry
 *
poﬁ
 = 
db
->
evi˘i⁄_poﬁ
;

565 
be°key
 =
NULL
) {

566 
	`evi˘i⁄PoﬁP›uœã
(
di˘
, 
db
->di˘, db->
evi˘i⁄_poﬁ
, 
maxmem‹y_ßm∂es
);

568 
k
 = 
MAXMEMORY_EVICTION_POOL_SIZE
-1; k >= 0; k--) {

569 i‡(
poﬁ
[
k
].
key
 =
NULL
) ;

570 
de
 = 
	`di˘Föd
(
di˘
,
poﬁ
[
k
].
key
);

573 
	`sds‰ì
(
poﬁ
[
k
].
key
);

575 
	`memmove
(
poﬁ
+
k
,pool+k+1,

576 (
poﬁ
[0])*(
MAXMEMORY_EVICTION_POOL_SIZE
-
k
-1));

579 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 = 
NULL
;

580 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
idÀ
 = 0;

584 i‡(
de
) {

585 
be°key
 = 
	`di˘GëKey
(
de
);

596 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_TTL
) {

597 
k
 = 0; k < 
maxmem‹y_ßm∂es
; k++) {

598 
sds
 
thiskey
;

599 
thisvÆ
;

601 
de
 = 
	`di˘GëR™domKey
(
di˘
);

602 
thiskey
 = 
	`di˘GëKey
(
de
);

603 
thisvÆ
 = (Ë
	`di˘GëVÆ
(
de
);

607 i‡(
be°key
 =
NULL
 || 
thisvÆ
 < 
be°vÆ
) {

608 
be°key
 = 
thiskey
;

609 
be°vÆ
 = 
thisvÆ
;

615 i‡(
be°key
) {

616 
robj
 *
keyobj
 = 
	`¸óãSåögObje˘
(
be°key
,
	`sd¶í
(bestkey));

617 
	`dbDñëe
(
db
,
keyobj
);

618 
	`‰ìObje˘
(
keyobj
);

619 
keys_‰ìd
++;

622 
	`u∆ockDb
(
db
);

624 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
, &
maxmem‹y
);

625 i‡(
	`dÆloc_u£d_mem‹y
(Ë<
maxmem‹y
) {

626 
°›
;

630 i‡(!
keys_‰ìd
) {

631  
VR_ERROR
;

634 
	`upd©e_°©s_add
(
vñ
->
°©s
, 
evi˘edkeys
, 
keys_‰ìd
);

635 
keys_‰ìd
 = 0;

638 
°›
:

639 
	`upd©e_°©s_add
(
vñ
->
°©s
, 
evi˘edkeys
, 
keys_‰ìd
);

640  
VR_OK
;

641 
	}
}

645 
	$pögComm™d
(
˛õ¡
 *
c
) {

647 i‡(
c
->
¨gc
 > 2) {

648 
	`addRïlyEº‹F‹m©
(
c
,"wrongÇumber ofárguments for '%s' command",

649 
c
->
cmd
->
«me
);

653 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
) {

654 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[2]);

655 
	`addRïlyBulkCBuf„r
(
c
,"pong",4);

656 i‡(
c
->
¨gc
 == 1)

657 
	`addRïlyBulkCBuf„r
(
c
,"",0);

659 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

661 i‡(
c
->
¨gc
 == 1)

662 
	`addRïly
(
c
,
sh¨ed
.
p⁄g
);

664 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

666 
	}
}

677 
	$time_ödïídít_°rcmp
(*
a
, *
b
) {

678 
buÁ
[
CONFIG_AUTHPASS_MAX_LEN
], 
bufb
[CONFIG_AUTHPASS_MAX_LEN];

683 
Æí
 = 
	`°æí
(
a
);

684 
bÀn
 = 
	`°æí
(
b
);

685 
j
;

686 
diff
 = 0;

691 i‡(
Æí
 > (
buÁ
Ë|| 
bÀn
 > (
bufb
))  1;

693 
	`mem£t
(
buÁ
,0,(bufa));

694 
	`mem£t
(
bufb
,0,(bufb));

697 
	`mem˝y
(
buÁ
,
a
,
Æí
);

698 
	`mem˝y
(
bufb
,
b
,
bÀn
);

702 
j
 = 0; j < (
buÁ
); j++) {

703 
diff
 |(
buÁ
[
j
] ^ 
bufb
[j]);

706 
diff
 |
Æí
 ^ 
bÀn
;

707  
diff
;

708 
	}
}

710 
	$authComm™d
(
˛õ¡
 *
c
) {

711 
sds
 
ªquúïass
;

713 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
ªquúïass
);

714 i‡(!
ªquúïass
) {

715 
	`addRïlyEº‹
(
c
,"Client sent AUTH, butÇoÖassword is set");

717 } i‡(!
	`time_ödïídít_°rcmp
(
c
->
¨gv
[1]->
±r
, 
ªquúïass
)) {

718 i‡(!
c
->
authítiˇãd
)

719 
c
->
authítiˇãd
 = 1;

720 
	`addRïly
(
c
,
sh¨ed
.
ok
);

722 
c
->
authítiˇãd
 = 0;

723 
	`addRïlyEº‹
(
c
,"invalidÖassword");

725 
	`sds‰ì
(
ªquúïass
);

726 
	}
}

728 
	$admöComm™d
(
˛õ¡
 *
c
) {

729 
sds
 
admö∑ss
;

731 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
admö∑ss
);

732 i‡(!
admö∑ss
) {

733 
	`addRïlyEº‹
(
c
,"Client sent ADMIN, butÇoÖassword is set");

735 } i‡(!
	`time_ödïídít_°rcmp
(
c
->
¨gv
[1]->
±r
, 
admö∑ss
)) {

736 
c
->
authítiˇãd
 = 2;

737 
	`addRïly
(
c
,
sh¨ed
.
ok
);

739 
c
->
authítiˇãd
 = 0;

740 
	`addRïlyEº‹
(
c
,"invalidÖassword");

742 
	`sds‰ì
(
admö∑ss
);

743 
	}
}

745 
	$htNìdsResize
(
di˘
 *dict) {

746 
size
, 
u£d
;

748 
size
 = 
	`di˘SlŸs
(
di˘
);

749 
u£d
 = 
	`di˘Size
(
di˘
);

750  (
size
 && 
u£d
 && sizê> 
DICT_HT_INITIAL_SIZE
 &&

751 (
u£d
*100/
size
 < 
HASHTABLE_MIN_FILL
));

752 
	}
}

754 
	skeys_°©i°ics
 {

755 
	mkeys_Æl
;

756 
	mvkeys_Æl
;

757 
	mavg_âl_Æl
;

758 
	m√xi°
;

764 
sds
 
	$gíVúeInfoSåög
(
vr_evíéo›
 *
vñ
, *
£˘i⁄
) {

765 
sds
 
öfo
 = 
	`sd£m±y
();

766 
time_t
 
u±ime
 = 
	`time
(
NULL
)-
£rvî
.
°¨âime
;

767 
j
, 
k
, 
numcomm™ds
;

768 
rußge
 
£lf_ru
;

769 
lﬁ
, 
bib
;

770 
Æl£˘i⁄s
 = 0, 
def£˘i⁄s
 = 0;

771 
£˘i⁄s
 = 0;

772 
d¨øy
 *
kss
 = 
NULL
;

774 i‡(
£˘i⁄
 =
NULL
) section = "default";

775 
Æl£˘i⁄s
 = 
	`°rˇ£cmp
(
£˘i⁄
,"all") == 0;

776 
def£˘i⁄s
 = 
	`°rˇ£cmp
(
£˘i⁄
,"default") == 0;

778 
	`gërußge
(
RUSAGE_SELF
, &
£lf_ru
);

781 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"server")) {

782 
ˇŒ_u«me
 = 1;

783 
ut¢ame
 
«me
;

784 *
mode
;

786 
mode
 = "standalone";

788 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

790 i‡(
ˇŒ_u«me
) {

792 
	`u«me
(&
«me
);

793 
ˇŒ_u«me
 = 0;

796 
öfo
 = 
	`sdsˇçrötf
(info,

814 
VR_VERSION_STRING
,

815 
mode
,

816 
«me
.
sy¢ame
,Çame.
ªÀa£
,Çame.
machöe
,

817 
£rvî
.
¨ch_bôs
,

818 
	`´GëApiName
(),

819 #ifde‡
__GNUC__


820 
__GNUC__
,
__GNUC_MINOR__
,
__GNUC_PATCHLEVEL__
,

824 (Ë
	`gëpid
(),

825 
£rvî
.
runid
,

826 
£rvî
.
p‹t
,

827 (
ötmax_t
)
u±ime
,

828 (
ötmax_t
)(
u±ime
/(3600*24)),

829 
£rvî
.
hz
,

830 
£rvî
.
execuèbÀ
 ? server.executable : "",

831 
£rvî
.
c⁄figfûe
 ? server.configfile : "",

832 
£rvî
.
db um
,

833 
£rvî
.
dböum
);

837 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"clients")) {

838 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

839 
öfo
 = 
	`sdsˇçrötf
(info,

842 
	`cuºít_˛õ¡s
());

846 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"memory")) {

847 
uöt32_t
 
idx
;

848 
vr_w‹kî
 *
w‹kî
;

849 
hmem
[64];

850 
≥ak_hmem
[64];

851 
tŸÆ_sy°em_hmem
[64];

852 
u£d_mem‹y_lua_hmem
[64];

853 
u£d_mem‹y_rss_hmem
[64];

854 
maxmem‹y_hmem
[64];

855 
size_t
 
vr_u£d_mem‹y
 = 
	`dÆloc_u£d_mem‹y
();

856 
size_t
 
tŸÆ_sy°em_mem
 = 
£rvî
.
sy°em_mem‹y_size
;

857 c⁄° *
evi˘_pﬁicy
;

858 
size_t
 
≥ak_mem‹y
 = 0, 
≥ak_mem‹y_f‹_⁄e_w‹kî
;

859 
maxmem‹y
;

860 
maxmem‹y_pﬁicy
;

866 
idx
 = 0; idx < 
	`d¨øy_n
(&
w‹kîs
); idx ++) {

867 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
idx
);

868 
	`upd©e_°©s_gë
(
w‹kî
->
vñ
.
°©s
, 
≥ak_mem‹y
,

869 &
≥ak_mem‹y_f‹_⁄e_w‹kî
);

870 i‡(
≥ak_mem‹y
 < 
≥ak_mem‹y_f‹_⁄e_w‹kî
)

871 
≥ak_mem‹y
 = 
≥ak_mem‹y_f‹_⁄e_w‹kî
;

873 i‡(
vr_u£d_mem‹y
 > 
≥ak_mem‹y
) {

874 
≥ak_mem‹y
 = 
vr_u£d_mem‹y
;

875 
	`upd©e_°©s_£t
(
vñ
->
°©s
, 
≥ak_mem‹y
, 
vr_u£d_mem‹y
);

878 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
maxmem‹y
);

879 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYP
,&
maxmem‹y_pﬁicy
);

880 
evi˘_pﬁicy
 = 
	`gë_evi˘pﬁicy_°rögs
(
maxmem‹y_pﬁicy
);

882 
	`byãsToHum™
(
hmem
,
vr_u£d_mem‹y
);

883 
	`byãsToHum™
(
≥ak_hmem
,
≥ak_mem‹y
);

884 
	`byãsToHum™
(
tŸÆ_sy°em_hmem
,
tŸÆ_sy°em_mem
);

885 
	`byãsToHum™
(
u£d_mem‹y_rss_hmem
,
vñ
->
ªsidít_£t_size
);

886 
	`byãsToHum™
(
maxmem‹y_hmem
,
maxmem‹y
);

888 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

889 
öfo
 = 
	`sdsˇçrötf
(info,

904 
vr_u£d_mem‹y
,

905 
hmem
,

906 
vñ
->
ªsidít_£t_size
,

907 
u£d_mem‹y_rss_hmem
,

908 
≥ak_mem‹y
,

909 
≥ak_hmem
,

910 ()
tŸÆ_sy°em_mem
,

911 
tŸÆ_sy°em_hmem
,

912 
maxmem‹y
,

913 
maxmem‹y_hmem
,

914 
evi˘_pﬁicy
,

915 ()
vñ
->
ªsidít_£t_size
/
vr_u£d_mem‹y
,

916 
DMALLOC_LIB


921 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"stats")) {

922 
uöt32_t
 
idx
;

923 
vr_°©s
 *
°©s
;

924 
°©_numc⁄√˘i⁄s
=0, 
°©_numcomm™ds
=0;

925 
°©_√t_öput_byãs
=0, 
°©_√t_ouçut_byãs
=0;

926 
°©_ªje˘ed_c⁄n
=0;

927 
°©_expúedkeys
=0;

928 
°©_evi˘edkeys
=0;

929 
°©_key•a˚_hôs
=0, 
°©_key•a˚_mis£s
=0;

930 
°©_numcomm™ds_›s
=0;

931 
°©_√t_öput_byãs_›s
=0, 
°©_√t_ouçut_byãs_›s
=0;

933 
idx
 = 0; idx < 
	`d¨øy_n
(&
w‹kîs
); idx ++) {

934 
°©s_vÆue
;

935 
vr_w‹kî
 *
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
idx
);

936 
°©s
 = 
w‹kî
->
vñ
.stats;

938 
	`upd©e_°©s_gë
(
°©s
, 
numcomm™ds
, &
°©s_vÆue
);

939 
°©_numcomm™ds
 +
°©s_vÆue
;

940 
	`upd©e_°©s_gë
(
°©s
, 
numc⁄√˘i⁄s
, &
°©s_vÆue
);

941 
°©_numc⁄√˘i⁄s
 +
°©s_vÆue
;

942 
	`upd©e_°©s_gë
(
°©s
, 
expúedkeys
, &
°©s_vÆue
);

943 
°©_expúedkeys
 +
°©s_vÆue
;

944 
	`upd©e_°©s_gë
(
°©s
, 
evi˘edkeys
, &
°©s_vÆue
);

945 
°©_evi˘edkeys
 +
°©s_vÆue
;

946 
	`upd©e_°©s_gë
(
°©s
, 
√t_öput_byãs
, &
°©s_vÆue
);

947 
°©_√t_öput_byãs
 +
°©s_vÆue
;

948 
	`upd©e_°©s_gë
(
°©s
, 
√t_ouçut_byãs
, &
°©s_vÆue
);

949 
°©_√t_ouçut_byãs
 +
°©s_vÆue
;

950 
	`upd©e_°©s_gë
(
°©s
, 
key•a˚_hôs
, &
°©s_vÆue
);

951 
°©_key•a˚_hôs
 +
°©s_vÆue
;

952 
	`upd©e_°©s_gë
(
°©s
, 
key•a˚_mis£s
, &
°©s_vÆue
);

953 
°©_key•a˚_mis£s
 +
°©s_vÆue
;

955 
°©_numcomm™ds_›s
 +
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_COMMAND
);

956 
°©_√t_öput_byãs_›s
 +()
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_NET_INPUT
)/1024;

957 
°©_√t_ouçut_byãs_›s
 +()
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_NET_OUTPUT
)/1024;

959 
idx
 = 0; idx < 
	`d¨øy_n
(&
backíds
); idx ++) {

960 
°©s_vÆue
;

961 
vr_backíd
 *
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
idx
);

962 
°©s
 = 
backíd
->
vñ
.stats;

964 
	`upd©e_°©s_gë
(
°©s
, 
expúedkeys
, &
°©s_vÆue
);

965 
°©_expúedkeys
 +
°©s_vÆue
;

967 
	`upd©e_°©s_gë
(
ma°î
.
vñ
.
°©s
, 
ªje˘ed_c⁄n
, &
°©_ªje˘ed_c⁄n
);

969 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

970 
öfo
 = 
	`sdsˇçrötf
(info,

984 
°©_numc⁄√˘i⁄s
,

985 
°©_numcomm™ds
,

986 
°©_numcomm™ds_›s
,

987 
°©_√t_öput_byãs
,

988 
°©_√t_ouçut_byãs
,

989 
°©_√t_öput_byãs_›s
,

990 
°©_√t_ouçut_byãs_›s
,

991 
°©_ªje˘ed_c⁄n
,

992 
°©_expúedkeys
,

993 
°©_evi˘edkeys
,

994 
°©_key•a˚_hôs
,

995 
°©_key•a˚_mis£s
);

999 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"cpu")) {

1000 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1001 
öfo
 = 
	`sdsˇçrötf
(info,

1005 ()
£lf_ru
.
ru_°ime
.
tv_£c
+()£lf_ru.ru_°ime.
tv_u£c
/1000000,

1006 ()
£lf_ru
.
ru_utime
.
tv_£c
+()£lf_ru.ru_utime.
tv_u£c
/1000000);

1010 i‡(
Æl£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"internal")) {

1011 
ªdisDb
 *
db
;

1012 
keys_°©i°ics
 *
ks
;

1013 
keys
, 
vkeys
, 
avg_âl
;

1015 
kss
 = 
	`d¨øy_¸óã
(
£rvî
.
db um
, (
keys_°©i°ics
));

1017 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1018 
öfo
 = 
	`sdsˇçrötf
(info, "# Internal\r\n");

1019 
j
 = 0; j < 
£rvî
.
db um
; j++) {

1020 
ks
 = 
	`d¨øy_push
(
kss
);

1021 
ks
->
keys_Æl
 = ks->
vkeys_Æl
 = ks->
avg_âl_Æl
 = 0;

1022 
ks
->
√xi°
 = 0;

1023 
k
 = 0; k < 
£rvî
.
dböum
; k ++) {

1024 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)(
j
*£rvî.
dböum
+
k
));

1025 
	`lockDbRód
(
db
);

1026 
keys
 = 
	`di˘Size
(
db
->
di˘
);

1027 
vkeys
 = 
	`di˘Size
(
db
->
expúes
);

1028 
avg_âl
 = 
db
->avg_ttl;

1029 
	`u∆ockDb
(
db
);

1030 i‡(
keys
 || 
vkeys
) {

1031 
öfo
 = 
	`sdsˇçrötf
(info,

1033 
j
, 
k
, 
keys
, 
vkeys
, 
db
->
avg_âl
);

1035 
ks
->
keys_Æl
 +
keys
;

1036 
ks
->
vkeys_Æl
 +
vkeys
;

1037 
ks
->
avg_âl_Æl
 +
avg_âl
;

1038 i‡(
avg_âl
 > 0Ë
ks
->
√xi°
 ++;

1044 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"keyspace")) {

1045 
ªdisDb
 *
db
;

1046 
keys_°©i°ics
 *
ks
;

1047 
keys_Æl
, 
vkeys_Æl
, 
avg_âl_Æl
;

1048 
√xi°
;

1050 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1051 
öfo
 = 
	`sdsˇçrötf
(info, "# Keyspace\r\n");

1052 i‡(
kss
 =
NULL
) {

1053 
j
 = 0; j < 
£rvî
.
db um
; j++) {

1054 
keys_Æl
 = 
vkeys_Æl
 = 
avg_âl_Æl
 = 0;

1055 
√xi°
 = 0;

1056 
k
 = 0; k < 
£rvî
.
dböum
; k ++) {

1057 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)(
j
*£rvî.
dböum
+
k
));

1058 
	`lockDbRód
(
db
);

1059 
keys_Æl
 +
	`di˘Size
(
db
->
di˘
);

1060 
vkeys_Æl
 +
	`di˘Size
(
db
->
expúes
);

1061 
avg_âl_Æl
 +
db
->
avg_âl
;

1062 i‡(
db
->
avg_âl
 > 0Ë
√xi°
 ++;

1063 
	`u∆ockDb
(
db
);

1065 i‡(
keys_Æl
 || 
vkeys_Æl
) {

1066 
öfo
 = 
	`sdsˇçrötf
(info,

1068 
j
, 
keys_Æl
, 
vkeys_Æl
, 
√xi°
>0?(
avg_âl_Æl
/nexist):0);

1072 
j
 = 0; j < 
£rvî
.
db um
; j ++) {

1073 
ks
 = 
	`d¨øy_gë
(
kss
, 
j
);

1074 i‡(
ks
->
keys_Æl
 || ks->
vkeys_Æl
) {

1075 
öfo
 = 
	`sdsˇçrötf
(info,

1077 
j
, 
ks
->
keys_Æl
, ks->
vkeys_Æl
,

1078 
ks
->
√xi°
>0?(ks->
avg_âl_Æl
/ks->nexist):0);

1084 
öfo
 = 
	`sdsˇçrötf
(info,"\n--------------------------create by:Âº†ËÅ™--------------------------------------\n\r");

1086 i‡(
kss
 !
NULL
) {

1087 
kss
->
√Àm
 = 0;

1088 
	`d¨øy_de°roy
(
kss
);

1089 
kss
 = 
NULL
;

1092  
öfo
;

1093 
	}
}

1095 
	$öfoComm™d
(
˛õ¡
 *
c
) {

1096 *
£˘i⁄
 = 
c
->
¨gc
 =2 ? c->
¨gv
[1]->
±r
 : "default";

1098 i‡(
c
->
¨gc
 > 2) {

1099 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1102 
	`addRïlyBulkSds
(
c
, 
	`gíVúeInfoSåög
(c->
vñ
, 
£˘i⁄
));

1103 
	}
}

1105 
	$echoComm™d
(
˛õ¡
 *
c
) {

1106 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

1107 
	}
}

1109 
	$timeComm™d
(
˛õ¡
 *
c
) {

1110 
timevÆ
 
tv
;

1114 
	`gëtimeofday
(&
tv
,
NULL
);

1115 
	`addRïlyMu…iBulkLí
(
c
,2);

1116 
	`addRïlyBulkL⁄gL⁄g
(
c
,
tv
.
tv_£c
);

1117 
	`addRïlyBulkL⁄gL⁄g
(
c
,
tv
.
tv_u£c
);

1118 
	}
}

1129 
	$adju°O≥nFûesLimô
(
max˛õ¡s
) {

1130 
æim_t
 
maxfûes
, 
föÆlimô
 = 0;

1131 
æim_t
 
ﬁdlimô
;

1132 
föÆmax˛õ¡s
;

1133 
æimô
 
limô
;

1134 
thªads
;

1136 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads
);

1137 
maxfûes
 = 
max˛õ¡s
+
thªads
*2+
CONFIG_MIN_RESERVED_FDS
;

1138 i‡(
	`gëæimô
(
RLIMIT_NOFILE
,&
limô
) == -1) {

1139 
	`log_w¨n
("UnableÅo obtainÅhe current NOFILEÜimit (%s),ássuming 1024ánd settingÅhe max clients configurationáccordingly.",

1140 
	`°ªº‹
(
î∫o
));

1141 
ﬁdlimô
 = 1024;

1142 
föÆlimô
 = 
ﬁdlimô
;

1144 
ﬁdlimô
 = 
limô
.
æim_cur
;

1148 i‡(
ﬁdlimô
 < 
maxfûes
) {

1149 
æim_t
 
be°limô
;

1150 
£ålimô_îr‹
 = 0;

1154 
be°limô
 = 
maxfûes
;

1155 
be°limô
 > 
ﬁdlimô
) {

1156 
æim_t
 
de¸_°ï
 = 16;

1158 
limô
.
æim_cur
 = 
be°limô
;

1159 
limô
.
æim_max
 = 
be°limô
;

1160 i‡(
	`£ålimô
(
RLIMIT_NOFILE
,&
limô
) != -1) ;

1161 
£ålimô_îr‹
 = 
î∫o
;

1165 i‡(
be°limô
 < 
de¸_°ï
) ;

1166 
be°limô
 -
de¸_°ï
;

1171 i‡(
be°limô
 < 
ﬁdlimô
) bestlimit = oldlimit;

1173 
föÆlimô
 = 
be°limô
;

1174 i‡(
be°limô
 < 
maxfûes
) {

1175 
	`log_w¨n
("YouÑequested maxclients of %d "

1177 
max˛õ¡s
,

1178 (Ë
maxfûes
);

1179 
	`log_w¨n
("Server can't set maximum open files "

1181 (Ë
maxfûes
, 
	`°ªº‹
(
£ålimô_îr‹
));

1182 
	`log_w¨n
("Current maximum open files is %llu. ",

1183 (Ë
be°limô
);

1185 
	`log_w¨n
("Increased maximumÇumber of open files "

1187 (Ë
maxfûes
,

1188 (Ë
ﬁdlimô
);

1191 
föÆlimô
 = 
maxfûes
;

1195 
föÆmax˛õ¡s
 = 
föÆlimô
-
thªads
*2-
CONFIG_MIN_RESERVED_FDS
;

1196 i‡(
föÆmax˛õ¡s
 < 1) {

1197 
	`log_w¨n
("Your current 'ulimit -n' "

1201 (Ë
ﬁdlimô
,

1202 (Ë
maxfûes
);

1206 i‡(
föÆlimô
 < 
maxfûes
) {

1207 
c⁄f_vÆue
 *
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1208 
cv
->
vÆue
 = 
	`sds‰oml⁄gl⁄g
(()
föÆmax˛õ¡s
);

1209 
	`c⁄f_£rvî_£t
(
CONFIG_SOPN_MAXCLIENTS
,
cv
);

1210 
	`c⁄f_vÆue_de°roy
(
cv
);

1211 
	`log_w¨n
("maxclients has beenÑeducedÅo %dÅo compensate for "

1214 
föÆmax˛õ¡s
);

1217  ()
föÆlimô
;

1218 
	}
}

	@src/vr_server.c

1 
	~<sys/ut¢ame.h
>

3 
	~<vr_c‹e.h
>

6 
vr_£rvî
 
	g£rvî
;

9 
sh¨edObje˘sSåu˘
 
	gsh¨ed
;

13 
	$di˘SåHash
(c⁄° *
key
) {

14  
	`di˘GíHashFun˘i⁄
((*)
key
, 
	`°æí
((*)key));

15 
	}
}

18 
	$di˘SåCa£Hash
(c⁄° *
key
) {

19  
	`di˘GíCa£HashFun˘i⁄
((*)
key
, 
	`°æí
((*)key));

20 
	}
}

23 
	$di˘SdsHash
(c⁄° *
key
) {

24  
	`di˘GíHashFun˘i⁄
((*)
key
, 
	`sd¶í
((*)key));

25 
	}
}

28 
	$di˘SdsCa£Hash
(c⁄° *
key
) {

29  
	`di˘GíCa£HashFun˘i⁄
((*)
key
, 
	`sd¶í
((*)key));

30 
	}
}

33 
	$di˘SåKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

34 c⁄° *
key2
)

36 
l1
,
l2
;

37 
	`DICT_NOTUSED
(
¥ivd©a
);

39 
l1
 = 
	`°æí
((*)
key1
);

40 
l2
 = 
	`°æí
((*)
key2
);

41 i‡(
l1
 !
l2
)  0;

42  
	`memcmp
(
key1
, 
key2
, 
l1
) == 0;

43 
	}
}

48 
	$di˘SåKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
,

49 c⁄° *
key2
)

51 
	`DICT_NOTUSED
(
¥ivd©a
);

53  
	`°rˇ£cmp
(
key1
, 
key2
) == 0;

54 
	}
}

57 
	$di˘SdsKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

58 c⁄° *
key2
)

60 
l1
,
l2
;

61 
	`DICT_NOTUSED
(
¥ivd©a
);

63 
l1
 = 
	`sd¶í
((
sds
)
key1
);

64 
l2
 = 
	`sd¶í
((
sds
)
key2
);

65 i‡(
l1
 !
l2
)  0;

66  
	`memcmp
(
key1
, 
key2
, 
l1
) == 0;

67 
	}
}

72 
	$di˘SdsKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
,

73 c⁄° *
key2
)

75 
	`DICT_NOTUSED
(
¥ivd©a
);

77  
	`°rˇ£cmp
(
key1
, 
key2
) == 0;

78 
	}
}

81 
	$di˘SdsKeyDupFromSå
(*
¥ivd©a
, c⁄° *
key
)

83 
	`DICT_NOTUSED
(
¥ivd©a
);

85  
	`sd¢ew
(
key
);

86 
	}
}

89 
	$di˘SdsDe°ru˘‹
(*
¥ivd©a
, *
vÆ
)

91 
	`DICT_NOTUSED
(
¥ivd©a
);

93 
	`sds‰ì
(
vÆ
);

94 
	}
}

97 
	$di˘Obje˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

99 
	`DICT_NOTUSED
(
¥ivd©a
);

101 i‡(
vÆ
 =
NULL
) ;

102 
	`‰ìObje˘
(
vÆ
);

103 
	}
}

106 
	$di˘EncObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

107 c⁄° *
key2
)

109 
robj
 *
o1
 = (robj*Ë
key1
, *
o2
 = (robj*Ë
key2
;

110 
robj
 *
o1_√w
, *
o2_√w
;

111 
cmp
;

113 i‡(
o1
->
ícodög
 =
OBJ_ENCODING_INT
 &&

114 
o2
->
ícodög
 =
OBJ_ENCODING_INT
)

115  
o1
->
±r
 =
o2
->ptr;

117 
o1_√w
 = 
	`gëDecodedObje˘
(
o1
);

118 
o2_√w
 = 
	`gëDecodedObje˘
(
o2
);

119 
cmp
 = 
	`di˘SdsKeyCom∑ª
(
¥ivd©a
,
o1_√w
->
±r
,
o2_√w
->ptr);

120 i‡(
o1_√w
 !
o1
Ë
	`‰ìObje˘
(o1_new);

121 i‡(
o2_√w
 !
o2
Ë
	`‰ìObje˘
(o2_new);

122  
cmp
;

123 
	}
}

126 
	$di˘EncObjHash
(c⁄° *
key
) {

127 
robj
 *
o
 = (robj*Ë
key
;

129 i‡(
	`sdsEncodedObje˘
(
o
)) {

130  
	`di˘GíHashFun˘i⁄
(
o
->
±r
, 
	`sd¶í
((
sds
)o->ptr));

132 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

133 
buf
[32];

134 
Àn
;

136 
Àn
 = 
	`Œ2°rög
(
buf
,32,()
o
->
±r
);

137  
	`di˘GíHashFun˘i⁄
((*)
buf
, 
Àn
);

139 
hash
;

140 
robj
 *
o_√w
;

142 
o_√w
 = 
	`gëDecodedObje˘
(
o
);

143 
hash
 = 
	`di˘GíHashFun˘i⁄
(
o_√w
->
±r
, 
	`sd¶í
((
sds
)o_new->ptr));

144 i‡(
o_√w
!
o
Ë
	`‰ìObje˘
(o_new);

145  
hash
;

148 
	}
}

151 
	$di˘ObjHash
(c⁄° *
key
) {

152 c⁄° 
robj
 *
o
 = 
key
;

153  
	`di˘GíHashFun˘i⁄
(
o
->
±r
, 
	`sd¶í
((
sds
)o->ptr));

154 
	}
}

157 
	$di˘ObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

158 c⁄° *
key2
)

160 c⁄° 
robj
 *
o1
 = 
key1
, *
o2
 = 
key2
;

161  
	`di˘SdsKeyCom∑ª
(
¥ivd©a
,
o1
->
±r
,
o2
->ptr);

162 
	}
}

165 
	$di˘Li°De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

167 
	`DICT_NOTUSED
(
¥ivd©a
);

168 
	`dli°Rñó£
((
dli°
*)
vÆ
);

169 
	}
}

172 
di˘Ty≥
 
	ghashDi˘Ty≥
 = {

173 
di˘EncObjHash
,

174 
NULL
,

175 
NULL
,

176 
di˘EncObjKeyCom∑ª
,

177 
di˘Obje˘De°ru˘‹
,

178 
di˘Obje˘De°ru˘‹


182 
di˘Ty≥
 
	g£tDi˘Ty≥
 = {

183 
di˘EncObjHash
,

184 
NULL
,

185 
NULL
,

186 
di˘EncObjKeyCom∑ª
,

187 
di˘Obje˘De°ru˘‹
,

188 
NULL


192 
di˘Ty≥
 
	gz£tDi˘Ty≥
 = {

193 
di˘EncObjHash
,

194 
NULL
,

195 
NULL
,

196 
di˘EncObjKeyCom∑ª
,

197 
di˘Obje˘De°ru˘‹
,

198 
NULL


205 
	$¸óãSh¨edObje˘s
() {

206 
j
;

207 
robj
 **
obj
;

209 
sh¨ed
.
¸lf
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("\r\n"));

210 
sh¨ed
.
ok
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+OK\r\n"));

211 
sh¨ed
.
îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("-ERR\r\n"));

212 
sh¨ed
.
em±ybulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("$0\r\n\r\n"));

213 
sh¨ed
.
czîo
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":0\r\n"));

214 
sh¨ed
.
c⁄e
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":1\r\n"));

215 
sh¨ed
.
˙eg⁄e
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":-1\r\n"));

216 
sh¨ed
.
nuŒbulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("$-1\r\n"));

217 
sh¨ed
.
nuŒmu…ibulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*-1\r\n"));

218 
sh¨ed
.
em±ymu…ibulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*0\r\n"));

219 
sh¨ed
.
p⁄g
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+PONG\r\n"));

220 
sh¨ed
.
queued
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+QUEUED\r\n"));

221 
sh¨ed
.
em±ysˇn
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*2\r\n$1\r\n0\r\n*0\r\n"));

222 
sh¨ed
.
wr⁄gty≥îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

224 
sh¨ed
.
nokeyîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

226 
sh¨ed
.
sy¡axîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

228 
sh¨ed
.
ßmeobje˘îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

230 
sh¨ed
.
outo‰™gìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

232 
sh¨ed
.
nos¸ùãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

234 
sh¨ed
.
lﬂdögîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

236 
sh¨ed
.
¶ows¸ùãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

238 
sh¨ed
.
ma°îdow√º
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

240 
sh¨ed
.
bgßvìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

242 
sh¨ed
.
ro¶avìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

244 
sh¨ed
.
nﬂuthîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

246 
sh¨ed
.
nﬂdmöîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

248 
sh¨ed
.
oomîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

250 
sh¨ed
.
exeˇb‹ãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

252 
sh¨ed
.
n‹ïliˇ£º
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

254 
sh¨ed
.
busykeyîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

256 
sh¨ed
.
•a˚
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(" "));

257 
sh¨ed
.
cﬁ⁄
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":"));

258 
sh¨ed
.
∂us
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+"));

260 
j
 = 0; j < 
PROTO_SHARED_SELECT_CMDS
; j++) {

261 
di˘id_°r
[64];

262 
di˘id_Àn
;

264 
di˘id_Àn
 = 
	`Œ2°rög
(
di˘id_°r
,(di˘id_°r),
j
);

265 
sh¨ed
.
£À˘
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

266 
	`sdsˇçrötf
(
	`sd£m±y
(),

268 
di˘id_Àn
, 
di˘id_°r
));

270 
sh¨ed
.
mesßgebulk
 = 
	`¸óãSåögObje˘
("$7\r\nmessage\r\n",13);

271 
sh¨ed
.
pmesßgebulk
 = 
	`¸óãSåögObje˘
("$8\r\npmessage\r\n",14);

272 
sh¨ed
.
subs¸ibebulk
 = 
	`¸óãSåögObje˘
("$9\r\nsubscribe\r\n",15);

273 
sh¨ed
.
unsubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$11\r\nunsubscribe\r\n",18);

274 
sh¨ed
.
psubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$10\r\npsubscribe\r\n",17);

275 
sh¨ed
.
punsubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$12\r\npunsubscribe\r\n",19);

276 
sh¨ed
.
dñ
 = 
	`¸óãSåögObje˘
("DEL",3);

277 
sh¨ed
.
Ω›
 = 
	`¸óãSåögObje˘
("RPOP",4);

278 
sh¨ed
.
Õ›
 = 
	`¸óãSåögObje˘
("LPOP",4);

279 
sh¨ed
.
Õush
 = 
	`¸óãSåögObje˘
("LPUSH",5);

280 
j
 = 0; j < 
OBJ_SHARED_INTEGERS
; j++) {

281 
sh¨ed
.
öãgîs
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,(*)()j);

282 
sh¨ed
.
öãgîs
[
j
]->
ícodög
 = 
OBJ_ENCODING_INT
;

284 
j
 = 0; j < 
OBJ_SHARED_BULKHDR_LEN
; j++) {

285 
sh¨ed
.
mbulkhdr
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

286 
	`sdsˇçrötf
(
	`sd£m±y
(),"*%d\r\n",
j
));

287 
sh¨ed
.
bulkhdr
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

288 
	`sdsˇçrötf
(
	`sd£m±y
(),"$%d\r\n",
j
));

294 
sh¨ed
.
mö°rög
 = 
	`¸óãSåögObje˘
("minstring",9);

295 
sh¨ed
.
max°rög
 = 
	`¸óãSåögObje˘
("maxstring",9);

297 
sh¨ed
.
outofcom∂exôylimô
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

301 
obj
 = &
sh¨ed
; *obj !
NULL
; obj ++) {

302 (*
obj
)->
c⁄°™t
 = 1;

304 
	}
}

308 
	$öô_£rvî
(
ö°™˚
 *
nci
)

310 
ªt
;

311 
uöt32_t
 
i
;

312 
ªdisDb
 *
db
;

314 
£rvî
.
pid
 = 
	`gëpid
();

315 
£rvî
.
¨ch_bôs
 = (() == 8) ? 64 : 32;

316 
£rvî
.
°¨âime
 = 
	`time
(
NULL
);

317 
	`gë_øndom_hex_ch¨s
(
£rvî
.
runid
, 
CONFIG_RUN_ID_SIZE
);

319 
£rvî
.
comm™ds
 = 
	`di˘Cª©e
(&
comm™dTabÀDi˘Ty≥
,
NULL
);

321 
	`p›uœãComm™dTabÀ
();

323 
£rvî
.
dñComm™d
 = 
	`lookupComm™dByCSåög
("del");

324 
£rvî
.
mu…iComm™d
 = 
	`lookupComm™dByCSåög
("multi");

325 
£rvî
.
ÕushComm™d
 = 
	`lookupComm™dByCSåög
("lpush");

326 
£rvî
.
Õ›Comm™d
 = 
	`lookupComm™dByCSåög
("lpop");

327 
£rvî
.
Ω›Comm™d
 = 
	`lookupComm™dByCSåög
("rpop");

328 
£rvî
.
§emComm™d
 = 
	`lookupComm™dByCSåög
("srem");

329 
£rvî
.
execComm™d
 = 
	`lookupComm™dByCSåög
("exec");

332 
c⁄f
 = 
	`c⁄f_¸óã
(
nci
->
c⁄f_fûíame
);

335 
ªt
 = 
	`p›uœãComm™dsNìdAdmö∑ss
();

336 i‡(
ªt
 !
VR_OK
) {

337 
	`log_îr‹
("PopulateÇeedádminpass commands failed");

338  
VR_ERROR
;

341 
£rvî
.
c⁄figfûe
 = 
	`gëAbsﬁuãP©h
(
nci
->
c⁄f_fûíame
);

342 
£rvî
.
hz
 = 10;

343 
£rvî
.
db um
 = 
c£rvî
->
d©aba£s
;

344 
£rvî
.
dböum
 = 
c£rvî
->
öã∫Æ_dbs_≥r_d©aba£s
;

345 
£rvî
.
dbnum
 = sîvî.
db um
*£rvî.
dböum
;

347 
	`d¨øy_öô
(&
£rvî
.
dbs
, sîvî.
dbnum
, (
ªdisDb
));

348 
£rvî
.
pidfûe
 = 
nci
->
pid_fûíame
;

349 
£rvî
.
execuèbÀ
 = 
NULL
;

350 
£rvî
.
a˘ivîehashög
 = 
CONFIG_DEFAULT_ACTIVE_REHASHING
;

352 
£rvî
.
˛õ¡_max_quîybuf_Àn
 = 
PROTO_MAX_QUERYBUF_LEN
;

355 
i
 = 0; i < 
£rvî
.
dbnum
; i ++) {

356 
db
 = 
	`d¨øy_push
(&
£rvî
.
dbs
);

357 
	`ªdisDbInô
(
db
);

360 
£rvî
.
˛õ¡s
 = 
	`dli°Cª©e
();

362 
£rvî
.
m⁄ô‹s
 = 
	`dli°Cª©e
();

364 
£rvî
.
lﬂdög
 = 0;

366 
£rvî
.
lua_timedout
 = 0;

368 
£rvî
.
aof_°©e
 = 
AOF_OFF
;

370 
£rvî
.
°›_wrôes_⁄_bgßve_îr
 = 0;

372 
£rvî
.
ªady_keys
 = 
	`dli°Cª©e
();

374 
£rvî
.
sy°em_mem‹y_size
 = 
	`dÆloc_gë_mem‹y_size
();

376 
£rvî
.
rdb_chûd_pid
 = -1;

377 
£rvî
.
aof_chûd_pid
 = -1;

379 
£rvî
.
hash_max_zùli°_íåõs
 = 
OBJ_HASH_MAX_ZIPLIST_ENTRIES
;

380 
£rvî
.
hash_max_zùli°_vÆue
 = 
OBJ_HASH_MAX_ZIPLIST_VALUE
;

381 
£rvî
.
li°_max_zùli°_size
 = 
OBJ_LIST_MAX_ZIPLIST_SIZE
;

382 
£rvî
.
li°_com¥ess_dïth
 = 
OBJ_LIST_COMPRESS_DEPTH
;

383 
£rvî
.
£t_max_öt£t_íåõs
 = 
OBJ_SET_MAX_INTSET_ENTRIES
;

384 
£rvî
.
z£t_max_zùli°_íåõs
 = 
OBJ_ZSET_MAX_ZIPLIST_ENTRIES
;

385 
£rvî
.
z£t_max_zùli°_vÆue
 = 
OBJ_ZSET_MAX_ZIPLIST_VALUE
;

386 
£rvî
.
hŒ_•¨£_max_byãs
 = 
CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES
;

388 
£rvî
.
nŸify_key•a˚_evíts
 = 0;

390 
	`¶owlogInô
();

392 
	`vr_ª∂iˇti⁄_öô
();

394 
	`¸óãSh¨edObje˘s
();

399 
£rvî
.
p‹t
 = 
c£rvî
->port;

403 
ªt
 = 
	`w‹kîs_öô
(
nci
->
thªad_num
);

404 i‡(
ªt
 !
VR_OK
) {

405 
	`log_îr‹
("Init workerÅhreads failed");

406  
VR_ERROR
;

411 
ªt
 = 
	`ma°î_öô
(
c⁄f
);

412 i‡(
ªt
 !
VR_OK
) {

413 
	`log_îr‹
("Init masterÅhread failed");

414  
VR_ERROR
;

417 
ªt
 = 
	`backíds_öô
(1);

418 i‡(
ªt
 !
VR_OK
) {

419 
	`log_îr‹
("Init backendÅhreads failed");

420  
VR_ERROR
;

423 
	`log_debug
(
LOG_NOTICE
, "mem‹yáŒo¯lockÅy≥: %s", 
	`mÆloc_lock_ty≥
());

424 
	`log_debug
(
LOG_NOTICE
, "mÆlo¯lib: %s", 
DMALLOC_LIB
);

426 
	`log_debug
(
LOG_NOTICE
, "°©†lockÅy≥: %s", 
STATS_LOCK_TYPE
);

428  
VR_OK
;

429 
	}
}

431 
	$gëLRUClock
() {

432  (
	`vr_m£c_now
()/
LRU_CLOCK_RESOLUTION
Ë& 
LRU_CLOCK_MAX
;

433 
	}
}

444 
	#EVICTION_SAMPLES_ARRAY_SIZE
 16

	)

445 
	$evi˘i⁄PoﬁP›uœã
(
di˘
 *
ßm∂edi˘
, di˘ *
keydi˘
,

446 
evi˘i⁄PoﬁE¡ry
 *
poﬁ
, 
maxmem‹y_ßm∂es
) {

447 
j
, 
k
, 
cou¡
;

448 
di˘E¡ry
 *
_ßm∂es
[
EVICTION_SAMPLES_ARRAY_SIZE
];

449 
di˘E¡ry
 **
ßm∂es
;

453 i‡(
maxmem‹y_ßm∂es
 <
EVICTION_SAMPLES_ARRAY_SIZE
) {

454 
ßm∂es
 = 
_ßm∂es
;

456 
ßm∂es
 = 
	`dÆloc
((ßm∂es[0])*
maxmem‹y_ßm∂es
);

459 
cou¡
 = 
	`di˘GëSomeKeys
(
ßm∂edi˘
,
ßm∂es
,
maxmem‹y_ßm∂es
);

460 
j
 = 0; j < 
cou¡
; j++) {

461 
idÀ
;

462 
sds
 
key
;

463 
robj
 *
o
;

464 
di˘E¡ry
 *
de
;

466 
de
 = 
ßm∂es
[
j
];

467 
key
 = 
	`di˘GëKey
(
de
);

471 i‡(
ßm∂edi˘
 !
keydi˘
Ë
de
 = 
	`di˘Föd
(keydi˘, 
key
);

472 
o
 = 
	`di˘GëVÆ
(
de
);

473 
idÀ
 = 
	`e°im©eObje˘IdÀTime
(
o
);

478 
k
 = 0;

479 
k
 < 
MAXMEMORY_EVICTION_POOL_SIZE
 &&

480 
poﬁ
[
k
].
key
 &&

481 
poﬁ
[
k
].
idÀ
 < idle) k++;

482 i‡(
k
 =0 && 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 !
NULL
) {

486 } i‡(
k
 < 
MAXMEMORY_EVICTION_POOL_SIZE
 && 
poﬁ
[k].
key
 =
NULL
) {

491 i‡(
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 =
NULL
) {

494 
	`memmove
(
poﬁ
+
k
+1,pool+k,

495 (
poﬁ
[0])*(
MAXMEMORY_EVICTION_POOL_SIZE
-
k
-1));

498 
k
--;

501 
	`sds‰ì
(
poﬁ
[0].
key
);

502 
	`memmove
(
poﬁ
,poﬁ+1,’oﬁ[0])*
k
);

505 
poﬁ
[
k
].
key
 = 
	`sdsdup
(key);

506 
poﬁ
[
k
].
idÀ
 = idle;

508 i‡(
ßm∂es
 !
_ßm∂es
Ë
	`d‰ì
(samples);

509 
	}
}

511 
	$‰ìMem‹yIfNìded
(
vr_evíéo›
 *
vñ
) {

512 
size_t
 
mem_u£d
, 
mem_to‰ì
, 
mem_‰ìd
;

513 
m°ime_t
 
œãncy
, 
evi˘i⁄_œãncy
;

514 
keys_‰ìd
 = 0;

515 
maxmem‹y
;

516 
maxmem‹y_pﬁicy
, 
maxmem‹y_ßm∂es
;

517 
ªt
;

519 
maxmem‹y
 = 
vñ
->
cc
.maxmemory;

520 i‡(
	`dÆloc_u£d_mem‹y
(Ë<
maxmem‹y
)

521  
VR_OK
;

523 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYP
, &
maxmem‹y_pﬁicy
);

524 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_NO_EVICTION
)

525  
VR_ERROR
;

527 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYS
, &
maxmem‹y_ßm∂es
);

529 
j
, 
k
;

531 
j
 = 0; j < 
£rvî
.
dbnum
; j++) {

532 
be°vÆ
 = 0;

533 
sds
 
be°key
 = 
NULL
;

534 
di˘E¡ry
 *
de
;

535 
ªdisDb
 *
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
j
);

536 
di˘
 *dict;

538 
	`lockDbWrôe
(
db
);

539 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_LRU
 ||

540 
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_RANDOM
)

542 
di˘
 = 
db
->dict;

544 
di˘
 = 
db
->
expúes
;

546 i‡(
	`di˘Size
(
di˘
) == 0) {

547 
	`u∆ockDb
(
db
);

552 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_RANDOM
 ||

553 
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_RANDOM
)

555 
de
 = 
	`di˘GëR™domKey
(
di˘
);

556 
be°key
 = 
	`di˘GëKey
(
de
);

560 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_LRU
 ||

561 
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_LRU
)

563 
evi˘i⁄PoﬁE¡ry
 *
poﬁ
 = 
db
->
evi˘i⁄_poﬁ
;

565 
be°key
 =
NULL
) {

566 
	`evi˘i⁄PoﬁP›uœã
(
di˘
, 
db
->di˘, db->
evi˘i⁄_poﬁ
, 
maxmem‹y_ßm∂es
);

568 
k
 = 
MAXMEMORY_EVICTION_POOL_SIZE
-1; k >= 0; k--) {

569 i‡(
poﬁ
[
k
].
key
 =
NULL
) ;

570 
de
 = 
	`di˘Föd
(
di˘
,
poﬁ
[
k
].
key
);

573 
	`sds‰ì
(
poﬁ
[
k
].
key
);

575 
	`memmove
(
poﬁ
+
k
,pool+k+1,

576 (
poﬁ
[0])*(
MAXMEMORY_EVICTION_POOL_SIZE
-
k
-1));

579 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 = 
NULL
;

580 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
idÀ
 = 0;

584 i‡(
de
) {

585 
be°key
 = 
	`di˘GëKey
(
de
);

596 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_TTL
) {

597 
k
 = 0; k < 
maxmem‹y_ßm∂es
; k++) {

598 
sds
 
thiskey
;

599 
thisvÆ
;

601 
de
 = 
	`di˘GëR™domKey
(
di˘
);

602 
thiskey
 = 
	`di˘GëKey
(
de
);

603 
thisvÆ
 = (Ë
	`di˘GëVÆ
(
de
);

607 i‡(
be°key
 =
NULL
 || 
thisvÆ
 < 
be°vÆ
) {

608 
be°key
 = 
thiskey
;

609 
be°vÆ
 = 
thisvÆ
;

615 i‡(
be°key
) {

616 
robj
 *
keyobj
 = 
	`¸óãSåögObje˘
(
be°key
,
	`sd¶í
(bestkey));

617 
	`dbDñëe
(
db
,
keyobj
);

618 
	`‰ìObje˘
(
keyobj
);

619 
keys_‰ìd
++;

622 
	`u∆ockDb
(
db
);

624 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
, &
maxmem‹y
);

625 i‡(
	`dÆloc_u£d_mem‹y
(Ë<
maxmem‹y
) {

626 
°›
;

630 i‡(!
keys_‰ìd
) {

631  
VR_ERROR
;

634 
	`upd©e_°©s_add
(
vñ
->
°©s
, 
evi˘edkeys
, 
keys_‰ìd
);

635 
keys_‰ìd
 = 0;

638 
°›
:

639 
	`upd©e_°©s_add
(
vñ
->
°©s
, 
evi˘edkeys
, 
keys_‰ìd
);

640  
VR_OK
;

641 
	}
}

645 
	$pögComm™d
(
˛õ¡
 *
c
) {

647 i‡(
c
->
¨gc
 > 2) {

648 
	`addRïlyEº‹F‹m©
(
c
,"wrongÇumber ofárguments for '%s' command",

649 
c
->
cmd
->
«me
);

653 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
) {

654 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[2]);

655 
	`addRïlyBulkCBuf„r
(
c
,"pong",4);

656 i‡(
c
->
¨gc
 == 1)

657 
	`addRïlyBulkCBuf„r
(
c
,"",0);

659 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

661 i‡(
c
->
¨gc
 == 1)

662 
	`addRïly
(
c
,
sh¨ed
.
p⁄g
);

664 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

666 
	}
}

677 
	$time_ödïídít_°rcmp
(*
a
, *
b
) {

678 
buÁ
[
CONFIG_AUTHPASS_MAX_LEN
], 
bufb
[CONFIG_AUTHPASS_MAX_LEN];

683 
Æí
 = 
	`°æí
(
a
);

684 
bÀn
 = 
	`°æí
(
b
);

685 
j
;

686 
diff
 = 0;

691 i‡(
Æí
 > (
buÁ
Ë|| 
bÀn
 > (
bufb
))  1;

693 
	`mem£t
(
buÁ
,0,(bufa));

694 
	`mem£t
(
bufb
,0,(bufb));

697 
	`mem˝y
(
buÁ
,
a
,
Æí
);

698 
	`mem˝y
(
bufb
,
b
,
bÀn
);

702 
j
 = 0; j < (
buÁ
); j++) {

703 
diff
 |(
buÁ
[
j
] ^ 
bufb
[j]);

706 
diff
 |
Æí
 ^ 
bÀn
;

707  
diff
;

708 
	}
}

710 
	$authComm™d
(
˛õ¡
 *
c
) {

711 
sds
 
ªquúïass
;

713 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
ªquúïass
);

714 i‡(!
ªquúïass
) {

715 
	`addRïlyEº‹
(
c
,"Client sent AUTH, butÇoÖassword is set");

717 } i‡(!
	`time_ödïídít_°rcmp
(
c
->
¨gv
[1]->
±r
, 
ªquúïass
)) {

718 i‡(!
c
->
authítiˇãd
)

719 
c
->
authítiˇãd
 = 1;

720 
	`addRïly
(
c
,
sh¨ed
.
ok
);

722 
c
->
authítiˇãd
 = 0;

723 
	`addRïlyEº‹
(
c
,"invalidÖassword");

725 
	`sds‰ì
(
ªquúïass
);

726 
	}
}

728 
	$admöComm™d
(
˛õ¡
 *
c
) {

729 
sds
 
admö∑ss
;

731 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
admö∑ss
);

732 i‡(!
admö∑ss
) {

733 
	`addRïlyEº‹
(
c
,"Client sent ADMIN, butÇoÖassword is set");

735 } i‡(!
	`time_ödïídít_°rcmp
(
c
->
¨gv
[1]->
±r
, 
admö∑ss
)) {

736 
c
->
authítiˇãd
 = 2;

737 
	`addRïly
(
c
,
sh¨ed
.
ok
);

739 
c
->
authítiˇãd
 = 0;

740 
	`addRïlyEº‹
(
c
,"invalidÖassword");

742 
	`sds‰ì
(
admö∑ss
);

743 
	}
}

745 
	$htNìdsResize
(
di˘
 *dict) {

746 
size
, 
u£d
;

748 
size
 = 
	`di˘SlŸs
(
di˘
);

749 
u£d
 = 
	`di˘Size
(
di˘
);

750  (
size
 && 
u£d
 && sizê> 
DICT_HT_INITIAL_SIZE
 &&

751 (
u£d
*100/
size
 < 
HASHTABLE_MIN_FILL
));

752 
	}
}

754 
	skeys_°©i°ics
 {

755 
	mkeys_Æl
;

756 
	mvkeys_Æl
;

757 
	mavg_âl_Æl
;

758 
	m√xi°
;

764 
sds
 
	$gíVúeInfoSåög
(
vr_evíéo›
 *
vñ
, *
£˘i⁄
) {

765 
sds
 
öfo
 = 
	`sd£m±y
();

766 
time_t
 
u±ime
 = 
	`time
(
NULL
)-
£rvî
.
°¨âime
;

767 
j
, 
k
, 
numcomm™ds
;

768 
rußge
 
£lf_ru
;

769 
lﬁ
, 
bib
;

770 
Æl£˘i⁄s
 = 0, 
def£˘i⁄s
 = 0;

771 
£˘i⁄s
 = 0;

772 
d¨øy
 *
kss
 = 
NULL
;

774 i‡(
£˘i⁄
 =
NULL
) section = "default";

775 
Æl£˘i⁄s
 = 
	`°rˇ£cmp
(
£˘i⁄
,"all") == 0;

776 
def£˘i⁄s
 = 
	`°rˇ£cmp
(
£˘i⁄
,"default") == 0;

778 
	`gërußge
(
RUSAGE_SELF
, &
£lf_ru
);

781 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"server")) {

782 
ˇŒ_u«me
 = 1;

783 
ut¢ame
 
«me
;

784 *
mode
;

786 
mode
 = "standalone";

788 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

790 i‡(
ˇŒ_u«me
) {

792 
	`u«me
(&
«me
);

793 
ˇŒ_u«me
 = 0;

796 
öfo
 = 
	`sdsˇçrötf
(info,

814 
VR_VERSION_STRING
,

815 
mode
,

816 
«me
.
sy¢ame
,Çame.
ªÀa£
,Çame.
machöe
,

817 
£rvî
.
¨ch_bôs
,

818 
	`´GëApiName
(),

819 #ifde‡
__GNUC__


820 
__GNUC__
,
__GNUC_MINOR__
,
__GNUC_PATCHLEVEL__
,

824 (Ë
	`gëpid
(),

825 
£rvî
.
runid
,

826 
£rvî
.
p‹t
,

827 (
ötmax_t
)
u±ime
,

828 (
ötmax_t
)(
u±ime
/(3600*24)),

829 
£rvî
.
hz
,

830 
£rvî
.
execuèbÀ
 ? server.executable : "",

831 
£rvî
.
c⁄figfûe
 ? server.configfile : "",

832 
£rvî
.
db um
,

833 
£rvî
.
dböum
);

837 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"clients")) {

838 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

839 
öfo
 = 
	`sdsˇçrötf
(info,

842 
	`cuºít_˛õ¡s
());

846 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"memory")) {

847 
uöt32_t
 
idx
;

848 
vr_w‹kî
 *
w‹kî
;

849 
hmem
[64];

850 
≥ak_hmem
[64];

851 
tŸÆ_sy°em_hmem
[64];

852 
u£d_mem‹y_lua_hmem
[64];

853 
u£d_mem‹y_rss_hmem
[64];

854 
maxmem‹y_hmem
[64];

855 
size_t
 
vr_u£d_mem‹y
 = 
	`dÆloc_u£d_mem‹y
();

856 
size_t
 
tŸÆ_sy°em_mem
 = 
£rvî
.
sy°em_mem‹y_size
;

857 c⁄° *
evi˘_pﬁicy
;

858 
size_t
 
≥ak_mem‹y
 = 0, 
≥ak_mem‹y_f‹_⁄e_w‹kî
;

859 
maxmem‹y
;

860 
maxmem‹y_pﬁicy
;

866 
idx
 = 0; idx < 
	`d¨øy_n
(&
w‹kîs
); idx ++) {

867 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
idx
);

868 
	`upd©e_°©s_gë
(
w‹kî
->
vñ
.
°©s
, 
≥ak_mem‹y
,

869 &
≥ak_mem‹y_f‹_⁄e_w‹kî
);

870 i‡(
≥ak_mem‹y
 < 
≥ak_mem‹y_f‹_⁄e_w‹kî
)

871 
≥ak_mem‹y
 = 
≥ak_mem‹y_f‹_⁄e_w‹kî
;

873 i‡(
vr_u£d_mem‹y
 > 
≥ak_mem‹y
) {

874 
≥ak_mem‹y
 = 
vr_u£d_mem‹y
;

875 
	`upd©e_°©s_£t
(
vñ
->
°©s
, 
≥ak_mem‹y
, 
vr_u£d_mem‹y
);

878 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
maxmem‹y
);

879 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYP
,&
maxmem‹y_pﬁicy
);

880 
evi˘_pﬁicy
 = 
	`gë_evi˘pﬁicy_°rögs
(
maxmem‹y_pﬁicy
);

882 
	`byãsToHum™
(
hmem
,
vr_u£d_mem‹y
);

883 
	`byãsToHum™
(
≥ak_hmem
,
≥ak_mem‹y
);

884 
	`byãsToHum™
(
tŸÆ_sy°em_hmem
,
tŸÆ_sy°em_mem
);

885 
	`byãsToHum™
(
u£d_mem‹y_rss_hmem
,
vñ
->
ªsidít_£t_size
);

886 
	`byãsToHum™
(
maxmem‹y_hmem
,
maxmem‹y
);

888 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

889 
öfo
 = 
	`sdsˇçrötf
(info,

904 
vr_u£d_mem‹y
,

905 
hmem
,

906 
vñ
->
ªsidít_£t_size
,

907 
u£d_mem‹y_rss_hmem
,

908 
≥ak_mem‹y
,

909 
≥ak_hmem
,

910 ()
tŸÆ_sy°em_mem
,

911 
tŸÆ_sy°em_hmem
,

912 
maxmem‹y
,

913 
maxmem‹y_hmem
,

914 
evi˘_pﬁicy
,

915 ()
vñ
->
ªsidít_£t_size
/
vr_u£d_mem‹y
,

916 
DMALLOC_LIB


921 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"stats")) {

922 
uöt32_t
 
idx
;

923 
vr_°©s
 *
°©s
;

924 
°©_numc⁄√˘i⁄s
=0, 
°©_numcomm™ds
=0;

925 
°©_√t_öput_byãs
=0, 
°©_√t_ouçut_byãs
=0;

926 
°©_ªje˘ed_c⁄n
=0;

927 
°©_expúedkeys
=0;

928 
°©_evi˘edkeys
=0;

929 
°©_key•a˚_hôs
=0, 
°©_key•a˚_mis£s
=0;

930 
°©_numcomm™ds_›s
=0;

931 
°©_√t_öput_byãs_›s
=0, 
°©_√t_ouçut_byãs_›s
=0;

933 
idx
 = 0; idx < 
	`d¨øy_n
(&
w‹kîs
); idx ++) {

934 
°©s_vÆue
;

935 
vr_w‹kî
 *
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
idx
);

936 
°©s
 = 
w‹kî
->
vñ
.stats;

938 
	`upd©e_°©s_gë
(
°©s
, 
numcomm™ds
, &
°©s_vÆue
);

939 
°©_numcomm™ds
 +
°©s_vÆue
;

940 
	`upd©e_°©s_gë
(
°©s
, 
numc⁄√˘i⁄s
, &
°©s_vÆue
);

941 
°©_numc⁄√˘i⁄s
 +
°©s_vÆue
;

942 
	`upd©e_°©s_gë
(
°©s
, 
expúedkeys
, &
°©s_vÆue
);

943 
°©_expúedkeys
 +
°©s_vÆue
;

944 
	`upd©e_°©s_gë
(
°©s
, 
evi˘edkeys
, &
°©s_vÆue
);

945 
°©_evi˘edkeys
 +
°©s_vÆue
;

946 
	`upd©e_°©s_gë
(
°©s
, 
√t_öput_byãs
, &
°©s_vÆue
);

947 
°©_√t_öput_byãs
 +
°©s_vÆue
;

948 
	`upd©e_°©s_gë
(
°©s
, 
√t_ouçut_byãs
, &
°©s_vÆue
);

949 
°©_√t_ouçut_byãs
 +
°©s_vÆue
;

950 
	`upd©e_°©s_gë
(
°©s
, 
key•a˚_hôs
, &
°©s_vÆue
);

951 
°©_key•a˚_hôs
 +
°©s_vÆue
;

952 
	`upd©e_°©s_gë
(
°©s
, 
key•a˚_mis£s
, &
°©s_vÆue
);

953 
°©_key•a˚_mis£s
 +
°©s_vÆue
;

955 
°©_numcomm™ds_›s
 +
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_COMMAND
);

956 
°©_√t_öput_byãs_›s
 +()
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_NET_INPUT
)/1024;

957 
°©_√t_ouçut_byãs_›s
 +()
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_NET_OUTPUT
)/1024;

959 
idx
 = 0; idx < 
	`d¨øy_n
(&
backíds
); idx ++) {

960 
°©s_vÆue
;

961 
vr_backíd
 *
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
idx
);

962 
°©s
 = 
backíd
->
vñ
.stats;

964 
	`upd©e_°©s_gë
(
°©s
, 
expúedkeys
, &
°©s_vÆue
);

965 
°©_expúedkeys
 +
°©s_vÆue
;

967 
	`upd©e_°©s_gë
(
ma°î
.
vñ
.
°©s
, 
ªje˘ed_c⁄n
, &
°©_ªje˘ed_c⁄n
);

969 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

970 
öfo
 = 
	`sdsˇçrötf
(info,

984 
°©_numc⁄√˘i⁄s
,

985 
°©_numcomm™ds
,

986 
°©_numcomm™ds_›s
,

987 
°©_√t_öput_byãs
,

988 
°©_√t_ouçut_byãs
,

989 
°©_√t_öput_byãs_›s
,

990 
°©_√t_ouçut_byãs_›s
,

991 
°©_ªje˘ed_c⁄n
,

992 
°©_expúedkeys
,

993 
°©_evi˘edkeys
,

994 
°©_key•a˚_hôs
,

995 
°©_key•a˚_mis£s
);

999 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"cpu")) {

1000 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1001 
öfo
 = 
	`sdsˇçrötf
(info,

1005 ()
£lf_ru
.
ru_°ime
.
tv_£c
+()£lf_ru.ru_°ime.
tv_u£c
/1000000,

1006 ()
£lf_ru
.
ru_utime
.
tv_£c
+()£lf_ru.ru_utime.
tv_u£c
/1000000);

1010 i‡(
Æl£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"internal")) {

1011 
ªdisDb
 *
db
;

1012 
keys_°©i°ics
 *
ks
;

1013 
keys
, 
vkeys
, 
avg_âl
;

1015 
kss
 = 
	`d¨øy_¸óã
(
£rvî
.
db um
, (
keys_°©i°ics
));

1017 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1018 
öfo
 = 
	`sdsˇçrötf
(info, "# Internal\r\n");

1019 
j
 = 0; j < 
£rvî
.
db um
; j++) {

1020 
ks
 = 
	`d¨øy_push
(
kss
);

1021 
ks
->
keys_Æl
 = ks->
vkeys_Æl
 = ks->
avg_âl_Æl
 = 0;

1022 
ks
->
√xi°
 = 0;

1023 
k
 = 0; k < 
£rvî
.
dböum
; k ++) {

1024 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)(
j
*£rvî.
dböum
+
k
));

1025 
	`lockDbRód
(
db
);

1026 
keys
 = 
	`di˘Size
(
db
->
di˘
);

1027 
vkeys
 = 
	`di˘Size
(
db
->
expúes
);

1028 
avg_âl
 = 
db
->avg_ttl;

1029 
	`u∆ockDb
(
db
);

1030 i‡(
keys
 || 
vkeys
) {

1031 
öfo
 = 
	`sdsˇçrötf
(info,

1033 
j
, 
k
, 
keys
, 
vkeys
, 
db
->
avg_âl
);

1035 
ks
->
keys_Æl
 +
keys
;

1036 
ks
->
vkeys_Æl
 +
vkeys
;

1037 
ks
->
avg_âl_Æl
 +
avg_âl
;

1038 i‡(
avg_âl
 > 0Ë
ks
->
√xi°
 ++;

1044 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"keyspace")) {

1045 
ªdisDb
 *
db
;

1046 
keys_°©i°ics
 *
ks
;

1047 
keys_Æl
, 
vkeys_Æl
, 
avg_âl_Æl
;

1048 
√xi°
;

1050 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1051 
öfo
 = 
	`sdsˇçrötf
(info, "# Keyspace\r\n");

1052 i‡(
kss
 =
NULL
) {

1053 
j
 = 0; j < 
£rvî
.
db um
; j++) {

1054 
keys_Æl
 = 
vkeys_Æl
 = 
avg_âl_Æl
 = 0;

1055 
√xi°
 = 0;

1056 
k
 = 0; k < 
£rvî
.
dböum
; k ++) {

1057 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)(
j
*£rvî.
dböum
+
k
));

1058 
	`lockDbRód
(
db
);

1059 
keys_Æl
 +
	`di˘Size
(
db
->
di˘
);

1060 
vkeys_Æl
 +
	`di˘Size
(
db
->
expúes
);

1061 
avg_âl_Æl
 +
db
->
avg_âl
;

1062 i‡(
db
->
avg_âl
 > 0Ë
√xi°
 ++;

1063 
	`u∆ockDb
(
db
);

1065 i‡(
keys_Æl
 || 
vkeys_Æl
) {

1066 
öfo
 = 
	`sdsˇçrötf
(info,

1068 
j
, 
keys_Æl
, 
vkeys_Æl
, 
√xi°
>0?(
avg_âl_Æl
/nexist):0);

1072 
j
 = 0; j < 
£rvî
.
db um
; j ++) {

1073 
ks
 = 
	`d¨øy_gë
(
kss
, 
j
);

1074 i‡(
ks
->
keys_Æl
 || ks->
vkeys_Æl
) {

1075 
öfo
 = 
	`sdsˇçrötf
(info,

1077 
j
, 
ks
->
keys_Æl
, ks->
vkeys_Æl
,

1078 
ks
->
√xi°
>0?(ks->
avg_âl_Æl
/ks->nexist):0);

1084 
öfo
 = 
	`sdsˇçrötf
(info,"\n--------------------------create by:Âº†ËÅ™--------------------------------------\n\r");

1086 i‡(
kss
 !
NULL
) {

1087 
kss
->
√Àm
 = 0;

1088 
	`d¨øy_de°roy
(
kss
);

1089 
kss
 = 
NULL
;

1092  
öfo
;

1093 
	}
}

1095 
	$öfoComm™d
(
˛õ¡
 *
c
) {

1096 *
£˘i⁄
 = 
c
->
¨gc
 =2 ? c->
¨gv
[1]->
±r
 : "default";

1098 i‡(
c
->
¨gc
 > 2) {

1099 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1102 
	`addRïlyBulkSds
(
c
, 
	`gíVúeInfoSåög
(c->
vñ
, 
£˘i⁄
));

1103 
	}
}

1105 
	$echoComm™d
(
˛õ¡
 *
c
) {

1106 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

1107 
	}
}

1109 
	$timeComm™d
(
˛õ¡
 *
c
) {

1110 
timevÆ
 
tv
;

1114 
	`gëtimeofday
(&
tv
,
NULL
);

1115 
	`addRïlyMu…iBulkLí
(
c
,2);

1116 
	`addRïlyBulkL⁄gL⁄g
(
c
,
tv
.
tv_£c
);

1117 
	`addRïlyBulkL⁄gL⁄g
(
c
,
tv
.
tv_u£c
);

1118 
	}
}

1129 
	$adju°O≥nFûesLimô
(
max˛õ¡s
) {

1130 
æim_t
 
maxfûes
, 
föÆlimô
 = 0;

1131 
æim_t
 
ﬁdlimô
;

1132 
föÆmax˛õ¡s
;

1133 
æimô
 
limô
;

1134 
thªads
;

1136 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads
);

1137 
maxfûes
 = 
max˛õ¡s
+
thªads
*2+
CONFIG_MIN_RESERVED_FDS
;

1138 i‡(
	`gëæimô
(
RLIMIT_NOFILE
,&
limô
) == -1) {

1139 
	`log_w¨n
("UnableÅo obtainÅhe current NOFILEÜimit (%s),ássuming 1024ánd settingÅhe max clients configurationáccordingly.",

1140 
	`°ªº‹
(
î∫o
));

1141 
ﬁdlimô
 = 1024;

1142 
föÆlimô
 = 
ﬁdlimô
;

1144 
ﬁdlimô
 = 
limô
.
æim_cur
;

1148 i‡(
ﬁdlimô
 < 
maxfûes
) {

1149 
æim_t
 
be°limô
;

1150 
£ålimô_îr‹
 = 0;

1154 
be°limô
 = 
maxfûes
;

1155 
be°limô
 > 
ﬁdlimô
) {

1156 
æim_t
 
de¸_°ï
 = 16;

1158 
limô
.
æim_cur
 = 
be°limô
;

1159 
limô
.
æim_max
 = 
be°limô
;

1160 i‡(
	`£ålimô
(
RLIMIT_NOFILE
,&
limô
) != -1) ;

1161 
£ålimô_îr‹
 = 
î∫o
;

1165 i‡(
be°limô
 < 
de¸_°ï
) ;

1166 
be°limô
 -
de¸_°ï
;

1171 i‡(
be°limô
 < 
ﬁdlimô
) bestlimit = oldlimit;

1173 
föÆlimô
 = 
be°limô
;

1174 i‡(
be°limô
 < 
maxfûes
) {

1175 
	`log_w¨n
("YouÑequested maxclients of %d "

1177 
max˛õ¡s
,

1178 (Ë
maxfûes
);

1179 
	`log_w¨n
("Server can't set maximum open files "

1181 (Ë
maxfûes
, 
	`°ªº‹
(
£ålimô_îr‹
));

1182 
	`log_w¨n
("Current maximum open files is %llu. ",

1183 (Ë
be°limô
);

1185 
	`log_w¨n
("Increased maximumÇumber of open files "

1187 (Ë
maxfûes
,

1188 (Ë
ﬁdlimô
);

1191 
föÆlimô
 = 
maxfûes
;

1195 
föÆmax˛õ¡s
 = 
föÆlimô
-
thªads
*2-
CONFIG_MIN_RESERVED_FDS
;

1196 i‡(
föÆmax˛õ¡s
 < 1) {

1197 
	`log_w¨n
("Your current 'ulimit -n' "

1201 (Ë
ﬁdlimô
,

1202 (Ë
maxfûes
);

1206 i‡(
föÆlimô
 < 
maxfûes
) {

1207 
c⁄f_vÆue
 *
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1208 
cv
->
vÆue
 = 
	`sds‰oml⁄gl⁄g
(()
föÆmax˛õ¡s
);

1209 
	`c⁄f_£rvî_£t
(
CONFIG_SOPN_MAXCLIENTS
,
cv
);

1210 
	`c⁄f_vÆue_de°roy
(
cv
);

1211 
	`log_w¨n
("maxclients has beenÑeducedÅo %dÅo compensate for "

1214 
föÆmax˛õ¡s
);

1217  ()
föÆlimô
;

1218 
	}
}

	@src/vr_server.h

1 #i‚de‡
_VR_SERVER_H_


2 
	#_VR_SERVER_H_


	)

4 
	#CONFIG_MIN_RESERVED_FDS
 32

	)

7 
	#CONFIG_AUTHPASS_MAX_LEN
 512

	)

9 
	#PROTO_SHARED_SELECT_CMDS
 10

	)

10 
	#CRON_DBS_PER_CALL
 16

	)

14 
	#ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
 20

	)

15 
	#ACTIVE_EXPIRE_CYCLE_FAST_DURATION
 1000

	)

16 
	#ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC
 25

	)

17 
	#ACTIVE_EXPIRE_CYCLE_SLOW
 0

	)

18 
	#ACTIVE_EXPIRE_CYCLE_FAST
 1

	)

21 
	#SCAN_TYPE_KEY
 0

	)

22 
	#SCAN_TYPE_HASH
 1

	)

23 
	#SCAN_TYPE_SET
 2

	)

24 
	#SCAN_TYPE_ZSET
 3

	)

27 
	#CONFIG_DEFAULT_MAXMEMORY_POLICY
 
MAXMEMORY_NO_EVICTION


	)

30 
	#OBJ_HASH_MAX_ZIPLIST_ENTRIES
 512

	)

31 
	#OBJ_HASH_MAX_ZIPLIST_VALUE
 64

	)

32 
	#OBJ_SET_MAX_INTSET_ENTRIES
 512

	)

33 
	#OBJ_ZSET_MAX_ZIPLIST_ENTRIES
 128

	)

34 
	#OBJ_ZSET_MAX_ZIPLIST_VALUE
 64

	)

37 
	#OBJ_LIST_MAX_ZIPLIST_SIZE
 -2

	)

38 
	#OBJ_LIST_COMPRESS_DEPTH
 0

	)

41 
	#CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES
 3000

	)

44 
	#LIST_HEAD
 0

	)

45 
	#LIST_TAIL
 1

	)

47 
	#ZSKIPLIST_MAXLEVEL
 32

	)

48 
	#ZSKIPLIST_P
 0.25

	)

51 
	#UNIT_SECONDS
 0

	)

52 
	#UNIT_MILLISECONDS
 1

	)

55 
	#HASHTABLE_MIN_FILL
 10

	)

60 
	#run_wôh_≥riod
(
_ms_
, 
¸⁄lo›s
Ëi‡((_ms_ <1000/
£rvî
.
hz
Ë|| !(¸⁄lo›s%((_ms_)/(1000/£rvî.hz))))

	)

66 
	#LRU_CLOCK
(Ë((1000/
£rvî
.
hz
 <
LRU_CLOCK_RESOLUTION
Ë? sîvî.
Ãu˛ock
 : 
	`gëLRUClock
())

	)

80 
	sªadyLi°
 {

81 
ªdisDb
 *
	mdb
;

82 
robj
 *
	mkey
;

83 } 
	tªadyLi°
;

85 
	svr_£rvî
 {

86 
´EvítLo›
 *
	mñ
;

87 
dli°
 *
	m˛õ¡s
;

90 
pid_t
 
	mpid
;

91 *
	mexecuèbÀ
;

92 *
	mc⁄figfûe
;

93 
	mhz
;

95 
d¨øy
 
	mdbs
;

96 
	mdbnum
;

97 
	mdb um
;

98 
	mdböum
;

100 
di˘
 *
	mcomm™ds
;

101 
di˘
 *
	m‹ig_comm™ds
;

103 
	mÃu˛ock
:
LRU_BITS
;

104 
	ma˘ivîehashög
;

106 *
	mpidfûe
;

107 
	m¨ch_bôs
;

108 
	mrunid
[
CONFIG_RUN_ID_SIZE
+1];

111 
	mp‹t
;

112 
	mt˝_backlog
;

114 
	mt˝kì∑live
;

115 
size_t
 
	m˛õ¡_max_quîybuf_Àn
;

119 
size_t
 
	mhash_max_zùli°_íåõs
;

120 
size_t
 
	mhash_max_zùli°_vÆue
;

121 
size_t
 
	m£t_max_öt£t_íåõs
;

122 
size_t
 
	mz£t_max_zùli°_íåõs
;

123 
size_t
 
	mz£t_max_zùli°_vÆue
;

124 
size_t
 
	mhŒ_•¨£_max_byãs
;

127 
	mli°_max_zùli°_size
;

128 
	mli°_com¥ess_dïth
;

131 
˛õ¡Buf„rLimôsC⁄fig
 
	m˛õ¡_obuf_limôs
[
CLIENT_TYPE_OBUF_COUNT
];

133 
dli°
 *
	mm⁄ô‹s
;

135 
time_t
 
	m°¨âime
;

138 
time_t
 
	munixtime
;

139 
	mm°ime
;

142 *
	munixsockë
;

145 
	mlﬂdög
;

146 
off_t
 
	mlﬂdög_tŸÆ_byãs
;

147 
off_t
 
	mlﬂdög_lﬂded_byãs
;

148 
time_t
 
	mlﬂdög_°¨t_time
;

149 
off_t
 
	mlﬂdög_¥o˚ss_evíts_öãrvÆ_byãs
;

152 
	maof_°©e
;

153 
	maof_fsync
;

154 *
	maof_fûíame
;

155 
	maof_no_fsync_⁄_ªwrôe
;

156 
	maof_ªwrôe_≥rc
;

157 
off_t
 
	maof_ªwrôe_mö_size
;

158 
off_t
 
	maof_ªwrôe_ba£_size
;

159 
off_t
 
	maof_cuºít_size
;

160 
	maof_ªwrôe_scheduÀd
;

161 
pid_t
 
	maof_chûd_pid
;

162 
dli°
 *
	maof_ªwrôe_buf_blocks
;

163 
sds
 
	maof_buf
;

164 
	maof_fd
;

165 
	maof_£À˘ed_db
;

166 
time_t
 
	maof_Êush_po°p⁄ed_°¨t
;

167 
time_t
 
	maof_œ°_fsync
;

168 
time_t
 
	maof_ªwrôe_time_œ°
;

169 
time_t
 
	maof_ªwrôe_time_°¨t
;

170 
	maof_œ°bgªwrôe_°©us
;

171 
	maof_dñayed_fsync
;

172 
	maof_ªwrôe_ö¸emíèl_fsync
;

173 
	maof_œ°_wrôe_°©us
;

174 
	maof_œ°_wrôe_î∫o
;

175 
	maof_lﬂd_åunˇãd
;

177 
	maof_pùe_wrôe_d©a_to_chûd
;

178 
	maof_pùe_ªad_d©a_‰om_∑ª¡
;

179 
	maof_pùe_wrôe_ack_to_∑ª¡
;

180 
	maof_pùe_ªad_ack_‰om_chûd
;

181 
	maof_pùe_wrôe_ack_to_chûd
;

182 
	maof_pùe_ªad_ack_‰om_∑ª¡
;

183 
	maof_°›_£ndög_diff
;

185 
sds
 
	maof_chûd_diff
;

188 
	mdúty
;

189 
	mdúty_bef‹e_bgßve
;

190 
pid_t
 
	mrdb_chûd_pid
;

191 
ßvï¨am
 *
	mßvï¨ams
;

192 
	mßvï¨am¶í
;

193 *
	mrdb_fûíame
;

194 
	mrdb_com¥essi⁄
;

195 
	mrdb_checksum
;

196 
time_t
 
	mœ°ßve
;

197 
time_t
 
	mœ°bgßve_åy
;

198 
time_t
 
	mrdb_ßve_time_œ°
;

199 
time_t
 
	mrdb_ßve_time_°¨t
;

200 
	mrdb_chûd_ty≥
;

201 
	mœ°bgßve_°©us
;

202 
	m°›_wrôes_⁄_bgßve_îr
;

203 
	mrdb_pùe_wrôe_ªsu…_to_∑ª¡
;

204 
	mrdb_pùe_ªad_ªsu…_‰om_chûd
;

208 
˛õ¡
 *
	mlua_˛õ¡
;

209 
˛õ¡
 *
	mlua_ˇŒî
;

210 
di˘
 *
	mlua_s¸ùts
;

211 
m°ime_t
 
	mlua_time_limô
;

212 
m°ime_t
 
	mlua_time_°¨t
;

213 
	mlua_wrôe_dúty
;

215 
	mlua_øndom_dúty
;

217 
	mlua_ª∂iˇã_comm™ds
;

218 
	mlua_mu…i_emôãd
;

219 
	mlua_ª∂
;

220 
	mlua_timedout
;

222 
	mlua_kûl
;

223 
	mlua_Æways_ª∂iˇã_comm™ds
;

227 
dli°
 *
	mªady_keys
;

230 
ªdisOpAºay
 
	mÆso_¥›ag©e
;

234 
di˘
 *
	mpubsub_ch™√ls
;

236 
dli°
 *
	mpubsub_∑âîns
;

238 
	mnŸify_key•a˚_evíts
;

243 
ªdisComm™d
 *
	mdñComm™d
, *
	mmu…iComm™d
, *
	mÕushComm™d
, *
	mÕ›Comm™d
,

244 *
	mΩ›Comm™d
, *
	m§emComm™d
, *
	mexecComm™d
;

248 
size_t
 
	msy°em_mem‹y_size
;

253 
	szskùli°Node
 {

254 
robj
 *
	mobj
;

255 
	msc‹e
;

256 
zskùli°Node
 *
	mbackw¨d
;

257 
	szskùli°Levñ
 {

258 
zskùli°Node
 *
	mf‹w¨d
;

259 
	m•™
;

260 } 
	mÀvñ
[];

261 } 
	tzskùli°Node
;

263 
	szskùli°
 {

264 
zskùli°Node
 *
	mhódî
, *
	mèû
;

265 
	mÀngth
;

266 
	mÀvñ
;

267 } 
	tzskùli°
;

269 
	sz£t
 {

270 
di˘
 *
	mdi˘
;

271 
zskùli°
 *
	mz¶
;

272 } 
	tz£t
;

277 
robj
 *
	msubje˘
;

278 
	mícodög
;

279 
	mdúe˘i⁄
;

280 
quickli°Iãr
 *
	môî
;

281 } 
	tli°Ty≥Iãøt‹
;

286 
li°Ty≥Iãøt‹
 *
	mli
;

287 
quickli°E¡ry
 
	míåy
;

288 } 
	tli°Ty≥E¡ry
;

293 
robj
 *
	msubje˘
;

294 
	mícodög
;

295 
	mii
;

296 
di˘Iãøt‹
 *
	mdi
;

297 } 
	t£tTy≥Iãøt‹
;

305 
robj
 *
	msubje˘
;

306 
	mícodög
;

308 *
	mÂå
, *
	mv±r
;

310 
di˘Iãøt‹
 *
	mdi
;

311 
di˘E¡ry
 *
	mde
;

312 } 
	thashTy≥Iãøt‹
;

315 
	ssh¨edObje˘sSåu˘
 {

316 
robj
 *
	m¸lf
, *
	mok
, *
	mîr
, *
	mem±ybulk
, *
	mczîo
, *
	mc⁄e
, *
	m˙eg⁄e
, *
	mp⁄g
, *
	m•a˚
,

317 *
	mcﬁ⁄
, *
	mnuŒbulk
, *
	mnuŒmu…ibulk
, *
	mqueued
,

318 *
	mem±ymu…ibulk
, *
	mwr⁄gty≥îr
, *
	mnokeyîr
, *
	msy¡axîr
, *
	mßmeobje˘îr
,

319 *
	mouto‰™gìº
, *
	mnos¸ùãº
, *
	mlﬂdögîr
, *
	m¶ows¸ùãº
, *
	mbgßvìº
,

320 *
	mma°îdow√º
, *
	mro¶avìº
, *
	mexeˇb‹ãº
, *
	mnﬂuthîr
, *
	mnﬂdmöîr
, *
	mn‹ïliˇ£º
,

321 *
	mbusykeyîr
, *
	moomîr
, *
	m∂us
, *
	mmesßgebulk
, *
	mpmesßgebulk
, *
	msubs¸ibebulk
,

322 *
	munsubs¸ibebulk
, *
	mpsubs¸ibebulk
, *
	mpunsubs¸ibebulk
, *
	mdñ
, *
	mΩ›
, *
	mÕ›
,

323 *
	mÕush
, *
	mem±ysˇn
, *
	mmö°rög
, *
	mmax°rög
,

324 *
	m£À˘
[
PROTO_SHARED_SELECT_CMDS
],

325 *
	möãgîs
[
OBJ_SHARED_INTEGERS
],

326 *
	mmbulkhdr
[
OBJ_SHARED_BULKHDR_LEN
],

327 *
	mbulkhdr
[
OBJ_SHARED_BULKHDR_LEN
],

328 *
	moutofcom∂exôylimô
,

329 *
	m£¡öñ
;

333 
vr_£rvî
 
£rvî
;

335 
sh¨edObje˘sSåu˘
 
sh¨ed
;;

337 
di˘Ty≥
 
hashDi˘Ty≥
;

339 
di˘Ty≥
 
£tDi˘Ty≥
;

341 
di˘Ty≥
 
z£tDi˘Ty≥
;

343 
	#£rvîP™ic
(
_e
Ë
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, "as£π faûd: %s", #_e)

	)

345 
	#£rvîAs£πWôhInfo
(
_c
,
_o
,
_e
Ë((_e)?()0 : (
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, "as£π faûd: %s", #_e)))

	)

347 
di˘SåHash
(c⁄° *
key
);

348 
di˘SåCa£Hash
(c⁄° *
key
);

349 
di˘SdsHash
(c⁄° *
key
);

350 
di˘SdsCa£Hash
(c⁄° *
key
);

351 
di˘SåKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

352 
di˘SåKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

353 
di˘SdsKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

354 
di˘SdsKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

355 *
di˘SdsKeyDupFromSå
(*
¥ivd©a
, c⁄° *
key
);

356 
di˘SdsDe°ru˘‹
(*
¥ivd©a
, *
vÆ
);

357 
di˘Obje˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
);

358 
di˘EncObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

359 
di˘EncObjHash
(c⁄° *
key
);

360 
di˘ObjHash
(c⁄° *
key
);

361 
di˘ObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

362 
di˘Li°De°ru˘‹
(*
¥ivd©a
, *
vÆ
);

364 
öô_£rvî
(
ö°™˚
 *
nci
);

366 
gëLRUClock
();

368 
‰ìMem‹yIfNìded
(
vr_evíéo›
 *
vñ
);

369 
pögComm™d
(
˛õ¡
 *
c
);

370 
time_ödïídít_°rcmp
(*
a
, *
b
);

371 
authComm™d
(
˛õ¡
 *
c
) ;

372 
admöComm™d
(
˛õ¡
 *
c
) ;

374 
htNìdsResize
(
di˘
 *dict);

376 
sds
 
gíVúeInfoSåög
(
vr_evíéo›
 *
vñ
, *
£˘i⁄
);

377 
öfoComm™d
(
˛õ¡
 *
c
);

378 
echoComm™d
(
˛õ¡
 *
c
);

379 
timeComm™d
(
˛õ¡
 *
c
);

381 
adju°O≥nFûesLimô
(
max˛õ¡s
);

	@src/vr_server.h

1 #i‚de‡
_VR_SERVER_H_


2 
	#_VR_SERVER_H_


	)

4 
	#CONFIG_MIN_RESERVED_FDS
 32

	)

7 
	#CONFIG_AUTHPASS_MAX_LEN
 512

	)

9 
	#PROTO_SHARED_SELECT_CMDS
 10

	)

10 
	#CRON_DBS_PER_CALL
 16

	)

14 
	#ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
 20

	)

15 
	#ACTIVE_EXPIRE_CYCLE_FAST_DURATION
 1000

	)

16 
	#ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC
 25

	)

17 
	#ACTIVE_EXPIRE_CYCLE_SLOW
 0

	)

18 
	#ACTIVE_EXPIRE_CYCLE_FAST
 1

	)

21 
	#SCAN_TYPE_KEY
 0

	)

22 
	#SCAN_TYPE_HASH
 1

	)

23 
	#SCAN_TYPE_SET
 2

	)

24 
	#SCAN_TYPE_ZSET
 3

	)

27 
	#CONFIG_DEFAULT_MAXMEMORY_POLICY
 
MAXMEMORY_NO_EVICTION


	)

30 
	#OBJ_HASH_MAX_ZIPLIST_ENTRIES
 512

	)

31 
	#OBJ_HASH_MAX_ZIPLIST_VALUE
 64

	)

32 
	#OBJ_SET_MAX_INTSET_ENTRIES
 512

	)

33 
	#OBJ_ZSET_MAX_ZIPLIST_ENTRIES
 128

	)

34 
	#OBJ_ZSET_MAX_ZIPLIST_VALUE
 64

	)

37 
	#OBJ_LIST_MAX_ZIPLIST_SIZE
 -2

	)

38 
	#OBJ_LIST_COMPRESS_DEPTH
 0

	)

41 
	#CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES
 3000

	)

44 
	#LIST_HEAD
 0

	)

45 
	#LIST_TAIL
 1

	)

47 
	#ZSKIPLIST_MAXLEVEL
 32

	)

48 
	#ZSKIPLIST_P
 0.25

	)

51 
	#UNIT_SECONDS
 0

	)

52 
	#UNIT_MILLISECONDS
 1

	)

55 
	#HASHTABLE_MIN_FILL
 10

	)

60 
	#run_wôh_≥riod
(
_ms_
, 
¸⁄lo›s
Ëi‡((_ms_ <1000/
£rvî
.
hz
Ë|| !(¸⁄lo›s%((_ms_)/(1000/£rvî.hz))))

	)

66 
	#LRU_CLOCK
(Ë((1000/
£rvî
.
hz
 <
LRU_CLOCK_RESOLUTION
Ë? sîvî.
Ãu˛ock
 : 
	`gëLRUClock
())

	)

80 
	sªadyLi°
 {

81 
ªdisDb
 *
	mdb
;

82 
robj
 *
	mkey
;

83 } 
	tªadyLi°
;

85 
	svr_£rvî
 {

86 
´EvítLo›
 *
	mñ
;

87 
dli°
 *
	m˛õ¡s
;

90 
pid_t
 
	mpid
;

91 *
	mexecuèbÀ
;

92 *
	mc⁄figfûe
;

93 
	mhz
;

95 
d¨øy
 
	mdbs
;

96 
	mdbnum
;

97 
	mdb um
;

98 
	mdböum
;

100 
di˘
 *
	mcomm™ds
;

101 
di˘
 *
	m‹ig_comm™ds
;

103 
	mÃu˛ock
:
LRU_BITS
;

104 
	ma˘ivîehashög
;

106 *
	mpidfûe
;

107 
	m¨ch_bôs
;

108 
	mrunid
[
CONFIG_RUN_ID_SIZE
+1];

111 
	mp‹t
;

112 
	mt˝_backlog
;

114 
	mt˝kì∑live
;

115 
size_t
 
	m˛õ¡_max_quîybuf_Àn
;

119 
size_t
 
	mhash_max_zùli°_íåõs
;

120 
size_t
 
	mhash_max_zùli°_vÆue
;

121 
size_t
 
	m£t_max_öt£t_íåõs
;

122 
size_t
 
	mz£t_max_zùli°_íåõs
;

123 
size_t
 
	mz£t_max_zùli°_vÆue
;

124 
size_t
 
	mhŒ_•¨£_max_byãs
;

127 
	mli°_max_zùli°_size
;

128 
	mli°_com¥ess_dïth
;

131 
˛õ¡Buf„rLimôsC⁄fig
 
	m˛õ¡_obuf_limôs
[
CLIENT_TYPE_OBUF_COUNT
];

133 
dli°
 *
	mm⁄ô‹s
;

135 
time_t
 
	m°¨âime
;

138 
time_t
 
	munixtime
;

139 
	mm°ime
;

142 *
	munixsockë
;

145 
	mlﬂdög
;

146 
off_t
 
	mlﬂdög_tŸÆ_byãs
;

147 
off_t
 
	mlﬂdög_lﬂded_byãs
;

148 
time_t
 
	mlﬂdög_°¨t_time
;

149 
off_t
 
	mlﬂdög_¥o˚ss_evíts_öãrvÆ_byãs
;

152 
	maof_°©e
;

153 
	maof_fsync
;

154 *
	maof_fûíame
;

155 
	maof_no_fsync_⁄_ªwrôe
;

156 
	maof_ªwrôe_≥rc
;

157 
off_t
 
	maof_ªwrôe_mö_size
;

158 
off_t
 
	maof_ªwrôe_ba£_size
;

159 
off_t
 
	maof_cuºít_size
;

160 
	maof_ªwrôe_scheduÀd
;

161 
pid_t
 
	maof_chûd_pid
;

162 
dli°
 *
	maof_ªwrôe_buf_blocks
;

163 
sds
 
	maof_buf
;

164 
	maof_fd
;

165 
	maof_£À˘ed_db
;

166 
time_t
 
	maof_Êush_po°p⁄ed_°¨t
;

167 
time_t
 
	maof_œ°_fsync
;

168 
time_t
 
	maof_ªwrôe_time_œ°
;

169 
time_t
 
	maof_ªwrôe_time_°¨t
;

170 
	maof_œ°bgªwrôe_°©us
;

171 
	maof_dñayed_fsync
;

172 
	maof_ªwrôe_ö¸emíèl_fsync
;

173 
	maof_œ°_wrôe_°©us
;

174 
	maof_œ°_wrôe_î∫o
;

175 
	maof_lﬂd_åunˇãd
;

177 
	maof_pùe_wrôe_d©a_to_chûd
;

178 
	maof_pùe_ªad_d©a_‰om_∑ª¡
;

179 
	maof_pùe_wrôe_ack_to_∑ª¡
;

180 
	maof_pùe_ªad_ack_‰om_chûd
;

181 
	maof_pùe_wrôe_ack_to_chûd
;

182 
	maof_pùe_ªad_ack_‰om_∑ª¡
;

183 
	maof_°›_£ndög_diff
;

185 
sds
 
	maof_chûd_diff
;

188 
	mdúty
;

189 
	mdúty_bef‹e_bgßve
;

190 
pid_t
 
	mrdb_chûd_pid
;

191 
ßvï¨am
 *
	mßvï¨ams
;

192 
	mßvï¨am¶í
;

193 *
	mrdb_fûíame
;

194 
	mrdb_com¥essi⁄
;

195 
	mrdb_checksum
;

196 
time_t
 
	mœ°ßve
;

197 
time_t
 
	mœ°bgßve_åy
;

198 
time_t
 
	mrdb_ßve_time_œ°
;

199 
time_t
 
	mrdb_ßve_time_°¨t
;

200 
	mrdb_chûd_ty≥
;

201 
	mœ°bgßve_°©us
;

202 
	m°›_wrôes_⁄_bgßve_îr
;

203 
	mrdb_pùe_wrôe_ªsu…_to_∑ª¡
;

204 
	mrdb_pùe_ªad_ªsu…_‰om_chûd
;

208 
˛õ¡
 *
	mlua_˛õ¡
;

209 
˛õ¡
 *
	mlua_ˇŒî
;

210 
di˘
 *
	mlua_s¸ùts
;

211 
m°ime_t
 
	mlua_time_limô
;

212 
m°ime_t
 
	mlua_time_°¨t
;

213 
	mlua_wrôe_dúty
;

215 
	mlua_øndom_dúty
;

217 
	mlua_ª∂iˇã_comm™ds
;

218 
	mlua_mu…i_emôãd
;

219 
	mlua_ª∂
;

220 
	mlua_timedout
;

222 
	mlua_kûl
;

223 
	mlua_Æways_ª∂iˇã_comm™ds
;

227 
dli°
 *
	mªady_keys
;

230 
ªdisOpAºay
 
	mÆso_¥›ag©e
;

234 
di˘
 *
	mpubsub_ch™√ls
;

236 
dli°
 *
	mpubsub_∑âîns
;

238 
	mnŸify_key•a˚_evíts
;

243 
ªdisComm™d
 *
	mdñComm™d
, *
	mmu…iComm™d
, *
	mÕushComm™d
, *
	mÕ›Comm™d
,

244 *
	mΩ›Comm™d
, *
	m§emComm™d
, *
	mexecComm™d
;

248 
size_t
 
	msy°em_mem‹y_size
;

253 
	szskùli°Node
 {

254 
robj
 *
	mobj
;

255 
	msc‹e
;

256 
zskùli°Node
 *
	mbackw¨d
;

257 
	szskùli°Levñ
 {

258 
zskùli°Node
 *
	mf‹w¨d
;

259 
	m•™
;

260 } 
	mÀvñ
[];

261 } 
	tzskùli°Node
;

263 
	szskùli°
 {

264 
zskùli°Node
 *
	mhódî
, *
	mèû
;

265 
	mÀngth
;

266 
	mÀvñ
;

267 } 
	tzskùli°
;

269 
	sz£t
 {

270 
di˘
 *
	mdi˘
;

271 
zskùli°
 *
	mz¶
;

272 } 
	tz£t
;

277 
robj
 *
	msubje˘
;

278 
	mícodög
;

279 
	mdúe˘i⁄
;

280 
quickli°Iãr
 *
	môî
;

281 } 
	tli°Ty≥Iãøt‹
;

286 
li°Ty≥Iãøt‹
 *
	mli
;

287 
quickli°E¡ry
 
	míåy
;

288 } 
	tli°Ty≥E¡ry
;

293 
robj
 *
	msubje˘
;

294 
	mícodög
;

295 
	mii
;

296 
di˘Iãøt‹
 *
	mdi
;

297 } 
	t£tTy≥Iãøt‹
;

305 
robj
 *
	msubje˘
;

306 
	mícodög
;

308 *
	mÂå
, *
	mv±r
;

310 
di˘Iãøt‹
 *
	mdi
;

311 
di˘E¡ry
 *
	mde
;

312 } 
	thashTy≥Iãøt‹
;

315 
	ssh¨edObje˘sSåu˘
 {

316 
robj
 *
	m¸lf
, *
	mok
, *
	mîr
, *
	mem±ybulk
, *
	mczîo
, *
	mc⁄e
, *
	m˙eg⁄e
, *
	mp⁄g
, *
	m•a˚
,

317 *
	mcﬁ⁄
, *
	mnuŒbulk
, *
	mnuŒmu…ibulk
, *
	mqueued
,

318 *
	mem±ymu…ibulk
, *
	mwr⁄gty≥îr
, *
	mnokeyîr
, *
	msy¡axîr
, *
	mßmeobje˘îr
,

319 *
	mouto‰™gìº
, *
	mnos¸ùãº
, *
	mlﬂdögîr
, *
	m¶ows¸ùãº
, *
	mbgßvìº
,

320 *
	mma°îdow√º
, *
	mro¶avìº
, *
	mexeˇb‹ãº
, *
	mnﬂuthîr
, *
	mnﬂdmöîr
, *
	mn‹ïliˇ£º
,

321 *
	mbusykeyîr
, *
	moomîr
, *
	m∂us
, *
	mmesßgebulk
, *
	mpmesßgebulk
, *
	msubs¸ibebulk
,

322 *
	munsubs¸ibebulk
, *
	mpsubs¸ibebulk
, *
	mpunsubs¸ibebulk
, *
	mdñ
, *
	mΩ›
, *
	mÕ›
,

323 *
	mÕush
, *
	mem±ysˇn
, *
	mmö°rög
, *
	mmax°rög
,

324 *
	m£À˘
[
PROTO_SHARED_SELECT_CMDS
],

325 *
	möãgîs
[
OBJ_SHARED_INTEGERS
],

326 *
	mmbulkhdr
[
OBJ_SHARED_BULKHDR_LEN
],

327 *
	mbulkhdr
[
OBJ_SHARED_BULKHDR_LEN
],

328 *
	moutofcom∂exôylimô
,

329 *
	m£¡öñ
;

333 
vr_£rvî
 
£rvî
;

335 
sh¨edObje˘sSåu˘
 
sh¨ed
;;

337 
di˘Ty≥
 
hashDi˘Ty≥
;

339 
di˘Ty≥
 
£tDi˘Ty≥
;

341 
di˘Ty≥
 
z£tDi˘Ty≥
;

343 
	#£rvîP™ic
(
_e
Ë
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, "as£π faûd: %s", #_e)

	)

345 
	#£rvîAs£πWôhInfo
(
_c
,
_o
,
_e
Ë((_e)?()0 : (
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, "as£π faûd: %s", #_e)))

	)

347 
di˘SåHash
(c⁄° *
key
);

348 
di˘SåCa£Hash
(c⁄° *
key
);

349 
di˘SdsHash
(c⁄° *
key
);

350 
di˘SdsCa£Hash
(c⁄° *
key
);

351 
di˘SåKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

352 
di˘SåKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

353 
di˘SdsKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

354 
di˘SdsKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

355 *
di˘SdsKeyDupFromSå
(*
¥ivd©a
, c⁄° *
key
);

356 
di˘SdsDe°ru˘‹
(*
¥ivd©a
, *
vÆ
);

357 
di˘Obje˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
);

358 
di˘EncObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

359 
di˘EncObjHash
(c⁄° *
key
);

360 
di˘ObjHash
(c⁄° *
key
);

361 
di˘ObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

362 
di˘Li°De°ru˘‹
(*
¥ivd©a
, *
vÆ
);

364 
öô_£rvî
(
ö°™˚
 *
nci
);

366 
gëLRUClock
();

368 
‰ìMem‹yIfNìded
(
vr_evíéo›
 *
vñ
);

369 
pögComm™d
(
˛õ¡
 *
c
);

370 
time_ödïídít_°rcmp
(*
a
, *
b
);

371 
authComm™d
(
˛õ¡
 *
c
) ;

372 
admöComm™d
(
˛õ¡
 *
c
) ;

374 
htNìdsResize
(
di˘
 *dict);

376 
sds
 
gíVúeInfoSåög
(
vr_evíéo›
 *
vñ
, *
£˘i⁄
);

377 
öfoComm™d
(
˛õ¡
 *
c
);

378 
echoComm™d
(
˛õ¡
 *
c
);

379 
timeComm™d
(
˛õ¡
 *
c
);

381 
adju°O≥nFûesLimô
(
max˛õ¡s
);

	@src/vr_signal.c

1 
	~<°dlib.h
>

2 
	~<sig«l.h
>

4 
	~<vr_c‹e.h
>

5 
	~<vr_sig«l.h
>

7 
sig«l
 
	gsig«ls
[] = {

8 { 
SIGUSR1
, "SIGUSR1", 0, 
sig«l_h™dÀr
 },

9 { 
SIGUSR2
, "SIGUSR2", 0, 
sig«l_h™dÀr
 },

10 { 
SIGTTIN
, "SIGTTIN", 0, 
sig«l_h™dÀr
 },

11 { 
SIGTTOU
, "SIGTTOU", 0, 
sig«l_h™dÀr
 },

12 { 
SIGHUP
, "SIGHUP", 0, 
sig«l_h™dÀr
 },

13 { 
SIGINT
, "SIGINT", 0, 
sig«l_h™dÀr
 },

14 { 
SIGSEGV
, "SIGSEGV", ()
SA_RESETHAND
, 
sig«l_h™dÀr
 },

15 { 
SIGPIPE
, "SIGPIPE", 0, 
SIG_IGN
 },

16 { 0, 
NULL
, 0, NULL }

19 
r°©us_t


20 
	$sig«l_öô
()

22 
sig«l
 *
sig
;

24 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

25 
r°©us_t
 
°©us
;

26 
siga˘i⁄
 
ß
;

28 
	`mem£t
(&
ß
, 0, (sa));

29 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

30 
ß
.
ß_Êags
 = 
sig
->
Êags
;

31 
	`sigem±y£t
(&
ß
.
ß_mask
);

33 
°©us
 = 
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
);

34 i‡(
°©us
 < 0) {

35 
	`log_îr‹
("siga˘i⁄(%sËÁûed: %s", 
sig
->
sig«me
,

36 
	`°ªº‹
(
î∫o
));

37  
VR_ERROR
;

41  
VR_OK
;

42 
	}
}

45 
	$sig«l_deöô
()

47 
	}
}

50 
	$sig«l_h™dÀr
(
signo
)

52 
sig«l
 *
sig
;

53 (*
a˘i⁄
)();

54 *
a˘i⁄°r
;

55 
boﬁ
 
d⁄e
;

57 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

58 i‡(
sig
->
signo
 == signo) {

62 
	`ASSERT
(
sig
->
signo
 != 0);

64 
a˘i⁄°r
 = "";

65 
a˘i⁄
 = 
NULL
;

66 
d⁄e
 = 
Ál£
;

68 
signo
) {

69 
SIGUSR1
:

72 
SIGUSR2
:

75 
SIGTTIN
:

76 
a˘i⁄°r
 = ", upÜoggingÜevel";

77 
a˘i⁄
 = 
log_Àvñ_up
;

80 
SIGTTOU
:

81 
a˘i⁄°r
 = ", downÜoggingÜevel";

82 
a˘i⁄
 = 
log_Àvñ_down
;

85 
SIGHUP
:

86 
a˘i⁄°r
 = ",ÑeopeningÜog file";

87 
a˘i⁄
 = 
log_ª›í
;

90 
SIGINT
:

91 
d⁄e
 = 
åue
;

92 
a˘i⁄°r
 = ",Éxiting";

95 
SIGSEGV
:

96 
	`log_°ackåa˚
();

97 
a˘i⁄°r
 = ", core dumping";

98 
	`øi£
(
SIGSEGV
);

102 
	`NOT_REACHED
();

105 
	`log_ß„
("sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄°r
);

107 i‡(
a˘i⁄
 !
NULL
) {

108 
	`a˘i⁄
();

111 i‡(
d⁄e
) {

112 
	`exô
(1);

114 
	}
}

	@src/vr_signal.c

1 
	~<°dlib.h
>

2 
	~<sig«l.h
>

4 
	~<vr_c‹e.h
>

5 
	~<vr_sig«l.h
>

7 
sig«l
 
	gsig«ls
[] = {

8 { 
SIGUSR1
, "SIGUSR1", 0, 
sig«l_h™dÀr
 },

9 { 
SIGUSR2
, "SIGUSR2", 0, 
sig«l_h™dÀr
 },

10 { 
SIGTTIN
, "SIGTTIN", 0, 
sig«l_h™dÀr
 },

11 { 
SIGTTOU
, "SIGTTOU", 0, 
sig«l_h™dÀr
 },

12 { 
SIGHUP
, "SIGHUP", 0, 
sig«l_h™dÀr
 },

13 { 
SIGINT
, "SIGINT", 0, 
sig«l_h™dÀr
 },

14 { 
SIGSEGV
, "SIGSEGV", ()
SA_RESETHAND
, 
sig«l_h™dÀr
 },

15 { 
SIGPIPE
, "SIGPIPE", 0, 
SIG_IGN
 },

16 { 0, 
NULL
, 0, NULL }

19 
r°©us_t


20 
	$sig«l_öô
()

22 
sig«l
 *
sig
;

24 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

25 
r°©us_t
 
°©us
;

26 
siga˘i⁄
 
ß
;

28 
	`mem£t
(&
ß
, 0, (sa));

29 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

30 
ß
.
ß_Êags
 = 
sig
->
Êags
;

31 
	`sigem±y£t
(&
ß
.
ß_mask
);

33 
°©us
 = 
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
);

34 i‡(
°©us
 < 0) {

35 
	`log_îr‹
("siga˘i⁄(%sËÁûed: %s", 
sig
->
sig«me
,

36 
	`°ªº‹
(
î∫o
));

37  
VR_ERROR
;

41  
VR_OK
;

42 
	}
}

45 
	$sig«l_deöô
()

47 
	}
}

50 
	$sig«l_h™dÀr
(
signo
)

52 
sig«l
 *
sig
;

53 (*
a˘i⁄
)();

54 *
a˘i⁄°r
;

55 
boﬁ
 
d⁄e
;

57 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

58 i‡(
sig
->
signo
 == signo) {

62 
	`ASSERT
(
sig
->
signo
 != 0);

64 
a˘i⁄°r
 = "";

65 
a˘i⁄
 = 
NULL
;

66 
d⁄e
 = 
Ál£
;

68 
signo
) {

69 
SIGUSR1
:

72 
SIGUSR2
:

75 
SIGTTIN
:

76 
a˘i⁄°r
 = ", upÜoggingÜevel";

77 
a˘i⁄
 = 
log_Àvñ_up
;

80 
SIGTTOU
:

81 
a˘i⁄°r
 = ", downÜoggingÜevel";

82 
a˘i⁄
 = 
log_Àvñ_down
;

85 
SIGHUP
:

86 
a˘i⁄°r
 = ",ÑeopeningÜog file";

87 
a˘i⁄
 = 
log_ª›í
;

90 
SIGINT
:

91 
d⁄e
 = 
åue
;

92 
a˘i⁄°r
 = ",Éxiting";

95 
SIGSEGV
:

96 
	`log_°ackåa˚
();

97 
a˘i⁄°r
 = ", core dumping";

98 
	`øi£
(
SIGSEGV
);

102 
	`NOT_REACHED
();

105 
	`log_ß„
("sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄°r
);

107 i‡(
a˘i⁄
 !
NULL
) {

108 
	`a˘i⁄
();

111 i‡(
d⁄e
) {

112 
	`exô
(1);

114 
	}
}

	@src/vr_signal.h

1 #i‚de‡
_VR_SIGNAL_H_


2 
	#_VR_SIGNAL_H_


	)

4 
	ssig«l
 {

5 
	msigno
;

6 *
	msig«me
;

7 
	mÊags
;

8 (*
	mh™dÀr
)(
	msigno
);

12 
r°©us_t
 
sig«l_öô
();

14 
sig«l_deöô
();

16 
sig«l_h™dÀr
(
signo
);

	@src/vr_signal.h

1 #i‚de‡
_VR_SIGNAL_H_


2 
	#_VR_SIGNAL_H_


	)

4 
	ssig«l
 {

5 
	msigno
;

6 *
	msig«me
;

7 
	mÊags
;

8 (*
	mh™dÀr
)(
	msigno
);

12 
r°©us_t
 
sig«l_öô
();

14 
sig«l_deöô
();

16 
sig«l_h™dÀr
(
signo
);

	@src/vr_slowlog.c

1 
	~<vr_c‹e.h
>

3 
±hªad_rwlock_t
 
	grwlockî
;

5 
dli°
 *
	g¶owlog
;

7 
	g¶owlog_íåy_id
;

12 
¶owlogE¡ry
 *
	$¶owlogCª©eE¡ry
(
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
) {

13 
¶owlogE¡ry
 *
£
 = 
	`dÆloc
((*se));

14 
j
, 
¶¨gc
 = 
¨gc
;

16 i‡(
¶¨gc
 > 
SLOWLOG_ENTRY_MAX_ARGC
) slargc = SLOWLOG_ENTRY_MAX_ARGC;

17 
£
->
¨gc
 = 
¶¨gc
;

18 
£
->
¨gv
 = 
	`dÆloc
((
robj
*)*
¶¨gc
);

19 
j
 = 0; j < 
¶¨gc
; j++) {

23 i‡(
¶¨gc
 !
¨gc
 && 
j
 == slargc-1) {

24 
£
->
¨gv
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

25 
	`sdsˇçrötf
(
	`sd£m±y
(),"... (%d moreárguments)",

26 
¨gc
-
¶¨gc
+1));

29 i‡(
¨gv
[
j
]->
ty≥
 =
OBJ_STRING
 &&

30 
	`sdsEncodedObje˘
(
¨gv
[
j
]) &&

31 
	`sd¶í
(
¨gv
[
j
]->
±r
Ë> 
SLOWLOG_ENTRY_MAX_STRING
)

33 
sds
 
s
 = 
	`sd¢ewÀn
(
¨gv
[
j
]->
±r
, 
SLOWLOG_ENTRY_MAX_STRING
);

35 
s
 = 
	`sdsˇçrötf
(s,"... (%lu more bytes)",

37 
	`sd¶í
(
¨gv
[
j
]->
±r
Ë- 
SLOWLOG_ENTRY_MAX_STRING
);

38 
£
->
¨gv
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,
s
);

40 
£
->
¨gv
[
j
] = 
	`dupSåögObje˘Unc⁄°™t
(argv[j]);

44 
£
->
time
 = 
	`time
(
NULL
);

45 
£
->
duøti⁄
 = duration;

46  
£
;

47 
	}
}

53 
	$¶owlogFªeE¡ry
(*
£±r
) {

54 
¶owlogE¡ry
 *
£
 = 
£±r
;

55 
j
;

57 
j
 = 0; j < 
£
->
¨gc
; j++)

58 
	`‰ìObje˘
(
£
->
¨gv
[
j
]);

59 
	`d‰ì
(
£
->
¨gv
);

60 
	`d‰ì
(
£
);

61 
	}
}

65 
	$¶owlogInô
() {

66 
	`±hªad_rwlock_öô
(&
rwlockî
,
NULL
);

67 
¶owlog
 = 
	`dli°Cª©e
();

68 
¶owlog_íåy_id
 = 0;

69 
	`dli°SëFªeMëhod
(
¶owlog
,
¶owlogFªeE¡ry
);

70 
	}
}

75 
	$¶owlogPushE¡ryIfNìded
(
vr_evíéo›
 *
vñ
, 
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
) {

76 
¶owlog_log_¶owî_th™
;

77 
¶owlog_max_Àn
;

79 
¶owlog_log_¶owî_th™
 = 
vñ
->
cc
.slowlog_log_slower_than;

80 i‡(
¶owlog_log_¶owî_th™
 < 0) ;

81 i‡(
duøti⁄
 >
¶owlog_log_¶owî_th™
) {

82 
¶owlogE¡ry
 *
£
 = 
	`¶owlogCª©eE¡ry
(
¨gv
,
¨gc
,
duøti⁄
);

83 
	`±hªad_rwlock_wæock
(&
rwlockî
);

84 
£
->
id
 = 
¶owlog_íåy_id
++;

85 
	`dli°AddNodeHód
(
¶owlog
,
£
);

86 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

89 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGML
,&
¶owlog_max_Àn
);

91 
	`±hªad_rwlock_wæock
(&
rwlockî
);

92 
	`dli°Lígth
(
¶owlog
Ë> 
¶owlog_max_Àn
)

93 
	`dli°DñNode
(
¶owlog
,
	`dli°La°
(slowlog));

94 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

95 
	}
}

98 
	$¶owlogRe£t
() {

99 
	`±hªad_rwlock_wæock
(&
rwlockî
);

100 
	`dli°Lígth
(
¶owlog
) > 0)

101 
	`dli°DñNode
(
¶owlog
,
	`dli°La°
(slowlog));

102 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

103 
	}
}

107 
	$¶owlogComm™d
(
˛õ¡
 *
c
) {

108 i‡(
c
->
¨gc
 =2 && !
	`°rˇ£cmp
(c->
¨gv
[1]->
±r
,"reset")) {

109 
	`¶owlogRe£t
();

110 
	`addRïly
(
c
,
sh¨ed
.
ok
);

111 } i‡(
c
->
¨gc
 =2 && !
	`°rˇ£cmp
(c->
¨gv
[1]->
±r
,"len")) {

112 
Àn
;

113 
	`±hªad_rwlock_rdlock
(&
rwlockî
);

114 
Àn
 = 
	`dli°Lígth
(
¶owlog
);

115 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

116 
	`addRïlyL⁄gL⁄g
(
c
,
Àn
);

117 } i‡((
c
->
¨gc
 == 2 || c->argc == 3) &&

118 !
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get"))

120 
cou¡
 = 10, 
£¡
 = 0;

121 
dli°Iãr
 
li
;

122 *
tŸíåõs
;

123 
dli°Node
 *
 
;

124 
¶owlogE¡ry
 *
£
;

126 i‡(
c
->
¨gc
 == 3 &&

127 
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
cou¡
,
NULL
Ë!
VR_OK
)

130 
	`±hªad_rwlock_rdlock
(&
rwlockî
);

131 
	`dli°Rewöd
(
¶owlog
,&
li
);

132 
tŸíåõs
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

133 
cou¡
-- && (
 
 = 
	`dli°Next
(&
li
))) {

134 
j
;

136 
£
 = 
 
->
vÆue
;

137 
	`addRïlyMu…iBulkLí
(
c
,4);

138 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
id
);

139 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
time
);

140 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
duøti⁄
);

141 
	`addRïlyMu…iBulkLí
(
c
,
£
->
¨gc
);

142 
j
 = 0; j < 
£
->
¨gc
; j++)

143 
	`addRïlyBulk
(
c
,
£
->
¨gv
[
j
]);

144 
£¡
++;

146 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

147 
	`£tDe„ºedMu…iBulkLígth
(
c
,
tŸíåõs
,
£¡
);

149 
	`addRïlyEº‹
(
c
,

152 
	}
}

	@src/vr_slowlog.c

1 
	~<vr_c‹e.h
>

3 
±hªad_rwlock_t
 
	grwlockî
;

5 
dli°
 *
	g¶owlog
;

7 
	g¶owlog_íåy_id
;

12 
¶owlogE¡ry
 *
	$¶owlogCª©eE¡ry
(
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
) {

13 
¶owlogE¡ry
 *
£
 = 
	`dÆloc
((*se));

14 
j
, 
¶¨gc
 = 
¨gc
;

16 i‡(
¶¨gc
 > 
SLOWLOG_ENTRY_MAX_ARGC
) slargc = SLOWLOG_ENTRY_MAX_ARGC;

17 
£
->
¨gc
 = 
¶¨gc
;

18 
£
->
¨gv
 = 
	`dÆloc
((
robj
*)*
¶¨gc
);

19 
j
 = 0; j < 
¶¨gc
; j++) {

23 i‡(
¶¨gc
 !
¨gc
 && 
j
 == slargc-1) {

24 
£
->
¨gv
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

25 
	`sdsˇçrötf
(
	`sd£m±y
(),"... (%d moreárguments)",

26 
¨gc
-
¶¨gc
+1));

29 i‡(
¨gv
[
j
]->
ty≥
 =
OBJ_STRING
 &&

30 
	`sdsEncodedObje˘
(
¨gv
[
j
]) &&

31 
	`sd¶í
(
¨gv
[
j
]->
±r
Ë> 
SLOWLOG_ENTRY_MAX_STRING
)

33 
sds
 
s
 = 
	`sd¢ewÀn
(
¨gv
[
j
]->
±r
, 
SLOWLOG_ENTRY_MAX_STRING
);

35 
s
 = 
	`sdsˇçrötf
(s,"... (%lu more bytes)",

37 
	`sd¶í
(
¨gv
[
j
]->
±r
Ë- 
SLOWLOG_ENTRY_MAX_STRING
);

38 
£
->
¨gv
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,
s
);

40 
£
->
¨gv
[
j
] = 
	`dupSåögObje˘Unc⁄°™t
(argv[j]);

44 
£
->
time
 = 
	`time
(
NULL
);

45 
£
->
duøti⁄
 = duration;

46  
£
;

47 
	}
}

53 
	$¶owlogFªeE¡ry
(*
£±r
) {

54 
¶owlogE¡ry
 *
£
 = 
£±r
;

55 
j
;

57 
j
 = 0; j < 
£
->
¨gc
; j++)

58 
	`‰ìObje˘
(
£
->
¨gv
[
j
]);

59 
	`d‰ì
(
£
->
¨gv
);

60 
	`d‰ì
(
£
);

61 
	}
}

65 
	$¶owlogInô
() {

66 
	`±hªad_rwlock_öô
(&
rwlockî
,
NULL
);

67 
¶owlog
 = 
	`dli°Cª©e
();

68 
¶owlog_íåy_id
 = 0;

69 
	`dli°SëFªeMëhod
(
¶owlog
,
¶owlogFªeE¡ry
);

70 
	}
}

75 
	$¶owlogPushE¡ryIfNìded
(
vr_evíéo›
 *
vñ
, 
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
) {

76 
¶owlog_log_¶owî_th™
;

77 
¶owlog_max_Àn
;

79 
¶owlog_log_¶owî_th™
 = 
vñ
->
cc
.slowlog_log_slower_than;

80 i‡(
¶owlog_log_¶owî_th™
 < 0) ;

81 i‡(
duøti⁄
 >
¶owlog_log_¶owî_th™
) {

82 
¶owlogE¡ry
 *
£
 = 
	`¶owlogCª©eE¡ry
(
¨gv
,
¨gc
,
duøti⁄
);

83 
	`±hªad_rwlock_wæock
(&
rwlockî
);

84 
£
->
id
 = 
¶owlog_íåy_id
++;

85 
	`dli°AddNodeHód
(
¶owlog
,
£
);

86 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

89 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGML
,&
¶owlog_max_Àn
);

91 
	`±hªad_rwlock_wæock
(&
rwlockî
);

92 
	`dli°Lígth
(
¶owlog
Ë> 
¶owlog_max_Àn
)

93 
	`dli°DñNode
(
¶owlog
,
	`dli°La°
(slowlog));

94 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

95 
	}
}

98 
	$¶owlogRe£t
() {

99 
	`±hªad_rwlock_wæock
(&
rwlockî
);

100 
	`dli°Lígth
(
¶owlog
) > 0)

101 
	`dli°DñNode
(
¶owlog
,
	`dli°La°
(slowlog));

102 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

103 
	}
}

107 
	$¶owlogComm™d
(
˛õ¡
 *
c
) {

108 i‡(
c
->
¨gc
 =2 && !
	`°rˇ£cmp
(c->
¨gv
[1]->
±r
,"reset")) {

109 
	`¶owlogRe£t
();

110 
	`addRïly
(
c
,
sh¨ed
.
ok
);

111 } i‡(
c
->
¨gc
 =2 && !
	`°rˇ£cmp
(c->
¨gv
[1]->
±r
,"len")) {

112 
Àn
;

113 
	`±hªad_rwlock_rdlock
(&
rwlockî
);

114 
Àn
 = 
	`dli°Lígth
(
¶owlog
);

115 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

116 
	`addRïlyL⁄gL⁄g
(
c
,
Àn
);

117 } i‡((
c
->
¨gc
 == 2 || c->argc == 3) &&

118 !
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get"))

120 
cou¡
 = 10, 
£¡
 = 0;

121 
dli°Iãr
 
li
;

122 *
tŸíåõs
;

123 
dli°Node
 *
 
;

124 
¶owlogE¡ry
 *
£
;

126 i‡(
c
->
¨gc
 == 3 &&

127 
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
cou¡
,
NULL
Ë!
VR_OK
)

130 
	`±hªad_rwlock_rdlock
(&
rwlockî
);

131 
	`dli°Rewöd
(
¶owlog
,&
li
);

132 
tŸíåõs
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

133 
cou¡
-- && (
 
 = 
	`dli°Next
(&
li
))) {

134 
j
;

136 
£
 = 
 
->
vÆue
;

137 
	`addRïlyMu…iBulkLí
(
c
,4);

138 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
id
);

139 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
time
);

140 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
duøti⁄
);

141 
	`addRïlyMu…iBulkLí
(
c
,
£
->
¨gc
);

142 
j
 = 0; j < 
£
->
¨gc
; j++)

143 
	`addRïlyBulk
(
c
,
£
->
¨gv
[
j
]);

144 
£¡
++;

146 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

147 
	`£tDe„ºedMu…iBulkLígth
(
c
,
tŸíåõs
,
£¡
);

149 
	`addRïlyEº‹
(
c
,

152 
	}
}

	@src/vr_slowlog.h

1 #i‚de‡
_VR_SLOWLOG_H_


2 
	#_VR_SLOWLOG_H_


	)

4 
	#SLOWLOG_ENTRY_MAX_ARGC
 32

	)

5 
	#SLOWLOG_ENTRY_MAX_STRING
 128

	)

9 
	s¶owlogE¡ry
 {

11 
robj
 **
	m¨gv
;

12 
	m¨gc
;

13 
	mid
;

14 
	mduøti⁄
;

15 
time_t
 
	mtime
;

16 } 
	t¶owlogE¡ry
;

19 
¶owlogInô
();

20 
¶owlogPushE¡ryIfNìded
(
vr_evíéo›
 *
vñ
, 
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
);

23 
¶owlogComm™d
(
˛õ¡
 *
c
);

	@src/vr_slowlog.h

1 #i‚de‡
_VR_SLOWLOG_H_


2 
	#_VR_SLOWLOG_H_


	)

4 
	#SLOWLOG_ENTRY_MAX_ARGC
 32

	)

5 
	#SLOWLOG_ENTRY_MAX_STRING
 128

	)

9 
	s¶owlogE¡ry
 {

11 
robj
 **
	m¨gv
;

12 
	m¨gc
;

13 
	mid
;

14 
	mduøti⁄
;

15 
time_t
 
	mtime
;

16 } 
	t¶owlogE¡ry
;

19 
¶owlogInô
();

20 
¶owlogPushE¡ryIfNìded
(
vr_evíéo›
 *
vñ
, 
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
);

23 
¶owlogComm™d
(
˛õ¡
 *
c
);

	@src/vr_stats.c

1 
	~<vr_c‹e.h
>

4 
	$vr_°©s_öô
(
vr_°©s
 *
°©s
)

6 
r°©us_t
 
ªt
;

8 i‡(
°©s
 =
NULL
) {

9  
VR_ERROR
;

12 
°©s
->
°¨âime
 = 0;

13 
°©s
->
numcomm™ds
 = 0;

14 
°©s
->
numc⁄√˘i⁄s
 = 0;

15 
°©s
->
expúedkeys
 = 0;

16 
°©s
->
evi˘edkeys
 = 0;

17 
°©s
->
key•a˚_hôs
 = 0;

18 
°©s
->
key•a˚_mis£s
 = 0;

19 
°©s
->
ªje˘ed_c⁄n
 = 0;

20 
°©s
->
sync_fuŒ
 = 0;

21 
°©s
->
sync_∑πül_ok
 = 0;

22 
°©s
->
sync_∑πül_îr
 = 0;

23 
°©s
->
√t_öput_byãs
 = 0;

24 
°©s
->
√t_ouçut_byãs
 = 0;

25 
°©s
->
≥ak_mem‹y
 = 0;

27 #i‡!
	`deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

28 
ªt
 = 
	`±hªad_•ö_öô
(&
°©s
->
°©¶ock
, 0);

29 i‡(
ªt
 != 0) {

30  
VR_ERROR
;

34 
°©s
->
°¨âime
 = 
	`time
(
NULL
);

36  
VR_OK
;

37 
	}
}

40 
	$vr_°©s_deöô
(
vr_°©s
 *
°©s
)

42 i‡(
°©s
 =
NULL
) {

46 
°©s
->
°¨âime
 = 0;

47 
°©s
->
numcomm™ds
 = 0;

48 
°©s
->
numc⁄√˘i⁄s
 = 0;

49 
°©s
->
expúedkeys
 = 0;

50 
°©s
->
evi˘edkeys
 = 0;

51 
°©s
->
key•a˚_hôs
 = 0;

52 
°©s
->
key•a˚_mis£s
 = 0;

53 
°©s
->
ªje˘ed_c⁄n
 = 0;

54 
°©s
->
sync_fuŒ
 = 0;

55 
°©s
->
sync_∑πül_ok
 = 0;

56 
°©s
->
sync_∑πül_îr
 = 0;

57 
°©s
->
√t_öput_byãs
 = 0;

58 
°©s
->
√t_ouçut_byãs
 = 0;

60 #i‡!
	`deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

61 
	`±hªad_•ö_de°roy
(&
°©s
->
°©¶ock
);

63 
	}
}

66 
	$åackIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
, 
cuºít_ªadög
) {

67 
t
 = 
	`vr_m£c_now
(Ë- 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_time
;

68 
›s
 = 
cuºít_ªadög
 -

69 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_cou¡
;

70 
›s_£c
;

72 
›s_£c
 = 
t
 > 0 ? (
›s
*1000/t) : 0;

74 
	`upd©e_°©s_£t
(
°©s
,
ö°_mëric
[
mëric
].
ßm∂es
[°©s->ö°_mëric[mëric].
idx
],
›s_£c
);

75 
°©s
->
ö°_mëric
[
mëric
].
idx
++;

76 
°©s
->
ö°_mëric
[
mëric
].
idx
 %
STATS_METRIC_SAMPLES
;

77 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_time
 = 
	`vr_m£c_now
();

78 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_cou¡
 = 
cuºít_ªadög
;

79 
	}
}

82 
	$gëIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
) {

83 
j
;

84 
sum
 = 0;

86 
j
 = 0; j < 
STATS_METRIC_SAMPLES
; j++) {

87 
vÆue
;

88 
	`upd©e_°©s_gë
(
°©s
, 
ö°_mëric
[
mëric
].
ßm∂es
[
j
], &
vÆue
);

89 
sum
 +
vÆue
;

91  
sum
 / 
STATS_METRIC_SAMPLES
;

92 
	}
}

	@src/vr_stats.c

1 
	~<vr_c‹e.h
>

4 
	$vr_°©s_öô
(
vr_°©s
 *
°©s
)

6 
r°©us_t
 
ªt
;

8 i‡(
°©s
 =
NULL
) {

9  
VR_ERROR
;

12 
°©s
->
°¨âime
 = 0;

13 
°©s
->
numcomm™ds
 = 0;

14 
°©s
->
numc⁄√˘i⁄s
 = 0;

15 
°©s
->
expúedkeys
 = 0;

16 
°©s
->
evi˘edkeys
 = 0;

17 
°©s
->
key•a˚_hôs
 = 0;

18 
°©s
->
key•a˚_mis£s
 = 0;

19 
°©s
->
ªje˘ed_c⁄n
 = 0;

20 
°©s
->
sync_fuŒ
 = 0;

21 
°©s
->
sync_∑πül_ok
 = 0;

22 
°©s
->
sync_∑πül_îr
 = 0;

23 
°©s
->
√t_öput_byãs
 = 0;

24 
°©s
->
√t_ouçut_byãs
 = 0;

25 
°©s
->
≥ak_mem‹y
 = 0;

27 #i‡!
	`deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

28 
ªt
 = 
	`±hªad_•ö_öô
(&
°©s
->
°©¶ock
, 0);

29 i‡(
ªt
 != 0) {

30  
VR_ERROR
;

34 
°©s
->
°¨âime
 = 
	`time
(
NULL
);

36  
VR_OK
;

37 
	}
}

40 
	$vr_°©s_deöô
(
vr_°©s
 *
°©s
)

42 i‡(
°©s
 =
NULL
) {

46 
°©s
->
°¨âime
 = 0;

47 
°©s
->
numcomm™ds
 = 0;

48 
°©s
->
numc⁄√˘i⁄s
 = 0;

49 
°©s
->
expúedkeys
 = 0;

50 
°©s
->
evi˘edkeys
 = 0;

51 
°©s
->
key•a˚_hôs
 = 0;

52 
°©s
->
key•a˚_mis£s
 = 0;

53 
°©s
->
ªje˘ed_c⁄n
 = 0;

54 
°©s
->
sync_fuŒ
 = 0;

55 
°©s
->
sync_∑πül_ok
 = 0;

56 
°©s
->
sync_∑πül_îr
 = 0;

57 
°©s
->
√t_öput_byãs
 = 0;

58 
°©s
->
√t_ouçut_byãs
 = 0;

60 #i‡!
	`deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

61 
	`±hªad_•ö_de°roy
(&
°©s
->
°©¶ock
);

63 
	}
}

66 
	$åackIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
, 
cuºít_ªadög
) {

67 
t
 = 
	`vr_m£c_now
(Ë- 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_time
;

68 
›s
 = 
cuºít_ªadög
 -

69 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_cou¡
;

70 
›s_£c
;

72 
›s_£c
 = 
t
 > 0 ? (
›s
*1000/t) : 0;

74 
	`upd©e_°©s_£t
(
°©s
,
ö°_mëric
[
mëric
].
ßm∂es
[°©s->ö°_mëric[mëric].
idx
],
›s_£c
);

75 
°©s
->
ö°_mëric
[
mëric
].
idx
++;

76 
°©s
->
ö°_mëric
[
mëric
].
idx
 %
STATS_METRIC_SAMPLES
;

77 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_time
 = 
	`vr_m£c_now
();

78 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_cou¡
 = 
cuºít_ªadög
;

79 
	}
}

82 
	$gëIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
) {

83 
j
;

84 
sum
 = 0;

86 
j
 = 0; j < 
STATS_METRIC_SAMPLES
; j++) {

87 
vÆue
;

88 
	`upd©e_°©s_gë
(
°©s
, 
ö°_mëric
[
mëric
].
ßm∂es
[
j
], &
vÆue
);

89 
sum
 +
vÆue
;

91  
sum
 / 
STATS_METRIC_SAMPLES
;

92 
	}
}

	@src/vr_stats.h

1 #i‚de‡
_VR_STATS_H_


2 
	#_VR_STATS_H_


	)

5 
	#STATS_ATOMIC_FIRST
 1

	)

9 
	#STATS_METRIC_SAMPLES
 16

	)

10 
	#STATS_METRIC_COMMAND
 0

	)

11 
	#STATS_METRIC_NET_INPUT
 1

	)

12 
	#STATS_METRIC_NET_OUTPUT
 2

	)

13 
	#STATS_METRIC_COUNT
 3

	)

15 
	svr_°©s
 {

17 
time_t
 
	m°¨âime
;

18 
	mnumcomm™ds
;

19 
	mnumc⁄√˘i⁄s
;

20 
	mexpúedkeys
;

21 
	mevi˘edkeys
;

22 
	mkey•a˚_hôs
;

23 
	mkey•a˚_mis£s
;

24 
	mªje˘ed_c⁄n
;

25 
	msync_fuŒ
;

26 
	msync_∑πül_ok
;

27 
	msync_∑πül_îr
;

28 
	m√t_öput_byãs
;

29 
	m√t_ouçut_byãs
;

30 
size_t
 
	m≥ak_mem‹y
;

35 
	mœ°_ßm∂e_time
;

36 
	mœ°_ßm∂e_cou¡
;

37 
	mßm∂es
[
STATS_METRIC_SAMPLES
];

38 
	midx
;

39 } 
	mö°_mëric
[
STATS_METRIC_COUNT
];

41 #i‡!
deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

42 
±hªad_•ölock_t
 
	m°©¶ock
;

44 }
	tvr_°©s
;

47 #i‡
deföed
(
__ATOMIC_RELAXED
Ë&& deföed(
STATS_ATOMIC_FIRST
)

48 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_add_„tch
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

49 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_sub_„tch
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

50 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_°‹e_n
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

51 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

52 
	`__©omic_lﬂd
(&(
_°©s
)->
_fõld
, 
_v
, 
__ATOMIC_RELAXED
); \

53 } 0)

	)

55 
	#STATS_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

57 #ñi‡
deföed
(
HAVE_ATOMIC
Ë&& deföed(
STATS_ATOMIC_FIRST
)

58 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_add_™d_„tch
(&(_°©s)->_fõld, (_n))

	)

59 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_sub_™d_„tch
(&(_°©s)->_fõld, (_n))

	)

60 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&(_°©s)->_fõld, (_n))

	)

61 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

62 (*
_v
Ë
	`__sync_add_™d_„tch
(&(
_°©s
)->
_fõld
, 0); \

63 } 0)

	)

65 
	#STATS_LOCK_TYPE
 "HAVE_ATOMIC"

	)

67 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
) do { \

68 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

69 (
_°©s
)->
_fõld
 +(
_n
); \

70 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

71 } 0)

	)

73 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
) do { \

74 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

75 (
_°©s
)->
_fõld
 -(
_n
); \

76 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

77 } 0)

	)

79 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
) do { \

80 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

81 (
_°©s
)->
_fõld
 = (
_n
); \

82 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

83 } 0)

	)

85 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

86 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

87 (*
_v
Ë(
_°©s
)->
_fõld
; \

88 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

89 } 0)

	)

91 
	#STATS_LOCK_TYPE
 "±hªad_•ö_lock"

	)

94 
vr_°©s_öô
(
vr_°©s
 *
°©s
);

95 
vr_°©s_deöô
(
vr_°©s
 *
°©s
);

97 
åackIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
, 
cuºít_ªadög
);

98 
gëIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
);

	@src/vr_stats.h

1 #i‚de‡
_VR_STATS_H_


2 
	#_VR_STATS_H_


	)

5 
	#STATS_ATOMIC_FIRST
 1

	)

9 
	#STATS_METRIC_SAMPLES
 16

	)

10 
	#STATS_METRIC_COMMAND
 0

	)

11 
	#STATS_METRIC_NET_INPUT
 1

	)

12 
	#STATS_METRIC_NET_OUTPUT
 2

	)

13 
	#STATS_METRIC_COUNT
 3

	)

15 
	svr_°©s
 {

17 
time_t
 
	m°¨âime
;

18 
	mnumcomm™ds
;

19 
	mnumc⁄√˘i⁄s
;

20 
	mexpúedkeys
;

21 
	mevi˘edkeys
;

22 
	mkey•a˚_hôs
;

23 
	mkey•a˚_mis£s
;

24 
	mªje˘ed_c⁄n
;

25 
	msync_fuŒ
;

26 
	msync_∑πül_ok
;

27 
	msync_∑πül_îr
;

28 
	m√t_öput_byãs
;

29 
	m√t_ouçut_byãs
;

30 
size_t
 
	m≥ak_mem‹y
;

35 
	mœ°_ßm∂e_time
;

36 
	mœ°_ßm∂e_cou¡
;

37 
	mßm∂es
[
STATS_METRIC_SAMPLES
];

38 
	midx
;

39 } 
	mö°_mëric
[
STATS_METRIC_COUNT
];

41 #i‡!
deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

42 
±hªad_•ölock_t
 
	m°©¶ock
;

44 }
	tvr_°©s
;

47 #i‡
deföed
(
__ATOMIC_RELAXED
Ë&& deföed(
STATS_ATOMIC_FIRST
)

48 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_add_„tch
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

49 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_sub_„tch
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

50 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_°‹e_n
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

51 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

52 
	`__©omic_lﬂd
(&(
_°©s
)->
_fõld
, 
_v
, 
__ATOMIC_RELAXED
); \

53 } 0)

	)

55 
	#STATS_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

57 #ñi‡
deföed
(
HAVE_ATOMIC
Ë&& deföed(
STATS_ATOMIC_FIRST
)

58 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_add_™d_„tch
(&(_°©s)->_fõld, (_n))

	)

59 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_sub_™d_„tch
(&(_°©s)->_fõld, (_n))

	)

60 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&(_°©s)->_fõld, (_n))

	)

61 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

62 (*
_v
Ë
	`__sync_add_™d_„tch
(&(
_°©s
)->
_fõld
, 0); \

63 } 0)

	)

65 
	#STATS_LOCK_TYPE
 "HAVE_ATOMIC"

	)

67 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
) do { \

68 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

69 (
_°©s
)->
_fõld
 +(
_n
); \

70 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

71 } 0)

	)

73 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
) do { \

74 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

75 (
_°©s
)->
_fõld
 -(
_n
); \

76 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

77 } 0)

	)

79 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
) do { \

80 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

81 (
_°©s
)->
_fõld
 = (
_n
); \

82 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

83 } 0)

	)

85 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

86 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

87 (*
_v
Ë(
_°©s
)->
_fõld
; \

88 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

89 } 0)

	)

91 
	#STATS_LOCK_TYPE
 "±hªad_•ö_lock"

	)

94 
vr_°©s_öô
(
vr_°©s
 *
°©s
);

95 
vr_°©s_deöô
(
vr_°©s
 *
°©s
);

97 
åackIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
, 
cuºít_ªadög
);

98 
gëIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
);

	@src/vr_t_hash.c

1 
	~<m©h.h
>

3 
	~<vr_c‹e.h
>

12 
	$hashTy≥TryC⁄vîsi⁄
(
robj
 *
o
,Ñobj **
¨gv
, 
°¨t
, 
íd
) {

13 
i
;

15 i‡(
o
->
ícodög
 !
OBJ_ENCODING_ZIPLIST
) ;

17 
i
 = 
°¨t
; i <
íd
; i++) {

18 i‡(
	`sdsEncodedObje˘
(
¨gv
[
i
]) &&

19 
	`sd¶í
(
¨gv
[
i
]->
±r
Ë> 
£rvî
.
hash_max_zùli°_vÆue
)

21 
	`hashTy≥C⁄vît
(
o
, 
OBJ_ENCODING_HT
);

25 
	}
}

28 
	$hashTy≥TryObje˘Encodög
(
robj
 *
subje˘
,Ñobj **
o1
,Ñobj **
o2
) {

29 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

30 i‡(
o1
Ë*o1 = 
	`åyObje˘Encodög
(*o1);

31 i‡(
o2
Ë*o2 = 
	`åyObje˘Encodög
(*o2);

33 
	}
}

37 
	$hashTy≥GëFromZùli°
(
robj
 *
o
,Ñobj *
fõld
,

38 **
v°r
,

39 *
vÀn
,

40 *
vŒ
)

42 *
zl
, *
Âå
 = 
NULL
, *
v±r
 = NULL;

43 
ªt
;

44 
robj
 *
fõld_√w
;

46 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

48 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

50 
zl
 = 
o
->
±r
;

51 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

52 i‡(
Âå
 !
NULL
) {

53 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

54 i‡(
Âå
 !
NULL
) {

56 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

57 
	`ASSERT
(
v±r
 !
NULL
);

61 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

63 i‡(
v±r
 !
NULL
) {

64 
ªt
 = 
	`zùli°Gë
(
v±r
, 
v°r
, 
vÀn
, 
vŒ
);

65 
	`ASSERT
(
ªt
);

70 
	}
}

74 
	$hashTy≥GëFromHashTabÀ
(
robj
 *
o
,Ñobj *
fõld
,Ñobj **
vÆue
) {

75 
di˘E¡ry
 *
de
;

77 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_HT
);

79 
de
 = 
	`di˘Föd
(
o
->
±r
, 
fõld
);

80 i‡(
de
 =
NULL
)  -1;

81 *
vÆue
 = 
	`di˘GëVÆ
(
de
);

83 
	}
}

91 
robj
 *
	$hashTy≥GëObje˘
(
robj
 *
o
,Ñobj *
fõld
) {

92 
robj
 *
vÆue
 = 
NULL
;

94 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

95 *
v°r
 = 
NULL
;

96 
vÀn
 = 
UINT_MAX
;

97 
vŒ
 = 
LLONG_MAX
;

99 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0) {

100 i‡(
v°r
) {

101 
vÆue
 = 
	`¸óãSåögObje˘
((*)
v°r
, 
vÀn
);

103 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
);

106 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

107 
robj
 *
aux
;

109 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0) {

110 
vÆue
 = 
aux
;

113 
	`£rvîP™ic
("Unknown hashÉncoding");

115  
vÆue
;

116 
	}
}

121 
size_t
 
	$hashTy≥GëVÆueLígth
(
robj
 *
o
,Ñobj *
fõld
) {

122 
size_t
 
Àn
 = 0;

123 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

124 *
v°r
 = 
NULL
;

125 
vÀn
 = 
UINT_MAX
;

126 
vŒ
 = 
LLONG_MAX
;

128 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0)

129 
Àn
 = 
v°r
 ? 
vÀn
 : 
	`sdigôs10
(
vŒ
);

130 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

131 
robj
 *
aux
;

133 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0)

134 
Àn
 = 
	`°rögObje˘Lí
(
aux
);

136 
	`£rvîP™ic
("Unknown hashÉncoding");

138  
Àn
;

139 
	}
}

143 
	$hashTy≥Exi°s
(
robj
 *
o
,Ñobj *
fõld
) {

144 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

145 *
v°r
 = 
NULL
;

146 
vÀn
 = 
UINT_MAX
;

147 
vŒ
 = 
LLONG_MAX
;

149 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0)  1;

150 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

151 
robj
 *
aux
;

153 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0)  1;

155 
	`£rvîP™ic
("Unknown hashÉncoding");

158 
	}
}

165 
	$hashTy≥Së
(
robj
 *
o
,Ñobj *
fõld
,Ñobj *
vÆue
) {

166 
upd©e
 = 0;

167 
robj
 *
fõld_√w
, *
vÆue_√w
;

169 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

170 *
zl
, *
Âå
, *
v±r
;

172 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

173 
vÆue_√w
 = 
	`gëDecodedObje˘
(
vÆue
);

175 
zl
 = 
o
->
±r
;

176 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

177 i‡(
Âå
 !
NULL
) {

178 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

179 i‡(
Âå
 !
NULL
) {

181 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

182 
	`ASSERT
(
v±r
 !
NULL
);

183 
upd©e
 = 1;

186 
zl
 = 
	`zùli°Dñëe
(zl, &
v±r
);

189 
zl
 = 
	`zùli°In£π
(zl, 
v±r
, 
vÆue_√w
->
±r
, 
	`sd¶í
(value_new->ptr));

193 i‡(!
upd©e
) {

195 
zl
 = 
	`zùli°Push
(zl, 
fõld_√w
->
±r
, 
	`sd¶í
(fõld_√w->±r), 
ZIPLIST_TAIL
);

196 
zl
 = 
	`zùli°Push
(zl, 
vÆue_√w
->
±r
, 
	`sd¶í
(vÆue_√w->±r), 
ZIPLIST_TAIL
);

198 
o
->
±r
 = 
zl
;

199 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

200 i‡(
vÆue_√w
 !
vÆue
Ë
	`‰ìObje˘
(value_new);

203 i‡(
	`hashTy≥Lígth
(
o
Ë> 
£rvî
.
hash_max_zùli°_íåõs
)

204 
	`hashTy≥C⁄vît
(
o
, 
OBJ_ENCODING_HT
);

205 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

206 
fõld_√w
 = 
	`dupSåögObje˘Unc⁄°™t
(
fõld
);

207 
vÆue_√w
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

208 i‡(
	`di˘Rïœ˚
(
o
->
±r
, 
fõld_√w
, 
vÆue_√w
)) {

211 
upd©e
 = 1;

212 
	`‰ìObje˘
(
fõld_√w
);

215 
	`£rvîP™ic
("Unknown hashÉncoding");

217  
upd©e
;

218 
	}
}

222 
	$hashTy≥Dñëe
(
robj
 *
o
,Ñobj *
fõld
) {

223 
dñëed
 = 0;

225 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

226 *
zl
, *
Âå
;

227 
robj
 *
fõld_√w
;

229 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

231 
zl
 = 
o
->
±r
;

232 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

233 i‡(
Âå
 !
NULL
) {

234 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

235 i‡(
Âå
 !
NULL
) {

236 
zl
 = 
	`zùli°Dñëe
(zl,&
Âå
);

237 
zl
 = 
	`zùli°Dñëe
(zl,&
Âå
);

238 
o
->
±r
 = 
zl
;

239 
dñëed
 = 1;

243 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

244 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

245 i‡(
	`di˘Dñëe
((
di˘
*)
o
->
±r
, 
fõld
Ë=
VR_OK
) {

246 
dñëed
 = 1;

249 i‡(
	`htNìdsResize
(
o
->
±r
)Ë
	`di˘Resize
(o->ptr);

253 
	`£rvîP™ic
("Unknown hashÉncoding");

256  
dñëed
;

257 
	}
}

260 
	$hashTy≥Lígth
(
robj
 *
o
) {

261 
Àngth
 = 
ULONG_MAX
;

263 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

264 
Àngth
 = 
	`zùli°Lí
(
o
->
±r
) / 2;

265 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

266 
Àngth
 = 
	`di˘Size
((
di˘
*)
o
->
±r
);

268 
	`£rvîP™ic
("Unknown hashÉncoding");

271  
Àngth
;

272 
	}
}

274 
hashTy≥Iãøt‹
 *
	$hashTy≥InôIãøt‹
(
robj
 *
subje˘
) {

275 
hashTy≥Iãøt‹
 *
hi
 = 
	`dÆloc
((hashTypeIterator));

276 
hi
->
subje˘
 = subject;

277 
hi
->
ícodög
 = 
subje˘
->encoding;

279 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

280 
hi
->
Âå
 = 
NULL
;

281 
hi
->
v±r
 = 
NULL
;

282 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

283 
hi
->
di
 = 
	`di˘GëIãøt‹
(
subje˘
->
±r
);

285 
	`£rvîP™ic
("Unknown hashÉncoding");

288  
hi
;

289 
	}
}

291 
	$hashTy≥Rñó£Iãøt‹
(
hashTy≥Iãøt‹
 *
hi
) {

292 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

293 
	`di˘Rñó£Iãøt‹
(
hi
->
di
);

296 
	`d‰ì
(
hi
);

297 
	}
}

301 
	$hashTy≥Next
(
hashTy≥Iãøt‹
 *
hi
) {

302 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

303 *
zl
;

304 *
Âå
, *
v±r
;

306 
zl
 = 
hi
->
subje˘
->
±r
;

307 
Âå
 = 
hi
->fptr;

308 
v±r
 = 
hi
->vptr;

310 i‡(
Âå
 =
NULL
) {

312 
	`ASSERT
(
v±r
 =
NULL
);

313 
Âå
 = 
	`zùli°Index
(
zl
, 0);

316 
	`ASSERT
(
v±r
 !
NULL
);

317 
Âå
 = 
	`zùli°Next
(
zl
, 
v±r
);

319 i‡(
Âå
 =
NULL
Ë 
VR_ERROR
;

322 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

323 
	`ASSERT
(
v±r
 !
NULL
);

326 
hi
->
Âå
 = fptr;

327 
hi
->
v±r
 = vptr;

328 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

329 i‡((
hi
->
de
 = 
	`di˘Next
(hi->
di
)Ë=
NULL
Ë 
VR_ERROR
;

331 
	`£rvîP™ic
("Unknown hashÉncoding");

333  
VR_OK
;

334 
	}
}

338 
	$hashTy≥CuºítFromZùli°
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
,

339 **
v°r
,

340 *
vÀn
,

341 *
vŒ
)

343 
ªt
;

345 
	`ASSERT
(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

347 i‡(
wh©
 & 
OBJ_HASH_KEY
) {

348 
ªt
 = 
	`zùli°Gë
(
hi
->
Âå
, 
v°r
, 
vÀn
, 
vŒ
);

349 
	`ASSERT
(
ªt
);

351 
ªt
 = 
	`zùli°Gë
(
hi
->
v±r
, 
v°r
, 
vÀn
, 
vŒ
);

352 
	`ASSERT
(
ªt
);

354 
	}
}

358 
	$hashTy≥CuºítFromHashTabÀ
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, 
robj
 **
d°
) {

359 
	`ASSERT
(
hi
->
ícodög
 =
OBJ_ENCODING_HT
);

361 i‡(
wh©
 & 
OBJ_HASH_KEY
) {

362 *
d°
 = 
	`di˘GëKey
(
hi
->
de
);

364 *
d°
 = 
	`di˘GëVÆ
(
hi
->
de
);

366 
	}
}

371 
robj
 *
	$hashTy≥CuºítObje˘
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
) {

372 
robj
 *
d°
;

374 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

375 *
v°r
 = 
NULL
;

376 
vÀn
 = 
UINT_MAX
;

377 
vŒ
 = 
LLONG_MAX
;

379 
	`hashTy≥CuºítFromZùli°
(
hi
, 
wh©
, &
v°r
, &
vÀn
, &
vŒ
);

380 i‡(
v°r
) {

381 
d°
 = 
	`¸óãSåögObje˘
((*)
v°r
, 
vÀn
);

383 
d°
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
);

385 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

386 
	`hashTy≥CuºítFromHashTabÀ
(
hi
, 
wh©
, &
d°
);

388 
	`£rvîP™ic
("Unknown hashÉncoding");

390  
d°
;

391 
	}
}

393 
robj
 *
	$hashTy≥LookupWrôeOrCª©e
(
˛õ¡
 *
c
, 
robj
 *
key
, *
expúed
) {

394 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,
key
,
expúed
);

395 i‡(
o
 =
NULL
) {

396 
o
 = 
	`¸óãHashObje˘
();

397 
	`dbAdd
(
c
->
db
,
key
,
o
);

399 i‡(
o
->
ty≥
 !
OBJ_HASH
) {

400 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

401  
NULL
;

404  
o
;

405 
	}
}

407 
	$hashTy≥C⁄vîtZùli°
(
robj
 *
o
, 
íc
) {

408 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

410 i‡(
íc
 =
OBJ_ENCODING_ZIPLIST
) {

413 } i‡(
íc
 =
OBJ_ENCODING_HT
) {

414 
hashTy≥Iãøt‹
 *
hi
;

415 
di˘
 *
d
;

416 
ªt
;

418 
hi
 = 
	`hashTy≥InôIãøt‹
(
o
);

419 
d
 = 
	`di˘Cª©e
(&
hashDi˘Ty≥
, 
NULL
);

421 
	`hashTy≥Next
(
hi
Ë!
VR_ERROR
) {

422 
robj
 *
fõld
, *
vÆue
;

424 
fõld
 = 
	`hashTy≥CuºítObje˘
(
hi
, 
OBJ_HASH_KEY
);

425 
fõld
 = 
	`åyObje˘Encodög
(field);

426 
vÆue
 = 
	`hashTy≥CuºítObje˘
(
hi
, 
OBJ_HASH_VALUE
);

427 
vÆue
 = 
	`åyObje˘Encodög
(value);

428 
ªt
 = 
	`di˘Add
(
d
, 
fõld
, 
vÆue
);

429 i‡(
ªt
 !
DICT_OK
) {

432 
	`ASSERT
(
ªt
 =
DICT_OK
);

436 
	`hashTy≥Rñó£Iãøt‹
(
hi
);

437 
	`d‰ì
(
o
->
±r
);

439 
o
->
ícodög
 = 
OBJ_ENCODING_HT
;

440 
o
->
±r
 = 
d
;

443 
	`£rvîP™ic
("Unknown hashÉncoding");

445 
	}
}

447 
	$hashTy≥C⁄vît
(
robj
 *
o
, 
íc
) {

448 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

449 
	`hashTy≥C⁄vîtZùli°
(
o
, 
íc
);

450 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

451 
	`£rvîP™ic
("Not implemented");

453 
	`£rvîP™ic
("Unknown hashÉncoding");

455 
	}
}

461 
	$h£tComm™d
(
˛õ¡
 *
c
) {

462 
upd©e
;

463 
robj
 *
o
;

464 
expúed
 = 0;

466 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

467 
	`lockDbWrôe
(
c
->
db
);

468 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

469 
	`u∆ockDb
(
c
->
db
);

470 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

473 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,3);

474 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2], &c->argv[3]);

475 
upd©e
 = 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],c->argv[3]);

476 
	`addRïly
(
c
, 
upd©e
 ? 
sh¨ed
.
czîo
 : sh¨ed.
c⁄e
);

477 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

478 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

479 
c
->
vñ
->
dúty
++;

480 
	`u∆ockDb
(
c
->
db
);

481 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

482 
	}
}

484 
	$h£äxComm™d
(
˛õ¡
 *
c
) {

485 
robj
 *
o
;

486 
expúed
 = 0;

488 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

489 
	`lockDbWrôe
(
c
->
db
);

490 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

491 
	`u∆ockDb
(
c
->
db
);

492 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

495 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,3);

497 i‡(
	`hashTy≥Exi°s
(
o
, 
c
->
¨gv
[2])) {

498 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

500 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2], &c->argv[3]);

501 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],c->argv[3]);

502 
	`addRïly
(
c
, 
sh¨ed
.
c⁄e
);

503 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

504 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

505 
£rvî
.
dúty
++;

508 
	`u∆ockDb
(
c
->
db
);

509 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

510 
	}
}

512 
	$hm£tComm™d
(
˛õ¡
 *
c
) {

513 
i
;

514 
robj
 *
o
;

515 
expúed
 = 0;

517 i‡((
c
->
¨gc
 % 2) == 1) {

518 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for HMSET");

522 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

523 
	`lockDbWrôe
(
c
->
db
);

524 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

525 
	`u∆ockDb
(
c
->
db
);

526 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

529 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,c->
¨gc
-1);

530 
i
 = 2; i < 
c
->
¨gc
; i += 2) {

531 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[
i
], &c->argv[i+1]);

532 
	`hashTy≥Së
(
o
,
c
->
¨gv
[
i
],c->argv[i+1]);

534 
	`addRïly
(
c
, 
sh¨ed
.
ok
);

535 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

536 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

537 
c
->
vñ
->
dúty
++;

539 
	`u∆ockDb
(
c
->
db
);

540 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

541 
	}
}

543 
	$hö¸byComm™d
(
˛õ¡
 *
c
) {

544 
vÆue
, 
ö¸
, 
ﬁdvÆue
;

545 
robj
 *
o
, *
cuºít
, *
√w
;

546 
expúed
 = 0;

548 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
ö¸
,
NULL
Ë!
VR_OK
) ;

550 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

551 
	`lockDbWrôe
(
c
->
db
);

552 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
Ë
íd
;

553 i‡((
cuºít
 = 
	`hashTy≥GëObje˘
(
o
,
c
->
¨gv
[2])Ë!
NULL
) {

554 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
cuºít
,&
vÆue
,

555 "hash vÆuêi†nŸá¿öãgî"Ë!
VR_OK
) {

556 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

557 
íd
;

559 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

561 
vÆue
 = 0;

564 
ﬁdvÆue
 = 
vÆue
;

565 i‡((
ö¸
 < 0 && 
ﬁdvÆue
 < 0 && in¸ < (
LLONG_MIN
-oldvalue)) ||

566 (
ö¸
 > 0 && 
ﬁdvÆue
 > 0 && in¸ > (
LLONG_MAX
-oldvalue))) {

567 
	`addRïlyEº‹
(
c
,"increment or decrement would overflow");

568 
íd
;

570 
vÆue
 +
ö¸
;

571 
√w
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

572 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2],
NULL
);

573 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],
√w
);

574 
	`‰ìObje˘
(
√w
);

575 
	`addRïlyL⁄gL⁄g
(
c
,
vÆue
);

576 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

577 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hö¸by",
c
->
¨gv
[1],c->
db
->
id
);

578 
c
->
vñ
->
dúty
++;

580 
íd
:

581 
	`u∆ockDb
(
c
->
db
);

582 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

583 
	}
}

585 
	$hö¸byÊﬂtComm™d
(
˛õ¡
 *
c
) {

586 
vÆue
, 
ö¸
;

587 
robj
 *
o
, *
cuºít
, *
√w
, *
aux
;

588 
expúed
 = 0;

590 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
ö¸
,
NULL
Ë!
VR_OK
) ;

592 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

593 
	`lockDbWrôe
(
c
->
db
);

594 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

595 
	`u∆ockDb
(
c
->
db
);

596 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

599 i‡((
cuºít
 = 
	`hashTy≥GëObje˘
(
o
,
c
->
¨gv
[2])Ë!
NULL
) {

600 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,
cuºít
,&
vÆue
,

601 "hash vÆuêi†nŸá vÆid flﬂt"Ë!
VR_OK
) {

602 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

603 
	`u∆ockDb
(
c
->
db
);

604 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

607 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

609 
vÆue
 = 0;

612 
vÆue
 +
ö¸
;

613 
√w
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
,1);

614 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2],
NULL
);

615 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],
√w
);

616 
	`addRïlyBulk
(
c
,
√w
);

617 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

618 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hö¸byÊﬂt",
c
->
¨gv
[1],c->
db
->
id
);

619 
c
->
vñ
->
dúty
++;

621 
	`u∆ockDb
(
c
->
db
);

622 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

627 
aux
 = 
	`¸óãSåögObje˘
("HSET",4);

628 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,0,
aux
);

629 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,3,
√w
);

630 
	}
}

632 
	$addHashFõldToRïly
(
˛õ¡
 *
c
, 
robj
 *
o
,Ñobj *
fõld
) {

633 
ªt
;

635 i‡(
o
 =
NULL
) {

636 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

640 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

641 *
v°r
 = 
NULL
;

642 
vÀn
 = 
UINT_MAX
;

643 
vŒ
 = 
LLONG_MAX
;

645 
ªt
 = 
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
);

646 i‡(
ªt
 < 0) {

647 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

649 i‡(
v°r
) {

650 
	`addRïlyBulkCBuf„r
(
c
, 
v°r
, 
vÀn
);

652 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
vŒ
);

656 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

657 
robj
 *
vÆue
;

659 
ªt
 = 
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
vÆue
);

660 i‡(
ªt
 < 0) {

661 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

663 
	`addRïlyBulk
(
c
, 
vÆue
);

667 
	`£rvîP™ic
("Unknown hashÉncoding");

669 
	}
}

671 
	$hgëComm™d
(
˛õ¡
 *
c
) {

672 
robj
 *
o
;

674 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

675 
	`lockDbRód
(
c
->
db
);

676 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

677 
	`u∆ockDb
(
c
->
db
);

678 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

680 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

681 
	`u∆ockDb
(
c
->
db
);

682 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

686 
	`addHashFõldToRïly
(
c
, 
o
, c->
¨gv
[2]);

687 
	`u∆ockDb
(
c
->
db
);

688 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

689 
	}
}

691 
	$hmgëComm™d
(
˛õ¡
 *
c
) {

692 
robj
 *
o
;

693 
i
;

695 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

696 
	`lockDbRód
(
c
->
db
);

699 
o
 = 
	`lookupKeyRód
(
c
->
db
, c->
¨gv
[1]);

700 i‡(
o
 !
NULL
 && o->
ty≥
 !
OBJ_HASH
) {

701 
	`u∆ockDb
(
c
->
db
);

702 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

703 
	`addRïly
(
c
, 
sh¨ed
.
wr⁄gty≥îr
);

707 
	`addRïlyMu…iBulkLí
(
c
, c->
¨gc
-2);

708 
i
 = 2; i < 
c
->
¨gc
; i++) {

709 
	`addHashFõldToRïly
(
c
, 
o
, c->
¨gv
[
i
]);

712 i‡(
o
 =
NULL
) {

713 
	`u∆ockDb
(
c
->
db
);

714 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

718 
	`u∆ockDb
(
c
->
db
);

719 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

720 
	}
}

722 
	$hdñComm™d
(
˛õ¡
 *
c
) {

723 
robj
 *
o
;

724 
j
, 
dñëed
 = 0, 
keyªmoved
 = 0;

725 
expúed
 = 0;

727 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

728 
	`lockDbWrôe
(
c
->
db
);

729 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

730 
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

731 
	`u∆ockDb
(
c
->
db
);

732 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

736 
j
 = 2; j < 
c
->
¨gc
; j++) {

737 i‡(
	`hashTy≥Dñëe
(
o
,
c
->
¨gv
[
j
])) {

738 
dñëed
++;

739 i‡(
	`hashTy≥Lígth
(
o
) == 0) {

740 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

741 
keyªmoved
 = 1;

747 
	`u∆ockDb
(
c
->
db
);

748 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

750 i‡(
dñëed
) {

751 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

752 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hdñ",
c
->
¨gv
[1],c->
db
->
id
);

753 i‡(
keyªmoved
)

754 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],

755 
c
->
db
->
id
);

756 
£rvî
.
dúty
 +
dñëed
;

758 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

759 
	}
}

761 
	$hÀnComm™d
(
˛õ¡
 *
c
) {

762 
robj
 *
o
;

764 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

765 
	`lockDbRód
(
c
->
db
);

766 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

767 
	`u∆ockDb
(
c
->
db
);

768 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

770 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

771 
	`u∆ockDb
(
c
->
db
);

772 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

776 
	`addRïlyL⁄gL⁄g
(
c
,
	`hashTy≥Lígth
(
o
));

777 
	`u∆ockDb
(
c
->
db
);

778 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

779 
	}
}

781 
	$h°æíComm™d
(
˛õ¡
 *
c
) {

782 
robj
 *
o
;

784 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

785 
	`lockDbRód
(
c
->
db
);

786 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

787 
	`u∆ockDb
(
c
->
db
);

788 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

790 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

791 
	`u∆ockDb
(
c
->
db
);

792 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

796 
	`addRïlyL⁄gL⁄g
(
c
,
	`hashTy≥GëVÆueLígth
(
o
,c->
¨gv
[2]));

798 
	`u∆ockDb
(
c
->
db
);

799 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

800 
	}
}

802 
	$addHashIãøt‹Curs‹ToRïly
(
˛õ¡
 *
c
, 
hashTy≥Iãøt‹
 *
hi
, 
wh©
) {

803 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

804 *
v°r
 = 
NULL
;

805 
vÀn
 = 
UINT_MAX
;

806 
vŒ
 = 
LLONG_MAX
;

808 
	`hashTy≥CuºítFromZùli°
(
hi
, 
wh©
, &
v°r
, &
vÀn
, &
vŒ
);

809 i‡(
v°r
) {

810 
	`addRïlyBulkCBuf„r
(
c
, 
v°r
, 
vÀn
);

812 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
vŒ
);

815 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

816 
robj
 *
vÆue
;

818 
	`hashTy≥CuºítFromHashTabÀ
(
hi
, 
wh©
, &
vÆue
);

819 
	`addRïlyBulk
(
c
, 
vÆue
);

822 
	`£rvîP™ic
("Unknown hashÉncoding");

824 
	}
}

826 
	$gíîicHgëÆlComm™d
(
˛õ¡
 *
c
, 
Êags
) {

827 
robj
 *
o
;

828 
hashTy≥Iãøt‹
 *
hi
;

829 
mu…ùlõr
 = 0;

830 
Àngth
, 
cou¡
 = 0;

832 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

833 
	`lockDbRód
(
c
->
db
);

834 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

835 
	`u∆ockDb
(
c
->
db
);

836 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

838 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

839 
	`u∆ockDb
(
c
->
db
);

840 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

843 i‡(
Êags
 & 
OBJ_HASH_KEY
Ë
mu…ùlõr
++;

844 i‡(
Êags
 & 
OBJ_HASH_VALUE
Ë
mu…ùlõr
++;

846 
Àngth
 = 
	`hashTy≥Lígth
(
o
Ë* 
mu…ùlõr
;

847 
	`addRïlyMu…iBulkLí
(
c
, 
Àngth
);

849 
hi
 = 
	`hashTy≥InôIãøt‹
(
o
);

850 
	`hashTy≥Next
(
hi
Ë!
VR_ERROR
) {

851 i‡(
Êags
 & 
OBJ_HASH_KEY
) {

852 
	`addHashIãøt‹Curs‹ToRïly
(
c
, 
hi
, 
OBJ_HASH_KEY
);

853 
cou¡
++;

855 i‡(
Êags
 & 
OBJ_HASH_VALUE
) {

856 
	`addHashIãøt‹Curs‹ToRïly
(
c
, 
hi
, 
OBJ_HASH_VALUE
);

857 
cou¡
++;

861 
	`hashTy≥Rñó£Iãøt‹
(
hi
);

862 
	`ASSERT
(
cou¡
 =
Àngth
);

864 
	`u∆ockDb
(
c
->
db
);

865 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

866 
	}
}

868 
	$hkeysComm™d
(
˛õ¡
 *
c
) {

869 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_KEY
);

870 
	}
}

872 
	$hvÆsComm™d
(
˛õ¡
 *
c
) {

873 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_VALUE
);

874 
	}
}

876 
	$hgëÆlComm™d
(
˛õ¡
 *
c
) {

877 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_KEY
|
OBJ_HASH_VALUE
);

878 
	}
}

880 
	$hexi°sComm™d
(
˛õ¡
 *
c
) {

881 
robj
 *
o
;

883 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

884 
	`lockDbRód
(
c
->
db
);

885 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

886 
	`u∆ockDb
(
c
->
db
);

887 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

889 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

890 
	`u∆ockDb
(
c
->
db
);

891 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

895 
	`addRïly
(
c
, 
	`hashTy≥Exi°s
(
o
,c->
¨gv
[2]Ë? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

896 
	`u∆ockDb
(
c
->
db
);

897 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

898 
	}
}

900 
	$hsˇnComm™d
(
˛õ¡
 *
c
) {

901 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_HASH
);

902 
	}
}

	@src/vr_t_hash.c

1 
	~<m©h.h
>

3 
	~<vr_c‹e.h
>

12 
	$hashTy≥TryC⁄vîsi⁄
(
robj
 *
o
,Ñobj **
¨gv
, 
°¨t
, 
íd
) {

13 
i
;

15 i‡(
o
->
ícodög
 !
OBJ_ENCODING_ZIPLIST
) ;

17 
i
 = 
°¨t
; i <
íd
; i++) {

18 i‡(
	`sdsEncodedObje˘
(
¨gv
[
i
]) &&

19 
	`sd¶í
(
¨gv
[
i
]->
±r
Ë> 
£rvî
.
hash_max_zùli°_vÆue
)

21 
	`hashTy≥C⁄vît
(
o
, 
OBJ_ENCODING_HT
);

25 
	}
}

28 
	$hashTy≥TryObje˘Encodög
(
robj
 *
subje˘
,Ñobj **
o1
,Ñobj **
o2
) {

29 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

30 i‡(
o1
Ë*o1 = 
	`åyObje˘Encodög
(*o1);

31 i‡(
o2
Ë*o2 = 
	`åyObje˘Encodög
(*o2);

33 
	}
}

37 
	$hashTy≥GëFromZùli°
(
robj
 *
o
,Ñobj *
fõld
,

38 **
v°r
,

39 *
vÀn
,

40 *
vŒ
)

42 *
zl
, *
Âå
 = 
NULL
, *
v±r
 = NULL;

43 
ªt
;

44 
robj
 *
fõld_√w
;

46 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

48 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

50 
zl
 = 
o
->
±r
;

51 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

52 i‡(
Âå
 !
NULL
) {

53 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

54 i‡(
Âå
 !
NULL
) {

56 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

57 
	`ASSERT
(
v±r
 !
NULL
);

61 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

63 i‡(
v±r
 !
NULL
) {

64 
ªt
 = 
	`zùli°Gë
(
v±r
, 
v°r
, 
vÀn
, 
vŒ
);

65 
	`ASSERT
(
ªt
);

70 
	}
}

74 
	$hashTy≥GëFromHashTabÀ
(
robj
 *
o
,Ñobj *
fõld
,Ñobj **
vÆue
) {

75 
di˘E¡ry
 *
de
;

77 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_HT
);

79 
de
 = 
	`di˘Föd
(
o
->
±r
, 
fõld
);

80 i‡(
de
 =
NULL
)  -1;

81 *
vÆue
 = 
	`di˘GëVÆ
(
de
);

83 
	}
}

91 
robj
 *
	$hashTy≥GëObje˘
(
robj
 *
o
,Ñobj *
fõld
) {

92 
robj
 *
vÆue
 = 
NULL
;

94 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

95 *
v°r
 = 
NULL
;

96 
vÀn
 = 
UINT_MAX
;

97 
vŒ
 = 
LLONG_MAX
;

99 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0) {

100 i‡(
v°r
) {

101 
vÆue
 = 
	`¸óãSåögObje˘
((*)
v°r
, 
vÀn
);

103 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
);

106 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

107 
robj
 *
aux
;

109 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0) {

110 
vÆue
 = 
aux
;

113 
	`£rvîP™ic
("Unknown hashÉncoding");

115  
vÆue
;

116 
	}
}

121 
size_t
 
	$hashTy≥GëVÆueLígth
(
robj
 *
o
,Ñobj *
fõld
) {

122 
size_t
 
Àn
 = 0;

123 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

124 *
v°r
 = 
NULL
;

125 
vÀn
 = 
UINT_MAX
;

126 
vŒ
 = 
LLONG_MAX
;

128 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0)

129 
Àn
 = 
v°r
 ? 
vÀn
 : 
	`sdigôs10
(
vŒ
);

130 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

131 
robj
 *
aux
;

133 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0)

134 
Àn
 = 
	`°rögObje˘Lí
(
aux
);

136 
	`£rvîP™ic
("Unknown hashÉncoding");

138  
Àn
;

139 
	}
}

143 
	$hashTy≥Exi°s
(
robj
 *
o
,Ñobj *
fõld
) {

144 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

145 *
v°r
 = 
NULL
;

146 
vÀn
 = 
UINT_MAX
;

147 
vŒ
 = 
LLONG_MAX
;

149 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0)  1;

150 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

151 
robj
 *
aux
;

153 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0)  1;

155 
	`£rvîP™ic
("Unknown hashÉncoding");

158 
	}
}

165 
	$hashTy≥Së
(
robj
 *
o
,Ñobj *
fõld
,Ñobj *
vÆue
) {

166 
upd©e
 = 0;

167 
robj
 *
fõld_√w
, *
vÆue_√w
;

169 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

170 *
zl
, *
Âå
, *
v±r
;

172 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

173 
vÆue_√w
 = 
	`gëDecodedObje˘
(
vÆue
);

175 
zl
 = 
o
->
±r
;

176 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

177 i‡(
Âå
 !
NULL
) {

178 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

179 i‡(
Âå
 !
NULL
) {

181 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

182 
	`ASSERT
(
v±r
 !
NULL
);

183 
upd©e
 = 1;

186 
zl
 = 
	`zùli°Dñëe
(zl, &
v±r
);

189 
zl
 = 
	`zùli°In£π
(zl, 
v±r
, 
vÆue_√w
->
±r
, 
	`sd¶í
(value_new->ptr));

193 i‡(!
upd©e
) {

195 
zl
 = 
	`zùli°Push
(zl, 
fõld_√w
->
±r
, 
	`sd¶í
(fõld_√w->±r), 
ZIPLIST_TAIL
);

196 
zl
 = 
	`zùli°Push
(zl, 
vÆue_√w
->
±r
, 
	`sd¶í
(vÆue_√w->±r), 
ZIPLIST_TAIL
);

198 
o
->
±r
 = 
zl
;

199 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

200 i‡(
vÆue_√w
 !
vÆue
Ë
	`‰ìObje˘
(value_new);

203 i‡(
	`hashTy≥Lígth
(
o
Ë> 
£rvî
.
hash_max_zùli°_íåõs
)

204 
	`hashTy≥C⁄vît
(
o
, 
OBJ_ENCODING_HT
);

205 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

206 
fõld_√w
 = 
	`dupSåögObje˘Unc⁄°™t
(
fõld
);

207 
vÆue_√w
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

208 i‡(
	`di˘Rïœ˚
(
o
->
±r
, 
fõld_√w
, 
vÆue_√w
)) {

211 
upd©e
 = 1;

212 
	`‰ìObje˘
(
fõld_√w
);

215 
	`£rvîP™ic
("Unknown hashÉncoding");

217  
upd©e
;

218 
	}
}

222 
	$hashTy≥Dñëe
(
robj
 *
o
,Ñobj *
fõld
) {

223 
dñëed
 = 0;

225 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

226 *
zl
, *
Âå
;

227 
robj
 *
fõld_√w
;

229 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

231 
zl
 = 
o
->
±r
;

232 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

233 i‡(
Âå
 !
NULL
) {

234 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

235 i‡(
Âå
 !
NULL
) {

236 
zl
 = 
	`zùli°Dñëe
(zl,&
Âå
);

237 
zl
 = 
	`zùli°Dñëe
(zl,&
Âå
);

238 
o
->
±r
 = 
zl
;

239 
dñëed
 = 1;

243 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

244 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

245 i‡(
	`di˘Dñëe
((
di˘
*)
o
->
±r
, 
fõld
Ë=
VR_OK
) {

246 
dñëed
 = 1;

249 i‡(
	`htNìdsResize
(
o
->
±r
)Ë
	`di˘Resize
(o->ptr);

253 
	`£rvîP™ic
("Unknown hashÉncoding");

256  
dñëed
;

257 
	}
}

260 
	$hashTy≥Lígth
(
robj
 *
o
) {

261 
Àngth
 = 
ULONG_MAX
;

263 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

264 
Àngth
 = 
	`zùli°Lí
(
o
->
±r
) / 2;

265 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

266 
Àngth
 = 
	`di˘Size
((
di˘
*)
o
->
±r
);

268 
	`£rvîP™ic
("Unknown hashÉncoding");

271  
Àngth
;

272 
	}
}

274 
hashTy≥Iãøt‹
 *
	$hashTy≥InôIãøt‹
(
robj
 *
subje˘
) {

275 
hashTy≥Iãøt‹
 *
hi
 = 
	`dÆloc
((hashTypeIterator));

276 
hi
->
subje˘
 = subject;

277 
hi
->
ícodög
 = 
subje˘
->encoding;

279 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

280 
hi
->
Âå
 = 
NULL
;

281 
hi
->
v±r
 = 
NULL
;

282 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

283 
hi
->
di
 = 
	`di˘GëIãøt‹
(
subje˘
->
±r
);

285 
	`£rvîP™ic
("Unknown hashÉncoding");

288  
hi
;

289 
	}
}

291 
	$hashTy≥Rñó£Iãøt‹
(
hashTy≥Iãøt‹
 *
hi
) {

292 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

293 
	`di˘Rñó£Iãøt‹
(
hi
->
di
);

296 
	`d‰ì
(
hi
);

297 
	}
}

301 
	$hashTy≥Next
(
hashTy≥Iãøt‹
 *
hi
) {

302 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

303 *
zl
;

304 *
Âå
, *
v±r
;

306 
zl
 = 
hi
->
subje˘
->
±r
;

307 
Âå
 = 
hi
->fptr;

308 
v±r
 = 
hi
->vptr;

310 i‡(
Âå
 =
NULL
) {

312 
	`ASSERT
(
v±r
 =
NULL
);

313 
Âå
 = 
	`zùli°Index
(
zl
, 0);

316 
	`ASSERT
(
v±r
 !
NULL
);

317 
Âå
 = 
	`zùli°Next
(
zl
, 
v±r
);

319 i‡(
Âå
 =
NULL
Ë 
VR_ERROR
;

322 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

323 
	`ASSERT
(
v±r
 !
NULL
);

326 
hi
->
Âå
 = fptr;

327 
hi
->
v±r
 = vptr;

328 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

329 i‡((
hi
->
de
 = 
	`di˘Next
(hi->
di
)Ë=
NULL
Ë 
VR_ERROR
;

331 
	`£rvîP™ic
("Unknown hashÉncoding");

333  
VR_OK
;

334 
	}
}

338 
	$hashTy≥CuºítFromZùli°
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
,

339 **
v°r
,

340 *
vÀn
,

341 *
vŒ
)

343 
ªt
;

345 
	`ASSERT
(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

347 i‡(
wh©
 & 
OBJ_HASH_KEY
) {

348 
ªt
 = 
	`zùli°Gë
(
hi
->
Âå
, 
v°r
, 
vÀn
, 
vŒ
);

349 
	`ASSERT
(
ªt
);

351 
ªt
 = 
	`zùli°Gë
(
hi
->
v±r
, 
v°r
, 
vÀn
, 
vŒ
);

352 
	`ASSERT
(
ªt
);

354 
	}
}

358 
	$hashTy≥CuºítFromHashTabÀ
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, 
robj
 **
d°
) {

359 
	`ASSERT
(
hi
->
ícodög
 =
OBJ_ENCODING_HT
);

361 i‡(
wh©
 & 
OBJ_HASH_KEY
) {

362 *
d°
 = 
	`di˘GëKey
(
hi
->
de
);

364 *
d°
 = 
	`di˘GëVÆ
(
hi
->
de
);

366 
	}
}

371 
robj
 *
	$hashTy≥CuºítObje˘
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
) {

372 
robj
 *
d°
;

374 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

375 *
v°r
 = 
NULL
;

376 
vÀn
 = 
UINT_MAX
;

377 
vŒ
 = 
LLONG_MAX
;

379 
	`hashTy≥CuºítFromZùli°
(
hi
, 
wh©
, &
v°r
, &
vÀn
, &
vŒ
);

380 i‡(
v°r
) {

381 
d°
 = 
	`¸óãSåögObje˘
((*)
v°r
, 
vÀn
);

383 
d°
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
);

385 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

386 
	`hashTy≥CuºítFromHashTabÀ
(
hi
, 
wh©
, &
d°
);

388 
	`£rvîP™ic
("Unknown hashÉncoding");

390  
d°
;

391 
	}
}

393 
robj
 *
	$hashTy≥LookupWrôeOrCª©e
(
˛õ¡
 *
c
, 
robj
 *
key
, *
expúed
) {

394 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,
key
,
expúed
);

395 i‡(
o
 =
NULL
) {

396 
o
 = 
	`¸óãHashObje˘
();

397 
	`dbAdd
(
c
->
db
,
key
,
o
);

399 i‡(
o
->
ty≥
 !
OBJ_HASH
) {

400 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

401  
NULL
;

404  
o
;

405 
	}
}

407 
	$hashTy≥C⁄vîtZùli°
(
robj
 *
o
, 
íc
) {

408 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

410 i‡(
íc
 =
OBJ_ENCODING_ZIPLIST
) {

413 } i‡(
íc
 =
OBJ_ENCODING_HT
) {

414 
hashTy≥Iãøt‹
 *
hi
;

415 
di˘
 *
d
;

416 
ªt
;

418 
hi
 = 
	`hashTy≥InôIãøt‹
(
o
);

419 
d
 = 
	`di˘Cª©e
(&
hashDi˘Ty≥
, 
NULL
);

421 
	`hashTy≥Next
(
hi
Ë!
VR_ERROR
) {

422 
robj
 *
fõld
, *
vÆue
;

424 
fõld
 = 
	`hashTy≥CuºítObje˘
(
hi
, 
OBJ_HASH_KEY
);

425 
fõld
 = 
	`åyObje˘Encodög
(field);

426 
vÆue
 = 
	`hashTy≥CuºítObje˘
(
hi
, 
OBJ_HASH_VALUE
);

427 
vÆue
 = 
	`åyObje˘Encodög
(value);

428 
ªt
 = 
	`di˘Add
(
d
, 
fõld
, 
vÆue
);

429 i‡(
ªt
 !
DICT_OK
) {

432 
	`ASSERT
(
ªt
 =
DICT_OK
);

436 
	`hashTy≥Rñó£Iãøt‹
(
hi
);

437 
	`d‰ì
(
o
->
±r
);

439 
o
->
ícodög
 = 
OBJ_ENCODING_HT
;

440 
o
->
±r
 = 
d
;

443 
	`£rvîP™ic
("Unknown hashÉncoding");

445 
	}
}

447 
	$hashTy≥C⁄vît
(
robj
 *
o
, 
íc
) {

448 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

449 
	`hashTy≥C⁄vîtZùli°
(
o
, 
íc
);

450 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

451 
	`£rvîP™ic
("Not implemented");

453 
	`£rvîP™ic
("Unknown hashÉncoding");

455 
	}
}

461 
	$h£tComm™d
(
˛õ¡
 *
c
) {

462 
upd©e
;

463 
robj
 *
o
;

464 
expúed
 = 0;

466 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

467 
	`lockDbWrôe
(
c
->
db
);

468 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

469 
	`u∆ockDb
(
c
->
db
);

470 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

473 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,3);

474 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2], &c->argv[3]);

475 
upd©e
 = 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],c->argv[3]);

476 
	`addRïly
(
c
, 
upd©e
 ? 
sh¨ed
.
czîo
 : sh¨ed.
c⁄e
);

477 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

478 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

479 
c
->
vñ
->
dúty
++;

480 
	`u∆ockDb
(
c
->
db
);

481 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

482 
	}
}

484 
	$h£äxComm™d
(
˛õ¡
 *
c
) {

485 
robj
 *
o
;

486 
expúed
 = 0;

488 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

489 
	`lockDbWrôe
(
c
->
db
);

490 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

491 
	`u∆ockDb
(
c
->
db
);

492 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

495 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,3);

497 i‡(
	`hashTy≥Exi°s
(
o
, 
c
->
¨gv
[2])) {

498 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

500 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2], &c->argv[3]);

501 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],c->argv[3]);

502 
	`addRïly
(
c
, 
sh¨ed
.
c⁄e
);

503 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

504 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

505 
£rvî
.
dúty
++;

508 
	`u∆ockDb
(
c
->
db
);

509 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

510 
	}
}

512 
	$hm£tComm™d
(
˛õ¡
 *
c
) {

513 
i
;

514 
robj
 *
o
;

515 
expúed
 = 0;

517 i‡((
c
->
¨gc
 % 2) == 1) {

518 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for HMSET");

522 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

523 
	`lockDbWrôe
(
c
->
db
);

524 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

525 
	`u∆ockDb
(
c
->
db
);

526 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

529 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,c->
¨gc
-1);

530 
i
 = 2; i < 
c
->
¨gc
; i += 2) {

531 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[
i
], &c->argv[i+1]);

532 
	`hashTy≥Së
(
o
,
c
->
¨gv
[
i
],c->argv[i+1]);

534 
	`addRïly
(
c
, 
sh¨ed
.
ok
);

535 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

536 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

537 
c
->
vñ
->
dúty
++;

539 
	`u∆ockDb
(
c
->
db
);

540 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

541 
	}
}

543 
	$hö¸byComm™d
(
˛õ¡
 *
c
) {

544 
vÆue
, 
ö¸
, 
ﬁdvÆue
;

545 
robj
 *
o
, *
cuºít
, *
√w
;

546 
expúed
 = 0;

548 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
ö¸
,
NULL
Ë!
VR_OK
) ;

550 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

551 
	`lockDbWrôe
(
c
->
db
);

552 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
Ë
íd
;

553 i‡((
cuºít
 = 
	`hashTy≥GëObje˘
(
o
,
c
->
¨gv
[2])Ë!
NULL
) {

554 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
cuºít
,&
vÆue
,

555 "hash vÆuêi†nŸá¿öãgî"Ë!
VR_OK
) {

556 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

557 
íd
;

559 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

561 
vÆue
 = 0;

564 
ﬁdvÆue
 = 
vÆue
;

565 i‡((
ö¸
 < 0 && 
ﬁdvÆue
 < 0 && in¸ < (
LLONG_MIN
-oldvalue)) ||

566 (
ö¸
 > 0 && 
ﬁdvÆue
 > 0 && in¸ > (
LLONG_MAX
-oldvalue))) {

567 
	`addRïlyEº‹
(
c
,"increment or decrement would overflow");

568 
íd
;

570 
vÆue
 +
ö¸
;

571 
√w
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

572 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2],
NULL
);

573 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],
√w
);

574 
	`‰ìObje˘
(
√w
);

575 
	`addRïlyL⁄gL⁄g
(
c
,
vÆue
);

576 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

577 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hö¸by",
c
->
¨gv
[1],c->
db
->
id
);

578 
c
->
vñ
->
dúty
++;

580 
íd
:

581 
	`u∆ockDb
(
c
->
db
);

582 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

583 
	}
}

585 
	$hö¸byÊﬂtComm™d
(
˛õ¡
 *
c
) {

586 
vÆue
, 
ö¸
;

587 
robj
 *
o
, *
cuºít
, *
√w
, *
aux
;

588 
expúed
 = 0;

590 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
ö¸
,
NULL
Ë!
VR_OK
) ;

592 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

593 
	`lockDbWrôe
(
c
->
db
);

594 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

595 
	`u∆ockDb
(
c
->
db
);

596 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

599 i‡((
cuºít
 = 
	`hashTy≥GëObje˘
(
o
,
c
->
¨gv
[2])Ë!
NULL
) {

600 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,
cuºít
,&
vÆue
,

601 "hash vÆuêi†nŸá vÆid flﬂt"Ë!
VR_OK
) {

602 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

603 
	`u∆ockDb
(
c
->
db
);

604 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

607 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

609 
vÆue
 = 0;

612 
vÆue
 +
ö¸
;

613 
√w
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
,1);

614 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2],
NULL
);

615 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],
√w
);

616 
	`addRïlyBulk
(
c
,
√w
);

617 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

618 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hö¸byÊﬂt",
c
->
¨gv
[1],c->
db
->
id
);

619 
c
->
vñ
->
dúty
++;

621 
	`u∆ockDb
(
c
->
db
);

622 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

627 
aux
 = 
	`¸óãSåögObje˘
("HSET",4);

628 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,0,
aux
);

629 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,3,
√w
);

630 
	}
}

632 
	$addHashFõldToRïly
(
˛õ¡
 *
c
, 
robj
 *
o
,Ñobj *
fõld
) {

633 
ªt
;

635 i‡(
o
 =
NULL
) {

636 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

640 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

641 *
v°r
 = 
NULL
;

642 
vÀn
 = 
UINT_MAX
;

643 
vŒ
 = 
LLONG_MAX
;

645 
ªt
 = 
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
);

646 i‡(
ªt
 < 0) {

647 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

649 i‡(
v°r
) {

650 
	`addRïlyBulkCBuf„r
(
c
, 
v°r
, 
vÀn
);

652 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
vŒ
);

656 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

657 
robj
 *
vÆue
;

659 
ªt
 = 
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
vÆue
);

660 i‡(
ªt
 < 0) {

661 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

663 
	`addRïlyBulk
(
c
, 
vÆue
);

667 
	`£rvîP™ic
("Unknown hashÉncoding");

669 
	}
}

671 
	$hgëComm™d
(
˛õ¡
 *
c
) {

672 
robj
 *
o
;

674 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

675 
	`lockDbRód
(
c
->
db
);

676 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

677 
	`u∆ockDb
(
c
->
db
);

678 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

680 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

681 
	`u∆ockDb
(
c
->
db
);

682 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

686 
	`addHashFõldToRïly
(
c
, 
o
, c->
¨gv
[2]);

687 
	`u∆ockDb
(
c
->
db
);

688 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

689 
	}
}

691 
	$hmgëComm™d
(
˛õ¡
 *
c
) {

692 
robj
 *
o
;

693 
i
;

695 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

696 
	`lockDbRód
(
c
->
db
);

699 
o
 = 
	`lookupKeyRód
(
c
->
db
, c->
¨gv
[1]);

700 i‡(
o
 !
NULL
 && o->
ty≥
 !
OBJ_HASH
) {

701 
	`u∆ockDb
(
c
->
db
);

702 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

703 
	`addRïly
(
c
, 
sh¨ed
.
wr⁄gty≥îr
);

707 
	`addRïlyMu…iBulkLí
(
c
, c->
¨gc
-2);

708 
i
 = 2; i < 
c
->
¨gc
; i++) {

709 
	`addHashFõldToRïly
(
c
, 
o
, c->
¨gv
[
i
]);

712 i‡(
o
 =
NULL
) {

713 
	`u∆ockDb
(
c
->
db
);

714 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

718 
	`u∆ockDb
(
c
->
db
);

719 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

720 
	}
}

722 
	$hdñComm™d
(
˛õ¡
 *
c
) {

723 
robj
 *
o
;

724 
j
, 
dñëed
 = 0, 
keyªmoved
 = 0;

725 
expúed
 = 0;

727 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

728 
	`lockDbWrôe
(
c
->
db
);

729 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

730 
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

731 
	`u∆ockDb
(
c
->
db
);

732 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

736 
j
 = 2; j < 
c
->
¨gc
; j++) {

737 i‡(
	`hashTy≥Dñëe
(
o
,
c
->
¨gv
[
j
])) {

738 
dñëed
++;

739 i‡(
	`hashTy≥Lígth
(
o
) == 0) {

740 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

741 
keyªmoved
 = 1;

747 
	`u∆ockDb
(
c
->
db
);

748 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

750 i‡(
dñëed
) {

751 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

752 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hdñ",
c
->
¨gv
[1],c->
db
->
id
);

753 i‡(
keyªmoved
)

754 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],

755 
c
->
db
->
id
);

756 
£rvî
.
dúty
 +
dñëed
;

758 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

759 
	}
}

761 
	$hÀnComm™d
(
˛õ¡
 *
c
) {

762 
robj
 *
o
;

764 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

765 
	`lockDbRód
(
c
->
db
);

766 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

767 
	`u∆ockDb
(
c
->
db
);

768 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

770 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

771 
	`u∆ockDb
(
c
->
db
);

772 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

776 
	`addRïlyL⁄gL⁄g
(
c
,
	`hashTy≥Lígth
(
o
));

777 
	`u∆ockDb
(
c
->
db
);

778 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

779 
	}
}

781 
	$h°æíComm™d
(
˛õ¡
 *
c
) {

782 
robj
 *
o
;

784 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

785 
	`lockDbRód
(
c
->
db
);

786 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

787 
	`u∆ockDb
(
c
->
db
);

788 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

790 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

791 
	`u∆ockDb
(
c
->
db
);

792 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

796 
	`addRïlyL⁄gL⁄g
(
c
,
	`hashTy≥GëVÆueLígth
(
o
,c->
¨gv
[2]));

798 
	`u∆ockDb
(
c
->
db
);

799 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

800 
	}
}

802 
	$addHashIãøt‹Curs‹ToRïly
(
˛õ¡
 *
c
, 
hashTy≥Iãøt‹
 *
hi
, 
wh©
) {

803 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

804 *
v°r
 = 
NULL
;

805 
vÀn
 = 
UINT_MAX
;

806 
vŒ
 = 
LLONG_MAX
;

808 
	`hashTy≥CuºítFromZùli°
(
hi
, 
wh©
, &
v°r
, &
vÀn
, &
vŒ
);

809 i‡(
v°r
) {

810 
	`addRïlyBulkCBuf„r
(
c
, 
v°r
, 
vÀn
);

812 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
vŒ
);

815 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

816 
robj
 *
vÆue
;

818 
	`hashTy≥CuºítFromHashTabÀ
(
hi
, 
wh©
, &
vÆue
);

819 
	`addRïlyBulk
(
c
, 
vÆue
);

822 
	`£rvîP™ic
("Unknown hashÉncoding");

824 
	}
}

826 
	$gíîicHgëÆlComm™d
(
˛õ¡
 *
c
, 
Êags
) {

827 
robj
 *
o
;

828 
hashTy≥Iãøt‹
 *
hi
;

829 
mu…ùlõr
 = 0;

830 
Àngth
, 
cou¡
 = 0;

832 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

833 
	`lockDbRód
(
c
->
db
);

834 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

835 
	`u∆ockDb
(
c
->
db
);

836 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

838 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

839 
	`u∆ockDb
(
c
->
db
);

840 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

843 i‡(
Êags
 & 
OBJ_HASH_KEY
Ë
mu…ùlõr
++;

844 i‡(
Êags
 & 
OBJ_HASH_VALUE
Ë
mu…ùlõr
++;

846 
Àngth
 = 
	`hashTy≥Lígth
(
o
Ë* 
mu…ùlõr
;

847 
	`addRïlyMu…iBulkLí
(
c
, 
Àngth
);

849 
hi
 = 
	`hashTy≥InôIãøt‹
(
o
);

850 
	`hashTy≥Next
(
hi
Ë!
VR_ERROR
) {

851 i‡(
Êags
 & 
OBJ_HASH_KEY
) {

852 
	`addHashIãøt‹Curs‹ToRïly
(
c
, 
hi
, 
OBJ_HASH_KEY
);

853 
cou¡
++;

855 i‡(
Êags
 & 
OBJ_HASH_VALUE
) {

856 
	`addHashIãøt‹Curs‹ToRïly
(
c
, 
hi
, 
OBJ_HASH_VALUE
);

857 
cou¡
++;

861 
	`hashTy≥Rñó£Iãøt‹
(
hi
);

862 
	`ASSERT
(
cou¡
 =
Àngth
);

864 
	`u∆ockDb
(
c
->
db
);

865 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

866 
	}
}

868 
	$hkeysComm™d
(
˛õ¡
 *
c
) {

869 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_KEY
);

870 
	}
}

872 
	$hvÆsComm™d
(
˛õ¡
 *
c
) {

873 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_VALUE
);

874 
	}
}

876 
	$hgëÆlComm™d
(
˛õ¡
 *
c
) {

877 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_KEY
|
OBJ_HASH_VALUE
);

878 
	}
}

880 
	$hexi°sComm™d
(
˛õ¡
 *
c
) {

881 
robj
 *
o
;

883 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

884 
	`lockDbRód
(
c
->
db
);

885 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

886 
	`u∆ockDb
(
c
->
db
);

887 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

889 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

890 
	`u∆ockDb
(
c
->
db
);

891 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

895 
	`addRïly
(
c
, 
	`hashTy≥Exi°s
(
o
,c->
¨gv
[2]Ë? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

896 
	`u∆ockDb
(
c
->
db
);

897 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

898 
	}
}

900 
	$hsˇnComm™d
(
˛õ¡
 *
c
) {

901 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_HASH
);

902 
	}
}

	@src/vr_t_hash.h

1 #i‚de‡
_VR_T_HASH_H_


2 
	#_VR_T_HASH_H_


	)

4 
hashTy≥TryC⁄vîsi⁄
(
robj
 *
o
,Ñobj **
¨gv
, 
°¨t
, 
íd
);

5 
hashTy≥TryObje˘Encodög
(
robj
 *
subje˘
,Ñobj **
o1
,Ñobj **
o2
);

6 
hashTy≥GëFromZùli°
(
robj
 *
o
,Ñobj *
fõld
, **
v°r
, *
vÀn
, *
vŒ
);

7 
hashTy≥GëFromHashTabÀ
(
robj
 *
o
,Ñobj *
fõld
,Ñobj **
vÆue
);

8 
robj
 *
hashTy≥GëObje˘
‘obj *
o
,Ñobj *
fõld
);

9 
size_t
 
hashTy≥GëVÆueLígth
(
robj
 *
o
,Ñobj *
fõld
);

10 
hashTy≥Exi°s
(
robj
 *
o
,Ñobj *
fõld
);

11 
hashTy≥Së
(
robj
 *
o
,Ñobj *
fõld
,Ñobj *
vÆue
);

12 
hashTy≥Dñëe
(
robj
 *
o
,Ñobj *
fõld
);

13 
hashTy≥Lígth
(
robj
 *
o
);

14 
hashTy≥Iãøt‹
 *
hashTy≥InôIãøt‹
(
robj
 *
subje˘
);

15 
hashTy≥Rñó£Iãøt‹
(
hashTy≥Iãøt‹
 *
hi
);

16 
hashTy≥Next
(
hashTy≥Iãøt‹
 *
hi
);

17 
hashTy≥CuºítFromZùli°
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, **
v°r
, *
vÀn
, *
vŒ
);

18 
hashTy≥CuºítFromHashTabÀ
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, 
robj
 **
d°
);

19 
robj
 *
hashTy≥CuºítObje˘
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
);

20 
robj
 *
hashTy≥LookupWrôeOrCª©e
(
˛õ¡
 *
c
,Ñobj *
key
, *
expúed
);

21 
hashTy≥C⁄vîtZùli°
(
robj
 *
o
, 
íc
);

22 
hashTy≥C⁄vît
(
robj
 *
o
, 
íc
);

23 
h£tComm™d
(
˛õ¡
 *
c
);

24 
h£äxComm™d
(
˛õ¡
 *
c
);

25 
hm£tComm™d
(
˛õ¡
 *
c
);

26 
hö¸byComm™d
(
˛õ¡
 *
c
);

27 
hö¸byÊﬂtComm™d
(
˛õ¡
 *
c
);

28 
hgëComm™d
(
˛õ¡
 *
c
);

29 
hmgëComm™d
(
˛õ¡
 *
c
);

30 
hdñComm™d
(
˛õ¡
 *
c
);

31 
hÀnComm™d
(
˛õ¡
 *
c
);

32 
h°æíComm™d
(
˛õ¡
 *
c
);

33 
gíîicHgëÆlComm™d
(
˛õ¡
 *
c
, 
Êags
);

34 
hkeysComm™d
(
˛õ¡
 *
c
);

35 
hvÆsComm™d
(
˛õ¡
 *
c
);

36 
hgëÆlComm™d
(
˛õ¡
 *
c
);

37 
hexi°sComm™d
(
˛õ¡
 *
c
);

38 
hsˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_hash.h

1 #i‚de‡
_VR_T_HASH_H_


2 
	#_VR_T_HASH_H_


	)

4 
hashTy≥TryC⁄vîsi⁄
(
robj
 *
o
,Ñobj **
¨gv
, 
°¨t
, 
íd
);

5 
hashTy≥TryObje˘Encodög
(
robj
 *
subje˘
,Ñobj **
o1
,Ñobj **
o2
);

6 
hashTy≥GëFromZùli°
(
robj
 *
o
,Ñobj *
fõld
, **
v°r
, *
vÀn
, *
vŒ
);

7 
hashTy≥GëFromHashTabÀ
(
robj
 *
o
,Ñobj *
fõld
,Ñobj **
vÆue
);

8 
robj
 *
hashTy≥GëObje˘
‘obj *
o
,Ñobj *
fõld
);

9 
size_t
 
hashTy≥GëVÆueLígth
(
robj
 *
o
,Ñobj *
fõld
);

10 
hashTy≥Exi°s
(
robj
 *
o
,Ñobj *
fõld
);

11 
hashTy≥Së
(
robj
 *
o
,Ñobj *
fõld
,Ñobj *
vÆue
);

12 
hashTy≥Dñëe
(
robj
 *
o
,Ñobj *
fõld
);

13 
hashTy≥Lígth
(
robj
 *
o
);

14 
hashTy≥Iãøt‹
 *
hashTy≥InôIãøt‹
(
robj
 *
subje˘
);

15 
hashTy≥Rñó£Iãøt‹
(
hashTy≥Iãøt‹
 *
hi
);

16 
hashTy≥Next
(
hashTy≥Iãøt‹
 *
hi
);

17 
hashTy≥CuºítFromZùli°
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, **
v°r
, *
vÀn
, *
vŒ
);

18 
hashTy≥CuºítFromHashTabÀ
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, 
robj
 **
d°
);

19 
robj
 *
hashTy≥CuºítObje˘
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
);

20 
robj
 *
hashTy≥LookupWrôeOrCª©e
(
˛õ¡
 *
c
,Ñobj *
key
, *
expúed
);

21 
hashTy≥C⁄vîtZùli°
(
robj
 *
o
, 
íc
);

22 
hashTy≥C⁄vît
(
robj
 *
o
, 
íc
);

23 
h£tComm™d
(
˛õ¡
 *
c
);

24 
h£äxComm™d
(
˛õ¡
 *
c
);

25 
hm£tComm™d
(
˛õ¡
 *
c
);

26 
hö¸byComm™d
(
˛õ¡
 *
c
);

27 
hö¸byÊﬂtComm™d
(
˛õ¡
 *
c
);

28 
hgëComm™d
(
˛õ¡
 *
c
);

29 
hmgëComm™d
(
˛õ¡
 *
c
);

30 
hdñComm™d
(
˛õ¡
 *
c
);

31 
hÀnComm™d
(
˛õ¡
 *
c
);

32 
h°æíComm™d
(
˛õ¡
 *
c
);

33 
gíîicHgëÆlComm™d
(
˛õ¡
 *
c
, 
Êags
);

34 
hkeysComm™d
(
˛õ¡
 *
c
);

35 
hvÆsComm™d
(
˛õ¡
 *
c
);

36 
hgëÆlComm™d
(
˛õ¡
 *
c
);

37 
hexi°sComm™d
(
˛õ¡
 *
c
);

38 
hsˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_list.c

1 
	~<vr_c‹e.h
>

12 
	$li°Ty≥Push
(
robj
 *
subje˘
,Ñobj *
vÆue
, 
whîe
) {

13 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

14 
robj
 *
vÆue_√w
;

15 
pos
 = (
whîe
 =
LIST_HEAD
Ë? 
QUICKLIST_HEAD
 : 
QUICKLIST_TAIL
;

16 
vÆue_√w
 = 
	`gëDecodedObje˘
(
vÆue
);

17 
size_t
 
Àn
 = 
	`sd¶í
(
vÆue_√w
->
±r
);

18 
	`quickli°Push
(
subje˘
->
±r
, 
vÆue_√w
->±r, 
Àn
, 
pos
);

19 i‡(
vÆue_√w
 !
vÆue
Ë
	`‰ìObje˘
(value_new);

21 
	`£rvîP™ic
("UnknownÜistÉncoding");

23 
	}
}

25 *
	$li°P›Savî
(*
d©a
, 
sz
) {

26  
	`¸óãSåögObje˘
((*)
d©a
,
sz
);

27 
	}
}

29 
robj
 *
	$li°Ty≥P›
(
robj
 *
subje˘
, 
whîe
) {

30 
vl⁄g
;

31 
robj
 *
vÆue
 = 
NULL
;

33 
ql_whîe
 = 
whîe
 =
LIST_HEAD
 ? 
QUICKLIST_HEAD
 : 
QUICKLIST_TAIL
;

34 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

35 i‡(
	`quickli°P›Cu°om
(
subje˘
->
±r
, 
ql_whîe
, (**)&
vÆue
,

36 
NULL
, &
vl⁄g
, 
li°P›Savî
)) {

37 i‡(!
vÆue
)

38 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

41 
	`£rvîP™ic
("UnknownÜistÉncoding");

43  
vÆue
;

44 
	}
}

46 
	$li°Ty≥Lígth
(
robj
 *
subje˘
) {

47 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

48  
	`quickli°Cou¡
(
subje˘
->
±r
);

50 
	`£rvîP™ic
("UnknownÜistÉncoding");

52 
	}
}

55 
li°Ty≥Iãøt‹
 *
	$li°Ty≥InôIãøt‹
(
robj
 *
subje˘
, 
ödex
,

56 
dúe˘i⁄
) {

57 
li°Ty≥Iãøt‹
 *
li
 = 
	`dÆloc
((listTypeIterator));

58 
li
->
subje˘
 = subject;

59 
li
->
ícodög
 = 
subje˘
->encoding;

60 
li
->
dúe˘i⁄
 = direction;

61 
li
->
ôî
 = 
NULL
;

64 
ôî_dúe˘i⁄
 =

65 
dúe˘i⁄
 =
LIST_HEAD
 ? 
AL_START_TAIL
 : 
AL_START_HEAD
;

66 i‡(
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

67 
li
->
ôî
 = 
	`quickli°GëIãøt‹AtIdx
÷i->
subje˘
->
±r
,

68 
ôî_dúe˘i⁄
, 
ödex
);

70 
	`£rvîP™ic
("UnknownÜistÉncoding");

72  
li
;

73 
	}
}

76 
	$li°Ty≥Rñó£Iãøt‹
(
li°Ty≥Iãøt‹
 *
li
) {

77 
	`d‰ì
(
li
->
ôî
);

78 
	`d‰ì
(
li
);

79 
	}
}

84 
	$li°Ty≥Next
(
li°Ty≥Iãøt‹
 *
li
, 
li°Ty≥E¡ry
 *
íåy
) {

86 
	`ASSERT
(
li
->
subje˘
->
ícodög
 ==Üi->encoding);

88 
íåy
->
li
 =Üi;

89 i‡(
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

90  
	`quickli°Next
(
li
->
ôî
, &
íåy
->entry);

92 
	`£rvîP™ic
("UnknownÜistÉncoding");

95 
	}
}

98 
robj
 *
	$li°Ty≥Gë
(
li°Ty≥E¡ry
 *
íåy
) {

99 
robj
 *
vÆue
 = 
NULL
;

100 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

101 i‡(
íåy
->íåy.
vÆue
) {

102 
vÆue
 = 
	`¸óãSåögObje˘
((*)
íåy
->entry.value,

103 
íåy
->íåy.
sz
);

105 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
íåy
->íåy.
l⁄gvÆ
);

108 
	`£rvîP™ic
("UnknownÜistÉncoding");

110  
vÆue
;

111 
	}
}

113 
	$li°Ty≥In£π
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
vÆue
, 
whîe
) {

114 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

115 
vÆue
 = 
	`gëDecodedObje˘
(value);

116 
sds
 
°r
 = 
vÆue
->
±r
;

117 
size_t
 
Àn
 = 
	`sd¶í
(
°r
);

118 i‡(
whîe
 =
LIST_TAIL
) {

119 
	`quickli°In£πA·î
((
quickli°
 *)
íåy
->entry.quicklist,

120 &
íåy
->íåy, 
°r
, 
Àn
);

121 } i‡(
whîe
 =
LIST_HEAD
) {

122 
	`quickli°In£πBef‹e
((
quickli°
 *)
íåy
->entry.quicklist,

123 &
íåy
->íåy, 
°r
, 
Àn
);

125 
	`de¸RefCou¡
(
vÆue
);

127 
	`£rvîP™ic
("UnknownÜistÉncoding");

129 
	}
}

132 
	$li°Ty≥EquÆ
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
o
) {

133 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

134 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,
	`sdsEncodedObje˘
(o));

135  
	`quickli°Com∑ª
(
íåy
->íåy.
zi
,
o
->
±r
,
	`sd¶í
(o->ptr));

137 
	`£rvîP™ic
("UnknownÜistÉncoding");

139 
	}
}

142 
	$li°Ty≥Dñëe
(
li°Ty≥Iãøt‹
 *
ôî
, 
li°Ty≥E¡ry
 *
íåy
) {

143 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

144 
	`quickli°DñE¡ry
(
ôî
->ôî, &
íåy
->entry);

146 
	`£rvîP™ic
("UnknownÜistÉncoding");

148 
	}
}

151 
	$li°Ty≥C⁄vît
(
robj
 *
subje˘
, 
íc
) {

152 
	`£rvîAs£πWôhInfo
(
NULL
,
subje˘
,subje˘->
ty≥
==
OBJ_LIST
);

153 
	`£rvîAs£πWôhInfo
(
NULL
,
subje˘
,subje˘->
ícodög
==
OBJ_ENCODING_ZIPLIST
);

155 i‡(
íc
 =
OBJ_ENCODING_QUICKLIST
) {

156 
size_t
 
zÀn
 = 
£rvî
.
li°_max_zùli°_size
;

157 
dïth
 = 
£rvî
.
li°_com¥ess_dïth
;

158 
subje˘
->
±r
 = 
	`quickli°Cª©eFromZùli°
(
zÀn
, 
dïth
, subject->ptr);

159 
subje˘
->
ícodög
 = 
OBJ_ENCODING_QUICKLIST
;

161 
	`£rvîP™ic
("UnsupportedÜist conversion");

163 
	}
}

169 
	$pushGíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

170 
j
, 
waôög
 = 0, 
pushed
 = 0;

171 
robj
 *
lobj
;

172 
expúed
 = 0;

174 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

175 
	`lockDbWrôe
(
c
->
db
);

176 
lobj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

177 i‡(
lobj
 &&Üobj->
ty≥
 !
OBJ_LIST
) {

178 
	`u∆ockDb
(
c
->
db
);

179 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

180 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

184 
j
 = 2; j < 
c
->
¨gc
; j++) {

185 
c
->
¨gv
[
j
] = 
	`åyObje˘Encodög
(c->argv[j]);

186 i‡(!
lobj
) {

187 
lobj
 = 
	`¸óãQuickli°Obje˘
();

188 
	`quickli°SëO±i⁄s
(
lobj
->
±r
, 
£rvî
.
li°_max_zùli°_size
,

189 
£rvî
.
li°_com¥ess_dïth
);

190 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
lobj
);

192 
	`li°Ty≥Push
(
lobj
,
c
->
¨gv
[
j
],
whîe
);

193 
pushed
++;

195 
	`addRïlyL⁄gL⁄g
(
c
, 
waôög
 + (
lobj
 ? 
	`li°Ty≥Lígth
(lobj) : 0));

196 i‡(
pushed
) {

197 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpush" : "rpush";

199 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

200 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

202 
c
->
vñ
->
dúty
 +
pushed
;

204 
	`u∆ockDb
(
c
->
db
);

205 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

206 
	}
}

208 
	$ÕushComm™d
(
˛õ¡
 *
c
) {

209 
	`pushGíîicComm™d
(
c
,
LIST_HEAD
);

210 
	}
}

212 
	$ΩushComm™d
(
˛õ¡
 *
c
) {

213 
	`pushGíîicComm™d
(
c
,
LIST_TAIL
);

214 
	}
}

216 
	$pushxGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
ªfvÆ
,Ñobj *
vÆ
, 
whîe
) {

217 
robj
 *
subje˘
;

218 
li°Ty≥Iãøt‹
 *
ôî
;

219 
li°Ty≥E¡ry
 
íåy
;

220 
ö£πed
 = 0;

222 i‡((
subje˘
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,
NULL
)) == NULL ||

223 
	`checkTy≥
(
c
,
subje˘
,
OBJ_LIST
)) ;

225 i‡(
ªfvÆ
 !
NULL
) {

227 
ôî
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,0,
LIST_TAIL
);

228 
	`li°Ty≥Next
(
ôî
,&
íåy
)) {

229 i‡(
	`li°Ty≥EquÆ
(&
íåy
,
ªfvÆ
)) {

230 
	`li°Ty≥In£π
(&
íåy
,
vÆ
,
whîe
);

231 
ö£πed
 = 1;

235 
	`li°Ty≥Rñó£Iãøt‹
(
ôî
);

237 i‡(
ö£πed
) {

238 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

239 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"linsert",

240 
c
->
¨gv
[1],c->
db
->
id
);

241 
£rvî
.
dúty
++;

244 
	`addRïly
(
c
,
sh¨ed
.
˙eg⁄e
);

248 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpush" : "rpush";

250 
	`li°Ty≥Push
(
subje˘
,
vÆ
,
whîe
);

251 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

252 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

253 
£rvî
.
dúty
++;

256 
	`addRïlyL⁄gL⁄g
(
c
,
	`li°Ty≥Lígth
(
subje˘
));

257 
	}
}

259 
	$ÕushxComm™d
(
˛õ¡
 *
c
) {

260 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

261 
	`pushxGíîicComm™d
(
c
,
NULL
,c->
¨gv
[2],
LIST_HEAD
);

262 
	}
}

264 
	$ΩushxComm™d
(
˛õ¡
 *
c
) {

265 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

266 
	`pushxGíîicComm™d
(
c
,
NULL
,c->
¨gv
[2],
LIST_TAIL
);

267 
	}
}

269 
	$lö£πComm™d
(
˛õ¡
 *
c
) {

270 
c
->
¨gv
[4] = 
	`åyObje˘Encodög
(c->argv[4]);

271 i‡(
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"after") == 0) {

272 
	`pushxGíîicComm™d
(
c
,c->
¨gv
[3],c->¨gv[4],
LIST_TAIL
);

273 } i‡(
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"before") == 0) {

274 
	`pushxGíîicComm™d
(
c
,c->
¨gv
[3],c->¨gv[4],
LIST_HEAD
);

276 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

278 
	}
}

280 
	$ŒíComm™d
(
˛õ¡
 *
c
) {

281 
robj
 *
o
;

283 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

284 
	`lockDbRód
(
c
->
db
);

285 
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
);

286 i‡(
o
 =
NULL
) {

287 
	`u∆ockDb
(
c
->
db
);

288 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

290 } if(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

291 
	`u∆ockDb
(
c
->
db
);

292 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

296 
	`addRïlyL⁄gL⁄g
(
c
,
	`li°Ty≥Lígth
(
o
));

297 
	`u∆ockDb
(
c
->
db
);

298 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

299 
	}
}

301 
	$lödexComm™d
(
˛õ¡
 *
c
) {

302 
robj
 *
o
;

303 
ödex
;

304 
robj
 *
vÆue
 = 
NULL
;

306 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ödex
, 
NULL
Ë!
VR_OK
))

309 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

310 
	`lockDbRód
(
c
->
db
);

311 
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
);

312 i‡(
o
 =
NULL
) {

313 
	`u∆ockDb
(
c
->
db
);

314 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

316 } if(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

317 
	`u∆ockDb
(
c
->
db
);

318 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

321 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

322 
quickli°E¡ry
 
íåy
;

323 i‡(
	`quickli°Index
(
o
->
±r
, 
ödex
, &
íåy
)) {

324 i‡(
íåy
.
vÆue
) {

325 
vÆue
 = 
	`¸óãSåögObje˘
((*)
íåy
.vÆue,íåy.
sz
);

327 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
íåy
.
l⁄gvÆ
);

329 
	`addRïlyBulk
(
c
,
vÆue
);

330 
	`‰ìObje˘
(
vÆue
);

332 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

335 
	`£rvîP™ic
("UnknownÜistÉncoding");

337 
	`u∆ockDb
(
c
->
db
);

338 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

339 
	}
}

341 
	$l£tComm™d
(
˛õ¡
 *
c
) {

342 
robj
 *
o
;

343 
ödex
;

344 
robj
 *
vÆue
 = 
c
->
¨gv
[3];

345 
expúed
 = 0;

347 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ödex
, 
NULL
Ë!
VR_OK
))

350 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

351 
	`lockDbWrôe
(
c
->
db
);

352 
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nokeyîr
,&
expúed
);

353 i‡(
o
 =
NULL
 || 
	`checkTy≥
(
c
,o,
OBJ_LIST
)) {

354 
	`u∆ockDb
(
c
->
db
);

355 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

358 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

359 
quickli°
 *
ql
 = 
o
->
±r
;

360 
ª∂a˚d
 = 
	`quickli°Rïœ˚AtIndex
(
ql
, 
ödex
,

361 
vÆue
->
±r
, 
	`sd¶í
(value->ptr));

362 i‡(!
ª∂a˚d
) {

363 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

365 
	`addRïly
(
c
,
sh¨ed
.
ok
);

366 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

367 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"l£t",
c
->
¨gv
[1],c->
db
->
id
);

368 
c
->
vñ
->
dúty
++;

371 
	`£rvîP™ic
("UnknownÜistÉncoding");

374 
	`u∆ockDb
(
c
->
db
);

375 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

376 
	}
}

378 
	$p›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

379 
robj
 *
o
, *
vÆue
;

380 
expúed
 = 0;

382 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

383 
	`lockDbWrôe
(
c
->
db
);

384 
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,&
expúed
);

385 i‡(
o
 =
NULL
 || 
	`checkTy≥
(
c
,o,
OBJ_LIST
)) {

386 
	`u∆ockDb
(
c
->
db
);

387 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

391 
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

392 i‡(
vÆue
 =
NULL
) {

393 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

395 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpop" : "rpop";

397 
	`addRïlyBulk
(
c
,
vÆue
);

398 
	`‰ìObje˘
(
vÆue
);

399 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

400 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

401 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

402 
c
->
¨gv
[1],c->
db
->
id
);

403 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

405 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

406 
c
->
vñ
->
dúty
++;

408 
	`u∆ockDb
(
c
->
db
);

409 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

410 
	}
}

412 
	$Õ›Comm™d
(
˛õ¡
 *
c
) {

413 
	`p›GíîicComm™d
(
c
,
LIST_HEAD
);

414 
	}
}

416 
	$Ω›Comm™d
(
˛õ¡
 *
c
) {

417 
	`p›GíîicComm™d
(
c
,
LIST_TAIL
);

418 
	}
}

420 
	$Ã™geComm™d
(
˛õ¡
 *
c
) {

421 
robj
 *
o
;

422 
°¨t
, 
íd
, 
Œí
, 
øngñí
;

424 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

425 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

427 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

428 
	`lockDbRód
(
c
->
db
);

429 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

430 
	`u∆ockDb
(
c
->
db
);

431 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

433 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

434 
	`u∆ockDb
(
c
->
db
);

435 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

439 
Œí
 = 
	`li°Ty≥Lígth
(
o
);

442 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

443 i‡(
íd
 < 0Ëíd = 
Œí
+end;

444 i‡(
°¨t
 < 0) start = 0;

448 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

449 
	`u∆ockDb
(
c
->
db
);

450 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

451 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

454 i‡(
íd
 >
Œí
)Énd =Ülen-1;

455 
øngñí
 = (
íd
-
°¨t
)+1;

458 
	`addRïlyMu…iBulkLí
(
c
,
øngñí
);

459 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

460 
li°Ty≥Iãøt‹
 *
ôî
 = 
	`li°Ty≥InôIãøt‹
(
o
, 
°¨t
, 
LIST_TAIL
);

462 
øngñí
--) {

463 
li°Ty≥E¡ry
 
íåy
;

464 
	`li°Ty≥Next
(
ôî
, &
íåy
);

465 
quickli°E¡ry
 *
qe
 = &
íåy
.entry;

466 i‡(
qe
->
vÆue
) {

467 
	`addRïlyBulkCBuf„r
(
c
,
qe
->
vÆue
,qe->
sz
);

469 
	`addRïlyBulkL⁄gL⁄g
(
c
,
qe
->
l⁄gvÆ
);

472 
	`li°Ty≥Rñó£Iãøt‹
(
ôî
);

474 
	`£rvîP™ic
("ListÉncoding isÇot QUICKLIST!");

477 
	`u∆ockDb
(
c
->
db
);

478 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

479 
	}
}

481 
	$…rimComm™d
(
˛õ¡
 *
c
) {

482 
robj
 *
o
;

483 
°¨t
, 
íd
, 
Œí
, 
…rim
, 
πrim
;

484 
expúed
 = 0;

486 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

487 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

489 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

490 
	`lockDbWrôe
(
c
->
db
);

491 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
ok
,&
expúed
)Ë=
NULL
 ||

492 
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

493 
	`u∆ockDb
(
c
->
db
);

494 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

497 
Œí
 = 
	`li°Ty≥Lígth
(
o
);

500 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

501 i‡(
íd
 < 0Ëíd = 
Œí
+end;

502 i‡(
°¨t
 < 0) start = 0;

506 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

508 
…rim
 = 
Œí
;

509 
πrim
 = 0;

511 i‡(
íd
 >
Œí
)Énd =Ülen-1;

512 
…rim
 = 
°¨t
;

513 
πrim
 = 
Œí
-
íd
-1;

517 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

518 
	`quickli°DñR™ge
(
o
->
±r
,0,
…rim
);

519 
	`quickli°DñR™ge
(
o
->
±r
,-
πrim
,rtrim);

521 
	`£rvîP™ic
("UnknownÜistÉncoding");

524 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"…rim",
c
->
¨gv
[1],c->
db
->
id
);

525 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

526 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

527 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

529 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

530 
c
->
vñ
->
dúty
++;

531 
	`addRïly
(
c
,
sh¨ed
.
ok
);

532 
	`u∆ockDb
(
c
->
db
);

533 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

534 
	}
}

536 
	$ÃemComm™d
(
˛õ¡
 *
c
) {

537 
robj
 *
subje˘
, *
obj
;

538 
obj
 = 
c
->
¨gv
[3];

539 
t‹emove
;

540 
ªmoved
 = 0;

541 
expúed
 = 0;

543 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
t‹emove
, 
NULL
Ë!
VR_OK
))

546 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

547 
	`lockDbWrôe
(
c
->
db
);

548 
subje˘
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
);

549 i‡(
subje˘
 =
NULL
 || 
	`checkTy≥
(
c
,subje˘,
OBJ_LIST
)) {

550 
	`u∆ockDb
(
c
->
db
);

551 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

554 
li°Ty≥Iãøt‹
 *
li
;

555 i‡(
t‹emove
 < 0) {

556 
t‹emove
 = -toremove;

557 
li
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,-1,
LIST_HEAD
);

559 
li
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,0,
LIST_TAIL
);

562 
li°Ty≥E¡ry
 
íåy
;

563 
	`li°Ty≥Next
(
li
,&
íåy
)) {

564 i‡(
	`li°Ty≥EquÆ
(&
íåy
,
obj
)) {

565 
	`li°Ty≥Dñëe
(
li
, &
íåy
);

566 
c
->
vñ
->
dúty
++;

567 
ªmoved
++;

568 i‡(
t‹emove
 && 
ªmoved
 ==Åoremove) ;

571 
	`li°Ty≥Rñó£Iãøt‹
(
li
);

573 i‡(
ªmoved
) {

574 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

575 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"Ãem",
c
->
¨gv
[1],c->
db
->
id
);

578 i‡(
	`li°Ty≥Lígth
(
subje˘
) == 0) {

579 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

580 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

583 
	`addRïlyL⁄gL⁄g
(
c
,
ªmoved
);

584 
	`u∆ockDb
(
c
->
db
);

585 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

586 
	}
}

604 
	$Ω›ÕushH™dÀPush
(
˛õ¡
 *
c
, 
robj
 *
d°key
,Ñobj *
d°obj
,Ñobj *
vÆue
) {

606 i‡(!
d°obj
) {

607 
d°obj
 = 
	`¸óãQuickli°Obje˘
();

608 
	`quickli°SëO±i⁄s
(
d°obj
->
±r
, 
£rvî
.
li°_max_zùli°_size
,

609 
£rvî
.
li°_com¥ess_dïth
);

610 
	`dbAdd
(
c
->
db
,
d°key
,
d°obj
);

612 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

613 
	`li°Ty≥Push
(
d°obj
,
vÆue
,
LIST_HEAD
);

614 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"Õush",
d°key
,
c
->
db
->
id
);

616 
	`addRïlyBulk
(
c
,
vÆue
);

617 
	}
}

619 
	$Ω›ÕushComm™d
(
˛õ¡
 *
c
) {

620 
robj
 *
sobj
, *
vÆue
;

621 i‡((
sobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,
NULL
)) == NULL ||

622 
	`checkTy≥
(
c
,
sobj
,
OBJ_LIST
)) ;

624 i‡(
	`li°Ty≥Lígth
(
sobj
) == 0) {

627 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

629 
robj
 *
dobj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

630 
robj
 *
touchedkey
 = 
c
->
¨gv
[1];

632 i‡(
dobj
 && 
	`checkTy≥
(
c
,dobj,
OBJ_LIST
)) ;

633 
vÆue
 = 
	`li°Ty≥P›
(
sobj
,
LIST_TAIL
);

637 
	`ö¸RefCou¡
(
touchedkey
);

638 
	`Ω›ÕushH™dÀPush
(
c
,c->
¨gv
[2],
dobj
,
vÆue
);

641 
	`de¸RefCou¡
(
vÆue
);

644 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"Ω›",
touchedkey
,
c
->
db
->
id
);

645 i‡(
	`li°Ty≥Lígth
(
sobj
) == 0) {

646 
	`dbDñëe
(
c
->
db
,
touchedkey
);

647 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

648 
touchedkey
,
c
->
db
->
id
);

650 
	`sig«lModifõdKey
(
c
->
db
,
touchedkey
);

651 
	`de¸RefCou¡
(
touchedkey
);

652 
£rvî
.
dúty
++;

654 
	}
}

679 
	$blockF‹Keys
(
˛õ¡
 *
c
, 
robj
 **
keys
, 
numkeys
, 
m°ime_t
 
timeout
,Ñobj *
èrgë
) {

680 
di˘E¡ry
 *
de
;

681 
dli°
 *
l
;

682 
j
;

684 
c
->
bp›
.
timeout
 =Åimeout;

685 
c
->
bp›
.
èrgë
 =Åarget;

687 i‡(
èrgë
 !
NULL
Ë
	`ö¸RefCou¡
(target);

689 
j
 = 0; j < 
numkeys
; j++) {

691 i‡(
	`di˘Add
(
c
->
bp›
.
keys
,keys[
j
],
NULL
Ë!
DICT_OK
) ;

692 
	`ö¸RefCou¡
(
keys
[
j
]);

695 
de
 = 
	`di˘Föd
(
c
->
db
->
blockög_keys
,
keys
[
j
]);

696 i‡(
de
 =
NULL
) {

697 
ªtvÆ
;

700 
l
 = 
	`dli°Cª©e
();

701 
ªtvÆ
 = 
	`di˘Add
(
c
->
db
->
blockög_keys
,
keys
[
j
],
l
);

702 
	`ö¸RefCou¡
(
keys
[
j
]);

703 
	`£rvîAs£πWôhInfo
(
c
,
keys
[
j
],
ªtvÆ
 =
DICT_OK
);

705 
l
 = 
	`di˘GëVÆ
(
de
);

707 
	`dli°AddNodeTaû
(
l
,
c
);

709 
	`blockClõ¡
(
c
,
BLOCKED_LIST
);

710 
	}
}

714 
	$unblockClõ¡WaôögD©a
(
˛õ¡
 *
c
) {

715 
di˘E¡ry
 *
de
;

716 
di˘Iãøt‹
 *
di
;

717 
dli°
 *
l
;

719 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
	`di˘Size
(c->
bp›
.
keys
) != 0);

720 
di
 = 
	`di˘GëIãøt‹
(
c
->
bp›
.
keys
);

722 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

723 
robj
 *
key
 = 
	`di˘GëKey
(
de
);

726 
l
 = 
	`di˘FëchVÆue
(
c
->
db
->
blockög_keys
,
key
);

727 
	`£rvîAs£πWôhInfo
(
c
,
key
,
l
 !
NULL
);

728 
	`dli°DñNode
(
l
,
	`dli°SórchKey
÷,
c
));

730 i‡(
	`dli°Lígth
(
l
) == 0)

731 
	`di˘Dñëe
(
c
->
db
->
blockög_keys
,
key
);

733 
	`di˘Rñó£Iãøt‹
(
di
);

736 
	`di˘Em±y
(
c
->
bp›
.
keys
,
NULL
);

737 i‡(
c
->
bp›
.
èrgë
) {

738 
	`de¸RefCou¡
(
c
->
bp›
.
èrgë
);

739 
c
->
bp›
.
èrgë
 = 
NULL
;

741 
	}
}

750 
	$sig«lLi°AsRódy
(
ªdisDb
 *
db
, 
robj
 *
key
) {

751 
ªt
;

752 
ªadyLi°
 *
æ
;

755 i‡(
	`di˘Föd
(
db
->
blockög_keys
,
key
Ë=
NULL
) ;

758 i‡(
	`di˘Föd
(
db
->
ªady_keys
,
key
Ë!
NULL
) ;

761 
æ
 = 
	`dÆloc
((*rl));

762 
æ
->
key
 = key;

763 
æ
->
db
 = db;

764 
	`ö¸RefCou¡
(
key
);

765 
	`dli°AddNodeTaû
(
£rvî
.
ªady_keys
,
æ
);

770 
	`ö¸RefCou¡
(
key
);

771 
ªt
 = 
	`di˘Add
(
db
->
ªady_keys
,
key
,
NULL
);

772 
	`ASSERT
(
ªt
 =
DICT_OK
);

773 
	}
}

794 
	$£rveClõ¡BlockedOnLi°
(
˛õ¡
 *
ª˚ivî
, 
robj
 *
key
,Ñobj *
d°key
, 
ªdisDb
 *
db
,Ñobj *
vÆue
, 
whîe
)

796 
robj
 *
¨gv
[3];

798 i‡(
d°key
 =
NULL
) {

800 
¨gv
[0] = (
whîe
 =
LIST_HEAD
Ë? 
sh¨ed
.
Õ›
 :

801 
sh¨ed
.
Ω›
;

802 
¨gv
[1] = 
key
;

803 
	`¥›ag©e
((
whîe
 =
LIST_HEAD
) ?

804 
£rvî
.
Õ›Comm™d
 : sîvî.
Ω›Comm™d
,

805 
db
->
id
,
¨gv
,2,
PROPAGATE_AOF
|
PROPAGATE_REPL
);

808 
	`addRïlyMu…iBulkLí
(
ª˚ivî
,2);

809 
	`addRïlyBulk
(
ª˚ivî
,
key
);

810 
	`addRïlyBulk
(
ª˚ivî
,
vÆue
);

813 
robj
 *
d°obj
 =

814 
	`lookupKeyWrôe
(
ª˚ivî
->
db
,
d°key
,
NULL
);

815 i‡(!(
d°obj
 &&

816 
	`checkTy≥
(
ª˚ivî
,
d°obj
,
OBJ_LIST
)))

819 
¨gv
[0] = 
sh¨ed
.
Ω›
;

820 
¨gv
[1] = 
key
;

821 
	`¥›ag©e
(
£rvî
.
Ω›Comm™d
,

822 
db
->
id
,
¨gv
,2,

823 
PROPAGATE_AOF
|

824 
PROPAGATE_REPL
);

825 
	`Ω›ÕushH™dÀPush
(
ª˚ivî
,
d°key
,
d°obj
,

826 
vÆue
);

828 
¨gv
[0] = 
sh¨ed
.
Õush
;

829 
¨gv
[1] = 
d°key
;

830 
¨gv
[2] = 
vÆue
;

831 
	`¥›ag©e
(
£rvî
.
ÕushComm™d
,

832 
db
->
id
,
¨gv
,3,

833 
PROPAGATE_AOF
|

834 
PROPAGATE_REPL
);

838  
VR_ERROR
;

841  
VR_OK
;

842 
	}
}

854 
	$h™dÀClõ¡sBlockedOnLi°s
() {

855 
	`dli°Lígth
(
£rvî
.
ªady_keys
) != 0) {

856 
dli°
 *
l
;

862 
l
 = 
£rvî
.
ªady_keys
;

863 
£rvî
.
ªady_keys
 = 
	`dli°Cª©e
();

865 
	`dli°Lígth
(
l
) != 0) {

866 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

867 
ªadyLi°
 *
æ
 = 
 
->
vÆue
;

871 
	`di˘Dñëe
(
æ
->
db
->
ªady_keys
,æ->
key
);

875 
robj
 *
o
 = 
	`lookupKeyWrôe
(
æ
->
db
,æ->
key
,
NULL
);

876 i‡(
o
 !
NULL
 && o->
ty≥
 =
OBJ_LIST
) {

877 
di˘E¡ry
 *
de
;

881 
de
 = 
	`di˘Föd
(
æ
->
db
->
blockög_keys
,æ->
key
);

882 i‡(
de
) {

883 
dli°
 *
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

884 
num˛õ¡s
 = 
	`dli°Lígth
(
˛õ¡s
);

886 
num˛õ¡s
--) {

887 
dli°Node
 *
˛õ¡node
 = 
	`dli°Fú°
(
˛õ¡s
);

888 
˛õ¡
 *
ª˚ivî
 = 
˛õ¡node
->
vÆue
;

889 
robj
 *
d°key
 = 
ª˚ivî
->
bp›
.
èrgë
;

890 
whîe
 = (
ª˚ivî
->
œ°cmd
 &&

891 
ª˚ivî
->
œ°cmd
->
¥oc
 =
bÕ›Comm™d
) ?

892 
LIST_HEAD
 : 
LIST_TAIL
;

893 
robj
 *
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

895 i‡(
vÆue
) {

899 i‡(
d°key
Ë
	`ö¸RefCou¡
(dstkey);

900 
	`unblockClõ¡
(
ª˚ivî
);

902 i‡(
	`£rveClõ¡BlockedOnLi°
(
ª˚ivî
,

903 
æ
->
key
,
d°key
,æ->
db
,
vÆue
,

904 
whîe
Ë=
VR_ERROR
)

908 
	`li°Ty≥Push
(
o
,
vÆue
,
whîe
);

911 i‡(
d°key
Ë
	`de¸RefCou¡
(dstkey);

912 
	`de¸RefCou¡
(
vÆue
);

919 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

920 
	`dbDñëe
(
æ
->
db
,æ->
key
);

927 
	`de¸RefCou¡
(
æ
->
key
);

928 
	`d‰ì
(
æ
);

929 
	`dli°DñNode
(
l
,
 
);

931 
	`dli°Rñó£
(
l
);

933 
	}
}

936 
	$blockögP›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

937 
robj
 *
o
;

938 
m°ime_t
 
timeout
;

939 
j
;

941 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[c->
¨gc
-1],&
timeout
,
UNIT_SECONDS
)

942 !
VR_OK
) ;

944 
j
 = 1; j < 
c
->
¨gc
-1; j++) {

945 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
);

946 i‡(
o
 !
NULL
) {

947 i‡(
o
->
ty≥
 !
OBJ_LIST
) {

948 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

951 i‡(
	`li°Ty≥Lígth
(
o
) != 0) {

953 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpop" : "rpop";

954 
robj
 *
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

955 
	`ASSERT
(
vÆue
 !
NULL
);

957 
	`addRïlyMu…iBulkLí
(
c
,2);

958 
	`addRïlyBulk
(
c
,c->
¨gv
[
j
]);

959 
	`addRïlyBulk
(
c
,
vÆue
);

960 
	`de¸RefCou¡
(
vÆue
);

961 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,

962 
c
->
¨gv
[
j
],c->
db
->
id
);

963 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

964 
	`dbDñëe
(
c
->
db
,c->
¨gv
[
j
]);

965 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

966 
c
->
¨gv
[
j
],c->
db
->
id
);

968 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[
j
]);

969 
£rvî
.
dúty
++;

972 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,

973 (
whîe
 =
LIST_HEAD
Ë? 
sh¨ed
.
Õ›
 : sh¨ed.
Ω›
,

974 
c
->
¨gv
[
j
]);

983 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

984 
	`addRïly
(
c
,
sh¨ed
.
nuŒmu…ibulk
);

989 
	`blockF‹Keys
(
c
, c->
¨gv
 + 1, c->
¨gc
 - 2, 
timeout
, 
NULL
);

990 
	}
}

992 
	$bÕ›Comm™d
(
˛õ¡
 *
c
) {

993 
	`blockögP›GíîicComm™d
(
c
,
LIST_HEAD
);

994 
	}
}

996 
	$bΩ›Comm™d
(
˛õ¡
 *
c
) {

997 
	`blockögP›GíîicComm™d
(
c
,
LIST_TAIL
);

998 
	}
}

1000 
	$bΩ›ÕushComm™d
(
˛õ¡
 *
c
) {

1001 
m°ime_t
 
timeout
;

1003 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
timeout
,
UNIT_SECONDS
)

1004 !
VR_OK
) ;

1006 
robj
 *
key
 = 
	`lookupKeyWrôe
(
c
->
db
, c->
¨gv
[1],
NULL
);

1008 i‡(
key
 =
NULL
) {

1009 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

1012 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

1015 
	`blockF‹Keys
(
c
, c->
¨gv
 + 1, 1, 
timeout
, c->argv[2]);

1018 i‡(
key
->
ty≥
 !
OBJ_LIST
) {

1019 
	`addRïly
(
c
, 
sh¨ed
.
wr⁄gty≥îr
);

1023 
	`£rvîAs£πWôhInfo
(
c
,
key
,
	`li°Ty≥Lígth
(key) > 0);

1024 
	`Ω›ÕushComm™d
(
c
);

1027 
	}
}

	@src/vr_t_list.c

1 
	~<vr_c‹e.h
>

12 
	$li°Ty≥Push
(
robj
 *
subje˘
,Ñobj *
vÆue
, 
whîe
) {

13 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

14 
robj
 *
vÆue_√w
;

15 
pos
 = (
whîe
 =
LIST_HEAD
Ë? 
QUICKLIST_HEAD
 : 
QUICKLIST_TAIL
;

16 
vÆue_√w
 = 
	`gëDecodedObje˘
(
vÆue
);

17 
size_t
 
Àn
 = 
	`sd¶í
(
vÆue_√w
->
±r
);

18 
	`quickli°Push
(
subje˘
->
±r
, 
vÆue_√w
->±r, 
Àn
, 
pos
);

19 i‡(
vÆue_√w
 !
vÆue
Ë
	`‰ìObje˘
(value_new);

21 
	`£rvîP™ic
("UnknownÜistÉncoding");

23 
	}
}

25 *
	$li°P›Savî
(*
d©a
, 
sz
) {

26  
	`¸óãSåögObje˘
((*)
d©a
,
sz
);

27 
	}
}

29 
robj
 *
	$li°Ty≥P›
(
robj
 *
subje˘
, 
whîe
) {

30 
vl⁄g
;

31 
robj
 *
vÆue
 = 
NULL
;

33 
ql_whîe
 = 
whîe
 =
LIST_HEAD
 ? 
QUICKLIST_HEAD
 : 
QUICKLIST_TAIL
;

34 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

35 i‡(
	`quickli°P›Cu°om
(
subje˘
->
±r
, 
ql_whîe
, (**)&
vÆue
,

36 
NULL
, &
vl⁄g
, 
li°P›Savî
)) {

37 i‡(!
vÆue
)

38 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

41 
	`£rvîP™ic
("UnknownÜistÉncoding");

43  
vÆue
;

44 
	}
}

46 
	$li°Ty≥Lígth
(
robj
 *
subje˘
) {

47 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

48  
	`quickli°Cou¡
(
subje˘
->
±r
);

50 
	`£rvîP™ic
("UnknownÜistÉncoding");

52 
	}
}

55 
li°Ty≥Iãøt‹
 *
	$li°Ty≥InôIãøt‹
(
robj
 *
subje˘
, 
ödex
,

56 
dúe˘i⁄
) {

57 
li°Ty≥Iãøt‹
 *
li
 = 
	`dÆloc
((listTypeIterator));

58 
li
->
subje˘
 = subject;

59 
li
->
ícodög
 = 
subje˘
->encoding;

60 
li
->
dúe˘i⁄
 = direction;

61 
li
->
ôî
 = 
NULL
;

64 
ôî_dúe˘i⁄
 =

65 
dúe˘i⁄
 =
LIST_HEAD
 ? 
AL_START_TAIL
 : 
AL_START_HEAD
;

66 i‡(
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

67 
li
->
ôî
 = 
	`quickli°GëIãøt‹AtIdx
÷i->
subje˘
->
±r
,

68 
ôî_dúe˘i⁄
, 
ödex
);

70 
	`£rvîP™ic
("UnknownÜistÉncoding");

72  
li
;

73 
	}
}

76 
	$li°Ty≥Rñó£Iãøt‹
(
li°Ty≥Iãøt‹
 *
li
) {

77 
	`d‰ì
(
li
->
ôî
);

78 
	`d‰ì
(
li
);

79 
	}
}

84 
	$li°Ty≥Next
(
li°Ty≥Iãøt‹
 *
li
, 
li°Ty≥E¡ry
 *
íåy
) {

86 
	`ASSERT
(
li
->
subje˘
->
ícodög
 ==Üi->encoding);

88 
íåy
->
li
 =Üi;

89 i‡(
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

90  
	`quickli°Next
(
li
->
ôî
, &
íåy
->entry);

92 
	`£rvîP™ic
("UnknownÜistÉncoding");

95 
	}
}

98 
robj
 *
	$li°Ty≥Gë
(
li°Ty≥E¡ry
 *
íåy
) {

99 
robj
 *
vÆue
 = 
NULL
;

100 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

101 i‡(
íåy
->íåy.
vÆue
) {

102 
vÆue
 = 
	`¸óãSåögObje˘
((*)
íåy
->entry.value,

103 
íåy
->íåy.
sz
);

105 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
íåy
->íåy.
l⁄gvÆ
);

108 
	`£rvîP™ic
("UnknownÜistÉncoding");

110  
vÆue
;

111 
	}
}

113 
	$li°Ty≥In£π
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
vÆue
, 
whîe
) {

114 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

115 
vÆue
 = 
	`gëDecodedObje˘
(value);

116 
sds
 
°r
 = 
vÆue
->
±r
;

117 
size_t
 
Àn
 = 
	`sd¶í
(
°r
);

118 i‡(
whîe
 =
LIST_TAIL
) {

119 
	`quickli°In£πA·î
((
quickli°
 *)
íåy
->entry.quicklist,

120 &
íåy
->íåy, 
°r
, 
Àn
);

121 } i‡(
whîe
 =
LIST_HEAD
) {

122 
	`quickli°In£πBef‹e
((
quickli°
 *)
íåy
->entry.quicklist,

123 &
íåy
->íåy, 
°r
, 
Àn
);

125 
	`de¸RefCou¡
(
vÆue
);

127 
	`£rvîP™ic
("UnknownÜistÉncoding");

129 
	}
}

132 
	$li°Ty≥EquÆ
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
o
) {

133 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

134 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,
	`sdsEncodedObje˘
(o));

135  
	`quickli°Com∑ª
(
íåy
->íåy.
zi
,
o
->
±r
,
	`sd¶í
(o->ptr));

137 
	`£rvîP™ic
("UnknownÜistÉncoding");

139 
	}
}

142 
	$li°Ty≥Dñëe
(
li°Ty≥Iãøt‹
 *
ôî
, 
li°Ty≥E¡ry
 *
íåy
) {

143 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

144 
	`quickli°DñE¡ry
(
ôî
->ôî, &
íåy
->entry);

146 
	`£rvîP™ic
("UnknownÜistÉncoding");

148 
	}
}

151 
	$li°Ty≥C⁄vît
(
robj
 *
subje˘
, 
íc
) {

152 
	`£rvîAs£πWôhInfo
(
NULL
,
subje˘
,subje˘->
ty≥
==
OBJ_LIST
);

153 
	`£rvîAs£πWôhInfo
(
NULL
,
subje˘
,subje˘->
ícodög
==
OBJ_ENCODING_ZIPLIST
);

155 i‡(
íc
 =
OBJ_ENCODING_QUICKLIST
) {

156 
size_t
 
zÀn
 = 
£rvî
.
li°_max_zùli°_size
;

157 
dïth
 = 
£rvî
.
li°_com¥ess_dïth
;

158 
subje˘
->
±r
 = 
	`quickli°Cª©eFromZùli°
(
zÀn
, 
dïth
, subject->ptr);

159 
subje˘
->
ícodög
 = 
OBJ_ENCODING_QUICKLIST
;

161 
	`£rvîP™ic
("UnsupportedÜist conversion");

163 
	}
}

169 
	$pushGíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

170 
j
, 
waôög
 = 0, 
pushed
 = 0;

171 
robj
 *
lobj
;

172 
expúed
 = 0;

174 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

175 
	`lockDbWrôe
(
c
->
db
);

176 
lobj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

177 i‡(
lobj
 &&Üobj->
ty≥
 !
OBJ_LIST
) {

178 
	`u∆ockDb
(
c
->
db
);

179 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

180 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

184 
j
 = 2; j < 
c
->
¨gc
; j++) {

185 
c
->
¨gv
[
j
] = 
	`åyObje˘Encodög
(c->argv[j]);

186 i‡(!
lobj
) {

187 
lobj
 = 
	`¸óãQuickli°Obje˘
();

188 
	`quickli°SëO±i⁄s
(
lobj
->
±r
, 
£rvî
.
li°_max_zùli°_size
,

189 
£rvî
.
li°_com¥ess_dïth
);

190 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
lobj
);

192 
	`li°Ty≥Push
(
lobj
,
c
->
¨gv
[
j
],
whîe
);

193 
pushed
++;

195 
	`addRïlyL⁄gL⁄g
(
c
, 
waôög
 + (
lobj
 ? 
	`li°Ty≥Lígth
(lobj) : 0));

196 i‡(
pushed
) {

197 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpush" : "rpush";

199 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

200 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

202 
c
->
vñ
->
dúty
 +
pushed
;

204 
	`u∆ockDb
(
c
->
db
);

205 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

206 
	}
}

208 
	$ÕushComm™d
(
˛õ¡
 *
c
) {

209 
	`pushGíîicComm™d
(
c
,
LIST_HEAD
);

210 
	}
}

212 
	$ΩushComm™d
(
˛õ¡
 *
c
) {

213 
	`pushGíîicComm™d
(
c
,
LIST_TAIL
);

214 
	}
}

216 
	$pushxGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
ªfvÆ
,Ñobj *
vÆ
, 
whîe
) {

217 
robj
 *
subje˘
;

218 
li°Ty≥Iãøt‹
 *
ôî
;

219 
li°Ty≥E¡ry
 
íåy
;

220 
ö£πed
 = 0;

222 i‡((
subje˘
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,
NULL
)) == NULL ||

223 
	`checkTy≥
(
c
,
subje˘
,
OBJ_LIST
)) ;

225 i‡(
ªfvÆ
 !
NULL
) {

227 
ôî
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,0,
LIST_TAIL
);

228 
	`li°Ty≥Next
(
ôî
,&
íåy
)) {

229 i‡(
	`li°Ty≥EquÆ
(&
íåy
,
ªfvÆ
)) {

230 
	`li°Ty≥In£π
(&
íåy
,
vÆ
,
whîe
);

231 
ö£πed
 = 1;

235 
	`li°Ty≥Rñó£Iãøt‹
(
ôî
);

237 i‡(
ö£πed
) {

238 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

239 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"linsert",

240 
c
->
¨gv
[1],c->
db
->
id
);

241 
£rvî
.
dúty
++;

244 
	`addRïly
(
c
,
sh¨ed
.
˙eg⁄e
);

248 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpush" : "rpush";

250 
	`li°Ty≥Push
(
subje˘
,
vÆ
,
whîe
);

251 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

252 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

253 
£rvî
.
dúty
++;

256 
	`addRïlyL⁄gL⁄g
(
c
,
	`li°Ty≥Lígth
(
subje˘
));

257 
	}
}

259 
	$ÕushxComm™d
(
˛õ¡
 *
c
) {

260 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

261 
	`pushxGíîicComm™d
(
c
,
NULL
,c->
¨gv
[2],
LIST_HEAD
);

262 
	}
}

264 
	$ΩushxComm™d
(
˛õ¡
 *
c
) {

265 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

266 
	`pushxGíîicComm™d
(
c
,
NULL
,c->
¨gv
[2],
LIST_TAIL
);

267 
	}
}

269 
	$lö£πComm™d
(
˛õ¡
 *
c
) {

270 
c
->
¨gv
[4] = 
	`åyObje˘Encodög
(c->argv[4]);

271 i‡(
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"after") == 0) {

272 
	`pushxGíîicComm™d
(
c
,c->
¨gv
[3],c->¨gv[4],
LIST_TAIL
);

273 } i‡(
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"before") == 0) {

274 
	`pushxGíîicComm™d
(
c
,c->
¨gv
[3],c->¨gv[4],
LIST_HEAD
);

276 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

278 
	}
}

280 
	$ŒíComm™d
(
˛õ¡
 *
c
) {

281 
robj
 *
o
;

283 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

284 
	`lockDbRód
(
c
->
db
);

285 
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
);

286 i‡(
o
 =
NULL
) {

287 
	`u∆ockDb
(
c
->
db
);

288 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

290 } if(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

291 
	`u∆ockDb
(
c
->
db
);

292 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

296 
	`addRïlyL⁄gL⁄g
(
c
,
	`li°Ty≥Lígth
(
o
));

297 
	`u∆ockDb
(
c
->
db
);

298 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

299 
	}
}

301 
	$lödexComm™d
(
˛õ¡
 *
c
) {

302 
robj
 *
o
;

303 
ödex
;

304 
robj
 *
vÆue
 = 
NULL
;

306 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ödex
, 
NULL
Ë!
VR_OK
))

309 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

310 
	`lockDbRód
(
c
->
db
);

311 
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
);

312 i‡(
o
 =
NULL
) {

313 
	`u∆ockDb
(
c
->
db
);

314 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

316 } if(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

317 
	`u∆ockDb
(
c
->
db
);

318 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

321 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

322 
quickli°E¡ry
 
íåy
;

323 i‡(
	`quickli°Index
(
o
->
±r
, 
ödex
, &
íåy
)) {

324 i‡(
íåy
.
vÆue
) {

325 
vÆue
 = 
	`¸óãSåögObje˘
((*)
íåy
.vÆue,íåy.
sz
);

327 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
íåy
.
l⁄gvÆ
);

329 
	`addRïlyBulk
(
c
,
vÆue
);

330 
	`‰ìObje˘
(
vÆue
);

332 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

335 
	`£rvîP™ic
("UnknownÜistÉncoding");

337 
	`u∆ockDb
(
c
->
db
);

338 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

339 
	}
}

341 
	$l£tComm™d
(
˛õ¡
 *
c
) {

342 
robj
 *
o
;

343 
ödex
;

344 
robj
 *
vÆue
 = 
c
->
¨gv
[3];

345 
expúed
 = 0;

347 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ödex
, 
NULL
Ë!
VR_OK
))

350 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

351 
	`lockDbWrôe
(
c
->
db
);

352 
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nokeyîr
,&
expúed
);

353 i‡(
o
 =
NULL
 || 
	`checkTy≥
(
c
,o,
OBJ_LIST
)) {

354 
	`u∆ockDb
(
c
->
db
);

355 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

358 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

359 
quickli°
 *
ql
 = 
o
->
±r
;

360 
ª∂a˚d
 = 
	`quickli°Rïœ˚AtIndex
(
ql
, 
ödex
,

361 
vÆue
->
±r
, 
	`sd¶í
(value->ptr));

362 i‡(!
ª∂a˚d
) {

363 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

365 
	`addRïly
(
c
,
sh¨ed
.
ok
);

366 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

367 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"l£t",
c
->
¨gv
[1],c->
db
->
id
);

368 
c
->
vñ
->
dúty
++;

371 
	`£rvîP™ic
("UnknownÜistÉncoding");

374 
	`u∆ockDb
(
c
->
db
);

375 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

376 
	}
}

378 
	$p›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

379 
robj
 *
o
, *
vÆue
;

380 
expúed
 = 0;

382 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

383 
	`lockDbWrôe
(
c
->
db
);

384 
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,&
expúed
);

385 i‡(
o
 =
NULL
 || 
	`checkTy≥
(
c
,o,
OBJ_LIST
)) {

386 
	`u∆ockDb
(
c
->
db
);

387 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

391 
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

392 i‡(
vÆue
 =
NULL
) {

393 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

395 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpop" : "rpop";

397 
	`addRïlyBulk
(
c
,
vÆue
);

398 
	`‰ìObje˘
(
vÆue
);

399 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

400 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

401 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

402 
c
->
¨gv
[1],c->
db
->
id
);

403 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

405 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

406 
c
->
vñ
->
dúty
++;

408 
	`u∆ockDb
(
c
->
db
);

409 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

410 
	}
}

412 
	$Õ›Comm™d
(
˛õ¡
 *
c
) {

413 
	`p›GíîicComm™d
(
c
,
LIST_HEAD
);

414 
	}
}

416 
	$Ω›Comm™d
(
˛õ¡
 *
c
) {

417 
	`p›GíîicComm™d
(
c
,
LIST_TAIL
);

418 
	}
}

420 
	$Ã™geComm™d
(
˛õ¡
 *
c
) {

421 
robj
 *
o
;

422 
°¨t
, 
íd
, 
Œí
, 
øngñí
;

424 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

425 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

427 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

428 
	`lockDbRód
(
c
->
db
);

429 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

430 
	`u∆ockDb
(
c
->
db
);

431 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

433 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

434 
	`u∆ockDb
(
c
->
db
);

435 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

439 
Œí
 = 
	`li°Ty≥Lígth
(
o
);

442 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

443 i‡(
íd
 < 0Ëíd = 
Œí
+end;

444 i‡(
°¨t
 < 0) start = 0;

448 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

449 
	`u∆ockDb
(
c
->
db
);

450 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

451 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

454 i‡(
íd
 >
Œí
)Énd =Ülen-1;

455 
øngñí
 = (
íd
-
°¨t
)+1;

458 
	`addRïlyMu…iBulkLí
(
c
,
øngñí
);

459 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

460 
li°Ty≥Iãøt‹
 *
ôî
 = 
	`li°Ty≥InôIãøt‹
(
o
, 
°¨t
, 
LIST_TAIL
);

462 
øngñí
--) {

463 
li°Ty≥E¡ry
 
íåy
;

464 
	`li°Ty≥Next
(
ôî
, &
íåy
);

465 
quickli°E¡ry
 *
qe
 = &
íåy
.entry;

466 i‡(
qe
->
vÆue
) {

467 
	`addRïlyBulkCBuf„r
(
c
,
qe
->
vÆue
,qe->
sz
);

469 
	`addRïlyBulkL⁄gL⁄g
(
c
,
qe
->
l⁄gvÆ
);

472 
	`li°Ty≥Rñó£Iãøt‹
(
ôî
);

474 
	`£rvîP™ic
("ListÉncoding isÇot QUICKLIST!");

477 
	`u∆ockDb
(
c
->
db
);

478 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

479 
	}
}

481 
	$…rimComm™d
(
˛õ¡
 *
c
) {

482 
robj
 *
o
;

483 
°¨t
, 
íd
, 
Œí
, 
…rim
, 
πrim
;

484 
expúed
 = 0;

486 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

487 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

489 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

490 
	`lockDbWrôe
(
c
->
db
);

491 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
ok
,&
expúed
)Ë=
NULL
 ||

492 
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

493 
	`u∆ockDb
(
c
->
db
);

494 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

497 
Œí
 = 
	`li°Ty≥Lígth
(
o
);

500 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

501 i‡(
íd
 < 0Ëíd = 
Œí
+end;

502 i‡(
°¨t
 < 0) start = 0;

506 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

508 
…rim
 = 
Œí
;

509 
πrim
 = 0;

511 i‡(
íd
 >
Œí
)Énd =Ülen-1;

512 
…rim
 = 
°¨t
;

513 
πrim
 = 
Œí
-
íd
-1;

517 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

518 
	`quickli°DñR™ge
(
o
->
±r
,0,
…rim
);

519 
	`quickli°DñR™ge
(
o
->
±r
,-
πrim
,rtrim);

521 
	`£rvîP™ic
("UnknownÜistÉncoding");

524 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"…rim",
c
->
¨gv
[1],c->
db
->
id
);

525 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

526 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

527 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

529 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

530 
c
->
vñ
->
dúty
++;

531 
	`addRïly
(
c
,
sh¨ed
.
ok
);

532 
	`u∆ockDb
(
c
->
db
);

533 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

534 
	}
}

536 
	$ÃemComm™d
(
˛õ¡
 *
c
) {

537 
robj
 *
subje˘
, *
obj
;

538 
obj
 = 
c
->
¨gv
[3];

539 
t‹emove
;

540 
ªmoved
 = 0;

541 
expúed
 = 0;

543 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
t‹emove
, 
NULL
Ë!
VR_OK
))

546 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

547 
	`lockDbWrôe
(
c
->
db
);

548 
subje˘
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
);

549 i‡(
subje˘
 =
NULL
 || 
	`checkTy≥
(
c
,subje˘,
OBJ_LIST
)) {

550 
	`u∆ockDb
(
c
->
db
);

551 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

554 
li°Ty≥Iãøt‹
 *
li
;

555 i‡(
t‹emove
 < 0) {

556 
t‹emove
 = -toremove;

557 
li
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,-1,
LIST_HEAD
);

559 
li
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,0,
LIST_TAIL
);

562 
li°Ty≥E¡ry
 
íåy
;

563 
	`li°Ty≥Next
(
li
,&
íåy
)) {

564 i‡(
	`li°Ty≥EquÆ
(&
íåy
,
obj
)) {

565 
	`li°Ty≥Dñëe
(
li
, &
íåy
);

566 
c
->
vñ
->
dúty
++;

567 
ªmoved
++;

568 i‡(
t‹emove
 && 
ªmoved
 ==Åoremove) ;

571 
	`li°Ty≥Rñó£Iãøt‹
(
li
);

573 i‡(
ªmoved
) {

574 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

575 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"Ãem",
c
->
¨gv
[1],c->
db
->
id
);

578 i‡(
	`li°Ty≥Lígth
(
subje˘
) == 0) {

579 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

580 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

583 
	`addRïlyL⁄gL⁄g
(
c
,
ªmoved
);

584 
	`u∆ockDb
(
c
->
db
);

585 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

586 
	}
}

604 
	$Ω›ÕushH™dÀPush
(
˛õ¡
 *
c
, 
robj
 *
d°key
,Ñobj *
d°obj
,Ñobj *
vÆue
) {

606 i‡(!
d°obj
) {

607 
d°obj
 = 
	`¸óãQuickli°Obje˘
();

608 
	`quickli°SëO±i⁄s
(
d°obj
->
±r
, 
£rvî
.
li°_max_zùli°_size
,

609 
£rvî
.
li°_com¥ess_dïth
);

610 
	`dbAdd
(
c
->
db
,
d°key
,
d°obj
);

612 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

613 
	`li°Ty≥Push
(
d°obj
,
vÆue
,
LIST_HEAD
);

614 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"Õush",
d°key
,
c
->
db
->
id
);

616 
	`addRïlyBulk
(
c
,
vÆue
);

617 
	}
}

619 
	$Ω›ÕushComm™d
(
˛õ¡
 *
c
) {

620 
robj
 *
sobj
, *
vÆue
;

621 i‡((
sobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,
NULL
)) == NULL ||

622 
	`checkTy≥
(
c
,
sobj
,
OBJ_LIST
)) ;

624 i‡(
	`li°Ty≥Lígth
(
sobj
) == 0) {

627 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

629 
robj
 *
dobj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

630 
robj
 *
touchedkey
 = 
c
->
¨gv
[1];

632 i‡(
dobj
 && 
	`checkTy≥
(
c
,dobj,
OBJ_LIST
)) ;

633 
vÆue
 = 
	`li°Ty≥P›
(
sobj
,
LIST_TAIL
);

637 
	`ö¸RefCou¡
(
touchedkey
);

638 
	`Ω›ÕushH™dÀPush
(
c
,c->
¨gv
[2],
dobj
,
vÆue
);

641 
	`de¸RefCou¡
(
vÆue
);

644 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"Ω›",
touchedkey
,
c
->
db
->
id
);

645 i‡(
	`li°Ty≥Lígth
(
sobj
) == 0) {

646 
	`dbDñëe
(
c
->
db
,
touchedkey
);

647 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

648 
touchedkey
,
c
->
db
->
id
);

650 
	`sig«lModifõdKey
(
c
->
db
,
touchedkey
);

651 
	`de¸RefCou¡
(
touchedkey
);

652 
£rvî
.
dúty
++;

654 
	}
}

679 
	$blockF‹Keys
(
˛õ¡
 *
c
, 
robj
 **
keys
, 
numkeys
, 
m°ime_t
 
timeout
,Ñobj *
èrgë
) {

680 
di˘E¡ry
 *
de
;

681 
dli°
 *
l
;

682 
j
;

684 
c
->
bp›
.
timeout
 =Åimeout;

685 
c
->
bp›
.
èrgë
 =Åarget;

687 i‡(
èrgë
 !
NULL
Ë
	`ö¸RefCou¡
(target);

689 
j
 = 0; j < 
numkeys
; j++) {

691 i‡(
	`di˘Add
(
c
->
bp›
.
keys
,keys[
j
],
NULL
Ë!
DICT_OK
) ;

692 
	`ö¸RefCou¡
(
keys
[
j
]);

695 
de
 = 
	`di˘Föd
(
c
->
db
->
blockög_keys
,
keys
[
j
]);

696 i‡(
de
 =
NULL
) {

697 
ªtvÆ
;

700 
l
 = 
	`dli°Cª©e
();

701 
ªtvÆ
 = 
	`di˘Add
(
c
->
db
->
blockög_keys
,
keys
[
j
],
l
);

702 
	`ö¸RefCou¡
(
keys
[
j
]);

703 
	`£rvîAs£πWôhInfo
(
c
,
keys
[
j
],
ªtvÆ
 =
DICT_OK
);

705 
l
 = 
	`di˘GëVÆ
(
de
);

707 
	`dli°AddNodeTaû
(
l
,
c
);

709 
	`blockClõ¡
(
c
,
BLOCKED_LIST
);

710 
	}
}

714 
	$unblockClõ¡WaôögD©a
(
˛õ¡
 *
c
) {

715 
di˘E¡ry
 *
de
;

716 
di˘Iãøt‹
 *
di
;

717 
dli°
 *
l
;

719 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
	`di˘Size
(c->
bp›
.
keys
) != 0);

720 
di
 = 
	`di˘GëIãøt‹
(
c
->
bp›
.
keys
);

722 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

723 
robj
 *
key
 = 
	`di˘GëKey
(
de
);

726 
l
 = 
	`di˘FëchVÆue
(
c
->
db
->
blockög_keys
,
key
);

727 
	`£rvîAs£πWôhInfo
(
c
,
key
,
l
 !
NULL
);

728 
	`dli°DñNode
(
l
,
	`dli°SórchKey
÷,
c
));

730 i‡(
	`dli°Lígth
(
l
) == 0)

731 
	`di˘Dñëe
(
c
->
db
->
blockög_keys
,
key
);

733 
	`di˘Rñó£Iãøt‹
(
di
);

736 
	`di˘Em±y
(
c
->
bp›
.
keys
,
NULL
);

737 i‡(
c
->
bp›
.
èrgë
) {

738 
	`de¸RefCou¡
(
c
->
bp›
.
èrgë
);

739 
c
->
bp›
.
èrgë
 = 
NULL
;

741 
	}
}

750 
	$sig«lLi°AsRódy
(
ªdisDb
 *
db
, 
robj
 *
key
) {

751 
ªt
;

752 
ªadyLi°
 *
æ
;

755 i‡(
	`di˘Föd
(
db
->
blockög_keys
,
key
Ë=
NULL
) ;

758 i‡(
	`di˘Föd
(
db
->
ªady_keys
,
key
Ë!
NULL
) ;

761 
æ
 = 
	`dÆloc
((*rl));

762 
æ
->
key
 = key;

763 
æ
->
db
 = db;

764 
	`ö¸RefCou¡
(
key
);

765 
	`dli°AddNodeTaû
(
£rvî
.
ªady_keys
,
æ
);

770 
	`ö¸RefCou¡
(
key
);

771 
ªt
 = 
	`di˘Add
(
db
->
ªady_keys
,
key
,
NULL
);

772 
	`ASSERT
(
ªt
 =
DICT_OK
);

773 
	}
}

794 
	$£rveClõ¡BlockedOnLi°
(
˛õ¡
 *
ª˚ivî
, 
robj
 *
key
,Ñobj *
d°key
, 
ªdisDb
 *
db
,Ñobj *
vÆue
, 
whîe
)

796 
robj
 *
¨gv
[3];

798 i‡(
d°key
 =
NULL
) {

800 
¨gv
[0] = (
whîe
 =
LIST_HEAD
Ë? 
sh¨ed
.
Õ›
 :

801 
sh¨ed
.
Ω›
;

802 
¨gv
[1] = 
key
;

803 
	`¥›ag©e
((
whîe
 =
LIST_HEAD
) ?

804 
£rvî
.
Õ›Comm™d
 : sîvî.
Ω›Comm™d
,

805 
db
->
id
,
¨gv
,2,
PROPAGATE_AOF
|
PROPAGATE_REPL
);

808 
	`addRïlyMu…iBulkLí
(
ª˚ivî
,2);

809 
	`addRïlyBulk
(
ª˚ivî
,
key
);

810 
	`addRïlyBulk
(
ª˚ivî
,
vÆue
);

813 
robj
 *
d°obj
 =

814 
	`lookupKeyWrôe
(
ª˚ivî
->
db
,
d°key
,
NULL
);

815 i‡(!(
d°obj
 &&

816 
	`checkTy≥
(
ª˚ivî
,
d°obj
,
OBJ_LIST
)))

819 
¨gv
[0] = 
sh¨ed
.
Ω›
;

820 
¨gv
[1] = 
key
;

821 
	`¥›ag©e
(
£rvî
.
Ω›Comm™d
,

822 
db
->
id
,
¨gv
,2,

823 
PROPAGATE_AOF
|

824 
PROPAGATE_REPL
);

825 
	`Ω›ÕushH™dÀPush
(
ª˚ivî
,
d°key
,
d°obj
,

826 
vÆue
);

828 
¨gv
[0] = 
sh¨ed
.
Õush
;

829 
¨gv
[1] = 
d°key
;

830 
¨gv
[2] = 
vÆue
;

831 
	`¥›ag©e
(
£rvî
.
ÕushComm™d
,

832 
db
->
id
,
¨gv
,3,

833 
PROPAGATE_AOF
|

834 
PROPAGATE_REPL
);

838  
VR_ERROR
;

841  
VR_OK
;

842 
	}
}

854 
	$h™dÀClõ¡sBlockedOnLi°s
() {

855 
	`dli°Lígth
(
£rvî
.
ªady_keys
) != 0) {

856 
dli°
 *
l
;

862 
l
 = 
£rvî
.
ªady_keys
;

863 
£rvî
.
ªady_keys
 = 
	`dli°Cª©e
();

865 
	`dli°Lígth
(
l
) != 0) {

866 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

867 
ªadyLi°
 *
æ
 = 
 
->
vÆue
;

871 
	`di˘Dñëe
(
æ
->
db
->
ªady_keys
,æ->
key
);

875 
robj
 *
o
 = 
	`lookupKeyWrôe
(
æ
->
db
,æ->
key
,
NULL
);

876 i‡(
o
 !
NULL
 && o->
ty≥
 =
OBJ_LIST
) {

877 
di˘E¡ry
 *
de
;

881 
de
 = 
	`di˘Föd
(
æ
->
db
->
blockög_keys
,æ->
key
);

882 i‡(
de
) {

883 
dli°
 *
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

884 
num˛õ¡s
 = 
	`dli°Lígth
(
˛õ¡s
);

886 
num˛õ¡s
--) {

887 
dli°Node
 *
˛õ¡node
 = 
	`dli°Fú°
(
˛õ¡s
);

888 
˛õ¡
 *
ª˚ivî
 = 
˛õ¡node
->
vÆue
;

889 
robj
 *
d°key
 = 
ª˚ivî
->
bp›
.
èrgë
;

890 
whîe
 = (
ª˚ivî
->
œ°cmd
 &&

891 
ª˚ivî
->
œ°cmd
->
¥oc
 =
bÕ›Comm™d
) ?

892 
LIST_HEAD
 : 
LIST_TAIL
;

893 
robj
 *
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

895 i‡(
vÆue
) {

899 i‡(
d°key
Ë
	`ö¸RefCou¡
(dstkey);

900 
	`unblockClõ¡
(
ª˚ivî
);

902 i‡(
	`£rveClõ¡BlockedOnLi°
(
ª˚ivî
,

903 
æ
->
key
,
d°key
,æ->
db
,
vÆue
,

904 
whîe
Ë=
VR_ERROR
)

908 
	`li°Ty≥Push
(
o
,
vÆue
,
whîe
);

911 i‡(
d°key
Ë
	`de¸RefCou¡
(dstkey);

912 
	`de¸RefCou¡
(
vÆue
);

919 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

920 
	`dbDñëe
(
æ
->
db
,æ->
key
);

927 
	`de¸RefCou¡
(
æ
->
key
);

928 
	`d‰ì
(
æ
);

929 
	`dli°DñNode
(
l
,
 
);

931 
	`dli°Rñó£
(
l
);

933 
	}
}

936 
	$blockögP›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

937 
robj
 *
o
;

938 
m°ime_t
 
timeout
;

939 
j
;

941 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[c->
¨gc
-1],&
timeout
,
UNIT_SECONDS
)

942 !
VR_OK
) ;

944 
j
 = 1; j < 
c
->
¨gc
-1; j++) {

945 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
);

946 i‡(
o
 !
NULL
) {

947 i‡(
o
->
ty≥
 !
OBJ_LIST
) {

948 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

951 i‡(
	`li°Ty≥Lígth
(
o
) != 0) {

953 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpop" : "rpop";

954 
robj
 *
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

955 
	`ASSERT
(
vÆue
 !
NULL
);

957 
	`addRïlyMu…iBulkLí
(
c
,2);

958 
	`addRïlyBulk
(
c
,c->
¨gv
[
j
]);

959 
	`addRïlyBulk
(
c
,
vÆue
);

960 
	`de¸RefCou¡
(
vÆue
);

961 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,

962 
c
->
¨gv
[
j
],c->
db
->
id
);

963 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

964 
	`dbDñëe
(
c
->
db
,c->
¨gv
[
j
]);

965 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

966 
c
->
¨gv
[
j
],c->
db
->
id
);

968 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[
j
]);

969 
£rvî
.
dúty
++;

972 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,

973 (
whîe
 =
LIST_HEAD
Ë? 
sh¨ed
.
Õ›
 : sh¨ed.
Ω›
,

974 
c
->
¨gv
[
j
]);

983 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

984 
	`addRïly
(
c
,
sh¨ed
.
nuŒmu…ibulk
);

989 
	`blockF‹Keys
(
c
, c->
¨gv
 + 1, c->
¨gc
 - 2, 
timeout
, 
NULL
);

990 
	}
}

992 
	$bÕ›Comm™d
(
˛õ¡
 *
c
) {

993 
	`blockögP›GíîicComm™d
(
c
,
LIST_HEAD
);

994 
	}
}

996 
	$bΩ›Comm™d
(
˛õ¡
 *
c
) {

997 
	`blockögP›GíîicComm™d
(
c
,
LIST_TAIL
);

998 
	}
}

1000 
	$bΩ›ÕushComm™d
(
˛õ¡
 *
c
) {

1001 
m°ime_t
 
timeout
;

1003 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
timeout
,
UNIT_SECONDS
)

1004 !
VR_OK
) ;

1006 
robj
 *
key
 = 
	`lookupKeyWrôe
(
c
->
db
, c->
¨gv
[1],
NULL
);

1008 i‡(
key
 =
NULL
) {

1009 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

1012 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

1015 
	`blockF‹Keys
(
c
, c->
¨gv
 + 1, 1, 
timeout
, c->argv[2]);

1018 i‡(
key
->
ty≥
 !
OBJ_LIST
) {

1019 
	`addRïly
(
c
, 
sh¨ed
.
wr⁄gty≥îr
);

1023 
	`£rvîAs£πWôhInfo
(
c
,
key
,
	`li°Ty≥Lígth
(key) > 0);

1024 
	`Ω›ÕushComm™d
(
c
);

1027 
	}
}

	@src/vr_t_list.h

1 #i‚de‡
_VR_T_LIST_H_


2 
	#_VR_T_LIST_H_


	)

4 
li°Ty≥Push
(
robj
 *
subje˘
,Ñobj *
vÆue
, 
whîe
);

5 *
li°P›Savî
(*
d©a
, 
sz
);

6 
robj
 *
li°Ty≥P›
‘obj *
subje˘
, 
whîe
);

7 
li°Ty≥Lígth
(
robj
 *
subje˘
);

8 
li°Ty≥Iãøt‹
 *
li°Ty≥InôIãøt‹
(
robj
 *
subje˘
, 
ödex
, 
dúe˘i⁄
);

9 
li°Ty≥Rñó£Iãøt‹
(
li°Ty≥Iãøt‹
 *
li
);

10 
li°Ty≥Next
(
li°Ty≥Iãøt‹
 *
li
, 
li°Ty≥E¡ry
 *
íåy
);

11 
robj
 *
li°Ty≥Gë
(
li°Ty≥E¡ry
 *
íåy
);

12 
li°Ty≥In£π
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
vÆue
, 
whîe
);

13 
li°Ty≥EquÆ
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
o
);

14 
li°Ty≥Dñëe
(
li°Ty≥Iãøt‹
 *
ôî
, 
li°Ty≥E¡ry
 *
íåy
);

15 
li°Ty≥C⁄vît
(
robj
 *
subje˘
, 
íc
);

16 
pushGíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

17 
ÕushComm™d
(
˛õ¡
 *
c
);

18 
ΩushComm™d
(
˛õ¡
 *
c
);

19 
pushxGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
ªfvÆ
,Ñobj *
vÆ
, 
whîe
);

20 
ÕushxComm™d
(
˛õ¡
 *
c
);

21 
ΩushxComm™d
(
˛õ¡
 *
c
);

22 
lö£πComm™d
(
˛õ¡
 *
c
);

23 
ŒíComm™d
(
˛õ¡
 *
c
);

24 
lödexComm™d
(
˛õ¡
 *
c
);

25 
l£tComm™d
(
˛õ¡
 *
c
);

26 
p›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

27 
Õ›Comm™d
(
˛õ¡
 *
c
);

28 
Ω›Comm™d
(
˛õ¡
 *
c
);

29 
Ã™geComm™d
(
˛õ¡
 *
c
);

30 
…rimComm™d
(
˛õ¡
 *
c
);

31 
ÃemComm™d
(
˛õ¡
 *
c
);

32 
Ω›ÕushH™dÀPush
(
˛õ¡
 *
c
, 
robj
 *
d°key
,Ñobj *
d°obj
,Ñobj *
vÆue
);

33 
Ω›ÕushComm™d
(
˛õ¡
 *
c
);

34 
blockF‹Keys
(
˛õ¡
 *
c
, 
robj
 **
keys
, 
numkeys
, 
m°ime_t
 
timeout
,Ñobj *
èrgë
);

35 
unblockClõ¡WaôögD©a
(
˛õ¡
 *
c
);

36 
sig«lLi°AsRódy
(
ªdisDb
 *
db
, 
robj
 *
key
);

37 
£rveClõ¡BlockedOnLi°
(
˛õ¡
 *
ª˚ivî
, 
robj
 *
key
,Ñobj *
d°key
, 
ªdisDb
 *
db
,Ñobj *
vÆue
, 
whîe
);

38 
h™dÀClõ¡sBlockedOnLi°s
();

39 
blockögP›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

40 
bÕ›Comm™d
(
˛õ¡
 *
c
);

41 
bΩ›Comm™d
(
˛õ¡
 *
c
);

42 
bΩ›ÕushComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_list.h

1 #i‚de‡
_VR_T_LIST_H_


2 
	#_VR_T_LIST_H_


	)

4 
li°Ty≥Push
(
robj
 *
subje˘
,Ñobj *
vÆue
, 
whîe
);

5 *
li°P›Savî
(*
d©a
, 
sz
);

6 
robj
 *
li°Ty≥P›
‘obj *
subje˘
, 
whîe
);

7 
li°Ty≥Lígth
(
robj
 *
subje˘
);

8 
li°Ty≥Iãøt‹
 *
li°Ty≥InôIãøt‹
(
robj
 *
subje˘
, 
ödex
, 
dúe˘i⁄
);

9 
li°Ty≥Rñó£Iãøt‹
(
li°Ty≥Iãøt‹
 *
li
);

10 
li°Ty≥Next
(
li°Ty≥Iãøt‹
 *
li
, 
li°Ty≥E¡ry
 *
íåy
);

11 
robj
 *
li°Ty≥Gë
(
li°Ty≥E¡ry
 *
íåy
);

12 
li°Ty≥In£π
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
vÆue
, 
whîe
);

13 
li°Ty≥EquÆ
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
o
);

14 
li°Ty≥Dñëe
(
li°Ty≥Iãøt‹
 *
ôî
, 
li°Ty≥E¡ry
 *
íåy
);

15 
li°Ty≥C⁄vît
(
robj
 *
subje˘
, 
íc
);

16 
pushGíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

17 
ÕushComm™d
(
˛õ¡
 *
c
);

18 
ΩushComm™d
(
˛õ¡
 *
c
);

19 
pushxGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
ªfvÆ
,Ñobj *
vÆ
, 
whîe
);

20 
ÕushxComm™d
(
˛õ¡
 *
c
);

21 
ΩushxComm™d
(
˛õ¡
 *
c
);

22 
lö£πComm™d
(
˛õ¡
 *
c
);

23 
ŒíComm™d
(
˛õ¡
 *
c
);

24 
lödexComm™d
(
˛õ¡
 *
c
);

25 
l£tComm™d
(
˛õ¡
 *
c
);

26 
p›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

27 
Õ›Comm™d
(
˛õ¡
 *
c
);

28 
Ω›Comm™d
(
˛õ¡
 *
c
);

29 
Ã™geComm™d
(
˛õ¡
 *
c
);

30 
…rimComm™d
(
˛õ¡
 *
c
);

31 
ÃemComm™d
(
˛õ¡
 *
c
);

32 
Ω›ÕushH™dÀPush
(
˛õ¡
 *
c
, 
robj
 *
d°key
,Ñobj *
d°obj
,Ñobj *
vÆue
);

33 
Ω›ÕushComm™d
(
˛õ¡
 *
c
);

34 
blockF‹Keys
(
˛õ¡
 *
c
, 
robj
 **
keys
, 
numkeys
, 
m°ime_t
 
timeout
,Ñobj *
èrgë
);

35 
unblockClõ¡WaôögD©a
(
˛õ¡
 *
c
);

36 
sig«lLi°AsRódy
(
ªdisDb
 *
db
, 
robj
 *
key
);

37 
£rveClõ¡BlockedOnLi°
(
˛õ¡
 *
ª˚ivî
, 
robj
 *
key
,Ñobj *
d°key
, 
ªdisDb
 *
db
,Ñobj *
vÆue
, 
whîe
);

38 
h™dÀClõ¡sBlockedOnLi°s
();

39 
blockögP›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

40 
bÕ›Comm™d
(
˛õ¡
 *
c
);

41 
bΩ›Comm™d
(
˛õ¡
 *
c
);

42 
bΩ›ÕushComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_set.c

1 
	~<vr_c‹e.h
>

7 
suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,

8 
robj
 *
d°key
, 
›
);

13 
robj
 *
	$£tTy≥Cª©e
(
robj
 *
vÆue
) {

14 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,
NULL
Ë=
VR_OK
)

15  
	`¸óãI¡£tObje˘
();

16  
	`¸óãSëObje˘
();

17 
	}
}

24 
	$£tTy≥Add
(
robj
 *
subje˘
,Ñobj *
vÆue
) {

25 
ŒvÆ
;

26 
robj
 *
obj
;

27 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

28 
obj
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

29 i‡(
	`di˘Add
(
subje˘
->
±r
,
obj
,
NULL
Ë=
DICT_OK
) {

32 
	`‰ìObje˘
(
obj
);

34 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

35 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

36 
uöt8_t
 
suc˚ss
 = 0;

37 
subje˘
->
±r
 = 
	`öt£tAdd
(subje˘->±r,
ŒvÆ
,&
suc˚ss
);

38 i‡(
suc˚ss
) {

41 i‡(
	`öt£tLí
(
subje˘
->
±r
Ë> 
£rvî
.
£t_max_öt£t_íåõs
)

42 
	`£tTy≥C⁄vît
(
subje˘
,
OBJ_ENCODING_HT
);

47 
	`£tTy≥C⁄vît
(
subje˘
,
OBJ_ENCODING_HT
);

48 
obj
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

51 
	`£rvîAs£πWôhInfo
(
NULL
,
obj
,

52 
	`di˘Add
(
subje˘
->
±r
,
obj
,
NULL
Ë=
DICT_OK
);

56 
	`£rvîP™ic
("Unknown setÉncoding");

59 
	}
}

61 
	$£tTy≥Remove
(
robj
 *
£tobj
,Ñobj *
vÆue
) {

62 
ŒvÆ
;

63 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

64 i‡(
	`di˘Dñëe
(
£tobj
->
±r
,
vÆue
Ë=
DICT_OK
) {

65 i‡(
	`htNìdsResize
(
£tobj
->
±r
)Ë
	`di˘Resize
(setobj->ptr);

68 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

69 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

70 
suc˚ss
;

71 
£tobj
->
±r
 = 
	`öt£tRemove
(£tobj->±r,
ŒvÆ
,&
suc˚ss
);

72 i‡(
suc˚ss
)  1;

75 
	`£rvîP™ic
("Unknown setÉncoding");

78 
	}
}

80 
	$£tTy≥IsMembî
(
robj
 *
subje˘
,Ñobj *
vÆue
) {

81 
ŒvÆ
;

82 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

83  
	`di˘Föd
((
di˘
*)
subje˘
->
±r
,
vÆue
Ë!
NULL
;

84 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

85 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

86  
	`öt£tFöd
((
öt£t
*)
subje˘
->
±r
,
ŒvÆ
);

89 
	`£rvîP™ic
("Unknown setÉncoding");

92 
	}
}

94 
£tTy≥Iãøt‹
 *
	$£tTy≥InôIãøt‹
(
robj
 *
subje˘
) {

95 
£tTy≥Iãøt‹
 *
si
 = 
	`dÆloc
((setTypeIterator));

96 
si
->
subje˘
 = subject;

97 
si
->
ícodög
 = 
subje˘
->encoding;

98 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
) {

99 
si
->
di
 = 
	`di˘GëIãøt‹
(
subje˘
->
±r
);

100 } i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

101 
si
->
ii
 = 0;

103 
	`£rvîP™ic
("Unknown setÉncoding");

105  
si
;

106 
	}
}

108 
	$£tTy≥Rñó£Iãøt‹
(
£tTy≥Iãøt‹
 *
si
) {

109 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
)

110 
	`di˘Rñó£Iãøt‹
(
si
->
di
);

111 
	`d‰ì
(
si
);

112 
	}
}

129 
	$£tTy≥Next
(
£tTy≥Iãøt‹
 *
si
, 
robj
 **
objñe
, 
öt64_t
 *
Œñe
) {

130 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
) {

131 
di˘E¡ry
 *
de
 = 
	`di˘Next
(
si
->
di
);

132 i‡(
de
 =
NULL
)  -1;

133 *
objñe
 = 
	`di˘GëKey
(
de
);

134 *
Œñe
 = -123456789;

135 } i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

136 i‡(!
	`öt£tGë
(
si
->
subje˘
->
±r
,si->
ii
++,
Œñe
))

138 *
objñe
 = 
NULL
;

140 
	`£rvîP™ic
("Wrong setÉncoding in setTypeNext");

142  
si
->
ícodög
;

143 
	}
}

153 
robj
 *
	$£tTy≥NextObje˘
(
£tTy≥Iãøt‹
 *
si
) {

154 
öt64_t
 
öãÀ
;

155 
robj
 *
objñe
;

156 
ícodög
;

158 
ícodög
 = 
	`£tTy≥Next
(
si
,&
objñe
,&
öãÀ
);

159 
ícodög
) {

160 -1:  
NULL
;

161 
OBJ_ENCODING_INTSET
:

162  
	`¸óãSåögObje˘FromL⁄gL⁄g
(
öãÀ
);

163 
OBJ_ENCODING_HT
:

164  
objñe
;

166 
	`£rvîP™ic
("UnsupportedÉncoding");

168  
NULL
;

169 
	}
}

188 
	$£tTy≥R™domEÀmít
(
robj
 *
£tobj
,Ñobj **
objñe
, 
öt64_t
 *
Œñe
) {

189 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

190 
di˘E¡ry
 *
de
 = 
	`di˘GëR™domKey
(
£tobj
->
±r
);

191 *
objñe
 = 
	`di˘GëKey
(
de
);

192 *
Œñe
 = -123456789;

193 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

194 *
Œñe
 = 
	`öt£tR™dom
(
£tobj
->
±r
);

195 *
objñe
 = 
NULL
;

197 
	`£rvîP™ic
("Unknown setÉncoding");

199  
£tobj
->
ícodög
;

200 
	}
}

202 
	$£tTy≥Size
(
robj
 *
subje˘
) {

203 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

204  
	`di˘Size
((
di˘
*)
subje˘
->
±r
);

205 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

206  
	`öt£tLí
((
öt£t
*)
subje˘
->
±r
);

208 
	`£rvîP™ic
("Unknown setÉncoding");

210 
	}
}

215 
	$£tTy≥C⁄vît
(
robj
 *
£tobj
, 
íc
) {

216 
£tTy≥Iãøt‹
 *
si
;

217 
	`£rvîAs£πWôhInfo
(
NULL
,
£tobj
,£tobj->
ty≥
 =
OBJ_SET
 &&

218 
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
);

220 i‡(
íc
 =
OBJ_ENCODING_HT
) {

221 
öt64_t
 
öãÀ
;

222 
di˘
 *
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

223 
robj
 *
ñemít
;

226 
	`di˘Ex∑nd
(
d
,
	`öt£tLí
(
£tobj
->
±r
));

229 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

230 
	`£tTy≥Next
(
si
,&
ñemít
,&
öãÀ
) != -1) {

231 
ñemít
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
öãÀ
);

232 
	`£rvîAs£πWôhInfo
(
NULL
,
ñemít
,

233 
	`di˘Add
(
d
,
ñemít
,
NULL
Ë=
DICT_OK
);

235 
	`£tTy≥Rñó£Iãøt‹
(
si
);

237 
£tobj
->
ícodög
 = 
OBJ_ENCODING_HT
;

238 
	`d‰ì
(
£tobj
->
±r
);

239 
£tobj
->
±r
 = 
d
;

241 
	`£rvîP™ic
("Unsupported set conversion");

243 
	}
}

245 
	$ßddComm™d
(
˛õ¡
 *
c
) {

246 
robj
 *
£t
;

247 
j
, 
added
 = 0;

248 
expúed
 = 0;

250 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

251 
	`lockDbWrôe
(
c
->
db
);

252 
£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

253 i‡(
£t
 =
NULL
) {

254 
£t
 = 
	`£tTy≥Cª©e
(
c
->
¨gv
[2]);

255 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
£t
);

257 i‡(
£t
->
ty≥
 !
OBJ_SET
) {

258 
	`u∆ockDb
(
c
->
db
);

259 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

260 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

265 
j
 = 2; j < 
c
->
¨gc
; j++) {

266 
c
->
¨gv
[
j
] = 
	`åyObje˘Encodög
(c->argv[j]);

267 i‡(
	`£tTy≥Add
(
£t
,
c
->
¨gv
[
j
])Ë
added
++;

269 i‡(
added
) {

270 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

271 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"ßdd",
c
->
¨gv
[1],c->
db
->
id
);

273 
c
->
vñ
->
dúty
 +
added
;

274 
	`addRïlyL⁄gL⁄g
(
c
,
added
);

275 
	`u∆ockDb
(
c
->
db
);

276 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

277 
	}
}

279 
	$§emComm™d
(
˛õ¡
 *
c
) {

280 
robj
 *
£t
;

281 
j
, 
dñëed
 = 0, 
keyªmoved
 = 0;

282 
expúed
 = 0;

284 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

285 
	`lockDbWrôe
(
c
->
db
);

286 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

287 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

288 
	`u∆ockDb
(
c
->
db
);

289 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

293 
j
 = 2; j < 
c
->
¨gc
; j++) {

294 i‡(
	`£tTy≥Remove
(
£t
,
c
->
¨gv
[
j
])) {

295 
dñëed
++;

296 i‡(
	`£tTy≥Size
(
£t
) == 0) {

297 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

298 
keyªmoved
 = 1;

303 i‡(
dñëed
) {

304 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

305 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"§em",
c
->
¨gv
[1],c->
db
->
id
);

306 i‡(
keyªmoved
)

307 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],

308 
c
->
db
->
id
);

309 
c
->
vñ
->
dúty
 +
dñëed
;

311 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

312 
	`u∆ockDb
(
c
->
db
);

313 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

314 
	}
}

316 
	$smoveComm™d
(
˛õ¡
 *
c
) {

317 
robj
 *
§c£t
, *
d°£t
, *
ñe
;

318 
§c£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

319 
d°£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

320 
ñe
 = 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

323 i‡(
§c£t
 =
NULL
) {

324 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

330 i‡(
	`checkTy≥
(
c
,
§c£t
,
OBJ_SET
) ||

331 (
d°£t
 && 
	`checkTy≥
(
c
,d°£t,
OBJ_SET
))) ;

334 i‡(
§c£t
 =
d°£t
) {

335 
	`addRïly
(
c
,
	`£tTy≥IsMembî
(
§c£t
,
ñe
Ë? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

340 i‡(!
	`£tTy≥Remove
(
§c£t
,
ñe
)) {

341 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

344 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"§em",
c
->
¨gv
[1],c->
db
->
id
);

347 i‡(
	`£tTy≥Size
(
§c£t
) == 0) {

348 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

349 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

351 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

352 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[2]);

353 
£rvî
.
dúty
++;

356 i‡(!
d°£t
) {

357 
d°£t
 = 
	`£tTy≥Cª©e
(
ñe
);

358 
	`dbAdd
(
c
->
db
,c->
¨gv
[2],
d°£t
);

362 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)) {

363 
£rvî
.
dúty
++;

364 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"ßdd",
c
->
¨gv
[2],c->
db
->
id
);

366 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

367 
	}
}

369 
	$sismembîComm™d
(
˛õ¡
 *
c
) {

370 
robj
 *
£t
;

372 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

373 
	`lockDbRód
(
c
->
db
);

374 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

375 
	`u∆ockDb
(
c
->
db
);

376 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

378 } i‡(
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

379 
	`u∆ockDb
(
c
->
db
);

380 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

384 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

385 i‡(
	`£tTy≥IsMembî
(
£t
,
c
->
¨gv
[2]))

386 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

388 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

390 
	`u∆ockDb
(
c
->
db
);

391 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

392 
	}
}

394 
	$sˇrdComm™d
(
˛õ¡
 *
c
) {

395 
robj
 *
o
;

397 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

398 
	`lockDbRód
(
c
->
db
);

399 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

400 
	`u∆ockDb
(
c
->
db
);

401 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

403 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_SET
)) {

404 
	`u∆ockDb
(
c
->
db
);

405 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

409 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
o
));

410 
	`u∆ockDb
(
c
->
db
);

411 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

412 
	}
}

414 
	$smembîsGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
£t
)

416 
£tTy≥Iãøt‹
 *
si
;

417 
robj
 *
ñeobj
;

418 
öt64_t
 
ötobj
;

419 
ícodög
;

421 
	`addRïlyMu…iBulkLí
(
c
, 
	`£tTy≥Size
(
£t
));

422 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

423 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñeobj
,&
ötobj
)) != -1) {

424 i‡(
ícodög
 =
OBJ_ENCODING_HT
) {

425 
	`addRïlyBulk
(
c
, 
ñeobj
);

426 } i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

427 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
ötobj
);

430 
	`£tTy≥Rñó£Iãøt‹
(
si
);

431 
	}
}

439 
	#SPOP_MOVE_STRATEGY_MUL
 5

	)

441 
	$•›WôhCou¡Comm™d
(
˛õ¡
 *
c
) {

442 
l
;

443 
cou¡
, 
size
;

444 
robj
 *
£t
;

445 
expúed
 = 0;

448 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
l
,
NULL
Ë!
VR_OK
) ;

449 i‡(
l
 >= 0) {

450 
cou¡
 = (Ë
l
;

452 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

456 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

457 
	`lockDbWrôe
(
c
->
db
);

460 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
,&
expúed
))

461 =
NULL
 || 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

462 
	`u∆ockDb
(
c
->
db
);

463 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

469 i‡(
cou¡
 == 0) {

470 
	`u∆ockDb
(
c
->
db
);

471 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

472 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

476 
size
 = 
	`£tTy≥Size
(
£t
);

479 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"•›",
c
->
¨gv
[1],c->
db
->
id
);

480 
c
->
vñ
->
dúty
 +
cou¡
;

485 i‡(
cou¡
 >
size
) {

486 
robj
 *
aux
;

489 
	`smembîsGíîicComm™d
(
c
, 
£t
);

492 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

493 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

496 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
c
->
¨gv
[1]);

497 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,
sh¨ed
.
dñ
,
aux
);

498 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

499 
c
->
vñ
->
dúty
++;

500 
	`u∆ockDb
(
c
->
db
);

501 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

508 
robj
 *
¥›¨gv
[3];

509 
¥›¨gv
[0] = 
	`¸óãSåögObje˘
("SREM",4);

510 
¥›¨gv
[1] = 
c
->
¨gv
[1];

511 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

514 
robj
 *
objñe
;

515 
ícodög
;

516 
öt64_t
 
Œñe
;

517 
ªmaöög
 = 
size
-
cou¡
;

526 i‡(
ªmaöög
*
SPOP_MOVE_STRATEGY_MUL
 > 
cou¡
) {

527 
cou¡
--) {

528 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
objñe
,&
Œñe
);

529 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

530 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

532 
objñe
 = 
	`dupSåögObje˘Unc⁄°™t
(objele);

536 
	`addRïlyBulk
(
c
,
objñe
);

537 
	`£tTy≥Remove
(
£t
,
objñe
);

540 
¥›¨gv
[2] = 
objñe
;

541 
	`ÆsoPr›ag©e
(
£rvî
.
§emComm™d
,
c
->
db
->
id
,
¥›¨gv
,3,

542 
PROPAGATE_AOF
|
PROPAGATE_REPL
);

543 
	`‰ìObje˘
(
objñe
);

554 
robj
 *
√w£t
 = 
NULL
;

557 
ªmaöög
--) {

558 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
objñe
,&
Œñe
);

559 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

560 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

562 i‡(!
√w£t
Ë√w£à
	`£tTy≥Cª©e
(
objñe
);

563 
	`£tTy≥Add
(
√w£t
,
objñe
);

564 
	`£tTy≥Remove
(
£t
,
objñe
);

565 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

566 
	`‰ìObje˘
(
objñe
);

570 
£tTy≥Iãøt‹
 *
si
;

571 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

572 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
objñe
,&
Œñe
)) != -1) {

573 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

574 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

575 
	`addRïlyBulk
(
c
,
objñe
);

578 
¥›¨gv
[2] = 
objñe
;

579 
	`ÆsoPr›ag©e
(
£rvî
.
§emComm™d
,
c
->
db
->
id
,
¥›¨gv
,3,

580 
PROPAGATE_AOF
|
PROPAGATE_REPL
);

581 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

582 
	`‰ìObje˘
(
objñe
);

584 
	`£tTy≥Rñó£Iãøt‹
(
si
);

587 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w£t
);

594 
	`‰ìObje˘
(
¥›¨gv
[0]);

595 
	`¥evítComm™dPr›ag©i⁄
(
c
);

596 
	`u∆ockDb
(
c
->
db
);

597 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

598 
	}
}

600 
	$•›Comm™d
(
˛õ¡
 *
c
) {

601 
robj
 *
£t
, *
ñe
, *
aux1
, *
aux2
;

602 
öt64_t
 
Œñe
;

603 
ícodög
;

604 
expúed
 = 0;

606 i‡(
c
->
¨gc
 == 3) {

607 
	`•›WôhCou¡Comm™d
(
c
);

609 } i‡(
c
->
¨gc
 > 3) {

610 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

614 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

615 
	`lockDbWrôe
(
c
->
db
);

618 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,&
expúed
)Ë=
NULL
 ||

619 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

620 
	`u∆ockDb
(
c
->
db
);

621 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

626 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

629 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

630 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

631 
£t
->
±r
 = 
	`öt£tRemove
(£t->±r,
Œñe
,
NULL
);

633 
ñe
 = 
	`dupSåögObje˘Unc⁄°™t
(ele);

634 
	`£tTy≥Remove
(
£t
,
ñe
);

637 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"•›",
c
->
¨gv
[1],c->
db
->
id
);

640 
aux1
 = 
	`¸óãSåögObje˘
("SREM",4);

641 
aux2
 = 
	`dupSåögObje˘Unc⁄°™t
(
c
->
¨gv
[1]);

642 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,3,
aux1
,
aux2
,
ñe
);

645 
	`addRïlyBulk
(
c
,
ñe
);

648 i‡(
	`£tTy≥Size
(
£t
) == 0) {

649 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

650 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

654 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

655 
c
->
vñ
->
dúty
++;

656 
	`u∆ockDb
(
c
->
db
);

657 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

658 
	}
}

666 
	#SRANDMEMBER_SUB_STRATEGY_MUL
 3

	)

668 
	$§™dmembîWôhCou¡Comm™d
(
˛õ¡
 *
c
) {

669 
l
;

670 
cou¡
, 
size
;

671 
uniq
 = 1;

672 
robj
 *
£t
, *
ñe
;

673 
öt64_t
 
Œñe
;

674 
ícodög
;

676 
di˘
 *
d
;

678 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
l
,
NULL
Ë!
VR_OK
) ;

679 i‡(
l
 >= 0) {

680 
cou¡
 = (Ë
l
;

684 
cou¡
 = -
l
;

685 
uniq
 = 0;

688 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
))

689 =
NULL
 || 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) ;

690 
size
 = 
	`£tTy≥Size
(
£t
);

693 i‡(
cou¡
 == 0) {

694 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

702 i‡(!
uniq
) {

703 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

704 
cou¡
--) {

705 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

706 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

707 
	`addRïlyBulkL⁄gL⁄g
(
c
,
Œñe
);

709 
	`addRïlyBulk
(
c
,
ñe
);

718 i‡(
cou¡
 >
size
) {

720 
	`smembîsGíîicComm™d
(
c
, 
£t
);

725 
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

736 i‡(
cou¡
*
SRANDMEMBER_SUB_STRATEGY_MUL
 > 
size
) {

737 
£tTy≥Iãøt‹
 *
si
;

740 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

741 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñe
,&
Œñe
)) != -1) {

742 
ªtvÆ
 = 
DICT_ERR
;

744 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

745 
ªtvÆ
 = 
	`di˘Add
(
d
,
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
),
NULL
);

747 
ªtvÆ
 = 
	`di˘Add
(
d
,
	`dupSåögObje˘
(
ñe
),
NULL
);

749 
	`ASSERT
(
ªtvÆ
 =
DICT_OK
);

751 
	`£tTy≥Rñó£Iãøt‹
(
si
);

752 
	`ASSERT
(
	`di˘Size
(
d
Ë=
size
);

755 
size
 > 
cou¡
) {

756 
di˘E¡ry
 *
de
;

758 
de
 = 
	`di˘GëR™domKey
(
d
);

759 
	`di˘Dñëe
(
d
,
	`di˘GëKey
(
de
));

760 
size
--;

769 
added
 = 0;

771 
added
 < 
cou¡
) {

772 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

773 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

774 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

776 
ñe
 = 
	`dupSåögObje˘
(ele);

781 i‡(
	`di˘Add
(
d
,
ñe
,
NULL
Ë=
DICT_OK
)

782 
added
++;

784 
	`de¸RefCou¡
(
ñe
);

790 
di˘Iãøt‹
 *
di
;

791 
di˘E¡ry
 *
de
;

793 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

794 
di
 = 
	`di˘GëIãøt‹
(
d
);

795 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
)

796 
	`addRïlyBulk
(
c
,
	`di˘GëKey
(
de
));

797 
	`di˘Rñó£Iãøt‹
(
di
);

798 
	`di˘Rñó£
(
d
);

800 
	}
}

802 
	$§™dmembîComm™d
(
˛õ¡
 *
c
) {

803 
robj
 *
£t
, *
ñe
;

804 
öt64_t
 
Œñe
;

805 
ícodög
;

807 i‡(
c
->
¨gc
 == 3) {

808 
	`§™dmembîWôhCou¡Comm™d
(
c
);

810 } i‡(
c
->
¨gc
 > 3) {

811 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

815 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
 ||

816 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) ;

818 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

819 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

820 
	`addRïlyBulkL⁄gL⁄g
(
c
,
Œñe
);

822 
	`addRïlyBulk
(
c
,
ñe
);

824 
	}
}

826 
	$smembîsComm™d
(
˛õ¡
 *
c
) {

827 
robj
 *
£t
;

829 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

830 
	`lockDbRód
(
c
->
db
);

831 
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
);

832 i‡(
£t
 =
NULL
) {

833 
	`u∆ockDb
(
c
->
db
);

834 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

836 } if(
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

837 
	`u∆ockDb
(
c
->
db
);

838 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

842 
	`smembîsGíîicComm™d
(
c
, 
£t
);

843 
	`u∆ockDb
(
c
->
db
);

844 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

845 
	}
}

847 
	$qs‹tCom∑ªSësByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

848  
	`£tTy≥Size
(*(
robj
**)
s1
)-£tTy≥Size(*‘obj**)
s2
);

849 
	}
}

853 
	$qs‹tCom∑ªSësByRevC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

854 
robj
 *
o1
 = *‘obj**)
s1
, *
o2
 = *‘obj**)
s2
;

856  (
o2
 ? 
	`£tTy≥Size
(o2Ë: 0Ë- (
o1
 ? setTypeSize(o1) : 0);

857 
	}
}

859 
	$söãrGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
,

860 
£äum
, 
robj
 *
d°key
) {

861 
£tTy≥Iãøt‹
 *
si
;

862 
robj
 *
ñeobj
, *
d°£t
 = 
NULL
;

863 
öt64_t
 
ötobj
;

864 
j
, 
ˇrdöÆôy
 = 0;

865 
ícodög
;

866 
robj
 *
£tobj
, *
mö_Àn_£t
;

867 
mö_Àn
 = -1;

868 
mö_Àn_idx
 = 0;

870 
j
 = 0; j < 
£äum
; j++) {

871 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

872 
	`lockDbRód
(
c
->
db
);

873 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

874 i‡(!
£tobj
) {

875 
	`u∆ockDb
(
c
->
db
);

876 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_mis£s
,1);

877 i‡(
d°key
) {

878 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

879 
	`lockDbWrôe
(
c
->
db
);

880 i‡(
	`dbDñëe
(
c
->
db
,
d°key
)) {

881 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

882 
c
->
vñ
->
dúty
++;

884 
	`u∆ockDb
(
c
->
db
);

885 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

887 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

891 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

892 
	`u∆ockDb
(
c
->
db
);

893 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

897 i‡(
mö_Àn
 =-1 || 
	`£tTy≥Size
(
£tobj
) < min_len) {

898 
mö_Àn
 = 
	`£tTy≥Size
(
£tobj
);

899 
mö_Àn_idx
 = 
j
;

902 
	`u∆ockDb
(
c
->
db
);

903 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

906 
mö_Àn_£t
 = 
	`¸óãI¡£tObje˘
();

907 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
mö_Àn_idx
]);

908 
	`lockDbRód
(
c
->
db
);

909 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
mö_Àn_idx
]);

910 i‡(!
£tobj
) {

911 
	`u∆ockDb
(
c
->
db
);

912 
	`‰ìObje˘
(
mö_Àn_£t
);

913 
d⁄e
;

915 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

916 
	`u∆ockDb
(
c
->
db
);

917 
	`‰ìObje˘
(
mö_Àn_£t
);

920 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

921 (
ñeobj
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

922 
	`£tTy≥Add
(
mö_Àn_£t
,
ñeobj
);

923 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

924 
	`‰ìObje˘
(
ñeobj
);

926 
	`£tTy≥Rñó£Iãøt‹
(
si
);

927 
	`u∆ockDb
(
c
->
db
);

929 
d°£t
 = 
	`¸óãI¡£tObje˘
();

934 
si
 = 
	`£tTy≥InôIãøt‹
(
mö_Àn_£t
);

935 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñeobj
,&
ötobj
)) != -1) {

936 
j
 = 0; j < 
£äum
; j++) {

937 i‡(
j
 =
mö_Àn_idx
) ;

938 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

939 
	`lockDbRód
(
c
->
db
);

940 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

941 i‡(!
£tobj
) {

942 
	`u∆ockDb
(
c
->
db
);

943 
	`‰ìObje˘
(
mö_Àn_£t
);

944 i‡(
d°£t
) {

945 
	`‰ìObje˘
(
d°£t
);

946 
d°£t
 = 
NULL
;

948 
	`£tTy≥Rñó£Iãøt‹
(
si
);

949 
d⁄e
;

951 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

952 
	`u∆ockDb
(
c
->
db
);

953 
	`‰ìObje˘
(
mö_Àn_£t
);

954 i‡(
d°£t
) {

955 
	`‰ìObje˘
(
d°£t
);

956 
d°£t
 = 
NULL
;

958 
	`£tTy≥Rñó£Iãøt‹
(
si
);

962 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

964 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
 &&

965 !
	`öt£tFöd
((
öt£t
*)
£tobj
->
±r
,
ötobj
))

967 
	`u∆ockDb
(
c
->
db
);

972 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

973 
ñeobj
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
ötobj
);

974 i‡(!
	`£tTy≥IsMembî
(
£tobj
,
ñeobj
)) {

975 
	`u∆ockDb
(
c
->
db
);

976 
	`‰ìObje˘
(
ñeobj
);

979 
	`‰ìObje˘
(
ñeobj
);

981 } i‡(
ícodög
 =
OBJ_ENCODING_HT
) {

985 i‡(
ñeobj
->
ícodög
 =
OBJ_ENCODING_INT
 &&

986 
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
 &&

987 !
	`öt£tFöd
((
öt£t
*)
£tobj
->
±r
,()
ñeobj
->ptr))

989 
	`u∆ockDb
(
c
->
db
);

993 } i‡(!
	`£tTy≥IsMembî
(
£tobj
,
ñeobj
)) {

994 
	`u∆ockDb
(
c
->
db
);

998 
	`u∆ockDb
(
c
->
db
);

1002 i‡(
j
 =
£äum
) {

1003 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

1004 
ñeobj
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
ötobj
);

1005 
	`£tTy≥Add
(
d°£t
,
ñeobj
);

1006 
	`‰ìObje˘
(
ñeobj
);

1008 
	`£tTy≥Add
(
d°£t
,
ñeobj
);

1010 
ˇrdöÆôy
 ++;

1013 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1014 
	`‰ìObje˘
(
mö_Àn_£t
);

1016 
d⁄e
:

1017 i‡(
d°key
) {

1018 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

1019 
	`lockDbWrôe
(
c
->
db
);

1022 
dñëed
 = 
	`dbDñëe
(
c
->
db
,
d°key
);

1023 i‡(
d°£t
 && 
	`£tTy≥Size
(dstset) > 0) {

1024 
	`dbAdd
(
c
->
db
,
d°key
,
d°£t
);

1025 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
d°£t
));

1026 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"sinterstore",

1027 
d°key
,
c
->
db
->
id
);

1029 i‡(
d°£t
) {

1030 
	`‰ìObje˘
(
d°£t
);

1031 
d°£t
 = 
NULL
;

1033 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1034 i‡(
dñëed
)

1035 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

1036 
d°key
,
c
->
db
->
id
);

1038 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

1039 
	`u∆ockDb
(
c
->
db
);

1040 
c
->
vñ
->
dúty
++;

1042 
	`addRïlyMu…iBulkLí
(
c
,
ˇrdöÆôy
);

1043 i‡(
d°£t
 && 
	`£tTy≥Size
(dstset) > 0) {

1044 
si
 = 
	`£tTy≥InôIãøt‹
(
d°£t
);

1045 (
ñeobj
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1046 
	`addRïlyBulk
(
c
,
ñeobj
);

1047 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1048 
	`‰ìObje˘
(
ñeobj
);

1050 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1052 i‡(
d°£t
Ë
	`‰ìObje˘
(dstset);

1054 
	}
}

1056 
	$söãrComm™d
(
˛õ¡
 *
c
) {

1057 
	`söãrGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
);

1058 
	}
}

1060 
	$söãr°‹eComm™d
(
˛õ¡
 *
c
) {

1061 
	`söãrGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->argv[1]);

1062 
	}
}

1064 
	#SET_OP_UNION
 0

	)

1065 
	#SET_OP_DIFF
 1

	)

1066 
	#SET_OP_INTER
 2

	)

1068 
	$suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,

1069 
robj
 *
d°key
, 
›
) {

1070 
£tTy≥Iãøt‹
 *
si
;

1071 
robj
 *
ñe
, *
d°£t
 = 
NULL
;

1072 
j
, 
ˇrdöÆôy
 = 0;

1073 
diff_Ægo
 = 1;

1074 
robj
 *
£tobj
;

1075 
Ægo_⁄e_w‹k
 = 0, 
Ægo_two_w‹k
 = 0;

1076 
fú°_Àngth
 = 0;

1078 
j
 = 0; j < 
£äum
; j++) {

1079 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1080 
	`lockDbRód
(
c
->
db
);

1081 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1082 i‡(!
£tobj
) {

1083 
	`u∆ockDb
(
c
->
db
);

1084 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_mis£s
,1);

1087 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1088 
	`u∆ockDb
(
c
->
db
);

1089 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

1093 i‡(
›
 =
SET_OP_DIFF
) {

1094 i‡(
j
 =0Ë
fú°_Àngth
 = 
	`£tTy≥Size
(
£tobj
);

1095 
Ægo_⁄e_w‹k
 +
fú°_Àngth
;

1096 
Ægo_two_w‹k
 +
	`£tTy≥Size
(
£tobj
);

1099 
	`u∆ockDb
(
c
->
db
);

1100 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

1112 i‡(
›
 =
SET_OP_DIFF
) {

1115 
Ægo_⁄e_w‹k
 /= 2;

1116 
diff_Ægo
 = (
Ægo_⁄e_w‹k
 <
Ægo_two_w‹k
) ? 1 : 2;

1122 
d°£t
 = 
	`¸óãI¡£tObje˘
();

1124 i‡(
›
 =
SET_OP_UNION
) {

1127 
j
 = 0; j < 
£äum
; j++) {

1128 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1129 
	`lockDbRód
(
c
->
db
);

1130 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1132 i‡(!
£tobj
) {

1133 
	`u∆ockDb
(
c
->
db
);

1136 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1137 
	`u∆ockDb
(
c
->
db
);

1138 
	`‰ìObje˘
(
d°£t
);

1142 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1143 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1144 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
++;

1145 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1146 
	`‰ìObje˘
(
ñe
);

1148 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1149 
	`u∆ockDb
(
c
->
db
);

1151 } i‡(
›
 =
SET_OP_DIFF
 && 
diff_Ægo
 == 1) {

1160 
robj
 *
fú°_£t
;

1162 
fú°_£t
 = 
	`¸óãI¡£tObje˘
();

1163 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[0]);

1164 
	`lockDbRód
(
c
->
db
);

1165 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[0]);

1166 i‡(!
£tobj
) {

1167 
	`u∆ockDb
(
c
->
db
);

1168 
	`‰ìObje˘
(
fú°_£t
);

1169 
d⁄e
;

1171 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1172 
	`u∆ockDb
(
c
->
db
);

1173 
	`‰ìObje˘
(
d°£t
);

1174 
	`‰ìObje˘
(
fú°_£t
);

1177 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1178 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1179 
	`£tTy≥Add
(
fú°_£t
,
ñe
);

1180 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1181 
	`‰ìObje˘
(
ñe
);

1183 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1184 
	`u∆ockDb
(
c
->
db
);

1186 
si
 = 
	`£tTy≥InôIãøt‹
(
fú°_£t
);

1187 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1188 
j
 = 1; j < 
£äum
; j++) {

1189 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1190 
	`lockDbRód
(
c
->
db
);

1191 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1192 i‡(!
£tobj
) {

1193 
	`u∆ockDb
(
c
->
db
);

1196 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1197 
	`u∆ockDb
(
c
->
db
);

1198 
	`‰ìObje˘
(
d°£t
);

1199 
	`‰ìObje˘
(
fú°_£t
);

1200 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1201 
	`‰ìObje˘
(
ñe
);

1202 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1205 i‡(
	`£tTy≥IsMembî
(
£tobj
,
ñe
)) {

1206 
	`u∆ockDb
(
c
->
db
);

1209 
	`u∆ockDb
(
c
->
db
);

1212 i‡(
j
 =
£äum
) {

1214 
	`£tTy≥Add
(
d°£t
,
ñe
);

1215 
ˇrdöÆôy
++;

1218 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1219 
	`‰ìObje˘
(
ñe
);

1221 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1222 
	`‰ìObje˘
(
fú°_£t
);

1223 } i‡(
›
 =
SET_OP_DIFF
 && 
diff_Ægo
 == 2) {

1231 
j
 = 0; j < 
£äum
; j++) {

1232 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[0]);

1233 
	`lockDbRód
(
c
->
db
);

1234 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[0]);

1235 i‡(!
£tobj
) {

1236 i‡(
j
 == 0) {

1237 
	`u∆ockDb
(
c
->
db
);

1238 
d⁄e
;

1241 
	`u∆ockDb
(
c
->
db
);

1244 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1245 
	`u∆ockDb
(
c
->
db
);

1246 
	`‰ìObje˘
(
d°£t
);

1250 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1251 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1252 i‡(
j
 == 0) {

1253 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
++;

1255 i‡(
	`£tTy≥Remove
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
--;

1257 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1258 
	`‰ìObje˘
(
ñe
);

1260 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1264 i‡(
ˇrdöÆôy
 == 0) {

1265 
	`u∆ockDb
(
c
->
db
);

1268 
	`u∆ockDb
(
c
->
db
);

1272 
d⁄e
:

1274 i‡(!
d°key
) {

1275 
	`addRïlyMu…iBulkLí
(
c
,
ˇrdöÆôy
);

1276 
si
 = 
	`£tTy≥InôIãøt‹
(
d°£t
);

1277 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1278 
	`addRïlyBulk
(
c
,
ñe
);

1279 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1280 
	`‰ìObje˘
(
ñe
);

1282 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1283 
	`‰ìObje˘
(
d°£t
);

1285 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

1286 
	`lockDbWrôe
(
c
->
db
);

1289 
dñëed
 = 
	`dbDñëe
(
c
->
db
,
d°key
);

1290 i‡(
	`£tTy≥Size
(
d°£t
) > 0) {

1291 
	`dbAdd
(
c
->
db
,
d°key
,
d°£t
);

1292 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
d°£t
));

1293 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,

1294 
›
 =
SET_OP_UNION
 ? "sunionstore" : "sdiffstore",

1295 
d°key
,
c
->
db
->
id
);

1297 
	`‰ìObje˘
(
d°£t
);

1298 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1299 i‡(
dñëed
)

1300 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

1301 
d°key
,
c
->
db
->
id
);

1303 
	`u∆ockDb
(
c
->
db
);

1304 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

1305 
c
->
vñ
->
dúty
++;

1307 
	}
}

1309 
	$suni⁄Comm™d
(
˛õ¡
 *
c
) {

1310 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
,
SET_OP_UNION
);

1311 
	}
}

1313 
	$suni⁄°‹eComm™d
(
˛õ¡
 *
c
) {

1314 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->¨gv[1],
SET_OP_UNION
);

1315 
	}
}

1317 
	$sdiffComm™d
(
˛õ¡
 *
c
) {

1318 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
,
SET_OP_DIFF
);

1319 
	}
}

1321 
	$sdiff°‹eComm™d
(
˛õ¡
 *
c
) {

1322 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->¨gv[1],
SET_OP_DIFF
);

1323 
	}
}

1325 
	$ssˇnComm™d
(
˛õ¡
 *
c
) {

1326 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_SET
);

1327 
	}
}

	@src/vr_t_set.c

1 
	~<vr_c‹e.h
>

7 
suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,

8 
robj
 *
d°key
, 
›
);

13 
robj
 *
	$£tTy≥Cª©e
(
robj
 *
vÆue
) {

14 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,
NULL
Ë=
VR_OK
)

15  
	`¸óãI¡£tObje˘
();

16  
	`¸óãSëObje˘
();

17 
	}
}

24 
	$£tTy≥Add
(
robj
 *
subje˘
,Ñobj *
vÆue
) {

25 
ŒvÆ
;

26 
robj
 *
obj
;

27 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

28 
obj
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

29 i‡(
	`di˘Add
(
subje˘
->
±r
,
obj
,
NULL
Ë=
DICT_OK
) {

32 
	`‰ìObje˘
(
obj
);

34 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

35 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

36 
uöt8_t
 
suc˚ss
 = 0;

37 
subje˘
->
±r
 = 
	`öt£tAdd
(subje˘->±r,
ŒvÆ
,&
suc˚ss
);

38 i‡(
suc˚ss
) {

41 i‡(
	`öt£tLí
(
subje˘
->
±r
Ë> 
£rvî
.
£t_max_öt£t_íåõs
)

42 
	`£tTy≥C⁄vît
(
subje˘
,
OBJ_ENCODING_HT
);

47 
	`£tTy≥C⁄vît
(
subje˘
,
OBJ_ENCODING_HT
);

48 
obj
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

51 
	`£rvîAs£πWôhInfo
(
NULL
,
obj
,

52 
	`di˘Add
(
subje˘
->
±r
,
obj
,
NULL
Ë=
DICT_OK
);

56 
	`£rvîP™ic
("Unknown setÉncoding");

59 
	}
}

61 
	$£tTy≥Remove
(
robj
 *
£tobj
,Ñobj *
vÆue
) {

62 
ŒvÆ
;

63 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

64 i‡(
	`di˘Dñëe
(
£tobj
->
±r
,
vÆue
Ë=
DICT_OK
) {

65 i‡(
	`htNìdsResize
(
£tobj
->
±r
)Ë
	`di˘Resize
(setobj->ptr);

68 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

69 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

70 
suc˚ss
;

71 
£tobj
->
±r
 = 
	`öt£tRemove
(£tobj->±r,
ŒvÆ
,&
suc˚ss
);

72 i‡(
suc˚ss
)  1;

75 
	`£rvîP™ic
("Unknown setÉncoding");

78 
	}
}

80 
	$£tTy≥IsMembî
(
robj
 *
subje˘
,Ñobj *
vÆue
) {

81 
ŒvÆ
;

82 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

83  
	`di˘Föd
((
di˘
*)
subje˘
->
±r
,
vÆue
Ë!
NULL
;

84 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

85 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

86  
	`öt£tFöd
((
öt£t
*)
subje˘
->
±r
,
ŒvÆ
);

89 
	`£rvîP™ic
("Unknown setÉncoding");

92 
	}
}

94 
£tTy≥Iãøt‹
 *
	$£tTy≥InôIãøt‹
(
robj
 *
subje˘
) {

95 
£tTy≥Iãøt‹
 *
si
 = 
	`dÆloc
((setTypeIterator));

96 
si
->
subje˘
 = subject;

97 
si
->
ícodög
 = 
subje˘
->encoding;

98 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
) {

99 
si
->
di
 = 
	`di˘GëIãøt‹
(
subje˘
->
±r
);

100 } i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

101 
si
->
ii
 = 0;

103 
	`£rvîP™ic
("Unknown setÉncoding");

105  
si
;

106 
	}
}

108 
	$£tTy≥Rñó£Iãøt‹
(
£tTy≥Iãøt‹
 *
si
) {

109 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
)

110 
	`di˘Rñó£Iãøt‹
(
si
->
di
);

111 
	`d‰ì
(
si
);

112 
	}
}

129 
	$£tTy≥Next
(
£tTy≥Iãøt‹
 *
si
, 
robj
 **
objñe
, 
öt64_t
 *
Œñe
) {

130 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
) {

131 
di˘E¡ry
 *
de
 = 
	`di˘Next
(
si
->
di
);

132 i‡(
de
 =
NULL
)  -1;

133 *
objñe
 = 
	`di˘GëKey
(
de
);

134 *
Œñe
 = -123456789;

135 } i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

136 i‡(!
	`öt£tGë
(
si
->
subje˘
->
±r
,si->
ii
++,
Œñe
))

138 *
objñe
 = 
NULL
;

140 
	`£rvîP™ic
("Wrong setÉncoding in setTypeNext");

142  
si
->
ícodög
;

143 
	}
}

153 
robj
 *
	$£tTy≥NextObje˘
(
£tTy≥Iãøt‹
 *
si
) {

154 
öt64_t
 
öãÀ
;

155 
robj
 *
objñe
;

156 
ícodög
;

158 
ícodög
 = 
	`£tTy≥Next
(
si
,&
objñe
,&
öãÀ
);

159 
ícodög
) {

160 -1:  
NULL
;

161 
OBJ_ENCODING_INTSET
:

162  
	`¸óãSåögObje˘FromL⁄gL⁄g
(
öãÀ
);

163 
OBJ_ENCODING_HT
:

164  
objñe
;

166 
	`£rvîP™ic
("UnsupportedÉncoding");

168  
NULL
;

169 
	}
}

188 
	$£tTy≥R™domEÀmít
(
robj
 *
£tobj
,Ñobj **
objñe
, 
öt64_t
 *
Œñe
) {

189 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

190 
di˘E¡ry
 *
de
 = 
	`di˘GëR™domKey
(
£tobj
->
±r
);

191 *
objñe
 = 
	`di˘GëKey
(
de
);

192 *
Œñe
 = -123456789;

193 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

194 *
Œñe
 = 
	`öt£tR™dom
(
£tobj
->
±r
);

195 *
objñe
 = 
NULL
;

197 
	`£rvîP™ic
("Unknown setÉncoding");

199  
£tobj
->
ícodög
;

200 
	}
}

202 
	$£tTy≥Size
(
robj
 *
subje˘
) {

203 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

204  
	`di˘Size
((
di˘
*)
subje˘
->
±r
);

205 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

206  
	`öt£tLí
((
öt£t
*)
subje˘
->
±r
);

208 
	`£rvîP™ic
("Unknown setÉncoding");

210 
	}
}

215 
	$£tTy≥C⁄vît
(
robj
 *
£tobj
, 
íc
) {

216 
£tTy≥Iãøt‹
 *
si
;

217 
	`£rvîAs£πWôhInfo
(
NULL
,
£tobj
,£tobj->
ty≥
 =
OBJ_SET
 &&

218 
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
);

220 i‡(
íc
 =
OBJ_ENCODING_HT
) {

221 
öt64_t
 
öãÀ
;

222 
di˘
 *
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

223 
robj
 *
ñemít
;

226 
	`di˘Ex∑nd
(
d
,
	`öt£tLí
(
£tobj
->
±r
));

229 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

230 
	`£tTy≥Next
(
si
,&
ñemít
,&
öãÀ
) != -1) {

231 
ñemít
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
öãÀ
);

232 
	`£rvîAs£πWôhInfo
(
NULL
,
ñemít
,

233 
	`di˘Add
(
d
,
ñemít
,
NULL
Ë=
DICT_OK
);

235 
	`£tTy≥Rñó£Iãøt‹
(
si
);

237 
£tobj
->
ícodög
 = 
OBJ_ENCODING_HT
;

238 
	`d‰ì
(
£tobj
->
±r
);

239 
£tobj
->
±r
 = 
d
;

241 
	`£rvîP™ic
("Unsupported set conversion");

243 
	}
}

245 
	$ßddComm™d
(
˛õ¡
 *
c
) {

246 
robj
 *
£t
;

247 
j
, 
added
 = 0;

248 
expúed
 = 0;

250 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

251 
	`lockDbWrôe
(
c
->
db
);

252 
£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

253 i‡(
£t
 =
NULL
) {

254 
£t
 = 
	`£tTy≥Cª©e
(
c
->
¨gv
[2]);

255 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
£t
);

257 i‡(
£t
->
ty≥
 !
OBJ_SET
) {

258 
	`u∆ockDb
(
c
->
db
);

259 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

260 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

265 
j
 = 2; j < 
c
->
¨gc
; j++) {

266 
c
->
¨gv
[
j
] = 
	`åyObje˘Encodög
(c->argv[j]);

267 i‡(
	`£tTy≥Add
(
£t
,
c
->
¨gv
[
j
])Ë
added
++;

269 i‡(
added
) {

270 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

271 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"ßdd",
c
->
¨gv
[1],c->
db
->
id
);

273 
c
->
vñ
->
dúty
 +
added
;

274 
	`addRïlyL⁄gL⁄g
(
c
,
added
);

275 
	`u∆ockDb
(
c
->
db
);

276 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

277 
	}
}

279 
	$§emComm™d
(
˛õ¡
 *
c
) {

280 
robj
 *
£t
;

281 
j
, 
dñëed
 = 0, 
keyªmoved
 = 0;

282 
expúed
 = 0;

284 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

285 
	`lockDbWrôe
(
c
->
db
);

286 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

287 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

288 
	`u∆ockDb
(
c
->
db
);

289 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

293 
j
 = 2; j < 
c
->
¨gc
; j++) {

294 i‡(
	`£tTy≥Remove
(
£t
,
c
->
¨gv
[
j
])) {

295 
dñëed
++;

296 i‡(
	`£tTy≥Size
(
£t
) == 0) {

297 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

298 
keyªmoved
 = 1;

303 i‡(
dñëed
) {

304 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

305 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"§em",
c
->
¨gv
[1],c->
db
->
id
);

306 i‡(
keyªmoved
)

307 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],

308 
c
->
db
->
id
);

309 
c
->
vñ
->
dúty
 +
dñëed
;

311 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

312 
	`u∆ockDb
(
c
->
db
);

313 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

314 
	}
}

316 
	$smoveComm™d
(
˛õ¡
 *
c
) {

317 
robj
 *
§c£t
, *
d°£t
, *
ñe
;

318 
§c£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

319 
d°£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

320 
ñe
 = 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

323 i‡(
§c£t
 =
NULL
) {

324 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

330 i‡(
	`checkTy≥
(
c
,
§c£t
,
OBJ_SET
) ||

331 (
d°£t
 && 
	`checkTy≥
(
c
,d°£t,
OBJ_SET
))) ;

334 i‡(
§c£t
 =
d°£t
) {

335 
	`addRïly
(
c
,
	`£tTy≥IsMembî
(
§c£t
,
ñe
Ë? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

340 i‡(!
	`£tTy≥Remove
(
§c£t
,
ñe
)) {

341 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

344 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"§em",
c
->
¨gv
[1],c->
db
->
id
);

347 i‡(
	`£tTy≥Size
(
§c£t
) == 0) {

348 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

349 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

351 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

352 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[2]);

353 
£rvî
.
dúty
++;

356 i‡(!
d°£t
) {

357 
d°£t
 = 
	`£tTy≥Cª©e
(
ñe
);

358 
	`dbAdd
(
c
->
db
,c->
¨gv
[2],
d°£t
);

362 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)) {

363 
£rvî
.
dúty
++;

364 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"ßdd",
c
->
¨gv
[2],c->
db
->
id
);

366 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

367 
	}
}

369 
	$sismembîComm™d
(
˛õ¡
 *
c
) {

370 
robj
 *
£t
;

372 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

373 
	`lockDbRód
(
c
->
db
);

374 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

375 
	`u∆ockDb
(
c
->
db
);

376 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

378 } i‡(
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

379 
	`u∆ockDb
(
c
->
db
);

380 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

384 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

385 i‡(
	`£tTy≥IsMembî
(
£t
,
c
->
¨gv
[2]))

386 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

388 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

390 
	`u∆ockDb
(
c
->
db
);

391 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

392 
	}
}

394 
	$sˇrdComm™d
(
˛õ¡
 *
c
) {

395 
robj
 *
o
;

397 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

398 
	`lockDbRód
(
c
->
db
);

399 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

400 
	`u∆ockDb
(
c
->
db
);

401 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

403 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_SET
)) {

404 
	`u∆ockDb
(
c
->
db
);

405 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

409 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
o
));

410 
	`u∆ockDb
(
c
->
db
);

411 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

412 
	}
}

414 
	$smembîsGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
£t
)

416 
£tTy≥Iãøt‹
 *
si
;

417 
robj
 *
ñeobj
;

418 
öt64_t
 
ötobj
;

419 
ícodög
;

421 
	`addRïlyMu…iBulkLí
(
c
, 
	`£tTy≥Size
(
£t
));

422 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

423 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñeobj
,&
ötobj
)) != -1) {

424 i‡(
ícodög
 =
OBJ_ENCODING_HT
) {

425 
	`addRïlyBulk
(
c
, 
ñeobj
);

426 } i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

427 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
ötobj
);

430 
	`£tTy≥Rñó£Iãøt‹
(
si
);

431 
	}
}

439 
	#SPOP_MOVE_STRATEGY_MUL
 5

	)

441 
	$•›WôhCou¡Comm™d
(
˛õ¡
 *
c
) {

442 
l
;

443 
cou¡
, 
size
;

444 
robj
 *
£t
;

445 
expúed
 = 0;

448 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
l
,
NULL
Ë!
VR_OK
) ;

449 i‡(
l
 >= 0) {

450 
cou¡
 = (Ë
l
;

452 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

456 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

457 
	`lockDbWrôe
(
c
->
db
);

460 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
,&
expúed
))

461 =
NULL
 || 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

462 
	`u∆ockDb
(
c
->
db
);

463 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

469 i‡(
cou¡
 == 0) {

470 
	`u∆ockDb
(
c
->
db
);

471 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

472 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

476 
size
 = 
	`£tTy≥Size
(
£t
);

479 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"•›",
c
->
¨gv
[1],c->
db
->
id
);

480 
c
->
vñ
->
dúty
 +
cou¡
;

485 i‡(
cou¡
 >
size
) {

486 
robj
 *
aux
;

489 
	`smembîsGíîicComm™d
(
c
, 
£t
);

492 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

493 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

496 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
c
->
¨gv
[1]);

497 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,
sh¨ed
.
dñ
,
aux
);

498 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

499 
c
->
vñ
->
dúty
++;

500 
	`u∆ockDb
(
c
->
db
);

501 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

508 
robj
 *
¥›¨gv
[3];

509 
¥›¨gv
[0] = 
	`¸óãSåögObje˘
("SREM",4);

510 
¥›¨gv
[1] = 
c
->
¨gv
[1];

511 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

514 
robj
 *
objñe
;

515 
ícodög
;

516 
öt64_t
 
Œñe
;

517 
ªmaöög
 = 
size
-
cou¡
;

526 i‡(
ªmaöög
*
SPOP_MOVE_STRATEGY_MUL
 > 
cou¡
) {

527 
cou¡
--) {

528 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
objñe
,&
Œñe
);

529 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

530 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

532 
objñe
 = 
	`dupSåögObje˘Unc⁄°™t
(objele);

536 
	`addRïlyBulk
(
c
,
objñe
);

537 
	`£tTy≥Remove
(
£t
,
objñe
);

540 
¥›¨gv
[2] = 
objñe
;

541 
	`ÆsoPr›ag©e
(
£rvî
.
§emComm™d
,
c
->
db
->
id
,
¥›¨gv
,3,

542 
PROPAGATE_AOF
|
PROPAGATE_REPL
);

543 
	`‰ìObje˘
(
objñe
);

554 
robj
 *
√w£t
 = 
NULL
;

557 
ªmaöög
--) {

558 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
objñe
,&
Œñe
);

559 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

560 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

562 i‡(!
√w£t
Ë√w£à
	`£tTy≥Cª©e
(
objñe
);

563 
	`£tTy≥Add
(
√w£t
,
objñe
);

564 
	`£tTy≥Remove
(
£t
,
objñe
);

565 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

566 
	`‰ìObje˘
(
objñe
);

570 
£tTy≥Iãøt‹
 *
si
;

571 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

572 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
objñe
,&
Œñe
)) != -1) {

573 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

574 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

575 
	`addRïlyBulk
(
c
,
objñe
);

578 
¥›¨gv
[2] = 
objñe
;

579 
	`ÆsoPr›ag©e
(
£rvî
.
§emComm™d
,
c
->
db
->
id
,
¥›¨gv
,3,

580 
PROPAGATE_AOF
|
PROPAGATE_REPL
);

581 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

582 
	`‰ìObje˘
(
objñe
);

584 
	`£tTy≥Rñó£Iãøt‹
(
si
);

587 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w£t
);

594 
	`‰ìObje˘
(
¥›¨gv
[0]);

595 
	`¥evítComm™dPr›ag©i⁄
(
c
);

596 
	`u∆ockDb
(
c
->
db
);

597 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

598 
	}
}

600 
	$•›Comm™d
(
˛õ¡
 *
c
) {

601 
robj
 *
£t
, *
ñe
, *
aux1
, *
aux2
;

602 
öt64_t
 
Œñe
;

603 
ícodög
;

604 
expúed
 = 0;

606 i‡(
c
->
¨gc
 == 3) {

607 
	`•›WôhCou¡Comm™d
(
c
);

609 } i‡(
c
->
¨gc
 > 3) {

610 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

614 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

615 
	`lockDbWrôe
(
c
->
db
);

618 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,&
expúed
)Ë=
NULL
 ||

619 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

620 
	`u∆ockDb
(
c
->
db
);

621 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

626 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

629 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

630 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

631 
£t
->
±r
 = 
	`öt£tRemove
(£t->±r,
Œñe
,
NULL
);

633 
ñe
 = 
	`dupSåögObje˘Unc⁄°™t
(ele);

634 
	`£tTy≥Remove
(
£t
,
ñe
);

637 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"•›",
c
->
¨gv
[1],c->
db
->
id
);

640 
aux1
 = 
	`¸óãSåögObje˘
("SREM",4);

641 
aux2
 = 
	`dupSåögObje˘Unc⁄°™t
(
c
->
¨gv
[1]);

642 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,3,
aux1
,
aux2
,
ñe
);

645 
	`addRïlyBulk
(
c
,
ñe
);

648 i‡(
	`£tTy≥Size
(
£t
) == 0) {

649 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

650 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

654 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

655 
c
->
vñ
->
dúty
++;

656 
	`u∆ockDb
(
c
->
db
);

657 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

658 
	}
}

666 
	#SRANDMEMBER_SUB_STRATEGY_MUL
 3

	)

668 
	$§™dmembîWôhCou¡Comm™d
(
˛õ¡
 *
c
) {

669 
l
;

670 
cou¡
, 
size
;

671 
uniq
 = 1;

672 
robj
 *
£t
, *
ñe
;

673 
öt64_t
 
Œñe
;

674 
ícodög
;

676 
di˘
 *
d
;

678 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
l
,
NULL
Ë!
VR_OK
) ;

679 i‡(
l
 >= 0) {

680 
cou¡
 = (Ë
l
;

684 
cou¡
 = -
l
;

685 
uniq
 = 0;

688 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
))

689 =
NULL
 || 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) ;

690 
size
 = 
	`£tTy≥Size
(
£t
);

693 i‡(
cou¡
 == 0) {

694 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

702 i‡(!
uniq
) {

703 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

704 
cou¡
--) {

705 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

706 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

707 
	`addRïlyBulkL⁄gL⁄g
(
c
,
Œñe
);

709 
	`addRïlyBulk
(
c
,
ñe
);

718 i‡(
cou¡
 >
size
) {

720 
	`smembîsGíîicComm™d
(
c
, 
£t
);

725 
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

736 i‡(
cou¡
*
SRANDMEMBER_SUB_STRATEGY_MUL
 > 
size
) {

737 
£tTy≥Iãøt‹
 *
si
;

740 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

741 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñe
,&
Œñe
)) != -1) {

742 
ªtvÆ
 = 
DICT_ERR
;

744 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

745 
ªtvÆ
 = 
	`di˘Add
(
d
,
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
),
NULL
);

747 
ªtvÆ
 = 
	`di˘Add
(
d
,
	`dupSåögObje˘
(
ñe
),
NULL
);

749 
	`ASSERT
(
ªtvÆ
 =
DICT_OK
);

751 
	`£tTy≥Rñó£Iãøt‹
(
si
);

752 
	`ASSERT
(
	`di˘Size
(
d
Ë=
size
);

755 
size
 > 
cou¡
) {

756 
di˘E¡ry
 *
de
;

758 
de
 = 
	`di˘GëR™domKey
(
d
);

759 
	`di˘Dñëe
(
d
,
	`di˘GëKey
(
de
));

760 
size
--;

769 
added
 = 0;

771 
added
 < 
cou¡
) {

772 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

773 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

774 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

776 
ñe
 = 
	`dupSåögObje˘
(ele);

781 i‡(
	`di˘Add
(
d
,
ñe
,
NULL
Ë=
DICT_OK
)

782 
added
++;

784 
	`de¸RefCou¡
(
ñe
);

790 
di˘Iãøt‹
 *
di
;

791 
di˘E¡ry
 *
de
;

793 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

794 
di
 = 
	`di˘GëIãøt‹
(
d
);

795 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
)

796 
	`addRïlyBulk
(
c
,
	`di˘GëKey
(
de
));

797 
	`di˘Rñó£Iãøt‹
(
di
);

798 
	`di˘Rñó£
(
d
);

800 
	}
}

802 
	$§™dmembîComm™d
(
˛õ¡
 *
c
) {

803 
robj
 *
£t
, *
ñe
;

804 
öt64_t
 
Œñe
;

805 
ícodög
;

807 i‡(
c
->
¨gc
 == 3) {

808 
	`§™dmembîWôhCou¡Comm™d
(
c
);

810 } i‡(
c
->
¨gc
 > 3) {

811 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

815 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
 ||

816 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) ;

818 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

819 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

820 
	`addRïlyBulkL⁄gL⁄g
(
c
,
Œñe
);

822 
	`addRïlyBulk
(
c
,
ñe
);

824 
	}
}

826 
	$smembîsComm™d
(
˛õ¡
 *
c
) {

827 
robj
 *
£t
;

829 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

830 
	`lockDbRód
(
c
->
db
);

831 
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
);

832 i‡(
£t
 =
NULL
) {

833 
	`u∆ockDb
(
c
->
db
);

834 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

836 } if(
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

837 
	`u∆ockDb
(
c
->
db
);

838 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

842 
	`smembîsGíîicComm™d
(
c
, 
£t
);

843 
	`u∆ockDb
(
c
->
db
);

844 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

845 
	}
}

847 
	$qs‹tCom∑ªSësByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

848  
	`£tTy≥Size
(*(
robj
**)
s1
)-£tTy≥Size(*‘obj**)
s2
);

849 
	}
}

853 
	$qs‹tCom∑ªSësByRevC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

854 
robj
 *
o1
 = *‘obj**)
s1
, *
o2
 = *‘obj**)
s2
;

856  (
o2
 ? 
	`£tTy≥Size
(o2Ë: 0Ë- (
o1
 ? setTypeSize(o1) : 0);

857 
	}
}

859 
	$söãrGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
,

860 
£äum
, 
robj
 *
d°key
) {

861 
£tTy≥Iãøt‹
 *
si
;

862 
robj
 *
ñeobj
, *
d°£t
 = 
NULL
;

863 
öt64_t
 
ötobj
;

864 
j
, 
ˇrdöÆôy
 = 0;

865 
ícodög
;

866 
robj
 *
£tobj
, *
mö_Àn_£t
;

867 
mö_Àn
 = -1;

868 
mö_Àn_idx
 = 0;

870 
j
 = 0; j < 
£äum
; j++) {

871 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

872 
	`lockDbRód
(
c
->
db
);

873 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

874 i‡(!
£tobj
) {

875 
	`u∆ockDb
(
c
->
db
);

876 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_mis£s
,1);

877 i‡(
d°key
) {

878 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

879 
	`lockDbWrôe
(
c
->
db
);

880 i‡(
	`dbDñëe
(
c
->
db
,
d°key
)) {

881 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

882 
c
->
vñ
->
dúty
++;

884 
	`u∆ockDb
(
c
->
db
);

885 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

887 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

891 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

892 
	`u∆ockDb
(
c
->
db
);

893 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

897 i‡(
mö_Àn
 =-1 || 
	`£tTy≥Size
(
£tobj
) < min_len) {

898 
mö_Àn
 = 
	`£tTy≥Size
(
£tobj
);

899 
mö_Àn_idx
 = 
j
;

902 
	`u∆ockDb
(
c
->
db
);

903 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

906 
mö_Àn_£t
 = 
	`¸óãI¡£tObje˘
();

907 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
mö_Àn_idx
]);

908 
	`lockDbRód
(
c
->
db
);

909 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
mö_Àn_idx
]);

910 i‡(!
£tobj
) {

911 
	`u∆ockDb
(
c
->
db
);

912 
	`‰ìObje˘
(
mö_Àn_£t
);

913 
d⁄e
;

915 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

916 
	`u∆ockDb
(
c
->
db
);

917 
	`‰ìObje˘
(
mö_Àn_£t
);

920 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

921 (
ñeobj
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

922 
	`£tTy≥Add
(
mö_Àn_£t
,
ñeobj
);

923 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

924 
	`‰ìObje˘
(
ñeobj
);

926 
	`£tTy≥Rñó£Iãøt‹
(
si
);

927 
	`u∆ockDb
(
c
->
db
);

929 
d°£t
 = 
	`¸óãI¡£tObje˘
();

934 
si
 = 
	`£tTy≥InôIãøt‹
(
mö_Àn_£t
);

935 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñeobj
,&
ötobj
)) != -1) {

936 
j
 = 0; j < 
£äum
; j++) {

937 i‡(
j
 =
mö_Àn_idx
) ;

938 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

939 
	`lockDbRód
(
c
->
db
);

940 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

941 i‡(!
£tobj
) {

942 
	`u∆ockDb
(
c
->
db
);

943 
	`‰ìObje˘
(
mö_Àn_£t
);

944 i‡(
d°£t
) {

945 
	`‰ìObje˘
(
d°£t
);

946 
d°£t
 = 
NULL
;

948 
	`£tTy≥Rñó£Iãøt‹
(
si
);

949 
d⁄e
;

951 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

952 
	`u∆ockDb
(
c
->
db
);

953 
	`‰ìObje˘
(
mö_Àn_£t
);

954 i‡(
d°£t
) {

955 
	`‰ìObje˘
(
d°£t
);

956 
d°£t
 = 
NULL
;

958 
	`£tTy≥Rñó£Iãøt‹
(
si
);

962 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

964 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
 &&

965 !
	`öt£tFöd
((
öt£t
*)
£tobj
->
±r
,
ötobj
))

967 
	`u∆ockDb
(
c
->
db
);

972 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

973 
ñeobj
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
ötobj
);

974 i‡(!
	`£tTy≥IsMembî
(
£tobj
,
ñeobj
)) {

975 
	`u∆ockDb
(
c
->
db
);

976 
	`‰ìObje˘
(
ñeobj
);

979 
	`‰ìObje˘
(
ñeobj
);

981 } i‡(
ícodög
 =
OBJ_ENCODING_HT
) {

985 i‡(
ñeobj
->
ícodög
 =
OBJ_ENCODING_INT
 &&

986 
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
 &&

987 !
	`öt£tFöd
((
öt£t
*)
£tobj
->
±r
,()
ñeobj
->ptr))

989 
	`u∆ockDb
(
c
->
db
);

993 } i‡(!
	`£tTy≥IsMembî
(
£tobj
,
ñeobj
)) {

994 
	`u∆ockDb
(
c
->
db
);

998 
	`u∆ockDb
(
c
->
db
);

1002 i‡(
j
 =
£äum
) {

1003 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

1004 
ñeobj
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
ötobj
);

1005 
	`£tTy≥Add
(
d°£t
,
ñeobj
);

1006 
	`‰ìObje˘
(
ñeobj
);

1008 
	`£tTy≥Add
(
d°£t
,
ñeobj
);

1010 
ˇrdöÆôy
 ++;

1013 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1014 
	`‰ìObje˘
(
mö_Àn_£t
);

1016 
d⁄e
:

1017 i‡(
d°key
) {

1018 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

1019 
	`lockDbWrôe
(
c
->
db
);

1022 
dñëed
 = 
	`dbDñëe
(
c
->
db
,
d°key
);

1023 i‡(
d°£t
 && 
	`£tTy≥Size
(dstset) > 0) {

1024 
	`dbAdd
(
c
->
db
,
d°key
,
d°£t
);

1025 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
d°£t
));

1026 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"sinterstore",

1027 
d°key
,
c
->
db
->
id
);

1029 i‡(
d°£t
) {

1030 
	`‰ìObje˘
(
d°£t
);

1031 
d°£t
 = 
NULL
;

1033 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1034 i‡(
dñëed
)

1035 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

1036 
d°key
,
c
->
db
->
id
);

1038 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

1039 
	`u∆ockDb
(
c
->
db
);

1040 
c
->
vñ
->
dúty
++;

1042 
	`addRïlyMu…iBulkLí
(
c
,
ˇrdöÆôy
);

1043 i‡(
d°£t
 && 
	`£tTy≥Size
(dstset) > 0) {

1044 
si
 = 
	`£tTy≥InôIãøt‹
(
d°£t
);

1045 (
ñeobj
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1046 
	`addRïlyBulk
(
c
,
ñeobj
);

1047 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1048 
	`‰ìObje˘
(
ñeobj
);

1050 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1052 i‡(
d°£t
Ë
	`‰ìObje˘
(dstset);

1054 
	}
}

1056 
	$söãrComm™d
(
˛õ¡
 *
c
) {

1057 
	`söãrGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
);

1058 
	}
}

1060 
	$söãr°‹eComm™d
(
˛õ¡
 *
c
) {

1061 
	`söãrGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->argv[1]);

1062 
	}
}

1064 
	#SET_OP_UNION
 0

	)

1065 
	#SET_OP_DIFF
 1

	)

1066 
	#SET_OP_INTER
 2

	)

1068 
	$suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,

1069 
robj
 *
d°key
, 
›
) {

1070 
£tTy≥Iãøt‹
 *
si
;

1071 
robj
 *
ñe
, *
d°£t
 = 
NULL
;

1072 
j
, 
ˇrdöÆôy
 = 0;

1073 
diff_Ægo
 = 1;

1074 
robj
 *
£tobj
;

1075 
Ægo_⁄e_w‹k
 = 0, 
Ægo_two_w‹k
 = 0;

1076 
fú°_Àngth
 = 0;

1078 
j
 = 0; j < 
£äum
; j++) {

1079 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1080 
	`lockDbRód
(
c
->
db
);

1081 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1082 i‡(!
£tobj
) {

1083 
	`u∆ockDb
(
c
->
db
);

1084 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_mis£s
,1);

1087 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1088 
	`u∆ockDb
(
c
->
db
);

1089 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

1093 i‡(
›
 =
SET_OP_DIFF
) {

1094 i‡(
j
 =0Ë
fú°_Àngth
 = 
	`£tTy≥Size
(
£tobj
);

1095 
Ægo_⁄e_w‹k
 +
fú°_Àngth
;

1096 
Ægo_two_w‹k
 +
	`£tTy≥Size
(
£tobj
);

1099 
	`u∆ockDb
(
c
->
db
);

1100 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

1112 i‡(
›
 =
SET_OP_DIFF
) {

1115 
Ægo_⁄e_w‹k
 /= 2;

1116 
diff_Ægo
 = (
Ægo_⁄e_w‹k
 <
Ægo_two_w‹k
) ? 1 : 2;

1122 
d°£t
 = 
	`¸óãI¡£tObje˘
();

1124 i‡(
›
 =
SET_OP_UNION
) {

1127 
j
 = 0; j < 
£äum
; j++) {

1128 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1129 
	`lockDbRód
(
c
->
db
);

1130 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1132 i‡(!
£tobj
) {

1133 
	`u∆ockDb
(
c
->
db
);

1136 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1137 
	`u∆ockDb
(
c
->
db
);

1138 
	`‰ìObje˘
(
d°£t
);

1142 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1143 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1144 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
++;

1145 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1146 
	`‰ìObje˘
(
ñe
);

1148 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1149 
	`u∆ockDb
(
c
->
db
);

1151 } i‡(
›
 =
SET_OP_DIFF
 && 
diff_Ægo
 == 1) {

1160 
robj
 *
fú°_£t
;

1162 
fú°_£t
 = 
	`¸óãI¡£tObje˘
();

1163 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[0]);

1164 
	`lockDbRód
(
c
->
db
);

1165 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[0]);

1166 i‡(!
£tobj
) {

1167 
	`u∆ockDb
(
c
->
db
);

1168 
	`‰ìObje˘
(
fú°_£t
);

1169 
d⁄e
;

1171 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1172 
	`u∆ockDb
(
c
->
db
);

1173 
	`‰ìObje˘
(
d°£t
);

1174 
	`‰ìObje˘
(
fú°_£t
);

1177 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1178 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1179 
	`£tTy≥Add
(
fú°_£t
,
ñe
);

1180 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1181 
	`‰ìObje˘
(
ñe
);

1183 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1184 
	`u∆ockDb
(
c
->
db
);

1186 
si
 = 
	`£tTy≥InôIãøt‹
(
fú°_£t
);

1187 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1188 
j
 = 1; j < 
£äum
; j++) {

1189 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1190 
	`lockDbRód
(
c
->
db
);

1191 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1192 i‡(!
£tobj
) {

1193 
	`u∆ockDb
(
c
->
db
);

1196 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1197 
	`u∆ockDb
(
c
->
db
);

1198 
	`‰ìObje˘
(
d°£t
);

1199 
	`‰ìObje˘
(
fú°_£t
);

1200 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1201 
	`‰ìObje˘
(
ñe
);

1202 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1205 i‡(
	`£tTy≥IsMembî
(
£tobj
,
ñe
)) {

1206 
	`u∆ockDb
(
c
->
db
);

1209 
	`u∆ockDb
(
c
->
db
);

1212 i‡(
j
 =
£äum
) {

1214 
	`£tTy≥Add
(
d°£t
,
ñe
);

1215 
ˇrdöÆôy
++;

1218 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1219 
	`‰ìObje˘
(
ñe
);

1221 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1222 
	`‰ìObje˘
(
fú°_£t
);

1223 } i‡(
›
 =
SET_OP_DIFF
 && 
diff_Ægo
 == 2) {

1231 
j
 = 0; j < 
£äum
; j++) {

1232 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[0]);

1233 
	`lockDbRód
(
c
->
db
);

1234 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[0]);

1235 i‡(!
£tobj
) {

1236 i‡(
j
 == 0) {

1237 
	`u∆ockDb
(
c
->
db
);

1238 
d⁄e
;

1241 
	`u∆ockDb
(
c
->
db
);

1244 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1245 
	`u∆ockDb
(
c
->
db
);

1246 
	`‰ìObje˘
(
d°£t
);

1250 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1251 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1252 i‡(
j
 == 0) {

1253 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
++;

1255 i‡(
	`£tTy≥Remove
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
--;

1257 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1258 
	`‰ìObje˘
(
ñe
);

1260 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1264 i‡(
ˇrdöÆôy
 == 0) {

1265 
	`u∆ockDb
(
c
->
db
);

1268 
	`u∆ockDb
(
c
->
db
);

1272 
d⁄e
:

1274 i‡(!
d°key
) {

1275 
	`addRïlyMu…iBulkLí
(
c
,
ˇrdöÆôy
);

1276 
si
 = 
	`£tTy≥InôIãøt‹
(
d°£t
);

1277 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1278 
	`addRïlyBulk
(
c
,
ñe
);

1279 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1280 
	`‰ìObje˘
(
ñe
);

1282 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1283 
	`‰ìObje˘
(
d°£t
);

1285 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

1286 
	`lockDbWrôe
(
c
->
db
);

1289 
dñëed
 = 
	`dbDñëe
(
c
->
db
,
d°key
);

1290 i‡(
	`£tTy≥Size
(
d°£t
) > 0) {

1291 
	`dbAdd
(
c
->
db
,
d°key
,
d°£t
);

1292 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
d°£t
));

1293 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,

1294 
›
 =
SET_OP_UNION
 ? "sunionstore" : "sdiffstore",

1295 
d°key
,
c
->
db
->
id
);

1297 
	`‰ìObje˘
(
d°£t
);

1298 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1299 i‡(
dñëed
)

1300 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

1301 
d°key
,
c
->
db
->
id
);

1303 
	`u∆ockDb
(
c
->
db
);

1304 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

1305 
c
->
vñ
->
dúty
++;

1307 
	}
}

1309 
	$suni⁄Comm™d
(
˛õ¡
 *
c
) {

1310 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
,
SET_OP_UNION
);

1311 
	}
}

1313 
	$suni⁄°‹eComm™d
(
˛õ¡
 *
c
) {

1314 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->¨gv[1],
SET_OP_UNION
);

1315 
	}
}

1317 
	$sdiffComm™d
(
˛õ¡
 *
c
) {

1318 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
,
SET_OP_DIFF
);

1319 
	}
}

1321 
	$sdiff°‹eComm™d
(
˛õ¡
 *
c
) {

1322 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->¨gv[1],
SET_OP_DIFF
);

1323 
	}
}

1325 
	$ssˇnComm™d
(
˛õ¡
 *
c
) {

1326 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_SET
);

1327 
	}
}

	@src/vr_t_set.h

1 #i‚de‡
_VR_T_SET_H_


2 
	#_VR_T_SET_H_


	)

4 
robj
 *
£tTy≥Cª©e
‘obj *
vÆue
);

5 
£tTy≥Add
(
robj
 *
subje˘
,Ñobj *
vÆue
);

6 
£tTy≥Remove
(
robj
 *
£tobj
,Ñobj *
vÆue
);

7 
£tTy≥IsMembî
(
robj
 *
subje˘
,Ñobj *
vÆue
);

8 
£tTy≥Iãøt‹
 *
£tTy≥InôIãøt‹
(
robj
 *
subje˘
);

9 
£tTy≥Rñó£Iãøt‹
(
£tTy≥Iãøt‹
 *
si
);

10 
£tTy≥Next
(
£tTy≥Iãøt‹
 *
si
, 
robj
 **
objñe
, 
öt64_t
 *
Œñe
);

11 
robj
 *
£tTy≥NextObje˘
(
£tTy≥Iãøt‹
 *
si
);

12 
£tTy≥R™domEÀmít
(
robj
 *
£tobj
,Ñobj **
objñe
, 
öt64_t
 *
Œñe
);

14 
£tTy≥Size
(
robj
 *
subje˘
);

15 
£tTy≥C⁄vît
(
robj
 *
£tobj
, 
íc
);

16 
ßddComm™d
(
˛õ¡
 *
c
);

17 
§emComm™d
(
˛õ¡
 *
c
);

18 
smoveComm™d
(
˛õ¡
 *
c
);

19 
sismembîComm™d
(
˛õ¡
 *
c
);

20 
sˇrdComm™d
(
˛õ¡
 *
c
);

21 
•›WôhCou¡Comm™d
(
˛õ¡
 *
c
);

22 
•›Comm™d
(
˛õ¡
 *
c
);

23 
§™dmembîWôhCou¡Comm™d
(
˛õ¡
 *
c
);

24 
§™dmembîComm™d
(
˛õ¡
 *
c
);

25 
smembîsComm™d
(
˛õ¡
 *
c
);

26 
qs‹tCom∑ªSësByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

27 
qs‹tCom∑ªSësByRevC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

28 
söãrGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,Ñobj *
d°key
);

29 
söãrComm™d
(
˛õ¡
 *
c
);

30 
söãr°‹eComm™d
(
˛õ¡
 *
c
);

31 
suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,Ñobj *
d°key
, 
›
);

32 
suni⁄Comm™d
(
˛õ¡
 *
c
);

33 
suni⁄°‹eComm™d
(
˛õ¡
 *
c
);

34 
sdiffComm™d
(
˛õ¡
 *
c
);

35 
sdiff°‹eComm™d
(
˛õ¡
 *
c
);

36 
ssˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_set.h

1 #i‚de‡
_VR_T_SET_H_


2 
	#_VR_T_SET_H_


	)

4 
robj
 *
£tTy≥Cª©e
‘obj *
vÆue
);

5 
£tTy≥Add
(
robj
 *
subje˘
,Ñobj *
vÆue
);

6 
£tTy≥Remove
(
robj
 *
£tobj
,Ñobj *
vÆue
);

7 
£tTy≥IsMembî
(
robj
 *
subje˘
,Ñobj *
vÆue
);

8 
£tTy≥Iãøt‹
 *
£tTy≥InôIãøt‹
(
robj
 *
subje˘
);

9 
£tTy≥Rñó£Iãøt‹
(
£tTy≥Iãøt‹
 *
si
);

10 
£tTy≥Next
(
£tTy≥Iãøt‹
 *
si
, 
robj
 **
objñe
, 
öt64_t
 *
Œñe
);

11 
robj
 *
£tTy≥NextObje˘
(
£tTy≥Iãøt‹
 *
si
);

12 
£tTy≥R™domEÀmít
(
robj
 *
£tobj
,Ñobj **
objñe
, 
öt64_t
 *
Œñe
);

14 
£tTy≥Size
(
robj
 *
subje˘
);

15 
£tTy≥C⁄vît
(
robj
 *
£tobj
, 
íc
);

16 
ßddComm™d
(
˛õ¡
 *
c
);

17 
§emComm™d
(
˛õ¡
 *
c
);

18 
smoveComm™d
(
˛õ¡
 *
c
);

19 
sismembîComm™d
(
˛õ¡
 *
c
);

20 
sˇrdComm™d
(
˛õ¡
 *
c
);

21 
•›WôhCou¡Comm™d
(
˛õ¡
 *
c
);

22 
•›Comm™d
(
˛õ¡
 *
c
);

23 
§™dmembîWôhCou¡Comm™d
(
˛õ¡
 *
c
);

24 
§™dmembîComm™d
(
˛õ¡
 *
c
);

25 
smembîsComm™d
(
˛õ¡
 *
c
);

26 
qs‹tCom∑ªSësByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

27 
qs‹tCom∑ªSësByRevC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

28 
söãrGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,Ñobj *
d°key
);

29 
söãrComm™d
(
˛õ¡
 *
c
);

30 
söãr°‹eComm™d
(
˛õ¡
 *
c
);

31 
suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,Ñobj *
d°key
, 
›
);

32 
suni⁄Comm™d
(
˛õ¡
 *
c
);

33 
suni⁄°‹eComm™d
(
˛õ¡
 *
c
);

34 
sdiffComm™d
(
˛õ¡
 *
c
);

35 
sdiff°‹eComm™d
(
˛õ¡
 *
c
);

36 
ssˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_string.c

1 
	~<vr_c‹e.h
>

7 
	$checkSåögLígth
(
˛õ¡
 *
c
, 
size
) {

8 i‡(
size
 > 512*1024*1024) {

9 
	`addRïlyEº‹
(
c
,"stringÉxceeds maximumállowed size (512MB)");

10  
VR_ERROR
;

12  
VR_OK
;

13 
	}
}

31 
	#OBJ_SET_NO_FLAGS
 0

	)

32 
	#OBJ_SET_NX
 (1<<0Ë

	)

33 
	#OBJ_SET_XX
 (1<<1Ë

	)

34 
	#OBJ_SET_EX
 (1<<2Ë

	)

35 
	#OBJ_SET_PX
 (1<<3Ë

	)

37 
	$£tGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
, 
robj
 *
key
,Ñobj *
vÆ
,Ñobj *
expúe
, 
unô
,Ñobj *
ok_ª∂y
,Ñobj *
ab‹t_ª∂y
) {

38 
mûli£c⁄ds
 = 0;

39 
expúed
 = 0;

40 
exi°
;

42 i‡(
expúe
) {

43 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
expúe
, &
mûli£c⁄ds
, 
NULL
Ë!
VR_OK
)

45 i‡(
mûli£c⁄ds
 <= 0) {

46 
	`addRïlyEº‹F‹m©
(
c
,"övÆidÉxpúêtimêö %s",c->
cmd
->
«me
);

49 i‡(
unô
 =
UNIT_SECONDS
Ë
mûli£c⁄ds
 *= 1000;

52 
	`„tchI¡î«lDbByKey
(
c
,
key
);

53 
	`lockDbWrôe
(
c
->
db
);

54 i‡(
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
Ë=
NULL
)

55 
exi°
 = 0;

57 
exi°
 = 1;

59 i‡((
Êags
 & 
OBJ_SET_NX
 && 
exi°
) ||

60 (
Êags
 & 
OBJ_SET_XX
 && !
exi°
))

62 
	`u∆ockDb
(
c
->
db
);

63 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

64 
	`addRïly
(
c
, 
ab‹t_ª∂y
 ?áb‹t_ª∂y : 
sh¨ed
.
nuŒbulk
);

68 
	`£tKey
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(
vÆ
),
NULL
);

69 
c
->
vñ
->
dúty
++;

70 i‡(
expúe
Ë
	`£tExpúe
(
c
->
db
,
key
,
	`vr_m£c_now
()+
mûli£c⁄ds
);

71 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
key
,
c
->
db
->
id
);

72 i‡(
expúe
Ë
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,

73 "expúe",
key
,
c
->
db
->
id
);

74 
	`addRïly
(
c
, 
ok_ª∂y
 ? ok_ª∂y : 
sh¨ed
.
ok
);

75 
	`u∆ockDb
(
c
->
db
);

76 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

77 
	}
}

80 
	$£tComm™d
(
˛õ¡
 *
c
) {

81 
j
;

82 
robj
 *
expúe
 = 
NULL
;

83 
unô
 = 
UNIT_SECONDS
;

84 
Êags
 = 
OBJ_SET_NO_FLAGS
;

86 
j
 = 3; j < 
c
->
¨gc
; j++) {

87 *
a
 = 
c
->
¨gv
[
j
]->
±r
;

88 
robj
 *
√xt
 = (
j
 =
c
->
¨gc
-1Ë? 
NULL
 : c->
¨gv
[j+1];

90 i‡((
a
[0] == 'n' ||á[0] == 'N') &&

91 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

92 !(
Êags
 & 
OBJ_SET_XX
))

94 
Êags
 |
OBJ_SET_NX
;

95 } i‡((
a
[0] == 'x' ||á[0] == 'X') &&

96 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

97 !(
Êags
 & 
OBJ_SET_NX
))

99 
Êags
 |
OBJ_SET_XX
;

100 } i‡((
a
[0] == 'e' ||á[0] == 'E') &&

101 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

102 !(
Êags
 & 
OBJ_SET_PX
Ë&& 
√xt
)

104 
Êags
 |
OBJ_SET_EX
;

105 
unô
 = 
UNIT_SECONDS
;

106 
expúe
 = 
√xt
;

107 
j
++;

108 } i‡((
a
[0] == 'p' ||á[0] == 'P') &&

109 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

110 !(
Êags
 & 
OBJ_SET_EX
Ë&& 
√xt
)

112 
Êags
 |
OBJ_SET_PX
;

113 
unô
 = 
UNIT_MILLISECONDS
;

114 
expúe
 = 
√xt
;

115 
j
++;

117 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

122 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

123 
	`£tGíîicComm™d
(
c
,
Êags
,c->
¨gv
[1],c->¨gv[2],
expúe
,
unô
,
NULL
,NULL);

124 
	}
}

126 
	$£äxComm™d
(
˛õ¡
 *
c
) {

127 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

128 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NX
,c->
¨gv
[1],c->¨gv[2],
NULL
,0,
sh¨ed
.
c⁄e
,sh¨ed.
czîo
);

129 
	}
}

131 
	$£ãxComm™d
(
˛õ¡
 *
c
) {

132 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

133 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NO_FLAGS
,c->
¨gv
[1],c->¨gv[3],c->¨gv[2],
UNIT_SECONDS
,
NULL
,NULL);

134 
	}
}

136 
	$p£ãxComm™d
(
˛õ¡
 *
c
) {

137 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

138 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NO_FLAGS
,c->
¨gv
[1],c->¨gv[3],c->¨gv[2],
UNIT_MILLISECONDS
,
NULL
,NULL);

139 
	}
}

141 
	$gëGíîicComm™d
(
˛õ¡
 *
c
) {

142 
robj
 *
o
;

144 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

145  
VR_OK
;

148 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

149 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

150  
VR_ERROR
;

152 
	`addRïlyBulk
(
c
,
o
);

153  
VR_OK
;

155 
	}
}

157 
	$gëComm™d
(
˛õ¡
 *
c
) {

158 
robj
 *
o
;

160 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

161 
	`lockDbRód
(
c
->
db
);

162 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

163 
	`u∆ockDb
(
c
->
db
);

164 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

168 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

169 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

171 
	`addRïlyBulk
(
c
,
o
);

174 
	`u∆ockDb
(
c
->
db
);

175 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

176 
	}
}

178 
	$gë£tComm™d
(
˛õ¡
 *
c
) {

179 
robj
 *
key
, *
vÆ
;

180 
expúed
 = 0;

181 
exi°
;

183 
key
 = 
c
->
¨gv
[1];

184 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

186 
	`„tchI¡î«lDbByKey
(
c
,
key
);

187 
	`lockDbWrôe
(
c
->
db
);

188 
vÆ
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
,&
expúed
);

189 i‡(
vÆ
 =
NULL
) {

190 
exi°
 = 0;

191 
	`dbAdd
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]));

193 
exi°
 = 1;

194 i‡(
vÆ
->
ty≥
 !
OBJ_STRING
) {

195 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

196 
íd
;

199 
	`addRïlyBulk
(
c
,
vÆ
);

200 
	`dbOvîwrôe
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]));

201 
	`ªmoveExpúe
(
c
->
db
,
key
);

204 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[1],c->
db
->
id
);

205 
c
->
vñ
->
dúty
++;

207 
íd
:

208 
	`u∆ockDb
(
c
->
db
);

209 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

210 i‡(
exi°
)

211 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

213 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

214 
	}
}

216 
	$£å™geComm™d
(
˛õ¡
 *
c
) {

217 
robj
 *
o
;

218 
off£t
;

219 
sds
 
vÆue
 = 
c
->
¨gv
[3]->
±r
;

220 
expúed
 = 0;

222 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
off£t
,
NULL
Ë!
VR_OK
)

225 i‡(
off£t
 < 0) {

226 
	`addRïlyEº‹
(
c
,"offset is out ofÑange");

230 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

231 
	`lockDbWrôe
(
c
->
db
);

232 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

233 i‡(
o
 =
NULL
) {

235 i‡(
	`sd¶í
(
vÆue
) == 0) {

236 
	`u∆ockDb
(
c
->
db
);

237 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

238 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

243 i‡(
	`checkSåögLígth
(
c
,
off£t
+
	`sd¶í
(
vÆue
)Ë!
VR_OK
) {

244 
	`u∆ockDb
(
c
->
db
);

245 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

249 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
NULL
, 
off£t
+
	`sd¶í
(
vÆue
)));

250 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

252 
size_t
 
ﬁí
;

255 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

256 
	`u∆ockDb
(
c
->
db
);

257 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

262 
ﬁí
 = 
	`°rögObje˘Lí
(
o
);

263 i‡(
	`sd¶í
(
vÆue
) == 0) {

264 
	`u∆ockDb
(
c
->
db
);

265 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

266 
	`addRïlyL⁄gL⁄g
(
c
,
ﬁí
);

271 i‡(
	`checkSåögLígth
(
c
,
off£t
+
	`sd¶í
(
vÆue
)Ë!
VR_OK
) {

272 
	`u∆ockDb
(
c
->
db
);

273 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

278 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

281 i‡(
	`sd¶í
(
vÆue
) > 0) {

282 
o
->
±r
 = 
	`sdsgrowzîo
(o->±r,
off£t
+
	`sd¶í
(
vÆue
));

283 
	`mem˝y
((*)
o
->
±r
+
off£t
,
vÆue
,
	`sd¶í
(value));

284 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

285 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,

286 "£å™ge",
c
->
¨gv
[1],c->
db
->
id
);

287 
c
->
vñ
->
dúty
++;

289 
	`addRïlyL⁄gL⁄g
(
c
,
	`sd¶í
(
o
->
±r
));

290 
	`u∆ockDb
(
c
->
db
);

291 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

292 
	}
}

294 
	$gëøngeComm™d
(
˛õ¡
 *
c
) {

295 
robj
 *
o
;

296 
°¨t
, 
íd
;

297 *
°r
, 
Œbuf
[32];

298 
size_t
 
°æí
;

300 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
)

302 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
)

305 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

306 
	`lockDbRód
(
c
->
db
);

307 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ybulk
)Ë=
NULL
) {

308 
	`u∆ockDb
(
c
->
db
);

309 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

311 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

312 
	`u∆ockDb
(
c
->
db
);

313 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

317 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

318 
°r
 = 
Œbuf
;

319 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

321 
°r
 = 
o
->
±r
;

322 
°æí
 = 
	`sd¶í
(
°r
);

326 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

327 i‡(
íd
 < 0Ëíd = 
°æí
+end;

328 i‡(
°¨t
 < 0) start = 0;

329 i‡(
íd
 < 0)Énd = 0;

330 i‡(()
íd
 >
°æí
)Énd = strlen-1;

334 i‡(
°¨t
 > 
íd
 || 
°æí
 == 0) {

335 
	`addRïly
(
c
,
sh¨ed
.
em±ybulk
);

337 
	`addRïlyBulkCBuf„r
(
c
,(*)
°r
+
°¨t
,
íd
-start+1);

339 
	`u∆ockDb
(
c
->
db
);

340 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

341 
	}
}

343 
	$mgëComm™d
(
˛õ¡
 *
c
) {

344 
j
;

346 
	`addRïlyMu…iBulkLí
(
c
,c->
¨gc
-1);

347 
j
 = 1; j < 
c
->
¨gc
; j++) {

348 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

349 
	`lockDbRód
(
c
->
db
);

350 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

351 i‡(
o
 =
NULL
) {

352 
	`u∆ockDb
(
c
->
db
);

353 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

354 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

356 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

357 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

359 
	`addRïlyBulk
(
c
,
o
);

361 
	`u∆ockDb
(
c
->
db
);

362 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

365 
	}
}

367 
	$m£tGíîicComm™d
(
˛õ¡
 *
c
, 
nx
) {

368 
j
, 
busykeys
 = 0;

370 i‡((
c
->
¨gc
 % 2) == 0) {

371 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for MSET");

376 i‡(
nx
) {

377 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

378 i‡(
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
) != NULL) {

379 
busykeys
++;

382 i‡(
busykeys
) {

383 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

388 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

389 
c
->
¨gv
[
j
+1] = 
	`åyObje˘Encodög
(c->argv[j+1]);

390 
	`£tKey
(
c
->
db
,c->
¨gv
[
j
],c->¨gv[j+1],
NULL
);

391 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[
j
],c->
db
->
id
);

393 
£rvî
.
dúty
 +(
c
->
¨gc
-1)/2;

394 
	`addRïly
(
c
, 
nx
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
ok
);

395 
	}
}

397 
	$m£tComm™d
(
˛õ¡
 *
c
) {

398 
j
;

399 
expúed
 = 0, 
expúed_tŸÆ
 = 0;

401 i‡((
c
->
¨gc
 % 2) == 0) {

402 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for MSET");

406 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

407 
c
->
¨gv
[
j
+1] = 
	`åyObje˘Encodög
(c->argv[j+1]);

408 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

409 
	`lockDbWrôe
(
c
->
db
);

410 
	`£tKey
(
c
->
db
,c->
¨gv
[
j
],
	`dupSåögObje˘Unc⁄°™t
(c->¨gv[j+1]),&
expúed
);

411 
	`u∆ockDb
(
c
->
db
);

412 i‡(
expúed
Ë
expúed_tŸÆ
 ++;

413 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[
j
],c->
db
->
id
);

416 i‡(
expúed_tŸÆ
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,expired_total);

417 
c
->
vñ
->
dúty
 +(c->
¨gc
-1)/2;

418 
	`addRïly
(
c
, 
sh¨ed
.
ok
);

419 
	}
}

421 
	$m£äxComm™d
(
˛õ¡
 *
c
) {

422 
	`m£tGíîicComm™d
(
c
,1);

423 
	}
}

425 
	$ö¸De¸Comm™d
(
˛õ¡
 *
c
, 
ö¸
) {

426 
vÆue
, 
ﬁdvÆue
;

427 
robj
 *
o
, *
√w
;

428 
expúed
 = 0;

430 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

431 
	`lockDbWrôe
(
c
->
db
);

432 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

433 i‡(
o
 !
NULL
 && 
	`checkTy≥
(
c
,o,
OBJ_STRING
)Ë
íd
;

434 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
o
,&
vÆue
,
NULL
Ë!
VR_OK
Ë
íd
;

436 
ﬁdvÆue
 = 
vÆue
;

437 i‡((
ö¸
 < 0 && 
ﬁdvÆue
 < 0 && in¸ < (
LLONG_MIN
-oldvalue)) ||

438 (
ö¸
 > 0 && 
ﬁdvÆue
 > 0 && in¸ > (
LLONG_MAX
-oldvalue))) {

439 
	`addRïlyEº‹
(
c
,"increment or decrement would overflow");

440 
íd
;

442 
vÆue
 +
ö¸
;

444 i‡(
o
 && o->
ªfcou¡
 =1 && o->
ícodög
 =
OBJ_ENCODING_INT
 &&

445 (
vÆue
 < 0 || vÆuê>
OBJ_SHARED_INTEGERS
) &&

446 
vÆue
 >
LONG_MIN
 && vÆuê<
LONG_MAX
)

448 
√w
 = 
o
;

449 
o
->
±r
 = (*)(()
vÆue
);

451 
√w
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

452 i‡(
o
) {

453 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w
);

455 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
√w
);

458 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

459 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"ö¸by",
c
->
¨gv
[1],c->
db
->
id
);

460 
c
->
vñ
->
dúty
++;

461 
	`addRïly
(
c
,
sh¨ed
.
cﬁ⁄
);

462 
	`addRïly
(
c
,
√w
);

463 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

465 
íd
:

466 
	`u∆ockDb
(
c
->
db
);

467 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

468 
	}
}

470 
	$ö¸Comm™d
(
˛õ¡
 *
c
) {

471 
	`ö¸De¸Comm™d
(
c
,1);

472 
	}
}

474 
	$de¸Comm™d
(
˛õ¡
 *
c
) {

475 
	`ö¸De¸Comm™d
(
c
,-1);

476 
	}
}

478 
	$ö¸byComm™d
(
˛õ¡
 *
c
) {

479 
ö¸
;

481 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ö¸
, 
NULL
Ë!
VR_OK
) ;

482 
	`ö¸De¸Comm™d
(
c
,
ö¸
);

483 
	}
}

485 
	$de¸byComm™d
(
˛õ¡
 *
c
) {

486 
ö¸
;

488 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ö¸
, 
NULL
Ë!
VR_OK
) ;

489 
	`ö¸De¸Comm™d
(
c
,-
ö¸
);

490 
	}
}

492 
	$ö¸byÊﬂtComm™d
(
˛õ¡
 *
c
) {

493 
ö¸
, 
vÆue
;

494 
robj
 *
o
, *
√w
, *
aux
;

495 
expúed
 = 0;

497 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

498 
	`lockDbWrôe
(
c
->
db
);

499 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

500 i‡(
o
 !
NULL
 && 
	`checkTy≥
(
c
,o,
OBJ_STRING
)Ë
íd
;

501 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,
o
,&
vÆue
,
NULL
Ë!
VR_OK
 ||

502 
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
ö¸
,
NULL
Ë!
VR_OK
)

503 
íd
;

505 
vÆue
 +
ö¸
;

506 i‡(
	`i¢™
(
vÆue
Ë|| 
	`isöf
(value)) {

507 
	`addRïlyEº‹
(
c
,"increment wouldÖroduce NaN or Infinity");

508 
íd
;

510 
√w
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
,1);

511 i‡(
o
)

512 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w
);

514 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
√w
);

515 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

516 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"ö¸byÊﬂt",
c
->
¨gv
[1],c->
db
->
id
);

517 
c
->
vñ
->
dúty
++;

518 
	`addRïlyBulk
(
c
,
√w
);

523 
aux
 = 
	`¸óãSåögObje˘
("SET",3);

524 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,0,
aux
);

525 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
√w
);

526 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,2,
aux
);

528 
íd
:

529 
	`u∆ockDb
(
c
->
db
);

530 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

531 
	}
}

533 
	$≠≥ndComm™d
(
˛õ¡
 *
c
) {

534 
size_t
 
tŸÀn
;

535 
robj
 *
o
, *
≠≥nd
;

536 
expúed
 = 0;

538 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

539 
	`lockDbWrôe
(
c
->
db
);

540 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

541 i‡(
o
 =
NULL
) {

543 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

544 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
	`dupSåögObje˘Unc⁄°™t
(c->argv[2]));

545 
tŸÀn
 = 
	`°rögObje˘Lí
(
c
->
¨gv
[2]);

548 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
))

549 
íd
;

552 
≠≥nd
 = 
c
->
¨gv
[2];

553 
tŸÀn
 = 
	`°rögObje˘Lí
(
o
)+
	`sd¶í
(
≠≥nd
->
±r
);

554 i‡(
	`checkSåögLígth
(
c
,
tŸÀn
Ë!
VR_OK
)

555 
íd
;

558 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

559 
o
->
±r
 = 
	`sdsˇéí
(o->±r,
≠≥nd
->±r,
	`sd¶í
(append->ptr));

560 
tŸÀn
 = 
	`sd¶í
(
o
->
±r
);

562 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

563 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"≠≥nd",
c
->
¨gv
[1],c->
db
->
id
);

564 
c
->
vñ
->
dúty
++;

565 
	`addRïlyL⁄gL⁄g
(
c
,
tŸÀn
);

567 
íd
:

568 
	`u∆ockDb
(
c
->
db
);

569 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

570 
	}
}

572 
	$°æíComm™d
(
˛õ¡
 *
c
) {

573 
robj
 *
o
;

575 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

576 
	`lockDbRód
(
c
->
db
);

577 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

578 
	`u∆ockDb
(
c
->
db
);

579 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

581 } if(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

582 
	`u∆ockDb
(
c
->
db
);

583 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

587 
	`addRïlyL⁄gL⁄g
(
c
,
	`°rögObje˘Lí
(
o
));

588 
	`u∆ockDb
(
c
->
db
);

589 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

590 
	}
}

	@src/vr_t_string.c

1 
	~<vr_c‹e.h
>

7 
	$checkSåögLígth
(
˛õ¡
 *
c
, 
size
) {

8 i‡(
size
 > 512*1024*1024) {

9 
	`addRïlyEº‹
(
c
,"stringÉxceeds maximumállowed size (512MB)");

10  
VR_ERROR
;

12  
VR_OK
;

13 
	}
}

31 
	#OBJ_SET_NO_FLAGS
 0

	)

32 
	#OBJ_SET_NX
 (1<<0Ë

	)

33 
	#OBJ_SET_XX
 (1<<1Ë

	)

34 
	#OBJ_SET_EX
 (1<<2Ë

	)

35 
	#OBJ_SET_PX
 (1<<3Ë

	)

37 
	$£tGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
, 
robj
 *
key
,Ñobj *
vÆ
,Ñobj *
expúe
, 
unô
,Ñobj *
ok_ª∂y
,Ñobj *
ab‹t_ª∂y
) {

38 
mûli£c⁄ds
 = 0;

39 
expúed
 = 0;

40 
exi°
;

42 i‡(
expúe
) {

43 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
expúe
, &
mûli£c⁄ds
, 
NULL
Ë!
VR_OK
)

45 i‡(
mûli£c⁄ds
 <= 0) {

46 
	`addRïlyEº‹F‹m©
(
c
,"övÆidÉxpúêtimêö %s",c->
cmd
->
«me
);

49 i‡(
unô
 =
UNIT_SECONDS
Ë
mûli£c⁄ds
 *= 1000;

52 
	`„tchI¡î«lDbByKey
(
c
,
key
);

53 
	`lockDbWrôe
(
c
->
db
);

54 i‡(
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
Ë=
NULL
)

55 
exi°
 = 0;

57 
exi°
 = 1;

59 i‡((
Êags
 & 
OBJ_SET_NX
 && 
exi°
) ||

60 (
Êags
 & 
OBJ_SET_XX
 && !
exi°
))

62 
	`u∆ockDb
(
c
->
db
);

63 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

64 
	`addRïly
(
c
, 
ab‹t_ª∂y
 ?áb‹t_ª∂y : 
sh¨ed
.
nuŒbulk
);

68 
	`£tKey
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(
vÆ
),
NULL
);

69 
c
->
vñ
->
dúty
++;

70 i‡(
expúe
Ë
	`£tExpúe
(
c
->
db
,
key
,
	`vr_m£c_now
()+
mûli£c⁄ds
);

71 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
key
,
c
->
db
->
id
);

72 i‡(
expúe
Ë
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,

73 "expúe",
key
,
c
->
db
->
id
);

74 
	`addRïly
(
c
, 
ok_ª∂y
 ? ok_ª∂y : 
sh¨ed
.
ok
);

75 
	`u∆ockDb
(
c
->
db
);

76 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

77 
	}
}

80 
	$£tComm™d
(
˛õ¡
 *
c
) {

81 
j
;

82 
robj
 *
expúe
 = 
NULL
;

83 
unô
 = 
UNIT_SECONDS
;

84 
Êags
 = 
OBJ_SET_NO_FLAGS
;

86 
j
 = 3; j < 
c
->
¨gc
; j++) {

87 *
a
 = 
c
->
¨gv
[
j
]->
±r
;

88 
robj
 *
√xt
 = (
j
 =
c
->
¨gc
-1Ë? 
NULL
 : c->
¨gv
[j+1];

90 i‡((
a
[0] == 'n' ||á[0] == 'N') &&

91 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

92 !(
Êags
 & 
OBJ_SET_XX
))

94 
Êags
 |
OBJ_SET_NX
;

95 } i‡((
a
[0] == 'x' ||á[0] == 'X') &&

96 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

97 !(
Êags
 & 
OBJ_SET_NX
))

99 
Êags
 |
OBJ_SET_XX
;

100 } i‡((
a
[0] == 'e' ||á[0] == 'E') &&

101 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

102 !(
Êags
 & 
OBJ_SET_PX
Ë&& 
√xt
)

104 
Êags
 |
OBJ_SET_EX
;

105 
unô
 = 
UNIT_SECONDS
;

106 
expúe
 = 
√xt
;

107 
j
++;

108 } i‡((
a
[0] == 'p' ||á[0] == 'P') &&

109 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

110 !(
Êags
 & 
OBJ_SET_EX
Ë&& 
√xt
)

112 
Êags
 |
OBJ_SET_PX
;

113 
unô
 = 
UNIT_MILLISECONDS
;

114 
expúe
 = 
√xt
;

115 
j
++;

117 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

122 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

123 
	`£tGíîicComm™d
(
c
,
Êags
,c->
¨gv
[1],c->¨gv[2],
expúe
,
unô
,
NULL
,NULL);

124 
	}
}

126 
	$£äxComm™d
(
˛õ¡
 *
c
) {

127 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

128 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NX
,c->
¨gv
[1],c->¨gv[2],
NULL
,0,
sh¨ed
.
c⁄e
,sh¨ed.
czîo
);

129 
	}
}

131 
	$£ãxComm™d
(
˛õ¡
 *
c
) {

132 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

133 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NO_FLAGS
,c->
¨gv
[1],c->¨gv[3],c->¨gv[2],
UNIT_SECONDS
,
NULL
,NULL);

134 
	}
}

136 
	$p£ãxComm™d
(
˛õ¡
 *
c
) {

137 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

138 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NO_FLAGS
,c->
¨gv
[1],c->¨gv[3],c->¨gv[2],
UNIT_MILLISECONDS
,
NULL
,NULL);

139 
	}
}

141 
	$gëGíîicComm™d
(
˛õ¡
 *
c
) {

142 
robj
 *
o
;

144 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

145  
VR_OK
;

148 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

149 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

150  
VR_ERROR
;

152 
	`addRïlyBulk
(
c
,
o
);

153  
VR_OK
;

155 
	}
}

157 
	$gëComm™d
(
˛õ¡
 *
c
) {

158 
robj
 *
o
;

160 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

161 
	`lockDbRód
(
c
->
db
);

162 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

163 
	`u∆ockDb
(
c
->
db
);

164 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

168 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

169 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

171 
	`addRïlyBulk
(
c
,
o
);

174 
	`u∆ockDb
(
c
->
db
);

175 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

176 
	}
}

178 
	$gë£tComm™d
(
˛õ¡
 *
c
) {

179 
robj
 *
key
, *
vÆ
;

180 
expúed
 = 0;

181 
exi°
;

183 
key
 = 
c
->
¨gv
[1];

184 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

186 
	`„tchI¡î«lDbByKey
(
c
,
key
);

187 
	`lockDbWrôe
(
c
->
db
);

188 
vÆ
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
,&
expúed
);

189 i‡(
vÆ
 =
NULL
) {

190 
exi°
 = 0;

191 
	`dbAdd
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]));

193 
exi°
 = 1;

194 i‡(
vÆ
->
ty≥
 !
OBJ_STRING
) {

195 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

196 
íd
;

199 
	`addRïlyBulk
(
c
,
vÆ
);

200 
	`dbOvîwrôe
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]));

201 
	`ªmoveExpúe
(
c
->
db
,
key
);

204 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[1],c->
db
->
id
);

205 
c
->
vñ
->
dúty
++;

207 
íd
:

208 
	`u∆ockDb
(
c
->
db
);

209 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

210 i‡(
exi°
)

211 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

213 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

214 
	}
}

216 
	$£å™geComm™d
(
˛õ¡
 *
c
) {

217 
robj
 *
o
;

218 
off£t
;

219 
sds
 
vÆue
 = 
c
->
¨gv
[3]->
±r
;

220 
expúed
 = 0;

222 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
off£t
,
NULL
Ë!
VR_OK
)

225 i‡(
off£t
 < 0) {

226 
	`addRïlyEº‹
(
c
,"offset is out ofÑange");

230 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

231 
	`lockDbWrôe
(
c
->
db
);

232 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

233 i‡(
o
 =
NULL
) {

235 i‡(
	`sd¶í
(
vÆue
) == 0) {

236 
	`u∆ockDb
(
c
->
db
);

237 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

238 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

243 i‡(
	`checkSåögLígth
(
c
,
off£t
+
	`sd¶í
(
vÆue
)Ë!
VR_OK
) {

244 
	`u∆ockDb
(
c
->
db
);

245 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

249 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
NULL
, 
off£t
+
	`sd¶í
(
vÆue
)));

250 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

252 
size_t
 
ﬁí
;

255 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

256 
	`u∆ockDb
(
c
->
db
);

257 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

262 
ﬁí
 = 
	`°rögObje˘Lí
(
o
);

263 i‡(
	`sd¶í
(
vÆue
) == 0) {

264 
	`u∆ockDb
(
c
->
db
);

265 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

266 
	`addRïlyL⁄gL⁄g
(
c
,
ﬁí
);

271 i‡(
	`checkSåögLígth
(
c
,
off£t
+
	`sd¶í
(
vÆue
)Ë!
VR_OK
) {

272 
	`u∆ockDb
(
c
->
db
);

273 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

278 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

281 i‡(
	`sd¶í
(
vÆue
) > 0) {

282 
o
->
±r
 = 
	`sdsgrowzîo
(o->±r,
off£t
+
	`sd¶í
(
vÆue
));

283 
	`mem˝y
((*)
o
->
±r
+
off£t
,
vÆue
,
	`sd¶í
(value));

284 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

285 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,

286 "£å™ge",
c
->
¨gv
[1],c->
db
->
id
);

287 
c
->
vñ
->
dúty
++;

289 
	`addRïlyL⁄gL⁄g
(
c
,
	`sd¶í
(
o
->
±r
));

290 
	`u∆ockDb
(
c
->
db
);

291 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

292 
	}
}

294 
	$gëøngeComm™d
(
˛õ¡
 *
c
) {

295 
robj
 *
o
;

296 
°¨t
, 
íd
;

297 *
°r
, 
Œbuf
[32];

298 
size_t
 
°æí
;

300 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
)

302 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
)

305 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

306 
	`lockDbRód
(
c
->
db
);

307 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ybulk
)Ë=
NULL
) {

308 
	`u∆ockDb
(
c
->
db
);

309 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

311 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

312 
	`u∆ockDb
(
c
->
db
);

313 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

317 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

318 
°r
 = 
Œbuf
;

319 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

321 
°r
 = 
o
->
±r
;

322 
°æí
 = 
	`sd¶í
(
°r
);

326 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

327 i‡(
íd
 < 0Ëíd = 
°æí
+end;

328 i‡(
°¨t
 < 0) start = 0;

329 i‡(
íd
 < 0)Énd = 0;

330 i‡(()
íd
 >
°æí
)Énd = strlen-1;

334 i‡(
°¨t
 > 
íd
 || 
°æí
 == 0) {

335 
	`addRïly
(
c
,
sh¨ed
.
em±ybulk
);

337 
	`addRïlyBulkCBuf„r
(
c
,(*)
°r
+
°¨t
,
íd
-start+1);

339 
	`u∆ockDb
(
c
->
db
);

340 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

341 
	}
}

343 
	$mgëComm™d
(
˛õ¡
 *
c
) {

344 
j
;

346 
	`addRïlyMu…iBulkLí
(
c
,c->
¨gc
-1);

347 
j
 = 1; j < 
c
->
¨gc
; j++) {

348 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

349 
	`lockDbRód
(
c
->
db
);

350 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

351 i‡(
o
 =
NULL
) {

352 
	`u∆ockDb
(
c
->
db
);

353 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

354 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

356 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

357 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

359 
	`addRïlyBulk
(
c
,
o
);

361 
	`u∆ockDb
(
c
->
db
);

362 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

365 
	}
}

367 
	$m£tGíîicComm™d
(
˛õ¡
 *
c
, 
nx
) {

368 
j
, 
busykeys
 = 0;

370 i‡((
c
->
¨gc
 % 2) == 0) {

371 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for MSET");

376 i‡(
nx
) {

377 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

378 i‡(
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
) != NULL) {

379 
busykeys
++;

382 i‡(
busykeys
) {

383 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

388 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

389 
c
->
¨gv
[
j
+1] = 
	`åyObje˘Encodög
(c->argv[j+1]);

390 
	`£tKey
(
c
->
db
,c->
¨gv
[
j
],c->¨gv[j+1],
NULL
);

391 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[
j
],c->
db
->
id
);

393 
£rvî
.
dúty
 +(
c
->
¨gc
-1)/2;

394 
	`addRïly
(
c
, 
nx
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
ok
);

395 
	}
}

397 
	$m£tComm™d
(
˛õ¡
 *
c
) {

398 
j
;

399 
expúed
 = 0, 
expúed_tŸÆ
 = 0;

401 i‡((
c
->
¨gc
 % 2) == 0) {

402 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for MSET");

406 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

407 
c
->
¨gv
[
j
+1] = 
	`åyObje˘Encodög
(c->argv[j+1]);

408 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

409 
	`lockDbWrôe
(
c
->
db
);

410 
	`£tKey
(
c
->
db
,c->
¨gv
[
j
],
	`dupSåögObje˘Unc⁄°™t
(c->¨gv[j+1]),&
expúed
);

411 
	`u∆ockDb
(
c
->
db
);

412 i‡(
expúed
Ë
expúed_tŸÆ
 ++;

413 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[
j
],c->
db
->
id
);

416 i‡(
expúed_tŸÆ
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,expired_total);

417 
c
->
vñ
->
dúty
 +(c->
¨gc
-1)/2;

418 
	`addRïly
(
c
, 
sh¨ed
.
ok
);

419 
	}
}

421 
	$m£äxComm™d
(
˛õ¡
 *
c
) {

422 
	`m£tGíîicComm™d
(
c
,1);

423 
	}
}

425 
	$ö¸De¸Comm™d
(
˛õ¡
 *
c
, 
ö¸
) {

426 
vÆue
, 
ﬁdvÆue
;

427 
robj
 *
o
, *
√w
;

428 
expúed
 = 0;

430 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

431 
	`lockDbWrôe
(
c
->
db
);

432 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

433 i‡(
o
 !
NULL
 && 
	`checkTy≥
(
c
,o,
OBJ_STRING
)Ë
íd
;

434 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
o
,&
vÆue
,
NULL
Ë!
VR_OK
Ë
íd
;

436 
ﬁdvÆue
 = 
vÆue
;

437 i‡((
ö¸
 < 0 && 
ﬁdvÆue
 < 0 && in¸ < (
LLONG_MIN
-oldvalue)) ||

438 (
ö¸
 > 0 && 
ﬁdvÆue
 > 0 && in¸ > (
LLONG_MAX
-oldvalue))) {

439 
	`addRïlyEº‹
(
c
,"increment or decrement would overflow");

440 
íd
;

442 
vÆue
 +
ö¸
;

444 i‡(
o
 && o->
ªfcou¡
 =1 && o->
ícodög
 =
OBJ_ENCODING_INT
 &&

445 (
vÆue
 < 0 || vÆuê>
OBJ_SHARED_INTEGERS
) &&

446 
vÆue
 >
LONG_MIN
 && vÆuê<
LONG_MAX
)

448 
√w
 = 
o
;

449 
o
->
±r
 = (*)(()
vÆue
);

451 
√w
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

452 i‡(
o
) {

453 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w
);

455 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
√w
);

458 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

459 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"ö¸by",
c
->
¨gv
[1],c->
db
->
id
);

460 
c
->
vñ
->
dúty
++;

461 
	`addRïly
(
c
,
sh¨ed
.
cﬁ⁄
);

462 
	`addRïly
(
c
,
√w
);

463 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

465 
íd
:

466 
	`u∆ockDb
(
c
->
db
);

467 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

468 
	}
}

470 
	$ö¸Comm™d
(
˛õ¡
 *
c
) {

471 
	`ö¸De¸Comm™d
(
c
,1);

472 
	}
}

474 
	$de¸Comm™d
(
˛õ¡
 *
c
) {

475 
	`ö¸De¸Comm™d
(
c
,-1);

476 
	}
}

478 
	$ö¸byComm™d
(
˛õ¡
 *
c
) {

479 
ö¸
;

481 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ö¸
, 
NULL
Ë!
VR_OK
) ;

482 
	`ö¸De¸Comm™d
(
c
,
ö¸
);

483 
	}
}

485 
	$de¸byComm™d
(
˛õ¡
 *
c
) {

486 
ö¸
;

488 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ö¸
, 
NULL
Ë!
VR_OK
) ;

489 
	`ö¸De¸Comm™d
(
c
,-
ö¸
);

490 
	}
}

492 
	$ö¸byÊﬂtComm™d
(
˛õ¡
 *
c
) {

493 
ö¸
, 
vÆue
;

494 
robj
 *
o
, *
√w
, *
aux
;

495 
expúed
 = 0;

497 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

498 
	`lockDbWrôe
(
c
->
db
);

499 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

500 i‡(
o
 !
NULL
 && 
	`checkTy≥
(
c
,o,
OBJ_STRING
)Ë
íd
;

501 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,
o
,&
vÆue
,
NULL
Ë!
VR_OK
 ||

502 
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
ö¸
,
NULL
Ë!
VR_OK
)

503 
íd
;

505 
vÆue
 +
ö¸
;

506 i‡(
	`i¢™
(
vÆue
Ë|| 
	`isöf
(value)) {

507 
	`addRïlyEº‹
(
c
,"increment wouldÖroduce NaN or Infinity");

508 
íd
;

510 
√w
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
,1);

511 i‡(
o
)

512 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w
);

514 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
√w
);

515 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

516 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"ö¸byÊﬂt",
c
->
¨gv
[1],c->
db
->
id
);

517 
c
->
vñ
->
dúty
++;

518 
	`addRïlyBulk
(
c
,
√w
);

523 
aux
 = 
	`¸óãSåögObje˘
("SET",3);

524 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,0,
aux
);

525 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
√w
);

526 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,2,
aux
);

528 
íd
:

529 
	`u∆ockDb
(
c
->
db
);

530 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

531 
	}
}

533 
	$≠≥ndComm™d
(
˛õ¡
 *
c
) {

534 
size_t
 
tŸÀn
;

535 
robj
 *
o
, *
≠≥nd
;

536 
expúed
 = 0;

538 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

539 
	`lockDbWrôe
(
c
->
db
);

540 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

541 i‡(
o
 =
NULL
) {

543 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

544 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
	`dupSåögObje˘Unc⁄°™t
(c->argv[2]));

545 
tŸÀn
 = 
	`°rögObje˘Lí
(
c
->
¨gv
[2]);

548 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
))

549 
íd
;

552 
≠≥nd
 = 
c
->
¨gv
[2];

553 
tŸÀn
 = 
	`°rögObje˘Lí
(
o
)+
	`sd¶í
(
≠≥nd
->
±r
);

554 i‡(
	`checkSåögLígth
(
c
,
tŸÀn
Ë!
VR_OK
)

555 
íd
;

558 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

559 
o
->
±r
 = 
	`sdsˇéí
(o->±r,
≠≥nd
->±r,
	`sd¶í
(append->ptr));

560 
tŸÀn
 = 
	`sd¶í
(
o
->
±r
);

562 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

563 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"≠≥nd",
c
->
¨gv
[1],c->
db
->
id
);

564 
c
->
vñ
->
dúty
++;

565 
	`addRïlyL⁄gL⁄g
(
c
,
tŸÀn
);

567 
íd
:

568 
	`u∆ockDb
(
c
->
db
);

569 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

570 
	}
}

572 
	$°æíComm™d
(
˛õ¡
 *
c
) {

573 
robj
 *
o
;

575 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

576 
	`lockDbRód
(
c
->
db
);

577 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

578 
	`u∆ockDb
(
c
->
db
);

579 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

581 } if(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

582 
	`u∆ockDb
(
c
->
db
);

583 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

587 
	`addRïlyL⁄gL⁄g
(
c
,
	`°rögObje˘Lí
(
o
));

588 
	`u∆ockDb
(
c
->
db
);

589 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

590 
	}
}

	@src/vr_t_string.h

1 #i‚de‡
_VR_T_STRING_H_


2 
	#_VR_T_STRING_H_


	)

4 
£tGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
, 
robj
 *
key
,Ñobj *
vÆ
,Ñobj *
expúe
, 
unô
,Ñobj *
ok_ª∂y
,Ñobj *
ab‹t_ª∂y
);

5 
£tComm™d
(
˛õ¡
 *
c
);

6 
£äxComm™d
(
˛õ¡
 *
c
);

7 
£ãxComm™d
(
˛õ¡
 *
c
);

8 
p£ãxComm™d
(
˛õ¡
 *
c
);

9 
gëGíîicComm™d
(
˛õ¡
 *
c
);

10 
gëComm™d
(
˛õ¡
 *
c
);

11 
gë£tComm™d
(
˛õ¡
 *
c
);

12 
£å™geComm™d
(
˛õ¡
 *
c
);

13 
gëøngeComm™d
(
˛õ¡
 *
c
);

14 
mgëComm™d
(
˛õ¡
 *
c
);

15 
m£tGíîicComm™d
(
˛õ¡
 *
c
, 
nx
);

16 
m£tComm™d
(
˛õ¡
 *
c
);

17 
m£äxComm™d
(
˛õ¡
 *
c
);

18 
ö¸De¸Comm™d
(
˛õ¡
 *
c
, 
ö¸
);

19 
ö¸Comm™d
(
˛õ¡
 *
c
);

20 
de¸Comm™d
(
˛õ¡
 *
c
);

21 
ö¸byComm™d
(
˛õ¡
 *
c
);

22 
de¸byComm™d
(
˛õ¡
 *
c
);

23 
ö¸byÊﬂtComm™d
(
˛õ¡
 *
c
);

24 
≠≥ndComm™d
(
˛õ¡
 *
c
);

25 
°æíComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_string.h

1 #i‚de‡
_VR_T_STRING_H_


2 
	#_VR_T_STRING_H_


	)

4 
£tGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
, 
robj
 *
key
,Ñobj *
vÆ
,Ñobj *
expúe
, 
unô
,Ñobj *
ok_ª∂y
,Ñobj *
ab‹t_ª∂y
);

5 
£tComm™d
(
˛õ¡
 *
c
);

6 
£äxComm™d
(
˛õ¡
 *
c
);

7 
£ãxComm™d
(
˛õ¡
 *
c
);

8 
p£ãxComm™d
(
˛õ¡
 *
c
);

9 
gëGíîicComm™d
(
˛õ¡
 *
c
);

10 
gëComm™d
(
˛õ¡
 *
c
);

11 
gë£tComm™d
(
˛õ¡
 *
c
);

12 
£å™geComm™d
(
˛õ¡
 *
c
);

13 
gëøngeComm™d
(
˛õ¡
 *
c
);

14 
mgëComm™d
(
˛õ¡
 *
c
);

15 
m£tGíîicComm™d
(
˛õ¡
 *
c
, 
nx
);

16 
m£tComm™d
(
˛õ¡
 *
c
);

17 
m£äxComm™d
(
˛õ¡
 *
c
);

18 
ö¸De¸Comm™d
(
˛õ¡
 *
c
, 
ö¸
);

19 
ö¸Comm™d
(
˛õ¡
 *
c
);

20 
de¸Comm™d
(
˛õ¡
 *
c
);

21 
ö¸byComm™d
(
˛õ¡
 *
c
);

22 
de¸byComm™d
(
˛õ¡
 *
c
);

23 
ö¸byÊﬂtComm™d
(
˛õ¡
 *
c
);

24 
≠≥ndComm™d
(
˛õ¡
 *
c
);

25 
°æíComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_zset.c

1 
	~<vr_c‹e.h
>

3 
z¶LexVÆueGãMö
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
);

4 
z¶LexVÆueLãMax
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
);

6 
zskùli°Node
 *
	$z¶Cª©eNode
(
Àvñ
, 
sc‹e
, 
robj
 *
obj
) {

7 
zskùli°Node
 *
zn
 = 
	`dÆloc
((*zn)+
Àvñ
*(
zskùli°Levñ
));

8 
zn
->
sc‹e
 = score;

9 
zn
->
obj
 = obj;

10  
zn
;

11 
	}
}

13 
zskùli°
 *
	$z¶Cª©e
() {

14 
j
;

15 
zskùli°
 *
z¶
;

17 
z¶
 = 
	`dÆloc
((*zsl));

18 
z¶
->
Àvñ
 = 1;

19 
z¶
->
Àngth
 = 0;

20 
z¶
->
hódî
 = 
	`z¶Cª©eNode
(
ZSKIPLIST_MAXLEVEL
,0,
NULL
);

21 
j
 = 0; j < 
ZSKIPLIST_MAXLEVEL
; j++) {

22 
z¶
->
hódî
->
Àvñ
[
j
].
f‹w¨d
 = 
NULL
;

23 
z¶
->
hódî
->
Àvñ
[
j
].
•™
 = 0;

25 
z¶
->
hódî
->
backw¨d
 = 
NULL
;

26 
z¶
->
èû
 = 
NULL
;

27  
z¶
;

28 
	}
}

30 
	$z¶FªeNode
(
zskùli°Node
 *
node
) {

32 
	`d‰ì
(
node
);

33 
	}
}

35 
	$z¶Fªe
(
zskùli°
 *
z¶
) {

36 
zskùli°Node
 *
node
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
, *
√xt
;

38 
	`d‰ì
(
z¶
->
hódî
);

39 
node
) {

40 
√xt
 = 
node
->
Àvñ
[0].
f‹w¨d
;

41 
	`z¶FªeNode
(
node
);

42 
node
 = 
√xt
;

44 
	`d‰ì
(
z¶
);

45 
	}
}

51 
	$z¶R™domLevñ
() {

52 
Àvñ
 = 1;

53 (
	`øndom
()&0xFFFFË< (
ZSKIPLIST_P
 * 0xFFFF))

54 
Àvñ
 += 1;

55  (
Àvñ
<
ZSKIPLIST_MAXLEVEL
) ?Üevel : ZSKIPLIST_MAXLEVEL;

56 
	}
}

58 
zskùli°Node
 *
	$z¶In£π
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
) {

59 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

60 
ønk
[
ZSKIPLIST_MAXLEVEL
];

61 
i
, 
Àvñ
;

63 
	`ASSERT
(!
	`i¢™
(
sc‹e
));

64 
x
 = 
z¶
->
hódî
;

65 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

67 
ønk
[
i
] = i =(
z¶
->
Àvñ
-1) ? 0 :Ñank[i+1];

68 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

69 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

70 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

71 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,obj) < 0))) {

72 
ønk
[
i
] +
x
->
Àvñ
[i].
•™
;

73 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

75 
upd©e
[
i
] = 
x
;

81 
Àvñ
 = 
	`z¶R™domLevñ
();

82 i‡(
Àvñ
 > 
z¶
->level) {

83 
i
 = 
z¶
->
Àvñ
; i <Üevel; i++) {

84 
ønk
[
i
] = 0;

85 
upd©e
[
i
] = 
z¶
->
hódî
;

86 
upd©e
[
i
]->
Àvñ
[i].
•™
 = 
z¶
->
Àngth
;

88 
z¶
->
Àvñ
 =Üevel;

90 
x
 = 
	`z¶Cª©eNode
(
Àvñ
,
sc‹e
,
obj
);

91 
i
 = 0; i < 
Àvñ
; i++) {

92 
x
->
Àvñ
[
i
].
f‹w¨d
 = 
upd©e
[i]->level[i].forward;

93 
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 = 
x
;

96 
x
->
Àvñ
[
i
].
•™
 = 
upd©e
[i]->Àvñ[i].•™ - (
ønk
[0] -Ñank[i]);

97 
upd©e
[
i
]->
Àvñ
[i].
•™
 = (
ønk
[0] -Ñank[i]) + 1;

101 
i
 = 
Àvñ
; i < 
z¶
->level; i++) {

102 
upd©e
[
i
]->
Àvñ
[i].
•™
++;

105 
x
->
backw¨d
 = (
upd©e
[0] =
z¶
->
hódî
Ë? 
NULL
 : update[0];

106 i‡(
x
->
Àvñ
[0].
f‹w¨d
)

107 
x
->
Àvñ
[0].
f‹w¨d
->
backw¨d
 = x;

109 
z¶
->
èû
 = 
x
;

110 
z¶
->
Àngth
++;

111  
x
;

112 
	}
}

115 
	$z¶DñëeNode
(
zskùli°
 *
z¶
, 
zskùli°Node
 *
x
, zskùli°Nodê**
upd©e
) {

116 
i
;

117 
i
 = 0; i < 
z¶
->
Àvñ
; i++) {

118 i‡(
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 =
x
) {

119 
upd©e
[
i
]->
Àvñ
[i].
•™
 +
x
->level[i].span - 1;

120 
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 = 
x
->level[i].forward;

122 
upd©e
[
i
]->
Àvñ
[i].
•™
 -= 1;

125 i‡(
x
->
Àvñ
[0].
f‹w¨d
) {

126 
x
->
Àvñ
[0].
f‹w¨d
->
backw¨d
 = x->backward;

128 
z¶
->
èû
 = 
x
->
backw¨d
;

130 
z¶
->
Àvñ
 > 1 && z¶->
hódî
->Àvñ[z¶->Àvñ-1].
f‹w¨d
 =
NULL
)

131 
z¶
->
Àvñ
--;

132 
z¶
->
Àngth
--;

133 
	}
}

136 
	$z¶Dñëe
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
) {

137 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

138 
i
;

140 
x
 = 
z¶
->
hódî
;

141 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

142 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

143 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

144 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

145 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,obj) < 0)))

146 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

147 
upd©e
[
i
] = 
x
;

151 
x
 = x->
Àvñ
[0].
f‹w¨d
;

152 i‡(
x
 && 
sc‹e
 =x->sc‹ê&& 
	`equÆSåögObje˘s
(x->
obj
,obj)) {

153 
	`z¶DñëeNode
(
z¶
, 
x
, 
upd©e
);

154 
	`z¶FªeNode
(
x
);

158 
	}
}

160 
	$z¶VÆueGãMö
(
vÆue
, 
zønge•ec
 *
•ec
) {

161  
•ec
->
möex
 ? (
vÆue
 > s≥c->
mö
) : (value >= spec->min);

162 
	}
}

164 
	$z¶VÆueLãMax
(
vÆue
, 
zønge•ec
 *
•ec
) {

165  
•ec
->
maxex
 ? (
vÆue
 < s≥c->
max
) : (value <= spec->max);

166 
	}
}

169 
	$z¶IsInR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

170 
zskùli°Node
 *
x
;

173 i‡(
ønge
->
mö
 >Ñ™ge->
max
 ||

174 (
ønge
->
mö
 =ønge->
max
 && (ønge->
möex
 ||Ñ™ge->
maxex
)))

176 
x
 = 
z¶
->
èû
;

177 i‡(
x
 =
NULL
 || !
	`z¶VÆueGãMö
(x->
sc‹e
,
ønge
))

179 
x
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

180 i‡(
x
 =
NULL
 || !
	`z¶VÆueLãMax
(x->
sc‹e
,
ønge
))

183 
	}
}

187 
zskùli°Node
 *
	$z¶Fú°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

188 
zskùli°Node
 *
x
;

189 
i
;

192 i‡(!
	`z¶IsInR™ge
(
z¶
,
ønge
)Ë 
NULL
;

194 
x
 = 
z¶
->
hódî
;

195 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

197 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

198 !
	`z¶VÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
,
ønge
))

199 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

203 
x
 = x->
Àvñ
[0].
f‹w¨d
;

204 
	`ASSERT
(
x
 !
NULL
);

207 i‡(!
	`z¶VÆueLãMax
(
x
->
sc‹e
,
ønge
)Ë 
NULL
;

208  
x
;

209 
	}
}

213 
zskùli°Node
 *
	$z¶La°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

214 
zskùli°Node
 *
x
;

215 
i
;

218 i‡(!
	`z¶IsInR™ge
(
z¶
,
ønge
)Ë 
NULL
;

220 
x
 = 
z¶
->
hódî
;

221 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

223 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

224 
	`z¶VÆueLãMax
(
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
,
ønge
))

225 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

229 
	`ASSERT
(
x
 !
NULL
);

232 i‡(!
	`z¶VÆueGãMö
(
x
->
sc‹e
,
ønge
)Ë 
NULL
;

233  
x
;

234 
	}
}

240 
	$z¶DñëeR™geBySc‹e
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
, 
di˘
 *dict) {

241 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

242 
ªmoved
 = 0;

243 
i
;

245 
x
 = 
z¶
->
hódî
;

246 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

247 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
ønge
->
möex
 ?

248 
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 <
ønge
->
mö
 :

249 
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < 
ønge
->
mö
))

250 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

251 
upd©e
[
i
] = 
x
;

255 
x
 = x->
Àvñ
[0].
f‹w¨d
;

258 
x
 &&

259 (
ønge
->
maxex
 ? 
x
->
sc‹e
 <Ñ™ge->
max
 : x->score <=Ñange->max))

261 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

262 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

263 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

264 
	`z¶FªeNode
(
x
);

265 
ªmoved
++;

266 
x
 = 
√xt
;

268  
ªmoved
;

269 
	}
}

271 
	$z¶DñëeR™geByLex
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
, 
di˘
 *dict) {

272 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

273 
ªmoved
 = 0;

274 
i
;

277 
x
 = 
z¶
->
hódî
;

278 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

279 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

280 !
	`z¶LexVÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

281 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

282 
upd©e
[
i
] = 
x
;

286 
x
 = x->
Àvñ
[0].
f‹w¨d
;

289 
x
 && 
	`z¶LexVÆueLãMax
(x->
obj
,
ønge
)) {

290 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

291 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

292 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

293 
	`z¶FªeNode
(
x
);

294 
ªmoved
++;

295 
x
 = 
√xt
;

297  
ªmoved
;

298 
	}
}

302 
	$z¶DñëeR™geByR™k
(
zskùli°
 *
z¶
, 
°¨t
, 
íd
, 
di˘
 *dict) {

303 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

304 
åavî£d
 = 0, 
ªmoved
 = 0;

305 
i
;

307 
x
 = 
z¶
->
hódî
;

308 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

309 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
åavî£d
 + x->Àvñ[i].
•™
Ë< 
°¨t
) {

310 
åavî£d
 +
x
->
Àvñ
[
i
].
•™
;

311 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

313 
upd©e
[
i
] = 
x
;

316 
åavî£d
++;

317 
x
 = x->
Àvñ
[0].
f‹w¨d
;

318 
x
 && 
åavî£d
 <
íd
) {

319 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

320 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

321 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

322 
	`z¶FªeNode
(
x
);

323 
ªmoved
++;

324 
åavî£d
++;

325 
x
 = 
√xt
;

327  
ªmoved
;

328 
	}
}

334 
	$z¶GëR™k
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
o
) {

335 
zskùli°Node
 *
x
;

336 
ønk
 = 0;

337 
i
;

339 
x
 = 
z¶
->
hódî
;

340 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

341 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

342 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

343 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

344 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
o
) <= 0))) {

345 
ønk
 +
x
->
Àvñ
[
i
].
•™
;

346 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

350 i‡(
x
->
obj
 && 
	`equÆSåögObje˘s
(x->obj,
o
)) {

351  
ønk
;

355 
	}
}

358 
zskùli°Node
* 
	$z¶GëEÀmítByR™k
(
zskùli°
 *
z¶
, 
ønk
) {

359 
zskùli°Node
 *
x
;

360 
åavî£d
 = 0;

361 
i
;

363 
x
 = 
z¶
->
hódî
;

364 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

365 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
åavî£d
 + x->Àvñ[i].
•™
Ë<
ønk
)

367 
åavî£d
 +
x
->
Àvñ
[
i
].
•™
;

368 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

370 i‡(
åavî£d
 =
ønk
) {

371  
x
;

374  
NULL
;

375 
	}
}

378 
	$z¶P¨£R™ge
(
robj
 *
mö
,Ñobj *
max
, 
zønge•ec
 *
•ec
) {

379 *
ïå
;

380 
•ec
->
möex
 = s≥c->
maxex
 = 0;

386 i‡(
mö
->
ícodög
 =
OBJ_ENCODING_INT
) {

387 
•ec
->
mö
 = ()mö->
±r
;

389 i‡(((*)
mö
->
±r
)[0] == '(') {

390 
•ec
->
mö
 = 
	`°πod
((*)mö->
±r
+1,&
ïå
);

391 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
mö
)Ë 
VR_ERROR
;

392 
•ec
->
möex
 = 1;

394 
•ec
->
mö
 = 
	`°πod
((*)mö->
±r
,&
ïå
);

395 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
mö
)Ë 
VR_ERROR
;

398 i‡(
max
->
ícodög
 =
OBJ_ENCODING_INT
) {

399 
•ec
->
max
 = ()max->
±r
;

401 i‡(((*)
max
->
±r
)[0] == '(') {

402 
•ec
->
max
 = 
	`°πod
((*)max->
±r
+1,&
ïå
);

403 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
max
)Ë 
VR_ERROR
;

404 
•ec
->
maxex
 = 1;

406 
•ec
->
max
 = 
	`°πod
((*)max->
±r
,&
ïå
);

407 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
max
)Ë 
VR_ERROR
;

411  
VR_OK
;

412 
	}
}

429 
	$z¶P¨£LexR™geIãm
(
robj
 *
ôem
,Ñobj **
de°
, *
ex
) {

430 *
c
 = 
ôem
->
±r
;

432 
c
[0]) {

434 i‡(
c
[1] !'\0'Ë 
VR_ERROR
;

435 *
ex
 = 0;

436 *
de°
 = 
	`dupSåögObje˘Unc⁄°™t
(
sh¨ed
.
max°rög
);

437  
VR_OK
;

439 i‡(
c
[1] !'\0'Ë 
VR_ERROR
;

440 *
ex
 = 0;

441 *
de°
 = 
	`dupSåögObje˘Unc⁄°™t
(
sh¨ed
.
mö°rög
);

442  
VR_OK
;

444 *
ex
 = 1;

445 *
de°
 = 
	`¸óãSåögObje˘
(
c
+1,
	`sd¶í
(c)-1);

446  
VR_OK
;

448 *
ex
 = 0;

449 *
de°
 = 
	`¸óãSåögObje˘
(
c
+1,
	`sd¶í
(c)-1);

450  
VR_OK
;

452  
VR_ERROR
;

454 
	}
}

461 
	$z¶P¨£LexR™ge
(
robj
 *
mö
,Ñobj *
max
, 
zÀxønge•ec
 *
•ec
) {

464 i‡(
mö
->
ícodög
 =
OBJ_ENCODING_INT
 ||

465 
max
->
ícodög
 =
OBJ_ENCODING_INT
Ë 
VR_ERROR
;

467 
•ec
->
mö
 = s≥c->
max
 = 
NULL
;

468 i‡(
	`z¶P¨£LexR™geIãm
(
mö
, &
•ec
->mö, &•ec->
möex
Ë=
VR_ERROR
 ||

469 
	`z¶P¨£LexR™geIãm
(
max
, &
•ec
->max, &•ec->
maxex
Ë=
VR_ERROR
) {

470 i‡(
•ec
->
mö
Ë
	`‰ìObje˘
(spec->min);

471 i‡(
•ec
->
max
Ë
	`‰ìObje˘
(spec->max);

472  
VR_ERROR
;

474  
VR_OK
;

476 
	}
}

480 
	$z¶FªeLexR™ge
(
zÀxønge•ec
 *
•ec
) {

481 
	`‰ìObje˘
(
•ec
->
mö
);

482 
	`‰ìObje˘
(
•ec
->
max
);

483 
	}
}

488 
	$com∑ªSåögObje˘sF‹LexR™ge
(
robj
 *
a
,Ñobj *
b
) {

489 i‡(
a
 =
b
)  0;

491 i‡(
a
 =
sh¨ed
.
mö°rög
 || 
b
 =sh¨ed.
max°rög
)  -1;

492 i‡(
a
 =
sh¨ed
.
max°rög
 || 
b
 =sh¨ed.
mö°rög
)  1;

493  
	`com∑ªSåögObje˘s
(
a
,
b
);

494 
	}
}

496 
	$z¶LexVÆueGãMö
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
) {

497  
•ec
->
möex
 ?

498 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
mö
) > 0) :

499 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
mö
) >= 0);

500 
	}
}

502 
	$z¶LexVÆueLãMax
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
) {

503  
•ec
->
maxex
 ?

504 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
max
) < 0) :

505 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
max
) <= 0);

506 
	}
}

509 
	$z¶IsInLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

510 
zskùli°Node
 *
x
;

513 i‡(
	`com∑ªSåögObje˘sF‹LexR™ge
(
ønge
->
mö
,ønge->
max
) > 1 ||

514 (
	`com∑ªSåögObje˘s
(
ønge
->
mö
,ønge->
max
) == 0 &&

515 (
ønge
->
möex
 ||Ñ™ge->
maxex
)))

517 
x
 = 
z¶
->
èû
;

518 i‡(
x
 =
NULL
 || !
	`z¶LexVÆueGãMö
(x->
obj
,
ønge
))

520 
x
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

521 i‡(
x
 =
NULL
 || !
	`z¶LexVÆueLãMax
(x->
obj
,
ønge
))

524 
	}
}

528 
zskùli°Node
 *
	$z¶Fú°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

529 
zskùli°Node
 *
x
;

530 
i
;

533 i‡(!
	`z¶IsInLexR™ge
(
z¶
,
ønge
)Ë 
NULL
;

535 
x
 = 
z¶
->
hódî
;

536 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

538 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

539 !
	`z¶LexVÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

540 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

544 
x
 = x->
Àvñ
[0].
f‹w¨d
;

545 
	`ASSERT
(
x
 !
NULL
);

548 i‡(!
	`z¶LexVÆueLãMax
(
x
->
obj
,
ønge
)Ë 
NULL
;

549  
x
;

550 
	}
}

554 
zskùli°Node
 *
	$z¶La°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

555 
zskùli°Node
 *
x
;

556 
i
;

559 i‡(!
	`z¶IsInLexR™ge
(
z¶
,
ønge
)Ë 
NULL
;

561 
x
 = 
z¶
->
hódî
;

562 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

564 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

565 
	`z¶LexVÆueLãMax
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

566 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

570 
	`ASSERT
(
x
 !
NULL
);

573 i‡(!
	`z¶LexVÆueGãMö
(
x
->
obj
,
ønge
)Ë 
NULL
;

574  
x
;

575 
	}
}

581 
	$zzlGëSc‹e
(*
•å
) {

582 
ªt
;

583 *
v°r
;

584 
vÀn
;

585 
vl⁄g
;

586 
buf
[128];

587 
sc‹e
;

589 
	`ASSERT
(
•å
 !
NULL
);

591 
ªt
 = ()
	`zùli°Gë
(
•å
,&
v°r
,&
vÀn
,&
vl⁄g
);

592 
	`ASSERT
(
ªt
 > 0);

594 i‡(
v°r
) {

595 
	`mem˝y
(
buf
,
v°r
,
vÀn
);

596 
buf
[
vÀn
] = '\0';

597 
sc‹e
 = 
	`°πod
(
buf
,
NULL
);

599 
sc‹e
 = 
vl⁄g
;

602  
sc‹e
;

603 
	}
}

608 
robj
 *
	$zùli°GëObje˘
(*
•å
) {

609 
ªt
;

610 *
v°r
;

611 
vÀn
;

612 
vl⁄g
;

614 
	`ASSERT
(
•å
 !
NULL
);

616 
ªt
 = ()
	`zùli°Gë
(
•å
,&
v°r
,&
vÀn
,&
vl⁄g
);

617 
	`ASSERT
(
ªt
 > 0);

619 i‡(
v°r
) {

620  
	`¸óãSåögObje˘
((*)
v°r
,
vÀn
);

622  
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

624 
	}
}

627 
	$zzlCom∑ªEÀmíts
(*
ïå
, *
c°r
, 
˛í
) {

628 
ªt
;

629 *
v°r
;

630 
vÀn
;

631 
vl⁄g
;

632 
vbuf
[32];

633 
möÀn
, 
cmp
;

635 
ªt
 = ()
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
);

636 
	`ASSERT
(
ªt
 > 0);

637 i‡(
v°r
 =
NULL
) {

639 
vÀn
 = 
	`Œ2°rög
((*)
vbuf
,(vbuf),
vl⁄g
);

640 
v°r
 = 
vbuf
;

643 
möÀn
 = (
vÀn
 < 
˛í
) ? vlen : clen;

644 
cmp
 = 
	`memcmp
(
v°r
,
c°r
,
möÀn
);

645 i‡(
cmp
 =0Ë 
vÀn
-
˛í
;

646  
cmp
;

647 
	}
}

649 
	$zzlLígth
(*
zl
) {

650  
	`zùli°Lí
(
zl
)/2;

651 
	}
}

655 
	$zzlNext
(*
zl
, **
ïå
, **
•å
) {

656 *
_ïå
, *
_•å
;

657 
	`ASSERT
(*
ïå
 !
NULL
 && *
•å
 != NULL);

659 
_ïå
 = 
	`zùli°Next
(
zl
,*
•å
);

660 i‡(
_ïå
 !
NULL
) {

661 
_•å
 = 
	`zùli°Next
(
zl
,
_ïå
);

662 
	`ASSERT
(
_•å
 !
NULL
);

665 
_•å
 = 
NULL
;

668 *
ïå
 = 
_ïå
;

669 *
•å
 = 
_•å
;

670 
	}
}

674 
	$zzlPªv
(*
zl
, **
ïå
, **
•å
) {

675 *
_ïå
, *
_•å
;

676 
	`ASSERT
(*
ïå
 !
NULL
 && *
•å
 != NULL);

678 
_•å
 = 
	`zùli°Pªv
(
zl
,*
ïå
);

679 i‡(
_•å
 !
NULL
) {

680 
_ïå
 = 
	`zùli°Pªv
(
zl
,
_•å
);

681 
	`ASSERT
(
_ïå
 !
NULL
);

684 
_ïå
 = 
NULL
;

687 *
ïå
 = 
_ïå
;

688 *
•å
 = 
_•å
;

689 
	}
}

693 
	$zzlIsInR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

694 *
p
;

695 
sc‹e
;

698 i‡(
ønge
->
mö
 >Ñ™ge->
max
 ||

699 (
ønge
->
mö
 =ønge->
max
 && (ønge->
möex
 ||Ñ™ge->
maxex
)))

702 
p
 = 
	`zùli°Index
(
zl
,-1);

703 i‡(
p
 =
NULL
)  0;

704 
sc‹e
 = 
	`zzlGëSc‹e
(
p
);

705 i‡(!
	`z¶VÆueGãMö
(
sc‹e
,
ønge
))

708 
p
 = 
	`zùli°Index
(
zl
,1);

709 
	`ASSERT
(
p
 !
NULL
);

710 
sc‹e
 = 
	`zzlGëSc‹e
(
p
);

711 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,
ønge
))

715 
	}
}

719 *
	$zzlFú°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

720 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

721 
sc‹e
;

724 i‡(!
	`zzlIsInR™ge
(
zl
,
ønge
)Ë 
NULL
;

726 
ïå
 !
NULL
) {

727 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

728 
	`ASSERT
(
•å
 !
NULL
);

730 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

731 i‡(
	`z¶VÆueGãMö
(
sc‹e
,
ønge
)) {

733 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
))

734  
ïå
;

735  
NULL
;

739 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

742  
NULL
;

743 
	}
}

747 *
	$zzlLa°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

748 *
ïå
 = 
	`zùli°Index
(
zl
,-2), *
•å
;

749 
sc‹e
;

752 i‡(!
	`zzlIsInR™ge
(
zl
,
ønge
)Ë 
NULL
;

754 
ïå
 !
NULL
) {

755 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

756 
	`ASSERT
(
•å
 !
NULL
);

758 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

759 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
)) {

761 i‡(
	`z¶VÆueGãMö
(
sc‹e
,
ønge
))

762  
ïå
;

763  
NULL
;

768 
•å
 = 
	`zùli°Pªv
(
zl
,
ïå
);

769 i‡(
•å
 !
NULL
) {

770 
ïå
 = 
	`zùli°Pªv
(
zl
,
•å
);

771 
	`ASSERT
(
ïå
 !
NULL
);

773 
ïå
 = 
NULL
;

777  
NULL
;

778 
	}
}

780 
	$zzlLexVÆueGãMö
(*
p
, 
zÀxønge•ec
 *
•ec
) {

781 
robj
 *
vÆue
 = 
	`zùli°GëObje˘
(
p
);

782 
ªs
 = 
	`z¶LexVÆueGãMö
(
vÆue
,
•ec
);

783 
	`‰ìObje˘
(
vÆue
);

784  
ªs
;

785 
	}
}

787 
	$zzlLexVÆueLãMax
(*
p
, 
zÀxønge•ec
 *
•ec
) {

788 
robj
 *
vÆue
 = 
	`zùli°GëObje˘
(
p
);

789 
ªs
 = 
	`z¶LexVÆueLãMax
(
vÆue
,
•ec
);

790 
	`‰ìObje˘
(
vÆue
);

791  
ªs
;

792 
	}
}

796 
	$zzlIsInLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

797 *
p
;

800 i‡(
	`com∑ªSåögObje˘sF‹LexR™ge
(
ønge
->
mö
,ønge->
max
) > 1 ||

801 (
	`com∑ªSåögObje˘s
(
ønge
->
mö
,ønge->
max
) == 0 &&

802 (
ønge
->
möex
 ||Ñ™ge->
maxex
)))

805 
p
 = 
	`zùli°Index
(
zl
,-2);

806 i‡(
p
 =
NULL
)  0;

807 i‡(!
	`zzlLexVÆueGãMö
(
p
,
ønge
))

810 
p
 = 
	`zùli°Index
(
zl
,0);

811 
	`ASSERT
(
p
 !
NULL
);

812 i‡(!
	`zzlLexVÆueLãMax
(
p
,
ønge
))

816 
	}
}

820 *
	$zzlFú°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

821 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

824 i‡(!
	`zzlIsInLexR™ge
(
zl
,
ønge
)Ë 
NULL
;

826 
ïå
 !
NULL
) {

827 i‡(
	`zzlLexVÆueGãMö
(
ïå
,
ønge
)) {

829 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
))

830  
ïå
;

831  
NULL
;

835 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

836 
	`ASSERT
(
•å
 !
NULL
);

837 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

840  
NULL
;

841 
	}
}

845 *
	$zzlLa°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

846 *
ïå
 = 
	`zùli°Index
(
zl
,-2), *
•å
;

849 i‡(!
	`zzlIsInLexR™ge
(
zl
,
ønge
)Ë 
NULL
;

851 
ïå
 !
NULL
) {

852 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
)) {

854 i‡(
	`zzlLexVÆueGãMö
(
ïå
,
ønge
))

855  
ïå
;

856  
NULL
;

861 
•å
 = 
	`zùli°Pªv
(
zl
,
ïå
);

862 i‡(
•å
 !
NULL
) {

863 
ïå
 = 
	`zùli°Pªv
(
zl
,
•å
);

864 
	`ASSERT
(
ïå
 !
NULL
);

866 
ïå
 = 
NULL
;

870  
NULL
;

871 
	}
}

873 *
	$zzlFöd
(*
zl
, 
robj
 *
ñe
, *
sc‹e
) {

874 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

875 
robj
 *
ñe_√w
;

877 
ñe_√w
 = 
	`gëDecodedObje˘
(
ñe
);

878 
ïå
 !
NULL
) {

879 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

880 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe_√w
,
•å
 != NULL);

882 i‡(
	`zùli°Com∑ª
(
ïå
,
ñe_√w
->
±r
,
	`sd¶í
(ele_new->ptr))) {

884 i‡(
sc‹e
 !
NULL
Ë*sc‹ê
	`zzlGëSc‹e
(
•å
);

885 i‡(
ñe_√w
!
ñe
Ë
	`‰ìObje˘
(ele_new);

886  
ïå
;

890 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

893 i‡(
ñe_√w
!
ñe
Ë
	`‰ìObje˘
(ele_new);

894  
NULL
;

895 
	}
}

899 *
	$zzlDñëe
(*
zl
, *
ïå
) {

900 *
p
 = 
ïå
;

903 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

904 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

905  
zl
;

906 
	}
}

908 *
	$zzlIn£πAt
(*
zl
, *
ïå
, 
robj
 *
ñe
, 
sc‹e
) {

909 *
•å
;

910 
sc‹ebuf
[128];

911 
sc‹ñí
;

912 
size_t
 
off£t
;

914 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe
,
	`sdsEncodedObje˘
(ele));

915 
sc‹ñí
 = 
	`d2°rög
(
sc‹ebuf
,(sc‹ebuf),
sc‹e
);

916 i‡(
ïå
 =
NULL
) {

917 
zl
 = 
	`zùli°Push
(zl,
ñe
->
±r
,
	`sd¶í
”À->±r),
ZIPLIST_TAIL
);

918 
zl
 = 
	`zùli°Push
(zl,(*)
sc‹ebuf
,
sc‹ñí
,
ZIPLIST_TAIL
);

921 
off£t
 = 
ïå
-
zl
;

922 
zl
 = 
	`zùli°In£π
(zl,
ïå
,
ñe
->
±r
,
	`sd¶í
(ele->ptr));

923 
ïå
 = 
zl
+
off£t
;

926 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe
,(
•å
 = 
	`zùli°Next
(
zl
,
ïå
)) != NULL);

927 
zl
 = 
	`zùli°In£π
(zl,
•å
,(*)
sc‹ebuf
,
sc‹ñí
);

930  
zl
;

931 
	}
}

935 *
	$zzlIn£π
(*
zl
, 
robj
 *
ñe
, 
sc‹e
) {

936 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

937 
s
;

938 
robj
 *
ñe_√w
;

940 
ñe_√w
 = 
	`gëDecodedObje˘
(
ñe
);

941 
ïå
 !
NULL
) {

942 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

943 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe_√w
,
•å
 != NULL);

944 
s
 = 
	`zzlGëSc‹e
(
•å
);

946 i‡(
s
 > 
sc‹e
) {

950 
zl
 = 
	`zzlIn£πAt
(zl,
ïå
,
ñe_√w
,
sc‹e
);

952 } i‡(
s
 =
sc‹e
) {

954 i‡(
	`zzlCom∑ªEÀmíts
(
ïå
,
ñe_√w
->
±r
,
	`sd¶í
(ele_new->ptr)) > 0) {

955 
zl
 = 
	`zzlIn£πAt
(zl,
ïå
,
ñe_√w
,
sc‹e
);

961 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

965 i‡(
ïå
 =
NULL
)

966 
zl
 = 
	`zzlIn£πAt
(zl,
NULL
,
ñe_√w
,
sc‹e
);

968 i‡(
ñe_√w
 !
ñe
Ë
	`‰ìObje˘
(ele_new);

969  
zl
;

970 
	}
}

972 *
	$zzlDñëeR™geBySc‹e
(*
zl
, 
zønge•ec
 *
ønge
, *
dñëed
) {

973 *
ïå
, *
•å
;

974 
sc‹e
;

975 
num
 = 0;

977 i‡(
dñëed
 !
NULL
) *deleted = 0;

979 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,
ønge
);

980 i‡(
ïå
 =
NULL
Ë 
zl
;

984 (
•å
 = 
	`zùli°Next
(
zl
,
ïå
)Ë!
NULL
) {

985 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

986 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
)) {

988 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

989 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

990 
num
++;

997 i‡(
dñëed
 !
NULL
Ë*dñëed = 
num
;

998  
zl
;

999 
	}
}

1001 *
	$zzlDñëeR™geByLex
(*
zl
, 
zÀxønge•ec
 *
ønge
, *
dñëed
) {

1002 *
ïå
, *
•å
;

1003 
num
 = 0;

1005 i‡(
dñëed
 !
NULL
) *deleted = 0;

1007 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,
ønge
);

1008 i‡(
ïå
 =
NULL
Ë 
zl
;

1012 (
•å
 = 
	`zùli°Next
(
zl
,
ïå
)Ë!
NULL
) {

1013 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
)) {

1015 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

1016 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

1017 
num
++;

1024 i‡(
dñëed
 !
NULL
Ë*dñëed = 
num
;

1025  
zl
;

1026 
	}
}

1030 *
	$zzlDñëeR™geByR™k
(*
zl
, 
°¨t
, 
íd
, *
dñëed
) {

1031 
num
 = (
íd
-
°¨t
)+1;

1032 i‡(
dñëed
Ë*dñëed = 
num
;

1033 
zl
 = 
	`zùli°DñëeR™ge
(zl,2*(
°¨t
-1),2*
num
);

1034  
zl
;

1035 
	}
}

1041 
	$z£tLígth
(
robj
 *
zobj
) {

1042 
Àngth
 = -1;

1043 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1044 
Àngth
 = 
	`zzlLígth
(
zobj
->
±r
);

1045 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1046 
Àngth
 = ((
z£t
*)
zobj
->
±r
)->
z¶
->length;

1048 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1050  
Àngth
;

1051 
	}
}

1053 
	$z£tC⁄vît
(
robj
 *
zobj
, 
ícodög
) {

1054 
z£t
 *
zs
;

1055 
zskùli°Node
 *
node
, *
√xt
;

1056 
robj
 *
ñe
;

1057 
sc‹e
;

1059 i‡(
zobj
->
ícodög
 ==Éncoding) ;

1060 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1061 *
zl
 = 
zobj
->
±r
;

1062 *
ïå
, *
•å
;

1063 *
v°r
;

1064 
vÀn
;

1065 
vl⁄g
;

1067 i‡(
ícodög
 !
OBJ_ENCODING_SKIPLIST
)

1068 
	`£rvîP™ic
("UnknownÅargetÉncoding");

1070 
zs
 = 
	`dÆloc
((*zs));

1071 
zs
->
di˘
 = 
	`di˘Cª©e
(&
z£tDi˘Ty≥
,
NULL
);

1072 
zs
->
z¶
 = 
	`z¶Cª©e
();

1074 
ïå
 = 
	`zùli°Index
(
zl
,0);

1075 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
ïå
 != NULL);

1076 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

1077 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
•å
 != NULL);

1079 
ïå
 !
NULL
) {

1080 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

1081 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

1082 i‡(
v°r
 =
NULL
)

1083 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

1085 
ñe
 = 
	`¸óãSåögObje˘
((*)
v°r
,
vÀn
);

1088 
node
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
ñe
);

1089 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
	`di˘Add
(
zs
->
di˘
,
ñe
,&
node
->
sc‹e
Ë=
DICT_OK
);

1090 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

1093 
	`d‰ì
(
zobj
->
±r
);

1094 
zobj
->
±r
 = 
zs
;

1095 
zobj
->
ícodög
 = 
OBJ_ENCODING_SKIPLIST
;

1096 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1097 *
zl
 = 
	`zùli°New
();

1099 i‡(
ícodög
 !
OBJ_ENCODING_ZIPLIST
)

1100 
	`£rvîP™ic
("UnknownÅargetÉncoding");

1104 
zs
 = 
zobj
->
±r
;

1105 
node
 = 
zs
->
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

1106 
	`d‰ì
(
zs
->
z¶
->
hódî
);

1107 
	`d‰ì
(
zs
->
z¶
);

1109 
node
) {

1110 
ñe
 = 
	`gëDecodedObje˘
(
node
->
obj
);

1111 
zl
 = 
	`zzlIn£πAt
(zl,
NULL
,
ñe
,
node
->
sc‹e
);

1112 i‡(
ñe
 !
node
->
obj
Ë
	`‰ìObje˘
(ele);

1113 
√xt
 = 
node
->
Àvñ
[0].
f‹w¨d
;

1114 
	`z¶FªeNode
(
node
);

1115 
node
 = 
√xt
;

1118 
	`di˘Rñó£
(
zs
->
di˘
);

1119 
	`d‰ì
(
zs
);

1120 
zobj
->
±r
 = 
zl
;

1121 
zobj
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

1123 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1125 
	}
}

1130 
	$z£tC⁄vîtToZùli°IfNìded
(
robj
 *
zobj
, 
size_t
 
maxññí
) {

1131 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) ;

1132 
z£t
 *z£à
zobj
->
±r
;

1134 i‡(
z£t
->
z¶
->
Àngth
 <
£rvî
.
z£t_max_zùli°_íåõs
 &&

1135 
maxññí
 <
£rvî
.
z£t_max_zùli°_vÆue
)

1136 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_ZIPLIST
);

1137 
	}
}

1143 
	$z£tSc‹e
(
robj
 *
zobj
,Ñobj *
membî
, *
sc‹e
) {

1144 i‡(!
zobj
 || !
membî
Ë 
VR_ERROR
;

1146 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1147 i‡(
	`zzlFöd
(
zobj
->
±r
, 
membî
, 
sc‹e
Ë=
NULL
Ë 
VR_ERROR
;

1148 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1149 
z£t
 *
zs
 = 
zobj
->
±r
;

1150 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
zs
->
di˘
, 
membî
);

1151 i‡(
de
 =
NULL
Ë 
VR_ERROR
;

1152 *
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1154 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1156  
VR_OK
;

1157 
	}
}

1164 
	#ZADD_NONE
 0

	)

1165 
	#ZADD_INCR
 (1<<0Ë

	)

1166 
	#ZADD_NX
 (1<<1Ë

	)

1167 
	#ZADD_XX
 (1<<2Ë

	)

1168 
	#ZADD_CH
 (1<<3Ë

	)

1170 
	$zaddGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
) {

1171 *
«√º
 = "resulting score isÇotáÇumber (NaN)";

1172 
robj
 *
key
 = 
c
->
¨gv
[1];

1173 
robj
 *
ñe
;

1174 
robj
 *
zobj
;

1175 
robj
 *
curobj
;

1176 
sc‹e
 = 0, *
sc‹es
 = 
NULL
, 
cursc‹e
 = 0.0;

1177 
j
, 
ñemíts
;

1178 
sc‹eidx
 = 0;

1182 
added
 = 0;

1183 
upd©ed
 = 0;

1184 
¥o˚s£d
 = 0;

1186 
expúed
 = 0;

1190 
sc‹eidx
 = 2;

1191 
sc‹eidx
 < 
c
->
¨gc
) {

1192 *
›t
 = 
c
->
¨gv
[
sc‹eidx
]->
±r
;

1193 i‡(!
	`°rˇ£cmp
(
›t
,"nx")Ë
Êags
 |
ZADD_NX
;

1194 i‡(!
	`°rˇ£cmp
(
›t
,"xx")Ë
Êags
 |
ZADD_XX
;

1195 i‡(!
	`°rˇ£cmp
(
›t
,"ch")Ë
Êags
 |
ZADD_CH
;

1196 i‡(!
	`°rˇ£cmp
(
›t
,"ö¸")Ë
Êags
 |
ZADD_INCR
;

1198 
sc‹eidx
++;

1202 
ö¸
 = (
Êags
 & 
ZADD_INCR
) != 0;

1203 
nx
 = (
Êags
 & 
ZADD_NX
) != 0;

1204 
xx
 = (
Êags
 & 
ZADD_XX
) != 0;

1205 
ch
 = (
Êags
 & 
ZADD_CH
) != 0;

1209 
ñemíts
 = 
c
->
¨gc
-
sc‹eidx
;

1210 i‡(
ñemíts
 % 2) {

1211 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1214 
ñemíts
 /= 2;

1217 i‡(
nx
 && 
xx
) {

1218 
	`addRïlyEº‹
(
c
,

1223 i‡(
ö¸
 && 
ñemíts
 > 1) {

1224 
	`addRïlyEº‹
(
c
,

1232 
sc‹es
 = 
	`dÆloc
(()*
ñemíts
);

1233 
j
 = 0; j < 
ñemíts
; j++) {

1234 i‡(
	`gëDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[
sc‹eidx
+
j
*2],&
sc‹es
[j],
NULL
)

1235 !
VR_OK
Ë
˛ónup
;

1238 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1239 
	`lockDbWrôe
(
c
->
db
);

1241 
zobj
 = 
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
);

1242 i‡(
zobj
 =
NULL
) {

1243 i‡(
xx
) {

1244 
	`u∆ockDb
(
c
->
db
);

1245 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1246 
ª∂y_to_˛õ¡
;

1248 i‡(
£rvî
.
z£t_max_zùli°_íåõs
 == 0 ||

1249 
£rvî
.
z£t_max_zùli°_vÆue
 < 
	`sd¶í
(
c
->
¨gv
[
sc‹eidx
+1]->
±r
))

1251 
zobj
 = 
	`¸óãZ£tObje˘
();

1253 
zobj
 = 
	`¸óãZ£tZùli°Obje˘
();

1255 
	`dbAdd
(
c
->
db
,
key
,
zobj
);

1257 i‡(
zobj
->
ty≥
 !
OBJ_ZSET
) {

1258 
	`u∆ockDb
(
c
->
db
);

1259 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1260 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

1261 
˛ónup
;

1265 
j
 = 0; j < 
ñemíts
; j++) {

1266 
sc‹e
 = 
sc‹es
[
j
];

1268 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1269 *
ïå
;

1272 
ñe
 = 
c
->
¨gv
[
sc‹eidx
+1+
j
*2];

1273 i‡((
ïå
 = 
	`zzlFöd
(
zobj
->
±r
,
ñe
,&
cursc‹e
)Ë!
NULL
) {

1274 i‡(
nx
) ;

1275 i‡(
ö¸
) {

1276 
sc‹e
 +
cursc‹e
;

1277 i‡(
	`i¢™
(
sc‹e
)) {

1278 
	`u∆ockDb
(
c
->
db
);

1279 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1280 
	`addRïlyEº‹
(
c
,
«√º
);

1281 
˛ónup
;

1286 i‡(
sc‹e
 !
cursc‹e
) {

1287 
zobj
->
±r
 = 
	`zzlDñëe
(zobj->±r,
ïå
);

1288 
zobj
->
±r
 = 
	`zzlIn£π
(zobj->±r,
ñe
,
sc‹e
);

1289 
c
->
vñ
->
dúty
++;

1290 
upd©ed
++;

1292 
¥o˚s£d
++;

1293 } i‡(!
xx
) {

1296 
zobj
->
±r
 = 
	`zzlIn£π
(zobj->±r,
ñe
,
sc‹e
);

1297 i‡(
	`zzlLígth
(
zobj
->
±r
Ë> 
£rvî
.
z£t_max_zùli°_íåõs
)

1298 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_SKIPLIST
);

1299 i‡(
	`sd¶í
(
ñe
->
±r
Ë> 
£rvî
.
z£t_max_zùli°_vÆue
)

1300 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_SKIPLIST
);

1301 
c
->
vñ
->
dúty
++;

1302 
added
++;

1303 
¥o˚s£d
++;

1305 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1306 
z£t
 *
zs
 = 
zobj
->
±r
;

1307 
zskùli°Node
 *
znode
;

1308 
di˘E¡ry
 *
de
;

1310 
ñe
 = 
c
->
¨gv
[
sc‹eidx
+1+
j
*2] =

1311 
	`åyObje˘Encodög
(
c
->
¨gv
[
sc‹eidx
+1+
j
*2]);

1312 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
ñe
);

1313 i‡(
de
 !
NULL
) {

1314 i‡(
nx
) ;

1315 
curobj
 = 
	`di˘GëKey
(
de
);

1316 
cursc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1318 i‡(
ö¸
) {

1319 
sc‹e
 +
cursc‹e
;

1320 i‡(
	`i¢™
(
sc‹e
)) {

1321 
	`u∆ockDb
(
c
->
db
);

1322 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1323 
	`addRïlyEº‹
(
c
,
«√º
);

1326 
˛ónup
;

1333 i‡(
sc‹e
 !
cursc‹e
) {

1334 
	`£rvîAs£πWôhInfo
(
c
,
curobj
,
	`z¶Dñëe
(
zs
->
z¶
,
cursc‹e
,curobj));

1335 
znode
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
curobj
);

1336 
	`di˘GëVÆ
(
de
Ë&
znode
->
sc‹e
;

1337 
c
->
vñ
->
dúty
++;

1338 
upd©ed
++;

1340 
¥o˚s£d
++;

1341 } i‡(!
xx
) {

1342 
ñe
 = 
	`dupSåögObje˘Unc⁄°™t
(ele);

1343 
znode
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
ñe
);

1344 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
	`di˘Add
(
zs
->
di˘
,
ñe
,&
znode
->
sc‹e
Ë=
DICT_OK
);

1345 
c
->
vñ
->
dúty
++;

1346 
added
++;

1347 
¥o˚s£d
++;

1350 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1354 
	`u∆ockDb
(
c
->
db
);

1355 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1357 
ª∂y_to_˛õ¡
:

1358 i‡(
ö¸
) {

1359 i‡(
¥o˚s£d
)

1360 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

1362 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1364 
	`addRïlyL⁄gL⁄g
(
c
,
ch
 ? 
added
+
upd©ed
 :ádded);

1367 
˛ónup
:

1368 
	`d‰ì
(
sc‹es
);

1369 i‡(
added
 || 
upd©ed
) {

1370 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1371 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,

1372 
ö¸
 ? "zö¸" : "zadd", 
key
, 
c
->
db
->
id
);

1374 
	}
}

1376 
	$zaddComm™d
(
˛õ¡
 *
c
) {

1377 
	`zaddGíîicComm™d
(
c
,
ZADD_NONE
);

1378 
	}
}

1380 
	$zö¸byComm™d
(
˛õ¡
 *
c
) {

1381 
	`zaddGíîicComm™d
(
c
,
ZADD_INCR
);

1382 
	}
}

1384 
	$zªmComm™d
(
˛õ¡
 *
c
) {

1385 
robj
 *
key
 = 
c
->
¨gv
[1];

1386 
robj
 *
zobj
;

1387 
dñëed
 = 0, 
keyªmoved
 = 0, 
j
;

1388 
expúed
 = 0;

1390 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1391 
	`lockDbWrôe
(
c
->
db
);

1392 i‡((
zobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

1393 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

1394 
	`u∆ockDb
(
c
->
db
);

1395 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1399 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1400 *
ïå
;

1402 
j
 = 2; j < 
c
->
¨gc
; j++) {

1403 i‡((
ïå
 = 
	`zzlFöd
(
zobj
->
±r
,
c
->
¨gv
[
j
],
NULL
)) != NULL) {

1404 
dñëed
++;

1405 
zobj
->
±r
 = 
	`zzlDñëe
(zobj->±r,
ïå
);

1406 i‡(
	`zzlLígth
(
zobj
->
±r
) == 0) {

1407 
	`dbDñëe
(
c
->
db
,
key
);

1408 
keyªmoved
 = 1;

1413 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1414 
z£t
 *
zs
 = 
zobj
->
±r
;

1415 
di˘E¡ry
 *
de
;

1416 
sc‹e
;

1418 
j
 = 2; j < 
c
->
¨gc
; j++) {

1419 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
c
->
¨gv
[
j
]);

1420 i‡(
de
 !
NULL
) {

1421 
dñëed
++;

1424 
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1425 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[
j
],
	`z¶Dñëe
(
zs
->
z¶
,
sc‹e
,c->argv[j]));

1428 
	`di˘Dñëe
(
zs
->
di˘
,
c
->
¨gv
[
j
]);

1429 i‡(
	`htNìdsResize
(
zs
->
di˘
)Ë
	`di˘Resize
(zs->dict);

1430 i‡(
	`di˘Size
(
zs
->
di˘
) == 0) {

1431 
	`dbDñëe
(
c
->
db
,
key
);

1432 
keyªmoved
 = 1;

1438 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1441 i‡(
dñëed
) {

1442 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,"zªm",
key
,
c
->
db
->
id
);

1443 i‡(
keyªmoved
)

1444 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1445 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1446 
c
->
vñ
->
dúty
 +
dñëed
;

1448 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

1449 
	`u∆ockDb
(
c
->
db
);

1450 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1451 
	}
}

1454 
	#ZRANGE_RANK
 0

	)

1455 
	#ZRANGE_SCORE
 1

	)

1456 
	#ZRANGE_LEX
 2

	)

1457 
	$zªmøngeGíîicComm™d
(
˛õ¡
 *
c
, 
øngëy≥
) {

1458 
robj
 *
key
 = 
c
->
¨gv
[1];

1459 
robj
 *
zobj
;

1460 
keyªmoved
 = 0;

1461 
dñëed
 = 0;

1462 
zønge•ec
 
ønge
;

1463 
zÀxønge•ec
 
Àxønge
;

1464 
°¨t
, 
íd
, 
Œí
;

1465 
expúed
 = 0;

1468 i‡(
øngëy≥
 =
ZRANGE_RANK
) {

1469 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
) ||

1470 (
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
))

1472 } i‡(
øngëy≥
 =
ZRANGE_SCORE
) {

1473 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

1474 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

1477 } i‡(
øngëy≥
 =
ZRANGE_LEX
) {

1478 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[2],c->¨gv[3],&
Àxønge
Ë!
VR_OK
) {

1479 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

1484 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1485 
	`lockDbWrôe
(
c
->
db
);

1487 i‡((
zobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

1488 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)Ë
˛ónup
;

1490 i‡(
øngëy≥
 =
ZRANGE_RANK
) {

1492 
Œí
 = 
	`z£tLígth
(
zobj
);

1493 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

1494 i‡(
íd
 < 0Ëíd = 
Œí
+end;

1495 i‡(
°¨t
 < 0) start = 0;

1499 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

1500 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1501 
˛ónup
;

1503 i‡(
íd
 >
Œí
)Énd =Ülen-1;

1507 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1508 
øngëy≥
) {

1509 
ZRANGE_RANK
:

1510 
zobj
->
±r
 = 
	`zzlDñëeR™geByR™k
(zobj->±r,
°¨t
+1,
íd
+1,&
dñëed
);

1512 
ZRANGE_SCORE
:

1513 
zobj
->
±r
 = 
	`zzlDñëeR™geBySc‹e
(zobj->±r,&
ønge
,&
dñëed
);

1515 
ZRANGE_LEX
:

1516 
zobj
->
±r
 = 
	`zzlDñëeR™geByLex
(zobj->±r,&
Àxønge
,&
dñëed
);

1519 i‡(
	`zzlLígth
(
zobj
->
±r
) == 0) {

1520 
	`dbDñëe
(
c
->
db
,
key
);

1521 
keyªmoved
 = 1;

1523 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1524 
z£t
 *
zs
 = 
zobj
->
±r
;

1525 
øngëy≥
) {

1526 
ZRANGE_RANK
:

1527 
dñëed
 = 
	`z¶DñëeR™geByR™k
(
zs
->
z¶
,
°¨t
+1,
íd
+1,zs->
di˘
);

1529 
ZRANGE_SCORE
:

1530 
dñëed
 = 
	`z¶DñëeR™geBySc‹e
(
zs
->
z¶
,&
ønge
,zs->
di˘
);

1532 
ZRANGE_LEX
:

1533 
dñëed
 = 
	`z¶DñëeR™geByLex
(
zs
->
z¶
,&
Àxønge
,zs->
di˘
);

1536 i‡(
	`htNìdsResize
(
zs
->
di˘
)Ë
	`di˘Resize
(zs->dict);

1537 i‡(
	`di˘Size
(
zs
->
di˘
) == 0) {

1538 
	`dbDñëe
(
c
->
db
,
key
);

1539 
keyªmoved
 = 1;

1542 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1546 i‡(
dñëed
) {

1547 *
evít
[3] = {"zremrangebyrank","zremrangebyscore","zremrangebylex"};

1548 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1549 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,
evít
[
øngëy≥
],
key
,
c
->
db
->
id
);

1550 i‡(
keyªmoved
)

1551 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1553 
c
->
vñ
->
dúty
 +
dñëed
;

1554 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

1556 
˛ónup
:

1557 i‡(
øngëy≥
 =
ZRANGE_LEX
Ë
	`z¶FªeLexR™ge
(&
Àxønge
);

1558 
	`u∆ockDb
(
c
->
db
);

1559 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1560 
	}
}

1562 
	$zªmøngebyønkComm™d
(
˛õ¡
 *
c
) {

1563 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_RANK
);

1564 
	}
}

1566 
	$zªmøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

1567 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_SCORE
);

1568 
	}
}

1570 
	$zªmøngebyÀxComm™d
(
˛õ¡
 *
c
) {

1571 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_LEX
);

1572 
	}
}

1580 
	#OPVAL_DIRTY_ROBJ
 1

	)

1581 
	#OPVAL_DIRTY_LL
 2

	)

1582 
	#OPVAL_VALID_LL
 4

	)

1584 
_ôî£t
 
	tôî£t
;

1585 
_ôîz£t
 
	tôîz£t
;

1587 
	$zuiInôIãøt‹
(
z£t›§c
 *
›
) {

1588 i‡(
›
->
subje˘
 =
NULL
)

1591 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1592 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1593 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1594 
ô
->
is
.i†
›
->
subje˘
->
±r
;

1595 
ô
->
is
.
ii
 = 0;

1596 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1597 
ô
->
ht
.
di˘
 = 
›
->
subje˘
->
±r
;

1598 
ô
->
ht
.
di
 = 
	`di˘GëIãøt‹
(
›
->
subje˘
->
±r
);

1599 
ô
->
ht
.
de
 = 
	`di˘Next
(ô->ht.
di
);

1601 
	`£rvîP™ic
("Unknown setÉncoding");

1603 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1604 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1605 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1606 
ô
->
zl
.z»
›
->
subje˘
->
±r
;

1607 
ô
->
zl
.
ïå
 = 
	`zùli°Index
(it->zl.zl,0);

1608 i‡(
ô
->
zl
.
ïå
 !
NULL
) {

1609 
ô
->
zl
.
•å
 = 
	`zùli°Next
(ô->zl.zl,ô->zl.
ïå
);

1610 
	`ASSERT
(
ô
->
zl
.
•å
 !
NULL
);

1612 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1613 
ô
->
¶
.
zs
 = 
›
->
subje˘
->
±r
;

1614 
ô
->
¶
.
node
 = it->¶.
zs
->
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

1616 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1619 
	`£rvîP™ic
("UnsupportedÅype");

1621 
	}
}

1623 
	$zuiCÀ¨Iãøt‹
(
z£t›§c
 *
›
) {

1624 i‡(
›
->
subje˘
 =
NULL
)

1627 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1628 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1629 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1630 
	`UNUSED
(
ô
);

1631 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1632 
	`di˘Rñó£Iãøt‹
(
ô
->
ht
.
di
);

1634 
	`£rvîP™ic
("Unknown setÉncoding");

1636 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1637 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1638 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1639 
	`UNUSED
(
ô
);

1640 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1641 
	`UNUSED
(
ô
);

1643 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1646 
	`£rvîP™ic
("UnsupportedÅype");

1648 
	}
}

1650 
	$zuiLígth
(
z£t›§c
 *
›
) {

1651 i‡(
›
->
subje˘
 =
NULL
)

1654 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1655 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1656  
	`öt£tLí
(
›
->
subje˘
->
±r
);

1657 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1658 
di˘
 *
ht
 = 
›
->
subje˘
->
±r
;

1659  
	`di˘Size
(
ht
);

1661 
	`£rvîP™ic
("Unknown setÉncoding");

1663 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1664 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1665  
	`zzlLígth
(
›
->
subje˘
->
±r
);

1666 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1667 
z£t
 *
zs
 = 
›
->
subje˘
->
±r
;

1668  
zs
->
z¶
->
Àngth
;

1670 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1673 
	`£rvîP™ic
("UnsupportedÅype");

1675 
	}
}

1680 
	$zuiNext
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
) {

1681 
ªt
;

1683 i‡(
›
->
subje˘
 =
NULL
)

1686 i‡(
vÆ
->
Êags
 & 
OPVAL_DIRTY_ROBJ
)

1687 
	`de¸RefCou¡
(
vÆ
->
ñe
);

1689 
	`mem£t
(
vÆ
,0,(
z£t›vÆ
));

1691 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1692 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1693 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1694 
öt64_t
 
ñl
;

1696 i‡(!
	`öt£tGë
(
ô
->
is
.is,ô->is.
ii
,&
ñl
))

1698 
vÆ
->
ñl
 =Éll;

1699 
vÆ
->
sc‹e
 = 1.0;

1702 
ô
->
is
.
ii
++;

1703 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1704 i‡(
ô
->
ht
.
de
 =
NULL
)

1706 
vÆ
->
ñe
 = 
	`di˘GëKey
(
ô
->
ht
.
de
);

1707 
vÆ
->
sc‹e
 = 1.0;

1710 
ô
->
ht
.
de
 = 
	`di˘Next
(ô->ht.
di
);

1712 
	`£rvîP™ic
("Unknown setÉncoding");

1714 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1715 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1716 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1718 i‡(
ô
->
zl
.
ïå
 =
NULL
 || it->zl.
•å
 == NULL)

1720 
ªt
 = (Ë
	`zùli°Gë
(
ô
->
zl
.
ïå
,&
vÆ
->
e°r
,&vÆ->
ñí
,&vÆ->
ñl
);

1721 
	`ASSERT
(
ªt
 > 0);

1722 
vÆ
->
sc‹e
 = 
	`zzlGëSc‹e
(
ô
->
zl
.
•å
);

1725 
	`zzlNext
(
ô
->
zl
.zl,&ô->zl.
ïå
,&ô->zl.
•å
);

1726 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1727 i‡(
ô
->
¶
.
node
 =
NULL
)

1729 
vÆ
->
ñe
 = 
ô
->
¶
.
node
->
obj
;

1730 
vÆ
->
sc‹e
 = 
ô
->
¶
.
node
->score;

1733 
ô
->
¶
.
node
 = it->¶.node->
Àvñ
[0].
f‹w¨d
;

1735 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1738 
	`£rvîP™ic
("UnsupportedÅype");

1741 
	}
}

1743 
	$zuiL⁄gL⁄gFromVÆue
(
z£t›vÆ
 *
vÆ
) {

1744 i‡(!(
vÆ
->
Êags
 & 
OPVAL_DIRTY_LL
)) {

1745 
vÆ
->
Êags
 |
OPVAL_DIRTY_LL
;

1747 i‡(
vÆ
->
ñe
 !
NULL
) {

1748 i‡(
vÆ
->
ñe
->
ícodög
 =
OBJ_ENCODING_INT
) {

1749 
vÆ
->
ñl
 = ()vÆ->
ñe
->
±r
;

1750 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1751 } i‡(
	`sdsEncodedObje˘
(
vÆ
->
ñe
)) {

1752 i‡(
	`°rög2Œ
(
vÆ
->
ñe
->
±r
,
	`sd¶í
(vÆ->ñe->±r),&vÆ->
ñl
))

1753 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1755 
	`£rvîP™ic
("UnsupportedÉlementÉncoding");

1757 } i‡(
vÆ
->
e°r
 !
NULL
) {

1758 i‡(
	`°rög2Œ
((*)
vÆ
->
e°r
,vÆ->
ñí
,&vÆ->
ñl
))

1759 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1762 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1765  
vÆ
->
Êags
 & 
OPVAL_VALID_LL
;

1766 
	}
}

1768 
robj
 *
	$zuiObje˘FromVÆue
(
z£t›vÆ
 *
vÆ
) {

1769 i‡(
vÆ
->
ñe
 =
NULL
) {

1770 i‡(
vÆ
->
e°r
 !
NULL
) {

1771 
vÆ
->
ñe
 = 
	`¸óãSåögObje˘
((*)vÆ->
e°r
,vÆ->
ñí
);

1773 
vÆ
->
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(vÆ->
ñl
);

1775 
vÆ
->
Êags
 |
OPVAL_DIRTY_ROBJ
;

1777  
vÆ
->
ñe
;

1778 
	}
}

1780 
	$zuiBuf„rFromVÆue
(
z£t›vÆ
 *
vÆ
) {

1781 i‡(
vÆ
->
e°r
 =
NULL
) {

1782 i‡(
vÆ
->
ñe
 !
NULL
) {

1783 i‡(
vÆ
->
ñe
->
ícodög
 =
OBJ_ENCODING_INT
) {

1784 
vÆ
->
ñí
 = 
	`Œ2°rög
((*)vÆ->
_buf
,(vÆ->_buf),()vÆ->
ñe
->
±r
);

1785 
vÆ
->
e°r
 = vÆ->
_buf
;

1786 } i‡(
	`sdsEncodedObje˘
(
vÆ
->
ñe
)) {

1787 
vÆ
->
ñí
 = 
	`sd¶í
(vÆ->
ñe
->
±r
);

1788 
vÆ
->
e°r
 = vÆ->
ñe
->
±r
;

1790 
	`£rvîP™ic
("UnsupportedÉlementÉncoding");

1793 
vÆ
->
ñí
 = 
	`Œ2°rög
((*)vÆ->
_buf
,(vÆ->_buf),vÆ->
ñl
);

1794 
vÆ
->
e°r
 = vÆ->
_buf
;

1798 
	}
}

1802 
	$zuiFöd
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
, *
sc‹e
) {

1803 i‡(
›
->
subje˘
 =
NULL
)

1806 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1807 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1808 i‡(
	`zuiL⁄gL⁄gFromVÆue
(
vÆ
) &&

1809 
	`öt£tFöd
(
›
->
subje˘
->
±r
,
vÆ
->
ñl
))

1811 *
sc‹e
 = 1.0;

1816 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1817 
di˘
 *
ht
 = 
›
->
subje˘
->
±r
;

1818 
	`zuiObje˘FromVÆue
(
vÆ
);

1819 i‡(
	`di˘Föd
(
ht
,
vÆ
->
ñe
Ë!
NULL
) {

1820 *
sc‹e
 = 1.0;

1826 
	`£rvîP™ic
("Unknown setÉncoding");

1828 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1829 
	`zuiObje˘FromVÆue
(
vÆ
);

1831 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1832 i‡(
	`zzlFöd
(
›
->
subje˘
->
±r
,
vÆ
->
ñe
,
sc‹e
Ë!
NULL
) {

1838 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1839 
z£t
 *
zs
 = 
›
->
subje˘
->
±r
;

1840 
di˘E¡ry
 *
de
;

1841 i‡((
de
 = 
	`di˘Föd
(
zs
->
di˘
,
vÆ
->
ñe
)Ë!
NULL
) {

1842 *
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1848 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1851 
	`£rvîP™ic
("UnsupportedÅype");

1853 
	}
}

1855 
	$zuiCom∑ªByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

1856  
	`zuiLígth
((
z£t›§c
*)
s1
Ë- zuiLígth((z£t›§c*)
s2
);

1857 
	}
}

1859 
	#REDIS_AGGR_SUM
 1

	)

1860 
	#REDIS_AGGR_MIN
 2

	)

1861 
	#REDIS_AGGR_MAX
 3

	)

1862 
	#zuni⁄I¡îDi˘VÆue
(
_e
Ë(
	`di˘GëVÆ
(_eË=
NULL
 ? 1.0 : *(*)di˘GëVÆ(_e))

	)

1864 
ölöe
 
	$zuni⁄I¡îAggªg©e
(*
èrgë
, 
vÆ
, 
aggªg©e
) {

1865 i‡(
aggªg©e
 =
REDIS_AGGR_SUM
) {

1866 *
èrgë
 = *èrgë + 
vÆ
;

1870 i‡(
	`i¢™
(*
èrgë
)) *target = 0.0;

1871 } i‡(
aggªg©e
 =
REDIS_AGGR_MIN
) {

1872 *
èrgë
 = 
vÆ
 < *target ? val : *target;

1873 } i‡(
aggªg©e
 =
REDIS_AGGR_MAX
) {

1874 *
èrgë
 = 
vÆ
 > *target ? val : *target;

1877 
	`£rvîP™ic
("Unknown ZUNION/INTERággregateÅype");

1879 
	}
}

1881 
	#SET_OP_UNION
 0

	)

1882 
	#SET_OP_DIFF
 1

	)

1883 
	#SET_OP_INTER
 2

	)

1885 
	$zuni⁄I¡îGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
d°key
, 
›
) {

1886 
i
, 
j
;

1887 
£äum
;

1888 
aggªg©e
 = 
REDIS_AGGR_SUM
;

1889 
z£t›§c
 *
§c
;

1890 
z£t›vÆ
 
zvÆ
;

1891 
robj
 *
tmp
;

1892 
maxññí
 = 0;

1893 
robj
 *
d°obj
;

1894 
z£t
 *
d°z£t
;

1895 
zskùli°Node
 *
znode
;

1896 
touched
 = 0;

1899 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
£äum
, 
NULL
Ë!
VR_OK
))

1902 i‡(
£äum
 < 1) {

1903 
	`addRïlyEº‹
(
c
,

1909 i‡(
£äum
 > 
c
->
¨gc
-3) {

1910 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1915 
§c
 = 
	`dˇŒoc
(
£äum
, (
z£t›§c
));

1916 
i
 = 0, 
j
 = 3; i < 
£äum
; i++, j++) {

1917 
robj
 *
obj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
);

1918 i‡(
obj
 !
NULL
) {

1919 i‡(
obj
->
ty≥
 !
OBJ_ZSET
 && obj->ty≥ !
OBJ_SET
) {

1920 
	`d‰ì
(
§c
);

1921 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

1925 
§c
[
i
].
subje˘
 = 
obj
;

1926 
§c
[
i
].
ty≥
 = 
obj
->type;

1927 
§c
[
i
].
ícodög
 = 
obj
->encoding;

1929 
§c
[
i
].
subje˘
 = 
NULL
;

1933 
§c
[
i
].
weight
 = 1.0;

1937 i‡(
j
 < 
c
->
¨gc
) {

1938 
ªmaöög
 = 
c
->
¨gc
 - 
j
;

1940 
ªmaöög
) {

1941 i‡(
ªmaöög
 >(
£äum
 + 1Ë&& !
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"weights")) {

1942 
j
++; 
ªmaöög
--;

1943 
i
 = 0; i < 
£äum
; i++, 
j
++, 
ªmaöög
--) {

1944 i‡(
	`gëDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[
j
],&
§c
[
i
].
weight
,

1945 "weighàvÆuêi†nŸá flﬂt"Ë!
VR_OK
)

1947 
	`d‰ì
(
§c
);

1951 } i‡(
ªmaöög
 >2 && !
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"aggregate")) {

1952 
j
++; 
ªmaöög
--;

1953 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"sum")) {

1954 
aggªg©e
 = 
REDIS_AGGR_SUM
;

1955 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"min")) {

1956 
aggªg©e
 = 
REDIS_AGGR_MIN
;

1957 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"max")) {

1958 
aggªg©e
 = 
REDIS_AGGR_MAX
;

1960 
	`d‰ì
(
§c
);

1961 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1964 
j
++; 
ªmaöög
--;

1966 
	`d‰ì
(
§c
);

1967 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1975 
	`qs‹t
(
§c
,
£äum
,(
z£t›§c
),
zuiCom∑ªByC¨döÆôy
);

1977 
d°obj
 = 
	`¸óãZ£tObje˘
();

1978 
d°z£t
 = 
d°obj
->
±r
;

1979 
	`mem£t
(&
zvÆ
, 0, (zval));

1981 i‡(
›
 =
SET_OP_INTER
) {

1983 i‡(
	`zuiLígth
(&
§c
[0]) > 0) {

1986 
	`zuiInôIãøt‹
(&
§c
[0]);

1987 
	`zuiNext
(&
§c
[0],&
zvÆ
)) {

1988 
sc‹e
, 
vÆue
;

1990 
sc‹e
 = 
§c
[0].
weight
 * 
zvÆ
.score;

1991 i‡(
	`i¢™
(
sc‹e
)) score = 0;

1993 
j
 = 1; j < 
£äum
; j++) {

1996 i‡(
§c
[
j
].
subje˘
 == src[0].subject) {

1997 
vÆue
 = 
zvÆ
.
sc‹e
*
§c
[
j
].
weight
;

1998 
	`zuni⁄I¡îAggªg©e
(&
sc‹e
,
vÆue
,
aggªg©e
);

1999 } i‡(
	`zuiFöd
(&
§c
[
j
],&
zvÆ
,&
vÆue
)) {

2000 
vÆue
 *
§c
[
j
].
weight
;

2001 
	`zuni⁄I¡îAggªg©e
(&
sc‹e
,
vÆue
,
aggªg©e
);

2008 i‡(
j
 =
£äum
) {

2009 
tmp
 = 
	`zuiObje˘FromVÆue
(&
zvÆ
);

2010 
znode
 = 
	`z¶In£π
(
d°z£t
->
z¶
,
sc‹e
,
tmp
);

2011 
	`ö¸RefCou¡
(
tmp
);

2012 
	`di˘Add
(
d°z£t
->
di˘
,
tmp
,&
znode
->
sc‹e
);

2013 
	`ö¸RefCou¡
(
tmp
);

2015 i‡(
	`sdsEncodedObje˘
(
tmp
)) {

2016 i‡(
	`sd¶í
(
tmp
->
±r
Ë> 
maxññí
)

2017 
maxññí
 = 
	`sd¶í
(
tmp
->
±r
);

2021 
	`zuiCÀ¨Iãøt‹
(&
§c
[0]);

2023 } i‡(
›
 =
SET_OP_UNION
) {

2024 
di˘
 *
accumuœt‹
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

2025 
di˘Iãøt‹
 *
di
;

2026 
di˘E¡ry
 *
de
;

2027 
sc‹e
;

2029 i‡(
£äum
) {

2032 
	`di˘Ex∑nd
(
accumuœt‹
,
	`zuiLígth
(&
§c
[
£äum
-1]));

2037 
i
 = 0; i < 
£äum
; i++) {

2038 i‡(
	`zuiLígth
(&
§c
[
i
]) == 0) ;

2040 
	`zuiInôIãøt‹
(&
§c
[
i
]);

2041 
	`zuiNext
(&
§c
[
i
],&
zvÆ
)) {

2043 
sc‹e
 = 
§c
[
i
].
weight
 * 
zvÆ
.score;

2044 i‡(
	`i¢™
(
sc‹e
)) score = 0;

2047 
de
 = 
	`di˘Föd
(
accumuœt‹
,
	`zuiObje˘FromVÆue
(&
zvÆ
));

2049 i‡(
de
 =
NULL
) {

2050 
tmp
 = 
	`zuiObje˘FromVÆue
(&
zvÆ
);

2054 i‡(
	`sdsEncodedObje˘
(
tmp
)) {

2055 i‡(
	`sd¶í
(
tmp
->
±r
Ë> 
maxññí
)

2056 
maxññí
 = 
	`sd¶í
(
tmp
->
±r
);

2059 
de
 = 
	`di˘AddRaw
(
accumuœt‹
,
tmp
);

2060 
	`ö¸RefCou¡
(
tmp
);

2061 
	`di˘SëDoubÀVÆ
(
de
,
sc‹e
);

2069 
	`zuni⁄I¡îAggªg©e
(&
de
->
v
.
d
,
sc‹e
,
aggªg©e
);

2072 
	`zuiCÀ¨Iãøt‹
(&
§c
[
i
]);

2076 
di
 = 
	`di˘GëIãøt‹
(
accumuœt‹
);

2081 
	`di˘Ex∑nd
(
d°z£t
->
di˘
,
	`di˘Size
(
accumuœt‹
));

2083 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

2084 
robj
 *
ñe
 = 
	`di˘GëKey
(
de
);

2085 
sc‹e
 = 
	`di˘GëDoubÀVÆ
(
de
);

2086 
znode
 = 
	`z¶In£π
(
d°z£t
->
z¶
,
sc‹e
,
ñe
);

2087 
	`ö¸RefCou¡
(
ñe
);

2088 
	`di˘Add
(
d°z£t
->
di˘
,
ñe
,&
znode
->
sc‹e
);

2089 
	`ö¸RefCou¡
(
ñe
);

2091 
	`di˘Rñó£Iãøt‹
(
di
);

2094 
	`di˘Rñó£
(
accumuœt‹
);

2096 
	`£rvîP™ic
("Unknown operator");

2099 i‡(
	`dbDñëe
(
c
->
db
,
d°key
)) {

2100 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

2101 
touched
 = 1;

2102 
£rvî
.
dúty
++;

2104 i‡(
d°z£t
->
z¶
->
Àngth
) {

2105 
	`z£tC⁄vîtToZùli°IfNìded
(
d°obj
,
maxññí
);

2106 
	`dbAdd
(
c
->
db
,
d°key
,
d°obj
);

2107 
	`addRïlyL⁄gL⁄g
(
c
,
	`z£tLígth
(
d°obj
));

2108 i‡(!
touched
Ë
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

2109 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,

2110 (
›
 =
SET_OP_UNION
) ? "zunionstore" : "zinterstore",

2111 
d°key
,
c
->
db
->
id
);

2112 
£rvî
.
dúty
++;

2114 
	`de¸RefCou¡
(
d°obj
);

2115 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

2116 i‡(
touched
)

2117 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
d°key
,
c
->
db
->
id
);

2119 
	`d‰ì
(
§c
);

2120 
	}
}

2122 
	$zuni⁄°‹eComm™d
(
˛õ¡
 *
c
) {

2123 
	`zuni⁄I¡îGíîicComm™d
(
c
,c->
¨gv
[1], 
SET_OP_UNION
);

2124 
	}
}

2126 
	$zöãr°‹eComm™d
(
˛õ¡
 *
c
) {

2127 
	`zuni⁄I¡îGíîicComm™d
(
c
,c->
¨gv
[1], 
SET_OP_INTER
);

2128 
	}
}

2130 
	$zøngeGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2131 
robj
 *
key
 = 
c
->
¨gv
[1];

2132 
robj
 *
zobj
;

2133 
wôhsc‹es
 = 0;

2134 
°¨t
;

2135 
íd
;

2136 
Œí
;

2137 
øngñí
;

2139 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

2140 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

2142 i‡(
c
->
¨gc
 =5 && !
	`°rˇ£cmp
(c->
¨gv
[4]->
±r
,"withscores")) {

2143 
wôhsc‹es
 = 1;

2144 } i‡(
c
->
¨gc
 >= 5) {

2145 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2149 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2150 
	`lockDbRód
(
c
->
db
);

2151 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

2152 
	`u∆ockDb
(
c
->
db
);

2153 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2155 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2156 
	`u∆ockDb
(
c
->
db
);

2157 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2162 
Œí
 = 
	`z£tLígth
(
zobj
);

2163 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

2164 i‡(
íd
 < 0Ëíd = 
Œí
+end;

2165 i‡(
°¨t
 < 0) start = 0;

2169 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

2170 
	`u∆ockDb
(
c
->
db
);

2171 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2172 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

2175 i‡(
íd
 >
Œí
)Énd =Ülen-1;

2176 
øngñí
 = (
íd
-
°¨t
)+1;

2179 
	`addRïlyMu…iBulkLí
(
c
, 
wôhsc‹es
 ? (
øngñí
*2) :Ñangelen);

2181 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2182 *
zl
 = 
zobj
->
±r
;

2183 *
ïå
, *
•å
;

2184 *
v°r
;

2185 
vÀn
;

2186 
vl⁄g
;

2188 i‡(
ªvî£
)

2189 
ïå
 = 
	`zùli°Index
(
zl
,-2-(2*
°¨t
));

2191 
ïå
 = 
	`zùli°Index
(
zl
,2*
°¨t
);

2193 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2194 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2196 
øngñí
--) {

2197 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
 && 
•å
 != NULL);

2198 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2199 i‡(
v°r
 =
NULL
)

2200 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2202 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2204 i‡(
wôhsc‹es
)

2205 
	`addRïlyDoubÀ
(
c
,
	`zzlGëSc‹e
(
•å
));

2207 i‡(
ªvî£
)

2208 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2210 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2213 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2214 
z£t
 *
zs
 = 
zobj
->
±r
;

2215 
zskùli°
 *
z¶
 = 
zs
->zsl;

2216 
zskùli°Node
 *
 
;

2217 
robj
 *
ñe
;

2220 i‡(
ªvî£
) {

2221 
 
 = 
z¶
->
èû
;

2222 i‡(
°¨t
 > 0)

2223 
 
 = 
	`z¶GëEÀmítByR™k
(
z¶
,
Œí
-
°¨t
);

2225 
 
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

2226 i‡(
°¨t
 > 0)

2227 
 
 = 
	`z¶GëEÀmítByR™k
(
z¶
,
°¨t
+1);

2230 
øngñí
--) {

2231 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
 
 !
NULL
);

2232 
ñe
 = 
 
->
obj
;

2233 
	`addRïlyBulk
(
c
,
ñe
);

2234 i‡(
wôhsc‹es
)

2235 
	`addRïlyDoubÀ
(
c
,
 
->
sc‹e
);

2236 
 
 = 
ªvî£
 ?Ün->
backw¨d
 :Ün->
Àvñ
[0].
f‹w¨d
;

2239 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2242 
	`u∆ockDb
(
c
->
db
);

2243 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2244 
	}
}

2246 
	$zøngeComm™d
(
˛õ¡
 *
c
) {

2247 
	`zøngeGíîicComm™d
(
c
,0);

2248 
	}
}

2250 
	$zªvøngeComm™d
(
˛õ¡
 *
c
) {

2251 
	`zøngeGíîicComm™d
(
c
,1);

2252 
	}
}

2255 
	$gíîicZøngebysc‹eComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2256 
zønge•ec
 
ønge
;

2257 
robj
 *
key
 = 
c
->
¨gv
[1];

2258 
robj
 *
zobj
;

2259 
off£t
 = 0, 
limô
 = -1;

2260 
wôhsc‹es
 = 0;

2261 
øngñí
 = 0;

2262 *
ª∂yÀn
 = 
NULL
;

2263 
möidx
, 
maxidx
;

2266 i‡(
ªvî£
) {

2268 
maxidx
 = 2; 
möidx
 = 3;

2271 
möidx
 = 2; 
maxidx
 = 3;

2274 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[
möidx
],c->¨gv[
maxidx
],&
ønge
Ë!
VR_OK
) {

2275 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

2281 i‡(
c
->
¨gc
 > 4) {

2282 
ªmaöög
 = 
c
->
¨gc
 - 4;

2283 
pos
 = 4;

2285 
ªmaöög
) {

2286 i‡(
ªmaöög
 >1 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"withscores")) {

2287 
pos
++; 
ªmaöög
--;

2288 
wôhsc‹es
 = 1;

2289 } i‡(
ªmaöög
 >3 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"limit")) {

2290 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+1], &
off£t
, 
NULL
Ë!
VR_OK
) ||

2291 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+2], &
limô
, 
NULL
Ë!
VR_OK
)) ;

2292 
pos
 +3; 
ªmaöög
 -= 3;

2294 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2300 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2301 
	`lockDbRód
(
c
->
db
);

2303 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

2304 
	`u∆ockDb
(
c
->
db
);

2305 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2307 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2308 
	`u∆ockDb
(
c
->
db
);

2309 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2313 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2314 *
zl
 = 
zobj
->
±r
;

2315 *
ïå
, *
•å
;

2316 *
v°r
;

2317 
vÀn
;

2318 
vl⁄g
;

2319 
sc‹e
;

2322 i‡(
ªvî£
) {

2323 
ïå
 = 
	`zzlLa°InR™ge
(
zl
,&
ønge
);

2325 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,&
ønge
);

2329 i‡(
ïå
 =
NULL
) {

2330 
	`u∆ockDb
(
c
->
db
);

2331 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2332 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2337 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2338 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2343 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2347 
ïå
 && 
off£t
--) {

2348 i‡(
ªvî£
) {

2349 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2351 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2355 
ïå
 && 
limô
--) {

2356 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2359 i‡(
ªvî£
) {

2360 i‡(!
	`z¶VÆueGãMö
(
sc‹e
,&
ønge
)) ;

2362 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
)) ;

2366 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2368 
øngñí
++;

2369 i‡(
v°r
 =
NULL
) {

2370 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2372 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2375 i‡(
wôhsc‹es
) {

2376 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

2380 i‡(
ªvî£
) {

2381 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2383 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2386 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2387 
z£t
 *
zs
 = 
zobj
->
±r
;

2388 
zskùli°
 *
z¶
 = 
zs
->zsl;

2389 
zskùli°Node
 *
 
;

2392 i‡(
ªvî£
) {

2393 
 
 = 
	`z¶La°InR™ge
(
z¶
,&
ønge
);

2395 
 
 = 
	`z¶Fú°InR™ge
(
z¶
,&
ønge
);

2399 i‡(
 
 =
NULL
) {

2400 
	`u∆ockDb
(
c
->
db
);

2401 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2402 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2409 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2413 
 
 && 
off£t
--) {

2414 i‡(
ªvî£
) {

2415 
 
 =Ün->
backw¨d
;

2417 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2421 
 
 && 
limô
--) {

2423 i‡(
ªvî£
) {

2424 i‡(!
	`z¶VÆueGãMö
(
 
->
sc‹e
,&
ønge
)) ;

2426 i‡(!
	`z¶VÆueLãMax
(
 
->
sc‹e
,&
ønge
)) ;

2429 
øngñí
++;

2430 
	`addRïlyBulk
(
c
,
 
->
obj
);

2432 i‡(
wôhsc‹es
) {

2433 
	`addRïlyDoubÀ
(
c
,
 
->
sc‹e
);

2437 i‡(
ªvî£
) {

2438 
 
 =Ün->
backw¨d
;

2440 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2444 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2447 i‡(
wôhsc‹es
) {

2448 
øngñí
 *= 2;

2451 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ª∂yÀn
, 
øngñí
);

2452 
	`u∆ockDb
(
c
->
db
);

2453 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2454 
	}
}

2456 
	$zøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

2457 
	`gíîicZøngebysc‹eComm™d
(
c
,0);

2458 
	}
}

2460 
	$zªvøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

2461 
	`gíîicZøngebysc‹eComm™d
(
c
,1);

2462 
	}
}

2464 
	$zcou¡Comm™d
(
˛õ¡
 *
c
) {

2465 
robj
 *
key
 = 
c
->
¨gv
[1];

2466 
robj
 *
zobj
;

2467 
zønge•ec
 
ønge
;

2468 
cou¡
 = 0;

2471 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

2472 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

2476 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2477 
	`lockDbRód
(
c
->
db
);

2479 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
, 
key
, 
sh¨ed
.
czîo
)Ë=
NULL
) {

2480 
	`u∆ockDb
(
c
->
db
);

2481 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2483 } i‡(
	`checkTy≥
(
c
, 
zobj
, 
OBJ_ZSET
)) {

2484 
	`u∆ockDb
(
c
->
db
);

2485 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2489 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2490 *
zl
 = 
zobj
->
±r
;

2491 *
ïå
, *
•å
;

2492 
sc‹e
;

2495 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,&
ønge
);

2498 i‡(
ïå
 =
NULL
) {

2499 
	`u∆ockDb
(
c
->
db
);

2500 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2501 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

2506 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2507 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2508 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
));

2511 
ïå
) {

2512 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2515 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
)) {

2518 
cou¡
++;

2519 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2522 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2523 
z£t
 *
zs
 = 
zobj
->
±r
;

2524 
zskùli°
 *
z¶
 = 
zs
->zsl;

2525 
zskùli°Node
 *
zn
;

2526 
ønk
;

2529 
zn
 = 
	`z¶Fú°InR™ge
(
z¶
, &
ønge
);

2532 i‡(
zn
 !
NULL
) {

2533 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2534 
cou¡
 = (
z¶
->
Àngth
 - (
ønk
 - 1));

2537 
zn
 = 
	`z¶La°InR™ge
(
z¶
, &
ønge
);

2540 i‡(
zn
 !
NULL
) {

2541 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2542 
cou¡
 -(
z¶
->
Àngth
 - 
ønk
);

2546 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2549 
	`addRïlyL⁄gL⁄g
(
c
, 
cou¡
);

2550 
	`u∆ockDb
(
c
->
db
);

2551 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2552 
	}
}

2554 
	$zÀxcou¡Comm™d
(
˛õ¡
 *
c
) {

2555 
robj
 *
key
 = 
c
->
¨gv
[1];

2556 
robj
 *
zobj
;

2557 
zÀxønge•ec
 
ønge
;

2558 
cou¡
 = 0;

2561 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

2562 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

2567 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
, 
key
, 
sh¨ed
.
czîo
)Ë=
NULL
 ||

2568 
	`checkTy≥
(
c
, 
zobj
, 
OBJ_ZSET
))

2570 
	`z¶FªeLexR™ge
(&
ønge
);

2574 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2575 *
zl
 = 
zobj
->
±r
;

2576 *
ïå
, *
•å
;

2579 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,&
ønge
);

2582 i‡(
ïå
 =
NULL
) {

2583 
	`z¶FªeLexR™ge
(&
ønge
);

2584 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

2589 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2590 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
));

2593 
ïå
) {

2595 i‡(!
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
)) {

2598 
cou¡
++;

2599 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2602 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2603 
z£t
 *
zs
 = 
zobj
->
±r
;

2604 
zskùli°
 *
z¶
 = 
zs
->zsl;

2605 
zskùli°Node
 *
zn
;

2606 
ønk
;

2609 
zn
 = 
	`z¶Fú°InLexR™ge
(
z¶
, &
ønge
);

2612 i‡(
zn
 !
NULL
) {

2613 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2614 
cou¡
 = (
z¶
->
Àngth
 - (
ønk
 - 1));

2617 
zn
 = 
	`z¶La°InLexR™ge
(
z¶
, &
ønge
);

2620 i‡(
zn
 !
NULL
) {

2621 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2622 
cou¡
 -(
z¶
->
Àngth
 - 
ønk
);

2626 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2629 
	`z¶FªeLexR™ge
(&
ønge
);

2630 
	`addRïlyL⁄gL⁄g
(
c
, 
cou¡
);

2631 
	}
}

2634 
	$gíîicZøngebyÀxComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2635 
zÀxønge•ec
 
ønge
;

2636 
robj
 *
key
 = 
c
->
¨gv
[1];

2637 
robj
 *
zobj
;

2638 
off£t
 = 0, 
limô
 = -1;

2639 
øngñí
 = 0;

2640 *
ª∂yÀn
 = 
NULL
;

2641 
möidx
, 
maxidx
;

2644 i‡(
ªvî£
) {

2646 
maxidx
 = 2; 
möidx
 = 3;

2649 
möidx
 = 2; 
maxidx
 = 3;

2652 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[
möidx
],c->¨gv[
maxidx
],&
ønge
Ë!
VR_OK
) {

2653 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

2659 i‡(
c
->
¨gc
 > 4) {

2660 
ªmaöög
 = 
c
->
¨gc
 - 4;

2661 
pos
 = 4;

2663 
ªmaöög
) {

2664 i‡(
ªmaöög
 >3 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"limit")) {

2665 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+1], &
off£t
, 
NULL
Ë!
VR_OK
) ||

2666 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+2], &
limô
, 
NULL
Ë!
VR_OK
)) ;

2667 
pos
 +3; 
ªmaöög
 -= 3;

2669 
	`z¶FªeLexR™ge
(&
ønge
);

2670 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2677 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
 ||

2678 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
))

2680 
	`z¶FªeLexR™ge
(&
ønge
);

2684 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2685 *
zl
 = 
zobj
->
±r
;

2686 *
ïå
, *
•å
;

2687 *
v°r
;

2688 
vÀn
;

2689 
vl⁄g
;

2692 i‡(
ªvî£
) {

2693 
ïå
 = 
	`zzlLa°InLexR™ge
(
zl
,&
ønge
);

2695 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,&
ønge
);

2699 i‡(
ïå
 =
NULL
) {

2700 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2701 
	`z¶FªeLexR™ge
(&
ønge
);

2706 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2707 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2712 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2716 
ïå
 && 
off£t
--) {

2717 i‡(
ªvî£
) {

2718 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2720 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2724 
ïå
 && 
limô
--) {

2726 i‡(
ªvî£
) {

2727 i‡(!
	`zzlLexVÆueGãMö
(
ïå
,&
ønge
)) ;

2729 i‡(!
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
)) ;

2734 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2736 
øngñí
++;

2737 i‡(
v°r
 =
NULL
) {

2738 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2740 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2744 i‡(
ªvî£
) {

2745 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2747 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2750 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2751 
z£t
 *
zs
 = 
zobj
->
±r
;

2752 
zskùli°
 *
z¶
 = 
zs
->zsl;

2753 
zskùli°Node
 *
 
;

2756 i‡(
ªvî£
) {

2757 
 
 = 
	`z¶La°InLexR™ge
(
z¶
,&
ønge
);

2759 
 
 = 
	`z¶Fú°InLexR™ge
(
z¶
,&
ønge
);

2763 i‡(
 
 =
NULL
) {

2764 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2765 
	`z¶FªeLexR™ge
(&
ønge
);

2772 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2776 
 
 && 
off£t
--) {

2777 i‡(
ªvî£
) {

2778 
 
 =Ün->
backw¨d
;

2780 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2784 
 
 && 
limô
--) {

2786 i‡(
ªvî£
) {

2787 i‡(!
	`z¶LexVÆueGãMö
(
 
->
obj
,&
ønge
)) ;

2789 i‡(!
	`z¶LexVÆueLãMax
(
 
->
obj
,&
ønge
)) ;

2792 
øngñí
++;

2793 
	`addRïlyBulk
(
c
,
 
->
obj
);

2796 i‡(
ªvî£
) {

2797 
 
 =Ün->
backw¨d
;

2799 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2803 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2806 
	`z¶FªeLexR™ge
(&
ønge
);

2807 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ª∂yÀn
, 
øngñí
);

2808 
	}
}

2810 
	$zøngebyÀxComm™d
(
˛õ¡
 *
c
) {

2811 
	`gíîicZøngebyÀxComm™d
(
c
,0);

2812 
	}
}

2814 
	$zªvøngebyÀxComm™d
(
˛õ¡
 *
c
) {

2815 
	`gíîicZøngebyÀxComm™d
(
c
,1);

2816 
	}
}

2818 
	$zˇrdComm™d
(
˛õ¡
 *
c
) {

2819 
robj
 *
key
 = 
c
->
¨gv
[1];

2820 
robj
 *
zobj
;

2822 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2823 
	`lockDbRód
(
c
->
db
);

2824 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
czîo
)Ë=
NULL
) {

2825 
	`u∆ockDb
(
c
->
db
);

2826 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2828 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2829 
	`u∆ockDb
(
c
->
db
);

2830 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2834 
	`addRïlyL⁄gL⁄g
(
c
,
	`z£tLígth
(
zobj
));

2836 
	`u∆ockDb
(
c
->
db
);

2837 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2838 
	}
}

2840 
	$zsc‹eComm™d
(
˛õ¡
 *
c
) {

2841 
robj
 *
key
 = 
c
->
¨gv
[1];

2842 
robj
 *
zobj
;

2843 
sc‹e
;

2845 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2846 
	`lockDbRód
(
c
->
db
);

2847 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

2848 
	`u∆ockDb
(
c
->
db
);

2849 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2851 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2852 
	`u∆ockDb
(
c
->
db
);

2853 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2857 i‡(
	`z£tSc‹e
(
zobj
,
c
->
¨gv
[2],&
sc‹e
Ë=
VR_ERROR
) {

2858 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2860 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

2863 
	`u∆ockDb
(
c
->
db
);

2864 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2865 
	}
}

2867 
	$zønkGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2868 
robj
 *
key
 = 
c
->
¨gv
[1];

2869 
robj
 *
ñe
 = 
c
->
¨gv
[2];

2870 
robj
 *
zobj
;

2871 
Œí
;

2872 
ønk
;

2874 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2875 
	`lockDbRód
(
c
->
db
);

2876 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

2877 
	`u∆ockDb
(
c
->
db
);

2878 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2880 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2881 
	`u∆ockDb
(
c
->
db
);

2882 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2885 
Œí
 = 
	`z£tLígth
(
zobj
);

2887 
	`£rvîAs£πWôhInfo
(
c
,
ñe
,
	`sdsEncodedObje˘
(ele));

2889 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2890 *
zl
 = 
zobj
->
±r
;

2891 *
ïå
, *
•å
;

2893 
ïå
 = 
	`zùli°Index
(
zl
,0);

2894 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2895 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2896 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
•å
 !
NULL
);

2898 
ønk
 = 1;

2899 
ïå
 !
NULL
) {

2900 i‡(
	`zùli°Com∑ª
(
ïå
,
ñe
->
±r
,
	`sd¶í
(ele->ptr)))

2902 
ønk
++;

2903 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2906 i‡(
ïå
 !
NULL
) {

2907 i‡(
ªvî£
)

2908 
	`addRïlyL⁄gL⁄g
(
c
,
Œí
-
ønk
);

2910 
	`addRïlyL⁄gL⁄g
(
c
,
ønk
-1);

2912 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2914 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2915 
z£t
 *
zs
 = 
zobj
->
±r
;

2916 
zskùli°
 *
z¶
 = 
zs
->zsl;

2917 
di˘E¡ry
 *
de
;

2918 
sc‹e
;

2920 
ñe
 = 
c
->
¨gv
[2];

2921 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
ñe
);

2922 i‡(
de
 !
NULL
) {

2923 
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

2924 
ønk
 = 
	`z¶GëR™k
(
z¶
,
sc‹e
,
ñe
);

2925 
	`£rvîAs£πWôhInfo
(
c
,
ñe
,
ønk
);

2926 i‡(
ªvî£
)

2927 
	`addRïlyL⁄gL⁄g
(
c
,
Œí
-
ønk
);

2929 
	`addRïlyL⁄gL⁄g
(
c
,
ønk
-1);

2931 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2934 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2937 
	`u∆ockDb
(
c
->
db
);

2938 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2939 
	}
}

2941 
	$zønkComm™d
(
˛õ¡
 *
c
) {

2942 
	`zønkGíîicComm™d
(
c
, 0);

2943 
	}
}

2945 
	$zªvønkComm™d
(
˛õ¡
 *
c
) {

2946 
	`zønkGíîicComm™d
(
c
, 1);

2947 
	}
}

2949 
	$zsˇnComm™d
(
˛õ¡
 *
c
) {

2950 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_ZSET
);

2951 
	}
}

	@src/vr_t_zset.c

1 
	~<vr_c‹e.h
>

3 
z¶LexVÆueGãMö
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
);

4 
z¶LexVÆueLãMax
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
);

6 
zskùli°Node
 *
	$z¶Cª©eNode
(
Àvñ
, 
sc‹e
, 
robj
 *
obj
) {

7 
zskùli°Node
 *
zn
 = 
	`dÆloc
((*zn)+
Àvñ
*(
zskùli°Levñ
));

8 
zn
->
sc‹e
 = score;

9 
zn
->
obj
 = obj;

10  
zn
;

11 
	}
}

13 
zskùli°
 *
	$z¶Cª©e
() {

14 
j
;

15 
zskùli°
 *
z¶
;

17 
z¶
 = 
	`dÆloc
((*zsl));

18 
z¶
->
Àvñ
 = 1;

19 
z¶
->
Àngth
 = 0;

20 
z¶
->
hódî
 = 
	`z¶Cª©eNode
(
ZSKIPLIST_MAXLEVEL
,0,
NULL
);

21 
j
 = 0; j < 
ZSKIPLIST_MAXLEVEL
; j++) {

22 
z¶
->
hódî
->
Àvñ
[
j
].
f‹w¨d
 = 
NULL
;

23 
z¶
->
hódî
->
Àvñ
[
j
].
•™
 = 0;

25 
z¶
->
hódî
->
backw¨d
 = 
NULL
;

26 
z¶
->
èû
 = 
NULL
;

27  
z¶
;

28 
	}
}

30 
	$z¶FªeNode
(
zskùli°Node
 *
node
) {

32 
	`d‰ì
(
node
);

33 
	}
}

35 
	$z¶Fªe
(
zskùli°
 *
z¶
) {

36 
zskùli°Node
 *
node
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
, *
√xt
;

38 
	`d‰ì
(
z¶
->
hódî
);

39 
node
) {

40 
√xt
 = 
node
->
Àvñ
[0].
f‹w¨d
;

41 
	`z¶FªeNode
(
node
);

42 
node
 = 
√xt
;

44 
	`d‰ì
(
z¶
);

45 
	}
}

51 
	$z¶R™domLevñ
() {

52 
Àvñ
 = 1;

53 (
	`øndom
()&0xFFFFË< (
ZSKIPLIST_P
 * 0xFFFF))

54 
Àvñ
 += 1;

55  (
Àvñ
<
ZSKIPLIST_MAXLEVEL
) ?Üevel : ZSKIPLIST_MAXLEVEL;

56 
	}
}

58 
zskùli°Node
 *
	$z¶In£π
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
) {

59 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

60 
ønk
[
ZSKIPLIST_MAXLEVEL
];

61 
i
, 
Àvñ
;

63 
	`ASSERT
(!
	`i¢™
(
sc‹e
));

64 
x
 = 
z¶
->
hódî
;

65 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

67 
ønk
[
i
] = i =(
z¶
->
Àvñ
-1) ? 0 :Ñank[i+1];

68 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

69 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

70 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

71 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,obj) < 0))) {

72 
ønk
[
i
] +
x
->
Àvñ
[i].
•™
;

73 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

75 
upd©e
[
i
] = 
x
;

81 
Àvñ
 = 
	`z¶R™domLevñ
();

82 i‡(
Àvñ
 > 
z¶
->level) {

83 
i
 = 
z¶
->
Àvñ
; i <Üevel; i++) {

84 
ønk
[
i
] = 0;

85 
upd©e
[
i
] = 
z¶
->
hódî
;

86 
upd©e
[
i
]->
Àvñ
[i].
•™
 = 
z¶
->
Àngth
;

88 
z¶
->
Àvñ
 =Üevel;

90 
x
 = 
	`z¶Cª©eNode
(
Àvñ
,
sc‹e
,
obj
);

91 
i
 = 0; i < 
Àvñ
; i++) {

92 
x
->
Àvñ
[
i
].
f‹w¨d
 = 
upd©e
[i]->level[i].forward;

93 
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 = 
x
;

96 
x
->
Àvñ
[
i
].
•™
 = 
upd©e
[i]->Àvñ[i].•™ - (
ønk
[0] -Ñank[i]);

97 
upd©e
[
i
]->
Àvñ
[i].
•™
 = (
ønk
[0] -Ñank[i]) + 1;

101 
i
 = 
Àvñ
; i < 
z¶
->level; i++) {

102 
upd©e
[
i
]->
Àvñ
[i].
•™
++;

105 
x
->
backw¨d
 = (
upd©e
[0] =
z¶
->
hódî
Ë? 
NULL
 : update[0];

106 i‡(
x
->
Àvñ
[0].
f‹w¨d
)

107 
x
->
Àvñ
[0].
f‹w¨d
->
backw¨d
 = x;

109 
z¶
->
èû
 = 
x
;

110 
z¶
->
Àngth
++;

111  
x
;

112 
	}
}

115 
	$z¶DñëeNode
(
zskùli°
 *
z¶
, 
zskùli°Node
 *
x
, zskùli°Nodê**
upd©e
) {

116 
i
;

117 
i
 = 0; i < 
z¶
->
Àvñ
; i++) {

118 i‡(
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 =
x
) {

119 
upd©e
[
i
]->
Àvñ
[i].
•™
 +
x
->level[i].span - 1;

120 
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 = 
x
->level[i].forward;

122 
upd©e
[
i
]->
Àvñ
[i].
•™
 -= 1;

125 i‡(
x
->
Àvñ
[0].
f‹w¨d
) {

126 
x
->
Àvñ
[0].
f‹w¨d
->
backw¨d
 = x->backward;

128 
z¶
->
èû
 = 
x
->
backw¨d
;

130 
z¶
->
Àvñ
 > 1 && z¶->
hódî
->Àvñ[z¶->Àvñ-1].
f‹w¨d
 =
NULL
)

131 
z¶
->
Àvñ
--;

132 
z¶
->
Àngth
--;

133 
	}
}

136 
	$z¶Dñëe
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
) {

137 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

138 
i
;

140 
x
 = 
z¶
->
hódî
;

141 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

142 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

143 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

144 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

145 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,obj) < 0)))

146 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

147 
upd©e
[
i
] = 
x
;

151 
x
 = x->
Àvñ
[0].
f‹w¨d
;

152 i‡(
x
 && 
sc‹e
 =x->sc‹ê&& 
	`equÆSåögObje˘s
(x->
obj
,obj)) {

153 
	`z¶DñëeNode
(
z¶
, 
x
, 
upd©e
);

154 
	`z¶FªeNode
(
x
);

158 
	}
}

160 
	$z¶VÆueGãMö
(
vÆue
, 
zønge•ec
 *
•ec
) {

161  
•ec
->
möex
 ? (
vÆue
 > s≥c->
mö
) : (value >= spec->min);

162 
	}
}

164 
	$z¶VÆueLãMax
(
vÆue
, 
zønge•ec
 *
•ec
) {

165  
•ec
->
maxex
 ? (
vÆue
 < s≥c->
max
) : (value <= spec->max);

166 
	}
}

169 
	$z¶IsInR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

170 
zskùli°Node
 *
x
;

173 i‡(
ønge
->
mö
 >Ñ™ge->
max
 ||

174 (
ønge
->
mö
 =ønge->
max
 && (ønge->
möex
 ||Ñ™ge->
maxex
)))

176 
x
 = 
z¶
->
èû
;

177 i‡(
x
 =
NULL
 || !
	`z¶VÆueGãMö
(x->
sc‹e
,
ønge
))

179 
x
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

180 i‡(
x
 =
NULL
 || !
	`z¶VÆueLãMax
(x->
sc‹e
,
ønge
))

183 
	}
}

187 
zskùli°Node
 *
	$z¶Fú°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

188 
zskùli°Node
 *
x
;

189 
i
;

192 i‡(!
	`z¶IsInR™ge
(
z¶
,
ønge
)Ë 
NULL
;

194 
x
 = 
z¶
->
hódî
;

195 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

197 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

198 !
	`z¶VÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
,
ønge
))

199 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

203 
x
 = x->
Àvñ
[0].
f‹w¨d
;

204 
	`ASSERT
(
x
 !
NULL
);

207 i‡(!
	`z¶VÆueLãMax
(
x
->
sc‹e
,
ønge
)Ë 
NULL
;

208  
x
;

209 
	}
}

213 
zskùli°Node
 *
	$z¶La°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

214 
zskùli°Node
 *
x
;

215 
i
;

218 i‡(!
	`z¶IsInR™ge
(
z¶
,
ønge
)Ë 
NULL
;

220 
x
 = 
z¶
->
hódî
;

221 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

223 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

224 
	`z¶VÆueLãMax
(
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
,
ønge
))

225 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

229 
	`ASSERT
(
x
 !
NULL
);

232 i‡(!
	`z¶VÆueGãMö
(
x
->
sc‹e
,
ønge
)Ë 
NULL
;

233  
x
;

234 
	}
}

240 
	$z¶DñëeR™geBySc‹e
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
, 
di˘
 *dict) {

241 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

242 
ªmoved
 = 0;

243 
i
;

245 
x
 = 
z¶
->
hódî
;

246 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

247 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
ønge
->
möex
 ?

248 
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 <
ønge
->
mö
 :

249 
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < 
ønge
->
mö
))

250 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

251 
upd©e
[
i
] = 
x
;

255 
x
 = x->
Àvñ
[0].
f‹w¨d
;

258 
x
 &&

259 (
ønge
->
maxex
 ? 
x
->
sc‹e
 <Ñ™ge->
max
 : x->score <=Ñange->max))

261 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

262 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

263 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

264 
	`z¶FªeNode
(
x
);

265 
ªmoved
++;

266 
x
 = 
√xt
;

268  
ªmoved
;

269 
	}
}

271 
	$z¶DñëeR™geByLex
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
, 
di˘
 *dict) {

272 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

273 
ªmoved
 = 0;

274 
i
;

277 
x
 = 
z¶
->
hódî
;

278 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

279 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

280 !
	`z¶LexVÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

281 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

282 
upd©e
[
i
] = 
x
;

286 
x
 = x->
Àvñ
[0].
f‹w¨d
;

289 
x
 && 
	`z¶LexVÆueLãMax
(x->
obj
,
ønge
)) {

290 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

291 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

292 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

293 
	`z¶FªeNode
(
x
);

294 
ªmoved
++;

295 
x
 = 
√xt
;

297  
ªmoved
;

298 
	}
}

302 
	$z¶DñëeR™geByR™k
(
zskùli°
 *
z¶
, 
°¨t
, 
íd
, 
di˘
 *dict) {

303 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

304 
åavî£d
 = 0, 
ªmoved
 = 0;

305 
i
;

307 
x
 = 
z¶
->
hódî
;

308 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

309 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
åavî£d
 + x->Àvñ[i].
•™
Ë< 
°¨t
) {

310 
åavî£d
 +
x
->
Àvñ
[
i
].
•™
;

311 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

313 
upd©e
[
i
] = 
x
;

316 
åavî£d
++;

317 
x
 = x->
Àvñ
[0].
f‹w¨d
;

318 
x
 && 
åavî£d
 <
íd
) {

319 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

320 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

321 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

322 
	`z¶FªeNode
(
x
);

323 
ªmoved
++;

324 
åavî£d
++;

325 
x
 = 
√xt
;

327  
ªmoved
;

328 
	}
}

334 
	$z¶GëR™k
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
o
) {

335 
zskùli°Node
 *
x
;

336 
ønk
 = 0;

337 
i
;

339 
x
 = 
z¶
->
hódî
;

340 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

341 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

342 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

343 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

344 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
o
) <= 0))) {

345 
ønk
 +
x
->
Àvñ
[
i
].
•™
;

346 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

350 i‡(
x
->
obj
 && 
	`equÆSåögObje˘s
(x->obj,
o
)) {

351  
ønk
;

355 
	}
}

358 
zskùli°Node
* 
	$z¶GëEÀmítByR™k
(
zskùli°
 *
z¶
, 
ønk
) {

359 
zskùli°Node
 *
x
;

360 
åavî£d
 = 0;

361 
i
;

363 
x
 = 
z¶
->
hódî
;

364 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

365 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
åavî£d
 + x->Àvñ[i].
•™
Ë<
ønk
)

367 
åavî£d
 +
x
->
Àvñ
[
i
].
•™
;

368 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

370 i‡(
åavî£d
 =
ønk
) {

371  
x
;

374  
NULL
;

375 
	}
}

378 
	$z¶P¨£R™ge
(
robj
 *
mö
,Ñobj *
max
, 
zønge•ec
 *
•ec
) {

379 *
ïå
;

380 
•ec
->
möex
 = s≥c->
maxex
 = 0;

386 i‡(
mö
->
ícodög
 =
OBJ_ENCODING_INT
) {

387 
•ec
->
mö
 = ()mö->
±r
;

389 i‡(((*)
mö
->
±r
)[0] == '(') {

390 
•ec
->
mö
 = 
	`°πod
((*)mö->
±r
+1,&
ïå
);

391 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
mö
)Ë 
VR_ERROR
;

392 
•ec
->
möex
 = 1;

394 
•ec
->
mö
 = 
	`°πod
((*)mö->
±r
,&
ïå
);

395 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
mö
)Ë 
VR_ERROR
;

398 i‡(
max
->
ícodög
 =
OBJ_ENCODING_INT
) {

399 
•ec
->
max
 = ()max->
±r
;

401 i‡(((*)
max
->
±r
)[0] == '(') {

402 
•ec
->
max
 = 
	`°πod
((*)max->
±r
+1,&
ïå
);

403 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
max
)Ë 
VR_ERROR
;

404 
•ec
->
maxex
 = 1;

406 
•ec
->
max
 = 
	`°πod
((*)max->
±r
,&
ïå
);

407 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
max
)Ë 
VR_ERROR
;

411  
VR_OK
;

412 
	}
}

429 
	$z¶P¨£LexR™geIãm
(
robj
 *
ôem
,Ñobj **
de°
, *
ex
) {

430 *
c
 = 
ôem
->
±r
;

432 
c
[0]) {

434 i‡(
c
[1] !'\0'Ë 
VR_ERROR
;

435 *
ex
 = 0;

436 *
de°
 = 
	`dupSåögObje˘Unc⁄°™t
(
sh¨ed
.
max°rög
);

437  
VR_OK
;

439 i‡(
c
[1] !'\0'Ë 
VR_ERROR
;

440 *
ex
 = 0;

441 *
de°
 = 
	`dupSåögObje˘Unc⁄°™t
(
sh¨ed
.
mö°rög
);

442  
VR_OK
;

444 *
ex
 = 1;

445 *
de°
 = 
	`¸óãSåögObje˘
(
c
+1,
	`sd¶í
(c)-1);

446  
VR_OK
;

448 *
ex
 = 0;

449 *
de°
 = 
	`¸óãSåögObje˘
(
c
+1,
	`sd¶í
(c)-1);

450  
VR_OK
;

452  
VR_ERROR
;

454 
	}
}

461 
	$z¶P¨£LexR™ge
(
robj
 *
mö
,Ñobj *
max
, 
zÀxønge•ec
 *
•ec
) {

464 i‡(
mö
->
ícodög
 =
OBJ_ENCODING_INT
 ||

465 
max
->
ícodög
 =
OBJ_ENCODING_INT
Ë 
VR_ERROR
;

467 
•ec
->
mö
 = s≥c->
max
 = 
NULL
;

468 i‡(
	`z¶P¨£LexR™geIãm
(
mö
, &
•ec
->mö, &•ec->
möex
Ë=
VR_ERROR
 ||

469 
	`z¶P¨£LexR™geIãm
(
max
, &
•ec
->max, &•ec->
maxex
Ë=
VR_ERROR
) {

470 i‡(
•ec
->
mö
Ë
	`‰ìObje˘
(spec->min);

471 i‡(
•ec
->
max
Ë
	`‰ìObje˘
(spec->max);

472  
VR_ERROR
;

474  
VR_OK
;

476 
	}
}

480 
	$z¶FªeLexR™ge
(
zÀxønge•ec
 *
•ec
) {

481 
	`‰ìObje˘
(
•ec
->
mö
);

482 
	`‰ìObje˘
(
•ec
->
max
);

483 
	}
}

488 
	$com∑ªSåögObje˘sF‹LexR™ge
(
robj
 *
a
,Ñobj *
b
) {

489 i‡(
a
 =
b
)  0;

491 i‡(
a
 =
sh¨ed
.
mö°rög
 || 
b
 =sh¨ed.
max°rög
)  -1;

492 i‡(
a
 =
sh¨ed
.
max°rög
 || 
b
 =sh¨ed.
mö°rög
)  1;

493  
	`com∑ªSåögObje˘s
(
a
,
b
);

494 
	}
}

496 
	$z¶LexVÆueGãMö
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
) {

497  
•ec
->
möex
 ?

498 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
mö
) > 0) :

499 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
mö
) >= 0);

500 
	}
}

502 
	$z¶LexVÆueLãMax
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
) {

503  
•ec
->
maxex
 ?

504 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
max
) < 0) :

505 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
max
) <= 0);

506 
	}
}

509 
	$z¶IsInLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

510 
zskùli°Node
 *
x
;

513 i‡(
	`com∑ªSåögObje˘sF‹LexR™ge
(
ønge
->
mö
,ønge->
max
) > 1 ||

514 (
	`com∑ªSåögObje˘s
(
ønge
->
mö
,ønge->
max
) == 0 &&

515 (
ønge
->
möex
 ||Ñ™ge->
maxex
)))

517 
x
 = 
z¶
->
èû
;

518 i‡(
x
 =
NULL
 || !
	`z¶LexVÆueGãMö
(x->
obj
,
ønge
))

520 
x
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

521 i‡(
x
 =
NULL
 || !
	`z¶LexVÆueLãMax
(x->
obj
,
ønge
))

524 
	}
}

528 
zskùli°Node
 *
	$z¶Fú°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

529 
zskùli°Node
 *
x
;

530 
i
;

533 i‡(!
	`z¶IsInLexR™ge
(
z¶
,
ønge
)Ë 
NULL
;

535 
x
 = 
z¶
->
hódî
;

536 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

538 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

539 !
	`z¶LexVÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

540 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

544 
x
 = x->
Àvñ
[0].
f‹w¨d
;

545 
	`ASSERT
(
x
 !
NULL
);

548 i‡(!
	`z¶LexVÆueLãMax
(
x
->
obj
,
ønge
)Ë 
NULL
;

549  
x
;

550 
	}
}

554 
zskùli°Node
 *
	$z¶La°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

555 
zskùli°Node
 *
x
;

556 
i
;

559 i‡(!
	`z¶IsInLexR™ge
(
z¶
,
ønge
)Ë 
NULL
;

561 
x
 = 
z¶
->
hódî
;

562 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

564 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

565 
	`z¶LexVÆueLãMax
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

566 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

570 
	`ASSERT
(
x
 !
NULL
);

573 i‡(!
	`z¶LexVÆueGãMö
(
x
->
obj
,
ønge
)Ë 
NULL
;

574  
x
;

575 
	}
}

581 
	$zzlGëSc‹e
(*
•å
) {

582 
ªt
;

583 *
v°r
;

584 
vÀn
;

585 
vl⁄g
;

586 
buf
[128];

587 
sc‹e
;

589 
	`ASSERT
(
•å
 !
NULL
);

591 
ªt
 = ()
	`zùli°Gë
(
•å
,&
v°r
,&
vÀn
,&
vl⁄g
);

592 
	`ASSERT
(
ªt
 > 0);

594 i‡(
v°r
) {

595 
	`mem˝y
(
buf
,
v°r
,
vÀn
);

596 
buf
[
vÀn
] = '\0';

597 
sc‹e
 = 
	`°πod
(
buf
,
NULL
);

599 
sc‹e
 = 
vl⁄g
;

602  
sc‹e
;

603 
	}
}

608 
robj
 *
	$zùli°GëObje˘
(*
•å
) {

609 
ªt
;

610 *
v°r
;

611 
vÀn
;

612 
vl⁄g
;

614 
	`ASSERT
(
•å
 !
NULL
);

616 
ªt
 = ()
	`zùli°Gë
(
•å
,&
v°r
,&
vÀn
,&
vl⁄g
);

617 
	`ASSERT
(
ªt
 > 0);

619 i‡(
v°r
) {

620  
	`¸óãSåögObje˘
((*)
v°r
,
vÀn
);

622  
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

624 
	}
}

627 
	$zzlCom∑ªEÀmíts
(*
ïå
, *
c°r
, 
˛í
) {

628 
ªt
;

629 *
v°r
;

630 
vÀn
;

631 
vl⁄g
;

632 
vbuf
[32];

633 
möÀn
, 
cmp
;

635 
ªt
 = ()
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
);

636 
	`ASSERT
(
ªt
 > 0);

637 i‡(
v°r
 =
NULL
) {

639 
vÀn
 = 
	`Œ2°rög
((*)
vbuf
,(vbuf),
vl⁄g
);

640 
v°r
 = 
vbuf
;

643 
möÀn
 = (
vÀn
 < 
˛í
) ? vlen : clen;

644 
cmp
 = 
	`memcmp
(
v°r
,
c°r
,
möÀn
);

645 i‡(
cmp
 =0Ë 
vÀn
-
˛í
;

646  
cmp
;

647 
	}
}

649 
	$zzlLígth
(*
zl
) {

650  
	`zùli°Lí
(
zl
)/2;

651 
	}
}

655 
	$zzlNext
(*
zl
, **
ïå
, **
•å
) {

656 *
_ïå
, *
_•å
;

657 
	`ASSERT
(*
ïå
 !
NULL
 && *
•å
 != NULL);

659 
_ïå
 = 
	`zùli°Next
(
zl
,*
•å
);

660 i‡(
_ïå
 !
NULL
) {

661 
_•å
 = 
	`zùli°Next
(
zl
,
_ïå
);

662 
	`ASSERT
(
_•å
 !
NULL
);

665 
_•å
 = 
NULL
;

668 *
ïå
 = 
_ïå
;

669 *
•å
 = 
_•å
;

670 
	}
}

674 
	$zzlPªv
(*
zl
, **
ïå
, **
•å
) {

675 *
_ïå
, *
_•å
;

676 
	`ASSERT
(*
ïå
 !
NULL
 && *
•å
 != NULL);

678 
_•å
 = 
	`zùli°Pªv
(
zl
,*
ïå
);

679 i‡(
_•å
 !
NULL
) {

680 
_ïå
 = 
	`zùli°Pªv
(
zl
,
_•å
);

681 
	`ASSERT
(
_ïå
 !
NULL
);

684 
_ïå
 = 
NULL
;

687 *
ïå
 = 
_ïå
;

688 *
•å
 = 
_•å
;

689 
	}
}

693 
	$zzlIsInR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

694 *
p
;

695 
sc‹e
;

698 i‡(
ønge
->
mö
 >Ñ™ge->
max
 ||

699 (
ønge
->
mö
 =ønge->
max
 && (ønge->
möex
 ||Ñ™ge->
maxex
)))

702 
p
 = 
	`zùli°Index
(
zl
,-1);

703 i‡(
p
 =
NULL
)  0;

704 
sc‹e
 = 
	`zzlGëSc‹e
(
p
);

705 i‡(!
	`z¶VÆueGãMö
(
sc‹e
,
ønge
))

708 
p
 = 
	`zùli°Index
(
zl
,1);

709 
	`ASSERT
(
p
 !
NULL
);

710 
sc‹e
 = 
	`zzlGëSc‹e
(
p
);

711 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,
ønge
))

715 
	}
}

719 *
	$zzlFú°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

720 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

721 
sc‹e
;

724 i‡(!
	`zzlIsInR™ge
(
zl
,
ønge
)Ë 
NULL
;

726 
ïå
 !
NULL
) {

727 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

728 
	`ASSERT
(
•å
 !
NULL
);

730 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

731 i‡(
	`z¶VÆueGãMö
(
sc‹e
,
ønge
)) {

733 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
))

734  
ïå
;

735  
NULL
;

739 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

742  
NULL
;

743 
	}
}

747 *
	$zzlLa°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

748 *
ïå
 = 
	`zùli°Index
(
zl
,-2), *
•å
;

749 
sc‹e
;

752 i‡(!
	`zzlIsInR™ge
(
zl
,
ønge
)Ë 
NULL
;

754 
ïå
 !
NULL
) {

755 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

756 
	`ASSERT
(
•å
 !
NULL
);

758 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

759 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
)) {

761 i‡(
	`z¶VÆueGãMö
(
sc‹e
,
ønge
))

762  
ïå
;

763  
NULL
;

768 
•å
 = 
	`zùli°Pªv
(
zl
,
ïå
);

769 i‡(
•å
 !
NULL
) {

770 
ïå
 = 
	`zùli°Pªv
(
zl
,
•å
);

771 
	`ASSERT
(
ïå
 !
NULL
);

773 
ïå
 = 
NULL
;

777  
NULL
;

778 
	}
}

780 
	$zzlLexVÆueGãMö
(*
p
, 
zÀxønge•ec
 *
•ec
) {

781 
robj
 *
vÆue
 = 
	`zùli°GëObje˘
(
p
);

782 
ªs
 = 
	`z¶LexVÆueGãMö
(
vÆue
,
•ec
);

783 
	`‰ìObje˘
(
vÆue
);

784  
ªs
;

785 
	}
}

787 
	$zzlLexVÆueLãMax
(*
p
, 
zÀxønge•ec
 *
•ec
) {

788 
robj
 *
vÆue
 = 
	`zùli°GëObje˘
(
p
);

789 
ªs
 = 
	`z¶LexVÆueLãMax
(
vÆue
,
•ec
);

790 
	`‰ìObje˘
(
vÆue
);

791  
ªs
;

792 
	}
}

796 
	$zzlIsInLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

797 *
p
;

800 i‡(
	`com∑ªSåögObje˘sF‹LexR™ge
(
ønge
->
mö
,ønge->
max
) > 1 ||

801 (
	`com∑ªSåögObje˘s
(
ønge
->
mö
,ønge->
max
) == 0 &&

802 (
ønge
->
möex
 ||Ñ™ge->
maxex
)))

805 
p
 = 
	`zùli°Index
(
zl
,-2);

806 i‡(
p
 =
NULL
)  0;

807 i‡(!
	`zzlLexVÆueGãMö
(
p
,
ønge
))

810 
p
 = 
	`zùli°Index
(
zl
,0);

811 
	`ASSERT
(
p
 !
NULL
);

812 i‡(!
	`zzlLexVÆueLãMax
(
p
,
ønge
))

816 
	}
}

820 *
	$zzlFú°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

821 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

824 i‡(!
	`zzlIsInLexR™ge
(
zl
,
ønge
)Ë 
NULL
;

826 
ïå
 !
NULL
) {

827 i‡(
	`zzlLexVÆueGãMö
(
ïå
,
ønge
)) {

829 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
))

830  
ïå
;

831  
NULL
;

835 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

836 
	`ASSERT
(
•å
 !
NULL
);

837 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

840  
NULL
;

841 
	}
}

845 *
	$zzlLa°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

846 *
ïå
 = 
	`zùli°Index
(
zl
,-2), *
•å
;

849 i‡(!
	`zzlIsInLexR™ge
(
zl
,
ønge
)Ë 
NULL
;

851 
ïå
 !
NULL
) {

852 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
)) {

854 i‡(
	`zzlLexVÆueGãMö
(
ïå
,
ønge
))

855  
ïå
;

856  
NULL
;

861 
•å
 = 
	`zùli°Pªv
(
zl
,
ïå
);

862 i‡(
•å
 !
NULL
) {

863 
ïå
 = 
	`zùli°Pªv
(
zl
,
•å
);

864 
	`ASSERT
(
ïå
 !
NULL
);

866 
ïå
 = 
NULL
;

870  
NULL
;

871 
	}
}

873 *
	$zzlFöd
(*
zl
, 
robj
 *
ñe
, *
sc‹e
) {

874 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

875 
robj
 *
ñe_√w
;

877 
ñe_√w
 = 
	`gëDecodedObje˘
(
ñe
);

878 
ïå
 !
NULL
) {

879 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

880 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe_√w
,
•å
 != NULL);

882 i‡(
	`zùli°Com∑ª
(
ïå
,
ñe_√w
->
±r
,
	`sd¶í
(ele_new->ptr))) {

884 i‡(
sc‹e
 !
NULL
Ë*sc‹ê
	`zzlGëSc‹e
(
•å
);

885 i‡(
ñe_√w
!
ñe
Ë
	`‰ìObje˘
(ele_new);

886  
ïå
;

890 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

893 i‡(
ñe_√w
!
ñe
Ë
	`‰ìObje˘
(ele_new);

894  
NULL
;

895 
	}
}

899 *
	$zzlDñëe
(*
zl
, *
ïå
) {

900 *
p
 = 
ïå
;

903 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

904 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

905  
zl
;

906 
	}
}

908 *
	$zzlIn£πAt
(*
zl
, *
ïå
, 
robj
 *
ñe
, 
sc‹e
) {

909 *
•å
;

910 
sc‹ebuf
[128];

911 
sc‹ñí
;

912 
size_t
 
off£t
;

914 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe
,
	`sdsEncodedObje˘
(ele));

915 
sc‹ñí
 = 
	`d2°rög
(
sc‹ebuf
,(sc‹ebuf),
sc‹e
);

916 i‡(
ïå
 =
NULL
) {

917 
zl
 = 
	`zùli°Push
(zl,
ñe
->
±r
,
	`sd¶í
”À->±r),
ZIPLIST_TAIL
);

918 
zl
 = 
	`zùli°Push
(zl,(*)
sc‹ebuf
,
sc‹ñí
,
ZIPLIST_TAIL
);

921 
off£t
 = 
ïå
-
zl
;

922 
zl
 = 
	`zùli°In£π
(zl,
ïå
,
ñe
->
±r
,
	`sd¶í
(ele->ptr));

923 
ïå
 = 
zl
+
off£t
;

926 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe
,(
•å
 = 
	`zùli°Next
(
zl
,
ïå
)) != NULL);

927 
zl
 = 
	`zùli°In£π
(zl,
•å
,(*)
sc‹ebuf
,
sc‹ñí
);

930  
zl
;

931 
	}
}

935 *
	$zzlIn£π
(*
zl
, 
robj
 *
ñe
, 
sc‹e
) {

936 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

937 
s
;

938 
robj
 *
ñe_√w
;

940 
ñe_√w
 = 
	`gëDecodedObje˘
(
ñe
);

941 
ïå
 !
NULL
) {

942 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

943 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe_√w
,
•å
 != NULL);

944 
s
 = 
	`zzlGëSc‹e
(
•å
);

946 i‡(
s
 > 
sc‹e
) {

950 
zl
 = 
	`zzlIn£πAt
(zl,
ïå
,
ñe_√w
,
sc‹e
);

952 } i‡(
s
 =
sc‹e
) {

954 i‡(
	`zzlCom∑ªEÀmíts
(
ïå
,
ñe_√w
->
±r
,
	`sd¶í
(ele_new->ptr)) > 0) {

955 
zl
 = 
	`zzlIn£πAt
(zl,
ïå
,
ñe_√w
,
sc‹e
);

961 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

965 i‡(
ïå
 =
NULL
)

966 
zl
 = 
	`zzlIn£πAt
(zl,
NULL
,
ñe_√w
,
sc‹e
);

968 i‡(
ñe_√w
 !
ñe
Ë
	`‰ìObje˘
(ele_new);

969  
zl
;

970 
	}
}

972 *
	$zzlDñëeR™geBySc‹e
(*
zl
, 
zønge•ec
 *
ønge
, *
dñëed
) {

973 *
ïå
, *
•å
;

974 
sc‹e
;

975 
num
 = 0;

977 i‡(
dñëed
 !
NULL
) *deleted = 0;

979 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,
ønge
);

980 i‡(
ïå
 =
NULL
Ë 
zl
;

984 (
•å
 = 
	`zùli°Next
(
zl
,
ïå
)Ë!
NULL
) {

985 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

986 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
)) {

988 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

989 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

990 
num
++;

997 i‡(
dñëed
 !
NULL
Ë*dñëed = 
num
;

998  
zl
;

999 
	}
}

1001 *
	$zzlDñëeR™geByLex
(*
zl
, 
zÀxønge•ec
 *
ønge
, *
dñëed
) {

1002 *
ïå
, *
•å
;

1003 
num
 = 0;

1005 i‡(
dñëed
 !
NULL
) *deleted = 0;

1007 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,
ønge
);

1008 i‡(
ïå
 =
NULL
Ë 
zl
;

1012 (
•å
 = 
	`zùli°Next
(
zl
,
ïå
)Ë!
NULL
) {

1013 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
)) {

1015 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

1016 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

1017 
num
++;

1024 i‡(
dñëed
 !
NULL
Ë*dñëed = 
num
;

1025  
zl
;

1026 
	}
}

1030 *
	$zzlDñëeR™geByR™k
(*
zl
, 
°¨t
, 
íd
, *
dñëed
) {

1031 
num
 = (
íd
-
°¨t
)+1;

1032 i‡(
dñëed
Ë*dñëed = 
num
;

1033 
zl
 = 
	`zùli°DñëeR™ge
(zl,2*(
°¨t
-1),2*
num
);

1034  
zl
;

1035 
	}
}

1041 
	$z£tLígth
(
robj
 *
zobj
) {

1042 
Àngth
 = -1;

1043 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1044 
Àngth
 = 
	`zzlLígth
(
zobj
->
±r
);

1045 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1046 
Àngth
 = ((
z£t
*)
zobj
->
±r
)->
z¶
->length;

1048 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1050  
Àngth
;

1051 
	}
}

1053 
	$z£tC⁄vît
(
robj
 *
zobj
, 
ícodög
) {

1054 
z£t
 *
zs
;

1055 
zskùli°Node
 *
node
, *
√xt
;

1056 
robj
 *
ñe
;

1057 
sc‹e
;

1059 i‡(
zobj
->
ícodög
 ==Éncoding) ;

1060 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1061 *
zl
 = 
zobj
->
±r
;

1062 *
ïå
, *
•å
;

1063 *
v°r
;

1064 
vÀn
;

1065 
vl⁄g
;

1067 i‡(
ícodög
 !
OBJ_ENCODING_SKIPLIST
)

1068 
	`£rvîP™ic
("UnknownÅargetÉncoding");

1070 
zs
 = 
	`dÆloc
((*zs));

1071 
zs
->
di˘
 = 
	`di˘Cª©e
(&
z£tDi˘Ty≥
,
NULL
);

1072 
zs
->
z¶
 = 
	`z¶Cª©e
();

1074 
ïå
 = 
	`zùli°Index
(
zl
,0);

1075 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
ïå
 != NULL);

1076 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

1077 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
•å
 != NULL);

1079 
ïå
 !
NULL
) {

1080 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

1081 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

1082 i‡(
v°r
 =
NULL
)

1083 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

1085 
ñe
 = 
	`¸óãSåögObje˘
((*)
v°r
,
vÀn
);

1088 
node
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
ñe
);

1089 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
	`di˘Add
(
zs
->
di˘
,
ñe
,&
node
->
sc‹e
Ë=
DICT_OK
);

1090 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

1093 
	`d‰ì
(
zobj
->
±r
);

1094 
zobj
->
±r
 = 
zs
;

1095 
zobj
->
ícodög
 = 
OBJ_ENCODING_SKIPLIST
;

1096 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1097 *
zl
 = 
	`zùli°New
();

1099 i‡(
ícodög
 !
OBJ_ENCODING_ZIPLIST
)

1100 
	`£rvîP™ic
("UnknownÅargetÉncoding");

1104 
zs
 = 
zobj
->
±r
;

1105 
node
 = 
zs
->
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

1106 
	`d‰ì
(
zs
->
z¶
->
hódî
);

1107 
	`d‰ì
(
zs
->
z¶
);

1109 
node
) {

1110 
ñe
 = 
	`gëDecodedObje˘
(
node
->
obj
);

1111 
zl
 = 
	`zzlIn£πAt
(zl,
NULL
,
ñe
,
node
->
sc‹e
);

1112 i‡(
ñe
 !
node
->
obj
Ë
	`‰ìObje˘
(ele);

1113 
√xt
 = 
node
->
Àvñ
[0].
f‹w¨d
;

1114 
	`z¶FªeNode
(
node
);

1115 
node
 = 
√xt
;

1118 
	`di˘Rñó£
(
zs
->
di˘
);

1119 
	`d‰ì
(
zs
);

1120 
zobj
->
±r
 = 
zl
;

1121 
zobj
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

1123 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1125 
	}
}

1130 
	$z£tC⁄vîtToZùli°IfNìded
(
robj
 *
zobj
, 
size_t
 
maxññí
) {

1131 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) ;

1132 
z£t
 *z£à
zobj
->
±r
;

1134 i‡(
z£t
->
z¶
->
Àngth
 <
£rvî
.
z£t_max_zùli°_íåõs
 &&

1135 
maxññí
 <
£rvî
.
z£t_max_zùli°_vÆue
)

1136 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_ZIPLIST
);

1137 
	}
}

1143 
	$z£tSc‹e
(
robj
 *
zobj
,Ñobj *
membî
, *
sc‹e
) {

1144 i‡(!
zobj
 || !
membî
Ë 
VR_ERROR
;

1146 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1147 i‡(
	`zzlFöd
(
zobj
->
±r
, 
membî
, 
sc‹e
Ë=
NULL
Ë 
VR_ERROR
;

1148 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1149 
z£t
 *
zs
 = 
zobj
->
±r
;

1150 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
zs
->
di˘
, 
membî
);

1151 i‡(
de
 =
NULL
Ë 
VR_ERROR
;

1152 *
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1154 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1156  
VR_OK
;

1157 
	}
}

1164 
	#ZADD_NONE
 0

	)

1165 
	#ZADD_INCR
 (1<<0Ë

	)

1166 
	#ZADD_NX
 (1<<1Ë

	)

1167 
	#ZADD_XX
 (1<<2Ë

	)

1168 
	#ZADD_CH
 (1<<3Ë

	)

1170 
	$zaddGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
) {

1171 *
«√º
 = "resulting score isÇotáÇumber (NaN)";

1172 
robj
 *
key
 = 
c
->
¨gv
[1];

1173 
robj
 *
ñe
;

1174 
robj
 *
zobj
;

1175 
robj
 *
curobj
;

1176 
sc‹e
 = 0, *
sc‹es
 = 
NULL
, 
cursc‹e
 = 0.0;

1177 
j
, 
ñemíts
;

1178 
sc‹eidx
 = 0;

1182 
added
 = 0;

1183 
upd©ed
 = 0;

1184 
¥o˚s£d
 = 0;

1186 
expúed
 = 0;

1190 
sc‹eidx
 = 2;

1191 
sc‹eidx
 < 
c
->
¨gc
) {

1192 *
›t
 = 
c
->
¨gv
[
sc‹eidx
]->
±r
;

1193 i‡(!
	`°rˇ£cmp
(
›t
,"nx")Ë
Êags
 |
ZADD_NX
;

1194 i‡(!
	`°rˇ£cmp
(
›t
,"xx")Ë
Êags
 |
ZADD_XX
;

1195 i‡(!
	`°rˇ£cmp
(
›t
,"ch")Ë
Êags
 |
ZADD_CH
;

1196 i‡(!
	`°rˇ£cmp
(
›t
,"ö¸")Ë
Êags
 |
ZADD_INCR
;

1198 
sc‹eidx
++;

1202 
ö¸
 = (
Êags
 & 
ZADD_INCR
) != 0;

1203 
nx
 = (
Êags
 & 
ZADD_NX
) != 0;

1204 
xx
 = (
Êags
 & 
ZADD_XX
) != 0;

1205 
ch
 = (
Êags
 & 
ZADD_CH
) != 0;

1209 
ñemíts
 = 
c
->
¨gc
-
sc‹eidx
;

1210 i‡(
ñemíts
 % 2) {

1211 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1214 
ñemíts
 /= 2;

1217 i‡(
nx
 && 
xx
) {

1218 
	`addRïlyEº‹
(
c
,

1223 i‡(
ö¸
 && 
ñemíts
 > 1) {

1224 
	`addRïlyEº‹
(
c
,

1232 
sc‹es
 = 
	`dÆloc
(()*
ñemíts
);

1233 
j
 = 0; j < 
ñemíts
; j++) {

1234 i‡(
	`gëDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[
sc‹eidx
+
j
*2],&
sc‹es
[j],
NULL
)

1235 !
VR_OK
Ë
˛ónup
;

1238 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1239 
	`lockDbWrôe
(
c
->
db
);

1241 
zobj
 = 
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
);

1242 i‡(
zobj
 =
NULL
) {

1243 i‡(
xx
) {

1244 
	`u∆ockDb
(
c
->
db
);

1245 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1246 
ª∂y_to_˛õ¡
;

1248 i‡(
£rvî
.
z£t_max_zùli°_íåõs
 == 0 ||

1249 
£rvî
.
z£t_max_zùli°_vÆue
 < 
	`sd¶í
(
c
->
¨gv
[
sc‹eidx
+1]->
±r
))

1251 
zobj
 = 
	`¸óãZ£tObje˘
();

1253 
zobj
 = 
	`¸óãZ£tZùli°Obje˘
();

1255 
	`dbAdd
(
c
->
db
,
key
,
zobj
);

1257 i‡(
zobj
->
ty≥
 !
OBJ_ZSET
) {

1258 
	`u∆ockDb
(
c
->
db
);

1259 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1260 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

1261 
˛ónup
;

1265 
j
 = 0; j < 
ñemíts
; j++) {

1266 
sc‹e
 = 
sc‹es
[
j
];

1268 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1269 *
ïå
;

1272 
ñe
 = 
c
->
¨gv
[
sc‹eidx
+1+
j
*2];

1273 i‡((
ïå
 = 
	`zzlFöd
(
zobj
->
±r
,
ñe
,&
cursc‹e
)Ë!
NULL
) {

1274 i‡(
nx
) ;

1275 i‡(
ö¸
) {

1276 
sc‹e
 +
cursc‹e
;

1277 i‡(
	`i¢™
(
sc‹e
)) {

1278 
	`u∆ockDb
(
c
->
db
);

1279 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1280 
	`addRïlyEº‹
(
c
,
«√º
);

1281 
˛ónup
;

1286 i‡(
sc‹e
 !
cursc‹e
) {

1287 
zobj
->
±r
 = 
	`zzlDñëe
(zobj->±r,
ïå
);

1288 
zobj
->
±r
 = 
	`zzlIn£π
(zobj->±r,
ñe
,
sc‹e
);

1289 
c
->
vñ
->
dúty
++;

1290 
upd©ed
++;

1292 
¥o˚s£d
++;

1293 } i‡(!
xx
) {

1296 
zobj
->
±r
 = 
	`zzlIn£π
(zobj->±r,
ñe
,
sc‹e
);

1297 i‡(
	`zzlLígth
(
zobj
->
±r
Ë> 
£rvî
.
z£t_max_zùli°_íåõs
)

1298 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_SKIPLIST
);

1299 i‡(
	`sd¶í
(
ñe
->
±r
Ë> 
£rvî
.
z£t_max_zùli°_vÆue
)

1300 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_SKIPLIST
);

1301 
c
->
vñ
->
dúty
++;

1302 
added
++;

1303 
¥o˚s£d
++;

1305 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1306 
z£t
 *
zs
 = 
zobj
->
±r
;

1307 
zskùli°Node
 *
znode
;

1308 
di˘E¡ry
 *
de
;

1310 
ñe
 = 
c
->
¨gv
[
sc‹eidx
+1+
j
*2] =

1311 
	`åyObje˘Encodög
(
c
->
¨gv
[
sc‹eidx
+1+
j
*2]);

1312 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
ñe
);

1313 i‡(
de
 !
NULL
) {

1314 i‡(
nx
) ;

1315 
curobj
 = 
	`di˘GëKey
(
de
);

1316 
cursc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1318 i‡(
ö¸
) {

1319 
sc‹e
 +
cursc‹e
;

1320 i‡(
	`i¢™
(
sc‹e
)) {

1321 
	`u∆ockDb
(
c
->
db
);

1322 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1323 
	`addRïlyEº‹
(
c
,
«√º
);

1326 
˛ónup
;

1333 i‡(
sc‹e
 !
cursc‹e
) {

1334 
	`£rvîAs£πWôhInfo
(
c
,
curobj
,
	`z¶Dñëe
(
zs
->
z¶
,
cursc‹e
,curobj));

1335 
znode
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
curobj
);

1336 
	`di˘GëVÆ
(
de
Ë&
znode
->
sc‹e
;

1337 
c
->
vñ
->
dúty
++;

1338 
upd©ed
++;

1340 
¥o˚s£d
++;

1341 } i‡(!
xx
) {

1342 
ñe
 = 
	`dupSåögObje˘Unc⁄°™t
(ele);

1343 
znode
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
ñe
);

1344 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
	`di˘Add
(
zs
->
di˘
,
ñe
,&
znode
->
sc‹e
Ë=
DICT_OK
);

1345 
c
->
vñ
->
dúty
++;

1346 
added
++;

1347 
¥o˚s£d
++;

1350 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1354 
	`u∆ockDb
(
c
->
db
);

1355 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1357 
ª∂y_to_˛õ¡
:

1358 i‡(
ö¸
) {

1359 i‡(
¥o˚s£d
)

1360 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

1362 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1364 
	`addRïlyL⁄gL⁄g
(
c
,
ch
 ? 
added
+
upd©ed
 :ádded);

1367 
˛ónup
:

1368 
	`d‰ì
(
sc‹es
);

1369 i‡(
added
 || 
upd©ed
) {

1370 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1371 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,

1372 
ö¸
 ? "zö¸" : "zadd", 
key
, 
c
->
db
->
id
);

1374 
	}
}

1376 
	$zaddComm™d
(
˛õ¡
 *
c
) {

1377 
	`zaddGíîicComm™d
(
c
,
ZADD_NONE
);

1378 
	}
}

1380 
	$zö¸byComm™d
(
˛õ¡
 *
c
) {

1381 
	`zaddGíîicComm™d
(
c
,
ZADD_INCR
);

1382 
	}
}

1384 
	$zªmComm™d
(
˛õ¡
 *
c
) {

1385 
robj
 *
key
 = 
c
->
¨gv
[1];

1386 
robj
 *
zobj
;

1387 
dñëed
 = 0, 
keyªmoved
 = 0, 
j
;

1388 
expúed
 = 0;

1390 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1391 
	`lockDbWrôe
(
c
->
db
);

1392 i‡((
zobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

1393 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

1394 
	`u∆ockDb
(
c
->
db
);

1395 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1399 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1400 *
ïå
;

1402 
j
 = 2; j < 
c
->
¨gc
; j++) {

1403 i‡((
ïå
 = 
	`zzlFöd
(
zobj
->
±r
,
c
->
¨gv
[
j
],
NULL
)) != NULL) {

1404 
dñëed
++;

1405 
zobj
->
±r
 = 
	`zzlDñëe
(zobj->±r,
ïå
);

1406 i‡(
	`zzlLígth
(
zobj
->
±r
) == 0) {

1407 
	`dbDñëe
(
c
->
db
,
key
);

1408 
keyªmoved
 = 1;

1413 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1414 
z£t
 *
zs
 = 
zobj
->
±r
;

1415 
di˘E¡ry
 *
de
;

1416 
sc‹e
;

1418 
j
 = 2; j < 
c
->
¨gc
; j++) {

1419 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
c
->
¨gv
[
j
]);

1420 i‡(
de
 !
NULL
) {

1421 
dñëed
++;

1424 
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1425 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[
j
],
	`z¶Dñëe
(
zs
->
z¶
,
sc‹e
,c->argv[j]));

1428 
	`di˘Dñëe
(
zs
->
di˘
,
c
->
¨gv
[
j
]);

1429 i‡(
	`htNìdsResize
(
zs
->
di˘
)Ë
	`di˘Resize
(zs->dict);

1430 i‡(
	`di˘Size
(
zs
->
di˘
) == 0) {

1431 
	`dbDñëe
(
c
->
db
,
key
);

1432 
keyªmoved
 = 1;

1438 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1441 i‡(
dñëed
) {

1442 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,"zªm",
key
,
c
->
db
->
id
);

1443 i‡(
keyªmoved
)

1444 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1445 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1446 
c
->
vñ
->
dúty
 +
dñëed
;

1448 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

1449 
	`u∆ockDb
(
c
->
db
);

1450 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1451 
	}
}

1454 
	#ZRANGE_RANK
 0

	)

1455 
	#ZRANGE_SCORE
 1

	)

1456 
	#ZRANGE_LEX
 2

	)

1457 
	$zªmøngeGíîicComm™d
(
˛õ¡
 *
c
, 
øngëy≥
) {

1458 
robj
 *
key
 = 
c
->
¨gv
[1];

1459 
robj
 *
zobj
;

1460 
keyªmoved
 = 0;

1461 
dñëed
 = 0;

1462 
zønge•ec
 
ønge
;

1463 
zÀxønge•ec
 
Àxønge
;

1464 
°¨t
, 
íd
, 
Œí
;

1465 
expúed
 = 0;

1468 i‡(
øngëy≥
 =
ZRANGE_RANK
) {

1469 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
) ||

1470 (
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
))

1472 } i‡(
øngëy≥
 =
ZRANGE_SCORE
) {

1473 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

1474 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

1477 } i‡(
øngëy≥
 =
ZRANGE_LEX
) {

1478 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[2],c->¨gv[3],&
Àxønge
Ë!
VR_OK
) {

1479 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

1484 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1485 
	`lockDbWrôe
(
c
->
db
);

1487 i‡((
zobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

1488 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)Ë
˛ónup
;

1490 i‡(
øngëy≥
 =
ZRANGE_RANK
) {

1492 
Œí
 = 
	`z£tLígth
(
zobj
);

1493 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

1494 i‡(
íd
 < 0Ëíd = 
Œí
+end;

1495 i‡(
°¨t
 < 0) start = 0;

1499 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

1500 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1501 
˛ónup
;

1503 i‡(
íd
 >
Œí
)Énd =Ülen-1;

1507 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1508 
øngëy≥
) {

1509 
ZRANGE_RANK
:

1510 
zobj
->
±r
 = 
	`zzlDñëeR™geByR™k
(zobj->±r,
°¨t
+1,
íd
+1,&
dñëed
);

1512 
ZRANGE_SCORE
:

1513 
zobj
->
±r
 = 
	`zzlDñëeR™geBySc‹e
(zobj->±r,&
ønge
,&
dñëed
);

1515 
ZRANGE_LEX
:

1516 
zobj
->
±r
 = 
	`zzlDñëeR™geByLex
(zobj->±r,&
Àxønge
,&
dñëed
);

1519 i‡(
	`zzlLígth
(
zobj
->
±r
) == 0) {

1520 
	`dbDñëe
(
c
->
db
,
key
);

1521 
keyªmoved
 = 1;

1523 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1524 
z£t
 *
zs
 = 
zobj
->
±r
;

1525 
øngëy≥
) {

1526 
ZRANGE_RANK
:

1527 
dñëed
 = 
	`z¶DñëeR™geByR™k
(
zs
->
z¶
,
°¨t
+1,
íd
+1,zs->
di˘
);

1529 
ZRANGE_SCORE
:

1530 
dñëed
 = 
	`z¶DñëeR™geBySc‹e
(
zs
->
z¶
,&
ønge
,zs->
di˘
);

1532 
ZRANGE_LEX
:

1533 
dñëed
 = 
	`z¶DñëeR™geByLex
(
zs
->
z¶
,&
Àxønge
,zs->
di˘
);

1536 i‡(
	`htNìdsResize
(
zs
->
di˘
)Ë
	`di˘Resize
(zs->dict);

1537 i‡(
	`di˘Size
(
zs
->
di˘
) == 0) {

1538 
	`dbDñëe
(
c
->
db
,
key
);

1539 
keyªmoved
 = 1;

1542 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1546 i‡(
dñëed
) {

1547 *
evít
[3] = {"zremrangebyrank","zremrangebyscore","zremrangebylex"};

1548 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1549 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,
evít
[
øngëy≥
],
key
,
c
->
db
->
id
);

1550 i‡(
keyªmoved
)

1551 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1553 
c
->
vñ
->
dúty
 +
dñëed
;

1554 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

1556 
˛ónup
:

1557 i‡(
øngëy≥
 =
ZRANGE_LEX
Ë
	`z¶FªeLexR™ge
(&
Àxønge
);

1558 
	`u∆ockDb
(
c
->
db
);

1559 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1560 
	}
}

1562 
	$zªmøngebyønkComm™d
(
˛õ¡
 *
c
) {

1563 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_RANK
);

1564 
	}
}

1566 
	$zªmøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

1567 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_SCORE
);

1568 
	}
}

1570 
	$zªmøngebyÀxComm™d
(
˛õ¡
 *
c
) {

1571 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_LEX
);

1572 
	}
}

1580 
	#OPVAL_DIRTY_ROBJ
 1

	)

1581 
	#OPVAL_DIRTY_LL
 2

	)

1582 
	#OPVAL_VALID_LL
 4

	)

1584 
_ôî£t
 
	tôî£t
;

1585 
_ôîz£t
 
	tôîz£t
;

1587 
	$zuiInôIãøt‹
(
z£t›§c
 *
›
) {

1588 i‡(
›
->
subje˘
 =
NULL
)

1591 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1592 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1593 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1594 
ô
->
is
.i†
›
->
subje˘
->
±r
;

1595 
ô
->
is
.
ii
 = 0;

1596 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1597 
ô
->
ht
.
di˘
 = 
›
->
subje˘
->
±r
;

1598 
ô
->
ht
.
di
 = 
	`di˘GëIãøt‹
(
›
->
subje˘
->
±r
);

1599 
ô
->
ht
.
de
 = 
	`di˘Next
(ô->ht.
di
);

1601 
	`£rvîP™ic
("Unknown setÉncoding");

1603 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1604 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1605 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1606 
ô
->
zl
.z»
›
->
subje˘
->
±r
;

1607 
ô
->
zl
.
ïå
 = 
	`zùli°Index
(it->zl.zl,0);

1608 i‡(
ô
->
zl
.
ïå
 !
NULL
) {

1609 
ô
->
zl
.
•å
 = 
	`zùli°Next
(ô->zl.zl,ô->zl.
ïå
);

1610 
	`ASSERT
(
ô
->
zl
.
•å
 !
NULL
);

1612 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1613 
ô
->
¶
.
zs
 = 
›
->
subje˘
->
±r
;

1614 
ô
->
¶
.
node
 = it->¶.
zs
->
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

1616 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1619 
	`£rvîP™ic
("UnsupportedÅype");

1621 
	}
}

1623 
	$zuiCÀ¨Iãøt‹
(
z£t›§c
 *
›
) {

1624 i‡(
›
->
subje˘
 =
NULL
)

1627 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1628 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1629 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1630 
	`UNUSED
(
ô
);

1631 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1632 
	`di˘Rñó£Iãøt‹
(
ô
->
ht
.
di
);

1634 
	`£rvîP™ic
("Unknown setÉncoding");

1636 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1637 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1638 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1639 
	`UNUSED
(
ô
);

1640 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1641 
	`UNUSED
(
ô
);

1643 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1646 
	`£rvîP™ic
("UnsupportedÅype");

1648 
	}
}

1650 
	$zuiLígth
(
z£t›§c
 *
›
) {

1651 i‡(
›
->
subje˘
 =
NULL
)

1654 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1655 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1656  
	`öt£tLí
(
›
->
subje˘
->
±r
);

1657 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1658 
di˘
 *
ht
 = 
›
->
subje˘
->
±r
;

1659  
	`di˘Size
(
ht
);

1661 
	`£rvîP™ic
("Unknown setÉncoding");

1663 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1664 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1665  
	`zzlLígth
(
›
->
subje˘
->
±r
);

1666 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1667 
z£t
 *
zs
 = 
›
->
subje˘
->
±r
;

1668  
zs
->
z¶
->
Àngth
;

1670 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1673 
	`£rvîP™ic
("UnsupportedÅype");

1675 
	}
}

1680 
	$zuiNext
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
) {

1681 
ªt
;

1683 i‡(
›
->
subje˘
 =
NULL
)

1686 i‡(
vÆ
->
Êags
 & 
OPVAL_DIRTY_ROBJ
)

1687 
	`de¸RefCou¡
(
vÆ
->
ñe
);

1689 
	`mem£t
(
vÆ
,0,(
z£t›vÆ
));

1691 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1692 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1693 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1694 
öt64_t
 
ñl
;

1696 i‡(!
	`öt£tGë
(
ô
->
is
.is,ô->is.
ii
,&
ñl
))

1698 
vÆ
->
ñl
 =Éll;

1699 
vÆ
->
sc‹e
 = 1.0;

1702 
ô
->
is
.
ii
++;

1703 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1704 i‡(
ô
->
ht
.
de
 =
NULL
)

1706 
vÆ
->
ñe
 = 
	`di˘GëKey
(
ô
->
ht
.
de
);

1707 
vÆ
->
sc‹e
 = 1.0;

1710 
ô
->
ht
.
de
 = 
	`di˘Next
(ô->ht.
di
);

1712 
	`£rvîP™ic
("Unknown setÉncoding");

1714 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1715 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1716 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1718 i‡(
ô
->
zl
.
ïå
 =
NULL
 || it->zl.
•å
 == NULL)

1720 
ªt
 = (Ë
	`zùli°Gë
(
ô
->
zl
.
ïå
,&
vÆ
->
e°r
,&vÆ->
ñí
,&vÆ->
ñl
);

1721 
	`ASSERT
(
ªt
 > 0);

1722 
vÆ
->
sc‹e
 = 
	`zzlGëSc‹e
(
ô
->
zl
.
•å
);

1725 
	`zzlNext
(
ô
->
zl
.zl,&ô->zl.
ïå
,&ô->zl.
•å
);

1726 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1727 i‡(
ô
->
¶
.
node
 =
NULL
)

1729 
vÆ
->
ñe
 = 
ô
->
¶
.
node
->
obj
;

1730 
vÆ
->
sc‹e
 = 
ô
->
¶
.
node
->score;

1733 
ô
->
¶
.
node
 = it->¶.node->
Àvñ
[0].
f‹w¨d
;

1735 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1738 
	`£rvîP™ic
("UnsupportedÅype");

1741 
	}
}

1743 
	$zuiL⁄gL⁄gFromVÆue
(
z£t›vÆ
 *
vÆ
) {

1744 i‡(!(
vÆ
->
Êags
 & 
OPVAL_DIRTY_LL
)) {

1745 
vÆ
->
Êags
 |
OPVAL_DIRTY_LL
;

1747 i‡(
vÆ
->
ñe
 !
NULL
) {

1748 i‡(
vÆ
->
ñe
->
ícodög
 =
OBJ_ENCODING_INT
) {

1749 
vÆ
->
ñl
 = ()vÆ->
ñe
->
±r
;

1750 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1751 } i‡(
	`sdsEncodedObje˘
(
vÆ
->
ñe
)) {

1752 i‡(
	`°rög2Œ
(
vÆ
->
ñe
->
±r
,
	`sd¶í
(vÆ->ñe->±r),&vÆ->
ñl
))

1753 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1755 
	`£rvîP™ic
("UnsupportedÉlementÉncoding");

1757 } i‡(
vÆ
->
e°r
 !
NULL
) {

1758 i‡(
	`°rög2Œ
((*)
vÆ
->
e°r
,vÆ->
ñí
,&vÆ->
ñl
))

1759 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1762 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1765  
vÆ
->
Êags
 & 
OPVAL_VALID_LL
;

1766 
	}
}

1768 
robj
 *
	$zuiObje˘FromVÆue
(
z£t›vÆ
 *
vÆ
) {

1769 i‡(
vÆ
->
ñe
 =
NULL
) {

1770 i‡(
vÆ
->
e°r
 !
NULL
) {

1771 
vÆ
->
ñe
 = 
	`¸óãSåögObje˘
((*)vÆ->
e°r
,vÆ->
ñí
);

1773 
vÆ
->
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(vÆ->
ñl
);

1775 
vÆ
->
Êags
 |
OPVAL_DIRTY_ROBJ
;

1777  
vÆ
->
ñe
;

1778 
	}
}

1780 
	$zuiBuf„rFromVÆue
(
z£t›vÆ
 *
vÆ
) {

1781 i‡(
vÆ
->
e°r
 =
NULL
) {

1782 i‡(
vÆ
->
ñe
 !
NULL
) {

1783 i‡(
vÆ
->
ñe
->
ícodög
 =
OBJ_ENCODING_INT
) {

1784 
vÆ
->
ñí
 = 
	`Œ2°rög
((*)vÆ->
_buf
,(vÆ->_buf),()vÆ->
ñe
->
±r
);

1785 
vÆ
->
e°r
 = vÆ->
_buf
;

1786 } i‡(
	`sdsEncodedObje˘
(
vÆ
->
ñe
)) {

1787 
vÆ
->
ñí
 = 
	`sd¶í
(vÆ->
ñe
->
±r
);

1788 
vÆ
->
e°r
 = vÆ->
ñe
->
±r
;

1790 
	`£rvîP™ic
("UnsupportedÉlementÉncoding");

1793 
vÆ
->
ñí
 = 
	`Œ2°rög
((*)vÆ->
_buf
,(vÆ->_buf),vÆ->
ñl
);

1794 
vÆ
->
e°r
 = vÆ->
_buf
;

1798 
	}
}

1802 
	$zuiFöd
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
, *
sc‹e
) {

1803 i‡(
›
->
subje˘
 =
NULL
)

1806 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1807 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1808 i‡(
	`zuiL⁄gL⁄gFromVÆue
(
vÆ
) &&

1809 
	`öt£tFöd
(
›
->
subje˘
->
±r
,
vÆ
->
ñl
))

1811 *
sc‹e
 = 1.0;

1816 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1817 
di˘
 *
ht
 = 
›
->
subje˘
->
±r
;

1818 
	`zuiObje˘FromVÆue
(
vÆ
);

1819 i‡(
	`di˘Föd
(
ht
,
vÆ
->
ñe
Ë!
NULL
) {

1820 *
sc‹e
 = 1.0;

1826 
	`£rvîP™ic
("Unknown setÉncoding");

1828 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1829 
	`zuiObje˘FromVÆue
(
vÆ
);

1831 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1832 i‡(
	`zzlFöd
(
›
->
subje˘
->
±r
,
vÆ
->
ñe
,
sc‹e
Ë!
NULL
) {

1838 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1839 
z£t
 *
zs
 = 
›
->
subje˘
->
±r
;

1840 
di˘E¡ry
 *
de
;

1841 i‡((
de
 = 
	`di˘Föd
(
zs
->
di˘
,
vÆ
->
ñe
)Ë!
NULL
) {

1842 *
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1848 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1851 
	`£rvîP™ic
("UnsupportedÅype");

1853 
	}
}

1855 
	$zuiCom∑ªByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

1856  
	`zuiLígth
((
z£t›§c
*)
s1
Ë- zuiLígth((z£t›§c*)
s2
);

1857 
	}
}

1859 
	#REDIS_AGGR_SUM
 1

	)

1860 
	#REDIS_AGGR_MIN
 2

	)

1861 
	#REDIS_AGGR_MAX
 3

	)

1862 
	#zuni⁄I¡îDi˘VÆue
(
_e
Ë(
	`di˘GëVÆ
(_eË=
NULL
 ? 1.0 : *(*)di˘GëVÆ(_e))

	)

1864 
ölöe
 
	$zuni⁄I¡îAggªg©e
(*
èrgë
, 
vÆ
, 
aggªg©e
) {

1865 i‡(
aggªg©e
 =
REDIS_AGGR_SUM
) {

1866 *
èrgë
 = *èrgë + 
vÆ
;

1870 i‡(
	`i¢™
(*
èrgë
)) *target = 0.0;

1871 } i‡(
aggªg©e
 =
REDIS_AGGR_MIN
) {

1872 *
èrgë
 = 
vÆ
 < *target ? val : *target;

1873 } i‡(
aggªg©e
 =
REDIS_AGGR_MAX
) {

1874 *
èrgë
 = 
vÆ
 > *target ? val : *target;

1877 
	`£rvîP™ic
("Unknown ZUNION/INTERággregateÅype");

1879 
	}
}

1881 
	#SET_OP_UNION
 0

	)

1882 
	#SET_OP_DIFF
 1

	)

1883 
	#SET_OP_INTER
 2

	)

1885 
	$zuni⁄I¡îGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
d°key
, 
›
) {

1886 
i
, 
j
;

1887 
£äum
;

1888 
aggªg©e
 = 
REDIS_AGGR_SUM
;

1889 
z£t›§c
 *
§c
;

1890 
z£t›vÆ
 
zvÆ
;

1891 
robj
 *
tmp
;

1892 
maxññí
 = 0;

1893 
robj
 *
d°obj
;

1894 
z£t
 *
d°z£t
;

1895 
zskùli°Node
 *
znode
;

1896 
touched
 = 0;

1899 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
£äum
, 
NULL
Ë!
VR_OK
))

1902 i‡(
£äum
 < 1) {

1903 
	`addRïlyEº‹
(
c
,

1909 i‡(
£äum
 > 
c
->
¨gc
-3) {

1910 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1915 
§c
 = 
	`dˇŒoc
(
£äum
, (
z£t›§c
));

1916 
i
 = 0, 
j
 = 3; i < 
£äum
; i++, j++) {

1917 
robj
 *
obj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
);

1918 i‡(
obj
 !
NULL
) {

1919 i‡(
obj
->
ty≥
 !
OBJ_ZSET
 && obj->ty≥ !
OBJ_SET
) {

1920 
	`d‰ì
(
§c
);

1921 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

1925 
§c
[
i
].
subje˘
 = 
obj
;

1926 
§c
[
i
].
ty≥
 = 
obj
->type;

1927 
§c
[
i
].
ícodög
 = 
obj
->encoding;

1929 
§c
[
i
].
subje˘
 = 
NULL
;

1933 
§c
[
i
].
weight
 = 1.0;

1937 i‡(
j
 < 
c
->
¨gc
) {

1938 
ªmaöög
 = 
c
->
¨gc
 - 
j
;

1940 
ªmaöög
) {

1941 i‡(
ªmaöög
 >(
£äum
 + 1Ë&& !
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"weights")) {

1942 
j
++; 
ªmaöög
--;

1943 
i
 = 0; i < 
£äum
; i++, 
j
++, 
ªmaöög
--) {

1944 i‡(
	`gëDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[
j
],&
§c
[
i
].
weight
,

1945 "weighàvÆuêi†nŸá flﬂt"Ë!
VR_OK
)

1947 
	`d‰ì
(
§c
);

1951 } i‡(
ªmaöög
 >2 && !
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"aggregate")) {

1952 
j
++; 
ªmaöög
--;

1953 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"sum")) {

1954 
aggªg©e
 = 
REDIS_AGGR_SUM
;

1955 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"min")) {

1956 
aggªg©e
 = 
REDIS_AGGR_MIN
;

1957 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"max")) {

1958 
aggªg©e
 = 
REDIS_AGGR_MAX
;

1960 
	`d‰ì
(
§c
);

1961 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1964 
j
++; 
ªmaöög
--;

1966 
	`d‰ì
(
§c
);

1967 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1975 
	`qs‹t
(
§c
,
£äum
,(
z£t›§c
),
zuiCom∑ªByC¨döÆôy
);

1977 
d°obj
 = 
	`¸óãZ£tObje˘
();

1978 
d°z£t
 = 
d°obj
->
±r
;

1979 
	`mem£t
(&
zvÆ
, 0, (zval));

1981 i‡(
›
 =
SET_OP_INTER
) {

1983 i‡(
	`zuiLígth
(&
§c
[0]) > 0) {

1986 
	`zuiInôIãøt‹
(&
§c
[0]);

1987 
	`zuiNext
(&
§c
[0],&
zvÆ
)) {

1988 
sc‹e
, 
vÆue
;

1990 
sc‹e
 = 
§c
[0].
weight
 * 
zvÆ
.score;

1991 i‡(
	`i¢™
(
sc‹e
)) score = 0;

1993 
j
 = 1; j < 
£äum
; j++) {

1996 i‡(
§c
[
j
].
subje˘
 == src[0].subject) {

1997 
vÆue
 = 
zvÆ
.
sc‹e
*
§c
[
j
].
weight
;

1998 
	`zuni⁄I¡îAggªg©e
(&
sc‹e
,
vÆue
,
aggªg©e
);

1999 } i‡(
	`zuiFöd
(&
§c
[
j
],&
zvÆ
,&
vÆue
)) {

2000 
vÆue
 *
§c
[
j
].
weight
;

2001 
	`zuni⁄I¡îAggªg©e
(&
sc‹e
,
vÆue
,
aggªg©e
);

2008 i‡(
j
 =
£äum
) {

2009 
tmp
 = 
	`zuiObje˘FromVÆue
(&
zvÆ
);

2010 
znode
 = 
	`z¶In£π
(
d°z£t
->
z¶
,
sc‹e
,
tmp
);

2011 
	`ö¸RefCou¡
(
tmp
);

2012 
	`di˘Add
(
d°z£t
->
di˘
,
tmp
,&
znode
->
sc‹e
);

2013 
	`ö¸RefCou¡
(
tmp
);

2015 i‡(
	`sdsEncodedObje˘
(
tmp
)) {

2016 i‡(
	`sd¶í
(
tmp
->
±r
Ë> 
maxññí
)

2017 
maxññí
 = 
	`sd¶í
(
tmp
->
±r
);

2021 
	`zuiCÀ¨Iãøt‹
(&
§c
[0]);

2023 } i‡(
›
 =
SET_OP_UNION
) {

2024 
di˘
 *
accumuœt‹
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

2025 
di˘Iãøt‹
 *
di
;

2026 
di˘E¡ry
 *
de
;

2027 
sc‹e
;

2029 i‡(
£äum
) {

2032 
	`di˘Ex∑nd
(
accumuœt‹
,
	`zuiLígth
(&
§c
[
£äum
-1]));

2037 
i
 = 0; i < 
£äum
; i++) {

2038 i‡(
	`zuiLígth
(&
§c
[
i
]) == 0) ;

2040 
	`zuiInôIãøt‹
(&
§c
[
i
]);

2041 
	`zuiNext
(&
§c
[
i
],&
zvÆ
)) {

2043 
sc‹e
 = 
§c
[
i
].
weight
 * 
zvÆ
.score;

2044 i‡(
	`i¢™
(
sc‹e
)) score = 0;

2047 
de
 = 
	`di˘Föd
(
accumuœt‹
,
	`zuiObje˘FromVÆue
(&
zvÆ
));

2049 i‡(
de
 =
NULL
) {

2050 
tmp
 = 
	`zuiObje˘FromVÆue
(&
zvÆ
);

2054 i‡(
	`sdsEncodedObje˘
(
tmp
)) {

2055 i‡(
	`sd¶í
(
tmp
->
±r
Ë> 
maxññí
)

2056 
maxññí
 = 
	`sd¶í
(
tmp
->
±r
);

2059 
de
 = 
	`di˘AddRaw
(
accumuœt‹
,
tmp
);

2060 
	`ö¸RefCou¡
(
tmp
);

2061 
	`di˘SëDoubÀVÆ
(
de
,
sc‹e
);

2069 
	`zuni⁄I¡îAggªg©e
(&
de
->
v
.
d
,
sc‹e
,
aggªg©e
);

2072 
	`zuiCÀ¨Iãøt‹
(&
§c
[
i
]);

2076 
di
 = 
	`di˘GëIãøt‹
(
accumuœt‹
);

2081 
	`di˘Ex∑nd
(
d°z£t
->
di˘
,
	`di˘Size
(
accumuœt‹
));

2083 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

2084 
robj
 *
ñe
 = 
	`di˘GëKey
(
de
);

2085 
sc‹e
 = 
	`di˘GëDoubÀVÆ
(
de
);

2086 
znode
 = 
	`z¶In£π
(
d°z£t
->
z¶
,
sc‹e
,
ñe
);

2087 
	`ö¸RefCou¡
(
ñe
);

2088 
	`di˘Add
(
d°z£t
->
di˘
,
ñe
,&
znode
->
sc‹e
);

2089 
	`ö¸RefCou¡
(
ñe
);

2091 
	`di˘Rñó£Iãøt‹
(
di
);

2094 
	`di˘Rñó£
(
accumuœt‹
);

2096 
	`£rvîP™ic
("Unknown operator");

2099 i‡(
	`dbDñëe
(
c
->
db
,
d°key
)) {

2100 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

2101 
touched
 = 1;

2102 
£rvî
.
dúty
++;

2104 i‡(
d°z£t
->
z¶
->
Àngth
) {

2105 
	`z£tC⁄vîtToZùli°IfNìded
(
d°obj
,
maxññí
);

2106 
	`dbAdd
(
c
->
db
,
d°key
,
d°obj
);

2107 
	`addRïlyL⁄gL⁄g
(
c
,
	`z£tLígth
(
d°obj
));

2108 i‡(!
touched
Ë
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

2109 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,

2110 (
›
 =
SET_OP_UNION
) ? "zunionstore" : "zinterstore",

2111 
d°key
,
c
->
db
->
id
);

2112 
£rvî
.
dúty
++;

2114 
	`de¸RefCou¡
(
d°obj
);

2115 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

2116 i‡(
touched
)

2117 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
d°key
,
c
->
db
->
id
);

2119 
	`d‰ì
(
§c
);

2120 
	}
}

2122 
	$zuni⁄°‹eComm™d
(
˛õ¡
 *
c
) {

2123 
	`zuni⁄I¡îGíîicComm™d
(
c
,c->
¨gv
[1], 
SET_OP_UNION
);

2124 
	}
}

2126 
	$zöãr°‹eComm™d
(
˛õ¡
 *
c
) {

2127 
	`zuni⁄I¡îGíîicComm™d
(
c
,c->
¨gv
[1], 
SET_OP_INTER
);

2128 
	}
}

2130 
	$zøngeGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2131 
robj
 *
key
 = 
c
->
¨gv
[1];

2132 
robj
 *
zobj
;

2133 
wôhsc‹es
 = 0;

2134 
°¨t
;

2135 
íd
;

2136 
Œí
;

2137 
øngñí
;

2139 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

2140 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

2142 i‡(
c
->
¨gc
 =5 && !
	`°rˇ£cmp
(c->
¨gv
[4]->
±r
,"withscores")) {

2143 
wôhsc‹es
 = 1;

2144 } i‡(
c
->
¨gc
 >= 5) {

2145 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2149 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2150 
	`lockDbRód
(
c
->
db
);

2151 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

2152 
	`u∆ockDb
(
c
->
db
);

2153 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2155 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2156 
	`u∆ockDb
(
c
->
db
);

2157 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2162 
Œí
 = 
	`z£tLígth
(
zobj
);

2163 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

2164 i‡(
íd
 < 0Ëíd = 
Œí
+end;

2165 i‡(
°¨t
 < 0) start = 0;

2169 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

2170 
	`u∆ockDb
(
c
->
db
);

2171 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2172 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

2175 i‡(
íd
 >
Œí
)Énd =Ülen-1;

2176 
øngñí
 = (
íd
-
°¨t
)+1;

2179 
	`addRïlyMu…iBulkLí
(
c
, 
wôhsc‹es
 ? (
øngñí
*2) :Ñangelen);

2181 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2182 *
zl
 = 
zobj
->
±r
;

2183 *
ïå
, *
•å
;

2184 *
v°r
;

2185 
vÀn
;

2186 
vl⁄g
;

2188 i‡(
ªvî£
)

2189 
ïå
 = 
	`zùli°Index
(
zl
,-2-(2*
°¨t
));

2191 
ïå
 = 
	`zùli°Index
(
zl
,2*
°¨t
);

2193 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2194 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2196 
øngñí
--) {

2197 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
 && 
•å
 != NULL);

2198 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2199 i‡(
v°r
 =
NULL
)

2200 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2202 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2204 i‡(
wôhsc‹es
)

2205 
	`addRïlyDoubÀ
(
c
,
	`zzlGëSc‹e
(
•å
));

2207 i‡(
ªvî£
)

2208 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2210 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2213 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2214 
z£t
 *
zs
 = 
zobj
->
±r
;

2215 
zskùli°
 *
z¶
 = 
zs
->zsl;

2216 
zskùli°Node
 *
 
;

2217 
robj
 *
ñe
;

2220 i‡(
ªvî£
) {

2221 
 
 = 
z¶
->
èû
;

2222 i‡(
°¨t
 > 0)

2223 
 
 = 
	`z¶GëEÀmítByR™k
(
z¶
,
Œí
-
°¨t
);

2225 
 
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

2226 i‡(
°¨t
 > 0)

2227 
 
 = 
	`z¶GëEÀmítByR™k
(
z¶
,
°¨t
+1);

2230 
øngñí
--) {

2231 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
 
 !
NULL
);

2232 
ñe
 = 
 
->
obj
;

2233 
	`addRïlyBulk
(
c
,
ñe
);

2234 i‡(
wôhsc‹es
)

2235 
	`addRïlyDoubÀ
(
c
,
 
->
sc‹e
);

2236 
 
 = 
ªvî£
 ?Ün->
backw¨d
 :Ün->
Àvñ
[0].
f‹w¨d
;

2239 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2242 
	`u∆ockDb
(
c
->
db
);

2243 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2244 
	}
}

2246 
	$zøngeComm™d
(
˛õ¡
 *
c
) {

2247 
	`zøngeGíîicComm™d
(
c
,0);

2248 
	}
}

2250 
	$zªvøngeComm™d
(
˛õ¡
 *
c
) {

2251 
	`zøngeGíîicComm™d
(
c
,1);

2252 
	}
}

2255 
	$gíîicZøngebysc‹eComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2256 
zønge•ec
 
ønge
;

2257 
robj
 *
key
 = 
c
->
¨gv
[1];

2258 
robj
 *
zobj
;

2259 
off£t
 = 0, 
limô
 = -1;

2260 
wôhsc‹es
 = 0;

2261 
øngñí
 = 0;

2262 *
ª∂yÀn
 = 
NULL
;

2263 
möidx
, 
maxidx
;

2266 i‡(
ªvî£
) {

2268 
maxidx
 = 2; 
möidx
 = 3;

2271 
möidx
 = 2; 
maxidx
 = 3;

2274 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[
möidx
],c->¨gv[
maxidx
],&
ønge
Ë!
VR_OK
) {

2275 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

2281 i‡(
c
->
¨gc
 > 4) {

2282 
ªmaöög
 = 
c
->
¨gc
 - 4;

2283 
pos
 = 4;

2285 
ªmaöög
) {

2286 i‡(
ªmaöög
 >1 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"withscores")) {

2287 
pos
++; 
ªmaöög
--;

2288 
wôhsc‹es
 = 1;

2289 } i‡(
ªmaöög
 >3 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"limit")) {

2290 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+1], &
off£t
, 
NULL
Ë!
VR_OK
) ||

2291 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+2], &
limô
, 
NULL
Ë!
VR_OK
)) ;

2292 
pos
 +3; 
ªmaöög
 -= 3;

2294 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2300 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2301 
	`lockDbRód
(
c
->
db
);

2303 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

2304 
	`u∆ockDb
(
c
->
db
);

2305 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2307 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2308 
	`u∆ockDb
(
c
->
db
);

2309 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2313 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2314 *
zl
 = 
zobj
->
±r
;

2315 *
ïå
, *
•å
;

2316 *
v°r
;

2317 
vÀn
;

2318 
vl⁄g
;

2319 
sc‹e
;

2322 i‡(
ªvî£
) {

2323 
ïå
 = 
	`zzlLa°InR™ge
(
zl
,&
ønge
);

2325 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,&
ønge
);

2329 i‡(
ïå
 =
NULL
) {

2330 
	`u∆ockDb
(
c
->
db
);

2331 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2332 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2337 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2338 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2343 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2347 
ïå
 && 
off£t
--) {

2348 i‡(
ªvî£
) {

2349 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2351 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2355 
ïå
 && 
limô
--) {

2356 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2359 i‡(
ªvî£
) {

2360 i‡(!
	`z¶VÆueGãMö
(
sc‹e
,&
ønge
)) ;

2362 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
)) ;

2366 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2368 
øngñí
++;

2369 i‡(
v°r
 =
NULL
) {

2370 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2372 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2375 i‡(
wôhsc‹es
) {

2376 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

2380 i‡(
ªvî£
) {

2381 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2383 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2386 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2387 
z£t
 *
zs
 = 
zobj
->
±r
;

2388 
zskùli°
 *
z¶
 = 
zs
->zsl;

2389 
zskùli°Node
 *
 
;

2392 i‡(
ªvî£
) {

2393 
 
 = 
	`z¶La°InR™ge
(
z¶
,&
ønge
);

2395 
 
 = 
	`z¶Fú°InR™ge
(
z¶
,&
ønge
);

2399 i‡(
 
 =
NULL
) {

2400 
	`u∆ockDb
(
c
->
db
);

2401 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2402 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2409 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2413 
 
 && 
off£t
--) {

2414 i‡(
ªvî£
) {

2415 
 
 =Ün->
backw¨d
;

2417 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2421 
 
 && 
limô
--) {

2423 i‡(
ªvî£
) {

2424 i‡(!
	`z¶VÆueGãMö
(
 
->
sc‹e
,&
ønge
)) ;

2426 i‡(!
	`z¶VÆueLãMax
(
 
->
sc‹e
,&
ønge
)) ;

2429 
øngñí
++;

2430 
	`addRïlyBulk
(
c
,
 
->
obj
);

2432 i‡(
wôhsc‹es
) {

2433 
	`addRïlyDoubÀ
(
c
,
 
->
sc‹e
);

2437 i‡(
ªvî£
) {

2438 
 
 =Ün->
backw¨d
;

2440 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2444 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2447 i‡(
wôhsc‹es
) {

2448 
øngñí
 *= 2;

2451 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ª∂yÀn
, 
øngñí
);

2452 
	`u∆ockDb
(
c
->
db
);

2453 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2454 
	}
}

2456 
	$zøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

2457 
	`gíîicZøngebysc‹eComm™d
(
c
,0);

2458 
	}
}

2460 
	$zªvøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

2461 
	`gíîicZøngebysc‹eComm™d
(
c
,1);

2462 
	}
}

2464 
	$zcou¡Comm™d
(
˛õ¡
 *
c
) {

2465 
robj
 *
key
 = 
c
->
¨gv
[1];

2466 
robj
 *
zobj
;

2467 
zønge•ec
 
ønge
;

2468 
cou¡
 = 0;

2471 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

2472 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

2476 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2477 
	`lockDbRód
(
c
->
db
);

2479 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
, 
key
, 
sh¨ed
.
czîo
)Ë=
NULL
) {

2480 
	`u∆ockDb
(
c
->
db
);

2481 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2483 } i‡(
	`checkTy≥
(
c
, 
zobj
, 
OBJ_ZSET
)) {

2484 
	`u∆ockDb
(
c
->
db
);

2485 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2489 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2490 *
zl
 = 
zobj
->
±r
;

2491 *
ïå
, *
•å
;

2492 
sc‹e
;

2495 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,&
ønge
);

2498 i‡(
ïå
 =
NULL
) {

2499 
	`u∆ockDb
(
c
->
db
);

2500 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2501 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

2506 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2507 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2508 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
));

2511 
ïå
) {

2512 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2515 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
)) {

2518 
cou¡
++;

2519 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2522 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2523 
z£t
 *
zs
 = 
zobj
->
±r
;

2524 
zskùli°
 *
z¶
 = 
zs
->zsl;

2525 
zskùli°Node
 *
zn
;

2526 
ønk
;

2529 
zn
 = 
	`z¶Fú°InR™ge
(
z¶
, &
ønge
);

2532 i‡(
zn
 !
NULL
) {

2533 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2534 
cou¡
 = (
z¶
->
Àngth
 - (
ønk
 - 1));

2537 
zn
 = 
	`z¶La°InR™ge
(
z¶
, &
ønge
);

2540 i‡(
zn
 !
NULL
) {

2541 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2542 
cou¡
 -(
z¶
->
Àngth
 - 
ønk
);

2546 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2549 
	`addRïlyL⁄gL⁄g
(
c
, 
cou¡
);

2550 
	`u∆ockDb
(
c
->
db
);

2551 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2552 
	}
}

2554 
	$zÀxcou¡Comm™d
(
˛õ¡
 *
c
) {

2555 
robj
 *
key
 = 
c
->
¨gv
[1];

2556 
robj
 *
zobj
;

2557 
zÀxønge•ec
 
ønge
;

2558 
cou¡
 = 0;

2561 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

2562 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

2567 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
, 
key
, 
sh¨ed
.
czîo
)Ë=
NULL
 ||

2568 
	`checkTy≥
(
c
, 
zobj
, 
OBJ_ZSET
))

2570 
	`z¶FªeLexR™ge
(&
ønge
);

2574 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2575 *
zl
 = 
zobj
->
±r
;

2576 *
ïå
, *
•å
;

2579 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,&
ønge
);

2582 i‡(
ïå
 =
NULL
) {

2583 
	`z¶FªeLexR™ge
(&
ønge
);

2584 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

2589 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2590 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
));

2593 
ïå
) {

2595 i‡(!
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
)) {

2598 
cou¡
++;

2599 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2602 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2603 
z£t
 *
zs
 = 
zobj
->
±r
;

2604 
zskùli°
 *
z¶
 = 
zs
->zsl;

2605 
zskùli°Node
 *
zn
;

2606 
ønk
;

2609 
zn
 = 
	`z¶Fú°InLexR™ge
(
z¶
, &
ønge
);

2612 i‡(
zn
 !
NULL
) {

2613 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2614 
cou¡
 = (
z¶
->
Àngth
 - (
ønk
 - 1));

2617 
zn
 = 
	`z¶La°InLexR™ge
(
z¶
, &
ønge
);

2620 i‡(
zn
 !
NULL
) {

2621 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2622 
cou¡
 -(
z¶
->
Àngth
 - 
ønk
);

2626 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2629 
	`z¶FªeLexR™ge
(&
ønge
);

2630 
	`addRïlyL⁄gL⁄g
(
c
, 
cou¡
);

2631 
	}
}

2634 
	$gíîicZøngebyÀxComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2635 
zÀxønge•ec
 
ønge
;

2636 
robj
 *
key
 = 
c
->
¨gv
[1];

2637 
robj
 *
zobj
;

2638 
off£t
 = 0, 
limô
 = -1;

2639 
øngñí
 = 0;

2640 *
ª∂yÀn
 = 
NULL
;

2641 
möidx
, 
maxidx
;

2644 i‡(
ªvî£
) {

2646 
maxidx
 = 2; 
möidx
 = 3;

2649 
möidx
 = 2; 
maxidx
 = 3;

2652 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[
möidx
],c->¨gv[
maxidx
],&
ønge
Ë!
VR_OK
) {

2653 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

2659 i‡(
c
->
¨gc
 > 4) {

2660 
ªmaöög
 = 
c
->
¨gc
 - 4;

2661 
pos
 = 4;

2663 
ªmaöög
) {

2664 i‡(
ªmaöög
 >3 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"limit")) {

2665 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+1], &
off£t
, 
NULL
Ë!
VR_OK
) ||

2666 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+2], &
limô
, 
NULL
Ë!
VR_OK
)) ;

2667 
pos
 +3; 
ªmaöög
 -= 3;

2669 
	`z¶FªeLexR™ge
(&
ønge
);

2670 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2677 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
 ||

2678 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
))

2680 
	`z¶FªeLexR™ge
(&
ønge
);

2684 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2685 *
zl
 = 
zobj
->
±r
;

2686 *
ïå
, *
•å
;

2687 *
v°r
;

2688 
vÀn
;

2689 
vl⁄g
;

2692 i‡(
ªvî£
) {

2693 
ïå
 = 
	`zzlLa°InLexR™ge
(
zl
,&
ønge
);

2695 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,&
ønge
);

2699 i‡(
ïå
 =
NULL
) {

2700 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2701 
	`z¶FªeLexR™ge
(&
ønge
);

2706 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2707 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2712 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2716 
ïå
 && 
off£t
--) {

2717 i‡(
ªvî£
) {

2718 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2720 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2724 
ïå
 && 
limô
--) {

2726 i‡(
ªvî£
) {

2727 i‡(!
	`zzlLexVÆueGãMö
(
ïå
,&
ønge
)) ;

2729 i‡(!
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
)) ;

2734 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2736 
øngñí
++;

2737 i‡(
v°r
 =
NULL
) {

2738 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2740 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2744 i‡(
ªvî£
) {

2745 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2747 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2750 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2751 
z£t
 *
zs
 = 
zobj
->
±r
;

2752 
zskùli°
 *
z¶
 = 
zs
->zsl;

2753 
zskùli°Node
 *
 
;

2756 i‡(
ªvî£
) {

2757 
 
 = 
	`z¶La°InLexR™ge
(
z¶
,&
ønge
);

2759 
 
 = 
	`z¶Fú°InLexR™ge
(
z¶
,&
ønge
);

2763 i‡(
 
 =
NULL
) {

2764 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2765 
	`z¶FªeLexR™ge
(&
ønge
);

2772 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2776 
 
 && 
off£t
--) {

2777 i‡(
ªvî£
) {

2778 
 
 =Ün->
backw¨d
;

2780 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2784 
 
 && 
limô
--) {

2786 i‡(
ªvî£
) {

2787 i‡(!
	`z¶LexVÆueGãMö
(
 
->
obj
,&
ønge
)) ;

2789 i‡(!
	`z¶LexVÆueLãMax
(
 
->
obj
,&
ønge
)) ;

2792 
øngñí
++;

2793 
	`addRïlyBulk
(
c
,
 
->
obj
);

2796 i‡(
ªvî£
) {

2797 
 
 =Ün->
backw¨d
;

2799 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2803 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2806 
	`z¶FªeLexR™ge
(&
ønge
);

2807 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ª∂yÀn
, 
øngñí
);

2808 
	}
}

2810 
	$zøngebyÀxComm™d
(
˛õ¡
 *
c
) {

2811 
	`gíîicZøngebyÀxComm™d
(
c
,0);

2812 
	}
}

2814 
	$zªvøngebyÀxComm™d
(
˛õ¡
 *
c
) {

2815 
	`gíîicZøngebyÀxComm™d
(
c
,1);

2816 
	}
}

2818 
	$zˇrdComm™d
(
˛õ¡
 *
c
) {

2819 
robj
 *
key
 = 
c
->
¨gv
[1];

2820 
robj
 *
zobj
;

2822 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2823 
	`lockDbRód
(
c
->
db
);

2824 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
czîo
)Ë=
NULL
) {

2825 
	`u∆ockDb
(
c
->
db
);

2826 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2828 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2829 
	`u∆ockDb
(
c
->
db
);

2830 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2834 
	`addRïlyL⁄gL⁄g
(
c
,
	`z£tLígth
(
zobj
));

2836 
	`u∆ockDb
(
c
->
db
);

2837 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2838 
	}
}

2840 
	$zsc‹eComm™d
(
˛õ¡
 *
c
) {

2841 
robj
 *
key
 = 
c
->
¨gv
[1];

2842 
robj
 *
zobj
;

2843 
sc‹e
;

2845 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2846 
	`lockDbRód
(
c
->
db
);

2847 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

2848 
	`u∆ockDb
(
c
->
db
);

2849 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2851 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2852 
	`u∆ockDb
(
c
->
db
);

2853 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2857 i‡(
	`z£tSc‹e
(
zobj
,
c
->
¨gv
[2],&
sc‹e
Ë=
VR_ERROR
) {

2858 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2860 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

2863 
	`u∆ockDb
(
c
->
db
);

2864 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2865 
	}
}

2867 
	$zønkGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2868 
robj
 *
key
 = 
c
->
¨gv
[1];

2869 
robj
 *
ñe
 = 
c
->
¨gv
[2];

2870 
robj
 *
zobj
;

2871 
Œí
;

2872 
ønk
;

2874 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2875 
	`lockDbRód
(
c
->
db
);

2876 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

2877 
	`u∆ockDb
(
c
->
db
);

2878 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2880 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2881 
	`u∆ockDb
(
c
->
db
);

2882 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2885 
Œí
 = 
	`z£tLígth
(
zobj
);

2887 
	`£rvîAs£πWôhInfo
(
c
,
ñe
,
	`sdsEncodedObje˘
(ele));

2889 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2890 *
zl
 = 
zobj
->
±r
;

2891 *
ïå
, *
•å
;

2893 
ïå
 = 
	`zùli°Index
(
zl
,0);

2894 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2895 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2896 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
•å
 !
NULL
);

2898 
ønk
 = 1;

2899 
ïå
 !
NULL
) {

2900 i‡(
	`zùli°Com∑ª
(
ïå
,
ñe
->
±r
,
	`sd¶í
(ele->ptr)))

2902 
ønk
++;

2903 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2906 i‡(
ïå
 !
NULL
) {

2907 i‡(
ªvî£
)

2908 
	`addRïlyL⁄gL⁄g
(
c
,
Œí
-
ønk
);

2910 
	`addRïlyL⁄gL⁄g
(
c
,
ønk
-1);

2912 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2914 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2915 
z£t
 *
zs
 = 
zobj
->
±r
;

2916 
zskùli°
 *
z¶
 = 
zs
->zsl;

2917 
di˘E¡ry
 *
de
;

2918 
sc‹e
;

2920 
ñe
 = 
c
->
¨gv
[2];

2921 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
ñe
);

2922 i‡(
de
 !
NULL
) {

2923 
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

2924 
ønk
 = 
	`z¶GëR™k
(
z¶
,
sc‹e
,
ñe
);

2925 
	`£rvîAs£πWôhInfo
(
c
,
ñe
,
ønk
);

2926 i‡(
ªvî£
)

2927 
	`addRïlyL⁄gL⁄g
(
c
,
Œí
-
ønk
);

2929 
	`addRïlyL⁄gL⁄g
(
c
,
ønk
-1);

2931 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2934 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2937 
	`u∆ockDb
(
c
->
db
);

2938 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2939 
	}
}

2941 
	$zønkComm™d
(
˛õ¡
 *
c
) {

2942 
	`zønkGíîicComm™d
(
c
, 0);

2943 
	}
}

2945 
	$zªvønkComm™d
(
˛õ¡
 *
c
) {

2946 
	`zønkGíîicComm™d
(
c
, 1);

2947 
	}
}

2949 
	$zsˇnComm™d
(
˛õ¡
 *
c
) {

2950 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_ZSET
);

2951 
	}
}

	@src/vr_t_zset.h

1 #i‚de‡
_VR_T_ZSET_H_


2 
	#_VR_T_ZSET_H_


	)

6 
	mmö
, 
	mmax
;

7 
	mmöex
, 
	mmaxex
;

8 } 
	tzønge•ec
;

12 
robj
 *
	mmö
, *
	mmax
;

13 
	mmöex
, 
	mmaxex
;

14 } 
	tzÀxønge•ec
;

17 
robj
 *
	msubje˘
;

18 
	mty≥
;

19 
	mícodög
;

20 
	mweight
;

24 
	u_ôî£t
 {

26 
öt£t
 *
	mis
;

27 
	mii
;

28 } 
	mis
;

30 
di˘
 *
	mdi˘
;

31 
di˘Iãøt‹
 *
	mdi
;

32 
di˘E¡ry
 *
	mde
;

33 } 
	mht
;

34 } 
	m£t
;

37 
	u_ôîz£t
 {

39 *
	mzl
;

40 *
	mïå
, *
	m•å
;

41 } 
	mzl
;

43 
z£t
 *
	mzs
;

44 
zskùli°Node
 *
	mnode
;

45 } 
	m¶
;

46 } 
	mz£t
;

47 } 
	môî
;

48 } 
	tz£t›§c
;

52 
	mÊags
;

53 
	m_buf
[32];

54 
robj
 *
	mñe
;

55 *
	me°r
;

56 
	mñí
;

57 
	mñl
;

58 
	msc‹e
;

59 } 
	tz£t›vÆ
;

61 
zskùli°Node
 *
z¶Cª©eNode
(
Àvñ
, 
sc‹e
, 
robj
 *
obj
);

62 
zskùli°
 *
z¶Cª©e
();

63 
z¶FªeNode
(
zskùli°Node
 *
node
);

64 
z¶Fªe
(
zskùli°
 *
z¶
);

65 
z¶R™domLevñ
();

66 
zskùli°Node
 *
z¶In£π
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
);

67 
z¶DñëeNode
(
zskùli°
 *
z¶
, 
zskùli°Node
 *
x
, zskùli°Nodê**
upd©e
);

68 
z¶Dñëe
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
);

69 
z¶VÆueLãMax
(
vÆue
, 
zønge•ec
 *
•ec
);

70 
z¶IsInR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

71 
zskùli°Node
 *
z¶Fú°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

72 
zskùli°Node
 *
z¶La°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

73 
z¶DñëeR™geBySc‹e
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
, 
di˘
 *dict);

74 
z¶DñëeR™geByLex
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
, 
di˘
 *dict);

75 
z¶DñëeR™geByR™k
(
zskùli°
 *
z¶
, 
°¨t
, 
íd
, 
di˘
 *dict);

76 
z¶GëR™k
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
o
);

77 
zskùli°Node
* 
z¶GëEÀmítByR™k
(
zskùli°
 *
z¶
, 
ønk
);

78 
z¶P¨£LexR™geIãm
(
robj
 *
ôem
,Ñobj **
de°
, *
ex
);

79 
z¶FªeLexR™ge
(
zÀxønge•ec
 *
•ec
);

80 
com∑ªSåögObje˘sF‹LexR™ge
(
robj
 *
a
,Ñobj *
b
);

81 
z¶IsInLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

82 
zskùli°Node
 *
z¶Fú°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

83 
zskùli°Node
 *
z¶La°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

84 
zzlGëSc‹e
(*
•å
);

85 
robj
 *
zùli°GëObje˘
(*
•å
);

86 
zzlCom∑ªEÀmíts
(*
ïå
, *
c°r
, 
˛í
);

87 
zzlLígth
(*
zl
);

88 
zzlNext
(*
zl
, **
ïå
, **
•å
);

89 
zzlPªv
(*
zl
, **
ïå
, **
•å
);

90 
zzlIsInR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

91 *
zzlFú°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

92 *
zzlLa°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

93 
zzlIsInLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

94 *
zzlFú°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

96 *
zzlLa°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

97 *
zzlFöd
(*
zl
, 
robj
 *
ñe
, *
sc‹e
);

98 *
zzlDñëe
(*
zl
, *
ïå
);

99 *
zzlIn£πAt
(*
zl
, *
ïå
, 
robj
 *
ñe
, 
sc‹e
);

100 *
zzlIn£π
(*
zl
, 
robj
 *
ñe
, 
sc‹e
);

101 *
zzlDñëeR™geBySc‹e
(*
zl
, 
zønge•ec
 *
ønge
, *
dñëed
);

102 *
zzlDñëeR™geByLex
(*
zl
, 
zÀxønge•ec
 *
ønge
, *
dñëed
);

103 *
zzlDñëeR™geByR™k
(*
zl
, 
°¨t
, 
íd
, *
dñëed
);

104 
z£tLígth
(
robj
 *
zobj
);

105 
z£tC⁄vît
(
robj
 *
zobj
, 
ícodög
);

106 
z£tC⁄vîtToZùli°IfNìded
(
robj
 *
zobj
, 
size_t
 
maxññí
);

107 
z£tSc‹e
(
robj
 *
zobj
,Ñobj *
membî
, *
sc‹e
);

109 
zaddGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
);

110 
zaddComm™d
(
˛õ¡
 *
c
);

111 
zö¸byComm™d
(
˛õ¡
 *
c
);

112 
zªmComm™d
(
˛õ¡
 *
c
);

113 
zªmøngeGíîicComm™d
(
˛õ¡
 *
c
, 
øngëy≥
);

114 
zªmøngebyønkComm™d
(
˛õ¡
 *
c
);

115 
zªmøngebysc‹eComm™d
(
˛õ¡
 *
c
);

116 
zªmøngebyÀxComm™d
(
˛õ¡
 *
c
) ;

118 
zuiInôIãøt‹
(
z£t›§c
 *
›
);

119 
zuiCÀ¨Iãøt‹
(
z£t›§c
 *
›
);

120 
zuiLígth
(
z£t›§c
 *
›
);

125 
zuiNext
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
);

126 
zuiL⁄gL⁄gFromVÆue
(
z£t›vÆ
 *
vÆ
);

127 
robj
 *
zuiObje˘FromVÆue
(
z£t›vÆ
 *
vÆ
);

128 
zuiBuf„rFromVÆue
(
z£t›vÆ
 *
vÆ
);

132 
zuiFöd
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
, *
sc‹e
);

133 
zuiCom∑ªByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

134 
zuni⁄I¡îGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
d°key
, 
›
);

135 
zuni⁄°‹eComm™d
(
˛õ¡
 *
c
);

136 
zöãr°‹eComm™d
(
˛õ¡
 *
c
);

137 
zøngeGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

138 
zøngeComm™d
(
˛õ¡
 *
c
);

139 
zªvøngeComm™d
(
˛õ¡
 *
c
);

142 
gíîicZøngebysc‹eComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

143 
zøngebysc‹eComm™d
(
˛õ¡
 *
c
);

144 
zªvøngebysc‹eComm™d
(
˛õ¡
 *
c
);

145 
zcou¡Comm™d
(
˛õ¡
 *
c
);

146 
zÀxcou¡Comm™d
(
˛õ¡
 *
c
);

149 
gíîicZøngebyÀxComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

150 
zøngebyÀxComm™d
(
˛õ¡
 *
c
);

151 
zªvøngebyÀxComm™d
(
˛õ¡
 *
c
);

152 
zˇrdComm™d
(
˛õ¡
 *
c
);

153 
zsc‹eComm™d
(
˛õ¡
 *
c
);

154 
zønkGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

155 
zønkComm™d
(
˛õ¡
 *
c
);

156 
zªvønkComm™d
(
˛õ¡
 *
c
);

157 
zsˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_zset.h

1 #i‚de‡
_VR_T_ZSET_H_


2 
	#_VR_T_ZSET_H_


	)

6 
	mmö
, 
	mmax
;

7 
	mmöex
, 
	mmaxex
;

8 } 
	tzønge•ec
;

12 
robj
 *
	mmö
, *
	mmax
;

13 
	mmöex
, 
	mmaxex
;

14 } 
	tzÀxønge•ec
;

17 
robj
 *
	msubje˘
;

18 
	mty≥
;

19 
	mícodög
;

20 
	mweight
;

24 
	u_ôî£t
 {

26 
öt£t
 *
	mis
;

27 
	mii
;

28 } 
	mis
;

30 
di˘
 *
	mdi˘
;

31 
di˘Iãøt‹
 *
	mdi
;

32 
di˘E¡ry
 *
	mde
;

33 } 
	mht
;

34 } 
	m£t
;

37 
	u_ôîz£t
 {

39 *
	mzl
;

40 *
	mïå
, *
	m•å
;

41 } 
	mzl
;

43 
z£t
 *
	mzs
;

44 
zskùli°Node
 *
	mnode
;

45 } 
	m¶
;

46 } 
	mz£t
;

47 } 
	môî
;

48 } 
	tz£t›§c
;

52 
	mÊags
;

53 
	m_buf
[32];

54 
robj
 *
	mñe
;

55 *
	me°r
;

56 
	mñí
;

57 
	mñl
;

58 
	msc‹e
;

59 } 
	tz£t›vÆ
;

61 
zskùli°Node
 *
z¶Cª©eNode
(
Àvñ
, 
sc‹e
, 
robj
 *
obj
);

62 
zskùli°
 *
z¶Cª©e
();

63 
z¶FªeNode
(
zskùli°Node
 *
node
);

64 
z¶Fªe
(
zskùli°
 *
z¶
);

65 
z¶R™domLevñ
();

66 
zskùli°Node
 *
z¶In£π
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
);

67 
z¶DñëeNode
(
zskùli°
 *
z¶
, 
zskùli°Node
 *
x
, zskùli°Nodê**
upd©e
);

68 
z¶Dñëe
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
);

69 
z¶VÆueLãMax
(
vÆue
, 
zønge•ec
 *
•ec
);

70 
z¶IsInR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

71 
zskùli°Node
 *
z¶Fú°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

72 
zskùli°Node
 *
z¶La°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

73 
z¶DñëeR™geBySc‹e
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
, 
di˘
 *dict);

74 
z¶DñëeR™geByLex
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
, 
di˘
 *dict);

75 
z¶DñëeR™geByR™k
(
zskùli°
 *
z¶
, 
°¨t
, 
íd
, 
di˘
 *dict);

76 
z¶GëR™k
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
o
);

77 
zskùli°Node
* 
z¶GëEÀmítByR™k
(
zskùli°
 *
z¶
, 
ønk
);

78 
z¶P¨£LexR™geIãm
(
robj
 *
ôem
,Ñobj **
de°
, *
ex
);

79 
z¶FªeLexR™ge
(
zÀxønge•ec
 *
•ec
);

80 
com∑ªSåögObje˘sF‹LexR™ge
(
robj
 *
a
,Ñobj *
b
);

81 
z¶IsInLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

82 
zskùli°Node
 *
z¶Fú°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

83 
zskùli°Node
 *
z¶La°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

84 
zzlGëSc‹e
(*
•å
);

85 
robj
 *
zùli°GëObje˘
(*
•å
);

86 
zzlCom∑ªEÀmíts
(*
ïå
, *
c°r
, 
˛í
);

87 
zzlLígth
(*
zl
);

88 
zzlNext
(*
zl
, **
ïå
, **
•å
);

89 
zzlPªv
(*
zl
, **
ïå
, **
•å
);

90 
zzlIsInR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

91 *
zzlFú°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

92 *
zzlLa°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

93 
zzlIsInLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

94 *
zzlFú°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

96 *
zzlLa°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

97 *
zzlFöd
(*
zl
, 
robj
 *
ñe
, *
sc‹e
);

98 *
zzlDñëe
(*
zl
, *
ïå
);

99 *
zzlIn£πAt
(*
zl
, *
ïå
, 
robj
 *
ñe
, 
sc‹e
);

100 *
zzlIn£π
(*
zl
, 
robj
 *
ñe
, 
sc‹e
);

101 *
zzlDñëeR™geBySc‹e
(*
zl
, 
zønge•ec
 *
ønge
, *
dñëed
);

102 *
zzlDñëeR™geByLex
(*
zl
, 
zÀxønge•ec
 *
ønge
, *
dñëed
);

103 *
zzlDñëeR™geByR™k
(*
zl
, 
°¨t
, 
íd
, *
dñëed
);

104 
z£tLígth
(
robj
 *
zobj
);

105 
z£tC⁄vît
(
robj
 *
zobj
, 
ícodög
);

106 
z£tC⁄vîtToZùli°IfNìded
(
robj
 *
zobj
, 
size_t
 
maxññí
);

107 
z£tSc‹e
(
robj
 *
zobj
,Ñobj *
membî
, *
sc‹e
);

109 
zaddGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
);

110 
zaddComm™d
(
˛õ¡
 *
c
);

111 
zö¸byComm™d
(
˛õ¡
 *
c
);

112 
zªmComm™d
(
˛õ¡
 *
c
);

113 
zªmøngeGíîicComm™d
(
˛õ¡
 *
c
, 
øngëy≥
);

114 
zªmøngebyønkComm™d
(
˛õ¡
 *
c
);

115 
zªmøngebysc‹eComm™d
(
˛õ¡
 *
c
);

116 
zªmøngebyÀxComm™d
(
˛õ¡
 *
c
) ;

118 
zuiInôIãøt‹
(
z£t›§c
 *
›
);

119 
zuiCÀ¨Iãøt‹
(
z£t›§c
 *
›
);

120 
zuiLígth
(
z£t›§c
 *
›
);

125 
zuiNext
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
);

126 
zuiL⁄gL⁄gFromVÆue
(
z£t›vÆ
 *
vÆ
);

127 
robj
 *
zuiObje˘FromVÆue
(
z£t›vÆ
 *
vÆ
);

128 
zuiBuf„rFromVÆue
(
z£t›vÆ
 *
vÆ
);

132 
zuiFöd
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
, *
sc‹e
);

133 
zuiCom∑ªByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

134 
zuni⁄I¡îGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
d°key
, 
›
);

135 
zuni⁄°‹eComm™d
(
˛õ¡
 *
c
);

136 
zöãr°‹eComm™d
(
˛õ¡
 *
c
);

137 
zøngeGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

138 
zøngeComm™d
(
˛õ¡
 *
c
);

139 
zªvøngeComm™d
(
˛õ¡
 *
c
);

142 
gíîicZøngebysc‹eComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

143 
zøngebysc‹eComm™d
(
˛õ¡
 *
c
);

144 
zªvøngebysc‹eComm™d
(
˛õ¡
 *
c
);

145 
zcou¡Comm™d
(
˛õ¡
 *
c
);

146 
zÀxcou¡Comm™d
(
˛õ¡
 *
c
);

149 
gíîicZøngebyÀxComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

150 
zøngebyÀxComm™d
(
˛õ¡
 *
c
);

151 
zªvøngebyÀxComm™d
(
˛õ¡
 *
c
);

152 
zˇrdComm™d
(
˛õ¡
 *
c
);

153 
zsc‹eComm™d
(
˛õ¡
 *
c
);

154 
zønkGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

155 
zønkComm™d
(
˛õ¡
 *
c
);

156 
zªvønkComm™d
(
˛õ¡
 *
c
);

157 
zsˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_thread.c

1 
	~<vr_c‹e.h
>

5 
	$vr_thªad_öô
(
vr_thªad
 *
thªad
)

7 i‡(
thªad
 =
NULL
) {

8  
VR_ERROR
;

11 
thªad
->
id
 = 0;

12 
thªad
->
thªad_id
 = 0;

13 
thªad
->
fun_run
 = 
NULL
;

14 
thªad
->
d©a
 = 
NULL
;

16  
VR_OK
;

17 
	}
}

20 
	$vr_thªad_deöô
(
vr_thªad
 *
thªad
)

22 i‡(
thªad
 =
NULL
) {

26 
thªad
->
id
 = 0;

27 
thªad
->
thªad_id
 = 0;

28 
thªad
->
fun_run
 = 
NULL
;

29 
thªad
->
d©a
 = 
NULL
;

30 
	}
}

33 *
	$vr_thªad_run
(*
d©a
)

35 
vr_thªad
 *
thªad
 = 
d©a
;

36 
	`§™d
(
	`vr_u£c_now
()^()
	`±hªad_£lf
());

38 
thªad
->
	`fun_run
—hªad->
d©a
);

39 
	}
}

42 
	$vr_thªad_°¨t
(
vr_thªad
 *
thªad
)

44 
±hªad_©å_t
 
©å
;

45 
	`±hªad_©å_öô
(&
©å
);

47 i‡(
thªad
 =
NULL
 ||Åhªad->
fun_run
 == NULL) {

48  
VR_ERROR
;

51 
	`±hªad_¸óã
(&
thªad
->
thªad_id
,

52 &
©å
, 
vr_thªad_run
, 
thªad
);

54  
VR_OK
;

55 
	}
}

	@src/vr_thread.c

1 
	~<vr_c‹e.h
>

5 
	$vr_thªad_öô
(
vr_thªad
 *
thªad
)

7 i‡(
thªad
 =
NULL
) {

8  
VR_ERROR
;

11 
thªad
->
id
 = 0;

12 
thªad
->
thªad_id
 = 0;

13 
thªad
->
fun_run
 = 
NULL
;

14 
thªad
->
d©a
 = 
NULL
;

16  
VR_OK
;

17 
	}
}

20 
	$vr_thªad_deöô
(
vr_thªad
 *
thªad
)

22 i‡(
thªad
 =
NULL
) {

26 
thªad
->
id
 = 0;

27 
thªad
->
thªad_id
 = 0;

28 
thªad
->
fun_run
 = 
NULL
;

29 
thªad
->
d©a
 = 
NULL
;

30 
	}
}

33 *
	$vr_thªad_run
(*
d©a
)

35 
vr_thªad
 *
thªad
 = 
d©a
;

36 
	`§™d
(
	`vr_u£c_now
()^()
	`±hªad_£lf
());

38 
thªad
->
	`fun_run
—hªad->
d©a
);

39 
	}
}

42 
	$vr_thªad_°¨t
(
vr_thªad
 *
thªad
)

44 
±hªad_©å_t
 
©å
;

45 
	`±hªad_©å_öô
(&
©å
);

47 i‡(
thªad
 =
NULL
 ||Åhªad->
fun_run
 == NULL) {

48  
VR_ERROR
;

51 
	`±hªad_¸óã
(&
thªad
->
thªad_id
,

52 &
©å
, 
vr_thªad_run
, 
thªad
);

54  
VR_OK
;

55 
	}
}

	@src/vr_thread.h

1 #i‚de‡
_VR_THREAD_H_


2 
	#_VR_THREAD_H_


	)

6 *(*
	tvr_thªad_func_t
)(*
	td©a
);

8 
	svr_thªad
 {

10 
	mid
;

12 
±hªad_t
 
	mthªad_id
;

14 
vr_thªad_func_t
 
	mfun_run
;

16 *
	md©a
;

17 }
	tvr_thªad
;

20 
vr_thªad_öô
(
vr_thªad
 *
thªad
);

21 
vr_thªad_deöô
(
vr_thªad
 *
thªad
);

22 
vr_thªad_°¨t
(
vr_thªad
 *
thªad
);

	@src/vr_thread.h

1 #i‚de‡
_VR_THREAD_H_


2 
	#_VR_THREAD_H_


	)

6 *(*
	tvr_thªad_func_t
)(*
	td©a
);

8 
	svr_thªad
 {

10 
	mid
;

12 
±hªad_t
 
	mthªad_id
;

14 
vr_thªad_func_t
 
	mfun_run
;

16 *
	md©a
;

17 }
	tvr_thªad
;

20 
vr_thªad_öô
(
vr_thªad
 *
thªad
);

21 
vr_thªad_deöô
(
vr_thªad
 *
thªad
);

22 
vr_thªad_°¨t
(
vr_thªad
 *
thªad
);

	@src/vr_util.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

9 
	~<sys/time.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/io˘l.h
>

14 
	~<√töë/ö.h
>

15 
	~<√töë/t˝.h
>

17 
	~<vr_c‹e.h
>

19 #ifde‡
VR_HAVE_BACKTRACE


20 
	~<execöfo.h
>

24 
	$vr_£t_blockög
(
sd
)

26 
Êags
;

28 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

29 i‡(
Êags
 < 0) {

30  
Êags
;

33  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
);

34 
	}
}

37 
	$vr_£t_n⁄blockög
(
sd
)

39 
Êags
;

41 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

42 i‡(
Êags
 < 0) {

43  
Êags
;

46  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

47 
	}
}

50 
	$vr_£t_ªu£addr
(
sd
)

52 
ªu£
;

53 
sockÀn_t
 
Àn
;

55 
ªu£
 = 1;

56 
Àn
 = (
ªu£
);

58  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ªu£
, 
Àn
);

59 
	}
}

71 
	$vr_£t_t˝nodñay
(
sd
)

73 
nodñay
;

74 
sockÀn_t
 
Àn
;

76 
nodñay
 = 1;

77 
Àn
 = (
nodñay
);

79  
	`£tsock›t
(
sd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
nodñay
, 
Àn
);

80 
	}
}

84 
	$vr_£t_lögî
(
sd
, 
timeout
)

86 
lögî
Üinger;

87 
sockÀn_t
 
Àn
;

89 
lögî
.
l_⁄off
 = 1;

90 
lögî
.
l_lögî
 = 
timeout
;

92 
Àn
 = (
lögî
);

94  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_LINGER
, &
lögî
, 
Àn
);

95 
	}
}

98 
	$vr_£t_¢dbuf
(
sd
, 
size
)

100 
sockÀn_t
 
Àn
;

102 
Àn
 = (
size
);

104  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, 
Àn
);

105 
	}
}

108 
	$vr_£t_rcvbuf
(
sd
, 
size
)

110 
sockÀn_t
 
Àn
;

112 
Àn
 = (
size
);

114  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, 
Àn
);

115 
	}
}

118 
	$vr_gë_s€º‹
(
sd
)

120 
°©us
, 
îr
;

121 
sockÀn_t
 
Àn
;

123 
îr
 = 0;

124 
Àn
 = (
îr
);

126 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

127 i‡(
°©us
 == 0) {

128 
î∫o
 = 
îr
;

131  
°©us
;

132 
	}
}

135 
	$vr_gë_¢dbuf
(
sd
)

137 
°©us
, 
size
;

138 
sockÀn_t
 
Àn
;

140 
size
 = 0;

141 
Àn
 = (
size
);

143 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, &
Àn
);

144 i‡(
°©us
 < 0) {

145  
°©us
;

148  
size
;

149 
	}
}

152 
	$vr_gë_rcvbuf
(
sd
)

154 
°©us
, 
size
;

155 
sockÀn_t
 
Àn
;

157 
size
 = 0;

158 
Àn
 = (
size
);

160 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, &
Àn
);

161 i‡(
°©us
 < 0) {

162  
°©us
;

165  
size
;

166 
	}
}

169 
	$vr_£t_t˝kì∑live
(
sd
, 
kìpidÀ
, 
kìpöãrvÆ
, 
kìpcou¡
)

171 
r°©us_t
 
°©us
;

172 
t˝kì∑live
;

173 
sockÀn_t
 
Àn
;

175 
t˝kì∑live
 = 1;

176 
Àn
 = (
t˝kì∑live
);

178 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
t˝kì∑live
, 
Àn
);

179 i‡(
°©us
 < 0) {

180 
	`log_îr‹
("£tsock›àSO_KEEPALIVE cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

181  
VR_ERROR
;

184 #ifde‡
SOL_TCP


185 i‡(
kìpidÀ
 > 0) {

186 
Àn
 = (
kìpidÀ
);

187 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
kìpidÀ
, 
Àn
);

188 i‡(
°©us
 < 0) {

189 
	`log_îr‹
("£tsock›àTCP_KEEPIDLE cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

190  
VR_ERROR
;

194 i‡(
kìpöãrvÆ
 > 0) {

195 
Àn
 = (
kìpöãrvÆ
);

196 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
kìpöãrvÆ
, 
Àn
);

197 i‡(
°©us
 < 0) {

198 
	`log_îr‹
("£tsock›àTCP_KEEPINTVL cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

199  
VR_ERROR
;

203 i‡(
kìpcou¡
 > 0) {

204 
Àn
 = (
kìpcou¡
);

205 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
kìpcou¡
, 
Àn
);

206 i‡(
°©us
 < 0) {

207 
	`log_îr‹
("£tsock›àTCP_KEEPCNT cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

208  
VR_ERROR
;

213  
VR_OK
;

214 
	}
}

217 
	$_vr_©oi
(*
löe
, 
size_t
 
n
)

219 
vÆue
;

221 i‡(
n
 == 0) {

225 
vÆue
 = 0; 
n
--; 
löe
++) {

226 i‡(*
löe
 < '0' || *line > '9') {

230 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

233 i‡(
vÆue
 < 0) {

237  
vÆue
;

238 
	}
}

242 
uöt32_t
 
	$digôs10
(
uöt64_t
 
v
) {

243 i‡(
v
 < 10)  1;

244 i‡(
v
 < 100)  2;

245 i‡(
v
 < 1000)  3;

246 i‡(
v
 < 1000000000000UL) {

247 i‡(
v
 < 100000000UL) {

248 i‡(
v
 < 1000000) {

249 i‡(
v
 < 10000)  4;

250  5 + (
v
 >= 100000);

252  7 + (
v
 >= 10000000UL);

254 i‡(
v
 < 10000000000UL) {

255  9 + (
v
 >= 1000000000UL);

257  11 + (
v
 >= 100000000000UL);

259  12 + 
	`digôs10
(
v
 / 1000000000000UL);

260 
	}
}

263 
uöt32_t
 
	$sdigôs10
(
öt64_t
 
v
) {

264 i‡(
v
 < 0) {

266 
uöt64_t
 
uv
 = (
v
 !
LLONG_MIN
) ?

267 (
uöt64_t
)-
v
 : ((uöt64_tË
LLONG_MAX
)+1;

268  
	`digôs10
(
uv
)+1;

270  
	`digôs10
(
v
);

272 
	}
}

286 
	$Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
) {

287 c⁄° 
digôs
[201] =

293 
√g©ive
;

294 
vÆue
;

298 i‡(
svÆue
 < 0) {

299 i‡(
svÆue
 !
LLONG_MIN
) {

300 
vÆue
 = -
svÆue
;

302 
vÆue
 = ((Ë
LLONG_MAX
)+1;

304 
√g©ive
 = 1;

306 
vÆue
 = 
svÆue
;

307 
√g©ive
 = 0;

311 
uöt32_t
 c⁄° 
Àngth
 = 
	`digôs10
(
vÆue
)+
√g©ive
;

312 i‡(
Àngth
 >
d°Àn
)  0;

315 
uöt32_t
 
√xt
 = 
Àngth
;

316 
d°
[
√xt
] = '\0';

317 
√xt
--;

318 
vÆue
 >= 100) {

319 c⁄° 
i
 = (
vÆue
 % 100) * 2;

320 
vÆue
 /= 100;

321 
d°
[
√xt
] = 
digôs
[
i
 + 1];

322 
d°
[
√xt
 - 1] = 
digôs
[
i
];

323 
√xt
 -= 2;

327 i‡(
vÆue
 < 10) {

328 
d°
[
√xt
] = '0' + (
uöt32_t
Ë
vÆue
;

330 
i
 = (
uöt32_t
Ë
vÆue
 * 2;

331 
d°
[
√xt
] = 
digôs
[
i
 + 1];

332 
d°
[
√xt
 - 1] = 
digôs
[
i
];

336 i‡(
√g©ive
Ë
d°
[0] = '-';

337  
Àngth
;

338 
	}
}

344 
	$°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
) {

345 c⁄° *
p
 = 
s
;

346 
size_t
 
∂í
 = 0;

347 
√g©ive
 = 0;

348 
v
;

350 i‡(
∂í
 =
¶í
)

354 i‡(
¶í
 =1 && 
p
[0] == '0') {

355 i‡(
vÆue
 !
NULL
) *value = 0;

359 i‡(
p
[0] == '-') {

360 
√g©ive
 = 1;

361 
p
++; 
∂í
++;

364 i‡(
∂í
 =
¶í
)

369 i‡(
p
[0] >= '1' &&Ö[0] <= '9') {

370 
v
 = 
p
[0]-'0';

371 
p
++; 
∂í
++;

372 } i‡(
p
[0] ='0' && 
¶í
 == 1) {

373 *
vÆue
 = 0;

379 
∂í
 < 
¶í
 && 
p
[0] >= '0' &&Ö[0] <= '9') {

380 i‡(
v
 > (
ULLONG_MAX
 / 10))

382 
v
 *= 10;

384 i‡(
v
 > (
ULLONG_MAX
 - (
p
[0]-'0')))

386 
v
 +
p
[0]-'0';

388 
p
++; 
∂í
++;

392 i‡(
∂í
 < 
¶í
)

395 i‡(
√g©ive
) {

396 i‡(
v
 > (()(-(
LLONG_MIN
+1))+1))

398 i‡(
vÆue
 !
NULL
Ë*vÆuê-
v
;

400 i‡(
v
 > 
LLONG_MAX
)

402 i‡(
vÆue
 !
NULL
Ë*vÆuê
v
;

405 
	}
}

410 
	$°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
) {

411 
ŒvÆ
;

413 i‡(!
	`°rög2Œ
(
s
,
¶í
,&
ŒvÆ
))

416 i‡(
ŒvÆ
 < 
LONG_MIN
 ||ÜlvÆ > 
LONG_MAX
)

419 *
lvÆ
 = ()
ŒvÆ
;

421 
	}
}

425 
	$d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
) {

426 i‡(
	`i¢™
(
vÆue
)) {

427 
Àn
 = 
	`¢¥ötf
(
buf
,len,"nan");

428 } i‡(
	`isöf
(
vÆue
)) {

429 i‡(
vÆue
 < 0)

430 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-inf");

432 
Àn
 = 
	`¢¥ötf
(
buf
,len,"inf");

433 } i‡(
vÆue
 == 0) {

435 i‡(1.0/
vÆue
 < 0)

436 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-0");

438 
Àn
 = 
	`¢¥ötf
(
buf
,len,"0");

440 #i‡(
DBL_MANT_DIG
 >52Ë&& (
LLONG_MAX
 == 0x7fffffffffffffffLL)

450 
mö
 = -4503599627370495;

451 
max
 = 4503599627370496;

452 i‡(
vÆue
 > 
mö
 && vÆuê< 
max
 && value == (()(()value)))

453 
Àn
 = 
	`Œ2°rög
(
buf
,Àn,()
vÆue
);

456 
Àn
 = 
	`¢¥ötf
(
buf
,Àn,"%.17g",
vÆue
);

459  
Àn
;

460 
	}
}

462 
boﬁ


463 
	$vr_vÆid_p‹t
(
n
)

465 i‡(
n
 < 1 ||Ç > 
UINT16_MAX
) {

466  
Ál£
;

469  
åue
;

470 
	}
}

476 
ssize_t


477 
	$_vr_£ndn
(
sd
, c⁄° *
v±r
, 
size_t
 
n
)

479 
size_t
 
∆e·
;

480 
ssize_t
 
n£nd
;

481 c⁄° *
±r
;

483 
±r
 = 
v±r
;

484 
∆e·
 = 
n
;

485 
∆e·
 > 0) {

486 
n£nd
 = 
	`£nd
(
sd
, 
±r
, 
∆e·
, 0);

487 i‡(
n£nd
 < 0) {

488 i‡(
î∫o
 =
EINTR
) {

491  
n£nd
;

493 i‡(
n£nd
 == 0) {

497 
∆e·
 -(
size_t
)
n£nd
;

498 
±r
 +
n£nd
;

501  (
ssize_t
)
n
;

502 
	}
}

508 
ssize_t


509 
	$_vr_ªcvn
(
sd
, *
v±r
, 
size_t
 
n
)

511 
size_t
 
∆e·
;

512 
ssize_t
 
ƒecv
;

513 *
±r
;

515 
±r
 = 
v±r
;

516 
∆e·
 = 
n
;

517 
∆e·
 > 0) {

518 
ƒecv
 = 
	`ªcv
(
sd
, 
±r
, 
∆e·
, 0);

519 i‡(
ƒecv
 < 0) {

520 i‡(
î∫o
 =
EINTR
) {

523  
ƒecv
;

525 i‡(
ƒecv
 == 0) {

529 
∆e·
 -(
size_t
)
ƒecv
;

530 
±r
 +
ƒecv
;

533  (
ssize_t
)(
n
 - 
∆e·
);

534 
	}
}

540 
öt64_t


541 
	$vr_u£c_now
()

543 
timevÆ
 
now
;

544 
öt64_t
 
u£c
;

545 
°©us
;

547 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

548 i‡(
°©us
 < 0) {

549 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

553 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

555  
u£c
;

556 
	}
}

561 
öt64_t


562 
	$vr_m£c_now
()

564  
	`vr_u£c_now
() / 1000LL;

565 
	}
}

568 
	$vr_ªsﬁve_öë
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
)

570 
°©us
;

571 
addröfo
 *
ai
, *
ˇi
;

572 
addröfo
 
höts
;

573 *
node
, 
£rvi˚
[
VR_UINTMAX_MAXLEN
];

574 
boﬁ
 
found
;

576 
	`ASSERT
(
	`vr_vÆid_p‹t
(
p‹t
));

578 
	`mem£t
(&
höts
, 0, (hints));

579 
höts
.
ai_Êags
 = 
AI_NUMERICSERV
;

580 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

581 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

582 
höts
.
ai_¥Ÿocﬁ
 = 0;

583 
höts
.
ai_addæí
 = 0;

584 
höts
.
ai_addr
 = 
NULL
;

585 
höts
.
ai_ˇn⁄«me
 = 
NULL
;

587 i‡(
«me
 !
NULL
) {

588 
node
 = (*)
«me
;

596 
node
 = 
NULL
;

597 
höts
.
ai_Êags
 |
AI_PASSIVE
;

600 
	`d¢¥ötf
(
£rvi˚
, 
VR_UINTMAX_MAXLEN
, "%d", 
p‹t
);

606 
°©us
 = 
	`gëaddröfo
(
node
, 
£rvi˚
, &
höts
, &
ai
);

607 i‡(
°©us
 != 0) {

608 
	`log_îr‹
("addressÑesolution ofÇode '%s' service '%s' failed: %s",

609 
node
, 
£rvi˚
, 
	`gai_°ªº‹
(
°©us
));

624 
ˇi
 = 
ai
, 
found
 = 
Ál£
; caò!
NULL
; caòˇi->
ai_√xt
) {

625 
si
->
Ámûy
 = 
ˇi
->
ai_Ámûy
;

626 
si
->
addæí
 = 
ˇi
->
ai_addæí
;

627 
	`vr_mem˝y
(&
si
->
addr
, 
ˇi
->
ai_addr
, si->
addæí
);

628 
found
 = 
åue
;

632 
	`‰ìaddröfo
(
ai
);

634  !
found
 ? -1 : 0;

635 
	}
}

638 
	$vr_ªsﬁve_unix
(
sds
 
«me
, 
socköfo
 *
si
)

640 
sockaddr_un
 *
un
;

642 i‡(
	`sd¶í
(
«me
Ë>
VR_UNIX_ADDRSTRLEN
) {

646 
un
 = &
si
->
addr
.un;

648 
un
->
sun_Ámûy
 = 
AF_UNIX
;

649 
	`vr_mem˝y
(
un
->
sun_∑th
, 
«me
, 
	`sd¶í
(name));

650 
un
->
sun_∑th
[
	`sd¶í
(
«me
)] = '\0';

652 
si
->
Ámûy
 = 
AF_UNIX
;

653 
si
->
addæí
 = (*
un
);

657 
	}
}

666 
	$vr_ªsﬁve
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
)

668 i‡(
«me
 !
NULL
 &&Çame[0] == '/') {

669  
	`vr_ªsﬁve_unix
(
«me
, 
si
);

672  
	`vr_ªsﬁve_öë
(
«me
, 
p‹t
, 
si
);

673 
	}
}

675 
	$vr_√t_≥î_to_°rög
(
fd
, *
ù
, 
size_t
 
ù_Àn
, *
p‹t
) {

676 
sockaddr_°‹age
 
ß
;

677 
sockÀn_t
 
ßÀn
 = (
ß
);

679 i‡(
	`gë≥î«me
(
fd
,(
sockaddr
*)&
ß
,&
ßÀn
Ë=-1Ë
îr‹
;

680 i‡(
ù_Àn
 =0Ë
îr‹
;

682 i‡(
ß
.
ss_Ámûy
 =
AF_INET
) {

683 
sockaddr_ö
 *
s
 = (sockaddr_ö *)&
ß
;

684 i‡(
ù
Ë
	`öë_¡›
(
AF_INET
,(*)&(
s
->
sö_addr
),ù,
ù_Àn
);

685 i‡(
p‹t
Ë*p‹à
	`¡ohs
(
s
->
sö_p‹t
);

686 } i‡(
ß
.
ss_Ámûy
 =
AF_INET6
) {

687 
sockaddr_ö6
 *
s
 = (sockaddr_ö6 *)&
ß
;

688 i‡(
ù
Ë
	`öë_¡›
(
AF_INET6
,(*)&(
s
->
sö6_addr
),ù,
ù_Àn
);

689 i‡(
p‹t
Ë*p‹à
	`¡ohs
(
s
->
sö6_p‹t
);

690 } i‡(
ß
.
ss_Ámûy
 =
AF_UNIX
) {

691 i‡(
ù
Ë
	`°∫˝y
(ù,"/unixsockë",
ù_Àn
);

692 i‡(
p‹t
) *port = 0;

694 
îr‹
;

698 
îr‹
:

699 i‡(
ù
) {

700 i‡(
ù_Àn
 >= 2) {

701 
ù
[0] = '?';

702 
ù
[1] = '\0';

703 } i‡(
ù_Àn
 == 1) {

704 
ù
[0] = '\0';

707 i‡(
p‹t
) *port = 0;

709 
	}
}

715 
	$vr_√t_f‹m©_addr
(*
buf
, 
size_t
 
buf_Àn
, *
ù
, 
p‹t
) {

716  
	`¢¥ötf
(
buf
,
buf_Àn
, 
	`°rchr
(
ù
,':') ?

717 "[%s]:%d" : "%s:%d", 
ù
, 
p‹t
);

718 
	}
}

722 
	$vr_√t_f‹m©_≥î
(
fd
, *
buf
, 
size_t
 
buf_Àn
) {

723 
ù
[
VR_INET6_ADDRSTRLEN
];

724 
p‹t
;

726 
	`vr_√t_≥î_to_°rög
(
fd
,
ù
,(ù),&
p‹t
);

727  
	`vr_√t_f‹m©_addr
(
buf
, 
buf_Àn
, 
ù
, 
p‹t
);

728 
	}
}

735 
	$gë_øndom_hex_ch¨s
(*
p
, 
Àn
) {

736 *
ch¨£t
 = "0123456789abcdef";

737 
j
;

740 
£ed_öôülized
 = 0;

741 
£ed
[20];

742 
uöt64_t
 
cou¡î
 = 0;

744 i‡(!
£ed_öôülized
) {

749 
FILE
 *
Â
 = 
	`f›í
("/dev/urandom","r");

750 i‡(
Â
 && 
	`‰ód
(
£ed
,(seed),1,fp) == 1)

751 
£ed_öôülized
 = 1;

752 i‡(
Â
Ë
	`f˛o£
(fp);

755 i‡(
£ed_öôülized
) {

756 
Àn
) {

757 
dige°
[20];

758 
SHA1_CTX
 
˘x
;

759 
c›yÀn
 = 
Àn
 > 20 ? 20 :Üen;

761 
	`SHA1Inô
(&
˘x
);

762 
	`SHA1Upd©e
(&
˘x
, 
£ed
, (seed));

763 
	`SHA1Upd©e
(&
˘x
, (*)&
cou¡î
,(counter));

764 
	`SHA1FöÆ
(
dige°
, &
˘x
);

765 
cou¡î
++;

767 
	`mem˝y
(
p
,
dige°
,
c›yÀn
);

769 
j
 = 0; j < 
c›yÀn
; j++Ë
p
[j] = 
ch¨£t
[p[j] & 0x0F];

770 
Àn
 -
c›yÀn
;

771 
p
 +
c›yÀn
;

777 *
x
 = 
p
;

778 
l
 = 
Àn
;

779 
timevÆ
 
tv
;

780 
pid_t
 
pid
 = 
	`gëpid
();

783 
	`gëtimeofday
(&
tv
,
NULL
);

784 i‡(
l
 >(
tv
.
tv_u£c
)) {

785 
	`mem˝y
(
x
,&
tv
.
tv_u£c
,(tv.tv_usec));

786 
l
 -(
tv
.
tv_u£c
);

787 
x
 +(
tv
.
tv_u£c
);

789 i‡(
l
 >(
tv
.
tv_£c
)) {

790 
	`mem˝y
(
x
,&
tv
.
tv_£c
,(tv.tv_sec));

791 
l
 -(
tv
.
tv_£c
);

792 
x
 +(
tv
.
tv_£c
);

794 i‡(
l
 >(
pid
)) {

795 
	`mem˝y
(
x
,&
pid
,(pid));

796 
l
 -(
pid
);

797 
x
 +(
pid
);

801 
j
 = 0; j < 
Àn
; j++) {

802 
p
[
j
] ^
	`ønd
();

803 
p
[
j
] = 
ch¨£t
[p[j] & 0x0F];

806 
	}
}

810 
	$°rögm©chÀn
(c⁄° *
∑âîn
, 
∑âînLí
,

811 c⁄° *
°rög
, 
°rögLí
, 
noˇ£
)

813 
∑âînLí
) {

814 
∑âîn
[0]) {

816 
∑âîn
[1] == '*') {

817 
∑âîn
++;

818 
∑âînLí
--;

820 i‡(
∑âînLí
 == 1)

822 
°rögLí
) {

823 i‡(
	`°rögm©chÀn
(
∑âîn
+1, 
∑âînLí
-1,

824 
°rög
, 
°rögLí
, 
noˇ£
))

826 
°rög
++;

827 
°rögLí
--;

832 i‡(
°rögLí
 == 0)

834 
°rög
++;

835 
°rögLí
--;

839 
nŸ
, 
m©ch
;

841 
∑âîn
++;

842 
∑âînLí
--;

843 
nŸ
 = 
∑âîn
[0] == '^';

844 i‡(
nŸ
) {

845 
∑âîn
++;

846 
∑âînLí
--;

848 
m©ch
 = 0;

850 i‡(
∑âîn
[0] == '\\') {

851 
∑âîn
++;

852 
∑âînLí
--;

853 i‡(
∑âîn
[0] =
°rög
[0])

854 
m©ch
 = 1;

855 } i‡(
∑âîn
[0] == ']') {

857 } i‡(
∑âînLí
 == 0) {

858 
∑âîn
--;

859 
∑âînLí
++;

861 } i‡(
∑âîn
[1] ='-' && 
∑âînLí
 >= 3) {

862 
°¨t
 = 
∑âîn
[0];

863 
íd
 = 
∑âîn
[2];

864 
c
 = 
°rög
[0];

865 i‡(
°¨t
 > 
íd
) {

866 
t
 = 
°¨t
;

867 
°¨t
 = 
íd
;

868 
íd
 = 
t
;

870 i‡(
noˇ£
) {

871 
°¨t
 = 
	`tﬁowî
(start);

872 
íd
 = 
	`tﬁowî
(end);

873 
c
 = 
	`tﬁowî
(c);

875 
∑âîn
 += 2;

876 
∑âînLí
 -= 2;

877 i‡(
c
 >
°¨t
 && c <
íd
)

878 
m©ch
 = 1;

880 i‡(!
noˇ£
) {

881 i‡(
∑âîn
[0] =
°rög
[0])

882 
m©ch
 = 1;

884 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë=tﬁowî(()
°rög
[0]))

885 
m©ch
 = 1;

888 
∑âîn
++;

889 
∑âînLí
--;

891 i‡(
nŸ
)

892 
m©ch
 = !match;

893 i‡(!
m©ch
)

895 
°rög
++;

896 
°rögLí
--;

900 i‡(
∑âînLí
 >= 2) {

901 
∑âîn
++;

902 
∑âînLí
--;

906 i‡(!
noˇ£
) {

907 i‡(
∑âîn
[0] !
°rög
[0])

910 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë!tﬁowî(()
°rög
[0]))

913 
°rög
++;

914 
°rögLí
--;

917 
∑âîn
++;

918 
∑âînLí
--;

919 i‡(
°rögLí
 == 0) {

920 *
∑âîn
 == '*') {

921 
∑âîn
++;

922 
∑âînLí
--;

927 i‡(
∑âînLí
 =0 && 
°rögLí
 == 0)

930 
	}
}

932 
	$°rögm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
) {

933  
	`°rögm©chÀn
(
∑âîn
,
	`°æí
’©ã∫),
°rög
,°æí(°rög),
noˇ£
);

934 
	}
}

938 
	$memªv16
(*
p
) {

939 *
x
 = 
p
, 
t
;

941 
t
 = 
x
[0];

942 
x
[0] = x[1];

943 
x
[1] = 
t
;

944 
	}
}

948 
	$memªv32
(*
p
) {

949 *
x
 = 
p
, 
t
;

951 
t
 = 
x
[0];

952 
x
[0] = x[3];

953 
x
[3] = 
t
;

954 
t
 = 
x
[1];

955 
x
[1] = x[2];

956 
x
[2] = 
t
;

957 
	}
}

961 
	$memªv64
(*
p
) {

962 *
x
 = 
p
, 
t
;

964 
t
 = 
x
[0];

965 
x
[0] = x[7];

966 
x
[7] = 
t
;

967 
t
 = 
x
[1];

968 
x
[1] = x[6];

969 
x
[6] = 
t
;

970 
t
 = 
x
[2];

971 
x
[2] = x[5];

972 
x
[5] = 
t
;

973 
t
 = 
x
[3];

974 
x
[3] = x[4];

975 
x
[4] = 
t
;

976 
	}
}

978 
uöt16_t
 
	$öåev16
(
uöt16_t
 
v
) {

979 
	`memªv16
(&
v
);

980  
v
;

981 
	}
}

983 
uöt32_t
 
	$öåev32
(
uöt32_t
 
v
) {

984 
	`memªv32
(&
v
);

985  
v
;

986 
	}
}

988 
uöt64_t
 
	$öåev64
(
uöt64_t
 
v
) {

989 
	`memªv64
(&
v
);

990  
v
;

991 
	}
}

1000 
	$memtﬁl
(c⁄° *
p
, *
îr
) {

1001 c⁄° *
u
;

1002 
buf
[128];

1003 
mul
;

1004 
vÆ
;

1005 
digôs
;

1007 i‡(
îr
) *err = 0;

1010 
u
 = 
p
;

1011 i‡(*
u
 == '-') u++;

1012 *
u
 && 
	`isdigô
(*u)) u++;

1013 i‡(*
u
 ='\0' || !
	`°rˇ£cmp
(u,"b")) {

1014 
mul
 = 1;

1015 } i‡(!
	`°rˇ£cmp
(
u
,"k")) {

1016 
mul
 = 1000;

1017 } i‡(!
	`°rˇ£cmp
(
u
,"kb")) {

1018 
mul
 = 1024;

1019 } i‡(!
	`°rˇ£cmp
(
u
,"m")) {

1020 
mul
 = 1000*1000;

1021 } i‡(!
	`°rˇ£cmp
(
u
,"mb")) {

1022 
mul
 = 1024*1024;

1023 } i‡(!
	`°rˇ£cmp
(
u
,"g")) {

1024 
mul
 = 1000L*1000*1000;

1025 } i‡(!
	`°rˇ£cmp
(
u
,"gb")) {

1026 
mul
 = 1024L*1024*1024;

1028 i‡(
îr
) *err = 1;

1034 
digôs
 = 
u
-
p
;

1035 i‡(
digôs
 >(
buf
)) {

1036 i‡(
îr
) *err = 1;

1039 
	`mem˝y
(
buf
,
p
,
digôs
);

1040 
buf
[
digôs
] = '\0';

1042 *
íd±r
;

1043 
î∫o
 = 0;

1044 
vÆ
 = 
	`°πﬁl
(
buf
,&
íd±r
,10);

1045 i‡((
vÆ
 =0 && 
î∫o
 =
EINVAL
Ë|| *
íd±r
 != '\0') {

1046 i‡(
îr
) *err = 1;

1049  
vÆ
*
mul
;

1050 
	}
}

1054 
	$byãsToHum™
(*
s
, 
n
) {

1055 
d
;

1057 i‡(
n
 < 1024) {

1059 
	`•rötf
(
s
,"%ŒuB",
n
);

1061 } i‡(
n
 < (1024*1024)) {

1062 
d
 = ()
n
/(1024);

1063 
	`•rötf
(
s
,"%.2fK",
d
);

1064 } i‡(
n
 < (1024LL*1024*1024)) {

1065 
d
 = ()
n
/(1024*1024);

1066 
	`•rötf
(
s
,"%.2fM",
d
);

1067 } i‡(
n
 < (1024LL*1024*1024*1024)) {

1068 
d
 = ()
n
/(1024LL*1024*1024);

1069 
	`•rötf
(
s
,"%.2fG",
d
);

1070 } i‡(
n
 < (1024LL*1024*1024*1024*1024)) {

1071 
d
 = ()
n
/(1024LL*1024*1024*1024);

1072 
	`•rötf
(
s
,"%.2fT",
d
);

1073 } i‡(
n
 < (1024LL*1024*1024*1024*1024*1024)) {

1074 
d
 = ()
n
/(1024LL*1024*1024*1024*1024);

1075 
	`•rötf
(
s
,"%.2fP",
d
);

1078 
	`•rötf
(
s
,"%ŒuB",
n
);

1080 
	}
}

1090 
sds
 
	$gëAbsﬁuãP©h
(*
fûíame
) {

1091 
cwd
[1024];

1092 
sds
 
ab•©h
;

1093 
sds
 
ªÕ©h
 = 
	`sd¢ew
(
fûíame
);

1095 
ªÕ©h
 = 
	`sd°rim
(relpath," \r\n\t");

1096 i‡(
ªÕ©h
[0] == '/') Ñelpath;

1099 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

1100 
	`sds‰ì
(
ªÕ©h
);

1101  
NULL
;

1103 
ab•©h
 = 
	`sd¢ew
(
cwd
);

1104 i‡(
	`sd¶í
(
ab•©h
) &&ábspath[sdslen(abspath)-1] != '/')

1105 
ab•©h
 = 
	`sdsˇt
(abspath,"/");

1113 
	`sd¶í
(
ªÕ©h
) >= 3 &&

1114 
ªÕ©h
[0] == '.' &&Ñelpath[1] == '.' &&Ñelpath[2] == '/')

1116 
	`sd§™ge
(
ªÕ©h
,3,-1);

1117 i‡(
	`sd¶í
(
ab•©h
) > 1) {

1118 *
p
 = 
ab•©h
 + 
	`sd¶í
(abspath)-2;

1119 
åimÀn
 = 1;

1121 *
p
 != '/') {

1122 
p
--;

1123 
åimÀn
++;

1125 
	`sd§™ge
(
ab•©h
,0,-(
åimÀn
+1));

1130 
ab•©h
 = 
	`sdsˇtsds
◊b•©h,
ªÕ©h
);

1131 
	`sds‰ì
(
ªÕ©h
);

1132  
ab•©h
;

1133 
	}
}

	@src/vr_util.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

9 
	~<sys/time.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/io˘l.h
>

14 
	~<√töë/ö.h
>

15 
	~<√töë/t˝.h
>

17 
	~<vr_c‹e.h
>

19 #ifde‡
VR_HAVE_BACKTRACE


20 
	~<execöfo.h
>

24 
	$vr_£t_blockög
(
sd
)

26 
Êags
;

28 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

29 i‡(
Êags
 < 0) {

30  
Êags
;

33  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
);

34 
	}
}

37 
	$vr_£t_n⁄blockög
(
sd
)

39 
Êags
;

41 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

42 i‡(
Êags
 < 0) {

43  
Êags
;

46  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

47 
	}
}

50 
	$vr_£t_ªu£addr
(
sd
)

52 
ªu£
;

53 
sockÀn_t
 
Àn
;

55 
ªu£
 = 1;

56 
Àn
 = (
ªu£
);

58  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ªu£
, 
Àn
);

59 
	}
}

71 
	$vr_£t_t˝nodñay
(
sd
)

73 
nodñay
;

74 
sockÀn_t
 
Àn
;

76 
nodñay
 = 1;

77 
Àn
 = (
nodñay
);

79  
	`£tsock›t
(
sd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
nodñay
, 
Àn
);

80 
	}
}

84 
	$vr_£t_lögî
(
sd
, 
timeout
)

86 
lögî
Üinger;

87 
sockÀn_t
 
Àn
;

89 
lögî
.
l_⁄off
 = 1;

90 
lögî
.
l_lögî
 = 
timeout
;

92 
Àn
 = (
lögî
);

94  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_LINGER
, &
lögî
, 
Àn
);

95 
	}
}

98 
	$vr_£t_¢dbuf
(
sd
, 
size
)

100 
sockÀn_t
 
Àn
;

102 
Àn
 = (
size
);

104  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, 
Àn
);

105 
	}
}

108 
	$vr_£t_rcvbuf
(
sd
, 
size
)

110 
sockÀn_t
 
Àn
;

112 
Àn
 = (
size
);

114  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, 
Àn
);

115 
	}
}

118 
	$vr_gë_s€º‹
(
sd
)

120 
°©us
, 
îr
;

121 
sockÀn_t
 
Àn
;

123 
îr
 = 0;

124 
Àn
 = (
îr
);

126 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

127 i‡(
°©us
 == 0) {

128 
î∫o
 = 
îr
;

131  
°©us
;

132 
	}
}

135 
	$vr_gë_¢dbuf
(
sd
)

137 
°©us
, 
size
;

138 
sockÀn_t
 
Àn
;

140 
size
 = 0;

141 
Àn
 = (
size
);

143 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, &
Àn
);

144 i‡(
°©us
 < 0) {

145  
°©us
;

148  
size
;

149 
	}
}

152 
	$vr_gë_rcvbuf
(
sd
)

154 
°©us
, 
size
;

155 
sockÀn_t
 
Àn
;

157 
size
 = 0;

158 
Àn
 = (
size
);

160 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, &
Àn
);

161 i‡(
°©us
 < 0) {

162  
°©us
;

165  
size
;

166 
	}
}

169 
	$vr_£t_t˝kì∑live
(
sd
, 
kìpidÀ
, 
kìpöãrvÆ
, 
kìpcou¡
)

171 
r°©us_t
 
°©us
;

172 
t˝kì∑live
;

173 
sockÀn_t
 
Àn
;

175 
t˝kì∑live
 = 1;

176 
Àn
 = (
t˝kì∑live
);

178 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
t˝kì∑live
, 
Àn
);

179 i‡(
°©us
 < 0) {

180 
	`log_îr‹
("£tsock›àSO_KEEPALIVE cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

181  
VR_ERROR
;

184 #ifde‡
SOL_TCP


185 i‡(
kìpidÀ
 > 0) {

186 
Àn
 = (
kìpidÀ
);

187 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
kìpidÀ
, 
Àn
);

188 i‡(
°©us
 < 0) {

189 
	`log_îr‹
("£tsock›àTCP_KEEPIDLE cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

190  
VR_ERROR
;

194 i‡(
kìpöãrvÆ
 > 0) {

195 
Àn
 = (
kìpöãrvÆ
);

196 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
kìpöãrvÆ
, 
Àn
);

197 i‡(
°©us
 < 0) {

198 
	`log_îr‹
("£tsock›àTCP_KEEPINTVL cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

199  
VR_ERROR
;

203 i‡(
kìpcou¡
 > 0) {

204 
Àn
 = (
kìpcou¡
);

205 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
kìpcou¡
, 
Àn
);

206 i‡(
°©us
 < 0) {

207 
	`log_îr‹
("£tsock›àTCP_KEEPCNT cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

208  
VR_ERROR
;

213  
VR_OK
;

214 
	}
}

217 
	$_vr_©oi
(*
löe
, 
size_t
 
n
)

219 
vÆue
;

221 i‡(
n
 == 0) {

225 
vÆue
 = 0; 
n
--; 
löe
++) {

226 i‡(*
löe
 < '0' || *line > '9') {

230 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

233 i‡(
vÆue
 < 0) {

237  
vÆue
;

238 
	}
}

242 
uöt32_t
 
	$digôs10
(
uöt64_t
 
v
) {

243 i‡(
v
 < 10)  1;

244 i‡(
v
 < 100)  2;

245 i‡(
v
 < 1000)  3;

246 i‡(
v
 < 1000000000000UL) {

247 i‡(
v
 < 100000000UL) {

248 i‡(
v
 < 1000000) {

249 i‡(
v
 < 10000)  4;

250  5 + (
v
 >= 100000);

252  7 + (
v
 >= 10000000UL);

254 i‡(
v
 < 10000000000UL) {

255  9 + (
v
 >= 1000000000UL);

257  11 + (
v
 >= 100000000000UL);

259  12 + 
	`digôs10
(
v
 / 1000000000000UL);

260 
	}
}

263 
uöt32_t
 
	$sdigôs10
(
öt64_t
 
v
) {

264 i‡(
v
 < 0) {

266 
uöt64_t
 
uv
 = (
v
 !
LLONG_MIN
) ?

267 (
uöt64_t
)-
v
 : ((uöt64_tË
LLONG_MAX
)+1;

268  
	`digôs10
(
uv
)+1;

270  
	`digôs10
(
v
);

272 
	}
}

286 
	$Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
) {

287 c⁄° 
digôs
[201] =

293 
√g©ive
;

294 
vÆue
;

298 i‡(
svÆue
 < 0) {

299 i‡(
svÆue
 !
LLONG_MIN
) {

300 
vÆue
 = -
svÆue
;

302 
vÆue
 = ((Ë
LLONG_MAX
)+1;

304 
√g©ive
 = 1;

306 
vÆue
 = 
svÆue
;

307 
√g©ive
 = 0;

311 
uöt32_t
 c⁄° 
Àngth
 = 
	`digôs10
(
vÆue
)+
√g©ive
;

312 i‡(
Àngth
 >
d°Àn
)  0;

315 
uöt32_t
 
√xt
 = 
Àngth
;

316 
d°
[
√xt
] = '\0';

317 
√xt
--;

318 
vÆue
 >= 100) {

319 c⁄° 
i
 = (
vÆue
 % 100) * 2;

320 
vÆue
 /= 100;

321 
d°
[
√xt
] = 
digôs
[
i
 + 1];

322 
d°
[
√xt
 - 1] = 
digôs
[
i
];

323 
√xt
 -= 2;

327 i‡(
vÆue
 < 10) {

328 
d°
[
√xt
] = '0' + (
uöt32_t
Ë
vÆue
;

330 
i
 = (
uöt32_t
Ë
vÆue
 * 2;

331 
d°
[
√xt
] = 
digôs
[
i
 + 1];

332 
d°
[
√xt
 - 1] = 
digôs
[
i
];

336 i‡(
√g©ive
Ë
d°
[0] = '-';

337  
Àngth
;

338 
	}
}

344 
	$°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
) {

345 c⁄° *
p
 = 
s
;

346 
size_t
 
∂í
 = 0;

347 
√g©ive
 = 0;

348 
v
;

350 i‡(
∂í
 =
¶í
)

354 i‡(
¶í
 =1 && 
p
[0] == '0') {

355 i‡(
vÆue
 !
NULL
) *value = 0;

359 i‡(
p
[0] == '-') {

360 
√g©ive
 = 1;

361 
p
++; 
∂í
++;

364 i‡(
∂í
 =
¶í
)

369 i‡(
p
[0] >= '1' &&Ö[0] <= '9') {

370 
v
 = 
p
[0]-'0';

371 
p
++; 
∂í
++;

372 } i‡(
p
[0] ='0' && 
¶í
 == 1) {

373 *
vÆue
 = 0;

379 
∂í
 < 
¶í
 && 
p
[0] >= '0' &&Ö[0] <= '9') {

380 i‡(
v
 > (
ULLONG_MAX
 / 10))

382 
v
 *= 10;

384 i‡(
v
 > (
ULLONG_MAX
 - (
p
[0]-'0')))

386 
v
 +
p
[0]-'0';

388 
p
++; 
∂í
++;

392 i‡(
∂í
 < 
¶í
)

395 i‡(
√g©ive
) {

396 i‡(
v
 > (()(-(
LLONG_MIN
+1))+1))

398 i‡(
vÆue
 !
NULL
Ë*vÆuê-
v
;

400 i‡(
v
 > 
LLONG_MAX
)

402 i‡(
vÆue
 !
NULL
Ë*vÆuê
v
;

405 
	}
}

410 
	$°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
) {

411 
ŒvÆ
;

413 i‡(!
	`°rög2Œ
(
s
,
¶í
,&
ŒvÆ
))

416 i‡(
ŒvÆ
 < 
LONG_MIN
 ||ÜlvÆ > 
LONG_MAX
)

419 *
lvÆ
 = ()
ŒvÆ
;

421 
	}
}

425 
	$d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
) {

426 i‡(
	`i¢™
(
vÆue
)) {

427 
Àn
 = 
	`¢¥ötf
(
buf
,len,"nan");

428 } i‡(
	`isöf
(
vÆue
)) {

429 i‡(
vÆue
 < 0)

430 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-inf");

432 
Àn
 = 
	`¢¥ötf
(
buf
,len,"inf");

433 } i‡(
vÆue
 == 0) {

435 i‡(1.0/
vÆue
 < 0)

436 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-0");

438 
Àn
 = 
	`¢¥ötf
(
buf
,len,"0");

440 #i‡(
DBL_MANT_DIG
 >52Ë&& (
LLONG_MAX
 == 0x7fffffffffffffffLL)

450 
mö
 = -4503599627370495;

451 
max
 = 4503599627370496;

452 i‡(
vÆue
 > 
mö
 && vÆuê< 
max
 && value == (()(()value)))

453 
Àn
 = 
	`Œ2°rög
(
buf
,Àn,()
vÆue
);

456 
Àn
 = 
	`¢¥ötf
(
buf
,Àn,"%.17g",
vÆue
);

459  
Àn
;

460 
	}
}

462 
boﬁ


463 
	$vr_vÆid_p‹t
(
n
)

465 i‡(
n
 < 1 ||Ç > 
UINT16_MAX
) {

466  
Ál£
;

469  
åue
;

470 
	}
}

476 
ssize_t


477 
	$_vr_£ndn
(
sd
, c⁄° *
v±r
, 
size_t
 
n
)

479 
size_t
 
∆e·
;

480 
ssize_t
 
n£nd
;

481 c⁄° *
±r
;

483 
±r
 = 
v±r
;

484 
∆e·
 = 
n
;

485 
∆e·
 > 0) {

486 
n£nd
 = 
	`£nd
(
sd
, 
±r
, 
∆e·
, 0);

487 i‡(
n£nd
 < 0) {

488 i‡(
î∫o
 =
EINTR
) {

491  
n£nd
;

493 i‡(
n£nd
 == 0) {

497 
∆e·
 -(
size_t
)
n£nd
;

498 
±r
 +
n£nd
;

501  (
ssize_t
)
n
;

502 
	}
}

508 
ssize_t


509 
	$_vr_ªcvn
(
sd
, *
v±r
, 
size_t
 
n
)

511 
size_t
 
∆e·
;

512 
ssize_t
 
ƒecv
;

513 *
±r
;

515 
±r
 = 
v±r
;

516 
∆e·
 = 
n
;

517 
∆e·
 > 0) {

518 
ƒecv
 = 
	`ªcv
(
sd
, 
±r
, 
∆e·
, 0);

519 i‡(
ƒecv
 < 0) {

520 i‡(
î∫o
 =
EINTR
) {

523  
ƒecv
;

525 i‡(
ƒecv
 == 0) {

529 
∆e·
 -(
size_t
)
ƒecv
;

530 
±r
 +
ƒecv
;

533  (
ssize_t
)(
n
 - 
∆e·
);

534 
	}
}

540 
öt64_t


541 
	$vr_u£c_now
()

543 
timevÆ
 
now
;

544 
öt64_t
 
u£c
;

545 
°©us
;

547 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

548 i‡(
°©us
 < 0) {

549 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

553 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

555  
u£c
;

556 
	}
}

561 
öt64_t


562 
	$vr_m£c_now
()

564  
	`vr_u£c_now
() / 1000LL;

565 
	}
}

568 
	$vr_ªsﬁve_öë
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
)

570 
°©us
;

571 
addröfo
 *
ai
, *
ˇi
;

572 
addröfo
 
höts
;

573 *
node
, 
£rvi˚
[
VR_UINTMAX_MAXLEN
];

574 
boﬁ
 
found
;

576 
	`ASSERT
(
	`vr_vÆid_p‹t
(
p‹t
));

578 
	`mem£t
(&
höts
, 0, (hints));

579 
höts
.
ai_Êags
 = 
AI_NUMERICSERV
;

580 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

581 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

582 
höts
.
ai_¥Ÿocﬁ
 = 0;

583 
höts
.
ai_addæí
 = 0;

584 
höts
.
ai_addr
 = 
NULL
;

585 
höts
.
ai_ˇn⁄«me
 = 
NULL
;

587 i‡(
«me
 !
NULL
) {

588 
node
 = (*)
«me
;

596 
node
 = 
NULL
;

597 
höts
.
ai_Êags
 |
AI_PASSIVE
;

600 
	`d¢¥ötf
(
£rvi˚
, 
VR_UINTMAX_MAXLEN
, "%d", 
p‹t
);

606 
°©us
 = 
	`gëaddröfo
(
node
, 
£rvi˚
, &
höts
, &
ai
);

607 i‡(
°©us
 != 0) {

608 
	`log_îr‹
("addressÑesolution ofÇode '%s' service '%s' failed: %s",

609 
node
, 
£rvi˚
, 
	`gai_°ªº‹
(
°©us
));

624 
ˇi
 = 
ai
, 
found
 = 
Ál£
; caò!
NULL
; caòˇi->
ai_√xt
) {

625 
si
->
Ámûy
 = 
ˇi
->
ai_Ámûy
;

626 
si
->
addæí
 = 
ˇi
->
ai_addæí
;

627 
	`vr_mem˝y
(&
si
->
addr
, 
ˇi
->
ai_addr
, si->
addæí
);

628 
found
 = 
åue
;

632 
	`‰ìaddröfo
(
ai
);

634  !
found
 ? -1 : 0;

635 
	}
}

638 
	$vr_ªsﬁve_unix
(
sds
 
«me
, 
socköfo
 *
si
)

640 
sockaddr_un
 *
un
;

642 i‡(
	`sd¶í
(
«me
Ë>
VR_UNIX_ADDRSTRLEN
) {

646 
un
 = &
si
->
addr
.un;

648 
un
->
sun_Ámûy
 = 
AF_UNIX
;

649 
	`vr_mem˝y
(
un
->
sun_∑th
, 
«me
, 
	`sd¶í
(name));

650 
un
->
sun_∑th
[
	`sd¶í
(
«me
)] = '\0';

652 
si
->
Ámûy
 = 
AF_UNIX
;

653 
si
->
addæí
 = (*
un
);

657 
	}
}

666 
	$vr_ªsﬁve
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
)

668 i‡(
«me
 !
NULL
 &&Çame[0] == '/') {

669  
	`vr_ªsﬁve_unix
(
«me
, 
si
);

672  
	`vr_ªsﬁve_öë
(
«me
, 
p‹t
, 
si
);

673 
	}
}

675 
	$vr_√t_≥î_to_°rög
(
fd
, *
ù
, 
size_t
 
ù_Àn
, *
p‹t
) {

676 
sockaddr_°‹age
 
ß
;

677 
sockÀn_t
 
ßÀn
 = (
ß
);

679 i‡(
	`gë≥î«me
(
fd
,(
sockaddr
*)&
ß
,&
ßÀn
Ë=-1Ë
îr‹
;

680 i‡(
ù_Àn
 =0Ë
îr‹
;

682 i‡(
ß
.
ss_Ámûy
 =
AF_INET
) {

683 
sockaddr_ö
 *
s
 = (sockaddr_ö *)&
ß
;

684 i‡(
ù
Ë
	`öë_¡›
(
AF_INET
,(*)&(
s
->
sö_addr
),ù,
ù_Àn
);

685 i‡(
p‹t
Ë*p‹à
	`¡ohs
(
s
->
sö_p‹t
);

686 } i‡(
ß
.
ss_Ámûy
 =
AF_INET6
) {

687 
sockaddr_ö6
 *
s
 = (sockaddr_ö6 *)&
ß
;

688 i‡(
ù
Ë
	`öë_¡›
(
AF_INET6
,(*)&(
s
->
sö6_addr
),ù,
ù_Àn
);

689 i‡(
p‹t
Ë*p‹à
	`¡ohs
(
s
->
sö6_p‹t
);

690 } i‡(
ß
.
ss_Ámûy
 =
AF_UNIX
) {

691 i‡(
ù
Ë
	`°∫˝y
(ù,"/unixsockë",
ù_Àn
);

692 i‡(
p‹t
) *port = 0;

694 
îr‹
;

698 
îr‹
:

699 i‡(
ù
) {

700 i‡(
ù_Àn
 >= 2) {

701 
ù
[0] = '?';

702 
ù
[1] = '\0';

703 } i‡(
ù_Àn
 == 1) {

704 
ù
[0] = '\0';

707 i‡(
p‹t
) *port = 0;

709 
	}
}

715 
	$vr_√t_f‹m©_addr
(*
buf
, 
size_t
 
buf_Àn
, *
ù
, 
p‹t
) {

716  
	`¢¥ötf
(
buf
,
buf_Àn
, 
	`°rchr
(
ù
,':') ?

717 "[%s]:%d" : "%s:%d", 
ù
, 
p‹t
);

718 
	}
}

722 
	$vr_√t_f‹m©_≥î
(
fd
, *
buf
, 
size_t
 
buf_Àn
) {

723 
ù
[
VR_INET6_ADDRSTRLEN
];

724 
p‹t
;

726 
	`vr_√t_≥î_to_°rög
(
fd
,
ù
,(ù),&
p‹t
);

727  
	`vr_√t_f‹m©_addr
(
buf
, 
buf_Àn
, 
ù
, 
p‹t
);

728 
	}
}

735 
	$gë_øndom_hex_ch¨s
(*
p
, 
Àn
) {

736 *
ch¨£t
 = "0123456789abcdef";

737 
j
;

740 
£ed_öôülized
 = 0;

741 
£ed
[20];

742 
uöt64_t
 
cou¡î
 = 0;

744 i‡(!
£ed_öôülized
) {

749 
FILE
 *
Â
 = 
	`f›í
("/dev/urandom","r");

750 i‡(
Â
 && 
	`‰ód
(
£ed
,(seed),1,fp) == 1)

751 
£ed_öôülized
 = 1;

752 i‡(
Â
Ë
	`f˛o£
(fp);

755 i‡(
£ed_öôülized
) {

756 
Àn
) {

757 
dige°
[20];

758 
SHA1_CTX
 
˘x
;

759 
c›yÀn
 = 
Àn
 > 20 ? 20 :Üen;

761 
	`SHA1Inô
(&
˘x
);

762 
	`SHA1Upd©e
(&
˘x
, 
£ed
, (seed));

763 
	`SHA1Upd©e
(&
˘x
, (*)&
cou¡î
,(counter));

764 
	`SHA1FöÆ
(
dige°
, &
˘x
);

765 
cou¡î
++;

767 
	`mem˝y
(
p
,
dige°
,
c›yÀn
);

769 
j
 = 0; j < 
c›yÀn
; j++Ë
p
[j] = 
ch¨£t
[p[j] & 0x0F];

770 
Àn
 -
c›yÀn
;

771 
p
 +
c›yÀn
;

777 *
x
 = 
p
;

778 
l
 = 
Àn
;

779 
timevÆ
 
tv
;

780 
pid_t
 
pid
 = 
	`gëpid
();

783 
	`gëtimeofday
(&
tv
,
NULL
);

784 i‡(
l
 >(
tv
.
tv_u£c
)) {

785 
	`mem˝y
(
x
,&
tv
.
tv_u£c
,(tv.tv_usec));

786 
l
 -(
tv
.
tv_u£c
);

787 
x
 +(
tv
.
tv_u£c
);

789 i‡(
l
 >(
tv
.
tv_£c
)) {

790 
	`mem˝y
(
x
,&
tv
.
tv_£c
,(tv.tv_sec));

791 
l
 -(
tv
.
tv_£c
);

792 
x
 +(
tv
.
tv_£c
);

794 i‡(
l
 >(
pid
)) {

795 
	`mem˝y
(
x
,&
pid
,(pid));

796 
l
 -(
pid
);

797 
x
 +(
pid
);

801 
j
 = 0; j < 
Àn
; j++) {

802 
p
[
j
] ^
	`ønd
();

803 
p
[
j
] = 
ch¨£t
[p[j] & 0x0F];

806 
	}
}

810 
	$°rögm©chÀn
(c⁄° *
∑âîn
, 
∑âînLí
,

811 c⁄° *
°rög
, 
°rögLí
, 
noˇ£
)

813 
∑âînLí
) {

814 
∑âîn
[0]) {

816 
∑âîn
[1] == '*') {

817 
∑âîn
++;

818 
∑âînLí
--;

820 i‡(
∑âînLí
 == 1)

822 
°rögLí
) {

823 i‡(
	`°rögm©chÀn
(
∑âîn
+1, 
∑âînLí
-1,

824 
°rög
, 
°rögLí
, 
noˇ£
))

826 
°rög
++;

827 
°rögLí
--;

832 i‡(
°rögLí
 == 0)

834 
°rög
++;

835 
°rögLí
--;

839 
nŸ
, 
m©ch
;

841 
∑âîn
++;

842 
∑âînLí
--;

843 
nŸ
 = 
∑âîn
[0] == '^';

844 i‡(
nŸ
) {

845 
∑âîn
++;

846 
∑âînLí
--;

848 
m©ch
 = 0;

850 i‡(
∑âîn
[0] == '\\') {

851 
∑âîn
++;

852 
∑âînLí
--;

853 i‡(
∑âîn
[0] =
°rög
[0])

854 
m©ch
 = 1;

855 } i‡(
∑âîn
[0] == ']') {

857 } i‡(
∑âînLí
 == 0) {

858 
∑âîn
--;

859 
∑âînLí
++;

861 } i‡(
∑âîn
[1] ='-' && 
∑âînLí
 >= 3) {

862 
°¨t
 = 
∑âîn
[0];

863 
íd
 = 
∑âîn
[2];

864 
c
 = 
°rög
[0];

865 i‡(
°¨t
 > 
íd
) {

866 
t
 = 
°¨t
;

867 
°¨t
 = 
íd
;

868 
íd
 = 
t
;

870 i‡(
noˇ£
) {

871 
°¨t
 = 
	`tﬁowî
(start);

872 
íd
 = 
	`tﬁowî
(end);

873 
c
 = 
	`tﬁowî
(c);

875 
∑âîn
 += 2;

876 
∑âînLí
 -= 2;

877 i‡(
c
 >
°¨t
 && c <
íd
)

878 
m©ch
 = 1;

880 i‡(!
noˇ£
) {

881 i‡(
∑âîn
[0] =
°rög
[0])

882 
m©ch
 = 1;

884 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë=tﬁowî(()
°rög
[0]))

885 
m©ch
 = 1;

888 
∑âîn
++;

889 
∑âînLí
--;

891 i‡(
nŸ
)

892 
m©ch
 = !match;

893 i‡(!
m©ch
)

895 
°rög
++;

896 
°rögLí
--;

900 i‡(
∑âînLí
 >= 2) {

901 
∑âîn
++;

902 
∑âînLí
--;

906 i‡(!
noˇ£
) {

907 i‡(
∑âîn
[0] !
°rög
[0])

910 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë!tﬁowî(()
°rög
[0]))

913 
°rög
++;

914 
°rögLí
--;

917 
∑âîn
++;

918 
∑âînLí
--;

919 i‡(
°rögLí
 == 0) {

920 *
∑âîn
 == '*') {

921 
∑âîn
++;

922 
∑âînLí
--;

927 i‡(
∑âînLí
 =0 && 
°rögLí
 == 0)

930 
	}
}

932 
	$°rögm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
) {

933  
	`°rögm©chÀn
(
∑âîn
,
	`°æí
’©ã∫),
°rög
,°æí(°rög),
noˇ£
);

934 
	}
}

938 
	$memªv16
(*
p
) {

939 *
x
 = 
p
, 
t
;

941 
t
 = 
x
[0];

942 
x
[0] = x[1];

943 
x
[1] = 
t
;

944 
	}
}

948 
	$memªv32
(*
p
) {

949 *
x
 = 
p
, 
t
;

951 
t
 = 
x
[0];

952 
x
[0] = x[3];

953 
x
[3] = 
t
;

954 
t
 = 
x
[1];

955 
x
[1] = x[2];

956 
x
[2] = 
t
;

957 
	}
}

961 
	$memªv64
(*
p
) {

962 *
x
 = 
p
, 
t
;

964 
t
 = 
x
[0];

965 
x
[0] = x[7];

966 
x
[7] = 
t
;

967 
t
 = 
x
[1];

968 
x
[1] = x[6];

969 
x
[6] = 
t
;

970 
t
 = 
x
[2];

971 
x
[2] = x[5];

972 
x
[5] = 
t
;

973 
t
 = 
x
[3];

974 
x
[3] = x[4];

975 
x
[4] = 
t
;

976 
	}
}

978 
uöt16_t
 
	$öåev16
(
uöt16_t
 
v
) {

979 
	`memªv16
(&
v
);

980  
v
;

981 
	}
}

983 
uöt32_t
 
	$öåev32
(
uöt32_t
 
v
) {

984 
	`memªv32
(&
v
);

985  
v
;

986 
	}
}

988 
uöt64_t
 
	$öåev64
(
uöt64_t
 
v
) {

989 
	`memªv64
(&
v
);

990  
v
;

991 
	}
}

1000 
	$memtﬁl
(c⁄° *
p
, *
îr
) {

1001 c⁄° *
u
;

1002 
buf
[128];

1003 
mul
;

1004 
vÆ
;

1005 
digôs
;

1007 i‡(
îr
) *err = 0;

1010 
u
 = 
p
;

1011 i‡(*
u
 == '-') u++;

1012 *
u
 && 
	`isdigô
(*u)) u++;

1013 i‡(*
u
 ='\0' || !
	`°rˇ£cmp
(u,"b")) {

1014 
mul
 = 1;

1015 } i‡(!
	`°rˇ£cmp
(
u
,"k")) {

1016 
mul
 = 1000;

1017 } i‡(!
	`°rˇ£cmp
(
u
,"kb")) {

1018 
mul
 = 1024;

1019 } i‡(!
	`°rˇ£cmp
(
u
,"m")) {

1020 
mul
 = 1000*1000;

1021 } i‡(!
	`°rˇ£cmp
(
u
,"mb")) {

1022 
mul
 = 1024*1024;

1023 } i‡(!
	`°rˇ£cmp
(
u
,"g")) {

1024 
mul
 = 1000L*1000*1000;

1025 } i‡(!
	`°rˇ£cmp
(
u
,"gb")) {

1026 
mul
 = 1024L*1024*1024;

1028 i‡(
îr
) *err = 1;

1034 
digôs
 = 
u
-
p
;

1035 i‡(
digôs
 >(
buf
)) {

1036 i‡(
îr
) *err = 1;

1039 
	`mem˝y
(
buf
,
p
,
digôs
);

1040 
buf
[
digôs
] = '\0';

1042 *
íd±r
;

1043 
î∫o
 = 0;

1044 
vÆ
 = 
	`°πﬁl
(
buf
,&
íd±r
,10);

1045 i‡((
vÆ
 =0 && 
î∫o
 =
EINVAL
Ë|| *
íd±r
 != '\0') {

1046 i‡(
îr
) *err = 1;

1049  
vÆ
*
mul
;

1050 
	}
}

1054 
	$byãsToHum™
(*
s
, 
n
) {

1055 
d
;

1057 i‡(
n
 < 1024) {

1059 
	`•rötf
(
s
,"%ŒuB",
n
);

1061 } i‡(
n
 < (1024*1024)) {

1062 
d
 = ()
n
/(1024);

1063 
	`•rötf
(
s
,"%.2fK",
d
);

1064 } i‡(
n
 < (1024LL*1024*1024)) {

1065 
d
 = ()
n
/(1024*1024);

1066 
	`•rötf
(
s
,"%.2fM",
d
);

1067 } i‡(
n
 < (1024LL*1024*1024*1024)) {

1068 
d
 = ()
n
/(1024LL*1024*1024);

1069 
	`•rötf
(
s
,"%.2fG",
d
);

1070 } i‡(
n
 < (1024LL*1024*1024*1024*1024)) {

1071 
d
 = ()
n
/(1024LL*1024*1024*1024);

1072 
	`•rötf
(
s
,"%.2fT",
d
);

1073 } i‡(
n
 < (1024LL*1024*1024*1024*1024*1024)) {

1074 
d
 = ()
n
/(1024LL*1024*1024*1024*1024);

1075 
	`•rötf
(
s
,"%.2fP",
d
);

1078 
	`•rötf
(
s
,"%ŒuB",
n
);

1080 
	}
}

1090 
sds
 
	$gëAbsﬁuãP©h
(*
fûíame
) {

1091 
cwd
[1024];

1092 
sds
 
ab•©h
;

1093 
sds
 
ªÕ©h
 = 
	`sd¢ew
(
fûíame
);

1095 
ªÕ©h
 = 
	`sd°rim
(relpath," \r\n\t");

1096 i‡(
ªÕ©h
[0] == '/') Ñelpath;

1099 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

1100 
	`sds‰ì
(
ªÕ©h
);

1101  
NULL
;

1103 
ab•©h
 = 
	`sd¢ew
(
cwd
);

1104 i‡(
	`sd¶í
(
ab•©h
) &&ábspath[sdslen(abspath)-1] != '/')

1105 
ab•©h
 = 
	`sdsˇt
(abspath,"/");

1113 
	`sd¶í
(
ªÕ©h
) >= 3 &&

1114 
ªÕ©h
[0] == '.' &&Ñelpath[1] == '.' &&Ñelpath[2] == '/')

1116 
	`sd§™ge
(
ªÕ©h
,3,-1);

1117 i‡(
	`sd¶í
(
ab•©h
) > 1) {

1118 *
p
 = 
ab•©h
 + 
	`sd¶í
(abspath)-2;

1119 
åimÀn
 = 1;

1121 *
p
 != '/') {

1122 
p
--;

1123 
åimÀn
++;

1125 
	`sd§™ge
(
ab•©h
,0,-(
åimÀn
+1));

1130 
ab•©h
 = 
	`sdsˇtsds
◊b•©h,
ªÕ©h
);

1131 
	`sds‰ì
(
ªÕ©h
);

1132  
ab•©h
;

1133 
	}
}

	@src/vr_util.h

1 #i‚de‡
_VR_UTIL_H_


2 
	#_VR_UTIL_H_


	)

4 
	~<°d¨g.h
>

5 
	~<°döt.h
>

6 
	~<°dboﬁ.h
>

8 
	~<√töë/ö.h
>

9 
	~<sys/un.h
>

12 
	#__x°r
(
s
Ë
	`__°r
(s)

	)

13 
	#__°r
(
s
Ë#s

	)

15 
	#VR_INET4_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

16 
	#VR_INET6_ADDRSTRLEN
 \

17 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

18 
	#VR_INET_ADDRSTRLEN
 
	`MAX
(
VR_INET4_ADDRSTRLEN
, 
VR_INET6_ADDRSTRLEN
)

	)

19 
	#VR_UNIX_ADDRSTRLEN
 \

20 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

22 
	#VR_INET_PEER_ID_LEN
 (
VR_INET_ADDRSTRLEN
+32Ë

	)

24 
	#VR_MAXHOSTNAMELEN
 256

	)

36 
	#VR_UINT8_MAXLEN
 (3 + 1)

	)

37 
	#VR_UINT16_MAXLEN
 (5 + 1)

	)

38 
	#VR_UINT32_MAXLEN
 (10 + 1)

	)

39 
	#VR_UINT64_MAXLEN
 (20 + 1)

	)

40 
	#VR_UINTMAX_MAXLEN
 
VR_UINT64_MAXLEN


	)

42 
	#LONG_STR_SIZE
 21

	)

48 
	#VR_ALIGNMENT
 (Ë

	)

49 
	#VR_ALIGN
(
d
, 
n
Ë(((dË+ (¿- 1)Ë& ~“ - 1))

	)

50 
	#VR_ALIGN_PTR
(
p
, 
n
) \

51 (*Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
n
 - 1)Ë& ~((uöçå_tË¿- 1))

	)

57 
	#vr_gëho°«me
(
_«me
, 
_Àn
) \

58 
	`gëho°«me
((*)
_«me
, (
size_t
)
_Àn
)

	)

60 
	#vr_©oi
(
_löe
, 
_n
) \

61 
	`_vr_©oi
((*)
_löe
, (
size_t
)
_n
)

	)

63 
vr_£t_blockög
(
sd
);

64 
vr_£t_n⁄blockög
(
sd
);

65 
vr_£t_ªu£addr
(
sd
);

66 
vr_£t_t˝nodñay
(
sd
);

67 
vr_£t_lögî
(
sd
, 
timeout
);

68 
vr_£t_¢dbuf
(
sd
, 
size
);

69 
vr_£t_rcvbuf
(
sd
, 
size
);

70 
vr_gë_s€º‹
(
sd
);

71 
vr_gë_¢dbuf
(
sd
);

72 
vr_gë_rcvbuf
(
sd
);

73 
vr_£t_t˝kì∑live
(
sd
, 
kìpidÀ
, 
kìpöãrvÆ
, 
kìpcou¡
);

75 
_vr_©oi
(*
löe
, 
size_t
 
n
);

76 
uöt32_t
 
digôs10
(
uöt64_t
 
v
);

77 
uöt32_t
 
sdigôs10
(
öt64_t
 
v
);

78 
Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
);

79 
°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
);

80 
°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
);

81 
d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
);

83 
boﬁ
 
vr_vÆid_p‹t
(
n
);

89 
	#vr_£ndn
(
_s
, 
_b
, 
_n
) \

90 
	`_vr_£ndn
(
_s
, 
_b
, (
size_t
)(
_n
))

	)

92 
	#vr_ªcvn
(
_s
, 
_b
, 
_n
) \

93 
	`_vr_ªcvn
(
_s
, 
_b
, (
size_t
)(
_n
))

	)

99 
	#vr_ªad
(
_d
, 
_b
, 
_n
) \

100 
	`ªad
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

102 
	#vr_ªadv
(
_d
, 
_b
, 
_n
) \

103 
	`ªadv
(
_d
, 
_b
, ()(
_n
))

	)

105 
	#vr_wrôe
(
_d
, 
_b
, 
_n
) \

106 
	`wrôe
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

108 
	#vr_wrôev
(
_d
, 
_b
, 
_n
) \

109 
	`wrôev
(
_d
, 
_b
, ()(
_n
))

	)

111 
ssize_t
 
_vr_£ndn
(
sd
, c⁄° *
v±r
, 
size_t
 
n
);

112 
ssize_t
 
_vr_ªcvn
(
sd
, *
v±r
, 
size_t
 
n
);

114 
öt64_t
 
vr_u£c_now
();

115 
öt64_t
 
vr_m£c_now
();

122 
	ssocköfo
 {

123 
	mÁmûy
;

124 
sockÀn_t
 
	maddæí
;

126 
sockaddr_ö
 
	mö
;

127 
sockaddr_ö6
 
	mö6
;

128 
sockaddr_un
 
	mun
;

129 } 
	maddr
;

132 
vr_ªsﬁve
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
);

133 
vr_√t_f‹m©_≥î
(
fd
, *
buf
, 
size_t
 
buf_Àn
);

135 
gë_øndom_hex_ch¨s
(*
p
, 
Àn
);

137 
°rögm©chÀn
(c⁄° *
∑âîn
, 
∑âînLí
, c⁄° *
°rög
, 
°rögLí
, 
noˇ£
);

138 
°rögm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
);

144 
	#vr_mem˝y
(
_d
, 
_c
, 
_n
) \

145 
	`mem˝y
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

147 
	#vr_memmove
(
_d
, 
_c
, 
_n
) \

148 
	`memmove
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

150 
	#vr_memchr
(
_d
, 
_c
, 
_n
) \

151 
	`memchr
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

153 
	#vr_°æí
(
_s
) \

154 
	`°æí
((*)(
_s
))

	)

156 
	#vr_°∫cmp
(
_s1
, 
_s2
, 
_n
) \

157 
	`°∫cmp
((*)(
_s1
), (*)(
_s2
), (
size_t
)(
_n
))

	)

159 
	#vr_°rchr
(
_p
, 
_l
, 
_c
) \

160 
	`_vr_°rchr
((
uöt8_t
 *)(
_p
), (uöt8_à*)(
_l
), (uöt8_t)(
_c
))

	)

162 
	#vr_°ºchr
(
_p
, 
_s
, 
_c
) \

163 
	`_vr_°ºchr
((
uöt8_t
 *)(
_p
),(uöt8_à*)(
_s
), (uöt8_t)(
_c
))

	)

165 
	#vr_°∫dup
(
_s
, 
_n
) \

166 (
uöt8_t
 *)
	`°∫dup
((*)(
_s
), (
size_t
)(
_n
));

	)

168 
ölöe
 
uöt8_t
 *

169 
	$_vr_°rchr
(
uöt8_t
 *
p
, uöt8_à*
œ°
, uöt8_à
c
)

171 
p
 < 
œ°
) {

172 i‡(*
p
 =
c
) {

173  
p
;

175 
p
++;

178  
NULL
;

179 
	}
}

181 
ölöe
 
uöt8_t
 *

182 
	$_vr_°ºchr
(
uöt8_t
 *
p
, uöt8_à*
°¨t
, uöt8_à
c
)

184 
p
 >
°¨t
) {

185 i‡(*
p
 =
c
) {

186  
p
;

188 
p
--;

191  
NULL
;

192 
	}
}

194 
memªv16
(*
p
);

195 
memªv32
(*
p
);

196 
memªv64
(*
p
);

197 
uöt16_t
 
öåev16
(uöt16_à
v
);

198 
uöt32_t
 
öåev32
(uöt32_à
v
);

199 
uöt64_t
 
öåev64
(uöt64_à
v
);

203 #ifde‡
VR_LITTLE_ENDIAN


204 
	#memªv16ifbe
(
p
)

	)

205 
	#memªv32ifbe
(
p
)

	)

206 
	#memªv64ifbe
(
p
)

	)

207 
	#öåev16ifbe
(
v
Ë(v)

	)

208 
	#öåev32ifbe
(
v
Ë(v)

	)

209 
	#öåev64ifbe
(
v
Ë(v)

	)

211 
	#memªv16ifbe
(
p
Ë
	`memªv16
’)

	)

212 
	#memªv32ifbe
(
p
Ë
	`memªv32
’)

	)

213 
	#memªv64ifbe
(
p
Ë
	`memªv64
’)

	)

214 
	#öåev16ifbe
(
v
Ë
	`öåev16
(v)

	)

215 
	#öåev32ifbe
(
v
Ë
	`öåev32
(v)

	)

216 
	#öåev64ifbe
(
v
Ë
	`öåev64
(v)

	)

219 
memtﬁl
(c⁄° *
p
, *
îr
);

220 
byãsToHum™
(*
s
, 
n
);

222 
sds
 
gëAbsﬁuãP©h
(*
fûíame
);

	@src/vr_util.h

1 #i‚de‡
_VR_UTIL_H_


2 
	#_VR_UTIL_H_


	)

4 
	~<°d¨g.h
>

5 
	~<°döt.h
>

6 
	~<°dboﬁ.h
>

8 
	~<√töë/ö.h
>

9 
	~<sys/un.h
>

12 
	#__x°r
(
s
Ë
	`__°r
(s)

	)

13 
	#__°r
(
s
Ë#s

	)

15 
	#VR_INET4_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

16 
	#VR_INET6_ADDRSTRLEN
 \

17 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

18 
	#VR_INET_ADDRSTRLEN
 
	`MAX
(
VR_INET4_ADDRSTRLEN
, 
VR_INET6_ADDRSTRLEN
)

	)

19 
	#VR_UNIX_ADDRSTRLEN
 \

20 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

22 
	#VR_INET_PEER_ID_LEN
 (
VR_INET_ADDRSTRLEN
+32Ë

	)

24 
	#VR_MAXHOSTNAMELEN
 256

	)

36 
	#VR_UINT8_MAXLEN
 (3 + 1)

	)

37 
	#VR_UINT16_MAXLEN
 (5 + 1)

	)

38 
	#VR_UINT32_MAXLEN
 (10 + 1)

	)

39 
	#VR_UINT64_MAXLEN
 (20 + 1)

	)

40 
	#VR_UINTMAX_MAXLEN
 
VR_UINT64_MAXLEN


	)

42 
	#LONG_STR_SIZE
 21

	)

48 
	#VR_ALIGNMENT
 (Ë

	)

49 
	#VR_ALIGN
(
d
, 
n
Ë(((dË+ (¿- 1)Ë& ~“ - 1))

	)

50 
	#VR_ALIGN_PTR
(
p
, 
n
) \

51 (*Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
n
 - 1)Ë& ~((uöçå_tË¿- 1))

	)

57 
	#vr_gëho°«me
(
_«me
, 
_Àn
) \

58 
	`gëho°«me
((*)
_«me
, (
size_t
)
_Àn
)

	)

60 
	#vr_©oi
(
_löe
, 
_n
) \

61 
	`_vr_©oi
((*)
_löe
, (
size_t
)
_n
)

	)

63 
vr_£t_blockög
(
sd
);

64 
vr_£t_n⁄blockög
(
sd
);

65 
vr_£t_ªu£addr
(
sd
);

66 
vr_£t_t˝nodñay
(
sd
);

67 
vr_£t_lögî
(
sd
, 
timeout
);

68 
vr_£t_¢dbuf
(
sd
, 
size
);

69 
vr_£t_rcvbuf
(
sd
, 
size
);

70 
vr_gë_s€º‹
(
sd
);

71 
vr_gë_¢dbuf
(
sd
);

72 
vr_gë_rcvbuf
(
sd
);

73 
vr_£t_t˝kì∑live
(
sd
, 
kìpidÀ
, 
kìpöãrvÆ
, 
kìpcou¡
);

75 
_vr_©oi
(*
löe
, 
size_t
 
n
);

76 
uöt32_t
 
digôs10
(
uöt64_t
 
v
);

77 
uöt32_t
 
sdigôs10
(
öt64_t
 
v
);

78 
Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
);

79 
°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
);

80 
°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
);

81 
d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
);

83 
boﬁ
 
vr_vÆid_p‹t
(
n
);

89 
	#vr_£ndn
(
_s
, 
_b
, 
_n
) \

90 
	`_vr_£ndn
(
_s
, 
_b
, (
size_t
)(
_n
))

	)

92 
	#vr_ªcvn
(
_s
, 
_b
, 
_n
) \

93 
	`_vr_ªcvn
(
_s
, 
_b
, (
size_t
)(
_n
))

	)

99 
	#vr_ªad
(
_d
, 
_b
, 
_n
) \

100 
	`ªad
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

102 
	#vr_ªadv
(
_d
, 
_b
, 
_n
) \

103 
	`ªadv
(
_d
, 
_b
, ()(
_n
))

	)

105 
	#vr_wrôe
(
_d
, 
_b
, 
_n
) \

106 
	`wrôe
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

108 
	#vr_wrôev
(
_d
, 
_b
, 
_n
) \

109 
	`wrôev
(
_d
, 
_b
, ()(
_n
))

	)

111 
ssize_t
 
_vr_£ndn
(
sd
, c⁄° *
v±r
, 
size_t
 
n
);

112 
ssize_t
 
_vr_ªcvn
(
sd
, *
v±r
, 
size_t
 
n
);

114 
öt64_t
 
vr_u£c_now
();

115 
öt64_t
 
vr_m£c_now
();

122 
	ssocköfo
 {

123 
	mÁmûy
;

124 
sockÀn_t
 
	maddæí
;

126 
sockaddr_ö
 
	mö
;

127 
sockaddr_ö6
 
	mö6
;

128 
sockaddr_un
 
	mun
;

129 } 
	maddr
;

132 
vr_ªsﬁve
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
);

133 
vr_√t_f‹m©_≥î
(
fd
, *
buf
, 
size_t
 
buf_Àn
);

135 
gë_øndom_hex_ch¨s
(*
p
, 
Àn
);

137 
°rögm©chÀn
(c⁄° *
∑âîn
, 
∑âînLí
, c⁄° *
°rög
, 
°rögLí
, 
noˇ£
);

138 
°rögm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
);

144 
	#vr_mem˝y
(
_d
, 
_c
, 
_n
) \

145 
	`mem˝y
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

147 
	#vr_memmove
(
_d
, 
_c
, 
_n
) \

148 
	`memmove
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

150 
	#vr_memchr
(
_d
, 
_c
, 
_n
) \

151 
	`memchr
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

153 
	#vr_°æí
(
_s
) \

154 
	`°æí
((*)(
_s
))

	)

156 
	#vr_°∫cmp
(
_s1
, 
_s2
, 
_n
) \

157 
	`°∫cmp
((*)(
_s1
), (*)(
_s2
), (
size_t
)(
_n
))

	)

159 
	#vr_°rchr
(
_p
, 
_l
, 
_c
) \

160 
	`_vr_°rchr
((
uöt8_t
 *)(
_p
), (uöt8_à*)(
_l
), (uöt8_t)(
_c
))

	)

162 
	#vr_°ºchr
(
_p
, 
_s
, 
_c
) \

163 
	`_vr_°ºchr
((
uöt8_t
 *)(
_p
),(uöt8_à*)(
_s
), (uöt8_t)(
_c
))

	)

165 
	#vr_°∫dup
(
_s
, 
_n
) \

166 (
uöt8_t
 *)
	`°∫dup
((*)(
_s
), (
size_t
)(
_n
));

	)

168 
ölöe
 
uöt8_t
 *

169 
	$_vr_°rchr
(
uöt8_t
 *
p
, uöt8_à*
œ°
, uöt8_à
c
)

171 
p
 < 
œ°
) {

172 i‡(*
p
 =
c
) {

173  
p
;

175 
p
++;

178  
NULL
;

179 
	}
}

181 
ölöe
 
uöt8_t
 *

182 
	$_vr_°ºchr
(
uöt8_t
 *
p
, uöt8_à*
°¨t
, uöt8_à
c
)

184 
p
 >
°¨t
) {

185 i‡(*
p
 =
c
) {

186  
p
;

188 
p
--;

191  
NULL
;

192 
	}
}

194 
memªv16
(*
p
);

195 
memªv32
(*
p
);

196 
memªv64
(*
p
);

197 
uöt16_t
 
öåev16
(uöt16_à
v
);

198 
uöt32_t
 
öåev32
(uöt32_à
v
);

199 
uöt64_t
 
öåev64
(uöt64_à
v
);

203 #ifde‡
VR_LITTLE_ENDIAN


204 
	#memªv16ifbe
(
p
)

	)

205 
	#memªv32ifbe
(
p
)

	)

206 
	#memªv64ifbe
(
p
)

	)

207 
	#öåev16ifbe
(
v
Ë(v)

	)

208 
	#öåev32ifbe
(
v
Ë(v)

	)

209 
	#öåev64ifbe
(
v
Ë(v)

	)

211 
	#memªv16ifbe
(
p
Ë
	`memªv16
’)

	)

212 
	#memªv32ifbe
(
p
Ë
	`memªv32
’)

	)

213 
	#memªv64ifbe
(
p
Ë
	`memªv64
’)

	)

214 
	#öåev16ifbe
(
v
Ë
	`öåev16
(v)

	)

215 
	#öåev32ifbe
(
v
Ë
	`öåev32
(v)

	)

216 
	#öåev64ifbe
(
v
Ë
	`öåev64
(v)

	)

219 
memtﬁl
(c⁄° *
p
, *
îr
);

220 
byãsToHum™
(*
s
, 
n
);

222 
sds
 
gëAbsﬁuãP©h
(*
fûíame
);

	@src/vr_worker.c

1 
	~<vr_c‹e.h
>

4 
	gœ°_w‹kî_thªad
 = -1;

5 
	gnum_w‹kî_thªads
;

7 
d¨øy
 
	gw‹kîs
;

9 *
w‹kî_thªad_run
(*
¨gs
);

11 
	#SU_PER_ALLOC
 64

	)

15 
c⁄nsw≠unô
 *
	gcsui_‰ìli°
;

16 
±hªad_muãx_t
 
	gcsui_‰ìli°_lock
;

22 
c⁄nsw≠unô
 *

23 
	$csui_√w
() {

24 
c⁄nsw≠unô
 *
ôem
 = 
NULL
;

26 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

27 i‡(
csui_‰ìli°
) {

28 
ôem
 = 
csui_‰ìli°
;

29 
csui_‰ìli°
 = 
ôem
->
√xt
;

31 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

33 i‡(
NULL
 =
ôem
) {

34 
i
;

37 
ôem
 = 
	`dÆloc
((
c⁄nsw≠unô
Ë* 
SU_PER_ALLOC
);

38 i‡(
NULL
 =
ôem
) {

39  
NULL
;

47 
i
 = 2; i < 
SU_PER_ALLOC
; i++)

48 
ôem
[
i
 - 1].
√xt
 = &item[i];

50 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

51 
ôem
[
SU_PER_ALLOC
 - 1].
√xt
 = 
csui_‰ìli°
;

52 
csui_‰ìli°
 = &
ôem
[1];

53 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

56  
ôem
;

57 
	}
}

64 
	$csui_‰ì
(
c⁄nsw≠unô
 *
ôem
) {

65 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

66 
ôem
->
√xt
 = 
csui_‰ìli°
;

67 
csui_‰ìli°
 = 
ôem
;

68 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

69 
	}
}

73 
	$csul_push
(
vr_w‹kî
 *
w‹kî
, 
c⁄nsw≠unô
 *
su
)

75 
	`±hªad_muãx_lock
(&
w‹kî
->
csuŒock
);

76 
	`dli°Push
(
w‹kî
->
csul
, 
su
);

77 
	`±hªad_muãx_u∆ock
(&
w‹kî
->
csuŒock
);

78 
	}
}

81 
c⁄nsw≠unô
 *

82 
	$csul_p›
(
vr_w‹kî
 *
w‹kî
)

84 
c⁄nsw≠unô
 *
su
 = 
NULL
;

86 
	`±hªad_muãx_lock
(&
w‹kî
->
csuŒock
);

87 
su
 = 
	`dli°P›
(
w‹kî
->
csul
);

88 
	`±hªad_muãx_u∆ock
(&
w‹kî
->
csuŒock
);

90  
su
;

91 
	}
}

95 
	$vr_w‹kî_öô
(
vr_w‹kî
 *
w‹kî
)

97 
r°©us_t
 
°©us
;

98 
max˛õ¡s
, 
thªads_num
;

99 
fûñimô
;

101 i‡(
w‹kî
 =
NULL
) {

102  
VR_ERROR
;

105 
w‹kî
->
id
 = 0;

106 
w‹kî
->
sockë∑ús
[0] = -1;

107 
w‹kî
->
sockë∑ús
[1] = -1;

109 
w‹kî
->
csul
 = 
NULL
;

111 
	`±hªad_muãx_öô
(&
w‹kî
->
csuŒock
, 
NULL
);

112 
w‹kî
->
cuºít_db
 = 0;

113 
w‹kî
->
timñimô_exô
 = 0;

114 
w‹kî
->
œ°_Á°_cy˛e
 = 0;

115 
w‹kî
->
ªsize_db
 = 0;

116 
w‹kî
->
ªhash_db
 = 0;

118 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
max˛õ¡s
);

120 
fûñimô
 = 
	`adju°O≥nFûesLimô
(
max˛õ¡s
);

121 i‡(
fûñimô
 <= 0) {

122  
VR_ERROR
;

125 
	`vr_evíéo›_öô
(&
w‹kî
->
vñ
, 
fûñimô
);

127 
w‹kî
->
vñ
.
thªad
.
fun_run
 = 
w‹kî_thªad_run
;

129 
w‹kî
->
vñ
.
thªad
.
d©a
 = worker;

131 
w‹kî
->
vñ
.
c°abÀ
 = 
	`comm™dSètsTabÀCª©e
();

133 
°©us
 = 
	`sockë∑ú
(
AF_LOCAL
, 
SOCK_STREAM
, 0, 
w‹kî
->
sockë∑ús
);

134 i‡(
°©us
 < 0) {

135 
	`log_îr‹
("¸óã sockë∑ú†Áûed: %s", 
	`°ªº‹
(
î∫o
));

136  
VR_ERROR
;

139 
°©us
 = 
	`vr_£t_n⁄blockög
(
w‹kî
->
sockë∑ús
[0]);

140 i‡(
°©us
 < 0) {

141 
	`log_îr‹
("set socketpairs[0] %dÇonblocking failed: %s",

142 
w‹kî
->
sockë∑ús
[0], 
	`°ªº‹
(
î∫o
));

143 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

144 
w‹kî
->
sockë∑ús
[0] = -1;

145 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

146 
w‹kî
->
sockë∑ús
[1] = -1;

147  
VR_ERROR
;

149 
°©us
 = 
	`vr_£t_n⁄blockög
(
w‹kî
->
sockë∑ús
[1]);

150 i‡(
°©us
 < 0) {

151 
	`log_îr‹
("set socketpairs[1] %dÇonblocking failed: %s",

152 
w‹kî
->
sockë∑ús
[1], 
	`°ªº‹
(
î∫o
));

153 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

154 
w‹kî
->
sockë∑ús
[0] = -1;

155 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

156 
w‹kî
->
sockë∑ús
[1] = -1;

157  
VR_ERROR
;

160 
w‹kî
->
csul
 = 
	`dli°Cª©e
();

161 i‡(
w‹kî
->
csul
 =
NULL
) {

162 
	`log_îr‹
("createÜist failed: out of memory");

163  
VR_ENOMEM
;

166  
VR_OK
;

167 
	}
}

171 
	$vr_w‹kî_deöô
(
vr_w‹kî
 *
w‹kî
)

173 i‡(
w‹kî
 =
NULL
) {

177 
	`vr_evíéo›_deöô
(&
w‹kî
->
vñ
);

179 i‡(
w‹kî
->
sockë∑ús
[0] > 0){

180 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

181 
w‹kî
->
sockë∑ús
[0] = -1;

183 i‡(
w‹kî
->
sockë∑ús
[1] > 0){

184 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

185 
w‹kî
->
sockë∑ús
[1] = -1;

188 i‡(
w‹kî
->
csul
 !
NULL
) {

189 
	`dli°Rñó£
(
w‹kî
->
csul
);

190 
w‹kî
->
csul
 = 
NULL
;

192 
	}
}

196 
	$w‹kî_gë_√xt_idx
(
curidx
)

198 
idx
 = 
curidx
 + 1;

199  
idx
>=
num_w‹kî_thªads
?0:idx;

200 
	}
}

204 
	$di•©ch_c⁄n_√w
(
vr_li°í
 *
vli°í
, 
sd
)

206 
c⁄nsw≠unô
 *
su
 = 
	`csui_√w
();

207 
buf
[1];

208 
vr_w‹kî
 *
w‹kî
;

210 i‡(
su
 =
NULL
) {

211 
	`˛o£
(
sd
);

213 
	`log_îr‹
("FailedÅoállocate memory for connection swap object\n");

218 
tid
 = (
œ°_w‹kî_thªad
 + 1Ë% 
num_w‹kî_thªads
;

219 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
tid
);

222 
œ°_w‹kî_thªad
 = 
tid
;

225 
su
->
num
 = 
sd
;

226 
su
->
d©a
 = 
vli°í
;

229 
	`csul_push
(
w‹kî
, 
su
);

232 
buf
[0] = 'c';

233 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[0], 
buf
, 1) != 1) {

234 
	`log_îr‹
("NoticeÅhe worker failed.");

237 
	`upd©e_cuº_˛õ¡s_add
(1);

238 
	}
}

242 
	$thªad_evít_¥o˚ss
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

244 
r°©us_t
 
°©us
;

246 
vr_w‹kî
 *
w‹kî
 = 
¥ivd©a
;

247 
buf
[1];

248 
sd
;

250 
vr_li°í
 *
vli°í
;

251 
c⁄n
 *conn;

252 
c⁄nsw≠unô
 *
csu
;

253 
˛õ¡
 *
c
;

255 
	`ASSERT
(
ñ
 =
w‹kî
->
vñ
.el);

256 
	`ASSERT
(
fd
 =
w‹kî
->
sockë∑ús
[1]);

258 i‡(
	`vr_ªad
(
fd
, 
buf
, 1) != 1) {

259 
	`log_w¨n
("Can'tÑead for worker(id:%d) socketpairs[1](%d)",

260 
w‹kî
->
vñ
.
thªad
.
id
, 
fd
);

261 
buf
[0] = 'c';

264 
buf
[0]) {

268 
csu
 = 
	`csul_p›
(
w‹kî
);

269 i‡(
csu
 =
NULL
) {

273 
sd
 = 
csu
->
num
;

275 
vli°í
 = 
csu
->
d©a
;

277 
	`csui_‰ì
(
csu
);

278 
c⁄n
 = 
	`c⁄n_gë
(
w‹kî
->
vñ
.
cb
);

279 i‡(
c⁄n
 =
NULL
) {

280 
	`log_îr‹
("get conn for c %d failed: %s",

281 
sd
, 
	`°ªº‹
(
î∫o
));

282 
°©us
 = 
	`˛o£
(
sd
);

283 i‡(
°©us
 < 0) {

284 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

288 
c⁄n
->
sd
 = sd;

290 
°©us
 = 
	`vr_£t_n⁄blockög
(
c⁄n
->
sd
);

291 i‡(
°©us
 < 0) {

292 
	`log_îr‹
("setÇonblock on c %d failed: %s",

293 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

294 
	`c⁄n_put
(
c⁄n
);

298 i‡(
vli°í
->
öfo
.
Ámûy
 =
AF_INET
 || vli°í->öfo.Ámûy =
AF_INET6
) {

299 
°©us
 = 
	`vr_£t_t˝nodñay
(
c⁄n
->
sd
);

300 i‡(
°©us
 < 0) {

301 
	`log_w¨n
("setÅcpnodelay on c %d failed, ignored: %s",

302 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

306 
c
 = 
	`¸óãClõ¡
(&
w‹kî
->
vñ
, 
c⁄n
);

307 i‡(
c
 =
NULL
) {

308 
	`log_îr‹
("Create client failed");

309 
	`c⁄n_put
(
c⁄n
);

313 
c
->
curidx
 = 
w‹kî
->
id
;

315 
°©us
 = 
	`´Cª©eFûeEvít
(
w‹kî
->
vñ
.
ñ
, 
c⁄n
->
sd
, 
AE_READABLE
,

316 
ªadQuîyFromClõ¡
, 
c
);

317 i‡(
°©us
 =
AE_ERR
) {

318 
	`log_îr‹
("UnrecoverableÉrror creating worker ipfd fileÉvent.");

322 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
numc⁄√˘i⁄s
, 1);

328 
csu
 = 
	`csul_p›
(
w‹kî
);

329 i‡(
csu
 =
NULL
) {

333 
c
 = 
csu
->
d©a
;

335 
	`csui_‰ì
(
csu
);

336 
c
->
vñ
 = &
w‹kî
->vel;

337 
c
->
curidx
 = 
w‹kî
->
id
;

338 
c
->
°ïs
 ++;

339 
c
->
cmd
->
	`¥oc
(c);

341 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

342 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

344 
	`ª£tClõ¡
(
c
);

345 
	`lökClõ¡ToEvíéo›
(
c
,c->
vñ
);

349 
	`log_îr‹
("readÉrror char '%c' for worker(id:%d) socketpairs[1](%d)",

350 
buf
[0], 
w‹kî
->
vñ
.
thªad
.
id
, w‹kî->
sockë∑ús
[1]);

353 
	}
}

356 
	$£tup_w‹kî
(
vr_w‹kî
 *
w‹kî
)

358 
r°©us_t
 
°©us
;

360 
°©us
 = 
	`´Cª©eFûeEvít
(
w‹kî
->
vñ
.
ñ
, w‹kî->
sockë∑ús
[1], 
AE_READABLE
,

361 
thªad_evít_¥o˚ss
, 
w‹kî
);

362 i‡(
°©us
 =
AE_ERR
) {

363 
	`log_îr‹
("UnrecoverableÉrror creating worker ipfd fileÉvent.");

364  
VR_ERROR
;

367 
	`´SëBef‹eSÀïProc
(
w‹kî
->
vñ
.
ñ
, 
w‹kî_bef‹e_¶ìp
, worker);

372 if(
	`´Cª©eTimeEvít
(
w‹kî
->
vñ
.
ñ
, 1, 
w‹kî_¸⁄
, w‹kî, 
NULL
Ë=
AE_ERR
) {

373 
	`£rvîP™ic
("Can't createÅhe serverCronÅimeÉvent.");

374  
VR_ERROR
;

377  
VR_OK
;

378 
	}
}

381 
	$w‹kî_thªad_run
(*
¨gs
)

383 
vr_w‹kî
 *
w‹kî
 = 
¨gs
;

386 
	`´Maö
(
w‹kî
->
vñ
.
ñ
);

388  
NULL
;

389 
	}
}

392 
	$w‹kîs_öô
(
uöt32_t
 
w‹kî_cou¡
)

394 
r°©us_t
 
°©us
;

395 
uöt32_t
 
idx
;

396 
vr_w‹kî
 *
w‹kî
;

398 
csui_‰ìli°
 = 
NULL
;

399 
	`±hªad_muãx_öô
(&
csui_‰ìli°_lock
, 
NULL
);

401 
	`d¨øy_öô
(&
w‹kîs
, 
w‹kî_cou¡
, (
vr_w‹kî
));

403 
idx
 = 0; idx < 
w‹kî_cou¡
; idx ++) {

404 
w‹kî
 = 
	`d¨øy_push
(&
w‹kîs
);

405 
	`vr_w‹kî_öô
(
w‹kî
);

406 
w‹kî
->
id
 = 
idx
;

407 
°©us
 = 
	`£tup_w‹kî
(
w‹kî
);

408 i‡(
°©us
 !
VR_OK
) {

409 
	`exô
(1);

413 
num_w‹kî_thªads
 = ()
	`d¨øy_n
(&
w‹kîs
);

415  
VR_OK
;

416 
	}
}

419 
	$w‹kîs_run
()

421 
uöt32_t
 
i
, 
thªad_cou¡
;

422 
vr_w‹kî
 *
w‹kî
;

424 
thªad_cou¡
 = (
uöt32_t
)
num_w‹kî_thªads
;

426 
i
 = 0; i < 
thªad_cou¡
; i ++) {

427 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
i
);

428 
	`vr_thªad_°¨t
(&
w‹kî
->
vñ
.
thªad
);

431  
VR_OK
;

432 
	}
}

435 
	$w‹kîs_waô
()

437 
uöt32_t
 
i
, 
thªad_cou¡
;

438 
vr_w‹kî
 *
w‹kî
;

440 
thªad_cou¡
 = (
uöt32_t
)
num_w‹kî_thªads
;

442 
i
 = 0; i < 
thªad_cou¡
; i ++) {

443 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
i
);

444 
	`±hªad_joö
(
w‹kî
->
vñ
.
thªad
.
thªad_id
, 
NULL
);

447  
VR_OK
;

448 
	}
}

451 
	$w‹kîs_deöô
()

453 
vr_w‹kî
 *
w‹kî
;

455 
	`d¨øy_n
(&
w‹kîs
)) {

456 
w‹kî
 = 
	`d¨øy_p›
(&
w‹kîs
);

457 
	`vr_w‹kî_deöô
(
w‹kî
);

459 
	}
}

466 
	$w‹kî_bef‹e_¶ìp
(
´EvítLo›
 *
evítLo›
, *
¥iv©e_d©a
) {

467 
vr_w‹kî
 *
w‹kî
 = 
¥iv©e_d©a
;

469 
	`UNUSED
(
evítLo›
);

470 
	`UNUSED
(
¥iv©e_d©a
);

472 
	`ASSERT
(
evítLo›
 =
w‹kî
->
vñ
.
ñ
);

475 
	`h™dÀClõ¡sWôhPídögWrôes
(&
w‹kî
->
vñ
);

478 
	}
}

481 
	$w‹kî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

482 
vr_w‹kî
 *
w‹kî
 = 
˛õ¡D©a
;

483 
vr_evíéo›
 *
vñ
 = &
w‹kî
->vel;

484 
size_t
 
°©_u£d_mem‹y
, 
°©s_≥ak_mem‹y
;

486 
	`UNUSED
(
evítLo›
);

487 
	`UNUSED
(
id
);

488 
	`UNUSED
(
˛õ¡D©a
);

490 
	`ASSERT
(
evítLo›
 =
vñ
->
ñ
);

492 
vñ
->
unixtime
 = 
	`time
(
NULL
);

493 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

495 
	`run_wôh_≥riod
(100, 
vñ
->
¸⁄lo›s
) {

496 
°©s_vÆue
;

497 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
numcomm™ds
,&
°©s_vÆue
);

498 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_COMMAND
,
°©s_vÆue
);

499 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
√t_öput_byãs
,&
°©s_vÆue
);

500 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_NET_INPUT
,
°©s_vÆue
);

501 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
√t_ouçut_byãs
,&
°©s_vÆue
);

502 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_NET_OUTPUT
,
°©s_vÆue
);

506 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

507 
vñ
->
ªsidít_£t_size
 = 
	`dÆloc_gë_rss
();

518 
	`‰ìClõ¡sInAsyncFªeQueue
(
vñ
);

523 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

524 
	`c⁄f_ˇche_upd©e
(&
vñ
->
cc
);

527 
vñ
->
¸⁄lo›s
 ++;

528  1000/
vñ
->
hz
;

529 
	}
}

	@src/vr_worker.c

1 
	~<vr_c‹e.h
>

4 
	gœ°_w‹kî_thªad
 = -1;

5 
	gnum_w‹kî_thªads
;

7 
d¨øy
 
	gw‹kîs
;

9 *
w‹kî_thªad_run
(*
¨gs
);

11 
	#SU_PER_ALLOC
 64

	)

15 
c⁄nsw≠unô
 *
	gcsui_‰ìli°
;

16 
±hªad_muãx_t
 
	gcsui_‰ìli°_lock
;

22 
c⁄nsw≠unô
 *

23 
	$csui_√w
() {

24 
c⁄nsw≠unô
 *
ôem
 = 
NULL
;

26 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

27 i‡(
csui_‰ìli°
) {

28 
ôem
 = 
csui_‰ìli°
;

29 
csui_‰ìli°
 = 
ôem
->
√xt
;

31 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

33 i‡(
NULL
 =
ôem
) {

34 
i
;

37 
ôem
 = 
	`dÆloc
((
c⁄nsw≠unô
Ë* 
SU_PER_ALLOC
);

38 i‡(
NULL
 =
ôem
) {

39  
NULL
;

47 
i
 = 2; i < 
SU_PER_ALLOC
; i++)

48 
ôem
[
i
 - 1].
√xt
 = &item[i];

50 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

51 
ôem
[
SU_PER_ALLOC
 - 1].
√xt
 = 
csui_‰ìli°
;

52 
csui_‰ìli°
 = &
ôem
[1];

53 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

56  
ôem
;

57 
	}
}

64 
	$csui_‰ì
(
c⁄nsw≠unô
 *
ôem
) {

65 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

66 
ôem
->
√xt
 = 
csui_‰ìli°
;

67 
csui_‰ìli°
 = 
ôem
;

68 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

69 
	}
}

73 
	$csul_push
(
vr_w‹kî
 *
w‹kî
, 
c⁄nsw≠unô
 *
su
)

75 
	`±hªad_muãx_lock
(&
w‹kî
->
csuŒock
);

76 
	`dli°Push
(
w‹kî
->
csul
, 
su
);

77 
	`±hªad_muãx_u∆ock
(&
w‹kî
->
csuŒock
);

78 
	}
}

81 
c⁄nsw≠unô
 *

82 
	$csul_p›
(
vr_w‹kî
 *
w‹kî
)

84 
c⁄nsw≠unô
 *
su
 = 
NULL
;

86 
	`±hªad_muãx_lock
(&
w‹kî
->
csuŒock
);

87 
su
 = 
	`dli°P›
(
w‹kî
->
csul
);

88 
	`±hªad_muãx_u∆ock
(&
w‹kî
->
csuŒock
);

90  
su
;

91 
	}
}

95 
	$vr_w‹kî_öô
(
vr_w‹kî
 *
w‹kî
)

97 
r°©us_t
 
°©us
;

98 
max˛õ¡s
, 
thªads_num
;

99 
fûñimô
;

101 i‡(
w‹kî
 =
NULL
) {

102  
VR_ERROR
;

105 
w‹kî
->
id
 = 0;

106 
w‹kî
->
sockë∑ús
[0] = -1;

107 
w‹kî
->
sockë∑ús
[1] = -1;

109 
w‹kî
->
csul
 = 
NULL
;

111 
	`±hªad_muãx_öô
(&
w‹kî
->
csuŒock
, 
NULL
);

112 
w‹kî
->
cuºít_db
 = 0;

113 
w‹kî
->
timñimô_exô
 = 0;

114 
w‹kî
->
œ°_Á°_cy˛e
 = 0;

115 
w‹kî
->
ªsize_db
 = 0;

116 
w‹kî
->
ªhash_db
 = 0;

118 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
max˛õ¡s
);

120 
fûñimô
 = 
	`adju°O≥nFûesLimô
(
max˛õ¡s
);

121 i‡(
fûñimô
 <= 0) {

122  
VR_ERROR
;

125 
	`vr_evíéo›_öô
(&
w‹kî
->
vñ
, 
fûñimô
);

127 
w‹kî
->
vñ
.
thªad
.
fun_run
 = 
w‹kî_thªad_run
;

129 
w‹kî
->
vñ
.
thªad
.
d©a
 = worker;

131 
w‹kî
->
vñ
.
c°abÀ
 = 
	`comm™dSètsTabÀCª©e
();

133 
°©us
 = 
	`sockë∑ú
(
AF_LOCAL
, 
SOCK_STREAM
, 0, 
w‹kî
->
sockë∑ús
);

134 i‡(
°©us
 < 0) {

135 
	`log_îr‹
("¸óã sockë∑ú†Áûed: %s", 
	`°ªº‹
(
î∫o
));

136  
VR_ERROR
;

139 
°©us
 = 
	`vr_£t_n⁄blockög
(
w‹kî
->
sockë∑ús
[0]);

140 i‡(
°©us
 < 0) {

141 
	`log_îr‹
("set socketpairs[0] %dÇonblocking failed: %s",

142 
w‹kî
->
sockë∑ús
[0], 
	`°ªº‹
(
î∫o
));

143 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

144 
w‹kî
->
sockë∑ús
[0] = -1;

145 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

146 
w‹kî
->
sockë∑ús
[1] = -1;

147  
VR_ERROR
;

149 
°©us
 = 
	`vr_£t_n⁄blockög
(
w‹kî
->
sockë∑ús
[1]);

150 i‡(
°©us
 < 0) {

151 
	`log_îr‹
("set socketpairs[1] %dÇonblocking failed: %s",

152 
w‹kî
->
sockë∑ús
[1], 
	`°ªº‹
(
î∫o
));

153 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

154 
w‹kî
->
sockë∑ús
[0] = -1;

155 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

156 
w‹kî
->
sockë∑ús
[1] = -1;

157  
VR_ERROR
;

160 
w‹kî
->
csul
 = 
	`dli°Cª©e
();

161 i‡(
w‹kî
->
csul
 =
NULL
) {

162 
	`log_îr‹
("createÜist failed: out of memory");

163  
VR_ENOMEM
;

166  
VR_OK
;

167 
	}
}

171 
	$vr_w‹kî_deöô
(
vr_w‹kî
 *
w‹kî
)

173 i‡(
w‹kî
 =
NULL
) {

177 
	`vr_evíéo›_deöô
(&
w‹kî
->
vñ
);

179 i‡(
w‹kî
->
sockë∑ús
[0] > 0){

180 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

181 
w‹kî
->
sockë∑ús
[0] = -1;

183 i‡(
w‹kî
->
sockë∑ús
[1] > 0){

184 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

185 
w‹kî
->
sockë∑ús
[1] = -1;

188 i‡(
w‹kî
->
csul
 !
NULL
) {

189 
	`dli°Rñó£
(
w‹kî
->
csul
);

190 
w‹kî
->
csul
 = 
NULL
;

192 
	}
}

196 
	$w‹kî_gë_√xt_idx
(
curidx
)

198 
idx
 = 
curidx
 + 1;

199  
idx
>=
num_w‹kî_thªads
?0:idx;

200 
	}
}

204 
	$di•©ch_c⁄n_√w
(
vr_li°í
 *
vli°í
, 
sd
)

206 
c⁄nsw≠unô
 *
su
 = 
	`csui_√w
();

207 
buf
[1];

208 
vr_w‹kî
 *
w‹kî
;

210 i‡(
su
 =
NULL
) {

211 
	`˛o£
(
sd
);

213 
	`log_îr‹
("FailedÅoállocate memory for connection swap object\n");

218 
tid
 = (
œ°_w‹kî_thªad
 + 1Ë% 
num_w‹kî_thªads
;

219 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
tid
);

222 
œ°_w‹kî_thªad
 = 
tid
;

225 
su
->
num
 = 
sd
;

226 
su
->
d©a
 = 
vli°í
;

229 
	`csul_push
(
w‹kî
, 
su
);

232 
buf
[0] = 'c';

233 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[0], 
buf
, 1) != 1) {

234 
	`log_îr‹
("NoticeÅhe worker failed.");

237 
	`upd©e_cuº_˛õ¡s_add
(1);

238 
	}
}

242 
	$thªad_evít_¥o˚ss
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

244 
r°©us_t
 
°©us
;

246 
vr_w‹kî
 *
w‹kî
 = 
¥ivd©a
;

247 
buf
[1];

248 
sd
;

250 
vr_li°í
 *
vli°í
;

251 
c⁄n
 *conn;

252 
c⁄nsw≠unô
 *
csu
;

253 
˛õ¡
 *
c
;

255 
	`ASSERT
(
ñ
 =
w‹kî
->
vñ
.el);

256 
	`ASSERT
(
fd
 =
w‹kî
->
sockë∑ús
[1]);

258 i‡(
	`vr_ªad
(
fd
, 
buf
, 1) != 1) {

259 
	`log_w¨n
("Can'tÑead for worker(id:%d) socketpairs[1](%d)",

260 
w‹kî
->
vñ
.
thªad
.
id
, 
fd
);

261 
buf
[0] = 'c';

264 
buf
[0]) {

268 
csu
 = 
	`csul_p›
(
w‹kî
);

269 i‡(
csu
 =
NULL
) {

273 
sd
 = 
csu
->
num
;

275 
vli°í
 = 
csu
->
d©a
;

277 
	`csui_‰ì
(
csu
);

278 
c⁄n
 = 
	`c⁄n_gë
(
w‹kî
->
vñ
.
cb
);

279 i‡(
c⁄n
 =
NULL
) {

280 
	`log_îr‹
("get conn for c %d failed: %s",

281 
sd
, 
	`°ªº‹
(
î∫o
));

282 
°©us
 = 
	`˛o£
(
sd
);

283 i‡(
°©us
 < 0) {

284 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

288 
c⁄n
->
sd
 = sd;

290 
°©us
 = 
	`vr_£t_n⁄blockög
(
c⁄n
->
sd
);

291 i‡(
°©us
 < 0) {

292 
	`log_îr‹
("setÇonblock on c %d failed: %s",

293 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

294 
	`c⁄n_put
(
c⁄n
);

298 i‡(
vli°í
->
öfo
.
Ámûy
 =
AF_INET
 || vli°í->öfo.Ámûy =
AF_INET6
) {

299 
°©us
 = 
	`vr_£t_t˝nodñay
(
c⁄n
->
sd
);

300 i‡(
°©us
 < 0) {

301 
	`log_w¨n
("setÅcpnodelay on c %d failed, ignored: %s",

302 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

306 
c
 = 
	`¸óãClõ¡
(&
w‹kî
->
vñ
, 
c⁄n
);

307 i‡(
c
 =
NULL
) {

308 
	`log_îr‹
("Create client failed");

309 
	`c⁄n_put
(
c⁄n
);

313 
c
->
curidx
 = 
w‹kî
->
id
;

315 
°©us
 = 
	`´Cª©eFûeEvít
(
w‹kî
->
vñ
.
ñ
, 
c⁄n
->
sd
, 
AE_READABLE
,

316 
ªadQuîyFromClõ¡
, 
c
);

317 i‡(
°©us
 =
AE_ERR
) {

318 
	`log_îr‹
("UnrecoverableÉrror creating worker ipfd fileÉvent.");

322 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
numc⁄√˘i⁄s
, 1);

328 
csu
 = 
	`csul_p›
(
w‹kî
);

329 i‡(
csu
 =
NULL
) {

333 
c
 = 
csu
->
d©a
;

335 
	`csui_‰ì
(
csu
);

336 
c
->
vñ
 = &
w‹kî
->vel;

337 
c
->
curidx
 = 
w‹kî
->
id
;

338 
c
->
°ïs
 ++;

339 
c
->
cmd
->
	`¥oc
(c);

341 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

342 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

344 
	`ª£tClõ¡
(
c
);

345 
	`lökClõ¡ToEvíéo›
(
c
,c->
vñ
);

349 
	`log_îr‹
("readÉrror char '%c' for worker(id:%d) socketpairs[1](%d)",

350 
buf
[0], 
w‹kî
->
vñ
.
thªad
.
id
, w‹kî->
sockë∑ús
[1]);

353 
	}
}

356 
	$£tup_w‹kî
(
vr_w‹kî
 *
w‹kî
)

358 
r°©us_t
 
°©us
;

360 
°©us
 = 
	`´Cª©eFûeEvít
(
w‹kî
->
vñ
.
ñ
, w‹kî->
sockë∑ús
[1], 
AE_READABLE
,

361 
thªad_evít_¥o˚ss
, 
w‹kî
);

362 i‡(
°©us
 =
AE_ERR
) {

363 
	`log_îr‹
("UnrecoverableÉrror creating worker ipfd fileÉvent.");

364  
VR_ERROR
;

367 
	`´SëBef‹eSÀïProc
(
w‹kî
->
vñ
.
ñ
, 
w‹kî_bef‹e_¶ìp
, worker);

372 if(
	`´Cª©eTimeEvít
(
w‹kî
->
vñ
.
ñ
, 1, 
w‹kî_¸⁄
, w‹kî, 
NULL
Ë=
AE_ERR
) {

373 
	`£rvîP™ic
("Can't createÅhe serverCronÅimeÉvent.");

374  
VR_ERROR
;

377  
VR_OK
;

378 
	}
}

381 
	$w‹kî_thªad_run
(*
¨gs
)

383 
vr_w‹kî
 *
w‹kî
 = 
¨gs
;

386 
	`´Maö
(
w‹kî
->
vñ
.
ñ
);

388  
NULL
;

389 
	}
}

392 
	$w‹kîs_öô
(
uöt32_t
 
w‹kî_cou¡
)

394 
r°©us_t
 
°©us
;

395 
uöt32_t
 
idx
;

396 
vr_w‹kî
 *
w‹kî
;

398 
csui_‰ìli°
 = 
NULL
;

399 
	`±hªad_muãx_öô
(&
csui_‰ìli°_lock
, 
NULL
);

401 
	`d¨øy_öô
(&
w‹kîs
, 
w‹kî_cou¡
, (
vr_w‹kî
));

403 
idx
 = 0; idx < 
w‹kî_cou¡
; idx ++) {

404 
w‹kî
 = 
	`d¨øy_push
(&
w‹kîs
);

405 
	`vr_w‹kî_öô
(
w‹kî
);

406 
w‹kî
->
id
 = 
idx
;

407 
°©us
 = 
	`£tup_w‹kî
(
w‹kî
);

408 i‡(
°©us
 !
VR_OK
) {

409 
	`exô
(1);

413 
num_w‹kî_thªads
 = ()
	`d¨øy_n
(&
w‹kîs
);

415  
VR_OK
;

416 
	}
}

419 
	$w‹kîs_run
()

421 
uöt32_t
 
i
, 
thªad_cou¡
;

422 
vr_w‹kî
 *
w‹kî
;

424 
thªad_cou¡
 = (
uöt32_t
)
num_w‹kî_thªads
;

426 
i
 = 0; i < 
thªad_cou¡
; i ++) {

427 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
i
);

428 
	`vr_thªad_°¨t
(&
w‹kî
->
vñ
.
thªad
);

431  
VR_OK
;

432 
	}
}

435 
	$w‹kîs_waô
()

437 
uöt32_t
 
i
, 
thªad_cou¡
;

438 
vr_w‹kî
 *
w‹kî
;

440 
thªad_cou¡
 = (
uöt32_t
)
num_w‹kî_thªads
;

442 
i
 = 0; i < 
thªad_cou¡
; i ++) {

443 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
i
);

444 
	`±hªad_joö
(
w‹kî
->
vñ
.
thªad
.
thªad_id
, 
NULL
);

447  
VR_OK
;

448 
	}
}

451 
	$w‹kîs_deöô
()

453 
vr_w‹kî
 *
w‹kî
;

455 
	`d¨øy_n
(&
w‹kîs
)) {

456 
w‹kî
 = 
	`d¨øy_p›
(&
w‹kîs
);

457 
	`vr_w‹kî_deöô
(
w‹kî
);

459 
	}
}

466 
	$w‹kî_bef‹e_¶ìp
(
´EvítLo›
 *
evítLo›
, *
¥iv©e_d©a
) {

467 
vr_w‹kî
 *
w‹kî
 = 
¥iv©e_d©a
;

469 
	`UNUSED
(
evítLo›
);

470 
	`UNUSED
(
¥iv©e_d©a
);

472 
	`ASSERT
(
evítLo›
 =
w‹kî
->
vñ
.
ñ
);

475 
	`h™dÀClõ¡sWôhPídögWrôes
(&
w‹kî
->
vñ
);

478 
	}
}

481 
	$w‹kî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

482 
vr_w‹kî
 *
w‹kî
 = 
˛õ¡D©a
;

483 
vr_evíéo›
 *
vñ
 = &
w‹kî
->vel;

484 
size_t
 
°©_u£d_mem‹y
, 
°©s_≥ak_mem‹y
;

486 
	`UNUSED
(
evítLo›
);

487 
	`UNUSED
(
id
);

488 
	`UNUSED
(
˛õ¡D©a
);

490 
	`ASSERT
(
evítLo›
 =
vñ
->
ñ
);

492 
vñ
->
unixtime
 = 
	`time
(
NULL
);

493 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

495 
	`run_wôh_≥riod
(100, 
vñ
->
¸⁄lo›s
) {

496 
°©s_vÆue
;

497 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
numcomm™ds
,&
°©s_vÆue
);

498 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_COMMAND
,
°©s_vÆue
);

499 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
√t_öput_byãs
,&
°©s_vÆue
);

500 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_NET_INPUT
,
°©s_vÆue
);

501 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
√t_ouçut_byãs
,&
°©s_vÆue
);

502 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_NET_OUTPUT
,
°©s_vÆue
);

506 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

507 
vñ
->
ªsidít_£t_size
 = 
	`dÆloc_gë_rss
();

518 
	`‰ìClõ¡sInAsyncFªeQueue
(
vñ
);

523 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

524 
	`c⁄f_ˇche_upd©e
(&
vñ
->
cc
);

527 
vñ
->
¸⁄lo›s
 ++;

528  1000/
vñ
->
hz
;

529 
	}
}

	@src/vr_worker.h

1 #i‚de‡
_VR_WORKER_H_


2 
	#_VR_WORKER_H_


	)

4 
	svr_w‹kî
 {

6 
	mid
;

8 
vr_evíéo›
 
	mvñ
;

10 
	msockë∑ús
[2];

12 
dli°
 *
	mcsul
;

13 
±hªad_muãx_t
 
	mcsuŒock
;

18 
	mcuºít_db
;

20 
	mtimñimô_exô
;

22 
	mœ°_Á°_cy˛e
;

28 
	mªsize_db
;

29 
	mªhash_db
;

30 }
	tvr_w‹kî
;

33 
	sc⁄nsw≠unô
 {

35 
	mnum
;

36 *
	md©a
;

37 
c⁄nsw≠unô
 *
	m√xt
;

41 
d¨øy
 
w‹kîs
;

45 
w‹kîs_öô
(
uöt32_t
 
w‹kî_cou¡
);

47 
w‹kîs_run
();

49 
w‹kîs_waô
();

51 
w‹kîs_deöô
();

54 
c⁄nsw≠unô
 *
csui_√w
();

56 
csui_‰ì
(
c⁄nsw≠unô
 *
ôem
);

58 
csul_push
(
vr_w‹kî
 *
w‹kî
, 
c⁄nsw≠unô
 *
su
);

60 
c⁄nsw≠unô
 *
csul_p›
(
vr_w‹kî
 *
w‹kî
);

63 
w‹kî_gë_√xt_idx
(
curidx
);

65 
di•©ch_c⁄n_√w
(
vr_li°í
 *
vli°í
, 
sd
);

67 
w‹kî_bef‹e_¶ìp
(
´EvítLo›
 *
evítLo›
, *
¥iv©e_d©a
);

69 
w‹kî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
);

	@src/vr_worker.h

1 #i‚de‡
_VR_WORKER_H_


2 
	#_VR_WORKER_H_


	)

4 
	svr_w‹kî
 {

6 
	mid
;

8 
vr_evíéo›
 
	mvñ
;

10 
	msockë∑ús
[2];

12 
dli°
 *
	mcsul
;

13 
±hªad_muãx_t
 
	mcsuŒock
;

18 
	mcuºít_db
;

20 
	mtimñimô_exô
;

22 
	mœ°_Á°_cy˛e
;

28 
	mªsize_db
;

29 
	mªhash_db
;

30 }
	tvr_w‹kî
;

33 
	sc⁄nsw≠unô
 {

35 
	mnum
;

36 *
	md©a
;

37 
c⁄nsw≠unô
 *
	m√xt
;

41 
d¨øy
 
w‹kîs
;

45 
w‹kîs_öô
(
uöt32_t
 
w‹kî_cou¡
);

47 
w‹kîs_run
();

49 
w‹kîs_waô
();

51 
w‹kîs_deöô
();

54 
c⁄nsw≠unô
 *
csui_√w
();

56 
csui_‰ì
(
c⁄nsw≠unô
 *
ôem
);

58 
csul_push
(
vr_w‹kî
 *
w‹kî
, 
c⁄nsw≠unô
 *
su
);

60 
c⁄nsw≠unô
 *
csul_p›
(
vr_w‹kî
 *
w‹kî
);

63 
w‹kî_gë_√xt_idx
(
curidx
);

65 
di•©ch_c⁄n_√w
(
vr_li°í
 *
vli°í
, 
sd
);

67 
w‹kî_bef‹e_¶ìp
(
´EvítLo›
 *
evítLo›
, *
¥iv©e_d©a
);

69 
w‹kî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
);

	@src/vr_ziplist.c

104 
	~<°dio.h
>

105 
	~<°dlib.h
>

106 
	~<°rög.h
>

107 
	~<°döt.h
>

108 
	~<limôs.h
>

110 
	~<vr_c‹e.h
>

112 
	#ZIP_END
 255

	)

113 
	#ZIP_BIGLEN
 254

	)

116 
	#ZIP_STR_MASK
 0xc0

	)

117 
	#ZIP_INT_MASK
 0x30

	)

118 
	#ZIP_STR_06B
 (0 << 6)

	)

119 
	#ZIP_STR_14B
 (1 << 6)

	)

120 
	#ZIP_STR_32B
 (2 << 6)

	)

121 
	#ZIP_INT_16B
 (0xc0 | 0<<4)

	)

122 
	#ZIP_INT_32B
 (0xc0 | 1<<4)

	)

123 
	#ZIP_INT_64B
 (0xc0 | 2<<4)

	)

124 
	#ZIP_INT_24B
 (0xc0 | 3<<4)

	)

125 
	#ZIP_INT_8B
 0x„

	)

127 
	#ZIP_INT_IMM_MASK
 0x0f

	)

128 
	#ZIP_INT_IMM_MIN
 0xf1

	)

129 
	#ZIP_INT_IMM_MAX
 0xfd

	)

130 
	#ZIP_INT_IMM_VAL
(
v
Ë(v & 
ZIP_INT_IMM_MASK
)

	)

132 
	#INT24_MAX
 0x7fffff

	)

133 
	#INT24_MIN
 (-
INT24_MAX
 - 1)

	)

136 
	#ZIP_IS_STR
(
íc
Ë((”ncË& 
ZIP_STR_MASK
Ë< ZIP_STR_MASK)

	)

139 
	#ZIPLIST_BYTES
(
zl
Ë(*((
uöt32_t
*)(zl)))

	)

140 
	#ZIPLIST_TAIL_OFFSET
(
zl
Ë(*((
uöt32_t
*)((zl)+(uöt32_t))))

	)

141 
	#ZIPLIST_LENGTH
(
zl
Ë(*((
uöt16_t
*)((zl)+(
uöt32_t
)*2)))

	)

142 
	#ZIPLIST_HEADER_SIZE
 ((
uöt32_t
)*2+(
uöt16_t
))

	)

143 
	#ZIPLIST_END_SIZE
 ((
uöt8_t
))

	)

144 
	#ZIPLIST_ENTRY_HEAD
(
zl
Ë((zl)+
ZIPLIST_HEADER_SIZE
)

	)

145 
	#ZIPLIST_ENTRY_TAIL
(
zl
Ë((zl)+
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(zl)))

	)

146 
	#ZIPLIST_ENTRY_END
(
zl
Ë((zl)+
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(zl))-1)

	)

150 
	#ZIPLIST_INCR_LENGTH
(
zl
,
ö¸
) { \

151 i‡(
	`ZIPLIST_LENGTH
(
zl
Ë< 
UINT16_MAX
) \

152 
	`ZIPLIST_LENGTH
(
zl
Ë
	`öåev16ifbe
(öåev16ifbe(ZIPLIST_LENGTH(zl))+
ö¸
); \

153 }

	)

155 
	szÀ¡ry
 {

156 
	m¥evøwÀnsize
, 
	m¥evøwÀn
;

157 
	mÀnsize
, 
	mÀn
;

158 
	mhódîsize
;

159 
	mícodög
;

160 *
	mp
;

161 } 
	tzÀ¡ry
;

163 
	#ZIPLIST_ENTRY_ZERO
(
zÀ
) { \

164 (
zÀ
)->
¥evøwÀnsize
 = (zÀ)->
¥evøwÀn
 = 0; \

165 (
zÀ
)->
Ànsize
 = (zÀ)->
Àn
 = (zÀ)->
hódîsize
 = 0; \

166 (
zÀ
)->
ícodög
 = 0; \

167 (
zÀ
)->
p
 = 
NULL
; \

168 }

	)

172 
	#ZIP_ENTRY_ENCODING
(
±r
, 
ícodög
) do { \

173 (
ícodög
Ë(
±r
[0]); \

174 i‡((
ícodög
Ë< 
ZIP_STR_MASK
) (encoding) &= ZIP_STR_MASK; \

175 } 0)

	)

177 
zùli°Rïr
(*
zl
);

180 
	$zùI¡Size
(
ícodög
) {

181 
ícodög
) {

182 
ZIP_INT_8B
:  1;

183 
ZIP_INT_16B
:  2;

184 
ZIP_INT_24B
:  3;

185 
ZIP_INT_32B
:  4;

186 
ZIP_INT_64B
:  8;

189 
	`ASSERT
(
NULL
);

191 
	}
}

195 
	$zùEncodeLígth
(*
p
, 
ícodög
, 
øwÀn
) {

196 
Àn
 = 1, 
buf
[5];

198 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

201 i‡(
øwÀn
 <= 0x3f) {

202 i‡(!
p
Ë 
Àn
;

203 
buf
[0] = 
ZIP_STR_06B
 | 
øwÀn
;

204 } i‡(
øwÀn
 <= 0x3fff) {

205 
Àn
 += 1;

206 i‡(!
p
Ë 
Àn
;

207 
buf
[0] = 
ZIP_STR_14B
 | ((
øwÀn
 >> 8) & 0x3f);

208 
buf
[1] = 
øwÀn
 & 0xff;

210 
Àn
 += 4;

211 i‡(!
p
Ë 
Àn
;

212 
buf
[0] = 
ZIP_STR_32B
;

213 
buf
[1] = (
øwÀn
 >> 24) & 0xff;

214 
buf
[2] = (
øwÀn
 >> 16) & 0xff;

215 
buf
[3] = (
øwÀn
 >> 8) & 0xff;

216 
buf
[4] = 
øwÀn
 & 0xff;

220 i‡(!
p
Ë 
Àn
;

221 
buf
[0] = 
ícodög
;

225 
	`mem˝y
(
p
,
buf
,
Àn
);

226  
Àn
;

227 
	}
}

233 
	#ZIP_DECODE_LENGTH
(
±r
, 
ícodög
, 
Ànsize
, 
Àn
) do { \

234 
	`ZIP_ENTRY_ENCODING
((
±r
), (
ícodög
)); \

235 i‡((
ícodög
Ë< 
ZIP_STR_MASK
) { \

236 i‡((
ícodög
Ë=
ZIP_STR_06B
) { \

237 (
Ànsize
) = 1; \

238 (
Àn
Ë(
±r
)[0] & 0x3f; \

239 } i‡((
ícodög
Ë=
ZIP_STR_14B
) { \

240 (
Ànsize
) = 2; \

241 (
Àn
Ë(((
±r
)[0] & 0x3f) << 8) | (ptr)[1]; \

242 } i‡(
ícodög
 =
ZIP_STR_32B
) { \

243 (
Ànsize
) = 5; \

244 (
Àn
Ë((
±r
)[1] << 24) | \

245 ((
±r
)[2] << 16) | \

246 ((
±r
)[3] << 8) | \

247 ((
±r
)[4]); \

249 
	`ASSERT
(
NULL
); \

252 (
Ànsize
) = 1; \

253 (
Àn
Ë
	`zùI¡Size
(
ícodög
); \

255 } 0);

	)

259 
	$zùPªvEncodeLígth
(*
p
, 
Àn
) {

260 i‡(
p
 =
NULL
) {

261  (
Àn
 < 
ZIP_BIGLEN
) ? 1 : (len)+1;

263 i‡(
Àn
 < 
ZIP_BIGLEN
) {

264 
p
[0] = 
Àn
;

267 
p
[0] = 
ZIP_BIGLEN
;

268 
	`mem˝y
(
p
+1,&
Àn
,(len));

269 
	`memªv32ifbe
(
p
+1);

270  1+(
Àn
);

273 
	}
}

277 
	$zùPªvEncodeLígthF‹˚L¨ge
(*
p
, 
Àn
) {

278 i‡(
p
 =
NULL
) ;

279 
p
[0] = 
ZIP_BIGLEN
;

280 
	`mem˝y
(
p
+1,&
Àn
,(len));

281 
	`memªv32ifbe
(
p
+1);

282 
	}
}

286 
	#ZIP_DECODE_PREVLENSIZE
(
±r
, 
¥evÀnsize
) do { \

287 i‡((
±r
)[0] < 
ZIP_BIGLEN
) { \

288 (
¥evÀnsize
) = 1; \

290 (
¥evÀnsize
) = 5; \

292 } 0);

	)

296 
	#ZIP_DECODE_PREVLEN
(
±r
, 
¥evÀnsize
, 
¥evÀn
) do { \

297 
	`ZIP_DECODE_PREVLENSIZE
(
±r
, 
¥evÀnsize
); \

298 i‡((
¥evÀnsize
) == 1) { \

299 (
¥evÀn
Ë(
±r
)[0]; \

300 } i‡((
¥evÀnsize
) == 5) { \

301 
	`ASSERT
(((
¥evÀnsize
)) == 4); \

302 
	`mem˝y
(&(
¥evÀn
), ((*)(
±r
)) + 1, 4); \

303 
	`memªv32ifbe
(&
¥evÀn
); \

305 } 0);

	)

309 
	$zùPªvLíByãDiff
(*
p
, 
Àn
) {

310 
¥evÀnsize
;

311 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

312  
	`zùPªvEncodeLígth
(
NULL
, 
Àn
Ë- 
¥evÀnsize
;

313 
	}
}

316 
	$zùRawE¡ryLígth
(*
p
) {

317 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
;

318 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

319 
	`ZIP_DECODE_LENGTH
(
p
 + 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
);

320  
¥evÀnsize
 + 
Ànsize
 + 
Àn
;

321 
	}
}

325 
	$zùTryEncodög
(*
íåy
, 
íåyÀn
, *
v
, *
ícodög
) {

326 
vÆue
;

328 i‡(
íåyÀn
 >= 32 ||Éntrylen == 0)  0;

329 i‡(
	`°rög2Œ
((*)
íåy
,
íåyÀn
,&
vÆue
)) {

332 i‡(
vÆue
 >= 0 && value <= 12) {

333 *
ícodög
 = 
ZIP_INT_IMM_MIN
+
vÆue
;

334 } i‡(
vÆue
 >
INT8_MIN
 && vÆuê<
INT8_MAX
) {

335 *
ícodög
 = 
ZIP_INT_8B
;

336 } i‡(
vÆue
 >
INT16_MIN
 && vÆuê<
INT16_MAX
) {

337 *
ícodög
 = 
ZIP_INT_16B
;

338 } i‡(
vÆue
 >
INT24_MIN
 && vÆuê<
INT24_MAX
) {

339 *
ícodög
 = 
ZIP_INT_24B
;

340 } i‡(
vÆue
 >
INT32_MIN
 && vÆuê<
INT32_MAX
) {

341 *
ícodög
 = 
ZIP_INT_32B
;

343 *
ícodög
 = 
ZIP_INT_64B
;

345 *
v
 = 
vÆue
;

349 
	}
}

352 
	$zùSaveI¡egî
(*
p
, 
öt64_t
 
vÆue
, 
ícodög
) {

353 
öt16_t
 
i16
;

354 
öt32_t
 
i32
;

355 
öt64_t
 
i64
;

356 i‡(
ícodög
 =
ZIP_INT_8B
) {

357 ((
öt8_t
*)
p
)[0] = (öt8_t)
vÆue
;

358 } i‡(
ícodög
 =
ZIP_INT_16B
) {

359 
i16
 = 
vÆue
;

360 
	`mem˝y
(
p
,&
i16
,(i16));

361 
	`memªv16ifbe
(
p
);

362 } i‡(
ícodög
 =
ZIP_INT_24B
) {

363 
i32
 = 
vÆue
<<8;

364 
	`memªv32ifbe
(&
i32
);

365 
	`mem˝y
(
p
,((
uöt8_t
*)&
i32
)+1,(i32)-(uint8_t));

366 } i‡(
ícodög
 =
ZIP_INT_32B
) {

367 
i32
 = 
vÆue
;

368 
	`mem˝y
(
p
,&
i32
,(i32));

369 
	`memªv32ifbe
(
p
);

370 } i‡(
ícodög
 =
ZIP_INT_64B
) {

371 
i64
 = 
vÆue
;

372 
	`mem˝y
(
p
,&
i64
,(i64));

373 
	`memªv64ifbe
(
p
);

374 } i‡(
ícodög
 >
ZIP_INT_IMM_MIN
 &&Éncodög <
ZIP_INT_IMM_MAX
) {

377 
	`ASSERT
(
NULL
);

379 
	}
}

382 
öt64_t
 
	$zùLﬂdI¡egî
(*
p
, 
ícodög
) {

383 
öt16_t
 
i16
;

384 
öt32_t
 
i32
;

385 
öt64_t
 
i64
, 
ªt
 = 0;

386 i‡(
ícodög
 =
ZIP_INT_8B
) {

387 
ªt
 = ((
öt8_t
*)
p
)[0];

388 } i‡(
ícodög
 =
ZIP_INT_16B
) {

389 
	`mem˝y
(&
i16
,
p
,(i16));

390 
	`memªv16ifbe
(&
i16
);

391 
ªt
 = 
i16
;

392 } i‡(
ícodög
 =
ZIP_INT_32B
) {

393 
	`mem˝y
(&
i32
,
p
,(i32));

394 
	`memªv32ifbe
(&
i32
);

395 
ªt
 = 
i32
;

396 } i‡(
ícodög
 =
ZIP_INT_24B
) {

397 
i32
 = 0;

398 
	`mem˝y
(((
uöt8_t
*)&
i32
)+1,
p
,(i32)-(uint8_t));

399 
	`memªv32ifbe
(&
i32
);

400 
ªt
 = 
i32
>>8;

401 } i‡(
ícodög
 =
ZIP_INT_64B
) {

402 
	`mem˝y
(&
i64
,
p
,(i64));

403 
	`memªv64ifbe
(&
i64
);

404 
ªt
 = 
i64
;

405 } i‡(
ícodög
 >
ZIP_INT_IMM_MIN
 &&Éncodög <
ZIP_INT_IMM_MAX
) {

406 
ªt
 = (
ícodög
 & 
ZIP_INT_IMM_MASK
)-1;

408 
	`ASSERT
(
NULL
);

410  
ªt
;

411 
	}
}

414 
	$zùE¡ry
(*
p
, 
zÀ¡ry
 *
e
) {

416 
	`ZIP_DECODE_PREVLEN
(
p
, 
e
->
¥evøwÀnsize
,É->
¥evøwÀn
);

417 
	`ZIP_DECODE_LENGTH
(
p
 + 
e
->
¥evøwÀnsize
,É->
ícodög
,É->
Ànsize
,É->
Àn
);

418 
e
->
hódîsize
 =É->
¥evøwÀnsize
 +É->
Ànsize
;

419 
e
->
p
 =Ö;

420 
	}
}

423 *
	$zùli°New
() {

424 
byãs
 = 
ZIPLIST_HEADER_SIZE
+1;

425 *
zl
 = 
	`dÆloc
(
byãs
);

426 
	`ZIPLIST_BYTES
(
zl
Ë
	`öåev32ifbe
(
byãs
);

427 
	`ZIPLIST_TAIL_OFFSET
(
zl
Ë
	`öåev32ifbe
(
ZIPLIST_HEADER_SIZE
);

428 
	`ZIPLIST_LENGTH
(
zl
) = 0;

429 
zl
[
byãs
-1] = 
ZIP_END
;

430  
zl
;

431 
	}
}

434 *
	$zùli°Resize
(*
zl
, 
Àn
) {

435 
zl
 = 
	`dªÆloc
(zl,
Àn
);

436 
	`ZIPLIST_BYTES
(
zl
Ë
	`öåev32ifbe
(
Àn
);

437 
zl
[
Àn
-1] = 
ZIP_END
;

438  
zl
;

439 
	}
}

461 *
	$__zùli°CasˇdeUpd©e
(*
zl
, *
p
) {

462 
size_t
 
cuæí
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)), 
øwÀn
, 
øwÀnsize
;

463 
size_t
 
off£t
, 
noff£t
, 
exåa
;

464 *
≈
;

465 
zÀ¡ry
 
cur
, 
√xt
;

467 
p
[0] !
ZIP_END
) {

468 
	`zùE¡ry
(
p
, &
cur
);

469 
øwÀn
 = 
cur
.
hódîsize
 + cur.
Àn
;

470 
øwÀnsize
 = 
	`zùPªvEncodeLígth
(
NULL
,
øwÀn
);

473 i‡(
p
[
øwÀn
] =
ZIP_END
) ;

474 
	`zùE¡ry
(
p
+
øwÀn
, &
√xt
);

477 i‡(
√xt
.
¥evøwÀn
 =
øwÀn
) ;

479 i‡(
√xt
.
¥evøwÀnsize
 < 
øwÀnsize
) {

482 
off£t
 = 
p
-
zl
;

483 
exåa
 = 
øwÀnsize
-
√xt
.
¥evøwÀnsize
;

484 
zl
 = 
	`zùli°Resize
(zl,
cuæí
+
exåa
);

485 
p
 = 
zl
+
off£t
;

488 
≈
 = 
p
+
øwÀn
;

489 
noff£t
 = 
≈
-
zl
;

492 i‡((
zl
+
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(zl))Ë!
≈
) {

493 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

494 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
exåa
);

498 
	`memmove
(
≈
+
øwÀnsize
,

499 
≈
+
√xt
.
¥evøwÀnsize
,

500 
cuæí
-
noff£t
-
√xt
.
¥evøwÀnsize
-1);

501 
	`zùPªvEncodeLígth
(
≈
,
øwÀn
);

504 
p
 +
øwÀn
;

505 
cuæí
 +
exåa
;

507 i‡(
√xt
.
¥evøwÀnsize
 > 
øwÀnsize
) {

510 
	`zùPªvEncodeLígthF‹˚L¨ge
(
p
+
øwÀn
,rawlen);

512 
	`zùPªvEncodeLígth
(
p
+
øwÀn
,rawlen);

519  
zl
;

520 
	}
}

523 *
	$__zùli°Dñëe
(*
zl
, *
p
, 
num
) {

524 
i
, 
tŸÀn
, 
dñëed
 = 0;

525 
size_t
 
off£t
;

526 
√xtdiff
 = 0;

527 
zÀ¡ry
 
fú°
, 
èû
;

529 
	`zùE¡ry
(
p
, &
fú°
);

530 
i
 = 0; 
p
[0] !
ZIP_END
 && i < 
num
; i++) {

531 
p
 +
	`zùRawE¡ryLígth
(p);

532 
dñëed
++;

535 
tŸÀn
 = 
p
-
fú°
.p;

536 i‡(
tŸÀn
 > 0) {

537 i‡(
p
[0] !
ZIP_END
) {

542 
√xtdiff
 = 
	`zùPªvLíByãDiff
(
p
,
fú°
.
¥evøwÀn
);

543 
p
 -
√xtdiff
;

544 
	`zùPªvEncodeLígth
(
p
,
fú°
.
¥evøwÀn
);

547 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

548 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))-
tŸÀn
);

553 
	`zùE¡ry
(
p
, &
èû
);

554 i‡(
p
[
èû
.
hódîsize
+èû.
Àn
] !
ZIP_END
) {

555 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

556 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
√xtdiff
);

560 
	`memmove
(
fú°
.
p
,p,

561 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
))-(
p
-zl)-1);

564 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

565 
	`öåev32ifbe
((
fú°
.
p
-
zl
)-fú°.
¥evøwÀn
);

569 
off£t
 = 
fú°
.
p
-
zl
;

570 
zl
 = 
	`zùli°Resize
(zl, 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(zl))-
tŸÀn
+
√xtdiff
);

571 
	`ZIPLIST_INCR_LENGTH
(
zl
,-
dñëed
);

572 
p
 = 
zl
+
off£t
;

576 i‡(
√xtdiff
 != 0)

577 
zl
 = 
	`__zùli°CasˇdeUpd©e
(zl,
p
);

579  
zl
;

580 
	}
}

583 *
	$__zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
) {

584 
size_t
 
cuæí
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)), 
ªqÀn
;

585 
¥evÀnsize
, 
¥evÀn
 = 0;

586 
size_t
 
off£t
;

587 
√xtdiff
 = 0;

588 
ícodög
 = 0;

589 
vÆue
 = 123456789;

592 
zÀ¡ry
 
èû
;

595 i‡(
p
[0] !
ZIP_END
) {

596 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

598 *
±aû
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

599 i‡(
±aû
[0] !
ZIP_END
) {

600 
¥evÀn
 = 
	`zùRawE¡ryLígth
(
±aû
);

605 i‡(
	`zùTryEncodög
(
s
,
¶í
,&
vÆue
,&
ícodög
)) {

607 
ªqÀn
 = 
	`zùI¡Size
(
ícodög
);

611 
ªqÀn
 = 
¶í
;

615 
ªqÀn
 +
	`zùPªvEncodeLígth
(
NULL
,
¥evÀn
);

616 
ªqÀn
 +
	`zùEncodeLígth
(
NULL
,
ícodög
,
¶í
);

621 
√xtdiff
 = (
p
[0] !
ZIP_END
Ë? 
	`zùPªvLíByãDiff
’,
ªqÀn
) : 0;

624 
off£t
 = 
p
-
zl
;

625 
zl
 = 
	`zùli°Resize
(zl,
cuæí
+
ªqÀn
+
√xtdiff
);

626 
p
 = 
zl
+
off£t
;

629 i‡(
p
[0] !
ZIP_END
) {

631 
	`memmove
(
p
+
ªqÀn
,p-
√xtdiff
,
cuæí
-
off£t
-1+nextdiff);

634 
	`zùPªvEncodeLígth
(
p
+
ªqÀn
,reqlen);

637 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

638 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
ªqÀn
);

643 
	`zùE¡ry
(
p
+
ªqÀn
, &
èû
);

644 i‡(
p
[
ªqÀn
+
èû
.
hódîsize
+èû.
Àn
] !
ZIP_END
) {

645 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

646 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
√xtdiff
);

650 
	`ZIPLIST_TAIL_OFFSET
(
zl
Ë
	`öåev32ifbe
(
p
-zl);

655 i‡(
√xtdiff
 != 0) {

656 
off£t
 = 
p
-
zl
;

657 
zl
 = 
	`__zùli°CasˇdeUpd©e
(zl,
p
+
ªqÀn
);

658 
p
 = 
zl
+
off£t
;

662 
p
 +
	`zùPªvEncodeLígth
’,
¥evÀn
);

663 
p
 +
	`zùEncodeLígth
’,
ícodög
,
¶í
);

664 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

665 
	`mem˝y
(
p
,
s
,
¶í
);

667 
	`zùSaveI¡egî
(
p
,
vÆue
,
ícodög
);

669 
	`ZIPLIST_INCR_LENGTH
(
zl
,1);

670  
zl
;

671 
	}
}

688 *
	$zùli°Mîge
(**
fú°
, **
£c⁄d
) {

690 i‡(
fú°
 =
NULL
 || *fú° =NULL || 
£c⁄d
 == NULL || *second == NULL)

691  
NULL
;

694 i‡(*
fú°
 =*
£c⁄d
)

695  
NULL
;

697 
size_t
 
fú°_byãs
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(*
fú°
));

698 
size_t
 
fú°_Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(*
fú°
));

700 
size_t
 
£c⁄d_byãs
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(*
£c⁄d
));

701 
size_t
 
£c⁄d_Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(*
£c⁄d
));

703 
≠≥nd
;

704 *
sour˚
, *
èrgë
;

705 
size_t
 
èrgë_byãs
, 
sour˚_byãs
;

709 i‡(
fú°_Àn
 >
£c⁄d_Àn
) {

711 
èrgë
 = *
fú°
;

712 
èrgë_byãs
 = 
fú°_byãs
;

713 
sour˚
 = *
£c⁄d
;

714 
sour˚_byãs
 = 
£c⁄d_byãs
;

715 
≠≥nd
 = 1;

718 
èrgë
 = *
£c⁄d
;

719 
èrgë_byãs
 = 
£c⁄d_byãs
;

720 
sour˚
 = *
fú°
;

721 
sour˚_byãs
 = 
fú°_byãs
;

722 
≠≥nd
 = 0;

726 
size_t
 
zlbyãs
 = 
fú°_byãs
 + 
£c⁄d_byãs
 -

727 
ZIPLIST_HEADER_SIZE
 - 
ZIPLIST_END_SIZE
;

728 
size_t
 
zŒígth
 = 
fú°_Àn
 + 
£c⁄d_Àn
;

731 
zŒígth
 = zŒígth < 
UINT16_MAX
 ? zllength : UINT16_MAX;

734 
size_t
 
fú°_off£t
 = 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(*
fú°
));

735 
size_t
 
£c⁄d_off£t
 = 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(*
£c⁄d
));

738 
èrgë
 = 
	`dªÆloc
—¨gë, 
zlbyãs
);

739 i‡(
≠≥nd
) {

743 
	`mem˝y
(
èrgë
 + 
èrgë_byãs
 - 
ZIPLIST_END_SIZE
,

744 
sour˚
 + 
ZIPLIST_HEADER_SIZE
,

745 
sour˚_byãs
 - 
ZIPLIST_HEADER_SIZE
);

751 
	`memmove
(
èrgë
 + 
sour˚_byãs
 - 
ZIPLIST_END_SIZE
,

752 
èrgë
 + 
ZIPLIST_HEADER_SIZE
,

753 
èrgë_byãs
 - 
ZIPLIST_HEADER_SIZE
);

754 
	`mem˝y
(
èrgë
, 
sour˚
, 
sour˚_byãs
 - 
ZIPLIST_END_SIZE
);

758 
	`ZIPLIST_BYTES
(
èrgë
Ë
	`öåev32ifbe
(
zlbyãs
);

759 
	`ZIPLIST_LENGTH
(
èrgë
Ë
	`öåev16ifbe
(
zŒígth
);

765 
	`ZIPLIST_TAIL_OFFSET
(
èrgë
Ë
	`öåev32ifbe
(

766 (
fú°_byãs
 - 
ZIPLIST_END_SIZE
) +

767 (
£c⁄d_off£t
 - 
ZIPLIST_HEADER_SIZE
));

773 
èrgë
 = 
	`__zùli°CasˇdeUpd©e
—¨gë,Å¨gë+
fú°_off£t
);

776 i‡(
≠≥nd
) {

777 
	`d‰ì
(*
£c⁄d
);

778 *
£c⁄d
 = 
NULL
;

779 *
fú°
 = 
èrgë
;

781 
	`d‰ì
(*
fú°
);

782 *
fú°
 = 
NULL
;

783 *
£c⁄d
 = 
èrgë
;

785  
èrgë
;

786 
	}
}

788 *
	$zùli°Push
(*
zl
, *
s
, 
¶í
, 
whîe
) {

789 *
p
;

790 
p
 = (
whîe
 =
ZIPLIST_HEAD
Ë? 
	`ZIPLIST_ENTRY_HEAD
(
zl
Ë: 
	`ZIPLIST_ENTRY_END
(zl);

791  
	`__zùli°In£π
(
zl
,
p
,
s
,
¶í
);

792 
	}
}

797 *
	$zùli°Index
(*
zl
, 
ödex
) {

798 *
p
;

799 
¥evÀnsize
, 
¥evÀn
 = 0;

800 i‡(
ödex
 < 0) {

801 
ödex
 = (-index)-1;

802 
p
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

803 i‡(
p
[0] !
ZIP_END
) {

804 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

805 
¥evÀn
 > 0 && 
ödex
--) {

806 
p
 -
¥evÀn
;

807 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

811 
p
 = 
	`ZIPLIST_ENTRY_HEAD
(
zl
);

812 
p
[0] !
ZIP_END
 && 
ödex
--) {

813 
p
 +
	`zùRawE¡ryLígth
(p);

816  (
p
[0] =
ZIP_END
 || 
ödex
 > 0Ë? 
NULL
 :Ö;

817 
	}
}

825 *
	$zùli°Next
(*
zl
, *
p
) {

826 ((Ë
zl
);

831 i‡(
p
[0] =
ZIP_END
) {

832  
NULL
;

835 
p
 +
	`zùRawE¡ryLígth
(p);

836 i‡(
p
[0] =
ZIP_END
) {

837  
NULL
;

840  
p
;

841 
	}
}

844 *
	$zùli°Pªv
(*
zl
, *
p
) {

845 
¥evÀnsize
, 
¥evÀn
 = 0;

850 i‡(
p
[0] =
ZIP_END
) {

851 
p
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

852  (
p
[0] =
ZIP_END
Ë? 
NULL
 :Ö;

853 } i‡(
p
 =
	`ZIPLIST_ENTRY_HEAD
(
zl
)) {

854  
NULL
;

856 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

857 
	`ASSERT
(
¥evÀn
 > 0);

858  
p
-
¥evÀn
;

860 
	}
}

866 
	$zùli°Gë
(*
p
, **
s°r
, *
¶í
, *
svÆ
) {

867 
zÀ¡ry
 
íåy
;

868 i‡(
p
 =
NULL
 ||Ö[0] =
ZIP_END
)  0;

869 i‡(
s°r
Ë*s°∏
NULL
;

871 
	`zùE¡ry
(
p
, &
íåy
);

872 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

873 i‡(
s°r
) {

874 *
¶í
 = 
íåy
.
Àn
;

875 *
s°r
 = 
p
+
íåy
.
hódîsize
;

878 i‡(
svÆ
) {

879 *
svÆ
 = 
	`zùLﬂdI¡egî
(
p
+
íåy
.
hódîsize
,íåy.
ícodög
);

883 
	}
}

886 *
	$zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
) {

887  
	`__zùli°In£π
(
zl
,
p
,
s
,
¶í
);

888 
	}
}

893 *
	$zùli°Dñëe
(*
zl
, **
p
) {

894 
size_t
 
off£t
 = *
p
-
zl
;

895 
zl
 = 
	`__zùli°Dñëe
(zl,*
p
,1);

901 *
p
 = 
zl
+
off£t
;

902  
zl
;

903 
	}
}

906 *
	$zùli°DñëeR™ge
(*
zl
, 
ödex
, 
num
) {

907 *
p
 = 
	`zùli°Index
(
zl
,
ödex
);

908  (
p
 =
NULL
Ë? 
zl
 : 
	`__zùli°Dñëe
(zl,p,
num
);

909 
	}
}

913 
	$zùli°Com∑ª
(*
p
, *
s°r
, 
¶í
) {

914 
zÀ¡ry
 
íåy
;

915 
£ncodög
;

916 
zvÆ
, 
svÆ
;

917 i‡(
p
[0] =
ZIP_END
)  0;

919 
	`zùE¡ry
(
p
, &
íåy
);

920 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

922 i‡(
íåy
.
Àn
 =
¶í
) {

923  
	`memcmp
(
p
+
íåy
.
hódîsize
,
s°r
,
¶í
) == 0;

930 i‡(
	`zùTryEncodög
(
s°r
,
¶í
,&
svÆ
,&
£ncodög
)) {

931 
zvÆ
 = 
	`zùLﬂdI¡egî
(
p
+
íåy
.
hódîsize
,íåy.
ícodög
);

932  
zvÆ
 =
svÆ
;

936 
	}
}

940 *
	$zùli°Föd
(*
p
, *
v°r
, 
vÀn
, 
skù
) {

941 
skù˙t
 = 0;

942 
vícodög
 = 0;

943 
vŒ
 = 0;

945 
p
[0] !
ZIP_END
) {

946 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
;

947 *
q
;

949 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

950 
	`ZIP_DECODE_LENGTH
(
p
 + 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
);

951 
q
 = 
p
 + 
¥evÀnsize
 + 
Ànsize
;

953 i‡(
skù˙t
 == 0) {

955 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

956 i‡(
Àn
 =
vÀn
 && 
	`memcmp
(
q
, 
v°r
, vlen) == 0) {

957  
p
;

963 i‡(
vícodög
 == 0) {

964 i‡(!
	`zùTryEncodög
(
v°r
, 
vÀn
, &
vŒ
, &
vícodög
)) {

968 
vícodög
 = 
UCHAR_MAX
;

971 
	`ASSERT
(
vícodög
);

977 i‡(
vícodög
 !
UCHAR_MAX
) {

978 
Œ
 = 
	`zùLﬂdI¡egî
(
q
, 
ícodög
);

979 i‡(
Œ
 =
vŒ
) {

980  
p
;

986 
skù˙t
 = 
skù
;

989 
skù˙t
--;

993 
p
 = 
q
 + 
Àn
;

996  
NULL
;

997 
	}
}

1000 
	$zùli°Lí
(*
zl
) {

1001 
Àn
 = 0;

1002 i‡(
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
)Ë< 
UINT16_MAX
) {

1003 
Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
));

1005 *
p
 = 
zl
+
ZIPLIST_HEADER_SIZE
;

1006 *
p
 !
ZIP_END
) {

1007 
p
 +
	`zùRawE¡ryLígth
(p);

1008 
Àn
++;

1012 i‡(
Àn
 < 
UINT16_MAX
Ë
	`ZIPLIST_LENGTH
(
zl
Ë
	`öåev16ifbe
(len);

1014  
Àn
;

1015 
	}
}

1018 
size_t
 
	$zùli°BlobLí
(*
zl
) {

1019  
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
));

1020 
	}
}

1022 
	$zùli°Rïr
(*
zl
) {

1023 *
p
;

1024 
ödex
 = 0;

1025 
zÀ¡ry
 
íåy
;

1027 
	`¥ötf
(

1031 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)),

1032 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
)),

1033 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(
zl
)));

1034 
p
 = 
	`ZIPLIST_ENTRY_HEAD
(
zl
);

1035 *
p
 !
ZIP_END
) {

1036 
	`zùE¡ry
(
p
, &
íåy
);

1037 
	`¥ötf
(

1048 ()
p
,

1049 
ödex
,

1050 (Ë(
p
-
zl
),

1051 
íåy
.
hódîsize
+íåy.
Àn
,

1052 
íåy
.
hódîsize
,

1053 
íåy
.
¥evøwÀn
,

1054 
íåy
.
¥evøwÀnsize
,

1055 
íåy
.
Àn
);

1056 
p
 +
íåy
.
hódîsize
;

1057 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

1058 i‡(
íåy
.
Àn
 > 40) {

1059 i‡(
	`fwrôe
(
p
,40,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1060 
	`¥ötf
("...");

1062 i‡(
íåy
.
Àn
 &&

1063 
	`fwrôe
(
p
,
íåy
.
Àn
,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1066 
	`¥ötf
("%Œd", (Ë
	`zùLﬂdI¡egî
(
p
,
íåy
.
ícodög
));

1068 
	`¥ötf
("\n");

1069 
p
 +
íåy
.
Àn
;

1070 
ödex
++;

1072 
	`¥ötf
("{end}\n\n");

1073 
	}
}

1075 #ifde‡
REDIS_TEST


1076 
	~<sys/time.h
>

1077 
	~"adli°.h
"

1078 
	~"sds.h
"

1080 
	#debug
(
f
, ...Ë{ i‡(
DEBUG
Ë
	`¥ötf
(f, 
__VA_ARGS__
); }

	)

1082 *
	$¸óãLi°
() {

1083 *
zl
 = 
	`zùli°New
();

1084 
zl
 = 
	`zùli°Push
(zl, (*)"foo", 3, 
ZIPLIST_TAIL
);

1085 
zl
 = 
	`zùli°Push
(zl, (*)"quux", 4, 
ZIPLIST_TAIL
);

1086 
zl
 = 
	`zùli°Push
(zl, (*)"hñlo", 5, 
ZIPLIST_HEAD
);

1087 
zl
 = 
	`zùli°Push
(zl, (*)"1024", 4, 
ZIPLIST_TAIL
);

1088  
zl
;

1089 
	}
}

1091 *
	$¸óãI¡Li°
() {

1092 *
zl
 = 
	`zùli°New
();

1093 
buf
[32];

1095 
	`•rötf
(
buf
, "100");

1096 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1097 
	`•rötf
(
buf
, "128000");

1098 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1099 
	`•rötf
(
buf
, "-100");

1100 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_HEAD
);

1101 
	`•rötf
(
buf
, "4294967296");

1102 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_HEAD
);

1103 
	`•rötf
(
buf
, "non integer");

1104 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1105 
	`•rötf
(
buf
, "much muchÜongerÇon integer");

1106 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1107  
zl
;

1108 
	}
}

1110 
	$u£c
() {

1111 
timevÆ
 
tv
;

1112 
	`gëtimeofday
(&
tv
,
NULL
);

1113  ((()
tv
.
tv_£c
)*1000000)+tv.
tv_u£c
;

1114 
	}
}

1116 
	$°ªss
(
pos
, 
num
, 
maxsize
, 
dnum
) {

1117 
i
,
j
,
k
;

1118 *
zl
;

1119 
pos°r
[2][5] = { "HEAD", "TAIL" };

1120 
°¨t
;

1121 
i
 = 0; i < 
maxsize
; i+=
dnum
) {

1122 
zl
 = 
	`zùli°New
();

1123 
j
 = 0; j < 
i
; j++) {

1124 
zl
 = 
	`zùli°Push
(zl,(*)"quux",4,
ZIPLIST_TAIL
);

1128 
°¨t
 = 
	`u£c
();

1129 
k
 = 0; k < 
num
; k++) {

1130 
zl
 = 
	`zùli°Push
(zl,(*)"quux",4,
pos
);

1131 
zl
 = 
	`zùli°DñëeR™ge
(zl,0,1);

1133 
	`¥ötf
("List size: %8d, bytes: %8d, %dxÖush+pop (%s): %6lld usec\n",

1134 
i
,
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)),
num
,
pos°r
[
pos
],
	`u£c
()-
°¨t
);

1135 
	`d‰ì
(
zl
);

1137 
	}
}

1139 *
	$p›
(*
zl
, 
whîe
) {

1140 *
p
, *
v°r
;

1141 
vÀn
;

1142 
vl⁄g
;

1144 
p
 = 
	`zùli°Index
(
zl
,
whîe
 =
ZIPLIST_HEAD
 ? 0 : -1);

1145 i‡(
	`zùli°Gë
(
p
,&
v°r
,&
vÀn
,&
vl⁄g
)) {

1146 i‡(
whîe
 =
ZIPLIST_HEAD
)

1147 
	`¥ötf
("Pop head: ");

1149 
	`¥ötf
("PopÅail: ");

1151 i‡(
v°r
) {

1152 i‡(
vÀn
 && 
	`fwrôe
(
v°r
,vÀn,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1155 
	`¥ötf
("%Œd", 
vl⁄g
);

1158 
	`¥ötf
("\n");

1159  
	`zùli°Dñëe
(
zl
,&
p
);

1161 
	`¥ötf
("ERROR: CouldÇotÖop\n");

1162 
	`exô
(1);

1164 
	}
}

1166 
	$ønd°rög
(*
èrgë
, 
mö
, 
max
) {

1167 
p
 = 0;

1168 
Àn
 = 
mö
+
	`ønd
()%(
max
-min+1);

1169 
mövÆ
, 
maxvÆ
;

1170 
	`ønd
() % 3) {

1172 
mövÆ
 = 0;

1173 
maxvÆ
 = 255;

1176 
mövÆ
 = 48;

1177 
maxvÆ
 = 122;

1180 
mövÆ
 = 48;

1181 
maxvÆ
 = 52;

1184 
	`ASSERT
(
NULL
);

1187 
p
 < 
Àn
)

1188 
èrgë
[
p
++] = 
mövÆ
+
	`ønd
()%(
maxvÆ
-minval+1);

1189  
Àn
;

1190 
	}
}

1192 
	$vîify
(*
zl
, 
zÀ¡ry
 *
e
) {

1193 
Àn
 = 
	`zùli°Lí
(
zl
);

1194 
zÀ¡ry
 
_e
;

1196 
	`ZIPLIST_ENTRY_ZERO
(&
_e
);

1198 
i
 = 0; i < 
Àn
; i++) {

1199 
	`mem£t
(&
e
[
i
], 0, (
zÀ¡ry
));

1200 
	`zùE¡ry
(
	`zùli°Index
(
zl
, 
i
), &
e
[i]);

1202 
	`mem£t
(&
_e
, 0, (
zÀ¡ry
));

1203 
	`zùE¡ry
(
	`zùli°Index
(
zl
, -
Àn
+
i
), &
_e
);

1205 
	`ASSERT
(
	`memcmp
(&
e
[
i
], &
_e
, (
zÀ¡ry
)) == 0);

1207 
	}
}

1209 
	$zùli°Te°
(
¨gc
, **
¨gv
) {

1210 
ªt
;

1211 *
zl
, *
p
;

1212 *
íåy
;

1213 
ñí
;

1214 
vÆue
;

1217 i‡(
¨gc
 == 2)

1218 
	`§™d
(
	`©oi
(
¨gv
[1]));

1220 
zl
 = 
	`¸óãI¡Li°
();

1221 
	`zùli°Rïr
(
zl
);

1223 
	`d‰ì
(
zl
);

1225 
zl
 = 
	`¸óãLi°
();

1226 
	`zùli°Rïr
(
zl
);

1228 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1229 
	`zùli°Rïr
(
zl
);

1231 
zl
 = 
	`p›
(zl,
ZIPLIST_HEAD
);

1232 
	`zùli°Rïr
(
zl
);

1234 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1235 
	`zùli°Rïr
(
zl
);

1237 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1238 
	`zùli°Rïr
(
zl
);

1240 
	`d‰ì
(
zl
);

1242 
	`¥ötf
("GetÉlementát index 3:\n");

1244 
zl
 = 
	`¸óãLi°
();

1245 
p
 = 
	`zùli°Index
(
zl
, 3);

1246 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1247 
	`¥ötf
("ERROR: CouldÇotáccess index 3\n");

1250 i‡(
íåy
) {

1251 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1252 
	`¥ötf
("\n");

1254 
	`¥ötf
("%Œd\n", 
vÆue
);

1256 
	`¥ötf
("\n");

1257 
	`d‰ì
(
zl
);

1260 
	`¥ötf
("GetÉlementát index 4 (out ofÑange):\n");

1262 
zl
 = 
	`¸óãLi°
();

1263 
p
 = 
	`zùli°Index
(
zl
, 4);

1264 i‡(
p
 =
NULL
) {

1265 
	`¥ötf
("NoÉntry\n");

1267 
	`¥ötf
("ERROR: Ouào‡øngêödex shouldÑëu∫ NULL,Ñëu∫ed off£t: %ld\n", 
p
-
zl
);

1270 
	`¥ötf
("\n");

1271 
	`d‰ì
(
zl
);

1274 
	`¥ötf
("GetÉlementát index -1 (lastÉlement):\n");

1276 
zl
 = 
	`¸óãLi°
();

1277 
p
 = 
	`zùli°Index
(
zl
, -1);

1278 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1279 
	`¥ötf
("ERROR: CouldÇotáccess index -1\n");

1282 i‡(
íåy
) {

1283 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1284 
	`¥ötf
("\n");

1286 
	`¥ötf
("%Œd\n", 
vÆue
);

1288 
	`¥ötf
("\n");

1289 
	`d‰ì
(
zl
);

1292 
	`¥ötf
("GetÉlementát index -4 (firstÉlement):\n");

1294 
zl
 = 
	`¸óãLi°
();

1295 
p
 = 
	`zùli°Index
(
zl
, -4);

1296 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1297 
	`¥ötf
("ERROR: CouldÇotáccess index -4\n");

1300 i‡(
íåy
) {

1301 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1302 
	`¥ötf
("\n");

1304 
	`¥ötf
("%Œd\n", 
vÆue
);

1306 
	`¥ötf
("\n");

1307 
	`d‰ì
(
zl
);

1310 
	`¥ötf
("GetÉlementát index -5 (reverse out ofÑange):\n");

1312 
zl
 = 
	`¸óãLi°
();

1313 
p
 = 
	`zùli°Index
(
zl
, -5);

1314 i‡(
p
 =
NULL
) {

1315 
	`¥ötf
("NoÉntry\n");

1317 
	`¥ötf
("ERROR: Ouào‡øngêödex shouldÑëu∫ NULL,Ñëu∫ed off£t: %ld\n", 
p
-
zl
);

1320 
	`¥ötf
("\n");

1321 
	`d‰ì
(
zl
);

1324 
	`¥ötf
("IterateÜist from 0ÅoÉnd:\n");

1326 
zl
 = 
	`¸óãLi°
();

1327 
p
 = 
	`zùli°Index
(
zl
, 0);

1328 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1329 
	`¥ötf
("Entry: ");

1330 i‡(
íåy
) {

1331 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1333 
	`¥ötf
("%Œd", 
vÆue
);

1335 
p
 = 
	`zùli°Next
(
zl
,p);

1336 
	`¥ötf
("\n");

1338 
	`¥ötf
("\n");

1339 
	`d‰ì
(
zl
);

1342 
	`¥ötf
("IterateÜist from 1ÅoÉnd:\n");

1344 
zl
 = 
	`¸óãLi°
();

1345 
p
 = 
	`zùli°Index
(
zl
, 1);

1346 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1347 
	`¥ötf
("Entry: ");

1348 i‡(
íåy
) {

1349 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1351 
	`¥ötf
("%Œd", 
vÆue
);

1353 
p
 = 
	`zùli°Next
(
zl
,p);

1354 
	`¥ötf
("\n");

1356 
	`¥ötf
("\n");

1357 
	`d‰ì
(
zl
);

1360 
	`¥ötf
("IterateÜist from 2ÅoÉnd:\n");

1362 
zl
 = 
	`¸óãLi°
();

1363 
p
 = 
	`zùli°Index
(
zl
, 2);

1364 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1365 
	`¥ötf
("Entry: ");

1366 i‡(
íåy
) {

1367 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1369 
	`¥ötf
("%Œd", 
vÆue
);

1371 
p
 = 
	`zùli°Next
(
zl
,p);

1372 
	`¥ötf
("\n");

1374 
	`¥ötf
("\n");

1375 
	`d‰ì
(
zl
);

1378 
	`¥ötf
("Iterate starting out ofÑange:\n");

1380 
zl
 = 
	`¸óãLi°
();

1381 
p
 = 
	`zùli°Index
(
zl
, 4);

1382 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1383 
	`¥ötf
("NoÉntry\n");

1385 
	`¥ötf
("ERROR\n");

1387 
	`¥ötf
("\n");

1388 
	`d‰ì
(
zl
);

1391 
	`¥ötf
("Iterate from backÅo front:\n");

1393 
zl
 = 
	`¸óãLi°
();

1394 
p
 = 
	`zùli°Index
(
zl
, -1);

1395 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1396 
	`¥ötf
("Entry: ");

1397 i‡(
íåy
) {

1398 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1400 
	`¥ötf
("%Œd", 
vÆue
);

1402 
p
 = 
	`zùli°Pªv
(
zl
,p);

1403 
	`¥ötf
("\n");

1405 
	`¥ötf
("\n");

1406 
	`d‰ì
(
zl
);

1409 
	`¥ötf
("Iterate from backÅo front, deletingáll items:\n");

1411 
zl
 = 
	`¸óãLi°
();

1412 
p
 = 
	`zùli°Index
(
zl
, -1);

1413 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1414 
	`¥ötf
("Entry: ");

1415 i‡(
íåy
) {

1416 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1418 
	`¥ötf
("%Œd", 
vÆue
);

1420 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

1421 
p
 = 
	`zùli°Pªv
(
zl
,p);

1422 
	`¥ötf
("\n");

1424 
	`¥ötf
("\n");

1425 
	`d‰ì
(
zl
);

1428 
	`¥ötf
("Delete inclusiveÑange 0,0:\n");

1430 
zl
 = 
	`¸óãLi°
();

1431 
zl
 = 
	`zùli°DñëeR™ge
(zl, 0, 1);

1432 
	`zùli°Rïr
(
zl
);

1433 
	`d‰ì
(
zl
);

1436 
	`¥ötf
("Delete inclusiveÑange 0,1:\n");

1438 
zl
 = 
	`¸óãLi°
();

1439 
zl
 = 
	`zùli°DñëeR™ge
(zl, 0, 2);

1440 
	`zùli°Rïr
(
zl
);

1441 
	`d‰ì
(
zl
);

1444 
	`¥ötf
("Delete inclusiveÑange 1,2:\n");

1446 
zl
 = 
	`¸óãLi°
();

1447 
zl
 = 
	`zùli°DñëeR™ge
(zl, 1, 2);

1448 
	`zùli°Rïr
(
zl
);

1449 
	`d‰ì
(
zl
);

1452 
	`¥ötf
("Delete with start index out ofÑange:\n");

1454 
zl
 = 
	`¸óãLi°
();

1455 
zl
 = 
	`zùli°DñëeR™ge
(zl, 5, 1);

1456 
	`zùli°Rïr
(
zl
);

1457 
	`d‰ì
(
zl
);

1460 
	`¥ötf
("Delete withÇum overflow:\n");

1462 
zl
 = 
	`¸óãLi°
();

1463 
zl
 = 
	`zùli°DñëeR™ge
(zl, 1, 5);

1464 
	`zùli°Rïr
(
zl
);

1465 
	`d‰ì
(
zl
);

1468 
	`¥ötf
("Delete foo while iterating:\n");

1470 
zl
 = 
	`¸óãLi°
();

1471 
p
 = 
	`zùli°Index
(
zl
,0);

1472 
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
)) {

1473 i‡(
íåy
 && 
	`°∫cmp
("foo",(*Î¡ry,
ñí
) == 0) {

1474 
	`¥ötf
("Delete foo\n");

1475 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

1477 
	`¥ötf
("Entry: ");

1478 i‡(
íåy
) {

1479 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
) == 0)

1480 
	`≥º‹
("fwrite");

1482 
	`¥ötf
("%Œd",
vÆue
);

1484 
p
 = 
	`zùli°Next
(
zl
,p);

1485 
	`¥ötf
("\n");

1488 
	`¥ötf
("\n");

1489 
	`zùli°Rïr
(
zl
);

1490 
	`d‰ì
(
zl
);

1493 
	`¥ötf
("RegressionÅest for >255 byte strings:\n");

1495 
v1
[257] = {0}, 
v2
[257] = {0};

1496 
	`mem£t
(
v1
,'x',256);

1497 
	`mem£t
(
v2
,'y',256);

1498 
zl
 = 
	`zùli°New
();

1499 
zl
 = 
	`zùli°Push
(zl,(*)
v1
,
	`°æí
(v1),
ZIPLIST_TAIL
);

1500 
zl
 = 
	`zùli°Push
(zl,(*)
v2
,
	`°æí
(v2),
ZIPLIST_TAIL
);

1503 
p
 = 
	`zùli°Index
(
zl
,0);

1504 
ªt
 = ()
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
);

1505 
	`ASSERT
(
ªt
 > 0);

1506 
	`ASSERT
(
	`°∫cmp
(
v1
,(*)
íåy
,
ñí
) == 0);

1507 
p
 = 
	`zùli°Index
(
zl
,1);

1508 
ªt
 = ()
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
);

1509 
	`ASSERT
(
ªt
 > 0);

1510 
	`ASSERT
(
	`°∫cmp
(
v2
,(*)
íåy
,
ñí
) == 0);

1511 
	`¥ötf
("SUCCESS\n\n");

1512 
	`d‰ì
(
zl
);

1515 
	`¥ötf
("RegressionÅest deletingÇextÅoÜastÉntries:\n");

1517 
v
[3][257] = {{0}};

1518 
zÀ¡ry
 
e
[3] = {{.
¥evøwÀnsize
 = 0, .
¥evøwÀn
 = 0, .
Ànsize
 = 0,

1519 .
Àn
 = 0, .
hódîsize
 = 0, .
ícodög
 = 0, .
p
 = 
NULL
}};

1520 
size_t
 
i
;

1522 
i
 = 0; i < ((
v
)/(v[0])); i++) {

1523 
	`mem£t
(
v
[
i
], 'a' + i, (v[0]));

1526 
v
[0][256] = '\0';

1527 
v
[1][ 1] = '\0';

1528 
v
[2][256] = '\0';

1530 
zl
 = 
	`zùli°New
();

1531 
i
 = 0; i < ((
v
)/(v[0])); i++) {

1532 
zl
 = 
	`zùli°Push
(zl, (*Ë
v
[
i
], 
	`°æí
(v[i]), 
ZIPLIST_TAIL
);

1535 
	`vîify
(
zl
, 
e
);

1537 
	`ASSERT
(
e
[0].
¥evøwÀnsize
 == 1);

1538 
	`ASSERT
(
e
[1].
¥evøwÀnsize
 == 5);

1539 
	`ASSERT
(
e
[2].
¥evøwÀnsize
 == 1);

1542 *
p
 = 
e
[1].p;

1543 
zl
 = 
	`zùli°Dñëe
(zl, &
p
);

1545 
	`vîify
(
zl
, 
e
);

1547 
	`ASSERT
(
e
[0].
¥evøwÀnsize
 == 1);

1548 
	`ASSERT
(
e
[1].
¥evøwÀnsize
 == 5);

1550 
	`¥ötf
("SUCCESS\n\n");

1551 
	`d‰ì
(
zl
);

1554 
	`¥ötf
("CreateÜongÜistánd check indices:\n");

1556 
zl
 = 
	`zùli°New
();

1557 
buf
[32];

1558 
i
,
Àn
;

1559 
i
 = 0; i < 1000; i++) {

1560 
Àn
 = 
	`•rötf
(
buf
,"%d",
i
);

1561 
zl
 = 
	`zùli°Push
(zl,(*)
buf
,
Àn
,
ZIPLIST_TAIL
);

1563 
i
 = 0; i < 1000; i++) {

1564 
p
 = 
	`zùli°Index
(
zl
,
i
);

1565 
ªt
 = ()
	`zùli°Gë
(
p
,
NULL
,NULL,&
vÆue
);

1566 
	`ASSERT
(
ªt
 > 0);

1567 
	`ASSERT
(
i
 =
vÆue
);

1569 
p
 = 
	`zùli°Index
(
zl
,-
i
-1);

1570 
ªt
 = ()
	`zùli°Gë
(
p
,
NULL
,NULL,&
vÆue
);

1571 
	`ASSERT
(
ªt
 > 0);

1572 
	`ASSERT
(999-
i
 =
vÆue
);

1574 
	`¥ötf
("SUCCESS\n\n");

1575 
	`d‰ì
(
zl
);

1578 
	`¥ötf
("Compare strings with ziplistÉntries:\n");

1580 
zl
 = 
	`¸óãLi°
();

1581 
p
 = 
	`zùli°Index
(
zl
,0);

1582 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1583 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1586 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1587 
	`¥ötf
("ERROR: \"hella\"\n");

1591 
p
 = 
	`zùli°Index
(
zl
,3);

1592 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1593 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1596 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1597 
	`¥ötf
("ERROR: \"1025\"\n");

1600 
	`¥ötf
("SUCCESS\n\n");

1601 
	`d‰ì
(
zl
);

1604 
	`¥ötf
("MergeÅest:\n");

1607 
zl
 = 
	`¸óãLi°
();

1608 *
zl2
 = 
	`¸óãLi°
();

1610 *
zl3
 = 
	`zùli°New
();

1611 *
zl4
 = 
	`zùli°New
();

1613 i‡(
	`zùli°Mîge
(&
zl4
, &zl4)) {

1614 
	`¥ötf
("ERROR: Allowed merging of one ziplist into itself.\n");

1619 
zl4
 = 
	`zùli°Mîge
(&
zl3
, &zl4);

1620 
	`zùli°Rïr
(
zl4
);

1621 i‡(
	`zùli°Lí
(
zl4
)) {

1622 
	`¥ötf
("ERROR: MergingÅwoÉmpty ziplists createdÉntries.\n");

1625 
	`d‰ì
(
zl4
);

1627 
zl2
 = 
	`zùli°Mîge
(&
zl
, &zl2);

1629 
	`zùli°Rïr
(
zl2
);

1631 i‡(
	`zùli°Lí
(
zl2
) != 8) {

1632 
	`¥ötf
("ERROR: MîgedÜígthÇŸ 8, but: %u\n", 
	`zùli°Lí
(
zl2
));

1636 
p
 = 
	`zùli°Index
(
zl2
,0);

1637 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1638 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1641 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1642 
	`¥ötf
("ERROR: \"hella\"\n");

1646 
p
 = 
	`zùli°Index
(
zl2
,3);

1647 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1648 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1651 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1652 
	`¥ötf
("ERROR: \"1025\"\n");

1656 
p
 = 
	`zùli°Index
(
zl2
,4);

1657 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1658 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1661 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1662 
	`¥ötf
("ERROR: \"hella\"\n");

1666 
p
 = 
	`zùli°Index
(
zl2
,7);

1667 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1668 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1671 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1672 
	`¥ötf
("ERROR: \"1025\"\n");

1675 
	`¥ötf
("SUCCESS\n\n");

1676 
	`d‰ì
(
zl
);

1679 
	`¥ötf
("Stress withÑandomÖayloads of differentÉncoding:\n");

1681 
i
,
j
,
Àn
,
whîe
;

1682 *
p
;

1683 
buf
[1024];

1684 
buÊí
;

1685 
dli°
 *
ªf
;

1686 
dli°Node
 *
ª‚ode
;

1689 *
s°r
;

1690 
¶í
;

1691 
svÆ
;

1693 
i
 = 0; i < 20000; i++) {

1694 
zl
 = 
	`zùli°New
();

1695 
ªf
 = 
	`dli°Cª©e
();

1696 
	`dli°SëFªeMëhod
(
ªf
,((*)(*))
sds‰ì
);

1697 
Àn
 = 
	`ønd
() % 256;

1700 
j
 = 0; j < 
Àn
; j++) {

1701 
whîe
 = (
	`ønd
(Ë& 1Ë? 
ZIPLIST_HEAD
 : 
ZIPLIST_TAIL
;

1702 i‡(
	`ønd
() % 2) {

1703 
buÊí
 = 
	`ønd°rög
(
buf
,1,(buf)-1);

1705 
	`ønd
() % 3) {

1707 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()) >> 20);

1710 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()));

1713 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()) << 20);

1716 
	`ASSERT
(
NULL
);

1721 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
buÊí
, 
whîe
);

1724 i‡(
whîe
 =
ZIPLIST_HEAD
) {

1725 
	`dli°AddNodeHód
(
ªf
,
	`sd¢ewÀn
(
buf
, 
buÊí
));

1726 } i‡(
whîe
 =
ZIPLIST_TAIL
) {

1727 
	`dli°AddNodeTaû
(
ªf
,
	`sd¢ewÀn
(
buf
, 
buÊí
));

1729 
	`ASSERT
(
NULL
);

1733 
	`ASSERT
(
	`dli°Lígth
(
ªf
Ë=
	`zùli°Lí
(
zl
));

1734 
j
 = 0; j < 
Àn
; j++) {

1737 
p
 = 
	`zùli°Index
(
zl
,
j
);

1738 
ª‚ode
 = 
	`dli°Index
(
ªf
,
j
);

1740 
ªt
 = ()
	`zùli°Gë
(
p
,&
s°r
,&
¶í
,&
svÆ
);

1741 
	`ASSERT
(
ªt
 > 0);

1742 i‡(
s°r
 =
NULL
) {

1743 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",
svÆ
);

1745 
buÊí
 = 
¶í
;

1746 
	`mem˝y
(
buf
,
s°r
,
buÊí
);

1747 
buf
[
buÊí
] = '\0';

1749 
	`ASSERT
(
	`memcmp
(
buf
,
	`dli°NodeVÆue
(
ª‚ode
),
buÊí
) == 0);

1751 
	`d‰ì
(
zl
);

1752 
	`dli°Rñó£
(
ªf
);

1754 
	`¥ötf
("SUCCESS\n\n");

1757 
	`¥ötf
("Stress with variable ziplist size:\n");

1759 
	`°ªss
(
ZIPLIST_HEAD
,100000,16384,256);

1760 
	`°ªss
(
ZIPLIST_TAIL
,100000,16384,256);

1764 
	}
}

	@src/vr_ziplist.c

104 
	~<°dio.h
>

105 
	~<°dlib.h
>

106 
	~<°rög.h
>

107 
	~<°döt.h
>

108 
	~<limôs.h
>

110 
	~<vr_c‹e.h
>

112 
	#ZIP_END
 255

	)

113 
	#ZIP_BIGLEN
 254

	)

116 
	#ZIP_STR_MASK
 0xc0

	)

117 
	#ZIP_INT_MASK
 0x30

	)

118 
	#ZIP_STR_06B
 (0 << 6)

	)

119 
	#ZIP_STR_14B
 (1 << 6)

	)

120 
	#ZIP_STR_32B
 (2 << 6)

	)

121 
	#ZIP_INT_16B
 (0xc0 | 0<<4)

	)

122 
	#ZIP_INT_32B
 (0xc0 | 1<<4)

	)

123 
	#ZIP_INT_64B
 (0xc0 | 2<<4)

	)

124 
	#ZIP_INT_24B
 (0xc0 | 3<<4)

	)

125 
	#ZIP_INT_8B
 0x„

	)

127 
	#ZIP_INT_IMM_MASK
 0x0f

	)

128 
	#ZIP_INT_IMM_MIN
 0xf1

	)

129 
	#ZIP_INT_IMM_MAX
 0xfd

	)

130 
	#ZIP_INT_IMM_VAL
(
v
Ë(v & 
ZIP_INT_IMM_MASK
)

	)

132 
	#INT24_MAX
 0x7fffff

	)

133 
	#INT24_MIN
 (-
INT24_MAX
 - 1)

	)

136 
	#ZIP_IS_STR
(
íc
Ë((”ncË& 
ZIP_STR_MASK
Ë< ZIP_STR_MASK)

	)

139 
	#ZIPLIST_BYTES
(
zl
Ë(*((
uöt32_t
*)(zl)))

	)

140 
	#ZIPLIST_TAIL_OFFSET
(
zl
Ë(*((
uöt32_t
*)((zl)+(uöt32_t))))

	)

141 
	#ZIPLIST_LENGTH
(
zl
Ë(*((
uöt16_t
*)((zl)+(
uöt32_t
)*2)))

	)

142 
	#ZIPLIST_HEADER_SIZE
 ((
uöt32_t
)*2+(
uöt16_t
))

	)

143 
	#ZIPLIST_END_SIZE
 ((
uöt8_t
))

	)

144 
	#ZIPLIST_ENTRY_HEAD
(
zl
Ë((zl)+
ZIPLIST_HEADER_SIZE
)

	)

145 
	#ZIPLIST_ENTRY_TAIL
(
zl
Ë((zl)+
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(zl)))

	)

146 
	#ZIPLIST_ENTRY_END
(
zl
Ë((zl)+
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(zl))-1)

	)

150 
	#ZIPLIST_INCR_LENGTH
(
zl
,
ö¸
) { \

151 i‡(
	`ZIPLIST_LENGTH
(
zl
Ë< 
UINT16_MAX
) \

152 
	`ZIPLIST_LENGTH
(
zl
Ë
	`öåev16ifbe
(öåev16ifbe(ZIPLIST_LENGTH(zl))+
ö¸
); \

153 }

	)

155 
	szÀ¡ry
 {

156 
	m¥evøwÀnsize
, 
	m¥evøwÀn
;

157 
	mÀnsize
, 
	mÀn
;

158 
	mhódîsize
;

159 
	mícodög
;

160 *
	mp
;

161 } 
	tzÀ¡ry
;

163 
	#ZIPLIST_ENTRY_ZERO
(
zÀ
) { \

164 (
zÀ
)->
¥evøwÀnsize
 = (zÀ)->
¥evøwÀn
 = 0; \

165 (
zÀ
)->
Ànsize
 = (zÀ)->
Àn
 = (zÀ)->
hódîsize
 = 0; \

166 (
zÀ
)->
ícodög
 = 0; \

167 (
zÀ
)->
p
 = 
NULL
; \

168 }

	)

172 
	#ZIP_ENTRY_ENCODING
(
±r
, 
ícodög
) do { \

173 (
ícodög
Ë(
±r
[0]); \

174 i‡((
ícodög
Ë< 
ZIP_STR_MASK
) (encoding) &= ZIP_STR_MASK; \

175 } 0)

	)

177 
zùli°Rïr
(*
zl
);

180 
	$zùI¡Size
(
ícodög
) {

181 
ícodög
) {

182 
ZIP_INT_8B
:  1;

183 
ZIP_INT_16B
:  2;

184 
ZIP_INT_24B
:  3;

185 
ZIP_INT_32B
:  4;

186 
ZIP_INT_64B
:  8;

189 
	`ASSERT
(
NULL
);

191 
	}
}

195 
	$zùEncodeLígth
(*
p
, 
ícodög
, 
øwÀn
) {

196 
Àn
 = 1, 
buf
[5];

198 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

201 i‡(
øwÀn
 <= 0x3f) {

202 i‡(!
p
Ë 
Àn
;

203 
buf
[0] = 
ZIP_STR_06B
 | 
øwÀn
;

204 } i‡(
øwÀn
 <= 0x3fff) {

205 
Àn
 += 1;

206 i‡(!
p
Ë 
Àn
;

207 
buf
[0] = 
ZIP_STR_14B
 | ((
øwÀn
 >> 8) & 0x3f);

208 
buf
[1] = 
øwÀn
 & 0xff;

210 
Àn
 += 4;

211 i‡(!
p
Ë 
Àn
;

212 
buf
[0] = 
ZIP_STR_32B
;

213 
buf
[1] = (
øwÀn
 >> 24) & 0xff;

214 
buf
[2] = (
øwÀn
 >> 16) & 0xff;

215 
buf
[3] = (
øwÀn
 >> 8) & 0xff;

216 
buf
[4] = 
øwÀn
 & 0xff;

220 i‡(!
p
Ë 
Àn
;

221 
buf
[0] = 
ícodög
;

225 
	`mem˝y
(
p
,
buf
,
Àn
);

226  
Àn
;

227 
	}
}

233 
	#ZIP_DECODE_LENGTH
(
±r
, 
ícodög
, 
Ànsize
, 
Àn
) do { \

234 
	`ZIP_ENTRY_ENCODING
((
±r
), (
ícodög
)); \

235 i‡((
ícodög
Ë< 
ZIP_STR_MASK
) { \

236 i‡((
ícodög
Ë=
ZIP_STR_06B
) { \

237 (
Ànsize
) = 1; \

238 (
Àn
Ë(
±r
)[0] & 0x3f; \

239 } i‡((
ícodög
Ë=
ZIP_STR_14B
) { \

240 (
Ànsize
) = 2; \

241 (
Àn
Ë(((
±r
)[0] & 0x3f) << 8) | (ptr)[1]; \

242 } i‡(
ícodög
 =
ZIP_STR_32B
) { \

243 (
Ànsize
) = 5; \

244 (
Àn
Ë((
±r
)[1] << 24) | \

245 ((
±r
)[2] << 16) | \

246 ((
±r
)[3] << 8) | \

247 ((
±r
)[4]); \

249 
	`ASSERT
(
NULL
); \

252 (
Ànsize
) = 1; \

253 (
Àn
Ë
	`zùI¡Size
(
ícodög
); \

255 } 0);

	)

259 
	$zùPªvEncodeLígth
(*
p
, 
Àn
) {

260 i‡(
p
 =
NULL
) {

261  (
Àn
 < 
ZIP_BIGLEN
) ? 1 : (len)+1;

263 i‡(
Àn
 < 
ZIP_BIGLEN
) {

264 
p
[0] = 
Àn
;

267 
p
[0] = 
ZIP_BIGLEN
;

268 
	`mem˝y
(
p
+1,&
Àn
,(len));

269 
	`memªv32ifbe
(
p
+1);

270  1+(
Àn
);

273 
	}
}

277 
	$zùPªvEncodeLígthF‹˚L¨ge
(*
p
, 
Àn
) {

278 i‡(
p
 =
NULL
) ;

279 
p
[0] = 
ZIP_BIGLEN
;

280 
	`mem˝y
(
p
+1,&
Àn
,(len));

281 
	`memªv32ifbe
(
p
+1);

282 
	}
}

286 
	#ZIP_DECODE_PREVLENSIZE
(
±r
, 
¥evÀnsize
) do { \

287 i‡((
±r
)[0] < 
ZIP_BIGLEN
) { \

288 (
¥evÀnsize
) = 1; \

290 (
¥evÀnsize
) = 5; \

292 } 0);

	)

296 
	#ZIP_DECODE_PREVLEN
(
±r
, 
¥evÀnsize
, 
¥evÀn
) do { \

297 
	`ZIP_DECODE_PREVLENSIZE
(
±r
, 
¥evÀnsize
); \

298 i‡((
¥evÀnsize
) == 1) { \

299 (
¥evÀn
Ë(
±r
)[0]; \

300 } i‡((
¥evÀnsize
) == 5) { \

301 
	`ASSERT
(((
¥evÀnsize
)) == 4); \

302 
	`mem˝y
(&(
¥evÀn
), ((*)(
±r
)) + 1, 4); \

303 
	`memªv32ifbe
(&
¥evÀn
); \

305 } 0);

	)

309 
	$zùPªvLíByãDiff
(*
p
, 
Àn
) {

310 
¥evÀnsize
;

311 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

312  
	`zùPªvEncodeLígth
(
NULL
, 
Àn
Ë- 
¥evÀnsize
;

313 
	}
}

316 
	$zùRawE¡ryLígth
(*
p
) {

317 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
;

318 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

319 
	`ZIP_DECODE_LENGTH
(
p
 + 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
);

320  
¥evÀnsize
 + 
Ànsize
 + 
Àn
;

321 
	}
}

325 
	$zùTryEncodög
(*
íåy
, 
íåyÀn
, *
v
, *
ícodög
) {

326 
vÆue
;

328 i‡(
íåyÀn
 >= 32 ||Éntrylen == 0)  0;

329 i‡(
	`°rög2Œ
((*)
íåy
,
íåyÀn
,&
vÆue
)) {

332 i‡(
vÆue
 >= 0 && value <= 12) {

333 *
ícodög
 = 
ZIP_INT_IMM_MIN
+
vÆue
;

334 } i‡(
vÆue
 >
INT8_MIN
 && vÆuê<
INT8_MAX
) {

335 *
ícodög
 = 
ZIP_INT_8B
;

336 } i‡(
vÆue
 >
INT16_MIN
 && vÆuê<
INT16_MAX
) {

337 *
ícodög
 = 
ZIP_INT_16B
;

338 } i‡(
vÆue
 >
INT24_MIN
 && vÆuê<
INT24_MAX
) {

339 *
ícodög
 = 
ZIP_INT_24B
;

340 } i‡(
vÆue
 >
INT32_MIN
 && vÆuê<
INT32_MAX
) {

341 *
ícodög
 = 
ZIP_INT_32B
;

343 *
ícodög
 = 
ZIP_INT_64B
;

345 *
v
 = 
vÆue
;

349 
	}
}

352 
	$zùSaveI¡egî
(*
p
, 
öt64_t
 
vÆue
, 
ícodög
) {

353 
öt16_t
 
i16
;

354 
öt32_t
 
i32
;

355 
öt64_t
 
i64
;

356 i‡(
ícodög
 =
ZIP_INT_8B
) {

357 ((
öt8_t
*)
p
)[0] = (öt8_t)
vÆue
;

358 } i‡(
ícodög
 =
ZIP_INT_16B
) {

359 
i16
 = 
vÆue
;

360 
	`mem˝y
(
p
,&
i16
,(i16));

361 
	`memªv16ifbe
(
p
);

362 } i‡(
ícodög
 =
ZIP_INT_24B
) {

363 
i32
 = 
vÆue
<<8;

364 
	`memªv32ifbe
(&
i32
);

365 
	`mem˝y
(
p
,((
uöt8_t
*)&
i32
)+1,(i32)-(uint8_t));

366 } i‡(
ícodög
 =
ZIP_INT_32B
) {

367 
i32
 = 
vÆue
;

368 
	`mem˝y
(
p
,&
i32
,(i32));

369 
	`memªv32ifbe
(
p
);

370 } i‡(
ícodög
 =
ZIP_INT_64B
) {

371 
i64
 = 
vÆue
;

372 
	`mem˝y
(
p
,&
i64
,(i64));

373 
	`memªv64ifbe
(
p
);

374 } i‡(
ícodög
 >
ZIP_INT_IMM_MIN
 &&Éncodög <
ZIP_INT_IMM_MAX
) {

377 
	`ASSERT
(
NULL
);

379 
	}
}

382 
öt64_t
 
	$zùLﬂdI¡egî
(*
p
, 
ícodög
) {

383 
öt16_t
 
i16
;

384 
öt32_t
 
i32
;

385 
öt64_t
 
i64
, 
ªt
 = 0;

386 i‡(
ícodög
 =
ZIP_INT_8B
) {

387 
ªt
 = ((
öt8_t
*)
p
)[0];

388 } i‡(
ícodög
 =
ZIP_INT_16B
) {

389 
	`mem˝y
(&
i16
,
p
,(i16));

390 
	`memªv16ifbe
(&
i16
);

391 
ªt
 = 
i16
;

392 } i‡(
ícodög
 =
ZIP_INT_32B
) {

393 
	`mem˝y
(&
i32
,
p
,(i32));

394 
	`memªv32ifbe
(&
i32
);

395 
ªt
 = 
i32
;

396 } i‡(
ícodög
 =
ZIP_INT_24B
) {

397 
i32
 = 0;

398 
	`mem˝y
(((
uöt8_t
*)&
i32
)+1,
p
,(i32)-(uint8_t));

399 
	`memªv32ifbe
(&
i32
);

400 
ªt
 = 
i32
>>8;

401 } i‡(
ícodög
 =
ZIP_INT_64B
) {

402 
	`mem˝y
(&
i64
,
p
,(i64));

403 
	`memªv64ifbe
(&
i64
);

404 
ªt
 = 
i64
;

405 } i‡(
ícodög
 >
ZIP_INT_IMM_MIN
 &&Éncodög <
ZIP_INT_IMM_MAX
) {

406 
ªt
 = (
ícodög
 & 
ZIP_INT_IMM_MASK
)-1;

408 
	`ASSERT
(
NULL
);

410  
ªt
;

411 
	}
}

414 
	$zùE¡ry
(*
p
, 
zÀ¡ry
 *
e
) {

416 
	`ZIP_DECODE_PREVLEN
(
p
, 
e
->
¥evøwÀnsize
,É->
¥evøwÀn
);

417 
	`ZIP_DECODE_LENGTH
(
p
 + 
e
->
¥evøwÀnsize
,É->
ícodög
,É->
Ànsize
,É->
Àn
);

418 
e
->
hódîsize
 =É->
¥evøwÀnsize
 +É->
Ànsize
;

419 
e
->
p
 =Ö;

420 
	}
}

423 *
	$zùli°New
() {

424 
byãs
 = 
ZIPLIST_HEADER_SIZE
+1;

425 *
zl
 = 
	`dÆloc
(
byãs
);

426 
	`ZIPLIST_BYTES
(
zl
Ë
	`öåev32ifbe
(
byãs
);

427 
	`ZIPLIST_TAIL_OFFSET
(
zl
Ë
	`öåev32ifbe
(
ZIPLIST_HEADER_SIZE
);

428 
	`ZIPLIST_LENGTH
(
zl
) = 0;

429 
zl
[
byãs
-1] = 
ZIP_END
;

430  
zl
;

431 
	}
}

434 *
	$zùli°Resize
(*
zl
, 
Àn
) {

435 
zl
 = 
	`dªÆloc
(zl,
Àn
);

436 
	`ZIPLIST_BYTES
(
zl
Ë
	`öåev32ifbe
(
Àn
);

437 
zl
[
Àn
-1] = 
ZIP_END
;

438  
zl
;

439 
	}
}

461 *
	$__zùli°CasˇdeUpd©e
(*
zl
, *
p
) {

462 
size_t
 
cuæí
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)), 
øwÀn
, 
øwÀnsize
;

463 
size_t
 
off£t
, 
noff£t
, 
exåa
;

464 *
≈
;

465 
zÀ¡ry
 
cur
, 
√xt
;

467 
p
[0] !
ZIP_END
) {

468 
	`zùE¡ry
(
p
, &
cur
);

469 
øwÀn
 = 
cur
.
hódîsize
 + cur.
Àn
;

470 
øwÀnsize
 = 
	`zùPªvEncodeLígth
(
NULL
,
øwÀn
);

473 i‡(
p
[
øwÀn
] =
ZIP_END
) ;

474 
	`zùE¡ry
(
p
+
øwÀn
, &
√xt
);

477 i‡(
√xt
.
¥evøwÀn
 =
øwÀn
) ;

479 i‡(
√xt
.
¥evøwÀnsize
 < 
øwÀnsize
) {

482 
off£t
 = 
p
-
zl
;

483 
exåa
 = 
øwÀnsize
-
√xt
.
¥evøwÀnsize
;

484 
zl
 = 
	`zùli°Resize
(zl,
cuæí
+
exåa
);

485 
p
 = 
zl
+
off£t
;

488 
≈
 = 
p
+
øwÀn
;

489 
noff£t
 = 
≈
-
zl
;

492 i‡((
zl
+
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(zl))Ë!
≈
) {

493 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

494 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
exåa
);

498 
	`memmove
(
≈
+
øwÀnsize
,

499 
≈
+
√xt
.
¥evøwÀnsize
,

500 
cuæí
-
noff£t
-
√xt
.
¥evøwÀnsize
-1);

501 
	`zùPªvEncodeLígth
(
≈
,
øwÀn
);

504 
p
 +
øwÀn
;

505 
cuæí
 +
exåa
;

507 i‡(
√xt
.
¥evøwÀnsize
 > 
øwÀnsize
) {

510 
	`zùPªvEncodeLígthF‹˚L¨ge
(
p
+
øwÀn
,rawlen);

512 
	`zùPªvEncodeLígth
(
p
+
øwÀn
,rawlen);

519  
zl
;

520 
	}
}

523 *
	$__zùli°Dñëe
(*
zl
, *
p
, 
num
) {

524 
i
, 
tŸÀn
, 
dñëed
 = 0;

525 
size_t
 
off£t
;

526 
√xtdiff
 = 0;

527 
zÀ¡ry
 
fú°
, 
èû
;

529 
	`zùE¡ry
(
p
, &
fú°
);

530 
i
 = 0; 
p
[0] !
ZIP_END
 && i < 
num
; i++) {

531 
p
 +
	`zùRawE¡ryLígth
(p);

532 
dñëed
++;

535 
tŸÀn
 = 
p
-
fú°
.p;

536 i‡(
tŸÀn
 > 0) {

537 i‡(
p
[0] !
ZIP_END
) {

542 
√xtdiff
 = 
	`zùPªvLíByãDiff
(
p
,
fú°
.
¥evøwÀn
);

543 
p
 -
√xtdiff
;

544 
	`zùPªvEncodeLígth
(
p
,
fú°
.
¥evøwÀn
);

547 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

548 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))-
tŸÀn
);

553 
	`zùE¡ry
(
p
, &
èû
);

554 i‡(
p
[
èû
.
hódîsize
+èû.
Àn
] !
ZIP_END
) {

555 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

556 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
√xtdiff
);

560 
	`memmove
(
fú°
.
p
,p,

561 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
))-(
p
-zl)-1);

564 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

565 
	`öåev32ifbe
((
fú°
.
p
-
zl
)-fú°.
¥evøwÀn
);

569 
off£t
 = 
fú°
.
p
-
zl
;

570 
zl
 = 
	`zùli°Resize
(zl, 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(zl))-
tŸÀn
+
√xtdiff
);

571 
	`ZIPLIST_INCR_LENGTH
(
zl
,-
dñëed
);

572 
p
 = 
zl
+
off£t
;

576 i‡(
√xtdiff
 != 0)

577 
zl
 = 
	`__zùli°CasˇdeUpd©e
(zl,
p
);

579  
zl
;

580 
	}
}

583 *
	$__zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
) {

584 
size_t
 
cuæí
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)), 
ªqÀn
;

585 
¥evÀnsize
, 
¥evÀn
 = 0;

586 
size_t
 
off£t
;

587 
√xtdiff
 = 0;

588 
ícodög
 = 0;

589 
vÆue
 = 123456789;

592 
zÀ¡ry
 
èû
;

595 i‡(
p
[0] !
ZIP_END
) {

596 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

598 *
±aû
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

599 i‡(
±aû
[0] !
ZIP_END
) {

600 
¥evÀn
 = 
	`zùRawE¡ryLígth
(
±aû
);

605 i‡(
	`zùTryEncodög
(
s
,
¶í
,&
vÆue
,&
ícodög
)) {

607 
ªqÀn
 = 
	`zùI¡Size
(
ícodög
);

611 
ªqÀn
 = 
¶í
;

615 
ªqÀn
 +
	`zùPªvEncodeLígth
(
NULL
,
¥evÀn
);

616 
ªqÀn
 +
	`zùEncodeLígth
(
NULL
,
ícodög
,
¶í
);

621 
√xtdiff
 = (
p
[0] !
ZIP_END
Ë? 
	`zùPªvLíByãDiff
’,
ªqÀn
) : 0;

624 
off£t
 = 
p
-
zl
;

625 
zl
 = 
	`zùli°Resize
(zl,
cuæí
+
ªqÀn
+
√xtdiff
);

626 
p
 = 
zl
+
off£t
;

629 i‡(
p
[0] !
ZIP_END
) {

631 
	`memmove
(
p
+
ªqÀn
,p-
√xtdiff
,
cuæí
-
off£t
-1+nextdiff);

634 
	`zùPªvEncodeLígth
(
p
+
ªqÀn
,reqlen);

637 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

638 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
ªqÀn
);

643 
	`zùE¡ry
(
p
+
ªqÀn
, &
èû
);

644 i‡(
p
[
ªqÀn
+
èû
.
hódîsize
+èû.
Àn
] !
ZIP_END
) {

645 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

646 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
√xtdiff
);

650 
	`ZIPLIST_TAIL_OFFSET
(
zl
Ë
	`öåev32ifbe
(
p
-zl);

655 i‡(
√xtdiff
 != 0) {

656 
off£t
 = 
p
-
zl
;

657 
zl
 = 
	`__zùli°CasˇdeUpd©e
(zl,
p
+
ªqÀn
);

658 
p
 = 
zl
+
off£t
;

662 
p
 +
	`zùPªvEncodeLígth
’,
¥evÀn
);

663 
p
 +
	`zùEncodeLígth
’,
ícodög
,
¶í
);

664 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

665 
	`mem˝y
(
p
,
s
,
¶í
);

667 
	`zùSaveI¡egî
(
p
,
vÆue
,
ícodög
);

669 
	`ZIPLIST_INCR_LENGTH
(
zl
,1);

670  
zl
;

671 
	}
}

688 *
	$zùli°Mîge
(**
fú°
, **
£c⁄d
) {

690 i‡(
fú°
 =
NULL
 || *fú° =NULL || 
£c⁄d
 == NULL || *second == NULL)

691  
NULL
;

694 i‡(*
fú°
 =*
£c⁄d
)

695  
NULL
;

697 
size_t
 
fú°_byãs
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(*
fú°
));

698 
size_t
 
fú°_Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(*
fú°
));

700 
size_t
 
£c⁄d_byãs
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(*
£c⁄d
));

701 
size_t
 
£c⁄d_Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(*
£c⁄d
));

703 
≠≥nd
;

704 *
sour˚
, *
èrgë
;

705 
size_t
 
èrgë_byãs
, 
sour˚_byãs
;

709 i‡(
fú°_Àn
 >
£c⁄d_Àn
) {

711 
èrgë
 = *
fú°
;

712 
èrgë_byãs
 = 
fú°_byãs
;

713 
sour˚
 = *
£c⁄d
;

714 
sour˚_byãs
 = 
£c⁄d_byãs
;

715 
≠≥nd
 = 1;

718 
èrgë
 = *
£c⁄d
;

719 
èrgë_byãs
 = 
£c⁄d_byãs
;

720 
sour˚
 = *
fú°
;

721 
sour˚_byãs
 = 
fú°_byãs
;

722 
≠≥nd
 = 0;

726 
size_t
 
zlbyãs
 = 
fú°_byãs
 + 
£c⁄d_byãs
 -

727 
ZIPLIST_HEADER_SIZE
 - 
ZIPLIST_END_SIZE
;

728 
size_t
 
zŒígth
 = 
fú°_Àn
 + 
£c⁄d_Àn
;

731 
zŒígth
 = zŒígth < 
UINT16_MAX
 ? zllength : UINT16_MAX;

734 
size_t
 
fú°_off£t
 = 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(*
fú°
));

735 
size_t
 
£c⁄d_off£t
 = 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(*
£c⁄d
));

738 
èrgë
 = 
	`dªÆloc
—¨gë, 
zlbyãs
);

739 i‡(
≠≥nd
) {

743 
	`mem˝y
(
èrgë
 + 
èrgë_byãs
 - 
ZIPLIST_END_SIZE
,

744 
sour˚
 + 
ZIPLIST_HEADER_SIZE
,

745 
sour˚_byãs
 - 
ZIPLIST_HEADER_SIZE
);

751 
	`memmove
(
èrgë
 + 
sour˚_byãs
 - 
ZIPLIST_END_SIZE
,

752 
èrgë
 + 
ZIPLIST_HEADER_SIZE
,

753 
èrgë_byãs
 - 
ZIPLIST_HEADER_SIZE
);

754 
	`mem˝y
(
èrgë
, 
sour˚
, 
sour˚_byãs
 - 
ZIPLIST_END_SIZE
);

758 
	`ZIPLIST_BYTES
(
èrgë
Ë
	`öåev32ifbe
(
zlbyãs
);

759 
	`ZIPLIST_LENGTH
(
èrgë
Ë
	`öåev16ifbe
(
zŒígth
);

765 
	`ZIPLIST_TAIL_OFFSET
(
èrgë
Ë
	`öåev32ifbe
(

766 (
fú°_byãs
 - 
ZIPLIST_END_SIZE
) +

767 (
£c⁄d_off£t
 - 
ZIPLIST_HEADER_SIZE
));

773 
èrgë
 = 
	`__zùli°CasˇdeUpd©e
—¨gë,Å¨gë+
fú°_off£t
);

776 i‡(
≠≥nd
) {

777 
	`d‰ì
(*
£c⁄d
);

778 *
£c⁄d
 = 
NULL
;

779 *
fú°
 = 
èrgë
;

781 
	`d‰ì
(*
fú°
);

782 *
fú°
 = 
NULL
;

783 *
£c⁄d
 = 
èrgë
;

785  
èrgë
;

786 
	}
}

788 *
	$zùli°Push
(*
zl
, *
s
, 
¶í
, 
whîe
) {

789 *
p
;

790 
p
 = (
whîe
 =
ZIPLIST_HEAD
Ë? 
	`ZIPLIST_ENTRY_HEAD
(
zl
Ë: 
	`ZIPLIST_ENTRY_END
(zl);

791  
	`__zùli°In£π
(
zl
,
p
,
s
,
¶í
);

792 
	}
}

797 *
	$zùli°Index
(*
zl
, 
ödex
) {

798 *
p
;

799 
¥evÀnsize
, 
¥evÀn
 = 0;

800 i‡(
ödex
 < 0) {

801 
ödex
 = (-index)-1;

802 
p
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

803 i‡(
p
[0] !
ZIP_END
) {

804 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

805 
¥evÀn
 > 0 && 
ödex
--) {

806 
p
 -
¥evÀn
;

807 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

811 
p
 = 
	`ZIPLIST_ENTRY_HEAD
(
zl
);

812 
p
[0] !
ZIP_END
 && 
ödex
--) {

813 
p
 +
	`zùRawE¡ryLígth
(p);

816  (
p
[0] =
ZIP_END
 || 
ödex
 > 0Ë? 
NULL
 :Ö;

817 
	}
}

825 *
	$zùli°Next
(*
zl
, *
p
) {

826 ((Ë
zl
);

831 i‡(
p
[0] =
ZIP_END
) {

832  
NULL
;

835 
p
 +
	`zùRawE¡ryLígth
(p);

836 i‡(
p
[0] =
ZIP_END
) {

837  
NULL
;

840  
p
;

841 
	}
}

844 *
	$zùli°Pªv
(*
zl
, *
p
) {

845 
¥evÀnsize
, 
¥evÀn
 = 0;

850 i‡(
p
[0] =
ZIP_END
) {

851 
p
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

852  (
p
[0] =
ZIP_END
Ë? 
NULL
 :Ö;

853 } i‡(
p
 =
	`ZIPLIST_ENTRY_HEAD
(
zl
)) {

854  
NULL
;

856 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

857 
	`ASSERT
(
¥evÀn
 > 0);

858  
p
-
¥evÀn
;

860 
	}
}

866 
	$zùli°Gë
(*
p
, **
s°r
, *
¶í
, *
svÆ
) {

867 
zÀ¡ry
 
íåy
;

868 i‡(
p
 =
NULL
 ||Ö[0] =
ZIP_END
)  0;

869 i‡(
s°r
Ë*s°∏
NULL
;

871 
	`zùE¡ry
(
p
, &
íåy
);

872 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

873 i‡(
s°r
) {

874 *
¶í
 = 
íåy
.
Àn
;

875 *
s°r
 = 
p
+
íåy
.
hódîsize
;

878 i‡(
svÆ
) {

879 *
svÆ
 = 
	`zùLﬂdI¡egî
(
p
+
íåy
.
hódîsize
,íåy.
ícodög
);

883 
	}
}

886 *
	$zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
) {

887  
	`__zùli°In£π
(
zl
,
p
,
s
,
¶í
);

888 
	}
}

893 *
	$zùli°Dñëe
(*
zl
, **
p
) {

894 
size_t
 
off£t
 = *
p
-
zl
;

895 
zl
 = 
	`__zùli°Dñëe
(zl,*
p
,1);

901 *
p
 = 
zl
+
off£t
;

902  
zl
;

903 
	}
}

906 *
	$zùli°DñëeR™ge
(*
zl
, 
ödex
, 
num
) {

907 *
p
 = 
	`zùli°Index
(
zl
,
ödex
);

908  (
p
 =
NULL
Ë? 
zl
 : 
	`__zùli°Dñëe
(zl,p,
num
);

909 
	}
}

913 
	$zùli°Com∑ª
(*
p
, *
s°r
, 
¶í
) {

914 
zÀ¡ry
 
íåy
;

915 
£ncodög
;

916 
zvÆ
, 
svÆ
;

917 i‡(
p
[0] =
ZIP_END
)  0;

919 
	`zùE¡ry
(
p
, &
íåy
);

920 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

922 i‡(
íåy
.
Àn
 =
¶í
) {

923  
	`memcmp
(
p
+
íåy
.
hódîsize
,
s°r
,
¶í
) == 0;

930 i‡(
	`zùTryEncodög
(
s°r
,
¶í
,&
svÆ
,&
£ncodög
)) {

931 
zvÆ
 = 
	`zùLﬂdI¡egî
(
p
+
íåy
.
hódîsize
,íåy.
ícodög
);

932  
zvÆ
 =
svÆ
;

936 
	}
}

940 *
	$zùli°Föd
(*
p
, *
v°r
, 
vÀn
, 
skù
) {

941 
skù˙t
 = 0;

942 
vícodög
 = 0;

943 
vŒ
 = 0;

945 
p
[0] !
ZIP_END
) {

946 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
;

947 *
q
;

949 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

950 
	`ZIP_DECODE_LENGTH
(
p
 + 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
);

951 
q
 = 
p
 + 
¥evÀnsize
 + 
Ànsize
;

953 i‡(
skù˙t
 == 0) {

955 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

956 i‡(
Àn
 =
vÀn
 && 
	`memcmp
(
q
, 
v°r
, vlen) == 0) {

957  
p
;

963 i‡(
vícodög
 == 0) {

964 i‡(!
	`zùTryEncodög
(
v°r
, 
vÀn
, &
vŒ
, &
vícodög
)) {

968 
vícodög
 = 
UCHAR_MAX
;

971 
	`ASSERT
(
vícodög
);

977 i‡(
vícodög
 !
UCHAR_MAX
) {

978 
Œ
 = 
	`zùLﬂdI¡egî
(
q
, 
ícodög
);

979 i‡(
Œ
 =
vŒ
) {

980  
p
;

986 
skù˙t
 = 
skù
;

989 
skù˙t
--;

993 
p
 = 
q
 + 
Àn
;

996  
NULL
;

997 
	}
}

1000 
	$zùli°Lí
(*
zl
) {

1001 
Àn
 = 0;

1002 i‡(
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
)Ë< 
UINT16_MAX
) {

1003 
Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
));

1005 *
p
 = 
zl
+
ZIPLIST_HEADER_SIZE
;

1006 *
p
 !
ZIP_END
) {

1007 
p
 +
	`zùRawE¡ryLígth
(p);

1008 
Àn
++;

1012 i‡(
Àn
 < 
UINT16_MAX
Ë
	`ZIPLIST_LENGTH
(
zl
Ë
	`öåev16ifbe
(len);

1014  
Àn
;

1015 
	}
}

1018 
size_t
 
	$zùli°BlobLí
(*
zl
) {

1019  
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
));

1020 
	}
}

1022 
	$zùli°Rïr
(*
zl
) {

1023 *
p
;

1024 
ödex
 = 0;

1025 
zÀ¡ry
 
íåy
;

1027 
	`¥ötf
(

1031 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)),

1032 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
)),

1033 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(
zl
)));

1034 
p
 = 
	`ZIPLIST_ENTRY_HEAD
(
zl
);

1035 *
p
 !
ZIP_END
) {

1036 
	`zùE¡ry
(
p
, &
íåy
);

1037 
	`¥ötf
(

1048 ()
p
,

1049 
ödex
,

1050 (Ë(
p
-
zl
),

1051 
íåy
.
hódîsize
+íåy.
Àn
,

1052 
íåy
.
hódîsize
,

1053 
íåy
.
¥evøwÀn
,

1054 
íåy
.
¥evøwÀnsize
,

1055 
íåy
.
Àn
);

1056 
p
 +
íåy
.
hódîsize
;

1057 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

1058 i‡(
íåy
.
Àn
 > 40) {

1059 i‡(
	`fwrôe
(
p
,40,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1060 
	`¥ötf
("...");

1062 i‡(
íåy
.
Àn
 &&

1063 
	`fwrôe
(
p
,
íåy
.
Àn
,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1066 
	`¥ötf
("%Œd", (Ë
	`zùLﬂdI¡egî
(
p
,
íåy
.
ícodög
));

1068 
	`¥ötf
("\n");

1069 
p
 +
íåy
.
Àn
;

1070 
ödex
++;

1072 
	`¥ötf
("{end}\n\n");

1073 
	}
}

1075 #ifde‡
REDIS_TEST


1076 
	~<sys/time.h
>

1077 
	~"adli°.h
"

1078 
	~"sds.h
"

1080 
	#debug
(
f
, ...Ë{ i‡(
DEBUG
Ë
	`¥ötf
(f, 
__VA_ARGS__
); }

	)

1082 *
	$¸óãLi°
() {

1083 *
zl
 = 
	`zùli°New
();

1084 
zl
 = 
	`zùli°Push
(zl, (*)"foo", 3, 
ZIPLIST_TAIL
);

1085 
zl
 = 
	`zùli°Push
(zl, (*)"quux", 4, 
ZIPLIST_TAIL
);

1086 
zl
 = 
	`zùli°Push
(zl, (*)"hñlo", 5, 
ZIPLIST_HEAD
);

1087 
zl
 = 
	`zùli°Push
(zl, (*)"1024", 4, 
ZIPLIST_TAIL
);

1088  
zl
;

1089 
	}
}

1091 *
	$¸óãI¡Li°
() {

1092 *
zl
 = 
	`zùli°New
();

1093 
buf
[32];

1095 
	`•rötf
(
buf
, "100");

1096 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1097 
	`•rötf
(
buf
, "128000");

1098 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1099 
	`•rötf
(
buf
, "-100");

1100 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_HEAD
);

1101 
	`•rötf
(
buf
, "4294967296");

1102 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_HEAD
);

1103 
	`•rötf
(
buf
, "non integer");

1104 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1105 
	`•rötf
(
buf
, "much muchÜongerÇon integer");

1106 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1107  
zl
;

1108 
	}
}

1110 
	$u£c
() {

1111 
timevÆ
 
tv
;

1112 
	`gëtimeofday
(&
tv
,
NULL
);

1113  ((()
tv
.
tv_£c
)*1000000)+tv.
tv_u£c
;

1114 
	}
}

1116 
	$°ªss
(
pos
, 
num
, 
maxsize
, 
dnum
) {

1117 
i
,
j
,
k
;

1118 *
zl
;

1119 
pos°r
[2][5] = { "HEAD", "TAIL" };

1120 
°¨t
;

1121 
i
 = 0; i < 
maxsize
; i+=
dnum
) {

1122 
zl
 = 
	`zùli°New
();

1123 
j
 = 0; j < 
i
; j++) {

1124 
zl
 = 
	`zùli°Push
(zl,(*)"quux",4,
ZIPLIST_TAIL
);

1128 
°¨t
 = 
	`u£c
();

1129 
k
 = 0; k < 
num
; k++) {

1130 
zl
 = 
	`zùli°Push
(zl,(*)"quux",4,
pos
);

1131 
zl
 = 
	`zùli°DñëeR™ge
(zl,0,1);

1133 
	`¥ötf
("List size: %8d, bytes: %8d, %dxÖush+pop (%s): %6lld usec\n",

1134 
i
,
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)),
num
,
pos°r
[
pos
],
	`u£c
()-
°¨t
);

1135 
	`d‰ì
(
zl
);

1137 
	}
}

1139 *
	$p›
(*
zl
, 
whîe
) {

1140 *
p
, *
v°r
;

1141 
vÀn
;

1142 
vl⁄g
;

1144 
p
 = 
	`zùli°Index
(
zl
,
whîe
 =
ZIPLIST_HEAD
 ? 0 : -1);

1145 i‡(
	`zùli°Gë
(
p
,&
v°r
,&
vÀn
,&
vl⁄g
)) {

1146 i‡(
whîe
 =
ZIPLIST_HEAD
)

1147 
	`¥ötf
("Pop head: ");

1149 
	`¥ötf
("PopÅail: ");

1151 i‡(
v°r
) {

1152 i‡(
vÀn
 && 
	`fwrôe
(
v°r
,vÀn,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1155 
	`¥ötf
("%Œd", 
vl⁄g
);

1158 
	`¥ötf
("\n");

1159  
	`zùli°Dñëe
(
zl
,&
p
);

1161 
	`¥ötf
("ERROR: CouldÇotÖop\n");

1162 
	`exô
(1);

1164 
	}
}

1166 
	$ønd°rög
(*
èrgë
, 
mö
, 
max
) {

1167 
p
 = 0;

1168 
Àn
 = 
mö
+
	`ønd
()%(
max
-min+1);

1169 
mövÆ
, 
maxvÆ
;

1170 
	`ønd
() % 3) {

1172 
mövÆ
 = 0;

1173 
maxvÆ
 = 255;

1176 
mövÆ
 = 48;

1177 
maxvÆ
 = 122;

1180 
mövÆ
 = 48;

1181 
maxvÆ
 = 52;

1184 
	`ASSERT
(
NULL
);

1187 
p
 < 
Àn
)

1188 
èrgë
[
p
++] = 
mövÆ
+
	`ønd
()%(
maxvÆ
-minval+1);

1189  
Àn
;

1190 
	}
}

1192 
	$vîify
(*
zl
, 
zÀ¡ry
 *
e
) {

1193 
Àn
 = 
	`zùli°Lí
(
zl
);

1194 
zÀ¡ry
 
_e
;

1196 
	`ZIPLIST_ENTRY_ZERO
(&
_e
);

1198 
i
 = 0; i < 
Àn
; i++) {

1199 
	`mem£t
(&
e
[
i
], 0, (
zÀ¡ry
));

1200 
	`zùE¡ry
(
	`zùli°Index
(
zl
, 
i
), &
e
[i]);

1202 
	`mem£t
(&
_e
, 0, (
zÀ¡ry
));

1203 
	`zùE¡ry
(
	`zùli°Index
(
zl
, -
Àn
+
i
), &
_e
);

1205 
	`ASSERT
(
	`memcmp
(&
e
[
i
], &
_e
, (
zÀ¡ry
)) == 0);

1207 
	}
}

1209 
	$zùli°Te°
(
¨gc
, **
¨gv
) {

1210 
ªt
;

1211 *
zl
, *
p
;

1212 *
íåy
;

1213 
ñí
;

1214 
vÆue
;

1217 i‡(
¨gc
 == 2)

1218 
	`§™d
(
	`©oi
(
¨gv
[1]));

1220 
zl
 = 
	`¸óãI¡Li°
();

1221 
	`zùli°Rïr
(
zl
);

1223 
	`d‰ì
(
zl
);

1225 
zl
 = 
	`¸óãLi°
();

1226 
	`zùli°Rïr
(
zl
);

1228 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1229 
	`zùli°Rïr
(
zl
);

1231 
zl
 = 
	`p›
(zl,
ZIPLIST_HEAD
);

1232 
	`zùli°Rïr
(
zl
);

1234 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1235 
	`zùli°Rïr
(
zl
);

1237 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1238 
	`zùli°Rïr
(
zl
);

1240 
	`d‰ì
(
zl
);

1242 
	`¥ötf
("GetÉlementát index 3:\n");

1244 
zl
 = 
	`¸óãLi°
();

1245 
p
 = 
	`zùli°Index
(
zl
, 3);

1246 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1247 
	`¥ötf
("ERROR: CouldÇotáccess index 3\n");

1250 i‡(
íåy
) {

1251 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1252 
	`¥ötf
("\n");

1254 
	`¥ötf
("%Œd\n", 
vÆue
);

1256 
	`¥ötf
("\n");

1257 
	`d‰ì
(
zl
);

1260 
	`¥ötf
("GetÉlementát index 4 (out ofÑange):\n");

1262 
zl
 = 
	`¸óãLi°
();

1263 
p
 = 
	`zùli°Index
(
zl
, 4);

1264 i‡(
p
 =
NULL
) {

1265 
	`¥ötf
("NoÉntry\n");

1267 
	`¥ötf
("ERROR: Ouào‡øngêödex shouldÑëu∫ NULL,Ñëu∫ed off£t: %ld\n", 
p
-
zl
);

1270 
	`¥ötf
("\n");

1271 
	`d‰ì
(
zl
);

1274 
	`¥ötf
("GetÉlementát index -1 (lastÉlement):\n");

1276 
zl
 = 
	`¸óãLi°
();

1277 
p
 = 
	`zùli°Index
(
zl
, -1);

1278 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1279 
	`¥ötf
("ERROR: CouldÇotáccess index -1\n");

1282 i‡(
íåy
) {

1283 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1284 
	`¥ötf
("\n");

1286 
	`¥ötf
("%Œd\n", 
vÆue
);

1288 
	`¥ötf
("\n");

1289 
	`d‰ì
(
zl
);

1292 
	`¥ötf
("GetÉlementát index -4 (firstÉlement):\n");

1294 
zl
 = 
	`¸óãLi°
();

1295 
p
 = 
	`zùli°Index
(
zl
, -4);

1296 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1297 
	`¥ötf
("ERROR: CouldÇotáccess index -4\n");

1300 i‡(
íåy
) {

1301 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1302 
	`¥ötf
("\n");

1304 
	`¥ötf
("%Œd\n", 
vÆue
);

1306 
	`¥ötf
("\n");

1307 
	`d‰ì
(
zl
);

1310 
	`¥ötf
("GetÉlementát index -5 (reverse out ofÑange):\n");

1312 
zl
 = 
	`¸óãLi°
();

1313 
p
 = 
	`zùli°Index
(
zl
, -5);

1314 i‡(
p
 =
NULL
) {

1315 
	`¥ötf
("NoÉntry\n");

1317 
	`¥ötf
("ERROR: Ouào‡øngêödex shouldÑëu∫ NULL,Ñëu∫ed off£t: %ld\n", 
p
-
zl
);

1320 
	`¥ötf
("\n");

1321 
	`d‰ì
(
zl
);

1324 
	`¥ötf
("IterateÜist from 0ÅoÉnd:\n");

1326 
zl
 = 
	`¸óãLi°
();

1327 
p
 = 
	`zùli°Index
(
zl
, 0);

1328 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1329 
	`¥ötf
("Entry: ");

1330 i‡(
íåy
) {

1331 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1333 
	`¥ötf
("%Œd", 
vÆue
);

1335 
p
 = 
	`zùli°Next
(
zl
,p);

1336 
	`¥ötf
("\n");

1338 
	`¥ötf
("\n");

1339 
	`d‰ì
(
zl
);

1342 
	`¥ötf
("IterateÜist from 1ÅoÉnd:\n");

1344 
zl
 = 
	`¸óãLi°
();

1345 
p
 = 
	`zùli°Index
(
zl
, 1);

1346 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1347 
	`¥ötf
("Entry: ");

1348 i‡(
íåy
) {

1349 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1351 
	`¥ötf
("%Œd", 
vÆue
);

1353 
p
 = 
	`zùli°Next
(
zl
,p);

1354 
	`¥ötf
("\n");

1356 
	`¥ötf
("\n");

1357 
	`d‰ì
(
zl
);

1360 
	`¥ötf
("IterateÜist from 2ÅoÉnd:\n");

1362 
zl
 = 
	`¸óãLi°
();

1363 
p
 = 
	`zùli°Index
(
zl
, 2);

1364 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1365 
	`¥ötf
("Entry: ");

1366 i‡(
íåy
) {

1367 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1369 
	`¥ötf
("%Œd", 
vÆue
);

1371 
p
 = 
	`zùli°Next
(
zl
,p);

1372 
	`¥ötf
("\n");

1374 
	`¥ötf
("\n");

1375 
	`d‰ì
(
zl
);

1378 
	`¥ötf
("Iterate starting out ofÑange:\n");

1380 
zl
 = 
	`¸óãLi°
();

1381 
p
 = 
	`zùli°Index
(
zl
, 4);

1382 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1383 
	`¥ötf
("NoÉntry\n");

1385 
	`¥ötf
("ERROR\n");

1387 
	`¥ötf
("\n");

1388 
	`d‰ì
(
zl
);

1391 
	`¥ötf
("Iterate from backÅo front:\n");

1393 
zl
 = 
	`¸óãLi°
();

1394 
p
 = 
	`zùli°Index
(
zl
, -1);

1395 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1396 
	`¥ötf
("Entry: ");

1397 i‡(
íåy
) {

1398 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1400 
	`¥ötf
("%Œd", 
vÆue
);

1402 
p
 = 
	`zùli°Pªv
(
zl
,p);

1403 
	`¥ötf
("\n");

1405 
	`¥ötf
("\n");

1406 
	`d‰ì
(
zl
);

1409 
	`¥ötf
("Iterate from backÅo front, deletingáll items:\n");

1411 
zl
 = 
	`¸óãLi°
();

1412 
p
 = 
	`zùli°Index
(
zl
, -1);

1413 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1414 
	`¥ötf
("Entry: ");

1415 i‡(
íåy
) {

1416 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1418 
	`¥ötf
("%Œd", 
vÆue
);

1420 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

1421 
p
 = 
	`zùli°Pªv
(
zl
,p);

1422 
	`¥ötf
("\n");

1424 
	`¥ötf
("\n");

1425 
	`d‰ì
(
zl
);

1428 
	`¥ötf
("Delete inclusiveÑange 0,0:\n");

1430 
zl
 = 
	`¸óãLi°
();

1431 
zl
 = 
	`zùli°DñëeR™ge
(zl, 0, 1);

1432 
	`zùli°Rïr
(
zl
);

1433 
	`d‰ì
(
zl
);

1436 
	`¥ötf
("Delete inclusiveÑange 0,1:\n");

1438 
zl
 = 
	`¸óãLi°
();

1439 
zl
 = 
	`zùli°DñëeR™ge
(zl, 0, 2);

1440 
	`zùli°Rïr
(
zl
);

1441 
	`d‰ì
(
zl
);

1444 
	`¥ötf
("Delete inclusiveÑange 1,2:\n");

1446 
zl
 = 
	`¸óãLi°
();

1447 
zl
 = 
	`zùli°DñëeR™ge
(zl, 1, 2);

1448 
	`zùli°Rïr
(
zl
);

1449 
	`d‰ì
(
zl
);

1452 
	`¥ötf
("Delete with start index out ofÑange:\n");

1454 
zl
 = 
	`¸óãLi°
();

1455 
zl
 = 
	`zùli°DñëeR™ge
(zl, 5, 1);

1456 
	`zùli°Rïr
(
zl
);

1457 
	`d‰ì
(
zl
);

1460 
	`¥ötf
("Delete withÇum overflow:\n");

1462 
zl
 = 
	`¸óãLi°
();

1463 
zl
 = 
	`zùli°DñëeR™ge
(zl, 1, 5);

1464 
	`zùli°Rïr
(
zl
);

1465 
	`d‰ì
(
zl
);

1468 
	`¥ötf
("Delete foo while iterating:\n");

1470 
zl
 = 
	`¸óãLi°
();

1471 
p
 = 
	`zùli°Index
(
zl
,0);

1472 
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
)) {

1473 i‡(
íåy
 && 
	`°∫cmp
("foo",(*Î¡ry,
ñí
) == 0) {

1474 
	`¥ötf
("Delete foo\n");

1475 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

1477 
	`¥ötf
("Entry: ");

1478 i‡(
íåy
) {

1479 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
) == 0)

1480 
	`≥º‹
("fwrite");

1482 
	`¥ötf
("%Œd",
vÆue
);

1484 
p
 = 
	`zùli°Next
(
zl
,p);

1485 
	`¥ötf
("\n");

1488 
	`¥ötf
("\n");

1489 
	`zùli°Rïr
(
zl
);

1490 
	`d‰ì
(
zl
);

1493 
	`¥ötf
("RegressionÅest for >255 byte strings:\n");

1495 
v1
[257] = {0}, 
v2
[257] = {0};

1496 
	`mem£t
(
v1
,'x',256);

1497 
	`mem£t
(
v2
,'y',256);

1498 
zl
 = 
	`zùli°New
();

1499 
zl
 = 
	`zùli°Push
(zl,(*)
v1
,
	`°æí
(v1),
ZIPLIST_TAIL
);

1500 
zl
 = 
	`zùli°Push
(zl,(*)
v2
,
	`°æí
(v2),
ZIPLIST_TAIL
);

1503 
p
 = 
	`zùli°Index
(
zl
,0);

1504 
ªt
 = ()
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
);

1505 
	`ASSERT
(
ªt
 > 0);

1506 
	`ASSERT
(
	`°∫cmp
(
v1
,(*)
íåy
,
ñí
) == 0);

1507 
p
 = 
	`zùli°Index
(
zl
,1);

1508 
ªt
 = ()
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
);

1509 
	`ASSERT
(
ªt
 > 0);

1510 
	`ASSERT
(
	`°∫cmp
(
v2
,(*)
íåy
,
ñí
) == 0);

1511 
	`¥ötf
("SUCCESS\n\n");

1512 
	`d‰ì
(
zl
);

1515 
	`¥ötf
("RegressionÅest deletingÇextÅoÜastÉntries:\n");

1517 
v
[3][257] = {{0}};

1518 
zÀ¡ry
 
e
[3] = {{.
¥evøwÀnsize
 = 0, .
¥evøwÀn
 = 0, .
Ànsize
 = 0,

1519 .
Àn
 = 0, .
hódîsize
 = 0, .
ícodög
 = 0, .
p
 = 
NULL
}};

1520 
size_t
 
i
;

1522 
i
 = 0; i < ((
v
)/(v[0])); i++) {

1523 
	`mem£t
(
v
[
i
], 'a' + i, (v[0]));

1526 
v
[0][256] = '\0';

1527 
v
[1][ 1] = '\0';

1528 
v
[2][256] = '\0';

1530 
zl
 = 
	`zùli°New
();

1531 
i
 = 0; i < ((
v
)/(v[0])); i++) {

1532 
zl
 = 
	`zùli°Push
(zl, (*Ë
v
[
i
], 
	`°æí
(v[i]), 
ZIPLIST_TAIL
);

1535 
	`vîify
(
zl
, 
e
);

1537 
	`ASSERT
(
e
[0].
¥evøwÀnsize
 == 1);

1538 
	`ASSERT
(
e
[1].
¥evøwÀnsize
 == 5);

1539 
	`ASSERT
(
e
[2].
¥evøwÀnsize
 == 1);

1542 *
p
 = 
e
[1].p;

1543 
zl
 = 
	`zùli°Dñëe
(zl, &
p
);

1545 
	`vîify
(
zl
, 
e
);

1547 
	`ASSERT
(
e
[0].
¥evøwÀnsize
 == 1);

1548 
	`ASSERT
(
e
[1].
¥evøwÀnsize
 == 5);

1550 
	`¥ötf
("SUCCESS\n\n");

1551 
	`d‰ì
(
zl
);

1554 
	`¥ötf
("CreateÜongÜistánd check indices:\n");

1556 
zl
 = 
	`zùli°New
();

1557 
buf
[32];

1558 
i
,
Àn
;

1559 
i
 = 0; i < 1000; i++) {

1560 
Àn
 = 
	`•rötf
(
buf
,"%d",
i
);

1561 
zl
 = 
	`zùli°Push
(zl,(*)
buf
,
Àn
,
ZIPLIST_TAIL
);

1563 
i
 = 0; i < 1000; i++) {

1564 
p
 = 
	`zùli°Index
(
zl
,
i
);

1565 
ªt
 = ()
	`zùli°Gë
(
p
,
NULL
,NULL,&
vÆue
);

1566 
	`ASSERT
(
ªt
 > 0);

1567 
	`ASSERT
(
i
 =
vÆue
);

1569 
p
 = 
	`zùli°Index
(
zl
,-
i
-1);

1570 
ªt
 = ()
	`zùli°Gë
(
p
,
NULL
,NULL,&
vÆue
);

1571 
	`ASSERT
(
ªt
 > 0);

1572 
	`ASSERT
(999-
i
 =
vÆue
);

1574 
	`¥ötf
("SUCCESS\n\n");

1575 
	`d‰ì
(
zl
);

1578 
	`¥ötf
("Compare strings with ziplistÉntries:\n");

1580 
zl
 = 
	`¸óãLi°
();

1581 
p
 = 
	`zùli°Index
(
zl
,0);

1582 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1583 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1586 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1587 
	`¥ötf
("ERROR: \"hella\"\n");

1591 
p
 = 
	`zùli°Index
(
zl
,3);

1592 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1593 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1596 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1597 
	`¥ötf
("ERROR: \"1025\"\n");

1600 
	`¥ötf
("SUCCESS\n\n");

1601 
	`d‰ì
(
zl
);

1604 
	`¥ötf
("MergeÅest:\n");

1607 
zl
 = 
	`¸óãLi°
();

1608 *
zl2
 = 
	`¸óãLi°
();

1610 *
zl3
 = 
	`zùli°New
();

1611 *
zl4
 = 
	`zùli°New
();

1613 i‡(
	`zùli°Mîge
(&
zl4
, &zl4)) {

1614 
	`¥ötf
("ERROR: Allowed merging of one ziplist into itself.\n");

1619 
zl4
 = 
	`zùli°Mîge
(&
zl3
, &zl4);

1620 
	`zùli°Rïr
(
zl4
);

1621 i‡(
	`zùli°Lí
(
zl4
)) {

1622 
	`¥ötf
("ERROR: MergingÅwoÉmpty ziplists createdÉntries.\n");

1625 
	`d‰ì
(
zl4
);

1627 
zl2
 = 
	`zùli°Mîge
(&
zl
, &zl2);

1629 
	`zùli°Rïr
(
zl2
);

1631 i‡(
	`zùli°Lí
(
zl2
) != 8) {

1632 
	`¥ötf
("ERROR: MîgedÜígthÇŸ 8, but: %u\n", 
	`zùli°Lí
(
zl2
));

1636 
p
 = 
	`zùli°Index
(
zl2
,0);

1637 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1638 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1641 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1642 
	`¥ötf
("ERROR: \"hella\"\n");

1646 
p
 = 
	`zùli°Index
(
zl2
,3);

1647 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1648 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1651 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1652 
	`¥ötf
("ERROR: \"1025\"\n");

1656 
p
 = 
	`zùli°Index
(
zl2
,4);

1657 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1658 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1661 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1662 
	`¥ötf
("ERROR: \"hella\"\n");

1666 
p
 = 
	`zùli°Index
(
zl2
,7);

1667 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1668 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1671 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1672 
	`¥ötf
("ERROR: \"1025\"\n");

1675 
	`¥ötf
("SUCCESS\n\n");

1676 
	`d‰ì
(
zl
);

1679 
	`¥ötf
("Stress withÑandomÖayloads of differentÉncoding:\n");

1681 
i
,
j
,
Àn
,
whîe
;

1682 *
p
;

1683 
buf
[1024];

1684 
buÊí
;

1685 
dli°
 *
ªf
;

1686 
dli°Node
 *
ª‚ode
;

1689 *
s°r
;

1690 
¶í
;

1691 
svÆ
;

1693 
i
 = 0; i < 20000; i++) {

1694 
zl
 = 
	`zùli°New
();

1695 
ªf
 = 
	`dli°Cª©e
();

1696 
	`dli°SëFªeMëhod
(
ªf
,((*)(*))
sds‰ì
);

1697 
Àn
 = 
	`ønd
() % 256;

1700 
j
 = 0; j < 
Àn
; j++) {

1701 
whîe
 = (
	`ønd
(Ë& 1Ë? 
ZIPLIST_HEAD
 : 
ZIPLIST_TAIL
;

1702 i‡(
	`ønd
() % 2) {

1703 
buÊí
 = 
	`ønd°rög
(
buf
,1,(buf)-1);

1705 
	`ønd
() % 3) {

1707 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()) >> 20);

1710 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()));

1713 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()) << 20);

1716 
	`ASSERT
(
NULL
);

1721 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
buÊí
, 
whîe
);

1724 i‡(
whîe
 =
ZIPLIST_HEAD
) {

1725 
	`dli°AddNodeHód
(
ªf
,
	`sd¢ewÀn
(
buf
, 
buÊí
));

1726 } i‡(
whîe
 =
ZIPLIST_TAIL
) {

1727 
	`dli°AddNodeTaû
(
ªf
,
	`sd¢ewÀn
(
buf
, 
buÊí
));

1729 
	`ASSERT
(
NULL
);

1733 
	`ASSERT
(
	`dli°Lígth
(
ªf
Ë=
	`zùli°Lí
(
zl
));

1734 
j
 = 0; j < 
Àn
; j++) {

1737 
p
 = 
	`zùli°Index
(
zl
,
j
);

1738 
ª‚ode
 = 
	`dli°Index
(
ªf
,
j
);

1740 
ªt
 = ()
	`zùli°Gë
(
p
,&
s°r
,&
¶í
,&
svÆ
);

1741 
	`ASSERT
(
ªt
 > 0);

1742 i‡(
s°r
 =
NULL
) {

1743 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",
svÆ
);

1745 
buÊí
 = 
¶í
;

1746 
	`mem˝y
(
buf
,
s°r
,
buÊí
);

1747 
buf
[
buÊí
] = '\0';

1749 
	`ASSERT
(
	`memcmp
(
buf
,
	`dli°NodeVÆue
(
ª‚ode
),
buÊí
) == 0);

1751 
	`d‰ì
(
zl
);

1752 
	`dli°Rñó£
(
ªf
);

1754 
	`¥ötf
("SUCCESS\n\n");

1757 
	`¥ötf
("Stress with variable ziplist size:\n");

1759 
	`°ªss
(
ZIPLIST_HEAD
,100000,16384,256);

1760 
	`°ªss
(
ZIPLIST_TAIL
,100000,16384,256);

1764 
	}
}

	@src/vr_ziplist.h

1 #i‚de‡
_ZIPLIST_H


2 
	#_ZIPLIST_H


	)

4 
	#ZIPLIST_HEAD
 0

	)

5 
	#ZIPLIST_TAIL
 1

	)

7 *
zùli°New
();

8 *
zùli°Mîge
(**
fú°
, **
£c⁄d
);

9 *
zùli°Push
(*
zl
, *
s
, 
¶í
, 
whîe
);

10 *
zùli°Index
(*
zl
, 
ödex
);

11 *
zùli°Next
(*
zl
, *
p
);

12 *
zùli°Pªv
(*
zl
, *
p
);

13 
zùli°Gë
(*
p
, **
svÆ
, *
¶í
, *
lvÆ
);

14 *
zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
);

15 *
zùli°Dñëe
(*
zl
, **
p
);

16 *
zùli°DñëeR™ge
(*
zl
, 
ödex
, 
num
);

17 
zùli°Com∑ª
(*
p
, *
s
, 
¶í
);

18 *
zùli°Föd
(*
p
, *
v°r
, 
vÀn
, 
skù
);

19 
zùli°Lí
(*
zl
);

20 
size_t
 
zùli°BlobLí
(*
zl
);

22 #ifde‡
REDIS_TEST


23 
zùli°Te°
(
¨gc
, *
¨gv
[]);

	@src/vr_ziplist.h

1 #i‚de‡
_ZIPLIST_H


2 
	#_ZIPLIST_H


	)

4 
	#ZIPLIST_HEAD
 0

	)

5 
	#ZIPLIST_TAIL
 1

	)

7 *
zùli°New
();

8 *
zùli°Mîge
(**
fú°
, **
£c⁄d
);

9 *
zùli°Push
(*
zl
, *
s
, 
¶í
, 
whîe
);

10 *
zùli°Index
(*
zl
, 
ödex
);

11 *
zùli°Next
(*
zl
, *
p
);

12 *
zùli°Pªv
(*
zl
, *
p
);

13 
zùli°Gë
(*
p
, **
svÆ
, *
¶í
, *
lvÆ
);

14 *
zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
);

15 *
zùli°Dñëe
(*
zl
, **
p
);

16 *
zùli°DñëeR™ge
(*
zl
, 
ödex
, 
num
);

17 
zùli°Com∑ª
(*
p
, *
s
, 
¶í
);

18 *
zùli°Föd
(*
p
, *
v°r
, 
vÀn
, 
skù
);

19 
zùli°Lí
(*
zl
);

20 
size_t
 
zùli°BlobLí
(*
zl
);

22 #ifde‡
REDIS_TEST


23 
zùli°Te°
(
¨gc
, *
¨gv
[]);

	@src/vr_zipmap.c

78 
	~<°dio.h
>

79 
	~<°rög.h
>

81 
	~<vr_c‹e.h
>

83 
	#ZIPMAP_BIGLEN
 254

	)

84 
	#ZIPMAP_END
 255

	)

88 
	#ZIPMAP_VALUE_MAX_FREE
 4

	)

93 
	#ZIPMAP_LEN_BYTES
(
_l
Ë(((_lË< 
ZIPMAP_BIGLEN
Ë? 1 : ()+1)

	)

96 *
	$zùm≠New
() {

97 *
zm
 = 
	`dÆloc
(2);

99 
zm
[0] = 0;

100 
zm
[1] = 
ZIPMAP_END
;

101  
zm
;

102 
	}
}

105 
	$zùm≠DecodeLígth
(*
p
) {

106 
Àn
 = *
p
;

108 i‡(
Àn
 < 
ZIPMAP_BIGLEN
) Üen;

109 
	`mem˝y
(&
Àn
,
p
+1,());

110 
	`memªv32ifbe
(&
Àn
);

111  
Àn
;

112 
	}
}

116 
	$zùm≠EncodeLígth
(*
p
, 
Àn
) {

117 i‡(
p
 =
NULL
) {

118  
	`ZIPMAP_LEN_BYTES
(
Àn
);

120 i‡(
Àn
 < 
ZIPMAP_BIGLEN
) {

121 
p
[0] = 
Àn
;

124 
p
[0] = 
ZIPMAP_BIGLEN
;

125 
	`mem˝y
(
p
+1,&
Àn
,(len));

126 
	`memªv32ifbe
(
p
+1);

127  1+(
Àn
);

130 
	}
}

138 *
	$zùm≠LookupRaw
(*
zm
, *
key
, 
kÀn
, *
tŸÀn
) {

139 *
p
 = 
zm
+1, *
k
 = 
NULL
;

140 
l
,
Œí
;

142 *
p
 !
ZIPMAP_END
) {

143 
‰ì
;

146 
l
 = 
	`zùm≠DecodeLígth
(
p
);

147 
Œí
 = 
	`zùm≠EncodeLígth
(
NULL
,
l
);

148 i‡(
key
 !
NULL
 && 
k
 =NULL && 
l
 =
kÀn
 && !
	`memcmp
(
p
+
Œí
,key,l)) {

151 i‡(
tŸÀn
 !
NULL
) {

152 
k
 = 
p
;

154  
p
;

157 
p
 +
Œí
+
l
;

159 
l
 = 
	`zùm≠DecodeLígth
(
p
);

160 
p
 +
	`zùm≠EncodeLígth
(
NULL
,
l
);

161 
‰ì
 = 
p
[0];

162 
p
 +
l
+1+
‰ì
;

164 i‡(
tŸÀn
 !
NULL
Ë*tŸÀ¿()(
p
-
zm
)+1;

165  
k
;

166 
	}
}

168 
	$zùm≠RequúedLígth
(
kÀn
, 
vÀn
) {

169 
l
;

171 
l
 = 
kÀn
+
vÀn
+3;

172 i‡(
kÀn
 >
ZIPMAP_BIGLEN
Ë
l
 += 4;

173 i‡(
vÀn
 >
ZIPMAP_BIGLEN
Ë
l
 += 4;

174  
l
;

175 
	}
}

178 
	$zùm≠RawKeyLígth
(*
p
) {

179 
l
 = 
	`zùm≠DecodeLígth
(
p
);

180  
	`zùm≠EncodeLígth
(
NULL
,
l
) +Ü;

181 
	}
}

185 
	$zùm≠RawVÆueLígth
(*
p
) {

186 
l
 = 
	`zùm≠DecodeLígth
(
p
);

187 
u£d
;

189 
u£d
 = 
	`zùm≠EncodeLígth
(
NULL
,
l
);

190 
u£d
 +
p
[u£d] + 1 + 
l
;

191  
u£d
;

192 
	}
}

197 
	$zùm≠RawE¡ryLígth
(*
p
) {

198 
l
 = 
	`zùm≠RawKeyLígth
(
p
);

199  
l
 + 
	`zùm≠RawVÆueLígth
(
p
+l);

200 
	}
}

202 
ölöe
 *
	$zùm≠Resize
(*
zm
, 
Àn
) {

203 
zm
 = 
	`dªÆloc
(zm, 
Àn
);

204 
zm
[
Àn
-1] = 
ZIPMAP_END
;

205  
zm
;

206 
	}
}

211 *
	$zùm≠Së
(*
zm
, *
key
, 
kÀn
, *
vÆ
, 
vÀn
, *
upd©e
) {

212 
zmÀn
, 
off£t
;

213 
‰ìÀn
, 
ªqÀn
 = 
	`zùm≠RequúedLígth
(
kÀn
,
vÀn
);

214 
em±y
, 
vem±y
;

215 *
p
;

217 
‰ìÀn
 = 
ªqÀn
;

218 i‡(
upd©e
) *update = 0;

219 
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,&
zmÀn
);

220 i‡(
p
 =
NULL
) {

222 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
+
ªqÀn
);

223 
p
 = 
zm
+
zmÀn
-1;

224 
zmÀn
 = zmÀn+
ªqÀn
;

227 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) zm[0]++;

231 i‡(
upd©e
) *update = 1;

232 
‰ìÀn
 = 
	`zùm≠RawE¡ryLígth
(
p
);

233 i‡(
‰ìÀn
 < 
ªqÀn
) {

237 
off£t
 = 
p
-
zm
;

238 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
-
‰ìÀn
+
ªqÀn
);

239 
p
 = 
zm
+
off£t
;

243 
	`memmove
(
p
+
ªqÀn
,Ö+
‰ìÀn
, 
zmÀn
-(
off£t
+freelen+1));

244 
zmÀn
 = zmÀn-
‰ìÀn
+
ªqÀn
;

245 
‰ìÀn
 = 
ªqÀn
;

253 
em±y
 = 
‰ìÀn
-
ªqÀn
;

254 i‡(
em±y
 >
ZIPMAP_VALUE_MAX_FREE
) {

257 
off£t
 = 
p
-
zm
;

258 
	`memmove
(
p
+
ªqÀn
,Ö+
‰ìÀn
, 
zmÀn
-(
off£t
+freelen+1));

259 
zmÀn
 -
em±y
;

260 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
);

261 
p
 = 
zm
+
off£t
;

262 
vem±y
 = 0;

264 
vem±y
 = 
em±y
;

269 
p
 +
	`zùm≠EncodeLígth
’,
kÀn
);

270 
	`mem˝y
(
p
,
key
,
kÀn
);

271 
p
 +
kÀn
;

273 
p
 +
	`zùm≠EncodeLígth
’,
vÀn
);

274 *
p
++ = 
vem±y
;

275 
	`mem˝y
(
p
,
vÆ
,
vÀn
);

276  
zm
;

277 
	}
}

281 *
	$zùm≠Dñ
(*
zm
, *
key
, 
kÀn
, *
dñëed
) {

282 
zmÀn
, 
‰ìÀn
;

283 *
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,&
zmÀn
);

284 i‡(
p
) {

285 
‰ìÀn
 = 
	`zùm≠RawE¡ryLígth
(
p
);

286 
	`memmove
(
p
,Ö+
‰ìÀn
, 
zmÀn
-(’-
zm
)+freelen+1));

287 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
-
‰ìÀn
);

290 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) zm[0]--;

292 i‡(
dñëed
) *deleted = 1;

294 i‡(
dñëed
) *deleted = 0;

296  
zm
;

297 
	}
}

300 *
	$zùm≠Rewöd
(*
zm
) {

301  
zm
+1;

302 
	}
}

315 *
	$zùm≠Next
(*
zm
, **
key
, *
kÀn
, **
vÆue
, *
vÀn
) {

316 i‡(
zm
[0] =
ZIPMAP_END
Ë 
NULL
;

317 i‡(
key
) {

318 *
key
 = 
zm
;

319 *
kÀn
 = 
	`zùm≠DecodeLígth
(
zm
);

320 *
key
 +
	`ZIPMAP_LEN_BYTES
(*
kÀn
);

322 
zm
 +
	`zùm≠RawKeyLígth
(zm);

323 i‡(
vÆue
) {

324 *
vÆue
 = 
zm
+1;

325 *
vÀn
 = 
	`zùm≠DecodeLígth
(
zm
);

326 *
vÆue
 +
	`ZIPMAP_LEN_BYTES
(*
vÀn
);

328 
zm
 +
	`zùm≠RawVÆueLígth
(zm);

329  
zm
;

330 
	}
}

334 
	$zùm≠Gë
(*
zm
, *
key
, 
kÀn
, **
vÆue
, *
vÀn
) {

335 *
p
;

337 i‡((
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,
NULL
)) == NULL)  0;

338 
p
 +
	`zùm≠RawKeyLígth
(p);

339 *
vÀn
 = 
	`zùm≠DecodeLígth
(
p
);

340 *
vÆue
 = 
p
 + 
	`ZIPMAP_LEN_BYTES
(*
vÀn
) + 1;

342 
	}
}

345 
	$zùm≠Exi°s
(*
zm
, *
key
, 
kÀn
) {

346  
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,
NULL
) != NULL;

347 
	}
}

350 
	$zùm≠Lí
(*
zm
) {

351 
Àn
 = 0;

352 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) {

353 
Àn
 = 
zm
[0];

355 *
p
 = 
	`zùm≠Rewöd
(
zm
);

356 (
p
 = 
	`zùm≠Next
’,
NULL
,NULL,NULL,NULL)Ë!NULLË
Àn
++;

359 i‡(
Àn
 < 
ZIPMAP_BIGLEN
Ë
zm
[0] =Üen;

361  
Àn
;

362 
	}
}

367 
size_t
 
	$zùm≠BlobLí
(*
zm
) {

368 
tŸÀn
;

369 
	`zùm≠LookupRaw
(
zm
,
NULL
,0,&
tŸÀn
);

370  
tŸÀn
;

371 
	}
}

	@src/vr_zipmap.c

78 
	~<°dio.h
>

79 
	~<°rög.h
>

81 
	~<vr_c‹e.h
>

83 
	#ZIPMAP_BIGLEN
 254

	)

84 
	#ZIPMAP_END
 255

	)

88 
	#ZIPMAP_VALUE_MAX_FREE
 4

	)

93 
	#ZIPMAP_LEN_BYTES
(
_l
Ë(((_lË< 
ZIPMAP_BIGLEN
Ë? 1 : ()+1)

	)

96 *
	$zùm≠New
() {

97 *
zm
 = 
	`dÆloc
(2);

99 
zm
[0] = 0;

100 
zm
[1] = 
ZIPMAP_END
;

101  
zm
;

102 
	}
}

105 
	$zùm≠DecodeLígth
(*
p
) {

106 
Àn
 = *
p
;

108 i‡(
Àn
 < 
ZIPMAP_BIGLEN
) Üen;

109 
	`mem˝y
(&
Àn
,
p
+1,());

110 
	`memªv32ifbe
(&
Àn
);

111  
Àn
;

112 
	}
}

116 
	$zùm≠EncodeLígth
(*
p
, 
Àn
) {

117 i‡(
p
 =
NULL
) {

118  
	`ZIPMAP_LEN_BYTES
(
Àn
);

120 i‡(
Àn
 < 
ZIPMAP_BIGLEN
) {

121 
p
[0] = 
Àn
;

124 
p
[0] = 
ZIPMAP_BIGLEN
;

125 
	`mem˝y
(
p
+1,&
Àn
,(len));

126 
	`memªv32ifbe
(
p
+1);

127  1+(
Àn
);

130 
	}
}

138 *
	$zùm≠LookupRaw
(*
zm
, *
key
, 
kÀn
, *
tŸÀn
) {

139 *
p
 = 
zm
+1, *
k
 = 
NULL
;

140 
l
,
Œí
;

142 *
p
 !
ZIPMAP_END
) {

143 
‰ì
;

146 
l
 = 
	`zùm≠DecodeLígth
(
p
);

147 
Œí
 = 
	`zùm≠EncodeLígth
(
NULL
,
l
);

148 i‡(
key
 !
NULL
 && 
k
 =NULL && 
l
 =
kÀn
 && !
	`memcmp
(
p
+
Œí
,key,l)) {

151 i‡(
tŸÀn
 !
NULL
) {

152 
k
 = 
p
;

154  
p
;

157 
p
 +
Œí
+
l
;

159 
l
 = 
	`zùm≠DecodeLígth
(
p
);

160 
p
 +
	`zùm≠EncodeLígth
(
NULL
,
l
);

161 
‰ì
 = 
p
[0];

162 
p
 +
l
+1+
‰ì
;

164 i‡(
tŸÀn
 !
NULL
Ë*tŸÀ¿()(
p
-
zm
)+1;

165  
k
;

166 
	}
}

168 
	$zùm≠RequúedLígth
(
kÀn
, 
vÀn
) {

169 
l
;

171 
l
 = 
kÀn
+
vÀn
+3;

172 i‡(
kÀn
 >
ZIPMAP_BIGLEN
Ë
l
 += 4;

173 i‡(
vÀn
 >
ZIPMAP_BIGLEN
Ë
l
 += 4;

174  
l
;

175 
	}
}

178 
	$zùm≠RawKeyLígth
(*
p
) {

179 
l
 = 
	`zùm≠DecodeLígth
(
p
);

180  
	`zùm≠EncodeLígth
(
NULL
,
l
) +Ü;

181 
	}
}

185 
	$zùm≠RawVÆueLígth
(*
p
) {

186 
l
 = 
	`zùm≠DecodeLígth
(
p
);

187 
u£d
;

189 
u£d
 = 
	`zùm≠EncodeLígth
(
NULL
,
l
);

190 
u£d
 +
p
[u£d] + 1 + 
l
;

191  
u£d
;

192 
	}
}

197 
	$zùm≠RawE¡ryLígth
(*
p
) {

198 
l
 = 
	`zùm≠RawKeyLígth
(
p
);

199  
l
 + 
	`zùm≠RawVÆueLígth
(
p
+l);

200 
	}
}

202 
ölöe
 *
	$zùm≠Resize
(*
zm
, 
Àn
) {

203 
zm
 = 
	`dªÆloc
(zm, 
Àn
);

204 
zm
[
Àn
-1] = 
ZIPMAP_END
;

205  
zm
;

206 
	}
}

211 *
	$zùm≠Së
(*
zm
, *
key
, 
kÀn
, *
vÆ
, 
vÀn
, *
upd©e
) {

212 
zmÀn
, 
off£t
;

213 
‰ìÀn
, 
ªqÀn
 = 
	`zùm≠RequúedLígth
(
kÀn
,
vÀn
);

214 
em±y
, 
vem±y
;

215 *
p
;

217 
‰ìÀn
 = 
ªqÀn
;

218 i‡(
upd©e
) *update = 0;

219 
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,&
zmÀn
);

220 i‡(
p
 =
NULL
) {

222 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
+
ªqÀn
);

223 
p
 = 
zm
+
zmÀn
-1;

224 
zmÀn
 = zmÀn+
ªqÀn
;

227 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) zm[0]++;

231 i‡(
upd©e
) *update = 1;

232 
‰ìÀn
 = 
	`zùm≠RawE¡ryLígth
(
p
);

233 i‡(
‰ìÀn
 < 
ªqÀn
) {

237 
off£t
 = 
p
-
zm
;

238 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
-
‰ìÀn
+
ªqÀn
);

239 
p
 = 
zm
+
off£t
;

243 
	`memmove
(
p
+
ªqÀn
,Ö+
‰ìÀn
, 
zmÀn
-(
off£t
+freelen+1));

244 
zmÀn
 = zmÀn-
‰ìÀn
+
ªqÀn
;

245 
‰ìÀn
 = 
ªqÀn
;

253 
em±y
 = 
‰ìÀn
-
ªqÀn
;

254 i‡(
em±y
 >
ZIPMAP_VALUE_MAX_FREE
) {

257 
off£t
 = 
p
-
zm
;

258 
	`memmove
(
p
+
ªqÀn
,Ö+
‰ìÀn
, 
zmÀn
-(
off£t
+freelen+1));

259 
zmÀn
 -
em±y
;

260 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
);

261 
p
 = 
zm
+
off£t
;

262 
vem±y
 = 0;

264 
vem±y
 = 
em±y
;

269 
p
 +
	`zùm≠EncodeLígth
’,
kÀn
);

270 
	`mem˝y
(
p
,
key
,
kÀn
);

271 
p
 +
kÀn
;

273 
p
 +
	`zùm≠EncodeLígth
’,
vÀn
);

274 *
p
++ = 
vem±y
;

275 
	`mem˝y
(
p
,
vÆ
,
vÀn
);

276  
zm
;

277 
	}
}

281 *
	$zùm≠Dñ
(*
zm
, *
key
, 
kÀn
, *
dñëed
) {

282 
zmÀn
, 
‰ìÀn
;

283 *
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,&
zmÀn
);

284 i‡(
p
) {

285 
‰ìÀn
 = 
	`zùm≠RawE¡ryLígth
(
p
);

286 
	`memmove
(
p
,Ö+
‰ìÀn
, 
zmÀn
-(’-
zm
)+freelen+1));

287 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
-
‰ìÀn
);

290 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) zm[0]--;

292 i‡(
dñëed
) *deleted = 1;

294 i‡(
dñëed
) *deleted = 0;

296  
zm
;

297 
	}
}

300 *
	$zùm≠Rewöd
(*
zm
) {

301  
zm
+1;

302 
	}
}

315 *
	$zùm≠Next
(*
zm
, **
key
, *
kÀn
, **
vÆue
, *
vÀn
) {

316 i‡(
zm
[0] =
ZIPMAP_END
Ë 
NULL
;

317 i‡(
key
) {

318 *
key
 = 
zm
;

319 *
kÀn
 = 
	`zùm≠DecodeLígth
(
zm
);

320 *
key
 +
	`ZIPMAP_LEN_BYTES
(*
kÀn
);

322 
zm
 +
	`zùm≠RawKeyLígth
(zm);

323 i‡(
vÆue
) {

324 *
vÆue
 = 
zm
+1;

325 *
vÀn
 = 
	`zùm≠DecodeLígth
(
zm
);

326 *
vÆue
 +
	`ZIPMAP_LEN_BYTES
(*
vÀn
);

328 
zm
 +
	`zùm≠RawVÆueLígth
(zm);

329  
zm
;

330 
	}
}

334 
	$zùm≠Gë
(*
zm
, *
key
, 
kÀn
, **
vÆue
, *
vÀn
) {

335 *
p
;

337 i‡((
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,
NULL
)) == NULL)  0;

338 
p
 +
	`zùm≠RawKeyLígth
(p);

339 *
vÀn
 = 
	`zùm≠DecodeLígth
(
p
);

340 *
vÆue
 = 
p
 + 
	`ZIPMAP_LEN_BYTES
(*
vÀn
) + 1;

342 
	}
}

345 
	$zùm≠Exi°s
(*
zm
, *
key
, 
kÀn
) {

346  
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,
NULL
) != NULL;

347 
	}
}

350 
	$zùm≠Lí
(*
zm
) {

351 
Àn
 = 0;

352 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) {

353 
Àn
 = 
zm
[0];

355 *
p
 = 
	`zùm≠Rewöd
(
zm
);

356 (
p
 = 
	`zùm≠Next
’,
NULL
,NULL,NULL,NULL)Ë!NULLË
Àn
++;

359 i‡(
Àn
 < 
ZIPMAP_BIGLEN
Ë
zm
[0] =Üen;

361  
Àn
;

362 
	}
}

367 
size_t
 
	$zùm≠BlobLí
(*
zm
) {

368 
tŸÀn
;

369 
	`zùm≠LookupRaw
(
zm
,
NULL
,0,&
tŸÀn
);

370  
tŸÀn
;

371 
	}
}

	@src/vr_zipmap.h

1 #i‚de‡
_ZIPMAP_H


2 
	#_ZIPMAP_H


	)

4 *
zùm≠New
();

5 *
zùm≠Së
(*
zm
, *
key
, 
kÀn
, *
vÆ
, 
vÀn
, *
upd©e
);

6 *
zùm≠Dñ
(*
zm
, *
key
, 
kÀn
, *
dñëed
);

7 *
zùm≠Rewöd
(*
zm
);

8 *
zùm≠Next
(*
zm
, **
key
, *
kÀn
, **
vÆue
, *
vÀn
);

9 
zùm≠Gë
(*
zm
, *
key
, 
kÀn
, **
vÆue
, *
vÀn
);

10 
zùm≠Exi°s
(*
zm
, *
key
, 
kÀn
);

11 
zùm≠Lí
(*
zm
);

12 
size_t
 
zùm≠BlobLí
(*
zm
);

13 
zùm≠Rïr
(*
p
);

	@src/vr_zipmap.h

1 #i‚de‡
_ZIPMAP_H


2 
	#_ZIPMAP_H


	)

4 *
zùm≠New
();

5 *
zùm≠Së
(*
zm
, *
key
, 
kÀn
, *
vÆ
, 
vÀn
, *
upd©e
);

6 *
zùm≠Dñ
(*
zm
, *
key
, 
kÀn
, *
dñëed
);

7 *
zùm≠Rewöd
(*
zm
);

8 *
zùm≠Next
(*
zm
, **
key
, *
kÀn
, **
vÆue
, *
vÀn
);

9 
zùm≠Gë
(*
zm
, *
key
, 
kÀn
, **
vÆue
, *
vÀn
);

10 
zùm≠Exi°s
(*
zm
, *
key
, 
kÀn
);

11 
zùm≠Lí
(*
zm
);

12 
size_t
 
zùm≠BlobLí
(*
zm
);

13 
zùm≠Rïr
(*
p
);

	@tests/vrabtest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<as£π.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<d¨øy.h
>

13 
	~<dlog.h
>

15 
	~<vπ_utû.h
>

16 
	~<vπ_public.h
>

17 
	~<vπ_¥odu˚_d©a.h
>

18 
	~<vπ_di•©ch_d©a.h
>

19 
	~<vπ_check_d©a.h
>

20 
	~<vπ_backíd.h
>

21 
	~<vøbã°.h
>

23 
	#CONFIG_DEFAULT_PIDFILE
 
NULL


	)

24 
	#CONFIG_DEFAULT_CHECKER
 "my£lf"

	)

25 
	#CONFIG_DEFAULT_TEST_INTERVAL
 3600

	)

26 
	#CONFIG_DEFAULT_KEY_LENGTH_RANGE_BEGIN
 0

	)

27 
	#CONFIG_DEFAULT_KEY_LENGTH_RANGE_END
 100

	)

28 
	#CONFIG_DEFAULT_STRING_MAX_LENGTH
 512

	)

29 
	#CONFIG_DEFAULT_FIELDS_MAX_COUNT
 16

	)

30 
	#CONFIG_DEFAULT_TEST_TARGET
 ""

	)

31 
	#CONFIG_DEFAULT_PRODUCE_THREADS_COUNT
 1

	)

32 
	#CONFIG_DEFAULT_CACHED_KEYS_COUNT
 10000

	)

33 
	#CONFIG_DEFAULT_HIT_RATIO
 75

	)

34 
	#CONFIG_DEFAULT_DISPATCH_THREADS_COUNT
 1

	)

35 
	#CONFIG_DEFAULT_CLIENTS_PER_DISPATCH_THREAD
 10

	)

36 
	#CONFIG_DEFAULT_LOGFILE
 
NULL


	)

38 
	#VRABTEST_GROUP_TYPE_REDIS
 0

	)

39 
	#VRABTEST_GROUP_TYPE_VIRE
 1

	)

41 
	sc⁄fig
 {

42 *
	mcheckî
;

43 
	mã°_öãrvÆ
;

44 
	mkey_Àngth_ønge_begö
;

45 
	mkey_Àngth_ønge_íd
;

46 
	m°rög_max_Àngth
;

47 
	mfõlds_max_cou¡
;

48 
	mcmd_ty≥
;

49 
d¨øy
 *
	mcmd_bœckli°
;

50 
d¨øy
 *
	mcmd_whôñi°
;

51 *
	mã°_èrgës
;

52 
	m¥odu˚_d©a_thªads
;

53 
	mˇched_keys_≥r_¥odu˚_thªad
;

54 
	mhô_øtio
;

55 
	mdi•©ch_d©a_thªads
;

56 
	m˛õ¡s_≥r_di•©ch_thªad
;

57 *
	mpid_fûíame
;

58 *
	mlog_fûíame
;

61 
c⁄fig
 
	gc⁄fig
;

63 
	gshow_hñp
;

64 
	gshow_vîsi⁄
;

65 
	gd´m⁄ize
;

70 
	gexpúe_íabÀd
;

74 
	gã°_öãrvÆ
;

78 
	gœ°_ã°_begö_time
;

80 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

81 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

82 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

83 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'D' },

84 { "íabÀ-expúe", 
no_¨gumít
, 
NULL
, 'E' },

85 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'P' },

86 { "checkî", 
ªquúed_¨gumít
, 
NULL
, 'C' },

87 { "ã°-öãrvÆ", 
ªquúed_¨gumít
, 
NULL
, 'i' },

88 { "key-Àngth-ønge", 
ªquúed_¨gumít
, 
NULL
, 'k' },

89 { "°rög-max-Àngth", 
ªquúed_¨gumít
, 
NULL
, 's' },

90 { "fõlds-max-cou¡", 
ªquúed_¨gumít
, 
NULL
, 'f' },

91 { "comm™d-ty≥s", 
ªquúed_¨gumít
, 
NULL
, 'T' },

92 { "comm™d-bœck-li°", 
ªquúed_¨gumít
, 
NULL
, 'B' },

93 { "comm™d-whôe-li°", 
ªquúed_¨gumít
, 
NULL
, 'W' },

94 { "ã°-èrgës", 
ªquúed_¨gumít
, 
NULL
, 't' },

95 { "¥odu˚-d©a-thªads", 
ªquúed_¨gumít
, 
NULL
, 'p' },

96 { "ˇched-keys", 
ªquúed_¨gumít
, 
NULL
, 'K' },

97 { "hô-øtio", 
ªquúed_¨gumít
, 
NULL
, 'H' },

98 { "di•©ch-d©a-thªads", 
ªquúed_¨gumít
, 
NULL
, 'd' },

99 { "˛õ¡s", 
ªquúed_¨gumít
, 
NULL
, 'c' },

100 { "log-fûe", 
ªquúed_¨gumít
, 
NULL
, 'o' },

101 { 
NULL
, 0, NULL, 0 }

104 
	gsh‹t_›ti⁄s
[] = "hVDEP:C:i:k:s:f:T:B:W:t:p:K:H:d:c:o:";

107 
	$vπ_show_ußge
()

109 
	`¥ötf
(

110 "Ußge: vúóbã° [-?hVDE]" 
CRLF


111 "" 
CRLF
);

112 
	`¥ötf
(

113 "O±i⁄s:" 
CRLF


114 " -h, --hñ∞ :Åhi†hñp" 
CRLF


115 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


116 " -D, --d´m⁄izê :Ñu¿a†®d´m⁄" 
CRLF


117 " -E, --íabÀ-expúê :É«bÀÅhêexpúe" 
CRLF
);

118 
	`¥ötf
(

119 " -P, --pid-fûê :Öid fûe" 
CRLF


120 " -C, --checkî :ÅhêcheckîÅÿcheck d©®c⁄si°ícy" 
CRLF


121 " -i, --ã°-öãrvÆ :ÅhêöãrvÆ f‹ checkög d©®c⁄si°ícy, unô i†£c⁄d" 
CRLF


122 " -k, --key-Àngth-øngê :ÅhêkeyÜígthÑ™gêtÿgíî©êf‹Åe°,Üikê0-100" 
CRLF


123 " -s, --°rög-max-Àngth :Åhêmax såögÜígthÅÿgíî©êf‹Åe°, såög i†f‹ STRING/LIST... vÆuêñemít" 
CRLF


124 " -f, --fõlds-max-cou¡ :Åhêmax fõld†cou¡Åÿgíî©êf‹Åe°, fõld i†thêLIST/HASH...'†ñemít" 
CRLF


125 " -T, --comm™d-ty≥† :Åhêcomm™dÅy≥†tÿgíî©êf‹Åe°,Üikê°rög,hash,key" 
CRLF


126 " -B, --comm™d-bœck-li° :Åhêcomm™d†nŸ w™àtÿã°,Üikêdñ,Ã™ge,mgë" 
CRLF


127 " -W, --comm™d-whôe-li° :Åhêcomm™d†⁄lyáŒow†tÿã°,Üikêdñ,Ã™ge,mgë" 
CRLF


128 " -t, --ã°-èrgë† :Åhêã°Å¨gë†f‹Åe°,Üikêvúe[127.0.0.1:12301]-ªdis[127.0.0.1:12311]" 
CRLF


129 " -p, --¥odu˚-d©a-thªad† :Åhêthªad†cou¡Åÿ¥odu˚Åe° d©a" 
CRLF


130 " -K, --ˇched-key† :Åhêˇched key†cou¡ f‹ÉvîyÖrodu˚ d©®thªad" 
CRLF


131 " -H, --hô-øtiÿ :ÅhêhôÑ©iÿf‹Ñód⁄ly comm™ds, bëwì¿0ánd 100" 
CRLF


132 " -d, --di•©ch-d©a-thªad† :Åhêthªad†cou¡Åÿdi•©chÅe° d©®tÿèrgë groups" 
CRLF


133 " -c, --˛õ¡† :Åhê˛õ¡†cou¡ f‹Évîy di•©ch d©®thªad" 
CRLF


134 " -o, --log-fûê : sëÜoggög fûê(deÁu…: %s)" 
CRLF


136 
CONFIG_DEFAULT_LOGFILE
 !
NULL
 ? CONFIG_DEFAULT_LOGFILE : "stderr");

137 
	}
}

140 
	$vπ_£t_deÁu…_›ti⁄s
()

142 
c⁄fig
.
pid_fûíame
 = 
CONFIG_DEFAULT_PIDFILE
;

143 
c⁄fig
.
checkî
 = 
CONFIG_DEFAULT_CHECKER
;

144 
c⁄fig
.
ã°_öãrvÆ
 = 
CONFIG_DEFAULT_TEST_INTERVAL
;

145 
c⁄fig
.
key_Àngth_ønge_begö
 = 
CONFIG_DEFAULT_KEY_LENGTH_RANGE_BEGIN
;

146 
c⁄fig
.
key_Àngth_ønge_íd
 = 
CONFIG_DEFAULT_KEY_LENGTH_RANGE_END
;

147 
c⁄fig
.
°rög_max_Àngth
 = 
CONFIG_DEFAULT_STRING_MAX_LENGTH
;

148 
c⁄fig
.
fõlds_max_cou¡
 = 
CONFIG_DEFAULT_FIELDS_MAX_COUNT
;

149 
c⁄fig
.
cmd_ty≥
 = 
TEST_CMD_TYPE_STRING
|
TEST_CMD_TYPE_LIST
|

150 
TEST_CMD_TYPE_SET
|
TEST_CMD_TYPE_ZSET
|
TEST_CMD_TYPE_HASH
|

151 
TEST_CMD_TYPE_SERVER
|
TEST_CMD_TYPE_KEY
;

152 
c⁄fig
.
cmd_bœckli°
 = 
NULL
;

153 
c⁄fig
.
cmd_whôñi°
 = 
NULL
;

154 
c⁄fig
.
ã°_èrgës
 = 
CONFIG_DEFAULT_TEST_TARGET
;

155 
c⁄fig
.
¥odu˚_d©a_thªads
 = 
CONFIG_DEFAULT_PRODUCE_THREADS_COUNT
;

156 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
 = 
CONFIG_DEFAULT_CACHED_KEYS_COUNT
;

157 
c⁄fig
.
hô_øtio
 = 
CONFIG_DEFAULT_HIT_RATIO
;

158 
c⁄fig
.
di•©ch_d©a_thªads
 = 
CONFIG_DEFAULT_DISPATCH_THREADS_COUNT
;

159 
c⁄fig
.
˛õ¡s_≥r_di•©ch_thªad
 = 
CONFIG_DEFAULT_CLIENTS_PER_DISPATCH_THREAD
;

160 
c⁄fig
.
log_fûíame
 = 
CONFIG_DEFAULT_LOGFILE
;

162 
expúe_íabÀd
 = 0;

163 
	}
}

166 
	$vπ_˛ón_›ti⁄s
()

168 i‡(
c⁄fig
.
cmd_bœckli°
 !
NULL
) {

169 
sds
 *
comm™d
;

170 
	`d¨øy_n
(
c⁄fig
.
cmd_bœckli°
) > 0) {

171 
comm™d
 = 
	`d¨øy_p›
(
c⁄fig
.
cmd_bœckli°
);

172 
	`sds‰ì
(
comm™d
);

174 
	`d¨øy_de°roy
(
c⁄fig
.
cmd_bœckli°
);

175 
c⁄fig
.
cmd_bœckli°
 = 
NULL
;

178 i‡(
c⁄fig
.
cmd_whôñi°
 !
NULL
) {

179 
sds
 *
comm™d
;

180 
	`d¨øy_n
(
c⁄fig
.
cmd_whôñi°
) > 0) {

181 
comm™d
 = 
	`d¨øy_p›
(
c⁄fig
.
cmd_whôñi°
);

182 
	`sds‰ì
(
comm™d
);

184 
	`d¨øy_de°roy
(
c⁄fig
.
cmd_whôñi°
);

185 
c⁄fig
.
cmd_whôñi°
 = 
NULL
;

187 
	}
}

190 
	$vπ_gë_›ti⁄s
(
¨gc
, **
¨gv
)

192 
c
;

193 
lvÆue
;

194 
ŒvÆue
;

195 *
ønge
;

196 
ønge_cou¡
;

198 
›ãº
 = 0;

201 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

202 i‡(
c
 == -1) {

207 
c
) {

209 
show_vîsi⁄
 = 1;

210 
show_hñp
 = 1;

214 
show_vîsi⁄
 = 1;

218 
d´m⁄ize
 = 1;

222 
expúe_íabÀd
 = 1;

226 
c⁄fig
.
checkî
 = 
›èrg
;

230 i‡(
	`°rög2Œ
(
›èrg
,
	`°æí
(›èrg),&
ŒvÆue
) != 1) {

231 
	`log_°dîr
("vireabtest: option -iÑequiresáÇumber");

232  
VRT_ERROR
;

234 
c⁄fig
.
ã°_öãrvÆ
 = 
ŒvÆue
;

238 
ønge
 = 
	`gë_ønge_‰om_°rög
(
›èrg
,
	`°æí
(›èrg),&
ønge_cou¡
);

239 i‡(
ønge
 =
NULL
) {

240 
	`log_°dîr
("vireabtest: option -k is invalid, youÇeed inputáÑangeÜike 0-100");

241  
VRT_ERROR
;

243 
c⁄fig
.
key_Àngth_ønge_begö
 = ()
ønge
[0];

244 i‡(
ønge_cou¡
 =1Ë
c⁄fig
.
key_Àngth_ønge_íd
 = ()
ønge
[0];

245 i‡(
ønge_cou¡
 =2Ë
c⁄fig
.
key_Àngth_ønge_íd
 = ()
ønge
[1];

246 
	`as£π
(0);

248 
	`‰ì
(
ønge
);

253 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

254 
	`log_°dîr
("vireabtest: option -sÑequiresáÇumber");

255  
VRT_ERROR
;

257 
c⁄fig
.
°rög_max_Àngth
 = ()
lvÆue
;

261 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

262 
	`log_°dîr
("vireabtest: option -fÑequiresáÇumber");

263  
VRT_ERROR
;

265 
c⁄fig
.
fõlds_max_cou¡
 = ()
lvÆue
;

269 
c⁄fig
.
cmd_ty≥
 = 
	`∑r£_comm™d_ty≥s
(
›èrg
);

270 i‡(
c⁄fig
.
cmd_ty≥
 <= 0) {

271 
	`log_°dîr
("vireabtest: option -TÑequiresÅhe correct commandÅypes");

272  
VRT_ERROR
;

277 
c⁄fig
.
cmd_bœckli°
 = 
	`∑r£_comm™d_li°
(
›èrg
);

278 i‡(
c⁄fig
.
cmd_bœckli°
 =
NULL
) {

279 
	`log_°dîr
("vireabtest: option -BÑequiresÅhe correct commandÜist");

280  
VRT_ERROR
;

285 
c⁄fig
.
cmd_whôñi°
 = 
	`∑r£_comm™d_li°
(
›èrg
);

286 i‡(
c⁄fig
.
cmd_whôñi°
 =
NULL
) {

287 
	`log_°dîr
("vireabtest: option -WÑequiresÅhe correct commandÜist");

288  
VRT_ERROR
;

293 
c⁄fig
.
ã°_èrgës
 = 
›èrg
;

297 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

298 
	`log_°dîr
("vireabtest: option -pÑequiresáÇumber");

299  
VRT_ERROR
;

301 
c⁄fig
.
¥odu˚_d©a_thªads
 = ()
lvÆue
;

305 i‡(
	`°rög2Œ
(
›èrg
,
	`°æí
(›èrg),&
ŒvÆue
) != 1) {

306 
	`log_°dîr
("vireabtest: option -KÑequiresáÇumber");

307  
VRT_ERROR
;

309 i‡(
ŒvÆue
 < 1000) {

310 
	`log_°dîr
("vireabtest: option -KÑequiresáÇumberÅhat must biggerÅhan 1000");

311  
VRT_ERROR
;

314 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
 = 
ŒvÆue
;

318 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

319 
	`log_°dîr
("vireabtest: option -HÑequiresáÇumber");

320  
VRT_ERROR
;

322 i‡(
lvÆue
 < 0 ||Üvalue > 100) {

323 
	`log_°dîr
("vireabtest: option hit-ratioÇeed between 0ánd 100");

324  
VRT_ERROR
;

326 
c⁄fig
.
hô_øtio
 = ()
lvÆue
;

330 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

331 
	`log_°dîr
("vireabtest: option -dÑequiresáÇumber");

332  
VRT_ERROR
;

334 
c⁄fig
.
di•©ch_d©a_thªads
 = ()
lvÆue
;

338 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

339 
	`log_°dîr
("vireabtest: option -cÑequiresáÇumber");

340  
VRT_ERROR
;

342 
c⁄fig
.
˛õ¡s_≥r_di•©ch_thªad
 = ()
lvÆue
;

346 
c⁄fig
.
pid_fûíame
 = 
›èrg
;

350 
c⁄fig
.
log_fûíame
 = 
›èrg
;

354 
›t›t
) {

363 
	`log_°dîr
("vire: option -%cÑequires string",

364 
›t›t
);

372 
	`log_°dîr
("vire: option -%cÑequiresÇumber",

373 
›t›t
);

377 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

380  
VRT_ERROR
;

383 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

384  
VRT_ERROR
;

389  
VRT_OK
;

390 
	}
}

392 
	$vπ_d´m⁄ize
(
dump_c‹e
)

394 
ªt
;

395 
pid_t
 
pid
, 
sid
;

396 
fd
;

398 
pid
 = 
	`f‹k
();

399 
pid
) {

401 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

402  
VRT_ERROR
;

409 
	`_exô
(0);

414 
sid
 = 
	`£tsid
();

415 i‡(
sid
 < 0) {

416 
	`log_îr‹
("£tsid(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

417  
VRT_ERROR
;

420 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

421 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

422  
VRT_ERROR
;

425 
pid
 = 
	`f‹k
();

426 
pid
) {

428 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

429  
VRT_ERROR
;

436 
	`_exô
(0);

442 i‡(
dump_c‹e
 == 0) {

443 
ªt
 = 
	`chdú
("/");

444 i‡(
ªt
 < 0) {

445 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

446  
VRT_ERROR
;

451 
	`umask
(0);

455 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

456 i‡(
fd
 < 0) {

457 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

458  
VRT_ERROR
;

461 
ªt
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

462 i‡(
ªt
 < 0) {

463 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

464 
	`˛o£
(
fd
);

465  
VRT_ERROR
;

468 
ªt
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

469 i‡(
ªt
 < 0) {

470 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

471 
	`˛o£
(
fd
);

472  
VRT_ERROR
;

475 
ªt
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

476 i‡(
ªt
 < 0) {

477 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

478 
	`˛o£
(
fd
);

479  
VRT_ERROR
;

482 i‡(
fd
 > 
STDERR_FILENO
) {

483 
ªt
 = 
	`˛o£
(
fd
);

484 i‡(
ªt
 < 0) {

485 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

486  
VRT_ERROR
;

490  
VRT_OK
;

491 
	}
}

493 
	$abã°_£rvî_öô
(
abã°_£rvî
 *
abs
, *
addªss
)

495 
sds
 *
ho°_p‹t
;

496 
cou¡
;

497 
vÆue
;

499 
abs
->
ho°
 = 
NULL
;

500 
abs
->
p‹t
 = 0;

501 
abs
->
c⁄n_c⁄ãxts
 = 
NULL
;

502 
abs
->
d©a
 = 
NULL
;

504 
ho°_p‹t
 = 
	`sds•lôÀn
(
addªss
,
	`°æí
◊ddªss),":",1,&
cou¡
);

505 i‡(
ho°_p‹t
 =
NULL
) {

506  
VRT_ERROR
;

507 } i‡(
cou¡
 != 2) {

508 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

509  
VRT_ERROR
;

512 
abs
->
ho°
 = 
ho°_p‹t
[0];

513 
ho°_p‹t
[0] = 
NULL
;

515 i‡(
	`°rög2l
(
ho°_p‹t
[1],
	`sd¶í
(ho°_p‹t[1]),&
vÆue
) != 1) {

516 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

517  
VRT_ERROR
;

520 
abs
->
p‹t
 = ()
vÆue
;

521 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

523  
VRT_OK
;

524 
	}
}

526 
	$abã°_£rvî_deöô
(
abã°_£rvî
 *
abs
)

528 i‡(
abs
->
ho°
) {

529 
	`sds‰ì
(
abs
->
ho°
);

530 
abs
->
ho°
 = 
NULL
;

533 i‡(
abs
->
p‹t
 > 0)ábs->port = 0;

535 i‡(
abs
->
c⁄n_c⁄ãxts
) {

536 
	`ASSERT
(
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) == 0);

537 
	`d¨øy_de°roy
(
abs
->
c⁄n_c⁄ãxts
);

538 
abs
->
c⁄n_c⁄ãxts
 = 
NULL
;

540 
	}
}

542 
	$gë_backíd_£rvî_idx
(
abã°_group
 *
abg
, *
key
, 
size_t
 
keyÀn
)

544 
hashvÆue
, 
£rvîs_cou¡
;

546 
£rvîs_cou¡
 = 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

547 i‡(
£rvîs_cou¡
 == 1) {

551 
hashvÆue
 = ()
	`hash_¸c32a
(
key
, 
keyÀn
);

553  
hashvÆue
%
£rvîs_cou¡
;

554 
	}
}

556 
abã°_£rvî
 *
	$gë_backíd_£rvî
(
abã°_group
 *
abg
, *
key
, 
size_t
 
keyÀn
)

558 
abã°_£rvî
 *
abs
;

559 
idx
;

561 
idx
 = 
abg
->
	`gë_backíd_£rvî_idx
◊bg,
key
,
keyÀn
);

562 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
idx
);

564  
abs
;

565 
	}
}

567 
	$abã°_group_öô
(
abã°_group
 *
abg
, *
group_°rög
)

569 
sds
 *
ty≥_addrs
, *
addrs
;

570 
ty≥_addrs_cou¡
, 
addrs_cou¡
;

571 
j
;

573 
abg
->
ty≥
 = 0;

574 
	`d¨øy_öô
(&
abg
->
abã°_£rvîs
, 1, (
abã°_£rvî
));

576 
ty≥_addrs
 = 
	`sds•lôÀn
(
group_°rög
,
	`sd¶í
(group_°rög),"[",1,&
ty≥_addrs_cou¡
);

577 i‡(
ty≥_addrs
 =
NULL
) {

578  
VRT_ERROR
;

579 } i‡(
ty≥_addrs_cou¡
 != 2) {

580 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

581  
VRT_ERROR
;

584 i‡(!
	`°rˇ£cmp
(
ty≥_addrs
[0],"vire")) {

585 
abg
->
ty≥
 = 
VRABTEST_GROUP_TYPE_VIRE
;

586 } i‡(!
	`°rˇ£cmp
(
ty≥_addrs
[0],"redis")) {

587 
abg
->
ty≥
 = 
VRABTEST_GROUP_TYPE_REDIS
;

589 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

590  
VRT_ERROR
;

593 i‡(
	`sd¶í
(
ty≥_addrs
[1]) <= 1 ||

594 
ty≥_addrs
[1][
	`sd¶í
(type_addrs[1])-1] != ']') {

595 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

596  
VRT_ERROR
;

599 
	`sd§™ge
(
ty≥_addrs
[1],0,-2);

601 
addrs
 = 
	`sds•lôÀn
(
ty≥_addrs
[1],
	`sd¶í
—y≥_addrs[1]),",",1,&
addrs_cou¡
);

602 i‡(
addrs
 =
NULL
) {

603 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

604  
VRT_ERROR
;

605 } i‡(
addrs_cou¡
 < 1) {

606 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

607 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

608  
VRT_ERROR
;

611 
j
 = 0; j < 
addrs_cou¡
; j ++) {

612 
abã°_£rvî
 *
abs
 = 
	`d¨øy_push
(&
abg
->
abã°_£rvîs
);

613 i‡(
	`abã°_£rvî_öô
(
abs
,
addrs
[
j
]Ë!
VRT_OK
) {

614 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

615 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

616  
VRT_ERROR
;

620 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

621 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

623 
abg
->
gë_backíd_£rvî_idx
 = get_backend_server_idx;

624 
abg
->
gë_backíd_£rvî
 = get_backend_server;

626  
VRT_OK
;

627 
	}
}

629 
	$abã°_group_deöô
(
abã°_group
 *
abg
)

631 
abã°_£rvî
 *
abs
;

633 
abg
->
ty≥
 = 0;

635 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
) > 0) {

636 
abs
 = 
	`d¨øy_p›
(&
abg
->
abã°_£rvîs
);

637 
	`abã°_£rvî_deöô
(
abs
);

639 
	`d¨øy_deöô
(&
abg
->
abã°_£rvîs
);

640 
	}
}

643 
d¨øy
 *
	$abã°_groups_¸óã
(*
groups_°rög
)

645 
d¨øy
 *
abgs
;

646 
sds
 *
group_°rögs
;

647 
group_cou¡
, 
j
;

649 
group_°rögs
 = 
	`sds•lôÀn
(
groups_°rög
,
	`°æí
(groups_°rög),"-",1,&
group_cou¡
);

650 i‡(
group_°rögs
 =
NULL
) {

651  
NULL
;

652 } i‡(
group_cou¡
 < 1) {

653 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

654  
NULL
;

657 
abgs
 = 
	`d¨øy_¸óã
(2, (
abã°_group
));

658 i‡(
abgs
 =
NULL
) {

659 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

660  
NULL
;

663 
j
 = 0; j < 
group_cou¡
; j ++) {

664 
abã°_group
 *
abg
;

665 
sds
 
group_°rög
 = 
group_°rögs
[
j
];

666 
sds
 *
ty≥_addrs
;

667 
ñem_cou¡
;

669 
abg
 = 
	`d¨øy_push
(
abgs
);

670 i‡(
	`abã°_group_öô
(
abg
,
group_°rög
Ë!
VRT_OK
) {

671 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

672 
	`abã°_groups_de°roy
(
abgs
);

673  
NULL
;

677  
abgs
;

678 
	}
}

680 
	$abã°_groups_de°roy
(
d¨øy
 *
abgs
)

682 
	`d¨øy_n
(
abgs
) > 0) {

683 
abã°_group
 *
abg
 = 
	`d¨øy_p›
(
abgs
);

684 
	`abã°_group_deöô
(
abg
);

687 
	`d¨øy_de°roy
(
abgs
);

688 
	}
}

691 
	$maö
(
¨gc
, **
¨gv
)

693 
ªt
;

695 
	`vπ_£t_deÁu…_›ti⁄s
();

697 
ªt
 = 
	`vπ_gë_›ti⁄s
(
¨gc
, 
¨gv
);

698 i‡(
ªt
 !
VRT_OK
) {

699 
	`vπ_show_ußge
();

700 
	`exô
(1);

703 i‡(
show_vîsi⁄
) {

704 
	`log_°dout
("Thi†i†vúóbã°-%s", 
VR_VERSION_STRING
);

705 i‡(
show_hñp
) {

706 
	`vπ_show_ußge
();

708 
	`exô
(0);

711 
ªt
 = 
	`log_öô
(
LOG_INFO
, 
c⁄fig
.
log_fûíame
);

712 i‡(
ªt
 < 0) {

713 
	`exô
(1);

716 i‡(
d´m⁄ize
) {

717 
ªt
 = 
	`vπ_d´m⁄ize
(1);

718 i‡(
ªt
 !
VRT_OK
) {

719 
	`exô
(1);

723 
ã°_öãrvÆ
 = 
c⁄fig
.test_interval;

725 
ªt
 = 
	`vπ_¥odu˚_d©a_öô
(
c⁄fig
.
key_Àngth_ønge_begö
,

726 
c⁄fig
.
key_Àngth_ønge_íd
,

727 
c⁄fig
.
°rög_max_Àngth
,c⁄fig.
fõlds_max_cou¡
,

728 
c⁄fig
.
cmd_ty≥
,c⁄fig.
cmd_bœckli°
,c⁄fig.
cmd_whôñi°
,

729 
c⁄fig
.
¥odu˚_d©a_thªads
,

730 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
,

731 
c⁄fig
.
hô_øtio
);

732 i‡(
ªt
 !
VRT_OK
) {

733 
	`log_îr‹
("Init dataÖroducer failed");

734 
	`exô
(1);

736 
ªt
 = 
	`vπ_di•©ch_d©a_öô
(
c⁄fig
.
di•©ch_d©a_thªads
,

737 
c⁄fig
.
ã°_èrgës
, c⁄fig.
˛õ¡s_≥r_di•©ch_thªad
);

738 i‡(
ªt
 !
VRT_OK
) {

739 
	`log_îr‹
("Init data dispatcher failed");

740 
	`exô
(1);

742 
ªt
 = 
	`vπ_backíd_öô
(
c⁄fig
.
di•©ch_d©a_thªads
,

743 
c⁄fig
.
ã°_èrgës
);

744 i‡(
ªt
 !
VRT_OK
) {

745 
	`log_îr‹
("Init backendÅhread failed");

746 
	`exô
(1);

748 
ªt
 = 
	`vπ_d©a_checkî_öô
(
c⁄fig
.
checkî
, c⁄fig.
ã°_èrgës
);

749 i‡(
ªt
 !
VRT_OK
) {

750 
	`log_îr‹
("Init check dataÅhread failed");

751 
	`exô
(1);

754 
	`log_debug
(
LOG_INFO
,"SèãÜockÅy≥: %s", 
TEST_STATE_LOCK_TYPE
);

756 
	`vπ_°¨t_¥odu˚_d©a
();

757 
	`vπ_°¨t_di•©ch_d©a
();

758 
	`vπ_°¨t_backíd
();

759 
	`vπ_°¨t_d©a_checkî
();

761 
	`vπ_waô_¥odu˚_d©a
();

762 
	`vπ_waô_di•©ch_d©a
();

763 
	`vπ_waô_backíd
();

764 
	`vπ_waô_d©a_checkî
();

766 
	`vπ_d©a_checkî_deöô
();

767 
	`vπ_backíd_deöô
();

768 
	`vπ_di•©ch_d©a_deöô
();

769 
	`vπ_¥odu˚_d©a_deöô
();

771 
	`log_deöô
();

772 
	`vπ_˛ón_›ti⁄s
();

774  
VRT_OK
;

775 
	}
}

	@tests/vrabtest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<as£π.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<d¨øy.h
>

13 
	~<dlog.h
>

15 
	~<vπ_utû.h
>

16 
	~<vπ_public.h
>

17 
	~<vπ_¥odu˚_d©a.h
>

18 
	~<vπ_di•©ch_d©a.h
>

19 
	~<vπ_check_d©a.h
>

20 
	~<vπ_backíd.h
>

21 
	~<vøbã°.h
>

23 
	#CONFIG_DEFAULT_PIDFILE
 
NULL


	)

24 
	#CONFIG_DEFAULT_CHECKER
 "my£lf"

	)

25 
	#CONFIG_DEFAULT_TEST_INTERVAL
 3600

	)

26 
	#CONFIG_DEFAULT_KEY_LENGTH_RANGE_BEGIN
 0

	)

27 
	#CONFIG_DEFAULT_KEY_LENGTH_RANGE_END
 100

	)

28 
	#CONFIG_DEFAULT_STRING_MAX_LENGTH
 512

	)

29 
	#CONFIG_DEFAULT_FIELDS_MAX_COUNT
 16

	)

30 
	#CONFIG_DEFAULT_TEST_TARGET
 ""

	)

31 
	#CONFIG_DEFAULT_PRODUCE_THREADS_COUNT
 1

	)

32 
	#CONFIG_DEFAULT_CACHED_KEYS_COUNT
 10000

	)

33 
	#CONFIG_DEFAULT_HIT_RATIO
 75

	)

34 
	#CONFIG_DEFAULT_DISPATCH_THREADS_COUNT
 1

	)

35 
	#CONFIG_DEFAULT_CLIENTS_PER_DISPATCH_THREAD
 10

	)

36 
	#CONFIG_DEFAULT_LOGFILE
 
NULL


	)

38 
	#VRABTEST_GROUP_TYPE_REDIS
 0

	)

39 
	#VRABTEST_GROUP_TYPE_VIRE
 1

	)

41 
	sc⁄fig
 {

42 *
	mcheckî
;

43 
	mã°_öãrvÆ
;

44 
	mkey_Àngth_ønge_begö
;

45 
	mkey_Àngth_ønge_íd
;

46 
	m°rög_max_Àngth
;

47 
	mfõlds_max_cou¡
;

48 
	mcmd_ty≥
;

49 
d¨øy
 *
	mcmd_bœckli°
;

50 
d¨øy
 *
	mcmd_whôñi°
;

51 *
	mã°_èrgës
;

52 
	m¥odu˚_d©a_thªads
;

53 
	mˇched_keys_≥r_¥odu˚_thªad
;

54 
	mhô_øtio
;

55 
	mdi•©ch_d©a_thªads
;

56 
	m˛õ¡s_≥r_di•©ch_thªad
;

57 *
	mpid_fûíame
;

58 *
	mlog_fûíame
;

61 
c⁄fig
 
	gc⁄fig
;

63 
	gshow_hñp
;

64 
	gshow_vîsi⁄
;

65 
	gd´m⁄ize
;

70 
	gexpúe_íabÀd
;

74 
	gã°_öãrvÆ
;

78 
	gœ°_ã°_begö_time
;

80 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

81 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

82 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

83 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'D' },

84 { "íabÀ-expúe", 
no_¨gumít
, 
NULL
, 'E' },

85 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'P' },

86 { "checkî", 
ªquúed_¨gumít
, 
NULL
, 'C' },

87 { "ã°-öãrvÆ", 
ªquúed_¨gumít
, 
NULL
, 'i' },

88 { "key-Àngth-ønge", 
ªquúed_¨gumít
, 
NULL
, 'k' },

89 { "°rög-max-Àngth", 
ªquúed_¨gumít
, 
NULL
, 's' },

90 { "fõlds-max-cou¡", 
ªquúed_¨gumít
, 
NULL
, 'f' },

91 { "comm™d-ty≥s", 
ªquúed_¨gumít
, 
NULL
, 'T' },

92 { "comm™d-bœck-li°", 
ªquúed_¨gumít
, 
NULL
, 'B' },

93 { "comm™d-whôe-li°", 
ªquúed_¨gumít
, 
NULL
, 'W' },

94 { "ã°-èrgës", 
ªquúed_¨gumít
, 
NULL
, 't' },

95 { "¥odu˚-d©a-thªads", 
ªquúed_¨gumít
, 
NULL
, 'p' },

96 { "ˇched-keys", 
ªquúed_¨gumít
, 
NULL
, 'K' },

97 { "hô-øtio", 
ªquúed_¨gumít
, 
NULL
, 'H' },

98 { "di•©ch-d©a-thªads", 
ªquúed_¨gumít
, 
NULL
, 'd' },

99 { "˛õ¡s", 
ªquúed_¨gumít
, 
NULL
, 'c' },

100 { "log-fûe", 
ªquúed_¨gumít
, 
NULL
, 'o' },

101 { 
NULL
, 0, NULL, 0 }

104 
	gsh‹t_›ti⁄s
[] = "hVDEP:C:i:k:s:f:T:B:W:t:p:K:H:d:c:o:";

107 
	$vπ_show_ußge
()

109 
	`¥ötf
(

110 "Ußge: vúóbã° [-?hVDE]" 
CRLF


111 "" 
CRLF
);

112 
	`¥ötf
(

113 "O±i⁄s:" 
CRLF


114 " -h, --hñ∞ :Åhi†hñp" 
CRLF


115 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


116 " -D, --d´m⁄izê :Ñu¿a†®d´m⁄" 
CRLF


117 " -E, --íabÀ-expúê :É«bÀÅhêexpúe" 
CRLF
);

118 
	`¥ötf
(

119 " -P, --pid-fûê :Öid fûe" 
CRLF


120 " -C, --checkî :ÅhêcheckîÅÿcheck d©®c⁄si°ícy" 
CRLF


121 " -i, --ã°-öãrvÆ :ÅhêöãrvÆ f‹ checkög d©®c⁄si°ícy, unô i†£c⁄d" 
CRLF


122 " -k, --key-Àngth-øngê :ÅhêkeyÜígthÑ™gêtÿgíî©êf‹Åe°,Üikê0-100" 
CRLF


123 " -s, --°rög-max-Àngth :Åhêmax såögÜígthÅÿgíî©êf‹Åe°, såög i†f‹ STRING/LIST... vÆuêñemít" 
CRLF


124 " -f, --fõlds-max-cou¡ :Åhêmax fõld†cou¡Åÿgíî©êf‹Åe°, fõld i†thêLIST/HASH...'†ñemít" 
CRLF


125 " -T, --comm™d-ty≥† :Åhêcomm™dÅy≥†tÿgíî©êf‹Åe°,Üikê°rög,hash,key" 
CRLF


126 " -B, --comm™d-bœck-li° :Åhêcomm™d†nŸ w™àtÿã°,Üikêdñ,Ã™ge,mgë" 
CRLF


127 " -W, --comm™d-whôe-li° :Åhêcomm™d†⁄lyáŒow†tÿã°,Üikêdñ,Ã™ge,mgë" 
CRLF


128 " -t, --ã°-èrgë† :Åhêã°Å¨gë†f‹Åe°,Üikêvúe[127.0.0.1:12301]-ªdis[127.0.0.1:12311]" 
CRLF


129 " -p, --¥odu˚-d©a-thªad† :Åhêthªad†cou¡Åÿ¥odu˚Åe° d©a" 
CRLF


130 " -K, --ˇched-key† :Åhêˇched key†cou¡ f‹ÉvîyÖrodu˚ d©®thªad" 
CRLF


131 " -H, --hô-øtiÿ :ÅhêhôÑ©iÿf‹Ñód⁄ly comm™ds, bëwì¿0ánd 100" 
CRLF


132 " -d, --di•©ch-d©a-thªad† :Åhêthªad†cou¡Åÿdi•©chÅe° d©®tÿèrgë groups" 
CRLF


133 " -c, --˛õ¡† :Åhê˛õ¡†cou¡ f‹Évîy di•©ch d©®thªad" 
CRLF


134 " -o, --log-fûê : sëÜoggög fûê(deÁu…: %s)" 
CRLF


136 
CONFIG_DEFAULT_LOGFILE
 !
NULL
 ? CONFIG_DEFAULT_LOGFILE : "stderr");

137 
	}
}

140 
	$vπ_£t_deÁu…_›ti⁄s
()

142 
c⁄fig
.
pid_fûíame
 = 
CONFIG_DEFAULT_PIDFILE
;

143 
c⁄fig
.
checkî
 = 
CONFIG_DEFAULT_CHECKER
;

144 
c⁄fig
.
ã°_öãrvÆ
 = 
CONFIG_DEFAULT_TEST_INTERVAL
;

145 
c⁄fig
.
key_Àngth_ønge_begö
 = 
CONFIG_DEFAULT_KEY_LENGTH_RANGE_BEGIN
;

146 
c⁄fig
.
key_Àngth_ønge_íd
 = 
CONFIG_DEFAULT_KEY_LENGTH_RANGE_END
;

147 
c⁄fig
.
°rög_max_Àngth
 = 
CONFIG_DEFAULT_STRING_MAX_LENGTH
;

148 
c⁄fig
.
fõlds_max_cou¡
 = 
CONFIG_DEFAULT_FIELDS_MAX_COUNT
;

149 
c⁄fig
.
cmd_ty≥
 = 
TEST_CMD_TYPE_STRING
|
TEST_CMD_TYPE_LIST
|

150 
TEST_CMD_TYPE_SET
|
TEST_CMD_TYPE_ZSET
|
TEST_CMD_TYPE_HASH
|

151 
TEST_CMD_TYPE_SERVER
|
TEST_CMD_TYPE_KEY
;

152 
c⁄fig
.
cmd_bœckli°
 = 
NULL
;

153 
c⁄fig
.
cmd_whôñi°
 = 
NULL
;

154 
c⁄fig
.
ã°_èrgës
 = 
CONFIG_DEFAULT_TEST_TARGET
;

155 
c⁄fig
.
¥odu˚_d©a_thªads
 = 
CONFIG_DEFAULT_PRODUCE_THREADS_COUNT
;

156 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
 = 
CONFIG_DEFAULT_CACHED_KEYS_COUNT
;

157 
c⁄fig
.
hô_øtio
 = 
CONFIG_DEFAULT_HIT_RATIO
;

158 
c⁄fig
.
di•©ch_d©a_thªads
 = 
CONFIG_DEFAULT_DISPATCH_THREADS_COUNT
;

159 
c⁄fig
.
˛õ¡s_≥r_di•©ch_thªad
 = 
CONFIG_DEFAULT_CLIENTS_PER_DISPATCH_THREAD
;

160 
c⁄fig
.
log_fûíame
 = 
CONFIG_DEFAULT_LOGFILE
;

162 
expúe_íabÀd
 = 0;

163 
	}
}

166 
	$vπ_˛ón_›ti⁄s
()

168 i‡(
c⁄fig
.
cmd_bœckli°
 !
NULL
) {

169 
sds
 *
comm™d
;

170 
	`d¨øy_n
(
c⁄fig
.
cmd_bœckli°
) > 0) {

171 
comm™d
 = 
	`d¨øy_p›
(
c⁄fig
.
cmd_bœckli°
);

172 
	`sds‰ì
(
comm™d
);

174 
	`d¨øy_de°roy
(
c⁄fig
.
cmd_bœckli°
);

175 
c⁄fig
.
cmd_bœckli°
 = 
NULL
;

178 i‡(
c⁄fig
.
cmd_whôñi°
 !
NULL
) {

179 
sds
 *
comm™d
;

180 
	`d¨øy_n
(
c⁄fig
.
cmd_whôñi°
) > 0) {

181 
comm™d
 = 
	`d¨øy_p›
(
c⁄fig
.
cmd_whôñi°
);

182 
	`sds‰ì
(
comm™d
);

184 
	`d¨øy_de°roy
(
c⁄fig
.
cmd_whôñi°
);

185 
c⁄fig
.
cmd_whôñi°
 = 
NULL
;

187 
	}
}

190 
	$vπ_gë_›ti⁄s
(
¨gc
, **
¨gv
)

192 
c
;

193 
lvÆue
;

194 
ŒvÆue
;

195 *
ønge
;

196 
ønge_cou¡
;

198 
›ãº
 = 0;

201 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

202 i‡(
c
 == -1) {

207 
c
) {

209 
show_vîsi⁄
 = 1;

210 
show_hñp
 = 1;

214 
show_vîsi⁄
 = 1;

218 
d´m⁄ize
 = 1;

222 
expúe_íabÀd
 = 1;

226 
c⁄fig
.
checkî
 = 
›èrg
;

230 i‡(
	`°rög2Œ
(
›èrg
,
	`°æí
(›èrg),&
ŒvÆue
) != 1) {

231 
	`log_°dîr
("vireabtest: option -iÑequiresáÇumber");

232  
VRT_ERROR
;

234 
c⁄fig
.
ã°_öãrvÆ
 = 
ŒvÆue
;

238 
ønge
 = 
	`gë_ønge_‰om_°rög
(
›èrg
,
	`°æí
(›èrg),&
ønge_cou¡
);

239 i‡(
ønge
 =
NULL
) {

240 
	`log_°dîr
("vireabtest: option -k is invalid, youÇeed inputáÑangeÜike 0-100");

241  
VRT_ERROR
;

243 
c⁄fig
.
key_Àngth_ønge_begö
 = ()
ønge
[0];

244 i‡(
ønge_cou¡
 =1Ë
c⁄fig
.
key_Àngth_ønge_íd
 = ()
ønge
[0];

245 i‡(
ønge_cou¡
 =2Ë
c⁄fig
.
key_Àngth_ønge_íd
 = ()
ønge
[1];

246 
	`as£π
(0);

248 
	`‰ì
(
ønge
);

253 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

254 
	`log_°dîr
("vireabtest: option -sÑequiresáÇumber");

255  
VRT_ERROR
;

257 
c⁄fig
.
°rög_max_Àngth
 = ()
lvÆue
;

261 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

262 
	`log_°dîr
("vireabtest: option -fÑequiresáÇumber");

263  
VRT_ERROR
;

265 
c⁄fig
.
fõlds_max_cou¡
 = ()
lvÆue
;

269 
c⁄fig
.
cmd_ty≥
 = 
	`∑r£_comm™d_ty≥s
(
›èrg
);

270 i‡(
c⁄fig
.
cmd_ty≥
 <= 0) {

271 
	`log_°dîr
("vireabtest: option -TÑequiresÅhe correct commandÅypes");

272  
VRT_ERROR
;

277 
c⁄fig
.
cmd_bœckli°
 = 
	`∑r£_comm™d_li°
(
›èrg
);

278 i‡(
c⁄fig
.
cmd_bœckli°
 =
NULL
) {

279 
	`log_°dîr
("vireabtest: option -BÑequiresÅhe correct commandÜist");

280  
VRT_ERROR
;

285 
c⁄fig
.
cmd_whôñi°
 = 
	`∑r£_comm™d_li°
(
›èrg
);

286 i‡(
c⁄fig
.
cmd_whôñi°
 =
NULL
) {

287 
	`log_°dîr
("vireabtest: option -WÑequiresÅhe correct commandÜist");

288  
VRT_ERROR
;

293 
c⁄fig
.
ã°_èrgës
 = 
›èrg
;

297 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

298 
	`log_°dîr
("vireabtest: option -pÑequiresáÇumber");

299  
VRT_ERROR
;

301 
c⁄fig
.
¥odu˚_d©a_thªads
 = ()
lvÆue
;

305 i‡(
	`°rög2Œ
(
›èrg
,
	`°æí
(›èrg),&
ŒvÆue
) != 1) {

306 
	`log_°dîr
("vireabtest: option -KÑequiresáÇumber");

307  
VRT_ERROR
;

309 i‡(
ŒvÆue
 < 1000) {

310 
	`log_°dîr
("vireabtest: option -KÑequiresáÇumberÅhat must biggerÅhan 1000");

311  
VRT_ERROR
;

314 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
 = 
ŒvÆue
;

318 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

319 
	`log_°dîr
("vireabtest: option -HÑequiresáÇumber");

320  
VRT_ERROR
;

322 i‡(
lvÆue
 < 0 ||Üvalue > 100) {

323 
	`log_°dîr
("vireabtest: option hit-ratioÇeed between 0ánd 100");

324  
VRT_ERROR
;

326 
c⁄fig
.
hô_øtio
 = ()
lvÆue
;

330 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

331 
	`log_°dîr
("vireabtest: option -dÑequiresáÇumber");

332  
VRT_ERROR
;

334 
c⁄fig
.
di•©ch_d©a_thªads
 = ()
lvÆue
;

338 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

339 
	`log_°dîr
("vireabtest: option -cÑequiresáÇumber");

340  
VRT_ERROR
;

342 
c⁄fig
.
˛õ¡s_≥r_di•©ch_thªad
 = ()
lvÆue
;

346 
c⁄fig
.
pid_fûíame
 = 
›èrg
;

350 
c⁄fig
.
log_fûíame
 = 
›èrg
;

354 
›t›t
) {

363 
	`log_°dîr
("vire: option -%cÑequires string",

364 
›t›t
);

372 
	`log_°dîr
("vire: option -%cÑequiresÇumber",

373 
›t›t
);

377 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

380  
VRT_ERROR
;

383 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

384  
VRT_ERROR
;

389  
VRT_OK
;

390 
	}
}

392 
	$vπ_d´m⁄ize
(
dump_c‹e
)

394 
ªt
;

395 
pid_t
 
pid
, 
sid
;

396 
fd
;

398 
pid
 = 
	`f‹k
();

399 
pid
) {

401 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

402  
VRT_ERROR
;

409 
	`_exô
(0);

414 
sid
 = 
	`£tsid
();

415 i‡(
sid
 < 0) {

416 
	`log_îr‹
("£tsid(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

417  
VRT_ERROR
;

420 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

421 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

422  
VRT_ERROR
;

425 
pid
 = 
	`f‹k
();

426 
pid
) {

428 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

429  
VRT_ERROR
;

436 
	`_exô
(0);

442 i‡(
dump_c‹e
 == 0) {

443 
ªt
 = 
	`chdú
("/");

444 i‡(
ªt
 < 0) {

445 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

446  
VRT_ERROR
;

451 
	`umask
(0);

455 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

456 i‡(
fd
 < 0) {

457 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

458  
VRT_ERROR
;

461 
ªt
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

462 i‡(
ªt
 < 0) {

463 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

464 
	`˛o£
(
fd
);

465  
VRT_ERROR
;

468 
ªt
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

469 i‡(
ªt
 < 0) {

470 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

471 
	`˛o£
(
fd
);

472  
VRT_ERROR
;

475 
ªt
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

476 i‡(
ªt
 < 0) {

477 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

478 
	`˛o£
(
fd
);

479  
VRT_ERROR
;

482 i‡(
fd
 > 
STDERR_FILENO
) {

483 
ªt
 = 
	`˛o£
(
fd
);

484 i‡(
ªt
 < 0) {

485 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

486  
VRT_ERROR
;

490  
VRT_OK
;

491 
	}
}

493 
	$abã°_£rvî_öô
(
abã°_£rvî
 *
abs
, *
addªss
)

495 
sds
 *
ho°_p‹t
;

496 
cou¡
;

497 
vÆue
;

499 
abs
->
ho°
 = 
NULL
;

500 
abs
->
p‹t
 = 0;

501 
abs
->
c⁄n_c⁄ãxts
 = 
NULL
;

502 
abs
->
d©a
 = 
NULL
;

504 
ho°_p‹t
 = 
	`sds•lôÀn
(
addªss
,
	`°æí
◊ddªss),":",1,&
cou¡
);

505 i‡(
ho°_p‹t
 =
NULL
) {

506  
VRT_ERROR
;

507 } i‡(
cou¡
 != 2) {

508 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

509  
VRT_ERROR
;

512 
abs
->
ho°
 = 
ho°_p‹t
[0];

513 
ho°_p‹t
[0] = 
NULL
;

515 i‡(
	`°rög2l
(
ho°_p‹t
[1],
	`sd¶í
(ho°_p‹t[1]),&
vÆue
) != 1) {

516 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

517  
VRT_ERROR
;

520 
abs
->
p‹t
 = ()
vÆue
;

521 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

523  
VRT_OK
;

524 
	}
}

526 
	$abã°_£rvî_deöô
(
abã°_£rvî
 *
abs
)

528 i‡(
abs
->
ho°
) {

529 
	`sds‰ì
(
abs
->
ho°
);

530 
abs
->
ho°
 = 
NULL
;

533 i‡(
abs
->
p‹t
 > 0)ábs->port = 0;

535 i‡(
abs
->
c⁄n_c⁄ãxts
) {

536 
	`ASSERT
(
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) == 0);

537 
	`d¨øy_de°roy
(
abs
->
c⁄n_c⁄ãxts
);

538 
abs
->
c⁄n_c⁄ãxts
 = 
NULL
;

540 
	}
}

542 
	$gë_backíd_£rvî_idx
(
abã°_group
 *
abg
, *
key
, 
size_t
 
keyÀn
)

544 
hashvÆue
, 
£rvîs_cou¡
;

546 
£rvîs_cou¡
 = 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

547 i‡(
£rvîs_cou¡
 == 1) {

551 
hashvÆue
 = ()
	`hash_¸c32a
(
key
, 
keyÀn
);

553  
hashvÆue
%
£rvîs_cou¡
;

554 
	}
}

556 
abã°_£rvî
 *
	$gë_backíd_£rvî
(
abã°_group
 *
abg
, *
key
, 
size_t
 
keyÀn
)

558 
abã°_£rvî
 *
abs
;

559 
idx
;

561 
idx
 = 
abg
->
	`gë_backíd_£rvî_idx
◊bg,
key
,
keyÀn
);

562 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
idx
);

564  
abs
;

565 
	}
}

567 
	$abã°_group_öô
(
abã°_group
 *
abg
, *
group_°rög
)

569 
sds
 *
ty≥_addrs
, *
addrs
;

570 
ty≥_addrs_cou¡
, 
addrs_cou¡
;

571 
j
;

573 
abg
->
ty≥
 = 0;

574 
	`d¨øy_öô
(&
abg
->
abã°_£rvîs
, 1, (
abã°_£rvî
));

576 
ty≥_addrs
 = 
	`sds•lôÀn
(
group_°rög
,
	`sd¶í
(group_°rög),"[",1,&
ty≥_addrs_cou¡
);

577 i‡(
ty≥_addrs
 =
NULL
) {

578  
VRT_ERROR
;

579 } i‡(
ty≥_addrs_cou¡
 != 2) {

580 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

581  
VRT_ERROR
;

584 i‡(!
	`°rˇ£cmp
(
ty≥_addrs
[0],"vire")) {

585 
abg
->
ty≥
 = 
VRABTEST_GROUP_TYPE_VIRE
;

586 } i‡(!
	`°rˇ£cmp
(
ty≥_addrs
[0],"redis")) {

587 
abg
->
ty≥
 = 
VRABTEST_GROUP_TYPE_REDIS
;

589 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

590  
VRT_ERROR
;

593 i‡(
	`sd¶í
(
ty≥_addrs
[1]) <= 1 ||

594 
ty≥_addrs
[1][
	`sd¶í
(type_addrs[1])-1] != ']') {

595 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

596  
VRT_ERROR
;

599 
	`sd§™ge
(
ty≥_addrs
[1],0,-2);

601 
addrs
 = 
	`sds•lôÀn
(
ty≥_addrs
[1],
	`sd¶í
—y≥_addrs[1]),",",1,&
addrs_cou¡
);

602 i‡(
addrs
 =
NULL
) {

603 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

604  
VRT_ERROR
;

605 } i‡(
addrs_cou¡
 < 1) {

606 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

607 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

608  
VRT_ERROR
;

611 
j
 = 0; j < 
addrs_cou¡
; j ++) {

612 
abã°_£rvî
 *
abs
 = 
	`d¨øy_push
(&
abg
->
abã°_£rvîs
);

613 i‡(
	`abã°_£rvî_öô
(
abs
,
addrs
[
j
]Ë!
VRT_OK
) {

614 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

615 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

616  
VRT_ERROR
;

620 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

621 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

623 
abg
->
gë_backíd_£rvî_idx
 = get_backend_server_idx;

624 
abg
->
gë_backíd_£rvî
 = get_backend_server;

626  
VRT_OK
;

627 
	}
}

629 
	$abã°_group_deöô
(
abã°_group
 *
abg
)

631 
abã°_£rvî
 *
abs
;

633 
abg
->
ty≥
 = 0;

635 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
) > 0) {

636 
abs
 = 
	`d¨øy_p›
(&
abg
->
abã°_£rvîs
);

637 
	`abã°_£rvî_deöô
(
abs
);

639 
	`d¨øy_deöô
(&
abg
->
abã°_£rvîs
);

640 
	}
}

643 
d¨øy
 *
	$abã°_groups_¸óã
(*
groups_°rög
)

645 
d¨øy
 *
abgs
;

646 
sds
 *
group_°rögs
;

647 
group_cou¡
, 
j
;

649 
group_°rögs
 = 
	`sds•lôÀn
(
groups_°rög
,
	`°æí
(groups_°rög),"-",1,&
group_cou¡
);

650 i‡(
group_°rögs
 =
NULL
) {

651  
NULL
;

652 } i‡(
group_cou¡
 < 1) {

653 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

654  
NULL
;

657 
abgs
 = 
	`d¨øy_¸óã
(2, (
abã°_group
));

658 i‡(
abgs
 =
NULL
) {

659 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

660  
NULL
;

663 
j
 = 0; j < 
group_cou¡
; j ++) {

664 
abã°_group
 *
abg
;

665 
sds
 
group_°rög
 = 
group_°rögs
[
j
];

666 
sds
 *
ty≥_addrs
;

667 
ñem_cou¡
;

669 
abg
 = 
	`d¨øy_push
(
abgs
);

670 i‡(
	`abã°_group_öô
(
abg
,
group_°rög
Ë!
VRT_OK
) {

671 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

672 
	`abã°_groups_de°roy
(
abgs
);

673  
NULL
;

677  
abgs
;

678 
	}
}

680 
	$abã°_groups_de°roy
(
d¨øy
 *
abgs
)

682 
	`d¨øy_n
(
abgs
) > 0) {

683 
abã°_group
 *
abg
 = 
	`d¨øy_p›
(
abgs
);

684 
	`abã°_group_deöô
(
abg
);

687 
	`d¨øy_de°roy
(
abgs
);

688 
	}
}

691 
	$maö
(
¨gc
, **
¨gv
)

693 
ªt
;

695 
	`vπ_£t_deÁu…_›ti⁄s
();

697 
ªt
 = 
	`vπ_gë_›ti⁄s
(
¨gc
, 
¨gv
);

698 i‡(
ªt
 !
VRT_OK
) {

699 
	`vπ_show_ußge
();

700 
	`exô
(1);

703 i‡(
show_vîsi⁄
) {

704 
	`log_°dout
("Thi†i†vúóbã°-%s", 
VR_VERSION_STRING
);

705 i‡(
show_hñp
) {

706 
	`vπ_show_ußge
();

708 
	`exô
(0);

711 
ªt
 = 
	`log_öô
(
LOG_INFO
, 
c⁄fig
.
log_fûíame
);

712 i‡(
ªt
 < 0) {

713 
	`exô
(1);

716 i‡(
d´m⁄ize
) {

717 
ªt
 = 
	`vπ_d´m⁄ize
(1);

718 i‡(
ªt
 !
VRT_OK
) {

719 
	`exô
(1);

723 
ã°_öãrvÆ
 = 
c⁄fig
.test_interval;

725 
ªt
 = 
	`vπ_¥odu˚_d©a_öô
(
c⁄fig
.
key_Àngth_ønge_begö
,

726 
c⁄fig
.
key_Àngth_ønge_íd
,

727 
c⁄fig
.
°rög_max_Àngth
,c⁄fig.
fõlds_max_cou¡
,

728 
c⁄fig
.
cmd_ty≥
,c⁄fig.
cmd_bœckli°
,c⁄fig.
cmd_whôñi°
,

729 
c⁄fig
.
¥odu˚_d©a_thªads
,

730 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
,

731 
c⁄fig
.
hô_øtio
);

732 i‡(
ªt
 !
VRT_OK
) {

733 
	`log_îr‹
("Init dataÖroducer failed");

734 
	`exô
(1);

736 
ªt
 = 
	`vπ_di•©ch_d©a_öô
(
c⁄fig
.
di•©ch_d©a_thªads
,

737 
c⁄fig
.
ã°_èrgës
, c⁄fig.
˛õ¡s_≥r_di•©ch_thªad
);

738 i‡(
ªt
 !
VRT_OK
) {

739 
	`log_îr‹
("Init data dispatcher failed");

740 
	`exô
(1);

742 
ªt
 = 
	`vπ_backíd_öô
(
c⁄fig
.
di•©ch_d©a_thªads
,

743 
c⁄fig
.
ã°_èrgës
);

744 i‡(
ªt
 !
VRT_OK
) {

745 
	`log_îr‹
("Init backendÅhread failed");

746 
	`exô
(1);

748 
ªt
 = 
	`vπ_d©a_checkî_öô
(
c⁄fig
.
checkî
, c⁄fig.
ã°_èrgës
);

749 i‡(
ªt
 !
VRT_OK
) {

750 
	`log_îr‹
("Init check dataÅhread failed");

751 
	`exô
(1);

754 
	`log_debug
(
LOG_INFO
,"SèãÜockÅy≥: %s", 
TEST_STATE_LOCK_TYPE
);

756 
	`vπ_°¨t_¥odu˚_d©a
();

757 
	`vπ_°¨t_di•©ch_d©a
();

758 
	`vπ_°¨t_backíd
();

759 
	`vπ_°¨t_d©a_checkî
();

761 
	`vπ_waô_¥odu˚_d©a
();

762 
	`vπ_waô_di•©ch_d©a
();

763 
	`vπ_waô_backíd
();

764 
	`vπ_waô_d©a_checkî
();

766 
	`vπ_d©a_checkî_deöô
();

767 
	`vπ_backíd_deöô
();

768 
	`vπ_di•©ch_d©a_deöô
();

769 
	`vπ_¥odu˚_d©a_deöô
();

771 
	`log_deöô
();

772 
	`vπ_˛ón_›ti⁄s
();

774  
VRT_OK
;

775 
	}
}

	@tests/vrabtest.h

1 #i‚de‡
_VRABTEST_H_


2 
	#_VRABTEST_H_


	)

4 
	~<d¨øy.h
>

6 
	gªdisC⁄ãxt
;

7 
	gªdisAsyncC⁄ãxt
;

8 
	gabã°_group
;

10 
	sc⁄n_c⁄ãxt
 {

11 
ªdisC⁄ãxt
 *
	m˘x
;

12 
ªdisAsyncC⁄ãxt
 *
	ma˘x
;

13 } 
	tc⁄n_c⁄ãxt
;

15 
	sabã°_£rvî
 {

16 
sds
 
	mho°
;

17 
	mp‹t
;

19 
d¨øy
 *
	mc⁄n_c⁄ãxts
;

21 *
	md©a
;

22 } 
	tabã°_£rvî
;

24 (*
	tbackíd_£rvî_idx_t
)(
	tabã°_group
*, *, 
	tsize_t
);

25 
abã°_£rvî
 *(*
	tbackíd_£rvî_t
)(
	tabã°_group
*, *, 
	tsize_t
);

27 
	sabã°_group
 {

28 
ty≥
;

30 
d¨øy
 
abã°_£rvîs
;

32 
backíd_£rvî_idx_t
 
gë_backíd_£rvî_idx
;

33 
backíd_£rvî_t
 
gë_backíd_£rvî
;

34 } 
	tabã°_group
;

36 
expúe_íabÀd
;

37 
ã°_öãrvÆ
;

38 
œ°_ã°_begö_time
;

40 
d¨øy
 *
	`abã°_groups_¸óã
(*
groups_°rög
);

41 
	`abã°_groups_de°roy
(
d¨øy
 *
abgs
);

	@tests/vrabtest.h

1 #i‚de‡
_VRABTEST_H_


2 
	#_VRABTEST_H_


	)

4 
	~<d¨øy.h
>

6 
	gªdisC⁄ãxt
;

7 
	gªdisAsyncC⁄ãxt
;

8 
	gabã°_group
;

10 
	sc⁄n_c⁄ãxt
 {

11 
ªdisC⁄ãxt
 *
	m˘x
;

12 
ªdisAsyncC⁄ãxt
 *
	ma˘x
;

13 } 
	tc⁄n_c⁄ãxt
;

15 
	sabã°_£rvî
 {

16 
sds
 
	mho°
;

17 
	mp‹t
;

19 
d¨øy
 *
	mc⁄n_c⁄ãxts
;

21 *
	md©a
;

22 } 
	tabã°_£rvî
;

24 (*
	tbackíd_£rvî_idx_t
)(
	tabã°_group
*, *, 
	tsize_t
);

25 
abã°_£rvî
 *(*
	tbackíd_£rvî_t
)(
	tabã°_group
*, *, 
	tsize_t
);

27 
	sabã°_group
 {

28 
ty≥
;

30 
d¨øy
 
abã°_£rvîs
;

32 
backíd_£rvî_idx_t
 
gë_backíd_£rvî_idx
;

33 
backíd_£rvî_t
 
gë_backíd_£rvî
;

34 } 
	tabã°_group
;

36 
expúe_íabÀd
;

37 
ã°_öãrvÆ
;

38 
œ°_ã°_begö_time
;

40 
d¨øy
 *
	`abã°_groups_¸óã
(*
groups_°rög
);

41 
	`abã°_groups_de°roy
(
d¨øy
 *
abgs
);

	@tests/vrt_backend.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<async.h
>

13 
	~<ad≠ãrs/´.h
>

15 
	~<dhashkô.h
>

16 
	~<dli°.h
>

17 
	~<dmtqueue.h
>

19 
	~<vπ_utû.h
>

20 
	~<vπ_public.h
>

21 
	~<vøbã°.h
>

22 
	~<vπ_¥odu˚_d©a.h
>

23 
	~<vπ_di•©ch_d©a.h
>

24 
	~<vπ_backíd.h
>

26 
	sèsk_d©a
 {

27 
	mmaxmem‹y
;

28 
	mu£d_mem‹y
;

29 
	mtŸÆ_sy°em_mem‹y
;

31 
	mdñëög
;

32 
	mcurs‹
;

33 } 
	tèsk_d©a
;

35 
	gbackíd_thªads_cou¡
;

36 
d¨øy
 *
	gbackíd_thªads
 = 
NULL
;

38 
	gbackíd_thªads_∑u£_föished_cou¡
;

40 
	$èsk_d©a_¸óã
()

42 
èsk_d©a
 *
td
;

44 
td
 = 
	`mÆloc
((*td));

46 
td
->
maxmem‹y
 = 0;

47 
td
->
u£d_mem‹y
 = 0;

48 
td
->
tŸÆ_sy°em_mem‹y
 = 0;

49 
td
->
dñëög
 = 0;

50 
td
->
curs‹
 = 0;

52  
td
;

53 
	}
}

55 
	$èsk_d©a_de°roy
(
èsk_d©a
 *
td
)

57 
	`‰ì
(
td
);

58 
	}
}

60 
	$backíd_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

62 
cc
->
˘x
 = 
NULL
;

63 
cc
->
a˘x
 = 
NULL
;

65 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

66 i‡(
cc
->
a˘x
 =
NULL
) {

67  
VRT_ERROR
;

70  
VRT_OK
;

71 
	}
}

73 
	$backíd_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

75 i‡(
cc
->
˘x
) {

76 
	`ªdisFªe
(
cc
->
˘x
);

77 
cc
->
˘x
 =
NULL
;

80 i‡(
cc
->
a˘x
) {

81 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

82 
cc
->
a˘x
 =
NULL
;

84 
	}
}

86 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

87 
backíd_thªad
 *
bt
 = 
c
->
d©a
;

88 i‡(
°©us
 !
REDIS_OK
) {

89 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

95 
	}
}

97 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

98 
backíd_thªad
 *
bt
 = 
c
->
d©a
;

99 i‡(
°©us
 !
REDIS_OK
) {

100 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

107 
	}
}

109 
	$sˇn_f‹_dñëe_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

110 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

111 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

112 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

113 
c⁄n_c⁄ãxt
 *
cc
;

114 
vÆue
;

115 
size_t
 
k
;

117 i‡(
ª∂y
 =
NULL
) ;

119 i‡(!
td
->
dñëög
) {

123 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

127 i‡(
ª∂y
->
ñemíts
 != 2) {

131 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

132 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

133 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

137 
td
->
curs‹
 = 
vÆue
;

139 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

140 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

144 
k
 = 0; k < 
ª∂y_sub
->
ñemíts
; k ++) {

145 
ª∂y_ñem
 = 
ª∂y_sub
->
ñemít
[
k
];

146 i‡(
ª∂y_ñem
->
ty≥
 !
REDIS_REPLY_STRING
) {

150 
d©a_unô
 *
du
 = 
	`d©a_unô_gë
();

151 
du
->
dp
 = 
dñëe_d©a_¥odu˚r
;

152 
du
->
¨gc
 = 2;

153 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

154 
du
->
¨gv
[0] = 
	`sd¢ew
(
dñëe_d©a_¥odu˚r
->
«me
);

155 
du
->
¨gv
[1] = 
	`sd¢ewÀn
(
ª∂y_ñem
->
°r
,ª∂y_ñem->
Àn
);

156 
	`d©a_di•©ch
(
du
);

159 
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

160 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_dñëe_ˇŒback
,

161 
abs
, "sˇ¿%Œd cou¡ 1000", 
td
->
curs‹
);

162 
	}
}

164 
	$upd©e_mem‹y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

165 
ªdisRïly
 *
ª∂y
 = 
r
;

166 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

167 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

169 i‡(
ª∂y
 =
NULL
) ;

171 
td
->
u£d_mem‹y
 = 
	`gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ª∂y
, "used_memory");

173 i‡(
td
->
maxmem‹y
 == 0) {

174 
td
->
tŸÆ_sy°em_mem‹y
 = 
	`gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ª∂y
, "total_system_memory");

176 
	}
}

178 
	$upd©e_maxmem‹y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

179 
ªdisRïly
 *
ª∂y
 = 
r
;

180 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

181 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

182 
ªdisRïly
 *
ª∂y_sub
;

183 
vÆue
;

185 i‡(
ª∂y
 =
NULL
) ;

187 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

191 i‡(
ª∂y
->
ñemíts
 != 2) {

195 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

196 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

197 
	`°rcmp
(
ª∂y_sub
->
°r
, "maxmemory")) {

201 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

202 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

203 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

207 
td
->
maxmem‹y
 = 
vÆue
;

208 
	}
}

210 
	$upd©e_mem‹y_öfo
(
d¨øy
 *
abgs
)

212 
i
, 
j
;

214 
i
 = 0; i < 
	`d¨øy_n
(
abgs
); i ++) {

215 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

216 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

217 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

218 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

220 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
upd©e_mem‹y_ˇŒback
, 
abs
, "info memory");

221 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
upd©e_maxmem‹y_ˇŒback
, 
abs
, "config get maxmemory");

224 
	}
}

226 
	$check_mem‹y_íough
(
backíd_thªad
 *
bt
)

228 
i
, 
j
;

229 
d¨øy
 *
abgs
 = 
bt
->abgs;

231 
i
 = 0; i < 
	`d¨øy_n
(
abgs
); i ++) {

232 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

233 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

234 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

235 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

236 
max_mem‹y_Ælowed
 = 0;

238 i‡(
td
->
u£d_mem‹y
) {

239 i‡(
td
->
maxmem‹y
) {

240 
max_mem‹y_Ælowed
 = 
td
->
maxmem‹y
;

241 } i‡(
td
->
tŸÆ_sy°em_mem‹y
) {

242 
max_mem‹y_Ælowed
 = 
td
->
tŸÆ_sy°em_mem‹y
;

245 i‡(
max_mem‹y_Ælowed
) {

246 i‡(
td
->
u£d_mem‹y
*100/
max_mem‹y_Ælowed
 > 80) {

247 i‡(!
td
->
dñëög
) {

248 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

249 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_dñëe_ˇŒback
,

250 
abs
, "sˇ¿%Œd cou¡ 1000", 
td
->
curs‹
);

251 
td
->
dñëög
 = 1;

252 
bt
->
dñëög
 ++;

254 } i‡(
td
->
dñëög
) {

255 
td
->
dñëög
 = 0;

256 
bt
->
dñëög
 --;

262 
	}
}

264 
	$backíd_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

266 
backíd_thªad
 *
bt
 = 
˛õ¡D©a
;

268 
	`ASSERT
(
evítLo›
 =
bt
->
ñ
);

271 i‡(
bt
->
∑u£
) {

272 i‡(!
	`ã°_if_√ed_∑u£
()) {

273 
bt
->
∑u£
 = 0;

275 
bt
->
¸⁄lo›s
 ++;

280 
	`upd©e_mem‹y_öfo
(
bt
->
abgs
);

281 
	`check_mem‹y_íough
(
bt
);

284 i‡(!
bt
->
∑u£
 && 
	`ã°_if_√ed_∑u£
(Ë&& !bt->
dñëög
) {

285 
bt
->
∑u£
 = 1;

286 
	`⁄e_backíd_thªad_∑u£d
();

289 
bt
->
¸⁄lo›s
 ++;

290  1000/
bt
->
hz
;

291 
	}
}

293 
	$backíd_thªad_öô
(
backíd_thªad
 *
bt
, *
ã°_èrgë_groups
)

295 
i
, 
j
, 
k
;

297 
bt
->
id
 = 0;

298 
bt
->
thªad_id
 = 0;

299 
bt
->
ñ
 = 
NULL
;

300 
bt
->
hz
 = 10;

301 
bt
->
¸⁄lo›s
 = 0;

302 
bt
->
dñëög
 = 0;

303 
bt
->
∑u£
 = 0;

305 
bt
->
ñ
 = 
	`´Cª©eEvítLo›
(1);

306 i‡(
bt
->
ñ
 =
NULL
) {

307  
VRT_ERROR
;

310 
bt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

311 i‡(
bt
->
abgs
 =
NULL
) {

312  
VRT_ERROR
;

316 
i
 = 0; i < 
	`d¨øy_n
(
bt
->
abgs
); i ++) {

317 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
bt
->
abgs
, 
i
);

318 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

319 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

321 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(1, (
c⁄n_c⁄ãxt
));

322 
k
 = 0; k < 1; k ++) {

323 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

324 i‡(
	`backíd_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

325  
VRT_ERROR
;

327 
cc
->
a˘x
->
d©a
 = 
bt
;

328 
	`ªdisAeAâach
(
bt
->
ñ
, 
cc
->
a˘x
);

329 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

330 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

333 
abs
->
d©a
 = 
	`èsk_d©a_¸óã
();

337 i‡(
	`´Cª©eTimeEvít
(
bt
->
ñ
, 1, 
backíd_thªad_¸⁄
, bt, 
NULL
Ë=
AE_ERR
) {

338  
VRT_ERROR
;

341  
VRT_OK
;

342 
	}
}

344 
	$backíd_thªad_deöô
(
backíd_thªad
 *
bt
)

346 i‡(
bt
->
ñ
) {

347 
	`´DñëeEvítLo›
(
bt
->
ñ
);

348 
bt
->
ñ
 = 
NULL
;

351 i‡(
bt
->
abgs
) {

352 
i
, 
j
, 
k
;

354 
i
 = 0; i < 
	`d¨øy_n
(
bt
->
abgs
); i ++) {

355 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
bt
->
abgs
, 
i
);

356 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

357 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

358 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

359 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

360 
	`backíd_c⁄n_c⁄ãxt_deöô
(
cc
);

363 i‡(
abs
->
d©a
) {

364 
	`èsk_d©a_de°roy
(
abs
->
d©a
);

365 
abs
->
d©a
;

370 
	`abã°_groups_de°roy
(
bt
->
abgs
);

371 
bt
->
abgs
 = 
NULL
;

373 
	}
}

375 
	$vπ_backíd_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
)

377 
j
;

379 
backíd_thªads_cou¡
 = 
thªads_cou¡
;

380 
backíd_thªads
 = 
	`d¨øy_¸óã
(
thªads_cou¡
, (
backíd_thªad
));

381 i‡(
backíd_thªads
 =
NULL
) {

382  
VRT_ERROR
;

385 
j
 = 0; j < 
thªads_cou¡
; j ++) {

386 
backíd_thªad
 *
bt
 = 
	`d¨øy_push
(
backíd_thªads
);

387 i‡(
	`backíd_thªad_öô
(
bt
, 
ã°_èrgë_groups
Ë!
VRT_OK
) {

388  
VRT_ERROR
;

390 
bt
->
id
 = 
j
;

393  
VRT_OK
;

394 
	}
}

396 
	$vπ_backíd_deöô
()

398 i‡(
backíd_thªads
) {

399 
	`d¨øy_n
(
backíd_thªads
) > 0) {

400 
backíd_thªad
 *
bt
 = 
	`d¨øy_p›
(
backíd_thªads
);

401 
	`backíd_thªad_deöô
(
bt
);

403 
	`d¨øy_de°roy
(
backíd_thªads
);

404 
backíd_thªads
 = 
NULL
;

406 
	}
}

408 *
	$vπ_backíd_thªad_run
(*
¨gs
)

410 
backíd_thªad
 *
bt
 = 
¨gs
;

411 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

413 
	`´Maö
(
bt
->
ñ
);

415  
NULL
;

416 
	}
}

418 
	$vπ_°¨t_backíd
()

420 
i
;

421 
i
 = 0; i < 
	`d¨øy_n
(
backíd_thªads
); i ++) {

422 
±hªad_©å_t
 
©å
;

423 
backíd_thªad
 *
bt
;

424 
	`±hªad_©å_öô
(&
©å
);

425 
bt
 = 
	`d¨øy_gë
(
backíd_thªads
, 
i
);

426 
	`±hªad_¸óã
(&
bt
->
thªad_id
,

427 &
©å
, 
vπ_backíd_thªad_run
, 
bt
);

430  
VRT_OK
;

431 
	}
}

433 
	$vπ_waô_backíd
()

435 
i
;

437 
i
 = 0; i < 
	`d¨øy_n
(
backíd_thªads
); i ++){

438 
backíd_thªad
 *
bt
 = 
	`d¨øy_gë
(
backíd_thªads
, 
i
);

439 
	`±hªad_joö
(
bt
->
thªad_id
, 
NULL
);

442  
VRT_OK
;

443 
	}
}

	@tests/vrt_backend.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<async.h
>

13 
	~<ad≠ãrs/´.h
>

15 
	~<dhashkô.h
>

16 
	~<dli°.h
>

17 
	~<dmtqueue.h
>

19 
	~<vπ_utû.h
>

20 
	~<vπ_public.h
>

21 
	~<vøbã°.h
>

22 
	~<vπ_¥odu˚_d©a.h
>

23 
	~<vπ_di•©ch_d©a.h
>

24 
	~<vπ_backíd.h
>

26 
	sèsk_d©a
 {

27 
	mmaxmem‹y
;

28 
	mu£d_mem‹y
;

29 
	mtŸÆ_sy°em_mem‹y
;

31 
	mdñëög
;

32 
	mcurs‹
;

33 } 
	tèsk_d©a
;

35 
	gbackíd_thªads_cou¡
;

36 
d¨øy
 *
	gbackíd_thªads
 = 
NULL
;

38 
	gbackíd_thªads_∑u£_föished_cou¡
;

40 
	$èsk_d©a_¸óã
()

42 
èsk_d©a
 *
td
;

44 
td
 = 
	`mÆloc
((*td));

46 
td
->
maxmem‹y
 = 0;

47 
td
->
u£d_mem‹y
 = 0;

48 
td
->
tŸÆ_sy°em_mem‹y
 = 0;

49 
td
->
dñëög
 = 0;

50 
td
->
curs‹
 = 0;

52  
td
;

53 
	}
}

55 
	$èsk_d©a_de°roy
(
èsk_d©a
 *
td
)

57 
	`‰ì
(
td
);

58 
	}
}

60 
	$backíd_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

62 
cc
->
˘x
 = 
NULL
;

63 
cc
->
a˘x
 = 
NULL
;

65 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

66 i‡(
cc
->
a˘x
 =
NULL
) {

67  
VRT_ERROR
;

70  
VRT_OK
;

71 
	}
}

73 
	$backíd_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

75 i‡(
cc
->
˘x
) {

76 
	`ªdisFªe
(
cc
->
˘x
);

77 
cc
->
˘x
 =
NULL
;

80 i‡(
cc
->
a˘x
) {

81 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

82 
cc
->
a˘x
 =
NULL
;

84 
	}
}

86 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

87 
backíd_thªad
 *
bt
 = 
c
->
d©a
;

88 i‡(
°©us
 !
REDIS_OK
) {

89 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

95 
	}
}

97 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

98 
backíd_thªad
 *
bt
 = 
c
->
d©a
;

99 i‡(
°©us
 !
REDIS_OK
) {

100 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

107 
	}
}

109 
	$sˇn_f‹_dñëe_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

110 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

111 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

112 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

113 
c⁄n_c⁄ãxt
 *
cc
;

114 
vÆue
;

115 
size_t
 
k
;

117 i‡(
ª∂y
 =
NULL
) ;

119 i‡(!
td
->
dñëög
) {

123 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

127 i‡(
ª∂y
->
ñemíts
 != 2) {

131 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

132 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

133 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

137 
td
->
curs‹
 = 
vÆue
;

139 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

140 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

144 
k
 = 0; k < 
ª∂y_sub
->
ñemíts
; k ++) {

145 
ª∂y_ñem
 = 
ª∂y_sub
->
ñemít
[
k
];

146 i‡(
ª∂y_ñem
->
ty≥
 !
REDIS_REPLY_STRING
) {

150 
d©a_unô
 *
du
 = 
	`d©a_unô_gë
();

151 
du
->
dp
 = 
dñëe_d©a_¥odu˚r
;

152 
du
->
¨gc
 = 2;

153 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

154 
du
->
¨gv
[0] = 
	`sd¢ew
(
dñëe_d©a_¥odu˚r
->
«me
);

155 
du
->
¨gv
[1] = 
	`sd¢ewÀn
(
ª∂y_ñem
->
°r
,ª∂y_ñem->
Àn
);

156 
	`d©a_di•©ch
(
du
);

159 
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

160 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_dñëe_ˇŒback
,

161 
abs
, "sˇ¿%Œd cou¡ 1000", 
td
->
curs‹
);

162 
	}
}

164 
	$upd©e_mem‹y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

165 
ªdisRïly
 *
ª∂y
 = 
r
;

166 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

167 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

169 i‡(
ª∂y
 =
NULL
) ;

171 
td
->
u£d_mem‹y
 = 
	`gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ª∂y
, "used_memory");

173 i‡(
td
->
maxmem‹y
 == 0) {

174 
td
->
tŸÆ_sy°em_mem‹y
 = 
	`gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ª∂y
, "total_system_memory");

176 
	}
}

178 
	$upd©e_maxmem‹y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

179 
ªdisRïly
 *
ª∂y
 = 
r
;

180 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

181 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

182 
ªdisRïly
 *
ª∂y_sub
;

183 
vÆue
;

185 i‡(
ª∂y
 =
NULL
) ;

187 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

191 i‡(
ª∂y
->
ñemíts
 != 2) {

195 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

196 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

197 
	`°rcmp
(
ª∂y_sub
->
°r
, "maxmemory")) {

201 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

202 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

203 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

207 
td
->
maxmem‹y
 = 
vÆue
;

208 
	}
}

210 
	$upd©e_mem‹y_öfo
(
d¨øy
 *
abgs
)

212 
i
, 
j
;

214 
i
 = 0; i < 
	`d¨øy_n
(
abgs
); i ++) {

215 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

216 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

217 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

218 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

220 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
upd©e_mem‹y_ˇŒback
, 
abs
, "info memory");

221 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
upd©e_maxmem‹y_ˇŒback
, 
abs
, "config get maxmemory");

224 
	}
}

226 
	$check_mem‹y_íough
(
backíd_thªad
 *
bt
)

228 
i
, 
j
;

229 
d¨øy
 *
abgs
 = 
bt
->abgs;

231 
i
 = 0; i < 
	`d¨øy_n
(
abgs
); i ++) {

232 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

233 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

234 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

235 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

236 
max_mem‹y_Ælowed
 = 0;

238 i‡(
td
->
u£d_mem‹y
) {

239 i‡(
td
->
maxmem‹y
) {

240 
max_mem‹y_Ælowed
 = 
td
->
maxmem‹y
;

241 } i‡(
td
->
tŸÆ_sy°em_mem‹y
) {

242 
max_mem‹y_Ælowed
 = 
td
->
tŸÆ_sy°em_mem‹y
;

245 i‡(
max_mem‹y_Ælowed
) {

246 i‡(
td
->
u£d_mem‹y
*100/
max_mem‹y_Ælowed
 > 80) {

247 i‡(!
td
->
dñëög
) {

248 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

249 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_dñëe_ˇŒback
,

250 
abs
, "sˇ¿%Œd cou¡ 1000", 
td
->
curs‹
);

251 
td
->
dñëög
 = 1;

252 
bt
->
dñëög
 ++;

254 } i‡(
td
->
dñëög
) {

255 
td
->
dñëög
 = 0;

256 
bt
->
dñëög
 --;

262 
	}
}

264 
	$backíd_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

266 
backíd_thªad
 *
bt
 = 
˛õ¡D©a
;

268 
	`ASSERT
(
evítLo›
 =
bt
->
ñ
);

271 i‡(
bt
->
∑u£
) {

272 i‡(!
	`ã°_if_√ed_∑u£
()) {

273 
bt
->
∑u£
 = 0;

275 
bt
->
¸⁄lo›s
 ++;

280 
	`upd©e_mem‹y_öfo
(
bt
->
abgs
);

281 
	`check_mem‹y_íough
(
bt
);

284 i‡(!
bt
->
∑u£
 && 
	`ã°_if_√ed_∑u£
(Ë&& !bt->
dñëög
) {

285 
bt
->
∑u£
 = 1;

286 
	`⁄e_backíd_thªad_∑u£d
();

289 
bt
->
¸⁄lo›s
 ++;

290  1000/
bt
->
hz
;

291 
	}
}

293 
	$backíd_thªad_öô
(
backíd_thªad
 *
bt
, *
ã°_èrgë_groups
)

295 
i
, 
j
, 
k
;

297 
bt
->
id
 = 0;

298 
bt
->
thªad_id
 = 0;

299 
bt
->
ñ
 = 
NULL
;

300 
bt
->
hz
 = 10;

301 
bt
->
¸⁄lo›s
 = 0;

302 
bt
->
dñëög
 = 0;

303 
bt
->
∑u£
 = 0;

305 
bt
->
ñ
 = 
	`´Cª©eEvítLo›
(1);

306 i‡(
bt
->
ñ
 =
NULL
) {

307  
VRT_ERROR
;

310 
bt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

311 i‡(
bt
->
abgs
 =
NULL
) {

312  
VRT_ERROR
;

316 
i
 = 0; i < 
	`d¨øy_n
(
bt
->
abgs
); i ++) {

317 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
bt
->
abgs
, 
i
);

318 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

319 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

321 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(1, (
c⁄n_c⁄ãxt
));

322 
k
 = 0; k < 1; k ++) {

323 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

324 i‡(
	`backíd_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

325  
VRT_ERROR
;

327 
cc
->
a˘x
->
d©a
 = 
bt
;

328 
	`ªdisAeAâach
(
bt
->
ñ
, 
cc
->
a˘x
);

329 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

330 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

333 
abs
->
d©a
 = 
	`èsk_d©a_¸óã
();

337 i‡(
	`´Cª©eTimeEvít
(
bt
->
ñ
, 1, 
backíd_thªad_¸⁄
, bt, 
NULL
Ë=
AE_ERR
) {

338  
VRT_ERROR
;

341  
VRT_OK
;

342 
	}
}

344 
	$backíd_thªad_deöô
(
backíd_thªad
 *
bt
)

346 i‡(
bt
->
ñ
) {

347 
	`´DñëeEvítLo›
(
bt
->
ñ
);

348 
bt
->
ñ
 = 
NULL
;

351 i‡(
bt
->
abgs
) {

352 
i
, 
j
, 
k
;

354 
i
 = 0; i < 
	`d¨øy_n
(
bt
->
abgs
); i ++) {

355 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
bt
->
abgs
, 
i
);

356 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

357 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

358 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

359 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

360 
	`backíd_c⁄n_c⁄ãxt_deöô
(
cc
);

363 i‡(
abs
->
d©a
) {

364 
	`èsk_d©a_de°roy
(
abs
->
d©a
);

365 
abs
->
d©a
;

370 
	`abã°_groups_de°roy
(
bt
->
abgs
);

371 
bt
->
abgs
 = 
NULL
;

373 
	}
}

375 
	$vπ_backíd_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
)

377 
j
;

379 
backíd_thªads_cou¡
 = 
thªads_cou¡
;

380 
backíd_thªads
 = 
	`d¨øy_¸óã
(
thªads_cou¡
, (
backíd_thªad
));

381 i‡(
backíd_thªads
 =
NULL
) {

382  
VRT_ERROR
;

385 
j
 = 0; j < 
thªads_cou¡
; j ++) {

386 
backíd_thªad
 *
bt
 = 
	`d¨øy_push
(
backíd_thªads
);

387 i‡(
	`backíd_thªad_öô
(
bt
, 
ã°_èrgë_groups
Ë!
VRT_OK
) {

388  
VRT_ERROR
;

390 
bt
->
id
 = 
j
;

393  
VRT_OK
;

394 
	}
}

396 
	$vπ_backíd_deöô
()

398 i‡(
backíd_thªads
) {

399 
	`d¨øy_n
(
backíd_thªads
) > 0) {

400 
backíd_thªad
 *
bt
 = 
	`d¨øy_p›
(
backíd_thªads
);

401 
	`backíd_thªad_deöô
(
bt
);

403 
	`d¨øy_de°roy
(
backíd_thªads
);

404 
backíd_thªads
 = 
NULL
;

406 
	}
}

408 *
	$vπ_backíd_thªad_run
(*
¨gs
)

410 
backíd_thªad
 *
bt
 = 
¨gs
;

411 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

413 
	`´Maö
(
bt
->
ñ
);

415  
NULL
;

416 
	}
}

418 
	$vπ_°¨t_backíd
()

420 
i
;

421 
i
 = 0; i < 
	`d¨øy_n
(
backíd_thªads
); i ++) {

422 
±hªad_©å_t
 
©å
;

423 
backíd_thªad
 *
bt
;

424 
	`±hªad_©å_öô
(&
©å
);

425 
bt
 = 
	`d¨øy_gë
(
backíd_thªads
, 
i
);

426 
	`±hªad_¸óã
(&
bt
->
thªad_id
,

427 &
©å
, 
vπ_backíd_thªad_run
, 
bt
);

430  
VRT_OK
;

431 
	}
}

433 
	$vπ_waô_backíd
()

435 
i
;

437 
i
 = 0; i < 
	`d¨øy_n
(
backíd_thªads
); i ++){

438 
backíd_thªad
 *
bt
 = 
	`d¨øy_gë
(
backíd_thªads
, 
i
);

439 
	`±hªad_joö
(
bt
->
thªad_id
, 
NULL
);

442  
VRT_OK
;

443 
	}
}

	@tests/vrt_backend.h

1 #i‚de‡
_VRT_BACKEND_H_


2 
	#_VRT_BACKEND_H_


	)

4 
	~<d¨øy.h
>

6 
	gabã°_group
;

7 
	gdli°
;

8 
	gdméi°
;

9 
	gd©a_unô
;

10 
	g´EvítLo›
;

12 
	sbackíd_thªad
 {

13 
	mid
;

14 
±hªad_t
 
	mthªad_id
;

16 
´EvítLo›
 *
	mñ
;

17 
	mhz
;

18 
	m¸⁄lo›s
;

20 
d¨øy
 *
	mabgs
;

22 
	mdñëög
;

23 
	m∑u£
;

24 } 
	tbackíd_thªad
;

26 
backíd_thªads_cou¡
;

28 
backíd_thªads_∑u£_föished_cou¡
;

30 
vπ_backíd_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
);

31 
vπ_backíd_deöô
();

33 
vπ_°¨t_backíd
();

34 
vπ_waô_backíd
();

	@tests/vrt_backend.h

1 #i‚de‡
_VRT_BACKEND_H_


2 
	#_VRT_BACKEND_H_


	)

4 
	~<d¨øy.h
>

6 
	gabã°_group
;

7 
	gdli°
;

8 
	gdméi°
;

9 
	gd©a_unô
;

10 
	g´EvítLo›
;

12 
	sbackíd_thªad
 {

13 
	mid
;

14 
±hªad_t
 
	mthªad_id
;

16 
´EvítLo›
 *
	mñ
;

17 
	mhz
;

18 
	m¸⁄lo›s
;

20 
d¨øy
 *
	mabgs
;

22 
	mdñëög
;

23 
	m∑u£
;

24 } 
	tbackíd_thªad
;

26 
backíd_thªads_cou¡
;

28 
backíd_thªads_∑u£_föished_cou¡
;

30 
vπ_backíd_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
);

31 
vπ_backíd_deöô
();

33 
vπ_°¨t_backíd
();

34 
vπ_waô_backíd
();

	@tests/vrt_benchmark.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<as£π.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<´.h
>

14 
	~<húedis.h
>

15 
	~<sds.h
>

17 
	~<d¨øy.h
>

18 
	~<dli°.h
>

19 
	~<dutû.h
>

20 
	~<dlog.h
>

22 
	~<vπ_utû.h
>

23 
	~<vπ_public.h
>

24 
	~<himemˇched.h
>

26 
	#TEST_CMD_PROTOCOL_REDIS
 0

	)

27 
	#TEST_CMD_PROTOCOL_MEMCACHE
 1

	)

29 
	#RANDPTR_INITIAL_SIZE
 8

	)

31 
	sc⁄fig
 {

32 c⁄° *
	mho°ù
;

33 
	mho°p‹t
;

34 c⁄° *
	mho°sockë
;

35 
	mnum˛õ¡s
;

36 
	mlive˛õ¡s
;

37 
	mªque°s
;

38 
	mªque°s_issued
;

39 
	mªque°s_föished
;

40 
	mkeysize
;

41 
	md©asize
;

42 
	møndomkeys
;

43 
	møndomkeys_key•a˚Àn
;

44 
	mkì∑live
;

45 
	mpùñöe
;

46 
	mshowîr‹s
;

47 
	m°¨t
;

48 
	mtŸœãncy
;

49 *
	mœãncy
;

50 c⁄° *
	mtôÀ
;

51 
	mquõt
;

52 
	mcsv
;

53 
	mlo›
;

54 
	midÀmode
;

55 
	mdbnum
;

56 
sds
 
	mdbnum°r
;

57 *
	mã°s
;

58 *
	mauth
;

59 
	mthªads_cou¡
;

60 
	m¥Ÿocﬁ
;

61 
	mnoölöe
;

62 } 
	gc⁄fig
;

64 
	sbíchm¨k_thªad
 {

65 
	mid
;

66 
±hªad_t
 
	mthªad_id
;

68 
´EvítLo›
 *
	mñ
;

69 
	mhz
;

70 
	m¸⁄lo›s
;

72 
dli°
 *
	m˛õ¡s
;

73 
	mnum˛õ¡s
;

74 
	mlive˛õ¡s
;

76 
	mªque°s
;

77 
	mªque°s_issued
;

78 
	mªque°s_föished
;

80 
	m°¨t
;

81 
	mtŸœãncy
;

82 *
	mœãncy
;

83 } 
	tbíchm¨k_thªad
;

85 
	s_bíchm¨k_˛õ¡
 {

86 
bíchm¨k_thªad
 *
	mbt
;

88 
ªdisC⁄ãxt
 *
	mrc
;

89 
mcC⁄ãxt
 *
	mmc
;

90 
sds
 
	mobuf
;

91 **
	mønd±r
;

92 
size_t
 
	møndÀn
;

93 
size_t
 
	mønd‰ì
;

94 
size_t
 
	mwrôãn
;

95 
	m°¨t
;

96 
	mœãncy
;

97 
	m≥ndög
;

98 
	m¥efix_≥ndög
;

101 
	m¥efixÀn
;

102 } *
	tbíchm¨k_˛õ¡
;

104 
d¨øy
 *
	gbts
;

107 
wrôeH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

108 
bíchm¨k_˛õ¡
 
¸óãClõ¡
(*
cmd
, 
size_t
 
Àn
, bíchm¨k_˛õ¡ 
‰om
, 
bíchm¨k_thªad
 *
thªad
);

109 
¸óãMissögClõ¡s
(
bíchm¨k_˛õ¡
 
c
);

110 
showThroughput
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
);

112 
	$‰ìClõ¡
(
bíchm¨k_˛õ¡
 
c
) {

113 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

114 
dli°Node
 *
 
;

116 i‡(
bt
->
ñ
) {

117 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

118 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
);

120 
	`ªdisFªe
(
c
->
rc
);

121 i‡(
c
->
mc
) {

122 
c
->
mc
->
fd
 = -1;

123 
	`memˇchedFªe
(
c
->
mc
);

125 
	`sds‰ì
(
c
->
obuf
);

126 
	`‰ì
(
c
->
ønd±r
);

127 
	`‰ì
(
c
);

128 
	`upd©e_°©e_sub
(
bt
->
live˛õ¡s
,1);

129 
 
 = 
	`dli°SórchKey
(
bt
->
˛õ¡s
,
c
);

130 
	`ASSERT
(
 
 !
NULL
);

131 
	`dli°DñNode
(
bt
->
˛õ¡s
,
 
);

132 
	}
}

134 
	$‰ìAŒClõ¡s
(
dli°
 *
˛õ¡s
) {

135 
dli°Node
 *
 
 = 
˛õ¡s
->
hód
, *
√xt
;

137 
 
) {

138 
√xt
 = 
 
->next;

139 
	`‰ìClõ¡
(
 
->
vÆue
);

140 
 
 = 
√xt
;

142 
	}
}

144 
	$ª£tClõ¡
(
bíchm¨k_˛õ¡
 
c
) {

145 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

147 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

148 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
);

149 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
,
wrôeH™dÀr
,c);

150 
c
->
wrôãn
 = 0;

151 
c
->
≥ndög
 = 
c⁄fig
.
pùñöe
;

152 
	}
}

154 
	$øndomizeClõ¡Key
(
bíchm¨k_˛õ¡
 
c
) {

155 
size_t
 
i
;

157 
i
 = 0; i < 
c
->
øndÀn
; i++) {

158 *
p
 = 
c
->
ønd±r
[
i
]+11;

159 
size_t
 
r
 = 
	`øndom
(Ë% 
c⁄fig
.
øndomkeys_key•a˚Àn
;

160 
size_t
 
j
;

162 
j
 = 0; j < 12; j++) {

163 *
p
 = '0'+
r
%10;

164 
r
/=10;

165 
p
--;

168 
	}
}

170 
	$˛õ¡D⁄e
(
bíchm¨k_˛õ¡
 
c
) {

171 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

172 
ªque°s_föished
;

174 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

175 i‡(
ªque°s_föished
 =
bt
->
ªque°s
) {

176 
	`‰ìClõ¡
(
c
);

177 
	`´St›
(
bt
->
ñ
);

180 i‡(
c⁄fig
.
kì∑live
) {

181 
	`ª£tClõ¡
(
c
);

183 
	`upd©e_°©e_sub
(
bt
->
live˛õ¡s
,1);

184 
	`¸óãMissögClõ¡s
(
c
);

185 
	`upd©e_°©e_add
(
bt
->
live˛õ¡s
,1);

186 
	`‰ìClõ¡
(
c
);

188 
	}
}

190 
	$bíchm¨k_thªad_öô
(
bíchm¨k_thªad
 *
bt
, 
ªque°s
, 
num˛õ¡s
, *
cmd
, 
size_t
 
Àn
)

192 
bíchm¨k_˛õ¡
 
c
;

194 
bt
->
thªad_id
 = 0;

195 
bt
->
ñ
 = 
NULL
;

196 
bt
->
hz
 = 10;

197 
bt
->
¸⁄lo›s
 = 0;

198 
bt
->
˛õ¡s
 = 
NULL
;

199 
bt
->
num˛õ¡s
 =Çumclients;

200 
bt
->
live˛õ¡s
 = 0;

201 
bt
->
ªque°s
 =Ñequests;

202 
bt
->
ªque°s_issued
 = 0;

203 
bt
->
ªque°s_föished
 = 0;

204 
bt
->
°¨t
 = 0;

205 
bt
->
tŸœãncy
 = 0;

206 
bt
->
œãncy
 = 
NULL
;

208 
bt
->
ñ
 = 
	`´Cª©eEvítLo›
(1024*10);

209 i‡(
bt
->
ñ
 =
NULL
) {

210  
VRT_ERROR
;

213 
bt
->
˛õ¡s
 = 
	`dli°Cª©e
();

214 i‡(
bt
->
˛õ¡s
 =
NULL
) {

215  
VRT_ERROR
;

218 
bt
->
œãncy
 = 
	`mÆloc
(()*bt->
ªque°s
);

220 
c
 = 
	`¸óãClõ¡
(
cmd
,
Àn
,
NULL
,
bt
);

221 
	`¸óãMissögClõ¡s
(
c
);

223 i‡(
bt
->
id
 == 0) {

224 
	`´Cª©eTimeEvít
(
bt
->
ñ
,1,
showThroughput
,
NULL
,NULL);

227  
VRT_OK
;

228 
	}
}

230 
	$bíchm¨k_thªad_deöô
(
bíchm¨k_thªad
 *
bt
)

232 i‡(
bt
->
˛õ¡s
) {

233 
	`‰ìAŒClõ¡s
(
bt
->
˛õ¡s
);

234 
	`dli°Rñó£
(
bt
->
˛õ¡s
);

235 
bt
->
˛õ¡s
 = 
NULL
;

238 i‡(
bt
->
ñ
) {

239 
	`´DñëeEvítLo›
(
bt
->
ñ
);

240 
bt
->
ñ
 = 
NULL
;

243 i‡(
bt
->
œãncy
) {

244 
	`‰ì
(
bt
->
œãncy
);

245 
bt
->
œãncy
 = 
NULL
;

247 
	}
}

249 *
	$bíchm¨k_thªad_run
(*
¨gs
)

251 
bíchm¨k_thªad
 *
bt
 = 
¨gs
;

252 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

254 
	`´Maö
(
bt
->
ñ
);

256  
NULL
;

257 
	}
}

259 
	$°¨t_bíchm¨k_thªads_u¡û_föish
()

261 
i
;

262 
bíchm¨k_thªad
 *
bt
;

264 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

265 
±hªad_©å_t
 
©å
;

266 
	`±hªad_©å_öô
(&
©å
);

267 
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

268 
	`±hªad_¸óã
(&
bt
->
thªad_id
,

269 &
©å
, 
bíchm¨k_thªad_run
, 
bt
);

272 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

273 
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

274 
	`±hªad_joö
(
bt
->
thªad_id
, 
NULL
);

277  
VRT_OK
;

278 
	}
}

280 
	$ªadH™dÀrMC
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

281 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

282 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

283 
mcC⁄ãxt
 *
mc
 = 
c
->mc;

284 
ªque°s_föished
;

285 *
ª∂y
 = 
NULL
;

286 
	`UNUSED
(
ñ
);

287 
	`UNUSED
(
fd
);

288 
	`UNUSED
(
mask
);

293 i‡(
c
->
œãncy
 < 0Ëc->œãncy = 
	`du£c_now
()-(c->
°¨t
);

295 i‡(
	`memˇchedBuf„rRód
(
mc
Ë!
MC_OK
) {

296 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
mc
->
îr°r
);

297 
	`exô
(1);

299 
c
->
≥ndög
) {

300 i‡(
	`memˇchedGëRïly
(
mc
,&
ª∂y
Ë!
MC_OK
) {

301 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
mc
->
îr°r
);

302 
	`exô
(1);

305 i‡(
ª∂y
 !
NULL
) {

306 i‡(
ª∂y
 =(*)
MC_REPLY_ERROR
) {

307 
	`Ârötf
(
°dîr
,"UnexpectedÉrrorÑeply,Éxiting...\n");

308 
	`exô
(1);

311 i‡(
c⁄fig
.
showîr‹s
) {

312 
time_t
 
œ°îr_time
 = 0;

313 
time_t
 
now
 = 
	`time
(
NULL
);

314 
mcRïly
 *
r
 = 
ª∂y
;

315 i‡(
r
->
ty≥
 =
MC_REPLY_ERROR
 && 
œ°îr_time
 !
now
) {

316 
œ°îr_time
 = 
now
;

317 
	`¥ötf
("Eº‹ from sîvî: %s\n", 
r
->
°r
);

321 
	`‰ìMcRïlyObje˘
(
ª∂y
);

323 i‡(
c
->
¥efix_≥ndög
 > 0) {

324 
c
->
¥efix_≥ndög
--;

325 
c
->
≥ndög
--;

327 i‡(
c
->
¥efixÀn
 > 0) {

328 
size_t
 
j
;

329 
	`sd§™ge
(
c
->
obuf
, c->
¥efixÀn
, -1);

332 
j
 = 0; j < 
c
->
øndÀn
; j++)

333 
c
->
ønd±r
[
j
] -c->
¥efixÀn
;

334 
c
->
¥efixÀn
 = 0;

339 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

340 i‡(
ªque°s_föished
 < 
bt
->
ªque°s
) {

341 
bt
->
œãncy
[
ªque°s_föished
] = 
c
->latency;

342 
	`upd©e_°©e_add
(
bt
->
ªque°s_föished
,1);

344 
c
->
≥ndög
--;

345 i‡(
c
->
≥ndög
 == 0) {

346 
	`˛õ¡D⁄e
(
c
);

354 
	}
}

356 
	$ªadH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

357 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

358 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

359 
ªque°s_föished
;

360 *
ª∂y
 = 
NULL
;

361 
	`UNUSED
(
ñ
);

362 
	`UNUSED
(
fd
);

363 
	`UNUSED
(
mask
);

368 i‡(
c
->
œãncy
 < 0Ëc->œãncy = 
	`du£c_now
()-(c->
°¨t
);

370 i‡(
	`ªdisBuf„rRód
(
c
->
rc
Ë!
REDIS_OK
) {

371 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
c
->
rc
->
îr°r
);

372 
	`exô
(1);

374 
c
->
≥ndög
) {

375 i‡(
	`ªdisGëRïly
(
c
->
rc
,&
ª∂y
Ë!
REDIS_OK
) {

376 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
c
->
rc
->
îr°r
);

377 
	`exô
(1);

379 i‡(
ª∂y
 !
NULL
) {

380 i‡(
ª∂y
 =(*)
REDIS_REPLY_ERROR
) {

381 
	`Ârötf
(
°dîr
,"UnexpectedÉrrorÑeply,Éxiting...\n");

382 
	`exô
(1);

385 i‡(
c⁄fig
.
showîr‹s
) {

386 
time_t
 
œ°îr_time
 = 0;

387 
time_t
 
now
 = 
	`time
(
NULL
);

388 
ªdisRïly
 *
r
 = 
ª∂y
;

389 i‡(
r
->
ty≥
 =
REDIS_REPLY_ERROR
 && 
œ°îr_time
 !
now
) {

390 
œ°îr_time
 = 
now
;

391 
	`¥ötf
("Eº‹ from sîvî: %s\n", 
r
->
°r
);

395 
	`‰ìRïlyObje˘
(
ª∂y
);

397 i‡(
c
->
¥efix_≥ndög
 > 0) {

398 
c
->
¥efix_≥ndög
--;

399 
c
->
≥ndög
--;

401 i‡(
c
->
¥efixÀn
 > 0) {

402 
size_t
 
j
;

403 
	`sd§™ge
(
c
->
obuf
, c->
¥efixÀn
, -1);

406 
j
 = 0; j < 
c
->
øndÀn
; j++)

407 
c
->
ønd±r
[
j
] -c->
¥efixÀn
;

408 
c
->
¥efixÀn
 = 0;

413 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

414 i‡(
ªque°s_föished
 < 
bt
->
ªque°s
) {

415 
bt
->
œãncy
[
ªque°s_föished
] = 
c
->latency;

416 
	`upd©e_°©e_add
(
bt
->
ªque°s_föished
,1);

418 
c
->
≥ndög
--;

419 i‡(
c
->
≥ndög
 == 0) {

420 
	`˛õ¡D⁄e
(
c
);

428 
	}
}

430 
	$wrôeH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

431 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

432 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

433 
	`UNUSED
(
ñ
);

434 
	`UNUSED
(
fd
);

435 
	`UNUSED
(
mask
);

438 i‡(
c
->
wrôãn
 == 0) {

440 i‡(
bt
->
ªque°s_issued
++ >bt->
ªque°s
) {

441 
	`‰ìClõ¡
(
c
);

446 i‡(
c⁄fig
.
øndomkeys
Ë
	`øndomizeClõ¡Key
(
c
);

447 
c
->
°¨t
 = 
	`du£c_now
();

448 
c
->
œãncy
 = -1;

451 i‡(
	`sd¶í
(
c
->
obuf
Ë> c->
wrôãn
) {

452 *
±r
 = 
c
->
obuf
+c->
wrôãn
;

453 
ssize_t
 
nwrôãn
 = 
	`wrôe
(
c
->
rc
->
fd
,
±r
,
	`sd¶í
(c->
obuf
)-c->
wrôãn
);

455 i‡(
nwrôãn
 == -1) {

456 i‡(
î∫o
 !
EPIPE
)

457 
	`Ârötf
(
°dîr
, "WrôögÅÿsockë: %s\n", 
	`°ªº‹
(
î∫o
));

458 
	`‰ìClõ¡
(
c
);

461 
c
->
wrôãn
 +
nwrôãn
;

462 i‡(
	`sd¶í
(
c
->
obuf
Ë=c->
wrôãn
) {

463 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

464 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_REDIS
) {

465 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
,
ªadH™dÀr
,c);

466 } i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

467 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
,
ªadH™dÀrMC
,c);

469 
	`NOT_REACHED
();

473 
	}
}

496 
bíchm¨k_˛õ¡
 
	$¸óãClõ¡
(*
cmd
, 
size_t
 
Àn
, 
bíchm¨k_˛õ¡
 
‰om
, 
bíchm¨k_thªad
 *
thªad
) {

497 
j
;

498 
bíchm¨k_thªad
 *
bt
;

499 
bíchm¨k_˛õ¡
 
c
 = 
	`mÆloc
((
_bíchm¨k_˛õ¡
));

501 
c
->
bt
 = 
NULL
;

502 
c
->
rc
 = 
NULL
;

503 
c
->
mc
 = 
NULL
;

504 
c
->
obuf
 = 
NULL
;

505 
c
->
ønd±r
 = 
NULL
;

506 
c
->
øndÀn
 = 0;

507 
c
->
ønd‰ì
 = 0;

508 
c
->
wrôãn
 = 0;

509 
c
->
°¨t
 = 0;

510 
c
->
œãncy
 = 0;

511 
c
->
≥ndög
 = 0;

512 
c
->
¥efix_≥ndög
 = 0;

513 
c
->
¥efixÀn
 = 0;

515 i‡(
‰om
 =
NULL
) {

516 
	`ASSERT
(
thªad
 !
NULL
);

517 
bt
 = 
thªad
;

519 
bt
 = 
‰om
->bt;

522 
c
->
bt
 = bt;

524 i‡(
c⁄fig
.
ho°sockë
 =
NULL
) {

525 
c
->
rc
 = 
	`ªdisC⁄√˘N⁄Block
(
c⁄fig
.
ho°ù
,c⁄fig.
ho°p‹t
);

527 
c
->
rc
 = 
	`ªdisC⁄√˘UnixN⁄Block
(
c⁄fig
.
ho°sockë
);

529 i‡(
c
->
rc
->
îr
) {

530 
	`Ârötf
(
°dîr
,"CouldÇot connectÅo Redisát ");

531 i‡(
c⁄fig
.
ho°sockë
 =
NULL
)

532 
	`Ârötf
(
°dîr
,"%s:%d: %s\n",
c⁄fig
.
ho°ù
,c⁄fig.
ho°p‹t
,
c
->
rc
->
îr°r
);

534 
	`Ârötf
(
°dîr
,"%s: %s\n",
c⁄fig
.
ho°sockë
,
c
->
rc
->
îr°r
);

535 
	`exô
(1);

538 
c
->
rc
->
ªadî
->
maxbuf
 = 0;

543 
c
->
obuf
 = 
	`sd£m±y
();

547 
c
->
¥efix_≥ndög
 = 0;

548 i‡(
c⁄fig
.
auth
) {

549 *
buf
 = 
NULL
;

550 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
buf
, "AUTH %s", 
c⁄fig
.
auth
);

551 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf, 
buf
, 
Àn
);

552 
	`‰ì
(
buf
);

553 
c
->
¥efix_≥ndög
++;

560 i‡(
c⁄fig
.
dbnum
 != 0) {

561 
c
->
obuf
 = 
	`sdsˇçrötf
(c->obuf,"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n",

562 ()
	`sd¶í
(
c⁄fig
.
dbnum°r
),config.dbnumstr);

563 
c
->
¥efix_≥ndög
++;

565 
c
->
¥efixÀn
 = 
	`sd¶í
(c->
obuf
);

567 i‡(
‰om
) {

568 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf,

569 
‰om
->
obuf
+‰om->
¥efixÀn
,

570 
	`sd¶í
(
‰om
->
obuf
)-‰om->
¥efixÀn
);

572 
j
 = 0; j < 
c⁄fig
.
pùñöe
; j++)

573 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf,
cmd
,
Àn
);

576 
c
->
wrôãn
 = 0;

577 
c
->
≥ndög
 = 
c⁄fig
.
pùñöe
+c->
¥efix_≥ndög
;

578 
c
->
ønd±r
 = 
NULL
;

579 
c
->
øndÀn
 = 0;

582 i‡(
c⁄fig
.
øndomkeys
) {

583 i‡(
‰om
) {

584 
c
->
øndÀn
 = 
‰om
->randlen;

585 
c
->
ønd‰ì
 = 0;

586 
c
->
ønd±r
 = 
	`mÆloc
((*)*c->
øndÀn
);

588 
j
 = 0; j < ()
c
->
øndÀn
; j++) {

589 
c
->
ønd±r
[
j
] = c->
obuf
 + (
‰om
->randptr[j]-from->obuf);

591 
c
->
ønd±r
[
j
] +c->
¥efixÀn
 - 
‰om
->prefixlen;

594 *
p
 = 
c
->
obuf
;

596 
c
->
øndÀn
 = 0;

597 
c
->
ønd‰ì
 = 
RANDPTR_INITIAL_SIZE
;

598 
c
->
ønd±r
 = 
	`mÆloc
((*)*c->
ønd‰ì
);

599 (
p
 = 
	`°r°r
’,"__ønd_öt__")Ë!
NULL
) {

600 i‡(
c
->
ønd‰ì
 == 0) {

601 
c
->
ønd±r
 = 
	`ªÆloc
(c->ønd±r,(*)*c->
øndÀn
*2);

602 
c
->
ønd‰ì
 +c->
øndÀn
;

604 
c
->
ønd±r
[c->
øndÀn
++] = 
p
;

605 
c
->
ønd‰ì
--;

606 
p
 += 12;

610 i‡(
c⁄fig
.
idÀmode
 == 0)

611 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
,
wrôeH™dÀr
,c);

614 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

615 
c
->
mc
 = 
	`memˇchedC⁄ãxtInô
();

616 
c
->
mc
->
fd
 = c->
rc
->fd;

617 
c
->
mc
->
Êags
 &~
MC_BLOCK
;

620 
	`dli°AddNodeTaû
(
bt
->
˛õ¡s
,
c
);

621 
	`upd©e_°©e_add
(
bt
->
live˛õ¡s
,1);

623  
c
;

624 
	}
}

626 
	$¸óãMissögClõ¡s
(
bíchm¨k_˛õ¡
 
c
) {

627 
n
 = 0;

628 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

629 
live˛õ¡s
;

631 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&liveclients);

633 
live˛õ¡s
 < 
bt
->
num˛õ¡s
) {

634 
	`¸óãClõ¡
(
NULL
,0,
c
,NULL);

637 i‡(++
n
 > 64) {

638 
	`u¶ìp
(50000);

639 
n
 = 0;

641 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&liveclients);

643 
	}
}

645 
	$com∑ªL©ícy
(c⁄° *
a
, c⁄° *
b
) {

646  (*(*)
a
)-(*(*)
b
);

647 
	}
}

649 
	$upd©eBíchm¨kSèts
()

651 
i
;

652 
cou¡
;

654 
c⁄fig
.
live˛õ¡s
 = 0;

655 
c⁄fig
.
ªque°s_föished
 = 0;

657 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

658 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

659 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&
cou¡
);

660 
c⁄fig
.
live˛õ¡s
 +
cou¡
;

661 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&
cou¡
);

662 
c⁄fig
.
ªque°s_föished
 +
cou¡
;

664 
	}
}

666 
	$showL©ícyRï‹t
() {

667 
i
, 
j
, 
cuæ©
 = 0;

668 
n
 = 0;

669 
≥rc
, 
ªq≥r£c
;

671 
	`upd©eBíchm¨kSèts
();

673 
ªq≥r£c
 = ()
c⁄fig
.
ªque°s_föished
/(()c⁄fig.
tŸœãncy
/1000);

674 i‡(!
c⁄fig
.
quõt
 && !c⁄fig.
csv
) {

675 
	`¥ötf
("=====%†======\n", 
c⁄fig
.
tôÀ
);

676 
	`¥ötf
(" %dÑeque°†com∂ëed i¿%.2‡£c⁄ds\n", 
c⁄fig
.
ªque°s_föished
,

677 ()
c⁄fig
.
tŸœãncy
/1000);

678 
	`¥ötf
(" %dÖ¨ÆÀ»˛õ¡s\n", 
c⁄fig
.
num˛õ¡s
);

679 
	`¥ötf
(" %d byã†∑ylﬂd\n", 
c⁄fig
.
d©asize
);

680 
	`¥ötf
(" kì∞Æive: %d\n", 
c⁄fig
.
kì∑live
);

681 
	`¥ötf
("\n");

683 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i++) {

684 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

685 
j
 = 0; j < 
bt
->
ªque°s
; j ++) {

686 
c⁄fig
.
œãncy
[
n
++] = 
bt
->œãncy[
j
];

690 
	`qs‹t
(
c⁄fig
.
œãncy
,c⁄fig.
ªque°s
,(),
com∑ªL©ícy
);

691 
i
 = 0; i < 
c⁄fig
.
ªque°s
; i++) {

692 i‡(
c⁄fig
.
œãncy
[
i
]/1000 !
cuæ©
 || i =(c⁄fig.
ªque°s
-1)) {

693 
cuæ©
 = 
c⁄fig
.
œãncy
[
i
]/1000;

694 
≥rc
 = (()(
i
+1)*100)/
c⁄fig
.
ªque°s
;

695 
	`¥ötf
("%.2f%% <%d mûli£c⁄ds\n", 
≥rc
, 
cuæ©
);

698 
	`¥ötf
("%.2‡ªque°†≥∏£c⁄d\n\n", 
ªq≥r£c
);

699 } i‡(
c⁄fig
.
csv
) {

700 
	`¥ötf
("\"%s\",\"%.2f\"\n", 
c⁄fig
.
tôÀ
, 
ªq≥r£c
);

702 
	`¥ötf
("%s: %.2‡ªque°†≥∏£c⁄d\n", 
c⁄fig
.
tôÀ
, 
ªq≥r£c
);

704 
	}
}

706 
	$bíchm¨k
(*
tôÀ
, *
cmd
, 
Àn
) {

707 
i
;

708 
ªque°s_≥r_thªad
, 
ªque°s_ªmaödî
;

709 
˛õ¡s_≥r_thªad
, 
˛õ¡s_ªmaödî
;

710 
bíchm¨k_˛õ¡
 
c
;

712 
c⁄fig
.
tôÀ
 =Åitle;

713 
c⁄fig
.
ªque°s_issued
 = 0;

714 
c⁄fig
.
ªque°s_föished
 = 0;

717 i‡(
c⁄fig
.
thªads_cou¡
 <= 0) {

718 
	`¥ötf
("ERROR:Åhreads countÇeed biggerÅhan zero\n");

720 
bts
 = 
	`d¨øy_¸óã
(
c⁄fig
.
thªads_cou¡
, (
bíchm¨k_thªad
));

721 
ªque°s_≥r_thªad
 = 
c⁄fig
.
ªque°s
/c⁄fig.
thªads_cou¡
;

722 
ªque°s_ªmaödî
 = 
c⁄fig
.
ªque°s
%c⁄fig.
thªads_cou¡
;

723 
˛õ¡s_≥r_thªad
 = 
c⁄fig
.
num˛õ¡s
/c⁄fig.
thªads_cou¡
;

724 
˛õ¡s_ªmaödî
 = 
c⁄fig
.
num˛õ¡s
%c⁄fig.
thªads_cou¡
;

725 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

726 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_push
(
bts
);

727 
bt
->
id
 = 
i
;

728 
	`bíchm¨k_thªad_öô
(
bt
,

729 
ªque°s_ªmaödî
-->0?
ªque°s_≥r_thªad
+1:requests_per_thread,

730 
˛õ¡s_ªmaödî
-->0?
˛õ¡s_≥r_thªad
+1:clients_per_thread,

731 
cmd
,
Àn
);

734 
c⁄fig
.
°¨t
 = 
	`dm£c_now
();

735 
	`°¨t_bíchm¨k_thªads_u¡û_föish
();

736 
c⁄fig
.
tŸœãncy
 = 
	`dm£c_now
()-c⁄fig.
°¨t
;

738 
	`showL©ícyRï‹t
();

740 
	`d¨øy_n
(
bts
) > 0) {

741 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_p›
(
bts
);

742 
	`bíchm¨k_thªad_deöô
(
bt
);

744 
	`d¨øy_de°roy
(
bts
);

745 
bts
 = 
NULL
;

746 
	}
}

749 
	$∑r£O±i⁄s
(
¨gc
, c⁄° **
¨gv
) {

750 
i
;

751 
œ°¨g
;

752 
exô_°©us
 = 1;

754 
i
 = 1; i < 
¨gc
; i++) {

755 
œ°¨g
 = (
i
 =(
¨gc
-1));

757 i‡(!
	`°rcmp
(
¨gv
[
i
],"-c")) {

758 i‡(
œ°¨g
Ë
övÆid
;

759 
c⁄fig
.
num˛õ¡s
 = 
	`©oi
(
¨gv
[++
i
]);

760 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-n")) {

761 i‡(
œ°¨g
Ë
övÆid
;

762 
c⁄fig
.
ªque°s
 = 
	`©oi
(
¨gv
[++
i
]);

763 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-k")) {

764 i‡(
œ°¨g
Ë
övÆid
;

765 
c⁄fig
.
kì∑live
 = 
	`©oi
(
¨gv
[++
i
]);

766 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-h")) {

767 i‡(
œ°¨g
Ë
övÆid
;

768 
c⁄fig
.
ho°ù
 = 
	`°rdup
(
¨gv
[++
i
]);

769 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-p")) {

770 i‡(
œ°¨g
Ë
övÆid
;

771 
c⁄fig
.
ho°p‹t
 = 
	`©oi
(
¨gv
[++
i
]);

772 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-s")) {

773 i‡(
œ°¨g
Ë
övÆid
;

774 
c⁄fig
.
ho°sockë
 = 
	`°rdup
(
¨gv
[++
i
]);

775 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-a") ) {

776 i‡(
œ°¨g
Ë
övÆid
;

777 
c⁄fig
.
auth
 = 
	`°rdup
(
¨gv
[++
i
]);

778 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-d")) {

779 i‡(
œ°¨g
Ë
övÆid
;

780 
c⁄fig
.
d©asize
 = 
	`©oi
(
¨gv
[++
i
]);

781 i‡(
c⁄fig
.
d©asize
 < 1) config.datasize=1;

782 i‡(
c⁄fig
.
d©asize
 > 1024*1024*1024) config.datasize = 1024*1024*1024;

783 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-P")) {

784 i‡(
œ°¨g
Ë
övÆid
;

785 
c⁄fig
.
pùñöe
 = 
	`©oi
(
¨gv
[++
i
]);

786 i‡(
c⁄fig
.
pùñöe
 <= 0) config.pipeline=1;

787 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-r")) {

788 i‡(
œ°¨g
Ë
övÆid
;

789 
c⁄fig
.
øndomkeys
 = 1;

790 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 
	`©oi
(
¨gv
[++
i
]);

791 i‡(
c⁄fig
.
øndomkeys_key•a˚Àn
 < 0)

792 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 0;

793 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-q")) {

794 
c⁄fig
.
quõt
 = 1;

795 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--csv")) {

796 
c⁄fig
.
csv
 = 1;

797 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-l")) {

798 
c⁄fig
.
lo›
 = 1;

799 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-I")) {

800 
c⁄fig
.
idÀmode
 = 1;

801 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-e")) {

802 
c⁄fig
.
showîr‹s
 = 1;

803 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-t")) {

804 i‡(
œ°¨g
Ë
övÆid
;

810 
c⁄fig
.
ã°s
 = 
	`sd¢ew
(",");

811 
c⁄fig
.
ã°s
 = 
	`sdsˇt
(c⁄fig.ã°s,(*)
¨gv
[++
i
]);

812 
c⁄fig
.
ã°s
 = 
	`sdsˇt
(config.tests,",");

813 
	`sd°ﬁowî
(
c⁄fig
.
ã°s
);

814 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--dbnum")) {

815 i‡(
œ°¨g
Ë
övÆid
;

816 
c⁄fig
.
dbnum
 = 
	`©oi
(
¨gv
[++
i
]);

817 
c⁄fig
.
dbnum°r
 = 
	`sds‰oml⁄gl⁄g
(c⁄fig.
dbnum
);

818 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-T")) {

819 i‡(
œ°¨g
Ë
övÆid
;

820 
c⁄fig
.
thªads_cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

821 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-m")) {

822 
c⁄fig
.
¥Ÿocﬁ
 = 
TEST_CMD_PROTOCOL_MEMCACHE
;

823 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--noinline")) {

824 
c⁄fig
.
noölöe
 = 1;

825 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--help")) {

826 
exô_°©us
 = 0;

827 
ußge
;

832 i‡(
¨gv
[
i
][0] ='-'Ë
övÆid
;

833  
i
;

837  
i
;

839 
övÆid
:

840 
	`¥ötf
("InvÆid o±i⁄ \"%s\" o∏›ti⁄árgumíàmissög\n\n",
¨gv
[
i
]);

842 
ußge
:

843 
	`¥ötf
(

888 
	`exô
(
exô_°©us
);

889 
	}
}

891 
	$showThroughput
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

892 
	`UNUSED
(
evítLo›
);

893 
	`UNUSED
(
id
);

894 
	`UNUSED
(
˛õ¡D©a
);

896 
	`upd©eBíchm¨kSèts
();

898 i‡(
c⁄fig
.
live˛õ¡s
 == 0) {

899 
	`Ârötf
(
°dîr
,"All clients disconnected...áborting.\n");

900 
	`exô
(1);

902 i‡(
c⁄fig
.
csv
)  250;

903 i‡(
c⁄fig
.
idÀmode
 == 1) {

904 
	`¥ötf
("˛õ¡s: %d\r", 
c⁄fig
.
live˛õ¡s
);

905 
	`fÊush
(
°dout
);

908 
dt
 = ()(
	`dm£c_now
()-
c⁄fig
.
°¨t
)/1000.0;

909 
Ωs
 = ()
c⁄fig
.
ªque°s_föished
/
dt
;

910 
	`¥ötf
("%s: %.2f\r", 
c⁄fig
.
tôÀ
, 
Ωs
);

911 
	`fÊush
(
°dout
);

913 
	}
}

917 
	$ã°_is_£À˘ed
(*
«me
) {

918 
buf
[256];

919 
l
 = 
	`°æí
(
«me
);

921 i‡(
c⁄fig
.
ã°s
 =
NULL
)  1;

922 
buf
[0] = ',';

923 
	`mem˝y
(
buf
+1,
«me
,
l
);

924 
buf
[
l
+1] = ',';

925 
buf
[
l
+2] = '\0';

926  
	`°r°r
(
c⁄fig
.
ã°s
,
buf
Ë!
NULL
;

927 
	}
}

929 
	$ã°_ªdis
(
¨gc
, c⁄° **
¨gv
)

931 
i
;

932 *
d©a
, *
cmd
;

933 
Àn
;

936 i‡(
¨gc
) {

937 
sds
 
tôÀ
 = 
	`sd¢ew
(
¨gv
[0]);

938 
i
 = 1; i < 
¨gc
; i++) {

939 
tôÀ
 = 
	`sdsˇéí
(title, " ", 1);

940 
tôÀ
 = 
	`sdsˇéí
—ôÀ, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

944 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

945 
	`bíchm¨k
(
tôÀ
,
cmd
,
Àn
);

946 
	`‰ì
(
cmd
);

947 } 
c⁄fig
.
lo›
);

953 
d©a
 = 
	`mÆloc
(
c⁄fig
.
d©asize
+1);

955 
	`mem£t
(
d©a
,'x',
c⁄fig
.
d©asize
);

956 
d©a
[
c⁄fig
.
d©asize
] = '\0';

958 i‡(!
c⁄fig
.
noölöe
 && (
	`ã°_is_£À˘ed
("ping_inline") ||Åest_is_selected("ping")))

959 
	`bíchm¨k
("PING_INLINE","PING\r\n",6);

961 i‡(
	`ã°_is_£À˘ed
("ping_mbulk") ||Åest_is_selected("ping")) {

962 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"PING");

963 
	`bíchm¨k
("PING_BULK",
cmd
,
Àn
);

964 
	`‰ì
(
cmd
);

967 i‡(
	`ã°_is_£À˘ed
("set")) {

968 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET key:__ønd_öt__ %s",
d©a
);

969 
	`bíchm¨k
("SET",
cmd
,
Àn
);

970 
	`‰ì
(
cmd
);

973 i‡(
	`ã°_is_£À˘ed
("get")) {

974 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"GET key:__rand_int__");

975 
	`bíchm¨k
("GET",
cmd
,
Àn
);

976 
	`‰ì
(
cmd
);

979 i‡(
	`ã°_is_£À˘ed
("incr")) {

980 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"INCR counter:__rand_int__");

981 
	`bíchm¨k
("INCR",
cmd
,
Àn
);

982 
	`‰ì
(
cmd
);

985 i‡(
	`ã°_is_£À˘ed
("lpush")) {

986 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPUSH myli° %s",
d©a
);

987 
	`bíchm¨k
("LPUSH",
cmd
,
Àn
);

988 
	`‰ì
(
cmd
);

991 i‡(
	`ã°_is_£À˘ed
("rpush")) {

992 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"RPUSH myli° %s",
d©a
);

993 
	`bíchm¨k
("RPUSH",
cmd
,
Àn
);

994 
	`‰ì
(
cmd
);

997 i‡(
	`ã°_is_£À˘ed
("lpop")) {

998 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPOP mylist");

999 
	`bíchm¨k
("LPOP",
cmd
,
Àn
);

1000 
	`‰ì
(
cmd
);

1003 i‡(
	`ã°_is_£À˘ed
("rpop")) {

1004 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"RPOP mylist");

1005 
	`bíchm¨k
("RPOP",
cmd
,
Àn
);

1006 
	`‰ì
(
cmd
);

1009 i‡(
	`ã°_is_£À˘ed
("sadd")) {

1010 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,

1012 
	`bíchm¨k
("SADD",
cmd
,
Àn
);

1013 
	`‰ì
(
cmd
);

1016 i‡(
	`ã°_is_£À˘ed
("spop")) {

1017 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SPOP myset");

1018 
	`bíchm¨k
("SPOP",
cmd
,
Àn
);

1019 
	`‰ì
(
cmd
);

1022 i‡(
	`ã°_is_£À˘ed
("lrange") ||

1023 
	`ã°_is_£À˘ed
("lrange_100") ||

1024 
	`ã°_is_£À˘ed
("lrange_300") ||

1025 
	`ã°_is_£À˘ed
("lrange_500") ||

1026 
	`ã°_is_£À˘ed
("lrange_600"))

1028 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPUSH myli° %s",
d©a
);

1029 
	`bíchm¨k
("LPUSH (√ededÅÿbíchm¨k LRANGE)",
cmd
,
Àn
);

1030 
	`‰ì
(
cmd
);

1033 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_100")) {

1034 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 99");

1035 
	`bíchm¨k
("LRANGE_100 (fú° 100ÉÀmíts)",
cmd
,
Àn
);

1036 
	`‰ì
(
cmd
);

1039 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_300")) {

1040 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 299");

1041 
	`bíchm¨k
("LRANGE_300 (fú° 300ÉÀmíts)",
cmd
,
Àn
);

1042 
	`‰ì
(
cmd
);

1045 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_500")) {

1046 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 449");

1047 
	`bíchm¨k
("LRANGE_500 (fú° 450ÉÀmíts)",
cmd
,
Àn
);

1048 
	`‰ì
(
cmd
);

1051 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_600")) {

1052 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 599");

1053 
	`bíchm¨k
("LRANGE_600 (fú° 600ÉÀmíts)",
cmd
,
Àn
);

1054 
	`‰ì
(
cmd
);

1057 i‡(
	`ã°_is_£À˘ed
("mset")) {

1058 c⁄° *
¨gv
[21];

1059 
¨gv
[0] = "MSET";

1060 
i
 = 1; i < 21; i += 2) {

1061 
¨gv
[
i
] = "key:__rand_int__";

1062 
¨gv
[
i
+1] = 
d©a
;

1064 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,21,
¨gv
,
NULL
);

1065 
	`bíchm¨k
("MSET (10 keys)",
cmd
,
Àn
);

1066 
	`‰ì
(
cmd
);

1069 i‡(!
c⁄fig
.
csv
Ë
	`¥ötf
("\n");

1070 } 
c⁄fig
.
lo›
);

1072  
VRT_OK
;

1073 
	}
}

1075 
	$ã°_memˇched
(
¨gc
, c⁄° **
¨gv
)

1077 
i
;

1078 *
d©a
, *
cmd
;

1079 
Àn
;

1082 i‡(
¨gc
) {

1083 
sds
 
tôÀ
 = 
	`sd¢ew
(
¨gv
[0]);

1084 
i
 = 1; i < 
¨gc
; i++) {

1085 
tôÀ
 = 
	`sdsˇéí
(title, " ", 1);

1086 
tôÀ
 = 
	`sdsˇéí
—ôÀ, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

1090 
Àn
 = 
	`memˇchedF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

1091 i‡(
Àn
 < 0) {

1095 
	`bíchm¨k
(
tôÀ
,
cmd
,
Àn
);

1096 
	`‰ì
(
cmd
);

1097 } 
c⁄fig
.
lo›
);

1103 
d©a
 = 
	`mÆloc
(
c⁄fig
.
d©asize
+1);

1105 
	`mem£t
(
d©a
,'x',
c⁄fig
.
d©asize
);

1106 
d©a
[
c⁄fig
.
d©asize
] = '\0';

1108 i‡(
	`ã°_is_£À˘ed
("set")) {

1109 
Àn
 = 
	`memˇchedF‹m©Comm™d
(&
cmd
,"£àkey:__ønd_öt__ 0 0 %d %s", 
c⁄fig
.
d©asize
, 
d©a
);

1111 
	`bíchm¨k
("SET",
cmd
,
Àn
);

1112 
	`‰ì
(
cmd
);

1115 i‡(
	`ã°_is_£À˘ed
("get")) {

1116 
Àn
 = 
	`memˇchedF‹m©Comm™d
(&
cmd
,"get key:__rand_int__");

1117 
	`bíchm¨k
("GET",
cmd
,
Àn
);

1118 
	`‰ì
(
cmd
);

1121 i‡(!
c⁄fig
.
csv
Ë
	`¥ötf
("\n");

1122 } 
c⁄fig
.
lo›
);

1124  
VRT_OK
;

1125 
	}
}

1127 
	$maö
(
¨gc
, c⁄° **
¨gv
) {

1128 
i
;

1130 
bíchm¨k_˛õ¡
 
c
;

1132 
	`§™dom
(
	`time
(
NULL
));

1133 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

1134 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

1136 
c⁄fig
.
num˛õ¡s
 = 50;

1137 
c⁄fig
.
ªque°s
 = 100000;

1138 
c⁄fig
.
live˛õ¡s
 = 0;

1139 
c⁄fig
.
kì∑live
 = 1;

1140 
c⁄fig
.
d©asize
 = 3;

1141 
c⁄fig
.
pùñöe
 = 1;

1142 
c⁄fig
.
showîr‹s
 = 0;

1143 
c⁄fig
.
øndomkeys
 = 0;

1144 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 0;

1145 
c⁄fig
.
quõt
 = 0;

1146 
c⁄fig
.
csv
 = 0;

1147 
c⁄fig
.
lo›
 = 0;

1148 
c⁄fig
.
idÀmode
 = 0;

1149 
c⁄fig
.
œãncy
 = 
NULL
;

1150 
c⁄fig
.
ho°ù
 = "127.0.0.1";

1151 
c⁄fig
.
ho°p‹t
 = 6379;

1152 
c⁄fig
.
ho°sockë
 = 
NULL
;

1153 
c⁄fig
.
ã°s
 = 
NULL
;

1154 
c⁄fig
.
dbnum
 = 0;

1155 
c⁄fig
.
auth
 = 
NULL
;

1156 
c⁄fig
.
thªads_cou¡
 = 1;

1157 
c⁄fig
.
¥Ÿocﬁ
 = 
TEST_CMD_PROTOCOL_REDIS
;

1158 
c⁄fig
.
noölöe
 = 0;

1160 
i
 = 
	`∑r£O±i⁄s
(
¨gc
,
¨gv
);

1161 
¨gc
 -
i
;

1162 
¨gv
 +
i
;

1164 
c⁄fig
.
œãncy
 = 
	`mÆloc
(()*c⁄fig.
ªque°s
);

1166 i‡(
c⁄fig
.
kì∑live
 == 0) {

1167 
	`¥ötf
("WARNING: keepalive disabled, youÖrobablyÇeed 'echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse' for Linuxánd 'sudo sysctl -wÇet.inet.tcp.msl=1000' for Mac OS X in orderÅo useáÜot of clients/requests\n");

1178 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_REDIS
) {

1179 
	`ã°_ªdis
(
¨gc
, 
¨gv
);

1180 } i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

1181 
	`ã°_memˇched
(
¨gc
, 
¨gv
);

1183 
	`NOT_REACHED
();

1187 
	}
}

	@tests/vrt_benchmark.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<as£π.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<´.h
>

14 
	~<húedis.h
>

15 
	~<sds.h
>

17 
	~<d¨øy.h
>

18 
	~<dli°.h
>

19 
	~<dutû.h
>

20 
	~<dlog.h
>

22 
	~<vπ_utû.h
>

23 
	~<vπ_public.h
>

24 
	~<himemˇched.h
>

26 
	#TEST_CMD_PROTOCOL_REDIS
 0

	)

27 
	#TEST_CMD_PROTOCOL_MEMCACHE
 1

	)

29 
	#RANDPTR_INITIAL_SIZE
 8

	)

31 
	sc⁄fig
 {

32 c⁄° *
	mho°ù
;

33 
	mho°p‹t
;

34 c⁄° *
	mho°sockë
;

35 
	mnum˛õ¡s
;

36 
	mlive˛õ¡s
;

37 
	mªque°s
;

38 
	mªque°s_issued
;

39 
	mªque°s_föished
;

40 
	mkeysize
;

41 
	md©asize
;

42 
	møndomkeys
;

43 
	møndomkeys_key•a˚Àn
;

44 
	mkì∑live
;

45 
	mpùñöe
;

46 
	mshowîr‹s
;

47 
	m°¨t
;

48 
	mtŸœãncy
;

49 *
	mœãncy
;

50 c⁄° *
	mtôÀ
;

51 
	mquõt
;

52 
	mcsv
;

53 
	mlo›
;

54 
	midÀmode
;

55 
	mdbnum
;

56 
sds
 
	mdbnum°r
;

57 *
	mã°s
;

58 *
	mauth
;

59 
	mthªads_cou¡
;

60 
	m¥Ÿocﬁ
;

61 
	mnoölöe
;

62 } 
	gc⁄fig
;

64 
	sbíchm¨k_thªad
 {

65 
	mid
;

66 
±hªad_t
 
	mthªad_id
;

68 
´EvítLo›
 *
	mñ
;

69 
	mhz
;

70 
	m¸⁄lo›s
;

72 
dli°
 *
	m˛õ¡s
;

73 
	mnum˛õ¡s
;

74 
	mlive˛õ¡s
;

76 
	mªque°s
;

77 
	mªque°s_issued
;

78 
	mªque°s_föished
;

80 
	m°¨t
;

81 
	mtŸœãncy
;

82 *
	mœãncy
;

83 } 
	tbíchm¨k_thªad
;

85 
	s_bíchm¨k_˛õ¡
 {

86 
bíchm¨k_thªad
 *
	mbt
;

88 
ªdisC⁄ãxt
 *
	mrc
;

89 
mcC⁄ãxt
 *
	mmc
;

90 
sds
 
	mobuf
;

91 **
	mønd±r
;

92 
size_t
 
	møndÀn
;

93 
size_t
 
	mønd‰ì
;

94 
size_t
 
	mwrôãn
;

95 
	m°¨t
;

96 
	mœãncy
;

97 
	m≥ndög
;

98 
	m¥efix_≥ndög
;

101 
	m¥efixÀn
;

102 } *
	tbíchm¨k_˛õ¡
;

104 
d¨øy
 *
	gbts
;

107 
wrôeH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

108 
bíchm¨k_˛õ¡
 
¸óãClõ¡
(*
cmd
, 
size_t
 
Àn
, bíchm¨k_˛õ¡ 
‰om
, 
bíchm¨k_thªad
 *
thªad
);

109 
¸óãMissögClõ¡s
(
bíchm¨k_˛õ¡
 
c
);

110 
showThroughput
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
);

112 
	$‰ìClõ¡
(
bíchm¨k_˛õ¡
 
c
) {

113 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

114 
dli°Node
 *
 
;

116 i‡(
bt
->
ñ
) {

117 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

118 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
);

120 
	`ªdisFªe
(
c
->
rc
);

121 i‡(
c
->
mc
) {

122 
c
->
mc
->
fd
 = -1;

123 
	`memˇchedFªe
(
c
->
mc
);

125 
	`sds‰ì
(
c
->
obuf
);

126 
	`‰ì
(
c
->
ønd±r
);

127 
	`‰ì
(
c
);

128 
	`upd©e_°©e_sub
(
bt
->
live˛õ¡s
,1);

129 
 
 = 
	`dli°SórchKey
(
bt
->
˛õ¡s
,
c
);

130 
	`ASSERT
(
 
 !
NULL
);

131 
	`dli°DñNode
(
bt
->
˛õ¡s
,
 
);

132 
	}
}

134 
	$‰ìAŒClõ¡s
(
dli°
 *
˛õ¡s
) {

135 
dli°Node
 *
 
 = 
˛õ¡s
->
hód
, *
√xt
;

137 
 
) {

138 
√xt
 = 
 
->next;

139 
	`‰ìClõ¡
(
 
->
vÆue
);

140 
 
 = 
√xt
;

142 
	}
}

144 
	$ª£tClõ¡
(
bíchm¨k_˛õ¡
 
c
) {

145 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

147 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

148 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
);

149 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
,
wrôeH™dÀr
,c);

150 
c
->
wrôãn
 = 0;

151 
c
->
≥ndög
 = 
c⁄fig
.
pùñöe
;

152 
	}
}

154 
	$øndomizeClõ¡Key
(
bíchm¨k_˛õ¡
 
c
) {

155 
size_t
 
i
;

157 
i
 = 0; i < 
c
->
øndÀn
; i++) {

158 *
p
 = 
c
->
ønd±r
[
i
]+11;

159 
size_t
 
r
 = 
	`øndom
(Ë% 
c⁄fig
.
øndomkeys_key•a˚Àn
;

160 
size_t
 
j
;

162 
j
 = 0; j < 12; j++) {

163 *
p
 = '0'+
r
%10;

164 
r
/=10;

165 
p
--;

168 
	}
}

170 
	$˛õ¡D⁄e
(
bíchm¨k_˛õ¡
 
c
) {

171 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

172 
ªque°s_föished
;

174 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

175 i‡(
ªque°s_föished
 =
bt
->
ªque°s
) {

176 
	`‰ìClõ¡
(
c
);

177 
	`´St›
(
bt
->
ñ
);

180 i‡(
c⁄fig
.
kì∑live
) {

181 
	`ª£tClõ¡
(
c
);

183 
	`upd©e_°©e_sub
(
bt
->
live˛õ¡s
,1);

184 
	`¸óãMissögClõ¡s
(
c
);

185 
	`upd©e_°©e_add
(
bt
->
live˛õ¡s
,1);

186 
	`‰ìClõ¡
(
c
);

188 
	}
}

190 
	$bíchm¨k_thªad_öô
(
bíchm¨k_thªad
 *
bt
, 
ªque°s
, 
num˛õ¡s
, *
cmd
, 
size_t
 
Àn
)

192 
bíchm¨k_˛õ¡
 
c
;

194 
bt
->
thªad_id
 = 0;

195 
bt
->
ñ
 = 
NULL
;

196 
bt
->
hz
 = 10;

197 
bt
->
¸⁄lo›s
 = 0;

198 
bt
->
˛õ¡s
 = 
NULL
;

199 
bt
->
num˛õ¡s
 =Çumclients;

200 
bt
->
live˛õ¡s
 = 0;

201 
bt
->
ªque°s
 =Ñequests;

202 
bt
->
ªque°s_issued
 = 0;

203 
bt
->
ªque°s_föished
 = 0;

204 
bt
->
°¨t
 = 0;

205 
bt
->
tŸœãncy
 = 0;

206 
bt
->
œãncy
 = 
NULL
;

208 
bt
->
ñ
 = 
	`´Cª©eEvítLo›
(1024*10);

209 i‡(
bt
->
ñ
 =
NULL
) {

210  
VRT_ERROR
;

213 
bt
->
˛õ¡s
 = 
	`dli°Cª©e
();

214 i‡(
bt
->
˛õ¡s
 =
NULL
) {

215  
VRT_ERROR
;

218 
bt
->
œãncy
 = 
	`mÆloc
(()*bt->
ªque°s
);

220 
c
 = 
	`¸óãClõ¡
(
cmd
,
Àn
,
NULL
,
bt
);

221 
	`¸óãMissögClõ¡s
(
c
);

223 i‡(
bt
->
id
 == 0) {

224 
	`´Cª©eTimeEvít
(
bt
->
ñ
,1,
showThroughput
,
NULL
,NULL);

227  
VRT_OK
;

228 
	}
}

230 
	$bíchm¨k_thªad_deöô
(
bíchm¨k_thªad
 *
bt
)

232 i‡(
bt
->
˛õ¡s
) {

233 
	`‰ìAŒClõ¡s
(
bt
->
˛õ¡s
);

234 
	`dli°Rñó£
(
bt
->
˛õ¡s
);

235 
bt
->
˛õ¡s
 = 
NULL
;

238 i‡(
bt
->
ñ
) {

239 
	`´DñëeEvítLo›
(
bt
->
ñ
);

240 
bt
->
ñ
 = 
NULL
;

243 i‡(
bt
->
œãncy
) {

244 
	`‰ì
(
bt
->
œãncy
);

245 
bt
->
œãncy
 = 
NULL
;

247 
	}
}

249 *
	$bíchm¨k_thªad_run
(*
¨gs
)

251 
bíchm¨k_thªad
 *
bt
 = 
¨gs
;

252 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

254 
	`´Maö
(
bt
->
ñ
);

256  
NULL
;

257 
	}
}

259 
	$°¨t_bíchm¨k_thªads_u¡û_föish
()

261 
i
;

262 
bíchm¨k_thªad
 *
bt
;

264 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

265 
±hªad_©å_t
 
©å
;

266 
	`±hªad_©å_öô
(&
©å
);

267 
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

268 
	`±hªad_¸óã
(&
bt
->
thªad_id
,

269 &
©å
, 
bíchm¨k_thªad_run
, 
bt
);

272 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

273 
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

274 
	`±hªad_joö
(
bt
->
thªad_id
, 
NULL
);

277  
VRT_OK
;

278 
	}
}

280 
	$ªadH™dÀrMC
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

281 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

282 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

283 
mcC⁄ãxt
 *
mc
 = 
c
->mc;

284 
ªque°s_föished
;

285 *
ª∂y
 = 
NULL
;

286 
	`UNUSED
(
ñ
);

287 
	`UNUSED
(
fd
);

288 
	`UNUSED
(
mask
);

293 i‡(
c
->
œãncy
 < 0Ëc->œãncy = 
	`du£c_now
()-(c->
°¨t
);

295 i‡(
	`memˇchedBuf„rRód
(
mc
Ë!
MC_OK
) {

296 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
mc
->
îr°r
);

297 
	`exô
(1);

299 
c
->
≥ndög
) {

300 i‡(
	`memˇchedGëRïly
(
mc
,&
ª∂y
Ë!
MC_OK
) {

301 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
mc
->
îr°r
);

302 
	`exô
(1);

305 i‡(
ª∂y
 !
NULL
) {

306 i‡(
ª∂y
 =(*)
MC_REPLY_ERROR
) {

307 
	`Ârötf
(
°dîr
,"UnexpectedÉrrorÑeply,Éxiting...\n");

308 
	`exô
(1);

311 i‡(
c⁄fig
.
showîr‹s
) {

312 
time_t
 
œ°îr_time
 = 0;

313 
time_t
 
now
 = 
	`time
(
NULL
);

314 
mcRïly
 *
r
 = 
ª∂y
;

315 i‡(
r
->
ty≥
 =
MC_REPLY_ERROR
 && 
œ°îr_time
 !
now
) {

316 
œ°îr_time
 = 
now
;

317 
	`¥ötf
("Eº‹ from sîvî: %s\n", 
r
->
°r
);

321 
	`‰ìMcRïlyObje˘
(
ª∂y
);

323 i‡(
c
->
¥efix_≥ndög
 > 0) {

324 
c
->
¥efix_≥ndög
--;

325 
c
->
≥ndög
--;

327 i‡(
c
->
¥efixÀn
 > 0) {

328 
size_t
 
j
;

329 
	`sd§™ge
(
c
->
obuf
, c->
¥efixÀn
, -1);

332 
j
 = 0; j < 
c
->
øndÀn
; j++)

333 
c
->
ønd±r
[
j
] -c->
¥efixÀn
;

334 
c
->
¥efixÀn
 = 0;

339 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

340 i‡(
ªque°s_föished
 < 
bt
->
ªque°s
) {

341 
bt
->
œãncy
[
ªque°s_föished
] = 
c
->latency;

342 
	`upd©e_°©e_add
(
bt
->
ªque°s_föished
,1);

344 
c
->
≥ndög
--;

345 i‡(
c
->
≥ndög
 == 0) {

346 
	`˛õ¡D⁄e
(
c
);

354 
	}
}

356 
	$ªadH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

357 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

358 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

359 
ªque°s_föished
;

360 *
ª∂y
 = 
NULL
;

361 
	`UNUSED
(
ñ
);

362 
	`UNUSED
(
fd
);

363 
	`UNUSED
(
mask
);

368 i‡(
c
->
œãncy
 < 0Ëc->œãncy = 
	`du£c_now
()-(c->
°¨t
);

370 i‡(
	`ªdisBuf„rRód
(
c
->
rc
Ë!
REDIS_OK
) {

371 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
c
->
rc
->
îr°r
);

372 
	`exô
(1);

374 
c
->
≥ndög
) {

375 i‡(
	`ªdisGëRïly
(
c
->
rc
,&
ª∂y
Ë!
REDIS_OK
) {

376 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
c
->
rc
->
îr°r
);

377 
	`exô
(1);

379 i‡(
ª∂y
 !
NULL
) {

380 i‡(
ª∂y
 =(*)
REDIS_REPLY_ERROR
) {

381 
	`Ârötf
(
°dîr
,"UnexpectedÉrrorÑeply,Éxiting...\n");

382 
	`exô
(1);

385 i‡(
c⁄fig
.
showîr‹s
) {

386 
time_t
 
œ°îr_time
 = 0;

387 
time_t
 
now
 = 
	`time
(
NULL
);

388 
ªdisRïly
 *
r
 = 
ª∂y
;

389 i‡(
r
->
ty≥
 =
REDIS_REPLY_ERROR
 && 
œ°îr_time
 !
now
) {

390 
œ°îr_time
 = 
now
;

391 
	`¥ötf
("Eº‹ from sîvî: %s\n", 
r
->
°r
);

395 
	`‰ìRïlyObje˘
(
ª∂y
);

397 i‡(
c
->
¥efix_≥ndög
 > 0) {

398 
c
->
¥efix_≥ndög
--;

399 
c
->
≥ndög
--;

401 i‡(
c
->
¥efixÀn
 > 0) {

402 
size_t
 
j
;

403 
	`sd§™ge
(
c
->
obuf
, c->
¥efixÀn
, -1);

406 
j
 = 0; j < 
c
->
øndÀn
; j++)

407 
c
->
ønd±r
[
j
] -c->
¥efixÀn
;

408 
c
->
¥efixÀn
 = 0;

413 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

414 i‡(
ªque°s_föished
 < 
bt
->
ªque°s
) {

415 
bt
->
œãncy
[
ªque°s_föished
] = 
c
->latency;

416 
	`upd©e_°©e_add
(
bt
->
ªque°s_föished
,1);

418 
c
->
≥ndög
--;

419 i‡(
c
->
≥ndög
 == 0) {

420 
	`˛õ¡D⁄e
(
c
);

428 
	}
}

430 
	$wrôeH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

431 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

432 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

433 
	`UNUSED
(
ñ
);

434 
	`UNUSED
(
fd
);

435 
	`UNUSED
(
mask
);

438 i‡(
c
->
wrôãn
 == 0) {

440 i‡(
bt
->
ªque°s_issued
++ >bt->
ªque°s
) {

441 
	`‰ìClõ¡
(
c
);

446 i‡(
c⁄fig
.
øndomkeys
Ë
	`øndomizeClõ¡Key
(
c
);

447 
c
->
°¨t
 = 
	`du£c_now
();

448 
c
->
œãncy
 = -1;

451 i‡(
	`sd¶í
(
c
->
obuf
Ë> c->
wrôãn
) {

452 *
±r
 = 
c
->
obuf
+c->
wrôãn
;

453 
ssize_t
 
nwrôãn
 = 
	`wrôe
(
c
->
rc
->
fd
,
±r
,
	`sd¶í
(c->
obuf
)-c->
wrôãn
);

455 i‡(
nwrôãn
 == -1) {

456 i‡(
î∫o
 !
EPIPE
)

457 
	`Ârötf
(
°dîr
, "WrôögÅÿsockë: %s\n", 
	`°ªº‹
(
î∫o
));

458 
	`‰ìClõ¡
(
c
);

461 
c
->
wrôãn
 +
nwrôãn
;

462 i‡(
	`sd¶í
(
c
->
obuf
Ë=c->
wrôãn
) {

463 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

464 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_REDIS
) {

465 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
,
ªadH™dÀr
,c);

466 } i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

467 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
,
ªadH™dÀrMC
,c);

469 
	`NOT_REACHED
();

473 
	}
}

496 
bíchm¨k_˛õ¡
 
	$¸óãClõ¡
(*
cmd
, 
size_t
 
Àn
, 
bíchm¨k_˛õ¡
 
‰om
, 
bíchm¨k_thªad
 *
thªad
) {

497 
j
;

498 
bíchm¨k_thªad
 *
bt
;

499 
bíchm¨k_˛õ¡
 
c
 = 
	`mÆloc
((
_bíchm¨k_˛õ¡
));

501 
c
->
bt
 = 
NULL
;

502 
c
->
rc
 = 
NULL
;

503 
c
->
mc
 = 
NULL
;

504 
c
->
obuf
 = 
NULL
;

505 
c
->
ønd±r
 = 
NULL
;

506 
c
->
øndÀn
 = 0;

507 
c
->
ønd‰ì
 = 0;

508 
c
->
wrôãn
 = 0;

509 
c
->
°¨t
 = 0;

510 
c
->
œãncy
 = 0;

511 
c
->
≥ndög
 = 0;

512 
c
->
¥efix_≥ndög
 = 0;

513 
c
->
¥efixÀn
 = 0;

515 i‡(
‰om
 =
NULL
) {

516 
	`ASSERT
(
thªad
 !
NULL
);

517 
bt
 = 
thªad
;

519 
bt
 = 
‰om
->bt;

522 
c
->
bt
 = bt;

524 i‡(
c⁄fig
.
ho°sockë
 =
NULL
) {

525 
c
->
rc
 = 
	`ªdisC⁄√˘N⁄Block
(
c⁄fig
.
ho°ù
,c⁄fig.
ho°p‹t
);

527 
c
->
rc
 = 
	`ªdisC⁄√˘UnixN⁄Block
(
c⁄fig
.
ho°sockë
);

529 i‡(
c
->
rc
->
îr
) {

530 
	`Ârötf
(
°dîr
,"CouldÇot connectÅo Redisát ");

531 i‡(
c⁄fig
.
ho°sockë
 =
NULL
)

532 
	`Ârötf
(
°dîr
,"%s:%d: %s\n",
c⁄fig
.
ho°ù
,c⁄fig.
ho°p‹t
,
c
->
rc
->
îr°r
);

534 
	`Ârötf
(
°dîr
,"%s: %s\n",
c⁄fig
.
ho°sockë
,
c
->
rc
->
îr°r
);

535 
	`exô
(1);

538 
c
->
rc
->
ªadî
->
maxbuf
 = 0;

543 
c
->
obuf
 = 
	`sd£m±y
();

547 
c
->
¥efix_≥ndög
 = 0;

548 i‡(
c⁄fig
.
auth
) {

549 *
buf
 = 
NULL
;

550 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
buf
, "AUTH %s", 
c⁄fig
.
auth
);

551 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf, 
buf
, 
Àn
);

552 
	`‰ì
(
buf
);

553 
c
->
¥efix_≥ndög
++;

560 i‡(
c⁄fig
.
dbnum
 != 0) {

561 
c
->
obuf
 = 
	`sdsˇçrötf
(c->obuf,"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n",

562 ()
	`sd¶í
(
c⁄fig
.
dbnum°r
),config.dbnumstr);

563 
c
->
¥efix_≥ndög
++;

565 
c
->
¥efixÀn
 = 
	`sd¶í
(c->
obuf
);

567 i‡(
‰om
) {

568 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf,

569 
‰om
->
obuf
+‰om->
¥efixÀn
,

570 
	`sd¶í
(
‰om
->
obuf
)-‰om->
¥efixÀn
);

572 
j
 = 0; j < 
c⁄fig
.
pùñöe
; j++)

573 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf,
cmd
,
Àn
);

576 
c
->
wrôãn
 = 0;

577 
c
->
≥ndög
 = 
c⁄fig
.
pùñöe
+c->
¥efix_≥ndög
;

578 
c
->
ønd±r
 = 
NULL
;

579 
c
->
øndÀn
 = 0;

582 i‡(
c⁄fig
.
øndomkeys
) {

583 i‡(
‰om
) {

584 
c
->
øndÀn
 = 
‰om
->randlen;

585 
c
->
ønd‰ì
 = 0;

586 
c
->
ønd±r
 = 
	`mÆloc
((*)*c->
øndÀn
);

588 
j
 = 0; j < ()
c
->
øndÀn
; j++) {

589 
c
->
ønd±r
[
j
] = c->
obuf
 + (
‰om
->randptr[j]-from->obuf);

591 
c
->
ønd±r
[
j
] +c->
¥efixÀn
 - 
‰om
->prefixlen;

594 *
p
 = 
c
->
obuf
;

596 
c
->
øndÀn
 = 0;

597 
c
->
ønd‰ì
 = 
RANDPTR_INITIAL_SIZE
;

598 
c
->
ønd±r
 = 
	`mÆloc
((*)*c->
ønd‰ì
);

599 (
p
 = 
	`°r°r
’,"__ønd_öt__")Ë!
NULL
) {

600 i‡(
c
->
ønd‰ì
 == 0) {

601 
c
->
ønd±r
 = 
	`ªÆloc
(c->ønd±r,(*)*c->
øndÀn
*2);

602 
c
->
ønd‰ì
 +c->
øndÀn
;

604 
c
->
ønd±r
[c->
øndÀn
++] = 
p
;

605 
c
->
ønd‰ì
--;

606 
p
 += 12;

610 i‡(
c⁄fig
.
idÀmode
 == 0)

611 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
,
wrôeH™dÀr
,c);

614 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

615 
c
->
mc
 = 
	`memˇchedC⁄ãxtInô
();

616 
c
->
mc
->
fd
 = c->
rc
->fd;

617 
c
->
mc
->
Êags
 &~
MC_BLOCK
;

620 
	`dli°AddNodeTaû
(
bt
->
˛õ¡s
,
c
);

621 
	`upd©e_°©e_add
(
bt
->
live˛õ¡s
,1);

623  
c
;

624 
	}
}

626 
	$¸óãMissögClõ¡s
(
bíchm¨k_˛õ¡
 
c
) {

627 
n
 = 0;

628 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

629 
live˛õ¡s
;

631 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&liveclients);

633 
live˛õ¡s
 < 
bt
->
num˛õ¡s
) {

634 
	`¸óãClõ¡
(
NULL
,0,
c
,NULL);

637 i‡(++
n
 > 64) {

638 
	`u¶ìp
(50000);

639 
n
 = 0;

641 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&liveclients);

643 
	}
}

645 
	$com∑ªL©ícy
(c⁄° *
a
, c⁄° *
b
) {

646  (*(*)
a
)-(*(*)
b
);

647 
	}
}

649 
	$upd©eBíchm¨kSèts
()

651 
i
;

652 
cou¡
;

654 
c⁄fig
.
live˛õ¡s
 = 0;

655 
c⁄fig
.
ªque°s_föished
 = 0;

657 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

658 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

659 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&
cou¡
);

660 
c⁄fig
.
live˛õ¡s
 +
cou¡
;

661 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&
cou¡
);

662 
c⁄fig
.
ªque°s_föished
 +
cou¡
;

664 
	}
}

666 
	$showL©ícyRï‹t
() {

667 
i
, 
j
, 
cuæ©
 = 0;

668 
n
 = 0;

669 
≥rc
, 
ªq≥r£c
;

671 
	`upd©eBíchm¨kSèts
();

673 
ªq≥r£c
 = ()
c⁄fig
.
ªque°s_föished
/(()c⁄fig.
tŸœãncy
/1000);

674 i‡(!
c⁄fig
.
quõt
 && !c⁄fig.
csv
) {

675 
	`¥ötf
("=====%†======\n", 
c⁄fig
.
tôÀ
);

676 
	`¥ötf
(" %dÑeque°†com∂ëed i¿%.2‡£c⁄ds\n", 
c⁄fig
.
ªque°s_föished
,

677 ()
c⁄fig
.
tŸœãncy
/1000);

678 
	`¥ötf
(" %dÖ¨ÆÀ»˛õ¡s\n", 
c⁄fig
.
num˛õ¡s
);

679 
	`¥ötf
(" %d byã†∑ylﬂd\n", 
c⁄fig
.
d©asize
);

680 
	`¥ötf
(" kì∞Æive: %d\n", 
c⁄fig
.
kì∑live
);

681 
	`¥ötf
("\n");

683 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i++) {

684 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

685 
j
 = 0; j < 
bt
->
ªque°s
; j ++) {

686 
c⁄fig
.
œãncy
[
n
++] = 
bt
->œãncy[
j
];

690 
	`qs‹t
(
c⁄fig
.
œãncy
,c⁄fig.
ªque°s
,(),
com∑ªL©ícy
);

691 
i
 = 0; i < 
c⁄fig
.
ªque°s
; i++) {

692 i‡(
c⁄fig
.
œãncy
[
i
]/1000 !
cuæ©
 || i =(c⁄fig.
ªque°s
-1)) {

693 
cuæ©
 = 
c⁄fig
.
œãncy
[
i
]/1000;

694 
≥rc
 = (()(
i
+1)*100)/
c⁄fig
.
ªque°s
;

695 
	`¥ötf
("%.2f%% <%d mûli£c⁄ds\n", 
≥rc
, 
cuæ©
);

698 
	`¥ötf
("%.2‡ªque°†≥∏£c⁄d\n\n", 
ªq≥r£c
);

699 } i‡(
c⁄fig
.
csv
) {

700 
	`¥ötf
("\"%s\",\"%.2f\"\n", 
c⁄fig
.
tôÀ
, 
ªq≥r£c
);

702 
	`¥ötf
("%s: %.2‡ªque°†≥∏£c⁄d\n", 
c⁄fig
.
tôÀ
, 
ªq≥r£c
);

704 
	}
}

706 
	$bíchm¨k
(*
tôÀ
, *
cmd
, 
Àn
) {

707 
i
;

708 
ªque°s_≥r_thªad
, 
ªque°s_ªmaödî
;

709 
˛õ¡s_≥r_thªad
, 
˛õ¡s_ªmaödî
;

710 
bíchm¨k_˛õ¡
 
c
;

712 
c⁄fig
.
tôÀ
 =Åitle;

713 
c⁄fig
.
ªque°s_issued
 = 0;

714 
c⁄fig
.
ªque°s_föished
 = 0;

717 i‡(
c⁄fig
.
thªads_cou¡
 <= 0) {

718 
	`¥ötf
("ERROR:Åhreads countÇeed biggerÅhan zero\n");

720 
bts
 = 
	`d¨øy_¸óã
(
c⁄fig
.
thªads_cou¡
, (
bíchm¨k_thªad
));

721 
ªque°s_≥r_thªad
 = 
c⁄fig
.
ªque°s
/c⁄fig.
thªads_cou¡
;

722 
ªque°s_ªmaödî
 = 
c⁄fig
.
ªque°s
%c⁄fig.
thªads_cou¡
;

723 
˛õ¡s_≥r_thªad
 = 
c⁄fig
.
num˛õ¡s
/c⁄fig.
thªads_cou¡
;

724 
˛õ¡s_ªmaödî
 = 
c⁄fig
.
num˛õ¡s
%c⁄fig.
thªads_cou¡
;

725 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

726 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_push
(
bts
);

727 
bt
->
id
 = 
i
;

728 
	`bíchm¨k_thªad_öô
(
bt
,

729 
ªque°s_ªmaödî
-->0?
ªque°s_≥r_thªad
+1:requests_per_thread,

730 
˛õ¡s_ªmaödî
-->0?
˛õ¡s_≥r_thªad
+1:clients_per_thread,

731 
cmd
,
Àn
);

734 
c⁄fig
.
°¨t
 = 
	`dm£c_now
();

735 
	`°¨t_bíchm¨k_thªads_u¡û_föish
();

736 
c⁄fig
.
tŸœãncy
 = 
	`dm£c_now
()-c⁄fig.
°¨t
;

738 
	`showL©ícyRï‹t
();

740 
	`d¨øy_n
(
bts
) > 0) {

741 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_p›
(
bts
);

742 
	`bíchm¨k_thªad_deöô
(
bt
);

744 
	`d¨øy_de°roy
(
bts
);

745 
bts
 = 
NULL
;

746 
	}
}

749 
	$∑r£O±i⁄s
(
¨gc
, c⁄° **
¨gv
) {

750 
i
;

751 
œ°¨g
;

752 
exô_°©us
 = 1;

754 
i
 = 1; i < 
¨gc
; i++) {

755 
œ°¨g
 = (
i
 =(
¨gc
-1));

757 i‡(!
	`°rcmp
(
¨gv
[
i
],"-c")) {

758 i‡(
œ°¨g
Ë
övÆid
;

759 
c⁄fig
.
num˛õ¡s
 = 
	`©oi
(
¨gv
[++
i
]);

760 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-n")) {

761 i‡(
œ°¨g
Ë
övÆid
;

762 
c⁄fig
.
ªque°s
 = 
	`©oi
(
¨gv
[++
i
]);

763 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-k")) {

764 i‡(
œ°¨g
Ë
övÆid
;

765 
c⁄fig
.
kì∑live
 = 
	`©oi
(
¨gv
[++
i
]);

766 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-h")) {

767 i‡(
œ°¨g
Ë
övÆid
;

768 
c⁄fig
.
ho°ù
 = 
	`°rdup
(
¨gv
[++
i
]);

769 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-p")) {

770 i‡(
œ°¨g
Ë
övÆid
;

771 
c⁄fig
.
ho°p‹t
 = 
	`©oi
(
¨gv
[++
i
]);

772 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-s")) {

773 i‡(
œ°¨g
Ë
övÆid
;

774 
c⁄fig
.
ho°sockë
 = 
	`°rdup
(
¨gv
[++
i
]);

775 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-a") ) {

776 i‡(
œ°¨g
Ë
övÆid
;

777 
c⁄fig
.
auth
 = 
	`°rdup
(
¨gv
[++
i
]);

778 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-d")) {

779 i‡(
œ°¨g
Ë
övÆid
;

780 
c⁄fig
.
d©asize
 = 
	`©oi
(
¨gv
[++
i
]);

781 i‡(
c⁄fig
.
d©asize
 < 1) config.datasize=1;

782 i‡(
c⁄fig
.
d©asize
 > 1024*1024*1024) config.datasize = 1024*1024*1024;

783 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-P")) {

784 i‡(
œ°¨g
Ë
övÆid
;

785 
c⁄fig
.
pùñöe
 = 
	`©oi
(
¨gv
[++
i
]);

786 i‡(
c⁄fig
.
pùñöe
 <= 0) config.pipeline=1;

787 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-r")) {

788 i‡(
œ°¨g
Ë
övÆid
;

789 
c⁄fig
.
øndomkeys
 = 1;

790 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 
	`©oi
(
¨gv
[++
i
]);

791 i‡(
c⁄fig
.
øndomkeys_key•a˚Àn
 < 0)

792 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 0;

793 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-q")) {

794 
c⁄fig
.
quõt
 = 1;

795 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--csv")) {

796 
c⁄fig
.
csv
 = 1;

797 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-l")) {

798 
c⁄fig
.
lo›
 = 1;

799 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-I")) {

800 
c⁄fig
.
idÀmode
 = 1;

801 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-e")) {

802 
c⁄fig
.
showîr‹s
 = 1;

803 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-t")) {

804 i‡(
œ°¨g
Ë
övÆid
;

810 
c⁄fig
.
ã°s
 = 
	`sd¢ew
(",");

811 
c⁄fig
.
ã°s
 = 
	`sdsˇt
(c⁄fig.ã°s,(*)
¨gv
[++
i
]);

812 
c⁄fig
.
ã°s
 = 
	`sdsˇt
(config.tests,",");

813 
	`sd°ﬁowî
(
c⁄fig
.
ã°s
);

814 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--dbnum")) {

815 i‡(
œ°¨g
Ë
övÆid
;

816 
c⁄fig
.
dbnum
 = 
	`©oi
(
¨gv
[++
i
]);

817 
c⁄fig
.
dbnum°r
 = 
	`sds‰oml⁄gl⁄g
(c⁄fig.
dbnum
);

818 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-T")) {

819 i‡(
œ°¨g
Ë
övÆid
;

820 
c⁄fig
.
thªads_cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

821 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-m")) {

822 
c⁄fig
.
¥Ÿocﬁ
 = 
TEST_CMD_PROTOCOL_MEMCACHE
;

823 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--noinline")) {

824 
c⁄fig
.
noölöe
 = 1;

825 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--help")) {

826 
exô_°©us
 = 0;

827 
ußge
;

832 i‡(
¨gv
[
i
][0] ='-'Ë
övÆid
;

833  
i
;

837  
i
;

839 
övÆid
:

840 
	`¥ötf
("InvÆid o±i⁄ \"%s\" o∏›ti⁄árgumíàmissög\n\n",
¨gv
[
i
]);

842 
ußge
:

843 
	`¥ötf
(

888 
	`exô
(
exô_°©us
);

889 
	}
}

891 
	$showThroughput
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

892 
	`UNUSED
(
evítLo›
);

893 
	`UNUSED
(
id
);

894 
	`UNUSED
(
˛õ¡D©a
);

896 
	`upd©eBíchm¨kSèts
();

898 i‡(
c⁄fig
.
live˛õ¡s
 == 0) {

899 
	`Ârötf
(
°dîr
,"All clients disconnected...áborting.\n");

900 
	`exô
(1);

902 i‡(
c⁄fig
.
csv
)  250;

903 i‡(
c⁄fig
.
idÀmode
 == 1) {

904 
	`¥ötf
("˛õ¡s: %d\r", 
c⁄fig
.
live˛õ¡s
);

905 
	`fÊush
(
°dout
);

908 
dt
 = ()(
	`dm£c_now
()-
c⁄fig
.
°¨t
)/1000.0;

909 
Ωs
 = ()
c⁄fig
.
ªque°s_föished
/
dt
;

910 
	`¥ötf
("%s: %.2f\r", 
c⁄fig
.
tôÀ
, 
Ωs
);

911 
	`fÊush
(
°dout
);

913 
	}
}

917 
	$ã°_is_£À˘ed
(*
«me
) {

918 
buf
[256];

919 
l
 = 
	`°æí
(
«me
);

921 i‡(
c⁄fig
.
ã°s
 =
NULL
)  1;

922 
buf
[0] = ',';

923 
	`mem˝y
(
buf
+1,
«me
,
l
);

924 
buf
[
l
+1] = ',';

925 
buf
[
l
+2] = '\0';

926  
	`°r°r
(
c⁄fig
.
ã°s
,
buf
Ë!
NULL
;

927 
	}
}

929 
	$ã°_ªdis
(
¨gc
, c⁄° **
¨gv
)

931 
i
;

932 *
d©a
, *
cmd
;

933 
Àn
;

936 i‡(
¨gc
) {

937 
sds
 
tôÀ
 = 
	`sd¢ew
(
¨gv
[0]);

938 
i
 = 1; i < 
¨gc
; i++) {

939 
tôÀ
 = 
	`sdsˇéí
(title, " ", 1);

940 
tôÀ
 = 
	`sdsˇéí
—ôÀ, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

944 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

945 
	`bíchm¨k
(
tôÀ
,
cmd
,
Àn
);

946 
	`‰ì
(
cmd
);

947 } 
c⁄fig
.
lo›
);

953 
d©a
 = 
	`mÆloc
(
c⁄fig
.
d©asize
+1);

955 
	`mem£t
(
d©a
,'x',
c⁄fig
.
d©asize
);

956 
d©a
[
c⁄fig
.
d©asize
] = '\0';

958 i‡(!
c⁄fig
.
noölöe
 && (
	`ã°_is_£À˘ed
("ping_inline") ||Åest_is_selected("ping")))

959 
	`bíchm¨k
("PING_INLINE","PING\r\n",6);

961 i‡(
	`ã°_is_£À˘ed
("ping_mbulk") ||Åest_is_selected("ping")) {

962 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"PING");

963 
	`bíchm¨k
("PING_BULK",
cmd
,
Àn
);

964 
	`‰ì
(
cmd
);

967 i‡(
	`ã°_is_£À˘ed
("set")) {

968 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET key:__ønd_öt__ %s",
d©a
);

969 
	`bíchm¨k
("SET",
cmd
,
Àn
);

970 
	`‰ì
(
cmd
);

973 i‡(
	`ã°_is_£À˘ed
("get")) {

974 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"GET key:__rand_int__");

975 
	`bíchm¨k
("GET",
cmd
,
Àn
);

976 
	`‰ì
(
cmd
);

979 i‡(
	`ã°_is_£À˘ed
("incr")) {

980 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"INCR counter:__rand_int__");

981 
	`bíchm¨k
("INCR",
cmd
,
Àn
);

982 
	`‰ì
(
cmd
);

985 i‡(
	`ã°_is_£À˘ed
("lpush")) {

986 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPUSH myli° %s",
d©a
);

987 
	`bíchm¨k
("LPUSH",
cmd
,
Àn
);

988 
	`‰ì
(
cmd
);

991 i‡(
	`ã°_is_£À˘ed
("rpush")) {

992 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"RPUSH myli° %s",
d©a
);

993 
	`bíchm¨k
("RPUSH",
cmd
,
Àn
);

994 
	`‰ì
(
cmd
);

997 i‡(
	`ã°_is_£À˘ed
("lpop")) {

998 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPOP mylist");

999 
	`bíchm¨k
("LPOP",
cmd
,
Àn
);

1000 
	`‰ì
(
cmd
);

1003 i‡(
	`ã°_is_£À˘ed
("rpop")) {

1004 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"RPOP mylist");

1005 
	`bíchm¨k
("RPOP",
cmd
,
Àn
);

1006 
	`‰ì
(
cmd
);

1009 i‡(
	`ã°_is_£À˘ed
("sadd")) {

1010 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,

1012 
	`bíchm¨k
("SADD",
cmd
,
Àn
);

1013 
	`‰ì
(
cmd
);

1016 i‡(
	`ã°_is_£À˘ed
("spop")) {

1017 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SPOP myset");

1018 
	`bíchm¨k
("SPOP",
cmd
,
Àn
);

1019 
	`‰ì
(
cmd
);

1022 i‡(
	`ã°_is_£À˘ed
("lrange") ||

1023 
	`ã°_is_£À˘ed
("lrange_100") ||

1024 
	`ã°_is_£À˘ed
("lrange_300") ||

1025 
	`ã°_is_£À˘ed
("lrange_500") ||

1026 
	`ã°_is_£À˘ed
("lrange_600"))

1028 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPUSH myli° %s",
d©a
);

1029 
	`bíchm¨k
("LPUSH (√ededÅÿbíchm¨k LRANGE)",
cmd
,
Àn
);

1030 
	`‰ì
(
cmd
);

1033 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_100")) {

1034 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 99");

1035 
	`bíchm¨k
("LRANGE_100 (fú° 100ÉÀmíts)",
cmd
,
Àn
);

1036 
	`‰ì
(
cmd
);

1039 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_300")) {

1040 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 299");

1041 
	`bíchm¨k
("LRANGE_300 (fú° 300ÉÀmíts)",
cmd
,
Àn
);

1042 
	`‰ì
(
cmd
);

1045 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_500")) {

1046 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 449");

1047 
	`bíchm¨k
("LRANGE_500 (fú° 450ÉÀmíts)",
cmd
,
Àn
);

1048 
	`‰ì
(
cmd
);

1051 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_600")) {

1052 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 599");

1053 
	`bíchm¨k
("LRANGE_600 (fú° 600ÉÀmíts)",
cmd
,
Àn
);

1054 
	`‰ì
(
cmd
);

1057 i‡(
	`ã°_is_£À˘ed
("mset")) {

1058 c⁄° *
¨gv
[21];

1059 
¨gv
[0] = "MSET";

1060 
i
 = 1; i < 21; i += 2) {

1061 
¨gv
[
i
] = "key:__rand_int__";

1062 
¨gv
[
i
+1] = 
d©a
;

1064 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,21,
¨gv
,
NULL
);

1065 
	`bíchm¨k
("MSET (10 keys)",
cmd
,
Àn
);

1066 
	`‰ì
(
cmd
);

1069 i‡(!
c⁄fig
.
csv
Ë
	`¥ötf
("\n");

1070 } 
c⁄fig
.
lo›
);

1072  
VRT_OK
;

1073 
	}
}

1075 
	$ã°_memˇched
(
¨gc
, c⁄° **
¨gv
)

1077 
i
;

1078 *
d©a
, *
cmd
;

1079 
Àn
;

1082 i‡(
¨gc
) {

1083 
sds
 
tôÀ
 = 
	`sd¢ew
(
¨gv
[0]);

1084 
i
 = 1; i < 
¨gc
; i++) {

1085 
tôÀ
 = 
	`sdsˇéí
(title, " ", 1);

1086 
tôÀ
 = 
	`sdsˇéí
—ôÀ, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

1090 
Àn
 = 
	`memˇchedF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

1091 i‡(
Àn
 < 0) {

1095 
	`bíchm¨k
(
tôÀ
,
cmd
,
Àn
);

1096 
	`‰ì
(
cmd
);

1097 } 
c⁄fig
.
lo›
);

1103 
d©a
 = 
	`mÆloc
(
c⁄fig
.
d©asize
+1);

1105 
	`mem£t
(
d©a
,'x',
c⁄fig
.
d©asize
);

1106 
d©a
[
c⁄fig
.
d©asize
] = '\0';

1108 i‡(
	`ã°_is_£À˘ed
("set")) {

1109 
Àn
 = 
	`memˇchedF‹m©Comm™d
(&
cmd
,"£àkey:__ønd_öt__ 0 0 %d %s", 
c⁄fig
.
d©asize
, 
d©a
);

1111 
	`bíchm¨k
("SET",
cmd
,
Àn
);

1112 
	`‰ì
(
cmd
);

1115 i‡(
	`ã°_is_£À˘ed
("get")) {

1116 
Àn
 = 
	`memˇchedF‹m©Comm™d
(&
cmd
,"get key:__rand_int__");

1117 
	`bíchm¨k
("GET",
cmd
,
Àn
);

1118 
	`‰ì
(
cmd
);

1121 i‡(!
c⁄fig
.
csv
Ë
	`¥ötf
("\n");

1122 } 
c⁄fig
.
lo›
);

1124  
VRT_OK
;

1125 
	}
}

1127 
	$maö
(
¨gc
, c⁄° **
¨gv
) {

1128 
i
;

1130 
bíchm¨k_˛õ¡
 
c
;

1132 
	`§™dom
(
	`time
(
NULL
));

1133 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

1134 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

1136 
c⁄fig
.
num˛õ¡s
 = 50;

1137 
c⁄fig
.
ªque°s
 = 100000;

1138 
c⁄fig
.
live˛õ¡s
 = 0;

1139 
c⁄fig
.
kì∑live
 = 1;

1140 
c⁄fig
.
d©asize
 = 3;

1141 
c⁄fig
.
pùñöe
 = 1;

1142 
c⁄fig
.
showîr‹s
 = 0;

1143 
c⁄fig
.
øndomkeys
 = 0;

1144 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 0;

1145 
c⁄fig
.
quõt
 = 0;

1146 
c⁄fig
.
csv
 = 0;

1147 
c⁄fig
.
lo›
 = 0;

1148 
c⁄fig
.
idÀmode
 = 0;

1149 
c⁄fig
.
œãncy
 = 
NULL
;

1150 
c⁄fig
.
ho°ù
 = "127.0.0.1";

1151 
c⁄fig
.
ho°p‹t
 = 6379;

1152 
c⁄fig
.
ho°sockë
 = 
NULL
;

1153 
c⁄fig
.
ã°s
 = 
NULL
;

1154 
c⁄fig
.
dbnum
 = 0;

1155 
c⁄fig
.
auth
 = 
NULL
;

1156 
c⁄fig
.
thªads_cou¡
 = 1;

1157 
c⁄fig
.
¥Ÿocﬁ
 = 
TEST_CMD_PROTOCOL_REDIS
;

1158 
c⁄fig
.
noölöe
 = 0;

1160 
i
 = 
	`∑r£O±i⁄s
(
¨gc
,
¨gv
);

1161 
¨gc
 -
i
;

1162 
¨gv
 +
i
;

1164 
c⁄fig
.
œãncy
 = 
	`mÆloc
(()*c⁄fig.
ªque°s
);

1166 i‡(
c⁄fig
.
kì∑live
 == 0) {

1167 
	`¥ötf
("WARNING: keepalive disabled, youÖrobablyÇeed 'echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse' for Linuxánd 'sudo sysctl -wÇet.inet.tcp.msl=1000' for Mac OS X in orderÅo useáÜot of clients/requests\n");

1178 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_REDIS
) {

1179 
	`ã°_ªdis
(
¨gc
, 
¨gv
);

1180 } i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

1181 
	`ã°_memˇched
(
¨gc
, 
¨gv
);

1183 
	`NOT_REACHED
();

1187 
	}
}

	@tests/vrt_check_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<±hªad.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<húedis.h
>

13 
	~<async.h
>

14 
	~<ad≠ãrs/´.h
>

16 
	~<dhashkô.h
>

17 
	~<dli°.h
>

18 
	~<dmtqueue.h
>

19 
	~<dlog.h
>

21 
	~<vπ_utû.h
>

22 
	~<vπ_public.h
>

23 
	~<vøbã°.h
>

24 
	~<vπ_¥odu˚_d©a.h
>

25 
	~<vπ_di•©ch_d©a.h
>

26 
	~<vπ_backíd.h
>

27 
	~<vπ_check_d©a.h
>

29 
	#CHECK_DATA_FLAG_NONE
 (1<<0)

	)

30 
	#CHECK_DATA_FLAG_MASTER
 (1<<1)

	)

31 
	#CHECK_DATA_FLAG_SLAVE
 (1<<2)

	)

33 
	#CHECK_UNIT_STATE_NULL
 0

	)

34 
	#CHECK_UNIT_STATE_GET_EXPIRE
 1

	)

35 
	#CHECK_UNIT_STATE_GET_TYPE
 2

	)

36 
	#CHECK_UNIT_STATE_GET_VALUE
 3

	)

38 
	scheck_d©a_thªad
 {

39 
	mid
;

40 
±hªad_t
 
	mthªad_id
;

42 
´EvítLo›
 *
	mñ
;

43 
	mhz
;

44 
	m¸⁄lo›s
;

46 
d¨øy
 *
	mabgs
;

47 
	msˇn_group_idx
;

48 
d¨øy
 *
	msˇn_£rvîs
;

49 
	msˇn_föished_cou¡
;

50 
	mcurs‹
;

51 
dli°
 *
	mcheck_unôs
;

53 
	mcheck_begö_time
;

54 
	msˇn_keys_cou¡
;

55 } 
	tcheck_d©a_thªad
;

57 
	scheck_unô
 {

58 
check_d©a_thªad
 *
	mcdt
;

60 
dli°Node
 *
	m ode
;

62 
sds
 
	mkey
;

64 
	mkey_≥rsi°
;

65 
	mmö_âl
, 
	mmax_âl_g≠
;

67 
	mkey_ty≥
;

68 
	m°©e
;

70 
d¨øy
 
	m£rvîs
;

71 
d¨øy
 
	mª∂ys
;

73 
	m£rvîs_cou¡
;

74 
	mª∂ys_cou¡
;

75 
	mnŸ_exi°_cou¡
;

76 } 
	tcheck_unô
;

78 
	sd©a_checkî
 {

79 
±hªad_t
 
	mthªad_id
;

81 
´EvítLo›
 *
	mñ
;

82 
	mhz
;

83 
	m¸⁄lo›s
;

85 
sds
 
	mã°_èrgë_groups
;

87 
	mÊags
;

88 
sds
 
	mcheckî
;

89 
c⁄n_c⁄ãxt
 *
	mma°î
;

91 
	mcheck_begö_time
;

92 } 
	td©a_checkî
;

94 
d©a_checkî
 
	gdc
;

98 
	gœ°_check_begö_time
;

100 
d¨øy
 *
	gcdts
 = 
NULL
;

102 
check_unô
 *
	$check_unô_¸óã
()

104 
check_unô
 *
cunô
;

106 
cunô
 = 
	`mÆloc
((*cunit));

107 i‡(
cunô
 =
NULL
) {

108  
NULL
;

111 
cunô
->
cdt
 = 
NULL
;

113 
cunô
->
 ode
 = 
NULL
;

115 
cunô
->
key
 = 
NULL
;

116 
cunô
->
key_≥rsi°
 = 0;

117 
cunô
->
mö_âl
 = 0;

118 
cunô
->
max_âl_g≠
 = 0;

119 
cunô
->
key_ty≥
 = -1;

120 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_NULL
;

121 
	`d¨øy_öô
(&
cunô
->
£rvîs
, 2, (
abã°_£rvî
*));

122 
	`d¨øy_öô
(&
cunô
->
ª∂ys
, 2, (
ªdisRïly
*));

124 
cunô
->
£rvîs_cou¡
 = 0;

125 
cunô
->
ª∂ys_cou¡
 = 0;

126 
cunô
->
nŸ_exi°_cou¡
 = 0;

128  
cunô
;

129 
	}
}

131 
	$check_unô_de°roy
(
check_unô
 *
cunô
)

133 i‡(
cunô
->
cdt
 !
NULL
 && cunô->
 ode
 != NULL) {

134 
	`dli°DñNode
(
cunô
->
cdt
->
check_unôs
,cunô->
 ode
);

135 
cunô
->
 ode
 = 
NULL
;

138 i‡(
cunô
->
key
 !
NULL
) {

139 
	`sds‰ì
(
cunô
->
key
);

140 
cunô
->
key
 = 
NULL
;

143 
	`d¨øy_n
(&
cunô
->
£rvîs
) > 0) {

144 
	`d¨øy_p›
(&
cunô
->
£rvîs
);

146 
	`d¨øy_deöô
(&
cunô
->
£rvîs
);

148 
	`d¨øy_n
(&
cunô
->
ª∂ys
) > 0) {

149 
ªdisRïly
 **
ª∂y
 = 
	`d¨øy_p›
(&
cunô
->
ª∂ys
);

150 
	`‰ìRïlyObje˘
(*
ª∂y
);

152 
	`d¨øy_deöô
(&
cunô
->
ª∂ys
);

154 
	`‰ì
(
cunô
);

155 
	}
}

157 
	$check_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

159 
cc
->
˘x
 = 
NULL
;

160 
cc
->
a˘x
 = 
NULL
;

162 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

163 i‡(
cc
->
a˘x
 =
NULL
) {

164  
VRT_ERROR
;

167  
VRT_OK
;

168 
	}
}

170 
	$check_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

172 i‡(
cc
->
˘x
) {

173 
	`ªdisFªe
(
cc
->
˘x
);

174 
cc
->
˘x
 =
NULL
;

177 i‡(
cc
->
a˘x
) {

178 
cc
->
a˘x
->
ev
.
˛ónup
 = 
NULL
;

179 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

180 
cc
->
a˘x
 =
NULL
;

182 
	}
}

184 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

185 
check_d©a_thªad
 *
cdt
 = 
c
->
d©a
;

186 i‡(
°©us
 !
REDIS_OK
) {

187 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

193 
	}
}

195 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

196 
check_d©a_thªad
 *
cdt
 = 
c
->
d©a
;

197 i‡(
°©us
 !
REDIS_OK
) {

198 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

205 
	}
}

207 
	$s‹t_ª∂ys_if_√eded
(
check_unô
 *
cunô
)

209 
°ï
 = 0, 
idx_cmp
 = 0;

211 i‡(
cunô
->
key_ty≥
 =
REDIS_SET
) {

212 
°ï
 = 1;

213 } i‡(
cunô
->
key_ty≥
 =
REDIS_HASH
) {

214 
°ï
 = 2;

217 i‡(
°ï
 > 0) {

218 
i
;

219 
ªdisRïly
 **
ª∂y
;

220 
i
 = 0; i < 
	`d¨øy_n
(&
cunô
->
ª∂ys
); i ++) {

221 
ª∂y
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 
i
);

222 i‡((*
ª∂y
)->
ty≥
 !
REDIS_REPLY_ARRAY
)

224 
	`s‹t_¨øy_by_°ï
((*
ª∂y
)->
ñemít
, (*ª∂y)->
ñemíts
,

225 
°ï
, 
idx_cmp
, 
ª∂y_°rög_bö¨y_com∑ª
);

229  
VRT_OK
;

230 
	}
}

234 
	$check_ª∂ys_if_ßme
(
check_unô
 *
cunô
)

236 
j
;

237 
ªdisRïly
 **
ª∂yb
, **
ª∂y
;

239 
	`s‹t_ª∂ys_if_√eded
(
cunô
);

241 
ª∂yb
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,0);

243 
j
 = 1; j < 
cunô
->
ª∂ys_cou¡
 ; j ++) {

244 
ª∂y
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,
j
);

245 i‡(
	`check_two_ª∂ys_if_ßme
(*
ª∂yb
, *
ª∂y
)) {

251 
	}
}

253 
	#TTL_MISTAKE_CAN_BE_ACCEPT
 3

	)

254 
	$check_d©a_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

255 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

256 
ªdisRïly
 *
ª∂y_˛⁄e
, **
ñem
;

257 
check_unô
 *
cunô
 = 
¥ivd©a
;

258 
check_d©a_thªad
 *
cdt
 = 
cunô
->cdt;

259 
c⁄n_c⁄ãxt
 *
cc
;

260 
vÆue
;

261 *
îrmsg
;

262 
j
;

264 i‡(
ª∂y
 =
NULL
) ;

266 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_EXPIRE
) {

267 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

268 
îrmsg
 = "ttl commandÑeplyÅype isÇot integer";

269 
îr‹
;

272 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

273 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

274 *
ñem
 = 
ª∂y_˛⁄e
;

275 
cunô
->
ª∂ys_cou¡
 ++;

277 i‡(
cunô
->
ª∂ys_cou¡
 >cunô->
£rvîs_cou¡
) {

278 *
¨gv
[2];

279 
size_t
 
¨gvÀn
[2];

280 
mö
, 
max
;

281 
≥rsi°
;

283 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 0);

284 
ª∂y_ñem
 = *
ñem
;

285 i‡(
ª∂y_ñem
->
öãgî
 == -1) {

286 
≥rsi°
 = 1;

287 } i‡(
ª∂y_ñem
->
öãgî
 == -2) {

288 
cunô
->
nŸ_exi°_cou¡
 ++;

289 
mö
 = 
max
 = 0;

290 } i‡(
ª∂y_ñem
->
öãgî
 < -2) {

291 
îrmsg
 = "ttl commandÑeply integer isÜessÅhan -2";

292 
îr‹
;

294 
mö
 = 
max
 = 
ª∂y_ñem
->
öãgî
;

297 
j
 = 1; j < 
	`d¨øy_n
(&
cunô
->
ª∂ys
); j ++) {

298 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 
j
);

299 
ª∂y_ñem
 = *
ñem
;

300 i‡(
≥rsi°
 && 
ª∂y_ñem
->
öãgî
 != -1) {

301 
îrmsg
 = "key in some server isÖersist, but othersáreÇot";

302 
îr‹
;

305 i‡(
ª∂y_ñem
->
öãgî
 == -1) {

306 i‡(
≥rsi°
 != 1) {

307 
îrmsg
 = "key in some server isÖersist, but othersáreÇot";

308 
îr‹
;

310 } i‡(
ª∂y_ñem
->
öãgî
 == -2) {

311 
cunô
->
nŸ_exi°_cou¡
 ++;

312 i‡(
mö
 > 0) min = 0;

313 } i‡(
ª∂y_ñem
->
öãgî
 < -2) {

314 
îrmsg
 = "ttl commandÑeply integer isÜessÅhan -2";

315 
îr‹
;

317 i‡(
ª∂y_ñem
->
öãgî
 < 
mö
) min =Ñeply_elem->integer;

318 i‡(
ª∂y_ñem
->
öãgî
 > 
max
) max =Ñeply_elem->integer;

322 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

324 
d⁄e
;

327 i‡(
≥rsi°
) {

328 
cunô
->
key_≥rsi°
 = 1;

330 
cunô
->
mö_âl
 = 
mö
;

331 
cunô
->
max_âl_g≠
 = 
max
-
mö
;

332 i‡(
cunô
->
max_âl_g≠
 > 
TTL_MISTAKE_CAN_BE_ACCEPT
) {

333 
îrmsg
 = "ttl mistake isÅoo big between groups";

334 
îr‹
;

339 
¨gv
[0] = "type";

340 
¨gvÀn
[0] = 4;

341 
¨gv
[1] = 
cunô
->
key
;

342 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

343 
j
 = 0; j < 
	`d¨øy_n
(&
cunô
->
£rvîs
); j ++) {

344 
abã°_£rvî
 **
abs
 = 
	`d¨øy_gë
(&
cunô
->
£rvîs
,
j
);

345 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

347 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

348 
cunô
, 2, 
¨gv
, 
¨gvÀn
);

351 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_GET_TYPE
;

352 
√xt_°ï
;

358 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_TYPE
) {

359 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STATUS
) {

360 
îrmsg
 = "type commandÑeplyÅype isÇot status";

361 
îr‹
;

364 i‡(!
	`°rcmp
(
ª∂y
->
°r
, "none")) {

366 
cunô
->
nŸ_exi°_cou¡
 ++;

368 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

369 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

370 *
ñem
 = 
ª∂y_˛⁄e
;

371 
cunô
->
ª∂ys_cou¡
 ++;

374 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

376 
d⁄e
;

377 } i‡(
cunô
->
ª∂ys_cou¡
 >(cunô->
£rvîs_cou¡
-cunô->
nŸ_exi°_cou¡
)) {

378 
¨gc
;

379 **
¨gv
;

380 
size_t
 *
¨gvÀn
;

382 i‡(
cunô
->
nŸ_exi°_cou¡
 > 0 && cunô->
key_≥rsi°
) {

383 
îrmsg
 = "key isÖersist, butÇotÉxist in some servers";

384 
îr‹
;

387 i‡(
	`check_ª∂ys_if_ßme
(
cunô
) != 1) {

388 
îrmsg
 = "type commandÑeplysáreÇot same";

389 
îr‹
;

392 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,0);

393 i‡(!
	`°rcmp
((*
ñem
)->
°r
,"string")) {

394 
cunô
->
key_ty≥
 = 
REDIS_STRING
;

396 
¨gc
 = 2;

397 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

398 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

400 
¨gv
[0] = "get";

401 
¨gvÀn
[0] = 3;

402 
¨gv
[1] = 
cunô
->
key
;

403 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

404 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"list")) {

405 
cunô
->
key_ty≥
 = 
REDIS_LIST
;

407 
¨gc
 = 4;

408 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

409 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

411 
¨gv
[0] = "lrange";

412 
¨gvÀn
[0] = 6;

413 
¨gv
[1] = 
cunô
->
key
;

414 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

415 
¨gv
[2] = "0";

416 
¨gvÀn
[2] = 1;

417 
¨gv
[3] = "-1";

418 
¨gvÀn
[3] = 2;

419 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"set")) {

420 
cunô
->
key_ty≥
 = 
REDIS_SET
;

422 
¨gc
 = 2;

423 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

424 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

426 
¨gv
[0] = "smembers";

427 
¨gvÀn
[0] = 8;

428 
¨gv
[1] = 
cunô
->
key
;

429 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

430 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"zset")) {

431 
cunô
->
key_ty≥
 = 
REDIS_ZSET
;

433 
¨gc
 = 4;

434 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

435 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

437 
¨gv
[0] = "zrange";

438 
¨gvÀn
[0] = 6;

439 
¨gv
[1] = 
cunô
->
key
;

440 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

441 
¨gv
[2] = "0";

442 
¨gvÀn
[2] = 1;

443 
¨gv
[3] = "-1";

444 
¨gvÀn
[3] = 2;

445 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"hash")) {

446 
cunô
->
key_ty≥
 = 
REDIS_HASH
;

448 
¨gc
 = 2;

449 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

450 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

452 
¨gv
[0] = "hgetall";

453 
¨gvÀn
[0] = 7;

454 
¨gv
[1] = 
cunô
->
key
;

455 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

457 
îrmsg
 = "not supported keyÅype";

458 
îr‹
;

462 
j
 = 0; j < 
	`d¨øy_n
(&
cunô
->
£rvîs
); j ++) {

463 
abã°_£rvî
 **
abs
 = 
	`d¨øy_gë
(&
cunô
->
£rvîs
,
j
);

464 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

466 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

467 
cunô
, 
¨gc
, 
¨gv
, 
¨gvÀn
);

469 
	`‰ì
(
¨gv
);

470 
	`‰ì
(
¨gvÀn
);

472 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_GET_VALUE
;

473 
√xt_°ï
;

479 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_VALUE
) {

480 
nŸ_exi°
 = 0;

481 i‡(
cunô
->
key_ty≥
 =
REDIS_STRING
) {

482 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_NIL
) {

483 
nŸ_exi°
 = 1;

484 } i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

485 
îrmsg
 = "get commandÑeplyÅype isÇot string";

486 
îr‹
;

488 } i‡(
cunô
->
key_ty≥
 =
REDIS_LIST
) {

489 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

490 
îrmsg
 = "lrange commandÑeplyÅype isÇotárray";

491 
îr‹
;

493 i‡(
ª∂y
->
ñemíts
 == 0) {

494 
nŸ_exi°
 = 1;

496 } i‡(
cunô
->
key_ty≥
 =
REDIS_SET
) {

497 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

498 
îrmsg
 = "smembers commandÑeplyÅype isÇotárray";

499 
îr‹
;

501 i‡(
ª∂y
->
ñemíts
 == 0) {

502 
nŸ_exi°
 = 1;

504 } i‡(
cunô
->
key_ty≥
 =
REDIS_ZSET
) {

505 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

506 
îrmsg
 = "zrange commandÑeplyÅype isÇotárray";

507 
îr‹
;

509 i‡(
ª∂y
->
ñemíts
 == 0) {

510 
nŸ_exi°
 = 1;

512 } i‡(
cunô
->
key_ty≥
 =
REDIS_HASH
) {

513 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

514 
îrmsg
 = "hgetall commandÑeplyÅype isÇotárray";

515 
îr‹
;

517 i‡(
ª∂y
->
ñemíts
 == 0) {

518 
nŸ_exi°
 = 1;

521 
îrmsg
 = "not supported keyÅype";

522 
îr‹
;

525 i‡(
nŸ_exi°
) {

526 
cunô
->
nŸ_exi°_cou¡
 ++;

528 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

529 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

530 *
ñem
 = 
ª∂y_˛⁄e
;

531 
cunô
->
ª∂ys_cou¡
 ++;

534 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

536 
d⁄e
;

537 } i‡(
cunô
->
ª∂ys_cou¡
 >(cunô->
£rvîs_cou¡
-cunô->
nŸ_exi°_cou¡
)) {

538 i‡(
cunô
->
nŸ_exi°_cou¡
 > 0 && cunô->
key_≥rsi°
) {

539 
îrmsg
 = "key isÖersist, butÇotÉxist in some servers";

540 
îr‹
;

543 i‡(
	`check_ª∂ys_if_ßme
(
cunô
) != 1) {

544 
îrmsg
 = "values forÑeplyáreÇot same";

545 
îr‹
;

548 
d⁄e
;

554 
d⁄e
:

556 
	`check_unô_de°roy
(
cunô
);

560 
√xt_°ï
:

562 
cunô
->
ª∂ys_cou¡
 = 0;

563 
cunô
->
nŸ_exi°_cou¡
 = 0;

564 
	`d¨øy_n
(&
cunô
->
ª∂ys
) > 0) {

565 
ñem
 = 
	`d¨øy_p›
(&
cunô
->
ª∂ys
);

566 
	`‰ìRïlyObje˘
(*
ñem
);

571 
îr‹
:

573 
	`log_hexdump
(
LOG_ERR
,
cunô
->
key
,
	`sd¶í
(cunit->key),

575 
îrmsg
,

576 
cdt
->
sˇn_group_idx
,

577 
	`sd¶í
(
cunô
->
key
),
	`gë_key_ty≥_°rög
(cunô->
key_ty≥
));

579 
	`check_unô_de°roy
(
cunô
);

580 
	}
}

582 
	$°¨t_check_d©a
(*
key
, 
size_t
 
keyÀn
, 
check_d©a_thªad
 *
cdt
)

584 
check_unô
 *
cu
 = 
	`check_unô_¸óã
();

585 
j
;

587 
cu
->
cdt
 = cdt;

588 
cu
->
key
 = 
	`sd¢ewÀn
(key,
keyÀn
);

589 
	`dli°Push
(
cdt
->
check_unôs
,
cu
);

590 
cu
->
 ode
 = 
	`dli°La°
(
cdt
->
check_unôs
);

592 
j
 = 0; j < 
	`d¨øy_n
(
cdt
->
abgs
); j ++) {

593 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
j
);

594 
abã°_£rvî
 *
abs
 = 
abg
->
	`gë_backíd_£rvî
◊bg,
key
,
keyÀn
);

595 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(&
cu
->
£rvîs
);

596 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

597 *
¨gv
[2];

598 
size_t
 
¨gvÀn
[2];

600 *
ñem
 = 
abs
;

601 
cu
->
£rvîs_cou¡
 ++;

604 
¨gv
[0] = "ttl";

605 
¨gvÀn
[0] = 3;

606 
¨gv
[1] = 
key
;

607 
¨gvÀn
[1] = 
keyÀn
;

608 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

609 
cu
, 2, 
¨gv
, 
¨gvÀn
);

611 
cu
->
°©e
 = 
CHECK_UNIT_STATE_GET_EXPIRE
;

613  
VRT_OK
;

614 
	}
}

616 
	$sˇn_f‹_check_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

617 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

618 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

619 
check_d©a_thªad
 *
cdt
 = 
abs
->
d©a
;

620 
c⁄n_c⁄ãxt
 *
cc
;

621 
vÆue
;

622 
size_t
 
k
;

624 i‡(
ª∂y
 =
NULL
) ;

627 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

631 i‡(
ª∂y
->
ñemíts
 != 2) {

635 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

636 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

637 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

641 
cdt
->
curs‹
 = 
vÆue
;

643 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

644 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

648 
k
 = 0; k < 
ª∂y_sub
->
ñemíts
; k ++) {

649 
ª∂y_ñem
 = 
ª∂y_sub
->
ñemít
[
k
];

650 i‡(
ª∂y_ñem
->
ty≥
 !
REDIS_REPLY_STRING
) {

654 
	`°¨t_check_d©a
(
ª∂y_ñem
->
°r
,ª∂y_ñem->
Àn
,
cdt
);

657 
cdt
->
sˇn_keys_cou¡
 +
ª∂y_sub
->
ñemíts
;

659 i‡(
cdt
->
curs‹
 == 0) {

660 
cdt
->
sˇn_föished_cou¡
 ++;

662 
	}
}

664 
	gcheck_d©a_thªads_föished_cou¡
 = 0;

665 
	$⁄e_check_d©a_thªad_föished
()

667 
	`upd©e_°©e_add
(
check_d©a_thªads_föished_cou¡
,1);

668 
	}
}

670 
	$Æl_check_d©a_thªads_föished
()

672 
föished_cou¡
;

673 
	`upd©e_°©e_gë
(
check_d©a_thªads_föished_cou¡
,&
föished_cou¡
);

675 i‡(
föished_cou¡
 >
	`d¨øy_n
(
cdts
)) {

680 
	}
}

682 
	$check_d©a_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

684 
check_d©a_thªad
 *
cdt
 = 
˛õ¡D©a
;

686 
	`ASSERT
(
evítLo›
 =
cdt
->
ñ
);

688 i‡(
cdt
->
sˇn_föished_cou¡
 >
	`d¨øy_n
(cdt->
sˇn_£rvîs
)) {

689 i‡(
	`dli°Lígth
(
cdt
->
check_unôs
) == 0) {

690 
	`´St›
(
cdt
->
ñ
);

691 
	`⁄e_check_d©a_thªad_föished
();

692 
	`log_debug
(
LOG_NOTICE
, "One checkÅhread finished,scaned %lld keys",

693 
cdt
->
sˇn_keys_cou¡
);

696 } i‡(
	`dli°Lígth
(
cdt
->
check_unôs
) < 3000) {

697 
abã°_group
 *
abg
;

698 
abã°_£rvî
 **
abs
;

699 *
idx
;

700 
c⁄n_c⁄ãxt
 *
cc
;

702 
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, cdt->
sˇn_group_idx
);

703 
abs
 = 
	`d¨øy_gë
(
cdt
->
sˇn_£rvîs
, cdt->
sˇn_föished_cou¡
);

704 
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

706 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_check_ˇŒback
,

707 *
abs
, "sˇ¿%Œd cou¡ 1000", 
cdt
->
curs‹
);

710 
cdt
->
¸⁄lo›s
 ++;

711  1000/
cdt
->
hz
;

712 
	}
}

714 
	$check_d©a_thªad_öô
(
check_d©a_thªad
 *
cdt
, *
ã°_èrgë_groups
)

716 
i
, 
j
, 
k
;

718 
cdt
->
id
 = 0;

719 
cdt
->
thªad_id
 = 0;

720 
cdt
->
ñ
 = 
NULL
;

721 
cdt
->
hz
 = 200;

722 
cdt
->
¸⁄lo›s
 = 0;

724 
cdt
->
abgs
 = 
NULL
;

725 
cdt
->
sˇn_group_idx
 = 0;

726 
cdt
->
sˇn_£rvîs
 = 
NULL
;

727 
cdt
->
sˇn_föished_cou¡
 = 0;

728 
cdt
->
curs‹
 = 0;

729 
cdt
->
check_unôs
 = 
NULL
;

731 
cdt
->
check_begö_time
 = 0;

732 
cdt
->
sˇn_keys_cou¡
 = 0;

734 
cdt
->
ñ
 = 
	`´Cª©eEvítLo›
(200);

735 i‡(
cdt
->
ñ
 =
NULL
) {

736  
VRT_ERROR
;

739 
cdt
->
sˇn_£rvîs
 = 
	`d¨øy_¸óã
(1,(
abã°_£rvî
*));

741 
cdt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

742 i‡(
cdt
->
abgs
 =
NULL
) {

743  
VRT_ERROR
;

747 
i
 = 0; i < 
	`d¨øy_n
(
cdt
->
abgs
); i ++) {

748 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
i
);

749 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

750 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

751 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(1, (
c⁄n_c⁄ãxt
));

752 
k
 = 0; k < 1; k ++) {

753 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

754 i‡(
	`check_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

755  
VRT_ERROR
;

757 
cc
->
a˘x
->
d©a
 = 
cdt
;

758 
	`ªdisAeAâach
(
cdt
->
ñ
, 
cc
->
a˘x
);

759 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

760 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

765 i‡(
	`´Cª©eTimeEvít
(
cdt
->
ñ
, 1, 
check_d©a_thªad_¸⁄
, cdt, 
NULL
Ë=
AE_ERR
) {

766  
VRT_ERROR
;

769 
cdt
->
check_unôs
 = 
	`dli°Cª©e
();

771  
VRT_OK
;

772 
	}
}

774 
	$check_d©a_thªad_deöô
(
check_d©a_thªad
 *
cdt
)

776 i‡(
cdt
->
ñ
) {

777 
	`´DñëeEvítLo›
(
cdt
->
ñ
);

778 
cdt
->
ñ
 = 
NULL
;

781 i‡(
cdt
->
sˇn_£rvîs
) {

782 
	`d¨øy_n
(
cdt
->
sˇn_£rvîs
) > 0) {

783 
	`d¨øy_p›
(
cdt
->
sˇn_£rvîs
);

785 
	`d¨øy_de°roy
(
cdt
->
sˇn_£rvîs
);

786 
cdt
->
sˇn_£rvîs
 = 
NULL
;

789 i‡(
cdt
->
abgs
) {

790 
i
, 
j
, 
k
;

792 
i
 = 0; i < 
	`d¨øy_n
(
cdt
->
abgs
); i ++) {

793 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
i
);

794 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

795 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

796 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

797 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

798 
	`check_c⁄n_c⁄ãxt_deöô
(
cc
);

803 
	`abã°_groups_de°roy
(
cdt
->
abgs
);

804 
cdt
->
abgs
 = 
NULL
;

807 i‡(
cdt
->
check_unôs
) {

808 
	`dli°Lígth
(
cdt
->
check_unôs
) > 0) {

809 
check_unô
 *
cu
 = 
	`dli°P›
(
cdt
->
check_unôs
);

810 
	`check_unô_de°roy
(
cu
);

812 
	`dli°Rñó£
(
cdt
->
check_unôs
);

813 
cdt
->
check_unôs
 = 
NULL
;

815 
	}
}

817 
	gcheckög_d©a
;

818 
	$checkög_d©a_‹_nŸ
()

820 
checkög
;

822 
	`upd©e_°©e_gë
(
checkög_d©a
,&
checkög
);

824 i‡(
checkög
)  1;

826 
	}
}

828 
	gcheck_d©a_thªads_cou¡
 = 8;

829 
de°roy_check_d©a_thªads
();

834 
	$¸óã_check_d©a_thªads
()

836 
d¨øy
 *
abgs
 = 
NULL
;

837 
abã°_group
 *
abg
;

838 
groups_cou¡
;

839 
thªads_cou¡_≥r_group
;

840 
check_thªad_id
 = 0;

841 
i
, 
j
, 
k
;

843 i‡(
cdts
 !
NULL
) {

844 
	`de°roy_check_d©a_thªads
();

847 
cdts
 = 
	`d¨øy_¸óã
(2,(
check_d©a_thªad
));

848 i‡(
cdts
 =
NULL
) {

852 
abgs
 = 
	`abã°_groups_¸óã
(
dc
.
ã°_èrgë_groups
);

853 i‡(
abgs
 =
NULL
) {

857 
groups_cou¡
 = 
	`d¨øy_n
(
abgs
);

858 i‡(
groups_cou¡
 == 1) {

859 
	`abã°_groups_de°roy
(
abgs
);

863 
thªads_cou¡_≥r_group
 = 
check_d©a_thªads_cou¡
/
groups_cou¡
;

864 i‡(
thªads_cou¡_≥r_group
 <= 0) {

865 
thªads_cou¡_≥r_group
 = 1;

868 
i
 = 0; i < 
groups_cou¡
; i ++) {

869 
£rvîs_cou¡
, 
thªads_cou¡
;

870 
£rvîs_cou¡_≥r_thªad
;

871 
£rvî_idx
 = 0;

873 
thªads_cou¡
 = 
thªads_cou¡_≥r_group
;

874 
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

875 
£rvîs_cou¡
 = 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

876 
£rvîs_cou¡_≥r_thªad
 = 
£rvîs_cou¡
/
thªads_cou¡
;

877 i‡(
£rvîs_cou¡_≥r_thªad
 == 0) {

878 
£rvîs_cou¡_≥r_thªad
 = 1;

879 
thªads_cou¡
 = 
£rvîs_cou¡
;

881 
j
 = 0; j < 
thªads_cou¡
; j ++) {

882 
abã°_£rvî
 *
abs
;

884 
check_d©a_thªad
 *
cdt
 = 
	`d¨øy_push
(
cdts
);

885 
	`check_d©a_thªad_öô
(
cdt
,
dc
.
ã°_èrgë_groups
);

886 
cdt
->
id
 = 
check_thªad_id
++;

887 
cdt
->
sˇn_group_idx
 = 
i
;

889 
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, cdt->
id
);

891 
k
 = 0; k < 
£rvîs_cou¡_≥r_thªad
; k ++) {

892 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(
cdt
->
sˇn_£rvîs
);

893 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
£rvî_idx
++);

894 
abs
->
d©a
 = 
cdt
;

895 *
ñem
 = 
abs
;

898 i‡(
j
 =
thªads_cou¡
-1) {

899 
£rvî_idx
 < 
£rvîs_cou¡
) {

900 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(
cdt
->
sˇn_£rvîs
);

901 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
£rvî_idx
++);

902 
abs
->
d©a
 = 
cdt
;

903 *
ñem
 = 
abs
;

909 
	`abã°_groups_de°roy
(
abgs
);

912 
	}
}

914 
	$de°roy_check_d©a_thªads
()

916 i‡(
cdts
 !
NULL
) {

917 
	`d¨øy_n
(
cdts
) > 0) {

918 
check_d©a_thªad
 *
cdt
 = 
	`d¨øy_p›
(
cdts
);

919 
	`check_d©a_thªad_deöô
(
cdt
);

921 
	`d¨øy_de°roy
(
cdts
);

922 
cdts
 = 
NULL
;

924 
	}
}

926 *
	$check_d©a_thªad_run
(*
¨gs
)

928 
check_d©a_thªad
 *
cdt
 = 
¨gs
;

930 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

932 
	`´Maö
(
cdt
->
ñ
);

934  
NULL
;

935 
	}
}

937 
	$°¨t_check_d©a_thªads
()

939 
j
;

940 
check_d©a_thªad
 *
cdt
;

942 i‡(
cdts
 =
NULL
Ë 
VRT_ERROR
;

944 
j
 = 0; j < 
	`d¨øy_n
(
cdts
); j ++) {

945 
±hªad_©å_t
 
©å
;

947 
cdt
 = 
	`d¨øy_gë
(
cdts
, 
j
);

948 
	`±hªad_©å_öô
(&
©å
);

949 
	`±hªad_¸óã
(&
cdt
->
thªad_id
,

950 &
©å
, 
check_d©a_thªad_run
, 
cdt
);

953  
VRT_OK
;

954 
	}
}

956 
	$begö_check_d©a
()

958 
	`¸óã_check_d©a_thªads
();

959 
	`°¨t_check_d©a_thªads
();

961 
	`upd©e_°©e_£t
(
checkög_d©a
,1);

963  
VRT_OK
;

964 
	}
}

966 
	$íd_check_d©a
()

968 
	`upd©e_°©e_£t
(
check_d©a_thªads_föished_cou¡
,0);

969 
	`upd©e_°©e_£t
(
checkög_d©a
,0);

970 
	}
}

972 
	$d©a_checkî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

974 
	`ASSERT
(
evítLo›
 =
dc
.
ñ
);

976 i‡(!
	`ã°_if_√ed_∑u£
(Ë&& 
	`vπ_£c_now
()-
œ°_ã°_begö_time
 > 
ã°_öãrvÆ
) {

977 
	`ã°_√ed_to_∑u£
();

978 
	`log_nŸi˚
("StartÖauseÅheÅest...");

981 i‡(!
	`checkög_d©a_‹_nŸ
(Ë&& 
	`ã°_if_√ed_∑u£
() &&

982 
	`Æl_thªads_∑u£d
()) {

984 
	`log_nŸi˚
("FinishedÖauseÅheÅest. Tested %lld commands, %lldÉrrorÑeply(%.2f%%).",

985 
	`gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
(),

986 
	`gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
(),

987 ()
	`gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
()/()
	`gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
()*100);

988 
	`ª£t_tŸÆ_cou¡_≥r_cy˛e
();

989 
	`¶ìp
(1);

990 
œ°_check_begö_time
 = 
	`vπ_£c_now
();

991 
	`begö_check_d©a
();

992 
	`log_nŸi˚
("Start checkingÅhe data...");

995 i‡(
	`checkög_d©a_‹_nŸ
(Ë&& 
	`Æl_check_d©a_thªads_föished
()) {

996 
	`íd_check_d©a
();

997 
	`log_nŸi˚
("Finished checkingÅhe data\n");

998 
	`ã°_ˇn_c⁄töue
();

999 
œ°_ã°_begö_time
 = 
	`vπ_£c_now
();

1002 
dc
.
¸⁄lo›s
 ++;

1003  1000/
dc
.
hz
;

1004 
	}
}

1006 
	$vπ_d©a_checkî_öô
(*
checkî
, *
ã°_èrgë_groups
)

1008 
ªt
;

1010 
dc
.
thªad_id
 = 0;

1011 
dc
.
ñ
 = 
NULL
;

1012 
dc
.
hz
 = 10;

1013 
dc
.
¸⁄lo›s
 = 0;

1014 
dc
.
ã°_èrgë_groups
 = 
NULL
;

1015 
dc
.
Êags
 = 
CHECK_DATA_FLAG_NONE
;

1016 
dc
.
checkî
 = 
NULL
;

1017 
dc
.
ma°î
 = 
NULL
;

1018 
dc
.
check_begö_time
 = 0;

1020 
dc
.
ñ
 = 
	`´Cª©eEvítLo›
(10);

1021 i‡(
dc
.
ñ
 =
NULL
) {

1022  
VRT_ERROR
;

1025 i‡(
	`´Cª©eTimeEvít
(
dc
.
ñ
, 1, 
d©a_checkî_¸⁄
, 
NULL
, NULLË=
AE_ERR
) {

1026  
VRT_ERROR
;

1029 
dc
.
ã°_èrgë_groups
 = 
	`sd¢ew
(test_target_groups);

1031 
dc
.
checkî
 = 
	`sd¢ew
(checker);

1033 i‡(!
	`°rˇ£cmp
(
checkî
,"myself")) {

1034 
dc
.
Êags
 |
CHECK_DATA_FLAG_MASTER
;

1036 
sds
 
ho°
;

1037 
p‹t
;

1038 
dc
.
Êags
 |
CHECK_DATA_FLAG_SLAVE
;

1039 
ho°
 = 
	`gë_ho°_p‹t_‰om_addªss_°rög
(
checkî
, &
p‹t
);

1040 i‡(
ho°
 =
NULL
) {

1041  
VRT_ERROR
;

1043 
dc
.
ma°î
 = 
	`mÆloc
((
c⁄n_c⁄ãxt
));

1044 
ªt
 = 
	`check_c⁄n_c⁄ãxt_öô
(
dc
.
ma°î
, 
ho°
, 
p‹t
);

1045 
	`sds‰ì
(
ho°
);

1046 i‡(
ªt
 !
VRT_OK
) {

1047  
VRT_ERROR
;

1051  
VRT_OK
;

1052 
	}
}

1054 
	$vπ_d©a_checkî_deöô
()

1056 i‡(
dc
.
ñ
) {

1057 
	`´DñëeEvítLo›
(
dc
.
ñ
);

1058 
dc
.
ñ
 = 
NULL
;

1061 i‡(
dc
.
ã°_èrgë_groups
) {

1062 
	`sds‰ì
(
dc
.
ã°_èrgë_groups
);

1063 
dc
.
ã°_èrgë_groups
 = 
NULL
;

1066 i‡(
dc
.
checkî
) {

1067 
	`sds‰ì
(
dc
.
checkî
);

1068 
dc
.
checkî
 = 
NULL
;

1071 i‡(
dc
.
ma°î
) {

1072 
	`check_c⁄n_c⁄ãxt_deöô
(
dc
.
ma°î
);

1073 
	`‰ì
(
dc
.
ma°î
);

1074 
dc
.
ma°î
 = 
NULL
;

1077 
	`de°roy_check_d©a_thªads
();

1078 
	}
}

1080 *
	$vπ_d©a_checkî_run
(*
¨gs
)

1082 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

1084 
	`´Maö
(
dc
.
ñ
);

1086  
NULL
;

1087 
	}
}

1089 
	$vπ_°¨t_d©a_checkî
()

1091 
±hªad_©å_t
 
©å
;

1092 
	`±hªad_©å_öô
(&
©å
);

1093 
	`±hªad_¸óã
(&
dc
.
thªad_id
,

1094 &
©å
, 
vπ_d©a_checkî_run
, 
NULL
);

1095  
VRT_OK
;

1096 
	}
}

1098 
	$vπ_waô_d©a_checkî
()

1100 
	`±hªad_joö
(
dc
.
thªad_id
, 
NULL
);

1102  
VRT_OK
;

1103 
	}
}

1105 
	gã°_√ed_∑u£
 = 0;

1107 
	$ã°_if_√ed_∑u£
()

1109 
√ed_∑u£
;

1111 
	`upd©e_°©e_gë
(
ã°_√ed_∑u£
,&
√ed_∑u£
);

1113 i‡(
√ed_∑u£
)  1;

1115 
	}
}

1117 
	$ã°_ˇn_c⁄töue
()

1119 
	`upd©e_°©e_£t
(
ã°_√ed_∑u£
,0);

1120 
	`upd©e_°©e_£t
(
¥odu˚_thªads_∑u£_föished_cou¡
,0);

1121 
	`upd©e_°©e_£t
(
di•©ch_thªads_∑u£_föished_cou¡
,0);

1122 
	`upd©e_°©e_£t
(
backíd_thªads_∑u£_föished_cou¡
,0);

1123 
	}
}

1125 
	$ã°_√ed_to_∑u£
()

1127 
	`upd©e_°©e_£t
(
ã°_√ed_∑u£
,1);

1128 
	}
}

1130 
	$⁄e_¥odu˚_thªad_∑u£d
()

1132 
	`upd©e_°©e_add
(
¥odu˚_thªads_∑u£_föished_cou¡
,1);

1133 
	}
}

1135 
	$⁄e_di•©ch_thªad_∑u£d
()

1137 
	`upd©e_°©e_add
(
di•©ch_thªads_∑u£_föished_cou¡
,1);

1138 
	}
}

1140 
	$⁄e_backíd_thªad_∑u£d
()

1142 
	`upd©e_°©e_add
(
backíd_thªads_∑u£_föished_cou¡
,1);

1143 
	}
}

1145 
	$Æl_¥odu˚_thªads_∑u£d
()

1147 
∑u£d_thªads
;

1149 
	`upd©e_°©e_gë
(
¥odu˚_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1150 i‡(
∑u£d_thªads
 < 
¥odu˚_d©a_thªads_cou¡
) {

1155 
	}
}

1157 
	$Æl_di•©ch_thªads_∑u£d
()

1159 
∑u£d_thªads
;

1161 
	`upd©e_°©e_gë
(
di•©ch_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1162 i‡(
∑u£d_thªads
 < 
di•©ch_d©a_thªads_cou¡
) {

1167 
	}
}

1169 
	$Æl_backíd_thªads_∑u£d
()

1171 
∑u£d_thªads
;

1173 
	`upd©e_°©e_gë
(
backíd_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1174 i‡(
∑u£d_thªads
 < 
backíd_thªads_cou¡
) {

1179 
	}
}

1181 
	$Æl_thªads_∑u£d
()

1183 
∑u£d_thªads
;

1185 
	`upd©e_°©e_gë
(
¥odu˚_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1186 i‡(
∑u£d_thªads
 < 
¥odu˚_d©a_thªads_cou¡
) {

1190 
	`upd©e_°©e_gë
(
di•©ch_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1191 i‡(
∑u£d_thªads
 < 
di•©ch_d©a_thªads_cou¡
) {

1195 
	`upd©e_°©e_gë
(
backíd_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1196 i‡(
∑u£d_thªads
 < 
backíd_thªads_cou¡
) {

1201 
	}
}

	@tests/vrt_check_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<±hªad.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<húedis.h
>

13 
	~<async.h
>

14 
	~<ad≠ãrs/´.h
>

16 
	~<dhashkô.h
>

17 
	~<dli°.h
>

18 
	~<dmtqueue.h
>

19 
	~<dlog.h
>

21 
	~<vπ_utû.h
>

22 
	~<vπ_public.h
>

23 
	~<vøbã°.h
>

24 
	~<vπ_¥odu˚_d©a.h
>

25 
	~<vπ_di•©ch_d©a.h
>

26 
	~<vπ_backíd.h
>

27 
	~<vπ_check_d©a.h
>

29 
	#CHECK_DATA_FLAG_NONE
 (1<<0)

	)

30 
	#CHECK_DATA_FLAG_MASTER
 (1<<1)

	)

31 
	#CHECK_DATA_FLAG_SLAVE
 (1<<2)

	)

33 
	#CHECK_UNIT_STATE_NULL
 0

	)

34 
	#CHECK_UNIT_STATE_GET_EXPIRE
 1

	)

35 
	#CHECK_UNIT_STATE_GET_TYPE
 2

	)

36 
	#CHECK_UNIT_STATE_GET_VALUE
 3

	)

38 
	scheck_d©a_thªad
 {

39 
	mid
;

40 
±hªad_t
 
	mthªad_id
;

42 
´EvítLo›
 *
	mñ
;

43 
	mhz
;

44 
	m¸⁄lo›s
;

46 
d¨øy
 *
	mabgs
;

47 
	msˇn_group_idx
;

48 
d¨øy
 *
	msˇn_£rvîs
;

49 
	msˇn_föished_cou¡
;

50 
	mcurs‹
;

51 
dli°
 *
	mcheck_unôs
;

53 
	mcheck_begö_time
;

54 
	msˇn_keys_cou¡
;

55 } 
	tcheck_d©a_thªad
;

57 
	scheck_unô
 {

58 
check_d©a_thªad
 *
	mcdt
;

60 
dli°Node
 *
	m ode
;

62 
sds
 
	mkey
;

64 
	mkey_≥rsi°
;

65 
	mmö_âl
, 
	mmax_âl_g≠
;

67 
	mkey_ty≥
;

68 
	m°©e
;

70 
d¨øy
 
	m£rvîs
;

71 
d¨øy
 
	mª∂ys
;

73 
	m£rvîs_cou¡
;

74 
	mª∂ys_cou¡
;

75 
	mnŸ_exi°_cou¡
;

76 } 
	tcheck_unô
;

78 
	sd©a_checkî
 {

79 
±hªad_t
 
	mthªad_id
;

81 
´EvítLo›
 *
	mñ
;

82 
	mhz
;

83 
	m¸⁄lo›s
;

85 
sds
 
	mã°_èrgë_groups
;

87 
	mÊags
;

88 
sds
 
	mcheckî
;

89 
c⁄n_c⁄ãxt
 *
	mma°î
;

91 
	mcheck_begö_time
;

92 } 
	td©a_checkî
;

94 
d©a_checkî
 
	gdc
;

98 
	gœ°_check_begö_time
;

100 
d¨øy
 *
	gcdts
 = 
NULL
;

102 
check_unô
 *
	$check_unô_¸óã
()

104 
check_unô
 *
cunô
;

106 
cunô
 = 
	`mÆloc
((*cunit));

107 i‡(
cunô
 =
NULL
) {

108  
NULL
;

111 
cunô
->
cdt
 = 
NULL
;

113 
cunô
->
 ode
 = 
NULL
;

115 
cunô
->
key
 = 
NULL
;

116 
cunô
->
key_≥rsi°
 = 0;

117 
cunô
->
mö_âl
 = 0;

118 
cunô
->
max_âl_g≠
 = 0;

119 
cunô
->
key_ty≥
 = -1;

120 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_NULL
;

121 
	`d¨øy_öô
(&
cunô
->
£rvîs
, 2, (
abã°_£rvî
*));

122 
	`d¨øy_öô
(&
cunô
->
ª∂ys
, 2, (
ªdisRïly
*));

124 
cunô
->
£rvîs_cou¡
 = 0;

125 
cunô
->
ª∂ys_cou¡
 = 0;

126 
cunô
->
nŸ_exi°_cou¡
 = 0;

128  
cunô
;

129 
	}
}

131 
	$check_unô_de°roy
(
check_unô
 *
cunô
)

133 i‡(
cunô
->
cdt
 !
NULL
 && cunô->
 ode
 != NULL) {

134 
	`dli°DñNode
(
cunô
->
cdt
->
check_unôs
,cunô->
 ode
);

135 
cunô
->
 ode
 = 
NULL
;

138 i‡(
cunô
->
key
 !
NULL
) {

139 
	`sds‰ì
(
cunô
->
key
);

140 
cunô
->
key
 = 
NULL
;

143 
	`d¨øy_n
(&
cunô
->
£rvîs
) > 0) {

144 
	`d¨øy_p›
(&
cunô
->
£rvîs
);

146 
	`d¨øy_deöô
(&
cunô
->
£rvîs
);

148 
	`d¨øy_n
(&
cunô
->
ª∂ys
) > 0) {

149 
ªdisRïly
 **
ª∂y
 = 
	`d¨øy_p›
(&
cunô
->
ª∂ys
);

150 
	`‰ìRïlyObje˘
(*
ª∂y
);

152 
	`d¨øy_deöô
(&
cunô
->
ª∂ys
);

154 
	`‰ì
(
cunô
);

155 
	}
}

157 
	$check_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

159 
cc
->
˘x
 = 
NULL
;

160 
cc
->
a˘x
 = 
NULL
;

162 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

163 i‡(
cc
->
a˘x
 =
NULL
) {

164  
VRT_ERROR
;

167  
VRT_OK
;

168 
	}
}

170 
	$check_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

172 i‡(
cc
->
˘x
) {

173 
	`ªdisFªe
(
cc
->
˘x
);

174 
cc
->
˘x
 =
NULL
;

177 i‡(
cc
->
a˘x
) {

178 
cc
->
a˘x
->
ev
.
˛ónup
 = 
NULL
;

179 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

180 
cc
->
a˘x
 =
NULL
;

182 
	}
}

184 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

185 
check_d©a_thªad
 *
cdt
 = 
c
->
d©a
;

186 i‡(
°©us
 !
REDIS_OK
) {

187 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

193 
	}
}

195 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

196 
check_d©a_thªad
 *
cdt
 = 
c
->
d©a
;

197 i‡(
°©us
 !
REDIS_OK
) {

198 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

205 
	}
}

207 
	$s‹t_ª∂ys_if_√eded
(
check_unô
 *
cunô
)

209 
°ï
 = 0, 
idx_cmp
 = 0;

211 i‡(
cunô
->
key_ty≥
 =
REDIS_SET
) {

212 
°ï
 = 1;

213 } i‡(
cunô
->
key_ty≥
 =
REDIS_HASH
) {

214 
°ï
 = 2;

217 i‡(
°ï
 > 0) {

218 
i
;

219 
ªdisRïly
 **
ª∂y
;

220 
i
 = 0; i < 
	`d¨øy_n
(&
cunô
->
ª∂ys
); i ++) {

221 
ª∂y
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 
i
);

222 i‡((*
ª∂y
)->
ty≥
 !
REDIS_REPLY_ARRAY
)

224 
	`s‹t_¨øy_by_°ï
((*
ª∂y
)->
ñemít
, (*ª∂y)->
ñemíts
,

225 
°ï
, 
idx_cmp
, 
ª∂y_°rög_bö¨y_com∑ª
);

229  
VRT_OK
;

230 
	}
}

234 
	$check_ª∂ys_if_ßme
(
check_unô
 *
cunô
)

236 
j
;

237 
ªdisRïly
 **
ª∂yb
, **
ª∂y
;

239 
	`s‹t_ª∂ys_if_√eded
(
cunô
);

241 
ª∂yb
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,0);

243 
j
 = 1; j < 
cunô
->
ª∂ys_cou¡
 ; j ++) {

244 
ª∂y
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,
j
);

245 i‡(
	`check_two_ª∂ys_if_ßme
(*
ª∂yb
, *
ª∂y
)) {

251 
	}
}

253 
	#TTL_MISTAKE_CAN_BE_ACCEPT
 3

	)

254 
	$check_d©a_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

255 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

256 
ªdisRïly
 *
ª∂y_˛⁄e
, **
ñem
;

257 
check_unô
 *
cunô
 = 
¥ivd©a
;

258 
check_d©a_thªad
 *
cdt
 = 
cunô
->cdt;

259 
c⁄n_c⁄ãxt
 *
cc
;

260 
vÆue
;

261 *
îrmsg
;

262 
j
;

264 i‡(
ª∂y
 =
NULL
) ;

266 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_EXPIRE
) {

267 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

268 
îrmsg
 = "ttl commandÑeplyÅype isÇot integer";

269 
îr‹
;

272 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

273 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

274 *
ñem
 = 
ª∂y_˛⁄e
;

275 
cunô
->
ª∂ys_cou¡
 ++;

277 i‡(
cunô
->
ª∂ys_cou¡
 >cunô->
£rvîs_cou¡
) {

278 *
¨gv
[2];

279 
size_t
 
¨gvÀn
[2];

280 
mö
, 
max
;

281 
≥rsi°
;

283 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 0);

284 
ª∂y_ñem
 = *
ñem
;

285 i‡(
ª∂y_ñem
->
öãgî
 == -1) {

286 
≥rsi°
 = 1;

287 } i‡(
ª∂y_ñem
->
öãgî
 == -2) {

288 
cunô
->
nŸ_exi°_cou¡
 ++;

289 
mö
 = 
max
 = 0;

290 } i‡(
ª∂y_ñem
->
öãgî
 < -2) {

291 
îrmsg
 = "ttl commandÑeply integer isÜessÅhan -2";

292 
îr‹
;

294 
mö
 = 
max
 = 
ª∂y_ñem
->
öãgî
;

297 
j
 = 1; j < 
	`d¨øy_n
(&
cunô
->
ª∂ys
); j ++) {

298 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 
j
);

299 
ª∂y_ñem
 = *
ñem
;

300 i‡(
≥rsi°
 && 
ª∂y_ñem
->
öãgî
 != -1) {

301 
îrmsg
 = "key in some server isÖersist, but othersáreÇot";

302 
îr‹
;

305 i‡(
ª∂y_ñem
->
öãgî
 == -1) {

306 i‡(
≥rsi°
 != 1) {

307 
îrmsg
 = "key in some server isÖersist, but othersáreÇot";

308 
îr‹
;

310 } i‡(
ª∂y_ñem
->
öãgî
 == -2) {

311 
cunô
->
nŸ_exi°_cou¡
 ++;

312 i‡(
mö
 > 0) min = 0;

313 } i‡(
ª∂y_ñem
->
öãgî
 < -2) {

314 
îrmsg
 = "ttl commandÑeply integer isÜessÅhan -2";

315 
îr‹
;

317 i‡(
ª∂y_ñem
->
öãgî
 < 
mö
) min =Ñeply_elem->integer;

318 i‡(
ª∂y_ñem
->
öãgî
 > 
max
) max =Ñeply_elem->integer;

322 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

324 
d⁄e
;

327 i‡(
≥rsi°
) {

328 
cunô
->
key_≥rsi°
 = 1;

330 
cunô
->
mö_âl
 = 
mö
;

331 
cunô
->
max_âl_g≠
 = 
max
-
mö
;

332 i‡(
cunô
->
max_âl_g≠
 > 
TTL_MISTAKE_CAN_BE_ACCEPT
) {

333 
îrmsg
 = "ttl mistake isÅoo big between groups";

334 
îr‹
;

339 
¨gv
[0] = "type";

340 
¨gvÀn
[0] = 4;

341 
¨gv
[1] = 
cunô
->
key
;

342 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

343 
j
 = 0; j < 
	`d¨øy_n
(&
cunô
->
£rvîs
); j ++) {

344 
abã°_£rvî
 **
abs
 = 
	`d¨øy_gë
(&
cunô
->
£rvîs
,
j
);

345 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

347 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

348 
cunô
, 2, 
¨gv
, 
¨gvÀn
);

351 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_GET_TYPE
;

352 
√xt_°ï
;

358 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_TYPE
) {

359 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STATUS
) {

360 
îrmsg
 = "type commandÑeplyÅype isÇot status";

361 
îr‹
;

364 i‡(!
	`°rcmp
(
ª∂y
->
°r
, "none")) {

366 
cunô
->
nŸ_exi°_cou¡
 ++;

368 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

369 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

370 *
ñem
 = 
ª∂y_˛⁄e
;

371 
cunô
->
ª∂ys_cou¡
 ++;

374 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

376 
d⁄e
;

377 } i‡(
cunô
->
ª∂ys_cou¡
 >(cunô->
£rvîs_cou¡
-cunô->
nŸ_exi°_cou¡
)) {

378 
¨gc
;

379 **
¨gv
;

380 
size_t
 *
¨gvÀn
;

382 i‡(
cunô
->
nŸ_exi°_cou¡
 > 0 && cunô->
key_≥rsi°
) {

383 
îrmsg
 = "key isÖersist, butÇotÉxist in some servers";

384 
îr‹
;

387 i‡(
	`check_ª∂ys_if_ßme
(
cunô
) != 1) {

388 
îrmsg
 = "type commandÑeplysáreÇot same";

389 
îr‹
;

392 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,0);

393 i‡(!
	`°rcmp
((*
ñem
)->
°r
,"string")) {

394 
cunô
->
key_ty≥
 = 
REDIS_STRING
;

396 
¨gc
 = 2;

397 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

398 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

400 
¨gv
[0] = "get";

401 
¨gvÀn
[0] = 3;

402 
¨gv
[1] = 
cunô
->
key
;

403 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

404 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"list")) {

405 
cunô
->
key_ty≥
 = 
REDIS_LIST
;

407 
¨gc
 = 4;

408 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

409 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

411 
¨gv
[0] = "lrange";

412 
¨gvÀn
[0] = 6;

413 
¨gv
[1] = 
cunô
->
key
;

414 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

415 
¨gv
[2] = "0";

416 
¨gvÀn
[2] = 1;

417 
¨gv
[3] = "-1";

418 
¨gvÀn
[3] = 2;

419 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"set")) {

420 
cunô
->
key_ty≥
 = 
REDIS_SET
;

422 
¨gc
 = 2;

423 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

424 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

426 
¨gv
[0] = "smembers";

427 
¨gvÀn
[0] = 8;

428 
¨gv
[1] = 
cunô
->
key
;

429 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

430 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"zset")) {

431 
cunô
->
key_ty≥
 = 
REDIS_ZSET
;

433 
¨gc
 = 4;

434 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

435 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

437 
¨gv
[0] = "zrange";

438 
¨gvÀn
[0] = 6;

439 
¨gv
[1] = 
cunô
->
key
;

440 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

441 
¨gv
[2] = "0";

442 
¨gvÀn
[2] = 1;

443 
¨gv
[3] = "-1";

444 
¨gvÀn
[3] = 2;

445 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"hash")) {

446 
cunô
->
key_ty≥
 = 
REDIS_HASH
;

448 
¨gc
 = 2;

449 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

450 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

452 
¨gv
[0] = "hgetall";

453 
¨gvÀn
[0] = 7;

454 
¨gv
[1] = 
cunô
->
key
;

455 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

457 
îrmsg
 = "not supported keyÅype";

458 
îr‹
;

462 
j
 = 0; j < 
	`d¨øy_n
(&
cunô
->
£rvîs
); j ++) {

463 
abã°_£rvî
 **
abs
 = 
	`d¨øy_gë
(&
cunô
->
£rvîs
,
j
);

464 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

466 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

467 
cunô
, 
¨gc
, 
¨gv
, 
¨gvÀn
);

469 
	`‰ì
(
¨gv
);

470 
	`‰ì
(
¨gvÀn
);

472 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_GET_VALUE
;

473 
√xt_°ï
;

479 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_VALUE
) {

480 
nŸ_exi°
 = 0;

481 i‡(
cunô
->
key_ty≥
 =
REDIS_STRING
) {

482 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_NIL
) {

483 
nŸ_exi°
 = 1;

484 } i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

485 
îrmsg
 = "get commandÑeplyÅype isÇot string";

486 
îr‹
;

488 } i‡(
cunô
->
key_ty≥
 =
REDIS_LIST
) {

489 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

490 
îrmsg
 = "lrange commandÑeplyÅype isÇotárray";

491 
îr‹
;

493 i‡(
ª∂y
->
ñemíts
 == 0) {

494 
nŸ_exi°
 = 1;

496 } i‡(
cunô
->
key_ty≥
 =
REDIS_SET
) {

497 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

498 
îrmsg
 = "smembers commandÑeplyÅype isÇotárray";

499 
îr‹
;

501 i‡(
ª∂y
->
ñemíts
 == 0) {

502 
nŸ_exi°
 = 1;

504 } i‡(
cunô
->
key_ty≥
 =
REDIS_ZSET
) {

505 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

506 
îrmsg
 = "zrange commandÑeplyÅype isÇotárray";

507 
îr‹
;

509 i‡(
ª∂y
->
ñemíts
 == 0) {

510 
nŸ_exi°
 = 1;

512 } i‡(
cunô
->
key_ty≥
 =
REDIS_HASH
) {

513 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

514 
îrmsg
 = "hgetall commandÑeplyÅype isÇotárray";

515 
îr‹
;

517 i‡(
ª∂y
->
ñemíts
 == 0) {

518 
nŸ_exi°
 = 1;

521 
îrmsg
 = "not supported keyÅype";

522 
îr‹
;

525 i‡(
nŸ_exi°
) {

526 
cunô
->
nŸ_exi°_cou¡
 ++;

528 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

529 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

530 *
ñem
 = 
ª∂y_˛⁄e
;

531 
cunô
->
ª∂ys_cou¡
 ++;

534 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

536 
d⁄e
;

537 } i‡(
cunô
->
ª∂ys_cou¡
 >(cunô->
£rvîs_cou¡
-cunô->
nŸ_exi°_cou¡
)) {

538 i‡(
cunô
->
nŸ_exi°_cou¡
 > 0 && cunô->
key_≥rsi°
) {

539 
îrmsg
 = "key isÖersist, butÇotÉxist in some servers";

540 
îr‹
;

543 i‡(
	`check_ª∂ys_if_ßme
(
cunô
) != 1) {

544 
îrmsg
 = "values forÑeplyáreÇot same";

545 
îr‹
;

548 
d⁄e
;

554 
d⁄e
:

556 
	`check_unô_de°roy
(
cunô
);

560 
√xt_°ï
:

562 
cunô
->
ª∂ys_cou¡
 = 0;

563 
cunô
->
nŸ_exi°_cou¡
 = 0;

564 
	`d¨øy_n
(&
cunô
->
ª∂ys
) > 0) {

565 
ñem
 = 
	`d¨øy_p›
(&
cunô
->
ª∂ys
);

566 
	`‰ìRïlyObje˘
(*
ñem
);

571 
îr‹
:

573 
	`log_hexdump
(
LOG_ERR
,
cunô
->
key
,
	`sd¶í
(cunit->key),

575 
îrmsg
,

576 
cdt
->
sˇn_group_idx
,

577 
	`sd¶í
(
cunô
->
key
),
	`gë_key_ty≥_°rög
(cunô->
key_ty≥
));

579 
	`check_unô_de°roy
(
cunô
);

580 
	}
}

582 
	$°¨t_check_d©a
(*
key
, 
size_t
 
keyÀn
, 
check_d©a_thªad
 *
cdt
)

584 
check_unô
 *
cu
 = 
	`check_unô_¸óã
();

585 
j
;

587 
cu
->
cdt
 = cdt;

588 
cu
->
key
 = 
	`sd¢ewÀn
(key,
keyÀn
);

589 
	`dli°Push
(
cdt
->
check_unôs
,
cu
);

590 
cu
->
 ode
 = 
	`dli°La°
(
cdt
->
check_unôs
);

592 
j
 = 0; j < 
	`d¨øy_n
(
cdt
->
abgs
); j ++) {

593 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
j
);

594 
abã°_£rvî
 *
abs
 = 
abg
->
	`gë_backíd_£rvî
◊bg,
key
,
keyÀn
);

595 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(&
cu
->
£rvîs
);

596 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

597 *
¨gv
[2];

598 
size_t
 
¨gvÀn
[2];

600 *
ñem
 = 
abs
;

601 
cu
->
£rvîs_cou¡
 ++;

604 
¨gv
[0] = "ttl";

605 
¨gvÀn
[0] = 3;

606 
¨gv
[1] = 
key
;

607 
¨gvÀn
[1] = 
keyÀn
;

608 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

609 
cu
, 2, 
¨gv
, 
¨gvÀn
);

611 
cu
->
°©e
 = 
CHECK_UNIT_STATE_GET_EXPIRE
;

613  
VRT_OK
;

614 
	}
}

616 
	$sˇn_f‹_check_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

617 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

618 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

619 
check_d©a_thªad
 *
cdt
 = 
abs
->
d©a
;

620 
c⁄n_c⁄ãxt
 *
cc
;

621 
vÆue
;

622 
size_t
 
k
;

624 i‡(
ª∂y
 =
NULL
) ;

627 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

631 i‡(
ª∂y
->
ñemíts
 != 2) {

635 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

636 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

637 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

641 
cdt
->
curs‹
 = 
vÆue
;

643 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

644 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

648 
k
 = 0; k < 
ª∂y_sub
->
ñemíts
; k ++) {

649 
ª∂y_ñem
 = 
ª∂y_sub
->
ñemít
[
k
];

650 i‡(
ª∂y_ñem
->
ty≥
 !
REDIS_REPLY_STRING
) {

654 
	`°¨t_check_d©a
(
ª∂y_ñem
->
°r
,ª∂y_ñem->
Àn
,
cdt
);

657 
cdt
->
sˇn_keys_cou¡
 +
ª∂y_sub
->
ñemíts
;

659 i‡(
cdt
->
curs‹
 == 0) {

660 
cdt
->
sˇn_föished_cou¡
 ++;

662 
	}
}

664 
	gcheck_d©a_thªads_föished_cou¡
 = 0;

665 
	$⁄e_check_d©a_thªad_föished
()

667 
	`upd©e_°©e_add
(
check_d©a_thªads_föished_cou¡
,1);

668 
	}
}

670 
	$Æl_check_d©a_thªads_föished
()

672 
föished_cou¡
;

673 
	`upd©e_°©e_gë
(
check_d©a_thªads_föished_cou¡
,&
föished_cou¡
);

675 i‡(
föished_cou¡
 >
	`d¨øy_n
(
cdts
)) {

680 
	}
}

682 
	$check_d©a_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

684 
check_d©a_thªad
 *
cdt
 = 
˛õ¡D©a
;

686 
	`ASSERT
(
evítLo›
 =
cdt
->
ñ
);

688 i‡(
cdt
->
sˇn_föished_cou¡
 >
	`d¨øy_n
(cdt->
sˇn_£rvîs
)) {

689 i‡(
	`dli°Lígth
(
cdt
->
check_unôs
) == 0) {

690 
	`´St›
(
cdt
->
ñ
);

691 
	`⁄e_check_d©a_thªad_föished
();

692 
	`log_debug
(
LOG_NOTICE
, "One checkÅhread finished,scaned %lld keys",

693 
cdt
->
sˇn_keys_cou¡
);

696 } i‡(
	`dli°Lígth
(
cdt
->
check_unôs
) < 3000) {

697 
abã°_group
 *
abg
;

698 
abã°_£rvî
 **
abs
;

699 *
idx
;

700 
c⁄n_c⁄ãxt
 *
cc
;

702 
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, cdt->
sˇn_group_idx
);

703 
abs
 = 
	`d¨øy_gë
(
cdt
->
sˇn_£rvîs
, cdt->
sˇn_föished_cou¡
);

704 
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

706 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_check_ˇŒback
,

707 *
abs
, "sˇ¿%Œd cou¡ 1000", 
cdt
->
curs‹
);

710 
cdt
->
¸⁄lo›s
 ++;

711  1000/
cdt
->
hz
;

712 
	}
}

714 
	$check_d©a_thªad_öô
(
check_d©a_thªad
 *
cdt
, *
ã°_èrgë_groups
)

716 
i
, 
j
, 
k
;

718 
cdt
->
id
 = 0;

719 
cdt
->
thªad_id
 = 0;

720 
cdt
->
ñ
 = 
NULL
;

721 
cdt
->
hz
 = 200;

722 
cdt
->
¸⁄lo›s
 = 0;

724 
cdt
->
abgs
 = 
NULL
;

725 
cdt
->
sˇn_group_idx
 = 0;

726 
cdt
->
sˇn_£rvîs
 = 
NULL
;

727 
cdt
->
sˇn_föished_cou¡
 = 0;

728 
cdt
->
curs‹
 = 0;

729 
cdt
->
check_unôs
 = 
NULL
;

731 
cdt
->
check_begö_time
 = 0;

732 
cdt
->
sˇn_keys_cou¡
 = 0;

734 
cdt
->
ñ
 = 
	`´Cª©eEvítLo›
(200);

735 i‡(
cdt
->
ñ
 =
NULL
) {

736  
VRT_ERROR
;

739 
cdt
->
sˇn_£rvîs
 = 
	`d¨øy_¸óã
(1,(
abã°_£rvî
*));

741 
cdt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

742 i‡(
cdt
->
abgs
 =
NULL
) {

743  
VRT_ERROR
;

747 
i
 = 0; i < 
	`d¨øy_n
(
cdt
->
abgs
); i ++) {

748 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
i
);

749 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

750 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

751 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(1, (
c⁄n_c⁄ãxt
));

752 
k
 = 0; k < 1; k ++) {

753 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

754 i‡(
	`check_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

755  
VRT_ERROR
;

757 
cc
->
a˘x
->
d©a
 = 
cdt
;

758 
	`ªdisAeAâach
(
cdt
->
ñ
, 
cc
->
a˘x
);

759 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

760 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

765 i‡(
	`´Cª©eTimeEvít
(
cdt
->
ñ
, 1, 
check_d©a_thªad_¸⁄
, cdt, 
NULL
Ë=
AE_ERR
) {

766  
VRT_ERROR
;

769 
cdt
->
check_unôs
 = 
	`dli°Cª©e
();

771  
VRT_OK
;

772 
	}
}

774 
	$check_d©a_thªad_deöô
(
check_d©a_thªad
 *
cdt
)

776 i‡(
cdt
->
ñ
) {

777 
	`´DñëeEvítLo›
(
cdt
->
ñ
);

778 
cdt
->
ñ
 = 
NULL
;

781 i‡(
cdt
->
sˇn_£rvîs
) {

782 
	`d¨øy_n
(
cdt
->
sˇn_£rvîs
) > 0) {

783 
	`d¨øy_p›
(
cdt
->
sˇn_£rvîs
);

785 
	`d¨øy_de°roy
(
cdt
->
sˇn_£rvîs
);

786 
cdt
->
sˇn_£rvîs
 = 
NULL
;

789 i‡(
cdt
->
abgs
) {

790 
i
, 
j
, 
k
;

792 
i
 = 0; i < 
	`d¨øy_n
(
cdt
->
abgs
); i ++) {

793 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
i
);

794 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

795 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

796 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

797 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

798 
	`check_c⁄n_c⁄ãxt_deöô
(
cc
);

803 
	`abã°_groups_de°roy
(
cdt
->
abgs
);

804 
cdt
->
abgs
 = 
NULL
;

807 i‡(
cdt
->
check_unôs
) {

808 
	`dli°Lígth
(
cdt
->
check_unôs
) > 0) {

809 
check_unô
 *
cu
 = 
	`dli°P›
(
cdt
->
check_unôs
);

810 
	`check_unô_de°roy
(
cu
);

812 
	`dli°Rñó£
(
cdt
->
check_unôs
);

813 
cdt
->
check_unôs
 = 
NULL
;

815 
	}
}

817 
	gcheckög_d©a
;

818 
	$checkög_d©a_‹_nŸ
()

820 
checkög
;

822 
	`upd©e_°©e_gë
(
checkög_d©a
,&
checkög
);

824 i‡(
checkög
)  1;

826 
	}
}

828 
	gcheck_d©a_thªads_cou¡
 = 8;

829 
de°roy_check_d©a_thªads
();

834 
	$¸óã_check_d©a_thªads
()

836 
d¨øy
 *
abgs
 = 
NULL
;

837 
abã°_group
 *
abg
;

838 
groups_cou¡
;

839 
thªads_cou¡_≥r_group
;

840 
check_thªad_id
 = 0;

841 
i
, 
j
, 
k
;

843 i‡(
cdts
 !
NULL
) {

844 
	`de°roy_check_d©a_thªads
();

847 
cdts
 = 
	`d¨øy_¸óã
(2,(
check_d©a_thªad
));

848 i‡(
cdts
 =
NULL
) {

852 
abgs
 = 
	`abã°_groups_¸óã
(
dc
.
ã°_èrgë_groups
);

853 i‡(
abgs
 =
NULL
) {

857 
groups_cou¡
 = 
	`d¨øy_n
(
abgs
);

858 i‡(
groups_cou¡
 == 1) {

859 
	`abã°_groups_de°roy
(
abgs
);

863 
thªads_cou¡_≥r_group
 = 
check_d©a_thªads_cou¡
/
groups_cou¡
;

864 i‡(
thªads_cou¡_≥r_group
 <= 0) {

865 
thªads_cou¡_≥r_group
 = 1;

868 
i
 = 0; i < 
groups_cou¡
; i ++) {

869 
£rvîs_cou¡
, 
thªads_cou¡
;

870 
£rvîs_cou¡_≥r_thªad
;

871 
£rvî_idx
 = 0;

873 
thªads_cou¡
 = 
thªads_cou¡_≥r_group
;

874 
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

875 
£rvîs_cou¡
 = 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

876 
£rvîs_cou¡_≥r_thªad
 = 
£rvîs_cou¡
/
thªads_cou¡
;

877 i‡(
£rvîs_cou¡_≥r_thªad
 == 0) {

878 
£rvîs_cou¡_≥r_thªad
 = 1;

879 
thªads_cou¡
 = 
£rvîs_cou¡
;

881 
j
 = 0; j < 
thªads_cou¡
; j ++) {

882 
abã°_£rvî
 *
abs
;

884 
check_d©a_thªad
 *
cdt
 = 
	`d¨øy_push
(
cdts
);

885 
	`check_d©a_thªad_öô
(
cdt
,
dc
.
ã°_èrgë_groups
);

886 
cdt
->
id
 = 
check_thªad_id
++;

887 
cdt
->
sˇn_group_idx
 = 
i
;

889 
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, cdt->
id
);

891 
k
 = 0; k < 
£rvîs_cou¡_≥r_thªad
; k ++) {

892 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(
cdt
->
sˇn_£rvîs
);

893 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
£rvî_idx
++);

894 
abs
->
d©a
 = 
cdt
;

895 *
ñem
 = 
abs
;

898 i‡(
j
 =
thªads_cou¡
-1) {

899 
£rvî_idx
 < 
£rvîs_cou¡
) {

900 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(
cdt
->
sˇn_£rvîs
);

901 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
£rvî_idx
++);

902 
abs
->
d©a
 = 
cdt
;

903 *
ñem
 = 
abs
;

909 
	`abã°_groups_de°roy
(
abgs
);

912 
	}
}

914 
	$de°roy_check_d©a_thªads
()

916 i‡(
cdts
 !
NULL
) {

917 
	`d¨øy_n
(
cdts
) > 0) {

918 
check_d©a_thªad
 *
cdt
 = 
	`d¨øy_p›
(
cdts
);

919 
	`check_d©a_thªad_deöô
(
cdt
);

921 
	`d¨øy_de°roy
(
cdts
);

922 
cdts
 = 
NULL
;

924 
	}
}

926 *
	$check_d©a_thªad_run
(*
¨gs
)

928 
check_d©a_thªad
 *
cdt
 = 
¨gs
;

930 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

932 
	`´Maö
(
cdt
->
ñ
);

934  
NULL
;

935 
	}
}

937 
	$°¨t_check_d©a_thªads
()

939 
j
;

940 
check_d©a_thªad
 *
cdt
;

942 i‡(
cdts
 =
NULL
Ë 
VRT_ERROR
;

944 
j
 = 0; j < 
	`d¨øy_n
(
cdts
); j ++) {

945 
±hªad_©å_t
 
©å
;

947 
cdt
 = 
	`d¨øy_gë
(
cdts
, 
j
);

948 
	`±hªad_©å_öô
(&
©å
);

949 
	`±hªad_¸óã
(&
cdt
->
thªad_id
,

950 &
©å
, 
check_d©a_thªad_run
, 
cdt
);

953  
VRT_OK
;

954 
	}
}

956 
	$begö_check_d©a
()

958 
	`¸óã_check_d©a_thªads
();

959 
	`°¨t_check_d©a_thªads
();

961 
	`upd©e_°©e_£t
(
checkög_d©a
,1);

963  
VRT_OK
;

964 
	}
}

966 
	$íd_check_d©a
()

968 
	`upd©e_°©e_£t
(
check_d©a_thªads_föished_cou¡
,0);

969 
	`upd©e_°©e_£t
(
checkög_d©a
,0);

970 
	}
}

972 
	$d©a_checkî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

974 
	`ASSERT
(
evítLo›
 =
dc
.
ñ
);

976 i‡(!
	`ã°_if_√ed_∑u£
(Ë&& 
	`vπ_£c_now
()-
œ°_ã°_begö_time
 > 
ã°_öãrvÆ
) {

977 
	`ã°_√ed_to_∑u£
();

978 
	`log_nŸi˚
("StartÖauseÅheÅest...");

981 i‡(!
	`checkög_d©a_‹_nŸ
(Ë&& 
	`ã°_if_√ed_∑u£
() &&

982 
	`Æl_thªads_∑u£d
()) {

984 
	`log_nŸi˚
("FinishedÖauseÅheÅest. Tested %lld commands, %lldÉrrorÑeply(%.2f%%).",

985 
	`gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
(),

986 
	`gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
(),

987 ()
	`gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
()/()
	`gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
()*100);

988 
	`ª£t_tŸÆ_cou¡_≥r_cy˛e
();

989 
	`¶ìp
(1);

990 
œ°_check_begö_time
 = 
	`vπ_£c_now
();

991 
	`begö_check_d©a
();

992 
	`log_nŸi˚
("Start checkingÅhe data...");

995 i‡(
	`checkög_d©a_‹_nŸ
(Ë&& 
	`Æl_check_d©a_thªads_föished
()) {

996 
	`íd_check_d©a
();

997 
	`log_nŸi˚
("Finished checkingÅhe data\n");

998 
	`ã°_ˇn_c⁄töue
();

999 
œ°_ã°_begö_time
 = 
	`vπ_£c_now
();

1002 
dc
.
¸⁄lo›s
 ++;

1003  1000/
dc
.
hz
;

1004 
	}
}

1006 
	$vπ_d©a_checkî_öô
(*
checkî
, *
ã°_èrgë_groups
)

1008 
ªt
;

1010 
dc
.
thªad_id
 = 0;

1011 
dc
.
ñ
 = 
NULL
;

1012 
dc
.
hz
 = 10;

1013 
dc
.
¸⁄lo›s
 = 0;

1014 
dc
.
ã°_èrgë_groups
 = 
NULL
;

1015 
dc
.
Êags
 = 
CHECK_DATA_FLAG_NONE
;

1016 
dc
.
checkî
 = 
NULL
;

1017 
dc
.
ma°î
 = 
NULL
;

1018 
dc
.
check_begö_time
 = 0;

1020 
dc
.
ñ
 = 
	`´Cª©eEvítLo›
(10);

1021 i‡(
dc
.
ñ
 =
NULL
) {

1022  
VRT_ERROR
;

1025 i‡(
	`´Cª©eTimeEvít
(
dc
.
ñ
, 1, 
d©a_checkî_¸⁄
, 
NULL
, NULLË=
AE_ERR
) {

1026  
VRT_ERROR
;

1029 
dc
.
ã°_èrgë_groups
 = 
	`sd¢ew
(test_target_groups);

1031 
dc
.
checkî
 = 
	`sd¢ew
(checker);

1033 i‡(!
	`°rˇ£cmp
(
checkî
,"myself")) {

1034 
dc
.
Êags
 |
CHECK_DATA_FLAG_MASTER
;

1036 
sds
 
ho°
;

1037 
p‹t
;

1038 
dc
.
Êags
 |
CHECK_DATA_FLAG_SLAVE
;

1039 
ho°
 = 
	`gë_ho°_p‹t_‰om_addªss_°rög
(
checkî
, &
p‹t
);

1040 i‡(
ho°
 =
NULL
) {

1041  
VRT_ERROR
;

1043 
dc
.
ma°î
 = 
	`mÆloc
((
c⁄n_c⁄ãxt
));

1044 
ªt
 = 
	`check_c⁄n_c⁄ãxt_öô
(
dc
.
ma°î
, 
ho°
, 
p‹t
);

1045 
	`sds‰ì
(
ho°
);

1046 i‡(
ªt
 !
VRT_OK
) {

1047  
VRT_ERROR
;

1051  
VRT_OK
;

1052 
	}
}

1054 
	$vπ_d©a_checkî_deöô
()

1056 i‡(
dc
.
ñ
) {

1057 
	`´DñëeEvítLo›
(
dc
.
ñ
);

1058 
dc
.
ñ
 = 
NULL
;

1061 i‡(
dc
.
ã°_èrgë_groups
) {

1062 
	`sds‰ì
(
dc
.
ã°_èrgë_groups
);

1063 
dc
.
ã°_èrgë_groups
 = 
NULL
;

1066 i‡(
dc
.
checkî
) {

1067 
	`sds‰ì
(
dc
.
checkî
);

1068 
dc
.
checkî
 = 
NULL
;

1071 i‡(
dc
.
ma°î
) {

1072 
	`check_c⁄n_c⁄ãxt_deöô
(
dc
.
ma°î
);

1073 
	`‰ì
(
dc
.
ma°î
);

1074 
dc
.
ma°î
 = 
NULL
;

1077 
	`de°roy_check_d©a_thªads
();

1078 
	}
}

1080 *
	$vπ_d©a_checkî_run
(*
¨gs
)

1082 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

1084 
	`´Maö
(
dc
.
ñ
);

1086  
NULL
;

1087 
	}
}

1089 
	$vπ_°¨t_d©a_checkî
()

1091 
±hªad_©å_t
 
©å
;

1092 
	`±hªad_©å_öô
(&
©å
);

1093 
	`±hªad_¸óã
(&
dc
.
thªad_id
,

1094 &
©å
, 
vπ_d©a_checkî_run
, 
NULL
);

1095  
VRT_OK
;

1096 
	}
}

1098 
	$vπ_waô_d©a_checkî
()

1100 
	`±hªad_joö
(
dc
.
thªad_id
, 
NULL
);

1102  
VRT_OK
;

1103 
	}
}

1105 
	gã°_√ed_∑u£
 = 0;

1107 
	$ã°_if_√ed_∑u£
()

1109 
√ed_∑u£
;

1111 
	`upd©e_°©e_gë
(
ã°_√ed_∑u£
,&
√ed_∑u£
);

1113 i‡(
√ed_∑u£
)  1;

1115 
	}
}

1117 
	$ã°_ˇn_c⁄töue
()

1119 
	`upd©e_°©e_£t
(
ã°_√ed_∑u£
,0);

1120 
	`upd©e_°©e_£t
(
¥odu˚_thªads_∑u£_föished_cou¡
,0);

1121 
	`upd©e_°©e_£t
(
di•©ch_thªads_∑u£_föished_cou¡
,0);

1122 
	`upd©e_°©e_£t
(
backíd_thªads_∑u£_föished_cou¡
,0);

1123 
	}
}

1125 
	$ã°_√ed_to_∑u£
()

1127 
	`upd©e_°©e_£t
(
ã°_√ed_∑u£
,1);

1128 
	}
}

1130 
	$⁄e_¥odu˚_thªad_∑u£d
()

1132 
	`upd©e_°©e_add
(
¥odu˚_thªads_∑u£_föished_cou¡
,1);

1133 
	}
}

1135 
	$⁄e_di•©ch_thªad_∑u£d
()

1137 
	`upd©e_°©e_add
(
di•©ch_thªads_∑u£_föished_cou¡
,1);

1138 
	}
}

1140 
	$⁄e_backíd_thªad_∑u£d
()

1142 
	`upd©e_°©e_add
(
backíd_thªads_∑u£_föished_cou¡
,1);

1143 
	}
}

1145 
	$Æl_¥odu˚_thªads_∑u£d
()

1147 
∑u£d_thªads
;

1149 
	`upd©e_°©e_gë
(
¥odu˚_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1150 i‡(
∑u£d_thªads
 < 
¥odu˚_d©a_thªads_cou¡
) {

1155 
	}
}

1157 
	$Æl_di•©ch_thªads_∑u£d
()

1159 
∑u£d_thªads
;

1161 
	`upd©e_°©e_gë
(
di•©ch_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1162 i‡(
∑u£d_thªads
 < 
di•©ch_d©a_thªads_cou¡
) {

1167 
	}
}

1169 
	$Æl_backíd_thªads_∑u£d
()

1171 
∑u£d_thªads
;

1173 
	`upd©e_°©e_gë
(
backíd_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1174 i‡(
∑u£d_thªads
 < 
backíd_thªads_cou¡
) {

1179 
	}
}

1181 
	$Æl_thªads_∑u£d
()

1183 
∑u£d_thªads
;

1185 
	`upd©e_°©e_gë
(
¥odu˚_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1186 i‡(
∑u£d_thªads
 < 
¥odu˚_d©a_thªads_cou¡
) {

1190 
	`upd©e_°©e_gë
(
di•©ch_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1191 i‡(
∑u£d_thªads
 < 
di•©ch_d©a_thªads_cou¡
) {

1195 
	`upd©e_°©e_gë
(
backíd_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1196 i‡(
∑u£d_thªads
 < 
backíd_thªads_cou¡
) {

1201 
	}
}

	@tests/vrt_check_data.h

1 #i‚de‡
_VRT_CHECK_DATA_H_


2 
	#_VRT_CHECK_DATA_H_


	)

4 
vπ_d©a_checkî_öô
(*
checkî
, *
ã°_èrgë_groups
);

5 
vπ_d©a_checkî_deöô
();

7 
vπ_°¨t_d©a_checkî
();

8 
vπ_waô_d©a_checkî
();

10 
ã°_if_√ed_∑u£
();

11 
ã°_ˇn_c⁄töue
();

12 
ã°_√ed_to_∑u£
();

14 
⁄e_¥odu˚_thªad_∑u£d
();

15 
⁄e_di•©ch_thªad_∑u£d
();

16 
⁄e_backíd_thªad_∑u£d
();

18 
Æl_¥odu˚_thªads_∑u£d
();

19 
Æl_di•©ch_thªads_∑u£d
();

20 
Æl_backíd_thªads_∑u£d
();

21 
Æl_thªads_∑u£d
();

	@tests/vrt_check_data.h

1 #i‚de‡
_VRT_CHECK_DATA_H_


2 
	#_VRT_CHECK_DATA_H_


	)

4 
vπ_d©a_checkî_öô
(*
checkî
, *
ã°_èrgë_groups
);

5 
vπ_d©a_checkî_deöô
();

7 
vπ_°¨t_d©a_checkî
();

8 
vπ_waô_d©a_checkî
();

10 
ã°_if_√ed_∑u£
();

11 
ã°_ˇn_c⁄töue
();

12 
ã°_√ed_to_∑u£
();

14 
⁄e_¥odu˚_thªad_∑u£d
();

15 
⁄e_di•©ch_thªad_∑u£d
();

16 
⁄e_backíd_thªad_∑u£d
();

18 
Æl_¥odu˚_thªads_∑u£d
();

19 
Æl_di•©ch_thªads_∑u£d
();

20 
Æl_backíd_thªads_∑u£d
();

21 
Æl_thªads_∑u£d
();

	@tests/vrt_dispatch_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<async.h
>

13 
	~<ad≠ãrs/´.h
>

15 
	~<dhashkô.h
>

16 
	~<dli°.h
>

17 
	~<dmtqueue.h
>

18 
	~<dlog.h
>

20 
	~<vπ_utû.h
>

21 
	~<vπ_public.h
>

22 
	~<vøbã°.h
>

23 
	~<vπ_di•©ch_d©a.h
>

24 
	~<vπ_¥odu˚_d©a.h
>

26 
	gdi•©ch_d©a_thªads_cou¡
;

27 
d¨øy
 *
	gdi•©ch_d©a_thªads
 = 
NULL
;

29 
	gdi•©ch_thªads_∑u£_föished_cou¡
;

31 
	gtŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
 = 0;

32 
	gtŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
 = 0;

33 
	gtŸÆ_ã°ed_comm™ds_cou¡
 = 0;

34 
	gtŸÆ_ª∂y_îr_cou¡
 = 0;

36 
	$gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
()

38 
cou¡
;

39 
	`upd©e_°©e_gë
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,&
cou¡
);

40  
cou¡
;

41 
	}
}

43 
	$gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
()

45 
cou¡
;

46 
	`upd©e_°©e_gë
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,&
cou¡
);

47  
cou¡
;

48 
	}
}

50 
	$ª£t_tŸÆ_cou¡_≥r_cy˛e
()

52 
	`upd©e_°©e_£t
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,0);

53 
	`upd©e_°©e_£t
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,0);

54 
	}
}

56 
	sª∂y_unô
 {

57 
	mtŸÆ_cou¡
;

58 
	mª˚ived_cou¡
;

59 
ªdisRïly
 **
	mª∂ys
;

60 
d©a_unô
 *
	mdu
;

61 } 
	tª∂y_unô
;

63 
	$show_ª∂ys_öc⁄si°ícy_msg
(
d©a_unô
 *
du
, 
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
)

65 *
keyödex
, 
numkeys
;

66 
sds
 
key
 = 
NULL
;

68 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

69 i‡(
numkeys
 > 0) {

70 
key
 = 
du
->
¨gv
[
keyödex
[0]];

72 
	`‰ì
(
keyödex
);

74 i‡(
key
) {

75 
	`log_hexdump
(
LOG_ERR
,
key
,
	`sd¶í
(key),

83 
du
->
dp
->
«me
,

84 
ª∂y1
->
ty≥
, 
ª∂y2
->type,

85 
ª∂y1
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y1->
°r
:"NULL",

86 
ª∂y2
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y2->
°r
:"NULL",

87 
ª∂y1
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y1->
°r
:"NULL",

88 
ª∂y2
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y2->
°r
:"NULL",

89 
ª∂y1
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y1->
öãgî
:0,

90 
ª∂y2
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y2->
öãgî
:0,

91 
ª∂y1
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y1->
ñemíts
:0,

92 
ª∂y2
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y2->
ñemíts
:0,

93 
	`sd¶í
(
key
));

95 
	`log_îr‹
("%s commandÑeplysáre inconsistency, "

101 
du
->
dp
->
«me
,

102 
ª∂y1
->
ty≥
, 
ª∂y2
->type,

103 
ª∂y1
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y1->
°r
:"NULL",

104 
ª∂y2
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y2->
°r
:"NULL",

105 
ª∂y1
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y1->
°r
:"NULL",

106 
ª∂y2
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y2->
°r
:"NULL",

107 
ª∂y1
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y1->
öãgî
:0,

108 
ª∂y2
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y2->
öãgî
:0,

109 
ª∂y1
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y1->
ñemíts
:0,

110 
ª∂y2
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y2->
ñemíts
:0);

113 
	}
}

115 
	$s‹t_ª∂ys_if_√eded
(
ª∂y_unô
 *
ru
)

117 
d©a_unô
 *
du
 = 
ru
->du;

118 
d©a_¥odu˚r
 *
dp
 = 
du
->dp;

119 
°ï
 = 0, 
idx_cmp
 = 0;

121 i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_SET
) {

122 i‡(!
	`°rcmp
(
dp
->
«me
,"smembers") ||

123 !
	`°rcmp
(
dp
->
«me
,"sunion") ||

124 !
	`°rcmp
(
dp
->
«me
,"sdiff") ||

125 !
	`°rcmp
(
dp
->
«me
,"sinter")) {

126 
°ï
 = 1;

128 } i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_HASH
) {

129 i‡(!
	`°rcmp
(
dp
->
«me
,"hkeys") ||

130 !
	`°rcmp
(
dp
->
«me
,"hvals")) {

131 
°ï
 = 1;

132 } i‡(!
	`°rcmp
(
dp
->
«me
,"hgetall")) {

133 
°ï
 = 2;

134 
idx_cmp
 = 0;

138 i‡(
°ï
 > 0) {

139 
i
;

140 
ªdisRïly
 *
ª∂y
;

141 
i
 = 0; i < 
ru
->
ª˚ived_cou¡
; i ++) {

142 
ª∂y
 = 
ru
->
ª∂ys
[
i
];

143 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
)

145 
	`s‹t_¨øy_by_°ï
(
ª∂y
->
ñemít
,Ñïly->
ñemíts
,

146 
°ï
, 
idx_cmp
, 
ª∂y_°rög_bö¨y_com∑ª
);

150  
VRT_OK
;

151 
	}
}

153 
	$check_ª∂ys_if_ßme
(
ª∂y_unô
 *
ru
)

155 
j
;

156 
ªdisRïly
 **
ª∂ys
 = 
ru
->replys;

157 
ªdisRïly
 *
ª∂yb
, *
ª∂y
;

159 
	`s‹t_ª∂ys_if_√eded
(
ru
);

161 
ª∂yb
 = 
ª∂ys
[0];

163 
j
 = 1; j < 
ru
->
tŸÆ_cou¡
 ; j ++) {

164 
ª∂y
 = 
ª∂ys
[
j
];

165 i‡(
	`check_two_ª∂ys_if_ßme
(
ª∂yb
, 
ª∂y
)) {

166 
	`show_ª∂ys_öc⁄si°ícy_msg
(
ru
->
du
, 
ª∂yb
, 
ª∂y
);

172 
	}
}

174 
	sˇŒback_d©a
 {

175 
di•©ch_d©a_thªad
 *
	mddt
;

176 
ª∂y_unô
 *
	mru
;

177 
	midx
;

180 
	$ª∂y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

181 
ªt
;

182 
ªdisRïly
 *
ª∂y
;

183 
ˇŒback_d©a
 *
cbd
 = 
¥ivd©a
;

184 
di•©ch_d©a_thªad
 *
ddt
 = 
cbd
->ddt;

185 
ª∂y_unô
 *
ru
 = 
cbd
->ru;

187 i‡(
r
 =
NULL
) {

188 
ª∂y
 = 
NULL
;

191 
ª∂y
 = 
	`°ól_húedis_ªdi§ïly
(
r
);

194 
ru
->
ª∂ys
[
cbd
->
idx
] = 
ª∂y
;

195 
ru
->
ª˚ived_cou¡
 ++;

196 
	`‰ì
(
cbd
);

198 i‡(
ru
->
ª˚ived_cou¡
 >ru->
tŸÆ_cou¡
) {

199 
j
;

201 
ªt
 = 
	`check_ª∂ys_if_ßme
(
ru
);

202 i‡(
ªt
 =1 && 
ª∂y
 !
NULL
) {

203 
d©a_unô
 *
du
 = 
ru
->du;

204 
d©a_¥odu˚r
 *
dp
 = 
du
->dp;

205 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_ERROR
) {

206 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
++;

210 i‡(
dp
->
√ed_ˇche_key_¥oc
 !
NULL
) {

211 
¥odu˚_scheme
 *
ps
 = 
du
->
d©a
;

212 i‡(
dp
->
	`√ed_ˇche_key_¥oc
(
ª∂y
)) {

213 
key_ˇche_¨øy
 *
k˝
 = 
	`k˝_gë_‰om_ps
(
ps
, 
dp
);

214 
sds
 
key
 = 
	`gë_⁄e_key_‰om_d©a_unô
(
du
);

215 
	`key_ˇche_¨øy_öput
(
k˝
,
key
,
	`sd¶í
(key));

221 
j
 = 0; j < 
ru
->
tŸÆ_cou¡
; j ++) {

222 
	`‰ìRïlyObje˘
(
ru
->
ª∂ys
[
j
]);

223 
ru
->
ª∂ys
[
j
] = 
NULL
;

225 
	`‰ì
(
ru
->
ª∂ys
);

226 
	`d©a_unô_put
(
ru
->
du
);

227 
	`‰ì
(
ru
);

229 
ddt
->
cou¡_waô_f‹_ª∂y
 --;

230 
	`ASSERT
(
ddt
->
cou¡_waô_f‹_ª∂y
 >= 0);

232 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
++;

234 
	}
}

236 
	$di•©ch_thªad_£nd_d©a
(
di•©ch_d©a_thªad
 *
ddt
)

238 
cou¡_≥r_time
 = 1000;

239 
d©a_unô
 *
du
;

241 (
du
 = 
	`dmtqueue_p›
(
ddt
->
d©as
)Ë!
NULL
) {

242 
ªdisAsyncC⁄ãxt
 *
a˘x
;

243 
j
;

245 
size_t
 *
¨gvÀn
 = 
	`mÆloc
(
du
->
¨gc
*(size_t));

246 
ª∂y_unô
 *
ru
 = 
	`mÆloc
((reply_unit));

247 
ru
->
du
 = du;

248 
ru
->
tŸÆ_cou¡
 = 
	`d¨øy_n
(
ddt
->
abgs
);

249 
ru
->
ª˚ived_cou¡
 = 0;

250 
ru
->
ª∂ys
 = 
	`mÆloc
‘u->
tŸÆ_cou¡
*(
ªdisRïly
 *));

251 
j
 = 0; j < 
du
->
¨gc
; j ++) {

252 
¨gvÀn
[
j
] = 
	`sd¶í
(
du
->
¨gv
[j]);

254 
j
 = 0; j < 
	`d¨øy_n
(
ddt
->
abgs
); j ++) {

255 
ˇŒback_d©a
 *
cbd
;

256 *
keyödex
, 
numkeys
;

257 
abã°_£rvî
 *
abs
;

259 
cbd
 = 
	`mÆloc
((
ˇŒback_d©a
));

260 
cbd
->
ddt
 = ddt;

261 
cbd
->
ru
 =Ñu;

262 
cbd
->
idx
 = 
j
;

263 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
j
);

265 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

266 i‡(
numkeys
 == 0) {

267 
idx
;

268 
idx
 = ()
	`ønd
()%
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

269 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
,
idx
);

271 
sds
 
key
 = 
du
->
¨gv
[
keyödex
[0]];

272 
abs
 = 
abg
->
	`gë_backíd_£rvî
◊bg,
key
,
	`sd¶í
(key));

274 
	`‰ì
(
keyödex
);

276 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
,

277 
du
->
hashvÆue
%
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
));

278 
a˘x
 = 
cc
->actx;

279 
	`ªdisAsyncComm™dArgv
(
a˘x
, 
ª∂y_ˇŒback
, 
cbd
, 
du
->
¨gc
, du->
¨gv
, 
¨gvÀn
);

281 
	`‰ì
(
¨gvÀn
);

283 
ddt
->
cou¡_waô_f‹_ª∂y
 ++;

285 i‡(
cou¡_≥r_time
-- <= 0) ;

288  
VRT_OK
;

289 
	}
}

291 
	$di•©ch_d©a_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

293 
di•©ch_d©a_thªad
 *
ddt
 = 
˛õ¡D©a
;

295 
	`ASSERT
(
evítLo›
 =
ddt
->
ñ
);

298 i‡(
ddt
->
∑u£
) {

299 i‡(!
	`ã°_if_√ed_∑u£
()) {

300 
ddt
->
∑u£
 = 0;

302 
ddt
->
¸⁄lo›s
 ++;

307 i‡(
ddt
->
cou¡_waô_f‹_ª∂y
 < 4000 &&

308 !
	`dmtqueue_em±y
(
ddt
->
d©as
)) {

309 
	`di•©ch_thªad_£nd_d©a
(
ddt
);

313 i‡(
	`ã°_if_√ed_∑u£
() &&

314 
	`Æl_¥odu˚_thªads_∑u£d
() &&

315 
	`Æl_backíd_thªads_∑u£d
() &&

316 
	`dmtqueue_em±y
(
ddt
->
d©as
) &&

317 
	`dli°Lígth
(
ddt
->
rd©as
) == 0) {

319 
ddt
->
∑u£
 = 1;

322 
	`upd©e_°©e_add
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,

323 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
);

324 
	`upd©e_°©e_add
(
tŸÆ_ã°ed_comm™ds_cou¡
,

325 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
);

326 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
 = 0;

327 
	`upd©e_°©e_add
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,

328 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
);

329 
	`upd©e_°©e_add
(
tŸÆ_ª∂y_îr_cou¡
,

330 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
);

331 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
 = 0;

333 
	`⁄e_di•©ch_thªad_∑u£d
();

336 
ddt
->
¸⁄lo›s
 ++;

337  1000/
ddt
->
hz
;

338 
	}
}

340 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

341 
di•©ch_d©a_thªad
 *
ddt
 = 
c
->
d©a
;

342 i‡(
°©us
 !
REDIS_OK
) {

343 
	`log_îr‹
("Eº‹: %s\n", 
c
->
îr°r
);

349 
	}
}

351 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

352 
di•©ch_d©a_thªad
 *
ddt
 = 
c
->
d©a
;

353 i‡(
°©us
 !
REDIS_OK
) {

354 
	`log_îr‹
("Eº‹: %s\n", 
c
->
îr°r
);

361 
	}
}

363 
	$di•©ch_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

365 
cc
->
˘x
 = 
NULL
;

366 
cc
->
a˘x
 = 
NULL
;

368 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

369 i‡(
cc
->
a˘x
 =
NULL
) {

370  
VRT_ERROR
;

373  
VRT_OK
;

374 
	}
}

376 
	$di•©ch_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

378 i‡(
cc
->
˘x
) {

379 
	`ªdisFªe
(
cc
->
˘x
);

380 
cc
->
˘x
 =
NULL
;

383 i‡(
cc
->
a˘x
) {

384 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

385 
cc
->
a˘x
 =
NULL
;

387 
	}
}

389 
	$di•©ch_d©a_thªad_öô
(
di•©ch_d©a_thªad
 *
ddt
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
)

391 
i
, 
j
, 
k
;

393 
ddt
->
id
 = 0;

394 
ddt
->
thªad_id
 = 0;

395 
ddt
->
ñ
 = 
NULL
;

396 
ddt
->
hz
 = 10;

397 
ddt
->
¸⁄lo›s
 = 0;

398 
ddt
->
d©as
 = 
NULL
;

399 
ddt
->
rd©as
 = 
NULL
;

400 
ddt
->
abgs
 = 
NULL
;

401 
ddt
->
∑u£
 = 0;

402 
ddt
->
cou¡_waô_f‹_ª∂y
 = 0;

403 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
 = 0;

404 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
 = 0;

406 
ddt
->
ñ
 = 
	`´Cª©eEvítLo›
(200);

407 i‡(
ddt
->
ñ
 =
NULL
) {

408  
VRT_ERROR
;

411 
ddt
->
d©as
 = 
	`dmtqueue_¸óã
();

412 i‡(
ddt
->
d©as
 =
NULL
) {

413  
VRT_ERROR
;

416 i‡(
	`dmtqueue_öô_wôh_lockqueue
(
ddt
->
d©as
, 
NULL
) != 0) {

417  
VRT_ERROR
;

420 
ddt
->
rd©as
 = 
	`dli°Cª©e
();

421 i‡(
ddt
->
rd©as
 =
NULL
) {

422  
VRT_ERROR
;

425 
ddt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

426 i‡(
ddt
->
abgs
 =
NULL
) {

427  
VRT_ERROR
;

431 
i
 = 0; i < 
	`d¨øy_n
(
ddt
->
abgs
); i ++) {

432 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
i
);

433 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

434 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

435 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(
c⁄√˘i⁄s
, (
c⁄n_c⁄ãxt
));

436 
k
 = 0; k < 
c⁄√˘i⁄s
; k ++) {

437 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

438 i‡(
	`di•©ch_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

439  
VRT_ERROR
;

441 
cc
->
a˘x
->
d©a
 = 
ddt
;

442 
	`ªdisAeAâach
(
ddt
->
ñ
, 
cc
->
a˘x
);

443 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

444 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

449 i‡(
	`´Cª©eTimeEvít
(
ddt
->
ñ
, 1, 
di•©ch_d©a_thªad_¸⁄
, ddt, 
NULL
Ë=
AE_ERR
) {

450  
VRT_ERROR
;

453  
VRT_OK
;

454 
	}
}

456 
	$di•©ch_d©a_thªad_deöô
(
di•©ch_d©a_thªad
 *
ddt
)

458 i‡(
ddt
->
ñ
) {

459 
	`´DñëeEvítLo›
(
ddt
->
ñ
);

460 
ddt
->
ñ
 = 
NULL
;

463 i‡(
ddt
->
d©as
) {

464 
	`dmtqueue_de°roy
(
ddt
->
d©as
);

465 
ddt
->
d©as
 = 
NULL
;

468 i‡(
ddt
->
abgs
) {

469 
i
, 
j
, 
k
;

471 
i
 = 0; i < 
	`d¨øy_n
(
ddt
->
abgs
); i ++) {

472 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
i
);

473 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

474 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

475 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

476 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

477 
	`di•©ch_c⁄n_c⁄ãxt_deöô
(
cc
);

482 
	`abã°_groups_de°roy
(
ddt
->
abgs
);

483 
ddt
->
abgs
 = 
NULL
;

485 
	}
}

487 
	$vπ_di•©ch_d©a_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
)

489 
j
;

491 
di•©ch_d©a_thªads_cou¡
 = 
thªads_cou¡
;

492 
di•©ch_d©a_thªads
 = 
	`d¨øy_¸óã
(
thªads_cou¡
, (
di•©ch_d©a_thªad
));

493 i‡(
di•©ch_d©a_thªads
 =
NULL
) {

494  
VRT_ERROR
;

497 
j
 = 0; j < 
thªads_cou¡
; j ++) {

498 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_push
(
di•©ch_d©a_thªads
);

499 i‡(
	`di•©ch_d©a_thªad_öô
(
ddt
, 
ã°_èrgë_groups
, 
c⁄√˘i⁄s
Ë!
VRT_OK
) {

500  
VRT_ERROR
;

502 
ddt
->
id
 = 
j
;

505  
VRT_OK
;

506 
	}
}

508 
	$vπ_di•©ch_d©a_deöô
()

510 i‡(
di•©ch_d©a_thªads
) {

511 
	`d¨øy_n
(
di•©ch_d©a_thªads
) > 0) {

512 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_p›
(
di•©ch_d©a_thªads
);

513 
	`di•©ch_d©a_thªad_deöô
(
ddt
);

515 
	`d¨øy_de°roy
(
di•©ch_d©a_thªads
);

516 
di•©ch_d©a_thªads
 = 
NULL
;

518 
	}
}

520 *
	$vπ_di•©ch_d©a_thªad_run
(*
¨gs
)

522 
di•©ch_d©a_thªad
 *
ddt
 = 
¨gs
;

523 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

525 
	`´Maö
(
ddt
->
ñ
);

527  
NULL
;

528 
	}
}

530 
	$vπ_°¨t_di•©ch_d©a
()

532 
i
;

533 
i
 = 0; i < 
	`d¨øy_n
(
di•©ch_d©a_thªads
); i ++) {

534 
±hªad_©å_t
 
©å
;

535 
di•©ch_d©a_thªad
 *
ddt
;

536 
	`±hªad_©å_öô
(&
©å
);

537 
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
i
);

538 
	`±hªad_¸óã
(&
ddt
->
thªad_id
,

539 &
©å
, 
vπ_di•©ch_d©a_thªad_run
, 
ddt
);

542  
VRT_OK
;

543 
	}
}

545 
	$vπ_waô_di•©ch_d©a
()

547 
i
;

549 
i
 = 0; i < 
	`d¨øy_n
(
di•©ch_d©a_thªads
); i ++){

550 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
i
);

551 
	`±hªad_joö
(
ddt
->
thªad_id
, 
NULL
);

554  
VRT_OK
;

555 
	}
}

561 
	$d©a_di•©ch
(
d©a_unô
 *
du
)

563 
thªad_idx
;

564 
di•©ch_d©a_thªad
 *
ddt
;

565 
Àngth
;

566 *
keyödex
, 
numkeys
;

568 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

570 i‡(
numkeys
 == 0) {

571 
du
->
hashvÆue
 = ()
	`ønd
();

573 
sds
 
key
 = 
du
->
¨gv
[
keyödex
[0]];

574 
du
->
hashvÆue
 = ()
	`hash_¸c32a
(
key
, 
	`sd¶í
(key));

576 
	`‰ì
(
keyödex
);

578 
thªad_idx
 = 
du
->
hashvÆue
%
di•©ch_d©a_thªads_cou¡
;

579 
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
thªad_idx
);

580 
Àngth
 = 
	`dmtqueue_push
(
ddt
->
d©as
, 
du
);

581 i‡(
Àngth
 <= 0) {

582 
	`ã°_log_îr‹
("D©®unôÖushÅÿdi•©chÅhªad %d faûed", 
ddt
->
id
);

584 } i‡(
Àngth
 > 2000) {

589 
	}
}

	@tests/vrt_dispatch_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<async.h
>

13 
	~<ad≠ãrs/´.h
>

15 
	~<dhashkô.h
>

16 
	~<dli°.h
>

17 
	~<dmtqueue.h
>

18 
	~<dlog.h
>

20 
	~<vπ_utû.h
>

21 
	~<vπ_public.h
>

22 
	~<vøbã°.h
>

23 
	~<vπ_di•©ch_d©a.h
>

24 
	~<vπ_¥odu˚_d©a.h
>

26 
	gdi•©ch_d©a_thªads_cou¡
;

27 
d¨øy
 *
	gdi•©ch_d©a_thªads
 = 
NULL
;

29 
	gdi•©ch_thªads_∑u£_föished_cou¡
;

31 
	gtŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
 = 0;

32 
	gtŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
 = 0;

33 
	gtŸÆ_ã°ed_comm™ds_cou¡
 = 0;

34 
	gtŸÆ_ª∂y_îr_cou¡
 = 0;

36 
	$gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
()

38 
cou¡
;

39 
	`upd©e_°©e_gë
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,&
cou¡
);

40  
cou¡
;

41 
	}
}

43 
	$gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
()

45 
cou¡
;

46 
	`upd©e_°©e_gë
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,&
cou¡
);

47  
cou¡
;

48 
	}
}

50 
	$ª£t_tŸÆ_cou¡_≥r_cy˛e
()

52 
	`upd©e_°©e_£t
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,0);

53 
	`upd©e_°©e_£t
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,0);

54 
	}
}

56 
	sª∂y_unô
 {

57 
	mtŸÆ_cou¡
;

58 
	mª˚ived_cou¡
;

59 
ªdisRïly
 **
	mª∂ys
;

60 
d©a_unô
 *
	mdu
;

61 } 
	tª∂y_unô
;

63 
	$show_ª∂ys_öc⁄si°ícy_msg
(
d©a_unô
 *
du
, 
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
)

65 *
keyödex
, 
numkeys
;

66 
sds
 
key
 = 
NULL
;

68 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

69 i‡(
numkeys
 > 0) {

70 
key
 = 
du
->
¨gv
[
keyödex
[0]];

72 
	`‰ì
(
keyödex
);

74 i‡(
key
) {

75 
	`log_hexdump
(
LOG_ERR
,
key
,
	`sd¶í
(key),

83 
du
->
dp
->
«me
,

84 
ª∂y1
->
ty≥
, 
ª∂y2
->type,

85 
ª∂y1
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y1->
°r
:"NULL",

86 
ª∂y2
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y2->
°r
:"NULL",

87 
ª∂y1
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y1->
°r
:"NULL",

88 
ª∂y2
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y2->
°r
:"NULL",

89 
ª∂y1
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y1->
öãgî
:0,

90 
ª∂y2
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y2->
öãgî
:0,

91 
ª∂y1
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y1->
ñemíts
:0,

92 
ª∂y2
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y2->
ñemíts
:0,

93 
	`sd¶í
(
key
));

95 
	`log_îr‹
("%s commandÑeplysáre inconsistency, "

101 
du
->
dp
->
«me
,

102 
ª∂y1
->
ty≥
, 
ª∂y2
->type,

103 
ª∂y1
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y1->
°r
:"NULL",

104 
ª∂y2
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y2->
°r
:"NULL",

105 
ª∂y1
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y1->
°r
:"NULL",

106 
ª∂y2
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y2->
°r
:"NULL",

107 
ª∂y1
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y1->
öãgî
:0,

108 
ª∂y2
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y2->
öãgî
:0,

109 
ª∂y1
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y1->
ñemíts
:0,

110 
ª∂y2
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y2->
ñemíts
:0);

113 
	}
}

115 
	$s‹t_ª∂ys_if_√eded
(
ª∂y_unô
 *
ru
)

117 
d©a_unô
 *
du
 = 
ru
->du;

118 
d©a_¥odu˚r
 *
dp
 = 
du
->dp;

119 
°ï
 = 0, 
idx_cmp
 = 0;

121 i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_SET
) {

122 i‡(!
	`°rcmp
(
dp
->
«me
,"smembers") ||

123 !
	`°rcmp
(
dp
->
«me
,"sunion") ||

124 !
	`°rcmp
(
dp
->
«me
,"sdiff") ||

125 !
	`°rcmp
(
dp
->
«me
,"sinter")) {

126 
°ï
 = 1;

128 } i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_HASH
) {

129 i‡(!
	`°rcmp
(
dp
->
«me
,"hkeys") ||

130 !
	`°rcmp
(
dp
->
«me
,"hvals")) {

131 
°ï
 = 1;

132 } i‡(!
	`°rcmp
(
dp
->
«me
,"hgetall")) {

133 
°ï
 = 2;

134 
idx_cmp
 = 0;

138 i‡(
°ï
 > 0) {

139 
i
;

140 
ªdisRïly
 *
ª∂y
;

141 
i
 = 0; i < 
ru
->
ª˚ived_cou¡
; i ++) {

142 
ª∂y
 = 
ru
->
ª∂ys
[
i
];

143 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
)

145 
	`s‹t_¨øy_by_°ï
(
ª∂y
->
ñemít
,Ñïly->
ñemíts
,

146 
°ï
, 
idx_cmp
, 
ª∂y_°rög_bö¨y_com∑ª
);

150  
VRT_OK
;

151 
	}
}

153 
	$check_ª∂ys_if_ßme
(
ª∂y_unô
 *
ru
)

155 
j
;

156 
ªdisRïly
 **
ª∂ys
 = 
ru
->replys;

157 
ªdisRïly
 *
ª∂yb
, *
ª∂y
;

159 
	`s‹t_ª∂ys_if_√eded
(
ru
);

161 
ª∂yb
 = 
ª∂ys
[0];

163 
j
 = 1; j < 
ru
->
tŸÆ_cou¡
 ; j ++) {

164 
ª∂y
 = 
ª∂ys
[
j
];

165 i‡(
	`check_two_ª∂ys_if_ßme
(
ª∂yb
, 
ª∂y
)) {

166 
	`show_ª∂ys_öc⁄si°ícy_msg
(
ru
->
du
, 
ª∂yb
, 
ª∂y
);

172 
	}
}

174 
	sˇŒback_d©a
 {

175 
di•©ch_d©a_thªad
 *
	mddt
;

176 
ª∂y_unô
 *
	mru
;

177 
	midx
;

180 
	$ª∂y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

181 
ªt
;

182 
ªdisRïly
 *
ª∂y
;

183 
ˇŒback_d©a
 *
cbd
 = 
¥ivd©a
;

184 
di•©ch_d©a_thªad
 *
ddt
 = 
cbd
->ddt;

185 
ª∂y_unô
 *
ru
 = 
cbd
->ru;

187 i‡(
r
 =
NULL
) {

188 
ª∂y
 = 
NULL
;

191 
ª∂y
 = 
	`°ól_húedis_ªdi§ïly
(
r
);

194 
ru
->
ª∂ys
[
cbd
->
idx
] = 
ª∂y
;

195 
ru
->
ª˚ived_cou¡
 ++;

196 
	`‰ì
(
cbd
);

198 i‡(
ru
->
ª˚ived_cou¡
 >ru->
tŸÆ_cou¡
) {

199 
j
;

201 
ªt
 = 
	`check_ª∂ys_if_ßme
(
ru
);

202 i‡(
ªt
 =1 && 
ª∂y
 !
NULL
) {

203 
d©a_unô
 *
du
 = 
ru
->du;

204 
d©a_¥odu˚r
 *
dp
 = 
du
->dp;

205 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_ERROR
) {

206 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
++;

210 i‡(
dp
->
√ed_ˇche_key_¥oc
 !
NULL
) {

211 
¥odu˚_scheme
 *
ps
 = 
du
->
d©a
;

212 i‡(
dp
->
	`√ed_ˇche_key_¥oc
(
ª∂y
)) {

213 
key_ˇche_¨øy
 *
k˝
 = 
	`k˝_gë_‰om_ps
(
ps
, 
dp
);

214 
sds
 
key
 = 
	`gë_⁄e_key_‰om_d©a_unô
(
du
);

215 
	`key_ˇche_¨øy_öput
(
k˝
,
key
,
	`sd¶í
(key));

221 
j
 = 0; j < 
ru
->
tŸÆ_cou¡
; j ++) {

222 
	`‰ìRïlyObje˘
(
ru
->
ª∂ys
[
j
]);

223 
ru
->
ª∂ys
[
j
] = 
NULL
;

225 
	`‰ì
(
ru
->
ª∂ys
);

226 
	`d©a_unô_put
(
ru
->
du
);

227 
	`‰ì
(
ru
);

229 
ddt
->
cou¡_waô_f‹_ª∂y
 --;

230 
	`ASSERT
(
ddt
->
cou¡_waô_f‹_ª∂y
 >= 0);

232 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
++;

234 
	}
}

236 
	$di•©ch_thªad_£nd_d©a
(
di•©ch_d©a_thªad
 *
ddt
)

238 
cou¡_≥r_time
 = 1000;

239 
d©a_unô
 *
du
;

241 (
du
 = 
	`dmtqueue_p›
(
ddt
->
d©as
)Ë!
NULL
) {

242 
ªdisAsyncC⁄ãxt
 *
a˘x
;

243 
j
;

245 
size_t
 *
¨gvÀn
 = 
	`mÆloc
(
du
->
¨gc
*(size_t));

246 
ª∂y_unô
 *
ru
 = 
	`mÆloc
((reply_unit));

247 
ru
->
du
 = du;

248 
ru
->
tŸÆ_cou¡
 = 
	`d¨øy_n
(
ddt
->
abgs
);

249 
ru
->
ª˚ived_cou¡
 = 0;

250 
ru
->
ª∂ys
 = 
	`mÆloc
‘u->
tŸÆ_cou¡
*(
ªdisRïly
 *));

251 
j
 = 0; j < 
du
->
¨gc
; j ++) {

252 
¨gvÀn
[
j
] = 
	`sd¶í
(
du
->
¨gv
[j]);

254 
j
 = 0; j < 
	`d¨øy_n
(
ddt
->
abgs
); j ++) {

255 
ˇŒback_d©a
 *
cbd
;

256 *
keyödex
, 
numkeys
;

257 
abã°_£rvî
 *
abs
;

259 
cbd
 = 
	`mÆloc
((
ˇŒback_d©a
));

260 
cbd
->
ddt
 = ddt;

261 
cbd
->
ru
 =Ñu;

262 
cbd
->
idx
 = 
j
;

263 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
j
);

265 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

266 i‡(
numkeys
 == 0) {

267 
idx
;

268 
idx
 = ()
	`ønd
()%
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

269 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
,
idx
);

271 
sds
 
key
 = 
du
->
¨gv
[
keyödex
[0]];

272 
abs
 = 
abg
->
	`gë_backíd_£rvî
◊bg,
key
,
	`sd¶í
(key));

274 
	`‰ì
(
keyödex
);

276 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
,

277 
du
->
hashvÆue
%
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
));

278 
a˘x
 = 
cc
->actx;

279 
	`ªdisAsyncComm™dArgv
(
a˘x
, 
ª∂y_ˇŒback
, 
cbd
, 
du
->
¨gc
, du->
¨gv
, 
¨gvÀn
);

281 
	`‰ì
(
¨gvÀn
);

283 
ddt
->
cou¡_waô_f‹_ª∂y
 ++;

285 i‡(
cou¡_≥r_time
-- <= 0) ;

288  
VRT_OK
;

289 
	}
}

291 
	$di•©ch_d©a_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

293 
di•©ch_d©a_thªad
 *
ddt
 = 
˛õ¡D©a
;

295 
	`ASSERT
(
evítLo›
 =
ddt
->
ñ
);

298 i‡(
ddt
->
∑u£
) {

299 i‡(!
	`ã°_if_√ed_∑u£
()) {

300 
ddt
->
∑u£
 = 0;

302 
ddt
->
¸⁄lo›s
 ++;

307 i‡(
ddt
->
cou¡_waô_f‹_ª∂y
 < 4000 &&

308 !
	`dmtqueue_em±y
(
ddt
->
d©as
)) {

309 
	`di•©ch_thªad_£nd_d©a
(
ddt
);

313 i‡(
	`ã°_if_√ed_∑u£
() &&

314 
	`Æl_¥odu˚_thªads_∑u£d
() &&

315 
	`Æl_backíd_thªads_∑u£d
() &&

316 
	`dmtqueue_em±y
(
ddt
->
d©as
) &&

317 
	`dli°Lígth
(
ddt
->
rd©as
) == 0) {

319 
ddt
->
∑u£
 = 1;

322 
	`upd©e_°©e_add
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,

323 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
);

324 
	`upd©e_°©e_add
(
tŸÆ_ã°ed_comm™ds_cou¡
,

325 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
);

326 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
 = 0;

327 
	`upd©e_°©e_add
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,

328 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
);

329 
	`upd©e_°©e_add
(
tŸÆ_ª∂y_îr_cou¡
,

330 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
);

331 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
 = 0;

333 
	`⁄e_di•©ch_thªad_∑u£d
();

336 
ddt
->
¸⁄lo›s
 ++;

337  1000/
ddt
->
hz
;

338 
	}
}

340 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

341 
di•©ch_d©a_thªad
 *
ddt
 = 
c
->
d©a
;

342 i‡(
°©us
 !
REDIS_OK
) {

343 
	`log_îr‹
("Eº‹: %s\n", 
c
->
îr°r
);

349 
	}
}

351 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

352 
di•©ch_d©a_thªad
 *
ddt
 = 
c
->
d©a
;

353 i‡(
°©us
 !
REDIS_OK
) {

354 
	`log_îr‹
("Eº‹: %s\n", 
c
->
îr°r
);

361 
	}
}

363 
	$di•©ch_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

365 
cc
->
˘x
 = 
NULL
;

366 
cc
->
a˘x
 = 
NULL
;

368 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

369 i‡(
cc
->
a˘x
 =
NULL
) {

370  
VRT_ERROR
;

373  
VRT_OK
;

374 
	}
}

376 
	$di•©ch_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

378 i‡(
cc
->
˘x
) {

379 
	`ªdisFªe
(
cc
->
˘x
);

380 
cc
->
˘x
 =
NULL
;

383 i‡(
cc
->
a˘x
) {

384 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

385 
cc
->
a˘x
 =
NULL
;

387 
	}
}

389 
	$di•©ch_d©a_thªad_öô
(
di•©ch_d©a_thªad
 *
ddt
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
)

391 
i
, 
j
, 
k
;

393 
ddt
->
id
 = 0;

394 
ddt
->
thªad_id
 = 0;

395 
ddt
->
ñ
 = 
NULL
;

396 
ddt
->
hz
 = 10;

397 
ddt
->
¸⁄lo›s
 = 0;

398 
ddt
->
d©as
 = 
NULL
;

399 
ddt
->
rd©as
 = 
NULL
;

400 
ddt
->
abgs
 = 
NULL
;

401 
ddt
->
∑u£
 = 0;

402 
ddt
->
cou¡_waô_f‹_ª∂y
 = 0;

403 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
 = 0;

404 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
 = 0;

406 
ddt
->
ñ
 = 
	`´Cª©eEvítLo›
(200);

407 i‡(
ddt
->
ñ
 =
NULL
) {

408  
VRT_ERROR
;

411 
ddt
->
d©as
 = 
	`dmtqueue_¸óã
();

412 i‡(
ddt
->
d©as
 =
NULL
) {

413  
VRT_ERROR
;

416 i‡(
	`dmtqueue_öô_wôh_lockqueue
(
ddt
->
d©as
, 
NULL
) != 0) {

417  
VRT_ERROR
;

420 
ddt
->
rd©as
 = 
	`dli°Cª©e
();

421 i‡(
ddt
->
rd©as
 =
NULL
) {

422  
VRT_ERROR
;

425 
ddt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

426 i‡(
ddt
->
abgs
 =
NULL
) {

427  
VRT_ERROR
;

431 
i
 = 0; i < 
	`d¨øy_n
(
ddt
->
abgs
); i ++) {

432 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
i
);

433 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

434 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

435 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(
c⁄√˘i⁄s
, (
c⁄n_c⁄ãxt
));

436 
k
 = 0; k < 
c⁄√˘i⁄s
; k ++) {

437 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

438 i‡(
	`di•©ch_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

439  
VRT_ERROR
;

441 
cc
->
a˘x
->
d©a
 = 
ddt
;

442 
	`ªdisAeAâach
(
ddt
->
ñ
, 
cc
->
a˘x
);

443 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

444 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

449 i‡(
	`´Cª©eTimeEvít
(
ddt
->
ñ
, 1, 
di•©ch_d©a_thªad_¸⁄
, ddt, 
NULL
Ë=
AE_ERR
) {

450  
VRT_ERROR
;

453  
VRT_OK
;

454 
	}
}

456 
	$di•©ch_d©a_thªad_deöô
(
di•©ch_d©a_thªad
 *
ddt
)

458 i‡(
ddt
->
ñ
) {

459 
	`´DñëeEvítLo›
(
ddt
->
ñ
);

460 
ddt
->
ñ
 = 
NULL
;

463 i‡(
ddt
->
d©as
) {

464 
	`dmtqueue_de°roy
(
ddt
->
d©as
);

465 
ddt
->
d©as
 = 
NULL
;

468 i‡(
ddt
->
abgs
) {

469 
i
, 
j
, 
k
;

471 
i
 = 0; i < 
	`d¨øy_n
(
ddt
->
abgs
); i ++) {

472 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
i
);

473 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

474 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

475 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

476 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

477 
	`di•©ch_c⁄n_c⁄ãxt_deöô
(
cc
);

482 
	`abã°_groups_de°roy
(
ddt
->
abgs
);

483 
ddt
->
abgs
 = 
NULL
;

485 
	}
}

487 
	$vπ_di•©ch_d©a_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
)

489 
j
;

491 
di•©ch_d©a_thªads_cou¡
 = 
thªads_cou¡
;

492 
di•©ch_d©a_thªads
 = 
	`d¨øy_¸óã
(
thªads_cou¡
, (
di•©ch_d©a_thªad
));

493 i‡(
di•©ch_d©a_thªads
 =
NULL
) {

494  
VRT_ERROR
;

497 
j
 = 0; j < 
thªads_cou¡
; j ++) {

498 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_push
(
di•©ch_d©a_thªads
);

499 i‡(
	`di•©ch_d©a_thªad_öô
(
ddt
, 
ã°_èrgë_groups
, 
c⁄√˘i⁄s
Ë!
VRT_OK
) {

500  
VRT_ERROR
;

502 
ddt
->
id
 = 
j
;

505  
VRT_OK
;

506 
	}
}

508 
	$vπ_di•©ch_d©a_deöô
()

510 i‡(
di•©ch_d©a_thªads
) {

511 
	`d¨øy_n
(
di•©ch_d©a_thªads
) > 0) {

512 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_p›
(
di•©ch_d©a_thªads
);

513 
	`di•©ch_d©a_thªad_deöô
(
ddt
);

515 
	`d¨øy_de°roy
(
di•©ch_d©a_thªads
);

516 
di•©ch_d©a_thªads
 = 
NULL
;

518 
	}
}

520 *
	$vπ_di•©ch_d©a_thªad_run
(*
¨gs
)

522 
di•©ch_d©a_thªad
 *
ddt
 = 
¨gs
;

523 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

525 
	`´Maö
(
ddt
->
ñ
);

527  
NULL
;

528 
	}
}

530 
	$vπ_°¨t_di•©ch_d©a
()

532 
i
;

533 
i
 = 0; i < 
	`d¨øy_n
(
di•©ch_d©a_thªads
); i ++) {

534 
±hªad_©å_t
 
©å
;

535 
di•©ch_d©a_thªad
 *
ddt
;

536 
	`±hªad_©å_öô
(&
©å
);

537 
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
i
);

538 
	`±hªad_¸óã
(&
ddt
->
thªad_id
,

539 &
©å
, 
vπ_di•©ch_d©a_thªad_run
, 
ddt
);

542  
VRT_OK
;

543 
	}
}

545 
	$vπ_waô_di•©ch_d©a
()

547 
i
;

549 
i
 = 0; i < 
	`d¨øy_n
(
di•©ch_d©a_thªads
); i ++){

550 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
i
);

551 
	`±hªad_joö
(
ddt
->
thªad_id
, 
NULL
);

554  
VRT_OK
;

555 
	}
}

561 
	$d©a_di•©ch
(
d©a_unô
 *
du
)

563 
thªad_idx
;

564 
di•©ch_d©a_thªad
 *
ddt
;

565 
Àngth
;

566 *
keyödex
, 
numkeys
;

568 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

570 i‡(
numkeys
 == 0) {

571 
du
->
hashvÆue
 = ()
	`ønd
();

573 
sds
 
key
 = 
du
->
¨gv
[
keyödex
[0]];

574 
du
->
hashvÆue
 = ()
	`hash_¸c32a
(
key
, 
	`sd¶í
(key));

576 
	`‰ì
(
keyödex
);

578 
thªad_idx
 = 
du
->
hashvÆue
%
di•©ch_d©a_thªads_cou¡
;

579 
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
thªad_idx
);

580 
Àngth
 = 
	`dmtqueue_push
(
ddt
->
d©as
, 
du
);

581 i‡(
Àngth
 <= 0) {

582 
	`ã°_log_îr‹
("D©®unôÖushÅÿdi•©chÅhªad %d faûed", 
ddt
->
id
);

584 } i‡(
Àngth
 > 2000) {

589 
	}
}

	@tests/vrt_dispatch_data.h

1 #i‚de‡
_VRT_DISPATCH_DATA_H_


2 
	#_VRT_DISPATCH_DATA_H_


	)

4 
	~<d¨øy.h
>

6 
	gabã°_group
;

7 
	gdli°
;

8 
	gdmtqueue
;

9 
	gd©a_unô
;

10 
	g´EvítLo›
;

12 
	sdi•©ch_d©a_thªad
 {

13 
	mid
;

14 
±hªad_t
 
	mthªad_id
;

16 
´EvítLo›
 *
	mñ
;

17 
	mhz
;

18 
	m¸⁄lo›s
;

20 
dmtqueue
 *
	md©as
;

22 
dli°
 *
	mrd©as
;

25 
d¨øy
 *
	mabgs
;

27 
	m∑u£
;

29 
	mcou¡_waô_f‹_ª∂y
;

31 
	mª∂y_tŸÆ_cou¡_≥r_cy˛e
;

32 
	mª∂y_ty≥_îr_cou¡_≥r_cy˛e
;

33 } 
	tdi•©ch_d©a_thªad
;

35 
di•©ch_d©a_thªads_cou¡
;

37 
di•©ch_thªads_∑u£_föished_cou¡
;

39 
gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
();

40 
gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
();

41 
ª£t_tŸÆ_cou¡_≥r_cy˛e
();

43 
vπ_di•©ch_d©a_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
);

44 
vπ_di•©ch_d©a_deöô
();

46 
vπ_°¨t_di•©ch_d©a
();

47 
vπ_waô_di•©ch_d©a
();

49 
d©a_di•©ch
(
d©a_unô
 *
du
);

	@tests/vrt_dispatch_data.h

1 #i‚de‡
_VRT_DISPATCH_DATA_H_


2 
	#_VRT_DISPATCH_DATA_H_


	)

4 
	~<d¨øy.h
>

6 
	gabã°_group
;

7 
	gdli°
;

8 
	gdmtqueue
;

9 
	gd©a_unô
;

10 
	g´EvítLo›
;

12 
	sdi•©ch_d©a_thªad
 {

13 
	mid
;

14 
±hªad_t
 
	mthªad_id
;

16 
´EvítLo›
 *
	mñ
;

17 
	mhz
;

18 
	m¸⁄lo›s
;

20 
dmtqueue
 *
	md©as
;

22 
dli°
 *
	mrd©as
;

25 
d¨øy
 *
	mabgs
;

27 
	m∑u£
;

29 
	mcou¡_waô_f‹_ª∂y
;

31 
	mª∂y_tŸÆ_cou¡_≥r_cy˛e
;

32 
	mª∂y_ty≥_îr_cou¡_≥r_cy˛e
;

33 } 
	tdi•©ch_d©a_thªad
;

35 
di•©ch_d©a_thªads_cou¡
;

37 
di•©ch_thªads_∑u£_föished_cou¡
;

39 
gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
();

40 
gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
();

41 
ª£t_tŸÆ_cou¡_≥r_cy˛e
();

43 
vπ_di•©ch_d©a_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
);

44 
vπ_di•©ch_d©a_deöô
();

46 
vπ_°¨t_di•©ch_d©a
();

47 
vπ_waô_di•©ch_d©a
();

49 
d©a_di•©ch
(
d©a_unô
 *
du
);

	@tests/vrt_produce_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<as£π.h
>

9 
	~<m©h.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/ut¢ame.h
>

13 
	~<d•ecülc⁄fig.h
>

15 
	~<húedis.h
>

16 
	~<d¨øy.h
>

17 
	~<dutû.h
>

18 
	~<dlog.h
>

20 
	~<vπ_utû.h
>

21 
	~<vπ_public.h
>

22 
	~<vøbã°.h
>

23 
	~<vπ_¥odu˚_d©a.h
>

25 
	#PRODUCE_KEY_CACHE_POOL_COUNT
 5

	)

27 
	s¥odu˚_thªad
 {

28 
	mid
;

29 
±hªad_t
 
	mthªad_id
;

31 
¥odu˚_scheme
 *
	mps
;

33 
	m∑u£
;

34 
	mlo›times
;

35 } 
	t¥odu˚_thªad
;

37 
d©a_¥odu˚r
 *
	gdñëe_d©a_¥odu˚r
 = 
NULL
;

39 
	gkey_Àngth_mö
;

40 
	gkey_Àngth_max
;

41 
	gkey_Àngth_ønge_g≠
;

42 
	gfõld_Àngth_max
;

43 
	g°rög_Àngth_max
;

45 
	gcmd_ty≥
;

47 
	gkey_ˇche_poﬁs_cou¡
 = 0;

49 
d¨øy
 
	g√eded_cmd_ty≥_¥odu˚r
;

50 
	g√eded_cmd_ty≥_¥odu˚r_cou¡
;

52 
	g¥odu˚_d©a_thªads_cou¡
;

53 
d¨øy
 
	g¥odu˚_thªads
;

55 
	g¥odu˚_thªads_∑u£_föished_cou¡
;

57 
	gn⁄_em±y_k˝s_cou¡
 = 0;

58 
	gn⁄_em±y_k˝s_idx
[
PRODUCE_KEY_CACHE_POOL_COUNT
] = {-1};

60 
sds
 
	$gë_øndom_ˇched_key
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

62 
key_ˇche_¨øy
 *
k˝
 = 
	`k˝_gë_‰om_ps
(
ps
,
dp
);

63  
	`key_ˇche_¨øy_øndom
(
k˝
);

64 
	}
}

66 
	$gë_øndom_öt
()

68 i‡(
	`ønd
()%2 == 1) {

69  0 - ()
	`ønd
();

71  ()
	`ønd
();

73 
	}
}

75 
	$gë_øndom_unsig√d_öt
()

77  ()
	`ønd
();

78 
	}
}

80 
	$gë_øndom_ch¨
()

82  ()
	`ønd
()%250 + 5;

84 
	}
}

86 
sds
 
	$gë_øndom_key
()

88 
i
, 
Àn
;

89 
sds
 
°r
 = 
	`sd£m±y
();

91 
Àn
 = 
key_Àngth_ønge_g≠
==0?
key_Àngth_mö
:

92 (
	`gë_øndom_unsig√d_öt
()%
key_Àngth_ønge_g≠
+
key_Àngth_mö
);

93 i‡(
Àn
 == 0)Üen ++;

94 
°r
 = 
	`sdsMakeRoomF‹
(°r,(
size_t
)
Àn
);

95 
	`sdsIn¸Lí
(
°r
, ()
Àn
);

97 
i
 = 0; i < 
Àn
; i ++) {

98 
°r
[
i
] = ()
	`gë_øndom_ch¨
();

101  
°r
;

102 
	}
}

104 
sds
 
	$gë_øndom_°rög
()

106 
i
, 
Àn
;

107 
sds
 
°r
 = 
	`sd£m±y
();

109 
Àn
 = 
	`gë_øndom_unsig√d_öt
()%
°rög_Àngth_max
;

110 
°r
 = 
	`sdsMakeRoomF‹
(°r,(
size_t
)
Àn
);

111 
	`sdsIn¸Lí
(
°r
, ()
Àn
);

113 
i
 = 0; i < 
Àn
; i ++) {

114 
°r
[
i
] = 
	`gë_øndom_ch¨
();

117  
°r
;

118 
	}
}

120 
sds
 
	$gë_øndom_Êﬂt_°r
()

122 
decimÆ_Àn
;

123 
sds
 
°r
;

125 i‡(
	`ønd
()%2 == 1) {

126 
°r
 = 
	`sd¢ew
("-");

128 
°r
 = 
	`sd£m±y
();

131 i‡(
	`ønd
()%2 == 1) {

132 
°r
 = 
	`sdsˇtfmt
(str,"%u.%u",

133 
	`gë_øndom_unsig√d_öt
(),

134 
	`gë_øndom_unsig√d_öt
());

136 
°r
 = 
	`sdsˇtfmt
(str,"%u",

137 
	`gë_øndom_unsig√d_öt
());

140  
°r
;

141 
	}
}

143 
	#ZSET_RANGE_MIN_MAX_TYPE_RANK
 0

	)

144 
	#ZSET_RANGE_MIN_MAX_TYPE_SCORE
 1

	)

145 
	#ZSET_RANGE_MIN_MAX_TYPE_LEX
 2

	)

146 
sds
 *
	$gë_øndom_z£t_ønge_mö_max_°r
(
ønge_ty≥
)

148 
sds
 *
ønge
;

149 
¥obabûôy
 = 
	`ønd
()%100;

151 
ønge
 = 
	`mÆloc
(2*(
sds
));

152 i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_RANK
) {

153 
mö
 = 
	`gë_øndom_unsig√d_öt
();

154 
max
 = 
	`gë_øndom_unsig√d_öt
();

156 i‡(
¥obabûôy
 >95 && 
mö
 <
max
 ||

157 
¥obabûôy
 < 95 && 
mö
 > 
max
) {

158 
ønge
[0] = 
	`sds‰oml⁄gl⁄g
(()
max
);

159 
ønge
[1] = 
	`sds‰oml⁄gl⁄g
(()
mö
);

161 
ønge
[0] = 
	`sds‰oml⁄gl⁄g
(()
mö
);

162 
ønge
[1] = 
	`sds‰oml⁄gl⁄g
(()
max
);

164 } i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_SCORE
) {

165 
sds
 
mö_°r
 = 
	`gë_øndom_Êﬂt_°r
();

166 
sds
 
max_°r
 = 
	`gë_øndom_Êﬂt_°r
();

167 
mö
, 
max
;

168 *
ïå
;

169 
sds
 
sw≠
;

170 
mö_¥obabûôy
 = 
	`ønd
()%3;

171 
max_¥obabûôy
 = 
	`ønd
()%3;

173 
mö
 = 
	`°πod
(
mö_°r
,&
ïå
);

174 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
mö
)) {

175 
	`sds‰ì
(
mö_°r
);

176 
	`sds‰ì
(
max_°r
);

177 
	`‰ì
(
ønge
);

178  
NULL
;

180 
max
 = 
	`°πod
(
max_°r
,&
ïå
);

181 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
max
)) {

182 
	`sds‰ì
(
mö_°r
);

183 
	`sds‰ì
(
max_°r
);

184 
	`‰ì
(
ønge
);

185  
NULL
;

187 i‡(
¥obabûôy
 >95 && 
mö
 <
max
 ||

188 
¥obabûôy
 < 95 && 
mö
 > 
max
) {

189 
sw≠
 = 
mö_°r
;

190 
mö_°r
 = 
max_°r
;

191 
max_°r
 = 
sw≠
;

194 i‡(
mö_¥obabûôy
 == 0) {

195 
ønge
[0] = 
	`sd¢ew
("-inf");

196 } i‡(
mö_¥obabûôy
 == 1) {

197 
ønge
[0] = 
	`sd¢ew
("(");

198 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

199 
	`sds‰ì
(
mö_°r
);

201 
ønge
[0] = 
mö_°r
;

203 i‡(
max_¥obabûôy
 == 0) {

204 
ønge
[1] = 
	`sd¢ew
("+inf");

205 } i‡(
max_¥obabûôy
 == 1) {

206 
ønge
[1] = 
	`sd¢ew
("(");

207 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

208 
	`sds‰ì
(
max_°r
);

210 
ønge
[1] = 
max_°r
;

212 } i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_LEX
) {

213 
sds
 
mö_°r
 = 
	`gë_øndom_°rög
();

214 
sds
 
max_°r
 = 
	`gë_øndom_°rög
();

215 
sds
 
sw≠
;

216 
mö_¥obabûôy
 = 
	`ønd
()%3;

217 
max_¥obabûôy
 = 
	`ønd
()%3;

219 i‡(
¥obabûôy
 >95 && 
	`sdscmp
(
mö_°r
,
max_°r
) < 0 ||

220 
¥obabûôy
 < 95 && 
	`sdscmp
(
mö_°r
,
max_°r
) > 0) {

221 
sw≠
 = 
mö_°r
;

222 
mö_°r
 = 
max_°r
;

223 
max_°r
 = 
sw≠
;

226 i‡(
mö_¥obabûôy
 == 0) {

227 
ønge
[0] = 
	`sd¢ew
("-");

228 } i‡(
mö_¥obabûôy
 == 1) {

229 
ønge
[0] = 
	`sd¢ew
("(");

230 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

231 
	`sds‰ì
(
mö_°r
);

233 
ønge
[0] = 
	`sd¢ew
("[");

234 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

235 
	`sds‰ì
(
mö_°r
);

237 i‡(
max_¥obabûôy
 == 0) {

238 
ønge
[1] = 
	`sd¢ew
("+");

239 } i‡(
max_¥obabûôy
 == 1) {

240 
ønge
[1] = 
	`sd¢ew
("(");

241 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

242 
	`sds‰ì
(
max_°r
);

244 
ønge
[1] = 
	`sd¢ew
("[");

245 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

246 
	`sds‰ì
(
max_°r
);

249 
	`‰ì
(
ønge
);

250 
ønge
 = 
NULL
;

253  
ønge
;

254 
	}
}

256 
	$gë_øndom_fõld_Àn
()

258  
	`gë_øndom_unsig√d_öt
()%
fõld_Àngth_max
 + 1;

259 
	}
}

261 
sds
 
	$gë_øndom_key_wôh_hô_øtio
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

263 
sds
 
key
;

264 i‡(
ps
->
hô_øtio_¨øy
[ps->
hô_øtio_idx
++] == 0) {

265 
key
 = 
	`gë_øndom_key
();

267 
key
 = 
	`gë_øndom_ˇched_key
(
ps
,
dp
);

268 i‡(
key
 =
NULL
Ëkey = 
	`gë_øndom_key
();

270 i‡(
ps
->
hô_øtio_idx
 >ps->
hô_øtio_¨øy_Àn
) {

271 
ps
->
hô_øtio_idx
 = 0;

273  
key
;

274 
	}
}

277 
	$nck_whí_n€º‹
(
ªdisRïly
 *
ª∂y
)

279 i‡(
ª∂y
 =
NULL
)  0;

281 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ERROR
) {

286 
	}
}

288 
	$nck_whí_ok
(
ªdisRïly
 *
ª∂y
)

290 i‡(
ª∂y
 =
NULL
)  0;

292 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_STATUS
 &&

293 !
	`°rcmp
(
ª∂y
->
°r
, "OK")) {

298 
	}
}

300 
	$nck_whí_°r
(
ªdisRïly
 *
ª∂y
)

302 i‡(
ª∂y
 =
NULL
)  0;

304 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_STRING
) {

309 
	}
}

311 
	$nck_whí_unsig√d_öãgî
(
ªdisRïly
 *
ª∂y
)

313 i‡(
ª∂y
 =
NULL
)  0;

315 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

316 
ª∂y
->
öãgî
 >= 0) {

321 
	}
}

323 
	$nck_whí_n⁄zîo_unsig√d_öãgî
(
ªdisRïly
 *
ª∂y
)

325 i‡(
ª∂y
 =
NULL
)  0;

327 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

328 
ª∂y
->
öãgî
 > 0) {

333 
	}
}

335 
	$nck_whí_zîo_‹_⁄e
(
ªdisRïly
 *
ª∂y
)

337 i‡(
ª∂y
 =
NULL
)  0;

339 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

340 (
ª∂y
->
öãgî
 == 0 ||Ñeply->integer == 1)) {

345 
	}
}

347 
	$nck_whí_⁄e
(
ªdisRïly
 *
ª∂y
)

349 i‡(
ª∂y
 =
NULL
)  0;

351 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

352 
ª∂y
->
öãgî
 == 1) {

357 
	}
}

361 
d©a_unô
 *
	$gë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

363 
d©a_unô
 *
du
;

365 
du
 = 
	`d©a_unô_gë
();

366 
du
->
dp
 = dp;

367 
du
->
¨gc
 = 2;

368 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

369 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

370 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

372  
du
;

373 
	}
}

375 
d©a_unô
 *
	$£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

377 
d©a_unô
 *
du
;

379 
du
 = 
	`d©a_unô_gë
();

380 
du
->
dp
 = dp;

381 
du
->
¨gc
 = 3;

382 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

383 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

384 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

385 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

387  
du
;

388 
	}
}

390 
d©a_unô
 *
	$£äx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

392 
d©a_unô
 *
du
;

394 
du
 = 
	`d©a_unô_gë
();

395 
du
->
dp
 = dp;

396 
du
->
¨gc
 = 3;

397 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

398 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

399 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

400 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

402  
du
;

403 
	}
}

406 
	$£äx_cmd_nck
(
ªdisRïly
 *
ª∂y
)

408 i‡(
ª∂y
 =
NULL
)  0;

410 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

411 
ª∂y
->
öãgî
 == 1) {

416 
	}
}

418 
d©a_unô
 *
	$£ãx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

420 
d©a_unô
 *
du
;

422 
du
 = 
	`d©a_unô_gë
();

423 
du
->
dp
 = dp;

424 
du
->
¨gc
 = 4;

425 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

426 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

427 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

428 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

429 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

431  
du
;

432 
	}
}

434 
d©a_unô
 *
	$p£ãx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

436 
d©a_unô
 *
du
;

438 
du
 = 
	`d©a_unô_gë
();

439 
du
->
dp
 = dp;

440 
du
->
¨gc
 = 4;

441 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

442 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

443 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

444 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

445 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

447  
du
;

448 
	}
}

450 
d©a_unô
 *
	$dñ_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

452 
d©a_unô
 *
du
;

454 
du
 = 
	`d©a_unô_gë
();

455 
du
->
dp
 = dp;

456 
du
->
¨gc
 = 2;

457 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

458 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

459 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

461  
du
;

462 
	}
}

464 
d©a_unô
 *
	$expúe_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

466 
d©a_unô
 *
du
;

468 
du
 = 
	`d©a_unô_gë
();

469 
du
->
dp
 = dp;

470 
du
->
¨gc
 = 3;

471 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

472 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

473 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

474 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

476  
du
;

477 
	}
}

479 
d©a_unô
 *
	$expúót_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

481 
d©a_unô
 *
du
;

483 
du
 = 
	`d©a_unô_gë
();

484 
du
->
dp
 = dp;

485 
du
->
¨gc
 = 3;

486 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

487 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

488 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

489 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`vπ_m£c_now
()/1000LL+
	`ønd
()%10000);

491  
du
;

492 
	}
}

494 
d©a_unô
 *
	$exi°s_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

496 
d©a_unô
 *
du
;

498 
du
 = 
	`d©a_unô_gë
();

499 
du
->
dp
 = dp;

500 
du
->
¨gc
 = 2;

501 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

502 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

503 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

505  
du
;

506 
	}
}

508 
d©a_unô
 *
	$âl_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

510 
d©a_unô
 *
du
;

512 
du
 = 
	`d©a_unô_gë
();

513 
du
->
dp
 = dp;

514 
du
->
¨gc
 = 2;

515 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

516 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

517 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

519  
du
;

520 
	}
}

522 
d©a_unô
 *
	$±é_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

524 
d©a_unô
 *
du
;

526 
du
 = 
	`d©a_unô_gë
();

527 
du
->
dp
 = dp;

528 
du
->
¨gc
 = 2;

529 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

530 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

531 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

533  
du
;

534 
	}
}

536 
d©a_unô
 *
	$ö¸_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

538 
d©a_unô
 *
du
;

540 
du
 = 
	`d©a_unô_gë
();

541 
du
->
dp
 = dp;

542 
du
->
¨gc
 = 2;

543 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

544 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

545 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

547  
du
;

548 
	}
}

550 
d©a_unô
 *
	$de¸_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

552 
d©a_unô
 *
du
;

554 
du
 = 
	`d©a_unô_gë
();

555 
du
->
dp
 = dp;

556 
du
->
¨gc
 = 2;

557 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

558 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

559 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

561  
du
;

562 
	}
}

564 
d©a_unô
 *
	$ö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

566 
d©a_unô
 *
du
;

568 
du
 = 
	`d©a_unô_gë
();

569 
du
->
dp
 = dp;

570 
du
->
¨gc
 = 3;

571 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

572 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

573 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

574 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

576  
du
;

577 
	}
}

579 
d©a_unô
 *
	$de¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

581 
d©a_unô
 *
du
;

583 
du
 = 
	`d©a_unô_gë
();

584 
du
->
dp
 = dp;

585 
du
->
¨gc
 = 3;

586 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

587 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

588 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

589 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

591  
du
;

592 
	}
}

594 
d©a_unô
 *
	$≠≥nd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

596 
d©a_unô
 *
du
;

598 
du
 = 
	`d©a_unô_gë
();

599 
du
->
dp
 = dp;

600 
du
->
¨gc
 = 3;

601 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

602 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

603 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

604 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

606  
du
;

607 
	}
}

610 
	$≠≥nd_cmd_nck
(
ªdisRïly
 *
ª∂y
)

612 i‡(
ª∂y
 =
NULL
)  0;

614 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

619 
	}
}

621 
d©a_unô
 *
	$°æí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

623 
d©a_unô
 *
du
;

625 
du
 = 
	`d©a_unô_gë
();

626 
du
->
dp
 = dp;

627 
du
->
¨gc
 = 2;

628 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

629 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

630 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

632  
du
;

633 
	}
}

635 
d©a_unô
 *
	$gë£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

637 
d©a_unô
 *
du
;

639 
du
 = 
	`d©a_unô_gë
();

640 
du
->
dp
 = dp;

641 
du
->
¨gc
 = 3;

642 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

643 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

644 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

645 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

647  
du
;

648 
	}
}

650 
d©a_unô
 *
	$ö¸byÊﬂt_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

652 
d©a_unô
 *
du
;

654 
du
 = 
	`d©a_unô_gë
();

655 
du
->
dp
 = dp;

656 
du
->
¨gc
 = 3;

657 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

658 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

659 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

660 
du
->
¨gv
[2] = 
	`gë_øndom_Êﬂt_°r
();

662  
du
;

663 
	}
}

665 
d©a_unô
 *
	$£tbô_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

667 
d©a_unô
 *
du
;

669 
du
 = 
	`d©a_unô_gë
();

670 
du
->
dp
 = dp;

671 
du
->
¨gc
 = 4;

672 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

673 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

674 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

675 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

676 i‡(
	`ønd
()%2) {

677 
du
->
¨gv
[3] = 
	`sd¢ew
("1");

679 
du
->
¨gv
[3] = 
	`sd¢ew
("0");

682  
du
;

683 
	}
}

685 
d©a_unô
 *
	$gëbô_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

687 
d©a_unô
 *
du
;

689 
du
 = 
	`d©a_unô_gë
();

690 
du
->
dp
 = dp;

691 
du
->
¨gc
 = 3;

692 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

693 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

694 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

695 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

697  
du
;

698 
	}
}

700 
d©a_unô
 *
	$£å™ge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

702 
d©a_unô
 *
du
;

704 
du
 = 
	`d©a_unô_gë
();

705 
du
->
dp
 = dp;

706 
du
->
¨gc
 = 4;

707 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

708 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

709 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

710 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

711 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

713  
du
;

714 
	}
}

716 
d©a_unô
 *
	$gëønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

718 
d©a_unô
 *
du
;

720 
du
 = 
	`d©a_unô_gë
();

721 
du
->
dp
 = dp;

722 
du
->
¨gc
 = 4;

723 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

724 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

725 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

726 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

727 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

729  
du
;

730 
	}
}

732 
d©a_unô
 *
	$bôcou¡_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

734 
d©a_unô
 *
du
;

735 
wôh_ønge
 = 0;

737 i‡(
	`ønd
()%2)

738 
wôh_ønge
 = 1;

740 
du
 = 
	`d©a_unô_gë
();

741 
du
->
dp
 = dp;

742 
du
->
¨gc
 = 
wôh_ønge
?4:2;

743 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

744 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

745 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

746 i‡(
wôh_ønge
) {

747 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

748 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

750  
du
;

751 
	}
}

753 
d©a_unô
 *
	$bôpos_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

755 
d©a_unô
 *
du
;

756 
wôh_ønge
 = 0;

757 
¥obabûôy
 = 
	`ønd
()%3;

759 i‡(
¥obabûôy
 == 0)

760 
wôh_ønge
 = 0;

761 i‡(
¥obabûôy
 == 1)

762 
wôh_ønge
 = 1;

763 i‡(
¥obabûôy
 == 2)

764 
wôh_ønge
 = 2;

766 
du
 = 
	`d©a_unô_gë
();

767 
du
->
dp
 = dp;

768 
du
->
¨gc
 = 
wôh_ønge
==0?3:(with_range==1?4:5);

769 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

770 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

771 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

772 i‡(
	`ønd
()%2)

773 
du
->
¨gv
[2] = 
	`sd¢ew
("0");

775 
du
->
¨gv
[2] = 
	`sd¢ew
("1");

776 i‡(
wôh_ønge
 > 0)

777 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

778 i‡(
wôh_ønge
 == 2)

779 
du
->
¨gv
[4] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

781  
du
;

782 
	}
}

784 
d©a_unô
 *
	$mgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

786 
d©a_unô
 *
du
;

788 
du
 = 
	`d©a_unô_gë
();

789 
du
->
dp
 = dp;

790 
du
->
¨gc
 = 2;

791 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

792 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

793 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

795  
du
;

796 
	}
}

798 
d©a_unô
 *
	$m£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

800 
d©a_unô
 *
du
;

802 
du
 = 
	`d©a_unô_gë
();

803 
du
->
dp
 = dp;

804 
du
->
¨gc
 = 3;

805 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

806 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

807 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

808 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

810  
du
;

811 
	}
}

813 
d©a_unô
 *
	$h£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

815 
d©a_unô
 *
du
;

817 
du
 = 
	`d©a_unô_gë
();

818 
du
->
dp
 = dp;

819 
du
->
¨gc
 = 4;

820 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

821 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

822 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

823 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

824 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

826  
du
;

827 
	}
}

829 
d©a_unô
 *
	$hgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

831 
d©a_unô
 *
du
;

833 
du
 = 
	`d©a_unô_gë
();

834 
du
->
dp
 = dp;

835 
du
->
¨gc
 = 3;

836 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

837 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

838 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

839 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

841  
du
;

842 
	}
}

844 
d©a_unô
 *
	$hÀn_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

846 
d©a_unô
 *
du
;

848 
du
 = 
	`d©a_unô_gë
();

849 
du
->
dp
 = dp;

850 
du
->
¨gc
 = 2;

851 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

852 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

853 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

855  
du
;

856 
	}
}

858 
d©a_unô
 *
	$hdñ_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

860 
d©a_unô
 *
du
;

861 
j
, 
fõld_Àngth
;

863 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

865 
du
 = 
	`d©a_unô_gë
();

866 
du
->
dp
 = dp;

867 
du
->
¨gc
 = 2 + 
fõld_Àngth
;

868 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

869 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

870 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

871 
j
 = 0; j < 
fõld_Àngth
; j ++) {

872 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

875  
du
;

876 
	}
}

878 
d©a_unô
 *
	$hexi°s_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

880 
d©a_unô
 *
du
;

882 
du
 = 
	`d©a_unô_gë
();

883 
du
->
dp
 = dp;

884 
du
->
¨gc
 = 3;

885 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

886 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

887 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

888 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

890  
du
;

891 
	}
}

893 
d©a_unô
 *
	$hkeys_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

895 
d©a_unô
 *
du
;

897 
du
 = 
	`d©a_unô_gë
();

898 
du
->
dp
 = dp;

899 
du
->
¨gc
 = 2;

900 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

901 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

902 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

904  
du
;

905 
	}
}

907 
d©a_unô
 *
	$hvÆs_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

909 
d©a_unô
 *
du
;

911 
du
 = 
	`d©a_unô_gë
();

912 
du
->
dp
 = dp;

913 
du
->
¨gc
 = 2;

914 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

915 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

916 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

918  
du
;

919 
	}
}

921 
d©a_unô
 *
	$hgëÆl_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

923 
d©a_unô
 *
du
;

925 
du
 = 
	`d©a_unô_gë
();

926 
du
->
dp
 = dp;

927 
du
->
¨gc
 = 2;

928 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

929 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

930 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

932  
du
;

933 
	}
}

935 
d©a_unô
 *
	$hö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

937 
d©a_unô
 *
du
;

939 
du
 = 
	`d©a_unô_gë
();

940 
du
->
dp
 = dp;

941 
du
->
¨gc
 = 4;

942 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

943 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

944 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

945 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

946 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
());

948  
du
;

949 
	}
}

951 
d©a_unô
 *
	$hö¸byÊﬂt_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

953 
d©a_unô
 *
du
;

955 
du
 = 
	`d©a_unô_gë
();

956 
du
->
dp
 = dp;

957 
du
->
¨gc
 = 4;

958 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

959 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

960 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

961 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

962 
du
->
¨gv
[3] = 
	`gë_øndom_Êﬂt_°r
();

964  
du
;

965 
	}
}

967 
d©a_unô
 *
	$hmgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

969 
d©a_unô
 *
du
;

970 
j
, 
fõld_Àngth
;

972 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

974 
du
 = 
	`d©a_unô_gë
();

975 
du
->
dp
 = dp;

976 
du
->
¨gc
 = 2+
fõld_Àngth
;

977 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

978 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

979 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

980 
j
 = 0; j < 
fõld_Àngth
; j ++) {

981 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

984  
du
;

985 
	}
}

987 
d©a_unô
 *
	$hm£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

989 
d©a_unô
 *
du
;

990 
j
, 
fõld_Àngth
;

992 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

994 
du
 = 
	`d©a_unô_gë
();

995 
du
->
dp
 = dp;

996 
du
->
¨gc
 = 2+
fõld_Àngth
*2;

997 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

998 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

999 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1000 
j
 = 2; j < 2+
fõld_Àngth
*2; j += 2) {

1001 
du
->
¨gv
[
j
] = 
	`gë_øndom_°rög
();

1002 
du
->
¨gv
[
j
+1] = 
	`gë_øndom_°rög
();

1005  
du
;

1006 
	}
}

1008 
d©a_unô
 *
	$h£äx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1010 
d©a_unô
 *
du
;

1012 
du
 = 
	`d©a_unô_gë
();

1013 
du
->
dp
 = dp;

1014 
du
->
¨gc
 = 4;

1015 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1016 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1017 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1018 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1019 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1021  
du
;

1022 
	}
}

1024 
d©a_unô
 *
	$h°æí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1026 
d©a_unô
 *
du
;

1028 
du
 = 
	`d©a_unô_gë
();

1029 
du
->
dp
 = dp;

1030 
du
->
¨gc
 = 3;

1031 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1032 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1033 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1034 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1036  
du
;

1037 
	}
}

1039 
d©a_unô
 *
	$Ωush_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1041 
d©a_unô
 *
du
;

1042 
j
, 
fõld_Àngth
;

1044 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1046 
du
 = 
	`d©a_unô_gë
();

1047 
du
->
dp
 = dp;

1048 
du
->
¨gc
 = 2+
fõld_Àngth
;

1049 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1050 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1051 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1052 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1053 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1056  
du
;

1057 
	}
}

1060 
	$Ωush_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1062 i‡(
ª∂y
 =
NULL
)  0;

1064 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1069 
	}
}

1071 
d©a_unô
 *
	$Õush_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1073 
d©a_unô
 *
du
;

1074 
j
, 
fõld_Àngth
;

1076 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1078 
du
 = 
	`d©a_unô_gë
();

1079 
du
->
dp
 = dp;

1080 
du
->
¨gc
 = 2+
fõld_Àngth
;

1081 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1082 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1083 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1085 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1086 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1089  
du
;

1090 
	}
}

1092 
d©a_unô
 *
	$Ã™ge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1094 
d©a_unô
 *
du
;

1096 
du
 = 
	`d©a_unô_gë
();

1097 
du
->
dp
 = dp;

1098 
du
->
¨gc
 = 4;

1099 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1100 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1101 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1102 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1103 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1105  
du
;

1106 
	}
}

1108 
d©a_unô
 *
	$Ω›_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1110 
d©a_unô
 *
du
;

1112 
du
 = 
	`d©a_unô_gë
();

1113 
du
->
dp
 = dp;

1114 
du
->
¨gc
 = 2;

1115 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1116 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1117 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1119  
du
;

1120 
	}
}

1122 
d©a_unô
 *
	$Õ›_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1124 
d©a_unô
 *
du
;

1126 
du
 = 
	`d©a_unô_gë
();

1127 
du
->
dp
 = dp;

1128 
du
->
¨gc
 = 2;

1129 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1130 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1131 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1133  
du
;

1134 
	}
}

1136 
d©a_unô
 *
	$Œí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1138 
d©a_unô
 *
du
;

1140 
du
 = 
	`d©a_unô_gë
();

1141 
du
->
dp
 = dp;

1142 
du
->
¨gc
 = 2;

1143 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1144 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1145 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1147  
du
;

1148 
	}
}

1150 
d©a_unô
 *
	$Ãem_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1152 
d©a_unô
 *
du
;

1154 
du
 = 
	`d©a_unô_gë
();

1155 
du
->
dp
 = dp;

1156 
du
->
¨gc
 = 4;

1157 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1158 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1159 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1160 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1161 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1163  
du
;

1164 
	}
}

1166 
d©a_unô
 *
	$…rim_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1168 
d©a_unô
 *
du
;

1170 
du
 = 
	`d©a_unô_gë
();

1171 
du
->
dp
 = dp;

1172 
du
->
¨gc
 = 4;

1173 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1174 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1175 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1176 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1177 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1179  
du
;

1180 
	}
}

1182 
d©a_unô
 *
	$lödex_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1184 
d©a_unô
 *
du
;

1186 
du
 = 
	`d©a_unô_gë
();

1187 
du
->
dp
 = dp;

1188 
du
->
¨gc
 = 3;

1189 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1190 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1191 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1192 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1194  
du
;

1195 
	}
}

1197 
d©a_unô
 *
	$l£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1199 
d©a_unô
 *
du
;

1201 
du
 = 
	`d©a_unô_gë
();

1202 
du
->
dp
 = dp;

1203 
du
->
¨gc
 = 4;

1204 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1205 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1206 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1207 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1208 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1210  
du
;

1211 
	}
}

1213 
d©a_unô
 *
	$ßdd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1215 
d©a_unô
 *
du
;

1216 
j
, 
fõld_Àngth
;

1218 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1220 
du
 = 
	`d©a_unô_gë
();

1221 
du
->
dp
 = dp;

1222 
du
->
¨gc
 = 2 + 
fõld_Àngth
;

1223 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1224 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1225 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1226 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1227 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1230  
du
;

1231 
	}
}

1233 
d©a_unô
 *
	$smembîs_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1235 
d©a_unô
 *
du
;

1237 
du
 = 
	`d©a_unô_gë
();

1238 
du
->
dp
 = dp;

1239 
du
->
¨gc
 = 2;

1240 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1241 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1242 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1244  
du
;

1245 
	}
}

1247 
d©a_unô
 *
	$sˇrd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1249 
d©a_unô
 *
du
;

1251 
du
 = 
	`d©a_unô_gë
();

1252 
du
->
dp
 = dp;

1253 
du
->
¨gc
 = 2;

1254 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1255 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1256 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1258  
du
;

1259 
	}
}

1261 
d©a_unô
 *
	$§em_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1263 
d©a_unô
 *
du
;

1264 
j
, 
fõld_Àngth
;

1266 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1268 
du
 = 
	`d©a_unô_gë
();

1269 
du
->
dp
 = dp;

1270 
du
->
¨gc
 = 2+
fõld_Àngth
;

1271 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1272 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1273 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1274 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1275 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1278  
du
;

1279 
	}
}

1281 
d©a_unô
 *
	$sismembî_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1283 
d©a_unô
 *
du
;

1285 
du
 = 
	`d©a_unô_gë
();

1286 
du
->
dp
 = dp;

1287 
du
->
¨gc
 = 3;

1288 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1289 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1290 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1291 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1293  
du
;

1294 
	}
}

1296 
d©a_unô
 *
	$suni⁄_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1298 
d©a_unô
 *
du
;

1300 
du
 = 
	`d©a_unô_gë
();

1301 
du
->
dp
 = dp;

1302 
du
->
¨gc
 = 2;

1303 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1304 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1305 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1307  
du
;

1308 
	}
}

1310 
d©a_unô
 *
	$sdiff_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1312 
d©a_unô
 *
du
;

1314 
du
 = 
	`d©a_unô_gë
();

1315 
du
->
dp
 = dp;

1316 
du
->
¨gc
 = 2;

1317 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1318 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1319 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1321  
du
;

1322 
	}
}

1324 
d©a_unô
 *
	$söãr_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1326 
d©a_unô
 *
du
;

1328 
du
 = 
	`d©a_unô_gë
();

1329 
du
->
dp
 = dp;

1330 
du
->
¨gc
 = 2;

1331 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1332 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1333 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1335  
du
;

1336 
	}
}

1339 
	$Õush_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1341 i‡(
ª∂y
 =
NULL
)  0;

1343 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1348 
	}
}

1350 
d©a_unô
 *
	$zadd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1352 
d©a_unô
 *
du
;

1353 
j
, 
fõld_Àngth
;

1355 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1357 
du
 = 
	`d©a_unô_gë
();

1358 
du
->
dp
 = dp;

1359 
du
->
¨gc
 = 2+
fõld_Àngth
*2;

1360 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1361 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1362 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1364 
j
 = 2; j < 2+
fõld_Àngth
*2; j += 2) {

1365 
du
->
¨gv
[
j
] = 
	`gë_øndom_Êﬂt_°r
();

1366 
du
->
¨gv
[
j
+1] = 
	`gë_øndom_°rög
();

1369  
du
;

1370 
	}
}

1373 
	$zadd_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1375 i‡(
ª∂y
 =
NULL
)  0;

1377 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1382 
	}
}

1384 
d©a_unô
 *
	$zö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1386 
d©a_unô
 *
du
;

1387 
j
, 
fõld_Àngth
;

1389 
du
 = 
	`d©a_unô_gë
();

1390 
du
->
dp
 = dp;

1391 
du
->
¨gc
 = 4;

1392 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1393 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1394 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1395 
du
->
¨gv
[2] = 
	`gë_øndom_Êﬂt_°r
();;

1396 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1398  
du
;

1399 
	}
}

1402 
	$zö¸by_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1404 i‡(
ª∂y
 =
NULL
)  0;

1406 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1411 
	}
}

1413 
d©a_unô
 *
	$zønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1415 
d©a_unô
 *
du
;

1416 
j
, 
fõld_Àngth
;

1417 
wôhsc‹es
;

1419 i‡(
	`ønd
()%2 == 1) {

1420 
wôhsc‹es
 = 1;

1422 
wôhsc‹es
 = 0;

1425 
du
 = 
	`d©a_unô_gë
();

1426 
du
->
dp
 = dp;

1427 
du
->
¨gc
 = 
wôhsc‹es
?5:4;

1428 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1429 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1430 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1431 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(0);

1432 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%10000);

1433 i‡(
wôhsc‹es
Ë
du
->
¨gv
[4] = 
	`sd¢ew
("withscores");

1435  
du
;

1436 
	}
}

1438 
d©a_unô
 *
	$zªvønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1440 
d©a_unô
 *
du
;

1441 
j
, 
fõld_Àngth
;

1442 
wôhsc‹es
;

1444 i‡(
	`ønd
()%2 == 1) {

1445 
wôhsc‹es
 = 1;

1447 
wôhsc‹es
 = 0;

1450 
du
 = 
	`d©a_unô_gë
();

1451 
du
->
dp
 = dp;

1452 
du
->
¨gc
 = 
wôhsc‹es
?5:4;

1453 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1454 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1455 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1456 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(0);

1457 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%10000);

1458 i‡(
wôhsc‹es
Ë
du
->
¨gv
[4] = 
	`sd¢ew
("withscores");

1460  
du
;

1461 
	}
}

1463 
d©a_unô
 *
	$zªm_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1465 
d©a_unô
 *
du
;

1466 
j
, 
fõld_Àngth
;

1468 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1470 
du
 = 
	`d©a_unô_gë
();

1471 
du
->
dp
 = dp;

1472 
du
->
¨gc
 = 2+
fõld_Àngth
;

1473 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1474 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1475 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1477 
j
 = 2; j < 2+
fõld_Àngth
; j ++) {

1478 
du
->
¨gv
[
j
] = 
	`gë_øndom_°rög
();

1481  
du
;

1482 
	}
}

1484 
d©a_unô
 *
	$zˇrd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1486 
d©a_unô
 *
du
;

1488 
du
 = 
	`d©a_unô_gë
();

1489 
du
->
dp
 = dp;

1490 
du
->
¨gc
 = 2;

1491 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1492 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1493 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1495  
du
;

1496 
	}
}

1498 
d©a_unô
 *
	$zcou¡_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1500 
d©a_unô
 *
du
;

1501 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1503 
du
 = 
	`d©a_unô_gë
();

1504 
du
->
dp
 = dp;

1505 
du
->
¨gc
 = 4;

1506 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1507 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1508 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1509 
du
->
¨gv
[2] = 
ønge
[0];

1510 
du
->
¨gv
[3] = 
ønge
[1];

1512 
	`‰ì
(
ønge
);

1513  
du
;

1514 
	}
}

1516 
d©a_unô
 *
	$zøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1518 
d©a_unô
 *
du
;

1519 
idx
 = 0, 
¨g_cou¡
 = 0;

1520 
wôhsc‹es
,
limô
;

1521 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1523 
¨g_cou¡
 = 4;

1524 i‡(
	`ønd
()%2 == 1) {

1525 
wôhsc‹es
 = 1;

1526 
¨g_cou¡
 ++;

1528 
wôhsc‹es
 = 0;

1530 i‡(
	`ønd
()%2 == 1) {

1531 
limô
 = 1;

1532 
¨g_cou¡
 += 3;

1534 
limô
 = 0;

1537 
du
 = 
	`d©a_unô_gë
();

1538 
du
->
dp
 = dp;

1539 
du
->
¨gc
 = 
¨g_cou¡
;

1540 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1541 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
(
dp
->
«me
);

1542 
du
->
¨gv
[
idx
++] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1543 
du
->
¨gv
[
idx
++] = 
ønge
[0];

1544 
du
->
¨gv
[
idx
++] = 
ønge
[1];

1545 i‡(
wôhsc‹es
Ë
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("withscores");

1546 i‡(
limô
) {

1547 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("limit");

1548 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1549 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1552 
	`ASSERT
(
¨g_cou¡
 =
idx
);

1554 
	`‰ì
(
ønge
);

1555  
du
;

1556 
	}
}

1558 
d©a_unô
 *
	$zªvøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1560 
d©a_unô
 *
du
;

1561 
idx
 = 0, 
¨g_cou¡
 = 0;

1562 
wôhsc‹es
,
limô
;

1563 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1565 
¨g_cou¡
 = 4;

1566 i‡(
	`ønd
()%2 == 1) {

1567 
wôhsc‹es
 = 1;

1568 
¨g_cou¡
 ++;

1570 
wôhsc‹es
 = 0;

1572 i‡(
	`ønd
()%2 == 1) {

1573 
limô
 = 1;

1574 
¨g_cou¡
 += 3;

1576 
limô
 = 0;

1579 
du
 = 
	`d©a_unô_gë
();

1580 
du
->
dp
 = dp;

1581 
du
->
¨gc
 = 
¨g_cou¡
;

1582 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1583 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
(
dp
->
«me
);

1584 
du
->
¨gv
[
idx
++] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1585 
du
->
¨gv
[
idx
++] = 
ønge
[0];

1586 
du
->
¨gv
[
idx
++] = 
ønge
[1];

1587 i‡(
wôhsc‹es
Ë
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("withscores");

1588 i‡(
limô
) {

1589 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("limit");

1590 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1591 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1594 
	`ASSERT
(
¨g_cou¡
 =
idx
);

1596 
	`‰ì
(
ønge
);

1597  
du
;

1598 
	}
}

1600 
d©a_unô
 *
	$zønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1602 
d©a_unô
 *
du
;

1604 
du
 = 
	`d©a_unô_gë
();

1605 
du
->
dp
 = dp;

1606 
du
->
¨gc
 = 3;

1607 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1608 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1609 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1610 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1612  
du
;

1613 
	}
}

1615 
d©a_unô
 *
	$zªvønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1617 
d©a_unô
 *
du
;

1619 
du
 = 
	`d©a_unô_gë
();

1620 
du
->
dp
 = dp;

1621 
du
->
¨gc
 = 3;

1622 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1623 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1624 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1625 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1627  
du
;

1628 
	}
}

1630 
d©a_unô
 *
	$zsc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1632 
d©a_unô
 *
du
;

1634 
du
 = 
	`d©a_unô_gë
();

1635 
du
->
dp
 = dp;

1636 
du
->
¨gc
 = 3;

1637 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1638 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1639 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1640 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1642  
du
;

1643 
	}
}

1645 
d©a_unô
 *
	$zªmøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1647 
d©a_unô
 *
du
;

1648 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1650 
du
 = 
	`d©a_unô_gë
();

1651 
du
->
dp
 = dp;

1652 
du
->
¨gc
 = 4;

1653 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1654 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1655 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1656 
du
->
¨gv
[2] = 
ønge
[0];

1657 
du
->
¨gv
[3] = 
ønge
[1];

1659 
	`‰ì
(
ønge
);

1660  
du
;

1661 
	}
}

1663 
d©a_unô
 *
	$zªmøngebyønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1665 
d©a_unô
 *
du
;

1666 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_RANK
);

1668 
du
 = 
	`d©a_unô_gë
();

1669 
du
->
dp
 = dp;

1670 
du
->
¨gc
 = 4;

1671 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1672 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1673 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1674 
du
->
¨gv
[2] = 
ønge
[0];

1675 
du
->
¨gv
[3] = 
ønge
[1];

1677 
	`‰ì
(
ønge
);

1678  
du
;

1679 
	}
}

1681 
d©a_unô
 *
	$zªmøngebyÀx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1683 
d©a_unô
 *
du
;

1684 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_LEX
);

1686 
du
 = 
	`d©a_unô_gë
();

1687 
du
->
dp
 = dp;

1688 
du
->
¨gc
 = 4;

1689 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1690 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1691 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1692 
du
->
¨gv
[2] = 
ønge
[0];

1693 
du
->
¨gv
[3] = 
ønge
[1];

1695 
	`‰ì
(
ønge
);

1696  
du
;

1697 
	}
}

1699 
	g¥odu˚rs_cou¡
;

1700 
d©a_¥odu˚r
 
	gªdis_d©a_¥odu˚r_èbÀ
[] = {

1702 {"dñ",
dñ_cmd_¥odu˚r
,-2,"w",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_KEY
,NULL},

1703 {"exi°s",
exi°s_cmd_¥odu˚r
,-2,"rF",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_KEY
,NULL},

1704 {"âl",
âl_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1705 {"±é",
±é_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1706 {"expúe",
expúe_cmd_¥odu˚r
,3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1707 {"expúót",
expúót_cmd_¥odu˚r
,3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1709 {"gë",
gë_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1710 {"£t",
£t_cmd_¥odu˚r
,-3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_ok
},

1711 {"£äx",
£äx_cmd_¥odu˚r
,3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
£äx_cmd_nck
},

1712 {"£ãx",
£ãx_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,
nck_whí_ok
},

1713 {"p£ãx",
p£ãx_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,
nck_whí_ok
},

1714 {"ö¸",
ö¸_cmd_¥odu˚r
,2,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1715 {"de¸",
de¸_cmd_¥odu˚r
,2,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1716 {"ö¸by",
ö¸by_cmd_¥odu˚r
,3,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1717 {"de¸by",
de¸by_cmd_¥odu˚r
,3,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1718 {"≠≥nd",
≠≥nd_cmd_¥odu˚r
,3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
≠≥nd_cmd_nck
},

1719 {"°æí",
°æí_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1720 {"gë£t",
gë£t_cmd_¥odu˚r
,3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_n€º‹
},

1721 {"ö¸byÊﬂt",
ö¸byÊﬂt_cmd_¥odu˚r
,3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_°r
},

1722 {"£tbô",
£tbô_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_zîo_‹_⁄e
},

1723 {"gëbô",
gëbô_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1724 {"£å™ge",
£å™ge_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_n⁄zîo_unsig√d_öãgî
},

1725 {"gëønge",
gëønge_cmd_¥odu˚r
,4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1726 {"bôcou¡",
bôcou¡_cmd_¥odu˚r
,-2,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1727 {"bôpos",
bôpos_cmd_¥odu˚r
,-3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1728 {"mgë",
mgë_cmd_¥odu˚r
,-2,"r",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_STRING
,NULL},

1729 {"m£t",
m£t_cmd_¥odu˚r
,-3,"wmA",0,
NULL
,1,-1,2,
TEST_CMD_TYPE_STRING
,
nck_whí_ok
},

1731 {"h£t",
h£t_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_⁄e
},

1732 {"hgë",
hgë_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1733 {"hÀn",
hÀn_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1734 {"hdñ",
hdñ_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1735 {"hexi°s",
hexi°s_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1736 {"hkeys",
hkeys_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1737 {"hvÆs",
hvÆs_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1738 {"hgëÆl",
hgëÆl_cmd_¥odu˚r
,2,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1739 {"hö¸by",
hö¸by_cmd_¥odu˚r
,4,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1740 {"hö¸byÊﬂt",
hö¸byÊﬂt_cmd_¥odu˚r
,4,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1741 {"hmgë",
hmgë_cmd_¥odu˚r
,-3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1742 {"hm£t",
hm£t_cmd_¥odu˚r
,-4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_ok
},

1743 {"h£äx",
h£äx_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_⁄e
},

1744 {"h°æí",
h°æí_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1746 {"Ωush",
Ωush_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,
Ωush_cmd_nck
},

1747 {"Õush",
Õush_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,
Õush_cmd_nck
},

1748 {"Ã™ge",
Ã™ge_cmd_¥odu˚r
,4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1749 {"Ω›",
Ω›_cmd_¥odu˚r
,2,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1750 {"Õ›",
Õ›_cmd_¥odu˚r
,2,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1751 {"Œí",
Œí_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1752 {"Ãem",
Ãem_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1753 {"…rim",
…rim_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1754 {"lödex",
lödex_cmd_¥odu˚r
,3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1755 {"l£t",
l£t_cmd_¥odu˚r
,4,"wm",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1757 {"ßdd",
ßdd_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,
nck_whí_unsig√d_öãgî
},

1758 {"smembîs",
smembîs_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1759 {"sˇrd",
sˇrd_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1760 {"§em",
§em_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1761 {"sismembî",
sismembî_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1762 {"suni⁄",
suni⁄_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1763 {"sdiff",
sdiff_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1764 {"söãr",
söãr_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1766 {"zadd",
zadd_cmd_¥odu˚r
,-4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,
zadd_cmd_nck
},

1767 {"zö¸by",
zö¸by_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,
zö¸by_cmd_nck
},

1768 {"zønge",
zønge_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1769 {"zªvønge",
zªvønge_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1770 {"zªm",
zªm_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1771 {"zˇrd",
zˇrd_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1772 {"zcou¡",
zcou¡_cmd_¥odu˚r
,4,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1773 {"zøngebysc‹e",
zøngebysc‹e_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1774 {"zªvøngebysc‹e",
zªvøngebysc‹e_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1775 {"zønk",
zønk_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1776 {"zªvønk",
zªvønk_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1777 {"zsc‹e",
zsc‹e_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1778 {"zªmøngebysc‹e",
zªmøngebysc‹e_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1779 {"zªmøngebyønk",
zªmøngebyønk_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL}

1782 
d©a_unô
 *
	$d©a_unô_gë
()

1784 
d©a_unô
 *
du
 = 
	`mÆloc
((data_unit));

1785 
du
->
dp
 = 
NULL
;

1786 
du
->
¨gc
 = 0;

1787 
du
->
¨gv
 = 
NULL
;

1788 
du
->
hashvÆue
 = 0;

1789 
du
->
d©a
 = 
NULL
;

1790  
du
;

1791 
	}
}

1793 
	$d©a_unô_put
(
d©a_unô
 *
du
)

1795 
idx
;

1797 
idx
 = 0; idx < 
du
->
¨gc
; idx ++) {

1798 i‡(
du
->
¨gv
[
idx
])

1799 
	`sds‰ì
(
du
->
¨gv
[
idx
]);

1801 
	`‰ì
(
du
->
¨gv
);

1802 
	`‰ì
(
du
);

1803 
	}
}

1805 
¥odu˚_scheme
 *
	$¥odu˚_scheme_¸óã
(
max_ˇched_keys
, 
hô_øtio
)

1807 
¥odu˚_scheme
 *
ps
;

1808 
cou¡
, 
idx
;

1809 
øtio
;

1811 
ps
 = 
	`mÆloc
((*ps));

1812 i‡(
ps
 =
NULL
)  NULL;

1813 
ps
->
k˝s
 = 
NULL
;

1814 
ps
->
hô_øtio_¨øy
 = 
NULL
;

1816 
ps
->
k˝s
 = 
	`d¨øy_¸óã
(
PRODUCE_KEY_CACHE_POOL_COUNT
,(
key_ˇche_¨øy
 *));

1817 
idx
 = 0; idx < 
PRODUCE_KEY_CACHE_POOL_COUNT
; idx ++) {

1818 
key_ˇche_¨øy
 **
k˝
 = 
	`d¨øy_push
(
ps
->
k˝s
);

1819 *
k˝
 = 
	`key_ˇche_¨øy_¸óã
(
max_ˇched_keys
/
PRODUCE_KEY_CACHE_POOL_COUNT
);

1820 i‡(*
k˝
 =
NULL
) {

1821  
NULL
;

1826 
ps
->
hô_øtio_¨øy_Àn
 = 100;

1827 
ps
->
hô_øtio
 = hit_ratio;

1828 
ps
->
hô_øtio_idx
 = 0;

1829 
ps
->
hô_øtio_¨øy
 = 
	`mÆloc
’s->
hô_øtio_¨øy_Àn
*());

1830 
øtio
 = 
ps
->
hô_øtio_¨øy_Àn
/ps->
hô_øtio
;

1831 i‡(
øtio
 > 1) {

1832 
cou¡
 = 
ps
->
hô_øtio
;

1833 
idx
 = 0; idx < 
ps
->
hô_øtio_¨øy_Àn
; idx ++) {

1834 
ps
->
hô_øtio_¨øy
[
idx
] = 0;

1837 
cou¡
 = 
ps
->
hô_øtio_¨øy_Àn
 -Ös->
hô_øtio
;

1838 
idx
 = 0; idx < 
ps
->
hô_øtio_¨øy_Àn
; idx ++) {

1839 
ps
->
hô_øtio_¨øy
[
idx
] = 1;

1842 
cou¡
 > 0) {

1843 
idx
 = 
	`ønd
()%
ps
->
hô_øtio_¨øy_Àn
;

1844 i‡(
øtio
 > 1) {

1845 i‡(
ps
->
hô_øtio_¨øy
[
idx
] == 0) {

1846 
cou¡
 --;

1847 
ps
->
hô_øtio_¨øy
[
idx
] = 1;

1850 i‡(
ps
->
hô_øtio_¨øy
[
idx
] == 1) {

1851 
cou¡
 --;

1852 
ps
->
hô_øtio_¨øy
[
idx
] = 0;

1857  
ps
;

1858 
	}
}

1860 
	$¥odu˚_scheme_de°roy
(
¥odu˚_scheme
 *
ps
)

1862 
j
;

1863 i‡(
ps
->
k˝s
) {

1864 
j
 = 0; j < 
PRODUCE_KEY_CACHE_POOL_COUNT
; j ++) {

1865 
key_ˇche_¨øy
 **
k˝
 = 
	`d¨øy_p›
(
ps
->
k˝s
);

1866 i‡(*
k˝
)
	`key_ˇche_¨øy_de°roy
(*kcp);

1868 
	`d¨øy_de°roy
(
ps
->
k˝s
);

1871 
	`‰ì
(
ps
->
hô_øtio_¨øy
);

1873 
	`‰ì
(
ps
);

1874 
	}
}

1876 
	$gë_k˝_idx
(
ty≥
)

1878 
idx
;

1880 
ty≥
)

1882 
TEST_CMD_TYPE_STRING
:

1883 
idx
 = 0;

1886 
TEST_CMD_TYPE_LIST
:

1887 
idx
 = 1;

1890 
TEST_CMD_TYPE_SET
:

1891 
idx
 = 2;

1894 
TEST_CMD_TYPE_ZSET
:

1895 
idx
 = 3;

1898 
TEST_CMD_TYPE_HASH
:

1899 
idx
 = 4;

1903 
idx
 = -1;

1907  
idx
;

1908 
	}
}

1910 
	$£t_n⁄_em±y_k˝s_idx
()

1912 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_STRING
) {

1913 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1914 
	`gë_k˝_idx
(
TEST_CMD_TYPE_STRING
);

1916 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_LIST
) {

1917 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1918 
	`gë_k˝_idx
(
TEST_CMD_TYPE_LIST
);

1920 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_SET
) {

1921 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1922 
	`gë_k˝_idx
(
TEST_CMD_TYPE_SET
);

1924 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_ZSET
) {

1925 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1926 
	`gë_k˝_idx
(
TEST_CMD_TYPE_ZSET
);

1928 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_HASH
) {

1929 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1930 
	`gë_k˝_idx
(
TEST_CMD_TYPE_HASH
);

1932 
	}
}

1935 
key_ˇche_¨øy
 *
	$k˝_gë_‰om_ps
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

1937 
idx
;

1938 
key_ˇche_¨øy
 **
k˝
;

1940 i‡(
ps
 =
NULL
 ||Ös->
k˝s
 =NULL || 
dp
 == NULL)  NULL;

1942 i‡(
dp
->
cmd_ty≥
 =
TEST_CMD_TYPE_KEY
) {

1943 i‡(
n⁄_em±y_k˝s_cou¡
==0) {

1944 
idx
 = -1;

1946 
idx
 = 
	`ønd
()%
n⁄_em±y_k˝s_cou¡
;

1947 
idx
 = 
n⁄_em±y_k˝s_idx
[idx];

1948 
	`ASSERT
(
idx
 >= 0);

1951 
idx
 = 
	`gë_k˝_idx
(
dp
->
cmd_ty≥
);

1954 i‡(
idx
 >
PRODUCE_KEY_CACHE_POOL_COUNT
 || idx < 0) {

1955  
NULL
;

1958 
k˝
 = 
	`d¨øy_gë
(
ps
->
k˝s
, 
idx
);

1960  *
k˝
;

1961 
	}
}

1963 
	$vπ_¥odu˚_thªads_öô
(
¥odu˚_thªads_cou¡
,

1964 
ˇched_keys
, 
hô_øtio
)

1966 
idx
;

1967 
	`d¨øy_öô
(&
¥odu˚_thªads
, 
¥odu˚_thªads_cou¡
, (
¥odu˚_thªad
));

1968 
¥odu˚_d©a_thªads_cou¡
 = 
¥odu˚_thªads_cou¡
;

1969 
idx
 = 0; idx < 
¥odu˚_thªads_cou¡
; idx ++) {

1970 
¥odu˚_thªad
 *
±
 = 
	`d¨øy_push
(&
¥odu˚_thªads
);

1971 
±
->
id
 = 
idx
;

1972 
±
->
thªad_id
 = 0;

1973 
±
->
ps
 = 
	`¥odu˚_scheme_¸óã
(
ˇched_keys
, 
hô_øtio
);

1974 
±
->
∑u£
 = 0;

1975 
±
->
lo›times
 = 0;

1978  
VRT_OK
;

1979 
	}
}

1981 
	$vπ_¥odu˚_thªads_deöô
()

1983 
¥odu˚_thªad
 *
±
;

1984 
	`d¨øy_n
(&
¥odu˚_thªads
) > 0) {

1985 
±
 = 
	`d¨øy_p›
(&
¥odu˚_thªads
);

1986 i‡(
±
->
ps
) {

1987 
	`¥odu˚_scheme_de°roy
(
±
->
ps
);

1988 
±
->
ps
 = 
NULL
;

1991 
	`d¨øy_deöô
(&
¥odu˚_thªads
);

1992 
	}
}

1994 *
	$vπ_¥odu˚_thªad_run
(*
¨gs
)

1996 
ªt
;

1997 
¥odu˚_thªad
 *
±
 = 
¨gs
;

1998 
idx
, 
j
;

1999 
d©a_¥odu˚r
 **
dp
;

2000 
d©a_unô
 *
du
;

2002 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

2006 i‡(
±
->
∑u£
) {

2007 
	`u¶ìp
(1000000);

2008 i‡(!
	`ã°_if_√ed_∑u£
()) {

2009 
±
->
∑u£
 = 0;

2013 } i‡(
±
->
lo›times
%10000 == 0) {

2014 i‡(
	`ã°_if_√ed_∑u£
()) {

2015 
±
->
∑u£
 = 1;

2016 
	`⁄e_¥odu˚_thªad_∑u£d
();

2021 
idx
 = 
	`ønd
()%
√eded_cmd_ty≥_¥odu˚r_cou¡
;

2022 
dp
 = 
	`d¨øy_gë
(&
√eded_cmd_ty≥_¥odu˚r
,
idx
);

2023 
du
 = (*
dp
)->
	`¥oc
(*dp,
±
->
ps
);

2025 
du
->
d©a
 = 
±
->
ps
;

2028 
ªt
 = 
	`d©a_di•©ch
(
du
);

2029 i‡(
ªt
 == -1) {

2030 
	`d©a_unô_put
(
du
);

2031 } i‡(
ªt
 == 1) {

2032 
	`u¶ìp
(100000);

2035 
±
->
lo›times
 ++;

2038  
NULL
;

2039 
	}
}

2041 
	$add_to_√eded_cmd_ty≥_¥odu˚r
(
d©a_¥odu˚r
 *
dp
)

2043 
d©a_¥odu˚r
 **
dp_ñem
 = 
	`d¨øy_push
(&
√eded_cmd_ty≥_¥odu˚r
);

2045 *
dp_ñem
 = 
dp
;

2046 
√eded_cmd_ty≥_¥odu˚r_cou¡
 ++;

2048  
VRT_OK
;

2049 
	}
}

2051 
	$vπ_¥odu˚_d©a_öô
(
key_Àngth_ønge_mö
,
key_Àngth_ønge_max
,

2052 
°rög_max_Àngth
,
fõlds_max_cou¡
,

2053 
¥odu˚_cmd_ty≥s
,
d¨øy
 *
¥odu˚_cmd_bœckli°
,d¨øy *
¥odu˚_cmd_whôñi°
,

2054 
¥odu˚_thªads_cou¡
,
ˇched_keys
,

2055 
hô_øtio
)

2057 
j
, 
k
;

2059 
key_Àngth_mö
 = 
key_Àngth_ønge_mö
;

2060 
key_Àngth_max
 = 
key_Àngth_ønge_max
;

2061 i‡(
key_Àngth_max
 < 
key_Àngth_mö
Ë 
VRT_ERROR
;

2062 
key_Àngth_ønge_g≠
 = 
key_Àngth_max
-
key_Àngth_mö
;

2063 
fõld_Àngth_max
 = 
fõlds_max_cou¡
;

2064 
°rög_Àngth_max
 = 
°rög_max_Àngth
;

2065 
cmd_ty≥
 = 
¥odu˚_cmd_ty≥s
;

2066 
	`d¨øy_öô
(&
√eded_cmd_ty≥_¥odu˚r
, 100, (
d©a_¥odu˚r
*));

2068 
¥odu˚rs_cou¡
 = (
ªdis_d©a_¥odu˚r_èbÀ
)/(
d©a_¥odu˚r
);

2069 
j
 = 0; j < 
¥odu˚rs_cou¡
; j++) {

2070 
d©a_¥odu˚r
 *
dp
 = 
ªdis_d©a_¥odu˚r_èbÀ
+
j
;

2071 *
f
 = 
dp
->
sÊags
;

2073 *
f
 != '\0') {

2074 *
f
) {

2075 'w': 
dp
->
Êags
 |
PRO_WRITE
; ;

2076 'r': 
dp
->
Êags
 |
PRO_READONLY
; ;

2077 'm': 
dp
->
Êags
 |
PRO_DENYOOM
; ;

2078 'a': 
dp
->
Êags
 |
PRO_ADMIN
; ;

2079 'p': 
dp
->
Êags
 |
PRO_PUBSUB
; ;

2080 's': 
dp
->
Êags
 |
PRO_NOSCRIPT
; ;

2081 'R': 
dp
->
Êags
 |
PRO_RANDOM
; ;

2082 'S': 
dp
->
Êags
 |
PRO_SORT_FOR_SCRIPT
; ;

2083 'l': 
dp
->
Êags
 |
PRO_LOADING
; ;

2084 't': 
dp
->
Êags
 |
PRO_STALE
; ;

2085 'M': 
dp
->
Êags
 |
PRO_SKIP_MONITOR
; ;

2086 'k': 
dp
->
Êags
 |
PRO_ASKING
; ;

2087 'F': 
dp
->
Êags
 |
PRO_FAST
; ;

2088 'A': 
dp
->
Êags
 |
PRO_ADD
; ;

2089 :  
VRT_ERROR
;

2091 
f
++;

2094 i‡(
dñëe_d©a_¥odu˚r
 =
NULL
 &&

2095 !
	`°rcmp
(
dp
->
«me
,"del")) {

2096 
dñëe_d©a_¥odu˚r
 = 
dp
;

2099 i‡(
¥odu˚_cmd_whôñi°
 !
NULL
) {

2100 
k
 = 0; k < 
	`d¨øy_n
(
¥odu˚_cmd_whôñi°
); k ++) {

2101 
sds
 *
cmd«me
 = 
	`d¨øy_gë
(
¥odu˚_cmd_whôñi°
, 
k
);

2102 i‡(!
	`°rˇ£cmp
(
dp
->
«me
,*
cmd«me
)) {

2103 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2111 i‡(
¥odu˚_cmd_bœckli°
 !
NULL
) {

2112 
is_ö_bœckli°
 = 0;

2113 
k
 = 0; k < 
	`d¨øy_n
(
¥odu˚_cmd_bœckli°
); k ++) {

2114 
sds
 *
cmd«me
 = 
	`d¨øy_gë
(
¥odu˚_cmd_bœckli°
, 
k
);

2115 i‡(!
	`°rˇ£cmp
(
dp
->
«me
,*
cmd«me
)) {

2116 
is_ö_bœckli°
 = 1;

2121 i‡(
is_ö_bœckli°
) {

2127 i‡(
dp
->
cmd_ty≥
&cmd_type) {

2128 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2130 i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_EXPIRE
 && 
expúe_íabÀd
) {

2131 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2135 
	`£t_n⁄_em±y_k˝s_idx
();

2137 i‡(
	`d¨øy_n
(&
√eded_cmd_ty≥_¥odu˚r
) == 0) {

2138 
	`log_îr‹
("No commandÇeedÅoÅest");

2139  
VRT_ERROR
;

2142 i‡(
dñëe_d©a_¥odu˚r
 =
NULL
) {

2143  
VRT_ERROR
;

2146 i‡(
√eded_cmd_ty≥_¥odu˚r_cou¡
 == 0) {

2147  
VRT_ERROR
;

2150 
j
 = 0; j < 
√eded_cmd_ty≥_¥odu˚r_cou¡
; j ++) {

2151 
d©a_¥odu˚r
 **
dp_ñem
 = 
	`d¨øy_gë
(&
√eded_cmd_ty≥_¥odu˚r
,
j
);

2152 
	`log_debug
(
LOG_INFO
, "√ededÅe° comm™d[%d]: %s", 
j
, (*
dp_ñem
)->
«me
);

2155 
	`vπ_¥odu˚_thªads_öô
(
¥odu˚_thªads_cou¡
, 
ˇched_keys
, 
hô_øtio
);

2157  
VRT_OK
;

2158 
	}
}

2160 
	$vπ_¥odu˚_d©a_deöô
()

2162 
	`vπ_¥odu˚_thªads_deöô
();

2164 
√eded_cmd_ty≥_¥odu˚r
.
√Àm
 = 0;

2165 
	`d¨øy_deöô
(&
√eded_cmd_ty≥_¥odu˚r
);

2166 
	}
}

2168 
	$vπ_°¨t_¥odu˚_d©a
()

2170 
i
;

2171 
i
 = 0; i < 
	`d¨øy_n
(&
¥odu˚_thªads
); i ++) {

2172 
±hªad_©å_t
 
©å
;

2173 
¥odu˚_thªad
 *
±
;

2174 
	`±hªad_©å_öô
(&
©å
);

2175 
±
 = 
	`d¨øy_gë
(&
¥odu˚_thªads
, 
i
);

2176 
	`±hªad_¸óã
(&
±
->
thªad_id
,

2177 &
©å
, 
vπ_¥odu˚_thªad_run
, 
±
);

2180 
œ°_ã°_begö_time
 = 
	`vπ_£c_now
();

2181  
VRT_OK
;

2182 
	}
}

2184 
	$vπ_waô_¥odu˚_d©a
()

2186 
i
;

2188 
i
 = 0; i < 
	`d¨øy_n
(&
¥odu˚_thªads
); i ++){

2189 
¥odu˚_thªad
 *
±
 = 
	`d¨øy_gë
(&
¥odu˚_thªads
, 
i
);

2190 
	`±hªad_joö
(
±
->
thªad_id
, 
NULL
);

2193  
VRT_OK
;

2194 
	}
}

2202 *
	$gë_keys_usög_d©a_¥odu˚r_èbÀ
(
d©a_¥odu˚r
 *
dp
,
sds
 *
¨gv
, 
¨gc
, *
numkeys
) {

2203 
j
, 
i
 = 0, 
œ°
, *
keys
;

2205 i‡(
dp
->
fú°key
 == 0) {

2206 *
numkeys
 = 0;

2207  
NULL
;

2209 
œ°
 = 
dp
->
œ°key
;

2210 i‡(
œ°
 < 0Ëœ° = 
¨gc
+last;

2211 
keys
 = 
	`mÆloc
(()*((
œ°
 - 
dp
->
fú°key
)+1));

2212 
j
 = 
dp
->
fú°key
; j <
œ°
; j +dp->
key°ï
) {

2213 
keys
[
i
++] = 
j
;

2215 *
numkeys
 = 
i
;

2216  
keys
;

2217 
	}
}

2230 *
	$gë_keys_‰om_d©a_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
sds
 *
¨gv
, 
¨gc
, *
numkeys
) {

2231 i‡(
dp
->
gëkeys_¥oc
) {

2232  
dp
->
	`gëkeys_¥oc
(dp,
¨gv
,
¨gc
,
numkeys
);

2234  
	`gë_keys_usög_d©a_¥odu˚r_èbÀ
(
dp
,
¨gv
,
¨gc
,
numkeys
);

2236 
	}
}

2238 
sds
 
	$gë_⁄e_key_‰om_d©a_unô
(
d©a_unô
 *
du
)

2240 
numkeys
;

2241 *
keyödex
;

2242 
sds
 
key
;

2244 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
,du->
¨gv
,du->
¨gc
,&
numkeys
);

2245 i‡(
numkeys
 <= 0) {

2246 
	`NOT_REACHED
();

2247  
NULL
;

2250 
key
 = 
du
->
¨gv
[
keyödex
[0]];

2251 
	`‰ì
(
keyödex
);

2253  
key
;

2254 
	}
}

2256 
	$¥öt_¥odu˚r_comm™d
(
d©a_unô
 *
du
)

2258 
j
;

2259 
sds
 
cmd
 = 
	`sd£m±y
();

2261 
j
 = 0; j < 
du
->
¨gc
; j ++) {

2262 
cmd
 = 
	`sdsˇtsds
(cmd,
du
->
¨gv
[
j
]);

2263 
cmd
 = 
	`sdsˇt
(cmd," ");

2265 
cmd
 = 
	`sdsˇt
(cmd,"\n");

2266 
	`log_wrôe_Àn
(
cmd
,
	`sd¶í
(cmd));

2267 
	`sds‰ì
(
cmd
);

2268 
	}
}

	@tests/vrt_produce_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<as£π.h
>

9 
	~<m©h.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/ut¢ame.h
>

13 
	~<d•ecülc⁄fig.h
>

15 
	~<húedis.h
>

16 
	~<d¨øy.h
>

17 
	~<dutû.h
>

18 
	~<dlog.h
>

20 
	~<vπ_utû.h
>

21 
	~<vπ_public.h
>

22 
	~<vøbã°.h
>

23 
	~<vπ_¥odu˚_d©a.h
>

25 
	#PRODUCE_KEY_CACHE_POOL_COUNT
 5

	)

27 
	s¥odu˚_thªad
 {

28 
	mid
;

29 
±hªad_t
 
	mthªad_id
;

31 
¥odu˚_scheme
 *
	mps
;

33 
	m∑u£
;

34 
	mlo›times
;

35 } 
	t¥odu˚_thªad
;

37 
d©a_¥odu˚r
 *
	gdñëe_d©a_¥odu˚r
 = 
NULL
;

39 
	gkey_Àngth_mö
;

40 
	gkey_Àngth_max
;

41 
	gkey_Àngth_ønge_g≠
;

42 
	gfõld_Àngth_max
;

43 
	g°rög_Àngth_max
;

45 
	gcmd_ty≥
;

47 
	gkey_ˇche_poﬁs_cou¡
 = 0;

49 
d¨øy
 
	g√eded_cmd_ty≥_¥odu˚r
;

50 
	g√eded_cmd_ty≥_¥odu˚r_cou¡
;

52 
	g¥odu˚_d©a_thªads_cou¡
;

53 
d¨øy
 
	g¥odu˚_thªads
;

55 
	g¥odu˚_thªads_∑u£_föished_cou¡
;

57 
	gn⁄_em±y_k˝s_cou¡
 = 0;

58 
	gn⁄_em±y_k˝s_idx
[
PRODUCE_KEY_CACHE_POOL_COUNT
] = {-1};

60 
sds
 
	$gë_øndom_ˇched_key
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

62 
key_ˇche_¨øy
 *
k˝
 = 
	`k˝_gë_‰om_ps
(
ps
,
dp
);

63  
	`key_ˇche_¨øy_øndom
(
k˝
);

64 
	}
}

66 
	$gë_øndom_öt
()

68 i‡(
	`ønd
()%2 == 1) {

69  0 - ()
	`ønd
();

71  ()
	`ønd
();

73 
	}
}

75 
	$gë_øndom_unsig√d_öt
()

77  ()
	`ønd
();

78 
	}
}

80 
	$gë_øndom_ch¨
()

82  ()
	`ønd
()%250 + 5;

84 
	}
}

86 
sds
 
	$gë_øndom_key
()

88 
i
, 
Àn
;

89 
sds
 
°r
 = 
	`sd£m±y
();

91 
Àn
 = 
key_Àngth_ønge_g≠
==0?
key_Àngth_mö
:

92 (
	`gë_øndom_unsig√d_öt
()%
key_Àngth_ønge_g≠
+
key_Àngth_mö
);

93 i‡(
Àn
 == 0)Üen ++;

94 
°r
 = 
	`sdsMakeRoomF‹
(°r,(
size_t
)
Àn
);

95 
	`sdsIn¸Lí
(
°r
, ()
Àn
);

97 
i
 = 0; i < 
Àn
; i ++) {

98 
°r
[
i
] = ()
	`gë_øndom_ch¨
();

101  
°r
;

102 
	}
}

104 
sds
 
	$gë_øndom_°rög
()

106 
i
, 
Àn
;

107 
sds
 
°r
 = 
	`sd£m±y
();

109 
Àn
 = 
	`gë_øndom_unsig√d_öt
()%
°rög_Àngth_max
;

110 
°r
 = 
	`sdsMakeRoomF‹
(°r,(
size_t
)
Àn
);

111 
	`sdsIn¸Lí
(
°r
, ()
Àn
);

113 
i
 = 0; i < 
Àn
; i ++) {

114 
°r
[
i
] = 
	`gë_øndom_ch¨
();

117  
°r
;

118 
	}
}

120 
sds
 
	$gë_øndom_Êﬂt_°r
()

122 
decimÆ_Àn
;

123 
sds
 
°r
;

125 i‡(
	`ønd
()%2 == 1) {

126 
°r
 = 
	`sd¢ew
("-");

128 
°r
 = 
	`sd£m±y
();

131 i‡(
	`ønd
()%2 == 1) {

132 
°r
 = 
	`sdsˇtfmt
(str,"%u.%u",

133 
	`gë_øndom_unsig√d_öt
(),

134 
	`gë_øndom_unsig√d_öt
());

136 
°r
 = 
	`sdsˇtfmt
(str,"%u",

137 
	`gë_øndom_unsig√d_öt
());

140  
°r
;

141 
	}
}

143 
	#ZSET_RANGE_MIN_MAX_TYPE_RANK
 0

	)

144 
	#ZSET_RANGE_MIN_MAX_TYPE_SCORE
 1

	)

145 
	#ZSET_RANGE_MIN_MAX_TYPE_LEX
 2

	)

146 
sds
 *
	$gë_øndom_z£t_ønge_mö_max_°r
(
ønge_ty≥
)

148 
sds
 *
ønge
;

149 
¥obabûôy
 = 
	`ønd
()%100;

151 
ønge
 = 
	`mÆloc
(2*(
sds
));

152 i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_RANK
) {

153 
mö
 = 
	`gë_øndom_unsig√d_öt
();

154 
max
 = 
	`gë_øndom_unsig√d_öt
();

156 i‡(
¥obabûôy
 >95 && 
mö
 <
max
 ||

157 
¥obabûôy
 < 95 && 
mö
 > 
max
) {

158 
ønge
[0] = 
	`sds‰oml⁄gl⁄g
(()
max
);

159 
ønge
[1] = 
	`sds‰oml⁄gl⁄g
(()
mö
);

161 
ønge
[0] = 
	`sds‰oml⁄gl⁄g
(()
mö
);

162 
ønge
[1] = 
	`sds‰oml⁄gl⁄g
(()
max
);

164 } i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_SCORE
) {

165 
sds
 
mö_°r
 = 
	`gë_øndom_Êﬂt_°r
();

166 
sds
 
max_°r
 = 
	`gë_øndom_Êﬂt_°r
();

167 
mö
, 
max
;

168 *
ïå
;

169 
sds
 
sw≠
;

170 
mö_¥obabûôy
 = 
	`ønd
()%3;

171 
max_¥obabûôy
 = 
	`ønd
()%3;

173 
mö
 = 
	`°πod
(
mö_°r
,&
ïå
);

174 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
mö
)) {

175 
	`sds‰ì
(
mö_°r
);

176 
	`sds‰ì
(
max_°r
);

177 
	`‰ì
(
ønge
);

178  
NULL
;

180 
max
 = 
	`°πod
(
max_°r
,&
ïå
);

181 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
max
)) {

182 
	`sds‰ì
(
mö_°r
);

183 
	`sds‰ì
(
max_°r
);

184 
	`‰ì
(
ønge
);

185  
NULL
;

187 i‡(
¥obabûôy
 >95 && 
mö
 <
max
 ||

188 
¥obabûôy
 < 95 && 
mö
 > 
max
) {

189 
sw≠
 = 
mö_°r
;

190 
mö_°r
 = 
max_°r
;

191 
max_°r
 = 
sw≠
;

194 i‡(
mö_¥obabûôy
 == 0) {

195 
ønge
[0] = 
	`sd¢ew
("-inf");

196 } i‡(
mö_¥obabûôy
 == 1) {

197 
ønge
[0] = 
	`sd¢ew
("(");

198 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

199 
	`sds‰ì
(
mö_°r
);

201 
ønge
[0] = 
mö_°r
;

203 i‡(
max_¥obabûôy
 == 0) {

204 
ønge
[1] = 
	`sd¢ew
("+inf");

205 } i‡(
max_¥obabûôy
 == 1) {

206 
ønge
[1] = 
	`sd¢ew
("(");

207 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

208 
	`sds‰ì
(
max_°r
);

210 
ønge
[1] = 
max_°r
;

212 } i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_LEX
) {

213 
sds
 
mö_°r
 = 
	`gë_øndom_°rög
();

214 
sds
 
max_°r
 = 
	`gë_øndom_°rög
();

215 
sds
 
sw≠
;

216 
mö_¥obabûôy
 = 
	`ønd
()%3;

217 
max_¥obabûôy
 = 
	`ønd
()%3;

219 i‡(
¥obabûôy
 >95 && 
	`sdscmp
(
mö_°r
,
max_°r
) < 0 ||

220 
¥obabûôy
 < 95 && 
	`sdscmp
(
mö_°r
,
max_°r
) > 0) {

221 
sw≠
 = 
mö_°r
;

222 
mö_°r
 = 
max_°r
;

223 
max_°r
 = 
sw≠
;

226 i‡(
mö_¥obabûôy
 == 0) {

227 
ønge
[0] = 
	`sd¢ew
("-");

228 } i‡(
mö_¥obabûôy
 == 1) {

229 
ønge
[0] = 
	`sd¢ew
("(");

230 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

231 
	`sds‰ì
(
mö_°r
);

233 
ønge
[0] = 
	`sd¢ew
("[");

234 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

235 
	`sds‰ì
(
mö_°r
);

237 i‡(
max_¥obabûôy
 == 0) {

238 
ønge
[1] = 
	`sd¢ew
("+");

239 } i‡(
max_¥obabûôy
 == 1) {

240 
ønge
[1] = 
	`sd¢ew
("(");

241 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

242 
	`sds‰ì
(
max_°r
);

244 
ønge
[1] = 
	`sd¢ew
("[");

245 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

246 
	`sds‰ì
(
max_°r
);

249 
	`‰ì
(
ønge
);

250 
ønge
 = 
NULL
;

253  
ønge
;

254 
	}
}

256 
	$gë_øndom_fõld_Àn
()

258  
	`gë_øndom_unsig√d_öt
()%
fõld_Àngth_max
 + 1;

259 
	}
}

261 
sds
 
	$gë_øndom_key_wôh_hô_øtio
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

263 
sds
 
key
;

264 i‡(
ps
->
hô_øtio_¨øy
[ps->
hô_øtio_idx
++] == 0) {

265 
key
 = 
	`gë_øndom_key
();

267 
key
 = 
	`gë_øndom_ˇched_key
(
ps
,
dp
);

268 i‡(
key
 =
NULL
Ëkey = 
	`gë_øndom_key
();

270 i‡(
ps
->
hô_øtio_idx
 >ps->
hô_øtio_¨øy_Àn
) {

271 
ps
->
hô_øtio_idx
 = 0;

273  
key
;

274 
	}
}

277 
	$nck_whí_n€º‹
(
ªdisRïly
 *
ª∂y
)

279 i‡(
ª∂y
 =
NULL
)  0;

281 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ERROR
) {

286 
	}
}

288 
	$nck_whí_ok
(
ªdisRïly
 *
ª∂y
)

290 i‡(
ª∂y
 =
NULL
)  0;

292 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_STATUS
 &&

293 !
	`°rcmp
(
ª∂y
->
°r
, "OK")) {

298 
	}
}

300 
	$nck_whí_°r
(
ªdisRïly
 *
ª∂y
)

302 i‡(
ª∂y
 =
NULL
)  0;

304 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_STRING
) {

309 
	}
}

311 
	$nck_whí_unsig√d_öãgî
(
ªdisRïly
 *
ª∂y
)

313 i‡(
ª∂y
 =
NULL
)  0;

315 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

316 
ª∂y
->
öãgî
 >= 0) {

321 
	}
}

323 
	$nck_whí_n⁄zîo_unsig√d_öãgî
(
ªdisRïly
 *
ª∂y
)

325 i‡(
ª∂y
 =
NULL
)  0;

327 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

328 
ª∂y
->
öãgî
 > 0) {

333 
	}
}

335 
	$nck_whí_zîo_‹_⁄e
(
ªdisRïly
 *
ª∂y
)

337 i‡(
ª∂y
 =
NULL
)  0;

339 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

340 (
ª∂y
->
öãgî
 == 0 ||Ñeply->integer == 1)) {

345 
	}
}

347 
	$nck_whí_⁄e
(
ªdisRïly
 *
ª∂y
)

349 i‡(
ª∂y
 =
NULL
)  0;

351 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

352 
ª∂y
->
öãgî
 == 1) {

357 
	}
}

361 
d©a_unô
 *
	$gë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

363 
d©a_unô
 *
du
;

365 
du
 = 
	`d©a_unô_gë
();

366 
du
->
dp
 = dp;

367 
du
->
¨gc
 = 2;

368 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

369 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

370 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

372  
du
;

373 
	}
}

375 
d©a_unô
 *
	$£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

377 
d©a_unô
 *
du
;

379 
du
 = 
	`d©a_unô_gë
();

380 
du
->
dp
 = dp;

381 
du
->
¨gc
 = 3;

382 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

383 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

384 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

385 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

387  
du
;

388 
	}
}

390 
d©a_unô
 *
	$£äx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

392 
d©a_unô
 *
du
;

394 
du
 = 
	`d©a_unô_gë
();

395 
du
->
dp
 = dp;

396 
du
->
¨gc
 = 3;

397 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

398 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

399 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

400 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

402  
du
;

403 
	}
}

406 
	$£äx_cmd_nck
(
ªdisRïly
 *
ª∂y
)

408 i‡(
ª∂y
 =
NULL
)  0;

410 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

411 
ª∂y
->
öãgî
 == 1) {

416 
	}
}

418 
d©a_unô
 *
	$£ãx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

420 
d©a_unô
 *
du
;

422 
du
 = 
	`d©a_unô_gë
();

423 
du
->
dp
 = dp;

424 
du
->
¨gc
 = 4;

425 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

426 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

427 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

428 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

429 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

431  
du
;

432 
	}
}

434 
d©a_unô
 *
	$p£ãx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

436 
d©a_unô
 *
du
;

438 
du
 = 
	`d©a_unô_gë
();

439 
du
->
dp
 = dp;

440 
du
->
¨gc
 = 4;

441 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

442 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

443 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

444 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

445 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

447  
du
;

448 
	}
}

450 
d©a_unô
 *
	$dñ_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

452 
d©a_unô
 *
du
;

454 
du
 = 
	`d©a_unô_gë
();

455 
du
->
dp
 = dp;

456 
du
->
¨gc
 = 2;

457 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

458 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

459 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

461  
du
;

462 
	}
}

464 
d©a_unô
 *
	$expúe_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

466 
d©a_unô
 *
du
;

468 
du
 = 
	`d©a_unô_gë
();

469 
du
->
dp
 = dp;

470 
du
->
¨gc
 = 3;

471 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

472 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

473 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

474 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

476  
du
;

477 
	}
}

479 
d©a_unô
 *
	$expúót_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

481 
d©a_unô
 *
du
;

483 
du
 = 
	`d©a_unô_gë
();

484 
du
->
dp
 = dp;

485 
du
->
¨gc
 = 3;

486 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

487 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

488 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

489 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`vπ_m£c_now
()/1000LL+
	`ønd
()%10000);

491  
du
;

492 
	}
}

494 
d©a_unô
 *
	$exi°s_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

496 
d©a_unô
 *
du
;

498 
du
 = 
	`d©a_unô_gë
();

499 
du
->
dp
 = dp;

500 
du
->
¨gc
 = 2;

501 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

502 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

503 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

505  
du
;

506 
	}
}

508 
d©a_unô
 *
	$âl_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

510 
d©a_unô
 *
du
;

512 
du
 = 
	`d©a_unô_gë
();

513 
du
->
dp
 = dp;

514 
du
->
¨gc
 = 2;

515 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

516 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

517 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

519  
du
;

520 
	}
}

522 
d©a_unô
 *
	$±é_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

524 
d©a_unô
 *
du
;

526 
du
 = 
	`d©a_unô_gë
();

527 
du
->
dp
 = dp;

528 
du
->
¨gc
 = 2;

529 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

530 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

531 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

533  
du
;

534 
	}
}

536 
d©a_unô
 *
	$ö¸_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

538 
d©a_unô
 *
du
;

540 
du
 = 
	`d©a_unô_gë
();

541 
du
->
dp
 = dp;

542 
du
->
¨gc
 = 2;

543 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

544 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

545 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

547  
du
;

548 
	}
}

550 
d©a_unô
 *
	$de¸_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

552 
d©a_unô
 *
du
;

554 
du
 = 
	`d©a_unô_gë
();

555 
du
->
dp
 = dp;

556 
du
->
¨gc
 = 2;

557 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

558 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

559 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

561  
du
;

562 
	}
}

564 
d©a_unô
 *
	$ö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

566 
d©a_unô
 *
du
;

568 
du
 = 
	`d©a_unô_gë
();

569 
du
->
dp
 = dp;

570 
du
->
¨gc
 = 3;

571 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

572 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

573 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

574 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

576  
du
;

577 
	}
}

579 
d©a_unô
 *
	$de¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

581 
d©a_unô
 *
du
;

583 
du
 = 
	`d©a_unô_gë
();

584 
du
->
dp
 = dp;

585 
du
->
¨gc
 = 3;

586 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

587 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

588 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

589 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

591  
du
;

592 
	}
}

594 
d©a_unô
 *
	$≠≥nd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

596 
d©a_unô
 *
du
;

598 
du
 = 
	`d©a_unô_gë
();

599 
du
->
dp
 = dp;

600 
du
->
¨gc
 = 3;

601 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

602 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

603 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

604 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

606  
du
;

607 
	}
}

610 
	$≠≥nd_cmd_nck
(
ªdisRïly
 *
ª∂y
)

612 i‡(
ª∂y
 =
NULL
)  0;

614 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

619 
	}
}

621 
d©a_unô
 *
	$°æí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

623 
d©a_unô
 *
du
;

625 
du
 = 
	`d©a_unô_gë
();

626 
du
->
dp
 = dp;

627 
du
->
¨gc
 = 2;

628 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

629 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

630 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

632  
du
;

633 
	}
}

635 
d©a_unô
 *
	$gë£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

637 
d©a_unô
 *
du
;

639 
du
 = 
	`d©a_unô_gë
();

640 
du
->
dp
 = dp;

641 
du
->
¨gc
 = 3;

642 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

643 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

644 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

645 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

647  
du
;

648 
	}
}

650 
d©a_unô
 *
	$ö¸byÊﬂt_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

652 
d©a_unô
 *
du
;

654 
du
 = 
	`d©a_unô_gë
();

655 
du
->
dp
 = dp;

656 
du
->
¨gc
 = 3;

657 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

658 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

659 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

660 
du
->
¨gv
[2] = 
	`gë_øndom_Êﬂt_°r
();

662  
du
;

663 
	}
}

665 
d©a_unô
 *
	$£tbô_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

667 
d©a_unô
 *
du
;

669 
du
 = 
	`d©a_unô_gë
();

670 
du
->
dp
 = dp;

671 
du
->
¨gc
 = 4;

672 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

673 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

674 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

675 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

676 i‡(
	`ønd
()%2) {

677 
du
->
¨gv
[3] = 
	`sd¢ew
("1");

679 
du
->
¨gv
[3] = 
	`sd¢ew
("0");

682  
du
;

683 
	}
}

685 
d©a_unô
 *
	$gëbô_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

687 
d©a_unô
 *
du
;

689 
du
 = 
	`d©a_unô_gë
();

690 
du
->
dp
 = dp;

691 
du
->
¨gc
 = 3;

692 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

693 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

694 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

695 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

697  
du
;

698 
	}
}

700 
d©a_unô
 *
	$£å™ge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

702 
d©a_unô
 *
du
;

704 
du
 = 
	`d©a_unô_gë
();

705 
du
->
dp
 = dp;

706 
du
->
¨gc
 = 4;

707 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

708 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

709 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

710 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

711 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

713  
du
;

714 
	}
}

716 
d©a_unô
 *
	$gëønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

718 
d©a_unô
 *
du
;

720 
du
 = 
	`d©a_unô_gë
();

721 
du
->
dp
 = dp;

722 
du
->
¨gc
 = 4;

723 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

724 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

725 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

726 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

727 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

729  
du
;

730 
	}
}

732 
d©a_unô
 *
	$bôcou¡_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

734 
d©a_unô
 *
du
;

735 
wôh_ønge
 = 0;

737 i‡(
	`ønd
()%2)

738 
wôh_ønge
 = 1;

740 
du
 = 
	`d©a_unô_gë
();

741 
du
->
dp
 = dp;

742 
du
->
¨gc
 = 
wôh_ønge
?4:2;

743 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

744 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

745 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

746 i‡(
wôh_ønge
) {

747 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

748 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

750  
du
;

751 
	}
}

753 
d©a_unô
 *
	$bôpos_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

755 
d©a_unô
 *
du
;

756 
wôh_ønge
 = 0;

757 
¥obabûôy
 = 
	`ønd
()%3;

759 i‡(
¥obabûôy
 == 0)

760 
wôh_ønge
 = 0;

761 i‡(
¥obabûôy
 == 1)

762 
wôh_ønge
 = 1;

763 i‡(
¥obabûôy
 == 2)

764 
wôh_ønge
 = 2;

766 
du
 = 
	`d©a_unô_gë
();

767 
du
->
dp
 = dp;

768 
du
->
¨gc
 = 
wôh_ønge
==0?3:(with_range==1?4:5);

769 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

770 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

771 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

772 i‡(
	`ønd
()%2)

773 
du
->
¨gv
[2] = 
	`sd¢ew
("0");

775 
du
->
¨gv
[2] = 
	`sd¢ew
("1");

776 i‡(
wôh_ønge
 > 0)

777 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

778 i‡(
wôh_ønge
 == 2)

779 
du
->
¨gv
[4] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

781  
du
;

782 
	}
}

784 
d©a_unô
 *
	$mgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

786 
d©a_unô
 *
du
;

788 
du
 = 
	`d©a_unô_gë
();

789 
du
->
dp
 = dp;

790 
du
->
¨gc
 = 2;

791 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

792 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

793 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

795  
du
;

796 
	}
}

798 
d©a_unô
 *
	$m£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

800 
d©a_unô
 *
du
;

802 
du
 = 
	`d©a_unô_gë
();

803 
du
->
dp
 = dp;

804 
du
->
¨gc
 = 3;

805 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

806 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

807 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

808 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

810  
du
;

811 
	}
}

813 
d©a_unô
 *
	$h£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

815 
d©a_unô
 *
du
;

817 
du
 = 
	`d©a_unô_gë
();

818 
du
->
dp
 = dp;

819 
du
->
¨gc
 = 4;

820 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

821 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

822 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

823 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

824 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

826  
du
;

827 
	}
}

829 
d©a_unô
 *
	$hgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

831 
d©a_unô
 *
du
;

833 
du
 = 
	`d©a_unô_gë
();

834 
du
->
dp
 = dp;

835 
du
->
¨gc
 = 3;

836 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

837 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

838 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

839 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

841  
du
;

842 
	}
}

844 
d©a_unô
 *
	$hÀn_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

846 
d©a_unô
 *
du
;

848 
du
 = 
	`d©a_unô_gë
();

849 
du
->
dp
 = dp;

850 
du
->
¨gc
 = 2;

851 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

852 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

853 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

855  
du
;

856 
	}
}

858 
d©a_unô
 *
	$hdñ_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

860 
d©a_unô
 *
du
;

861 
j
, 
fõld_Àngth
;

863 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

865 
du
 = 
	`d©a_unô_gë
();

866 
du
->
dp
 = dp;

867 
du
->
¨gc
 = 2 + 
fõld_Àngth
;

868 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

869 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

870 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

871 
j
 = 0; j < 
fõld_Àngth
; j ++) {

872 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

875  
du
;

876 
	}
}

878 
d©a_unô
 *
	$hexi°s_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

880 
d©a_unô
 *
du
;

882 
du
 = 
	`d©a_unô_gë
();

883 
du
->
dp
 = dp;

884 
du
->
¨gc
 = 3;

885 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

886 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

887 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

888 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

890  
du
;

891 
	}
}

893 
d©a_unô
 *
	$hkeys_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

895 
d©a_unô
 *
du
;

897 
du
 = 
	`d©a_unô_gë
();

898 
du
->
dp
 = dp;

899 
du
->
¨gc
 = 2;

900 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

901 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

902 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

904  
du
;

905 
	}
}

907 
d©a_unô
 *
	$hvÆs_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

909 
d©a_unô
 *
du
;

911 
du
 = 
	`d©a_unô_gë
();

912 
du
->
dp
 = dp;

913 
du
->
¨gc
 = 2;

914 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

915 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

916 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

918  
du
;

919 
	}
}

921 
d©a_unô
 *
	$hgëÆl_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

923 
d©a_unô
 *
du
;

925 
du
 = 
	`d©a_unô_gë
();

926 
du
->
dp
 = dp;

927 
du
->
¨gc
 = 2;

928 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

929 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

930 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

932  
du
;

933 
	}
}

935 
d©a_unô
 *
	$hö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

937 
d©a_unô
 *
du
;

939 
du
 = 
	`d©a_unô_gë
();

940 
du
->
dp
 = dp;

941 
du
->
¨gc
 = 4;

942 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

943 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

944 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

945 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

946 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
());

948  
du
;

949 
	}
}

951 
d©a_unô
 *
	$hö¸byÊﬂt_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

953 
d©a_unô
 *
du
;

955 
du
 = 
	`d©a_unô_gë
();

956 
du
->
dp
 = dp;

957 
du
->
¨gc
 = 4;

958 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

959 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

960 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

961 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

962 
du
->
¨gv
[3] = 
	`gë_øndom_Êﬂt_°r
();

964  
du
;

965 
	}
}

967 
d©a_unô
 *
	$hmgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

969 
d©a_unô
 *
du
;

970 
j
, 
fõld_Àngth
;

972 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

974 
du
 = 
	`d©a_unô_gë
();

975 
du
->
dp
 = dp;

976 
du
->
¨gc
 = 2+
fõld_Àngth
;

977 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

978 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

979 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

980 
j
 = 0; j < 
fõld_Àngth
; j ++) {

981 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

984  
du
;

985 
	}
}

987 
d©a_unô
 *
	$hm£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

989 
d©a_unô
 *
du
;

990 
j
, 
fõld_Àngth
;

992 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

994 
du
 = 
	`d©a_unô_gë
();

995 
du
->
dp
 = dp;

996 
du
->
¨gc
 = 2+
fõld_Àngth
*2;

997 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

998 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

999 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1000 
j
 = 2; j < 2+
fõld_Àngth
*2; j += 2) {

1001 
du
->
¨gv
[
j
] = 
	`gë_øndom_°rög
();

1002 
du
->
¨gv
[
j
+1] = 
	`gë_øndom_°rög
();

1005  
du
;

1006 
	}
}

1008 
d©a_unô
 *
	$h£äx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1010 
d©a_unô
 *
du
;

1012 
du
 = 
	`d©a_unô_gë
();

1013 
du
->
dp
 = dp;

1014 
du
->
¨gc
 = 4;

1015 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1016 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1017 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1018 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1019 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1021  
du
;

1022 
	}
}

1024 
d©a_unô
 *
	$h°æí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1026 
d©a_unô
 *
du
;

1028 
du
 = 
	`d©a_unô_gë
();

1029 
du
->
dp
 = dp;

1030 
du
->
¨gc
 = 3;

1031 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1032 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1033 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1034 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1036  
du
;

1037 
	}
}

1039 
d©a_unô
 *
	$Ωush_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1041 
d©a_unô
 *
du
;

1042 
j
, 
fõld_Àngth
;

1044 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1046 
du
 = 
	`d©a_unô_gë
();

1047 
du
->
dp
 = dp;

1048 
du
->
¨gc
 = 2+
fõld_Àngth
;

1049 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1050 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1051 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1052 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1053 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1056  
du
;

1057 
	}
}

1060 
	$Ωush_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1062 i‡(
ª∂y
 =
NULL
)  0;

1064 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1069 
	}
}

1071 
d©a_unô
 *
	$Õush_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1073 
d©a_unô
 *
du
;

1074 
j
, 
fõld_Àngth
;

1076 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1078 
du
 = 
	`d©a_unô_gë
();

1079 
du
->
dp
 = dp;

1080 
du
->
¨gc
 = 2+
fõld_Àngth
;

1081 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1082 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1083 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1085 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1086 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1089  
du
;

1090 
	}
}

1092 
d©a_unô
 *
	$Ã™ge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1094 
d©a_unô
 *
du
;

1096 
du
 = 
	`d©a_unô_gë
();

1097 
du
->
dp
 = dp;

1098 
du
->
¨gc
 = 4;

1099 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1100 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1101 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1102 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1103 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1105  
du
;

1106 
	}
}

1108 
d©a_unô
 *
	$Ω›_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1110 
d©a_unô
 *
du
;

1112 
du
 = 
	`d©a_unô_gë
();

1113 
du
->
dp
 = dp;

1114 
du
->
¨gc
 = 2;

1115 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1116 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1117 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1119  
du
;

1120 
	}
}

1122 
d©a_unô
 *
	$Õ›_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1124 
d©a_unô
 *
du
;

1126 
du
 = 
	`d©a_unô_gë
();

1127 
du
->
dp
 = dp;

1128 
du
->
¨gc
 = 2;

1129 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1130 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1131 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1133  
du
;

1134 
	}
}

1136 
d©a_unô
 *
	$Œí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1138 
d©a_unô
 *
du
;

1140 
du
 = 
	`d©a_unô_gë
();

1141 
du
->
dp
 = dp;

1142 
du
->
¨gc
 = 2;

1143 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1144 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1145 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1147  
du
;

1148 
	}
}

1150 
d©a_unô
 *
	$Ãem_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1152 
d©a_unô
 *
du
;

1154 
du
 = 
	`d©a_unô_gë
();

1155 
du
->
dp
 = dp;

1156 
du
->
¨gc
 = 4;

1157 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1158 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1159 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1160 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1161 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1163  
du
;

1164 
	}
}

1166 
d©a_unô
 *
	$…rim_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1168 
d©a_unô
 *
du
;

1170 
du
 = 
	`d©a_unô_gë
();

1171 
du
->
dp
 = dp;

1172 
du
->
¨gc
 = 4;

1173 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1174 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1175 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1176 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1177 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1179  
du
;

1180 
	}
}

1182 
d©a_unô
 *
	$lödex_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1184 
d©a_unô
 *
du
;

1186 
du
 = 
	`d©a_unô_gë
();

1187 
du
->
dp
 = dp;

1188 
du
->
¨gc
 = 3;

1189 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1190 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1191 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1192 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1194  
du
;

1195 
	}
}

1197 
d©a_unô
 *
	$l£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1199 
d©a_unô
 *
du
;

1201 
du
 = 
	`d©a_unô_gë
();

1202 
du
->
dp
 = dp;

1203 
du
->
¨gc
 = 4;

1204 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1205 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1206 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1207 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1208 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1210  
du
;

1211 
	}
}

1213 
d©a_unô
 *
	$ßdd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1215 
d©a_unô
 *
du
;

1216 
j
, 
fõld_Àngth
;

1218 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1220 
du
 = 
	`d©a_unô_gë
();

1221 
du
->
dp
 = dp;

1222 
du
->
¨gc
 = 2 + 
fõld_Àngth
;

1223 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1224 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1225 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1226 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1227 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1230  
du
;

1231 
	}
}

1233 
d©a_unô
 *
	$smembîs_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1235 
d©a_unô
 *
du
;

1237 
du
 = 
	`d©a_unô_gë
();

1238 
du
->
dp
 = dp;

1239 
du
->
¨gc
 = 2;

1240 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1241 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1242 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1244  
du
;

1245 
	}
}

1247 
d©a_unô
 *
	$sˇrd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1249 
d©a_unô
 *
du
;

1251 
du
 = 
	`d©a_unô_gë
();

1252 
du
->
dp
 = dp;

1253 
du
->
¨gc
 = 2;

1254 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1255 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1256 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1258  
du
;

1259 
	}
}

1261 
d©a_unô
 *
	$§em_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1263 
d©a_unô
 *
du
;

1264 
j
, 
fõld_Àngth
;

1266 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1268 
du
 = 
	`d©a_unô_gë
();

1269 
du
->
dp
 = dp;

1270 
du
->
¨gc
 = 2+
fõld_Àngth
;

1271 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1272 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1273 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1274 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1275 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1278  
du
;

1279 
	}
}

1281 
d©a_unô
 *
	$sismembî_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1283 
d©a_unô
 *
du
;

1285 
du
 = 
	`d©a_unô_gë
();

1286 
du
->
dp
 = dp;

1287 
du
->
¨gc
 = 3;

1288 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1289 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1290 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1291 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1293  
du
;

1294 
	}
}

1296 
d©a_unô
 *
	$suni⁄_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1298 
d©a_unô
 *
du
;

1300 
du
 = 
	`d©a_unô_gë
();

1301 
du
->
dp
 = dp;

1302 
du
->
¨gc
 = 2;

1303 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1304 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1305 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1307  
du
;

1308 
	}
}

1310 
d©a_unô
 *
	$sdiff_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1312 
d©a_unô
 *
du
;

1314 
du
 = 
	`d©a_unô_gë
();

1315 
du
->
dp
 = dp;

1316 
du
->
¨gc
 = 2;

1317 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1318 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1319 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1321  
du
;

1322 
	}
}

1324 
d©a_unô
 *
	$söãr_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1326 
d©a_unô
 *
du
;

1328 
du
 = 
	`d©a_unô_gë
();

1329 
du
->
dp
 = dp;

1330 
du
->
¨gc
 = 2;

1331 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1332 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1333 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1335  
du
;

1336 
	}
}

1339 
	$Õush_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1341 i‡(
ª∂y
 =
NULL
)  0;

1343 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1348 
	}
}

1350 
d©a_unô
 *
	$zadd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1352 
d©a_unô
 *
du
;

1353 
j
, 
fõld_Àngth
;

1355 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1357 
du
 = 
	`d©a_unô_gë
();

1358 
du
->
dp
 = dp;

1359 
du
->
¨gc
 = 2+
fõld_Àngth
*2;

1360 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1361 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1362 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1364 
j
 = 2; j < 2+
fõld_Àngth
*2; j += 2) {

1365 
du
->
¨gv
[
j
] = 
	`gë_øndom_Êﬂt_°r
();

1366 
du
->
¨gv
[
j
+1] = 
	`gë_øndom_°rög
();

1369  
du
;

1370 
	}
}

1373 
	$zadd_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1375 i‡(
ª∂y
 =
NULL
)  0;

1377 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1382 
	}
}

1384 
d©a_unô
 *
	$zö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1386 
d©a_unô
 *
du
;

1387 
j
, 
fõld_Àngth
;

1389 
du
 = 
	`d©a_unô_gë
();

1390 
du
->
dp
 = dp;

1391 
du
->
¨gc
 = 4;

1392 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1393 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1394 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1395 
du
->
¨gv
[2] = 
	`gë_øndom_Êﬂt_°r
();;

1396 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1398  
du
;

1399 
	}
}

1402 
	$zö¸by_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1404 i‡(
ª∂y
 =
NULL
)  0;

1406 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1411 
	}
}

1413 
d©a_unô
 *
	$zønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1415 
d©a_unô
 *
du
;

1416 
j
, 
fõld_Àngth
;

1417 
wôhsc‹es
;

1419 i‡(
	`ønd
()%2 == 1) {

1420 
wôhsc‹es
 = 1;

1422 
wôhsc‹es
 = 0;

1425 
du
 = 
	`d©a_unô_gë
();

1426 
du
->
dp
 = dp;

1427 
du
->
¨gc
 = 
wôhsc‹es
?5:4;

1428 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1429 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1430 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1431 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(0);

1432 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%10000);

1433 i‡(
wôhsc‹es
Ë
du
->
¨gv
[4] = 
	`sd¢ew
("withscores");

1435  
du
;

1436 
	}
}

1438 
d©a_unô
 *
	$zªvønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1440 
d©a_unô
 *
du
;

1441 
j
, 
fõld_Àngth
;

1442 
wôhsc‹es
;

1444 i‡(
	`ønd
()%2 == 1) {

1445 
wôhsc‹es
 = 1;

1447 
wôhsc‹es
 = 0;

1450 
du
 = 
	`d©a_unô_gë
();

1451 
du
->
dp
 = dp;

1452 
du
->
¨gc
 = 
wôhsc‹es
?5:4;

1453 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1454 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1455 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1456 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(0);

1457 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%10000);

1458 i‡(
wôhsc‹es
Ë
du
->
¨gv
[4] = 
	`sd¢ew
("withscores");

1460  
du
;

1461 
	}
}

1463 
d©a_unô
 *
	$zªm_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1465 
d©a_unô
 *
du
;

1466 
j
, 
fõld_Àngth
;

1468 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1470 
du
 = 
	`d©a_unô_gë
();

1471 
du
->
dp
 = dp;

1472 
du
->
¨gc
 = 2+
fõld_Àngth
;

1473 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1474 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1475 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1477 
j
 = 2; j < 2+
fõld_Àngth
; j ++) {

1478 
du
->
¨gv
[
j
] = 
	`gë_øndom_°rög
();

1481  
du
;

1482 
	}
}

1484 
d©a_unô
 *
	$zˇrd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1486 
d©a_unô
 *
du
;

1488 
du
 = 
	`d©a_unô_gë
();

1489 
du
->
dp
 = dp;

1490 
du
->
¨gc
 = 2;

1491 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1492 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1493 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1495  
du
;

1496 
	}
}

1498 
d©a_unô
 *
	$zcou¡_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1500 
d©a_unô
 *
du
;

1501 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1503 
du
 = 
	`d©a_unô_gë
();

1504 
du
->
dp
 = dp;

1505 
du
->
¨gc
 = 4;

1506 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1507 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1508 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1509 
du
->
¨gv
[2] = 
ønge
[0];

1510 
du
->
¨gv
[3] = 
ønge
[1];

1512 
	`‰ì
(
ønge
);

1513  
du
;

1514 
	}
}

1516 
d©a_unô
 *
	$zøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1518 
d©a_unô
 *
du
;

1519 
idx
 = 0, 
¨g_cou¡
 = 0;

1520 
wôhsc‹es
,
limô
;

1521 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1523 
¨g_cou¡
 = 4;

1524 i‡(
	`ønd
()%2 == 1) {

1525 
wôhsc‹es
 = 1;

1526 
¨g_cou¡
 ++;

1528 
wôhsc‹es
 = 0;

1530 i‡(
	`ønd
()%2 == 1) {

1531 
limô
 = 1;

1532 
¨g_cou¡
 += 3;

1534 
limô
 = 0;

1537 
du
 = 
	`d©a_unô_gë
();

1538 
du
->
dp
 = dp;

1539 
du
->
¨gc
 = 
¨g_cou¡
;

1540 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1541 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
(
dp
->
«me
);

1542 
du
->
¨gv
[
idx
++] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1543 
du
->
¨gv
[
idx
++] = 
ønge
[0];

1544 
du
->
¨gv
[
idx
++] = 
ønge
[1];

1545 i‡(
wôhsc‹es
Ë
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("withscores");

1546 i‡(
limô
) {

1547 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("limit");

1548 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1549 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1552 
	`ASSERT
(
¨g_cou¡
 =
idx
);

1554 
	`‰ì
(
ønge
);

1555  
du
;

1556 
	}
}

1558 
d©a_unô
 *
	$zªvøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1560 
d©a_unô
 *
du
;

1561 
idx
 = 0, 
¨g_cou¡
 = 0;

1562 
wôhsc‹es
,
limô
;

1563 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1565 
¨g_cou¡
 = 4;

1566 i‡(
	`ønd
()%2 == 1) {

1567 
wôhsc‹es
 = 1;

1568 
¨g_cou¡
 ++;

1570 
wôhsc‹es
 = 0;

1572 i‡(
	`ønd
()%2 == 1) {

1573 
limô
 = 1;

1574 
¨g_cou¡
 += 3;

1576 
limô
 = 0;

1579 
du
 = 
	`d©a_unô_gë
();

1580 
du
->
dp
 = dp;

1581 
du
->
¨gc
 = 
¨g_cou¡
;

1582 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1583 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
(
dp
->
«me
);

1584 
du
->
¨gv
[
idx
++] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1585 
du
->
¨gv
[
idx
++] = 
ønge
[0];

1586 
du
->
¨gv
[
idx
++] = 
ønge
[1];

1587 i‡(
wôhsc‹es
Ë
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("withscores");

1588 i‡(
limô
) {

1589 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("limit");

1590 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1591 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1594 
	`ASSERT
(
¨g_cou¡
 =
idx
);

1596 
	`‰ì
(
ønge
);

1597  
du
;

1598 
	}
}

1600 
d©a_unô
 *
	$zønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1602 
d©a_unô
 *
du
;

1604 
du
 = 
	`d©a_unô_gë
();

1605 
du
->
dp
 = dp;

1606 
du
->
¨gc
 = 3;

1607 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1608 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1609 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1610 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1612  
du
;

1613 
	}
}

1615 
d©a_unô
 *
	$zªvønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1617 
d©a_unô
 *
du
;

1619 
du
 = 
	`d©a_unô_gë
();

1620 
du
->
dp
 = dp;

1621 
du
->
¨gc
 = 3;

1622 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1623 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1624 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1625 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1627  
du
;

1628 
	}
}

1630 
d©a_unô
 *
	$zsc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1632 
d©a_unô
 *
du
;

1634 
du
 = 
	`d©a_unô_gë
();

1635 
du
->
dp
 = dp;

1636 
du
->
¨gc
 = 3;

1637 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1638 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1639 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1640 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1642  
du
;

1643 
	}
}

1645 
d©a_unô
 *
	$zªmøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1647 
d©a_unô
 *
du
;

1648 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1650 
du
 = 
	`d©a_unô_gë
();

1651 
du
->
dp
 = dp;

1652 
du
->
¨gc
 = 4;

1653 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1654 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1655 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1656 
du
->
¨gv
[2] = 
ønge
[0];

1657 
du
->
¨gv
[3] = 
ønge
[1];

1659 
	`‰ì
(
ønge
);

1660  
du
;

1661 
	}
}

1663 
d©a_unô
 *
	$zªmøngebyønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1665 
d©a_unô
 *
du
;

1666 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_RANK
);

1668 
du
 = 
	`d©a_unô_gë
();

1669 
du
->
dp
 = dp;

1670 
du
->
¨gc
 = 4;

1671 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1672 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1673 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1674 
du
->
¨gv
[2] = 
ønge
[0];

1675 
du
->
¨gv
[3] = 
ønge
[1];

1677 
	`‰ì
(
ønge
);

1678  
du
;

1679 
	}
}

1681 
d©a_unô
 *
	$zªmøngebyÀx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1683 
d©a_unô
 *
du
;

1684 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_LEX
);

1686 
du
 = 
	`d©a_unô_gë
();

1687 
du
->
dp
 = dp;

1688 
du
->
¨gc
 = 4;

1689 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1690 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1691 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1692 
du
->
¨gv
[2] = 
ønge
[0];

1693 
du
->
¨gv
[3] = 
ønge
[1];

1695 
	`‰ì
(
ønge
);

1696  
du
;

1697 
	}
}

1699 
	g¥odu˚rs_cou¡
;

1700 
d©a_¥odu˚r
 
	gªdis_d©a_¥odu˚r_èbÀ
[] = {

1702 {"dñ",
dñ_cmd_¥odu˚r
,-2,"w",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_KEY
,NULL},

1703 {"exi°s",
exi°s_cmd_¥odu˚r
,-2,"rF",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_KEY
,NULL},

1704 {"âl",
âl_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1705 {"±é",
±é_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1706 {"expúe",
expúe_cmd_¥odu˚r
,3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1707 {"expúót",
expúót_cmd_¥odu˚r
,3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1709 {"gë",
gë_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1710 {"£t",
£t_cmd_¥odu˚r
,-3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_ok
},

1711 {"£äx",
£äx_cmd_¥odu˚r
,3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
£äx_cmd_nck
},

1712 {"£ãx",
£ãx_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,
nck_whí_ok
},

1713 {"p£ãx",
p£ãx_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,
nck_whí_ok
},

1714 {"ö¸",
ö¸_cmd_¥odu˚r
,2,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1715 {"de¸",
de¸_cmd_¥odu˚r
,2,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1716 {"ö¸by",
ö¸by_cmd_¥odu˚r
,3,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1717 {"de¸by",
de¸by_cmd_¥odu˚r
,3,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1718 {"≠≥nd",
≠≥nd_cmd_¥odu˚r
,3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
≠≥nd_cmd_nck
},

1719 {"°æí",
°æí_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1720 {"gë£t",
gë£t_cmd_¥odu˚r
,3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_n€º‹
},

1721 {"ö¸byÊﬂt",
ö¸byÊﬂt_cmd_¥odu˚r
,3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_°r
},

1722 {"£tbô",
£tbô_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_zîo_‹_⁄e
},

1723 {"gëbô",
gëbô_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1724 {"£å™ge",
£å™ge_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_n⁄zîo_unsig√d_öãgî
},

1725 {"gëønge",
gëønge_cmd_¥odu˚r
,4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1726 {"bôcou¡",
bôcou¡_cmd_¥odu˚r
,-2,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1727 {"bôpos",
bôpos_cmd_¥odu˚r
,-3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1728 {"mgë",
mgë_cmd_¥odu˚r
,-2,"r",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_STRING
,NULL},

1729 {"m£t",
m£t_cmd_¥odu˚r
,-3,"wmA",0,
NULL
,1,-1,2,
TEST_CMD_TYPE_STRING
,
nck_whí_ok
},

1731 {"h£t",
h£t_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_⁄e
},

1732 {"hgë",
hgë_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1733 {"hÀn",
hÀn_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1734 {"hdñ",
hdñ_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1735 {"hexi°s",
hexi°s_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1736 {"hkeys",
hkeys_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1737 {"hvÆs",
hvÆs_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1738 {"hgëÆl",
hgëÆl_cmd_¥odu˚r
,2,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1739 {"hö¸by",
hö¸by_cmd_¥odu˚r
,4,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1740 {"hö¸byÊﬂt",
hö¸byÊﬂt_cmd_¥odu˚r
,4,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1741 {"hmgë",
hmgë_cmd_¥odu˚r
,-3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1742 {"hm£t",
hm£t_cmd_¥odu˚r
,-4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_ok
},

1743 {"h£äx",
h£äx_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_⁄e
},

1744 {"h°æí",
h°æí_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1746 {"Ωush",
Ωush_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,
Ωush_cmd_nck
},

1747 {"Õush",
Õush_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,
Õush_cmd_nck
},

1748 {"Ã™ge",
Ã™ge_cmd_¥odu˚r
,4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1749 {"Ω›",
Ω›_cmd_¥odu˚r
,2,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1750 {"Õ›",
Õ›_cmd_¥odu˚r
,2,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1751 {"Œí",
Œí_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1752 {"Ãem",
Ãem_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1753 {"…rim",
…rim_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1754 {"lödex",
lödex_cmd_¥odu˚r
,3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1755 {"l£t",
l£t_cmd_¥odu˚r
,4,"wm",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1757 {"ßdd",
ßdd_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,
nck_whí_unsig√d_öãgî
},

1758 {"smembîs",
smembîs_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1759 {"sˇrd",
sˇrd_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1760 {"§em",
§em_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1761 {"sismembî",
sismembî_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1762 {"suni⁄",
suni⁄_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1763 {"sdiff",
sdiff_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1764 {"söãr",
söãr_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1766 {"zadd",
zadd_cmd_¥odu˚r
,-4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,
zadd_cmd_nck
},

1767 {"zö¸by",
zö¸by_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,
zö¸by_cmd_nck
},

1768 {"zønge",
zønge_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1769 {"zªvønge",
zªvønge_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1770 {"zªm",
zªm_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1771 {"zˇrd",
zˇrd_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1772 {"zcou¡",
zcou¡_cmd_¥odu˚r
,4,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1773 {"zøngebysc‹e",
zøngebysc‹e_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1774 {"zªvøngebysc‹e",
zªvøngebysc‹e_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1775 {"zønk",
zønk_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1776 {"zªvønk",
zªvønk_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1777 {"zsc‹e",
zsc‹e_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1778 {"zªmøngebysc‹e",
zªmøngebysc‹e_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1779 {"zªmøngebyønk",
zªmøngebyønk_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL}

1782 
d©a_unô
 *
	$d©a_unô_gë
()

1784 
d©a_unô
 *
du
 = 
	`mÆloc
((data_unit));

1785 
du
->
dp
 = 
NULL
;

1786 
du
->
¨gc
 = 0;

1787 
du
->
¨gv
 = 
NULL
;

1788 
du
->
hashvÆue
 = 0;

1789 
du
->
d©a
 = 
NULL
;

1790  
du
;

1791 
	}
}

1793 
	$d©a_unô_put
(
d©a_unô
 *
du
)

1795 
idx
;

1797 
idx
 = 0; idx < 
du
->
¨gc
; idx ++) {

1798 i‡(
du
->
¨gv
[
idx
])

1799 
	`sds‰ì
(
du
->
¨gv
[
idx
]);

1801 
	`‰ì
(
du
->
¨gv
);

1802 
	`‰ì
(
du
);

1803 
	}
}

1805 
¥odu˚_scheme
 *
	$¥odu˚_scheme_¸óã
(
max_ˇched_keys
, 
hô_øtio
)

1807 
¥odu˚_scheme
 *
ps
;

1808 
cou¡
, 
idx
;

1809 
øtio
;

1811 
ps
 = 
	`mÆloc
((*ps));

1812 i‡(
ps
 =
NULL
)  NULL;

1813 
ps
->
k˝s
 = 
NULL
;

1814 
ps
->
hô_øtio_¨øy
 = 
NULL
;

1816 
ps
->
k˝s
 = 
	`d¨øy_¸óã
(
PRODUCE_KEY_CACHE_POOL_COUNT
,(
key_ˇche_¨øy
 *));

1817 
idx
 = 0; idx < 
PRODUCE_KEY_CACHE_POOL_COUNT
; idx ++) {

1818 
key_ˇche_¨øy
 **
k˝
 = 
	`d¨øy_push
(
ps
->
k˝s
);

1819 *
k˝
 = 
	`key_ˇche_¨øy_¸óã
(
max_ˇched_keys
/
PRODUCE_KEY_CACHE_POOL_COUNT
);

1820 i‡(*
k˝
 =
NULL
) {

1821  
NULL
;

1826 
ps
->
hô_øtio_¨øy_Àn
 = 100;

1827 
ps
->
hô_øtio
 = hit_ratio;

1828 
ps
->
hô_øtio_idx
 = 0;

1829 
ps
->
hô_øtio_¨øy
 = 
	`mÆloc
’s->
hô_øtio_¨øy_Àn
*());

1830 
øtio
 = 
ps
->
hô_øtio_¨øy_Àn
/ps->
hô_øtio
;

1831 i‡(
øtio
 > 1) {

1832 
cou¡
 = 
ps
->
hô_øtio
;

1833 
idx
 = 0; idx < 
ps
->
hô_øtio_¨øy_Àn
; idx ++) {

1834 
ps
->
hô_øtio_¨øy
[
idx
] = 0;

1837 
cou¡
 = 
ps
->
hô_øtio_¨øy_Àn
 -Ös->
hô_øtio
;

1838 
idx
 = 0; idx < 
ps
->
hô_øtio_¨øy_Àn
; idx ++) {

1839 
ps
->
hô_øtio_¨øy
[
idx
] = 1;

1842 
cou¡
 > 0) {

1843 
idx
 = 
	`ønd
()%
ps
->
hô_øtio_¨øy_Àn
;

1844 i‡(
øtio
 > 1) {

1845 i‡(
ps
->
hô_øtio_¨øy
[
idx
] == 0) {

1846 
cou¡
 --;

1847 
ps
->
hô_øtio_¨øy
[
idx
] = 1;

1850 i‡(
ps
->
hô_øtio_¨øy
[
idx
] == 1) {

1851 
cou¡
 --;

1852 
ps
->
hô_øtio_¨øy
[
idx
] = 0;

1857  
ps
;

1858 
	}
}

1860 
	$¥odu˚_scheme_de°roy
(
¥odu˚_scheme
 *
ps
)

1862 
j
;

1863 i‡(
ps
->
k˝s
) {

1864 
j
 = 0; j < 
PRODUCE_KEY_CACHE_POOL_COUNT
; j ++) {

1865 
key_ˇche_¨øy
 **
k˝
 = 
	`d¨øy_p›
(
ps
->
k˝s
);

1866 i‡(*
k˝
)
	`key_ˇche_¨øy_de°roy
(*kcp);

1868 
	`d¨øy_de°roy
(
ps
->
k˝s
);

1871 
	`‰ì
(
ps
->
hô_øtio_¨øy
);

1873 
	`‰ì
(
ps
);

1874 
	}
}

1876 
	$gë_k˝_idx
(
ty≥
)

1878 
idx
;

1880 
ty≥
)

1882 
TEST_CMD_TYPE_STRING
:

1883 
idx
 = 0;

1886 
TEST_CMD_TYPE_LIST
:

1887 
idx
 = 1;

1890 
TEST_CMD_TYPE_SET
:

1891 
idx
 = 2;

1894 
TEST_CMD_TYPE_ZSET
:

1895 
idx
 = 3;

1898 
TEST_CMD_TYPE_HASH
:

1899 
idx
 = 4;

1903 
idx
 = -1;

1907  
idx
;

1908 
	}
}

1910 
	$£t_n⁄_em±y_k˝s_idx
()

1912 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_STRING
) {

1913 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1914 
	`gë_k˝_idx
(
TEST_CMD_TYPE_STRING
);

1916 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_LIST
) {

1917 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1918 
	`gë_k˝_idx
(
TEST_CMD_TYPE_LIST
);

1920 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_SET
) {

1921 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1922 
	`gë_k˝_idx
(
TEST_CMD_TYPE_SET
);

1924 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_ZSET
) {

1925 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1926 
	`gë_k˝_idx
(
TEST_CMD_TYPE_ZSET
);

1928 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_HASH
) {

1929 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1930 
	`gë_k˝_idx
(
TEST_CMD_TYPE_HASH
);

1932 
	}
}

1935 
key_ˇche_¨øy
 *
	$k˝_gë_‰om_ps
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

1937 
idx
;

1938 
key_ˇche_¨øy
 **
k˝
;

1940 i‡(
ps
 =
NULL
 ||Ös->
k˝s
 =NULL || 
dp
 == NULL)  NULL;

1942 i‡(
dp
->
cmd_ty≥
 =
TEST_CMD_TYPE_KEY
) {

1943 i‡(
n⁄_em±y_k˝s_cou¡
==0) {

1944 
idx
 = -1;

1946 
idx
 = 
	`ønd
()%
n⁄_em±y_k˝s_cou¡
;

1947 
idx
 = 
n⁄_em±y_k˝s_idx
[idx];

1948 
	`ASSERT
(
idx
 >= 0);

1951 
idx
 = 
	`gë_k˝_idx
(
dp
->
cmd_ty≥
);

1954 i‡(
idx
 >
PRODUCE_KEY_CACHE_POOL_COUNT
 || idx < 0) {

1955  
NULL
;

1958 
k˝
 = 
	`d¨øy_gë
(
ps
->
k˝s
, 
idx
);

1960  *
k˝
;

1961 
	}
}

1963 
	$vπ_¥odu˚_thªads_öô
(
¥odu˚_thªads_cou¡
,

1964 
ˇched_keys
, 
hô_øtio
)

1966 
idx
;

1967 
	`d¨øy_öô
(&
¥odu˚_thªads
, 
¥odu˚_thªads_cou¡
, (
¥odu˚_thªad
));

1968 
¥odu˚_d©a_thªads_cou¡
 = 
¥odu˚_thªads_cou¡
;

1969 
idx
 = 0; idx < 
¥odu˚_thªads_cou¡
; idx ++) {

1970 
¥odu˚_thªad
 *
±
 = 
	`d¨øy_push
(&
¥odu˚_thªads
);

1971 
±
->
id
 = 
idx
;

1972 
±
->
thªad_id
 = 0;

1973 
±
->
ps
 = 
	`¥odu˚_scheme_¸óã
(
ˇched_keys
, 
hô_øtio
);

1974 
±
->
∑u£
 = 0;

1975 
±
->
lo›times
 = 0;

1978  
VRT_OK
;

1979 
	}
}

1981 
	$vπ_¥odu˚_thªads_deöô
()

1983 
¥odu˚_thªad
 *
±
;

1984 
	`d¨øy_n
(&
¥odu˚_thªads
) > 0) {

1985 
±
 = 
	`d¨øy_p›
(&
¥odu˚_thªads
);

1986 i‡(
±
->
ps
) {

1987 
	`¥odu˚_scheme_de°roy
(
±
->
ps
);

1988 
±
->
ps
 = 
NULL
;

1991 
	`d¨øy_deöô
(&
¥odu˚_thªads
);

1992 
	}
}

1994 *
	$vπ_¥odu˚_thªad_run
(*
¨gs
)

1996 
ªt
;

1997 
¥odu˚_thªad
 *
±
 = 
¨gs
;

1998 
idx
, 
j
;

1999 
d©a_¥odu˚r
 **
dp
;

2000 
d©a_unô
 *
du
;

2002 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

2006 i‡(
±
->
∑u£
) {

2007 
	`u¶ìp
(1000000);

2008 i‡(!
	`ã°_if_√ed_∑u£
()) {

2009 
±
->
∑u£
 = 0;

2013 } i‡(
±
->
lo›times
%10000 == 0) {

2014 i‡(
	`ã°_if_√ed_∑u£
()) {

2015 
±
->
∑u£
 = 1;

2016 
	`⁄e_¥odu˚_thªad_∑u£d
();

2021 
idx
 = 
	`ønd
()%
√eded_cmd_ty≥_¥odu˚r_cou¡
;

2022 
dp
 = 
	`d¨øy_gë
(&
√eded_cmd_ty≥_¥odu˚r
,
idx
);

2023 
du
 = (*
dp
)->
	`¥oc
(*dp,
±
->
ps
);

2025 
du
->
d©a
 = 
±
->
ps
;

2028 
ªt
 = 
	`d©a_di•©ch
(
du
);

2029 i‡(
ªt
 == -1) {

2030 
	`d©a_unô_put
(
du
);

2031 } i‡(
ªt
 == 1) {

2032 
	`u¶ìp
(100000);

2035 
±
->
lo›times
 ++;

2038  
NULL
;

2039 
	}
}

2041 
	$add_to_√eded_cmd_ty≥_¥odu˚r
(
d©a_¥odu˚r
 *
dp
)

2043 
d©a_¥odu˚r
 **
dp_ñem
 = 
	`d¨øy_push
(&
√eded_cmd_ty≥_¥odu˚r
);

2045 *
dp_ñem
 = 
dp
;

2046 
√eded_cmd_ty≥_¥odu˚r_cou¡
 ++;

2048  
VRT_OK
;

2049 
	}
}

2051 
	$vπ_¥odu˚_d©a_öô
(
key_Àngth_ønge_mö
,
key_Àngth_ønge_max
,

2052 
°rög_max_Àngth
,
fõlds_max_cou¡
,

2053 
¥odu˚_cmd_ty≥s
,
d¨øy
 *
¥odu˚_cmd_bœckli°
,d¨øy *
¥odu˚_cmd_whôñi°
,

2054 
¥odu˚_thªads_cou¡
,
ˇched_keys
,

2055 
hô_øtio
)

2057 
j
, 
k
;

2059 
key_Àngth_mö
 = 
key_Àngth_ønge_mö
;

2060 
key_Àngth_max
 = 
key_Àngth_ønge_max
;

2061 i‡(
key_Àngth_max
 < 
key_Àngth_mö
Ë 
VRT_ERROR
;

2062 
key_Àngth_ønge_g≠
 = 
key_Àngth_max
-
key_Àngth_mö
;

2063 
fõld_Àngth_max
 = 
fõlds_max_cou¡
;

2064 
°rög_Àngth_max
 = 
°rög_max_Àngth
;

2065 
cmd_ty≥
 = 
¥odu˚_cmd_ty≥s
;

2066 
	`d¨øy_öô
(&
√eded_cmd_ty≥_¥odu˚r
, 100, (
d©a_¥odu˚r
*));

2068 
¥odu˚rs_cou¡
 = (
ªdis_d©a_¥odu˚r_èbÀ
)/(
d©a_¥odu˚r
);

2069 
j
 = 0; j < 
¥odu˚rs_cou¡
; j++) {

2070 
d©a_¥odu˚r
 *
dp
 = 
ªdis_d©a_¥odu˚r_èbÀ
+
j
;

2071 *
f
 = 
dp
->
sÊags
;

2073 *
f
 != '\0') {

2074 *
f
) {

2075 'w': 
dp
->
Êags
 |
PRO_WRITE
; ;

2076 'r': 
dp
->
Êags
 |
PRO_READONLY
; ;

2077 'm': 
dp
->
Êags
 |
PRO_DENYOOM
; ;

2078 'a': 
dp
->
Êags
 |
PRO_ADMIN
; ;

2079 'p': 
dp
->
Êags
 |
PRO_PUBSUB
; ;

2080 's': 
dp
->
Êags
 |
PRO_NOSCRIPT
; ;

2081 'R': 
dp
->
Êags
 |
PRO_RANDOM
; ;

2082 'S': 
dp
->
Êags
 |
PRO_SORT_FOR_SCRIPT
; ;

2083 'l': 
dp
->
Êags
 |
PRO_LOADING
; ;

2084 't': 
dp
->
Êags
 |
PRO_STALE
; ;

2085 'M': 
dp
->
Êags
 |
PRO_SKIP_MONITOR
; ;

2086 'k': 
dp
->
Êags
 |
PRO_ASKING
; ;

2087 'F': 
dp
->
Êags
 |
PRO_FAST
; ;

2088 'A': 
dp
->
Êags
 |
PRO_ADD
; ;

2089 :  
VRT_ERROR
;

2091 
f
++;

2094 i‡(
dñëe_d©a_¥odu˚r
 =
NULL
 &&

2095 !
	`°rcmp
(
dp
->
«me
,"del")) {

2096 
dñëe_d©a_¥odu˚r
 = 
dp
;

2099 i‡(
¥odu˚_cmd_whôñi°
 !
NULL
) {

2100 
k
 = 0; k < 
	`d¨øy_n
(
¥odu˚_cmd_whôñi°
); k ++) {

2101 
sds
 *
cmd«me
 = 
	`d¨øy_gë
(
¥odu˚_cmd_whôñi°
, 
k
);

2102 i‡(!
	`°rˇ£cmp
(
dp
->
«me
,*
cmd«me
)) {

2103 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2111 i‡(
¥odu˚_cmd_bœckli°
 !
NULL
) {

2112 
is_ö_bœckli°
 = 0;

2113 
k
 = 0; k < 
	`d¨øy_n
(
¥odu˚_cmd_bœckli°
); k ++) {

2114 
sds
 *
cmd«me
 = 
	`d¨øy_gë
(
¥odu˚_cmd_bœckli°
, 
k
);

2115 i‡(!
	`°rˇ£cmp
(
dp
->
«me
,*
cmd«me
)) {

2116 
is_ö_bœckli°
 = 1;

2121 i‡(
is_ö_bœckli°
) {

2127 i‡(
dp
->
cmd_ty≥
&cmd_type) {

2128 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2130 i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_EXPIRE
 && 
expúe_íabÀd
) {

2131 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2135 
	`£t_n⁄_em±y_k˝s_idx
();

2137 i‡(
	`d¨øy_n
(&
√eded_cmd_ty≥_¥odu˚r
) == 0) {

2138 
	`log_îr‹
("No commandÇeedÅoÅest");

2139  
VRT_ERROR
;

2142 i‡(
dñëe_d©a_¥odu˚r
 =
NULL
) {

2143  
VRT_ERROR
;

2146 i‡(
√eded_cmd_ty≥_¥odu˚r_cou¡
 == 0) {

2147  
VRT_ERROR
;

2150 
j
 = 0; j < 
√eded_cmd_ty≥_¥odu˚r_cou¡
; j ++) {

2151 
d©a_¥odu˚r
 **
dp_ñem
 = 
	`d¨øy_gë
(&
√eded_cmd_ty≥_¥odu˚r
,
j
);

2152 
	`log_debug
(
LOG_INFO
, "√ededÅe° comm™d[%d]: %s", 
j
, (*
dp_ñem
)->
«me
);

2155 
	`vπ_¥odu˚_thªads_öô
(
¥odu˚_thªads_cou¡
, 
ˇched_keys
, 
hô_øtio
);

2157  
VRT_OK
;

2158 
	}
}

2160 
	$vπ_¥odu˚_d©a_deöô
()

2162 
	`vπ_¥odu˚_thªads_deöô
();

2164 
√eded_cmd_ty≥_¥odu˚r
.
√Àm
 = 0;

2165 
	`d¨øy_deöô
(&
√eded_cmd_ty≥_¥odu˚r
);

2166 
	}
}

2168 
	$vπ_°¨t_¥odu˚_d©a
()

2170 
i
;

2171 
i
 = 0; i < 
	`d¨øy_n
(&
¥odu˚_thªads
); i ++) {

2172 
±hªad_©å_t
 
©å
;

2173 
¥odu˚_thªad
 *
±
;

2174 
	`±hªad_©å_öô
(&
©å
);

2175 
±
 = 
	`d¨øy_gë
(&
¥odu˚_thªads
, 
i
);

2176 
	`±hªad_¸óã
(&
±
->
thªad_id
,

2177 &
©å
, 
vπ_¥odu˚_thªad_run
, 
±
);

2180 
œ°_ã°_begö_time
 = 
	`vπ_£c_now
();

2181  
VRT_OK
;

2182 
	}
}

2184 
	$vπ_waô_¥odu˚_d©a
()

2186 
i
;

2188 
i
 = 0; i < 
	`d¨øy_n
(&
¥odu˚_thªads
); i ++){

2189 
¥odu˚_thªad
 *
±
 = 
	`d¨øy_gë
(&
¥odu˚_thªads
, 
i
);

2190 
	`±hªad_joö
(
±
->
thªad_id
, 
NULL
);

2193  
VRT_OK
;

2194 
	}
}

2202 *
	$gë_keys_usög_d©a_¥odu˚r_èbÀ
(
d©a_¥odu˚r
 *
dp
,
sds
 *
¨gv
, 
¨gc
, *
numkeys
) {

2203 
j
, 
i
 = 0, 
œ°
, *
keys
;

2205 i‡(
dp
->
fú°key
 == 0) {

2206 *
numkeys
 = 0;

2207  
NULL
;

2209 
œ°
 = 
dp
->
œ°key
;

2210 i‡(
œ°
 < 0Ëœ° = 
¨gc
+last;

2211 
keys
 = 
	`mÆloc
(()*((
œ°
 - 
dp
->
fú°key
)+1));

2212 
j
 = 
dp
->
fú°key
; j <
œ°
; j +dp->
key°ï
) {

2213 
keys
[
i
++] = 
j
;

2215 *
numkeys
 = 
i
;

2216  
keys
;

2217 
	}
}

2230 *
	$gë_keys_‰om_d©a_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
sds
 *
¨gv
, 
¨gc
, *
numkeys
) {

2231 i‡(
dp
->
gëkeys_¥oc
) {

2232  
dp
->
	`gëkeys_¥oc
(dp,
¨gv
,
¨gc
,
numkeys
);

2234  
	`gë_keys_usög_d©a_¥odu˚r_èbÀ
(
dp
,
¨gv
,
¨gc
,
numkeys
);

2236 
	}
}

2238 
sds
 
	$gë_⁄e_key_‰om_d©a_unô
(
d©a_unô
 *
du
)

2240 
numkeys
;

2241 *
keyödex
;

2242 
sds
 
key
;

2244 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
,du->
¨gv
,du->
¨gc
,&
numkeys
);

2245 i‡(
numkeys
 <= 0) {

2246 
	`NOT_REACHED
();

2247  
NULL
;

2250 
key
 = 
du
->
¨gv
[
keyödex
[0]];

2251 
	`‰ì
(
keyödex
);

2253  
key
;

2254 
	}
}

2256 
	$¥öt_¥odu˚r_comm™d
(
d©a_unô
 *
du
)

2258 
j
;

2259 
sds
 
cmd
 = 
	`sd£m±y
();

2261 
j
 = 0; j < 
du
->
¨gc
; j ++) {

2262 
cmd
 = 
	`sdsˇtsds
(cmd,
du
->
¨gv
[
j
]);

2263 
cmd
 = 
	`sdsˇt
(cmd," ");

2265 
cmd
 = 
	`sdsˇt
(cmd,"\n");

2266 
	`log_wrôe_Àn
(
cmd
,
	`sd¶í
(cmd));

2267 
	`sds‰ì
(
cmd
);

2268 
	}
}

	@tests/vrt_produce_data.h

1 #i‚de‡
_VRT_PRODUCE_DATA_H_


2 
	#_VRT_PRODUCE_DATA_H_


	)

34 
	#PRO_WRITE
 1

	)

35 
	#PRO_READONLY
 2

	)

36 
	#PRO_DENYOOM
 4

	)

37 
	#PRO_NOT_USED_1
 8

	)

38 
	#PRO_ADMIN
 16

	)

39 
	#PRO_PUBSUB
 32

	)

40 
	#PRO_NOSCRIPT
 64

	)

41 
	#PRO_RANDOM
 128

	)

42 
	#PRO_SORT_FOR_SCRIPT
 256

	)

43 
	#PRO_LOADING
 512

	)

44 
	#PRO_STALE
 1024

	)

45 
	#PRO_SKIP_MONITOR
 2048

	)

46 
	#PRO_ASKING
 4096

	)

47 
	#PRO_FAST
 8192

	)

48 
	#PRO_ADD
 16384

	)

50 
	gd©a_¥odu˚r
;

51 
	g¥odu˚_scheme
;

52 
	gkey_ˇche_¨øy
;

54 
d©a_unô
 *
	tªdis_comm™d_¥oc
(
	td©a_¥odu˚r
 *
	tdp
, 
	t¥odu˚_scheme
 *
	tps
);

55 *
	tªdis_gë_keys_¥oc
(
	td©a_¥odu˚r
 *
	tdp
, 
	tsds
 *
	t¨gv
, 
	t¨gc
, *
	tnumkeys
);

56 
	t¥odu˚_√ed_ˇche_key_¥oc
(
	tªdisRïly
 *
	tª∂y
);

57 
	sd©a_¥odu˚r
 {

58 *
	m«me
;

59 
ªdis_comm™d_¥oc
 *
	m¥oc
;

60 
	m¨ôy
;

62 *
	msÊags
;

63 
	mÊags
;

66 
ªdis_gë_keys_¥oc
 *
	mgëkeys_¥oc
;

68 
	mfú°key
;

69 
	mœ°key
;

70 
	mkey°ï
;

71 
	mcmd_ty≥
;

72 
¥odu˚_√ed_ˇche_key_¥oc
 *
	m√ed_ˇche_key_¥oc
;

73 } 
	td©a_¥odu˚r
;

75 
	sd©a_unô
 {

76 
d©a_¥odu˚r
 *
	mdp
;

77 
	m¨gc
;

78 
sds
 *
	m¨gv
;

80 
	mhashvÆue
;

82 *
	md©a
;

83 } 
	td©a_unô
;

85 
	s¥odu˚_scheme
 {

86 
d¨øy
 *
	mk˝s
;

88 
	mhô_øtio
;

89 
	mhô_øtio_idx
;

90 
	mhô_øtio_¨øy_Àn
;

91 *
	mhô_øtio_¨øy
;

92 } 
	t¥odu˚_scheme
;

94 
d©a_¥odu˚r
 *
dñëe_d©a_¥odu˚r
;

96 
¥odu˚_d©a_thªads_cou¡
;

98 
¥odu˚_thªads_∑u£_föished_cou¡
;

100 
key_ˇche_¨øy
 *
k˝_gë_‰om_ps
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
);

102 
d©a_unô
 *
d©a_unô_gë
();

103 
d©a_unô_put
(
d©a_unô
 *
du
);

105 
vπ_¥odu˚_d©a_öô
(
key_Àngth_ønge_mö
, 
key_Àngth_ønge_max
,

106 
°rög_max_Àngth
,
fõlds_max_cou¡
,

107 
¥odu˚_cmd_ty≥s
,
d¨øy
 *
¥odu˚_cmd_bœckli°
,d¨øy *
¥odu˚_cmd_whôñi°
,

108 
¥odu˚_thªads_cou¡
, 
ˇched_keys
,

109 
hô_øtio
);

110 
vπ_¥odu˚_d©a_deöô
();

112 
vπ_°¨t_¥odu˚_d©a
();

113 
vπ_waô_¥odu˚_d©a
();

115 *
gë_keys_‰om_d©a_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
sds
 *
¨gv
, 
¨gc
, *
numkeys
);

117 
sds
 
gë_⁄e_key_‰om_d©a_unô
(
d©a_unô
 *
du
);

119 
¥öt_¥odu˚r_comm™d
(
d©a_unô
 *
du
);

	@tests/vrt_produce_data.h

1 #i‚de‡
_VRT_PRODUCE_DATA_H_


2 
	#_VRT_PRODUCE_DATA_H_


	)

34 
	#PRO_WRITE
 1

	)

35 
	#PRO_READONLY
 2

	)

36 
	#PRO_DENYOOM
 4

	)

37 
	#PRO_NOT_USED_1
 8

	)

38 
	#PRO_ADMIN
 16

	)

39 
	#PRO_PUBSUB
 32

	)

40 
	#PRO_NOSCRIPT
 64

	)

41 
	#PRO_RANDOM
 128

	)

42 
	#PRO_SORT_FOR_SCRIPT
 256

	)

43 
	#PRO_LOADING
 512

	)

44 
	#PRO_STALE
 1024

	)

45 
	#PRO_SKIP_MONITOR
 2048

	)

46 
	#PRO_ASKING
 4096

	)

47 
	#PRO_FAST
 8192

	)

48 
	#PRO_ADD
 16384

	)

50 
	gd©a_¥odu˚r
;

51 
	g¥odu˚_scheme
;

52 
	gkey_ˇche_¨øy
;

54 
d©a_unô
 *
	tªdis_comm™d_¥oc
(
	td©a_¥odu˚r
 *
	tdp
, 
	t¥odu˚_scheme
 *
	tps
);

55 *
	tªdis_gë_keys_¥oc
(
	td©a_¥odu˚r
 *
	tdp
, 
	tsds
 *
	t¨gv
, 
	t¨gc
, *
	tnumkeys
);

56 
	t¥odu˚_√ed_ˇche_key_¥oc
(
	tªdisRïly
 *
	tª∂y
);

57 
	sd©a_¥odu˚r
 {

58 *
	m«me
;

59 
ªdis_comm™d_¥oc
 *
	m¥oc
;

60 
	m¨ôy
;

62 *
	msÊags
;

63 
	mÊags
;

66 
ªdis_gë_keys_¥oc
 *
	mgëkeys_¥oc
;

68 
	mfú°key
;

69 
	mœ°key
;

70 
	mkey°ï
;

71 
	mcmd_ty≥
;

72 
¥odu˚_√ed_ˇche_key_¥oc
 *
	m√ed_ˇche_key_¥oc
;

73 } 
	td©a_¥odu˚r
;

75 
	sd©a_unô
 {

76 
d©a_¥odu˚r
 *
	mdp
;

77 
	m¨gc
;

78 
sds
 *
	m¨gv
;

80 
	mhashvÆue
;

82 *
	md©a
;

83 } 
	td©a_unô
;

85 
	s¥odu˚_scheme
 {

86 
d¨øy
 *
	mk˝s
;

88 
	mhô_øtio
;

89 
	mhô_øtio_idx
;

90 
	mhô_øtio_¨øy_Àn
;

91 *
	mhô_øtio_¨øy
;

92 } 
	t¥odu˚_scheme
;

94 
d©a_¥odu˚r
 *
dñëe_d©a_¥odu˚r
;

96 
¥odu˚_d©a_thªads_cou¡
;

98 
¥odu˚_thªads_∑u£_föished_cou¡
;

100 
key_ˇche_¨øy
 *
k˝_gë_‰om_ps
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
);

102 
d©a_unô
 *
d©a_unô_gë
();

103 
d©a_unô_put
(
d©a_unô
 *
du
);

105 
vπ_¥odu˚_d©a_öô
(
key_Àngth_ønge_mö
, 
key_Àngth_ønge_max
,

106 
°rög_max_Àngth
,
fõlds_max_cou¡
,

107 
¥odu˚_cmd_ty≥s
,
d¨øy
 *
¥odu˚_cmd_bœckli°
,d¨øy *
¥odu˚_cmd_whôñi°
,

108 
¥odu˚_thªads_cou¡
, 
ˇched_keys
,

109 
hô_øtio
);

110 
vπ_¥odu˚_d©a_deöô
();

112 
vπ_°¨t_¥odu˚_d©a
();

113 
vπ_waô_¥odu˚_d©a
();

115 *
gë_keys_‰om_d©a_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
sds
 *
¨gv
, 
¨gc
, *
numkeys
);

117 
sds
 
gë_⁄e_key_‰om_d©a_unô
(
d©a_unô
 *
du
);

119 
¥öt_¥odu˚r_comm™d
(
d©a_unô
 *
du
);

	@tests/vrt_public.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<±hªad.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

13 
	~<d¨øy.h
>

14 
	~<dlog.h
>

16 
	~<vπ_utû.h
>

17 
	~<vπ_public.h
>

20 #i‡
deföed
(
__ATOMIC_RELAXED
)

22 #ñi‡
deföed
(
HAVE_ATOMIC
)

24 
±hªad_muãx_t
 
	g°©e_lockî
 = 
PTHREAD_MUTEX_INITIALIZER
;

27 
	#VIRE_TEST_CONFIG_DEFAULT_EXECUTE_FILE
 "§c/vúe"

	)

29 *
	gexecuã_fûe
 = 
VIRE_TEST_CONFIG_DEFAULT_EXECUTE_FILE
;

31 
sds
 
	gw‹kdú
 = 
NULL
;

33 
	gvúï‹t
 = 55556;

35 
	$£t_execuã_fûe
(*
fûe
)

37 
execuã_fûe
 = 
fûe
;

38 
	}
}

40 
sds
 
	$vúe_c⁄f_¸óã
(*
dú
, 
p‹t
)

42 
sds
 
c⁄f_fûe
;

43 
fd
;

44 
sds
 
löe
;

46 
c⁄f_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.c⁄f",
dú
);

48 
fd
 = 
	`›í
(
c⁄f_fûe
,
O_WRONLY
|
O_CREAT
|
O_TRUNC
,0644);

49 i‡(
fd
 < 0) {

50 
	`ã°_log_îr‹
("O≥¿c⁄‡fûê%†Áûed: %s", 
c⁄f_fûe
, 
	`°ªº‹
(
î∫o
));

51 
	`sds‰ì
(
c⁄f_fûe
);

52  
NULL
;

55 
löe
 = 
	`sd£m±y
();

57 
löe
 = 
	`sdsˇtfmt
÷öe,"p‹à%i\n",
p‹t
);

58 
	`wrôe
(
fd
, 
löe
, 
	`sd¶í
(line));

60 
	`sds˛ór
(
löe
);

61 
löe
 = 
	`sdsˇtfmt
(line,"\n");

62 
	`wrôe
(
fd
, 
löe
, 
	`sd¶í
(line));

64 
	`˛o£
(
fd
);

65 
	`sds‰ì
(
löe
);

66  
c⁄f_fûe
;

67 
	}
}

69 
vúe_ö°™˚
 *
	$vúe_ö°™˚_¸óã
(
p‹t
)

71 
vúe_ö°™˚
 *
vi
;

73 
vi
 = 
	`mÆloc
((
vúe_ö°™˚
));

74 
vi
->
ho°
 = 
NULL
;

75 
vi
->
p‹t
 = 0;

76 
vi
->
dú
 = 
NULL
;

77 
vi
->
c⁄f_fûe
 = 
NULL
;

78 
vi
->
pid_fûe
 = 
NULL
;

79 
vi
->
log_fûe
 = 
NULL
;

80 
vi
->
ru¬ög
 = 0;

81 
vi
->
pid
 = -1;

82 
vi
->
˘x
 = 
NULL
;

84 
vi
->
ho°
 = 
	`sd¢ew
("127.0.0.1");

85 
vi
->
p‹t
 =Öort;

86 
vi
->
dú
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/%i",
w‹kdú
,
p‹t
);

88 i‡(
	`mkdú
(
vi
->
dú
,0755) < 0) {

89 
	`vúe_ö°™˚_de°roy
(
vi
);

90  
NULL
;

93 
vi
->
c⁄f_fûe
 = 
	`vúe_c⁄f_¸óã
(vi->
dú
, 
p‹t
);

94 i‡(
vi
->
c⁄f_fûe
 =
NULL
) {

95 
	`vúe_ö°™˚_de°roy
(
vi
);

96  
NULL
;

99 
vi
->
pid_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.pid",vi->
dú
);

100 
vi
->
log_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.log",vi->
dú
);

102 
	`ã°_log_debug
("vúêho°: %s", 
vi
->
ho°
);

103 
	`ã°_log_debug
("vúêp‹t: %d", 
vi
->
p‹t
);

104 
	`ã°_log_debug
("vúêdú: %s", 
vi
->
dú
);

105 
	`ã°_log_debug
("vúêc⁄f_fûe: %s", 
vi
->
c⁄f_fûe
);

106 
	`ã°_log_debug
("vúêpid_fûe: %s", 
vi
->
pid_fûe
);

107 
	`ã°_log_debug
("vúêlog_fûe: %s", 
vi
->
log_fûe
);

109  
vi
;

110 
	}
}

112 
	$vúe_ö°™˚_de°roy
(
vúe_ö°™˚
 *
vi
)

114 i‡(
vi
->
ru¬ög
) {

115 
	`vúe_£rvî_°›
(
vi
);

118 i‡(
vi
->
dú
) {

119 
	`de°roy_dú
(
vi
->
dú
);

120 
	`sds‰ì
(
vi
->
dú
);

123 i‡(
vi
->
c⁄f_fûe
) {

124 
	`sds‰ì
(
vi
->
c⁄f_fûe
);

127 i‡(
vi
->
pid_fûe
) {

128 
	`sds‰ì
(
vi
->
pid_fûe
);

131 i‡(
vi
->
log_fûe
) {

132 
	`sds‰ì
(
vi
->
log_fûe
);

135 i‡(
vi
->
˘x
) {

136 
	`ªdisFªe
(
vi
->
˘x
);

139 i‡(
vi
->
ho°
) {

140 
	`sds‰ì
(
vi
->
ho°
);

143 
	`‰ì
(
vi
);

144 
	}
}

146 
	$vúe_£rvî_run
(
vúe_ö°™˚
 *
vi
)

148 
ªt
;

149 
pid_t
 
pid
;

150 
°©us
;

151 
timevÆ
 
timeout
 = { 3, 500000 };

153 i‡((
pid
 = 
	`f‹k
()) < 0) {

154 
	`ã°_log_îr‹
("F‹ká chöd faûed: %s", 
	`°ªº‹
(
î∫o
));

155  
VRT_ERROR
;

156 } i‡(
pid
 == 0) {

157 
ªt
 = 
	`exe˛
(
execuã_fûe
,"vúe","-c",
vi
->
c⁄f_fûe
,

158 "-p",
vi
->
pid_fûe
,"-o",vi->
log_fûe
,"-v","8",
NULL
);

159 i‡(
ªt
 < 0) {

160 
	`ã°_log_îr‹
("Exe˛Åhêvúê£rvî faûed: %s", 
	`°ªº‹
(
î∫o
));

161  
VRT_ERROR
;

166 
	`¶ìp
(1);

168 
ªt
 = 
	`waôpid
(
pid
,
NULL
,
WNOHANG
);

169 i‡(
ªt
 != 0) {

170 
	`ã°_log_debug
("Ru¿vúê£rvî’‹à%dËÁûed",
vi
->
p‹t
);

171  
VRT_ERROR
;

174 
vi
->
˘x
 = 
	`ªdisC⁄√˘WôhTimeout
(vi->
ho°
,vi->
p‹t
,
timeout
);

175 i‡(
vi
->
˘x
 =
NULL
 || vi->˘x->
îr
) {

176 
	`ã°_log_îr‹
("ConnectÅo %s:%d failed: %s",

177 
vi
->
ho°
, vi->
p‹t
, vi->
˘x
?vi->˘x->
îr°r
:"out of memory");

178 i‡(
vi
->
˘x
) {

179 
	`ªdisFªe
(
vi
->
˘x
);

180 
vi
->
˘x
 = 
NULL
;

182  
VRT_ERROR
;

185 
vi
->
pid
 = 
	`gë_pid_‰om_ª∂y
(vi->
˘x
,vi->
ho°
,vi->
p‹t
);

186 i‡(
vi
->
pid
 < 0) {

187 
	`ã°_log_îr‹
("GëÖid from %s:%dÑïlyÉº‹", 
vi
->
ho°
, vi->
p‹t
);

188  
VRT_ERROR
;

189 } i‡(
vi
->
pid
 !=Öid) {

190 
	`ã°_log_îr‹
("Gë wr⁄gÖid from %s:%dÑïly", 
vi
->
ho°
, vi->
p‹t
);

191  
VRT_ERROR
;

194 
	`ã°_log_debug
("Ru¿vúê£rvî’‹à%dËsuc˚ss",
vi
->
p‹t
);

196 
vi
->
ru¬ög
 = 1;

198  
VRT_OK
;

199 
	}
}

201 
	$vúe_£rvî_°›
(
vúe_ö°™˚
 *
vi
)

203 
pid
;

205 i‡(!
vi
->
ru¬ög
) ;

207 i‡(
vi
->
pid
 > 0) {

208 
pid
 = 
vi
->pid;

209 } i‡(
vi
->
pid_fûe
) {

210 
fd
;

211 
pid_°r
[20];

212 
size_t
 
ƒód
;

213 
fd
 = 
	`›í
(
vi
->
pid_fûe
, 
O_RDONLY
);

214 i‡(
fd
 < 0) {

215 
	`ã°_log_îr‹
("O≥¿pid fûê%†Áûed", 
vi
->
pid_fûe
);

218 
ƒód
 = 
	`ªad
(
fd
,
pid_°r
,20);

219 i‡(
	`°rög2l
(
pid_°r
,
ƒód
,&
pid
) == 0) {

220 
	`ã°_log_îr‹
("C⁄vîàpid såög %.*†tÿl⁄g faûed",
ƒód
,
pid_°r
);

224 
pid
 = 
	`gë_pid_‰om_ª∂y
(
vi
->
˘x
, vi->
ho°
, vi->
p‹t
);

227 i‡(
pid
 < 0) {

228 
	`ã°_log_îr‹
("GetÖid failed");

232 
	`kûl
(
pid
,9);

234 
vi
->
ru¬ög
 = 0;

235 
vi
->
pid
 = -1;

236 i‡(
vi
->
˘x
) {

237 
	`ªdisFªe
(
vi
->
˘x
);

238 
vi
->
˘x
 = 
NULL
;

240 
	}
}

242 
	$¸óã_w‹k_dú
()

244 
sds
 
dú«me
;

245 
dú«me
 = 
	`sdsˇtfmt
(
	`sd£m±y
(), "tmp_ã°_%I", 
	`vπ_u£c_now
());

246 
w‹kdú
 = 
	`gëAbsﬁuãP©h
(
dú«me
);

247 
	`sds‰ì
(
dú«me
);

249 i‡(
	`¸óã_dú
(
w‹kdú
Ë!
VRT_OK
) {

250 
	`ã°_log_îr‹
("Cª©êw‹kdú %†Áûed",
w‹kdú
);

251  
VRT_ERROR
;

254 
	`ã°_log_debug
("Cª©êw‹kdú: %s",
w‹kdú
);

256  
VRT_OK
;

257 
	}
}

259 
	$de°roy_w‹k_dú
()

261 i‡(
w‹kdú
 =
NULL
Ë 
VRT_OK
;

263 i‡(
	`de°roy_dú
(
w‹kdú
Ë!
VRT_OK
) {

264 
	`ã°_log_îr‹
("Dñëêthêw‹kdú %†Áûed",
w‹kdú
);

266 
	`ã°_log_debug
("Dñëêthêw‹kdú: %s",
w‹kdú
);

269 
	`sds‰ì
(
w‹kdú
);

270 
w‹kdú
 = 
NULL
;

272  
VRT_OK
;

273 
	}
}

275 
	$gë_√xt_p‹t
()

277 
p‹t
 = 
vúï‹t
;

278 
vúï‹t
 += 11;

280  
p‹t
;

281 
	}
}

283 
vúe_ö°™˚
 *
	$°¨t_⁄e_vúe_ö°™˚
()

285 
ªt
;

286 
ªåy
 = 0;

287 
vúe_ö°™˚
 *
vi
;

289 
vi
 = 
	`vúe_ö°™˚_¸óã
(
	`gë_√xt_p‹t
());

290 i‡(
vi
 =
NULL
) {

291  
NULL
;

294 
ªt
 = 
	`vúe_£rvî_run
(
vi
);

295 
ªt
 !
VRT_OK
 && 
ªåy
++ < 10) {

296 
	`vúe_ö°™˚_de°roy
(
vi
);

297 
vi
 = 
	`vúe_ö°™˚_¸óã
(
	`gë_√xt_p‹t
());

298 i‡(
vi
 =
NULL
) {

299  
NULL
;

301 
ªt
 = 
	`vúe_£rvî_run
(
vi
);

304 i‡(
ªt
 !
VRT_OK
) {

305 
	`vúe_ö°™˚_de°roy
(
vi
);

306  
NULL
;

309  
vi
;

310 
	}
}

312 
	$show_ã°_ªsu…
(
ªsu…
,*
ã°_c⁄ã¡
,*
îrmsg
)

314 i‡(
ªsu…
 =
VRT_TEST_OK
) {

315 
	`ã°_log_out
("[\033[32mOK\033[0m]: %s", 
ã°_c⁄ã¡
);

316 } i‡(
ªsu…
 =
VRT_TEST_ERR
) {

317 
	`ã°_log_out
("[\033[31mERR\033[0m]: %s, \033[33mÁû cau£: %s\033[0m", 
ã°_c⁄ã¡
,

318 (
îrmsg
==
NULL
||
	`°æí
(errmsg)==0)?"unknown":errmsg);

320 
	}
}

323 
key_ˇche_¨øy
 *
	$key_ˇche_¨øy_¸óã
(
max_poﬁ_size
)

325 
idx
;

326 
key_ˇche_¨øy
 *
kˇ
;

329 i‡(
max_poﬁ_size
 < 10Ë 
NULL
;

331 
kˇ
 = 
	`mÆloc
((*kca));

332 i‡(
kˇ
 =
NULL
)  NULL;

334 
kˇ
->
ˇched_keys_cou¡
 = 0;

335 
kˇ
->
ckeys_wrôe_idx
 = 0;

336 
kˇ
->
max_poﬁ_size
 = max_pool_size;

337 
kˇ
->
ckeys
 = 
NULL
;

338 
	`±hªad_muãx_öô
(&
kˇ
->
pmuãx
,
NULL
);

340 
kˇ
->
ckeys
 = 
	`mÆloc
(
max_poﬁ_size
*(
sds
));

341 
idx
 = 0; idx < 
max_poﬁ_size
; idx ++) {

342 
kˇ
->
ckeys
[
idx
] = 
	`sd£m±y
();

345  
kˇ
;

346 
	}
}

348 
	$key_ˇche_¨øy_de°roy
(
key_ˇche_¨øy
 *
kˇ
)

350 
idx
;

352 i‡(
kˇ
 =
NULL
) ;

354 
	`±hªad_muãx_de°roy
(&
kˇ
->
pmuãx
);

356 i‡(
kˇ
->
ckeys
) {

357 
idx
 = 0; idx < 
kˇ
->
max_poﬁ_size
; idx ++) {

358 
	`sds‰ì
(
kˇ
->
ckeys
[
idx
]);

360 
	`‰ì
(
kˇ
->
ckeys
);

363 
	`‰ì
(
kˇ
);

364 
	}
}

366 
	$key_ˇche_¨øy_öput
(
key_ˇche_¨øy
 *
kˇ
, *
key
, 
size_t
 
keyÀn
)

368 i‡(
kˇ
 =
NULL
 || 
key
 =NULL || 
keyÀn
 =0Ë 
VRT_ERROR
;

370 
	`±hªad_muãx_lock
(&
kˇ
->
pmuãx
);

371 
kˇ
->
ckeys
[kˇ->
ckeys_wrôe_idx
]=
	`sds˝yÀn
(kˇ->ckeys[kˇ->ckeys_wrôe_idx],
key
,
keyÀn
);

372 
kˇ
->
ckeys_wrôe_idx
++;

373 i‡(
kˇ
->
ckeys_wrôe_idx
 >kˇ->
max_poﬁ_size
) {

374 
kˇ
->
ckeys_wrôe_idx
 = 0;

377 i‡(
kˇ
->
ˇched_keys_cou¡
 < kˇ->
max_poﬁ_size
) {

378 
kˇ
->
ˇched_keys_cou¡
++;

380 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

382  
VRT_OK
;

383 
	}
}

385 
sds
 
	$key_ˇche_¨øy_øndom
(
key_ˇche_¨øy
 *
kˇ
)

387 
idx
, 
øndomvÆ
;

388 
sds
 
key
;

390 i‡(
kˇ
 =
NULL
) {

391  
NULL
;

394 
øndomvÆ
 = ()
	`ønd
();

396 
	`±hªad_muãx_lock
(&
kˇ
->
pmuãx
);

397 i‡(
kˇ
->
ˇched_keys_cou¡
 == 0) {

398 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

399  
NULL
;

402 
idx
 = 
øndomvÆ
%()
kˇ
->
ˇched_keys_cou¡
;

404 
key
 = 
	`sdsdup
(
kˇ
->
ckeys
[
idx
]);

405 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

407  
key
;

408 
	}
}

412 
	$gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ªdisRïly
 *
ª∂y
, *
«me
)

414 
sds
 *
löes
;

415 
size_t
 
löe_Àn
, 
Àn
;

416 
cou¡
, 
j
;

417 
vÆue
 = -1;

419 
Àn
 = 
	`°æí
(
«me
);

421 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

422 
	`ã°_log_îr‹
("Reply for 'info' command from vireÅype %d isÉrror",

423 
ª∂y
->
ty≥
);

427 
löes
 = 
	`sds•lôÀn
(
ª∂y
->
°r
,ª∂y->
Àn
,"\r\n",2,&
cou¡
);

428 i‡(
löes
 =
NULL
) {

429 
	`ã°_log_îr‹
("Reply for 'info server' command from vire isÉrror");

433 
j
 = 0; j < 
cou¡
; j ++) {

434 
löe_Àn
 = 
	`sd¶í
(
löes
[
j
]);

435 i‡(
löe_Àn
 > 
Àn
+1 && !
	`°∫cmp
(
«me
, 
löes
[
j
],Üen)) {

436 i‡(
	`°rög2Œ
(
löes
[
j
]+
Àn
+1,
löe_Àn
-Àn-1,&
vÆue
) == 0) {

437 
	`ã°_log_îr‹
("ConvertÖid string %.*sÅoÜong failed",

438 
löe_Àn
-
Àn
-1,
löes
[
j
]+len+1);

439 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

446 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

447  
vÆue
;

448 
	}
}

450 
ªdisRïly
 *
	$°ól_húedis_ªdi§ïly
(
ªdisRïly
 *
r
)

452 
ªdisRïly
 *
ª∂y
;

454 
ª∂y
 = 
	`ˇŒoc
(1,(*reply));

455 i‡(
ª∂y
 =
NULL
) {

456  
NULL
;

459 
ª∂y
->
ty≥
 = 
r
->type;

460 
ª∂y
->
öãgî
 = 
r
->integer;

461 
ª∂y
->
Àn
 = 
r
->len;

462 
ª∂y
->
°r
 = 
r
->str;

463 
ª∂y
->
ñemíts
 = 
r
->elements;

464 
ª∂y
->
ñemít
 = 
r
->element;

466 
r
->
Àn
 = 0;

467 
r
->
°r
 = 
NULL
;

468 
r
->
ñemíts
 = 0;

469 
r
->
ñemít
 = 
NULL
;

471  
ª∂y
;

472 
	}
}

474 
	$check_two_ª∂ys_if_ßme
(
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
)

476 i‡(
ª∂y1
 =
NULL
 || 
ª∂y2
 == NULL) {

480 i‡(
ª∂y1
->
ty≥
 !
ª∂y2
->type) {

484 i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_STRING
 ||

485 
ª∂y1
->
ty≥
 =
REDIS_REPLY_STATUS
 ||

486 
ª∂y1
->
ty≥
 =
REDIS_REPLY_ERROR
) {

487 i‡(
ª∂y1
->
Àn
 !
ª∂y2
->len) {

488  
ª∂y1
->
Àn
-
ª∂y2
->len;

491  
	`memcmp
(
ª∂y1
->
°r
, 
ª∂y2
->°r,Ñïly1->
Àn
);

492 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_ARRAY
) {

493 
size_t
 
j
;

494 i‡(
ª∂y1
->
ñemíts
 !
ª∂y2
->elements) {

495  (
ª∂y1
->
ñemíts
-
ª∂y2
->elements);

498 
j
 = 0; j < 
ª∂y1
->
ñemíts
; j ++) {

499 
ªt
 = 
	`check_two_ª∂ys_if_ßme
(
ª∂y1
->
ñemít
[
j
], 
ª∂y2
->element[j]);

500 i‡(
ªt
 != 0) Ñet;

503 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

504  (
ª∂y1
->
öãgî
-
ª∂y2
->integer);

505 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_NIL
) {

508 
	`ã°_log_îr‹
("ª∂yÅy≥ %d i†îr‹", 
ª∂y1
->
ty≥
);

512 
	}
}

514 
	ss‹t_unô
 {

515 
size_t
 
	mnfõld
;

516 **
	mfõlds
;

517 
	midx_cmp
;

518 (*
	mfcmp
)(const *,const *);

521 
	$ñemít_cmp_mu…i_°ï
(c⁄° *
ñe1
,c⁄° *
ñe2
)

523 
s‹t_unô
 *
su1
 = (s‹t_unô *)
ñe1
, *
su2
 = (s‹t_unô *)
ñe2
;

525 
	`ASSERT
(
su1
->
fcmp
 =
su2
->fcmp);

526 
	`ASSERT
(
su1
->
nfõld
 =
su2
->nfield);

527 
	`ASSERT
(
su1
->
idx_cmp
 =
su2
->idx_cmp);

528 
	`ASSERT
(
su1
->
idx_cmp
 < su1->
nfõld
);

530  
su1
->
	`fcmp
(&(su1->
fõlds
[su1->
idx_cmp
]),&(
su2
->fields[su2->idx_cmp]));

531 
	}
}

534 
	$s‹t_¨øy_by_°ï
(**
ñemít
, 
size_t
 
ñemíts
,

535 
°ï
, 
idx_cmp
, (*
fcmp
)(const *,const *))

537 
s‹t_unô
 *
sus
;

538 
size_t
 
cou¡
, 
j
, 
k
;

540 i‡(
ñemíts
 <= 1)

541  
VRT_OK
;

543 i‡(
°ï
 <= 0)

544  
VRT_ERROR
;

546 i‡(
°ï
 == 1) {

547 
	`qs‹t
(
ñemít
, 
ñemíts
, (*), 
fcmp
);

548  
VRT_OK
;

551 i‡(
ñemíts
%
°ï
 != 0)

552  
VRT_ERROR
;

554 
cou¡
 = 
ñemíts
/
°ï
;

555 i‡(
cou¡
 == 0)

556  
VRT_ERROR
;

557 
sus
 = 
	`ˇŒoc
(
cou¡
,(
s‹t_unô
));

558 
j
 = 0; j < 
cou¡
; j ++) {

559 
sus
[
j
].
nfõld
 = 
°ï
;

560 
sus
[
j
].
idx_cmp
 = idx_cmp;

561 
sus
[
j
].
fcmp
 = fcmp;

562 
sus
[
j
].
fõlds
 = 
	`mÆloc
(
°ï
*(*));

563 
k
 = 0; k < 
°ï
; k ++) {

564 
sus
[
j
].
fõlds
[
k
] = 
ñemít
[j*
°ï
+k];

568 
	`qs‹t
(
sus
, 
cou¡
, (
s‹t_unô
), 
ñemít_cmp_mu…i_°ï
);

570 
j
 = 0; j < 
cou¡
; j ++) {

571 
k
 = 0; k < 
°ï
; k ++) {

572 
ñemít
[
j
*
°ï
+
k
] = 
sus
[j].
fõlds
[k];

574 
	`‰ì
(
sus
[
j
].
fõlds
);

576 
	`‰ì
(
sus
);

577  
VRT_OK
;

578 
	}
}

581 
	$ª∂y_°rög_bö¨y_com∑ª
(c⁄° *
r1
,c⁄° *
r2
)

583 
ªdisRïly
 *
ª∂y1
 = *‘edisRïly **)
r1
, *
ª∂y2
 = *‘edisRïly **)
r2
;

584 
möÀn
;

585 
cmp
;

587 
möÀn
 = (
ª∂y1
->
Àn
 < 
ª∂y2
->len) ?Ñeply1->len:reply2->len;

588 
cmp
 = 
	`memcmp
(
ª∂y1
->
°r
,
ª∂y2
->°r,
möÀn
);

589 i‡(
cmp
 =0Ë 
ª∂y1
->
Àn
 - 
ª∂y2
->len;

590  
cmp
;

591 
	}
}

594 
	$∑r£_comm™d_ty≥s
(*
comm™d_ty≥s_°r
)

596 
ty≥s
 = 0;

597 
sds
 *
ty≥s_°rs
;

598 
ty≥s_cou¡
, 
j
;

600 
ty≥s_°rs
 = 
	`sds•lôÀn
(
comm™d_ty≥s_°r
,
	`°æí
(comm™d_ty≥s_°r),",",1,&
ty≥s_cou¡
);

601 i‡(
ty≥s_°rs
 =
NULL
) {

603 } i‡(
ty≥s_cou¡
 <= 0) {

604 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

608 
j
 = 0; j < 
ty≥s_cou¡
; j ++) {

609 i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"string")) {

610 
ty≥s
 |
TEST_CMD_TYPE_STRING
;

611 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"list")) {

612 
ty≥s
 |
TEST_CMD_TYPE_LIST
;

613 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"set")) {

614 
ty≥s
 |
TEST_CMD_TYPE_SET
;

615 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"zset")) {

616 
ty≥s
 |
TEST_CMD_TYPE_ZSET
;

617 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"hash")) {

618 
ty≥s
 |
TEST_CMD_TYPE_HASH
;

619 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"server")) {

620 
ty≥s
 |
TEST_CMD_TYPE_SERVER
;

621 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"key")) {

622 
ty≥s
 |
TEST_CMD_TYPE_KEY
;

623 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"expire")) {

624 
ty≥s
 |
TEST_CMD_TYPE_EXPIRE
;

626 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

631 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

633  
ty≥s
;

634 
	}
}

637 
d¨øy
 *
	$∑r£_comm™d_li°
(*
comm™d_li°_°r
)

639 
d¨øy
 *
comm™ds
;

640 
sds
 *
comm™d_ñem
;

641 
sds
 *
comm™d_°rs
;

642 
comm™d_cou¡
, 
j
;

644 
comm™d_°rs
 = 
	`sds•lôÀn
(
comm™d_li°_°r
,
	`°æí
(comm™d_li°_°r),",",1,&
comm™d_cou¡
);

645 i‡(
comm™d_°rs
 =
NULL
) {

647 } i‡(
comm™d_cou¡
 <= 0) {

648 
	`sds‰ì•lôªs
(
comm™d_°rs
,
comm™d_cou¡
);

652 
comm™ds
 = 
	`d¨øy_¸óã
(
comm™d_cou¡
, (
sds
));

653 
j
 = 0; j < 
comm™d_cou¡
; j ++) {

654 
comm™d_ñem
 = 
	`d¨øy_push
(
comm™ds
);

655 *
comm™d_ñem
 = 
comm™d_°rs
[
j
];

656 
comm™d_°rs
[
j
] = 
NULL
;

659 
	`sds‰ì•lôªs
(
comm™d_°rs
,
comm™d_cou¡
);

661  
comm™ds
;

662 
	}
}

665 
	$gë_key_ty≥_°rög
(
keyty≥
)

667 
keyty≥
) {

668 
REDIS_STRING
:

671 
REDIS_LIST
:

674 
REDIS_SET
:

677 
REDIS_ZSET
:

680 
REDIS_HASH
:

689 
	}
}

	@tests/vrt_public.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<±hªad.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

13 
	~<d¨øy.h
>

14 
	~<dlog.h
>

16 
	~<vπ_utû.h
>

17 
	~<vπ_public.h
>

20 #i‡
deföed
(
__ATOMIC_RELAXED
)

22 #ñi‡
deföed
(
HAVE_ATOMIC
)

24 
±hªad_muãx_t
 
	g°©e_lockî
 = 
PTHREAD_MUTEX_INITIALIZER
;

27 
	#VIRE_TEST_CONFIG_DEFAULT_EXECUTE_FILE
 "§c/vúe"

	)

29 *
	gexecuã_fûe
 = 
VIRE_TEST_CONFIG_DEFAULT_EXECUTE_FILE
;

31 
sds
 
	gw‹kdú
 = 
NULL
;

33 
	gvúï‹t
 = 55556;

35 
	$£t_execuã_fûe
(*
fûe
)

37 
execuã_fûe
 = 
fûe
;

38 
	}
}

40 
sds
 
	$vúe_c⁄f_¸óã
(*
dú
, 
p‹t
)

42 
sds
 
c⁄f_fûe
;

43 
fd
;

44 
sds
 
löe
;

46 
c⁄f_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.c⁄f",
dú
);

48 
fd
 = 
	`›í
(
c⁄f_fûe
,
O_WRONLY
|
O_CREAT
|
O_TRUNC
,0644);

49 i‡(
fd
 < 0) {

50 
	`ã°_log_îr‹
("O≥¿c⁄‡fûê%†Áûed: %s", 
c⁄f_fûe
, 
	`°ªº‹
(
î∫o
));

51 
	`sds‰ì
(
c⁄f_fûe
);

52  
NULL
;

55 
löe
 = 
	`sd£m±y
();

57 
löe
 = 
	`sdsˇtfmt
÷öe,"p‹à%i\n",
p‹t
);

58 
	`wrôe
(
fd
, 
löe
, 
	`sd¶í
(line));

60 
	`sds˛ór
(
löe
);

61 
löe
 = 
	`sdsˇtfmt
(line,"\n");

62 
	`wrôe
(
fd
, 
löe
, 
	`sd¶í
(line));

64 
	`˛o£
(
fd
);

65 
	`sds‰ì
(
löe
);

66  
c⁄f_fûe
;

67 
	}
}

69 
vúe_ö°™˚
 *
	$vúe_ö°™˚_¸óã
(
p‹t
)

71 
vúe_ö°™˚
 *
vi
;

73 
vi
 = 
	`mÆloc
((
vúe_ö°™˚
));

74 
vi
->
ho°
 = 
NULL
;

75 
vi
->
p‹t
 = 0;

76 
vi
->
dú
 = 
NULL
;

77 
vi
->
c⁄f_fûe
 = 
NULL
;

78 
vi
->
pid_fûe
 = 
NULL
;

79 
vi
->
log_fûe
 = 
NULL
;

80 
vi
->
ru¬ög
 = 0;

81 
vi
->
pid
 = -1;

82 
vi
->
˘x
 = 
NULL
;

84 
vi
->
ho°
 = 
	`sd¢ew
("127.0.0.1");

85 
vi
->
p‹t
 =Öort;

86 
vi
->
dú
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/%i",
w‹kdú
,
p‹t
);

88 i‡(
	`mkdú
(
vi
->
dú
,0755) < 0) {

89 
	`vúe_ö°™˚_de°roy
(
vi
);

90  
NULL
;

93 
vi
->
c⁄f_fûe
 = 
	`vúe_c⁄f_¸óã
(vi->
dú
, 
p‹t
);

94 i‡(
vi
->
c⁄f_fûe
 =
NULL
) {

95 
	`vúe_ö°™˚_de°roy
(
vi
);

96  
NULL
;

99 
vi
->
pid_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.pid",vi->
dú
);

100 
vi
->
log_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.log",vi->
dú
);

102 
	`ã°_log_debug
("vúêho°: %s", 
vi
->
ho°
);

103 
	`ã°_log_debug
("vúêp‹t: %d", 
vi
->
p‹t
);

104 
	`ã°_log_debug
("vúêdú: %s", 
vi
->
dú
);

105 
	`ã°_log_debug
("vúêc⁄f_fûe: %s", 
vi
->
c⁄f_fûe
);

106 
	`ã°_log_debug
("vúêpid_fûe: %s", 
vi
->
pid_fûe
);

107 
	`ã°_log_debug
("vúêlog_fûe: %s", 
vi
->
log_fûe
);

109  
vi
;

110 
	}
}

112 
	$vúe_ö°™˚_de°roy
(
vúe_ö°™˚
 *
vi
)

114 i‡(
vi
->
ru¬ög
) {

115 
	`vúe_£rvî_°›
(
vi
);

118 i‡(
vi
->
dú
) {

119 
	`de°roy_dú
(
vi
->
dú
);

120 
	`sds‰ì
(
vi
->
dú
);

123 i‡(
vi
->
c⁄f_fûe
) {

124 
	`sds‰ì
(
vi
->
c⁄f_fûe
);

127 i‡(
vi
->
pid_fûe
) {

128 
	`sds‰ì
(
vi
->
pid_fûe
);

131 i‡(
vi
->
log_fûe
) {

132 
	`sds‰ì
(
vi
->
log_fûe
);

135 i‡(
vi
->
˘x
) {

136 
	`ªdisFªe
(
vi
->
˘x
);

139 i‡(
vi
->
ho°
) {

140 
	`sds‰ì
(
vi
->
ho°
);

143 
	`‰ì
(
vi
);

144 
	}
}

146 
	$vúe_£rvî_run
(
vúe_ö°™˚
 *
vi
)

148 
ªt
;

149 
pid_t
 
pid
;

150 
°©us
;

151 
timevÆ
 
timeout
 = { 3, 500000 };

153 i‡((
pid
 = 
	`f‹k
()) < 0) {

154 
	`ã°_log_îr‹
("F‹ká chöd faûed: %s", 
	`°ªº‹
(
î∫o
));

155  
VRT_ERROR
;

156 } i‡(
pid
 == 0) {

157 
ªt
 = 
	`exe˛
(
execuã_fûe
,"vúe","-c",
vi
->
c⁄f_fûe
,

158 "-p",
vi
->
pid_fûe
,"-o",vi->
log_fûe
,"-v","8",
NULL
);

159 i‡(
ªt
 < 0) {

160 
	`ã°_log_îr‹
("Exe˛Åhêvúê£rvî faûed: %s", 
	`°ªº‹
(
î∫o
));

161  
VRT_ERROR
;

166 
	`¶ìp
(1);

168 
ªt
 = 
	`waôpid
(
pid
,
NULL
,
WNOHANG
);

169 i‡(
ªt
 != 0) {

170 
	`ã°_log_debug
("Ru¿vúê£rvî’‹à%dËÁûed",
vi
->
p‹t
);

171  
VRT_ERROR
;

174 
vi
->
˘x
 = 
	`ªdisC⁄√˘WôhTimeout
(vi->
ho°
,vi->
p‹t
,
timeout
);

175 i‡(
vi
->
˘x
 =
NULL
 || vi->˘x->
îr
) {

176 
	`ã°_log_îr‹
("ConnectÅo %s:%d failed: %s",

177 
vi
->
ho°
, vi->
p‹t
, vi->
˘x
?vi->˘x->
îr°r
:"out of memory");

178 i‡(
vi
->
˘x
) {

179 
	`ªdisFªe
(
vi
->
˘x
);

180 
vi
->
˘x
 = 
NULL
;

182  
VRT_ERROR
;

185 
vi
->
pid
 = 
	`gë_pid_‰om_ª∂y
(vi->
˘x
,vi->
ho°
,vi->
p‹t
);

186 i‡(
vi
->
pid
 < 0) {

187 
	`ã°_log_îr‹
("GëÖid from %s:%dÑïlyÉº‹", 
vi
->
ho°
, vi->
p‹t
);

188  
VRT_ERROR
;

189 } i‡(
vi
->
pid
 !=Öid) {

190 
	`ã°_log_îr‹
("Gë wr⁄gÖid from %s:%dÑïly", 
vi
->
ho°
, vi->
p‹t
);

191  
VRT_ERROR
;

194 
	`ã°_log_debug
("Ru¿vúê£rvî’‹à%dËsuc˚ss",
vi
->
p‹t
);

196 
vi
->
ru¬ög
 = 1;

198  
VRT_OK
;

199 
	}
}

201 
	$vúe_£rvî_°›
(
vúe_ö°™˚
 *
vi
)

203 
pid
;

205 i‡(!
vi
->
ru¬ög
) ;

207 i‡(
vi
->
pid
 > 0) {

208 
pid
 = 
vi
->pid;

209 } i‡(
vi
->
pid_fûe
) {

210 
fd
;

211 
pid_°r
[20];

212 
size_t
 
ƒód
;

213 
fd
 = 
	`›í
(
vi
->
pid_fûe
, 
O_RDONLY
);

214 i‡(
fd
 < 0) {

215 
	`ã°_log_îr‹
("O≥¿pid fûê%†Áûed", 
vi
->
pid_fûe
);

218 
ƒód
 = 
	`ªad
(
fd
,
pid_°r
,20);

219 i‡(
	`°rög2l
(
pid_°r
,
ƒód
,&
pid
) == 0) {

220 
	`ã°_log_îr‹
("C⁄vîàpid såög %.*†tÿl⁄g faûed",
ƒód
,
pid_°r
);

224 
pid
 = 
	`gë_pid_‰om_ª∂y
(
vi
->
˘x
, vi->
ho°
, vi->
p‹t
);

227 i‡(
pid
 < 0) {

228 
	`ã°_log_îr‹
("GetÖid failed");

232 
	`kûl
(
pid
,9);

234 
vi
->
ru¬ög
 = 0;

235 
vi
->
pid
 = -1;

236 i‡(
vi
->
˘x
) {

237 
	`ªdisFªe
(
vi
->
˘x
);

238 
vi
->
˘x
 = 
NULL
;

240 
	}
}

242 
	$¸óã_w‹k_dú
()

244 
sds
 
dú«me
;

245 
dú«me
 = 
	`sdsˇtfmt
(
	`sd£m±y
(), "tmp_ã°_%I", 
	`vπ_u£c_now
());

246 
w‹kdú
 = 
	`gëAbsﬁuãP©h
(
dú«me
);

247 
	`sds‰ì
(
dú«me
);

249 i‡(
	`¸óã_dú
(
w‹kdú
Ë!
VRT_OK
) {

250 
	`ã°_log_îr‹
("Cª©êw‹kdú %†Áûed",
w‹kdú
);

251  
VRT_ERROR
;

254 
	`ã°_log_debug
("Cª©êw‹kdú: %s",
w‹kdú
);

256  
VRT_OK
;

257 
	}
}

259 
	$de°roy_w‹k_dú
()

261 i‡(
w‹kdú
 =
NULL
Ë 
VRT_OK
;

263 i‡(
	`de°roy_dú
(
w‹kdú
Ë!
VRT_OK
) {

264 
	`ã°_log_îr‹
("Dñëêthêw‹kdú %†Áûed",
w‹kdú
);

266 
	`ã°_log_debug
("Dñëêthêw‹kdú: %s",
w‹kdú
);

269 
	`sds‰ì
(
w‹kdú
);

270 
w‹kdú
 = 
NULL
;

272  
VRT_OK
;

273 
	}
}

275 
	$gë_√xt_p‹t
()

277 
p‹t
 = 
vúï‹t
;

278 
vúï‹t
 += 11;

280  
p‹t
;

281 
	}
}

283 
vúe_ö°™˚
 *
	$°¨t_⁄e_vúe_ö°™˚
()

285 
ªt
;

286 
ªåy
 = 0;

287 
vúe_ö°™˚
 *
vi
;

289 
vi
 = 
	`vúe_ö°™˚_¸óã
(
	`gë_√xt_p‹t
());

290 i‡(
vi
 =
NULL
) {

291  
NULL
;

294 
ªt
 = 
	`vúe_£rvî_run
(
vi
);

295 
ªt
 !
VRT_OK
 && 
ªåy
++ < 10) {

296 
	`vúe_ö°™˚_de°roy
(
vi
);

297 
vi
 = 
	`vúe_ö°™˚_¸óã
(
	`gë_√xt_p‹t
());

298 i‡(
vi
 =
NULL
) {

299  
NULL
;

301 
ªt
 = 
	`vúe_£rvî_run
(
vi
);

304 i‡(
ªt
 !
VRT_OK
) {

305 
	`vúe_ö°™˚_de°roy
(
vi
);

306  
NULL
;

309  
vi
;

310 
	}
}

312 
	$show_ã°_ªsu…
(
ªsu…
,*
ã°_c⁄ã¡
,*
îrmsg
)

314 i‡(
ªsu…
 =
VRT_TEST_OK
) {

315 
	`ã°_log_out
("[\033[32mOK\033[0m]: %s", 
ã°_c⁄ã¡
);

316 } i‡(
ªsu…
 =
VRT_TEST_ERR
) {

317 
	`ã°_log_out
("[\033[31mERR\033[0m]: %s, \033[33mÁû cau£: %s\033[0m", 
ã°_c⁄ã¡
,

318 (
îrmsg
==
NULL
||
	`°æí
(errmsg)==0)?"unknown":errmsg);

320 
	}
}

323 
key_ˇche_¨øy
 *
	$key_ˇche_¨øy_¸óã
(
max_poﬁ_size
)

325 
idx
;

326 
key_ˇche_¨øy
 *
kˇ
;

329 i‡(
max_poﬁ_size
 < 10Ë 
NULL
;

331 
kˇ
 = 
	`mÆloc
((*kca));

332 i‡(
kˇ
 =
NULL
)  NULL;

334 
kˇ
->
ˇched_keys_cou¡
 = 0;

335 
kˇ
->
ckeys_wrôe_idx
 = 0;

336 
kˇ
->
max_poﬁ_size
 = max_pool_size;

337 
kˇ
->
ckeys
 = 
NULL
;

338 
	`±hªad_muãx_öô
(&
kˇ
->
pmuãx
,
NULL
);

340 
kˇ
->
ckeys
 = 
	`mÆloc
(
max_poﬁ_size
*(
sds
));

341 
idx
 = 0; idx < 
max_poﬁ_size
; idx ++) {

342 
kˇ
->
ckeys
[
idx
] = 
	`sd£m±y
();

345  
kˇ
;

346 
	}
}

348 
	$key_ˇche_¨øy_de°roy
(
key_ˇche_¨øy
 *
kˇ
)

350 
idx
;

352 i‡(
kˇ
 =
NULL
) ;

354 
	`±hªad_muãx_de°roy
(&
kˇ
->
pmuãx
);

356 i‡(
kˇ
->
ckeys
) {

357 
idx
 = 0; idx < 
kˇ
->
max_poﬁ_size
; idx ++) {

358 
	`sds‰ì
(
kˇ
->
ckeys
[
idx
]);

360 
	`‰ì
(
kˇ
->
ckeys
);

363 
	`‰ì
(
kˇ
);

364 
	}
}

366 
	$key_ˇche_¨øy_öput
(
key_ˇche_¨øy
 *
kˇ
, *
key
, 
size_t
 
keyÀn
)

368 i‡(
kˇ
 =
NULL
 || 
key
 =NULL || 
keyÀn
 =0Ë 
VRT_ERROR
;

370 
	`±hªad_muãx_lock
(&
kˇ
->
pmuãx
);

371 
kˇ
->
ckeys
[kˇ->
ckeys_wrôe_idx
]=
	`sds˝yÀn
(kˇ->ckeys[kˇ->ckeys_wrôe_idx],
key
,
keyÀn
);

372 
kˇ
->
ckeys_wrôe_idx
++;

373 i‡(
kˇ
->
ckeys_wrôe_idx
 >kˇ->
max_poﬁ_size
) {

374 
kˇ
->
ckeys_wrôe_idx
 = 0;

377 i‡(
kˇ
->
ˇched_keys_cou¡
 < kˇ->
max_poﬁ_size
) {

378 
kˇ
->
ˇched_keys_cou¡
++;

380 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

382  
VRT_OK
;

383 
	}
}

385 
sds
 
	$key_ˇche_¨øy_øndom
(
key_ˇche_¨øy
 *
kˇ
)

387 
idx
, 
øndomvÆ
;

388 
sds
 
key
;

390 i‡(
kˇ
 =
NULL
) {

391  
NULL
;

394 
øndomvÆ
 = ()
	`ønd
();

396 
	`±hªad_muãx_lock
(&
kˇ
->
pmuãx
);

397 i‡(
kˇ
->
ˇched_keys_cou¡
 == 0) {

398 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

399  
NULL
;

402 
idx
 = 
øndomvÆ
%()
kˇ
->
ˇched_keys_cou¡
;

404 
key
 = 
	`sdsdup
(
kˇ
->
ckeys
[
idx
]);

405 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

407  
key
;

408 
	}
}

412 
	$gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ªdisRïly
 *
ª∂y
, *
«me
)

414 
sds
 *
löes
;

415 
size_t
 
löe_Àn
, 
Àn
;

416 
cou¡
, 
j
;

417 
vÆue
 = -1;

419 
Àn
 = 
	`°æí
(
«me
);

421 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

422 
	`ã°_log_îr‹
("Reply for 'info' command from vireÅype %d isÉrror",

423 
ª∂y
->
ty≥
);

427 
löes
 = 
	`sds•lôÀn
(
ª∂y
->
°r
,ª∂y->
Àn
,"\r\n",2,&
cou¡
);

428 i‡(
löes
 =
NULL
) {

429 
	`ã°_log_îr‹
("Reply for 'info server' command from vire isÉrror");

433 
j
 = 0; j < 
cou¡
; j ++) {

434 
löe_Àn
 = 
	`sd¶í
(
löes
[
j
]);

435 i‡(
löe_Àn
 > 
Àn
+1 && !
	`°∫cmp
(
«me
, 
löes
[
j
],Üen)) {

436 i‡(
	`°rög2Œ
(
löes
[
j
]+
Àn
+1,
löe_Àn
-Àn-1,&
vÆue
) == 0) {

437 
	`ã°_log_îr‹
("ConvertÖid string %.*sÅoÜong failed",

438 
löe_Àn
-
Àn
-1,
löes
[
j
]+len+1);

439 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

446 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

447  
vÆue
;

448 
	}
}

450 
ªdisRïly
 *
	$°ól_húedis_ªdi§ïly
(
ªdisRïly
 *
r
)

452 
ªdisRïly
 *
ª∂y
;

454 
ª∂y
 = 
	`ˇŒoc
(1,(*reply));

455 i‡(
ª∂y
 =
NULL
) {

456  
NULL
;

459 
ª∂y
->
ty≥
 = 
r
->type;

460 
ª∂y
->
öãgî
 = 
r
->integer;

461 
ª∂y
->
Àn
 = 
r
->len;

462 
ª∂y
->
°r
 = 
r
->str;

463 
ª∂y
->
ñemíts
 = 
r
->elements;

464 
ª∂y
->
ñemít
 = 
r
->element;

466 
r
->
Àn
 = 0;

467 
r
->
°r
 = 
NULL
;

468 
r
->
ñemíts
 = 0;

469 
r
->
ñemít
 = 
NULL
;

471  
ª∂y
;

472 
	}
}

474 
	$check_two_ª∂ys_if_ßme
(
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
)

476 i‡(
ª∂y1
 =
NULL
 || 
ª∂y2
 == NULL) {

480 i‡(
ª∂y1
->
ty≥
 !
ª∂y2
->type) {

484 i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_STRING
 ||

485 
ª∂y1
->
ty≥
 =
REDIS_REPLY_STATUS
 ||

486 
ª∂y1
->
ty≥
 =
REDIS_REPLY_ERROR
) {

487 i‡(
ª∂y1
->
Àn
 !
ª∂y2
->len) {

488  
ª∂y1
->
Àn
-
ª∂y2
->len;

491  
	`memcmp
(
ª∂y1
->
°r
, 
ª∂y2
->°r,Ñïly1->
Àn
);

492 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_ARRAY
) {

493 
size_t
 
j
;

494 i‡(
ª∂y1
->
ñemíts
 !
ª∂y2
->elements) {

495  (
ª∂y1
->
ñemíts
-
ª∂y2
->elements);

498 
j
 = 0; j < 
ª∂y1
->
ñemíts
; j ++) {

499 
ªt
 = 
	`check_two_ª∂ys_if_ßme
(
ª∂y1
->
ñemít
[
j
], 
ª∂y2
->element[j]);

500 i‡(
ªt
 != 0) Ñet;

503 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

504  (
ª∂y1
->
öãgî
-
ª∂y2
->integer);

505 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_NIL
) {

508 
	`ã°_log_îr‹
("ª∂yÅy≥ %d i†îr‹", 
ª∂y1
->
ty≥
);

512 
	}
}

514 
	ss‹t_unô
 {

515 
size_t
 
	mnfõld
;

516 **
	mfõlds
;

517 
	midx_cmp
;

518 (*
	mfcmp
)(const *,const *);

521 
	$ñemít_cmp_mu…i_°ï
(c⁄° *
ñe1
,c⁄° *
ñe2
)

523 
s‹t_unô
 *
su1
 = (s‹t_unô *)
ñe1
, *
su2
 = (s‹t_unô *)
ñe2
;

525 
	`ASSERT
(
su1
->
fcmp
 =
su2
->fcmp);

526 
	`ASSERT
(
su1
->
nfõld
 =
su2
->nfield);

527 
	`ASSERT
(
su1
->
idx_cmp
 =
su2
->idx_cmp);

528 
	`ASSERT
(
su1
->
idx_cmp
 < su1->
nfõld
);

530  
su1
->
	`fcmp
(&(su1->
fõlds
[su1->
idx_cmp
]),&(
su2
->fields[su2->idx_cmp]));

531 
	}
}

534 
	$s‹t_¨øy_by_°ï
(**
ñemít
, 
size_t
 
ñemíts
,

535 
°ï
, 
idx_cmp
, (*
fcmp
)(const *,const *))

537 
s‹t_unô
 *
sus
;

538 
size_t
 
cou¡
, 
j
, 
k
;

540 i‡(
ñemíts
 <= 1)

541  
VRT_OK
;

543 i‡(
°ï
 <= 0)

544  
VRT_ERROR
;

546 i‡(
°ï
 == 1) {

547 
	`qs‹t
(
ñemít
, 
ñemíts
, (*), 
fcmp
);

548  
VRT_OK
;

551 i‡(
ñemíts
%
°ï
 != 0)

552  
VRT_ERROR
;

554 
cou¡
 = 
ñemíts
/
°ï
;

555 i‡(
cou¡
 == 0)

556  
VRT_ERROR
;

557 
sus
 = 
	`ˇŒoc
(
cou¡
,(
s‹t_unô
));

558 
j
 = 0; j < 
cou¡
; j ++) {

559 
sus
[
j
].
nfõld
 = 
°ï
;

560 
sus
[
j
].
idx_cmp
 = idx_cmp;

561 
sus
[
j
].
fcmp
 = fcmp;

562 
sus
[
j
].
fõlds
 = 
	`mÆloc
(
°ï
*(*));

563 
k
 = 0; k < 
°ï
; k ++) {

564 
sus
[
j
].
fõlds
[
k
] = 
ñemít
[j*
°ï
+k];

568 
	`qs‹t
(
sus
, 
cou¡
, (
s‹t_unô
), 
ñemít_cmp_mu…i_°ï
);

570 
j
 = 0; j < 
cou¡
; j ++) {

571 
k
 = 0; k < 
°ï
; k ++) {

572 
ñemít
[
j
*
°ï
+
k
] = 
sus
[j].
fõlds
[k];

574 
	`‰ì
(
sus
[
j
].
fõlds
);

576 
	`‰ì
(
sus
);

577  
VRT_OK
;

578 
	}
}

581 
	$ª∂y_°rög_bö¨y_com∑ª
(c⁄° *
r1
,c⁄° *
r2
)

583 
ªdisRïly
 *
ª∂y1
 = *‘edisRïly **)
r1
, *
ª∂y2
 = *‘edisRïly **)
r2
;

584 
möÀn
;

585 
cmp
;

587 
möÀn
 = (
ª∂y1
->
Àn
 < 
ª∂y2
->len) ?Ñeply1->len:reply2->len;

588 
cmp
 = 
	`memcmp
(
ª∂y1
->
°r
,
ª∂y2
->°r,
möÀn
);

589 i‡(
cmp
 =0Ë 
ª∂y1
->
Àn
 - 
ª∂y2
->len;

590  
cmp
;

591 
	}
}

594 
	$∑r£_comm™d_ty≥s
(*
comm™d_ty≥s_°r
)

596 
ty≥s
 = 0;

597 
sds
 *
ty≥s_°rs
;

598 
ty≥s_cou¡
, 
j
;

600 
ty≥s_°rs
 = 
	`sds•lôÀn
(
comm™d_ty≥s_°r
,
	`°æí
(comm™d_ty≥s_°r),",",1,&
ty≥s_cou¡
);

601 i‡(
ty≥s_°rs
 =
NULL
) {

603 } i‡(
ty≥s_cou¡
 <= 0) {

604 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

608 
j
 = 0; j < 
ty≥s_cou¡
; j ++) {

609 i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"string")) {

610 
ty≥s
 |
TEST_CMD_TYPE_STRING
;

611 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"list")) {

612 
ty≥s
 |
TEST_CMD_TYPE_LIST
;

613 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"set")) {

614 
ty≥s
 |
TEST_CMD_TYPE_SET
;

615 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"zset")) {

616 
ty≥s
 |
TEST_CMD_TYPE_ZSET
;

617 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"hash")) {

618 
ty≥s
 |
TEST_CMD_TYPE_HASH
;

619 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"server")) {

620 
ty≥s
 |
TEST_CMD_TYPE_SERVER
;

621 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"key")) {

622 
ty≥s
 |
TEST_CMD_TYPE_KEY
;

623 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"expire")) {

624 
ty≥s
 |
TEST_CMD_TYPE_EXPIRE
;

626 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

631 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

633  
ty≥s
;

634 
	}
}

637 
d¨øy
 *
	$∑r£_comm™d_li°
(*
comm™d_li°_°r
)

639 
d¨øy
 *
comm™ds
;

640 
sds
 *
comm™d_ñem
;

641 
sds
 *
comm™d_°rs
;

642 
comm™d_cou¡
, 
j
;

644 
comm™d_°rs
 = 
	`sds•lôÀn
(
comm™d_li°_°r
,
	`°æí
(comm™d_li°_°r),",",1,&
comm™d_cou¡
);

645 i‡(
comm™d_°rs
 =
NULL
) {

647 } i‡(
comm™d_cou¡
 <= 0) {

648 
	`sds‰ì•lôªs
(
comm™d_°rs
,
comm™d_cou¡
);

652 
comm™ds
 = 
	`d¨øy_¸óã
(
comm™d_cou¡
, (
sds
));

653 
j
 = 0; j < 
comm™d_cou¡
; j ++) {

654 
comm™d_ñem
 = 
	`d¨øy_push
(
comm™ds
);

655 *
comm™d_ñem
 = 
comm™d_°rs
[
j
];

656 
comm™d_°rs
[
j
] = 
NULL
;

659 
	`sds‰ì•lôªs
(
comm™d_°rs
,
comm™d_cou¡
);

661  
comm™ds
;

662 
	}
}

665 
	$gë_key_ty≥_°rög
(
keyty≥
)

667 
keyty≥
) {

668 
REDIS_STRING
:

671 
REDIS_LIST
:

674 
REDIS_SET
:

677 
REDIS_ZSET
:

680 
REDIS_HASH
:

689 
	}
}

	@tests/vrt_public.h

1 #i‚de‡
_VRT_PUBLIC_H_


2 
	#_VRT_PUBLIC_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 
	~<uni°d.h
>

12 
	~<húedis.h
>

14 
	gd¨øy
;

15 
	gkey_ˇche_poﬁ
;

17 
	#VRT_TEST_OK
 0

	)

18 
	#VRT_TEST_ERR
 1

	)

20 
	#TEST_CMD_TYPE_STRING
 (1<<0)

	)

21 
	#TEST_CMD_TYPE_LIST
 (1<<1)

	)

22 
	#TEST_CMD_TYPE_SET
 (1<<2)

	)

23 
	#TEST_CMD_TYPE_ZSET
 (1<<3)

	)

24 
	#TEST_CMD_TYPE_HASH
 (1<<4)

	)

25 
	#TEST_CMD_TYPE_SERVER
 (1<<5)

	)

26 
	#TEST_CMD_TYPE_KEY
 (1<<6)

	)

27 
	#TEST_CMD_TYPE_EXPIRE
 (1<<7)

	)

30 
	#REDIS_STRING
 0

	)

31 
	#REDIS_LIST
 1

	)

32 
	#REDIS_SET
 2

	)

33 
	#REDIS_ZSET
 3

	)

34 
	#REDIS_HASH
 4

	)

38 #i‡
deföed
(
__ATOMIC_RELAXED
)

39 
	#upd©e_°©e_add
(
_vÆue
, 
_n
Ë
	`__©omic_add_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

40 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
Ë
	`__©omic_sub_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

41 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
Ë
	`__©omic_°‹e_n
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

42 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

43 
	`__©omic_lﬂd
(&
_vÆue
, 
_v
, 
__ATOMIC_RELAXED
); \

44 } 0)

	)

46 
	#TEST_STATE_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

48 #ñi‡
deföed
(
HAVE_ATOMIC
)

49 
	#upd©e_°©e_add
(
_vÆue
, 
_n
Ë
	`__sync_add_™d_„tch
(&_vÆue, (_n))

	)

50 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
Ë
	`__sync_sub_™d_„tch
(&_vÆue, (_n))

	)

51 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&_vÆue, (_n))

	)

52 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

53 (*
_v
Ë
	`__sync_add_™d_„tch
(&
_vÆue
, 0); \

54 } 0)

	)

56 
	#TEST_STATE_LOCK_TYPE
 "HAVE_ATOMIC"

	)

58 
±hªad_muãx_t
 
°©e_lockî
;

60 
	#upd©e_°©e_add
(
_vÆue
, 
_n
) do { \

61 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

62 
_vÆue
 +(
_n
); \

63 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

64 } 0)

	)

66 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
) do { \

67 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

68 
_vÆue
 -(
_n
); \

69 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

70 } 0)

	)

72 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
) do { \

73 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

74 
_vÆue
 = (
_n
); \

75 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

76 } 0)

	)

78 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

79 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

80 (*
_v
Ë
_vÆue
; \

81 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

82 } 0)

	)

84 
	#TEST_STATE_LOCK_TYPE
 "±hªad_muãx_lock"

	)

87 
	svúe_ö°™˚
 {

88 
sds
 
	mho°
;

89 
	mp‹t
;

91 
sds
 
	mdú
;

92 
sds
 
	mc⁄f_fûe
;

93 
sds
 
	mpid_fûe
;

94 
sds
 
	mlog_fûe
;

96 
	mru¬ög
;

97 
	mpid
;

98 
ªdisC⁄ãxt
 *
	m˘x
;

99 } 
	tvúe_ö°™˚
;

101 
£t_execuã_fûe
(*
fûe
);

103 
vúe_ö°™˚
 *
vúe_ö°™˚_¸óã
(
p‹t
);

104 
vúe_ö°™˚_de°roy
(
vúe_ö°™˚
 *
vi
);

106 
vúe_£rvî_run
(
vúe_ö°™˚
 *
vi
);

107 
vúe_£rvî_°›
(
vúe_ö°™˚
 *
vi
);

109 
¸óã_w‹k_dú
();

110 
de°roy_w‹k_dú
();

112 
vúe_ö°™˚
 *
°¨t_⁄e_vúe_ö°™˚
();

114 
show_ã°_ªsu…
(
ªsu…
,*
ã°_c⁄ã¡
,*
îrmsg
);

116 
	skey_ˇche_¨øy
 {

117 
	mˇched_keys_cou¡
;

118 
	mckeys_wrôe_idx
;

119 
	mmax_poﬁ_size
;

120 
sds
 *
	mckeys
;

121 
±hªad_muãx_t
 
	mpmuãx
;

122 } 
	tkey_ˇche_¨øy
;

124 
key_ˇche_¨øy
 *
key_ˇche_¨øy_¸óã
(
max_poﬁ_size
);

125 
key_ˇche_¨øy_de°roy
(
key_ˇche_¨øy
 *
kˇ
);

126 
key_ˇche_¨øy_öput
(
key_ˇche_¨øy
 *
kˇ
, *
key
, 
size_t
 
keyÀn
);

127 
sds
 
key_ˇche_¨øy_øndom
(
key_ˇche_¨øy
 *
kˇ
);

129 
gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ªdisRïly
 *
ª∂y
, *
«me
);

131 
ªdisRïly
 *
°ól_húedis_ªdi§ïly
‘edisRïly *
r
);

132 
check_two_ª∂ys_if_ßme
(
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
);

133 
s‹t_¨øy_by_°ï
(**
ñemít
, 
size_t
 
ñemíts
, 
°ï
, 
idx_cmp
, (*
fcmp
)(const *,const *));

134 
	`ª∂y_°rög_bö¨y_com∑ª
(c⁄° *
r1
,c⁄° *
r2
);

136 
	`∑r£_comm™d_ty≥s
(*
comm™d_ty≥s_°r
);

137 
d¨øy
 *
	`∑r£_comm™d_li°
(*
comm™d_li°_°r
);

139 *
	`gë_key_ty≥_°rög
(
keyty≥
);

	@tests/vrt_public.h

1 #i‚de‡
_VRT_PUBLIC_H_


2 
	#_VRT_PUBLIC_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 
	~<uni°d.h
>

12 
	~<húedis.h
>

14 
	gd¨øy
;

15 
	gkey_ˇche_poﬁ
;

17 
	#VRT_TEST_OK
 0

	)

18 
	#VRT_TEST_ERR
 1

	)

20 
	#TEST_CMD_TYPE_STRING
 (1<<0)

	)

21 
	#TEST_CMD_TYPE_LIST
 (1<<1)

	)

22 
	#TEST_CMD_TYPE_SET
 (1<<2)

	)

23 
	#TEST_CMD_TYPE_ZSET
 (1<<3)

	)

24 
	#TEST_CMD_TYPE_HASH
 (1<<4)

	)

25 
	#TEST_CMD_TYPE_SERVER
 (1<<5)

	)

26 
	#TEST_CMD_TYPE_KEY
 (1<<6)

	)

27 
	#TEST_CMD_TYPE_EXPIRE
 (1<<7)

	)

30 
	#REDIS_STRING
 0

	)

31 
	#REDIS_LIST
 1

	)

32 
	#REDIS_SET
 2

	)

33 
	#REDIS_ZSET
 3

	)

34 
	#REDIS_HASH
 4

	)

38 #i‡
deföed
(
__ATOMIC_RELAXED
)

39 
	#upd©e_°©e_add
(
_vÆue
, 
_n
Ë
	`__©omic_add_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

40 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
Ë
	`__©omic_sub_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

41 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
Ë
	`__©omic_°‹e_n
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

42 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

43 
	`__©omic_lﬂd
(&
_vÆue
, 
_v
, 
__ATOMIC_RELAXED
); \

44 } 0)

	)

46 
	#TEST_STATE_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

48 #ñi‡
deföed
(
HAVE_ATOMIC
)

49 
	#upd©e_°©e_add
(
_vÆue
, 
_n
Ë
	`__sync_add_™d_„tch
(&_vÆue, (_n))

	)

50 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
Ë
	`__sync_sub_™d_„tch
(&_vÆue, (_n))

	)

51 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&_vÆue, (_n))

	)

52 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

53 (*
_v
Ë
	`__sync_add_™d_„tch
(&
_vÆue
, 0); \

54 } 0)

	)

56 
	#TEST_STATE_LOCK_TYPE
 "HAVE_ATOMIC"

	)

58 
±hªad_muãx_t
 
°©e_lockî
;

60 
	#upd©e_°©e_add
(
_vÆue
, 
_n
) do { \

61 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

62 
_vÆue
 +(
_n
); \

63 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

64 } 0)

	)

66 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
) do { \

67 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

68 
_vÆue
 -(
_n
); \

69 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

70 } 0)

	)

72 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
) do { \

73 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

74 
_vÆue
 = (
_n
); \

75 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

76 } 0)

	)

78 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

79 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

80 (*
_v
Ë
_vÆue
; \

81 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

82 } 0)

	)

84 
	#TEST_STATE_LOCK_TYPE
 "±hªad_muãx_lock"

	)

87 
	svúe_ö°™˚
 {

88 
sds
 
	mho°
;

89 
	mp‹t
;

91 
sds
 
	mdú
;

92 
sds
 
	mc⁄f_fûe
;

93 
sds
 
	mpid_fûe
;

94 
sds
 
	mlog_fûe
;

96 
	mru¬ög
;

97 
	mpid
;

98 
ªdisC⁄ãxt
 *
	m˘x
;

99 } 
	tvúe_ö°™˚
;

101 
£t_execuã_fûe
(*
fûe
);

103 
vúe_ö°™˚
 *
vúe_ö°™˚_¸óã
(
p‹t
);

104 
vúe_ö°™˚_de°roy
(
vúe_ö°™˚
 *
vi
);

106 
vúe_£rvî_run
(
vúe_ö°™˚
 *
vi
);

107 
vúe_£rvî_°›
(
vúe_ö°™˚
 *
vi
);

109 
¸óã_w‹k_dú
();

110 
de°roy_w‹k_dú
();

112 
vúe_ö°™˚
 *
°¨t_⁄e_vúe_ö°™˚
();

114 
show_ã°_ªsu…
(
ªsu…
,*
ã°_c⁄ã¡
,*
îrmsg
);

116 
	skey_ˇche_¨øy
 {

117 
	mˇched_keys_cou¡
;

118 
	mckeys_wrôe_idx
;

119 
	mmax_poﬁ_size
;

120 
sds
 *
	mckeys
;

121 
±hªad_muãx_t
 
	mpmuãx
;

122 } 
	tkey_ˇche_¨øy
;

124 
key_ˇche_¨øy
 *
key_ˇche_¨øy_¸óã
(
max_poﬁ_size
);

125 
key_ˇche_¨øy_de°roy
(
key_ˇche_¨øy
 *
kˇ
);

126 
key_ˇche_¨øy_öput
(
key_ˇche_¨øy
 *
kˇ
, *
key
, 
size_t
 
keyÀn
);

127 
sds
 
key_ˇche_¨øy_øndom
(
key_ˇche_¨øy
 *
kˇ
);

129 
gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ªdisRïly
 *
ª∂y
, *
«me
);

131 
ªdisRïly
 *
°ól_húedis_ªdi§ïly
‘edisRïly *
r
);

132 
check_two_ª∂ys_if_ßme
(
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
);

133 
s‹t_¨øy_by_°ï
(**
ñemít
, 
size_t
 
ñemíts
, 
°ï
, 
idx_cmp
, (*
fcmp
)(const *,const *));

134 
	`ª∂y_°rög_bö¨y_com∑ª
(c⁄° *
r1
,c⁄° *
r2
);

136 
	`∑r£_comm™d_ty≥s
(*
comm™d_ty≥s_°r
);

137 
d¨øy
 *
	`∑r£_comm™d_li°
(*
comm™d_li°_°r
);

139 *
	`gë_key_ty≥_°rög
(
keyty≥
);

	@tests/vrt_simple.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

13 
	~<vπ_utû.h
>

14 
	~<vπ_public.h
>

15 
	~<vπ_sim∂e.h
>

17 
	#ERRMSG_MAX_LEN
 
LOG_MAX_LEN
-100

	)

18 
	gîrmsg
[
ERRMSG_MAX_LEN
];

20 
	$sim∂e_ã°_cmd_gë_£t
(
vúe_ö°™˚
 *
vi
)

22 *
key
 = "test_cmd_get_set-key";

23 *
vÆue
 = "test_cmd_get_set-value";

24 *
MESSAGE
 = "GET/SET simpleÅest";

25 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

27 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
vÆue
);

28 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

29 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

30 
îr‹
;

32 
	`‰ìRïlyObje˘
(
ª∂y
);

34 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

35 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

36 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

37 
îr‹
;

39 
	`‰ìRïlyObje˘
(
ª∂y
);

40 
ª∂y
 = 
NULL
;

42 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

46 
îr‹
:

48 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

50 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

51 
îrmsg
[0] = '\0';

54 
	}
}

56 
	$sim∂e_ã°_cmd_£äx
(
vúe_ö°™˚
 *
vi
)

58 *
key
 = "test_cmd_setnx-key";

59 *
vÆue
 = "test_cmd_setnx-value";

60 *
MESSAGE
 = "SETNX simpleÅest";

61 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

63 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

64 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

65 
îr‹
;

67 
	`‰ìRïlyObje˘
(
ª∂y
);

69 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£äx %†%s", 
key
, 
vÆue
);

70 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

71 
ª∂y
->
öãgî
 != 1) {

72 
îr‹
;

74 
	`‰ìRïlyObje˘
(
ª∂y
);

76 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

77 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

78 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

79 
îr‹
;

81 
	`‰ìRïlyObje˘
(
ª∂y
);

83 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£äx %†%s", 
key
, 
vÆue
);

84 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

85 
ª∂y
->
öãgî
 != 0) {

86 
îr‹
;

88 
	`‰ìRïlyObje˘
(
ª∂y
);

90 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

94 
îr‹
:

96 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

98 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

99 
îrmsg
[0] = '\0';

102 
	}
}

104 
	$sim∂e_ã°_cmd_£ãx
(
vúe_ö°™˚
 *
vi
)

106 *
key
 = "test_cmd_setex-key";

107 *
vÆue
 = "test_cmd_setex-value";

108 
£c⁄ds
 = 100;

109 *
MESSAGE
 = "SETEX simpleÅest";

110 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

112 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£ãx %†%Œd %s", 
key
, 
£c⁄ds
, 
vÆue
);

113 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

114 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

115 
îr‹
;

117 
	`‰ìRïlyObje˘
(
ª∂y
);

119 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

120 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

121 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

122 
îr‹
;

124 
	`‰ìRïlyObje˘
(
ª∂y
);

126 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "â»%s", 
key
);

127 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

128 
ª∂y
->
öãgî
 > 
£c⁄ds
 ||Ñeply->integer < seconds - 2) {

129 
îr‹
;

131 
	`‰ìRïlyObje˘
(
ª∂y
);

133 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

137 
îr‹
:

139 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

141 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

142 
îrmsg
[0] = '\0';

145 
	}
}

147 
	$sim∂e_ã°_cmd_p£ãx
(
vúe_ö°™˚
 *
vi
)

149 *
key
 = "test_cmd_psetex-key";

150 *
vÆue
 = "test_cmd_psetex-value";

151 
mûli£c⁄ds
 = 100000;

152 *
MESSAGE
 = "PSETEX simpleÅest";

153 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

155 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "p£ãx %†%Œd %s", 
key
, 
mûli£c⁄ds
, 
vÆue
);

156 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

157 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

158 
îr‹
;

160 
	`‰ìRïlyObje˘
(
ª∂y
);

162 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

163 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

164 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

165 
îr‹
;

167 
	`‰ìRïlyObje˘
(
ª∂y
);

169 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "±é %s", 
key
);

170 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

171 
ª∂y
->
öãgî
 > 
mûli£c⁄ds
 ||Ñeply->integer < milliseconds - 2000) {

172 
îr‹
;

174 
	`‰ìRïlyObje˘
(
ª∂y
);

176 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

180 
îr‹
:

182 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

184 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

185 
îrmsg
[0] = '\0';

188 
	}
}

190 
	$sim∂e_ã°_cmd_ö¸
(
vúe_ö°™˚
 *
vi
)

192 *
key
 = "test_cmd_incr-key";

193 
n
 = 0, 
ö¸_times
 = 100;

194 *
MESSAGE
 = "INCR simpleÅest";

195 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

197 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

198 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

199 
îr‹
;

201 
	`‰ìRïlyObje˘
(
ª∂y
);

203 
n
 < 
ö¸_times
) {

204 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

205 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

206 
ª∂y
->
öãgî
 !
n
+1) {

207 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸ %ŒdÅime†îr‹", 
n
+1);

208 
îr‹
;

210 
	`‰ìRïlyObje˘
(
ª∂y
);

212 
n
 ++;

215 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

216 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

217 
îr‹
;

219 
vÆue
;

220 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
Ë|| vÆuê!
ö¸_times
) {

221 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrÅo %lldÉrror, %s in fact",

222 
ö¸_times
, 
ª∂y
->
°r
);

223 
îr‹
;

226 
	`‰ìRïlyObje˘
(
ª∂y
);

228 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

229 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

230 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

231 
îr‹
;

233 
	`‰ìRïlyObje˘
(
ª∂y
);

235 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

236 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

237 
îr‹
;

239 
	`‰ìRïlyObje˘
(
ª∂y
);

241 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

245 
îr‹
:

247 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

249 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

250 
îrmsg
[0] = '\0';

253 
	}
}

255 
	$sim∂e_ã°_cmd_de¸
(
vúe_ö°™˚
 *
vi
)

257 *
key
 = "test_cmd_decr-key";

258 
n
 = 0, 
de¸_times
 = 100;

259 *
MESSAGE
 = "DECR simpleÅest";

260 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

262 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

263 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

264 
îr‹
;

266 
	`‰ìRïlyObje˘
(
ª∂y
);

268 
n
 < 
de¸_times
) {

269 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸ %s", 
key
);

270 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

271 
ª∂y
->
öãgî
 + 
n
 != -1) {

272 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸ %ŒdÅime†îr‹", 
n
+1);

273 
îr‹
;

275 
	`‰ìRïlyObje˘
(
ª∂y
);

277 
n
 ++;

280 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

281 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

282 
îr‹
;

284 
vÆue
;

285 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
Ë|| vÆuê+ 
de¸_times
 != 0) {

286 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrÅo -%lldÉrror, %s in fact",

287 
de¸_times
, 
ª∂y
->
°r
);

288 
îr‹
;

291 
	`‰ìRïlyObje˘
(
ª∂y
);

293 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

294 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

295 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

296 
îr‹
;

298 
	`‰ìRïlyObje˘
(
ª∂y
);

300 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

301 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

302 
îr‹
;

304 
	`‰ìRïlyObje˘
(
ª∂y
);

306 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

310 
îr‹
:

312 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

314 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

315 
îrmsg
[0] = '\0';

318 
	}
}

320 
	$sim∂e_ã°_cmd_ö¸by
(
vúe_ö°™˚
 *
vi
)

322 *
key
 = "test_cmd_incrby-key";

323 
n
 = 0, 
ö¸by_times
 = 100, 
ö¸by_°ï
 = 3;

324 *
MESSAGE
 = "INCRBY simpleÅest";

325 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

327 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

328 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

329 
îr‹
;

331 
	`‰ìRïlyObje˘
(
ª∂y
);

333 
n
 < 
ö¸by_times
) {

334 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸by %†%Œd", 
key
, 
ö¸by_°ï
);

335 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

336 
ª∂y
->
öãgî
 !(
n
+1)*
ö¸by_°ï
) {

337 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrby %lld %lldÅimesÉrror",

338 
ö¸by_°ï
, 
n
+1);

339 
îr‹
;

341 
	`‰ìRïlyObje˘
(
ª∂y
);

343 
n
 ++;

346 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

347 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

348 
îr‹
;

350 
vÆue
;

351 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
) ||

352 
vÆue
 !
ö¸by_times
*
ö¸by_°ï
) {

353 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrbyÅo %lldÉrror, %s in fact",

354 
ö¸by_times
*
ö¸by_°ï
, 
ª∂y
->
°r
);

355 
îr‹
;

358 
	`‰ìRïlyObje˘
(
ª∂y
);

360 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

361 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

362 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

363 
îr‹
;

365 
	`‰ìRïlyObje˘
(
ª∂y
);

367 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸by %†%Œd", 
key
, 
ö¸by_°ï
);

368 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

369 
îr‹
;

371 
	`‰ìRïlyObje˘
(
ª∂y
);

373 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

377 
îr‹
:

379 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

381 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

382 
îrmsg
[0] = '\0';

385 
	}
}

387 
	$sim∂e_ã°_cmd_de¸by
(
vúe_ö°™˚
 *
vi
)

389 *
key
 = "test_cmd_decrby-key";

390 
n
 = 0, 
de¸by_times
 = 100, 
de¸by_°ï
 = 3;

391 *
MESSAGE
 = "DECRBY simpleÅest";

392 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

394 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

395 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

396 
îr‹
;

398 
	`‰ìRïlyObje˘
(
ª∂y
);

400 
n
 < 
de¸by_times
) {

401 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸by %†%Œd", 
key
, 
de¸by_°ï
);

402 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

403 
ª∂y
->
öãgî
 + (
n
+1)*
de¸by_°ï
 != 0) {

404 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrby %lld %lldÅimesÉrror",

405 
de¸by_°ï
, 
n
+1);

406 
îr‹
;

408 
	`‰ìRïlyObje˘
(
ª∂y
);

410 
n
 ++;

413 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

414 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

415 
îr‹
;

417 
vÆue
;

418 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
) ||

419 
vÆue
 + 
de¸by_times
*
de¸by_°ï
 != 0) {

420 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrbyÅo -%lldÉrror, %s in fact",

421 
de¸by_times
*
de¸by_°ï
, 
ª∂y
->
°r
);

422 
îr‹
;

425 
	`‰ìRïlyObje˘
(
ª∂y
);

427 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

428 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

429 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

430 
îr‹
;

432 
	`‰ìRïlyObje˘
(
ª∂y
);

434 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸by %†%Œd", 
key
, 
de¸by_°ï
);

435 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

436 
îr‹
;

438 
	`‰ìRïlyObje˘
(
ª∂y
);

440 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

444 
îr‹
:

446 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

448 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

449 
îrmsg
[0] = '\0';

452 
	}
}

454 
	$sim∂e_ã°_cmd_≠≥nd
(
vúe_ö°™˚
 *
vi
)

456 *
key
 = "test_cmd_append-key";

457 *
föÆ_vÆue
 = "pqwpioqjqwoiuqiorueljsakhdflkqueuquewqwei[oqfiqpq-0ewrq0hdalkjz.zhjaidhfioahd";

458 *
°¨t
 = 
föÆ_vÆue
, *
pos
 = sèπ, *
íd
 = föÆ_vÆue+
	`°æí
(final_value);

459 
°ï
 = 3, 
Àn
;

460 
buf
[20];

461 *
MESSAGE
 = "APPEND simpleÅest";

462 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

464 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

465 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

466 
îr‹
;

468 
	`‰ìRïlyObje˘
(
ª∂y
);

470 
pos
 < 
íd
) {

471 
Àn
 = (
íd
-
pos
 >
°ï
) ? step : (end-pos);

472 
	`mem˝y
(
buf
,
pos
,
Àn
);

473 
buf
[
Àn
] = '\0';

474 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "≠≥nd %†%s", 
key
, 
buf
);

475 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

476 
îr‹
;

477 } i‡(
ª∂y
->
öãgî
 !
pos
-
°¨t
+
Àn
) {

478 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "append %s %sÉrror",

479 
key
, 
buf
);

480 
îr‹
;

482 
	`‰ìRïlyObje˘
(
ª∂y
);

484 
pos
 +
Àn
;

487 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

488 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

489 
ª∂y
->
Àn
 !
	`°æí
(
föÆ_vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,final_value)) {

490 
îr‹
;

492 
	`‰ìRïlyObje˘
(
ª∂y
);

494 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

498 
îr‹
:

500 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

502 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

503 
îrmsg
[0] = '\0';

506 
	}
}

508 
	$sim∂e_ã°_cmd_°æí
(
vúe_ö°™˚
 *
vi
)

510 *
key
 = "test_cmd_strlen-key";

511 *
vÆue
 = "test_cmd_strlen-value";

512 *
MESSAGE
 = "STRLEN simpleÅest";

513 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

515 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
vÆue
);

516 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

517 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

518 
îr‹
;

520 
	`‰ìRïlyObje˘
(
ª∂y
);

522 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "°æí %s", 
key
);

523 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

524 
ª∂y
->
öãgî
 !
	`°æí
(
vÆue
)) {

525 
îr‹
;

527 
	`‰ìRïlyObje˘
(
ª∂y
);

528 
ª∂y
 = 
NULL
;

530 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

534 
îr‹
:

536 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

538 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

539 
îrmsg
[0] = '\0';

542 
	}
}

544 
	$sim∂e_ã°_cmd_gë£t
(
vúe_ö°™˚
 *
vi
)

546 *
key
 = "test_cmd_getset-key";

547 *
ﬁdvÆue
 = "test_cmd_getset-oldvalue";

548 *
√wvÆue
 = "test_cmd_getset-newvalue";

549 *
MESSAGE
 = "GETSET simpleÅest";

550 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

552 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
ﬁdvÆue
);

553 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

554 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

555 
îr‹
;

557 
	`‰ìRïlyObje˘
(
ª∂y
);

559 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë£à%†%s", 
key
, 
√wvÆue
);

560 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

561 
ª∂y
->
Àn
 !
	`°æí
(
ﬁdvÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,oldvalue)) {

562 
îr‹
;

564 
	`‰ìRïlyObje˘
(
ª∂y
);

566 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

567 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

568 
ª∂y
->
Àn
 !
	`°æí
(
√wvÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,newvalue)) {

569 
îr‹
;

571 
	`‰ìRïlyObje˘
(
ª∂y
);

573 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

577 
îr‹
:

579 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

581 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

582 
îrmsg
[0] = '\0';

585 
	}
}

587 
	$sim∂e_ã°_cmd_ö¸byÊﬂt
(
vúe_ö°™˚
 *
vi
)

589 *
key
 = "test_cmd_incrbyfloat-key";

590 *
föÆ_vÆue
 = "314.00000000000000022";

591 
n
 = 0, 
ö¸by_times
 = 100;

592 
ö¸byÊﬂt_°ï
 = 3.14;

593 *
MESSAGE
 = "INCRBYFLOAT simpleÅest";

594 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

596 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

597 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

598 
îr‹
;

600 
	`‰ìRïlyObje˘
(
ª∂y
);

602 
n
 < 
ö¸by_times
) {

603 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸byÊﬂà%†%f", 
key
, 
ö¸byÊﬂt_°ï
);

604 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

605 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrbyfloat %f %lldÅimesÉrror",

606 
ö¸byÊﬂt_°ï
, 
n
+1);

607 
îr‹
;

609 
	`‰ìRïlyObje˘
(
ª∂y
);

611 
n
 ++;

614 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

615 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

616 
	`°rcmp
(
ª∂y
->
°r
,
föÆ_vÆue
)) {

617 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸byÊﬂàtÿ%†îr‹", 
föÆ_vÆue
);

618 
îr‹
;

620 
	`‰ìRïlyObje˘
(
ª∂y
);

622 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

623 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

624 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

625 
îr‹
;

627 
	`‰ìRïlyObje˘
(
ª∂y
);

629 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸byÊﬂà%†%f", 
key
, 
ö¸byÊﬂt_°ï
);

630 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

631 
îr‹
;

633 
	`‰ìRïlyObje˘
(
ª∂y
);

635 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

639 
îr‹
:

641 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

643 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

644 
îrmsg
[0] = '\0';

647 
	}
}

649 
	$sim∂e_ã°_cmd_gëbô_£tbô_bôcou¡
(
vúe_ö°™˚
 *
vi
)

651 *
key
 = "test_cmd_getbit_setbit_bitcount-key";

652 *
MESSAGE
 = "GETBIT/SETBIT/BITCOUNT simpleÅest";

653 
begö
 = 11, 
°ï
 = 3, 
times
 = 79, 
n
;

654 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

656 
n
 = 0;

657 
n
 < 
times
) {

658 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†%d 1", 
key
, 
begö
+
n
*
°ï
);

659 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

660 
ª∂y
->
öãgî
 != 0) {

661 
îr‹
;

663 
	`‰ìRïlyObje˘
(
ª∂y
);

665 
n
 ++;

668 
n
 = 0;

669 
n
 < 
times
) {

670 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gëbô %†%d", 
key
, 
begö
+
n
*
°ï
);

671 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

672 
ª∂y
->
öãgî
 != 1) {

673 
îr‹
;

675 
	`‰ìRïlyObje˘
(
ª∂y
);

677 
n
 ++;

680 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôcou¡ %s", 
key
);

681 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

682 
ª∂y
->
öãgî
 !
times
) {

683 
îr‹
;

685 
	`‰ìRïlyObje˘
(
ª∂y
);

687 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

691 
îr‹
:

693 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

695 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

696 
îrmsg
[0] = '\0';

699 
	}
}

701 
	$sim∂e_ã°_cmd_gëønge_£å™ge
(
vúe_ö°™˚
 *
vi
)

703 *
key
 = "test_cmd_getrange_setrange-key";

704 *
MESSAGE
 = "GETRANGE/SETRANGE simpleÅest";

705 *
ønge_vÆue
 = "o090pl[]m,187h";

706 
begö
 = 11, 
°ï
 = 53, 
times
 = 79, 
n
;

707 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

709 
n
 = 0;

710 
n
 < 
times
) {

711 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "setrange %s %d %s",

712 
key
, 
begö
+
n
*
°ï
, 
ønge_vÆue
);

713 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

714 
ª∂y
->
öãgî
 !
begö
+
n
*
°ï
+
	`°æí
(
ønge_vÆue
)) {

715 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setrange %s %d %sÉrror",

716 
key
, 
begö
+
n
*
°ï
, 
ønge_vÆue
);

717 
îr‹
;

719 
	`‰ìRïlyObje˘
(
ª∂y
);

721 
n
 ++;

724 
n
 = 0;

725 
n
 < 
times
) {

726 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gëøngê%†%d %d", 
key
,

727 
begö
+
n
*
°ï
, begö+n*°ï+
	`°æí
(
ønge_vÆue
)-1);

728 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

729 
ª∂y
->
Àn
 !
	`°æí
(
ønge_vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,Ñange_value)) {

730 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "getrange %s %d %dÉrror",

731 
key
, 
begö
+
n
*
°ï
, begö+n*°ï+
	`°æí
(
ønge_vÆue
)-1);

732 
îr‹
;

734 
	`‰ìRïlyObje˘
(
ª∂y
);

736 
n
 ++;

739 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

743 
îr‹
:

745 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

747 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

748 
îrmsg
[0] = '\0';

751 
	}
}

753 
	$sim∂e_ã°_cmd_bôpos
(
vúe_ö°™˚
 *
vi
)

755 *
key
 = "test_cmd_bitpos-key";

756 *
MESSAGE
 = "BITPOS simpleÅest";

757 
pos
 = 11;

758 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

760 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

761 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

762 
îr‹
;

764 
	`‰ìRïlyObje˘
(
ª∂y
);

766 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

767 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

768 
ª∂y
->
öãgî
 != -1) {

769 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1 firstÅimeÉrror",

770 
key
);

771 
îr‹
;

773 
	`‰ìRïlyObje˘
(
ª∂y
);

775 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†1 0", 
key
);

776 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

777 
ª∂y
->
öãgî
 != 0) {

778 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setbit %s 1 0Érror",

779 
key
);

780 
îr‹
;

782 
	`‰ìRïlyObje˘
(
ª∂y
);

784 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

785 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

786 
ª∂y
->
öãgî
 != -1) {

787 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1 secondÅimeÉrror",

788 
key
);

789 
îr‹
;

791 
	`‰ìRïlyObje˘
(
ª∂y
);

793 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†%d 1", 
key
, 
pos
);

794 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

795 
ª∂y
->
öãgî
 != 0) {

796 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setbit %s %d 1Érror",

797 
key
, 
pos
);

798 
îr‹
;

800 
	`‰ìRïlyObje˘
(
ª∂y
);

802 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

803 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

804 
ª∂y
->
öãgî
 !
pos
) {

805 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1ÅhirdÅimeÉrror",

806 
key
);

807 
îr‹
;

809 
	`‰ìRïlyObje˘
(
ª∂y
);

811 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

815 
îr‹
:

817 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

819 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

820 
îrmsg
[0] = '\0';

823 
	}
}

825 
	#MGET_MSET_KEYS_COUNT
 333

	)

826 
	$sim∂e_ã°_cmd_mgë_m£t
(
vúe_ö°™˚
 *
vi
)

828 *
key
 = "test_cmd_mget_mset-key";

829 *
vÆue
 = "test_cmd_mget_mset-value";

830 *
MESSAGE
 = "MGET/MSET simpleÅest";

831 
keys
[
MGET_MSET_KEYS_COUNT
][30];

832 
vÆues
[
MGET_MSET_KEYS_COUNT
][30];

833 *
¨gv
[1+2*
MGET_MSET_KEYS_COUNT
];

834 
size_t
 
¨gvÀn
[1+2*
MGET_MSET_KEYS_COUNT
];

835 
j
, 
idx
;

836 
ªdisRïly
 *
ª∂y
 = 
NULL
;

838 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

839 
	`vπ_s˙¥ötf
(
keys
[
j
], 30,"%s%d", 
key
, j);

840 
	`vπ_s˙¥ötf
(
vÆues
[
j
], 30,"%s%d", 
vÆue
, j);

843 
¨gv
[0] = "mset";

844 
¨gvÀn
[0] = 
	`°æí
(
¨gv
[0]);

845 
idx
 = 1;

846 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

847 
¨gv
[
idx
] = 
keys
[
j
];

848 
¨gvÀn
[
idx
++] = 
	`°æí
(
keys
[
j
]);

849 
¨gv
[
idx
] = 
vÆues
[
j
];

850 
¨gvÀn
[
idx
++] = 
	`°æí
(
vÆues
[
j
]);

853 
ª∂y
 = 
	`ªdisComm™dArgv
(
vi
->
˘x
, 1+2*
MGET_MSET_KEYS_COUNT
, 
¨gv
, 
¨gvÀn
);

854 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

855 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

856 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "mset %d keysÉrror",

857 
MGET_MSET_KEYS_COUNT
);

858 
îr‹
;

860 
	`‰ìRïlyObje˘
(
ª∂y
);

862 
¨gv
[0] = "mget";

863 
¨gvÀn
[0] = 
	`°æí
(
¨gv
[0]);

864 
j
 = 1; j < 1+
MGET_MSET_KEYS_COUNT
; j ++) {

865 
¨gv
[
j
] = 
keys
[j-1];

866 
¨gvÀn
[
j
] = 
	`°æí
(
¨gv
[j]);

869 
ª∂y
 = 
	`ªdisComm™dArgv
(
vi
->
˘x
, 1+
MGET_MSET_KEYS_COUNT
, 
¨gv
, 
¨gvÀn
);

870 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ARRAY
 ||

871 
ª∂y
->
ñemíts
 !
MGET_MSET_KEYS_COUNT
) {

872 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "mget %d keysÉrror",

873 
MGET_MSET_KEYS_COUNT
);

874 
îr‹
;

876 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

877 
ªdisRïly
 *
ª∂y_sub
 = 
ª∂y
->
ñemít
[
j
];

878 i‡(
ª∂y_sub
 =
NULL
 ||

879 
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

880 
ª∂y_sub
->
Àn
 !
	`°æí
(
vÆues
[
j
]) ||

881 
	`°rcmp
(
ª∂y_sub
->
°r
, 
vÆues
[
j
]))

882 
îr‹
;

884 
	`‰ìRïlyObje˘
(
ª∂y
);

885 
ª∂y
 = 
NULL
;

887 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

891 
îr‹
:

893 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

895 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

896 
îrmsg
[0] = '\0';

899 
	}
}

901 
	#TEST_HASH_ENCODED_ZIPLIST
 0

	)

902 
	#TEST_HASH_ENCODED_HT
 1

	)

903 
	#TEST_HASH_ENCODED_CAUSED_BY_FILED
 0

	)

904 
	#TEST_HASH_ENCODED_CAUSED_BY_VALUE
 1

	)

905 
	#TEST_HASH_ENCODED_CAUSED_BY_ALL
 2

	)

906 
	#TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
 56

	)

907 
	#TEST_HASH_ENCODED_HT_FIELD_COUNT
 678

	)

908 
	#TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
 21

	)

909 
	#TEST_HASH_ENCODED_HT_VALUE_LEN
 111

	)

911 
	sã°_hash_membî
 {

912 *
	mfõld
;

913 *
	mvÆue
;

916 
	$ã°_hash_membî_Àngth
(
ã°_hash_membî
 **
thms
)

918 
j
 = 0;

919 
thms
[
j
]) {

920 
j
 ++;

922  
j
;

923 
	}
}

925 
	$ã°_hash_membîs_de°roy
(
ã°_hash_membî
 **
thms
)

927 
j
 = 0;

928 
thms
[
j
]) {

929 
	`‰ì
(
thms
[
j
]->
fõld
);

930 
	`‰ì
(
thms
[
j
]->
vÆue
);

931 
	`‰ì
(
thms
[
j
]);

932 
j
 ++;

934 
	`‰ì
(
thms
);

935 
	}
}

937 
ã°_hash_membî
 **
	$sim∂e_ã°_hash_öô
(
vúe_ö°™˚
 *
vi
, *
key
, 
hash_ícode
, 
ícode_ˇu£
)

939 *
fõld
 = "test_hash-field";

940 *
vÆue
 = "test_hash-value";

941 
fõld_cou¡
, 
vÆue_Àn
;

942 
j
,
n
;

943 
ã°_hash_membî
 **
thms
 = 
NULL
;

944 
ªdisRïly
 *
ª∂y
 = 
NULL
;

946 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

947 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

948 
îr‹
;

950 
	`‰ìRïlyObje˘
(
ª∂y
);

952 i‡(
hash_ícode
 =
TEST_HASH_ENCODED_ZIPLIST
) {

953 
fõld_cou¡
 = 
TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
;

954 
vÆue_Àn
 = 
TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
;

955 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_FILED
) {

956 
fõld_cou¡
 = 
TEST_HASH_ENCODED_HT_FIELD_COUNT
;

957 
vÆue_Àn
 = 
TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
;

958 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_VALUE
) {

959 
fõld_cou¡
 = 
TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
;

960 
vÆue_Àn
 = 
TEST_HASH_ENCODED_HT_VALUE_LEN
;

961 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_ALL
) {

962 
fõld_cou¡
 = 
TEST_HASH_ENCODED_HT_FIELD_COUNT
;

963 
vÆue_Àn
 = 
TEST_HASH_ENCODED_HT_VALUE_LEN
;

966 
thms
 = 
	`mÆloc
((
fõld_cou¡
+1)*(
ã°_hash_membî
*));

967 
j
 = 0; j < 
fõld_cou¡
; j ++) {

968 
thms
[
j
] = 
	`mÆloc
((
ã°_hash_membî
));

969 
thms
[
j
]->
fõld
 = 
	`mÆloc
(30*());

970 
thms
[
j
]->
vÆue
 = 
	`mÆloc
((
vÆue_Àn
+1)*());

971 
	`vπ_s˙¥ötf
(
thms
[
j
]->
fõld
, 30, "%s%d", field, j);

972 
n
 = 
	`vπ_s˙¥ötf
(
thms
[
j
]->
vÆue
, 
vÆue_Àn
, "%s%d", value, j);

973 i‡(
n
 < 
vÆue_Àn
) {

974 
	`mem£t
(
thms
[
j
]->
vÆue
,'x',
vÆue_Àn
-
n
);

975 
thms
[
j
]->
vÆue
[
vÆue_Àn
] = '\0';

978 
thms
[
fõld_cou¡
] = 
NULL
;

980 
j
 = 0; j < 
fõld_cou¡
; j ++) {

981 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hset %s %s %s",

982 
key
, 
thms
[
j
]->
fõld
,Åhms[j]->
vÆue
);

983 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

984 
ª∂y
->
öãgî
 != 1) {

985 
îr‹
;

987 
	`‰ìRïlyObje˘
(
ª∂y
);

990 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

991 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

992 
ª∂y
->
öãgî
 !
fõld_cou¡
) {

993 
îr‹
;

995 
	`‰ìRïlyObje˘
(
ª∂y
);

997 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "obje˘Éncodög %s", 
key
);

998 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

999 
îr‹
;

1001 i‡(
hash_ícode
 =
TEST_HASH_ENCODED_ZIPLIST
) {

1002 if(
ª∂y
->
Àn
 !7 || 
	`°rcmp
‘ïly->
°r
, "ziplist")) {

1003 
îr‹
;

1006 if(
ª∂y
->
Àn
 !9 || 
	`°rcmp
‘ïly->
°r
, "hashtable")) {

1007 
îr‹
;

1011 
	`‰ìRïlyObje˘
(
ª∂y
);

1013  
thms
;

1015 
îr‹
:

1017 i‡(
thms
) {

1018 
	`ã°_hash_membîs_de°roy
(
thms
);

1019 
thms
 = 
NULL
;

1022 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1024  
NULL
;

1025 
	}
}

1027 
	$sim∂e_ã°_hash_ícode
(
vúe_ö°™˚
 *
vi
)

1029 *
key
 = "test_hash_encode";

1030 *
MESSAGE
 = "HASH ENCODE simpleÅest";

1031 
ã°_hash_membî
 **
thms
;

1033 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_ZIPLIST
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1034 i‡(
thms
 =
NULL
) {

1035 
îr‹
;

1037 
	`ã°_hash_membîs_de°roy
(
thms
);

1038 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_ZIPLIST
,
TEST_HASH_ENCODED_CAUSED_BY_VALUE
);

1039 i‡(
thms
 =
NULL
) {

1040 
îr‹
;

1042 
	`ã°_hash_membîs_de°roy
(
thms
);

1043 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1044 i‡(
thms
 =
NULL
) {

1045 
îr‹
;

1047 
	`ã°_hash_membîs_de°roy
(
thms
);

1048 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_VALUE
);

1049 i‡(
thms
 =
NULL
) {

1050 
îr‹
;

1052 
	`ã°_hash_membîs_de°roy
(
thms
);

1053 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_ALL
);

1054 i‡(
thms
 =
NULL
) {

1055 
îr‹
;

1057 
	`ã°_hash_membîs_de°roy
(
thms
);

1059 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1063 
îr‹
:

1065 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1066 
îrmsg
[0] = '\0';

1069 
	}
}

1071 
	$sim∂e_ã°_cmd_hgë_h£t
(
vúe_ö°™˚
 *
vi
)

1073 *
key
 = "test_cmd_hget_hset-key";

1074 *
fõld
 = "test_cmd_hget_hset-field";

1075 *
vÆue
 = "test_cmd_hget_hset-value";

1076 *
MESSAGE
 = "HGET/HSET simpleÅest";

1077 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1078 
ã°_hash_membî
 **
thms
 = 
NULL
;

1079 
idx
;

1081 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1082 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1083 
îr‹
;

1085 
	`‰ìRïlyObje˘
(
ª∂y
);

1087 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%†%s", 
key
, 
fõld
, 
vÆue
);

1088 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1089 
ª∂y
->
öãgî
 != 1) {

1090 
îr‹
;

1092 
	`‰ìRïlyObje˘
(
ª∂y
);

1094 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
fõld
);

1095 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1096 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

1097 
îr‹
;

1099 
	`‰ìRïlyObje˘
(
ª∂y
);

1101 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1102 i‡(
thms
 =
NULL
) {

1103 
îr‹
;

1105 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%†%s", 
key
, 
fõld
, 
vÆue
);

1106 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1107 
ª∂y
->
öãgî
 != 1) {

1108 
îr‹
;

1110 
	`‰ìRïlyObje˘
(
ª∂y
);

1111 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
fõld
);

1112 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1113 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

1114 
îr‹
;

1116 
	`‰ìRïlyObje˘
(
ª∂y
);

1117 
idx
 = 
	`ã°_hash_membî_Àngth
(
thms
)/2;

1118 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1119 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1120 
ª∂y
->
Àn
 !
	`°æí
(
thms
[
idx
]->
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,thms[idx]->value)) {

1121 
îr‹
;

1123 
	`‰ìRïlyObje˘
(
ª∂y
);

1124 
	`ã°_hash_membîs_de°roy
(
thms
);

1126 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1130 
îr‹
:

1132 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1133 i‡(
thms
Ë
	`ã°_hash_membîs_de°roy
(thms);

1135 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1136 
îrmsg
[0] = '\0';

1139 
	}
}

1141 
	$sim∂e_ã°_cmd_hÀn
(
vúe_ö°™˚
 *
vi
)

1143 *
key
 = "test_cmd_hlen-key";

1144 *
fõld
 = "test_cmd_hlen-field";

1145 *
vÆue
 = "test_cmd_hlen-value";

1146 *
MESSAGE
 = "HLEN simpleÅest";

1147 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1148 
hash_Àn
, 
j
;

1150 
hash_Àn
 = 51;

1151 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1152 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1153 
îr‹
;

1155 
	`‰ìRïlyObje˘
(
ª∂y
);

1156 
j
 = 0; j < 
hash_Àn
; j ++) {

1157 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 
j
, 
vÆue
);

1158 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1159 
ª∂y
->
öãgî
 != 1) {

1160 
îr‹
;

1162 
	`‰ìRïlyObje˘
(
ª∂y
);

1164 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

1165 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1166 
ª∂y
->
öãgî
 !
hash_Àn
) {

1167 
îr‹
;

1169 
	`‰ìRïlyObje˘
(
ª∂y
);

1171 
hash_Àn
 = 5111;

1172 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1173 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1174 
îr‹
;

1176 
	`‰ìRïlyObje˘
(
ª∂y
);

1177 
j
 = 0; j < 
hash_Àn
; j ++) {

1178 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 
j
, 
vÆue
);

1179 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1180 
ª∂y
->
öãgî
 != 1) {

1181 
îr‹
;

1183 
	`‰ìRïlyObje˘
(
ª∂y
);

1185 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

1186 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1187 
ª∂y
->
öãgî
 !
hash_Àn
) {

1188 
îr‹
;

1190 
	`‰ìRïlyObje˘
(
ª∂y
);

1192 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1196 
îr‹
:

1198 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1200 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1201 
îrmsg
[0] = '\0';

1204 
	}
}

1206 
	$sim∂e_ã°_cmd_hdñ
(
vúe_ö°™˚
 *
vi
)

1208 *
key
 = "test_cmd_hdel-key";

1209 *
fõld
 = "test_cmd_hdel-field";

1210 *
vÆue
 = "test_cmd_hdel-value";

1211 *
MESSAGE
 = "HDEL simpleÅest";

1212 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1213 
ã°_hash_membî
 **
thms
 = 
NULL
;

1214 
idx
;

1216 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1217 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1218 
îr‹
;

1220 
	`‰ìRïlyObje˘
(
ª∂y
);

1222 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 1, 
vÆue
);

1223 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1224 
ª∂y
->
öãgî
 != 1) {

1225 
îr‹
;

1227 
	`‰ìRïlyObje˘
(
ª∂y
);

1228 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 2, 
vÆue
);

1229 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1230 
ª∂y
->
öãgî
 != 1) {

1231 
îr‹
;

1233 
	`‰ìRïlyObje˘
(
ª∂y
);

1235 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s%d", 
key
, 
fõld
, 1);

1236 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1237 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
, value)) {

1238 
îr‹
;

1240 
	`‰ìRïlyObje˘
(
ª∂y
);

1241 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s%d", 
key
, 
fõld
, 1);

1242 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1243 
ª∂y
->
öãgî
 != 1) {

1244 
îr‹
;

1246 
	`‰ìRïlyObje˘
(
ª∂y
);

1247 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s%d", 
key
, 
fõld
, 1);

1248 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_NIL
) {

1249 
îr‹
;

1251 
	`‰ìRïlyObje˘
(
ª∂y
);

1253 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s%d", 
key
, 
fõld
, 2);

1254 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1255 
ª∂y
->
öãgî
 != 1) {

1256 
îr‹
;

1258 
	`‰ìRïlyObje˘
(
ª∂y
);

1259 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "exi°†%s", 
key
);

1260 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1261 
ª∂y
->
öãgî
 != 0) {

1262 
îr‹
;

1264 
	`‰ìRïlyObje˘
(
ª∂y
);

1266 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1267 i‡(
thms
 =
NULL
) {

1268 
îr‹
;

1270 
idx
 = 
	`ã°_hash_membî_Àngth
(
thms
)/2;

1271 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1272 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1273 
ª∂y
->
öãgî
 != 1) {

1274 
îr‹
;

1276 
	`‰ìRïlyObje˘
(
ª∂y
);

1277 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1278 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_NIL
) {

1279 
îr‹
;

1281 
	`‰ìRïlyObje˘
(
ª∂y
);

1282 
	`ã°_hash_membîs_de°roy
(
thms
);

1284 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1288 
îr‹
:

1290 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1291 i‡(
thms
Ë
	`ã°_hash_membîs_de°roy
(thms);

1293 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1294 
îrmsg
[0] = '\0';

1297 
	}
}

1299 
	$sim∂e_ã°_cmd_pÁdd_pfcou¡
(
vúe_ö°™˚
 *
vi
)

1301 *
key
 = "test_cmd_pfadd_pfcount-key";

1302 *
vÆue
 = "test_cmd_pfadd_pfcount-value";

1303 *
MESSAGE
 = "PFADD/PFCOUNT simpleÅest";

1304 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1305 
n
 = 0, 
cou¡
 = 20329, 
ª≥©
;

1307 
ª≥©
 < 2) {

1308 
ex≥˘_cou¡
;

1309 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "pÁdd %†%s%d", 
key
, 
vÆue
, 
n
++);

1310 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

1311 
îr‹
;

1313 
	`‰ìRïlyObje˘
(
ª∂y
);

1314 i‡(
n
 >
cou¡
) {

1315 
ª≥©
++;

1316 
n
 = 0;

1319 i‡(
ª≥©
 == 0) {

1320 
ex≥˘_cou¡
 = 
n
;

1322 
ex≥˘_cou¡
 = 
cou¡
;

1325 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "pfcou¡ %s", 
key
);

1326 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

1327 
îr‹
;

1329 i‡(
ª∂y
->
öãgî
 !()
ex≥˘_cou¡
) {

1330 
mi°ake
 = (()
ex≥˘_cou¡
-()
ª∂y
->
öãgî
)/()expect_count;

1331 i‡(
mi°ake
 < -0.02 || mistake > 0.02) {

1332 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "pfadd %d differentÉlements isÇotápproximatedÖfcountÑeturned %lld, mistake %f",

1333 
ex≥˘_cou¡
, 
ª∂y
->
öãgî
, 
mi°ake
);

1334 
îr‹
;

1337 
	`‰ìRïlyObje˘
(
ª∂y
);

1340 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1344 
îr‹
:

1346 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1348 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1349 
îrmsg
[0] = '\0';

1352 
	}
}

1354 
	$sim∂e_ã°
()

1356 
vúe_ö°™˚
 *
vi
;

1357 
ok_cou¡
 = 0, 
Æl_cou¡
 = 0;

1359 
vi
 = 
	`°¨t_⁄e_vúe_ö°™˚
();

1360 i‡(
vi
 =
NULL
) {

1361 
	`ã°_log_îr‹
("Run vire instance failed");

1365 
îrmsg
[0] = '\0';

1368 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gë_£t
(
vi
); 
Æl_cou¡
++;

1369 
ok_cou¡
+=
	`sim∂e_ã°_cmd_£äx
(
vi
); 
Æl_cou¡
++;

1370 
ok_cou¡
+=
	`sim∂e_ã°_cmd_£ãx
(
vi
); 
Æl_cou¡
++;

1371 
ok_cou¡
+=
	`sim∂e_ã°_cmd_p£ãx
(
vi
); 
Æl_cou¡
++;

1372 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸
(
vi
); 
Æl_cou¡
++;

1373 
ok_cou¡
+=
	`sim∂e_ã°_cmd_de¸
(
vi
); 
Æl_cou¡
++;

1374 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸by
(
vi
); 
Æl_cou¡
++;

1375 
ok_cou¡
+=
	`sim∂e_ã°_cmd_de¸by
(
vi
); 
Æl_cou¡
++;

1376 
ok_cou¡
+=
	`sim∂e_ã°_cmd_≠≥nd
(
vi
); 
Æl_cou¡
++;

1377 
ok_cou¡
+=
	`sim∂e_ã°_cmd_°æí
(
vi
); 
Æl_cou¡
++;

1378 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gë£t
(
vi
); 
Æl_cou¡
++;

1379 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸byÊﬂt
(
vi
); 
Æl_cou¡
++;

1380 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gëbô_£tbô_bôcou¡
(
vi
); 
Æl_cou¡
++;

1381 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gëønge_£å™ge
(
vi
); 
Æl_cou¡
++;

1382 
ok_cou¡
+=
	`sim∂e_ã°_cmd_bôpos
(
vi
); 
Æl_cou¡
++;

1383 
ok_cou¡
+=
	`sim∂e_ã°_cmd_mgë_m£t
(
vi
); 
Æl_cou¡
++;

1385 
ok_cou¡
+=
	`sim∂e_ã°_hash_ícode
(
vi
); 
Æl_cou¡
++;

1386 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hgë_h£t
(
vi
); 
Æl_cou¡
++;

1387 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hÀn
(
vi
); 
Æl_cou¡
++;

1388 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hdñ
(
vi
); 
Æl_cou¡
++;

1390 
ok_cou¡
+=
	`sim∂e_ã°_cmd_pÁdd_pfcou¡
(
vi
); 
Æl_cou¡
++;

1392 
	`vúe_ö°™˚_de°roy
(
vi
);

1394  
ok_cou¡
==
Æl_cou¡
?1:0;

1395 
	}
}

	@tests/vrt_simple.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

13 
	~<vπ_utû.h
>

14 
	~<vπ_public.h
>

15 
	~<vπ_sim∂e.h
>

17 
	#ERRMSG_MAX_LEN
 
LOG_MAX_LEN
-100

	)

18 
	gîrmsg
[
ERRMSG_MAX_LEN
];

20 
	$sim∂e_ã°_cmd_gë_£t
(
vúe_ö°™˚
 *
vi
)

22 *
key
 = "test_cmd_get_set-key";

23 *
vÆue
 = "test_cmd_get_set-value";

24 *
MESSAGE
 = "GET/SET simpleÅest";

25 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

27 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
vÆue
);

28 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

29 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

30 
îr‹
;

32 
	`‰ìRïlyObje˘
(
ª∂y
);

34 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

35 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

36 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

37 
îr‹
;

39 
	`‰ìRïlyObje˘
(
ª∂y
);

40 
ª∂y
 = 
NULL
;

42 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

46 
îr‹
:

48 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

50 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

51 
îrmsg
[0] = '\0';

54 
	}
}

56 
	$sim∂e_ã°_cmd_£äx
(
vúe_ö°™˚
 *
vi
)

58 *
key
 = "test_cmd_setnx-key";

59 *
vÆue
 = "test_cmd_setnx-value";

60 *
MESSAGE
 = "SETNX simpleÅest";

61 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

63 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

64 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

65 
îr‹
;

67 
	`‰ìRïlyObje˘
(
ª∂y
);

69 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£äx %†%s", 
key
, 
vÆue
);

70 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

71 
ª∂y
->
öãgî
 != 1) {

72 
îr‹
;

74 
	`‰ìRïlyObje˘
(
ª∂y
);

76 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

77 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

78 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

79 
îr‹
;

81 
	`‰ìRïlyObje˘
(
ª∂y
);

83 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£äx %†%s", 
key
, 
vÆue
);

84 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

85 
ª∂y
->
öãgî
 != 0) {

86 
îr‹
;

88 
	`‰ìRïlyObje˘
(
ª∂y
);

90 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

94 
îr‹
:

96 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

98 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

99 
îrmsg
[0] = '\0';

102 
	}
}

104 
	$sim∂e_ã°_cmd_£ãx
(
vúe_ö°™˚
 *
vi
)

106 *
key
 = "test_cmd_setex-key";

107 *
vÆue
 = "test_cmd_setex-value";

108 
£c⁄ds
 = 100;

109 *
MESSAGE
 = "SETEX simpleÅest";

110 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

112 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£ãx %†%Œd %s", 
key
, 
£c⁄ds
, 
vÆue
);

113 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

114 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

115 
îr‹
;

117 
	`‰ìRïlyObje˘
(
ª∂y
);

119 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

120 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

121 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

122 
îr‹
;

124 
	`‰ìRïlyObje˘
(
ª∂y
);

126 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "â»%s", 
key
);

127 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

128 
ª∂y
->
öãgî
 > 
£c⁄ds
 ||Ñeply->integer < seconds - 2) {

129 
îr‹
;

131 
	`‰ìRïlyObje˘
(
ª∂y
);

133 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

137 
îr‹
:

139 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

141 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

142 
îrmsg
[0] = '\0';

145 
	}
}

147 
	$sim∂e_ã°_cmd_p£ãx
(
vúe_ö°™˚
 *
vi
)

149 *
key
 = "test_cmd_psetex-key";

150 *
vÆue
 = "test_cmd_psetex-value";

151 
mûli£c⁄ds
 = 100000;

152 *
MESSAGE
 = "PSETEX simpleÅest";

153 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

155 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "p£ãx %†%Œd %s", 
key
, 
mûli£c⁄ds
, 
vÆue
);

156 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

157 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

158 
îr‹
;

160 
	`‰ìRïlyObje˘
(
ª∂y
);

162 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

163 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

164 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

165 
îr‹
;

167 
	`‰ìRïlyObje˘
(
ª∂y
);

169 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "±é %s", 
key
);

170 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

171 
ª∂y
->
öãgî
 > 
mûli£c⁄ds
 ||Ñeply->integer < milliseconds - 2000) {

172 
îr‹
;

174 
	`‰ìRïlyObje˘
(
ª∂y
);

176 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

180 
îr‹
:

182 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

184 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

185 
îrmsg
[0] = '\0';

188 
	}
}

190 
	$sim∂e_ã°_cmd_ö¸
(
vúe_ö°™˚
 *
vi
)

192 *
key
 = "test_cmd_incr-key";

193 
n
 = 0, 
ö¸_times
 = 100;

194 *
MESSAGE
 = "INCR simpleÅest";

195 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

197 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

198 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

199 
îr‹
;

201 
	`‰ìRïlyObje˘
(
ª∂y
);

203 
n
 < 
ö¸_times
) {

204 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

205 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

206 
ª∂y
->
öãgî
 !
n
+1) {

207 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸ %ŒdÅime†îr‹", 
n
+1);

208 
îr‹
;

210 
	`‰ìRïlyObje˘
(
ª∂y
);

212 
n
 ++;

215 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

216 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

217 
îr‹
;

219 
vÆue
;

220 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
Ë|| vÆuê!
ö¸_times
) {

221 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrÅo %lldÉrror, %s in fact",

222 
ö¸_times
, 
ª∂y
->
°r
);

223 
îr‹
;

226 
	`‰ìRïlyObje˘
(
ª∂y
);

228 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

229 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

230 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

231 
îr‹
;

233 
	`‰ìRïlyObje˘
(
ª∂y
);

235 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

236 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

237 
îr‹
;

239 
	`‰ìRïlyObje˘
(
ª∂y
);

241 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

245 
îr‹
:

247 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

249 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

250 
îrmsg
[0] = '\0';

253 
	}
}

255 
	$sim∂e_ã°_cmd_de¸
(
vúe_ö°™˚
 *
vi
)

257 *
key
 = "test_cmd_decr-key";

258 
n
 = 0, 
de¸_times
 = 100;

259 *
MESSAGE
 = "DECR simpleÅest";

260 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

262 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

263 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

264 
îr‹
;

266 
	`‰ìRïlyObje˘
(
ª∂y
);

268 
n
 < 
de¸_times
) {

269 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸ %s", 
key
);

270 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

271 
ª∂y
->
öãgî
 + 
n
 != -1) {

272 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸ %ŒdÅime†îr‹", 
n
+1);

273 
îr‹
;

275 
	`‰ìRïlyObje˘
(
ª∂y
);

277 
n
 ++;

280 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

281 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

282 
îr‹
;

284 
vÆue
;

285 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
Ë|| vÆuê+ 
de¸_times
 != 0) {

286 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrÅo -%lldÉrror, %s in fact",

287 
de¸_times
, 
ª∂y
->
°r
);

288 
îr‹
;

291 
	`‰ìRïlyObje˘
(
ª∂y
);

293 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

294 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

295 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

296 
îr‹
;

298 
	`‰ìRïlyObje˘
(
ª∂y
);

300 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

301 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

302 
îr‹
;

304 
	`‰ìRïlyObje˘
(
ª∂y
);

306 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

310 
îr‹
:

312 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

314 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

315 
îrmsg
[0] = '\0';

318 
	}
}

320 
	$sim∂e_ã°_cmd_ö¸by
(
vúe_ö°™˚
 *
vi
)

322 *
key
 = "test_cmd_incrby-key";

323 
n
 = 0, 
ö¸by_times
 = 100, 
ö¸by_°ï
 = 3;

324 *
MESSAGE
 = "INCRBY simpleÅest";

325 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

327 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

328 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

329 
îr‹
;

331 
	`‰ìRïlyObje˘
(
ª∂y
);

333 
n
 < 
ö¸by_times
) {

334 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸by %†%Œd", 
key
, 
ö¸by_°ï
);

335 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

336 
ª∂y
->
öãgî
 !(
n
+1)*
ö¸by_°ï
) {

337 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrby %lld %lldÅimesÉrror",

338 
ö¸by_°ï
, 
n
+1);

339 
îr‹
;

341 
	`‰ìRïlyObje˘
(
ª∂y
);

343 
n
 ++;

346 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

347 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

348 
îr‹
;

350 
vÆue
;

351 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
) ||

352 
vÆue
 !
ö¸by_times
*
ö¸by_°ï
) {

353 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrbyÅo %lldÉrror, %s in fact",

354 
ö¸by_times
*
ö¸by_°ï
, 
ª∂y
->
°r
);

355 
îr‹
;

358 
	`‰ìRïlyObje˘
(
ª∂y
);

360 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

361 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

362 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

363 
îr‹
;

365 
	`‰ìRïlyObje˘
(
ª∂y
);

367 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸by %†%Œd", 
key
, 
ö¸by_°ï
);

368 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

369 
îr‹
;

371 
	`‰ìRïlyObje˘
(
ª∂y
);

373 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

377 
îr‹
:

379 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

381 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

382 
îrmsg
[0] = '\0';

385 
	}
}

387 
	$sim∂e_ã°_cmd_de¸by
(
vúe_ö°™˚
 *
vi
)

389 *
key
 = "test_cmd_decrby-key";

390 
n
 = 0, 
de¸by_times
 = 100, 
de¸by_°ï
 = 3;

391 *
MESSAGE
 = "DECRBY simpleÅest";

392 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

394 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

395 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

396 
îr‹
;

398 
	`‰ìRïlyObje˘
(
ª∂y
);

400 
n
 < 
de¸by_times
) {

401 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸by %†%Œd", 
key
, 
de¸by_°ï
);

402 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

403 
ª∂y
->
öãgî
 + (
n
+1)*
de¸by_°ï
 != 0) {

404 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrby %lld %lldÅimesÉrror",

405 
de¸by_°ï
, 
n
+1);

406 
îr‹
;

408 
	`‰ìRïlyObje˘
(
ª∂y
);

410 
n
 ++;

413 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

414 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

415 
îr‹
;

417 
vÆue
;

418 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
) ||

419 
vÆue
 + 
de¸by_times
*
de¸by_°ï
 != 0) {

420 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrbyÅo -%lldÉrror, %s in fact",

421 
de¸by_times
*
de¸by_°ï
, 
ª∂y
->
°r
);

422 
îr‹
;

425 
	`‰ìRïlyObje˘
(
ª∂y
);

427 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

428 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

429 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

430 
îr‹
;

432 
	`‰ìRïlyObje˘
(
ª∂y
);

434 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸by %†%Œd", 
key
, 
de¸by_°ï
);

435 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

436 
îr‹
;

438 
	`‰ìRïlyObje˘
(
ª∂y
);

440 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

444 
îr‹
:

446 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

448 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

449 
îrmsg
[0] = '\0';

452 
	}
}

454 
	$sim∂e_ã°_cmd_≠≥nd
(
vúe_ö°™˚
 *
vi
)

456 *
key
 = "test_cmd_append-key";

457 *
föÆ_vÆue
 = "pqwpioqjqwoiuqiorueljsakhdflkqueuquewqwei[oqfiqpq-0ewrq0hdalkjz.zhjaidhfioahd";

458 *
°¨t
 = 
föÆ_vÆue
, *
pos
 = sèπ, *
íd
 = föÆ_vÆue+
	`°æí
(final_value);

459 
°ï
 = 3, 
Àn
;

460 
buf
[20];

461 *
MESSAGE
 = "APPEND simpleÅest";

462 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

464 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

465 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

466 
îr‹
;

468 
	`‰ìRïlyObje˘
(
ª∂y
);

470 
pos
 < 
íd
) {

471 
Àn
 = (
íd
-
pos
 >
°ï
) ? step : (end-pos);

472 
	`mem˝y
(
buf
,
pos
,
Àn
);

473 
buf
[
Àn
] = '\0';

474 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "≠≥nd %†%s", 
key
, 
buf
);

475 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

476 
îr‹
;

477 } i‡(
ª∂y
->
öãgî
 !
pos
-
°¨t
+
Àn
) {

478 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "append %s %sÉrror",

479 
key
, 
buf
);

480 
îr‹
;

482 
	`‰ìRïlyObje˘
(
ª∂y
);

484 
pos
 +
Àn
;

487 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

488 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

489 
ª∂y
->
Àn
 !
	`°æí
(
föÆ_vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,final_value)) {

490 
îr‹
;

492 
	`‰ìRïlyObje˘
(
ª∂y
);

494 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

498 
îr‹
:

500 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

502 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

503 
îrmsg
[0] = '\0';

506 
	}
}

508 
	$sim∂e_ã°_cmd_°æí
(
vúe_ö°™˚
 *
vi
)

510 *
key
 = "test_cmd_strlen-key";

511 *
vÆue
 = "test_cmd_strlen-value";

512 *
MESSAGE
 = "STRLEN simpleÅest";

513 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

515 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
vÆue
);

516 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

517 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

518 
îr‹
;

520 
	`‰ìRïlyObje˘
(
ª∂y
);

522 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "°æí %s", 
key
);

523 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

524 
ª∂y
->
öãgî
 !
	`°æí
(
vÆue
)) {

525 
îr‹
;

527 
	`‰ìRïlyObje˘
(
ª∂y
);

528 
ª∂y
 = 
NULL
;

530 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

534 
îr‹
:

536 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

538 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

539 
îrmsg
[0] = '\0';

542 
	}
}

544 
	$sim∂e_ã°_cmd_gë£t
(
vúe_ö°™˚
 *
vi
)

546 *
key
 = "test_cmd_getset-key";

547 *
ﬁdvÆue
 = "test_cmd_getset-oldvalue";

548 *
√wvÆue
 = "test_cmd_getset-newvalue";

549 *
MESSAGE
 = "GETSET simpleÅest";

550 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

552 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
ﬁdvÆue
);

553 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

554 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

555 
îr‹
;

557 
	`‰ìRïlyObje˘
(
ª∂y
);

559 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë£à%†%s", 
key
, 
√wvÆue
);

560 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

561 
ª∂y
->
Àn
 !
	`°æí
(
ﬁdvÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,oldvalue)) {

562 
îr‹
;

564 
	`‰ìRïlyObje˘
(
ª∂y
);

566 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

567 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

568 
ª∂y
->
Àn
 !
	`°æí
(
√wvÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,newvalue)) {

569 
îr‹
;

571 
	`‰ìRïlyObje˘
(
ª∂y
);

573 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

577 
îr‹
:

579 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

581 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

582 
îrmsg
[0] = '\0';

585 
	}
}

587 
	$sim∂e_ã°_cmd_ö¸byÊﬂt
(
vúe_ö°™˚
 *
vi
)

589 *
key
 = "test_cmd_incrbyfloat-key";

590 *
föÆ_vÆue
 = "314.00000000000000022";

591 
n
 = 0, 
ö¸by_times
 = 100;

592 
ö¸byÊﬂt_°ï
 = 3.14;

593 *
MESSAGE
 = "INCRBYFLOAT simpleÅest";

594 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

596 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

597 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

598 
îr‹
;

600 
	`‰ìRïlyObje˘
(
ª∂y
);

602 
n
 < 
ö¸by_times
) {

603 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸byÊﬂà%†%f", 
key
, 
ö¸byÊﬂt_°ï
);

604 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

605 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrbyfloat %f %lldÅimesÉrror",

606 
ö¸byÊﬂt_°ï
, 
n
+1);

607 
îr‹
;

609 
	`‰ìRïlyObje˘
(
ª∂y
);

611 
n
 ++;

614 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

615 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

616 
	`°rcmp
(
ª∂y
->
°r
,
föÆ_vÆue
)) {

617 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸byÊﬂàtÿ%†îr‹", 
föÆ_vÆue
);

618 
îr‹
;

620 
	`‰ìRïlyObje˘
(
ª∂y
);

622 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

623 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

624 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

625 
îr‹
;

627 
	`‰ìRïlyObje˘
(
ª∂y
);

629 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸byÊﬂà%†%f", 
key
, 
ö¸byÊﬂt_°ï
);

630 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

631 
îr‹
;

633 
	`‰ìRïlyObje˘
(
ª∂y
);

635 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

639 
îr‹
:

641 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

643 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

644 
îrmsg
[0] = '\0';

647 
	}
}

649 
	$sim∂e_ã°_cmd_gëbô_£tbô_bôcou¡
(
vúe_ö°™˚
 *
vi
)

651 *
key
 = "test_cmd_getbit_setbit_bitcount-key";

652 *
MESSAGE
 = "GETBIT/SETBIT/BITCOUNT simpleÅest";

653 
begö
 = 11, 
°ï
 = 3, 
times
 = 79, 
n
;

654 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

656 
n
 = 0;

657 
n
 < 
times
) {

658 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†%d 1", 
key
, 
begö
+
n
*
°ï
);

659 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

660 
ª∂y
->
öãgî
 != 0) {

661 
îr‹
;

663 
	`‰ìRïlyObje˘
(
ª∂y
);

665 
n
 ++;

668 
n
 = 0;

669 
n
 < 
times
) {

670 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gëbô %†%d", 
key
, 
begö
+
n
*
°ï
);

671 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

672 
ª∂y
->
öãgî
 != 1) {

673 
îr‹
;

675 
	`‰ìRïlyObje˘
(
ª∂y
);

677 
n
 ++;

680 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôcou¡ %s", 
key
);

681 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

682 
ª∂y
->
öãgî
 !
times
) {

683 
îr‹
;

685 
	`‰ìRïlyObje˘
(
ª∂y
);

687 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

691 
îr‹
:

693 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

695 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

696 
îrmsg
[0] = '\0';

699 
	}
}

701 
	$sim∂e_ã°_cmd_gëønge_£å™ge
(
vúe_ö°™˚
 *
vi
)

703 *
key
 = "test_cmd_getrange_setrange-key";

704 *
MESSAGE
 = "GETRANGE/SETRANGE simpleÅest";

705 *
ønge_vÆue
 = "o090pl[]m,187h";

706 
begö
 = 11, 
°ï
 = 53, 
times
 = 79, 
n
;

707 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

709 
n
 = 0;

710 
n
 < 
times
) {

711 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "setrange %s %d %s",

712 
key
, 
begö
+
n
*
°ï
, 
ønge_vÆue
);

713 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

714 
ª∂y
->
öãgî
 !
begö
+
n
*
°ï
+
	`°æí
(
ønge_vÆue
)) {

715 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setrange %s %d %sÉrror",

716 
key
, 
begö
+
n
*
°ï
, 
ønge_vÆue
);

717 
îr‹
;

719 
	`‰ìRïlyObje˘
(
ª∂y
);

721 
n
 ++;

724 
n
 = 0;

725 
n
 < 
times
) {

726 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gëøngê%†%d %d", 
key
,

727 
begö
+
n
*
°ï
, begö+n*°ï+
	`°æí
(
ønge_vÆue
)-1);

728 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

729 
ª∂y
->
Àn
 !
	`°æí
(
ønge_vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,Ñange_value)) {

730 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "getrange %s %d %dÉrror",

731 
key
, 
begö
+
n
*
°ï
, begö+n*°ï+
	`°æí
(
ønge_vÆue
)-1);

732 
îr‹
;

734 
	`‰ìRïlyObje˘
(
ª∂y
);

736 
n
 ++;

739 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

743 
îr‹
:

745 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

747 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

748 
îrmsg
[0] = '\0';

751 
	}
}

753 
	$sim∂e_ã°_cmd_bôpos
(
vúe_ö°™˚
 *
vi
)

755 *
key
 = "test_cmd_bitpos-key";

756 *
MESSAGE
 = "BITPOS simpleÅest";

757 
pos
 = 11;

758 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

760 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

761 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

762 
îr‹
;

764 
	`‰ìRïlyObje˘
(
ª∂y
);

766 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

767 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

768 
ª∂y
->
öãgî
 != -1) {

769 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1 firstÅimeÉrror",

770 
key
);

771 
îr‹
;

773 
	`‰ìRïlyObje˘
(
ª∂y
);

775 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†1 0", 
key
);

776 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

777 
ª∂y
->
öãgî
 != 0) {

778 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setbit %s 1 0Érror",

779 
key
);

780 
îr‹
;

782 
	`‰ìRïlyObje˘
(
ª∂y
);

784 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

785 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

786 
ª∂y
->
öãgî
 != -1) {

787 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1 secondÅimeÉrror",

788 
key
);

789 
îr‹
;

791 
	`‰ìRïlyObje˘
(
ª∂y
);

793 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†%d 1", 
key
, 
pos
);

794 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

795 
ª∂y
->
öãgî
 != 0) {

796 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setbit %s %d 1Érror",

797 
key
, 
pos
);

798 
îr‹
;

800 
	`‰ìRïlyObje˘
(
ª∂y
);

802 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

803 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

804 
ª∂y
->
öãgî
 !
pos
) {

805 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1ÅhirdÅimeÉrror",

806 
key
);

807 
îr‹
;

809 
	`‰ìRïlyObje˘
(
ª∂y
);

811 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

815 
îr‹
:

817 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

819 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

820 
îrmsg
[0] = '\0';

823 
	}
}

825 
	#MGET_MSET_KEYS_COUNT
 333

	)

826 
	$sim∂e_ã°_cmd_mgë_m£t
(
vúe_ö°™˚
 *
vi
)

828 *
key
 = "test_cmd_mget_mset-key";

829 *
vÆue
 = "test_cmd_mget_mset-value";

830 *
MESSAGE
 = "MGET/MSET simpleÅest";

831 
keys
[
MGET_MSET_KEYS_COUNT
][30];

832 
vÆues
[
MGET_MSET_KEYS_COUNT
][30];

833 *
¨gv
[1+2*
MGET_MSET_KEYS_COUNT
];

834 
size_t
 
¨gvÀn
[1+2*
MGET_MSET_KEYS_COUNT
];

835 
j
, 
idx
;

836 
ªdisRïly
 *
ª∂y
 = 
NULL
;

838 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

839 
	`vπ_s˙¥ötf
(
keys
[
j
], 30,"%s%d", 
key
, j);

840 
	`vπ_s˙¥ötf
(
vÆues
[
j
], 30,"%s%d", 
vÆue
, j);

843 
¨gv
[0] = "mset";

844 
¨gvÀn
[0] = 
	`°æí
(
¨gv
[0]);

845 
idx
 = 1;

846 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

847 
¨gv
[
idx
] = 
keys
[
j
];

848 
¨gvÀn
[
idx
++] = 
	`°æí
(
keys
[
j
]);

849 
¨gv
[
idx
] = 
vÆues
[
j
];

850 
¨gvÀn
[
idx
++] = 
	`°æí
(
vÆues
[
j
]);

853 
ª∂y
 = 
	`ªdisComm™dArgv
(
vi
->
˘x
, 1+2*
MGET_MSET_KEYS_COUNT
, 
¨gv
, 
¨gvÀn
);

854 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

855 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

856 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "mset %d keysÉrror",

857 
MGET_MSET_KEYS_COUNT
);

858 
îr‹
;

860 
	`‰ìRïlyObje˘
(
ª∂y
);

862 
¨gv
[0] = "mget";

863 
¨gvÀn
[0] = 
	`°æí
(
¨gv
[0]);

864 
j
 = 1; j < 1+
MGET_MSET_KEYS_COUNT
; j ++) {

865 
¨gv
[
j
] = 
keys
[j-1];

866 
¨gvÀn
[
j
] = 
	`°æí
(
¨gv
[j]);

869 
ª∂y
 = 
	`ªdisComm™dArgv
(
vi
->
˘x
, 1+
MGET_MSET_KEYS_COUNT
, 
¨gv
, 
¨gvÀn
);

870 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ARRAY
 ||

871 
ª∂y
->
ñemíts
 !
MGET_MSET_KEYS_COUNT
) {

872 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "mget %d keysÉrror",

873 
MGET_MSET_KEYS_COUNT
);

874 
îr‹
;

876 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

877 
ªdisRïly
 *
ª∂y_sub
 = 
ª∂y
->
ñemít
[
j
];

878 i‡(
ª∂y_sub
 =
NULL
 ||

879 
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

880 
ª∂y_sub
->
Àn
 !
	`°æí
(
vÆues
[
j
]) ||

881 
	`°rcmp
(
ª∂y_sub
->
°r
, 
vÆues
[
j
]))

882 
îr‹
;

884 
	`‰ìRïlyObje˘
(
ª∂y
);

885 
ª∂y
 = 
NULL
;

887 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

891 
îr‹
:

893 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

895 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

896 
îrmsg
[0] = '\0';

899 
	}
}

901 
	#TEST_HASH_ENCODED_ZIPLIST
 0

	)

902 
	#TEST_HASH_ENCODED_HT
 1

	)

903 
	#TEST_HASH_ENCODED_CAUSED_BY_FILED
 0

	)

904 
	#TEST_HASH_ENCODED_CAUSED_BY_VALUE
 1

	)

905 
	#TEST_HASH_ENCODED_CAUSED_BY_ALL
 2

	)

906 
	#TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
 56

	)

907 
	#TEST_HASH_ENCODED_HT_FIELD_COUNT
 678

	)

908 
	#TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
 21

	)

909 
	#TEST_HASH_ENCODED_HT_VALUE_LEN
 111

	)

911 
	sã°_hash_membî
 {

912 *
	mfõld
;

913 *
	mvÆue
;

916 
	$ã°_hash_membî_Àngth
(
ã°_hash_membî
 **
thms
)

918 
j
 = 0;

919 
thms
[
j
]) {

920 
j
 ++;

922  
j
;

923 
	}
}

925 
	$ã°_hash_membîs_de°roy
(
ã°_hash_membî
 **
thms
)

927 
j
 = 0;

928 
thms
[
j
]) {

929 
	`‰ì
(
thms
[
j
]->
fõld
);

930 
	`‰ì
(
thms
[
j
]->
vÆue
);

931 
	`‰ì
(
thms
[
j
]);

932 
j
 ++;

934 
	`‰ì
(
thms
);

935 
	}
}

937 
ã°_hash_membî
 **
	$sim∂e_ã°_hash_öô
(
vúe_ö°™˚
 *
vi
, *
key
, 
hash_ícode
, 
ícode_ˇu£
)

939 *
fõld
 = "test_hash-field";

940 *
vÆue
 = "test_hash-value";

941 
fõld_cou¡
, 
vÆue_Àn
;

942 
j
,
n
;

943 
ã°_hash_membî
 **
thms
 = 
NULL
;

944 
ªdisRïly
 *
ª∂y
 = 
NULL
;

946 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

947 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

948 
îr‹
;

950 
	`‰ìRïlyObje˘
(
ª∂y
);

952 i‡(
hash_ícode
 =
TEST_HASH_ENCODED_ZIPLIST
) {

953 
fõld_cou¡
 = 
TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
;

954 
vÆue_Àn
 = 
TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
;

955 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_FILED
) {

956 
fõld_cou¡
 = 
TEST_HASH_ENCODED_HT_FIELD_COUNT
;

957 
vÆue_Àn
 = 
TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
;

958 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_VALUE
) {

959 
fõld_cou¡
 = 
TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
;

960 
vÆue_Àn
 = 
TEST_HASH_ENCODED_HT_VALUE_LEN
;

961 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_ALL
) {

962 
fõld_cou¡
 = 
TEST_HASH_ENCODED_HT_FIELD_COUNT
;

963 
vÆue_Àn
 = 
TEST_HASH_ENCODED_HT_VALUE_LEN
;

966 
thms
 = 
	`mÆloc
((
fõld_cou¡
+1)*(
ã°_hash_membî
*));

967 
j
 = 0; j < 
fõld_cou¡
; j ++) {

968 
thms
[
j
] = 
	`mÆloc
((
ã°_hash_membî
));

969 
thms
[
j
]->
fõld
 = 
	`mÆloc
(30*());

970 
thms
[
j
]->
vÆue
 = 
	`mÆloc
((
vÆue_Àn
+1)*());

971 
	`vπ_s˙¥ötf
(
thms
[
j
]->
fõld
, 30, "%s%d", field, j);

972 
n
 = 
	`vπ_s˙¥ötf
(
thms
[
j
]->
vÆue
, 
vÆue_Àn
, "%s%d", value, j);

973 i‡(
n
 < 
vÆue_Àn
) {

974 
	`mem£t
(
thms
[
j
]->
vÆue
,'x',
vÆue_Àn
-
n
);

975 
thms
[
j
]->
vÆue
[
vÆue_Àn
] = '\0';

978 
thms
[
fõld_cou¡
] = 
NULL
;

980 
j
 = 0; j < 
fõld_cou¡
; j ++) {

981 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hset %s %s %s",

982 
key
, 
thms
[
j
]->
fõld
,Åhms[j]->
vÆue
);

983 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

984 
ª∂y
->
öãgî
 != 1) {

985 
îr‹
;

987 
	`‰ìRïlyObje˘
(
ª∂y
);

990 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

991 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

992 
ª∂y
->
öãgî
 !
fõld_cou¡
) {

993 
îr‹
;

995 
	`‰ìRïlyObje˘
(
ª∂y
);

997 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "obje˘Éncodög %s", 
key
);

998 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

999 
îr‹
;

1001 i‡(
hash_ícode
 =
TEST_HASH_ENCODED_ZIPLIST
) {

1002 if(
ª∂y
->
Àn
 !7 || 
	`°rcmp
‘ïly->
°r
, "ziplist")) {

1003 
îr‹
;

1006 if(
ª∂y
->
Àn
 !9 || 
	`°rcmp
‘ïly->
°r
, "hashtable")) {

1007 
îr‹
;

1011 
	`‰ìRïlyObje˘
(
ª∂y
);

1013  
thms
;

1015 
îr‹
:

1017 i‡(
thms
) {

1018 
	`ã°_hash_membîs_de°roy
(
thms
);

1019 
thms
 = 
NULL
;

1022 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1024  
NULL
;

1025 
	}
}

1027 
	$sim∂e_ã°_hash_ícode
(
vúe_ö°™˚
 *
vi
)

1029 *
key
 = "test_hash_encode";

1030 *
MESSAGE
 = "HASH ENCODE simpleÅest";

1031 
ã°_hash_membî
 **
thms
;

1033 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_ZIPLIST
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1034 i‡(
thms
 =
NULL
) {

1035 
îr‹
;

1037 
	`ã°_hash_membîs_de°roy
(
thms
);

1038 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_ZIPLIST
,
TEST_HASH_ENCODED_CAUSED_BY_VALUE
);

1039 i‡(
thms
 =
NULL
) {

1040 
îr‹
;

1042 
	`ã°_hash_membîs_de°roy
(
thms
);

1043 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1044 i‡(
thms
 =
NULL
) {

1045 
îr‹
;

1047 
	`ã°_hash_membîs_de°roy
(
thms
);

1048 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_VALUE
);

1049 i‡(
thms
 =
NULL
) {

1050 
îr‹
;

1052 
	`ã°_hash_membîs_de°roy
(
thms
);

1053 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_ALL
);

1054 i‡(
thms
 =
NULL
) {

1055 
îr‹
;

1057 
	`ã°_hash_membîs_de°roy
(
thms
);

1059 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1063 
îr‹
:

1065 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1066 
îrmsg
[0] = '\0';

1069 
	}
}

1071 
	$sim∂e_ã°_cmd_hgë_h£t
(
vúe_ö°™˚
 *
vi
)

1073 *
key
 = "test_cmd_hget_hset-key";

1074 *
fõld
 = "test_cmd_hget_hset-field";

1075 *
vÆue
 = "test_cmd_hget_hset-value";

1076 *
MESSAGE
 = "HGET/HSET simpleÅest";

1077 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1078 
ã°_hash_membî
 **
thms
 = 
NULL
;

1079 
idx
;

1081 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1082 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1083 
îr‹
;

1085 
	`‰ìRïlyObje˘
(
ª∂y
);

1087 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%†%s", 
key
, 
fõld
, 
vÆue
);

1088 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1089 
ª∂y
->
öãgî
 != 1) {

1090 
îr‹
;

1092 
	`‰ìRïlyObje˘
(
ª∂y
);

1094 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
fõld
);

1095 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1096 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

1097 
îr‹
;

1099 
	`‰ìRïlyObje˘
(
ª∂y
);

1101 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1102 i‡(
thms
 =
NULL
) {

1103 
îr‹
;

1105 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%†%s", 
key
, 
fõld
, 
vÆue
);

1106 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1107 
ª∂y
->
öãgî
 != 1) {

1108 
îr‹
;

1110 
	`‰ìRïlyObje˘
(
ª∂y
);

1111 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
fõld
);

1112 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1113 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

1114 
îr‹
;

1116 
	`‰ìRïlyObje˘
(
ª∂y
);

1117 
idx
 = 
	`ã°_hash_membî_Àngth
(
thms
)/2;

1118 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1119 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1120 
ª∂y
->
Àn
 !
	`°æí
(
thms
[
idx
]->
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,thms[idx]->value)) {

1121 
îr‹
;

1123 
	`‰ìRïlyObje˘
(
ª∂y
);

1124 
	`ã°_hash_membîs_de°roy
(
thms
);

1126 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1130 
îr‹
:

1132 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1133 i‡(
thms
Ë
	`ã°_hash_membîs_de°roy
(thms);

1135 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1136 
îrmsg
[0] = '\0';

1139 
	}
}

1141 
	$sim∂e_ã°_cmd_hÀn
(
vúe_ö°™˚
 *
vi
)

1143 *
key
 = "test_cmd_hlen-key";

1144 *
fõld
 = "test_cmd_hlen-field";

1145 *
vÆue
 = "test_cmd_hlen-value";

1146 *
MESSAGE
 = "HLEN simpleÅest";

1147 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1148 
hash_Àn
, 
j
;

1150 
hash_Àn
 = 51;

1151 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1152 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1153 
îr‹
;

1155 
	`‰ìRïlyObje˘
(
ª∂y
);

1156 
j
 = 0; j < 
hash_Àn
; j ++) {

1157 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 
j
, 
vÆue
);

1158 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1159 
ª∂y
->
öãgî
 != 1) {

1160 
îr‹
;

1162 
	`‰ìRïlyObje˘
(
ª∂y
);

1164 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

1165 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1166 
ª∂y
->
öãgî
 !
hash_Àn
) {

1167 
îr‹
;

1169 
	`‰ìRïlyObje˘
(
ª∂y
);

1171 
hash_Àn
 = 5111;

1172 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1173 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1174 
îr‹
;

1176 
	`‰ìRïlyObje˘
(
ª∂y
);

1177 
j
 = 0; j < 
hash_Àn
; j ++) {

1178 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 
j
, 
vÆue
);

1179 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1180 
ª∂y
->
öãgî
 != 1) {

1181 
îr‹
;

1183 
	`‰ìRïlyObje˘
(
ª∂y
);

1185 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

1186 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1187 
ª∂y
->
öãgî
 !
hash_Àn
) {

1188 
îr‹
;

1190 
	`‰ìRïlyObje˘
(
ª∂y
);

1192 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1196 
îr‹
:

1198 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1200 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1201 
îrmsg
[0] = '\0';

1204 
	}
}

1206 
	$sim∂e_ã°_cmd_hdñ
(
vúe_ö°™˚
 *
vi
)

1208 *
key
 = "test_cmd_hdel-key";

1209 *
fõld
 = "test_cmd_hdel-field";

1210 *
vÆue
 = "test_cmd_hdel-value";

1211 *
MESSAGE
 = "HDEL simpleÅest";

1212 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1213 
ã°_hash_membî
 **
thms
 = 
NULL
;

1214 
idx
;

1216 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1217 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1218 
îr‹
;

1220 
	`‰ìRïlyObje˘
(
ª∂y
);

1222 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 1, 
vÆue
);

1223 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1224 
ª∂y
->
öãgî
 != 1) {

1225 
îr‹
;

1227 
	`‰ìRïlyObje˘
(
ª∂y
);

1228 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 2, 
vÆue
);

1229 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1230 
ª∂y
->
öãgî
 != 1) {

1231 
îr‹
;

1233 
	`‰ìRïlyObje˘
(
ª∂y
);

1235 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s%d", 
key
, 
fõld
, 1);

1236 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1237 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
, value)) {

1238 
îr‹
;

1240 
	`‰ìRïlyObje˘
(
ª∂y
);

1241 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s%d", 
key
, 
fõld
, 1);

1242 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1243 
ª∂y
->
öãgî
 != 1) {

1244 
îr‹
;

1246 
	`‰ìRïlyObje˘
(
ª∂y
);

1247 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s%d", 
key
, 
fõld
, 1);

1248 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_NIL
) {

1249 
îr‹
;

1251 
	`‰ìRïlyObje˘
(
ª∂y
);

1253 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s%d", 
key
, 
fõld
, 2);

1254 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1255 
ª∂y
->
öãgî
 != 1) {

1256 
îr‹
;

1258 
	`‰ìRïlyObje˘
(
ª∂y
);

1259 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "exi°†%s", 
key
);

1260 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1261 
ª∂y
->
öãgî
 != 0) {

1262 
îr‹
;

1264 
	`‰ìRïlyObje˘
(
ª∂y
);

1266 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1267 i‡(
thms
 =
NULL
) {

1268 
îr‹
;

1270 
idx
 = 
	`ã°_hash_membî_Àngth
(
thms
)/2;

1271 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1272 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1273 
ª∂y
->
öãgî
 != 1) {

1274 
îr‹
;

1276 
	`‰ìRïlyObje˘
(
ª∂y
);

1277 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1278 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_NIL
) {

1279 
îr‹
;

1281 
	`‰ìRïlyObje˘
(
ª∂y
);

1282 
	`ã°_hash_membîs_de°roy
(
thms
);

1284 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1288 
îr‹
:

1290 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1291 i‡(
thms
Ë
	`ã°_hash_membîs_de°roy
(thms);

1293 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1294 
îrmsg
[0] = '\0';

1297 
	}
}

1299 
	$sim∂e_ã°_cmd_pÁdd_pfcou¡
(
vúe_ö°™˚
 *
vi
)

1301 *
key
 = "test_cmd_pfadd_pfcount-key";

1302 *
vÆue
 = "test_cmd_pfadd_pfcount-value";

1303 *
MESSAGE
 = "PFADD/PFCOUNT simpleÅest";

1304 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1305 
n
 = 0, 
cou¡
 = 20329, 
ª≥©
;

1307 
ª≥©
 < 2) {

1308 
ex≥˘_cou¡
;

1309 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "pÁdd %†%s%d", 
key
, 
vÆue
, 
n
++);

1310 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

1311 
îr‹
;

1313 
	`‰ìRïlyObje˘
(
ª∂y
);

1314 i‡(
n
 >
cou¡
) {

1315 
ª≥©
++;

1316 
n
 = 0;

1319 i‡(
ª≥©
 == 0) {

1320 
ex≥˘_cou¡
 = 
n
;

1322 
ex≥˘_cou¡
 = 
cou¡
;

1325 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "pfcou¡ %s", 
key
);

1326 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

1327 
îr‹
;

1329 i‡(
ª∂y
->
öãgî
 !()
ex≥˘_cou¡
) {

1330 
mi°ake
 = (()
ex≥˘_cou¡
-()
ª∂y
->
öãgî
)/()expect_count;

1331 i‡(
mi°ake
 < -0.02 || mistake > 0.02) {

1332 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "pfadd %d differentÉlements isÇotápproximatedÖfcountÑeturned %lld, mistake %f",

1333 
ex≥˘_cou¡
, 
ª∂y
->
öãgî
, 
mi°ake
);

1334 
îr‹
;

1337 
	`‰ìRïlyObje˘
(
ª∂y
);

1340 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1344 
îr‹
:

1346 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1348 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1349 
îrmsg
[0] = '\0';

1352 
	}
}

1354 
	$sim∂e_ã°
()

1356 
vúe_ö°™˚
 *
vi
;

1357 
ok_cou¡
 = 0, 
Æl_cou¡
 = 0;

1359 
vi
 = 
	`°¨t_⁄e_vúe_ö°™˚
();

1360 i‡(
vi
 =
NULL
) {

1361 
	`ã°_log_îr‹
("Run vire instance failed");

1365 
îrmsg
[0] = '\0';

1368 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gë_£t
(
vi
); 
Æl_cou¡
++;

1369 
ok_cou¡
+=
	`sim∂e_ã°_cmd_£äx
(
vi
); 
Æl_cou¡
++;

1370 
ok_cou¡
+=
	`sim∂e_ã°_cmd_£ãx
(
vi
); 
Æl_cou¡
++;

1371 
ok_cou¡
+=
	`sim∂e_ã°_cmd_p£ãx
(
vi
); 
Æl_cou¡
++;

1372 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸
(
vi
); 
Æl_cou¡
++;

1373 
ok_cou¡
+=
	`sim∂e_ã°_cmd_de¸
(
vi
); 
Æl_cou¡
++;

1374 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸by
(
vi
); 
Æl_cou¡
++;

1375 
ok_cou¡
+=
	`sim∂e_ã°_cmd_de¸by
(
vi
); 
Æl_cou¡
++;

1376 
ok_cou¡
+=
	`sim∂e_ã°_cmd_≠≥nd
(
vi
); 
Æl_cou¡
++;

1377 
ok_cou¡
+=
	`sim∂e_ã°_cmd_°æí
(
vi
); 
Æl_cou¡
++;

1378 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gë£t
(
vi
); 
Æl_cou¡
++;

1379 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸byÊﬂt
(
vi
); 
Æl_cou¡
++;

1380 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gëbô_£tbô_bôcou¡
(
vi
); 
Æl_cou¡
++;

1381 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gëønge_£å™ge
(
vi
); 
Æl_cou¡
++;

1382 
ok_cou¡
+=
	`sim∂e_ã°_cmd_bôpos
(
vi
); 
Æl_cou¡
++;

1383 
ok_cou¡
+=
	`sim∂e_ã°_cmd_mgë_m£t
(
vi
); 
Æl_cou¡
++;

1385 
ok_cou¡
+=
	`sim∂e_ã°_hash_ícode
(
vi
); 
Æl_cou¡
++;

1386 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hgë_h£t
(
vi
); 
Æl_cou¡
++;

1387 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hÀn
(
vi
); 
Æl_cou¡
++;

1388 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hdñ
(
vi
); 
Æl_cou¡
++;

1390 
ok_cou¡
+=
	`sim∂e_ã°_cmd_pÁdd_pfcou¡
(
vi
); 
Æl_cou¡
++;

1392 
	`vúe_ö°™˚_de°roy
(
vi
);

1394  
ok_cou¡
==
Æl_cou¡
?1:0;

1395 
	}
}

	@tests/vrt_simple.h

1 #i‚de‡
_VRT_SIMPLE_H_


2 
	#_VRT_SIMPLE_H_


	)

4 
sim∂e_ã°
();

	@tests/vrt_simple.h

1 #i‚de‡
_VRT_SIMPLE_H_


2 
	#_VRT_SIMPLE_H_


	)

4 
sim∂e_ã°
();

	@tests/vrt_util.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

6 
	~<uni°d.h
>

7 
	~<dúít.h
>

8 
	~<°rög.h
>

9 
	~<˘y≥.h
>

10 
	~<limôs.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/ty≥s.h
>

14 
	~<húedis.h
>

16 
	~<vπ_utû.h
>

19 
	$vπ_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

21 
	`ã°_log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

22 i‡(
∑nic
) {

23 
	`ab‹t
();

25 
	}
}

28 
	$vπ_vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

30 
n
;

32 
n
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

44 i‡(
n
 <= 0) {

48 i‡(
n
 < (Ë
size
) {

49  
n
;

52  ()(
size
 - 1);

53 
	}
}

56 
	$vπ_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

58 
va_li°
 
¨gs
;

59 
n
;

61 
	`va_°¨t
(
¨gs
, 
fmt
);

62 
n
 = 
	`vπ_vs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

63 
	`va_íd
(
¨gs
);

65  
n
;

66 
	}
}

69 
	$_ã°_log_îr‹
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...)

71 
Àn
, 
size
, 
î∫o_ßve
;

72 
buf
[
LOG_MAX_LEN
];

73 
va_li°
 
¨gs
;

75 
î∫o_ßve
 = 
î∫o
;

76 
Àn
 = 0;

77 
size
 = 
LOG_MAX_LEN
;

79 
Àn
 +
	`vπ_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%s:%d ", 
fûe
, 
löe
);

81 
	`va_°¨t
(
¨gs
, 
fmt
);

82 
Àn
 +
	`v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

83 
	`va_íd
(
¨gs
);

85 
buf
[
Àn
++] = '\n';

87 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

89 
î∫o
 = 
î∫o_ßve
;

90 
	}
}

93 
	$_ã°_log_out
(c⁄° *
fmt
, ...)

95 
Àn
, 
size
, 
î∫o_ßve
;

96 
buf
[
LOG_MAX_LEN
];

97 
va_li°
 
¨gs
;

99 
î∫o_ßve
 = 
î∫o
;

100 
Àn
 = 0;

101 
size
 = 
LOG_MAX_LEN
;

103 
	`va_°¨t
(
¨gs
, 
fmt
);

104 
Àn
 +
	`v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

105 
	`va_íd
(
¨gs
);

107 
buf
[
Àn
++] = '\n';

109 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
Àn
);

111 
î∫o
 = 
î∫o_ßve
;

112 
	}
}

117 
öt64_t


118 
	$vπ_u£c_now
()

120 
timevÆ
 
now
;

121 
öt64_t
 
u£c
;

122 
°©us
;

124 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

125 i‡(
°©us
 < 0) {

129 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

131  
u£c
;

132 
	}
}

137 
öt64_t


138 
	$vπ_m£c_now
()

140  
	`vπ_u£c_now
() / 1000LL;

141 
	}
}

146 
öt64_t


147 
	$vπ_£c_now
()

149  
	`vπ_u£c_now
() / 1000000LL;

150 
	}
}

159 
sds
 
	$gëAbsﬁuãP©h
(*
fûíame
) {

160 
cwd
[1024];

161 
sds
 
ab•©h
;

162 
sds
 
ªÕ©h
 = 
	`sd¢ew
(
fûíame
);

164 
	`sd°rim
(
ªÕ©h
," \r\n\t");

165 i‡(
ªÕ©h
[0] == '/') Ñelpath;

168 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

169 
	`sds‰ì
(
ªÕ©h
);

170  
NULL
;

172 
ab•©h
 = 
	`sd¢ew
(
cwd
);

173 i‡(
	`sd¶í
(
ab•©h
) &&ábspath[sdslen(abspath)-1] != '/')

174 
ab•©h
 = 
	`sdsˇt
(abspath,"/");

182 
	`sd¶í
(
ªÕ©h
) >= 3 &&

183 
ªÕ©h
[0] == '.' &&Ñelpath[1] == '.' &&Ñelpath[2] == '/')

185 
	`sd§™ge
(
ªÕ©h
,3,-1);

186 i‡(
	`sd¶í
(
ab•©h
) > 1) {

187 *
p
 = 
ab•©h
 + 
	`sd¶í
(abspath)-2;

188 
åimÀn
 = 1;

190 *
p
 != '/') {

191 
p
--;

192 
åimÀn
++;

194 
	`sd§™ge
(
ab•©h
,0,-(
åimÀn
+1));

199 
ab•©h
 = 
	`sdsˇtsds
◊b•©h,
ªÕ©h
);

200 
	`sds‰ì
(
ªÕ©h
);

201  
ab•©h
;

202 
	}
}

206 
uöt32_t
 
	$digôs10
(
uöt64_t
 
v
) {

207 i‡(
v
 < 10)  1;

208 i‡(
v
 < 100)  2;

209 i‡(
v
 < 1000)  3;

210 i‡(
v
 < 1000000000000UL) {

211 i‡(
v
 < 100000000UL) {

212 i‡(
v
 < 1000000) {

213 i‡(
v
 < 10000)  4;

214  5 + (
v
 >= 100000);

216  7 + (
v
 >= 10000000UL);

218 i‡(
v
 < 10000000000UL) {

219  9 + (
v
 >= 1000000000UL);

221  11 + (
v
 >= 100000000000UL);

223  12 + 
	`digôs10
(
v
 / 1000000000000UL);

224 
	}
}

227 
uöt32_t
 
	$sdigôs10
(
öt64_t
 
v
) {

228 i‡(
v
 < 0) {

230 
uöt64_t
 
uv
 = (
v
 !
LLONG_MIN
) ?

231 (
uöt64_t
)-
v
 : ((uöt64_tË
LLONG_MAX
)+1;

232  
	`digôs10
(
uv
)+1;

234  
	`digôs10
(
v
);

236 
	}
}

249 
	$Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
) {

250 c⁄° 
digôs
[201] =

256 
√g©ive
;

257 
vÆue
;

261 i‡(
svÆue
 < 0) {

262 i‡(
svÆue
 !
LLONG_MIN
) {

263 
vÆue
 = -
svÆue
;

265 
vÆue
 = ((Ë
LLONG_MAX
)+1;

267 
√g©ive
 = 1;

269 
vÆue
 = 
svÆue
;

270 
√g©ive
 = 0;

274 
uöt32_t
 c⁄° 
Àngth
 = 
	`digôs10
(
vÆue
)+
√g©ive
;

275 i‡(
Àngth
 >
d°Àn
)  0;

278 
uöt32_t
 
√xt
 = 
Àngth
;

279 
d°
[
√xt
] = '\0';

280 
√xt
--;

281 
vÆue
 >= 100) {

282 c⁄° 
i
 = (
vÆue
 % 100) * 2;

283 
vÆue
 /= 100;

284 
d°
[
√xt
] = 
digôs
[
i
 + 1];

285 
d°
[
√xt
 - 1] = 
digôs
[
i
];

286 
√xt
 -= 2;

290 i‡(
vÆue
 < 10) {

291 
d°
[
√xt
] = '0' + (
uöt32_t
Ë
vÆue
;

293 
i
 = (
uöt32_t
Ë
vÆue
 * 2;

294 
d°
[
√xt
] = 
digôs
[
i
 + 1];

295 
d°
[
√xt
 - 1] = 
digôs
[
i
];

299 i‡(
√g©ive
Ë
d°
[0] = '-';

300  
Àngth
;

301 
	}
}

306 
	$°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
) {

307 c⁄° *
p
 = 
s
;

308 
size_t
 
∂í
 = 0;

309 
√g©ive
 = 0;

310 
v
;

312 i‡(
∂í
 =
¶í
)

316 i‡(
¶í
 =1 && 
p
[0] == '0') {

317 i‡(
vÆue
 !
NULL
) *value = 0;

321 i‡(
p
[0] == '-') {

322 
√g©ive
 = 1;

323 
p
++; 
∂í
++;

326 i‡(
∂í
 =
¶í
)

331 i‡(
p
[0] >= '1' &&Ö[0] <= '9') {

332 
v
 = 
p
[0]-'0';

333 
p
++; 
∂í
++;

334 } i‡(
p
[0] ='0' && 
¶í
 == 1) {

335 *
vÆue
 = 0;

341 
∂í
 < 
¶í
 && 
p
[0] >= '0' &&Ö[0] <= '9') {

342 i‡(
v
 > (
ULLONG_MAX
 / 10))

344 
v
 *= 10;

346 i‡(
v
 > (
ULLONG_MAX
 - (
p
[0]-'0')))

348 
v
 +
p
[0]-'0';

350 
p
++; 
∂í
++;

354 i‡(
∂í
 < 
¶í
)

357 i‡(
√g©ive
) {

358 i‡(
v
 > (()(-(
LLONG_MIN
+1))+1))

360 i‡(
vÆue
 !
NULL
Ë*vÆuê-
v
;

362 i‡(
v
 > 
LLONG_MAX
)

364 i‡(
vÆue
 !
NULL
Ë*vÆuê
v
;

367 
	}
}

372 
	$°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
) {

373 
ŒvÆ
;

375 i‡(!
	`°rög2Œ
(
s
,
¶í
,&
ŒvÆ
))

378 i‡(
ŒvÆ
 < 
LONG_MIN
 ||ÜlvÆ > 
LONG_MAX
)

381 *
lvÆ
 = ()
ŒvÆ
;

383 
	}
}

387 
	$d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
) {

388 i‡(
	`i¢™
(
vÆue
)) {

389 
Àn
 = 
	`¢¥ötf
(
buf
,len,"nan");

390 } i‡(
	`isöf
(
vÆue
)) {

391 i‡(
vÆue
 < 0)

392 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-inf");

394 
Àn
 = 
	`¢¥ötf
(
buf
,len,"inf");

395 } i‡(
vÆue
 == 0) {

397 i‡(1.0/
vÆue
 < 0)

398 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-0");

400 
Àn
 = 
	`¢¥ötf
(
buf
,len,"0");

402 #i‡(
DBL_MANT_DIG
 >52Ë&& (
LLONG_MAX
 == 0x7fffffffffffffffLL)

412 
mö
 = -4503599627370495;

413 
max
 = 4503599627370496;

414 i‡(
vÆue
 > 
mö
 && vÆuê< 
max
 && value == (()(()value)))

415 
Àn
 = 
	`Œ2°rög
(
buf
,Àn,()
vÆue
);

418 
Àn
 = 
	`¢¥ötf
(
buf
,Àn,"%.17g",
vÆue
);

421  
Àn
;

422 
	}
}

424 
	$¸óã_dú
(*
∑th
)

426 i‡(
	`mkdú
(
∑th
,0755) < 0) {

427  
VRT_ERROR
;

430  
VRT_OK
;

431 
	}
}

433 
	$de°roy_dú
(*
∑th
)

435 
DIR
 *
dp
;

436 
dúít
 *
íåy
;

437 
°©
 
°©buf
;

438 
cwd
[1024];

440 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

441  
VRT_ERROR
;

444 i‡((
dp
 = 
	`›ídú
(
∑th
)Ë=
NULL
) {

445 
	`ã°_log_îr‹
("C™'à›í dú: %s", 
∑th
);

446  
VRT_ERROR
;

449 
	`chdú
 (
∑th
);

450 (
íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
) {

451 
	`l°©
(
íåy
->
d_«me
, &
°©buf
);

452 i‡(
S_IFDIR
 & 
°©buf
.
°_mode
) {

453 i‡(
	`°rcmp
(".", 
íåy
->
d_«me
) == 0 || strcmp("..",Éntry->d_name) == 0)

456 
	`de°roy_dú
(
íåy
->
d_«me
);

458 
	`ªmove
(
íåy
->
d_«me
);

462 
	`chdú
(
cwd
);

463 
	`˛o£dú
(
dp
);

465 
	`ªmove
(
∑th
);

466  
VRT_OK
;

467 
	}
}

469 
	$gë_pid_‰om_ª∂y
(
ªdisC⁄ãxt
 *
ªdis˘x
, *
ho°
, 
p‹t
)

471 
ªdisC⁄ãxt
 *
˘x
 = 
ªdis˘x
;

472 
ªdisRïly
 * 
ª∂y
;

473 
sds
 *
löes
;

474 
size_t
 
löe_Àn
;

475 
cou¡
, 
j
;

476 
pid
 = -1;

478 i‡(
˘x
 =
NULL
) {

479 
˘x
 = 
	`ªdisC⁄√˘
(
ho°
,
p‹t
);

482 i‡(
˘x
 =
NULL
) {

483 
	`ã°_log_îr‹
("GëÖid from in°™˚ faûed: c™'àc⁄√˘Åÿ%s:%d",
ho°
,
p‹t
);

487 
ª∂y
 = 
	`ªdisComm™d
(
˘x
, "info server");

488 i‡(
ª∂y
 =
NULL
) {

489 
	`ã°_log_îr‹
("Execute 'info server' command on vire failed: %s\n",

490 
˘x
->
îr
?˘x->
îr°r
:"");

491 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

495 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

496 
	`ã°_log_îr‹
("Reply for 'info server' command from vireÅype %d isÉrror",

497 
ª∂y
->
ty≥
);

498 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

499 
	`‰ìRïlyObje˘
(
ª∂y
);

503 
löes
 = 
	`sds•lôÀn
(
ª∂y
->
°r
,ª∂y->
Àn
,"\r\n",2,&
cou¡
);

504 i‡(
löes
 =
NULL
) {

505 
	`ã°_log_îr‹
("Reply for 'info server' command from vire isÉrror");

506 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

507 
	`‰ìRïlyObje˘
(
ª∂y
);

511 
j
 = 0; j < 
cou¡
; j ++) {

512 
löe_Àn
 = 
	`sd¶í
(
löes
[
j
]);

513 i‡(
löe_Àn
 > 11 && !
	`°∫cmp
("¥o˚ss_id", 
löes
[
j
], 10)) {

514 i‡(
	`°rög2l
(
löes
[
j
]+11,
löe_Àn
-11,&
pid
) == 0) {

515 
	`ã°_log_îr‹
("ConvertÖid string %.*sÅoÜong failed",

516 
löe_Àn
-11,
löes
[
j
]+11);

517 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

518 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

519 
	`‰ìRïlyObje˘
(
ª∂y
);

526 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

527 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

528 
	`‰ìRïlyObje˘
(
ª∂y
);

530  
pid
;

531 
	}
}

535 *
	$gë_ønge_‰om_°rög
(*
°r
, 
size_t
 
Àn
, *
cou¡
)

537 
ñem_cou¡
;

538 
sds
 *
ñems
;

539 
vÆue
;

540 *
ønge
;

542 
ñems
 = 
	`sds•lôÀn
(
›èrg
,
	`°æí
(›èrg),"-",1,&
ñem_cou¡
);

543 i‡(
ñems
 =
NULL
) {

544 
îr‹
;

545 } i‡(
ñem_cou¡
 <= 0 ||Élem_count >= 3) {

546 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

547 
îr‹
;

550 i‡(
ñem_cou¡
 == 1) {

551 i‡(
	`°rög2Œ
(
ñems
[0],
	`sd¶í
”Àms[0]),&
vÆue
) != 1) {

552 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

553 
îr‹
;

556 
ønge
 = 
	`mÆloc
(1*(*range));

557 
ønge
[0] = 
vÆue
;

558 *
cou¡
 = 1;

559 } i‡(
ñem_cou¡
 == 2) {

560 i‡(
	`°rög2Œ
(
ñems
[0],
	`sd¶í
”Àms[0]),&
vÆue
) != 1) {

561 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

562 
îr‹
;

565 
ønge
 = 
	`mÆloc
(2*(*range));

566 
ønge
[0] = 
vÆue
;

568 i‡(
	`°rög2Œ
(
ñems
[1],
	`sd¶í
”Àms[1]),&
vÆue
) != 1) {

569 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

570 
	`‰ì
(
ønge
);

571 
îr‹
;

574 
ønge
[1] = 
vÆue
;

575 *
cou¡
 = 2;

577 i‡(
ønge
[0] >Ñange[1]) {

578 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

579 
	`‰ì
(
ønge
);

580 
îr‹
;

584 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

586  
ønge
;

588 
îr‹
:

590 *
cou¡
 = -1;

591  
NULL
;

592 
	}
}

594 
sds
 
	$gë_ho°_p‹t_‰om_addªss_°rög
(*
addªss
, *
p‹t
)

596 
sds
 *
ho°_p‹t
;

597 
cou¡
 = 0;

598 
sds
 
ho°
;

599 
vÆue
;

601 *
p‹t
 = 0;

603 
ho°_p‹t
 = 
	`sds•lôÀn
(
addªss
,
	`°æí
◊ddªss),":",1,&
cou¡
);

604 i‡(
ho°_p‹t
 =
NULL
) {

605  
NULL
;

606 } i‡(
cou¡
 != 2) {

607 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

608  
NULL
;

611 i‡(
	`°rög2l
(
ho°_p‹t
[1],
	`sd¶í
(ho°_p‹t[1]),&
vÆue
) != 1 ||

612 
vÆue
 <= 0 || value >= 65535) {

613 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

614  
NULL
;

617 *
p‹t
 = ()
vÆue
;

618 
ho°
 = 
ho°_p‹t
[0];

619 
ho°_p‹t
[0] = 
NULL
;

620 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

622  
ho°
;

623 
	}
}

	@tests/vrt_util.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

6 
	~<uni°d.h
>

7 
	~<dúít.h
>

8 
	~<°rög.h
>

9 
	~<˘y≥.h
>

10 
	~<limôs.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/ty≥s.h
>

14 
	~<húedis.h
>

16 
	~<vπ_utû.h
>

19 
	$vπ_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

21 
	`ã°_log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

22 i‡(
∑nic
) {

23 
	`ab‹t
();

25 
	}
}

28 
	$vπ_vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

30 
n
;

32 
n
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

44 i‡(
n
 <= 0) {

48 i‡(
n
 < (Ë
size
) {

49  
n
;

52  ()(
size
 - 1);

53 
	}
}

56 
	$vπ_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

58 
va_li°
 
¨gs
;

59 
n
;

61 
	`va_°¨t
(
¨gs
, 
fmt
);

62 
n
 = 
	`vπ_vs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

63 
	`va_íd
(
¨gs
);

65  
n
;

66 
	}
}

69 
	$_ã°_log_îr‹
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...)

71 
Àn
, 
size
, 
î∫o_ßve
;

72 
buf
[
LOG_MAX_LEN
];

73 
va_li°
 
¨gs
;

75 
î∫o_ßve
 = 
î∫o
;

76 
Àn
 = 0;

77 
size
 = 
LOG_MAX_LEN
;

79 
Àn
 +
	`vπ_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%s:%d ", 
fûe
, 
löe
);

81 
	`va_°¨t
(
¨gs
, 
fmt
);

82 
Àn
 +
	`v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

83 
	`va_íd
(
¨gs
);

85 
buf
[
Àn
++] = '\n';

87 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

89 
î∫o
 = 
î∫o_ßve
;

90 
	}
}

93 
	$_ã°_log_out
(c⁄° *
fmt
, ...)

95 
Àn
, 
size
, 
î∫o_ßve
;

96 
buf
[
LOG_MAX_LEN
];

97 
va_li°
 
¨gs
;

99 
î∫o_ßve
 = 
î∫o
;

100 
Àn
 = 0;

101 
size
 = 
LOG_MAX_LEN
;

103 
	`va_°¨t
(
¨gs
, 
fmt
);

104 
Àn
 +
	`v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

105 
	`va_íd
(
¨gs
);

107 
buf
[
Àn
++] = '\n';

109 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
Àn
);

111 
î∫o
 = 
î∫o_ßve
;

112 
	}
}

117 
öt64_t


118 
	$vπ_u£c_now
()

120 
timevÆ
 
now
;

121 
öt64_t
 
u£c
;

122 
°©us
;

124 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

125 i‡(
°©us
 < 0) {

129 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

131  
u£c
;

132 
	}
}

137 
öt64_t


138 
	$vπ_m£c_now
()

140  
	`vπ_u£c_now
() / 1000LL;

141 
	}
}

146 
öt64_t


147 
	$vπ_£c_now
()

149  
	`vπ_u£c_now
() / 1000000LL;

150 
	}
}

159 
sds
 
	$gëAbsﬁuãP©h
(*
fûíame
) {

160 
cwd
[1024];

161 
sds
 
ab•©h
;

162 
sds
 
ªÕ©h
 = 
	`sd¢ew
(
fûíame
);

164 
	`sd°rim
(
ªÕ©h
," \r\n\t");

165 i‡(
ªÕ©h
[0] == '/') Ñelpath;

168 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

169 
	`sds‰ì
(
ªÕ©h
);

170  
NULL
;

172 
ab•©h
 = 
	`sd¢ew
(
cwd
);

173 i‡(
	`sd¶í
(
ab•©h
) &&ábspath[sdslen(abspath)-1] != '/')

174 
ab•©h
 = 
	`sdsˇt
(abspath,"/");

182 
	`sd¶í
(
ªÕ©h
) >= 3 &&

183 
ªÕ©h
[0] == '.' &&Ñelpath[1] == '.' &&Ñelpath[2] == '/')

185 
	`sd§™ge
(
ªÕ©h
,3,-1);

186 i‡(
	`sd¶í
(
ab•©h
) > 1) {

187 *
p
 = 
ab•©h
 + 
	`sd¶í
(abspath)-2;

188 
åimÀn
 = 1;

190 *
p
 != '/') {

191 
p
--;

192 
åimÀn
++;

194 
	`sd§™ge
(
ab•©h
,0,-(
åimÀn
+1));

199 
ab•©h
 = 
	`sdsˇtsds
◊b•©h,
ªÕ©h
);

200 
	`sds‰ì
(
ªÕ©h
);

201  
ab•©h
;

202 
	}
}

206 
uöt32_t
 
	$digôs10
(
uöt64_t
 
v
) {

207 i‡(
v
 < 10)  1;

208 i‡(
v
 < 100)  2;

209 i‡(
v
 < 1000)  3;

210 i‡(
v
 < 1000000000000UL) {

211 i‡(
v
 < 100000000UL) {

212 i‡(
v
 < 1000000) {

213 i‡(
v
 < 10000)  4;

214  5 + (
v
 >= 100000);

216  7 + (
v
 >= 10000000UL);

218 i‡(
v
 < 10000000000UL) {

219  9 + (
v
 >= 1000000000UL);

221  11 + (
v
 >= 100000000000UL);

223  12 + 
	`digôs10
(
v
 / 1000000000000UL);

224 
	}
}

227 
uöt32_t
 
	$sdigôs10
(
öt64_t
 
v
) {

228 i‡(
v
 < 0) {

230 
uöt64_t
 
uv
 = (
v
 !
LLONG_MIN
) ?

231 (
uöt64_t
)-
v
 : ((uöt64_tË
LLONG_MAX
)+1;

232  
	`digôs10
(
uv
)+1;

234  
	`digôs10
(
v
);

236 
	}
}

249 
	$Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
) {

250 c⁄° 
digôs
[201] =

256 
√g©ive
;

257 
vÆue
;

261 i‡(
svÆue
 < 0) {

262 i‡(
svÆue
 !
LLONG_MIN
) {

263 
vÆue
 = -
svÆue
;

265 
vÆue
 = ((Ë
LLONG_MAX
)+1;

267 
√g©ive
 = 1;

269 
vÆue
 = 
svÆue
;

270 
√g©ive
 = 0;

274 
uöt32_t
 c⁄° 
Àngth
 = 
	`digôs10
(
vÆue
)+
√g©ive
;

275 i‡(
Àngth
 >
d°Àn
)  0;

278 
uöt32_t
 
√xt
 = 
Àngth
;

279 
d°
[
√xt
] = '\0';

280 
√xt
--;

281 
vÆue
 >= 100) {

282 c⁄° 
i
 = (
vÆue
 % 100) * 2;

283 
vÆue
 /= 100;

284 
d°
[
√xt
] = 
digôs
[
i
 + 1];

285 
d°
[
√xt
 - 1] = 
digôs
[
i
];

286 
√xt
 -= 2;

290 i‡(
vÆue
 < 10) {

291 
d°
[
√xt
] = '0' + (
uöt32_t
Ë
vÆue
;

293 
i
 = (
uöt32_t
Ë
vÆue
 * 2;

294 
d°
[
√xt
] = 
digôs
[
i
 + 1];

295 
d°
[
√xt
 - 1] = 
digôs
[
i
];

299 i‡(
√g©ive
Ë
d°
[0] = '-';

300  
Àngth
;

301 
	}
}

306 
	$°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
) {

307 c⁄° *
p
 = 
s
;

308 
size_t
 
∂í
 = 0;

309 
√g©ive
 = 0;

310 
v
;

312 i‡(
∂í
 =
¶í
)

316 i‡(
¶í
 =1 && 
p
[0] == '0') {

317 i‡(
vÆue
 !
NULL
) *value = 0;

321 i‡(
p
[0] == '-') {

322 
√g©ive
 = 1;

323 
p
++; 
∂í
++;

326 i‡(
∂í
 =
¶í
)

331 i‡(
p
[0] >= '1' &&Ö[0] <= '9') {

332 
v
 = 
p
[0]-'0';

333 
p
++; 
∂í
++;

334 } i‡(
p
[0] ='0' && 
¶í
 == 1) {

335 *
vÆue
 = 0;

341 
∂í
 < 
¶í
 && 
p
[0] >= '0' &&Ö[0] <= '9') {

342 i‡(
v
 > (
ULLONG_MAX
 / 10))

344 
v
 *= 10;

346 i‡(
v
 > (
ULLONG_MAX
 - (
p
[0]-'0')))

348 
v
 +
p
[0]-'0';

350 
p
++; 
∂í
++;

354 i‡(
∂í
 < 
¶í
)

357 i‡(
√g©ive
) {

358 i‡(
v
 > (()(-(
LLONG_MIN
+1))+1))

360 i‡(
vÆue
 !
NULL
Ë*vÆuê-
v
;

362 i‡(
v
 > 
LLONG_MAX
)

364 i‡(
vÆue
 !
NULL
Ë*vÆuê
v
;

367 
	}
}

372 
	$°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
) {

373 
ŒvÆ
;

375 i‡(!
	`°rög2Œ
(
s
,
¶í
,&
ŒvÆ
))

378 i‡(
ŒvÆ
 < 
LONG_MIN
 ||ÜlvÆ > 
LONG_MAX
)

381 *
lvÆ
 = ()
ŒvÆ
;

383 
	}
}

387 
	$d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
) {

388 i‡(
	`i¢™
(
vÆue
)) {

389 
Àn
 = 
	`¢¥ötf
(
buf
,len,"nan");

390 } i‡(
	`isöf
(
vÆue
)) {

391 i‡(
vÆue
 < 0)

392 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-inf");

394 
Àn
 = 
	`¢¥ötf
(
buf
,len,"inf");

395 } i‡(
vÆue
 == 0) {

397 i‡(1.0/
vÆue
 < 0)

398 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-0");

400 
Àn
 = 
	`¢¥ötf
(
buf
,len,"0");

402 #i‡(
DBL_MANT_DIG
 >52Ë&& (
LLONG_MAX
 == 0x7fffffffffffffffLL)

412 
mö
 = -4503599627370495;

413 
max
 = 4503599627370496;

414 i‡(
vÆue
 > 
mö
 && vÆuê< 
max
 && value == (()(()value)))

415 
Àn
 = 
	`Œ2°rög
(
buf
,Àn,()
vÆue
);

418 
Àn
 = 
	`¢¥ötf
(
buf
,Àn,"%.17g",
vÆue
);

421  
Àn
;

422 
	}
}

424 
	$¸óã_dú
(*
∑th
)

426 i‡(
	`mkdú
(
∑th
,0755) < 0) {

427  
VRT_ERROR
;

430  
VRT_OK
;

431 
	}
}

433 
	$de°roy_dú
(*
∑th
)

435 
DIR
 *
dp
;

436 
dúít
 *
íåy
;

437 
°©
 
°©buf
;

438 
cwd
[1024];

440 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

441  
VRT_ERROR
;

444 i‡((
dp
 = 
	`›ídú
(
∑th
)Ë=
NULL
) {

445 
	`ã°_log_îr‹
("C™'à›í dú: %s", 
∑th
);

446  
VRT_ERROR
;

449 
	`chdú
 (
∑th
);

450 (
íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
) {

451 
	`l°©
(
íåy
->
d_«me
, &
°©buf
);

452 i‡(
S_IFDIR
 & 
°©buf
.
°_mode
) {

453 i‡(
	`°rcmp
(".", 
íåy
->
d_«me
) == 0 || strcmp("..",Éntry->d_name) == 0)

456 
	`de°roy_dú
(
íåy
->
d_«me
);

458 
	`ªmove
(
íåy
->
d_«me
);

462 
	`chdú
(
cwd
);

463 
	`˛o£dú
(
dp
);

465 
	`ªmove
(
∑th
);

466  
VRT_OK
;

467 
	}
}

469 
	$gë_pid_‰om_ª∂y
(
ªdisC⁄ãxt
 *
ªdis˘x
, *
ho°
, 
p‹t
)

471 
ªdisC⁄ãxt
 *
˘x
 = 
ªdis˘x
;

472 
ªdisRïly
 * 
ª∂y
;

473 
sds
 *
löes
;

474 
size_t
 
löe_Àn
;

475 
cou¡
, 
j
;

476 
pid
 = -1;

478 i‡(
˘x
 =
NULL
) {

479 
˘x
 = 
	`ªdisC⁄√˘
(
ho°
,
p‹t
);

482 i‡(
˘x
 =
NULL
) {

483 
	`ã°_log_îr‹
("GëÖid from in°™˚ faûed: c™'àc⁄√˘Åÿ%s:%d",
ho°
,
p‹t
);

487 
ª∂y
 = 
	`ªdisComm™d
(
˘x
, "info server");

488 i‡(
ª∂y
 =
NULL
) {

489 
	`ã°_log_îr‹
("Execute 'info server' command on vire failed: %s\n",

490 
˘x
->
îr
?˘x->
îr°r
:"");

491 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

495 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

496 
	`ã°_log_îr‹
("Reply for 'info server' command from vireÅype %d isÉrror",

497 
ª∂y
->
ty≥
);

498 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

499 
	`‰ìRïlyObje˘
(
ª∂y
);

503 
löes
 = 
	`sds•lôÀn
(
ª∂y
->
°r
,ª∂y->
Àn
,"\r\n",2,&
cou¡
);

504 i‡(
löes
 =
NULL
) {

505 
	`ã°_log_îr‹
("Reply for 'info server' command from vire isÉrror");

506 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

507 
	`‰ìRïlyObje˘
(
ª∂y
);

511 
j
 = 0; j < 
cou¡
; j ++) {

512 
löe_Àn
 = 
	`sd¶í
(
löes
[
j
]);

513 i‡(
löe_Àn
 > 11 && !
	`°∫cmp
("¥o˚ss_id", 
löes
[
j
], 10)) {

514 i‡(
	`°rög2l
(
löes
[
j
]+11,
löe_Àn
-11,&
pid
) == 0) {

515 
	`ã°_log_îr‹
("ConvertÖid string %.*sÅoÜong failed",

516 
löe_Àn
-11,
löes
[
j
]+11);

517 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

518 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

519 
	`‰ìRïlyObje˘
(
ª∂y
);

526 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

527 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

528 
	`‰ìRïlyObje˘
(
ª∂y
);

530  
pid
;

531 
	}
}

535 *
	$gë_ønge_‰om_°rög
(*
°r
, 
size_t
 
Àn
, *
cou¡
)

537 
ñem_cou¡
;

538 
sds
 *
ñems
;

539 
vÆue
;

540 *
ønge
;

542 
ñems
 = 
	`sds•lôÀn
(
›èrg
,
	`°æí
(›èrg),"-",1,&
ñem_cou¡
);

543 i‡(
ñems
 =
NULL
) {

544 
îr‹
;

545 } i‡(
ñem_cou¡
 <= 0 ||Élem_count >= 3) {

546 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

547 
îr‹
;

550 i‡(
ñem_cou¡
 == 1) {

551 i‡(
	`°rög2Œ
(
ñems
[0],
	`sd¶í
”Àms[0]),&
vÆue
) != 1) {

552 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

553 
îr‹
;

556 
ønge
 = 
	`mÆloc
(1*(*range));

557 
ønge
[0] = 
vÆue
;

558 *
cou¡
 = 1;

559 } i‡(
ñem_cou¡
 == 2) {

560 i‡(
	`°rög2Œ
(
ñems
[0],
	`sd¶í
”Àms[0]),&
vÆue
) != 1) {

561 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

562 
îr‹
;

565 
ønge
 = 
	`mÆloc
(2*(*range));

566 
ønge
[0] = 
vÆue
;

568 i‡(
	`°rög2Œ
(
ñems
[1],
	`sd¶í
”Àms[1]),&
vÆue
) != 1) {

569 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

570 
	`‰ì
(
ønge
);

571 
îr‹
;

574 
ønge
[1] = 
vÆue
;

575 *
cou¡
 = 2;

577 i‡(
ønge
[0] >Ñange[1]) {

578 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

579 
	`‰ì
(
ønge
);

580 
îr‹
;

584 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

586  
ønge
;

588 
îr‹
:

590 *
cou¡
 = -1;

591  
NULL
;

592 
	}
}

594 
sds
 
	$gë_ho°_p‹t_‰om_addªss_°rög
(*
addªss
, *
p‹t
)

596 
sds
 *
ho°_p‹t
;

597 
cou¡
 = 0;

598 
sds
 
ho°
;

599 
vÆue
;

601 *
p‹t
 = 0;

603 
ho°_p‹t
 = 
	`sds•lôÀn
(
addªss
,
	`°æí
◊ddªss),":",1,&
cou¡
);

604 i‡(
ho°_p‹t
 =
NULL
) {

605  
NULL
;

606 } i‡(
cou¡
 != 2) {

607 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

608  
NULL
;

611 i‡(
	`°rög2l
(
ho°_p‹t
[1],
	`sd¶í
(ho°_p‹t[1]),&
vÆue
) != 1 ||

612 
vÆue
 <= 0 || value >= 65535) {

613 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

614  
NULL
;

617 *
p‹t
 = ()
vÆue
;

618 
ho°
 = 
ho°_p‹t
[0];

619 
ho°_p‹t
[0] = 
NULL
;

620 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

622  
ho°
;

623 
	}
}

	@tests/vrt_util.h

1 #i‚de‡
_VRT_UTIL_H_


2 
	#_VRT_UTIL_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 #ifde‡
HAVE_DEBUG_LOG


9 
	#VRT_DEBUG_LOG
 1

	)

12 
	~<d•ecülc⁄fig.h
>

14 
	~<sds.h
>

16 
	#VRT_OK
 0

	)

17 
	#VRT_ERROR
 -1

	)

19 
	#VRT_UINT8_MAXLEN
 (3 + 1)

	)

20 
	#VRT_UINT16_MAXLEN
 (5 + 1)

	)

21 
	#VRT_UINT32_MAXLEN
 (10 + 1)

	)

22 
	#VRT_UINT64_MAXLEN
 (20 + 1)

	)

23 
	#VRT_UINTMAX_MAXLEN
 
VRT_UINT64_MAXLEN


	)

25 
	#VRT_MAXHOSTNAMELEN
 256

	)

27 
	#LF
 (
uöt8_t
Ë10

	)

28 
	#CR
 (
uöt8_t
Ë13

	)

29 
	#CRLF
 "\x0d\x0a"

	)

30 
	#CRLF_LEN
 (("\x0d\x0a"Ë- 1)

	)

32 
	#LOG_MAX_LEN
 256

	)

34 
_ã°_log_îr‹
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

35 
_ã°_log_out
(c⁄° *
fmt
, ...);

36 #i‡
deföed
(
VRT_DEBUG_LOG
)

37 
	#ã°_log_debug
(...) do { \

38 
	`_ã°_log_îr‹
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
); \

39 } 0)

	)

41 
	#ã°_log_debug
(...)

	)

43 
	#ã°_log_îr‹
(...) do { \

44 
	`_ã°_log_îr‹
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
); \

45 } 0)

	)

46 
	#ã°_log_out
(...) do { \

47 
	`_ã°_log_out
(
__VA_ARGS__
); \

48 } 0)

	)

50 
vπ_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

52 
	#ASSERT
(
_x
) do { \

53 i‡(!(
_x
)) { \

54 
	`vπ_as£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

56 } 0)

	)

58 
vπ_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

60 
öt64_t
 
vπ_u£c_now
();

61 
öt64_t
 
vπ_m£c_now
();

62 
öt64_t
 
vπ_£c_now
();

64 
sds
 
gëAbsﬁuãP©h
(*
fûíame
);

66 
Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
);

67 
°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
);

68 
°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
);

69 
d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
);

71 
¸óã_dú
(*
∑th
);

72 
de°roy_dú
(*
dú
);

74 
gë_pid_‰om_ª∂y
(
ªdisC⁄ãxt
 *
ªdis˘x
, *
ho°
, 
p‹t
);

76 *
gë_ønge_‰om_°rög
(*
°r
, 
size_t
 
Àn
, *
cou¡
);

78 
sds
 
gë_ho°_p‹t_‰om_addªss_°rög
(*
addªss
, *
p‹t
);

	@tests/vrt_util.h

1 #i‚de‡
_VRT_UTIL_H_


2 
	#_VRT_UTIL_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 #ifde‡
HAVE_DEBUG_LOG


9 
	#VRT_DEBUG_LOG
 1

	)

12 
	~<d•ecülc⁄fig.h
>

14 
	~<sds.h
>

16 
	#VRT_OK
 0

	)

17 
	#VRT_ERROR
 -1

	)

19 
	#VRT_UINT8_MAXLEN
 (3 + 1)

	)

20 
	#VRT_UINT16_MAXLEN
 (5 + 1)

	)

21 
	#VRT_UINT32_MAXLEN
 (10 + 1)

	)

22 
	#VRT_UINT64_MAXLEN
 (20 + 1)

	)

23 
	#VRT_UINTMAX_MAXLEN
 
VRT_UINT64_MAXLEN


	)

25 
	#VRT_MAXHOSTNAMELEN
 256

	)

27 
	#LF
 (
uöt8_t
Ë10

	)

28 
	#CR
 (
uöt8_t
Ë13

	)

29 
	#CRLF
 "\x0d\x0a"

	)

30 
	#CRLF_LEN
 (("\x0d\x0a"Ë- 1)

	)

32 
	#LOG_MAX_LEN
 256

	)

34 
_ã°_log_îr‹
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

35 
_ã°_log_out
(c⁄° *
fmt
, ...);

36 #i‡
deföed
(
VRT_DEBUG_LOG
)

37 
	#ã°_log_debug
(...) do { \

38 
	`_ã°_log_îr‹
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
); \

39 } 0)

	)

41 
	#ã°_log_debug
(...)

	)

43 
	#ã°_log_îr‹
(...) do { \

44 
	`_ã°_log_îr‹
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
); \

45 } 0)

	)

46 
	#ã°_log_out
(...) do { \

47 
	`_ã°_log_out
(
__VA_ARGS__
); \

48 } 0)

	)

50 
vπ_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

52 
	#ASSERT
(
_x
) do { \

53 i‡(!(
_x
)) { \

54 
	`vπ_as£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

56 } 0)

	)

58 
vπ_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

60 
öt64_t
 
vπ_u£c_now
();

61 
öt64_t
 
vπ_m£c_now
();

62 
öt64_t
 
vπ_£c_now
();

64 
sds
 
gëAbsﬁuãP©h
(*
fûíame
);

66 
Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
);

67 
°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
);

68 
°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
);

69 
d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
);

71 
¸óã_dú
(*
∑th
);

72 
de°roy_dú
(*
dú
);

74 
gë_pid_‰om_ª∂y
(
ªdisC⁄ãxt
 *
ªdis˘x
, *
ho°
, 
p‹t
);

76 *
gë_ønge_‰om_°rög
(*
°r
, 
size_t
 
Àn
, *
cou¡
);

78 
sds
 
gë_ho°_p‹t_‰om_addªss_°rög
(*
addªss
, *
p‹t
);

	@tests/vrtest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ut¢ame.h
>

10 
	~<húedis.h
>

12 
	~<vπ_utû.h
>

13 
	~<vπ_public.h
>

14 
	~<vπ_sim∂e.h
>

16 
	sc⁄fig
 {

17 *
	mpid_fûíame
;

19 
	mpidfûe
;

20 
	mpid
;

23 
c⁄fig
 
	gc⁄fig
;

25 
	gshow_hñp
;

26 
	gshow_vîsi⁄
;

28 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

29 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

30 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

31 { "execuã-fûe", 
ªquúed_¨gumít
, 
NULL
, 'e' },

32 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'p' },

33 { 
NULL
, 0, NULL, 0 }

36 
	gsh‹t_›ti⁄s
[] = "hVe:p:";

39 
	$vr_show_ußge
()

41 
	`¥ötf
(

42 "Ußge: vúëe° [-?hV] [-êexecuã-fûe] [-∞pid-fûe]" 
CRLF


43 "" 
CRLF
);

44 
	`¥ötf
(

45 "O±i⁄s:" 
CRLF


46 " -h, --hñ∞ :Åhi†hñp" 
CRLF


47 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


48 " -e, --execuã-fûê : vúêexecuã fûe, deÁu… i†§c/vúe" 
CRLF


49 " -p, --pid-fûê :Öid fûe" 
CRLF


50 "" 
CRLF
);

51 
	}
}

54 
	$vr_£t_deÁu…_›ti⁄s
()

56 
c⁄fig
.
pid_fûíame
 = 
NULL
;

57 
	}
}

60 
	$vr_gë_›ti⁄s
(
¨gc
, **
¨gv
)

62 
c
;

64 
›ãº
 = 0;

67 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

68 i‡(
c
 == -1) {

73 
c
) {

75 
show_vîsi⁄
 = 1;

76 
show_hñp
 = 1;

80 
show_vîsi⁄
 = 1;

84 
	`£t_execuã_fûe
(
›èrg
);

88 
c⁄fig
.
pid_fûíame
 = 
›èrg
;

92 
›t›t
) {

95 
	`ã°_log_îr‹
("vire: option -%cÑequires string",

96 
›t›t
);

100 
	`ã°_log_îr‹
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

103  
VRT_ERROR
;

106 
	`ã°_log_îr‹
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

107  
VRT_ERROR
;

112  
VRT_OK
;

113 
	}
}

116 
	$maö
(
¨gc
, **
¨gv
)

118 
ªt
;

119 
ok_cou¡
 = 0, 
Æl_cou¡
 = 0;

121 
	`vr_£t_deÁu…_›ti⁄s
();

123 
ªt
 = 
	`vr_gë_›ti⁄s
(
¨gc
, 
¨gv
);

124 i‡(
ªt
 !
VRT_OK
) {

125 
	`vr_show_ußge
();

126 
	`exô
(1);

129 i‡(
show_vîsi⁄
) {

130 
	`ã°_log_out
("Thi†i†vúëe°-%s", 
VR_VERSION_STRING
);

131 i‡(
show_hñp
) {

132 
	`vr_show_ußge
();

134 
	`exô
(0);

137 
	`¸óã_w‹k_dú
();

139 
	`ã°_log_out
("Te°ög Vúêvîsi⁄ %†\n", 
VR_VERSION_STRING
);

141 
ok_cou¡
+=
	`sim∂e_ã°
(); 
Æl_cou¡
++;

143 
˛ón
:

144 
	`de°roy_w‹k_dú
();

146 i‡(
ok_cou¡
 =
Æl_cou¡
)

147 
	`ã°_log_out
("\n\\o/ \033[32;1mAllÅestsÖassed withoutÉrrors!\033[0m\n");

148  
VRT_OK
;

149 
	}
}

	@tests/vrtest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ut¢ame.h
>

10 
	~<húedis.h
>

12 
	~<vπ_utû.h
>

13 
	~<vπ_public.h
>

14 
	~<vπ_sim∂e.h
>

16 
	sc⁄fig
 {

17 *
	mpid_fûíame
;

19 
	mpidfûe
;

20 
	mpid
;

23 
c⁄fig
 
	gc⁄fig
;

25 
	gshow_hñp
;

26 
	gshow_vîsi⁄
;

28 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

29 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

30 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

31 { "execuã-fûe", 
ªquúed_¨gumít
, 
NULL
, 'e' },

32 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'p' },

33 { 
NULL
, 0, NULL, 0 }

36 
	gsh‹t_›ti⁄s
[] = "hVe:p:";

39 
	$vr_show_ußge
()

41 
	`¥ötf
(

42 "Ußge: vúëe° [-?hV] [-êexecuã-fûe] [-∞pid-fûe]" 
CRLF


43 "" 
CRLF
);

44 
	`¥ötf
(

45 "O±i⁄s:" 
CRLF


46 " -h, --hñ∞ :Åhi†hñp" 
CRLF


47 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


48 " -e, --execuã-fûê : vúêexecuã fûe, deÁu… i†§c/vúe" 
CRLF


49 " -p, --pid-fûê :Öid fûe" 
CRLF


50 "" 
CRLF
);

51 
	}
}

54 
	$vr_£t_deÁu…_›ti⁄s
()

56 
c⁄fig
.
pid_fûíame
 = 
NULL
;

57 
	}
}

60 
	$vr_gë_›ti⁄s
(
¨gc
, **
¨gv
)

62 
c
;

64 
›ãº
 = 0;

67 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

68 i‡(
c
 == -1) {

73 
c
) {

75 
show_vîsi⁄
 = 1;

76 
show_hñp
 = 1;

80 
show_vîsi⁄
 = 1;

84 
	`£t_execuã_fûe
(
›èrg
);

88 
c⁄fig
.
pid_fûíame
 = 
›èrg
;

92 
›t›t
) {

95 
	`ã°_log_îr‹
("vire: option -%cÑequires string",

96 
›t›t
);

100 
	`ã°_log_îr‹
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

103  
VRT_ERROR
;

106 
	`ã°_log_îr‹
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

107  
VRT_ERROR
;

112  
VRT_OK
;

113 
	}
}

116 
	$maö
(
¨gc
, **
¨gv
)

118 
ªt
;

119 
ok_cou¡
 = 0, 
Æl_cou¡
 = 0;

121 
	`vr_£t_deÁu…_›ti⁄s
();

123 
ªt
 = 
	`vr_gë_›ti⁄s
(
¨gc
, 
¨gv
);

124 i‡(
ªt
 !
VRT_OK
) {

125 
	`vr_show_ußge
();

126 
	`exô
(1);

129 i‡(
show_vîsi⁄
) {

130 
	`ã°_log_out
("Thi†i†vúëe°-%s", 
VR_VERSION_STRING
);

131 i‡(
show_hñp
) {

132 
	`vr_show_ußge
();

134 
	`exô
(0);

137 
	`¸óã_w‹k_dú
();

139 
	`ã°_log_out
("Te°ög Vúêvîsi⁄ %†\n", 
VR_VERSION_STRING
);

141 
ok_cou¡
+=
	`sim∂e_ã°
(); 
Æl_cou¡
++;

143 
˛ón
:

144 
	`de°roy_w‹k_dú
();

146 i‡(
ok_cou¡
 =
Æl_cou¡
)

147 
	`ã°_log_out
("\n\\o/ \033[32;1mAllÅestsÖassed withoutÉrrors!\033[0m\n");

148  
VRT_OK
;

149 
	}
}

	@
1
.
0
495
14297
config.h
dep/ae/ae.c
dep/ae/ae.c
dep/ae/ae.h
dep/ae/ae.h
dep/ae/ae_epoll.c
dep/ae/ae_epoll.c
dep/ae/ae_evport.c
dep/ae/ae_evport.c
dep/ae/ae_kqueue.c
dep/ae/ae_kqueue.c
dep/ae/ae_select.c
dep/ae/ae_select.c
dep/darray/darray.c
dep/darray/darray.c
dep/darray/darray.h
dep/darray/darray.h
dep/dhashkit/dcrc16.c
dep/dhashkit/dcrc16.c
dep/dhashkit/dcrc32.c
dep/dhashkit/dcrc32.c
dep/dhashkit/dfnv.c
dep/dhashkit/dfnv.c
dep/dhashkit/dhashkit.h
dep/dhashkit/dhashkit.h
dep/dhashkit/dhsieh.c
dep/dhashkit/dhsieh.c
dep/dhashkit/djenkins.c
dep/dhashkit/djenkins.c
dep/dhashkit/dketama.c
dep/dhashkit/dketama.c
dep/dhashkit/dmd5.c
dep/dhashkit/dmd5.c
dep/dhashkit/dmodula.c
dep/dhashkit/dmodula.c
dep/dhashkit/dmurmur.c
dep/dhashkit/dmurmur.c
dep/dhashkit/done_at_a_time.c
dep/dhashkit/done_at_a_time.c
dep/dhashkit/drandom.c
dep/dhashkit/drandom.c
dep/dhashkit/dsha1.c
dep/dhashkit/dsha1.c
dep/dlist/dlist.c
dep/dlist/dlist.c
dep/dlist/dlist.h
dep/dlist/dlist.h
dep/dlist/dlockqueue.c
dep/dlist/dlockqueue.c
dep/dlist/dlockqueue.h
dep/dlist/dlockqueue.h
dep/dlist/dmtqueue.c
dep/dlist/dmtqueue.c
dep/dlist/dmtqueue.h
dep/dlist/dmtqueue.h
dep/dmalloc/dmalloc.c
dep/dmalloc/dmalloc.c
dep/dmalloc/dmalloc.h
dep/dmalloc/dmalloc.h
dep/himemcached-0.1.0/himcdep/sds.c
dep/himemcached-0.1.0/himcdep/sds.c
dep/himemcached-0.1.0/himcdep/sds.h
dep/himemcached-0.1.0/himcdep/sds.h
dep/himemcached-0.1.0/himcread.c
dep/himemcached-0.1.0/himcread.c
dep/himemcached-0.1.0/himcread.h
dep/himemcached-0.1.0/himcread.h
dep/himemcached-0.1.0/himemcached.c
dep/himemcached-0.1.0/himemcached.c
dep/himemcached-0.1.0/himemcached.h
dep/himemcached-0.1.0/himemcached.h
dep/hiredis-0.13.3/adapters/ae.h
dep/hiredis-0.13.3/adapters/glib.h
dep/hiredis-0.13.3/adapters/ivykis.h
dep/hiredis-0.13.3/adapters/libev.h
dep/hiredis-0.13.3/adapters/libevent.h
dep/hiredis-0.13.3/adapters/libuv.h
dep/hiredis-0.13.3/adapters/macosx.h
dep/hiredis-0.13.3/adapters/qt.h
dep/hiredis-0.13.3/async.c
dep/hiredis-0.13.3/async.h
dep/hiredis-0.13.3/dict.c
dep/hiredis-0.13.3/dict.h
dep/hiredis-0.13.3/examples/example-ae.c
dep/hiredis-0.13.3/examples/example-glib.c
dep/hiredis-0.13.3/examples/example-ivykis.c
dep/hiredis-0.13.3/examples/example-libev.c
dep/hiredis-0.13.3/examples/example-libevent.c
dep/hiredis-0.13.3/examples/example-libuv.c
dep/hiredis-0.13.3/examples/example-macosx.c
dep/hiredis-0.13.3/examples/example-qt.cpp
dep/hiredis-0.13.3/examples/example-qt.h
dep/hiredis-0.13.3/examples/example.c
dep/hiredis-0.13.3/fmacros.h
dep/hiredis-0.13.3/hiredis.c
dep/hiredis-0.13.3/hiredis.h
dep/hiredis-0.13.3/net.c
dep/hiredis-0.13.3/net.h
dep/hiredis-0.13.3/read.c
dep/hiredis-0.13.3/read.h
dep/hiredis-0.13.3/sds.c
dep/hiredis-0.13.3/sds.h
dep/hiredis-0.13.3/test.c
dep/hiredis-0.13.3/win32.h
dep/jemalloc-4.2.0/include/jemalloc/internal/arena.h
dep/jemalloc-4.2.0/include/jemalloc/internal/assert.h
dep/jemalloc-4.2.0/include/jemalloc/internal/atomic.h
dep/jemalloc-4.2.0/include/jemalloc/internal/base.h
dep/jemalloc-4.2.0/include/jemalloc/internal/bitmap.h
dep/jemalloc-4.2.0/include/jemalloc/internal/chunk.h
dep/jemalloc-4.2.0/include/jemalloc/internal/chunk_dss.h
dep/jemalloc-4.2.0/include/jemalloc/internal/chunk_mmap.h
dep/jemalloc-4.2.0/include/jemalloc/internal/ckh.h
dep/jemalloc-4.2.0/include/jemalloc/internal/ctl.h
dep/jemalloc-4.2.0/include/jemalloc/internal/extent.h
dep/jemalloc-4.2.0/include/jemalloc/internal/hash.h
dep/jemalloc-4.2.0/include/jemalloc/internal/huge.h
dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal.h
dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal_decls.h
dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal_defs.h
dep/jemalloc-4.2.0/include/jemalloc/internal/jemalloc_internal_macros.h
dep/jemalloc-4.2.0/include/jemalloc/internal/mb.h
dep/jemalloc-4.2.0/include/jemalloc/internal/mutex.h
dep/jemalloc-4.2.0/include/jemalloc/internal/nstime.h
dep/jemalloc-4.2.0/include/jemalloc/internal/pages.h
dep/jemalloc-4.2.0/include/jemalloc/internal/ph.h
dep/jemalloc-4.2.0/include/jemalloc/internal/private_namespace.h
dep/jemalloc-4.2.0/include/jemalloc/internal/private_unnamespace.h
dep/jemalloc-4.2.0/include/jemalloc/internal/prng.h
dep/jemalloc-4.2.0/include/jemalloc/internal/prof.h
dep/jemalloc-4.2.0/include/jemalloc/internal/public_namespace.h
dep/jemalloc-4.2.0/include/jemalloc/internal/public_unnamespace.h
dep/jemalloc-4.2.0/include/jemalloc/internal/ql.h
dep/jemalloc-4.2.0/include/jemalloc/internal/qr.h
dep/jemalloc-4.2.0/include/jemalloc/internal/quarantine.h
dep/jemalloc-4.2.0/include/jemalloc/internal/rb.h
dep/jemalloc-4.2.0/include/jemalloc/internal/rtree.h
dep/jemalloc-4.2.0/include/jemalloc/internal/size_classes.h
dep/jemalloc-4.2.0/include/jemalloc/internal/smoothstep.h
dep/jemalloc-4.2.0/include/jemalloc/internal/stats.h
dep/jemalloc-4.2.0/include/jemalloc/internal/tcache.h
dep/jemalloc-4.2.0/include/jemalloc/internal/ticker.h
dep/jemalloc-4.2.0/include/jemalloc/internal/tsd.h
dep/jemalloc-4.2.0/include/jemalloc/internal/util.h
dep/jemalloc-4.2.0/include/jemalloc/internal/valgrind.h
dep/jemalloc-4.2.0/include/jemalloc/internal/witness.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_defs.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_macros.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_mangle.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_mangle_jet.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_protos.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_protos_jet.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_rename.h
dep/jemalloc-4.2.0/include/jemalloc/jemalloc_typedefs.h
dep/jemalloc-4.2.0/include/msvc_compat/C99/stdbool.h
dep/jemalloc-4.2.0/include/msvc_compat/C99/stdint.h
dep/jemalloc-4.2.0/include/msvc_compat/strings.h
dep/jemalloc-4.2.0/include/msvc_compat/windows_extra.h
dep/jemalloc-4.2.0/msvc/projects/vc2015/test_threads/test_threads.cpp
dep/jemalloc-4.2.0/msvc/projects/vc2015/test_threads/test_threads.h
dep/jemalloc-4.2.0/msvc/projects/vc2015/test_threads/test_threads_main.cpp
dep/jemalloc-4.2.0/src/arena.c
dep/jemalloc-4.2.0/src/atomic.c
dep/jemalloc-4.2.0/src/base.c
dep/jemalloc-4.2.0/src/bitmap.c
dep/jemalloc-4.2.0/src/chunk.c
dep/jemalloc-4.2.0/src/chunk_dss.c
dep/jemalloc-4.2.0/src/chunk_mmap.c
dep/jemalloc-4.2.0/src/ckh.c
dep/jemalloc-4.2.0/src/ctl.c
dep/jemalloc-4.2.0/src/extent.c
dep/jemalloc-4.2.0/src/hash.c
dep/jemalloc-4.2.0/src/huge.c
dep/jemalloc-4.2.0/src/jemalloc.c
dep/jemalloc-4.2.0/src/mb.c
dep/jemalloc-4.2.0/src/mutex.c
dep/jemalloc-4.2.0/src/nstime.c
dep/jemalloc-4.2.0/src/pages.c
dep/jemalloc-4.2.0/src/prng.c
dep/jemalloc-4.2.0/src/prof.c
dep/jemalloc-4.2.0/src/quarantine.c
dep/jemalloc-4.2.0/src/rtree.c
dep/jemalloc-4.2.0/src/stats.c
dep/jemalloc-4.2.0/src/tcache.c
dep/jemalloc-4.2.0/src/ticker.c
dep/jemalloc-4.2.0/src/tsd.c
dep/jemalloc-4.2.0/src/util.c
dep/jemalloc-4.2.0/src/valgrind.c
dep/jemalloc-4.2.0/src/witness.c
dep/jemalloc-4.2.0/src/zone.c
dep/jemalloc-4.2.0/test/include/test/SFMT-alti.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params11213.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params1279.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params132049.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params19937.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params216091.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params2281.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params4253.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params44497.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params607.h
dep/jemalloc-4.2.0/test/include/test/SFMT-params86243.h
dep/jemalloc-4.2.0/test/include/test/SFMT-sse2.h
dep/jemalloc-4.2.0/test/include/test/SFMT.h
dep/jemalloc-4.2.0/test/include/test/btalloc.h
dep/jemalloc-4.2.0/test/include/test/jemalloc_test.h
dep/jemalloc-4.2.0/test/include/test/jemalloc_test_defs.h
dep/jemalloc-4.2.0/test/include/test/math.h
dep/jemalloc-4.2.0/test/include/test/mq.h
dep/jemalloc-4.2.0/test/include/test/mtx.h
dep/jemalloc-4.2.0/test/include/test/test.h
dep/jemalloc-4.2.0/test/include/test/thd.h
dep/jemalloc-4.2.0/test/include/test/timer.h
dep/jemalloc-4.2.0/test/integration/MALLOCX_ARENA.c
dep/jemalloc-4.2.0/test/integration/aligned_alloc.c
dep/jemalloc-4.2.0/test/integration/allocated.c
dep/jemalloc-4.2.0/test/integration/chunk.c
dep/jemalloc-4.2.0/test/integration/mallocx.c
dep/jemalloc-4.2.0/test/integration/overflow.c
dep/jemalloc-4.2.0/test/integration/posix_memalign.c
dep/jemalloc-4.2.0/test/integration/rallocx.c
dep/jemalloc-4.2.0/test/integration/sdallocx.c
dep/jemalloc-4.2.0/test/integration/thread_arena.c
dep/jemalloc-4.2.0/test/integration/thread_tcache_enabled.c
dep/jemalloc-4.2.0/test/integration/xallocx.c
dep/jemalloc-4.2.0/test/src/SFMT.c
dep/jemalloc-4.2.0/test/src/btalloc.c
dep/jemalloc-4.2.0/test/src/btalloc_0.c
dep/jemalloc-4.2.0/test/src/btalloc_1.c
dep/jemalloc-4.2.0/test/src/math.c
dep/jemalloc-4.2.0/test/src/mq.c
dep/jemalloc-4.2.0/test/src/mtx.c
dep/jemalloc-4.2.0/test/src/test.c
dep/jemalloc-4.2.0/test/src/thd.c
dep/jemalloc-4.2.0/test/src/timer.c
dep/jemalloc-4.2.0/test/stress/microbench.c
dep/jemalloc-4.2.0/test/unit/SFMT.c
dep/jemalloc-4.2.0/test/unit/a0.c
dep/jemalloc-4.2.0/test/unit/arena_reset.c
dep/jemalloc-4.2.0/test/unit/atomic.c
dep/jemalloc-4.2.0/test/unit/bitmap.c
dep/jemalloc-4.2.0/test/unit/ckh.c
dep/jemalloc-4.2.0/test/unit/decay.c
dep/jemalloc-4.2.0/test/unit/fork.c
dep/jemalloc-4.2.0/test/unit/hash.c
dep/jemalloc-4.2.0/test/unit/junk.c
dep/jemalloc-4.2.0/test/unit/junk_alloc.c
dep/jemalloc-4.2.0/test/unit/junk_free.c
dep/jemalloc-4.2.0/test/unit/lg_chunk.c
dep/jemalloc-4.2.0/test/unit/mallctl.c
dep/jemalloc-4.2.0/test/unit/math.c
dep/jemalloc-4.2.0/test/unit/mq.c
dep/jemalloc-4.2.0/test/unit/mtx.c
dep/jemalloc-4.2.0/test/unit/nstime.c
dep/jemalloc-4.2.0/test/unit/ph.c
dep/jemalloc-4.2.0/test/unit/prng.c
dep/jemalloc-4.2.0/test/unit/prof_accum.c
dep/jemalloc-4.2.0/test/unit/prof_active.c
dep/jemalloc-4.2.0/test/unit/prof_gdump.c
dep/jemalloc-4.2.0/test/unit/prof_idump.c
dep/jemalloc-4.2.0/test/unit/prof_reset.c
dep/jemalloc-4.2.0/test/unit/prof_thread_name.c
dep/jemalloc-4.2.0/test/unit/ql.c
dep/jemalloc-4.2.0/test/unit/qr.c
dep/jemalloc-4.2.0/test/unit/quarantine.c
dep/jemalloc-4.2.0/test/unit/rb.c
dep/jemalloc-4.2.0/test/unit/rtree.c
dep/jemalloc-4.2.0/test/unit/run_quantize.c
dep/jemalloc-4.2.0/test/unit/size_classes.c
dep/jemalloc-4.2.0/test/unit/smoothstep.c
dep/jemalloc-4.2.0/test/unit/stats.c
dep/jemalloc-4.2.0/test/unit/ticker.c
dep/jemalloc-4.2.0/test/unit/tsd.c
dep/jemalloc-4.2.0/test/unit/util.c
dep/jemalloc-4.2.0/test/unit/witness.c
dep/jemalloc-4.2.0/test/unit/zero.c
dep/sds/sds.c
dep/sds/sds.c
dep/sds/sds.h
dep/sds/sds.h
dep/sds/sdsalloc.h
dep/sds/sdsalloc.h
dep/util/dlog.c
dep/util/dlog.c
dep/util/dlog.h
dep/util/dlog.h
dep/util/dspecialconfig.h
dep/util/dspecialconfig.h
dep/util/dutil.c
dep/util/dutil.c
dep/util/dutil.h
dep/util/dutil.h
src/vr.c
src/vr.c
src/vr_aof.c
src/vr_aof.c
src/vr_aof.h
src/vr_aof.h
src/vr_backend.c
src/vr_backend.c
src/vr_backend.h
src/vr_backend.h
src/vr_bitops.c
src/vr_bitops.c
src/vr_bitops.h
src/vr_bitops.h
src/vr_block.c
src/vr_block.c
src/vr_block.h
src/vr_block.h
src/vr_client.c
src/vr_client.c
src/vr_client.h
src/vr_client.h
src/vr_command.c
src/vr_command.c
src/vr_command.h
src/vr_command.h
src/vr_conf.c
src/vr_conf.c
src/vr_conf.h
src/vr_conf.h
src/vr_connection.c
src/vr_connection.c
src/vr_connection.h
src/vr_connection.h
src/vr_core.c
src/vr_core.c
src/vr_core.h
src/vr_core.h
src/vr_db.c
src/vr_db.c
src/vr_db.h
src/vr_db.h
src/vr_dict.c
src/vr_dict.c
src/vr_dict.h
src/vr_dict.h
src/vr_eventloop.c
src/vr_eventloop.c
src/vr_eventloop.h
src/vr_eventloop.h
src/vr_hyperloglog.c
src/vr_hyperloglog.c
src/vr_hyperloglog.h
src/vr_hyperloglog.h
src/vr_intset.c
src/vr_intset.c
src/vr_intset.h
src/vr_intset.h
src/vr_listen.c
src/vr_listen.c
src/vr_listen.h
src/vr_listen.h
src/vr_lzf.h
src/vr_lzf.h
src/vr_lzfP.h
src/vr_lzfP.h
src/vr_lzf_c.c
src/vr_lzf_c.c
src/vr_lzf_d.c
src/vr_lzf_d.c
src/vr_master.c
src/vr_master.c
src/vr_master.h
src/vr_master.h
src/vr_multi.c
src/vr_multi.c
src/vr_multi.h
src/vr_multi.h
src/vr_notify.c
src/vr_notify.c
src/vr_notify.h
src/vr_notify.h
src/vr_object.c
src/vr_object.c
src/vr_object.h
src/vr_object.h
src/vr_pubsub.c
src/vr_pubsub.c
src/vr_pubsub.h
src/vr_pubsub.h
src/vr_quicklist.c
src/vr_quicklist.c
src/vr_quicklist.h
src/vr_quicklist.h
src/vr_rbtree.c
src/vr_rbtree.c
src/vr_rbtree.h
src/vr_rbtree.h
src/vr_rdb.c
src/vr_rdb.c
src/vr_rdb.h
src/vr_rdb.h
src/vr_replication.c
src/vr_replication.c
src/vr_replication.h
src/vr_replication.h
src/vr_scripting.c
src/vr_scripting.c
src/vr_scripting.h
src/vr_scripting.h
src/vr_server.c
src/vr_server.c
src/vr_server.h
src/vr_server.h
src/vr_signal.c
src/vr_signal.c
src/vr_signal.h
src/vr_signal.h
src/vr_slowlog.c
src/vr_slowlog.c
src/vr_slowlog.h
src/vr_slowlog.h
src/vr_stats.c
src/vr_stats.c
src/vr_stats.h
src/vr_stats.h
src/vr_t_hash.c
src/vr_t_hash.c
src/vr_t_hash.h
src/vr_t_hash.h
src/vr_t_list.c
src/vr_t_list.c
src/vr_t_list.h
src/vr_t_list.h
src/vr_t_set.c
src/vr_t_set.c
src/vr_t_set.h
src/vr_t_set.h
src/vr_t_string.c
src/vr_t_string.c
src/vr_t_string.h
src/vr_t_string.h
src/vr_t_zset.c
src/vr_t_zset.c
src/vr_t_zset.h
src/vr_t_zset.h
src/vr_thread.c
src/vr_thread.c
src/vr_thread.h
src/vr_thread.h
src/vr_util.c
src/vr_util.c
src/vr_util.h
src/vr_util.h
src/vr_worker.c
src/vr_worker.c
src/vr_worker.h
src/vr_worker.h
src/vr_ziplist.c
src/vr_ziplist.c
src/vr_ziplist.h
src/vr_ziplist.h
src/vr_zipmap.c
src/vr_zipmap.c
src/vr_zipmap.h
src/vr_zipmap.h
tests/vrabtest.c
tests/vrabtest.c
tests/vrabtest.h
tests/vrabtest.h
tests/vrt_backend.c
tests/vrt_backend.c
tests/vrt_backend.h
tests/vrt_backend.h
tests/vrt_benchmark.c
tests/vrt_benchmark.c
tests/vrt_check_data.c
tests/vrt_check_data.c
tests/vrt_check_data.h
tests/vrt_check_data.h
tests/vrt_dispatch_data.c
tests/vrt_dispatch_data.c
tests/vrt_dispatch_data.h
tests/vrt_dispatch_data.h
tests/vrt_produce_data.c
tests/vrt_produce_data.c
tests/vrt_produce_data.h
tests/vrt_produce_data.h
tests/vrt_public.c
tests/vrt_public.c
tests/vrt_public.h
tests/vrt_public.h
tests/vrt_simple.c
tests/vrt_simple.c
tests/vrt_simple.h
tests/vrt_simple.h
tests/vrt_util.c
tests/vrt_util.c
tests/vrt_util.h
tests/vrt_util.h
tests/vrtest.c
tests/vrtest.c
