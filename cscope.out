cscope 15 /Opensrc/vire -q 0000005003 0001092845
	@dep/ae/ae.c

33 
	~<°dio.h
>

34 
	~<sys/time.h
>

35 
	~<sys/ty≥s.h
>

36 
	~<uni°d.h
>

37 
	~<°dlib.h
>

38 
	~<pﬁl.h
>

39 
	~<°rög.h
>

40 
	~<time.h
>

41 
	~<î∫o.h
>

43 
	~<dmÆloc.h
>

45 
	~<´.h
>

47 #ifde‡
HAVE_CONFIG_H


48 
	~<c⁄fig.h
>

53 #ifde‡
HAVE_EVENT_PORTS


54 
	~"´_evp‹t.c
"

56 #ifde‡
HAVE_EPOLL


57 
	~"´_ïﬁl.c
"

59 #ifde‡
HAVE_KQUEUE


60 
	~"´_kqueue.c
"

62 
	~"´_£À˘.c
"

67 
´EvítLo›
 *
	$´Cª©eEvítLo›
(
£tsize
) {

68 
´EvítLo›
 *
evítLo›
;

69 
i
;

71 i‡((
evítLo›
 = 
	`dÆloc
((*evítLo›))Ë=
NULL
Ë
îr
;

72 
evítLo›
->
evíts
 = 
	`dÆloc
((
´FûeEvít
)*
£tsize
);

73 
evítLo›
->
fúed
 = 
	`dÆloc
((
´FúedEvít
)*
£tsize
);

74 i‡(
evítLo›
->
evíts
 =
NULL
 ||ÉvítLo›->
fúed
 =NULLË
îr
;

75 
evítLo›
->
£tsize
 = setsize;

76 
evítLo›
->
œ°Time
 = 
	`time
(
NULL
);

77 
evítLo›
->
timeEvítHód
 = 
NULL
;

78 
evítLo›
->
timeEvítNextId
 = 0;

79 
evítLo›
->
°›
 = 0;

80 
evítLo›
->
maxfd
 = -1;

81 
evítLo›
->
bef‹e¶ìp
 = 
NULL
;

82 
evítLo›
->
bsd©a
 = 
NULL
;

83 i‡(
	`´ApiCª©e
(
evítLo›
Ë=-1Ë
îr
;

86 
i
 = 0; i < 
£tsize
; i++)

87 
evítLo›
->
evíts
[
i
].
mask
 = 
AE_NONE
;

88  
evítLo›
;

90 
îr
:

91 i‡(
evítLo›
) {

92 
	`d‰ì
(
evítLo›
->
evíts
);

93 
	`d‰ì
(
evítLo›
->
fúed
);

94 
	`d‰ì
(
evítLo›
);

96  
NULL
;

97 
	}
}

100 
	$´GëSëSize
(
´EvítLo›
 *
evítLo›
) {

101  
evítLo›
->
£tsize
;

102 
	}
}

111 
	$´ResizeSëSize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

112 
i
;

114 i‡(
£tsize
 =
evítLo›
->£tsizeË 
AE_OK
;

115 i‡(
evítLo›
->
maxfd
 >
£tsize
Ë 
AE_ERR
;

116 i‡(
	`´ApiResize
(
evítLo›
,
£tsize
Ë=-1Ë 
AE_ERR
;

118 
evítLo›
->
evíts
 = 
	`dªÆloc
”vítLo›->evíts,(
´FûeEvít
)*
£tsize
);

119 
evítLo›
->
fúed
 = 
	`dªÆloc
”vítLo›->fúed,(
´FúedEvít
)*
£tsize
);

120 
evítLo›
->
£tsize
 = setsize;

124 
i
 = 
evítLo›
->
maxfd
+1; i < 
£tsize
; i++)

125 
evítLo›
->
evíts
[
i
].
mask
 = 
AE_NONE
;

126  
AE_OK
;

127 
	}
}

129 
	$´DñëeEvítLo›
(
´EvítLo›
 *
evítLo›
) {

130 
	`´ApiFªe
(
evítLo›
);

131 
	`d‰ì
(
evítLo›
->
evíts
);

132 
	`d‰ì
(
evítLo›
->
fúed
);

133 
	`d‰ì
(
evítLo›
);

134 
	}
}

136 
	$´St›
(
´EvítLo›
 *
evítLo›
) {

137 
evítLo›
->
°›
 = 1;

138 
	}
}

140 
	$´Cª©eFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
,

141 
´FûeProc
 *
¥oc
, *
˛õ¡D©a
)

143 i‡(
fd
 >
evítLo›
->
£tsize
) {

144 i‡(
	`´ResizeSëSize
(
evítLo›
,
fd
+1000Ë!
AE_OK
) {

145  
AE_ERR
;

148 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

150 i‡(
	`´ApiAddEvít
(
evítLo›
, 
fd
, 
mask
) == -1)

151  
AE_ERR
;

152 
„
->
mask
 |= mask;

153 i‡(
mask
 & 
AE_READABLE
Ë
„
->
rfûeProc
 = 
¥oc
;

154 i‡(
mask
 & 
AE_WRITABLE
Ë
„
->
wfûeProc
 = 
¥oc
;

155 
„
->
˛õ¡D©a
 = clientData;

156 i‡(
fd
 > 
evítLo›
->
maxfd
)

157 
evítLo›
->
maxfd
 = 
fd
;

158  
AE_OK
;

159 
	}
}

161 
	$´DñëeFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
)

163 i‡(
fd
 >
evítLo›
->
£tsize
) ;

164 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

165 i‡(
„
->
mask
 =
AE_NONE
) ;

167 
	`´ApiDñEvít
(
evítLo›
, 
fd
, 
mask
);

168 
„
->
mask
 = fe->mask & (~mask);

169 i‡(
fd
 =
evítLo›
->
maxfd
 && 
„
->
mask
 =
AE_NONE
) {

171 
j
;

173 
j
 = 
evítLo›
->
maxfd
-1; j >= 0; j--)

174 i‡(
evítLo›
->
evíts
[
j
].
mask
 !
AE_NONE
) ;

175 
evítLo›
->
maxfd
 = 
j
;

177 
	}
}

179 
	$´GëFûeEvíts
(
´EvítLo›
 *
evítLo›
, 
fd
) {

180 i‡(
fd
 >
evítLo›
->
£tsize
)  0;

181 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
fd
];

183  
„
->
mask
;

184 
	}
}

186 
	$´GëTime
(*
£c⁄ds
, *
mûli£c⁄ds
)

188 
timevÆ
 
tv
;

190 
	`gëtimeofday
(&
tv
, 
NULL
);

191 *
£c⁄ds
 = 
tv
.
tv_£c
;

192 *
mûli£c⁄ds
 = 
tv
.
tv_u£c
/1000;

193 
	}
}

195 
	$´AddMûli£c⁄dsToNow
(
mûli£c⁄ds
, *
£c
, *
ms
) {

196 
cur_£c
, 
cur_ms
, 
whí_£c
, 
whí_ms
;

198 
	`´GëTime
(&
cur_£c
, &
cur_ms
);

199 
whí_£c
 = 
cur_£c
 + 
mûli£c⁄ds
/1000;

200 
whí_ms
 = 
cur_ms
 + 
mûli£c⁄ds
%1000;

201 i‡(
whí_ms
 >= 1000) {

202 
whí_£c
 ++;

203 
whí_ms
 -= 1000;

205 *
£c
 = 
whí_£c
;

206 *
ms
 = 
whí_ms
;

207 
	}
}

209 
	$´Cª©eTimeEvít
(
´EvítLo›
 *
evítLo›
, 
mûli£c⁄ds
,

210 
´TimeProc
 *
¥oc
, *
˛õ¡D©a
,

211 
´EvítFöÆizîProc
 *
föÆizîProc
)

213 
id
 = 
evítLo›
->
timeEvítNextId
++;

214 
´TimeEvít
 *
ã
;

216 
ã
 = 
	`dÆloc
((*te));

217 i‡(
ã
 =
NULL
Ë 
AE_ERR
;

218 
ã
->
id
 = id;

219 
	`´AddMûli£c⁄dsToNow
(
mûli£c⁄ds
,&
ã
->
whí_£c
,&ã->
whí_ms
);

220 
ã
->
timeProc
 = 
¥oc
;

221 
ã
->
föÆizîProc
 = finalizerProc;

222 
ã
->
˛õ¡D©a
 = clientData;

223 
ã
->
√xt
 = 
evítLo›
->
timeEvítHód
;

224 
evítLo›
->
timeEvítHód
 = 
ã
;

225  
id
;

226 
	}
}

228 
	$´DñëeTimeEvít
(
´EvítLo›
 *
evítLo›
, 
id
)

230 
´TimeEvít
 *
ã
 = 
evítLo›
->
timeEvítHód
;

231 
ã
) {

232 i‡(
ã
->
id
 == id) {

233 
ã
->
id
 = 
AE_DELETED_EVENT_ID
;

234  
AE_OK
;

236 
ã
 =Åe->
√xt
;

238  
AE_ERR
;

239 
	}
}

252 
´TimeEvít
 *
	$´SórchNóª°Timî
(
´EvítLo›
 *
evítLo›
)

254 
´TimeEvít
 *
ã
 = 
evítLo›
->
timeEvítHód
;

255 
´TimeEvít
 *
√¨e°
 = 
NULL
;

257 
ã
) {

258 i‡(!
√¨e°
 || 
ã
->
whí_£c
 <Çearest->when_sec ||

259 (
ã
->
whí_£c
 =
√¨e°
->when_sec &&

260 
ã
->
whí_ms
 < 
√¨e°
->when_ms))

261 
√¨e°
 = 
ã
;

262 
ã
 =Åe->
√xt
;

264  
√¨e°
;

265 
	}
}

268 
	$¥o˚ssTimeEvíts
(
´EvítLo›
 *
evítLo›
) {

269 
¥o˚s£d
 = 0;

270 
´TimeEvít
 *
ã
, *
¥ev
;

271 
maxId
;

272 
time_t
 
now
 = 
	`time
(
NULL
);

282 i‡(
now
 < 
evítLo›
->
œ°Time
) {

283 
ã
 = 
evítLo›
->
timeEvítHód
;

284 
ã
) {

285 
ã
->
whí_£c
 = 0;

286 
ã
 =Åe->
√xt
;

289 
evítLo›
->
œ°Time
 = 
now
;

291 
¥ev
 = 
NULL
;

292 
ã
 = 
evítLo›
->
timeEvítHód
;

293 
maxId
 = 
evítLo›
->
timeEvítNextId
-1;

294 
ã
) {

295 
now_£c
, 
now_ms
;

296 
id
;

299 i‡(
ã
->
id
 =
AE_DELETED_EVENT_ID
) {

300 
´TimeEvít
 *
√xt
 = 
ã
->next;

301 i‡(
¥ev
 =
NULL
)

302 
evítLo›
->
timeEvítHód
 = 
ã
->
√xt
;

304 
¥ev
->
√xt
 = 
ã
->next;

305 i‡(
ã
->
föÆizîProc
)

306 
ã
->
	`föÆizîProc
(
evítLo›
,Åe->
˛õ¡D©a
);

307 
	`d‰ì
(
ã
);

308 
ã
 = 
√xt
;

317 i‡(
ã
->
id
 > 
maxId
) {

318 
ã
 =Åe->
√xt
;

321 
	`´GëTime
(&
now_£c
, &
now_ms
);

322 i‡(
now_£c
 > 
ã
->
whí_£c
 ||

323 (
now_£c
 =
ã
->
whí_£c
 && 
now_ms
 >ã->
whí_ms
))

325 
ªtvÆ
;

327 
id
 = 
ã
->id;

328 
ªtvÆ
 = 
ã
->
	`timeProc
(
evítLo›
, 
id
,Åe->
˛õ¡D©a
);

329 
¥o˚s£d
++;

330 i‡(
ªtvÆ
 !
AE_NOMORE
) {

331 
	`´AddMûli£c⁄dsToNow
(
ªtvÆ
,&
ã
->
whí_£c
,&ã->
whí_ms
);

333 
ã
->
id
 = 
AE_DELETED_EVENT_ID
;

336 
¥ev
 = 
ã
;

337 
ã
 =Åe->
√xt
;

339  
¥o˚s£d
;

340 
	}
}

355 
	$´Pro˚ssEvíts
(
´EvítLo›
 *
evítLo›
, 
Êags
)

357 
¥o˚s£d
 = 0, 
numevíts
;

360 i‡(!(
Êags
 & 
AE_TIME_EVENTS
Ë&& !(Êag†& 
AE_FILE_EVENTS
))  0;

366 i‡(
evítLo›
->
maxfd
 != -1 ||

367 ((
Êags
 & 
AE_TIME_EVENTS
Ë&& !(Êag†& 
AE_DONT_WAIT
))) {

368 
j
;

369 
´TimeEvít
 *
sh‹ã°
 = 
NULL
;

370 
timevÆ
 
tv
, *
tvp
;

372 i‡(
Êags
 & 
AE_TIME_EVENTS
 && !(Êag†& 
AE_DONT_WAIT
))

373 
sh‹ã°
 = 
	`´SórchNóª°Timî
(
evítLo›
);

374 i‡(
sh‹ã°
) {

375 
now_£c
, 
now_ms
;

377 
	`´GëTime
(&
now_£c
, &
now_ms
);

378 
tvp
 = &
tv
;

382 
ms
 =

383 (
sh‹ã°
->
whí_£c
 - 
now_£c
)*1000 +

384 
sh‹ã°
->
whí_ms
 - 
now_ms
;

386 i‡(
ms
 > 0) {

387 
tvp
->
tv_£c
 = 
ms
/1000;

388 
tvp
->
tv_u£c
 = (
ms
 % 1000)*1000;

390 
tvp
->
tv_£c
 = 0;

391 
tvp
->
tv_u£c
 = 0;

397 i‡(
Êags
 & 
AE_DONT_WAIT
) {

398 
tv
.
tv_£c
 =Åv.
tv_u£c
 = 0;

399 
tvp
 = &
tv
;

402 
tvp
 = 
NULL
;

406 
numevíts
 = 
	`´ApiPﬁl
(
evítLo›
, 
tvp
);

407 
j
 = 0; j < 
numevíts
; j++) {

408 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[evítLo›->
fúed
[
j
].
fd
];

409 
mask
 = 
evítLo›
->
fúed
[
j
].mask;

410 
fd
 = 
evítLo›
->
fúed
[
j
].fd;

411 
rfúed
 = 0;

416 i‡(
„
->
mask
 & mask & 
AE_READABLE
) {

417 
rfúed
 = 1;

418 
„
->
	`rfûeProc
(
evítLo›
,
fd
,„->
˛õ¡D©a
,
mask
);

420 i‡(
„
->
mask
 & mask & 
AE_WRITABLE
) {

421 i‡(!
rfúed
 || 
„
->
wfûeProc
 !„->
rfûeProc
)

422 
„
->
	`wfûeProc
(
evítLo›
,
fd
,„->
˛õ¡D©a
,
mask
);

424 
¥o˚s£d
++;

428 i‡(
Êags
 & 
AE_TIME_EVENTS
)

429 
¥o˚s£d
 +
	`¥o˚ssTimeEvíts
(
evítLo›
);

431  
¥o˚s£d
;

432 
	}
}

436 
	$´Waô
(
fd
, 
mask
, 
mûli£c⁄ds
) {

437 
pﬁlfd
 
pfd
;

438 
ªtmask
 = 0, 
ªtvÆ
;

440 
	`mem£t
(&
pfd
, 0, (pfd));

441 
pfd
.
fd
 = fd;

442 i‡(
mask
 & 
AE_READABLE
Ë
pfd
.
evíts
 |
POLLIN
;

443 i‡(
mask
 & 
AE_WRITABLE
Ë
pfd
.
evíts
 |
POLLOUT
;

445 i‡((
ªtvÆ
 = 
	`pﬁl
(&
pfd
, 1, 
mûli£c⁄ds
))== 1) {

446 i‡(
pfd
.
ªvíts
 & 
POLLIN
Ë
ªtmask
 |
AE_READABLE
;

447 i‡(
pfd
.
ªvíts
 & 
POLLOUT
Ë
ªtmask
 |
AE_WRITABLE
;

448 i‡(
pfd
.
ªvíts
 & 
POLLERR
Ë
ªtmask
 |
AE_WRITABLE
;

449 i‡(
pfd
.
ªvíts
 & 
POLLHUP
Ë
ªtmask
 |
AE_WRITABLE
;

450  
ªtmask
;

452  
ªtvÆ
;

454 
	}
}

456 
	$´Maö
(
´EvítLo›
 *
evítLo›
) {

457 
evítLo›
->
°›
 = 0;

458 !
evítLo›
->
°›
) {

459 i‡(
evítLo›
->
bef‹e¶ìp
 !
NULL
)

460 
evítLo›
->
	`bef‹e¶ìp
”vítLo›,ÉvítLo›->
bsd©a
);

461 
	`´Pro˚ssEvíts
(
evítLo›
, 
AE_ALL_EVENTS
);

463 
	}
}

465 *
	$´GëApiName
() {

466  
	`´ApiName
();

467 
	}
}

469 
	$´SëBef‹eSÀïProc
(
´EvítLo›
 *
evítLo›
, 
´Bef‹eSÀïProc
 *
bef‹e¶ìp
, *
¥iv©e_d©a
) {

470 
evítLo›
->
bef‹e¶ìp
 = beforesleep;

471 
evítLo›
->
bsd©a
 = 
¥iv©e_d©a
;

472 
	}
}

	@dep/ae/ae.h

33 #i‚de‡
__AE_H__


34 
	#__AE_H__


	)

36 
	~<time.h
>

38 
	#AE_OK
 0

	)

39 
	#AE_ERR
 -1

	)

41 
	#AE_NONE
 0

	)

42 
	#AE_READABLE
 1

	)

43 
	#AE_WRITABLE
 2

	)

45 
	#AE_FILE_EVENTS
 1

	)

46 
	#AE_TIME_EVENTS
 2

	)

47 
	#AE_ALL_EVENTS
 (
AE_FILE_EVENTS
|
AE_TIME_EVENTS
)

	)

48 
	#AE_DONT_WAIT
 4

	)

50 
	#AE_NOMORE
 -1

	)

51 
	#AE_DELETED_EVENT_ID
 -1

	)

54 
	#AE_NOTUSED
(
V
Ë((ËV)

	)

56 
	g´EvítLo›
;

59 
	t´FûeProc
(
	t´EvítLo›
 *
	tevítLo›
, 
	tfd
, *
	t˛õ¡D©a
, 
	tmask
);

60 
	t´TimeProc
(
	t´EvítLo›
 *
	tevítLo›
, 
	tid
, *
	t˛õ¡D©a
);

61 
	t´EvítFöÆizîProc
(
	t´EvítLo›
 *
	tevítLo›
, *
	t˛õ¡D©a
);

62 
	t´Bef‹eSÀïProc
(
	t´EvítLo›
 *
	tevítLo›
, *
	t¥iv©e_d©a
);

65 
	s´FûeEvít
 {

66 
	mmask
;

67 
´FûeProc
 *
	mrfûeProc
;

68 
´FûeProc
 *
	mwfûeProc
;

69 *
	m˛õ¡D©a
;

70 } 
	t´FûeEvít
;

73 
	s´TimeEvít
 {

74 
	mid
;

75 
	mwhí_£c
;

76 
	mwhí_ms
;

77 
´TimeProc
 *
	mtimeProc
;

78 
´EvítFöÆizîProc
 *
	mföÆizîProc
;

79 *
	m˛õ¡D©a
;

80 
´TimeEvít
 *
	m√xt
;

81 } 
	t´TimeEvít
;

84 
	s´FúedEvít
 {

85 
	mfd
;

86 
	mmask
;

87 } 
	t´FúedEvít
;

90 
	s´EvítLo›
 {

91 
	mmaxfd
;

92 
	m£tsize
;

93 
	mtimeEvítNextId
;

94 
time_t
 
	mœ°Time
;

95 
´FûeEvít
 *
	mevíts
;

96 
´FúedEvít
 *
	mfúed
;

97 
´TimeEvít
 *
	mtimeEvítHód
;

98 
	m°›
;

99 *
	m≠id©a
;

100 
´Bef‹eSÀïProc
 *
	mbef‹e¶ìp
;

101 *
	mbsd©a
;

102 } 
	t´EvítLo›
;

105 
´EvítLo›
 *
´Cª©eEvítLo›
(
£tsize
);

106 
´DñëeEvítLo›
(
´EvítLo›
 *
evítLo›
);

107 
´St›
(
´EvítLo›
 *
evítLo›
);

108 
´Cª©eFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
,

109 
´FûeProc
 *
¥oc
, *
˛õ¡D©a
);

110 
´DñëeFûeEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
);

111 
´GëFûeEvíts
(
´EvítLo›
 *
evítLo›
, 
fd
);

112 
´Cª©eTimeEvít
(
´EvítLo›
 *
evítLo›
, 
mûli£c⁄ds
,

113 
´TimeProc
 *
¥oc
, *
˛õ¡D©a
,

114 
´EvítFöÆizîProc
 *
föÆizîProc
);

115 
´DñëeTimeEvít
(
´EvítLo›
 *
evítLo›
, 
id
);

116 
´Pro˚ssEvíts
(
´EvítLo›
 *
evítLo›
, 
Êags
);

117 
´Waô
(
fd
, 
mask
, 
mûli£c⁄ds
);

118 
´Maö
(
´EvítLo›
 *
evítLo›
);

119 *
´GëApiName
();

120 
´SëBef‹eSÀïProc
(
´EvítLo›
 *
evítLo›
, 
´Bef‹eSÀïProc
 *
bef‹e¶ìp
, *
¥iv©e_d©a
);

121 
´GëSëSize
(
´EvítLo›
 *
evítLo›
);

122 
´ResizeSëSize
(
´EvítLo›
 *
evítLo›
, 
£tsize
);

	@dep/ae/ae_epoll.c

32 
	~<sys/ïﬁl.h
>

34 
	s´ApiSèã
 {

35 
	mïfd
;

36 
ïﬁl_evít
 *
	mevíts
;

37 } 
	t´ApiSèã
;

39 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

40 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

42 i‡(!
°©e
)  -1;

43 
°©e
->
evíts
 = 
	`dÆloc
((
ïﬁl_evít
)*
evítLo›
->
£tsize
);

44 i‡(!
°©e
->
evíts
) {

45 
	`d‰ì
(
°©e
);

48 
°©e
->
ïfd
 = 
	`ïﬁl_¸óã
(1024);

49 i‡(
°©e
->
ïfd
 == -1) {

50 
	`d‰ì
(
°©e
->
evíts
);

51 
	`d‰ì
(
°©e
);

54 
evítLo›
->
≠id©a
 = 
°©e
;

56 
	}
}

58 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

59 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

61 
°©e
->
evíts
 = 
	`dªÆloc
(°©e->evíts, (
ïﬁl_evít
)*
£tsize
);

63 
	}
}

65 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

66 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

68 
	`˛o£
(
°©e
->
ïfd
);

69 
	`d‰ì
(
°©e
->
evíts
);

70 
	`d‰ì
(
°©e
);

71 
	}
}

73 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

74 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

75 
ïﬁl_evít
 
ì
 = {0};

78 
›
 = 
evítLo›
->
evíts
[
fd
].
mask
 =
AE_NONE
 ?

79 
EPOLL_CTL_ADD
 : 
EPOLL_CTL_MOD
;

81 
ì
.
evíts
 = 0;

82 
mask
 |
evítLo›
->
evíts
[
fd
].mask;

83 i‡(
mask
 & 
AE_READABLE
Ë
ì
.
evíts
 |
EPOLLIN
;

84 i‡(
mask
 & 
AE_WRITABLE
Ë
ì
.
evíts
 |
EPOLLOUT
;

85 
ì
.
d©a
.
fd
 = fd;

86 i‡(
	`ïﬁl_˘l
(
°©e
->
ïfd
,
›
,
fd
,&
ì
) == -1)  -1;

88 
	}
}

90 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
dñmask
) {

91 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

92 
ïﬁl_evít
 
ì
 = {0};

93 
mask
 = 
evítLo›
->
evíts
[
fd
].mask & (~
dñmask
);

95 
ì
.
evíts
 = 0;

96 i‡(
mask
 & 
AE_READABLE
Ë
ì
.
evíts
 |
EPOLLIN
;

97 i‡(
mask
 & 
AE_WRITABLE
Ë
ì
.
evíts
 |
EPOLLOUT
;

98 
ì
.
d©a
.
fd
 = fd;

99 i‡(
mask
 !
AE_NONE
) {

100 
	`ïﬁl_˘l
(
°©e
->
ïfd
,
EPOLL_CTL_MOD
,
fd
,&
ì
);

104 
	`ïﬁl_˘l
(
°©e
->
ïfd
,
EPOLL_CTL_DEL
,
fd
,&
ì
);

106 
	}
}

108 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

109 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

110 
ªtvÆ
, 
numevíts
 = 0;

112 
ªtvÆ
 = 
	`ïﬁl_waô
(
°©e
->
ïfd
,°©e->
evíts
,
evítLo›
->
£tsize
,

113 
tvp
 ? (tvp->
tv_£c
*1000 +Åvp->
tv_u£c
/1000) : -1);

114 i‡(
ªtvÆ
 > 0) {

115 
j
;

117 
numevíts
 = 
ªtvÆ
;

118 
j
 = 0; j < 
numevíts
; j++) {

119 
mask
 = 0;

120 
ïﬁl_evít
 *
e
 = 
°©e
->
evíts
+
j
;

122 i‡(
e
->
evíts
 & 
EPOLLIN
Ë
mask
 |
AE_READABLE
;

123 i‡(
e
->
evíts
 & 
EPOLLOUT
Ë
mask
 |
AE_WRITABLE
;

124 i‡(
e
->
evíts
 & 
EPOLLERR
Ë
mask
 |
AE_WRITABLE
;

125 i‡(
e
->
evíts
 & 
EPOLLHUP
Ë
mask
 |
AE_WRITABLE
;

126 
evítLo›
->
fúed
[
j
].
fd
 = 
e
->
d©a
.fd;

127 
evítLo›
->
fúed
[
j
].
mask
 = mask;

130  
numevíts
;

131 
	}
}

133 *
	$´ApiName
() {

135 
	}
}

	@dep/ae/ae_evport.c

31 
	~<as£π.h
>

32 
	~<î∫o.h
>

33 
	~<p‹t.h
>

34 
	~<pﬁl.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sys/time.h
>

39 
	~<°dio.h
>

41 
	gevp‹t_debug
 = 0;

66 
	#MAX_EVENT_BATCHSZ
 512

	)

68 
	s´ApiSèã
 {

69 
	mp‹tfd
;

70 
	m≈ídög
;

71 
	m≥ndög_fds
[
MAX_EVENT_BATCHSZ
];

72 
	m≥ndög_masks
[
MAX_EVENT_BATCHSZ
];

73 } 
	t´ApiSèã
;

75 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

76 
i
;

77 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

78 i‡(!
°©e
)  -1;

80 
°©e
->
p‹tfd
 = 
	`p‹t_¸óã
();

81 i‡(
°©e
->
p‹tfd
 == -1) {

82 
	`d‰ì
(
°©e
);

86 
°©e
->
≈ídög
 = 0;

88 
i
 = 0; i < 
MAX_EVENT_BATCHSZ
; i++) {

89 
°©e
->
≥ndög_fds
[
i
] = -1;

90 
°©e
->
≥ndög_masks
[
i
] = 
AE_NONE
;

93 
evítLo›
->
≠id©a
 = 
°©e
;

95 
	}
}

97 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

100 
	}
}

102 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

103 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

105 
	`˛o£
(
°©e
->
p‹tfd
);

106 
	`d‰ì
(
°©e
);

107 
	}
}

109 
	$´ApiLookupPídög
(
´ApiSèã
 *
°©e
, 
fd
) {

110 
i
;

112 
i
 = 0; i < 
°©e
->
≈ídög
; i++) {

113 i‡(
°©e
->
≥ndög_fds
[
i
] =
fd
)

114  (
i
);

118 
	}
}

123 
	$´ApiAssocüã
(c⁄° *
whîe
, 
p‹tfd
, 
fd
, 
mask
) {

124 
evíts
 = 0;

125 
rv
, 
îr
;

127 i‡(
mask
 & 
AE_READABLE
)

128 
evíts
 |
POLLIN
;

129 i‡(
mask
 & 
AE_WRITABLE
)

130 
evíts
 |
POLLOUT
;

132 i‡(
evp‹t_debug
)

133 
	`Ârötf
(
°dîr
, "%s:Ö‹t_assocüã(%d, 0x%xË", 
whîe
, 
fd
, 
evíts
);

135 
rv
 = 
	`p‹t_assocüã
(
p‹tfd
, 
PORT_SOURCE_FD
, 
fd
, 
evíts
,

136 (*)(
uöçå_t
)
mask
);

137 
îr
 = 
î∫o
;

139 i‡(
evp‹t_debug
)

140 
	`Ârötf
(
°dîr
, "%d (%s)\n", 
rv
,Ñv =0 ? "nÿîr‹" : 
	`°ªº‹
(
îr
));

142 i‡(
rv
 == -1) {

143 
	`Ârötf
(
°dîr
, "%s:Ö‹t_assocüã: %s\n", 
whîe
, 
	`°ªº‹
(
îr
));

145 i‡(
îr
 =
EAGAIN
)

146 
	`Ârötf
(
°dîr
, "aeApiAssociate:ÉventÖortÜimitÉxceeded.");

149  
rv
;

150 
	}
}

152 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

153 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

154 
fuŒmask
, 
pfd
;

156 i‡(
evp‹t_debug
)

157 
	`Ârötf
(
°dîr
, "´ApiAddEvít: fd %d mask 0x%x\n", 
fd
, 
mask
);

164 
fuŒmask
 = 
mask
 | 
evítLo›
->
evíts
[
fd
].mask;

165 
pfd
 = 
	`´ApiLookupPídög
(
°©e
, 
fd
);

167 i‡(
pfd
 != -1) {

174 i‡(
evp‹t_debug
)

175 
	`Ârötf
(
°dîr
, "´ApiAddEvít:áddögÅÿ≥ndög fd %d\n", 
fd
);

176 
°©e
->
≥ndög_masks
[
pfd
] |
fuŒmask
;

180  (
	`´ApiAssocüã
("´ApiAddEvít", 
°©e
->
p‹tfd
, 
fd
, 
fuŒmask
));

181 
	}
}

183 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

184 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

185 
fuŒmask
, 
pfd
;

187 i‡(
evp‹t_debug
)

188 
	`Ârötf
(
°dîr
, "dñ fd %d mask 0x%x\n", 
fd
, 
mask
);

190 
pfd
 = 
	`´ApiLookupPídög
(
°©e
, 
fd
);

192 i‡(
pfd
 != -1) {

193 i‡(
evp‹t_debug
)

194 
	`Ârötf
(
°dîr
, "dñëögÉvíà‰omÖídög fd %d\n", 
fd
);

201 
°©e
->
≥ndög_masks
[
pfd
] &~
mask
;

203 i‡(
°©e
->
≥ndög_masks
[
pfd
] =
AE_NONE
)

204 
°©e
->
≥ndög_fds
[
pfd
] = -1;

217 
fuŒmask
 = 
evítLo›
->
evíts
[
fd
].
mask
;

218 i‡(
fuŒmask
 =
AE_NONE
) {

223 i‡(
evp‹t_debug
)

224 
	`Ârötf
(
°dîr
, "´ApiDñEvít:Ö‹t_dissocüã(%d)\n", 
fd
);

226 i‡(
	`p‹t_dissocüã
(
°©e
->
p‹tfd
, 
PORT_SOURCE_FD
, 
fd
) != 0) {

227 
	`≥º‹
("aeApiDelEvent:Öort_dissociate");

228 
	`ab‹t
();

230 } i‡(
	`´ApiAssocüã
("´ApiDñEvít", 
°©e
->
p‹tfd
, 
fd
,

231 
fuŒmask
) != 0) {

239 
	`ab‹t
();

241 
	}
}

243 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

244 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

245 
time•ec
 
timeout
, *
t•
;

246 
mask
, 
i
;

247 
uöt_t
 
√víts
;

248 
p‹t_evít_t
 
evít
[
MAX_EVENT_BATCHSZ
];

255 
i
 = 0; i < 
°©e
->
≈ídög
; i++) {

256 i‡(
°©e
->
≥ndög_fds
[
i
] == -1)

260 i‡(
	`´ApiAssocüã
("´ApiPﬁl", 
°©e
->
p‹tfd
,

261 
°©e
->
≥ndög_fds
[
i
], sèã->
≥ndög_masks
[i]) != 0) {

263 
	`ab‹t
();

266 
°©e
->
≥ndög_masks
[
i
] = 
AE_NONE
;

267 
°©e
->
≥ndög_fds
[
i
] = -1;

270 
°©e
->
≈ídög
 = 0;

272 i‡(
tvp
 !
NULL
) {

273 
timeout
.
tv_£c
 = 
tvp
->tv_sec;

274 
timeout
.
tv_n£c
 = 
tvp
->
tv_u£c
 * 1000;

275 
t•
 = &
timeout
;

277 
t•
 = 
NULL
;

284 
√víts
 = 1;

285 i‡(
	`p‹t_gën
(
°©e
->
p‹tfd
, 
evít
, 
MAX_EVENT_BATCHSZ
, &
√víts
,

286 
t•
Ë=-1 && (
î∫o
 !
ETIME
 || 
√víts
 == 0)) {

287 i‡(
î∫o
 =
ETIME
 ||Éºnÿ=
EINTR
)

291 
	`≥º‹
("aeApiPoll:Öort_get");

292 
	`ab‹t
();

295 
°©e
->
≈ídög
 = 
√víts
;

297 
i
 = 0; i < 
√víts
; i++) {

298 
mask
 = 0;

299 i‡(
evít
[
i
].
p‹ãv_evíts
 & 
POLLIN
)

300 
mask
 |
AE_READABLE
;

301 i‡(
evít
[
i
].
p‹ãv_evíts
 & 
POLLOUT
)

302 
mask
 |
AE_WRITABLE
;

304 
evítLo›
->
fúed
[
i
].
fd
 = 
evít
[i].
p‹ãv_obje˘
;

305 
evítLo›
->
fúed
[
i
].
mask
 = mask;

307 i‡(
evp‹t_debug
)

308 
	`Ârötf
(
°dîr
, "aeApiPoll: fd %d mask 0x%x\n",

309 ()
evít
[
i
].
p‹ãv_obje˘
, 
mask
);

311 
°©e
->
≥ndög_fds
[
i
] = 
evít
[i].
p‹ãv_obje˘
;

312 
°©e
->
≥ndög_masks
[
i
] = (
uöçå_t
)
evít
[i].
p‹ãv_u£r
;

315  
√víts
;

316 
	}
}

318 *
	$´ApiName
() {

320 
	}
}

	@dep/ae/ae_kqueue.c

32 
	~<sys/ty≥s.h
>

33 
	~<sys/evít.h
>

34 
	~<sys/time.h
>

36 
	s´ApiSèã
 {

37 
	mkqfd
;

38 
kevít
 *
	mevíts
;

39 } 
	t´ApiSèã
;

41 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

42 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

44 i‡(!
°©e
)  -1;

45 
°©e
->
evíts
 = 
	`dÆloc
((
kevít
)*
evítLo›
->
£tsize
);

46 i‡(!
°©e
->
evíts
) {

47 
	`d‰ì
(
°©e
);

50 
°©e
->
kqfd
 = 
	`kqueue
();

51 i‡(
°©e
->
kqfd
 == -1) {

52 
	`d‰ì
(
°©e
->
evíts
);

53 
	`d‰ì
(
°©e
);

56 
evítLo›
->
≠id©a
 = 
°©e
;

58 
	}
}

60 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

61 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

63 
°©e
->
evíts
 = 
	`dªÆloc
(°©e->evíts, (
kevít
)*
£tsize
);

65 
	}
}

67 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

68 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

70 
	`˛o£
(
°©e
->
kqfd
);

71 
	`d‰ì
(
°©e
->
evíts
);

72 
	`d‰ì
(
°©e
);

73 
	}
}

75 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

76 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

77 
kevít
 
ke
;

79 i‡(
mask
 & 
AE_READABLE
) {

80 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_READ
, 
EV_ADD
, 0, 0, 
NULL
);

81 i‡(
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL) == -1)  -1;

83 i‡(
mask
 & 
AE_WRITABLE
) {

84 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_WRITE
, 
EV_ADD
, 0, 0, 
NULL
);

85 i‡(
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL) == -1)  -1;

88 
	}
}

90 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

91 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

92 
kevít
 
ke
;

94 i‡(
mask
 & 
AE_READABLE
) {

95 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_READ
, 
EV_DELETE
, 0, 0, 
NULL
);

96 
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL);

98 i‡(
mask
 & 
AE_WRITABLE
) {

99 
	`EV_SET
(&
ke
, 
fd
, 
EVFILT_WRITE
, 
EV_DELETE
, 0, 0, 
NULL
);

100 
	`kevít
(
°©e
->
kqfd
, &
ke
, 1, 
NULL
, 0, NULL);

102 
	}
}

104 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

105 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

106 
ªtvÆ
, 
numevíts
 = 0;

108 i‡(
tvp
 !
NULL
) {

109 
time•ec
 
timeout
;

110 
timeout
.
tv_£c
 = 
tvp
->tv_sec;

111 
timeout
.
tv_n£c
 = 
tvp
->
tv_u£c
 * 1000;

112 
ªtvÆ
 = 
	`kevít
(
°©e
->
kqfd
, 
NULL
, 0, sèã->
evíts
, 
evítLo›
->
£tsize
,

113 &
timeout
);

115 
ªtvÆ
 = 
	`kevít
(
°©e
->
kqfd
, 
NULL
, 0, sèã->
evíts
, 
evítLo›
->
£tsize
,

116 
NULL
);

119 i‡(
ªtvÆ
 > 0) {

120 
j
;

122 
numevíts
 = 
ªtvÆ
;

123 
j
 = 0; j < 
numevíts
; j++) {

124 
mask
 = 0;

125 
kevít
 *
e
 = 
°©e
->
evíts
+
j
;

127 i‡(
e
->
fûãr
 =
EVFILT_READ
Ë
mask
 |
AE_READABLE
;

128 i‡(
e
->
fûãr
 =
EVFILT_WRITE
Ë
mask
 |
AE_WRITABLE
;

129 
evítLo›
->
fúed
[
j
].
fd
 = 
e
->
idít
;

130 
evítLo›
->
fúed
[
j
].
mask
 = mask;

133  
numevíts
;

134 
	}
}

136 *
	$´ApiName
() {

138 
	}
}

	@dep/ae/ae_select.c

32 
	~<°rög.h
>

34 
	s´ApiSèã
 {

35 
fd_£t
 
	mrfds
, 
	mwfds
;

38 
fd_£t
 
	m_rfds
, 
	m_wfds
;

39 } 
	t´ApiSèã
;

41 
	$´ApiCª©e
(
´EvítLo›
 *
evítLo›
) {

42 
´ApiSèã
 *
°©e
 = 
	`dÆloc
((aeApiState));

44 i‡(!
°©e
)  -1;

45 
	`FD_ZERO
(&
°©e
->
rfds
);

46 
	`FD_ZERO
(&
°©e
->
wfds
);

47 
evítLo›
->
≠id©a
 = 
°©e
;

49 
	}
}

51 
	$´ApiResize
(
´EvítLo›
 *
evítLo›
, 
£tsize
) {

53 i‡(
£tsize
 >
FD_SETSIZE
)  -1;

55 
	}
}

57 
	$´ApiFªe
(
´EvítLo›
 *
evítLo›
) {

58 
	`d‰ì
(
evítLo›
->
≠id©a
);

59 
	}
}

61 
	$´ApiAddEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

62 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

64 i‡(
mask
 & 
AE_READABLE
Ë
	`FD_SET
(
fd
,&
°©e
->
rfds
);

65 i‡(
mask
 & 
AE_WRITABLE
Ë
	`FD_SET
(
fd
,&
°©e
->
wfds
);

67 
	}
}

69 
	$´ApiDñEvít
(
´EvítLo›
 *
evítLo›
, 
fd
, 
mask
) {

70 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

72 i‡(
mask
 & 
AE_READABLE
Ë
	`FD_CLR
(
fd
,&
°©e
->
rfds
);

73 i‡(
mask
 & 
AE_WRITABLE
Ë
	`FD_CLR
(
fd
,&
°©e
->
wfds
);

74 
	}
}

76 
	$´ApiPﬁl
(
´EvítLo›
 *
evítLo›
, 
timevÆ
 *
tvp
) {

77 
´ApiSèã
 *
°©e
 = 
evítLo›
->
≠id©a
;

78 
ªtvÆ
, 
j
, 
numevíts
 = 0;

80 
	`mem˝y
(&
°©e
->
_rfds
,&°©e->
rfds
,(
fd_£t
));

81 
	`mem˝y
(&
°©e
->
_wfds
,&°©e->
wfds
,(
fd_£t
));

83 
ªtvÆ
 = 
	`£À˘
(
evítLo›
->
maxfd
+1,

84 &
°©e
->
_rfds
,&°©e->
_wfds
,
NULL
,
tvp
);

85 i‡(
ªtvÆ
 > 0) {

86 
j
 = 0; j <
evítLo›
->
maxfd
; j++) {

87 
mask
 = 0;

88 
´FûeEvít
 *
„
 = &
evítLo›
->
evíts
[
j
];

90 i‡(
„
->
mask
 =
AE_NONE
) ;

91 i‡(
„
->
mask
 & 
AE_READABLE
 && 
	`FD_ISSET
(
j
,&
°©e
->
_rfds
))

92 
mask
 |
AE_READABLE
;

93 i‡(
„
->
mask
 & 
AE_WRITABLE
 && 
	`FD_ISSET
(
j
,&
°©e
->
_wfds
))

94 
mask
 |
AE_WRITABLE
;

95 
evítLo›
->
fúed
[
numevíts
].
fd
 = 
j
;

96 
evítLo›
->
fúed
[
numevíts
].
mask
 = mask;

97 
numevíts
++;

100  
numevíts
;

101 
	}
}

103 *
	$´ApiName
() {

105 
	}
}

	@dep/darray/darray.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<d¨øy.h
>

7 
d¨øy
 *

8 
	$d¨øy_¸óã
(
n
, 
size_t
 
size
)

10 
d¨øy
 *
a
;

12 
a
 = 
	`dÆloc
((*a));

13 i‡(
a
 =
NULL
) {

14  
NULL
;

17 
a
->
ñem
 = 
	`dÆloc
(
n
 * 
size
);

18 i‡(
a
->
ñem
 =
NULL
) {

19 
	`d‰ì
(
a
);

20  
NULL
;

23 
a
->
√Àm
 = 0;

24 
a
->
size
 = size;

25 
a
->
«Œoc
 = 
n
;

27  
a
;

28 
	}
}

31 
	$d¨øy_de°roy
(
d¨øy
 *
a
)

33 
	`d¨øy_deöô
(
a
);

34 
	`d‰ì
(
a
);

35 
	}
}

38 
	$d¨øy_öô
(
d¨øy
 *
a
, 
n
, 
size_t
 
size
)

40 
a
->
ñem
 = 
	`dÆloc
(
n
 * 
size
);

41 i‡(
a
->
ñem
 =
NULL
) {

45 
a
->
√Àm
 = 0;

46 
a
->
size
 = size;

47 
a
->
«Œoc
 = 
n
;

50 
	}
}

53 
	$d¨øy_deöô
(
d¨øy
 *
a
)

55 i‡(
a
->
ñem
 !
NULL
) {

56 
	`d‰ì
(
a
->
ñem
);

58 
	}
}

61 
	$d¨øy_idx
(
d¨øy
 *
a
, *
ñem
)

63 *
p
, *
q
;

64 
off
, 
idx
;

66 
p
 = 
a
->
ñem
;

67 
q
 = 
ñem
;

68 
off
 = ()(
q
 - 
p
);

70 
idx
 = 
off
 / ()
a
->
size
;

72  
idx
;

73 
	}
}

76 
	$d¨øy_push
(
d¨øy
 *
a
)

78 *
ñem
, *
√w
;

79 
size_t
 
size
;

81 i‡(
a
->
√Àm
 =a->
«Œoc
) {

84 
size
 = 
a
->sizê*á->
«Œoc
;

85 
√w
 = 
	`dªÆloc
(
a
->
ñem
, 2 * 
size
);

86 i‡(
√w
 =
NULL
) {

87  
NULL
;

90 
a
->
ñem
 = 
√w
;

91 
a
->
«Œoc
 *= 2;

94 
ñem
 = (*)
a
->ñem +á->
size
 *á->
√Àm
;

95 
a
->
√Àm
++;

97  
ñem
;

98 
	}
}

101 
	$d¨øy_p›
(
d¨øy
 *
a
)

103 *
ñem
;

105 
a
->
√Àm
--;

106 
ñem
 = (*)
a
->ñem +á->
size
 *á->
√Àm
;

108  
ñem
;

109 
	}
}

112 
	$d¨øy_gë
(
d¨øy
 *
a
, 
idx
)

114 *
ñem
;

116 
ñem
 = (*)
a
->ñem + (a->
size
 * 
idx
);

118  
ñem
;

119 
	}
}

122 
	$d¨øy_t›
(
d¨øy
 *
a
)

124  
	`d¨øy_gë
(
a
,á->
√Àm
 - 1);

125 
	}
}

128 
	$d¨øy_sw≠
(
d¨øy
 *
a
, d¨øy *
b
)

130 
d¨øy
 
tmp
;

132 
tmp
 = *
a
;

133 *
a
 = *
b
;

134 *
b
 = 
tmp
;

135 
	}
}

142 
	$d¨øy_s‹t
(
d¨øy
 *
a
, 
d¨øy_com∑ª_t
 
com∑ª
)

144 
	`qs‹t
(
a
->
ñem
,á->
√Àm
,á->
size
, 
com∑ª
);

145 
	}
}

152 
	$d¨øy_óch
(
d¨øy
 *
a
, 
d¨øy_óch_t
 
func
, *
d©a
)

154 
i
, 
√Àm
;

156 
i
 = 0, 
√Àm
 = 
	`d¨øy_n
(
a
); i <Çelem; i++) {

157 *
ñem
 = 
	`d¨øy_gë
(
a
, 
i
);

158 
ªt
;

160 
ªt
 = 
	`func
(
ñem
, 
d©a
);

161 i‡(
ªt
 != 0) {

167 
	}
}

	@dep/darray/darray.h

1 #i‚de‡
_DARRAY_H_


2 
	#_DARRAY_H_


	)

4 (*
	td¨øy_com∑ª_t
)(const *, const *);

5 (*
	td¨øy_óch_t
)(*, *);

7 
	sd¨øy
 {

8 
√Àm
;

9 *
ñem
;

10 
size_t
 
size
;

11 
«Œoc
;

12 } 
	td¨øy
;

14 
	#nuŒ_d¨øy
 { 0, 
NULL
, 0, 0 
	}

	)
}

16 
ölöe
 

17 
	$d¨øy_nuŒ
(
d¨øy
 *
a
)

19 
a
->
√Àm
 = 0;

20 
a
->
ñem
 = 
NULL
;

21 
a
->
size
 = 0;

22 
a
->
«Œoc
 = 0;

23 
	}
}

25 
ölöe
 

26 
	$d¨øy_£t
(
d¨øy
 *
a
, *
ñem
, 
size_t
 
size
, 
«Œoc
)

28 
a
->
√Àm
 = 0;

29 
a
->
ñem
 =Élem;

30 
a
->
size
 = size;

31 
a
->
«Œoc
 =Çalloc;

32 
	}
}

34 
ölöe
 

35 
	$d¨øy_n
(c⁄° 
d¨øy
 *
a
)

37  
a
->
√Àm
;

38 
	}
}

40 
d¨øy
 *
d¨øy_¸óã
(
n
, 
size_t
 
size
);

41 
d¨øy_de°roy
(
d¨øy
 *
a
);

42 
d¨øy_öô
(
d¨øy
 *
a
, 
n
, 
size_t
 
size
);

43 
d¨øy_deöô
(
d¨øy
 *
a
);

45 
d¨øy_idx
(
d¨øy
 *
a
, *
ñem
);

46 *
d¨øy_push
(
d¨øy
 *
a
);

47 *
d¨øy_p›
(
d¨øy
 *
a
);

48 *
d¨øy_gë
(
d¨øy
 *
a
, 
idx
);

49 *
d¨øy_t›
(
d¨øy
 *
a
);

50 
d¨øy_sw≠
(
d¨øy
 *
a
, d¨øy *
b
);

51 
d¨øy_s‹t
(
d¨øy
 *
a
, 
d¨øy_com∑ª_t
 
com∑ª
);

52 
d¨øy_óch
(
d¨øy
 *
a
, 
d¨øy_óch_t
 
func
, *
d©a
);

	@dep/dhashkit/dcrc16.c

1 
	~<dhashkô.h
>

3 c⁄° 
uöt16_t
 
	g¸c16èb
[256] = {

38 
uöt32_t


39 
	$hash_¸c16
(c⁄° *
key
, 
size_t
 
key_Àngth
)

41 
uöt64_t
 
x
;

42 
uöt32_t
 
¸c
 = 0;

44 
x
=0; x < 
key_Àngth
; x++) {

45 
¸c
 = (¸¯<< 8Ë^ 
¸c16èb
[((¸¯>> 8Ë^ *
key
++) & 0x00ff];

48  
¸c
;

49 
	}
}

	@dep/dhashkit/dcrc32.c

1 
	~<dhashkô.h
>

3 c⁄° 
uöt32_t
 
	g¸c32èb
[256] = {

74 
uöt32_t


75 
	$hash_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

77 
uöt64_t
 
x
;

78 
uöt32_t
 
¸c
 = 
UINT32_MAX
;

80 
x
 = 0; x < 
key_Àngth
; x++) {

81 
¸c
 = (¸¯>> 8Ë^ 
¸c32èb
[(¸¯^ (
uöt64_t
)
key
[
x
]) & 0xff];

84  ((~
¸c
) >> 16) & 0x7fff;

85 
	}
}

87 
uöt32_t


88 
	$hash_¸c32a
(c⁄° *
key
, 
size_t
 
key_Àngth
)

90 c⁄° 
uöt8_t
 *
p
 = 
key
;

91 
uöt32_t
 
¸c
;

93 
¸c
 = ~0U;

94 
key_Àngth
--) {

95 
¸c
 = 
¸c32èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

98  
¸c
 ^ ~0U;

99 
	}
}

	@dep/dhashkit/dfnv.c

1 
	~<dhashkô.h
>

3 
uöt64_t
 
	gFNV_64_INIT
 = 
UINT64_C
(0xcbf29ce484222325);

4 
uöt64_t
 
	gFNV_64_PRIME
 = 
UINT64_C
(0x100000001b3);

5 
uöt32_t
 
	gFNV_32_INIT
 = 2166136261UL;

6 
uöt32_t
 
	gFNV_32_PRIME
 = 16777619;

8 
uöt32_t


9 
	$hash_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

11 
uöt64_t
 
hash
 = 
FNV_64_INIT
;

12 
size_t
 
x
;

14 
x
 = 0; x < 
key_Àngth
; x++) {

15 
hash
 *
FNV_64_PRIME
;

16 
hash
 ^(
uöt64_t
)
key
[
x
];

19  (
uöt32_t
)
hash
;

20 
	}
}

22 
uöt32_t


23 
	$hash_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
)

25 
uöt32_t
 
hash
 = (uöt32_tË
FNV_64_INIT
;

26 
size_t
 
x
;

28 
x
 = 0; x < 
key_Àngth
; x++) {

29 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

30 
hash
 ^
vÆ
;

31 
hash
 *(
uöt32_t
Ë
FNV_64_PRIME
;

34  
hash
;

35 
	}
}

37 
uöt32_t


38 
	$hash_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

40 
uöt32_t
 
hash
 = 
FNV_32_INIT
;

41 
size_t
 
x
;

43 
x
 = 0; x < 
key_Àngth
; x++) {

44 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

45 
hash
 *
FNV_32_PRIME
;

46 
hash
 ^
vÆ
;

49  
hash
;

50 
	}
}

52 
uöt32_t


53 
	$hash_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
)

55 
uöt32_t
 
hash
 = 
FNV_32_INIT
;

56 
size_t
 
x
;

58 
x
0; x < 
key_Àngth
; x++) {

59 
uöt32_t
 
vÆ
 = (uöt32_t)
key
[
x
];

60 
hash
 ^
vÆ
;

61 
hash
 *
FNV_32_PRIME
;

64  
hash
;

65 
	}
}

	@dep/dhashkit/dhashkit.h

1 #i‚de‡
_DHASHKIT_H_


2 
	#_DHASHKIT_H_


	)

4 
	~<°döt.h
>

5 
	~<°dio.h
>

7 
	~<sys/ty≥s.h
>

9 
	sc⁄töuum
 {

10 
uöt32_t
 
	mödex
;

11 
uöt32_t
 
	mvÆue
;

14 
	#HASH_CODEC
(
ACTION
) \

15 
	`ACTION
–
HASH_ONE_AT_A_TIME
, 
⁄e_©_a_time
 ) \

16 
	`ACTION
–
HASH_MD5
, 
md5
 ) \

17 
	`ACTION
–
HASH_CRC16
, 
¸c16
 ) \

18 
	`ACTION
–
HASH_CRC32
, 
¸c32
 ) \

19 
	`ACTION
–
HASH_CRC32A
, 
¸c32a
 ) \

20 
	`ACTION
–
HASH_FNV1_64
, 
‚v1_64
 ) \

21 
	`ACTION
–
HASH_FNV1A_64
, 
‚v1a_64
 ) \

22 
	`ACTION
–
HASH_FNV1_32
, 
‚v1_32
 ) \

23 
	`ACTION
–
HASH_FNV1A_32
, 
‚v1a_32
 ) \

24 
	`ACTION
–
HASH_HSIEH
, 
hsõh
 ) \

25 
	`ACTION
–
HASH_MURMUR
, 
murmur
 ) \

26 
	`ACTION
–
HASH_JENKINS
, 
jíkös
 ) \

27 

	)

28 
	#DIST_CODEC
(
ACTION
) \

29 
	`ACTION
–
DIST_KETAMA
, 
këama
 ) \

30 
	`ACTION
–
DIST_MODULA
, 
moduœ
 ) \

31 
	`ACTION
–
DIST_RANDOM
, 
øndom
 ) \

32 

	)

33 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë_hash,

	)

34 
	ehash_ty≥
 {

35 
HASH_CODEC
–
DEFINE_ACTION
 )

36 
	mHASH_SENTINEL


37 } 
	thash_ty≥_t
;

38 #unde‡
DEFINE_ACTION


40 
	#DEFINE_ACTION
(
_di°
, 
_«me
Ë_di°,

	)

41 
	edi°_ty≥
 {

42 
DIST_CODEC
–
DEFINE_ACTION
 )

43 
	mDIST_SENTINEL


44 } 
	tdi°_ty≥_t
;

45 #unde‡
DEFINE_ACTION


47 
uöt32_t
 
hash_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
);

48 
md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
);

49 
uöt32_t
 
hash_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
);

50 
uöt32_t
 
hash_¸c16
(c⁄° *
key
, 
size_t
 
key_Àngth
);

51 
uöt32_t
 
hash_¸c32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

52 
uöt32_t
 
hash_¸c32a
(c⁄° *
key
, 
size_t
 
key_Àngth
);

53 
uöt32_t
 
hash_‚v1_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

54 
uöt32_t
 
hash_‚v1a_64
(c⁄° *
key
, 
size_t
 
key_Àngth
);

55 
uöt32_t
 
hash_‚v1_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

56 
uöt32_t
 
hash_‚v1a_32
(c⁄° *
key
, 
size_t
 
key_Àngth
);

57 
uöt32_t
 
hash_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
);

58 
uöt32_t
 
hash_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
);

59 
uöt32_t
 
hash_murmur
(c⁄° *
key
, 
size_t
 
Àngth
);

61 
uöt32_t
 
këama_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

62 
uöt32_t
 
moduœ_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

63 
uöt32_t
 
øndom_di•©ch
(
c⁄töuum
 *c⁄töuum, uöt32_à
nc⁄töuum
, uöt32_à
hash
);

68 
uöt32_t
 
	m°©e
[5];

69 
uöt32_t
 
	mcou¡
[2];

70 
	mbuf„r
[64];

71 } 
	tSHA1_CTX
;

73 
SHA1Tønsf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64]);

74 
SHA1Inô
(
SHA1_CTX
* 
c⁄ãxt
);

75 
SHA1Upd©e
(
SHA1_CTX
* 
c⁄ãxt
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
);

76 
SHA1FöÆ
(
dige°
[20], 
SHA1_CTX
* 
c⁄ãxt
);

	@dep/dhashkit/dhsieh.c

1 
	~<dhashkô.h
>

3 #unde‡
gë16bôs


4 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
))

5 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

8 #i‡!
deföed
 (
gë16bôs
)

9 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8)\

10 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

13 
uöt32_t


14 
	$hash_hsõh
(c⁄° *
key
, 
size_t
 
key_Àngth
)

16 
uöt32_t
 
hash
 = 0, 
tmp
;

17 
ªm
;

19 i‡(
key_Àngth
 <0 || 
key
 =
NULL
) {

23 
ªm
 = 
key_Àngth
 & 3;

24 
key_Àngth
 >>= 2;

27 ;
key_Àngth
 > 0; key_length--) {

28 
hash
 +
	`gë16bôs
 (
key
);

29 
tmp
 = (
	`gë16bôs
 (
key
+2Ë<< 11Ë^ 
hash
;

30 
hash
 = (hash << 16Ë^ 
tmp
;

31 
key
 +2* (
uöt16_t
);

32 
hash
 += hash >> 11;

36 
ªm
) {

38 
hash
 +
	`gë16bôs
 (
key
);

39 
hash
 ^= hash << 16;

40 
hash
 ^(
uöt32_t
)
key
[ (
uöt16_t
)] << 18;

41 
hash
 += hash >> 11;

45 
hash
 +
	`gë16bôs
 (
key
);

46 
hash
 ^= hash << 11;

47 
hash
 += hash >> 17;

51 
hash
 +()(*
key
);

52 
hash
 ^= hash << 10;

53 
hash
 += hash >> 1;

60 
hash
 ^= hash << 3;

61 
hash
 += hash >> 5;

62 
hash
 ^= hash << 4;

63 
hash
 += hash >> 17;

64 
hash
 ^= hash << 25;

65 
hash
 += hash >> 6;

67  
hash
;

68 
	}
}

	@dep/dhashkit/djenkins.c

1 
	~<dhashkô.h
>

3 
	#hashsize
(
n
Ë((
uöt32_t
)1<<“))

	)

4 
	#hashmask
(
n
Ë(
	`hashsize
“)-1)

	)

5 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë| ((x)>>(32-(k))))

	)

7 
	#mix
(
a
,
b
,
c
) \

9 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

10 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

11 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

12 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

13 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

14 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

15 }

	)

17 
	#föÆ
(
a
,
b
,
c
) \

19 
c
 ^
b
; c -
	`rŸ
(b,14); \

20 
a
 ^
c
;á -
	`rŸ
(c,11); \

21 
b
 ^
a
; b -
	`rŸ
(a,25); \

22 
c
 ^
b
; c -
	`rŸ
(b,16); \

23 
a
 ^
c
;á -
	`rŸ
(c,4); \

24 
b
 ^
a
; b -
	`rŸ
(a,14); \

25 
c
 ^
b
; c -
	`rŸ
(b,24); \

26 }

	)

28 
	#JENKINS_INITVAL
 13

	)

46 
uöt32_t


47 
	$hash_jíkös
(c⁄° *
key
, 
size_t
 
Àngth
)

49 
uöt32_t
 
a
,
b
,
c
;

50 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

53 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
JENKINS_INITVAL
;

55 
u
.
±r
 = 
key
;

56 #i‚de‡
WORDS_BIGENDIAN


57 i‡((
u
.
i
 & 0x3) == 0)

59 c⁄° 
uöt32_t
 *
k
 = (c⁄° uöt32_à*)
key
;

62 
Àngth
 > 12)

64 
a
 +
k
[0];

65 
b
 +
k
[1];

66 
c
 +
k
[2];

67 
	`mix
(
a
,
b
,
c
);

68 
Àngth
 -= 12;

69 
k
 += 3;

82 
Àngth
)

84 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

85 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

86 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

87 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

88 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

89 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

90 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

91 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

92 4 : 
a
+=
k
[0]; ;

93 3 : 
a
+=
k
[0]&0xffffff; ;

94 2 : 
a
+=
k
[0]&0xffff; ;

95 1 : 
a
+=
k
[0]&0xff; ;

96 0 :  
c
;

97 :  
c
;

101 i‡((
u
.
i
 & 0x1) == 0)

103 c⁄° 
uöt16_t
 *
k
 = (c⁄° uöt16_à*)
key
;

104 c⁄° 
uöt8_t
 *
k8
;

107 
Àngth
 > 12)

109 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

110 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

111 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

112 
	`mix
(
a
,
b
,
c
);

113 
Àngth
 -= 12;

114 
k
 += 6;

118 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

119 
Àngth
)

121 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

122 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

123 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

125 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

126 10: 
c
+=
k
[4];

127 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

128 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

130 9 : 
c
+=
k8
[8];

131 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

132 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

134 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

135 6 : 
b
+=
k
[2];

136 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

138 5 : 
b
+=
k8
[4];

139 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

141 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

142 2 : 
a
+=
k
[0];

144 1 : 
a
+=
k8
[0];

146 0 :  
c
;

147 :  
c
;

154 c⁄° 
uöt8_t
 *
k
 = (c⁄° uöt8_à*)
key
;

157 
Àngth
 > 12)

159 
a
 +
k
[0];

160 
a
 +((
uöt32_t
)
k
[1])<<8;

161 
a
 +((
uöt32_t
)
k
[2])<<16;

162 
a
 +((
uöt32_t
)
k
[3])<<24;

163 
b
 +
k
[4];

164 
b
 +((
uöt32_t
)
k
[5])<<8;

165 
b
 +((
uöt32_t
)
k
[6])<<16;

166 
b
 +((
uöt32_t
)
k
[7])<<24;

167 
c
 +
k
[8];

168 
c
 +((
uöt32_t
)
k
[9])<<8;

169 
c
 +((
uöt32_t
)
k
[10])<<16;

170 
c
 +((
uöt32_t
)
k
[11])<<24;

171 
	`mix
(
a
,
b
,
c
);

172 
Àngth
 -= 12;

173 
k
 += 12;

177 
Àngth
)

179 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

180 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

181 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

182 9 : 
c
+=
k
[8];

183 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

184 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

185 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

186 5 : 
b
+=
k
[4];

187 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

188 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

189 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

190 1 : 
a
+=
k
[0];

192 0 :  
c
;

193  :  
c
;

195 #i‚de‡
WORDS_BIGENDIAN


199 
	`föÆ
(
a
,
b
,
c
);

200  
c
;

201 
	}
}

	@dep/dhashkit/dketama.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

5 
	~<dhashkô.h
>

7 
	#KETAMA_CONTINUUM_ADDITION
 10

	)

8 
	#KETAMA_POINTS_PER_SERVER
 160

	)

9 
	#KETAMA_MAX_HOSTLEN
 86

	)

11 
uöt32_t


12 
	$këama_hash
(c⁄° *
key
, 
size_t
 
key_Àngth
, 
uöt32_t
 
Æignmít
)

14 
ªsu…s
[16];

16 
	`md5_sig«tuª
((c⁄° *)
key
, ()
key_Àngth
, 
ªsu…s
);

18  ((
uöt32_t
Ë(
ªsu…s
[3 + 
Æignmít
 * 4] & 0xFF) << 24)

19 | ((
uöt32_t
Ë(
ªsu…s
[2 + 
Æignmít
 * 4] & 0xFF) << 16)

20 | ((
uöt32_t
Ë(
ªsu…s
[1 + 
Æignmít
 * 4] & 0xFF) << 8)

21 | (
ªsu…s
[0 + 
Æignmít
 * 4] & 0xFF);

22 
	}
}

25 
	$këama_ôem_cmp
(c⁄° *
t1
, c⁄° *
t2
)

27 c⁄° 
c⁄töuum
 *
˘1
 = 
t1
, *
˘2
 = 
t2
;

29 i‡(
˘1
->
vÆue
 =
˘2
->value) {

31 } i‡(
˘1
->
vÆue
 > 
˘2
->value) {

36 
	}
}

38 
uöt32_t


39 
	$këama_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

41 
c⁄töuum
 *
begö
, *
íd
, *
À·
, *
right
, *
middÀ
;

43 
	`ASSERT
(
c⁄töuum
 !
NULL
);

44 
	`ASSERT
(
nc⁄töuum
 != 0);

46 
begö
 = 
À·
 = 
c⁄töuum
;

47 
íd
 = 
right
 = 
c⁄töuum
 + 
nc⁄töuum
;

49 
À·
 < 
right
) {

50 
middÀ
 = 
À·
 + (
right
 -Üeft) / 2;

51 i‡(
middÀ
->
vÆue
 < 
hash
) {

52 
À·
 = 
middÀ
 + 1;

54 
right
 = 
middÀ
;

58 i‡(
right
 =
íd
) {

59 
right
 = 
begö
;

62  
right
->
ödex
;

63 
	}
}

	@dep/dhashkit/dmd5.c

1 
	~<°rög.h
>

3 
	~<dhashkô.h
>

14 
	tMD5_u32∂us
;

17 
MD5_u32∂us
 
	mlo
, 
	mhi
;

18 
MD5_u32∂us
 
	ma
, 
	mb
, 
	mc
, 
	md
;

19 
	mbuf„r
[64];

20 
MD5_u32∂us
 
	mblock
[16];

21 } 
	tMD5_CTX
;

30 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

31 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

32 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

33 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

38 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

39 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

40 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

41 (
a
Ë+(
b
);

	)

51 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__vax__
)

52 
	#SET
(
n
) \

53 (*(
MD5_u32∂us
 *)&
±r
[(
n
Ë* 4])

	)

54 
	#GET
(
n
) \

55 
	`SET
(
n
)

	)

57 
	#SET
(
n
) \

58 (
˘x
->
block
[(
n
)] = \

59 (
MD5_u32∂us
)
±r
[(
n
) * 4] | \

60 ((
MD5_u32∂us
)
±r
[(
n
) * 4 + 1] << 8) | \

61 ((
MD5_u32∂us
)
±r
[(
n
) * 4 + 2] << 16) | \

62 ((
MD5_u32∂us
)
±r
[(
n
Ë* 4 + 3] << 24))

	)

63 
	#GET
(
n
) \

64 (
˘x
->
block
[(
n
)])

	)

72 
	$body
(
MD5_CTX
 *
˘x
, *
d©a
, 
size
)

74 *
±r
;

75 
MD5_u32∂us
 
a
, 
b
, 
c
, 
d
;

76 
MD5_u32∂us
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

78 
±r
 = 
d©a
;

80 
a
 = 
˘x
->a;

81 
b
 = 
˘x
->b;

82 
c
 = 
˘x
->c;

83 
d
 = 
˘x
->d;

86 
ßved_a
 = 
a
;

87 
ßved_b
 = 
b
;

88 
ßved_c
 = 
c
;

89 
ßved_d
 = 
d
;

92 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7)

93 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12)

94 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17)

95 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22)

96 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7)

97 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12)

98 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17)

99 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22)

100 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7)

101 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12)

102 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17)

103 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22)

104 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7)

105 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12)

106 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17)

107 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22)

110 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5)

111 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9)

112 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14)

113 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20)

114 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5)

115 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9)

116 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14)

117 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20)

118 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5)

119 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9)

120 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14)

121 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20)

122 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5)

123 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9)

124 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14)

125 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20)

128 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4)

129 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11)

130 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16)

131 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23)

132 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4)

133 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11)

134 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16)

135 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23)

136 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4)

137 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11)

138 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16)

139 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23)

140 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4)

141 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11)

142 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16)

143 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23)

146 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6)

147 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10)

148 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15)

149 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21)

150 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6)

151 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10)

152 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15)

153 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21)

154 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6)

155 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10)

156 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15)

157 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21)

158 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6)

159 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10)

160 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15)

161 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21)

163 
a
 +
ßved_a
;

164 
b
 +
ßved_b
;

165 
c
 +
ßved_c
;

166 
d
 +
ßved_d
;

168 
±r
 += 64;

169 } 
size
 -= 64);

171 
˘x
->
a
 =á;

172 
˘x
->
b
 = b;

173 
˘x
->
c
 = c;

174 
˘x
->
d
 = d;

176  
±r
;

177 
	}
}

180 
	$MD5_Inô
(
MD5_CTX
 *
˘x
)

182 
˘x
->
a
 = 0x67452301;

183 
˘x
->
b
 = 0xefcdab89;

184 
˘x
->
c
 = 0x98badcfe;

185 
˘x
->
d
 = 0x10325476;

187 
˘x
->
lo
 = 0;

188 
˘x
->
hi
 = 0;

189 
	}
}

192 
	$MD5_Upd©e
(
MD5_CTX
 *
˘x
, *
d©a
, 
size
)

194 
MD5_u32∂us
 
ßved_lo
;

195 
u£d
, 
‰ì
;

197 
ßved_lo
 = 
˘x
->
lo
;

198 i‡((
˘x
->
lo
 = (
ßved_lo
 + 
size
) & 0x1fffffff) < saved_lo) {

199 
˘x
->
hi
++;

201 
˘x
->
hi
 +
size
 >> 29;

203 
u£d
 = 
ßved_lo
 & 0x3f;

205 i‡(
u£d
) {

206 
‰ì
 = 64 - 
u£d
;

208 i‡(
size
 < 
‰ì
) {

209 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

213 
	`mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

214 
d©a
 = (*)d©®+ 
‰ì
;

215 
size
 -
‰ì
;

216 
	`body
(
˘x
, ctx->
buf„r
, 64);

219 i‡(
size
 >= 64) {

220 
d©a
 = 
	`body
(
˘x
, d©a, 
size
 & ~()0x3f);

221 
size
 &= 0x3f;

224 
	`mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

225 
	}
}

228 
	$MD5_FöÆ
(*
ªsu…
, 
MD5_CTX
 *
˘x
)

230 
u£d
, 
‰ì
;

232 
u£d
 = 
˘x
->
lo
 & 0x3f;

234 
˘x
->
buf„r
[
u£d
++] = 0x80;

236 
‰ì
 = 64 - 
u£d
;

238 i‡(
‰ì
 < 8) {

239 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
‰ì
);

240 
	`body
(
˘x
, ctx->
buf„r
, 64);

241 
u£d
 = 0;

242 
‰ì
 = 64;

245 
	`mem£t
(&
˘x
->
buf„r
[
u£d
], 0, 
‰ì
 - 8);

247 
˘x
->
lo
 <<= 3;

248 
˘x
->
buf„r
[56] = ctx->
lo
;

249 
˘x
->
buf„r
[57] = ctx->
lo
 >> 8;

250 
˘x
->
buf„r
[58] = ctx->
lo
 >> 16;

251 
˘x
->
buf„r
[59] = ctx->
lo
 >> 24;

252 
˘x
->
buf„r
[60] = ctx->
hi
;

253 
˘x
->
buf„r
[61] = ctx->
hi
 >> 8;

254 
˘x
->
buf„r
[62] = ctx->
hi
 >> 16;

255 
˘x
->
buf„r
[63] = ctx->
hi
 >> 24;

257 
	`body
(
˘x
, ctx->
buf„r
, 64);

259 
ªsu…
[0] = 
˘x
->
a
;

260 
ªsu…
[1] = 
˘x
->
a
 >> 8;

261 
ªsu…
[2] = 
˘x
->
a
 >> 16;

262 
ªsu…
[3] = 
˘x
->
a
 >> 24;

263 
ªsu…
[4] = 
˘x
->
b
;

264 
ªsu…
[5] = 
˘x
->
b
 >> 8;

265 
ªsu…
[6] = 
˘x
->
b
 >> 16;

266 
ªsu…
[7] = 
˘x
->
b
 >> 24;

267 
ªsu…
[8] = 
˘x
->
c
;

268 
ªsu…
[9] = 
˘x
->
c
 >> 8;

269 
ªsu…
[10] = 
˘x
->
c
 >> 16;

270 
ªsu…
[11] = 
˘x
->
c
 >> 24;

271 
ªsu…
[12] = 
˘x
->
d
;

272 
ªsu…
[13] = 
˘x
->
d
 >> 8;

273 
ªsu…
[14] = 
˘x
->
d
 >> 16;

274 
ªsu…
[15] = 
˘x
->
d
 >> 24;

276 
	`mem£t
(
˘x
, 0, (*ctx));

277 
	}
}

284 
	$md5_sig«tuª
(c⁄° *
key
, 
Àngth
, *
ªsu…
)

286 
MD5_CTX
 
my_md5
;

288 
	`MD5_Inô
(&
my_md5
);

289 ()
	`MD5_Upd©e
(&
my_md5
, 
key
, 
Àngth
);

290 
	`MD5_FöÆ
(
ªsu…
, &
my_md5
);

291 
	}
}

293 
uöt32_t


294 
	$hash_md5
(c⁄° *
key
, 
size_t
 
key_Àngth
)

296 
ªsu…s
[16];

298 
	`md5_sig«tuª
((c⁄° *)
key
, ()
key_Àngth
, 
ªsu…s
);

300  ((
uöt32_t
Ë(
ªsu…s
[3] & 0xFF) << 24) |

301 ((
uöt32_t
Ë(
ªsu…s
[2] & 0xFF) << 16) |

302 ((
uöt32_t
Ë(
ªsu…s
[1] & 0xFF) << 8) |

303 (
ªsu…s
[0] & 0xFF);

304 
	}
}

	@dep/dhashkit/dmodula.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<dhashkô.h
>

6 
	#MODULA_CONTINUUM_ADDITION
 10

	)

7 
	#MODULA_POINTS_PER_SERVER
 1

	)

9 
uöt32_t


10 
	$moduœ_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

12 
c⁄töuum
 *
c
;

14 
	`ASSERT
(
c⁄töuum
 !
NULL
);

15 
	`ASSERT
(
nc⁄töuum
 != 0);

17 
c
 = 
c⁄töuum
 + 
hash
 % 
nc⁄töuum
;

19  
c
->
ödex
;

20 
	}
}

	@dep/dhashkit/dmurmur.c

18 
	~<dhashkô.h
>

20 
uöt32_t


21 
	$hash_murmur
(c⁄° *
key
, 
size_t
 
Àngth
)

28 c⁄° 
m
 = 0x5bd1e995;

29 c⁄° 
uöt32_t
 
£ed
 = (0xdódbì‡* (uöt32_t)
Àngth
);

30 c⁄° 
r
 = 24;

35 
uöt32_t
 
h
 = 
£ed
 ^ (uöt32_t)
Àngth
;

39 c⁄° * 
d©a
 = (c⁄° *)
key
;

41 
Àngth
 >= 4) {

42 
k
 = *(*)
d©a
;

44 
k
 *
m
;

45 
k
 ^k >> 
r
;

46 
k
 *
m
;

48 
h
 *
m
;

49 
h
 ^
k
;

51 
d©a
 += 4;

52 
Àngth
 -= 4;

57 
Àngth
) {

59 
h
 ^((
uöt32_t
)
d©a
[2]) << 16;

62 
h
 ^((
uöt32_t
)
d©a
[1]) << 8;

65 
h
 ^
d©a
[0];

66 
h
 *
m
;

77 
h
 ^= h >> 13;

78 
h
 *
m
;

79 
h
 ^= h >> 15;

81  
h
;

82 
	}
}

	@dep/dhashkit/done_at_a_time.c

15 
	~<dhashkô.h
>

17 
uöt32_t


18 
	$hash_⁄e_©_a_time
(c⁄° *
key
, 
size_t
 
key_Àngth
)

20 c⁄° *
±r
 = 
key
;

21 
uöt32_t
 
vÆue
 = 0;

23 
key_Àngth
--) {

24 
uöt32_t
 
vÆ
 = (uöt32_tË*
±r
++;

25 
vÆue
 +
vÆ
;

26 
vÆue
 += (value << 10);

27 
vÆue
 ^= (value >> 6);

29 
vÆue
 += (value << 3);

30 
vÆue
 ^= (value >> 11);

31 
vÆue
 += (value << 15);

33  
vÆue
;

34 
	}
}

	@dep/dhashkit/drandom.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<dhashkô.h
>

6 
	#RANDOM_CONTINUUM_ADDITION
 10

	)

7 
	#RANDOM_POINTS_PER_SERVER
 1

	)

9 
uöt32_t


10 
	$øndom_di•©ch
(
c⁄töuum
 *c⁄töuum, 
uöt32_t
 
nc⁄töuum
, uöt32_à
hash
)

12 
c⁄töuum
 *
c
;

14 
	`ASSERT
(
c⁄töuum
 !
NULL
);

15 
	`ASSERT
(
nc⁄töuum
 != 0);

17 
c
 = 
c⁄töuum
 + 
	`øndom
(Ë% 
nc⁄töuum
;

19  
c
->
ödex
;

20 
	}
}

	@dep/dhashkit/dsha1.c

22 
	#SHA1HANDSOFF


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°döt.h
>

28 
	~<dhashkô.h
>

30 
	#rﬁ
(
vÆue
, 
bôs
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

34 #ifde‡
VR_LITTLE_ENDIAN


35 
	#blk0
(
i
Ë(
block
->
l
[i] = (
	`rﬁ
(block->l[i],24)&0xFF00FF00) \

36 |(
	`rﬁ
(
block
->
l
[
i
],8)&0x00FF00FF))

	)

38 
	#blk0
(
i
Ë
block
->
l
[i]

	)

40 
	#blk
(
i
Ë(
block
->
l
[i&15] = 
	`rﬁ
(block->l[(i+13)&15]^block->l[(i+8)&15] \

41 ^
block
->
l
[(
i
+2)&15]^block->l[i&15],1))

	)

44 
	#R0
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk0
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

45 
	#R1
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=((w&(x^y))^y)+
	`blk
(i)+0x5A827999+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

46 
	#R2
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0x6ED9EBA1+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

47 
	#R3
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(((w|x)&y)|(w&x))+
	`blk
(i)+0x8F1BBCDC+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

48 
	#R4
(
v
,
w
,
x
,
y
,
z
,
i
Ëz+=(w^x^y)+
	`blk
(i)+0xCA62C1D6+
	`rﬁ
(v,5);wÙﬁ(w,30);

	)

53 
	$SHA1Tønsf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64])

55 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

57 
c
[64];

58 
uöt32_t
 
l
[16];

59 } 
	tCHAR64LONG16
;

60 #ifde‡
SHA1HANDSOFF


61 
CHAR64LONG16
 
block
[1];

62 
	`mem˝y
(
block
, 
buf„r
, 64);

69 
CHAR64LONG16
* 
block
 = (c⁄° CHAR64LONG16*)
buf„r
;

72 
a
 = 
°©e
[0];

73 
b
 = 
°©e
[1];

74 
c
 = 
°©e
[2];

75 
d
 = 
°©e
[3];

76 
e
 = 
°©e
[4];

78 
	`R0
(
a
,
b
,
c
,
d
,
e
, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);

79 
	`R0
(
b
,
c
,
d
,
e
,
a
, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);

80 
	`R0
(
c
,
d
,
e
,
a
,
b
, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);

81 
	`R0
(
d
,
e
,
a
,
b
,
c
,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);

82 
	`R1
(
e
,
a
,
b
,
c
,
d
,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);

83 
	`R2
(
a
,
b
,
c
,
d
,
e
,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);

84 
	`R2
(
b
,
c
,
d
,
e
,
a
,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);

85 
	`R2
(
c
,
d
,
e
,
a
,
b
,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);

86 
	`R2
(
d
,
e
,
a
,
b
,
c
,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);

87 
	`R2
(
e
,
a
,
b
,
c
,
d
,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);

88 
	`R3
(
a
,
b
,
c
,
d
,
e
,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);

89 
	`R3
(
b
,
c
,
d
,
e
,
a
,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);

90 
	`R3
(
c
,
d
,
e
,
a
,
b
,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);

91 
	`R3
(
d
,
e
,
a
,
b
,
c
,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);

92 
	`R3
(
e
,
a
,
b
,
c
,
d
,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);

93 
	`R4
(
a
,
b
,
c
,
d
,
e
,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);

94 
	`R4
(
b
,
c
,
d
,
e
,
a
,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);

95 
	`R4
(
c
,
d
,
e
,
a
,
b
,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);

96 
	`R4
(
d
,
e
,
a
,
b
,
c
,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);

97 
	`R4
(
e
,
a
,
b
,
c
,
d
,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);

99 
°©e
[0] +
a
;

100 
°©e
[1] +
b
;

101 
°©e
[2] +
c
;

102 
°©e
[3] +
d
;

103 
°©e
[4] +
e
;

105 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 0;

106 #ifde‡
SHA1HANDSOFF


107 
	`mem£t
(
block
, '\0', (block));

109 
	}
}

114 
	$SHA1Inô
(
SHA1_CTX
* 
c⁄ãxt
)

117 
c⁄ãxt
->
°©e
[0] = 0x67452301;

118 
c⁄ãxt
->
°©e
[1] = 0xEFCDAB89;

119 
c⁄ãxt
->
°©e
[2] = 0x98BADCFE;

120 
c⁄ãxt
->
°©e
[3] = 0x10325476;

121 
c⁄ãxt
->
°©e
[4] = 0xC3D2E1F0;

122 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

123 
	}
}

128 
	$SHA1Upd©e
(
SHA1_CTX
* 
c⁄ãxt
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
)

130 
uöt32_t
 
i
, 
j
;

132 
j
 = 
c⁄ãxt
->
cou¡
[0];

133 i‡((
c⁄ãxt
->
cou¡
[0] +
Àn
 << 3Ë< 
j
)

134 
c⁄ãxt
->
cou¡
[1]++;

135 
c⁄ãxt
->
cou¡
[1] +(
Àn
>>29);

136 
j
 = (j >> 3) & 63;

137 i‡((
j
 + 
Àn
) > 63) {

138 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, (
i
 = 64-j));

139 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

140  ; 
i
 + 63 < 
Àn
; i += 64) {

141 
	`SHA1Tønsf‹m
(
c⁄ãxt
->
°©e
, &
d©a
[
i
]);

143 
j
 = 0;

145 
i
 = 0;

146 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], &
d©a
[
i
], 
Àn
 - i);

147 
	}
}

152 
	$SHA1FöÆ
(
dige°
[20], 
SHA1_CTX
* 
c⁄ãxt
)

154 
i
;

155 
föÆcou¡
[8];

156 
c
;

164 *
f˝
 = &
föÆcou¡
[8];

166 
i
 = 0; i < 2; i++)

168 
uöt32_t
 
t
 = 
c⁄ãxt
->
cou¡
[
i
];

169 
j
;

171 
j
 = 0; j < 4; 
t
 >>= 8, j++)

172 *--
f˝
 = (Ë
t
;

175 
i
 = 0; i < 8; i++) {

176 
föÆcou¡
[
i
] = ()((
c⁄ãxt
->
cou¡
[(i >= 4 ? 0 : 1)]

177 >> ((3-(
i
 & 3)) * 8) ) & 255);

180 
c
 = 0200;

181 
	`SHA1Upd©e
(
c⁄ãxt
, &
c
, 1);

182 (
c⁄ãxt
->
cou¡
[0] & 504) != 448) {

183 
c
 = 0000;

184 
	`SHA1Upd©e
(
c⁄ãxt
, &
c
, 1);

186 
	`SHA1Upd©e
(
c⁄ãxt
, 
föÆcou¡
, 8);

187 
i
 = 0; i < 20; i++) {

188 
dige°
[
i
] = ()

189 ((
c⁄ãxt
->
°©e
[
i
>>2] >> ((3-(i & 3)) * 8) ) & 255);

192 
	`mem£t
(
c⁄ãxt
, '\0', (*context));

193 
	`mem£t
(&
föÆcou¡
, '\0', (finalcount));

194 
	}
}

	@dep/dlist/dlist.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<dli°.h
>

12 
dli°
 *
	$dli°Cª©e
()

14 
dli°
 *
li°
;

16 i‡((
li°
 = 
	`dÆloc
((*li°))Ë=
NULL
)

17  
NULL
;

18 
li°
->
hód
 =Üi°->
èû
 = 
NULL
;

19 
li°
->
Àn
 = 0;

20 
li°
->
dup
 = 
NULL
;

21 
li°
->
‰ì
 = 
NULL
;

22 
li°
->
m©ch
 = 
NULL
;

23  
li°
;

24 
	}
}

29 
	$dli°Rñó£
(
dli°
 *
li°
)

31 
Àn
;

32 
dli°Node
 *
cuºít
, *
√xt
;

34 
cuºít
 = 
li°
->
hód
;

35 
Àn
 = 
li°
->len;

36 
Àn
--) {

37 
√xt
 = 
cuºít
->next;

38 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
cuºít
->
vÆue
);

39 
	`d‰ì
(
cuºít
);

40 
cuºít
 = 
√xt
;

42 
	`d‰ì
(
li°
);

43 
	}
}

51 
dli°
 *
	$dli°AddNodeHód
(
dli°
 *
li°
, *
vÆue
)

53 
dli°Node
 *
node
;

55 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

56  
NULL
;

57 
node
->
vÆue
 = value;

58 i‡(
li°
->
Àn
 == 0) {

59 
li°
->
hód
 =Üi°->
èû
 = 
node
;

60 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

62 
node
->
¥ev
 = 
NULL
;

63 
node
->
√xt
 = 
li°
->
hód
;

64 
li°
->
hód
->
¥ev
 = 
node
;

65 
li°
->
hód
 = 
node
;

67 
li°
->
Àn
++;

68  
li°
;

69 
	}
}

77 
dli°
 *
	$dli°AddNodeTaû
(
dli°
 *
li°
, *
vÆue
)

79 
dli°Node
 *
node
;

81 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

82  
NULL
;

83 
node
->
vÆue
 = value;

84 i‡(
li°
->
Àn
 == 0) {

85 
li°
->
hód
 =Üi°->
èû
 = 
node
;

86 
node
->
¥ev
 =Çode->
√xt
 = 
NULL
;

88 
node
->
¥ev
 = 
li°
->
èû
;

89 
node
->
√xt
 = 
NULL
;

90 
li°
->
èû
->
√xt
 = 
node
;

91 
li°
->
èû
 = 
node
;

93 
li°
->
Àn
++;

94  
li°
;

95 
	}
}

97 
dli°
 *
	$dli°In£πNode
(
dli°
 *
li°
, 
dli°Node
 *
ﬁd_node
, *
vÆue
, 
a·î
) {

98 
dli°Node
 *
node
;

100 i‡((
node
 = 
	`dÆloc
((*node))Ë=
NULL
)

101  
NULL
;

102 
node
->
vÆue
 = value;

103 i‡(
a·î
) {

104 
node
->
¥ev
 = 
ﬁd_node
;

105 
node
->
√xt
 = 
ﬁd_node
->next;

106 i‡(
li°
->
èû
 =
ﬁd_node
) {

107 
li°
->
èû
 = 
node
;

110 
node
->
√xt
 = 
ﬁd_node
;

111 
node
->
¥ev
 = 
ﬁd_node
->prev;

112 i‡(
li°
->
hód
 =
ﬁd_node
) {

113 
li°
->
hód
 = 
node
;

116 i‡(
node
->
¥ev
 !
NULL
) {

117 
node
->
¥ev
->
√xt
 =Çode;

119 i‡(
node
->
√xt
 !
NULL
) {

120 
node
->
√xt
->
¥ev
 =Çode;

122 
li°
->
Àn
++;

123  
li°
;

124 
	}
}

130 
	$dli°DñNode
(
dli°
 *
li°
, 
dli°Node
 *
node
)

132 i‡(
node
->
¥ev
)

133 
node
->
¥ev
->
√xt
 =Çode->next;

135 
li°
->
hód
 = 
node
->
√xt
;

136 i‡(
node
->
√xt
)

137 
node
->
√xt
->
¥ev
 =Çode->prev;

139 
li°
->
èû
 = 
node
->
¥ev
;

140 i‡(
li°
->
‰ì
Ëli°->
	`‰ì
(
node
->
vÆue
);

141 
	`d‰ì
(
node
);

142 
li°
->
Àn
--;

143 
	}
}

149 
dli°Iãr
 *
	$dli°GëIãøt‹
(
dli°
 *
li°
, 
dúe˘i⁄
)

151 
dli°Iãr
 *
ôî
;

153 i‡((
ôî
 = 
	`dÆloc
((*ôî))Ë=
NULL
)  NULL;

154 i‡(
dúe˘i⁄
 =
AL_START_HEAD
)

155 
ôî
->
√xt
 = 
li°
->
hód
;

157 
ôî
->
√xt
 = 
li°
->
èû
;

158 
ôî
->
dúe˘i⁄
 = direction;

159  
ôî
;

160 
	}
}

163 
	$dli°Rñó£Iãøt‹
(
dli°Iãr
 *
ôî
) {

164 
	`d‰ì
(
ôî
);

165 
	}
}

168 
	$dli°Rewöd
(
dli°
 *
li°
, 
dli°Iãr
 *
li
) {

169 
li
->
√xt
 = 
li°
->
hód
;

170 
li
->
dúe˘i⁄
 = 
AL_START_HEAD
;

171 
	}
}

173 
	$dli°RewödTaû
(
dli°
 *
li°
, 
dli°Iãr
 *
li
) {

174 
li
->
√xt
 = 
li°
->
èû
;

175 
li
->
dúe˘i⁄
 = 
AL_START_TAIL
;

176 
	}
}

192 
dli°Node
 *
	$dli°Next
(
dli°Iãr
 *
ôî
)

194 
dli°Node
 *
cuºít
 = 
ôî
->
√xt
;

196 i‡(
cuºít
 !
NULL
) {

197 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
)

198 
ôî
->
√xt
 = 
cuºít
->next;

200 
ôî
->
√xt
 = 
cuºít
->
¥ev
;

202  
cuºít
;

203 
	}
}

213 
dli°
 *
	$dli°Dup
(
dli°
 *
‹ig
)

215 
dli°
 *
c›y
;

216 
dli°Iãr
 
ôî
;

217 
dli°Node
 *
node
;

219 i‡((
c›y
 = 
	`dli°Cª©e
()Ë=
NULL
)

220  
NULL
;

221 
c›y
->
dup
 = 
‹ig
->dup;

222 
c›y
->
‰ì
 = 
‹ig
->free;

223 
c›y
->
m©ch
 = 
‹ig
->match;

224 
	`dli°Rewöd
(
‹ig
, &
ôî
);

225 (
node
 = 
	`dli°Next
(&
ôî
)Ë!
NULL
) {

226 *
vÆue
;

228 i‡(
c›y
->
dup
) {

229 
vÆue
 = 
c›y
->
	`dup
(
node
->value);

230 i‡(
vÆue
 =
NULL
) {

231 
	`dli°Rñó£
(
c›y
);

232  
NULL
;

235 
vÆue
 = 
node
->value;

236 i‡(
	`dli°AddNodeTaû
(
c›y
, 
vÆue
Ë=
NULL
) {

237 
	`dli°Rñó£
(
c›y
);

238  
NULL
;

241  
c›y
;

242 
	}
}

253 
dli°Node
 *
	$dli°SórchKey
(
dli°
 *
li°
, *
key
)

255 
dli°Iãr
 
ôî
;

256 
dli°Node
 *
node
;

258 
	`dli°Rewöd
(
li°
, &
ôî
);

259 (
node
 = 
	`dli°Next
(&
ôî
)Ë!
NULL
) {

260 i‡(
li°
->
m©ch
) {

261 i‡(
li°
->
	`m©ch
(
node
->
vÆue
, 
key
)) {

262  
node
;

265 i‡(
key
 =
node
->
vÆue
) {

266  
node
;

270  
NULL
;

271 
	}
}

278 
dli°Node
 *
	$dli°Index
(
dli°
 *
li°
, 
ödex
) {

279 
dli°Node
 *
n
;

281 i‡(
ödex
 < 0) {

282 
ödex
 = (-index)-1;

283 
n
 = 
li°
->
èû
;

284 
ödex
-- && 
n
Ë¿n->
¥ev
;

286 
n
 = 
li°
->
hód
;

287 
ödex
-- && 
n
Ë¿n->
√xt
;

289  
n
;

290 
	}
}

293 
	$dli°RŸ©e
(
dli°
 *
li°
) {

294 
dli°Node
 *
èû
 = 
li°
->tail;

296 i‡(
	`dli°Lígth
(
li°
) <= 1) ;

299 
li°
->
èû
 =Åaû->
¥ev
;

300 
li°
->
èû
->
√xt
 = 
NULL
;

302 
li°
->
hód
->
¥ev
 = 
èû
;

303 
èû
->
¥ev
 = 
NULL
;

304 
èû
->
√xt
 = 
li°
->
hód
;

305 
li°
->
hód
 = 
èû
;

306 
	}
}

308 
dli°
 *
	$dli°Push
(
dli°
 *
li°
, *
vÆue
) {

309 
	`dli°AddNodeTaû
(
li°
, 
vÆue
);

310  
li°
;

311 
	}
}

313 *
	$dli°P›
(
dli°
 *
li°
) {

314 
dli°Node
 *
node
;

315 *
vÆue
;

317 
node
 = 
	`dli°Fú°
(
li°
);

318 i‡(
node
 =
NULL
) {

319  
NULL
;

322 
vÆue
 = 
	`dli°NodeVÆue
(
node
);

323 
	`dli°DñNode
(
li°
, 
node
);

325 i‡(
li°
->
‰ì
Ë 
NULL
;

327  
vÆue
;

328 
	}
}

	@dep/dlist/dlist.h

1 #i‚de‡
_DLIST_H__


2 
	#_DLIST_H__


	)

6 
	sdli°Node
 {

7 
dli°Node
 *
	m¥ev
;

8 
dli°Node
 *
	m√xt
;

9 *
	mvÆue
;

10 } 
	tdli°Node
;

12 
	sdli°Iãr
 {

13 
dli°Node
 *
	m√xt
;

14 
	mdúe˘i⁄
;

15 } 
	tdli°Iãr
;

17 
	sdli°
 {

18 
dli°Node
 *
	mhód
;

19 
dli°Node
 *
	mèû
;

20 *(*
	mdup
)(*
	m±r
);

21 (*
	m‰ì
)(*
	m±r
);

22 (*
	mm©ch
)(*
	m±r
, *
	mkey
);

23 
	mÀn
;

24 } 
	tdli°
;

27 
	#dli°Lígth
(
l
Ë(÷)->
Àn
)

	)

28 
	#dli°Fú°
(
l
Ë(÷)->
hód
)

	)

29 
	#dli°La°
(
l
Ë(÷)->
èû
)

	)

30 
	#dli°PªvNode
(
n
Ë(“)->
¥ev
)

	)

31 
	#dli°NextNode
(
n
Ë(“)->
√xt
)

	)

32 
	#dli°NodeVÆue
(
n
Ë(“)->
vÆue
)

	)

34 
	#dli°SëDupMëhod
(
l
,
m
Ë(÷)->
dup
 = (m))

	)

35 
	#dli°SëFªeMëhod
(
l
,
m
Ë(÷)->
‰ì
 = (m))

	)

36 
	#dli°SëM©chMëhod
(
l
,
m
Ë(÷)->
m©ch
 = (m))

	)

38 
	#dli°GëDupMëhod
(
l
Ë(÷)->
dup
)

	)

39 
	#dli°GëFªe
(
l
Ë(÷)->
‰ì
)

	)

40 
	#dli°GëM©chMëhod
(
l
Ë(÷)->
m©ch
)

	)

43 
dli°
 *
dli°Cª©e
();

44 
dli°Rñó£
(
dli°
 *
li°
);

45 
dli°
 *
dli°AddNodeHód
(dli° *
li°
, *
vÆue
);

46 
dli°
 *
dli°AddNodeTaû
(dli° *
li°
, *
vÆue
);

47 
dli°
 *
dli°In£πNode
(dli° *
li°
, 
dli°Node
 *
ﬁd_node
, *
vÆue
, 
a·î
);

48 
dli°DñNode
(
dli°
 *
li°
, 
dli°Node
 *
node
);

49 
dli°Iãr
 *
dli°GëIãøt‹
(
dli°
 *
li°
, 
dúe˘i⁄
);

50 
dli°Node
 *
dli°Next
(
dli°Iãr
 *
ôî
);

51 
dli°Rñó£Iãøt‹
(
dli°Iãr
 *
ôî
);

52 
dli°
 *
dli°Dup
(dli° *
‹ig
);

53 
dli°Node
 *
dli°SórchKey
(
dli°
 *
li°
, *
key
);

54 
dli°Node
 *
dli°Index
(
dli°
 *
li°
, 
ödex
);

55 
dli°Rewöd
(
dli°
 *
li°
, 
dli°Iãr
 *
li
);

56 
dli°RewödTaû
(
dli°
 *
li°
, 
dli°Iãr
 *
li
);

57 
dli°RŸ©e
(
dli°
 *
li°
);

58 
dli°
 *
dli°Push
(dli° *
li°
, *
vÆue
);

59 *
dli°P›
(
dli°
 *
li°
);

62 
	#AL_START_HEAD
 0

	)

63 
	#AL_START_TAIL
 1

	)

	@dep/dlist/dlockqueue.c

1 
	~<±hªad.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

5 
	~<dmÆloc.h
>

7 
	~<dli°.h
>

8 
	~<dmtqueue.h
>

9 
	~<dlockqueue.h
>

11 
dlockqueue
 *
	$dlockqueue_¸óã
()

13 
dlockqueue
 *
lqueue
;

15 
lqueue
 = 
	`dÆloc
((*lqueue));

16 i‡(
lqueue
 =
NULL
) {

17  
NULL
;

20 
lqueue
->
maxÀn
 = -1;

21 
lqueue
->
maxÀn_pﬁicy
 = 
MAX_LENGTH_POLICY_REJECT
;

22 
	`±hªad_muãx_öô
(&
lqueue
->
lmuãx
,
NULL
);

24 
lqueue
->
l
 = 
	`dli°Cª©e
();

25 i‡(
lqueue
->
l
 =
NULL
) {

26 
	`dlockqueue_de°roy
(
lqueue
);

27  
NULL
;

30  
lqueue
;

31 
	}
}

33 
	$dlockqueue_push
(*
q
, *
vÆue
)

35 
dlockqueue
 *
lqueue
 = 
q
;

36 
dli°
 *
li°
;

37 
Àngth
;

39 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

40 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

41 i‡(
lqueue
->
maxÀn
 >0 && 
Àngth
 >=Üqueue->maxlen) {

42 i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_REJECT
) {

43 
Àngth
 = -1;

44 } i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_EVICT_HEAD
) {

45 
Àngth
 >
lqueue
->
maxÀn
) {

46 
dli°Node
 *
 
 = 
	`dli°Fú°
(
lqueue
->
l
);

47 
	`dli°DñNode
(
lqueue
->
l
,
 
);

48 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

50 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

51 
Àngth
 ++;

52 } i‡(
lqueue
->
maxÀn_pﬁicy
 =
MAX_LENGTH_POLICY_EVICT_END
) {

53 
Àngth
 >
lqueue
->
maxÀn
) {

54 
dli°Node
 *
 
 = 
	`dli°La°
(
lqueue
->
l
);

55 
	`dli°DñNode
(
lqueue
->
l
,
 
);

56 
Àngth
 = ()
	`dli°Lígth
(
lqueue
->
l
);

58 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

59 
Àngth
 ++;

62 
li°
 = 
	`dli°AddNodeTaû
(
lqueue
->
l
, 
vÆue
);

63 
Àngth
 ++;

65 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

67 i‡(
li°
 =
NULL
) {

71  
Àngth
;

72 
	}
}

74 *
	$dlockqueue_p›
(*
q
)

76 
dlockqueue
 *
lqueue
 = 
q
;

77 
dli°Node
 *
node
;

78 *
vÆue
;

80 i‡(
lqueue
 =
NULL
 ||Üqueue->
l
 == NULL) {

81  
NULL
;

84 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

86 
node
 = 
	`dli°Fú°
(
lqueue
->
l
);

87 i‡(
node
 =
NULL
) {

88 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

89  
NULL
;

92 
vÆue
 = 
	`dli°NodeVÆue
(
node
);

94 
	`dli°DñNode
(
lqueue
->
l
, 
node
);

96 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

98  
vÆue
;

99 
	}
}

101 
	$dlockqueue_de°roy
(*
q
)

103 
dlockqueue
 *
lqueue
 = 
q
;

104 i‡(
lqueue
 =
NULL
) {

108 i‡(
lqueue
->
l
 !
NULL
) {

109 
	`dli°Rñó£
(
lqueue
->
l
);

112 
	`±hªad_muãx_de°roy
(&
lqueue
->
lmuãx
);

114 
	`d‰ì
(
lqueue
);

115 
	}
}

117 
	$dlockqueue_Àngth
(*
q
)

119 
dlockqueue
 *
lqueue
 = 
q
;

120 
Àngth
;

122 i‡(
lqueue
 =
NULL
 ||Üqueue->
l
 == NULL) {

126 
	`±hªad_muãx_lock
(&
lqueue
->
lmuãx
);

127 
Àngth
 = 
	`dli°Lígth
(
lqueue
->
l
);

128 
	`±hªad_muãx_u∆ock
(&
lqueue
->
lmuãx
);

130  
Àngth
;

131 
	}
}

	@dep/dlist/dlockqueue.h

1 #i‚de‡
_DLOCKQUEUE_H_


2 
	#_DLOCKQUEUE_H_


	)

4 
	gdli°
;

6 
	sdlockqueue
{

7 
dli°
 *
	ml
;

8 
	mmaxÀn
;

9 
	mmaxÀn_pﬁicy
;

10 
±hªad_muãx_t
 
	mlmuãx
;

11 } 
	tdlockqueue
;

13 
dlockqueue
 *
dlockqueue_¸óã
();

14 
dlockqueue_push
(*
q
, *
vÆue
);

15 *
dlockqueue_p›
(*
q
);

16 
dlockqueue_de°roy
(*
q
);

17 
dlockqueue_Àngth
(*
q
);

	@dep/dlist/dmtqueue.c

1 
	~<°dlib.h
>

3 
	~<dmÆloc.h
>

5 
	~<dli°.h
>

6 
	~<dmtqueue.h
>

7 
	~<dlockqueue.h
>

10 
dmtqueue
 *
	$dmtqueue_¸óã
()

12 
dmtqueue
 *
q
;

14 
q
 = 
	`dÆloc
((*q));

15 i‡(
q
 =
NULL
) {

16  
NULL
;

19 
q
->
l
 = 
NULL
;

20 
q
->
lock_push
 = 
NULL
;

21 
q
->
lock_p›
 = 
NULL
;

22 
q
->
de°roy
 = 
NULL
;

23 
q
->
Àngth
 = 
NULL
;

25  
q
;

26 
	}
}

28 
	$dmtqueue_de°roy
(
dmtqueue
 *
q
)

30 i‡(
q
 =
NULL
) {

34 i‡(
q
->
de°roy
) {

35 
q
->
	`de°roy
(q->
l
);

38 
	`d‰ì
(
q
);

39 
	}
}

41 
	$dmtqueue_push
(
dmtqueue
 *
q
, *
vÆue
)

43 if(
q
 =
NULL
 || q->
l
 == NULL

44 || 
q
->
lock_push
 =
NULL
)

49  
q
->
	`lock_push
(q->
l
, 
vÆue
);

50 
	}
}

52 *
	$dmtqueue_p›
(
dmtqueue
 *
q
)

54 if(
q
 =
NULL
 || q->
l
 == NULL

55 || 
q
->
lock_p›
 =
NULL
)

57  
NULL
;

60  
q
->
	`lock_p›
(q->
l
);

61 
	}
}

63 
	$dmtqueue_em±y
(
dmtqueue
 *
q
)

65 if(
q
 =
NULL
 || q->
l
 == NULL

66 || 
q
->
Àngth
 =
NULL
)

71 if(
q
->
	`Àngth
(q->
l
) > 0)

77 
	}
}

79 
	$dmtqueue_Àngth
(
dmtqueue
 *
q
)

81 if(
q
 =
NULL
 || q->
l
 == NULL

82 || 
q
->
Àngth
 =
NULL
)

87  
q
->
	`Àngth
(q->
l
);

88 
	}
}

96 
	$dmtqueue_öô_wôh_lockqueue
(
dmtqueue
 *
q
, 
dlockqueue_‰ìfunc
 
‰ìfunc
)

98 
dlockqueue
 *
lq
;

100 i‡(
q
 =
NULL
) {

104 
lq
 = 
	`dlockqueue_¸óã
();

105 i‡(
lq
 =
NULL
) {

109 
lq
->
l
->
‰ì
 = 
‰ìfunc
;

111 
q
->
l
 = 
lq
;

112 
q
->
lock_push
 = 
dlockqueue_push
;

113 
q
->
lock_p›
 = 
dlockqueue_p›
;

114 
q
->
de°roy
 = 
dlockqueue_de°roy
;

115 
q
->
Àngth
 = 
dlockqueue_Àngth
;

118 
	}
}

	@dep/dlist/dmtqueue.h

1 #i‚de‡
_DMTQUEUE_H_


2 
	#_DMTQUEUE_H_


	)

4 
	#MAX_LENGTH_POLICY_REJECT
 0

	)

5 
	#MAX_LENGTH_POLICY_EVICT_HEAD
 1

	)

6 
	#MAX_LENGTH_POLICY_EVICT_END
 2

	)

9 
	sdmtqueue
{

10 *
	ml
;

11 (*
	mlock_push
)(*
	mq
, *
	mvÆue
);

12 *(*
	mlock_p›
)(*
	mq
);

13 (*
	mde°roy
)(*
	mq
);

14 (*
	mÀngth
)(*
	mq
);

15 } 
	tdmtqueue
;

17 
	#dmtqueueSëMaxÀngth
(
q
,
l
Ë((q)->l->
maxÀn
 = (l))

	)

18 
	#dmtqueueSëMaxÀngthPﬁicy
(
q
,
p
Ë((q)->
l
->
maxÀn
 = (p))

	)

20 (*
	tdmtqueue_öô
)(
	tdmtqueue
 *);

24 
dmtqueue
 *
	`dmtqueue_¸óã
();

25 
	`dmtqueue_de°roy
(
dmtqueue
 *
q
);

26 
	`dmtqueue_push
(
dmtqueue
 *
q
, *
vÆue
);

27 *
	`dmtqueue_p›
(
dmtqueue
 *
q
);

28 
	`dmtqueue_em±y
(
dmtqueue
 *
q
);

29 
	`dmtqueue_Àngth
(
dmtqueue
 *
q
);

33 (*
	tdlockqueue_‰ìfunc
)(*);

34 
	`dmtqueue_öô_wôh_lockqueue
(
dmtqueue
 *
l
, 
dlockqueue_‰ìfunc
 
‰ìfunc
);

	@dep/dmalloc/dmalloc.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<±hªad.h
>

7 
	~<uni°d.h
>

9 
	~<dutû.h
>

10 
	~<dlog.h
>

12 
	~<dmÆloc.h
>

15 
size_t
 
	gu£d_mem‹y
 = 0;

16 
±hªad_muãx_t
 
	gu£d_mem‹y_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

18 #i‡
deföed
(
__ATOMIC_RELAXED
)

19 
	#upd©e_u£d_mem_°©_add
(
__n
Ë
	`__©omic_add_„tch
(&
u£d_mem‹y
, (__n), 
__ATOMIC_RELAXED
)

	)

20 
	#upd©e_u£d_mem_°©_sub
(
__n
Ë
	`__©omic_sub_„tch
(&
u£d_mem‹y
, (__n), 
__ATOMIC_RELAXED
)

	)

21 *
	$mÆloc_lock_ty≥
(Ë{ "__ATOMIC_RELAXED";
	}
}

22 #ñi‡
deföed
(
HAVE_ATOMIC
)

23 
	#upd©e_u£d_mem_°©_add
(
__n
Ë
	`__sync_add_™d_„tch
(&
u£d_mem‹y
, (__n))

	)

24 
	#upd©e_u£d_mem_°©_sub
(
__n
Ë
	`__sync_sub_™d_„tch
(&
u£d_mem‹y
, (__n))

	)

25 *
	$mÆloc_lock_ty≥
(Ë{ "HAVE_ATOMIC";
	}
}

27 
	#upd©e_u£d_mem_°©_add
(
__n
) do { \

28 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
); \

29 
u£d_mem‹y
 +(
__n
); \

30 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
); \

31 } 0)

	)

33 
	#upd©e_u£d_mem_°©_sub
(
__n
) do { \

34 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
); \

35 
u£d_mem‹y
 -(
__n
); \

36 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
); \

37 } 0)

	)

39 *
	$mÆloc_lock_ty≥
(Ë{ "±hªad_muãx_t";
	}
}

42 
	#upd©e_dmÆloc_°©_Æloc
(
__n
) do { \

43 
size_t
 
_n
 = (
__n
); \

44 i‡(
_n
&(()-1)) _n += ()-(_n&(()-1)); \

45 
	`upd©e_u£d_mem_°©_add
(
_n
); \

46 } 0)

	)

48 
	#upd©e_dmÆloc_°©_‰ì
(
__n
) do { \

49 
size_t
 
_n
 = (
__n
); \

50 i‡(
_n
&(()-1)) _n += ()-(_n&(()-1)); \

51 
	`upd©e_u£d_mem_°©_sub
(
_n
); \

52 } 0)

	)

54 #ifde‡
HAVE_MALLOC_SIZE


55 
	#PREFIX_SIZE
 (0)

	)

57 #i‡
deföed
(
__sun
Ë|| deföed(
__•¨c
Ë|| deföed(
__•¨c__
)

58 
	#PREFIX_SIZE
 (())

	)

60 
	#PREFIX_SIZE
 ((
size_t
))

	)

67 #i‚de‡
HAVE_MALLOC_SIZE


68 
size_t
 
	$dmÆloc_size
(*
±r
) {

69 *
ªÆ±r
 = (*)
±r
-
PREFIX_SIZE
;

70 
size_t
 
size
 = *((size_t*)
ªÆ±r
);

73 i‡(
size
&(()-1)) size += ()-(size&(()-1));

74  
size
+
PREFIX_SIZE
;

75 
	}
}

79 
	$_dÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

81 *
p
;

83 
	`ASSERT
(
size
 != 0);

85 #ifde‡
DUSE_JEMALLOC


86 
p
 = 
	`je_mÆloc
(
size
+
PREFIX_SIZE
);

88 
p
 = 
	`mÆloc
(
size
+
PREFIX_SIZE
);

90 i‡(
p
 =
NULL
) {

91 
	`log_îr‹
("mÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

93 #ifde‡
HAVE_MALLOC_SIZE


94 
	`upd©e_dmÆloc_°©_Æloc
(
	`dmÆloc_size
(
p
));

95  
p
;

97 *((
size_t
*)
p
Ë
size
;

98 
	`upd©e_dmÆloc_°©_Æloc
(
size
+
PREFIX_SIZE
);

99  (*)
p
+
PREFIX_SIZE
;

101 
	`log_debug
(
LOG_VVERB
, "mÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

104  
p
;

105 
	}
}

108 
	$_dzÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
)

110 *
p
;

112 
p
 = 
	`_dÆloc
(
size
, 
«me
, 
löe
);

113 i‡(
p
 !
NULL
) {

114 
	`mem£t
(
p
, 0, 
size
);

117  
p
;

118 
	}
}

121 
	$_dˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
)

123  
	`_dzÆloc
(
nmemb
 * 
size
, 
«me
, 
löe
);

124 
	}
}

127 
	$_dªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
)

129 #i‚de‡
HAVE_MALLOC_SIZE


130 *
ªÆp
;

132 *
p
;

133 
size_t
 
ﬁdsize
;

135 
	`ASSERT
(
size
 != 0);

137 i‡(
±r
 =
NULL
Ë 
	`_dÆloc
(
size
, 
«me
, 
löe
);

139 #ifde‡
HAVE_MALLOC_SIZE


140 
ﬁdsize
 = 
	`dmÆloc_size
(
±r
);

141 #ifde‡
DUSE_JEMALLOC


142 
p
 = 
	`je_ªÆloc
(
±r
, 
size
);

144 
p
 = 
	`ªÆloc
(
±r
, 
size
);

147 
ªÆp
 = (*)
±r
-
PREFIX_SIZE
;

148 
ﬁdsize
 = *((
size_t
*)
ªÆp
);

149 #ifde‡
DUSE_JEMALLOC


150 
p
 = 
	`je_ªÆloc
(
±r
, 
size
+
PREFIX_SIZE
);

152 
p
 = 
	`ªÆloc
(
±r
, 
size
+
PREFIX_SIZE
);

155 i‡(
p
 =
NULL
) {

156 
	`log_îr‹
("ªÆloc(%zuËÁûed @ %s:%d", 
size
, 
«me
, 
löe
);

157  
NULL
;

159 
	`log_debug
(
LOG_VVERB
, "ªÆloc(%zuË© %∞@ %s:%d", 
size
, 
p
, 
«me
, 
löe
);

160 #ifde‡
HAVE_MALLOC_SIZE


161 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
);

162 
	`upd©e_dmÆloc_°©_Æloc
(
	`dmÆloc_size
(
p
));

163  
p
;

165 *((
size_t
*)
p
Ë
size
;

166 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
);

167 
	`upd©e_dmÆloc_°©_Æloc
(
size
);

168  
p
+
PREFIX_SIZE
;

172  
NULL
;

173 
	}
}

176 
	$_d‰ì
(*
±r
, c⁄° *
«me
, 
löe
)

178 #i‚de‡
HAVE_MALLOC_SIZE


179 *
ªÆp
;

180 
size_t
 
ﬁdsize
;

183 
	`ASSERT
(
±r
 !
NULL
);

184 
	`log_debug
(
LOG_VVERB
, "‰ì(%pË@ %s:%d", 
±r
, 
«me
, 
löe
);

186 #ifde‡
HAVE_MALLOC_SIZE


187 
	`upd©e_dmÆloc_°©_‰ì
(
	`dmÆloc_size
(
±r
));

188 #ifde‡
DUSE_JEMALLOC


189 
	`je_‰ì
(
±r
);

191 
	`‰ì
(
±r
);

194 
ªÆp
 = (*)
±r
-
PREFIX_SIZE
;

195 
ﬁdsize
 = *((
size_t
*)
ªÆp
);

196 
	`upd©e_dmÆloc_°©_‰ì
(
ﬁdsize
+
PREFIX_SIZE
);

197 
	`‰ì
(
ªÆp
);

198 #ifde‡
DUSE_JEMALLOC


199 
	`je_‰ì
(
ªÆp
);

201 
	`‰ì
(
ªÆp
);

204 
	}
}

206 
size_t


207 
	$dÆloc_u£d_mem‹y
()

209 
size_t
 
um
;

211 #i‡
	`deföed
(
__ATOMIC_RELAXED
Ë|| deföed(
HAVE_ATOMIC
)

212 
um
 = 
	`upd©e_u£d_mem_°©_add
(0);

214 
	`±hªad_muãx_lock
(&
u£d_mem‹y_muãx
);

215 
um
 = 
u£d_mem‹y
;

216 
	`±hªad_muãx_u∆ock
(&
u£d_mem‹y_muãx
);

219  
um
;

220 
	}
}

235 
size_t
 
	$dÆloc_gë_mem‹y_size
() {

236 #i‡
	`deföed
(
__unix__
Ë|| deföed(
__unix
Ë|| deföed(
unix
) || \

237 (
	`deföed
(
__APPLE__
Ë&& deföed(
__MACH__
))

238 #i‡
	`deföed
(
CTL_HW
Ë&& (deföed(
HW_MEMSIZE
Ë|| deföed(
HW_PHYSMEM64
))

239 
mib
[2];

240 
mib
[0] = 
CTL_HW
;

241 #i‡
	`deföed
(
HW_MEMSIZE
)

242 
mib
[1] = 
HW_MEMSIZE
;

243 #ñi‡
	`deföed
(
HW_PHYSMEM64
)

244 
mib
[1] = 
HW_PHYSMEM64
;

246 
öt64_t
 
size
 = 0;

247 
size_t
 
Àn
 = (
size
);

248 i‡(
	`sys˘l
–
mib
, 2, &
size
, &
Àn
, 
NULL
, 0) == 0)

249  (
size_t
)
size
;

252 #ñi‡
	`deföed
(
_SC_PHYS_PAGES
Ë&& deföed(
_SC_PAGESIZE
)

254  (
size_t
)
	`sysc⁄f
(
_SC_PHYS_PAGES
Ë* (size_t)sysc⁄f(
_SC_PAGESIZE
);

256 #ñi‡
	`deföed
(
CTL_HW
Ë&& (deföed(
HW_PHYSMEM
Ë|| deföed(
HW_REALMEM
))

258 
mib
[2];

259 
mib
[0] = 
CTL_HW
;

260 #i‡
	`deföed
(
HW_REALMEM
)

261 
mib
[1] = 
HW_REALMEM
;

262 #ñi‡
	`deföed
(
HW_PYSMEM
)

263 
mib
[1] = 
HW_PHYSMEM
;

265 
size
 = 0;

266 
size_t
 
Àn
 = (
size
);

267 i‡(
	`sys˘l
(
mib
, 2, &
size
, &
Àn
, 
NULL
, 0) == 0)

268  (
size_t
)
size
;

275 
	}
}

287 #i‡
deföed
(
HAVE_PROC_STAT
)

288 
	~<uni°d.h
>

289 
	~<sys/ty≥s.h
>

290 
	~<sys/°©.h
>

291 
	~<f˙é.h
>

293 
size_t
 
	$dÆloc_gë_rss
() {

294 
∑ge
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

295 
size_t
 
rss
;

296 
buf
[4096];

297 
fûíame
[256];

298 
fd
, 
cou¡
;

299 *
p
, *
x
;

301 
	`¢¥ötf
(
fûíame
,256,"/¥oc/%d/°©",
	`gëpid
());

302 i‡((
fd
 = 
	`›í
(
fûíame
,
O_RDONLY
)) == -1)  0;

303 i‡(
	`ªad
(
fd
,
buf
,4096) <= 0) {

304 
	`˛o£
(
fd
);

307 
	`˛o£
(
fd
);

309 
p
 = 
buf
;

310 
cou¡
 = 23;

311 
p
 && 
cou¡
--) {

312 
p
 = 
	`°rchr
(p,' ');

313 i‡(
p
)Ö++;

315 i‡(!
p
)  0;

316 
x
 = 
	`°rchr
(
p
,' ');

317 i‡(!
x
)  0;

318 *
x
 = '\0';

320 
rss
 = 
	`°πﬁl
(
p
,
NULL
,10);

321 
rss
 *
∑ge
;

322  
rss
;

323 
	}
}

324 #ñi‡
deföed
(
HAVE_TASKINFO
)

325 
	~<uni°d.h
>

326 
	~<°dio.h
>

327 
	~<°dlib.h
>

328 
	~<sys/ty≥s.h
>

329 
	~<sys/sys˘l.h
>

330 
	~<mach/èsk.h
>

331 
	~<mach/mach_öô.h
>

333 
size_t
 
	$dÆloc_gë_rss
() {

334 
èsk_t
 
èsk
 = 
MACH_PORT_NULL
;

335 
èsk_basic_öfo
 
t_öfo
;

336 
mach_msg_ty≥_numbî_t
 
t_öfo_cou¡
 = 
TASK_BASIC_INFO_COUNT
;

338 i‡(
	`èsk_f‹_pid
(
	`cuºít_èsk
(), 
	`gëpid
(), &
èsk
Ë!
KERN_SUCCESS
)

340 
	`èsk_öfo
(
èsk
, 
TASK_BASIC_INFO
, (
èsk_öfo_t
)&
t_öfo
, &
t_öfo_cou¡
);

342  
t_öfo
.
ªsidít_size
;

343 
	}
}

345 
size_t
 
	$dÆloc_gë_rss
() {

351  
	`dÆloc_u£d_mem‹y
();

352 
	}
}

356 
	$dÆloc_gë_‰agmíèti⁄_øtio
(
size_t
 
rss
) {

357  ()
rss
/
	`dÆloc_u£d_mem‹y
();

358 
	}
}

	@dep/dmalloc/dmalloc.h

1 #i‚de‡
_DMALLOC_H_


2 
	#_DMALLOC_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 #ifde‡
HAVE_JEMALLOC


11 
	#DUSE_JEMALLOC
 1

	)

20 #i‡
deföed
(
DUSE_JEMALLOC
)

21 
	#DMALLOC_LIB
 ("jemÆloc-" 
	`__x°r
(
JEMALLOC_VERSION_MAJOR
Ë"." __x°r(
JEMALLOC_VERSION_MINOR
Ë"." __x°r(
JEMALLOC_VERSION_BUGFIX
))

	)

22 
	~<jemÆloc/jemÆloc.h
>

23 #i‡(
JEMALLOC_VERSION_MAJOR
 =2 && 
JEMALLOC_VERSION_MINOR
 >= 1) || (JEMALLOC_VERSION_MAJOR > 2)

24 
	#HAVE_MALLOC_SIZE
 1

	)

25 
	#dmÆloc_size
(
p
Ë
	`je_mÆloc_ußbÀ_size
’)

	)

29 #ñi‡
deföed
(
__APPLE__
)

30 
	~<mÆloc/mÆloc.h
>

31 
	#HAVE_MALLOC_SIZE
 1

	)

32 
	#dmÆloc_size
(
p
Ë
	`mÆloc_size
’)

	)

35 #i‚de‡
DMALLOC_LIB


36 
	#DMALLOC_LIB
 "libc"

	)

39 
	#dÆloc
(
_s
) \

40 
	`_dÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

42 
	#dzÆloc
(
_s
) \

43 
	`_dzÆloc
((
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

45 
	#dˇŒoc
(
_n
, 
_s
) \

46 
	`_dˇŒoc
((
size_t
)(
_n
), (size_t)(
_s
), 
__FILE__
, 
__LINE__
)

	)

48 
	#dªÆloc
(
_p
, 
_s
) \

49 
	`_dªÆloc
(
_p
, (
size_t
)(
_s
), 
__FILE__
, 
__LINE__
)

	)

51 
	#d‰ì
(
_p
) do { \

52 
	`_d‰ì
(
_p
, 
__FILE__
, 
__LINE__
); \

53 } 0)

	)

55 *
dmÆloc_lock_ty≥
();

57 #i‚de‡
HAVE_MALLOC_SIZE


58 
size_t
 
dmÆloc_size
(*
±r
);

61 *
_dÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

62 *
_dzÆloc
(
size_t
 
size
, c⁄° *
«me
, 
löe
);

63 *
_dˇŒoc
(
size_t
 
nmemb
, size_à
size
, c⁄° *
«me
, 
löe
);

64 *
_dªÆloc
(*
±r
, 
size_t
 
size
, c⁄° *
«me
, 
löe
);

65 
_d‰ì
(*
±r
, c⁄° *
«me
, 
löe
);

67 
size_t
 
dÆloc_u£d_mem‹y
();

69 
size_t
 
dÆloc_gë_mem‹y_size
();

71 
size_t
 
dÆloc_gë_rss
();

72 
dÆloc_gë_‰agmíèti⁄_øtio
(
size_t
 
rss
);

	@dep/himemcached-0.1.0/himcdep/sds.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<˘y≥.h
>

35 
	~<as£π.h
>

37 
	~"sds.h
"

51 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

52 
sdshdr
 *
sh
;

54 i‡(
öô
) {

55 
sh
 = 
	`mÆloc
( *sh+
öôÀn
+1);

57 
sh
 = 
	`ˇŒoc
( *sh+
öôÀn
+1,1);

59 i‡(
sh
 =
NULL
)  NULL;

60 
sh
->
Àn
 = 
öôÀn
;

61 
sh
->
‰ì
 = 0;

62 i‡(
öôÀn
 && 
öô
)

63 
	`mem˝y
(
sh
->
buf
, 
öô
, 
öôÀn
);

64 
sh
->
buf
[
öôÀn
] = '\0';

65  (*)
sh
->
buf
;

66 
	}
}

70 
sds
 
	$sd£m±y
() {

71  
	`sd¢ewÀn
("",0);

72 
	}
}

75 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

76 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

77  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

78 
	}
}

81 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

82  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

83 
	}
}

86 
	$sds‰ì
(
sds
 
s
) {

87 i‡(
s
 =
NULL
) ;

88 
	`‰ì
(
s
-(
sdshdr
));

89 
	}
}

105 
	$sdsupd©ñí
(
sds
 
s
) {

106 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

107 
ªÆÀn
 = 
	`°æí
(
s
);

108 
sh
->
‰ì
 +(sh->
Àn
-
ªÆÀn
);

109 
sh
->
Àn
 = 
ªÆÀn
;

110 
	}
}

116 
	$sds˛ór
(
sds
 
s
) {

117 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

118 
sh
->
‰ì
 +sh->
Àn
;

119 
sh
->
Àn
 = 0;

120 
sh
->
buf
[0] = '\0';

121 
	}
}

129 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

130 
sdshdr
 *
sh
, *
√wsh
;

131 
size_t
 
‰ì
 = 
	`sdßvaû
(
s
);

132 
size_t
 
Àn
, 
√wÀn
;

134 i‡(
‰ì
 >
addÀn
Ë 
s
;

135 
Àn
 = 
	`sd¶í
(
s
);

136 
sh
 = (*Ë(
s
- *sh);

137 
√wÀn
 = (
Àn
+
addÀn
);

138 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

139 
√wÀn
 *= 2;

141 
√wÀn
 +
SDS_MAX_PREALLOC
;

142 
√wsh
 = 
	`ªÆloc
(
sh
,  *√wsh+
√wÀn
+1);

143 i‡(
√wsh
 =
NULL
)  NULL;

145 
√wsh
->
‰ì
 = 
√wÀn
 - 
Àn
;

146  
√wsh
->
buf
;

147 
	}
}

155 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

156 
sdshdr
 *
sh
;

158 
sh
 = (*Ë(
s
- *sh);

159 
sh
 = 
	`ªÆloc
(sh,  *sh+sh->
Àn
+1);

160 
sh
->
‰ì
 = 0;

161  
sh
->
buf
;

162 
	}
}

171 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

172 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

174  (*
sh
)+sh->
Àn
+sh->
‰ì
+1;

175 
	}
}

200 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

201 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

203 
	`as£π
(
sh
->
‰ì
 >
ö¸
);

204 
sh
->
Àn
 +
ö¸
;

205 
sh
->
‰ì
 -
ö¸
;

206 
	`as£π
(
sh
->
‰ì
 >= 0);

207 
s
[
sh
->
Àn
] = '\0';

208 
	}
}

215 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

216 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

217 
size_t
 
tŸÀn
, 
cuæí
 = 
sh
->
Àn
;

219 i‡(
Àn
 <
cuæí
Ë 
s
;

220 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

221 i‡(
s
 =
NULL
)  NULL;

224 
sh
 = (*)(
s
- *sh);

225 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

226 
tŸÀn
 = 
sh
->
Àn
+sh->
‰ì
;

227 
sh
->
Àn
 =Üen;

228 
sh
->
‰ì
 = 
tŸÀn
-sh->
Àn
;

229  
s
;

230 
	}
}

237 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

238 
sdshdr
 *
sh
;

239 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

241 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

242 i‡(
s
 =
NULL
)  NULL;

243 
sh
 = (*Ë(
s
- *sh);

244 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

245 
sh
->
Àn
 = 
cuæí
+len;

246 
sh
->
‰ì
 = sh->‰ì-
Àn
;

247 
s
[
cuæí
+
Àn
] = '\0';

248  
s
;

249 
	}
}

255 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

256  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

257 
	}
}

263 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

264  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

265 
	}
}

269 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

270 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

271 
size_t
 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

273 i‡(
tŸÀn
 < 
Àn
) {

274 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
sh
->len);

275 i‡(
s
 =
NULL
)  NULL;

276 
sh
 = (*Ë(
s
- *sh);

277 
tŸÀn
 = 
sh
->
‰ì
+sh->
Àn
;

279 
	`mem˝y
(
s
, 
t
, 
Àn
);

280 
s
[
Àn
] = '\0';

281 
sh
->
Àn
 =Üen;

282 
sh
->
‰ì
 = 
tŸÀn
-
Àn
;

283  
s
;

284 
	}
}

288 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

289  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

290 
	}
}

298 
	#SDS_LLSTR_SIZE
 21

	)

299 
	$sd¶l2°r
(*
s
, 
vÆue
) {

300 *
p
, 
aux
;

301 
v
;

302 
size_t
 
l
;

306 
v
 = (
vÆue
 < 0) ? -value : value;

307 
p
 = 
s
;

309 *
p
++ = '0'+(
v
%10);

310 
v
 /= 10;

311 } 
v
);

312 i‡(
vÆue
 < 0Ë*
p
++ = '-';

315 
l
 = 
p
-
s
;

316 *
p
 = '\0';

319 
p
--;

320 
s
 < 
p
) {

321 
aux
 = *
s
;

322 *
s
 = *
p
;

323 *
p
 = 
aux
;

324 
s
++;

325 
p
--;

327  
l
;

328 
	}
}

331 
	$sdsuŒ2°r
(*
s
, 
v
) {

332 *
p
, 
aux
;

333 
size_t
 
l
;

337 
p
 = 
s
;

339 *
p
++ = '0'+(
v
%10);

340 
v
 /= 10;

341 } 
v
);

344 
l
 = 
p
-
s
;

345 *
p
 = '\0';

348 
p
--;

349 
s
 < 
p
) {

350 
aux
 = *
s
;

351 *
s
 = *
p
;

352 *
p
 = 
aux
;

353 
s
++;

354 
p
--;

356  
l
;

357 
	}
}

360 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

361 
va_li°
 
˝y
;

362 *
buf
, *
t
;

363 
size_t
 
buÊí
 = 16;

366 
buf
 = 
	`mÆloc
(
buÊí
);

367 i‡(
buf
 =
NULL
)  NULL;

368 
buf
[
buÊí
-2] = '\0';

369 
	`va_c›y
(
˝y
,
≠
);

370 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

371 i‡(
buf
[
buÊí
-2] != '\0') {

372 
	`‰ì
(
buf
);

373 
buÊí
 *= 2;

378 
t
 = 
	`sdsˇt
(
s
, 
buf
);

379 
	`‰ì
(
buf
);

380  
t
;

381 
	}
}

399 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

400 
va_li°
 
≠
;

401 *
t
;

402 
	`va_°¨t
(
≠
, 
fmt
);

403 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

404 
	`va_íd
(
≠
);

405  
t
;

406 
	}
}

425 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

426 
sdshdr
 *
sh
 = (*Ë(
s
-((sdshdr)));

427 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

428 c⁄° *
f
 = 
fmt
;

429 
i
;

430 
va_li°
 
≠
;

432 
	`va_°¨t
(
≠
,
fmt
);

433 
f
 = 
fmt
;

434 
i
 = 
öôÀn
;

435 *
f
) {

436 
√xt
, *
°r
;

437 
l
;

438 
num
;

439 
unum
;

442 i‡(
sh
->
‰ì
 == 0) {

443 
s
 = 
	`sdsMakeRoomF‹
(s,1);

444 
sh
 = (*Ë(
s
-((
sdshdr
)));

447 *
f
) {

449 
√xt
 = *(
f
+1);

450 
f
++;

451 
√xt
) {

454 
°r
 = 
	`va_¨g
(
≠
,*);

455 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

456 i‡(
sh
->
‰ì
 < 
l
) {

457 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

458 
sh
 = (*Ë(
s
-((
sdshdr
)));

460 
	`mem˝y
(
s
+
i
,
°r
,
l
);

461 
sh
->
Àn
 +
l
;

462 
sh
->
‰ì
 -
l
;

463 
i
 +
l
;

467 i‡(
√xt
 == 'i')

468 
num
 = 
	`va_¨g
(
≠
,);

470 
num
 = 
	`va_¨g
(
≠
,);

472 
buf
[
SDS_LLSTR_SIZE
];

473 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

474 i‡(
sh
->
‰ì
 < 
l
) {

475 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

476 
sh
 = (*Ë(
s
-((
sdshdr
)));

478 
	`mem˝y
(
s
+
i
,
buf
,
l
);

479 
sh
->
Àn
 +
l
;

480 
sh
->
‰ì
 -
l
;

481 
i
 +
l
;

487 i‡(
√xt
 == 'u')

488 
unum
 = 
	`va_¨g
(
≠
,);

489 if(
√xt
 == 'U')

490 
unum
 = 
	`va_¨g
(
≠
,);

492 
unum
 = ()
	`va_¨g
(
≠
,
size_t
);

494 
buf
[
SDS_LLSTR_SIZE
];

495 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

496 i‡(
sh
->
‰ì
 < 
l
) {

497 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

498 
sh
 = (*Ë(
s
-((
sdshdr
)));

500 
	`mem˝y
(
s
+
i
,
buf
,
l
);

501 
sh
->
Àn
 +
l
;

502 
sh
->
‰ì
 -
l
;

503 
i
 +
l
;

507 
s
[
i
++] = 
√xt
;

508 
sh
->
Àn
 += 1;

509 
sh
->
‰ì
 -= 1;

514 
s
[
i
++] = *
f
;

515 
sh
->
Àn
 += 1;

516 
sh
->
‰ì
 -= 1;

519 
f
++;

521 
	`va_íd
(
≠
);

524 
s
[
i
] = '\0';

525  
s
;

526 
	}
}

543 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

544 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

545 *
°¨t
, *
íd
, *
•
, *
ï
;

546 
size_t
 
Àn
;

548 
•
 = 
°¨t
 = 
s
;

549 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

550 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

551 
ï
 > 
°¨t
 && 
	`°rchr
(
c£t
, *ep))Ép--;

552 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

553 i‡(
sh
->
buf
 !
•
Ë
	`memmove
(sh->buf, sp, 
Àn
);

554 
sh
->
buf
[
Àn
] = '\0';

555 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-len);

556 
sh
->
Àn
 =Üen;

557 
	}
}

575 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

576 
sdshdr
 *
sh
 = (*Ë(
s
- *sh);

577 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

579 i‡(
Àn
 == 0) ;

580 i‡(
°¨t
 < 0) {

581 
°¨t
 = 
Àn
+start;

582 i‡(
°¨t
 < 0) start = 0;

584 i‡(
íd
 < 0) {

585 
íd
 = 
Àn
+end;

586 i‡(
íd
 < 0)Énd = 0;

588 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

589 i‡(
√wÀn
 != 0) {

590 i‡(
°¨t
 >(sig√d)
Àn
) {

591 
√wÀn
 = 0;

592 } i‡(
íd
 >(sig√d)
Àn
) {

593 
íd
 = 
Àn
-1;

594 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

597 
°¨t
 = 0;

599 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
sh
->
buf
, sh->buf+start,Çewlen);

600 
sh
->
buf
[
√wÀn
] = 0;

601 
sh
->
‰ì
 = sh->‰ì+(sh->
Àn
-
√wÀn
);

602 
sh
->
Àn
 = 
√wÀn
;

603 
	}
}

606 
	$sd°ﬁowî
(
sds
 
s
) {

607 
Àn
 = 
	`sd¶í
(
s
), 
j
;

609 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

610 
	}
}

613 
	$sd°ouµî
(
sds
 
s
) {

614 
Àn
 = 
	`sd¶í
(
s
), 
j
;

616 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

617 
	}
}

630 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

631 
size_t
 
l1
, 
l2
, 
möÀn
;

632 
cmp
;

634 
l1
 = 
	`sd¶í
(
s1
);

635 
l2
 = 
	`sd¶í
(
s2
);

636 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

637 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

638 i‡(
cmp
 =0Ë 
l1
-
l2
;

639  
cmp
;

640 
	}
}

658 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

659 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

660 
sds
 *
tokís
;

662 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

664 
tokís
 = 
	`mÆloc
((
sds
)*
¶Ÿs
);

665 i‡(
tokís
 =
NULL
)  NULL;

667 i‡(
Àn
 == 0) {

668 *
cou¡
 = 0;

669  
tokís
;

671 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

673 i‡(
¶Ÿs
 < 
ñemíts
+2) {

674 
sds
 *
√wtokís
;

676 
¶Ÿs
 *= 2;

677 
√wtokís
 = 
	`ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

678 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

679 
tokís
 = 
√wtokís
;

682 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

683 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

684 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

685 
ñemíts
++;

686 
°¨t
 = 
j
+
£∂í
;

687 
j
 = j+
£∂í
-1;

691 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

692 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

693 
ñemíts
++;

694 *
cou¡
 = 
ñemíts
;

695  
tokís
;

697 
˛ónup
:

699 
i
;

700 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

701 
	`‰ì
(
tokís
);

702 *
cou¡
 = 0;

703  
NULL
;

705 
	}
}

708 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

709 i‡(!
tokís
) ;

710 
cou¡
--)

711 
	`sds‰ì
(
tokís
[
cou¡
]);

712 
	`‰ì
(
tokís
);

713 
	}
}

719 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

720 
buf
[32], *
p
;

721 
v
;

723 
v
 = (
vÆue
 < 0) ? -value : value;

724 
p
 = 
buf
+31;

726 *
p
-- = '0'+(
v
%10);

727 
v
 /= 10;

728 } 
v
);

729 i‡(
vÆue
 < 0Ë*
p
-- = '-';

730 
p
++;

731  
	`sd¢ewÀn
(
p
,32-’-
buf
));

732 
	}
}

740 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

741 
s
 = 
	`sdsˇéí
(s,"\"",1);

742 
Àn
--) {

743 *
p
) {

746 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

748 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

749 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

750 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

751 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

752 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

754 i‡(
	`i•röt
(*
p
))

755 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

757 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

760 
p
++;

762  
	`sdsˇéí
(
s
,"\"",1);

763 
	}
}

767 
	$is_hex_digô
(
c
) {

768  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

769 (
c
 >= 'A' && c <= 'F');

770 
	}
}

774 
	$hex_digô_to_öt
(
c
) {

775 
c
) {

794 
	}
}

815 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

816 c⁄° *
p
 = 
löe
;

817 *
cuºít
 = 
NULL
;

818 **
ve˘‹
 = 
NULL
;

820 *
¨gc
 = 0;

823 *
p
 && 
	`is•a˚
(*p))Ö++;

824 i‡(*
p
) {

826 
öq
=0;

827 
ösq
=0;

828 
d⁄e
=0;

830 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

831 !
d⁄e
) {

832 i‡(
öq
) {

833 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

834 
	`is_hex_digô
(*(
p
+2)) &&

835 
	`is_hex_digô
(*(
p
+3)))

837 
byã
;

839 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

840 
	`hex_digô_to_öt
(*(
p
+3));

841 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

842 
p
 += 3;

843 } i‡(*
p
 == '\\' && *(p+1)) {

844 
c
;

846 
p
++;

847 *
p
) {

848 'n': 
c
 = '\n'; ;

849 'r': 
c
 = '\r'; ;

850 't': 
c
 = '\t'; ;

851 'b': 
c
 = '\b'; ;

852 'a': 
c
 = '\a'; ;

853 : 
c
 = *
p
; ;

855 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

856 } i‡(*
p
 == '"') {

859 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

860 
d⁄e
=1;

861 } i‡(!*
p
) {

863 
îr
;

865 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

867 } i‡(
ösq
) {

868 i‡(*
p
 == '\\' && *(p+1) == '\'') {

869 
p
++;

870 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

871 } i‡(*
p
 == '\'') {

874 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

875 
d⁄e
=1;

876 } i‡(!*
p
) {

878 
îr
;

880 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

883 *
p
) {

889 
d⁄e
=1;

892 
öq
=1;

895 
ösq
=1;

898 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

902 i‡(*
p
)Ö++;

905 
ve˘‹
 = 
	`ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

906 
ve˘‹
[*
¨gc
] = 
cuºít
;

907 (*
¨gc
)++;

908 
cuºít
 = 
NULL
;

911 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`mÆloc
((*));

912  
ve˘‹
;

916 
îr
:

917 (*
¨gc
)--)

918 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

919 
	`‰ì
(
ve˘‹
);

920 i‡(
cuºít
Ë
	`sds‰ì
(current);

921 *
¨gc
 = 0;

922  
NULL
;

923 
	}
}

934 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

935 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

937 
j
 = 0; j < 
l
; j++) {

938 
i
 = 0; i < 
£éí
; i++) {

939 i‡(
s
[
j
] =
‰om
[
i
]) {

940 
s
[
j
] = 
to
[
i
];

945  
s
;

946 
	}
}

950 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
) {

951 
sds
 
joö
 = 
	`sd£m±y
();

952 
j
;

954 
j
 = 0; j < 
¨gc
; j++) {

955 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

956 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

958  
joö
;

959 
	}
}

962 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

963 
sds
 
joö
 = 
	`sd£m±y
();

964 
j
;

966 
j
 = 0; j < 
¨gc
; j++) {

967 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

968 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

970  
joö
;

971 
	}
}

973 #ifde‡
SDS_TEST_MAIN


974 
	~<°dio.h
>

975 
	~"ã°hñp.h
"

977 
	$maö
() {

979 
sdshdr
 *
sh
;

980 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

982 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

983 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

985 
	`sds‰ì
(
x
);

986 
x
 = 
	`sd¢ewÀn
("foo",2);

987 
	`ã°_c⁄d
("Createá string with specifiedÜength",

988 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

990 
x
 = 
	`sdsˇt
(x,"bar");

991 
	`ã°_c⁄d
("Strings concatenation",

992 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

994 
x
 = 
	`sds˝y
(x,"a");

995 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

996 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

998 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

999 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1000 
	`sd¶í
(
x
) == 33 &&

1001 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1003 
	`sds‰ì
(
x
);

1004 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1005 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1006 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) ==0)

1008 
	`sds‰ì
(
x
);

1009 
x
 = 
	`sd¢ew
("xxciaoyyy");

1010 
	`sd°rim
(
x
,"xy");

1011 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1012 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1014 
y
 = 
	`sdsdup
(
x
);

1015 
	`sd§™ge
(
y
,1,1);

1016 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1017 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1019 
	`sds‰ì
(
y
);

1020 
y
 = 
	`sdsdup
(
x
);

1021 
	`sd§™ge
(
y
,1,-1);

1022 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1023 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1025 
	`sds‰ì
(
y
);

1026 
y
 = 
	`sdsdup
(
x
);

1027 
	`sd§™ge
(
y
,-2,-1);

1028 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1029 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1031 
	`sds‰ì
(
y
);

1032 
y
 = 
	`sdsdup
(
x
);

1033 
	`sd§™ge
(
y
,2,1);

1034 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1035 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1037 
	`sds‰ì
(
y
);

1038 
y
 = 
	`sdsdup
(
x
);

1039 
	`sd§™ge
(
y
,1,100);

1040 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1041 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1043 
	`sds‰ì
(
y
);

1044 
y
 = 
	`sdsdup
(
x
);

1045 
	`sd§™ge
(
y
,100,100);

1046 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1047 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1049 
	`sds‰ì
(
y
);

1050 
	`sds‰ì
(
x
);

1051 
x
 = 
	`sd¢ew
("foo");

1052 
y
 = 
	`sd¢ew
("foa");

1053 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1055 
	`sds‰ì
(
y
);

1056 
	`sds‰ì
(
x
);

1057 
x
 = 
	`sd¢ew
("bar");

1058 
y
 = 
	`sd¢ew
("bar");

1059 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1061 
	`sds‰ì
(
y
);

1062 
	`sds‰ì
(
x
);

1063 
x
 = 
	`sd¢ew
("aar");

1064 
y
 = 
	`sd¢ew
("bar");

1065 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1067 
	`sds‰ì
(
y
);

1068 
	`sds‰ì
(
x
);

1069 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1070 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1071 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1072 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1075 
ﬁd‰ì
;

1077 
	`sds‰ì
(
x
);

1078 
x
 = 
	`sd¢ew
("0");

1079 
sh
 = (*Ë(
x
-((
sdshdr
)));

1080 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
sh
->
Àn
 =1 && sh->
‰ì
 == 0);

1081 
x
 = 
	`sdsMakeRoomF‹
(x,1);

1082 
sh
 = (*Ë(
x
-((
sdshdr
)));

1083 
	`ã°_c⁄d
("sdsMakeRoomF‹()", 
sh
->
Àn
 =1 && sh->
‰ì
 > 0);

1084 
ﬁd‰ì
 = 
sh
->
‰ì
;

1085 
x
[1] = '1';

1086 
	`sdsIn¸Lí
(
x
,1);

1087 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- c⁄ã¡", 
x
[0] == '0' && x[1] == '1');

1088 
	`ã°_c⁄d
("sdsIn¸Lí(Ë--Üí", 
sh
->
Àn
 == 2);

1089 
	`ã°_c⁄d
("sdsIn¸Lí(Ë-- fªe", 
sh
->
‰ì
 =
ﬁd‰ì
-1);

1092 
	`ã°_ªp‹t
()

1094 
	}
}

	@dep/himemcached-0.1.0/himcdep/sds.h

31 #i‚de‡
__SDS_H


32 
	#__SDS_H


	)

34 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

36 
	~<sys/ty≥s.h
>

37 
	~<°d¨g.h
>

38 #ifde‡
_MSC_VER


39 
	~"wö32.h
"

42 *
	tsds
;

44 
	ssdshdr
 {

45 
	mÀn
;

46 
	m‰ì
;

47 
	mbuf
[];

50 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

51 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

52  
sh
->
Àn
;

53 
	}
}

55 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

56 
sdshdr
 *
sh
 = (sdshd∏*)(
s
- *sh);

57  
sh
->
‰ì
;

58 
	}
}

60 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

61 
sds
 
sd¢ew
(c⁄° *
öô
);

62 
sds
 
sd£m±y
();

63 
size_t
 
sd¶í
(c⁄° 
sds
 
s
);

64 
sds
 
sdsdup
(c⁄° sd†
s
);

65 
sds‰ì
(
sds
 
s
);

66 
size_t
 
sdßvaû
(c⁄° 
sds
 
s
);

67 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

68 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

69 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

70 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

71 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

72 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

74 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

75 #ifde‡
__GNUC__


76 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

77 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

79 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

82 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

83 
	`sd°rim
(
sds
 
s
, c⁄° *
c£t
);

84 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

85 
	`sdsupd©ñí
(
sds
 
s
);

86 
	`sds˛ór
(
sds
 
s
);

87 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

88 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

89 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

90 
	`sd°ﬁowî
(
sds
 
s
);

91 
	`sd°ouµî
(
sds
 
s
);

92 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

93 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

94 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

95 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

96 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
, 
size_t
 
£∂í
);

97 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

100 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

101 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

102 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

103 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

	@dep/himemcached-0.1.0/himcread.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

3 #i‚de‡
_MSC_VER


4 
	~<uni°d.h
>

6 
	~<as£π.h
>

7 
	~<î∫o.h
>

8 
	~<˘y≥.h
>

10 
	~"him¸ód.h
"

11 
	~"himcdï/sds.h
"

13 
	#PARSE_OK
 0

	)

14 
	#PARSE_ERROR
 1

	)

15 
	#PARSE_AGAIN
 3

	)

17 
	#RSP_TYPE_UNKNOWN
 0

	)

18 
	#RSP_TYPE_NUM
 1

	)

19 
	#RSP_TYPE_STORED
 2

	)

20 
	#RSP_TYPE_NOT_STORED
 3

	)

21 
	#RSP_TYPE_EXISTS
 4

	)

22 
	#RSP_TYPE_NOT_FOUND
 5

	)

23 
	#RSP_TYPE_END
 6

	)

24 
	#RSP_TYPE_VALUE
 7

	)

25 
	#RSP_TYPE_DELETED
 8

	)

26 
	#RSP_TYPE_ERROR
 9

	)

27 
	#RSP_TYPE_CLIENT_ERROR
 10

	)

28 
	#RSP_TYPE_SERVER_ERROR
 11

	)

30 
memˇchedRódîRe£t
(
mcRódî
 *
r
);

32 
	$__memˇchedRódîSëEº‹
(
mcRódî
 *
r
, 
ty≥
, c⁄° *
°r
) {

33 
size_t
 
Àn
;

35 
	`memˇchedRódîRe£t
(
r
);

38 i‡(
r
->
buf
 !
NULL
) {

39 
	`sds‰ì
(
r
->
buf
);

40 
r
->
buf
 = 
NULL
;

41 
r
->
pos
 =Ñ->
Àn
 = 0;

45 
r
->
îr
 = 
ty≥
;

46 
Àn
 = 
	`°æí
(
°r
);

47 
Àn
 =Üí < ((
r
->
îr°r
)-1) ?Üen : ((r->errstr)-1);

48 
	`mem˝y
(
r
->
îr°r
,
°r
,
Àn
);

49 
r
->
îr°r
[
Àn
] = '\0';

50 
	}
}

52 
size_t
 
	$chπos
(*
buf
, 
size_t
 
size
, 
byã
)

54 
size_t
 
Àn
 = 0;

56 
byã
) {

59 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\%c\"",
byã
);

61 '\n': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\n\""); ;

62 '\r': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\r\""); ;

63 '\t': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\t\""); ;

64 '\a': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\a\""); ;

65 '\b': 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\b\""); ;

67 i‡(
	`i•röt
(
byã
))

68 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"%c\"",
byã
);

70 
Àn
 = 
	`¢¥ötf
(
buf
,
size
,"\"\\x%02x\"",()
byã
);

74  
Àn
;

75 
	}
}

77 
	$__memˇchedRódîSëEº‹PrŸocﬁByã
(
mcRódî
 *
r
, 
byã
) {

78 
cbuf
[8], 
sbuf
[128];

80 
	`chπos
(
cbuf
,(cbuf),
byã
);

81 
	`¢¥ötf
(
sbuf
,(sbuf),

82 "PrŸocﬁÉº‹, gŸ %†a†ª∂yÅy≥ byã", 
cbuf
);

83 
	`__memˇchedRódîSëEº‹
(
r
,
MC_ERR_PROTOCOL
,
sbuf
);

84 
	}
}

86 
	$__memˇchedRódîSëEº‹OOM
(
mcRódî
 *
r
) {

87 
	`__memˇchedRódîSëEº‹
(
r
,
MC_ERR_OOM
,"Out of memory");

88 
	}
}

90 
	$ñemítAºayCª©e
(
mcRódî
 *
r
)

92 
	`as£π
(
r
->
Æloc_Àn
 == 0);

93 
	`as£π
(
r
->
ñemít
 =
NULL
);

94 
	`as£π
(
r
->
ñemíts
 == 0);

96 
r
->
ñemít
 = 
	`mÆloc
(10*(*));

97 i‡(
r
->
ñemít
 =
NULL
) {

98 
	`__memˇchedRódîSëEº‹OOM
(
r
);

99  
MC_ERR
;

101 
r
->
Æloc_Àn
 = 10;

102 
r
->
ñemíts
 = 0;

104  
MC_OK
;

105 
	}
}

107 
	$ñemítAºayDe°roy
(
mcRódî
 *
r
)

109 
i
;

111 i‡(
r
->
ñemít
 =
NULL
)

114 i‡(
r
->
‚
 &&Ñ->‚->
‰ìObje˘
) {

115 
i
 = 0; i < 
r
->
ñemíts
; i ++) {

116 i‡(
r
->
ñemít
[
i
])

117 
r
->
‚
->
	`‰ìObje˘
‘->
ñemít
[
i
]);

120 
	`‰ì
(
r
->
ñemít
);

121 
r
->
ñemít
 = 
NULL
;

122 
r
->
ñemíts
 = 0;

123 
r
->
Æloc_Àn
 = 0;

125  
MC_OK
;

126 
	}
}

128 
	#EXPAND_MAX_SIZE_PER_TIME
 300

	)

129 
	$ñemítAºayEx∑nd
(
mcRódî
 *
r
)

131 
size_t
 
√w_Àngth
;

132 i‡(
r
->
Æloc_Àn
 <= 150) {

133 
√w_Àngth
 = 
r
->
Æloc_Àn
*2;

134 } i‡(
r
->
Æloc_Àn
 <= 500) {

135 
√w_Àngth
 = 
r
->
Æloc_Àn
+
EXPAND_MAX_SIZE_PER_TIME
;

137 
r
->
ñemít
 = 
	`ªÆloc
‘->ñemít,
√w_Àngth
*(*));

138 i‡(
r
->
ñemít
 =
NULL
) {

139 
	`__memˇchedRódîSëEº‹OOM
(
r
);

140  
MC_ERR
;

142 
r
->
Æloc_Àn
 = 
√w_Àngth
;

144  
MC_OK
;

145 
	}
}

147 
	$ñemítAºayAdd
(
mcRódî
 *
r
, *
ª∂y
)

149 
	`as£π
(
r
->
ñemíts
 <r->
Æloc_Àn
);

150 i‡(
r
->
ñemíts
 =r->
Æloc_Àn
) {

151 i‡(
	`ñemítAºayEx∑nd
(
r
Ë!
MC_OK
)

152  
MC_ERR
;

154 
r
->
ñemít
[r->
ñemíts
++] = 
ª∂y
;

156  
MC_OK
;

157 
	}
}

159 
	$memˇchedP¨£Re•⁄£
(
mcRódî
 *
r
)

161 *
obj
;

162 *
p
, *
m
;

163 
ch
;

165 
SW_START
,

166 
SW_RSP_NUM
,

167 
SW_RSP_STR
,

168 
SW_SPACES_BEFORE_KEY
,

169 
SW_KEY
,

170 
SW_SPACES_BEFORE_FLAGS
,

171 
SW_FLAGS
,

172 
SW_SPACES_BEFORE_VLEN
,

173 
SW_VLEN
,

174 
SW_RUNTO_VAL
,

175 
SW_VAL
,

176 
SW_VAL_LF
,

177 
SW_END
,

178 
SW_RUNTO_CRLF
,

179 
SW_CRLF
,

180 
SW_ALMOST_DONE
,

181 
SW_SENTINEL


182 } 
°©e
;

184 
°©e
 = 
r
->state;

186 
	`as£π
(
°©e
 >
SW_START
 && sèã < 
SW_SENTINEL
);

189 
	`as£π
(
r
->
buf
 !
NULL
);

190 
	`as£π
(
r
->
pos
 <Ñ->
Àn
);

192 
p
 = 
r
->
buf
+r->
pos
;Ö <r->buf+r->
Àn
;Ö++) {

193 
ch
 = *
p
;

195 
°©e
) {

196 
SW_START
:

197 i‡(
	`isdigô
(
ch
)) {

198 
°©e
 = 
SW_RSP_NUM
;

200 
°©e
 = 
SW_RSP_STR
;

202 
p
 =Ö - 1;

206 
SW_RSP_NUM
:

207 i‡(
r
->
tokí
 =
NULL
) {

209 
r
->
tokí
 = 
p
;

212 i‡(
	`isdigô
(
ch
)) {

214 
r
->
öãgî
 =Ñ->öãgî*10 + ()(
ch
-'0');

215 } i‡(
ch
 == ' ' || ch == '\r') {

217 
r
->
tokí
 = 
NULL
;

218 
r
->
öãgî
 = 0;

219 
r
->
ty≥
 = 
RSP_TYPE_NUM
;

220 
p
 =Ö - 1;

221 
°©e
 = 
SW_CRLF
;

223 
îr‹
;

228 
SW_RSP_STR
:

229 i‡(
r
->
tokí
 =
NULL
) {

231 
r
->
tokí
 = 
p
;

234 i‡(
ch
 == ' ' || ch == '\r') {

236 
m
 = 
r
->
tokí
;

238 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

239 
	`as£π
(
r
->
°r
 =
NULL
 &&Ñ->
°æí
 == 0);

241 
p
 - 
m
) {

243 i‡(!
	`°∫cmp
(
m
,"END\r",4)) {

244 
r
->
ty≥
 = 
RSP_TYPE_END
;

251 i‡(!
	`°∫cmp
(
m
,"VALUE",5)) {

256 
r
->
ty≥
 = 
RSP_TYPE_VALUE
;

260 i‡(!
	`°∫cmp
(
m
,"ERROR",5)) {

261 
r
->
ty≥
 = 
RSP_TYPE_ERROR
;

268 i‡(!
	`°∫cmp
(
m
,"STORED",6)) {

269 
r
->
ty≥
 = 
RSP_TYPE_STORED
;

271 
r
->
°r
 = 
m
;

272 
r
->
°æí
 = 6;

276 i‡(!
	`°∫cmp
(
m
,"EXISTS",6)) {

277 
r
->
ty≥
 = 
RSP_TYPE_EXISTS
;

279 
r
->
°r
 = 
m
;

280 
r
->
°æí
 = 6;

287 i‡(!
	`°∫cmp
(
m
,"DELETED",7)) {

288 
r
->
ty≥
 = 
RSP_TYPE_DELETED
;

290 
r
->
°r
 = 
m
;

291 
r
->
°æí
 = 7;

298 i‡(!
	`°∫cmp
(
m
,"NOT_FOUND",9)) {

299 
r
->
ty≥
 = 
RSP_TYPE_NOT_FOUND
;

301 
r
->
°r
 = 
m
;

302 
r
->
°æí
 = 9;

309 i‡(!
	`°∫cmp
(
m
,"NOT_STORED",10)) {

310 
r
->
ty≥
 = 
RSP_TYPE_NOT_STORED
;

312 
r
->
°r
 = 
m
;

313 
r
->
°æí
 = 10;

320 i‡(!
	`°∫cmp
(
m
,"CLIENT_ERROR",12)) {

321 
r
->
ty≥
 = 
RSP_TYPE_CLIENT_ERROR
;

325 i‡(!
	`°∫cmp
(
m
,"SERVER_ERROR",12)) {

326 
r
->
ty≥
 = 
RSP_TYPE_SERVER_ERROR
;

333 
r
->
ty≥
) {

334 
RSP_TYPE_UNKNOWN
:

335 
îr‹
;

337 
RSP_TYPE_STORED
:

338 
RSP_TYPE_NOT_STORED
:

339 
RSP_TYPE_EXISTS
:

340 
RSP_TYPE_NOT_FOUND
:

341 
RSP_TYPE_DELETED
:

342 
°©e
 = 
SW_CRLF
;

345 
RSP_TYPE_END
:

346 
°©e
 = 
SW_CRLF
;

349 
RSP_TYPE_VALUE
:

350 
°©e
 = 
SW_SPACES_BEFORE_KEY
;

353 
RSP_TYPE_ERROR
:

354 
°©e
 = 
SW_CRLF
;

357 
RSP_TYPE_CLIENT_ERROR
:

358 
RSP_TYPE_SERVER_ERROR
:

359 
r
->
tokí
 = 
NULL
;

360 
°©e
 = 
SW_RUNTO_CRLF
;

364 
	`NOT_REACHED
();

367 
p
 =Ö - 1;

372 
SW_SPACES_BEFORE_KEY
:

373 i‡(
ch
 != ' ') {

374 
°©e
 = 
SW_KEY
;

375 
p
 =Ö - 1;

376 
r
->
tokí
 = 
NULL
;

381 
SW_KEY
:

382 i‡(
r
->
tokí
 =
NULL
) {

383 
r
->
tokí
 = 
p
;

386 i‡(
ch
 == ' ') {

387 
	`as£π
(
r
->
°r
 =
NULL
 &&Ñ->
°æí
 == 0);

388 
m
 = 
r
->
tokí
;

389 
r
->
tokí
 = 
NULL
;

390 
°©e
 = 
SW_SPACES_BEFORE_FLAGS
;

391 
r
->
°æí
 = 
p
-
m
;

392 
r
->
°r
 = 
m
;

397 
SW_SPACES_BEFORE_FLAGS
:

398 i‡(
ch
 != ' ') {

399 i‡(!
	`isdigô
(
ch
)) {

400 
îr‹
;

402 
°©e
 = 
SW_FLAGS
;

403 
p
 =Ö - 1;

404 
r
->
kÊags
 = 0;

409 
SW_FLAGS
:

410 i‡(
	`isdigô
(
ch
)) {

412 
r
->
kÊags
 =Ñ->kÊags*10 + ()(
ch
-'0');

413 } i‡(
ch
 == ' ') {

416 
°©e
 = 
SW_SPACES_BEFORE_VLEN
;

418 
îr‹
;

423 
SW_SPACES_BEFORE_VLEN
:

424 i‡(
ch
 != ' ') {

425 i‡(!
	`isdigô
(
ch
)) {

426 
îr‹
;

428 
p
 =Ö - 1;

429 
°©e
 = 
SW_VLEN
;

430 
r
->
öãgî
 = 0;

435 
SW_VLEN
:

436 i‡(
	`isdigô
(
ch
)) {

437 
r
->
öãgî
 =Ñ->öãgî*10 + ()(
ch
-'0');

438 } i‡(
ch
 == ' ' || ch == '\r') {

440 
p
 =Ö - 1;

442 
°©e
 = 
SW_RUNTO_CRLF
;

444 
îr‹
;

449 
SW_RUNTO_VAL
:

450 
ch
) {

453 
°©e
 = 
SW_VAL
;

454 
r
->
tokí
 = 
NULL
;

458 
îr‹
;

463 
SW_VAL
:

464 i‡(
r
->
tokí
 =
NULL
) {

466 
r
->
tokí
 = 
p
;

469 
m
 = 
r
->
tokí
 +Ñ->
öãgî
;

470 i‡(
m
 > 
r
->
buf
+r->
Àn
) {

471 
p
 = 
r
->
buf
 +Ñ->
Àn
;

475 *
m
) {

478 
p
 = 
m
;

479 
°©e
 = 
SW_VAL_LF
;

483 
îr‹
;

488 
SW_VAL_LF
:

489 
ch
) {

492 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

493 
obj
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_STRING
,r->
°r
,r->
°æí
,

494 
r
->
tokí
,r->
öãgî
,r->
kÊags
,r->
kvîsi⁄
);

496 
obj
 = (*)
MC_REPLY_STRING
;

497 i‡(
r
->
ñemít
) {

498 
	`as£π
(
r
->
subª∂y
 =
NULL
);

499 
	`ñemítAºayAdd
(
r
,r->
subª∂y
);

500 } i‡(
r
->
subª∂y
) {

501 
	`ñemítAºayCª©e
(
r
);

502 
	`ñemítAºayAdd
(
r
,r->
subª∂y
);

503 
r
->
subª∂y
 = 
NULL
;

504 
	`ñemítAºayAdd
(
r
,
obj
);

506 
r
->
subª∂y
 = 
obj
;

509 
r
->
tokí
 = 
NULL
;

510 
r
->
°r
 = 
NULL
;

511 
r
->
°æí
 = 0;

512 
r
->
kÊags
 = 0;

513 
r
->
kvîsi⁄
 = -1;

514 
°©e
 = 
SW_RSP_STR
;

518 
îr‹
;

523 
SW_END
:

524 i‡(
r
->
tokí
 =
NULL
) {

525 i‡(
ch
 != 'E') {

526 
îr‹
;

529 
r
->
tokí
 = 
p
;

530 } i‡(
ch
 == '\r') {

532 
m
 = 
r
->
tokí
;

533 
r
->
tokí
 = 
NULL
;

535 
p
 - 
m
) {

537 i‡(!
	`°∫cmp
(
m
,"END\r",4)) {

538 
°©e
 = 
SW_ALMOST_DONE
;

543 
îr‹
;

549 
SW_RUNTO_CRLF
:

550 
ch
) {

552 i‡(
r
->
ty≥
 =
RSP_TYPE_VALUE
) {

553 
°©e
 = 
SW_RUNTO_VAL
;

555 i‡(
r
->
ty≥
 =
RSP_TYPE_CLIENT_ERROR
 ||

556 
r
->
ty≥
 =
RSP_TYPE_SERVER_ERROR
) {

557 
m
 = 
r
->
tokí
;

558 
r
->
tokí
 = 
NULL
;

559 
r
->
°æí
 = 
p
-
m
;

560 
r
->
°r
 = 
m
;

562 
°©e
 = 
SW_ALMOST_DONE
;

573 
SW_CRLF
:

574 
ch
) {

579 
°©e
 = 
SW_ALMOST_DONE
;

583 
îr‹
;

588 
SW_ALMOST_DONE
:

589 
ch
) {

592 
d⁄e
;

595 
îr‹
;

600 
SW_SENTINEL
:

602 
	`NOT_REACHED
();

608 
	`as£π
(
p
 =
r
->
buf
+r->
Àn
);

609 
r
->
pos
 =Ñ->
Àn
;

610 
r
->
°©e
 = state;

612 
r
->
ªsu…
 = 
PARSE_AGAIN
;

616 
d⁄e
:

617 
r
->
pos
 = 
p
-r->
buf
+1;

618 
	`as£π
(
r
->
pos
 <r->
Àn
);

619 
r
->
°©e
 = 
SW_START
;

620 
r
->
tokí
 = 
NULL
;

621 
r
->
ªsu…
 = 
PARSE_OK
;

625 
îr‹
:

626 
r
->
ªsu…
 = 
PARSE_ERROR
;

627 
r
->
°©e
 = state;

628 
î∫o
 = 
EINVAL
;

629 
	}
}

631 
mcRódî
 *
	$memˇchedRódîCª©eWôhFun˘i⁄s
(
mcRïlyObje˘Fun˘i⁄s
 *
‚
)

633 
mcRódî
 *
r
;

635 
r
 = 
	`ˇŒoc
((
mcRódî
),1);

636 i‡(
r
 =
NULL
)

637  
NULL
;

639 
r
->
îr
 = 0;

640 
r
->
îr°r
[0] = '\0';

641 
r
->
buf
 = 
	`sd£m±y
();

642 
r
->
maxbuf
 = 
MC_READER_MAX_BUF
;

643 i‡(
r
->
buf
 =
NULL
) {

644 
	`‰ì
(
r
);

645  
NULL
;

648 
r
->
subª∂y
 = 
NULL
;

649 
r
->
Æloc_Àn
 = 0;

650 
r
->
ñemíts
 = 0;

651 
r
->
ñemít
 = 
NULL
;

653 
r
->
°©e
 = 0;

654 
r
->
tokí
 = 
NULL
;

656 
r
->
°r
 = 
NULL
;

657 
r
->
°æí
 = 0;

658 
r
->
kÊags
 = 0;

659 
r
->
kvîsi⁄
 = -1;

660 
r
->
öãgî
 = 0;

661 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

662 
r
->
ªsu…
 = 
PARSE_OK
;

664 
r
->
‚
 = fn;

666  
r
;

667 
	}
}

669 
	$memˇchedRódîFªe
(
mcRódî
 *
r
)

671 
	`memˇchedRódîRe£t
(
r
);

673 i‡(
r
->
buf
 !
NULL
)

674 
	`sds‰ì
(
r
->
buf
);

675 
	`‰ì
(
r
);

676 
	}
}

678 
	$memˇchedRódîFìd
(
mcRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
)

680 
sds
 
√wbuf
;

683 i‡(
r
->
îr
)

684  
MC_ERR
;

687 i‡(
buf
 !
NULL
 && 
Àn
 >= 1) {

689 i‡(
r
->
Àn
 =0 &&Ñ->
maxbuf
 !0 && 
	`sdßvaû
‘->
buf
) >Ñ->maxbuf) {

690 
	`sds‰ì
(
r
->
buf
);

691 
r
->
buf
 = 
	`sd£m±y
();

692 
r
->
pos
 = 0;

695 
	`as£π
(
r
->
buf
 !
NULL
);

698 
√wbuf
 = 
	`sdsˇéí
(
r
->
buf
,buf,
Àn
);

699 i‡(
√wbuf
 =
NULL
) {

700 
	`__memˇchedRódîSëEº‹OOM
(
r
);

701  
MC_ERR
;

704 
r
->
buf
 = 
√wbuf
;

705 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

708  
MC_OK
;

709 
	}
}

711 
	$memˇchedRódîRe£t
(
mcRódî
 *
r
)

713 
r
->
°r
 = 
NULL
;

714 
r
->
°æí
 = 0;

715 
r
->
kÊags
 = 0;

716 
r
->
kvîsi⁄
 = -1;

718 
r
->
°©e
 = 0;

719 
r
->
tokí
 = 0;

721 
r
->
öãgî
 = 0;

723 
r
->
ty≥
 = 
RSP_TYPE_UNKNOWN
;

724 
r
->
ªsu…
 = 
PARSE_OK
;

726 i‡(
r
->
subª∂y
 !
NULL
) {

727 i‡(
r
->
‚
 &&Ñ->‚->
‰ìObje˘
)

728 
r
->
‚
->
	`‰ìObje˘
‘->
subª∂y
);

730 
r
->
subª∂y
 = 
NULL
;

733 
	`ñemítAºayDe°roy
(
r
);

735 
r
->
îr
 = 0;

736 
r
->
îr°r
[0] = '\0';

737 
	}
}

739 *
	$gëRïlyFromRódî
(
mcRódî
 *
r
)

741 *
ª∂y
;

743 
r
->
ty≥
) {

744 
RSP_TYPE_VALUE
:

745 i‡(
r
->
ñemít
) {

746 
	`as£π
(
r
->
subª∂y
 =
NULL
);

747 i‡(
r
->
‚
 &&Ñ->‚->
¸óãAºay
) {

748 
ª∂y
 = 
r
->
‚
->
	`¸óãAºay
‘->
ñemíts
,r->
ñemít
);

749 
r
->
ñemít
 = 
NULL
;

750 
r
->
ñemíts
 = 0;

751 
r
->
Æloc_Àn
 = 0;

753 
ª∂y
 = (*)
MC_REPLY_ARRAY
;

755 } i‡(
r
->
subª∂y
) {

756 
ª∂y
 = 
r
->
subª∂y
;

759 
RSP_TYPE_NUM
:

760 i‡(
r
->
‚
 &&Ñ->‚->
¸óãI¡egî
)

761 
ª∂y
 = 
r
->
‚
->
	`¸óãI¡egî
‘->
öãgî
);

763 
ª∂y
 = (*)
MC_REPLY_INTEGER
;

765 
RSP_TYPE_END
:

766 i‡(
r
->
‚
 &&Ñ->‚->
¸óãNû
)

767 
ª∂y
 = 
r
->
‚
->
	`¸óãNû
();

769 
ª∂y
 = (*)
MC_REPLY_NIL
;

771 
RSP_TYPE_CLIENT_ERROR
:

772 
RSP_TYPE_SERVER_ERROR
:

773 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

774 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_ERROR
,

775 
NULL
,0,
r
->
°r
,r->
°æí
,0,0);

777 
ª∂y
 = (*)
MC_REPLY_ERROR
;

779 
RSP_TYPE_ERROR
:

780 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

781 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_ERROR
,

782 
NULL
,0,"",0,0,0);

784 
ª∂y
 = (*)
MC_REPLY_ERROR
;

786 
RSP_TYPE_STORED
:

787 
RSP_TYPE_NOT_STORED
:

788 
RSP_TYPE_EXISTS
:

789 
RSP_TYPE_NOT_FOUND
:

790 
RSP_TYPE_DELETED
:

791 i‡(
r
->
‚
 &&Ñ->‚->
¸óãSåög
)

792 
ª∂y
 = 
r
->
‚
->
	`¸óãSåög
(
MC_REPLY_STATUS
,

793 
NULL
,0,
r
->
°r
,r->
°æí
,0,0);

795 
ª∂y
 = (*)
MC_REPLY_STATUS
;

798 
ª∂y
 = 
NULL
;

802  
ª∂y
;

803 
	}
}

805 
	$memˇchedRódîGëRïly
(
mcRódî
 *
r
, **
ª∂y
) {

807 i‡(
ª∂y
 !
NULL
)

808 *
ª∂y
 = 
NULL
;

811 i‡(
r
->
îr
)

812  
MC_ERR
;

815 i‡(
r
->
Àn
 == 0)

816  
MC_OK
;

818 
	`memˇchedP¨£Re•⁄£
(
r
);

821 i‡(
r
->
îr
)

822  
MC_ERR
;

831 i‡(
r
->
ªsu…
 =
PARSE_OK
) {

832 i‡(
ª∂y
 !
NULL
) {

833 *
ª∂y
 = 
	`gëRïlyFromRódî
(
r
);

835 
	`memˇchedRódîRe£t
(
r
);

840 i‡(
r
->
pos
 >1024 &&Ñ->
tokí
 =
NULL
 &&Ñ->
°r
 == NULL) {

841 
	`sd§™ge
(
r
->
buf
,r->
pos
,-1);

842 
r
->
pos
 = 0;

843 
r
->
Àn
 = 
	`sd¶í
‘->
buf
);

846  
MC_OK
;

847 
	}
}

	@dep/himemcached-0.1.0/himcread.h

1 #i‚de‡
_HIMC_READ_H_


2 
	#_HIMC_READ_H_


	)

3 
	~<°dio.h
>

5 
	~<him¸ód.h
>

7 
	#MC_ERR
 -1

	)

8 
	#MC_OK
 0

	)

14 
	#MC_ERR_IO
 1

	)

15 
	#MC_ERR_EOF
 3

	)

16 
	#MC_ERR_PROTOCOL
 4

	)

17 
	#MC_ERR_OOM
 5

	)

18 
	#MC_ERR_OTHER
 2

	)

20 
	#MC_REPLY_STRING
 1

	)

21 
	#MC_REPLY_ARRAY
 2

	)

22 
	#MC_REPLY_INTEGER
 3

	)

23 
	#MC_REPLY_NIL
 4

	)

24 
	#MC_REPLY_STATUS
 5

	)

25 
	#MC_REPLY_ERROR
 6

	)

27 
	#MC_READER_MAX_BUF
 (1024*16Ë

	)

29 #ifde‡
__˝lu•lus


33 
	smcRïlyObje˘Fun˘i⁄s
 {

34 *(*
¸óãSåög
)(, *, 
size_t
, *, size_t, , );

35 *(*
¸óãAºay
)(
size_t
, **);

36 *(*
¸óãI¡egî
)();

37 *(*
¸óãNû
)();

38 (*
‰ìObje˘
)(*);

39 } 
	tmcRïlyObje˘Fun˘i⁄s
;

41 
	smcRódî
 {

42 
îr
;

43 
îr°r
[128];

45 *
buf
;

46 
size_t
 
pos
;

47 
size_t
 
Àn
;

48 
size_t
 
maxbuf
;

50 *
subª∂y
;

51 
size_t
 
Æloc_Àn
;

52 
size_t
 
ñemíts
;

53 **
ñemít
;

55 *
°r
;

56 
size_t
 
°æí
;

57 
kÊags
;

58 
kvîsi⁄
;

60 
°©e
;

61 *
tokí
;

63 
öãgî
;

65 
ty≥
;

66 
ªsu…
;

68 
mcRïlyObje˘Fun˘i⁄s
 *
‚
;

69 *
¥ivd©a
;

70 } 
	tmcRódî
;

73 
mcRódî
 *
memˇchedRódîCª©eWôhFun˘i⁄s
(
mcRïlyObje˘Fun˘i⁄s
 *
‚
);

74 
memˇchedRódîFªe
(
mcRódî
 *
r
);

75 
memˇchedRódîFìd
(
mcRódî
 *
r
, c⁄° *
buf
, 
size_t
 
Àn
);

76 
memˇchedRódîGëRïly
(
mcRódî
 *
r
, **
ª∂y
);

78 #ifde‡
__˝lu•lus


	@dep/himemcached-0.1.0/himemcached.c

1 
	~<°dlib.h
>

2 
	~<î∫o.h
>

3 
	~<as£π.h
>

5 
	~"himemˇched.h
"

7 
	#REQ_TYPE_UNKNOWN
 0

	)

8 
	#REQ_TYPE_STORAGE
 1

	)

9 
	#REQ_TYPE_CAS
 2

	)

10 
	#REQ_TYPE_RETRIEVAL
 3

	)

11 
	#REQ_TYPE_ARITHMETIC
 4

	)

12 
	#REQ_TYPE_DELETE
 5

	)

14 
mcRïly
 *
¸óãRïlyObje˘
(
ty≥
);

15 *
¸óãSåögObje˘
(
ty≥
, *
key
, 
size_t
 
keyÀn
, *
°r
, size_à
Àn
, 
Êags
, 
vîsi⁄
);

16 *
¸óãAºayObje˘
(
size_t
 
ñemíts
, **
ñemít
);

17 *
¸óãI¡egîObje˘
(
vÆue
);

18 *
¸óãNûObje˘
();

22 
mcRïlyObje˘Fun˘i⁄s
 
	gdeÁu…Fun˘i⁄s
 = {

23 
¸óãSåögObje˘
,

24 
¸óãAºayObje˘
,

25 
¸óãI¡egîObje˘
,

26 
¸óãNûObje˘
,

27 
‰ìMcRïlyObje˘


31 
mcRïly
 *
	$¸óãRïlyObje˘
(
ty≥
) {

32 
mcRïly
 *
r
 = 
	`ˇŒoc
(1,(*r));

34 i‡(
r
 =
NULL
)

35  
NULL
;

37 
r
->
ty≥
 =Åype;

39  
r
;

40 
	}
}

43 
	$‰ìMcRïlyObje˘
(*
ª∂y
) {

44 
mcRïly
 *
r
 = 
ª∂y
;

45 
size_t
 
j
;

47 i‡(
r
 =
NULL
)

50 
r
->
ty≥
) {

51 
MC_REPLY_INTEGER
:

52 
MC_REPLY_NIL
:

54 
MC_REPLY_ARRAY
:

55 i‡(
r
->
ñemít
 !
NULL
) {

56 
j
 = 0; j < 
r
->
ñemíts
; j++)

57 i‡(
r
->
ñemít
[
j
] !
NULL
)

58 
	`‰ìMcRïlyObje˘
(
r
->
ñemít
[
j
]);

59 
	`‰ì
(
r
->
ñemít
);

62 
MC_REPLY_ERROR
:

63 
MC_REPLY_STATUS
:

64 
MC_REPLY_STRING
:

65 i‡(
r
->
key
 !
NULL
)

66 
	`‰ì
(
r
->
key
);

67 i‡(
r
->
°r
 !
NULL
)

68 
	`‰ì
(
r
->
°r
);

71 
	`as£π
(0);

74 
	`‰ì
(
r
);

75 
	}
}

77 *
	$¸óãSåögObje˘
(
ty≥
, *
key
, 
size_t
 
keyÀn
, *
°r
, size_à
Àn
, 
Êags
, 
vîsi⁄
) {

78 
mcRïly
 *
r
, *
∑ª¡
;

79 *
buf
;

81 
	`as£π
(
ty≥
 =
MC_REPLY_ERROR
 ||

82 
ty≥
 =
MC_REPLY_STATUS
 ||

83 
ty≥
 =
MC_REPLY_STRING
);

85 
r
 = 
	`¸óãRïlyObje˘
(
ty≥
);

86 i‡(
r
 =
NULL
)

87  
NULL
;

89 i‡(
key
 !
NULL
) {

90 
r
->
key
 = 
	`mÆloc
(
keyÀn
+1);

91 i‡(
r
->
key
 =
NULL
) {

92 
	`‰ìMcRïlyObje˘
(
r
);

93  
NULL
;

95 i‡(
keyÀn
 > 0)

97 
	`mem˝y
(
r
->
key
,key,
keyÀn
);

98 
r
->
key
[
keyÀn
] = '\0';

99 
r
->
keyÀn
 = keylen;

102 
buf
 = 
	`mÆloc
(
Àn
+1);

103 i‡(
buf
 =
NULL
) {

104 
	`‰ìMcRïlyObje˘
(
r
);

105  
NULL
;

107 i‡(
Àn
 > 0)

109 
	`mem˝y
(
buf
,
°r
,
Àn
);

110 
buf
[
Àn
] = '\0';

111 
r
->
°r
 = 
buf
;

112 
r
->
Àn
 =Üen;

114 
r
->
Êags
 = flags;

115 
r
->
vîsi⁄
 = version;

117  
r
;

118 
	}
}

120 *
	$¸óãAºayObje˘
(
size_t
 
ñemíts
, **
ñemít
) {

121 
mcRïly
 *
r
;

123 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_ARRAY
);

124 i‡(
r
 =
NULL
)

125  
NULL
;

127 
r
->
ñemíts
 =Élements;

128 
r
->
ñemít
 = (
mcRïly
 **)element;

130  
r
;

131 
	}
}

133 *
	$¸óãI¡egîObje˘
(
vÆue
) {

134 
mcRïly
 *
r
;

136 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_INTEGER
);

137 i‡(
r
 =
NULL
)

138  
NULL
;

140 
r
->
öãgî
 = 
vÆue
;

142  
r
;

143 
	}
}

145 *
	$¸óãNûObje˘
() {

146 
mcRïly
 *
r
;

148 
r
 = 
	`¸óãRïlyObje˘
(
MC_REPLY_NIL
);

149 i‡(
r
 =
NULL
)

150  
NULL
;

152  
r
;

153 
	}
}

155 
	$__memˇchedSëEº‹
(
mcC⁄ãxt
 *
c
, 
ty≥
, c⁄° *
°r
) {

156 
size_t
 
Àn
;

158 
c
->
îr
 = 
ty≥
;

159 i‡(
°r
 !
NULL
) {

160 
Àn
 = 
	`°æí
(
°r
);

161 
Àn
 =Üí < ((
c
->
îr°r
)-1) ?Üen : ((c->errstr)-1);

162 
	`mem˝y
(
c
->
îr°r
,
°r
,
Àn
);

163 
c
->
îr°r
[
Àn
] = '\0';

166 
	`as£π
(
ty≥
 =
MC_ERR_IO
);

169 
	}
}

181 
	$memˇchedBuf„rWrôe
(
mcC⁄ãxt
 *
c
, *
d⁄e
) {

182 
nwrôãn
;

185 i‡(
c
->
îr
)

186  
MC_ERR
;

188 i‡(
	`sd¶í
(
c
->
obuf
) > 0) {

189 
nwrôãn
 = 
	`wrôe
(
c
->
fd
,c->
obuf
,
	`sd¶í
(c->obuf));

190 i‡(
nwrôãn
 == -1) {

191 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
MC_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

194 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_IO
,
NULL
);

195  
MC_ERR
;

197 } i‡(
nwrôãn
 > 0) {

198 i‡(
nwrôãn
 =(sig√d)
	`sd¶í
(
c
->
obuf
)) {

199 
	`sds‰ì
(
c
->
obuf
);

200 
c
->
obuf
 = 
	`sd£m±y
();

202 
	`sd§™ge
(
c
->
obuf
,
nwrôãn
,-1);

206 i‡(
d⁄e
 !
NULL
Ë*d⁄ê(
	`sd¶í
(
c
->
obuf
) == 0);

207  
MC_OK
;

208 
	}
}

212 
	$memˇchedGëRïlyFromRódî
(
mcC⁄ãxt
 *
c
, **
ª∂y
) {

213 i‡(
	`memˇchedRódîGëRïly
(
c
->
ªadî
,
ª∂y
Ë=
MC_ERR
) {

214 
	`__memˇchedSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

215  
MC_ERR
;

217  
MC_OK
;

218 
	}
}

220 
	$memˇchedGëRïly
(
mcC⁄ãxt
 *
c
, **
ª∂y
) {

221 
wd⁄e
 = 0;

222 *
aux
 = 
NULL
;

225 i‡(
	`memˇchedGëRïlyFromRódî
(
c
,&
aux
Ë=
MC_ERR
)

226  
MC_ERR
;

229 i‡(
aux
 =
NULL
 && 
c
->
Êags
 & 
MC_BLOCK
) {

232 i‡(
	`memˇchedBuf„rWrôe
(
c
,&
wd⁄e
Ë=
MC_ERR
)

233  
MC_ERR
;

234 } !
wd⁄e
);

238 i‡(
	`memˇchedBuf„rRód
(
c
Ë=
MC_ERR
)

239  
MC_ERR
;

240 i‡(
	`memˇchedGëRïlyFromRódî
(
c
,&
aux
Ë=
MC_ERR
)

241  
MC_ERR
;

242 } 
aux
 =
NULL
);

246 i‡(
ª∂y
 !
NULL
Ë*ª∂y = 
aux
;

247  
MC_OK
;

248 
	}
}

250 
mcRódî
 *
	$memˇchedRódîCª©e
() {

251  
	`memˇchedRódîCª©eWôhFun˘i⁄s
(&
deÁu…Fun˘i⁄s
);

252 
	}
}

254 
mcC⁄ãxt
 *
	$memˇchedC⁄ãxtInô
() {

255 
mcC⁄ãxt
 *
c
;

257 
c
 = 
	`ˇŒoc
(1,(
mcC⁄ãxt
));

258 i‡(
c
 =
NULL
)

259  
NULL
;

261 
c
->
îr
 = 0;

262 
c
->
îr°r
[0] = '\0';

263 
c
->
obuf
 = 
	`sd£m±y
();

264 
c
->
ªadî
 = 
	`memˇchedRódîCª©e
();

265 
c
->
t˝
.
ho°
 = 
NULL
;

266 
c
->
t˝
.
sour˚_addr
 = 
NULL
;

267 
c
->
unix_sock
.
∑th
 = 
NULL
;

268 
c
->
timeout
 = 
NULL
;

270 i‡(
c
->
obuf
 =
NULL
 || c->
ªadî
 == NULL) {

271 
	`memˇchedFªe
(
c
);

272  
NULL
;

275  
c
;

276 
	}
}

278 
	$memˇchedFªe
(
mcC⁄ãxt
 *
c
) {

279 i‡(
c
 =
NULL
)

281 i‡(
c
->
fd
 > 0)

282 
	`˛o£
(
c
->
fd
);

283 i‡(
c
->
obuf
 !
NULL
)

284 
	`sds‰ì
(
c
->
obuf
);

285 i‡(
c
->
ªadî
 !
NULL
)

286 
	`memˇchedRódîFªe
(
c
->
ªadî
);

287 i‡(
c
->
t˝
.
ho°
)

288 
	`‰ì
(
c
->
t˝
.
ho°
);

289 i‡(
c
->
t˝
.
sour˚_addr
)

290 
	`‰ì
(
c
->
t˝
.
sour˚_addr
);

291 i‡(
c
->
unix_sock
.
∑th
)

292 
	`‰ì
(
c
->
unix_sock
.
∑th
);

293 i‡(
c
->
timeout
)

294 
	`‰ì
(
c
->
timeout
);

295 
	`‰ì
(
c
);

296 
	}
}

303 
	$memˇchedBuf„rRód
(
mcC⁄ãxt
 *
c
) {

304 
buf
[1024*16];

305 
ƒód
;

308 i‡(
c
->
îr
)

309  
MC_ERR
;

311 
ƒód
 = 
	`ªad
(
c
->
fd
,
buf
,(buf));

312 i‡(
ƒód
 == -1) {

313 i‡((
î∫o
 =
EAGAIN
 && !(
c
->
Êags
 & 
MC_BLOCK
)Ë|| (î∫ÿ=
EINTR
)) {

316 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_IO
,
NULL
);

317  
MC_ERR
;

319 } i‡(
ƒód
 == 0) {

320 
	`__memˇchedSëEº‹
(
c
,
MC_ERR_EOF
,"Server closedÅhe connection");

321  
MC_ERR
;

323 i‡(
	`memˇchedRódîFìd
(
c
->
ªadî
,
buf
,
ƒód
Ë!
MC_OK
) {

324 
	`__memˇchedSëEº‹
(
c
,c->
ªadî
->
îr
,c->ªadî->
îr°r
);

325  
MC_ERR
;

328  
MC_OK
;

329 
	}
}

331 
	$gëReque°Ty≥FromSåög
(*
°r
, 
size_t
 
Àn
)

333 i‡(
°r
 =
NULL
 || 
Àn
 == 0)

336 i‡(
Àn
 == 3) {

337 i‡(!
	`°∫ˇ£cmp
(
°r
,"set",3) ||

338 !
	`°∫ˇ£cmp
(
°r
,"add",3)) {

339  
REQ_TYPE_STORAGE
;

340 } i‡(!
	`°∫ˇ£cmp
(
°r
,"cas",3)) {

341  
REQ_TYPE_CAS
;

342 } i‡(!
	`°∫ˇ£cmp
(
°r
,"get",3)) {

343  
REQ_TYPE_RETRIEVAL
;

347 } i‡(
Àn
 == 4) {

348 i‡(!
	`°∫ˇ£cmp
(
°r
,"gets",4)) {

349  
REQ_TYPE_RETRIEVAL
;

350 } i‡(!
	`°∫ˇ£cmp
(
°r
,"incr",4) ||

351 !
	`°∫ˇ£cmp
(
°r
,"decr",4)) {

352  
REQ_TYPE_ARITHMETIC
;

356 } i‡(
Àn
 == 6) {

357 i‡(!
	`°∫ˇ£cmp
(
°r
,"append",6)) {

358  
REQ_TYPE_STORAGE
;

359 } i‡(!
	`°∫ˇ£cmp
(
°r
,"delete",6)) {

360  
REQ_TYPE_DELETE
;

364 } i‡(
Àn
 == 7) {

365 i‡(!
	`°∫ˇ£cmp
(
°r
,"replace",7) ||

366 !
	`°∫ˇ£cmp
(
°r
,"prepend",7)) {

367  
REQ_TYPE_STORAGE
;

374 
	}
}

376 
	#ARGUMENTLEN
(
_¨gty≥
,
_¨gv
,
_¨gvÀn
,
_idx
) \

377 (
_¨gty≥
==0?
	`sd¶í
(
_¨gv
[
_idx
]):(
_¨gvÀn
==
NULL
?
	`°æí
(_¨gv[_idx]):_¨gvÀn[_idx]))

	)

384 
	$checkCmdVÆidAndGëTŸÆLí
(
cmdty≥
, 
¨gty≥
, 
¨gc
, **
¨gv
, 
size_t
 *
¨gvÀn
)

386 
size_t
 
Àn
;

387 
tŸÀn
, 
j
;

389 
cmdty≥
) {

390 
REQ_TYPE_STORAGE
:

391 i‡(
¨gc
 != 6 &&árgc != 7) {

394 i‡(
¨gc
 =7 && (
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,5) != 7 ||

395 
	`°∫ˇ£cmp
(
¨gv
[5],"noreply",7))) {

399 
tŸÀn
 = 0;

400 
j
 = 0; j < 
¨gc
-1; j ++) {

401 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

403 
tŸÀn
 +2 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

405 
REQ_TYPE_CAS
:

406 i‡(
¨gc
 != 7 &&árgc != 8) {

409 i‡(
¨gc
 =8 && (
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,6) != 7 ||

410 
	`°∫ˇ£cmp
(
¨gv
[6],"noreply",7))) {

414 
tŸÀn
 = 0;

415 
j
 = 0; j < 
¨gc
-1; j ++) {

416 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

418 
tŸÀn
 +2 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

420 
REQ_TYPE_ARITHMETIC
:

421 i‡(
¨gc
 != 3) {

424 
tŸÀn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,0) + 1 +

425 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,1) + 1 +

426 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,2) + 2;

428 
REQ_TYPE_RETRIEVAL
:

429 i‡(
¨gc
 <= 1) {

433 
tŸÀn
 = 0;

434 
j
 = 0; j < 
¨gc
-1; j ++) {

435 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
) + 1;

437 
tŸÀn
 +
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1) + 2;

439 
REQ_TYPE_DELETE
:

440 i‡(
¨gc
 != 2 &&árgc != 3) {

444 
tŸÀn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,0) + 1 +

445 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,1);

446 i‡(
¨gc
 == 3) {

447 i‡(
	`°∫ˇ£cmp
(
¨gv
[2],"noreply",7)) {

450 
tŸÀn
 +1 + 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,2);

452 
tŸÀn
 += 2;

455 
tŸÀn
 = -1;

459  
tŸÀn
;

460 
	}
}

463 
	$gíîicMemˇchedComm™d
(
cmdty≥
, *
cmd
, 
¨gty≥
, 
¨gc
, **
¨gv
, 
size_t
 *
¨gvÀn
)

465 
j
;

466 
size_t
 
Àn
;

467 
pos
 = 0;

469 
cmdty≥
) {

470 
REQ_TYPE_STORAGE
:

471 
REQ_TYPE_CAS
:

472 
j
 = 0; j < 
¨gc
-1; j ++) {

473 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
);

474 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

475 
pos
 +()
Àn
;

476 
cmd
[
pos
++] = ' ';

478 
cmd
[
pos
++] = '\r';

479 
cmd
[
pos
++] = '\n';

480 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1);

481 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
¨gc
-1],
Àn
);

482 
pos
 +()
Àn
;

483 
cmd
[
pos
++] = '\r';

484 
cmd
[
pos
++] = '\n';

486 
REQ_TYPE_ARITHMETIC
:

487 
REQ_TYPE_RETRIEVAL
:

488 
REQ_TYPE_DELETE
:

489 
j
 = 0; j < 
¨gc
-1; j ++) {

490 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
j
);

491 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
j
],
Àn
);

492 
pos
 +
Àn
;

493 
cmd
[
pos
++] = ' ';

495 
Àn
 = 
	`ARGUMENTLEN
(
¨gty≥
,
¨gv
,
¨gvÀn
,
¨gc
-1);

496 
	`mem˝y
(
cmd
+
pos
,
¨gv
[
¨gc
-1],
Àn
);

497 
pos
 +()
Àn
;

498 
cmd
[
pos
++] = '\r';

499 
cmd
[
pos
++] = '\n';

502 
pos
 = -1;

506  
pos
;

507 
	}
}

512 
	$memˇchedF‹m©Comm™dSdsArgv
(**
èrgë
, 
¨gc
, c⁄° 
sds
 *
¨gv
) {

513 *
cmd
 = 
NULL
;

514 
pos
;

515 
tŸÀn
;

516 
ty≥
;

519 i‡(
èrgë
 =
NULL
 || 
¨gc
 < 1)

522 
ty≥
 = 
	`gëReque°Ty≥FromSåög
(
¨gv
[0], 
	`sd¶í
(argv[0]));

523 i‡(
ty≥
 < 0)

524 
f‹m©_îr
;

526 
tŸÀn
 = 
	`checkCmdVÆidAndGëTŸÆLí
(
ty≥
, 0, 
¨gc
, 
¨gv
, 
NULL
);

527 i‡(
tŸÀn
 < 0) {

528 
f‹m©_îr
;

532 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

533 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

535 
pos
 = 
	`gíîicMemˇchedComm™d
(
ty≥
, 
cmd
, 0, 
¨gc
, 
¨gv
, 
NULL
);

536 i‡(
pos
 < 0Ë
f‹m©_îr
;

538 
	`as£π
(
pos
 =
tŸÀn
);

539 
cmd
[
pos
] = '\0';

541 *
èrgë
 = 
cmd
;

542  
tŸÀn
;

544 
f‹m©_îr
:

545 i‡(
cmd
Ë
	`‰ì
(cmd);

548 
mem‹y_îr
:

550 
	}
}

552 
	$memˇchedvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

554 c⁄° *
c
 = 
f‹m©
;

555 *
cmd
 = 
NULL
;

556 
pos
;

557 
sds
 
cuørg
, 
√w¨g
;

558 
touched
 = 0;

559 **
cuørgv
 = 
NULL
, **
√w¨gv
 = NULL;

560 
¨gc
 = 0;

561 
tŸÀn
;

562 
îr‹_ty≥
 = 0;

563 
j
;

566 i‡(
èrgë
 =
NULL
)

570 
cuørg
 = 
	`sd£m±y
();

571 i‡(
cuørg
 =
NULL
)

574 *
c
 != '\0') {

575 i‡(*
c
 != '%' || c[1] == '\0') {

576 i‡(*
c
 == ' ') {

577 i‡(
touched
) {

578 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

579 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

580 
cuørgv
 = 
√w¨gv
;

581 
cuørgv
[
¨gc
++] = 
cuørg
;

584 
cuørg
 = 
	`sd£m±y
();

585 i‡(
cuørg
 =
NULL
Ë
mem‹y_îr
;

586 
touched
 = 0;

589 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
c
,1);

590 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

591 
cuørg
 = 
√w¨g
;

592 
touched
 = 1;

595 *
¨g
;

596 
size_t
 
size
;

599 
√w¨g
 = 
cuørg
;

601 
c
[1]) {

603 
¨g
 = 
	`va_¨g
(
≠
,*);

604 
size
 = 
	`°æí
(
¨g
);

605 i‡(
size
 > 0)

606 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

609 
¨g
 = 
	`va_¨g
(
≠
,*);

610 
size
 = 
	`va_¨g
(
≠
,
size_t
);

611 i‡(
size
 > 0)

612 
√w¨g
 = 
	`sdsˇéí
(
cuørg
,
¨g
,
size
);

615 
√w¨g
 = 
	`sdsˇt
(
cuørg
,"%");

620 c⁄° 
ötfmts
[] = "diouxX";

621 c⁄° 
Êags
[] = "#0-+ ";

622 
_f‹m©
[16];

623 c⁄° *
_p
 = 
c
+1;

624 
size_t
 
_l
 = 0;

625 
va_li°
 
_˝y
;

628 *
_p
 !'\0' && 
	`°rchr
(
Êags
,*_pË!
NULL
) _p++;

631 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

634 i‡(*
_p
 == '.') {

635 
_p
++;

636 *
_p
 !'\0' && 
	`isdigô
(*_p)) _p++;

640 
	`va_c›y
(
_˝y
,
≠
);

643 i‡(
	`°rchr
(
ötfmts
,*
_p
Ë!
NULL
) {

644 
	`va_¨g
(
≠
,);

645 
fmt_vÆid
;

649 i‡(
	`°rchr
("eEfFgGaA",*
_p
Ë!
NULL
) {

650 
	`va_¨g
(
≠
,);

651 
fmt_vÆid
;

655 i‡(
_p
[0] == 'h' && _p[1] == 'h') {

656 
_p
 += 2;

657 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

658 
	`va_¨g
(
≠
,);

659 
fmt_vÆid
;

661 
fmt_övÆid
;

665 i‡(
_p
[0] == 'h') {

666 
_p
 += 1;

667 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

668 
	`va_¨g
(
≠
,);

669 
fmt_vÆid
;

671 
fmt_övÆid
;

675 i‡(
_p
[0] == 'l' && _p[1] == 'l') {

676 
_p
 += 2;

677 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

678 
	`va_¨g
(
≠
,);

679 
fmt_vÆid
;

681 
fmt_övÆid
;

685 i‡(
_p
[0] == 'l') {

686 
_p
 += 1;

687 i‡(*
_p
 !'\0' && 
	`°rchr
(
ötfmts
,*_pË!
NULL
) {

688 
	`va_¨g
(
≠
,);

689 
fmt_vÆid
;

691 
fmt_övÆid
;

694 
fmt_övÆid
:

695 
	`va_íd
(
_˝y
);

696 
f‹m©_îr
;

698 
fmt_vÆid
:

699 
_l
 = (
_p
+1)-
c
;

700 i‡(
_l
 < (
_f‹m©
)-2) {

701 
	`mem˝y
(
_f‹m©
,
c
,
_l
);

702 
_f‹m©
[
_l
] = '\0';

703 
√w¨g
 = 
	`sdsˇtv¥ötf
(
cuørg
,
_f‹m©
,
_˝y
);

707 
c
 = 
_p
-1;

710 
	`va_íd
(
_˝y
);

715 i‡(
√w¨g
 =
NULL
Ë
mem‹y_îr
;

716 
cuørg
 = 
√w¨g
;

718 
touched
 = 1;

719 
c
++;

721 
c
++;

725 i‡(
touched
) {

726 
√w¨gv
 = 
	`ªÆloc
(
cuørgv
,(*)*(
¨gc
+1));

727 i‡(
√w¨gv
 =
NULL
Ë
mem‹y_îr
;

728 
cuørgv
 = 
√w¨gv
;

729 
cuørgv
[
¨gc
++] = 
cuørg
;

731 
	`sds‰ì
(
cuørg
);

735 
cuørg
 = 
NULL
;

737 
tŸÀn
 = 
	`memˇchedF‹m©Comm™dSdsArgv
(&
cmd
, 
¨gc
,
cuørgv
);

738 i‡(
tŸÀn
 < 0) {

739 
îr‹_ty≥
 = 
tŸÀn
;

740 
˛ónup
;

743 
	`‰ì
(
cuørgv
);

744 *
èrgë
 = 
cmd
;

745  
tŸÀn
;

747 
f‹m©_îr
:

748 
îr‹_ty≥
 = -2;

749 
˛ónup
;

751 
mem‹y_îr
:

752 
îr‹_ty≥
 = -1;

753 
˛ónup
;

755 
˛ónup
:

756 i‡(
cuørgv
) {

757 
¨gc
--)

758 
	`sds‰ì
(
cuørgv
[
¨gc
]);

759 
	`‰ì
(
cuørgv
);

762 
	`sds‰ì
(
cuørg
);

766 i‡(
cmd
 !
NULL
)

767 
	`‰ì
(
cmd
);

769  
îr‹_ty≥
;

770 
	}
}

784 
	$memˇchedF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...) {

785 
va_li°
 
≠
;

786 
Àn
;

787 
	`va_°¨t
(
≠
,
f‹m©
);

788 
Àn
 = 
	`memˇchedvF‹m©Comm™d
(
èrgë
,
f‹m©
,
≠
);

789 
	`va_íd
(
≠
);

793 i‡(
Àn
 < 0)

794 
Àn
 = -1;

796  
Àn
;

797 
	}
}

804 
	$memˇchedF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
) {

805 *
cmd
 = 
NULL
;

806 
pos
;

807 
tŸÀn
;

808 
ty≥
;

811 i‡(
èrgë
 =
NULL
 || 
¨gc
 < 1)

814 
ty≥
 = 
	`gëReque°Ty≥FromSåög
(
¨gv
[0], 
¨gvÀn
==
NULL
?
	`°æí
(argv[0]):argvlen[0]);

815 i‡(
ty≥
 < 0) {

816 
f‹m©_îr
;

819 
tŸÀn
 = 
	`checkCmdVÆidAndGëTŸÆLí
(
ty≥
, 1, 
¨gc
, 
¨gv
, 
¨gvÀn
);

820 i‡(
tŸÀn
 < 0) {

821 
f‹m©_îr
;

825 
cmd
 = 
	`mÆloc
(
tŸÀn
+1);

826 i‡(
cmd
 =
NULL
Ë
mem‹y_îr
;

828 
pos
 = 
	`gíîicMemˇchedComm™d
(
ty≥
, 
cmd
, 1, 
¨gc
, 
¨gv
, 
¨gvÀn
);

829 i‡(
pos
 < 0) {

830 
f‹m©_îr
;

833 
	`as£π
(
pos
 =
tŸÀn
);

834 
cmd
[
pos
] = '\0';

836 *
èrgë
 = 
cmd
;

837  
tŸÀn
;

839 
f‹m©_îr
:

840 i‡(
cmd
Ë
	`‰ì
(cmd);

843 
mem‹y_îr
:

845 
	}
}

	@dep/himemcached-0.1.0/himemcached.h

1 #i‚de‡
_HIMEMCACHED_H_


2 
	#_HIMEMCACHED_H_


	)

4 
	~"him¸ód.h
"

5 
	~"himcdï/sds.h
"

7 
	#HIMC_MAJOR
 0

	)

8 
	#HIMC_MINOR
 13

	)

9 
	#HIMC_PATCH
 1

	)

13 
	#MC_BLOCK
 0x1

	)

17 
	#MC_CONNECTED
 0x2

	)

23 
	#MC_DISCONNECTING
 0x4

	)

27 
	#MC_FREEING
 0x8

	)

30 
	#MC_IN_CALLBACK
 0x10

	)

33 
	#MC_SUBSCRIBED
 0x20

	)

36 
	#MC_MONITORING
 0x40

	)

39 
	#MC_REUSEADDR
 0x80

	)

41 
	#MC_KEEPALIVE_INTERVAL
 15

	)

45 
	#MC_CONNECT_RETRIES
 10

	)

48 
	smcRïly
 {

49 
	mty≥
;

50 
	möãgî
;

51 
	mkeyÀn
;

52 *
	mkey
;

53 
	mÀn
;

54 *
	m°r
;

55 
	mÊags
;

56 
	mvîsi⁄
;

57 
size_t
 
	mñemíts
;

58 
mcRïly
 **
	mñemít
;

59 } 
	tmcRïly
;

61 
mcRódî
 *
memˇchedRódîCª©e
();

64 
‰ìMcRïlyObje˘
(*
ª∂y
);

66 
	emcC⁄√˘i⁄Ty≥
 {

67 
	mMC_CONN_TCP
,

68 
	mMC_CONN_UNIX
,

72 
	smcC⁄ãxt
 {

73 
	mîr
;

74 
	mîr°r
[128];

75 
	mfd
;

76 
	mÊags
;

77 *
	mobuf
;

78 
mcRódî
 *
	mªadî
;

80 
mcC⁄√˘i⁄Ty≥
 
	mc⁄√˘i⁄_ty≥
;

81 
timevÆ
 *
	mtimeout
;

84 *
	mho°
;

85 *
	msour˚_addr
;

86 
	mp‹t
;

87 } 
	mt˝
;

90 *
	m∑th
;

91 } 
	munix_sock
;

92 } 
	tmcC⁄ãxt
;

94 
memˇchedBuf„rWrôe
(
mcC⁄ãxt
 *
c
, *
d⁄e
);

95 
memˇchedBuf„rRód
(
mcC⁄ãxt
 *
c
);

97 
memˇchedGëRïlyFromRódî
(
mcC⁄ãxt
 *
c
, **
ª∂y
);

98 
memˇchedGëRïly
(
mcC⁄ãxt
 *
c
, **
ª∂y
);

100 
mcC⁄ãxt
 *
memˇchedC⁄ãxtInô
();

101 
memˇchedFªe
(
mcC⁄ãxt
 *
c
) ;

103 
memˇchedF‹m©Comm™dSdsArgv
(**
èrgë
, 
¨gc
, c⁄° 
sds
 *
¨gv
);

104 
memˇchedvF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

105 
memˇchedF‹m©Comm™d
(**
èrgë
, c⁄° *
f‹m©
, ...);

106 
memˇchedF‹m©Comm™dArgv
(**
èrgë
, 
¨gc
, c⁄° **
¨gv
, c⁄° 
size_t
 *
¨gvÀn
);

	@dep/sds/sds.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<˘y≥.h
>

37 
	~<as£π.h
>

39 
	~<sds.h
>

40 
	~<sdßŒoc.h
>

42 
ölöe
 
	$sdsHdrSize
(
ty≥
) {

43 
ty≥
&
SDS_TYPE_MASK
) {

44 
SDS_TYPE_5
:

45  (
sdshdr5
);

46 
SDS_TYPE_8
:

47  (
sdshdr8
);

48 
SDS_TYPE_16
:

49  (
sdshdr16
);

50 
SDS_TYPE_32
:

51  (
sdshdr32
);

52 
SDS_TYPE_64
:

53  (
sdshdr64
);

56 
	}
}

58 
ölöe
 
	$sdsReqTy≥
(
size_t
 
°rög_size
) {

59 i‡(
°rög_size
 < 32)

60  
SDS_TYPE_5
;

61 i‡(
°rög_size
 < 0xff)

62  
SDS_TYPE_8
;

63 i‡(
°rög_size
 < 0xffff)

64  
SDS_TYPE_16
;

65 i‡(
°rög_size
 < 0xffffffff)

66  
SDS_TYPE_32
;

67  
SDS_TYPE_64
;

68 
	}
}

82 
sds
 
	$sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
) {

83 *
sh
;

84 
sds
 
s
;

85 
ty≥
 = 
	`sdsReqTy≥
(
öôÀn
);

88 i‡(
ty≥
 =
SDS_TYPE_5
 && 
öôÀn
 =0Ëty≥ = 
SDS_TYPE_8
;

89 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

90 *
Â
;

92 
sh
 = 
	`s_mÆloc
(
hdæí
+
öôÀn
+1);

93 i‡(!
öô
)

94 
	`mem£t
(
sh
, 0, 
hdæí
+
öôÀn
+1);

95 i‡(
sh
 =
NULL
)  NULL;

96 
s
 = (*)
sh
+
hdæí
;

97 
Â
 = ((*)
s
)-1;

98 
ty≥
) {

99 
SDS_TYPE_5
: {

100 *
Â
 = 
ty≥
 | (
öôÀn
 << 
SDS_TYPE_BITS
);

103 
SDS_TYPE_8
: {

104 
	`SDS_HDR_VAR
(8,
s
);

105 
sh
->
Àn
 = 
öôÀn
;

106 
sh
->
Æloc
 = 
öôÀn
;

107 *
Â
 = 
ty≥
;

110 
SDS_TYPE_16
: {

111 
	`SDS_HDR_VAR
(16,
s
);

112 
sh
->
Àn
 = 
öôÀn
;

113 
sh
->
Æloc
 = 
öôÀn
;

114 *
Â
 = 
ty≥
;

117 
SDS_TYPE_32
: {

118 
	`SDS_HDR_VAR
(32,
s
);

119 
sh
->
Àn
 = 
öôÀn
;

120 
sh
->
Æloc
 = 
öôÀn
;

121 *
Â
 = 
ty≥
;

124 
SDS_TYPE_64
: {

125 
	`SDS_HDR_VAR
(64,
s
);

126 
sh
->
Àn
 = 
öôÀn
;

127 
sh
->
Æloc
 = 
öôÀn
;

128 *
Â
 = 
ty≥
;

132 i‡(
öôÀn
 && 
öô
)

133 
	`mem˝y
(
s
, 
öô
, 
öôÀn
);

134 
s
[
öôÀn
] = '\0';

135  
s
;

136 
	}
}

140 
sds
 
	$sd£m±y
() {

141  
	`sd¢ewÀn
("",0);

142 
	}
}

145 
sds
 
	$sd¢ew
(c⁄° *
öô
) {

146 
size_t
 
öôÀn
 = (
öô
 =
NULL
Ë? 0 : 
	`°æí
(init);

147  
	`sd¢ewÀn
(
öô
, 
öôÀn
);

148 
	}
}

151 
sds
 
	$sdsdup
(c⁄° 
sds
 
s
) {

152  
	`sd¢ewÀn
(
s
, 
	`sd¶í
(s));

153 
	}
}

156 
	$sds‰ì
(
sds
 
s
) {

157 i‡(
s
 =
NULL
) ;

158 
	`s_‰ì
((*)
s
-
	`sdsHdrSize
(s[-1]));

159 
	}
}

175 
	$sdsupd©ñí
(
sds
 
s
) {

176 
ªÆÀn
 = 
	`°æí
(
s
);

177 
	`sds£éí
(
s
, 
ªÆÀn
);

178 
	}
}

184 
	$sds˛ór
(
sds
 
s
) {

185 
	`sds£éí
(
s
, 0);

186 
s
[0] = '\0';

187 
	}
}

195 
sds
 
	$sdsMakeRoomF‹
(
sds
 
s
, 
size_t
 
addÀn
) {

196 *
sh
, *
√wsh
;

197 
size_t
 
avaû
 = 
	`sdßvaû
(
s
);

198 
size_t
 
Àn
, 
√wÀn
;

199 
ty≥
, 
ﬁdty≥
 = 
s
[-1] & 
SDS_TYPE_MASK
;

200 
hdæí
;

203 i‡(
avaû
 >
addÀn
Ë 
s
;

205 
Àn
 = 
	`sd¶í
(
s
);

206 
sh
 = (*)
s
-
	`sdsHdrSize
(
ﬁdty≥
);

207 
√wÀn
 = (
Àn
+
addÀn
);

208 i‡(
√wÀn
 < 
SDS_MAX_PREALLOC
)

209 
√wÀn
 *= 2;

211 
√wÀn
 +
SDS_MAX_PREALLOC
;

213 
ty≥
 = 
	`sdsReqTy≥
(
√wÀn
);

218 i‡(
ty≥
 =
SDS_TYPE_5
Ëty≥ = 
SDS_TYPE_8
;

220 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

221 i‡(
ﬁdty≥
==
ty≥
) {

222 
√wsh
 = 
	`s_ªÆloc
(
sh
, 
hdæí
+
√wÀn
+1);

223 i‡(
√wsh
 =
NULL
)  NULL;

224 
s
 = (*)
√wsh
+
hdæí
;

228 
√wsh
 = 
	`s_mÆloc
(
hdæí
+
√wÀn
+1);

229 i‡(
√wsh
 =
NULL
)  NULL;

230 
	`mem˝y
((*)
√wsh
+
hdæí
, 
s
, 
Àn
+1);

231 
	`s_‰ì
(
sh
);

232 
s
 = (*)
√wsh
+
hdæí
;

233 
s
[-1] = 
ty≥
;

234 
	`sds£éí
(
s
, 
Àn
);

236 
	`sds£èŒoc
(
s
, 
√wÀn
);

237  
s
;

238 
	}
}

246 
sds
 
	$sdsRemoveFªeS∑˚
(
sds
 
s
) {

247 *
sh
, *
√wsh
;

248 
ty≥
, 
ﬁdty≥
 = 
s
[-1] & 
SDS_TYPE_MASK
;

249 
hdæí
;

250 
size_t
 
Àn
 = 
	`sd¶í
(
s
);

251 
sh
 = (*)
s
-
	`sdsHdrSize
(
ﬁdty≥
);

253 
ty≥
 = 
	`sdsReqTy≥
(
Àn
);

254 
hdæí
 = 
	`sdsHdrSize
(
ty≥
);

255 i‡(
ﬁdty≥
==
ty≥
) {

256 
√wsh
 = 
	`s_ªÆloc
(
sh
, 
hdæí
+
Àn
+1);

257 i‡(
√wsh
 =
NULL
)  NULL;

258 
s
 = (*)
√wsh
+
hdæí
;

260 
√wsh
 = 
	`s_mÆloc
(
hdæí
+
Àn
+1);

261 i‡(
√wsh
 =
NULL
)  NULL;

262 
	`mem˝y
((*)
√wsh
+
hdæí
, 
s
, 
Àn
+1);

263 
	`s_‰ì
(
sh
);

264 
s
 = (*)
√wsh
+
hdæí
;

265 
s
[-1] = 
ty≥
;

266 
	`sds£éí
(
s
, 
Àn
);

268 
	`sds£èŒoc
(
s
, 
Àn
);

269  
s
;

270 
	}
}

279 
size_t
 
	$sdsAŒocSize
(
sds
 
s
) {

280 
size_t
 
Æloc
 = 
	`sdßŒoc
(
s
);

281  
	`sdsHdrSize
(
s
[-1])+
Æloc
+1;

282 
	}
}

286 *
	$sdsAŒocPå
(
sds
 
s
) {

287  (*Ë(
s
-
	`sdsHdrSize
(s[-1]));

288 
	}
}

313 
	$sdsIn¸Lí
(
sds
 
s
, 
ö¸
) {

314 
Êags
 = 
s
[-1];

315 
size_t
 
Àn
;

316 
Êags
&
SDS_TYPE_MASK
) {

317 
SDS_TYPE_5
: {

318 *
Â
 = ((*)
s
)-1;

319 
ﬁdÀn
 = 
	`SDS_TYPE_5_LEN
(
Êags
);

320 
	`as£π
((
ö¸
 > 0 && 
ﬁdÀn
+incr < 32) || (incr < 0 && oldlen >= ()(-incr)));

321 *
Â
 = 
SDS_TYPE_5
 | ((
ﬁdÀn
+
ö¸
Ë<< 
SDS_TYPE_BITS
);

322 
Àn
 = 
ﬁdÀn
+
ö¸
;

325 
SDS_TYPE_8
: {

326 
	`SDS_HDR_VAR
(8,
s
);

327 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= incr) || (incr < 0 && sh->len >= ()(-incr)));

328 
Àn
 = (
sh
->À¿+
ö¸
);

331 
SDS_TYPE_16
: {

332 
	`SDS_HDR_VAR
(16,
s
);

333 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= incr) || (incr < 0 && sh->len >= ()(-incr)));

334 
Àn
 = (
sh
->À¿+
ö¸
);

337 
SDS_TYPE_32
: {

338 
	`SDS_HDR_VAR
(32,
s
);

339 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >= ()incr) || (incr < 0 && sh->len >= ()(-incr)));

340 
Àn
 = (
sh
->À¿+
ö¸
);

343 
SDS_TYPE_64
: {

344 
	`SDS_HDR_VAR
(64,
s
);

345 
	`as£π
((
ö¸
 >0 && 
sh
->
Æloc
-sh->
Àn
 >(
uöt64_t
)incr) || (incr < 0 && sh->len >= (uint64_t)(-incr)));

346 
Àn
 = (
sh
->À¿+
ö¸
);

349 : 
Àn
 = 0;

351 
s
[
Àn
] = '\0';

352 
	}
}

359 
sds
 
	$sdsgrowzîo
(
sds
 
s
, 
size_t
 
Àn
) {

360 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

362 i‡(
Àn
 <
cuæí
Ë 
s
;

363 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
cuæí
);

364 i‡(
s
 =
NULL
)  NULL;

367 
	`mem£t
(
s
+
cuæí
,0,(
Àn
-curlen+1));

368 
	`sds£éí
(
s
, 
Àn
);

369  
s
;

370 
	}
}

377 
sds
 
	$sdsˇéí
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

378 
size_t
 
cuæí
 = 
	`sd¶í
(
s
);

380 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
);

381 i‡(
s
 =
NULL
)  NULL;

382 
	`mem˝y
(
s
+
cuæí
, 
t
, 
Àn
);

383 
	`sds£éí
(
s
, 
cuæí
+
Àn
);

384 
s
[
cuæí
+
Àn
] = '\0';

385  
s
;

386 
	}
}

392 
sds
 
	$sdsˇt
(
sds
 
s
, c⁄° *
t
) {

393  
	`sdsˇéí
(
s
, 
t
, 
	`°æí
(t));

394 
	}
}

400 
sds
 
	$sdsˇtsds
(
sds
 
s
, c⁄° sd†
t
) {

401  
	`sdsˇéí
(
s
, 
t
, 
	`sd¶í
(t));

402 
	}
}

406 
sds
 
	$sds˝yÀn
(
sds
 
s
, c⁄° *
t
, 
size_t
 
Àn
) {

407 i‡(
	`sdßŒoc
(
s
Ë< 
Àn
) {

408 
s
 = 
	`sdsMakeRoomF‹
(s,
Àn
-
	`sd¶í
(s));

409 i‡(
s
 =
NULL
)  NULL;

411 
	`mem˝y
(
s
, 
t
, 
Àn
);

412 
s
[
Àn
] = '\0';

413 
	`sds£éí
(
s
, 
Àn
);

414  
s
;

415 
	}
}

419 
sds
 
	$sds˝y
(
sds
 
s
, c⁄° *
t
) {

420  
	`sds˝yÀn
(
s
, 
t
, 
	`°æí
(t));

421 
	}
}

429 
	#SDS_LLSTR_SIZE
 21

	)

430 
	$sd¶l2°r
(*
s
, 
vÆue
) {

431 *
p
, 
aux
;

432 
v
;

433 
size_t
 
l
;

437 
v
 = (
vÆue
 < 0) ? -value : value;

438 
p
 = 
s
;

440 *
p
++ = '0'+(
v
%10);

441 
v
 /= 10;

442 } 
v
);

443 i‡(
vÆue
 < 0Ë*
p
++ = '-';

446 
l
 = 
p
-
s
;

447 *
p
 = '\0';

450 
p
--;

451 
s
 < 
p
) {

452 
aux
 = *
s
;

453 *
s
 = *
p
;

454 *
p
 = 
aux
;

455 
s
++;

456 
p
--;

458  
l
;

459 
	}
}

462 
	$sdsuŒ2°r
(*
s
, 
v
) {

463 *
p
, 
aux
;

464 
size_t
 
l
;

468 
p
 = 
s
;

470 *
p
++ = '0'+(
v
%10);

471 
v
 /= 10;

472 } 
v
);

475 
l
 = 
p
-
s
;

476 *
p
 = '\0';

479 
p
--;

480 
s
 < 
p
) {

481 
aux
 = *
s
;

482 *
s
 = *
p
;

483 *
p
 = 
aux
;

484 
s
++;

485 
p
--;

487  
l
;

488 
	}
}

494 
sds
 
	$sds‰oml⁄gl⁄g
(
vÆue
) {

495 
buf
[
SDS_LLSTR_SIZE
];

496 
Àn
 = 
	`sd¶l2°r
(
buf
,
vÆue
);

498  
	`sd¢ewÀn
(
buf
,
Àn
);

499 
	}
}

502 
sds
 
	$sdsˇtv¥ötf
(
sds
 
s
, c⁄° *
fmt
, 
va_li°
 
≠
) {

503 
va_li°
 
˝y
;

504 
°©icbuf
[1024], *
buf
 = sèticbuf, *
t
;

505 
size_t
 
buÊí
 = 
	`°æí
(
fmt
)*2;

509 i‡(
buÊí
 > (
°©icbuf
)) {

510 
buf
 = 
	`s_mÆloc
(
buÊí
);

511 i‡(
buf
 =
NULL
)  NULL;

513 
buÊí
 = (
°©icbuf
);

519 
buf
[
buÊí
-2] = '\0';

520 
	`va_c›y
(
˝y
,
≠
);

521 
	`v¢¥ötf
(
buf
, 
buÊí
, 
fmt
, 
˝y
);

522 
	`va_íd
(
˝y
);

523 i‡(
buf
[
buÊí
-2] != '\0') {

524 i‡(
buf
 !
°©icbuf
Ë
	`s_‰ì
(buf);

525 
buÊí
 *= 2;

526 
buf
 = 
	`s_mÆloc
(
buÊí
);

527 i‡(
buf
 =
NULL
)  NULL;

534 
t
 = 
	`sdsˇt
(
s
, 
buf
);

535 i‡(
buf
 !
°©icbuf
Ë
	`s_‰ì
(buf);

536  
t
;

537 
	}
}

555 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...) {

556 
va_li°
 
≠
;

557 *
t
;

558 
	`va_°¨t
(
≠
, 
fmt
);

559 
t
 = 
	`sdsˇtv¥ötf
(
s
,
fmt
,
≠
);

560 
	`va_íd
(
≠
);

561  
t
;

562 
	}
}

580 
sds
 
	$sdsˇtfmt
(
sds
 
s
, c⁄° *
fmt
, ...) {

581 
size_t
 
öôÀn
 = 
	`sd¶í
(
s
);

582 c⁄° *
f
 = 
fmt
;

583 
i
;

584 
va_li°
 
≠
;

586 
	`va_°¨t
(
≠
,
fmt
);

587 
f
 = 
fmt
;

588 
i
 = 
öôÀn
;

589 *
f
) {

590 
√xt
, *
°r
;

591 
size_t
 
l
;

592 
num
;

593 
unum
;

596 i‡(
	`sdßvaû
(
s
)==0) {

597 
s
 = 
	`sdsMakeRoomF‹
(s,1);

600 *
f
) {

602 
√xt
 = *(
f
+1);

603 
f
++;

604 
√xt
) {

607 
°r
 = 
	`va_¨g
(
≠
,*);

608 
l
 = (
√xt
 ='s'Ë? 
	`°æí
(
°r
Ë: 
	`sd¶í
(str);

609 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

610 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

612 
	`mem˝y
(
s
+
i
,
°r
,
l
);

613 
	`sdsö˛í
(
s
,
l
);

614 
i
 +
l
;

618 i‡(
√xt
 == 'i')

619 
num
 = 
	`va_¨g
(
≠
,);

621 
num
 = 
	`va_¨g
(
≠
,);

623 
buf
[
SDS_LLSTR_SIZE
];

624 
l
 = 
	`sd¶l2°r
(
buf
,
num
);

625 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

626 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

628 
	`mem˝y
(
s
+
i
,
buf
,
l
);

629 
	`sdsö˛í
(
s
,
l
);

630 
i
 +
l
;

635 i‡(
√xt
 == 'u')

636 
unum
 = 
	`va_¨g
(
≠
,);

638 
unum
 = 
	`va_¨g
(
≠
,);

640 
buf
[
SDS_LLSTR_SIZE
];

641 
l
 = 
	`sdsuŒ2°r
(
buf
,
unum
);

642 i‡(
	`sdßvaû
(
s
Ë< 
l
) {

643 
s
 = 
	`sdsMakeRoomF‹
(s,
l
);

645 
	`mem˝y
(
s
+
i
,
buf
,
l
);

646 
	`sdsö˛í
(
s
,
l
);

647 
i
 +
l
;

651 
s
[
i
++] = 
√xt
;

652 
	`sdsö˛í
(
s
,1);

657 
s
[
i
++] = *
f
;

658 
	`sdsö˛í
(
s
,1);

661 
f
++;

663 
	`va_íd
(
≠
);

666 
s
[
i
] = '\0';

667  
s
;

668 
	}
}

684 
sds
 
	$sd°rim
(
sds
 
s
, c⁄° *
c£t
) {

685 *
°¨t
, *
íd
, *
•
, *
ï
;

686 
size_t
 
Àn
;

688 
•
 = 
°¨t
 = 
s
;

689 
ï
 = 
íd
 = 
s
+
	`sd¶í
(s)-1;

690 
•
 <
íd
 && 
	`°rchr
(
c£t
, *sp)) sp++;

691 
ï
 > 
•
 && 
	`°rchr
(
c£t
, *ep))Ép--;

692 
Àn
 = (
•
 > 
ï
) ? 0 : ((ep-sp)+1);

693 i‡(
s
 !
•
Ë
	`memmove
(s, sp, 
Àn
);

694 
s
[
Àn
] = '\0';

695 
	`sds£éí
(
s
,
Àn
);

696  
s
;

697 
	}
}

715 
	$sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
) {

716 
size_t
 
√wÀn
, 
Àn
 = 
	`sd¶í
(
s
);

718 i‡(
Àn
 == 0) ;

719 i‡(
°¨t
 < 0) {

720 
°¨t
 = 
Àn
+start;

721 i‡(
°¨t
 < 0) start = 0;

723 i‡(
íd
 < 0) {

724 
íd
 = 
Àn
+end;

725 i‡(
íd
 < 0)Énd = 0;

727 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

728 i‡(
√wÀn
 != 0) {

729 i‡(
°¨t
 >(sig√d)
Àn
) {

730 
√wÀn
 = 0;

731 } i‡(
íd
 >(sig√d)
Àn
) {

732 
íd
 = 
Àn
-1;

733 
√wÀn
 = (
°¨t
 > 
íd
) ? 0 : (end-start)+1;

736 
°¨t
 = 0;

738 i‡(
°¨t
 && 
√wÀn
Ë
	`memmove
(
s
, s+start,Çewlen);

739 
s
[
√wÀn
] = 0;

740 
	`sds£éí
(
s
,
√wÀn
);

741 
	}
}

744 
	$sd°ﬁowî
(
sds
 
s
) {

745 
Àn
 = 
	`sd¶í
(
s
), 
j
;

747 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`tﬁowî
(s[j]);

748 
	}
}

751 
	$sd°ouµî
(
sds
 
s
) {

752 
Àn
 = 
	`sd¶í
(
s
), 
j
;

754 
j
 = 0; j < 
Àn
; j++Ë
s
[j] = 
	`touµî
(s[j]);

755 
	}
}

768 
	$sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
) {

769 
size_t
 
l1
, 
l2
, 
möÀn
;

770 
cmp
;

772 
l1
 = 
	`sd¶í
(
s1
);

773 
l2
 = 
	`sd¶í
(
s2
);

774 
möÀn
 = (
l1
 < 
l2
) ?Ü1 :Ü2;

775 
cmp
 = 
	`memcmp
(
s1
,
s2
,
möÀn
);

776 i‡(
cmp
 =0Ë 
l1
-
l2
;

777  
cmp
;

778 
	}
}

796 
sds
 *
	$sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
) {

797 
ñemíts
 = 0, 
¶Ÿs
 = 5, 
°¨t
 = 0, 
j
;

798 
sds
 *
tokís
;

800 i‡(
£∂í
 < 1 || 
Àn
 < 0Ë 
NULL
;

802 
tokís
 = 
	`s_mÆloc
((
sds
)*
¶Ÿs
);

803 i‡(
tokís
 =
NULL
)  NULL;

805 i‡(
Àn
 == 0) {

806 *
cou¡
 = 0;

807  
tokís
;

809 
j
 = 0; j < (
Àn
-(
£∂í
-1)); j++) {

811 i‡(
¶Ÿs
 < 
ñemíts
+2) {

812 
sds
 *
√wtokís
;

814 
¶Ÿs
 *= 2;

815 
√wtokís
 = 
	`s_ªÆloc
(
tokís
,(
sds
)*
¶Ÿs
);

816 i‡(
√wtokís
 =
NULL
Ë
˛ónup
;

817 
tokís
 = 
√wtokís
;

820 i‡((
£∂í
 =1 && *(
s
+
j
Ë=
£p
[0]Ë|| (
	`memcmp
(s+j,sep,seplen) == 0)) {

821 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
j
-start);

822 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

823 
ñemíts
++;

824 
°¨t
 = 
j
+
£∂í
;

825 
j
 = j+
£∂í
-1;

829 
tokís
[
ñemíts
] = 
	`sd¢ewÀn
(
s
+
°¨t
,
Àn
-start);

830 i‡(
tokís
[
ñemíts
] =
NULL
Ë
˛ónup
;

831 
ñemíts
++;

832 *
cou¡
 = 
ñemíts
;

833  
tokís
;

835 
˛ónup
:

837 
i
;

838 
i
 = 0; i < 
ñemíts
; i++Ë
	`sds‰ì
(
tokís
[i]);

839 
	`s_‰ì
(
tokís
);

840 *
cou¡
 = 0;

841  
NULL
;

843 
	}
}

846 
	$sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
) {

847 i‡(!
tokís
) ;

848 
cou¡
--)

849 
	`sds‰ì
(
tokís
[
cou¡
]);

850 
	`s_‰ì
(
tokís
);

851 
	}
}

859 
sds
 
	$sdsˇåïr
(
sds
 
s
, c⁄° *
p
, 
size_t
 
Àn
) {

860 
s
 = 
	`sdsˇéí
(s,"\"",1);

861 
Àn
--) {

862 *
p
) {

865 
s
 = 
	`sdsˇçrötf
(s,"\\%c",*
p
);

867 '\n': 
s
 = 
	`sdsˇéí
(s,"\\n",2); ;

868 '\r': 
s
 = 
	`sdsˇéí
(s,"\\r",2); ;

869 '\t': 
s
 = 
	`sdsˇéí
(s,"\\t",2); ;

870 '\a': 
s
 = 
	`sdsˇéí
(s,"\\a",2); ;

871 '\b': 
s
 = 
	`sdsˇéí
(s,"\\b",2); ;

873 i‡(
	`i•röt
(*
p
))

874 
s
 = 
	`sdsˇçrötf
(s,"%c",*
p
);

876 
s
 = 
	`sdsˇçrötf
(s,"\\x%02x",()*
p
);

879 
p
++;

881  
	`sdsˇéí
(
s
,"\"",1);

882 
	}
}

886 
	$is_hex_digô
(
c
) {

887  (
c
 >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||

888 (
c
 >= 'A' && c <= 'F');

889 
	}
}

893 
	$hex_digô_to_öt
(
c
) {

894 
c
) {

913 
	}
}

934 
sds
 *
	$sds•lô¨gs
(c⁄° *
löe
, *
¨gc
) {

935 c⁄° *
p
 = 
löe
;

936 *
cuºít
 = 
NULL
;

937 **
ve˘‹
 = 
NULL
;

939 *
¨gc
 = 0;

942 *
p
 && 
	`is•a˚
(*p))Ö++;

943 i‡(*
p
) {

945 
öq
=0;

946 
ösq
=0;

947 
d⁄e
=0;

949 i‡(
cuºít
 =
NULL
Ëcuºíà
	`sd£m±y
();

950 !
d⁄e
) {

951 i‡(
öq
) {

952 i‡(*
p
 == '\\' && *(p+1) == 'x' &&

953 
	`is_hex_digô
(*(
p
+2)) &&

954 
	`is_hex_digô
(*(
p
+3)))

956 
byã
;

958 
byã
 = (
	`hex_digô_to_öt
(*(
p
+2))*16)+

959 
	`hex_digô_to_öt
(*(
p
+3));

960 
cuºít
 = 
	`sdsˇéí
(cuºít,(*)&
byã
,1);

961 
p
 += 3;

962 } i‡(*
p
 == '\\' && *(p+1)) {

963 
c
;

965 
p
++;

966 *
p
) {

967 'n': 
c
 = '\n'; ;

968 'r': 
c
 = '\r'; ;

969 't': 
c
 = '\t'; ;

970 'b': 
c
 = '\b'; ;

971 'a': 
c
 = '\a'; ;

972 : 
c
 = *
p
; ;

974 
cuºít
 = 
	`sdsˇéí
(cuºít,&
c
,1);

975 } i‡(*
p
 == '"') {

978 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

979 
d⁄e
=1;

980 } i‡(!*
p
) {

982 
îr
;

984 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

986 } i‡(
ösq
) {

987 i‡(*
p
 == '\\' && *(p+1) == '\'') {

988 
p
++;

989 
cuºít
 = 
	`sdsˇéí
(current,"'",1);

990 } i‡(*
p
 == '\'') {

993 i‡(*(
p
+1Ë&& !
	`is•a˚
(*’+1))Ë
îr
;

994 
d⁄e
=1;

995 } i‡(!*
p
) {

997 
îr
;

999 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1002 *
p
) {

1008 
d⁄e
=1;

1011 
öq
=1;

1014 
ösq
=1;

1017 
cuºít
 = 
	`sdsˇéí
(cuºít,
p
,1);

1021 i‡(*
p
)Ö++;

1024 
ve˘‹
 = 
	`s_ªÆloc
(ve˘‹,((*
¨gc
)+1)*(*));

1025 
ve˘‹
[*
¨gc
] = 
cuºít
;

1026 (*
¨gc
)++;

1027 
cuºít
 = 
NULL
;

1030 i‡(
ve˘‹
 =
NULL
Ëve˘‹ = 
	`s_mÆloc
((*));

1031  
ve˘‹
;

1035 
îr
:

1036 (*
¨gc
)--)

1037 
	`sds‰ì
(
ve˘‹
[*
¨gc
]);

1038 
	`s_‰ì
(
ve˘‹
);

1039 i‡(
cuºít
Ë
	`sds‰ì
(current);

1040 *
¨gc
 = 0;

1041  
NULL
;

1042 
	}
}

1053 
sds
 
	$sdsm≠ch¨s
(
sds
 
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
) {

1054 
size_t
 
j
, 
i
, 
l
 = 
	`sd¶í
(
s
);

1056 
j
 = 0; j < 
l
; j++) {

1057 
i
 = 0; i < 
£éí
; i++) {

1058 i‡(
s
[
j
] =
‰om
[
i
]) {

1059 
s
[
j
] = 
to
[
i
];

1064  
s
;

1065 
	}
}

1069 
sds
 
	$sdsjoö
(**
¨gv
, 
¨gc
, *
£p
) {

1070 
sds
 
joö
 = 
	`sd£m±y
();

1071 
j
;

1073 
j
 = 0; j < 
¨gc
; j++) {

1074 
joö
 = 
	`sdsˇt
(joö, 
¨gv
[
j
]);

1075 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇt
(joö,
£p
);

1077  
joö
;

1078 
	}
}

1081 
sds
 
	$sdsjoösds
(
sds
 *
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
) {

1082 
sds
 
joö
 = 
	`sd£m±y
();

1083 
j
;

1085 
j
 = 0; j < 
¨gc
; j++) {

1086 
joö
 = 
	`sdsˇtsds
(joö, 
¨gv
[
j
]);

1087 i‡(
j
 !
¨gc
-1Ë
joö
 = 
	`sdsˇéí
(joö,
£p
,
£∂í
);

1089  
joö
;

1090 
	}
}

1092 
	$sdsIsNum
(
sds
 
s
) {

1093 
size_t
 
i
;

1095 i‡(
s
 =
NULL
 || 
	`sd¶í
(s) == 0) {

1099 
i
 = 0; i < 
	`sd¶í
(
s
); i ++) {

1100 if(*(
s
+
i
) < '0' || *(s+i) > '9'){

1106 
	}
}

1113 *
	$sds_mÆloc
(
size_t
 
size
Ë{  
	`s_mÆloc
(size); 
	}
}

1114 *
	$sds_ªÆloc
(*
±r
, 
size_t
 
size
Ë{  
	`s_ªÆloc
’å,size); 
	}
}

1115 
	$sds_‰ì
(*
±r
Ë{ 
	`s_‰ì
’å); 
	}
}

1117 #i‡
deföed
(
SDS_TEST_MAIN
)

1118 
	~<°dio.h
>

1119 
	~"ã°hñp.h
"

1120 
	~"limôs.h
"

1122 
	#UNUSED
(
x
Ë()(x)

	)

1123 
	$sdsTe°
() {

1125 
sds
 
x
 = 
	`sd¢ew
("foo"), 
y
;

1127 
	`ã°_c⁄d
("Createá stringánd obtainÅheÜength",

1128 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"foo\0",4) == 0)

1130 
	`sds‰ì
(
x
);

1131 
x
 = 
	`sd¢ewÀn
("foo",2);

1132 
	`ã°_c⁄d
("Createá string with specifiedÜength",

1133 
	`sd¶í
(
x
Ë=2 && 
	`memcmp
(x,"fo\0",3) == 0)

1135 
x
 = 
	`sdsˇt
(x,"bar");

1136 
	`ã°_c⁄d
("Strings concatenation",

1137 
	`sd¶í
(
x
Ë=5 && 
	`memcmp
(x,"fobar\0",6) == 0);

1139 
x
 = 
	`sds˝y
(x,"a");

1140 
	`ã°_c⁄d
("sdscpy()ágainstán originallyÜonger string",

1141 
	`sd¶í
(
x
Ë=1 && 
	`memcmp
(x,"a\0",2) == 0)

1143 
x
 = 
	`sds˝y
(x,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk");

1144 
	`ã°_c⁄d
("sdscpy()ágainstán originally shorter string",

1145 
	`sd¶í
(
x
) == 33 &&

1146 
	`memcmp
(
x
,"xyzxxxxxxxxxxyyyyyyyyyykkkkkkkkkk\0",33) == 0)

1148 
	`sds‰ì
(
x
);

1149 
x
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%d",123);

1150 
	`ã°_c⁄d
("sdscatprintf() seems working inÅhe base case",

1151 
	`sd¶í
(
x
Ë=3 && 
	`memcmp
(x,"123\0",4) == 0)

1153 
	`sds‰ì
(
x
);

1154 
x
 = 
	`sd¢ew
("--");

1155 
x
 = 
	`sdsˇtfmt
(x, "Hñlÿ%†W‹ld %I,%I--", "Hi!", 
LLONG_MIN
,
LLONG_MAX
);

1156 
	`ã°_c⁄d
("sdscatfmt() seems working inÅhe base case",

1157 
	`sd¶í
(
x
) == 60 &&

1158 
	`memcmp
(
x
,"--Hello Hi! World -9223372036854775808,"

1160 
	`¥ötf
("[%s]\n",
x
);

1162 
	`sds‰ì
(
x
);

1163 
x
 = 
	`sd¢ew
("--");

1164 
x
 = 
	`sdsˇtfmt
(x, "%u,%U--", 
UINT_MAX
, 
ULLONG_MAX
);

1165 
	`ã°_c⁄d
("sdscatfmt() seems working with unsignedÇumbers",

1166 
	`sd¶í
(
x
) == 35 &&

1167 
	`memcmp
(
x
,"--4294967295,18446744073709551615--",35) == 0)

1169 
	`sds‰ì
(
x
);

1170 
x
 = 
	`sd¢ew
(" x ");

1171 
	`sd°rim
(
x
," x");

1172 
	`ã°_c⁄d
("sdstrim() works whenáll chars match",

1173 
	`sd¶í
(
x
) == 0)

1175 
	`sds‰ì
(
x
);

1176 
x
 = 
	`sd¢ew
(" x ");

1177 
	`sd°rim
(
x
," ");

1178 
	`ã°_c⁄d
("sdstrim() works whená single charÑemains",

1179 
	`sd¶í
(
x
) == 1 && x[0] == 'x')

1181 
	`sds‰ì
(
x
);

1182 
x
 = 
	`sd¢ew
("xxciaoyyy");

1183 
	`sd°rim
(
x
,"xy");

1184 
	`ã°_c⁄d
("sdstrim() correctlyÅrims characters",

1185 
	`sd¶í
(
x
Ë=4 && 
	`memcmp
(x,"ciao\0",5) == 0)

1187 
y
 = 
	`sdsdup
(
x
);

1188 
	`sd§™ge
(
y
,1,1);

1189 
	`ã°_c⁄d
("sdsrange(...,1,1)",

1190 
	`sd¶í
(
y
Ë=1 && 
	`memcmp
(y,"i\0",2) == 0)

1192 
	`sds‰ì
(
y
);

1193 
y
 = 
	`sdsdup
(
x
);

1194 
	`sd§™ge
(
y
,1,-1);

1195 
	`ã°_c⁄d
("sdsrange(...,1,-1)",

1196 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1198 
	`sds‰ì
(
y
);

1199 
y
 = 
	`sdsdup
(
x
);

1200 
	`sd§™ge
(
y
,-2,-1);

1201 
	`ã°_c⁄d
("sdsrange(...,-2,-1)",

1202 
	`sd¶í
(
y
Ë=2 && 
	`memcmp
(y,"ao\0",3) == 0)

1204 
	`sds‰ì
(
y
);

1205 
y
 = 
	`sdsdup
(
x
);

1206 
	`sd§™ge
(
y
,2,1);

1207 
	`ã°_c⁄d
("sdsrange(...,2,1)",

1208 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1210 
	`sds‰ì
(
y
);

1211 
y
 = 
	`sdsdup
(
x
);

1212 
	`sd§™ge
(
y
,1,100);

1213 
	`ã°_c⁄d
("sdsrange(...,1,100)",

1214 
	`sd¶í
(
y
Ë=3 && 
	`memcmp
(y,"iao\0",4) == 0)

1216 
	`sds‰ì
(
y
);

1217 
y
 = 
	`sdsdup
(
x
);

1218 
	`sd§™ge
(
y
,100,100);

1219 
	`ã°_c⁄d
("sdsrange(...,100,100)",

1220 
	`sd¶í
(
y
Ë=0 && 
	`memcmp
(y,"\0",1) == 0)

1222 
	`sds‰ì
(
y
);

1223 
	`sds‰ì
(
x
);

1224 
x
 = 
	`sd¢ew
("foo");

1225 
y
 = 
	`sd¢ew
("foa");

1226 
	`ã°_c⁄d
("sdscmp(foo,fﬂ)", 
	`sdscmp
(
x
,
y
) > 0)

1228 
	`sds‰ì
(
y
);

1229 
	`sds‰ì
(
x
);

1230 
x
 = 
	`sd¢ew
("bar");

1231 
y
 = 
	`sd¢ew
("bar");

1232 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) == 0)

1234 
	`sds‰ì
(
y
);

1235 
	`sds‰ì
(
x
);

1236 
x
 = 
	`sd¢ew
("aar");

1237 
y
 = 
	`sd¢ew
("bar");

1238 
	`ã°_c⁄d
("sdscmp(b¨,b¨)", 
	`sdscmp
(
x
,
y
) < 0)

1240 
	`sds‰ì
(
y
);

1241 
	`sds‰ì
(
x
);

1242 
x
 = 
	`sd¢ewÀn
("\a\n\0foo\r",7);

1243 
y
 = 
	`sdsˇåïr
(
	`sd£m±y
(),
x
,
	`sd¶í
(x));

1244 
	`ã°_c⁄d
("sdscatrepr(...data...)",

1245 
	`memcmp
(
y
,"\"\\a\\n\\x00foo\\r\"",15) == 0)

1248 
ﬁd‰ì
;

1249 *
p
;

1250 
°ï
 = 10, 
j
, 
i
;

1252 
	`sds‰ì
(
x
);

1253 
	`sds‰ì
(
y
);

1254 
x
 = 
	`sd¢ew
("0");

1255 
	`ã°_c⁄d
("sd¢ew(Ë‰ì/À¿buf„rs", 
	`sd¶í
(
x
Ë=1 && 
	`sdßvaû
(x) == 0);

1259 
i
 = 0; i < 10; i++) {

1260 
ﬁdÀn
 = 
	`sd¶í
(
x
);

1261 
x
 = 
	`sdsMakeRoomF‹
(x,
°ï
);

1262 
ty≥
 = 
x
[-1]&
SDS_TYPE_MASK
;

1264 
	`ã°_c⁄d
("sdsMakeRoomF‹(ËÀn", 
	`sd¶í
(
x
Ë=
ﬁdÀn
);

1265 i‡(
ty≥
 !
SDS_TYPE_5
) {

1266 
	`ã°_c⁄d
("sdsMakeRoomF‹(Ë‰ì", 
	`sdßvaû
(
x
Ë>
°ï
);

1267 
ﬁd‰ì
 = 
	`sdßvaû
(
x
);

1269 
p
 = 
x
+
ﬁdÀn
;

1270 
j
 = 0; j < 
°ï
; j++) {

1271 
p
[
j
] = 'A'+j;

1273 
	`sdsIn¸Lí
(
x
,
°ï
);

1275 
	`ã°_c⁄d
("sdsMakeRoomFor() content",

1276 
	`memcmp
("0ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ",
x
,101) == 0);

1277 
	`ã°_c⁄d
("sdsMakeRoomF‹(ËföÆÜígth",
	`sd¶í
(
x
)==101);

1279 
	`sds‰ì
(
x
);

1282 
	`ã°_ªp‹t
()

1284 
	}
}

1287 #ifde‡
SDS_TEST_MAIN


1288 
	$maö
() {

1289  
	`sdsTe°
();

1290 
	}
}

	@dep/sds/sds.h

33 #i‚de‡
__SDS_H


34 
	#__SDS_H


	)

36 
	#SDS_MAX_PREALLOC
 (1024*1024)

	)

38 
	~<sys/ty≥s.h
>

39 
	~<°d¨g.h
>

40 
	~<°döt.h
>

42 *
	tsds
;

46 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr5
 {

47 
	gÊags
;

48 
	gbuf
[];

50 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr8
 {

51 
uöt8_t
 
	gÀn
;

52 
uöt8_t
 
	gÆloc
;

53 
	gÊags
;

54 
	gbuf
[];

56 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr16
 {

57 
uöt16_t
 
	gÀn
;

58 
uöt16_t
 
	gÆloc
;

59 
	gÊags
;

60 
	gbuf
[];

62 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr32
 {

63 
uöt32_t
 
	gÀn
;

64 
uöt32_t
 
	gÆloc
;

65 
	gÊags
;

66 
	gbuf
[];

68 
__©åibuã__
 ((
__∑cked__
)Ë
	gsdshdr64
 {

69 
uöt64_t
 
	gÀn
;

70 
uöt64_t
 
	gÆloc
;

71 
	gÊags
;

72 
	gbuf
[];

75 
	#SDS_TYPE_5
 0

	)

76 
	#SDS_TYPE_8
 1

	)

77 
	#SDS_TYPE_16
 2

	)

78 
	#SDS_TYPE_32
 3

	)

79 
	#SDS_TYPE_64
 4

	)

80 
	#SDS_TYPE_MASK
 7

	)

81 
	#SDS_TYPE_BITS
 3

	)

82 
	#SDS_HDR_VAR
(
T
,
s
Ë
sdshdr
##T *
sh
 = (*)((s)-((sdshdr##T)));

	)

83 
	#SDS_HDR
(
T
,
s
Ë((
sdshdr
##T *)((s)-((sdshdr##T))))

	)

84 
	#SDS_TYPE_5_LEN
(
f
Ë((f)>>
SDS_TYPE_BITS
)

	)

86 
ölöe
 
size_t
 
	$sd¶í
(c⁄° 
sds
 
s
) {

87 
Êags
 = 
s
[-1];

88 
Êags
&
SDS_TYPE_MASK
) {

89 
SDS_TYPE_5
:

90  
	`SDS_TYPE_5_LEN
(
Êags
);

91 
SDS_TYPE_8
:

92  
	`SDS_HDR
(8,
s
)->
Àn
;

93 
SDS_TYPE_16
:

94  
	`SDS_HDR
(16,
s
)->
Àn
;

95 
SDS_TYPE_32
:

96  
	`SDS_HDR
(32,
s
)->
Àn
;

97 
SDS_TYPE_64
:

98  
	`SDS_HDR
(64,
s
)->
Àn
;

101 
	}
}

103 
ölöe
 
size_t
 
	$sdßvaû
(c⁄° 
sds
 
s
) {

104 
Êags
 = 
s
[-1];

105 
Êags
&
SDS_TYPE_MASK
) {

106 
SDS_TYPE_5
: {

109 
SDS_TYPE_8
: {

110 
	`SDS_HDR_VAR
(8,
s
);

111  
sh
->
Æloc
 - sh->
Àn
;

113 
SDS_TYPE_16
: {

114 
	`SDS_HDR_VAR
(16,
s
);

115  
sh
->
Æloc
 - sh->
Àn
;

117 
SDS_TYPE_32
: {

118 
	`SDS_HDR_VAR
(32,
s
);

119  
sh
->
Æloc
 - sh->
Àn
;

121 
SDS_TYPE_64
: {

122 
	`SDS_HDR_VAR
(64,
s
);

123  
sh
->
Æloc
 - sh->
Àn
;

127 
	}
}

129 
ölöe
 
	$sds£éí
(
sds
 
s
, 
size_t
 
√wÀn
) {

130 
Êags
 = 
s
[-1];

131 
Êags
&
SDS_TYPE_MASK
) {

132 
SDS_TYPE_5
:

134 *
Â
 = ((*)
s
)-1;

135 *
Â
 = 
SDS_TYPE_5
 | (
√wÀn
 << 
SDS_TYPE_BITS
);

138 
SDS_TYPE_8
:

139 
	`SDS_HDR
(8,
s
)->
Àn
 = 
√wÀn
;

141 
SDS_TYPE_16
:

142 
	`SDS_HDR
(16,
s
)->
Àn
 = 
√wÀn
;

144 
SDS_TYPE_32
:

145 
	`SDS_HDR
(32,
s
)->
Àn
 = 
√wÀn
;

147 
SDS_TYPE_64
:

148 
	`SDS_HDR
(64,
s
)->
Àn
 = 
√wÀn
;

151 
	}
}

153 
ölöe
 
	$sdsö˛í
(
sds
 
s
, 
size_t
 
öc
) {

154 
Êags
 = 
s
[-1];

155 
Êags
&
SDS_TYPE_MASK
) {

156 
SDS_TYPE_5
:

158 *
Â
 = ((*)
s
)-1;

159 
√wÀn
 = 
	`SDS_TYPE_5_LEN
(
Êags
)+
öc
;

160 *
Â
 = 
SDS_TYPE_5
 | (
√wÀn
 << 
SDS_TYPE_BITS
);

163 
SDS_TYPE_8
:

164 
	`SDS_HDR
(8,
s
)->
Àn
 +
öc
;

166 
SDS_TYPE_16
:

167 
	`SDS_HDR
(16,
s
)->
Àn
 +
öc
;

169 
SDS_TYPE_32
:

170 
	`SDS_HDR
(32,
s
)->
Àn
 +
öc
;

172 
SDS_TYPE_64
:

173 
	`SDS_HDR
(64,
s
)->
Àn
 +
öc
;

176 
	}
}

179 
ölöe
 
size_t
 
	$sdßŒoc
(c⁄° 
sds
 
s
) {

180 
Êags
 = 
s
[-1];

181 
Êags
&
SDS_TYPE_MASK
) {

182 
SDS_TYPE_5
:

183  
	`SDS_TYPE_5_LEN
(
Êags
);

184 
SDS_TYPE_8
:

185  
	`SDS_HDR
(8,
s
)->
Æloc
;

186 
SDS_TYPE_16
:

187  
	`SDS_HDR
(16,
s
)->
Æloc
;

188 
SDS_TYPE_32
:

189  
	`SDS_HDR
(32,
s
)->
Æloc
;

190 
SDS_TYPE_64
:

191  
	`SDS_HDR
(64,
s
)->
Æloc
;

194 
	}
}

196 
ölöe
 
	$sds£èŒoc
(
sds
 
s
, 
size_t
 
√wÀn
) {

197 
Êags
 = 
s
[-1];

198 
Êags
&
SDS_TYPE_MASK
) {

199 
SDS_TYPE_5
:

202 
SDS_TYPE_8
:

203 
	`SDS_HDR
(8,
s
)->
Æloc
 = 
√wÀn
;

205 
SDS_TYPE_16
:

206 
	`SDS_HDR
(16,
s
)->
Æloc
 = 
√wÀn
;

208 
SDS_TYPE_32
:

209 
	`SDS_HDR
(32,
s
)->
Æloc
 = 
√wÀn
;

211 
SDS_TYPE_64
:

212 
	`SDS_HDR
(64,
s
)->
Æloc
 = 
√wÀn
;

215 
	}
}

217 
sds
 
sd¢ewÀn
(c⁄° *
öô
, 
size_t
 
öôÀn
);

218 
sds
 
sd¢ew
(c⁄° *
öô
);

219 
sds
 
sd£m±y
();

220 
sds
 
sdsdup
(c⁄° sd†
s
);

221 
sds‰ì
(
sds
 
s
);

222 
sds
 
sdsgrowzîo
(sd†
s
, 
size_t
 
Àn
);

223 
sds
 
sdsˇéí
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

224 
sds
 
sdsˇt
(sd†
s
, c⁄° *
t
);

225 
sds
 
sdsˇtsds
(sd†
s
, c⁄° sd†
t
);

226 
sds
 
sds˝yÀn
(sd†
s
, c⁄° *
t
, 
size_t
 
Àn
);

227 
sds
 
sds˝y
(sd†
s
, c⁄° *
t
);

229 
sds
 
sdsˇtv¥ötf
(sd†
s
, c⁄° *
fmt
, 
va_li°
 
≠
);

230 #ifde‡
__GNUC__


231 
sds
 
	$sdsˇçrötf
(
sds
 
s
, c⁄° *
fmt
, ...)

232 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

234 
sds
 
	`sdsˇçrötf
(sd†
s
, c⁄° *
fmt
, ...);

237 
sds
 
	`sdsˇtfmt
(sd†
s
, c⁄° *
fmt
, ...);

238 
sds
 
	`sd°rim
(sd†
s
, c⁄° *
c£t
);

239 
	`sd§™ge
(
sds
 
s
, 
°¨t
, 
íd
);

240 
	`sdsupd©ñí
(
sds
 
s
);

241 
	`sds˛ór
(
sds
 
s
);

242 
	`sdscmp
(c⁄° 
sds
 
s1
, c⁄° sd†
s2
);

243 
sds
 *
	`sds•lôÀn
(c⁄° *
s
, 
Àn
, c⁄° *
£p
, 
£∂í
, *
cou¡
);

244 
	`sds‰ì•lôªs
(
sds
 *
tokís
, 
cou¡
);

245 
	`sd°ﬁowî
(
sds
 
s
);

246 
	`sd°ouµî
(
sds
 
s
);

247 
sds
 
	`sds‰oml⁄gl⁄g
(
vÆue
);

248 
sds
 
	`sdsˇåïr
(sd†
s
, c⁄° *
p
, 
size_t
 
Àn
);

249 
sds
 *
	`sds•lô¨gs
(c⁄° *
löe
, *
¨gc
);

250 
sds
 
	`sdsm≠ch¨s
(sd†
s
, c⁄° *
‰om
, c⁄° *
to
, 
size_t
 
£éí
);

251 
sds
 
	`sdsjoö
(**
¨gv
, 
¨gc
, *
£p
);

252 
sds
 
	`sdsjoösds
(sd†*
¨gv
, 
¨gc
, c⁄° *
£p
, 
size_t
 
£∂í
);

254 
	`sdsIsNum
(
sds
 
s
);

257 
sds
 
	`sdsMakeRoomF‹
(sd†
s
, 
size_t
 
addÀn
);

258 
	`sdsIn¸Lí
(
sds
 
s
, 
ö¸
);

259 
sds
 
	`sdsRemoveFªeS∑˚
(sd†
s
);

260 
size_t
 
	`sdsAŒocSize
(
sds
 
s
);

261 *
	`sdsAŒocPå
(
sds
 
s
);

267 *
	`sds_mÆloc
(
size_t
 
size
);

268 *
	`sds_ªÆloc
(*
±r
, 
size_t
 
size
);

269 
	`sds_‰ì
(*
±r
);

271 #ifde‡
REDIS_TEST


272 
	`sdsTe°
(
¨gc
, *
¨gv
[]);

	@dep/sds/sdsalloc.h

39 
	~<dmÆloc.h
>

41 
	#s_mÆloc
 
dÆloc


	)

42 
	#s_ªÆloc
 
dªÆloc


	)

43 
	#s_‰ì
 
d‰ì


	)

	@dep/util/dlog.c

1 
	~<°dlib.h
>

2 
	~<°d¨g.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<time.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<î∫o.h
>

10 
	~<dutû.h
>

11 
	~<dlog.h
>

13 
loggî
 
	gloggî
;

16 
	$log_öô
(
Àvñ
, *
«me
)

18 
loggî
 *
l
 = &logger;

20 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

21 
l
->
«me
 =Çame;

22 i‡(
«me
 =
NULL
 || !
	`°æí
(name)) {

23 
l
->
fd
 = 
STDERR_FILENO
;

25 
l
->
fd
 = 
	`›í
(
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

26 i‡(
l
->
fd
 < 0) {

27 
	`log_°dîr
("›íögÜog fûê'%s' faûed: %s", 
«me
,

28 
	`°ªº‹
(
î∫o
));

34 
	}
}

37 
	$log_deöô
()

39 
loggî
 *
l
 = &logger;

41 i‡(
l
->
fd
 < 0 ||Ü->fd =
STDERR_FILENO
) {

45 
	`˛o£
(
l
->
fd
);

46 
	}
}

49 
	$log_ª›í
()

51 
loggî
 *
l
 = &logger;

53 i‡(
l
->
fd
 !
STDERR_FILENO
) {

54 
	`˛o£
(
l
->
fd
);

55 
l
->
fd
 = 
	`›í
÷->
«me
, 
O_WRONLY
 | 
O_APPEND
 | 
O_CREAT
, 0644);

56 i‡(
l
->
fd
 < 0) {

57 
	`log_°dîr_ß„
("ª›íögÜog fûê'%s' faûed, ign‹ed: %s", 
l
->
«me
,

58 
	`°ªº‹
(
î∫o
));

61 
	}
}

64 
	$log_Àvñ_up
()

66 
loggî
 *
l
 = &logger;

68 i‡(
l
->
Àvñ
 < 
LOG_PVERB
) {

69 
l
->
Àvñ
++;

70 
	`log_ß„
("u∞logÜevñÅÿ%d", 
l
->
Àvñ
);

72 
	}
}

75 
	$log_Àvñ_down
()

77 
loggî
 *
l
 = &logger;

79 i‡(
l
->
Àvñ
 > 
LOG_EMERG
) {

80 
l
->
Àvñ
--;

81 
	`log_ß„
("dow¿logÜevñÅÿ%d", 
l
->
Àvñ
);

83 
	}
}

86 
	$log_Àvñ_£t
(
Àvñ
)

88 
loggî
 *
l
 = &logger;

90 
l
->
Àvñ
 = 
	`MAX
(
LOG_EMERG
, 
	`MIN
÷evñ, 
LOG_PVERB
));

91 
	`loga
("£àlogÜevñÅÿ%d", 
l
->
Àvñ
);

92 
	}
}

95 
	$log_°ackåa˚
()

97 
loggî
 *
l
 = &logger;

99 i‡(
l
->
fd
 < 0) {

102 
	`d°ackåa˚_fd
(
l
->
fd
);

103 
	}
}

106 
	$log_loggabÀ
(
Àvñ
)

108 
loggî
 *
l
 = &logger;

110 i‡(
Àvñ
 > 
l
->level) {

115 
	}
}

118 
	$_log
(c⁄° *
fûe
, 
löe
, 
Àvñ
, 
∑nic
, c⁄° *
fmt
, ...)

120 
loggî
 *
l
 = &logger;

121 
Àn
, 
size
, 
î∫o_ßve
;

122 
buf
[
LOG_MAX_LEN
];

123 
va_li°
 
¨gs
;

124 
ssize_t
 
n
;

125 
timevÆ
 
tv
;

127 i‡(
l
->
fd
 < 0) {

131 
î∫o_ßve
 = 
î∫o
;

132 
Àn
 = 0;

133 
size
 = 
LOG_MAX_LEN
;

135 
	`gëtimeofday
(&
tv
, 
NULL
);

136 
buf
[
Àn
++] = '[';

137 
Àn
 +
	`d°r·ime
(
buf
 +Üí, 
size
 -Üí, "%Y-%m-%d %H:%M:%S.", 
	`loˇ…ime
(&
tv
.
tv_£c
));

138 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%03ld", 
tv
.
tv_u£c
/1000);

139 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "] %s:%d ", 
fûe
, 
löe
);

141 
	`va_°¨t
(
¨gs
, 
fmt
);

142 
Àn
 +
	`dvs˙¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

143 
	`va_íd
(
¨gs
);

145 
buf
[
Àn
++] = '\n';

147 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

148 i‡(
n
 < 0) {

149 
l
->
√º‹
++;

152 
î∫o
 = 
î∫o_ßve
;

154 i‡(
∑nic
) {

155 
	`ab‹t
();

157 
	}
}

160 
	$_log_°dîr
(c⁄° *
fmt
, ...)

162 
loggî
 *
l
 = &logger;

163 
Àn
, 
size
, 
î∫o_ßve
;

164 
buf
[4 * 
LOG_MAX_LEN
];

165 
va_li°
 
¨gs
;

166 
ssize_t
 
n
;

168 
î∫o_ßve
 = 
î∫o
;

169 
Àn
 = 0;

170 
size
 = 4 * 
LOG_MAX_LEN
;

172 
	`va_°¨t
(
¨gs
, 
fmt
);

173 
Àn
 +
	`dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

174 
	`va_íd
(
¨gs
);

176 
buf
[
Àn
++] = '\n';

178 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

179 i‡(
n
 < 0) {

180 
l
->
√º‹
++;

183 
î∫o
 = 
î∫o_ßve
;

184 
	}
}

187 
	$_log_°dout
(c⁄° *
fmt
, ...)

189 
loggî
 *
l
 = &logger;

190 
Àn
, 
size
, 
î∫o_ßve
;

191 
buf
[4 * 
LOG_MAX_LEN
];

192 
va_li°
 
¨gs
;

193 
ssize_t
 
n
;

195 
î∫o_ßve
 = 
î∫o
;

196 
Àn
 = 0;

197 
size
 = 4 * 
LOG_MAX_LEN
;

199 
	`va_°¨t
(
¨gs
, 
fmt
);

200 
Àn
 +
	`dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

201 
	`va_íd
(
¨gs
);

203 
buf
[
Àn
++] = '\n';

205 
n
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
Àn
);

206 i‡(
n
 < 0) {

207 
l
->
√º‹
++;

210 
î∫o
 = 
î∫o_ßve
;

211 
	}
}

218 
	$_log_hexdump
(c⁄° *
fûe
, 
löe
, *
d©a
, 
d©Æí
,

219 c⁄° *
fmt
, ...)

221 
loggî
 *
l
 = &logger;

222 
buf
[8 * 
LOG_MAX_LEN
];

223 
i
, 
off
, 
Àn
, 
size
, 
î∫o_ßve
;

224 
ssize_t
 
n
;

226 i‡(
l
->
fd
 < 0) {

231 
î∫o_ßve
 = 
î∫o
;

232 
off
 = 0;

233 
Àn
 = 0;

234 
size
 = 8 * 
LOG_MAX_LEN
;

236 
d©Æí
 !0 && (
Àn
 < 
size
 - 1)) {

237 *
ßve
, *
°r
;

238 
c
;

239 
ßvñí
;

241 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%08x ", 
off
);

243 
ßve
 = 
d©a
;

244 
ßvñí
 = 
d©Æí
;

246 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

247 
c
 = ()(*
d©a
);

248 
°r
 = (
i
 == 7) ? " " : " ";

249 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%02x%s", 
c
, 
°r
);

251  ; 
i
 < 16; i++) {

252 
°r
 = (
i
 == 7) ? " " : " ";

253 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, " %s", 
°r
);

256 
d©a
 = 
ßve
;

257 
d©Æí
 = 
ßvñí
;

259 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üen, " |");

261 
i
 = 0; 
d©Æí
 !0 && i < 16; 
d©a
++, datalen--, i++) {

262 
c
 = ()(
	`i•röt
(*
d©a
) ? *data : '.');

263 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%c", 
c
);

265 
Àn
 +
	`ds˙¥ötf
(
buf
 +Üí, 
size
 -Üen, "|\n");

267 
off
 += 16;

270 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

271 i‡(
n
 < 0) {

272 
l
->
√º‹
++;

275 i‡(
Àn
 >
size
 - 1) {

276 
n
 = 
	`wrôe
(
l
->
fd
, "\n", 1);

277 i‡(
n
 < 0) {

278 
l
->
√º‹
++;

282 
î∫o
 = 
î∫o_ßve
;

283 
	}
}

286 
	$_log_ß„
(c⁄° *
fmt
, ...)

288 
loggî
 *
l
 = &logger;

289 
Àn
, 
size
, 
î∫o_ßve
;

290 
buf
[
LOG_MAX_LEN
];

291 
va_li°
 
¨gs
;

292 
ssize_t
 
n
;

294 i‡(
l
->
fd
 < 0) {

298 
î∫o_ßve
 = 
î∫o
;

299 
Àn
 = 0;

300 
size
 = 
LOG_MAX_LEN
;

302 
Àn
 +
	`dß„_¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "[.......................] ");

304 
	`va_°¨t
(
¨gs
, 
fmt
);

305 
Àn
 +
	`dß„_v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

306 
	`va_íd
(
¨gs
);

308 
buf
[
Àn
++] = '\n';

310 
n
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

311 i‡(
n
 < 0) {

312 
l
->
√º‹
++;

315 
î∫o
 = 
î∫o_ßve
;

316 
	}
}

319 
	$_log_°dîr_ß„
(c⁄° *
fmt
, ...)

321 
loggî
 *
l
 = &logger;

322 
Àn
, 
size
, 
î∫o_ßve
;

323 
buf
[
LOG_MAX_LEN
];

324 
va_li°
 
¨gs
;

325 
ssize_t
 
n
;

327 
î∫o_ßve
 = 
î∫o
;

328 
Àn
 = 0;

329 
size
 = 
LOG_MAX_LEN
;

331 
Àn
 +
	`dß„_¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "[.......................] ");

333 
	`va_°¨t
(
¨gs
, 
fmt
);

334 
Àn
 +
	`dß„_v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

335 
	`va_íd
(
¨gs
);

337 
buf
[
Àn
++] = '\n';

339 
n
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

340 i‡(
n
 < 0) {

341 
l
->
√º‹
++;

344 
î∫o
 = 
î∫o_ßve
;

345 
	}
}

347 
	$log_wrôe_Àn
(*
°r
, 
size_t
 
Àn
)

349 
loggî
 *
l
 = &logger;

350 
î∫o_ßve
;

351 
ssize_t
 
n
;

353 i‡(
l
->
fd
 < 0) {

357 
î∫o_ßve
 = 
î∫o
;

358 
n
 = 
	`wrôe
(
l
->
fd
, 
°r
, 
Àn
);

359 i‡(
n
 < 0) {

360 
l
->
√º‹
++;

363 
î∫o
 = 
î∫o_ßve
;

364 
	}
}

	@dep/util/dlog.h

1 #i‚de‡
_DLOG_H_


2 
	#_DLOG_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	sloggî
 {

9 *
	m«me
;

10 
	mÀvñ
;

11 
	mfd
;

12 
	m√º‹
;

15 
	#LOG_EMERG
 0

	)

16 
	#LOG_ALERT
 1

	)

17 
	#LOG_CRIT
 2

	)

18 
	#LOG_ERR
 3

	)

19 
	#LOG_WARN
 4

	)

20 
	#LOG_NOTICE
 5

	)

21 
	#LOG_INFO
 6

	)

22 
	#LOG_DEBUG
 7

	)

23 
	#LOG_VERB
 8

	)

24 
	#LOG_VVERB
 9

	)

25 
	#LOG_VVVERB
 10

	)

26 
	#LOG_PVERB
 11

	)

28 
	#LOG_MAX_LEN
 256

	)

41 #ifde‡
HAVE_DEBUG_LOG


43 
	#log_debug
(
_Àvñ
, ...) do { \

44 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

45 
	`_log
(
__FILE__
, 
__LINE__
, 
_Àvñ
, 0, 
__VA_ARGS__
); \

47 } 0)

	)

51 
	#log_debug
(
_Àvñ
, ...)

	)

55 
	#log_hexdump
(
_Àvñ
, 
_d©a
, 
_d©Æí
, ...) do { \

56 i‡(
	`log_loggabÀ
(
_Àvñ
) != 0) { \

57 
	`_log
(
__FILE__
, 
__LINE__
, 
_Àvñ
, 0, 
__VA_ARGS__
); \

58 
	`_log_hexdump
(
__FILE__
, 
__LINE__
, (*)(
_d©a
), ()(
_d©Æí
), \

59 
__VA_ARGS__
); \

61 } 0)

	)

63 
	#log_°dîr
(...) do { \

64 
	`_log_°dîr
(
__VA_ARGS__
); \

65 } 0)

	)

67 
	#log_°dout
(...) do { \

68 
	`_log_°dout
(
__VA_ARGS__
); \

69 } 0)

	)

71 
	#log_ß„
(...) do { \

72 
	`_log_ß„
(
__VA_ARGS__
); \

73 } 0)

	)

75 
	#log_°dîr_ß„
(...) do { \

76 
	`_log_°dîr_ß„
(
__VA_ARGS__
); \

77 } 0)

	)

79 
	#loga
(...) do { \

80 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 0, 
__VA_ARGS__
); \

81 } 0)

	)

83 
	#loga_hexdump
(
_d©a
, 
_d©Æí
, ...) do { \

84 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 0, 
__VA_ARGS__
); \

85 
	`_log_hexdump
(
__FILE__
, 
__LINE__
, (*)(
_d©a
), ()(
_d©Æí
), \

86 
__VA_ARGS__
); \

88 

	)

89 
	#log_îr‹
(...) do { \

90 i‡(
	`log_loggabÀ
(
LOG_ERR
) != 0) { \

91 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_ERR
, 0, 
__VA_ARGS__
); \

93 } 0)

	)

95 
	#log_w¨n
(...) do { \

96 i‡(
	`log_loggabÀ
(
LOG_WARN
) != 0) { \

97 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_WARN
, 0, 
__VA_ARGS__
); \

99 } 0)

	)

101 
	#log_nŸi˚
(...) do { \

102 i‡(
	`log_loggabÀ
(
LOG_NOTICE
) != 0) { \

103 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_NOTICE
, 0, 
__VA_ARGS__
); \

105 } 0)

	)

107 
	#log_∑nic
(...) do { \

108 i‡(
	`log_loggabÀ
(
LOG_EMERG
) != 0) { \

109 
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, 
__VA_ARGS__
); \

111 } 0)

	)

113 
log_öô
(
Àvñ
, *
fûíame
);

114 
log_deöô
();

115 
log_Àvñ_up
();

116 
log_Àvñ_down
();

117 
log_Àvñ_£t
(
Àvñ
);

118 
log_°ackåa˚
();

119 
log_ª›í
();

120 
log_loggabÀ
(
Àvñ
);

122 
_log
(c⁄° *
fûe
, 
löe
, 
Àvñ
, 
∑nic
, c⁄° *
fmt
, ...);

123 
_log_°dîr
(c⁄° *
fmt
, ...);

124 
_log_°dout
(c⁄° *
fmt
, ...);

125 
_log_ß„
(c⁄° *
fmt
, ...);

126 
_log_°dîr_ß„
(c⁄° *
fmt
, ...);

127 
_log_hexdump
(c⁄° *
fûe
, 
löe
, *
d©a
, 
d©Æí
, c⁄° *
fmt
, ...);

129 
log_wrôe_Àn
(* 
°r
, 
size_t
 
Àn
);

	@dep/util/dspecialconfig.h

1 #i‚de‡
_DSPECIALCONFIG_H_


2 
	#_DSPECIALCONFIG_H_


	)

4 #ifde‡
__APPLE__


5 
	~<AvaûabûôyMa¸os.h
>

8 #ifde‡
__löux__


9 
	~<löux/vîsi⁄.h
>

10 
	~<„©uªs.h
>

13 #i‡(
__i386
 || 
__amd64
 || 
__powîpc__
Ë&& 
__GNUC__


14 
	#GNUC_VERSION
 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

15 #i‡
deföed
(
__˛™g__
)

16 
	#HAVE_ATOMIC


	)

18 #i‡(
deföed
(
__GLIBC__
Ë&& deföed(
__GLIBC_PREREQ
))

19 #i‡(
GNUC_VERSION
 >40100 && 
__GLIBC_PREREQ
(2, 6))

20 
	#HAVE_ATOMIC


	)

26 #i‡
deföed
(
__sun
)

27 #i‡
deföed
(
__GNUC__
)

28 
	~<m©h.h
>

29 #unde‡
i¢™


30 
	#i¢™
(
x
) \

31 
	`__exãnsi⁄__
({ 
	`__ty≥of
 (
x
Ë
__x_a
 = (x); \

32 
	`__buûtö_ex≥˘
(
__x_a
 !__x_a, 0); })

	)

34 #unde‡
isföôe


35 
	#isföôe
(
x
) \

36 
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
x
Ë
__x_f
 = (x); \

37 
	`__buûtö_ex≥˘
(!
	`i¢™
(
__x_f
 - __x_f), 1); })

	)

39 #unde‡
isöf


40 
	#isöf
(
x
) \

41 
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
x
Ë
__x_i
 = (x); \

42 
	`__buûtö_ex≥˘
(!
	`i¢™
(
__x_i
Ë&& !
	`isföôe
(__x_i), 0); })

	)

44 
	#u_öt
 
uöt


	)

45 
	#u_öt32_t
 
uöt32_t


	)

51 #ifde‡
__löux__


52 
	#HAVE_PROC_STAT
 1

	)

53 
	#HAVE_PROC_MAPS
 1

	)

54 
	#HAVE_PROC_SMAPS
 1

	)

55 
	#HAVE_PROC_SOMAXCONN
 1

	)

59 #i‡
deföed
(
__APPLE__
)

60 
	#HAVE_TASKINFO
 1

	)

	@dep/util/dutil.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

8 
	~<î∫o.h
>

10 
	~<sys/time.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<sys/io˘l.h
>

15 
	~<√töë/ö.h
>

16 
	~<√töë/t˝.h
>

18 #ifde‡
HAVE_CONFIG_H


19 
	~<c⁄fig.h
>

22 #ifde‡
HAVE_BACKTRACE


23 
	~<execöfo.h
>

26 
	~<dlog.h
>

27 
	~<dutû.h
>

30 #i‡
deföed
(
__ATOMIC_RELAXED
)

32 #ñi‡
deföed
(
HAVE_ATOMIC
)

34 
±hªad_muãx_t
 
	g©omic_lockî
 = 
PTHREAD_MUTEX_INITIALIZER
;

38 
	$das£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

40 
	`log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

42 i‡(
∑nic
) {

43 
	`d°ackåa˚
(1);

44 
	`ab‹t
();

46 
	}
}

49 
	$d°ackåa˚
(
skù_cou¡
)

51 #ifde‡
HAVE_BACKTRACE


52 *
°ack
[64];

53 **
symbﬁs
;

54 
size
, 
i
, 
j
;

56 
size
 = 
	`backåa˚
(
°ack
, 64);

57 
symbﬁs
 = 
	`backåa˚_symbﬁs
(
°ack
, 
size
);

58 i‡(
symbﬁs
 =
NULL
) {

62 
skù_cou¡
++;

64 
i
 = 
skù_cou¡
, 
j
 = 0; i < 
size
; i++, j++) {

65 
	`loga
("[%d] %s", 
j
, 
symbﬁs
[
i
]);

68 
	`‰ì
(
symbﬁs
);

70 
	}
}

73 
	$d°ackåa˚_fd
(
fd
)

75 #ifde‡
HAVE_BACKTRACE


76 *
°ack
[64];

77 
size
;

79 
size
 = 
	`backåa˚
(
°ack
, 64);

80 
	`backåa˚_symbﬁs_fd
(
°ack
, 
size
, 
fd
);

82 
	}
}

85 
	$_dvs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

87 
n
;

89 
n
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

101 i‡(
n
 <= 0) {

105 i‡(
n
 < (Ë
size
) {

106  
n
;

109  ()(
size
 - 1);

110 
	}
}

113 
	$_ds˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

115 
va_li°
 
¨gs
;

116 
n
;

118 
	`va_°¨t
(
¨gs
, 
fmt
);

119 
n
 = 
	`_dvs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

120 
	`va_íd
(
¨gs
);

122  
n
;

123 
	}
}

126 
	$_ß„_utﬂ
(
_ba£
, 
uöt64_t
 
vÆ
, *
buf
)

128 
hex
[] = "0123456789abcdef";

129 
uöt32_t
 
ba£
 = (uöt32_tË
_ba£
;

130 *
buf
-- = 0;

132 *
buf
-- = 
hex
[
vÆ
 % 
ba£
];

133 } (
vÆ
 /
ba£
) != 0);

134  
buf
 + 1;

135 
	}
}

138 
	$_ß„_ôﬂ
(
ba£
, 
öt64_t
 
vÆ
, *
buf
)

140 
hex
[] = "0123456789abcdef";

141 *
‹ig_buf
 = 
buf
;

142 c⁄° 
öt32_t
 
is_√g
 = (
vÆ
 < 0);

143 *
buf
-- = 0;

145 i‡(
is_√g
) {

146 
vÆ
 = -val;

148 i‡(
is_√g
 && 
ba£
 == 16) {

149 
ix
;

150 
vÆ
 -= 1;

151 
ix
 = 0; ix < 16; ++ix)

152 
buf
[-
ix
] = '0';

156 *
buf
-- = 
hex
[
vÆ
 % 
ba£
];

157 } (
vÆ
 /
ba£
) != 0);

159 i‡(
is_√g
 && 
ba£
 == 10) {

160 *
buf
-- = '-';

163 i‡(
is_√g
 && 
ba£
 == 16) {

164 
ix
;

165 
buf
 = 
‹ig_buf
 - 1;

166 
ix
 = 0; ix < 16; ++ix, --
buf
) {

168 *
buf
) {

169 '0': *
buf
 = 'f'; ;

170 '1': *
buf
 = 'e'; ;

171 '2': *
buf
 = 'd'; ;

172 '3': *
buf
 = 'c'; ;

173 '4': *
buf
 = 'b'; ;

174 '5': *
buf
 = 'a'; ;

175 '6': *
buf
 = '9'; ;

176 '7': *
buf
 = '8'; ;

177 '8': *
buf
 = '7'; ;

178 '9': *
buf
 = '6'; ;

179 'a': *
buf
 = '5'; ;

180 'b': *
buf
 = '4'; ;

181 'c': *
buf
 = '3'; ;

182 'd': *
buf
 = '2'; ;

183 'e': *
buf
 = '1'; ;

184 'f': *
buf
 = '0'; ;

189  
buf
 + 1;

190 
	}
}

193 
	$_ß„_check_l⁄gl⁄g
(c⁄° *
fmt
, *
have_l⁄gl⁄g
)

195 *
have_l⁄gl⁄g
 = 0;

196 i‡(*
fmt
 == 'l') {

197 
fmt
++;

198 i‡(*
fmt
 != 'l') {

199 *
have_l⁄gl⁄g
 = (() == ());

201 
fmt
++;

202 *
have_l⁄gl⁄g
 = 1;

205  
fmt
;

206 
	}
}

209 
	$_ß„_v¢¥ötf
(*
to
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

211 *
°¨t
 = 
to
;

212 *
íd
 = 
°¨t
 + 
size
 - 1;

213 ; *
f‹m©
; ++format) {

214 
have_l⁄gl⁄g
 = 0;

215 i‡(*
f‹m©
 != '%') {

216 i‡(
to
 =
íd
) {

219 *
to
++ = *
f‹m©
;

222 ++
f‹m©
;

224 
f‹m©
 = 
	`_ß„_check_l⁄gl⁄g
(f‹m©, &
have_l⁄gl⁄g
);

226 *
f‹m©
) {

233 
öt64_t
 
ivÆ
 = 0;

234 
uöt64_t
 
uvÆ
 = 0;

235 i‡(*
f‹m©
 == 'p')

236 
have_l⁄gl⁄g
 = ((*Ë=(
uöt64_t
));

237 i‡(
have_l⁄gl⁄g
) {

238 i‡(*
f‹m©
 == 'u') {

239 
uvÆ
 = 
	`va_¨g
(
≠
, 
uöt64_t
);

241 
ivÆ
 = 
	`va_¨g
(
≠
, 
öt64_t
);

244 i‡(*
f‹m©
 == 'u') {

245 
uvÆ
 = 
	`va_¨g
(
≠
, 
uöt32_t
);

247 
ivÆ
 = 
	`va_¨g
(
≠
, 
öt32_t
);

252 
buff
[22];

253 c⁄° 
ba£
 = (*
f‹m©
 == 'x' || *format == 'p') ? 16 : 10;

256 *
vÆ_as_°r
 = (*
f‹m©
 == 'u') ?

257 
	`_ß„_utﬂ
(
ba£
, 
uvÆ
, &
buff
[(buff) - 1]) :

258 
	`_ß„_ôﬂ
(
ba£
, 
ivÆ
, &
buff
[(buff) - 1]);

262 i‡(*
f‹m©
 ='x' && !
have_l⁄gl⁄g
 && 
ivÆ
 < 0) {

263 
vÆ_as_°r
 += 8;

266 *
vÆ_as_°r
 && 
to
 < 
íd
) {

267 *
to
++ = *
vÆ_as_°r
++;

274 c⁄° *
vÆ
 = 
	`va_¨g
(
≠
, *);

275 i‡(!
vÆ
) {

276 
vÆ
 = "(null)";

278 *
vÆ
 && 
to
 < 
íd
) {

279 *
to
++ = *
vÆ
++;

285 *
to
 = 0;

286  ()(
to
 - 
°¨t
);

287 
	}
}

290 
	$_ß„_¢¥ötf
(*
to
, 
size_t
 
n
, c⁄° *
fmt
, ...)

292 
ªsu…
;

293 
va_li°
 
¨gs
;

294 
	`va_°¨t
(
¨gs
, 
fmt
);

295 
ªsu…
 = 
	`_ß„_v¢¥ötf
(
to
, 
n
, 
fmt
, 
¨gs
);

296 
	`va_íd
(
¨gs
);

297  
ªsu…
;

298 
	}
}

304 
	$du£c_now
()

306 
timevÆ
 
now
;

307 
öt64_t
 
u£c
;

308 
°©us
;

310 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

311 i‡(
°©us
 < 0) {

312 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

316 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

318  
u£c
;

319 
	}
}

325 
	$dm£c_now
()

327  
	`du£c_now
() / 1000LL;

328 
	}
}

334 
	$d£c_now
()

336  
	`du£c_now
() / 1000000LL;

337 
	}
}

340 
	$°rög_m©ch_Àn
(c⁄° *
∑âîn
, 
∑âînLí
,

341 c⁄° *
°rög
, 
°rögLí
, 
noˇ£
)

343 
∑âînLí
) {

344 
∑âîn
[0]) {

346 
∑âîn
[1] == '*') {

347 
∑âîn
++;

348 
∑âînLí
--;

350 i‡(
∑âînLí
 == 1)

352 
°rögLí
) {

353 i‡(
	`°rög_m©ch_Àn
(
∑âîn
+1, 
∑âînLí
-1,

354 
°rög
, 
°rögLí
, 
noˇ£
))

356 
°rög
++;

357 
°rögLí
--;

362 i‡(
°rögLí
 == 0)

364 
°rög
++;

365 
°rögLí
--;

369 
nŸ
, 
m©ch
;

371 
∑âîn
++;

372 
∑âînLí
--;

373 
nŸ
 = 
∑âîn
[0] == '^';

374 i‡(
nŸ
) {

375 
∑âîn
++;

376 
∑âînLí
--;

378 
m©ch
 = 0;

380 i‡(
∑âîn
[0] == '\\') {

381 
∑âîn
++;

382 
∑âînLí
--;

383 i‡(
∑âîn
[0] =
°rög
[0])

384 
m©ch
 = 1;

385 } i‡(
∑âîn
[0] == ']') {

387 } i‡(
∑âînLí
 == 0) {

388 
∑âîn
--;

389 
∑âînLí
++;

391 } i‡(
∑âîn
[1] ='-' && 
∑âînLí
 >= 3) {

392 
°¨t
 = 
∑âîn
[0];

393 
íd
 = 
∑âîn
[2];

394 
c
 = 
°rög
[0];

395 i‡(
°¨t
 > 
íd
) {

396 
t
 = 
°¨t
;

397 
°¨t
 = 
íd
;

398 
íd
 = 
t
;

400 i‡(
noˇ£
) {

401 
°¨t
 = 
	`tﬁowî
(start);

402 
íd
 = 
	`tﬁowî
(end);

403 
c
 = 
	`tﬁowî
(c);

405 
∑âîn
 += 2;

406 
∑âînLí
 -= 2;

407 i‡(
c
 >
°¨t
 && c <
íd
)

408 
m©ch
 = 1;

410 i‡(!
noˇ£
) {

411 i‡(
∑âîn
[0] =
°rög
[0])

412 
m©ch
 = 1;

414 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë=tﬁowî(()
°rög
[0]))

415 
m©ch
 = 1;

418 
∑âîn
++;

419 
∑âînLí
--;

421 i‡(
nŸ
)

422 
m©ch
 = !match;

423 i‡(!
m©ch
)

425 
°rög
++;

426 
°rögLí
--;

430 i‡(
∑âînLí
 >= 2) {

431 
∑âîn
++;

432 
∑âînLí
--;

436 i‡(!
noˇ£
) {

437 i‡(
∑âîn
[0] !
°rög
[0])

440 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë!tﬁowî(()
°rög
[0]))

443 
°rög
++;

444 
°rögLí
--;

447 
∑âîn
++;

448 
∑âînLí
--;

449 i‡(
°rögLí
 == 0) {

450 *
∑âîn
 == '*') {

451 
∑âîn
++;

452 
∑âînLí
--;

457 i‡(
∑âînLí
 =0 && 
°rögLí
 == 0)

460 
	}
}

462 
	$°rög_m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
) {

463  
	`°rög_m©ch_Àn
(
∑âîn
,
	`°æí
’©ã∫),
°rög
,°æí(°rög),
noˇ£
);

464 
	}
}

	@dep/util/dutil.h

1 #i‚de‡
_DUTIL_H_


2 
	#_DUTIL_H_


	)

4 
	~<°d¨g.h
>

6 
	~<d•ecülc⁄fig.h
>

8 
	#UNUSED
(
x
Ë()(x)

	)

10 
	#LF
 (
uöt8_t
Ë10

	)

11 
	#CR
 (
uöt8_t
Ë13

	)

12 
	#CRLF
 "\x0d\x0a"

	)

13 
	#CRLF_LEN
 (("\x0d\x0a"Ë- 1)

	)

15 
	#NELEMS
(
a
Ë((◊)Ë/ (◊)[0]))

	)

17 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

18 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

20 
	#SQUARE
(
d
Ë((dË* (d))

	)

21 
	#VAR
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : ((s2Ë- 
	`SQUARE
(s)/“)Ë/ (“Ë- 1))

	)

22 
	#STDDEV
(
s
, 
s2
, 
n
Ë((“Ë< 2Ë? 0.0 : 
	`sqπ
(
	`VAR
((s), (s2), (n))))

	)

29 #ifde‡
HAVE_ASSERT_PANIC


31 
	#ASSERT
(
_x
) do { \

32 i‡(!(
_x
)) { \

33 
	`das£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

35 } 0)

	)

37 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

39 #ñi‡
HAVE_ASSERT_LOG


41 
	#ASSERT
(
_x
) do { \

42 i‡(!(
_x
)) { \

43 
	`das£π
(#_x, 
__FILE__
, 
__LINE__
, 0); \

45 } 0)

	)

47 
	#NOT_REACHED
(Ë
	`ASSERT
(0)

	)

51 
	#ASSERT
(
_x
)

	)

53 
	#NOT_REACHED
()

	)

57 
das£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

58 
d°ackåa˚
(
skù_cou¡
);

59 
d°ackåa˚_fd
(
fd
);

61 
_ds˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

62 
_dvs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

63 
du£c_now
();

64 
dm£c_now
();

65 
d£c_now
();

78 
_ß„_v¢¥ötf
(*
to
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

79 
_ß„_¢¥ötf
(*
to
, 
size_t
 
n
, c⁄° *
fmt
, ...);

81 
	#dß„_¢¥ötf
(
_s
, 
_n
, ...) \

82 
	`_ß„_¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

84 
	#dß„_v¢¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

85 
	`_ß„_v¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

101 
	#d¢¥ötf
(
_s
, 
_n
, ...) \

102 
	`¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

104 
	#ds˙¥ötf
(
_s
, 
_n
, ...) \

105 
	`_ds˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
__VA_ARGS__
)

	)

107 
	#dv¢¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

108 
	`v¢¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

110 
	#dvs˙¥ötf
(
_s
, 
_n
, 
_f
, 
_a
) \

111 
	`_dvs˙¥ötf
((*)(
_s
), (
size_t
)(
_n
), 
_f
, 
_a
)

	)

113 
	#d°r·ime
(
_s
, 
_n
, 
fmt
, 
tm
) \

114 ()
	`°r·ime
((*)(
_s
), (
size_t
)(
_n
), 
fmt
, 
tm
)

	)

116 
°rög_m©ch_Àn
(c⁄° *
∑âîn
, 
∑âînLí
, c⁄° *
°rög
, 
°rögLí
, 
noˇ£
);

117 
°rög_m©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
);

122 #i‡
deföed
(
__ATOMIC_RELAXED
)

123 
	#©omic_add
(
_vÆue
, 
_n
Ë
	`__©omic_add_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

124 
	#©omic_sub
(
_vÆue
, 
_n
Ë
	`__©omic_sub_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

125 
	#©omic_£t
(
_vÆue
, 
_n
Ë
	`__©omic_°‹e_n
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

126 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

127 
	`__©omic_lﬂd
(&
_vÆue
, 
_v
, 
__ATOMIC_RELAXED
); \

128 } 0)

	)

130 
	#ATOMIC_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

132 #ñi‡
deföed
(
HAVE_ATOMIC
)

133 
	#©omic_add
(
_vÆue
, 
_n
Ë
	`__sync_add_™d_„tch
(&_vÆue, (_n))

	)

134 
	#©omic_sub
(
_vÆue
, 
_n
Ë
	`__sync_sub_™d_„tch
(&_vÆue, (_n))

	)

135 
	#©omic_£t
(
_vÆue
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&_vÆue, (_n))

	)

136 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

137 (*
_v
Ë
	`__sync_add_™d_„tch
(&
_vÆue
, 0); \

138 } 0)

	)

140 
	#ATOMIC_LOCK_TYPE
 "HAVE_ATOMIC"

	)

142 
±hªad_muãx_t
 
©omic_lockî
;

144 
	#©omic_add
(
_vÆue
, 
_n
) do { \

145 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

146 
_vÆue
 +(
_n
); \

147 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

148 } 0)

	)

150 
	#©omic_sub
(
_vÆue
, 
_n
) do { \

151 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

152 
_vÆue
 -(
_n
); \

153 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

154 } 0)

	)

156 
	#©omic_£t
(
_vÆue
, 
_n
) do { \

157 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

158 
_vÆue
 = (
_n
); \

159 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

160 } 0)

	)

162 
	#©omic_gë
(
_vÆue
, 
_v
) do { \

163 
	`±hªad_muãx_lock
(&
©omic_lockî
); \

164 (*
_v
Ë
_vÆue
; \

165 
	`±hªad_muãx_u∆ock
(&
©omic_lockî
); \

166 } 0)

	)

168 
	#ATOMIC_LOCK_TYPE
 "±hªad_muãx_lock"

	)

	@src/vr.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<sig«l.h
>

5 
	~<gë›t.h
>

6 
	~<f˙é.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ut¢ame.h
>

10 
	~<vr_c‹e.h
>

11 
	~<vr_c⁄f.h
>

12 
	~<vr_sig«l.h
>

14 
	#VR_CONF_PATH
 "c⁄f/vúe.c⁄f"

	)

16 
	#VR_LOG_DEFAULT
 
LOG_NOTICE


	)

17 
	#VR_LOG_MIN
 
LOG_EMERG


	)

18 
	#VR_LOG_MAX
 
LOG_PVERB


	)

19 
	#VR_LOG_PATH
 
NULL


	)

21 
	#VR_PORT
 8889

	)

22 
	#VR_ADDR
 "0.0.0.0"

	)

23 
	#VR_INTERVAL
 (30 * 1000Ë

	)

25 
	#VR_PID_FILE
 
NULL


	)

27 
	#VR_THREAD_NUM_DEFAULT
 (
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)>6?6:sysc⁄f(_SC_NPROCESSORS_ONLN))

	)

29 
	gshow_hñp
;

30 
	gshow_vîsi⁄
;

31 
	gã°_c⁄f
;

32 
	gd´m⁄ize
;

34 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

35 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

36 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

37 { "ã°-c⁄f", 
no_¨gumít
, 
NULL
, 't' },

38 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'd' },

39 { "vîbo£", 
ªquúed_¨gumít
, 
NULL
, 'v' },

40 { "ouçut", 
ªquúed_¨gumít
, 
NULL
, 'o' },

41 { "c⁄f-fûe", 
ªquúed_¨gumít
, 
NULL
, 'c' },

42 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'p' },

43 { "thªad-num", 
ªquúed_¨gumít
, 
NULL
, 'T' },

44 { 
NULL
, 0, NULL, 0 }

47 
	gsh‹t_›ti⁄s
[] = "hVtdv:o:c:p:T:";

49 
r°©us_t


50 
	$vr_d´m⁄ize
(
dump_c‹e
)

52 
r°©us_t
 
°©us
;

53 
pid_t
 
pid
, 
sid
;

54 
fd
;

56 
pid
 = 
	`f‹k
();

57 
pid
) {

59 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

60  
VR_ERROR
;

67 
	`_exô
(0);

72 
sid
 = 
	`£tsid
();

73 i‡(
sid
 < 0) {

74 
	`log_îr‹
("£tsid(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

75  
VR_ERROR
;

78 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

79 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

80  
VR_ERROR
;

83 
pid
 = 
	`f‹k
();

84 
pid
) {

86 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

87  
VR_ERROR
;

94 
	`_exô
(0);

100 i‡(
dump_c‹e
 == 0) {

101 
°©us
 = 
	`chdú
("/");

102 i‡(
°©us
 < 0) {

103 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

104  
VR_ERROR
;

109 
	`umask
(0);

113 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

114 i‡(
fd
 < 0) {

115 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

116  
VR_ERROR
;

119 
°©us
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

120 i‡(
°©us
 < 0) {

121 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

122 
	`˛o£
(
fd
);

123  
VR_ERROR
;

126 
°©us
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

127 i‡(
°©us
 < 0) {

128 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

129 
	`˛o£
(
fd
);

130  
VR_ERROR
;

133 
°©us
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

134 i‡(
°©us
 < 0) {

135 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

136 
	`˛o£
(
fd
);

137  
VR_ERROR
;

140 i‡(
fd
 > 
STDERR_FILENO
) {

141 
°©us
 = 
	`˛o£
(
fd
);

142 i‡(
°©us
 < 0) {

143 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

144  
VR_ERROR
;

148  
VR_OK
;

149 
	}
}

152 
	$vr_¥öt_run
(
ö°™˚
 *
nci
)

154 
°©us
;

155 
ut¢ame
 
«me
;

157 
°©us
 = 
	`u«me
(&
«me
);

159 i‡(
nci
->
log_fûíame
) {

160 *
ascii_logo
 =

178 *
buf
 = 
	`dÆloc
(1024*16);

179 
	`¢¥ötf
(
buf
,1024*16,
ascii_logo
,

180 
VR_VERSION_STRING
,

182 "°™dÆ⁄e", 
£rvî
.
p‹t
,

183 (Ë
nci
->
pid
,

184 
°©us
 < 0 ? " ":
«me
.
sy¢ame
,

185 
°©us
 < 0 ? " ":
«me
.
ªÀa£
,

186 
°©us
 < 0 ? " ":
«me
.
machöe
);

187 
	`log_wrôe_Àn
(
buf
, 
	`°æí
(buf));

188 
	`d‰ì
(
buf
);

190 
buf
[256];

191 
	`¢¥ötf
(
buf
,256,"Vire %s, %s bit, %s mode,Öort %d,Öid %ld, built for %s %s %sÑeadyÅoÑun.\n",

192 
VR_VERSION_STRING
, (() == 8) ? "64" : "32",

193 "°™dÆ⁄e", 
£rvî
.
p‹t
, (Ë
nci
->
pid
,

194 
°©us
 < 0 ? " ":
«me
.
sy¢ame
,

195 
°©us
 < 0 ? " ":
«me
.
ªÀa£
,

196 
°©us
 < 0 ? " ":
«me
.
machöe
);

197 
	`log_wrôe_Àn
(
buf
, 
	`°æí
(buf));

199 
	}
}

202 
	$vr_¥öt_d⁄e
()

204 
	`loga
("done,Ñabbit done");

205 
	}
}

208 
	$vr_show_ußge
()

210 
	`log_°dîr
(

211 "Ußge: vúê[-?hVdt] [-v vîbosôyÜevñ] [-ÿouçuàfûe]" 
CRLF


212 " [-¯c⁄‡fûe] [-∞pid fûe]" 
CRLF


213 " [-T w‹kîÅhªad†numbî]" 
CRLF


215 
	`log_°dîr
(

216 "O±i⁄s:" 
CRLF


217 " -h, --hñ∞ :Åhi†hñp" 
CRLF


218 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


219 " -t, --ã°-c⁄‡ :Åe° c⁄figuøti⁄ f‹ sy¡axÉº‹†™dÉxô" 
CRLF


221 
	`log_°dîr
(

222 " -v, --vîbo£=N : sëÜoggögÜevñ (deÁu…: %d, mö: %d, max: %d)" 
CRLF


223 " -o, --ouçut=S : sëÜoggög fûê(deÁu…: %s)" 
CRLF


224 " -c, --c⁄f-fûe=S : së c⁄figuøti⁄ fûê(deÁu…: %s)" 
CRLF


225 " -p, --pid-fûe=S : sëÖid fûê(deÁu…: %s)" 
CRLF


226 " -T, --thªad_num=N : sëÅhêw‹kîÅhªad†numbî (deÁu…: %d)" 
CRLF


228 
VR_LOG_DEFAULT
, 
VR_LOG_MIN
, 
VR_LOG_MAX
,

229 
VR_LOG_PATH
 !
NULL
 ? VR_LOG_PATH : "stderr",

230 
VR_CONF_PATH
,

231 
VR_PID_FILE
 !
NULL
 ? VR_PID_FILE : "off",

232 
VR_THREAD_NUM_DEFAULT
);

233 
	}
}

235 
r°©us_t


236 
	$vr_¸óã_pidfûe
(
ö°™˚
 *
nci
)

238 
pid
[
VR_UINTMAX_MAXLEN
];

239 
fd
, 
pid_Àn
;

240 
ssize_t
 
n
;

242 
fd
 = 
	`›í
(
nci
->
pid_fûíame
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

243 i‡(
fd
 < 0) {

244 
	`log_îr‹
("›íögÖid fûê'%s' faûed: %s", 
nci
->
pid_fûíame
,

245 
	`°ªº‹
(
î∫o
));

246  
VR_ERROR
;

248 
nci
->
pidfûe
 = 1;

250 
pid_Àn
 = 
	`d¢¥ötf
(
pid
, 
VR_UINTMAX_MAXLEN
, "%d", 
nci
->pid);

252 
n
 = 
	`vr_wrôe
(
fd
, 
pid
, 
pid_Àn
);

253 i‡(
n
 < 0) {

254 
	`log_îr‹
("wrôêtÿpid fûê'%s' faûed: %s", 
nci
->
pid_fûíame
,

255 
	`°ªº‹
(
î∫o
));

256  
VR_ERROR
;

259 
	`˛o£
(
fd
);

261  
VR_OK
;

262 
	}
}

265 
	$vr_ªmove_pidfûe
(
ö°™˚
 *
nci
)

267 
°©us
;

269 
°©us
 = 
	`u∆ök
(
nci
->
pid_fûíame
);

270 i‡(
°©us
 < 0) {

271 
	`log_îr‹
("unlink ofÖid file '%s' failed, ignored: %s",

272 
nci
->
pid_fûíame
, 
	`°ªº‹
(
î∫o
));

274 
	}
}

277 
	$vr_£t_deÁu…_›ti⁄s
(
ö°™˚
 *
nci
)

279 
°©us
;

281 
nci
->
log_Àvñ
 = 
VR_LOG_DEFAULT
;

282 
nci
->
log_fûíame
 = 
VR_LOG_PATH
;

284 
nci
->
c⁄f_fûíame
 = 
VR_CONF_PATH
;

286 
°©us
 = 
	`vr_gëho°«me
(
nci
->
ho°«me
, 
VR_MAXHOSTNAMELEN
);

287 i‡(
°©us
 < 0) {

288 
	`log_w¨n
("gëho°«mêÁûed, ign‹ed: %s", 
	`°ªº‹
(
î∫o
));

289 
	`d¢¥ötf
(
nci
->
ho°«me
, 
VR_MAXHOSTNAMELEN
, "unknown");

291 
nci
->
ho°«me
[
VR_MAXHOSTNAMELEN
 - 1] = '\0';

293 
nci
->
pid
 = (
pid_t
)-1;

294 
nci
->
pid_fûíame
 = 
NULL
;

295 
nci
->
pidfûe
 = 0;

297 
nci
->
thªad_num
 = ()
VR_THREAD_NUM_DEFAULT
;

298 
	}
}

300 
r°©us_t


301 
	$vr_gë_›ti⁄s
(
¨gc
, **
¨gv
, 
ö°™˚
 *
nci
)

303 
c
, 
vÆue
;

305 
›ãº
 = 0;

308 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

309 i‡(
c
 == -1) {

314 
c
) {

316 
show_vîsi⁄
 = 1;

317 
show_hñp
 = 1;

321 
show_vîsi⁄
 = 1;

325 
ã°_c⁄f
 = 1;

329 
d´m⁄ize
 = 1;

333 
vÆue
 = 
	`vr_©oi
(
›èrg
, 
	`°æí
(optarg));

334 i‡(
vÆue
 < 0) {

335 
	`log_°dîr
("vire: option -vÑequiresáÇumber");

336  
VR_ERROR
;

338 
nci
->
log_Àvñ
 = 
vÆue
;

342 
nci
->
log_fûíame
 = 
›èrg
;

346 
nci
->
c⁄f_fûíame
 = 
›èrg
;

350 
nci
->
pid_fûíame
 = 
›èrg
;

354 
vÆue
 = 
	`vr_©oi
(
›èrg
, 
	`°æí
(optarg));

355 i‡(
vÆue
 < 0) {

356 
	`log_°dîr
("vire: option -TÑequiresáÇumber");

357  
VR_ERROR
;

360 
nci
->
thªad_num
 = 
vÆue
;

364 
›t›t
) {

368 
	`log_°dîr
("vire: option -%cÑequiresá fileÇame",

369 
›t›t
);

374 
	`log_°dîr
("vúe: o±i⁄ -%¯ªquúe†®numbî", 
›t›t
);

378 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

381  
VR_ERROR
;

384 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

385  
VR_ERROR
;

390  
VR_OK
;

391 
	}
}

397 
boﬁ


398 
	$vr_ã°_c⁄f
(
ö°™˚
 *
nci
, 
ã°
)

400 
vr_c⁄f
 *
cf
;

402 
cf
 = 
	`c⁄f_¸óã
(
nci
->
c⁄f_fûíame
);

403 i‡(
cf
 =
NULL
) {

404 i‡(
ã°
)

405 
	`log_°dîr
("vire: configuration file '%s' syntax is invalid",

406 
nci
->
c⁄f_fûíame
);

407  
Ál£
;

410 
	`c⁄f_de°roy
(
cf
);

412 i‡(
ã°
)

413 
	`log_°dîr
("vire: configuration file '%s' syntax is ok",

414 
nci
->
c⁄f_fûíame
);

415  
åue
;

416 
	}
}

419 
	$vr_¥e_run
(
ö°™˚
 *
nci
)

421 
ªt
;

423 
ªt
 = 
	`log_öô
(
nci
->
log_Àvñ
,Çci->
log_fûíame
);

424 i‡(
ªt
 !
VR_OK
) {

425  
ªt
;

428 
	`log_debug
(
LOG_VERB
, "Vúêu£dÜogfûe: %s", 
nci
->
c⁄f_fûíame
);

430 i‡(!
	`vr_ã°_c⁄f
(
nci
, 
Ál£
)) {

431 
	`log_îr‹
("c⁄‡fûê%†i†îr‹", 
nci
->
c⁄f_fûíame
);

432  
VR_ERROR
;

435 i‡(
d´m⁄ize
) {

436 
ªt
 = 
	`vr_d´m⁄ize
(1);

437 i‡(
ªt
 !
VR_OK
) {

438  
ªt
;

442 
nci
->
pid
 = 
	`gëpid
();

444 
ªt
 = 
	`sig«l_öô
();

445 i‡(
ªt
 !
VR_OK
) {

446  
ªt
;

449 i‡(
nci
->
pid_fûíame
) {

450 
ªt
 = 
	`vr_¸óã_pidfûe
(
nci
);

451 i‡(
ªt
 !
VR_OK
) {

452  
VR_ERROR
;

456 
ªt
 = 
	`öô_£rvî
(
nci
);

457 i‡(
ªt
 !
VR_OK
) {

458  
VR_ERROR
;

461 
	`vr_¥öt_run
(
nci
);

463  
VR_OK
;

464 
	}
}

467 
	$vr_po°_run
(
ö°™˚
 *
nci
)

470 
	`w‹kîs_deöô
();

471 
	`backíds_deöô
();

472 
	`ma°î_deöô
();

474 i‡(
nci
->
pidfûe
) {

475 
	`vr_ªmove_pidfûe
(
nci
);

478 
	`sig«l_deöô
();

480 
	`vr_¥öt_d⁄e
();

482 
	`log_deöô
();

483 
	}
}

486 
	$vr_run
(
ö°™˚
 *
nci
)

488 i‡(
nci
->
thªad_num
 <= 0) {

489 
	`log_îr‹
("number of workÅhreads must be greaterÅhan 0");

491 } i‡(
nci
->
thªad_num
 > 64) {

492 
	`log_w¨n
("WARNING: Settingá highÇumber of workerÅhreads isÇotÑecommended."

497 
	`ma°î_run
();

498 
	`w‹kîs_run
();

499 
	`backíds_run
();

502 
	`w‹kîs_waô
();

503 
	`backíds_waô
();

504 
	}
}

507 
	$maö
(
¨gc
, **
¨gv
)

509 
r°©us_t
 
°©us
;

510 
ö°™˚
 
nci
;

512 
	`vr_£t_deÁu…_›ti⁄s
(&
nci
);

514 
°©us
 = 
	`vr_gë_›ti⁄s
(
¨gc
, 
¨gv
, &
nci
);

515 i‡(
°©us
 !
VR_OK
) {

516 
	`vr_show_ußge
();

517 
	`exô
(1);

520 i‡(
show_vîsi⁄
) {

521 
	`log_°dîr
("Thi†i†vúe-%s" 
CRLF
, 
VR_VERSION_STRING
);

522 i‡(
show_hñp
) {

523 
	`vr_show_ußge
();

525 
	`exô
(0);

528 i‡(
ã°_c⁄f
) {

529 i‡(!
	`vr_ã°_c⁄f
(&
nci
, 
åue
)) {

530 
	`exô
(1);

532 
	`exô
(0);

535 
°©us
 = 
	`vr_¥e_run
(&
nci
);

536 i‡(
°©us
 !
VR_OK
) {

537 
	`vr_po°_run
(&
nci
);

538 
	`exô
(1);

541 
£rvî
.
execuèbÀ
 = 
	`gëAbsﬁuãP©h
(
¨gv
[0]);

543 
	`vr_run
(&
nci
);

545 
	`vr_po°_run
(&
nci
);

547  
VR_OK
;

548 
	}
}

	@src/vr_aof.c

1 
	~<vr_c‹e.h
>

4 
	$aofRewrôeBuf„rSize
() {

5 
dli°Node
 *
 
;

6 
dli°Iãr
 
li
;

7 
size
 = 0;

9 
	`dli°Rewöd
(
£rvî
.
aof_ªwrôe_buf_blocks
,&
li
);

10 (
 
 = 
	`dli°Next
(&
li
))) {

11 
ao‰wblock
 *
block
 = 
	`dli°NodeVÆue
(
 
);

12 
size
 +
block
->
u£d
;

14  
size
;

15 
	}
}

24 
sds
 
	$ˇtAµídO∆yExpúeAtComm™d
(
sds
 
buf
, 
ªdisComm™d
 *
cmd
, 
robj
 *
key
,Ñobj *
£c⁄ds
) {

25 
whí
;

26 
robj
 *
¨gv
[3];

29 
£c⁄ds
 = 
	`gëDecodedObje˘
(seconds);

30 
whí
 = 
	`°πﬁl
(
£c⁄ds
->
±r
,
NULL
,10);

32 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
£ãxComm™d
 ||

33 
cmd
->
¥oc
 =
expúótComm™d
)

35 
whí
 *= 1000;

38 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
≥xpúeComm™d
 ||

39 
cmd
->
¥oc
 =
£ãxComm™d
 || cmd->¥o¯=
p£ãxComm™d
)

41 
whí
 +
	`vr_m£c_now
();

43 
	`de¸RefCou¡
(
£c⁄ds
);

45 
¨gv
[0] = 
	`¸óãSåögObje˘
("PEXPIREAT",9);

46 
¨gv
[1] = 
key
;

47 
¨gv
[2] = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
whí
);

48 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf, 3, 
¨gv
);

49 
	`de¸RefCou¡
(
¨gv
[0]);

50 
	`de¸RefCou¡
(
¨gv
[2]);

51  
buf
;

52 
	}
}

54 
sds
 
	$ˇtAµídO∆yGíîicComm™d
(
sds
 
d°
, 
¨gc
, 
robj
 **
¨gv
) {

55 
buf
[32];

56 
Àn
, 
j
;

57 
robj
 *
o
;

59 
buf
[0] = '*';

60 
Àn
 = 1+
	`Œ2°rög
(
buf
+1,(buf)-1,
¨gc
);

61 
buf
[
Àn
++] = '\r';

62 
buf
[
Àn
++] = '\n';

63 
d°
 = 
	`sdsˇéí
(d°,
buf
,
Àn
);

65 
j
 = 0; j < 
¨gc
; j++) {

66 
o
 = 
	`gëDecodedObje˘
(
¨gv
[
j
]);

67 
buf
[0] = '$';

68 
Àn
 = 1+
	`Œ2°rög
(
buf
+1,(buf)-1,
	`sd¶í
(
o
->
±r
));

69 
buf
[
Àn
++] = '\r';

70 
buf
[
Àn
++] = '\n';

71 
d°
 = 
	`sdsˇéí
(d°,
buf
,
Àn
);

72 
d°
 = 
	`sdsˇéí
(d°,
o
->
±r
,
	`sd¶í
(o->ptr));

73 
d°
 = 
	`sdsˇéí
(dst,"\r\n",2);

74 
	`de¸RefCou¡
(
o
);

76  
d°
;

77 
	}
}

82 
	$aofChûdWrôeDiffD©a
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

83 
dli°Node
 *
 
;

84 
ao‰wblock
 *
block
;

85 
ssize_t
 
nwrôãn
;

86 
	`UNUSED
(
ñ
);

87 
	`UNUSED
(
fd
);

88 
	`UNUSED
(
¥ivd©a
);

89 
	`UNUSED
(
mask
);

92 
 
 = 
	`dli°Fú°
(
£rvî
.
aof_ªwrôe_buf_blocks
);

93 
block
 = 
 
 ?Ün->
vÆue
 : 
NULL
;

94 i‡(
£rvî
.
aof_°›_£ndög_diff
 || !
block
) {

95 
	`´DñëeFûeEvít
(
£rvî
.
ñ
,£rvî.
aof_pùe_wrôe_d©a_to_chûd
,

96 
AE_WRITABLE
);

99 i‡(
block
->
u£d
 > 0) {

100 
nwrôãn
 = 
	`vr_wrôe
(
£rvî
.
aof_pùe_wrôe_d©a_to_chûd
,

101 
block
->
buf
,block->
u£d
);

102 i‡(
nwrôãn
 <= 0) ;

103 
	`memmove
(
block
->
buf
,block->buf+
nwrôãn
,block->
u£d
-nwritten);

104 
block
->
u£d
 -
nwrôãn
;

106 i‡(
block
->
u£d
 =0Ë
	`dli°DñNode
(
£rvî
.
aof_ªwrôe_buf_blocks
,
 
);

108 
	}
}

111 
	$aofRewrôeBuf„rAµíd
(*
s
, 
Àn
) {

112 
dli°Node
 *
 
 = 
	`dli°La°
(
£rvî
.
aof_ªwrôe_buf_blocks
);

113 
ao‰wblock
 *
block
 = 
 
 ?Ün->
vÆue
 : 
NULL
;

115 
Àn
) {

118 i‡(
block
) {

119 
thi¶í
 = (
block
->
‰ì
 < 
Àn
) ? block->free :Üen;

120 i‡(
thi¶í
) {

121 
	`mem˝y
(
block
->
buf
+block->
u£d
, 
s
, 
thi¶í
);

122 
block
->
u£d
 +
thi¶í
;

123 
block
->
‰ì
 -
thi¶í
;

124 
s
 +
thi¶í
;

125 
Àn
 -
thi¶í
;

129 i‡(
Àn
) {

130 
numblocks
;

132 
block
 = 
	`dÆloc
((*block));

133 
block
->
‰ì
 = 
AOF_RW_BUF_BLOCK_SIZE
;

134 
block
->
u£d
 = 0;

135 
	`dli°AddNodeTaû
(
£rvî
.
aof_ªwrôe_buf_blocks
,
block
);

139 
numblocks
 = 
	`dli°Lígth
(
£rvî
.
aof_ªwrôe_buf_blocks
);

140 i‡(((
numblocks
+1) % 10) == 0) {

141 
Àvñ
 = ((
numblocks
+1Ë% 100Ë=0 ? 
LOG_WARN
 :

142 
LOG_NOTICE
;

143 
	`log_debug
(
Àvñ
, "Background AOF buffer size: %lu MB",

144 
	`aofRewrôeBuf„rSize
()/(1024*1024));

151 i‡(
	`´GëFûeEvíts
(
£rvî
.
ñ
,£rvî.
aof_pùe_wrôe_d©a_to_chûd
) == 0) {

152 
	`´Cª©eFûeEvít
(
£rvî
.
ñ
, sîvî.
aof_pùe_wrôe_d©a_to_chûd
,

153 
AE_WRITABLE
, 
aofChûdWrôeDiffD©a
, 
NULL
);

155 
	}
}

157 
	$„edAµídO∆yFûe
(
ªdisComm™d
 *
cmd
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

158 
sds
 
buf
 = 
	`sd£m±y
();

159 
robj
 *
tm∑rgv
[3];

163 i‡(
di˘id
 !
£rvî
.
aof_£À˘ed_db
) {

164 
£ldb
[64];

166 
	`¢¥ötf
(
£ldb
,(£ldb),"%d",
di˘id
);

167 
buf
 = 
	`sdsˇçrötf
(buf,"*2\r\n$6\r\nSELECT\r\n$%lu\r\n%s\r\n",

168 ()
	`°æí
(
£ldb
),seldb);

169 
£rvî
.
aof_£À˘ed_db
 = 
di˘id
;

172 i‡(
cmd
->
¥oc
 =
expúeComm™d
 || cmd->¥o¯=
≥xpúeComm™d
 ||

173 
cmd
->
¥oc
 =
expúótComm™d
) {

175 
buf
 = 
	`ˇtAµídO∆yExpúeAtComm™d
(buf,
cmd
,
¨gv
[1],argv[2]);

176 } i‡(
cmd
->
¥oc
 =
£ãxComm™d
 || cmd->¥o¯=
p£ãxComm™d
) {

178 
tm∑rgv
[0] = 
	`¸óãSåögObje˘
("SET",3);

179 
tm∑rgv
[1] = 
¨gv
[1];

180 
tm∑rgv
[2] = 
¨gv
[3];

181 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf,3,
tm∑rgv
);

182 
	`de¸RefCou¡
(
tm∑rgv
[0]);

183 
buf
 = 
	`ˇtAµídO∆yExpúeAtComm™d
(buf,
cmd
,
¨gv
[1],argv[2]);

188 
buf
 = 
	`ˇtAµídO∆yGíîicComm™d
(buf,
¨gc
,
¨gv
);

194 i‡(
£rvî
.
aof_°©e
 =
AOF_ON
)

195 
£rvî
.
aof_buf
 = 
	`sdsˇéí
(£rvî.aof_buf,
buf
,
	`sd¶í
(buf));

201 i‡(
£rvî
.
aof_chûd_pid
 != -1)

202 
	`aofRewrôeBuf„rAµíd
((*)
buf
,
	`sd¶í
(buf));

204 
	`sds‰ì
(
buf
);

205 
	}
}

	@src/vr_aof.h

1 #i‚de‡
_VR_AOF_H_


2 
	#_VR_AOF_H_


	)

5 
	#AOF_OFF
 0

	)

6 
	#AOF_ON
 1

	)

7 
	#AOF_WAIT_REWRITE
 2

	)

9 
	#AOF_AUTOSYNC_BYTES
 (1024*1024*32Ë

	)

25 
	#AOF_RW_BUF_BLOCK_SIZE
 (1024*1024*10Ë

	)

27 
	sao‰wblock
 {

28 
	mu£d
, 
	m‰ì
;

29 
	mbuf
[
AOF_RW_BUF_BLOCK_SIZE
];

30 } 
	tao‰wblock
;

32 
aofRewrôeBuf„rSize
();

33 
aofChûdWrôeDiffD©a
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

34 
sds
 
ˇtAµídO∆yExpúeAtComm™d
(sd†
buf
, 
ªdisComm™d
 *
cmd
, 
robj
 *
key
,Ñobj *
£c⁄ds
);

35 
sds
 
ˇtAµídO∆yGíîicComm™d
(sd†
d°
, 
¨gc
, 
robj
 **
¨gv
);

36 
aofRewrôeBuf„rAµíd
(*
s
, 
Àn
);

37 
„edAµídO∆yFûe
(
ªdisComm™d
 *
cmd
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

	@src/vr_backend.c

1 
	~<vr_c‹e.h
>

4 
	gnum_backíd_thªads
;

6 
d¨øy
 
	gbackíds
;

8 *
backíd_thªad_run
(*
¨gs
);

11 
	$vr_backíd_öô
(
vr_backíd
 *
backíd
)

13 
r°©us_t
 
°©us
;

14 
thªads_num
;

16 i‡(
backíd
 =
NULL
) {

17  
VR_ERROR
;

20 
backíd
->
id
 = 0;

21 
backíd
->
cuºít_db
 = 0;

22 
backíd
->
timñimô_exô
 = 0;

23 
backíd
->
œ°_Á°_cy˛e
 = 0;

24 
backíd
->
ªsize_db
 = 0;

25 
backíd
->
ªhash_db
 = 0;

27 
	`vr_evíéo›_öô
(&
backíd
->
vñ
, 10);

28 
backíd
->
vñ
.
thªad
.
fun_run
 = 
backíd_thªad_run
;

29 
backíd
->
vñ
.
thªad
.
d©a
 = backend;

31  
VR_OK
;

32 
	}
}

35 
	$vr_backíd_deöô
(
vr_backíd
 *
backíd
)

37 i‡(
backíd
 =
NULL
) {

41 
	`vr_evíéo›_deöô
(&
backíd
->
vñ
);

42 
	}
}

45 
	$backíd_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

46 
vr_w‹kî
 *
backíd
 = 
˛õ¡D©a
;

47 
vr_evíéo›
 *
vñ
 = &
backíd
->vel;

48 
size_t
 
°©_u£d_mem‹y
, 
°©s_≥ak_mem‹y
;

50 
	`UNUSED
(
evítLo›
);

51 
	`UNUSED
(
id
);

52 
	`UNUSED
(
˛õ¡D©a
);

54 
	`ASSERT
(
evítLo›
 =
vñ
->
ñ
);

56 
vñ
->
unixtime
 = 
	`time
(
NULL
);

57 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

60 
°©_u£d_mem‹y
 = 
	`dÆloc_u£d_mem‹y
();

61 
	`upd©e_°©s_gë
(
vñ
->
°©s
, 
≥ak_mem‹y
, &
°©s_≥ak_mem‹y
);

62 i‡(
°©_u£d_mem‹y
 > 
°©s_≥ak_mem‹y
) {

63 
	`upd©e_°©s_£t
(
vñ
->
°©s
, 
≥ak_mem‹y
, 
°©_u£d_mem‹y
);

66 
	`d©aba£sCr⁄
(
backíd
);

69 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

70 
	`c⁄f_ˇche_upd©e
(&
vñ
->
cc
);

73 
vñ
->
¸⁄lo›s
 ++;

74  1000/
vñ
->
hz
;

75 
	}
}

78 
	$£tup_backíd
(
vr_backíd
 *
backíd
)

82 if(
	`´Cª©eTimeEvít
(
backíd
->
vñ
.
ñ
, 1, 
backíd_¸⁄
, backíd, 
NULL
Ë=
AE_ERR
) {

83 
	`£rvîP™ic
("Can't createÅhe serverCronÅimeÉvent.");

84  
VR_ERROR
;

87  
VR_OK
;

88 
	}
}

91 
	$backíd_thªad_run
(*
¨gs
)

93 
vr_w‹kî
 *
backíd
 = 
¨gs
;

96 
	`´Maö
(
backíd
->
vñ
.
ñ
);

98  
NULL
;

99 
	}
}

102 
	$backíds_öô
(
uöt32_t
 
backíd_cou¡
)

104 
r°©us_t
 
°©us
;

105 
uöt32_t
 
idx
;

106 
vr_backíd
 *
backíd
;

108 
	`d¨øy_öô
(&
backíds
, 
backíd_cou¡
, (
vr_backíd
));

110 
idx
 = 0; idx < 
backíd_cou¡
; idx ++) {

111 
backíd
 = 
	`d¨øy_push
(&
backíds
);

112 
	`vr_backíd_öô
(
backíd
);

113 
backíd
->
id
 = 
idx
;

114 
°©us
 = 
	`£tup_backíd
(
backíd
);

115 i‡(
°©us
 !
VR_OK
) {

116 
	`exô
(1);

120 
num_backíd_thªads
 = ()
	`d¨øy_n
(&
backíds
);

122  
VR_OK
;

123 
	}
}

126 
	$backíds_run
()

128 
uöt32_t
 
i
, 
thªad_cou¡
;

129 
vr_backíd
 *
backíd
;

131 
thªad_cou¡
 = (
uöt32_t
)
num_backíd_thªads
;

133 
i
 = 0; i < 
thªad_cou¡
; i ++) {

134 
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
i
);

135 
	`vr_thªad_°¨t
(&
backíd
->
vñ
.
thªad
);

138  
VR_OK
;

139 
	}
}

142 
	$backíds_waô
()

144 
uöt32_t
 
i
, 
thªad_cou¡
;

145 
vr_backíd
 *
backíd
;

147 
thªad_cou¡
 = (
uöt32_t
)
num_backíd_thªads
;

149 
i
 = 0; i < 
thªad_cou¡
; i ++) {

150 
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
i
);

151 
	`±hªad_joö
(
backíd
->
vñ
.
thªad
.
thªad_id
, 
NULL
);

154  
VR_OK
;

155 
	}
}

158 
	$backíds_deöô
()

160 
vr_backíd
 *
backíd
;

162 
	`d¨øy_n
(&
backíds
)) {

163 
backíd
 = 
	`d¨øy_p›
(&
backíds
);

164 
	`vr_backíd_deöô
(
backíd
);

166 
	}
}

	@src/vr_backend.h

1 #i‚de‡
_VR_BACKEND_H_


2 
	#_VR_BACKEND_H_


	)

4 
	svr_backíd
 {

6 
	mid
;

7 
vr_evíéo›
 
	mvñ
;

11 
	mcuºít_db
;

12 
	mtimñimô_exô
;

13 
	mœ°_Á°_cy˛e
;

18 
	mªsize_db
;

19 
	mªhash_db
;

20 }
	tvr_backíd
;

22 
d¨øy
 
backíds
;

24 
backíds_öô
(
uöt32_t
 
backíd_cou¡
);

25 
backíds_run
();

26 
backíds_waô
();

27 
backíds_deöô
();

	@src/vr_bitops.c

1 
	~<vr_c‹e.h
>

10 
size_t
 
	$ªdisP›cou¡
(*
s
, 
cou¡
) {

11 
size_t
 
bôs
 = 0;

12 *
p
 = 
s
;

13 
uöt32_t
 *
p4
;

14 c⁄° 
bôsöbyã
[256] = {0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8};

17 ()
p
 & 3 && 
cou¡
) {

18 
bôs
 +
bôsöbyã
[*
p
++];

19 
cou¡
--;

23 
p4
 = (
uöt32_t
*)
p
;

24 
cou¡
>=28) {

25 
uöt32_t
 
aux1
, 
aux2
, 
aux3
, 
aux4
, 
aux5
, 
aux6
, 
aux7
;

27 
aux1
 = *
p4
++;

28 
aux2
 = *
p4
++;

29 
aux3
 = *
p4
++;

30 
aux4
 = *
p4
++;

31 
aux5
 = *
p4
++;

32 
aux6
 = *
p4
++;

33 
aux7
 = *
p4
++;

34 
cou¡
 -= 28;

36 
aux1
 =áux1 - ((aux1 >> 1) & 0x55555555);

37 
aux1
 = (aux1 & 0x33333333) + ((aux1 >> 2) & 0x33333333);

38 
aux2
 =áux2 - ((aux2 >> 1) & 0x55555555);

39 
aux2
 = (aux2 & 0x33333333) + ((aux2 >> 2) & 0x33333333);

40 
aux3
 =áux3 - ((aux3 >> 1) & 0x55555555);

41 
aux3
 = (aux3 & 0x33333333) + ((aux3 >> 2) & 0x33333333);

42 
aux4
 =áux4 - ((aux4 >> 1) & 0x55555555);

43 
aux4
 = (aux4 & 0x33333333) + ((aux4 >> 2) & 0x33333333);

44 
aux5
 =áux5 - ((aux5 >> 1) & 0x55555555);

45 
aux5
 = (aux5 & 0x33333333) + ((aux5 >> 2) & 0x33333333);

46 
aux6
 =áux6 - ((aux6 >> 1) & 0x55555555);

47 
aux6
 = (aux6 & 0x33333333) + ((aux6 >> 2) & 0x33333333);

48 
aux7
 =áux7 - ((aux7 >> 1) & 0x55555555);

49 
aux7
 = (aux7 & 0x33333333) + ((aux7 >> 2) & 0x33333333);

50 
bôs
 +((((
aux1
 + (aux1 >> 4)) & 0x0F0F0F0F) +

51 ((
aux2
 + (aux2 >> 4)) & 0x0F0F0F0F) +

52 ((
aux3
 + (aux3 >> 4)) & 0x0F0F0F0F) +

53 ((
aux4
 + (aux4 >> 4)) & 0x0F0F0F0F) +

54 ((
aux5
 + (aux5 >> 4)) & 0x0F0F0F0F) +

55 ((
aux6
 + (aux6 >> 4)) & 0x0F0F0F0F) +

56 ((
aux7
 + (aux7 >> 4)) & 0x0F0F0F0F))* 0x01010101) >> 24;

59 
p
 = (*)
p4
;

60 
cou¡
--Ë
bôs
 +
bôsöbyã
[*
p
++];

61  
bôs
;

62 
	}
}

71 
	$ªdisBôpos
(*
s
, 
cou¡
, 
bô
) {

72 *
l
;

73 *
c
;

74 
skùvÆ
, 
w‹d
 = 0, 
⁄e
;

75 
pos
 = 0;

76 
j
;

88 
skùvÆ
 = 
bô
 ? 0 : 
UCHAR_MAX
;

89 
c
 = (*Ë
s
;

90 ()
c
 & ((*
l
)-1Ë&& 
cou¡
) {

91 i‡(*
c
 !
skùvÆ
) ;

92 
c
++;

93 
cou¡
--;

94 
pos
 += 8;

98 
skùvÆ
 = 
bô
 ? 0 : 
ULONG_MAX
;

99 
l
 = (*Ë
c
;

100 
cou¡
 >(*
l
)) {

101 i‡(*
l
 !
skùvÆ
) ;

102 
l
++;

103 
cou¡
 -(*
l
);

104 
pos
 +(*
l
)*8;

114 
c
 = (*)
l
;

115 
j
 = 0; j < (*
l
); j++) {

116 
w‹d
 <<= 8;

117 i‡(
cou¡
) {

118 
w‹d
 |*
c
;

119 
c
++;

120 
cou¡
--;

129 i‡(
bô
 =1 && 
w‹d
 == 0)  -1;

135 
⁄e
 = 
ULONG_MAX
;

136 
⁄e
 >>= 1;

137 
⁄e
 = ~one;

139 
⁄e
) {

140 i‡(((
⁄e
 & 
w‹d
Ë!0Ë=
bô
Ë 
pos
;

141 
pos
++;

142 
⁄e
 >>= 1;

147 
	`£rvîP™ic
("End ofÑedisBitpos()Ñeached.");

149 
	}
}

172 
	$£tUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, uöt64_à
vÆue
) {

173 
uöt64_t
 
byã
, 
bô
, 
byãvÆ
, 
bôvÆ
, 
j
;

175 
j
 = 0; j < 
bôs
; j++) {

176 
bôvÆ
 = (
vÆue
 & ((
uöt64_t
)1<<(
bôs
-1-
j
))) != 0;

177 
byã
 = 
off£t
 >> 3;

178 
bô
 = 7 - (
off£t
 & 0x7);

179 
byãvÆ
 = 
p
[
byã
];

180 
byãvÆ
 &~(1 << 
bô
);

181 
byãvÆ
 |
bôvÆ
 << 
bô
;

182 
p
[
byã
] = 
byãvÆ
 & 0xff;

183 
off£t
++;

185 
	}
}

187 
	$£tSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, 
öt64_t
 
vÆue
) {

188 
uöt64_t
 
uv
;

190 i‡(
vÆue
 >= 0)

191 
uv
 = 
vÆue
;

193 
uv
 = 
UINT64_MAX
 + 
vÆue
 + 1;

194 
	`£tUnsig√dBôfõld
(
p
,
off£t
,
bôs
,
uv
);

195 
	}
}

197 
uöt64_t
 
	$gëUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
) {

198 
uöt64_t
 
byã
, 
bô
, 
byãvÆ
, 
bôvÆ
, 
j
, 
vÆue
 = 0;

200 
j
 = 0; j < 
bôs
; j++) {

201 
byã
 = 
off£t
 >> 3;

202 
bô
 = 7 - (
off£t
 & 0x7);

203 
byãvÆ
 = 
p
[
byã
];

204 
bôvÆ
 = (
byãvÆ
 >> 
bô
) & 1;

205 
vÆue
 = (vÆue<<1Ë| 
bôvÆ
;

206 
off£t
++;

208  
vÆue
;

209 
	}
}

211 
öt64_t
 
	$gëSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
) {

212 
öt64_t
 
vÆue
 = 
	`gëUnsig√dBôfõld
(
p
,
off£t
,
bôs
);

216 i‡(
vÆue
 & ((
uöt64_t
)1 << (
bôs
-1)))

217 
vÆue
 |((
uöt64_t
)-1Ë<< 
bôs
;

218  
vÆue
;

219 
	}
}

240 
	#BFOVERFLOW_WRAP
 0

	)

241 
	#BFOVERFLOW_SAT
 1

	)

242 
	#BFOVERFLOW_FAIL
 2

	)

244 
	$checkUnsig√dBôfõldOvîÊow
(
uöt64_t
 
vÆue
, 
öt64_t
 
ö¸
, uöt64_à
bôs
, 
owty≥
, uöt64_à*
limô
) {

245 
uöt64_t
 
max
 = (
bôs
 =64Ë? 
UINT64_MAX
 : (((uint64_t)1<<bits)-1);

246 
öt64_t
 
maxö¸
 = 
max
-
vÆue
;

247 
öt64_t
 
möö¸
 = -
vÆue
;

249 i‡(
vÆue
 > 
max
 || (
ö¸
 > 0 && in¸ > 
maxö¸
)) {

250 i‡(
limô
) {

251 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

252 
h™dÀ_wøp
;

253 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

254 *
limô
 = 
max
;

258 } i‡(
ö¸
 < 0 && in¸ < 
möö¸
) {

259 i‡(
limô
) {

260 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

261 
h™dÀ_wøp
;

262 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

263 *
limô
 = 0;

270 
h™dÀ_wøp
:

272 
uöt64_t
 
mask
 = ((
öt64_t
)-1Ë<< 
bôs
;

273 
uöt64_t
 
ªs
 = 
vÆue
+
ö¸
;

275 
ªs
 &~
mask
;

276 *
limô
 = 
ªs
;

279 
	}
}

281 
	$checkSig√dBôfõldOvîÊow
(
öt64_t
 
vÆue
, i¡64_à
ö¸
, 
uöt64_t
 
bôs
, 
owty≥
, i¡64_à*
limô
) {

282 
öt64_t
 
max
 = (
bôs
 =64Ë? 
INT64_MAX
 : (((int64_t)1<<(bits-1))-1);

283 
öt64_t
 
mö
 = (-
max
)-1;

288 
öt64_t
 
maxö¸
 = 
max
-
vÆue
;

289 
öt64_t
 
möö¸
 = 
mö
-
vÆue
;

291 i‡(
vÆue
 > 
max
 || (
bôs
 !64 && 
ö¸
 > 
maxö¸
) || (value >= 0 && incr > 0 && incr > maxincr))

293 i‡(
limô
) {

294 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

295 
h™dÀ_wøp
;

296 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

297 *
limô
 = 
max
;

301 } i‡(
vÆue
 < 
mö
 || (
bôs
 !64 && 
ö¸
 < 
möö¸
) || (value < 0 && incr < 0 && incr < minincr)) {

302 i‡(
limô
) {

303 i‡(
owty≥
 =
BFOVERFLOW_WRAP
) {

304 
h™dÀ_wøp
;

305 } i‡(
owty≥
 =
BFOVERFLOW_SAT
) {

306 *
limô
 = 
mö
;

313 
h™dÀ_wøp
:

315 
uöt64_t
 
mask
 = ((
öt64_t
)-1Ë<< 
bôs
;

316 
uöt64_t
 
msb
 = (uöt64_t)1 << (
bôs
-1);

317 
uöt64_t
 
a
 = 
vÆue
, 
b
 = 
ö¸
, 
c
;

318 
c
 = 
a
+
b
;

323 i‡(
c
 & 
msb
) {

324 
c
 |
mask
;

326 
c
 &~
mask
;

328 *
limô
 = 
c
;

331 
	}
}

335 
	$¥ötBôs
(*
p
, 
cou¡
) {

336 
j
, 
i
, 
byã
;

338 
j
 = 0; j < 
cou¡
; j++) {

339 
byã
 = 
p
[
j
];

340 
i
 = 0x80; i > 0; i /= 2)

341 
	`¥ötf
("%c", (
byã
 & 
i
) ? '1' : '0');

342 
	`¥ötf
("|");

344 
	`¥ötf
("\n");

345 
	}
}

351 
	#BITOP_AND
 0

	)

352 
	#BITOP_OR
 1

	)

353 
	#BITOP_XOR
 2

	)

354 
	#BITOP_NOT
 3

	)

356 
	#BITFIELDOP_GET
 0

	)

357 
	#BITFIELDOP_SET
 1

	)

358 
	#BITFIELDOP_INCRBY
 2

	)

367 
	$gëBôOff£tFromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, 
size_t
 *
off£t
, 
hash
, 
bôs
) {

368 
loff£t
;

369 *
îr
 = "bit offset isÇotán integer or out ofÑange";

370 *
p
 = 
o
->
±r
;

371 
size_t
 
∂í
 = 
	`sd¶í
(
p
);

372 
u£hash
 = 0;

375 i‡(
p
[0] ='#' && 
hash
 && 
bôs
 > 0Ë
u£hash
 = 1;

377 i‡(
	`°rög2Œ
(
p
+
u£hash
,
∂í
-u£hash,&
loff£t
) == 0) {

378 
	`addRïlyEº‹
(
c
,
îr
);

379  
VR_ERROR
;

383 i‡(
u£hash
Ë
loff£t
 *
bôs
;

386 i‡((
loff£t
 < 0) || (()loffset >> 3) >= (512*1024*1024))

388 
	`addRïlyEº‹
(
c
,
îr
);

389  
VR_ERROR
;

392 *
off£t
 = (
size_t
)
loff£t
;

393  
VR_OK
;

394 
	}
}

403 
	$gëBôfõldTy≥FromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, *
sign
, *
bôs
) {

404 *
p
 = 
o
->
±r
;

405 *
îr
 = "Invalid bitfieldÅype. Use somethingÜike i16 u8. NoteÅhat u64 isÇot supported but i64 is.";

406 
Œbôs
;

408 i‡(
p
[0] == 'i') {

409 *
sign
 = 1;

410 } i‡(
p
[0] == 'u') {

411 *
sign
 = 0;

413 
	`addRïlyEº‹
(
c
,
îr
);

414  
VR_ERROR
;

417 i‡((
	`°rög2Œ
(
p
+1,
	`°æí
’+1),&
Œbôs
)) == 0 ||

418 
Œbôs
 < 1 ||

419 (*
sign
 =1 && 
Œbôs
 > 64) ||

420 (*
sign
 =0 && 
Œbôs
 > 63))

422 
	`addRïlyEº‹
(
c
,
îr
);

423  
VR_ERROR
;

425 *
bôs
 = 
Œbôs
;

426  
VR_OK
;

427 
	}
}

434 
robj
 *
	$lookupSåögF‹BôComm™d
(
˛õ¡
 *
c
, 
size_t
 
maxbô
, *
expúed
) {

435 
size_t
 
byã
 = 
maxbô
 >> 3;

436 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
expúed
);

438 i‡(
o
 =
NULL
) {

439 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
NULL
, 
byã
+1));

440 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

442 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)Ë 
NULL
;

443 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

444 
o
->
±r
 = 
	`sdsgrowzîo
(o->±r,
byã
+1);

446  
o
;

447 
	}
}

450 
	$£tbôComm™d
(
˛õ¡
 *
c
) {

451 
robj
 *
o
;

452 *
îr
 = "bit isÇotán integer or out ofÑange";

453 
size_t
 
bôoff£t
;

454 
ssize_t
 
byã
, 
bô
;

455 
byãvÆ
, 
bôvÆ
;

456 
⁄
;

457 
expúed
 = 0;

459 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[2],&
bôoff£t
,0,0Ë!
VR_OK
)

462 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
⁄
,
îr
Ë!
VR_OK
)

466 i‡(
⁄
 & ~1) {

467 
	`addRïlyEº‹
(
c
,
îr
);

471 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

472 
	`lockDbWrôe
(
c
->
db
);

473 i‡((
o
 = 
	`lookupSåögF‹BôComm™d
(
c
,
bôoff£t
,&
expúed
)Ë=
NULL
) {

474 
	`u∆ockDb
(
c
->
db
);

475 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

480 
byã
 = 
bôoff£t
 >> 3;

481 
byãvÆ
 = ((
uöt8_t
*)
o
->
±r
)[
byã
];

482 
bô
 = 7 - (
bôoff£t
 & 0x7);

483 
bôvÆ
 = 
byãvÆ
 & (1 << 
bô
);

486 
byãvÆ
 &~(1 << 
bô
);

487 
byãvÆ
 |((
⁄
 & 0x1Ë<< 
bô
);

488 ((
uöt8_t
*)
o
->
±r
)[
byã
] = 
byãvÆ
;

489 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

490 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£tbô",
c
->
¨gv
[1],c->
db
->
id
);

491 
c
->
vñ
->
dúty
++;

492 
	`addRïly
(
c
, 
bôvÆ
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

493 
	`u∆ockDb
(
c
->
db
);

494 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

495 
	}
}

498 
	$gëbôComm™d
(
˛õ¡
 *
c
) {

499 
robj
 *
o
;

500 
Œbuf
[32];

501 
size_t
 
bôoff£t
;

502 
size_t
 
byã
, 
bô
;

503 
size_t
 
bôvÆ
 = 0;

505 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[2],&
bôoff£t
,0,0Ë!
VR_OK
)

508 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

509 
	`lockDbRód
(
c
->
db
);

510 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

511 
	`u∆ockDb
(
c
->
db
);

512 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

514 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

515 
	`u∆ockDb
(
c
->
db
);

516 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

519 
byã
 = 
bôoff£t
 >> 3;

520 
bô
 = 7 - (
bôoff£t
 & 0x7);

521 i‡(
	`sdsEncodedObje˘
(
o
)) {

522 i‡(
byã
 < 
	`sd¶í
(
o
->
±r
))

523 
bôvÆ
 = ((
uöt8_t
*)
o
->
±r
)[
byã
] & (1 << 
bô
);

525 i‡(
byã
 < (
size_t
)
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
))

526 
bôvÆ
 = 
Œbuf
[
byã
] & (1 << 
bô
);

529 
	`addRïly
(
c
, 
bôvÆ
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

530 
	`u∆ockDb
(
c
->
db
);

531 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

532 
	}
}

535 
	$bô›Comm™d
(
˛õ¡
 *
c
) {

536 *
›«me
 = 
c
->
¨gv
[1]->
±r
;

537 
robj
 *
o
, *
èrgëkey
 = 
c
->
¨gv
[2];

538 
›
, 
j
, 
numkeys
;

539 
robj
 **
obje˘s
;

540 **
§c
;

541 *
Àn
, 
maxÀn
 = 0;

543 
möÀn
 = 0;

544 *
ªs
 = 
NULL
;

547 i‡((
›«me
[0] ='a' || o≤ame[0] ='A'Ë&& !
	`°rˇ£cmp
(opname,"and"))

548 
›
 = 
BITOP_AND
;

549 if((
›«me
[0] ='o' || o≤ame[0] ='O'Ë&& !
	`°rˇ£cmp
(opname,"or"))

550 
›
 = 
BITOP_OR
;

551 if((
›«me
[0] ='x' || o≤ame[0] ='X'Ë&& !
	`°rˇ£cmp
(opname,"xor"))

552 
›
 = 
BITOP_XOR
;

553 if((
›«me
[0] ='n' || o≤ame[0] ='N'Ë&& !
	`°rˇ£cmp
(opname,"not"))

554 
›
 = 
BITOP_NOT
;

556 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

561 i‡(
›
 =
BITOP_NOT
 && 
c
->
¨gc
 != 4) {

562 
	`addRïlyEº‹
(
c
,"BITOP NOT must be called withá single source key.");

567 
numkeys
 = 
c
->
¨gc
 - 3;

568 
§c
 = 
	`dÆloc
((*Ë* 
numkeys
);

569 
Àn
 = 
	`dÆloc
((Ë* 
numkeys
);

570 
obje˘s
 = 
	`dÆloc
((
robj
*Ë* 
numkeys
);

571 
j
 = 0; j < 
numkeys
; j++) {

572 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
+3]);

574 i‡(
o
 =
NULL
) {

575 
obje˘s
[
j
] = 
NULL
;

576 
§c
[
j
] = 
NULL
;

577 
Àn
[
j
] = 0;

578 
möÀn
 = 0;

582 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

583 
i
;

584 
i
 = 0; i < 
j
; i++) {

585 i‡(
obje˘s
[
i
])

586 
	`de¸RefCou¡
(
obje˘s
[
i
]);

588 
	`d‰ì
(
§c
);

589 
	`d‰ì
(
Àn
);

590 
	`d‰ì
(
obje˘s
);

593 
obje˘s
[
j
] = 
	`gëDecodedObje˘
(
o
);

594 
§c
[
j
] = 
obje˘s
[j]->
±r
;

595 
Àn
[
j
] = 
	`sd¶í
(
obje˘s
[j]->
±r
);

596 i‡(
Àn
[
j
] > 
maxÀn
) maxlen =Üen[j];

597 i‡(
j
 =0 || 
Àn
[j] < 
möÀn
) minlen =Üen[j];

601 i‡(
maxÀn
) {

602 
ªs
 = (*Ë
	`sd¢ewÀn
(
NULL
,
maxÀn
);

603 
ouçut
, 
byã
;

604 
i
;

609 
j
 = 0;

610 i‡(
möÀn
 >()*4 && 
numkeys
 <= 16) {

611 *
Õ
[16];

612 *
Ães
 = (*Ë
ªs
;

615 
	`mem˝y
(
Õ
,
§c
,(*)*
numkeys
);

616 
	`mem˝y
(
ªs
,
§c
[0],
möÀn
);

619 i‡(
›
 =
BITOP_AND
) {

620 
möÀn
 >= ()*4) {

621 
i
 = 1; i < 
numkeys
; i++) {

622 
Ães
[0] &
Õ
[
i
][0];

623 
Ães
[1] &
Õ
[
i
][1];

624 
Ães
[2] &
Õ
[
i
][2];

625 
Ães
[3] &
Õ
[
i
][3];

626 
Õ
[
i
]+=4;

628 
Ães
+=4;

629 
j
 += ()*4;

630 
möÀn
 -= ()*4;

632 } i‡(
›
 =
BITOP_OR
) {

633 
möÀn
 >= ()*4) {

634 
i
 = 1; i < 
numkeys
; i++) {

635 
Ães
[0] |
Õ
[
i
][0];

636 
Ães
[1] |
Õ
[
i
][1];

637 
Ães
[2] |
Õ
[
i
][2];

638 
Ães
[3] |
Õ
[
i
][3];

639 
Õ
[
i
]+=4;

641 
Ães
+=4;

642 
j
 += ()*4;

643 
möÀn
 -= ()*4;

645 } i‡(
›
 =
BITOP_XOR
) {

646 
möÀn
 >= ()*4) {

647 
i
 = 1; i < 
numkeys
; i++) {

648 
Ães
[0] ^
Õ
[
i
][0];

649 
Ães
[1] ^
Õ
[
i
][1];

650 
Ães
[2] ^
Õ
[
i
][2];

651 
Ães
[3] ^
Õ
[
i
][3];

652 
Õ
[
i
]+=4;

654 
Ães
+=4;

655 
j
 += ()*4;

656 
möÀn
 -= ()*4;

658 } i‡(
›
 =
BITOP_NOT
) {

659 
möÀn
 >= ()*4) {

660 
Ães
[0] = ~lres[0];

661 
Ães
[1] = ~lres[1];

662 
Ães
[2] = ~lres[2];

663 
Ães
[3] = ~lres[3];

664 
Ães
+=4;

665 
j
 += ()*4;

666 
möÀn
 -= ()*4;

672 ; 
j
 < 
maxÀn
; j++) {

673 
ouçut
 = (
Àn
[0] <
j
Ë? 0 : 
§c
[0][j];

674 i‡(
›
 =
BITOP_NOT
Ë
ouçut
 = ~output;

675 
i
 = 1; i < 
numkeys
; i++) {

676 
byã
 = (
Àn
[
i
] <
j
Ë? 0 : 
§c
[i][j];

677 
›
) {

678 
BITOP_AND
: 
ouçut
 &
byã
; ;

679 
BITOP_OR
: 
ouçut
 |
byã
; ;

680 
BITOP_XOR
: 
ouçut
 ^
byã
; ;

683 
ªs
[
j
] = 
ouçut
;

686 
j
 = 0; j < 
numkeys
; j++) {

687 i‡(
obje˘s
[
j
])

688 
	`de¸RefCou¡
(
obje˘s
[
j
]);

690 
	`d‰ì
(
§c
);

691 
	`d‰ì
(
Àn
);

692 
	`d‰ì
(
obje˘s
);

695 i‡(
maxÀn
) {

696 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
ªs
);

697 
	`£tKey
(
c
->
db
,
èrgëkey
,
o
,
NULL
);

698 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
èrgëkey
,
c
->
db
->
id
);

699 
	`de¸RefCou¡
(
o
);

700 } i‡(
	`dbDñëe
(
c
->
db
,
èrgëkey
)) {

701 
	`sig«lModifõdKey
(
c
->
db
,
èrgëkey
);

702 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
èrgëkey
,
c
->
db
->
id
);

704 
£rvî
.
dúty
++;

705 
	`addRïlyL⁄gL⁄g
(
c
,
maxÀn
);

706 
	}
}

709 
	$bôcou¡Comm™d
(
˛õ¡
 *
c
) {

710 
robj
 *
o
;

711 
°¨t
, 
íd
, 
°æí
;

712 *
p
;

713 
Œbuf
[32];

715 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

716 
	`lockDbRód
(
c
->
db
);

718 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

719 
	`u∆ockDb
(
c
->
db
);

720 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

722 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

723 
	`u∆ockDb
(
c
->
db
);

724 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

730 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

731 
p
 = (*Ë
Œbuf
;

732 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

734 
p
 = (*Ë
o
->
±r
;

735 
°æí
 = 
	`sd¶í
(
o
->
±r
);

739 i‡(
c
->
¨gc
 == 4) {

740 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
) {

741 
	`u∆ockDb
(
c
->
db
);

742 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

745 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
) {

746 
	`u∆ockDb
(
c
->
db
);

747 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

751 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

752 i‡(
íd
 < 0Ëíd = 
°æí
+end;

753 i‡(
°¨t
 < 0) start = 0;

754 i‡(
íd
 < 0)Énd = 0;

755 i‡(
íd
 >
°æí
)Énd = strlen-1;

756 } i‡(
c
->
¨gc
 == 2) {

758 
°¨t
 = 0;

759 
íd
 = 
°æí
-1;

761 
	`u∆ockDb
(
c
->
db
);

762 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

764 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

770 i‡(
°¨t
 > 
íd
) {

771 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

773 
byãs
 = 
íd
-
°¨t
+1;

775 
	`addRïlyL⁄gL⁄g
(
c
,
	`ªdisP›cou¡
(
p
+
°¨t
,
byãs
));

777 
	`u∆ockDb
(
c
->
db
);

778 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

779 
	}
}

782 
	$bôposComm™d
(
˛õ¡
 *
c
) {

783 
robj
 *
o
;

784 
bô
, 
°¨t
, 
íd
, 
°æí
;

785 *
p
;

786 
Œbuf
[32];

787 
íd_giví
 = 0;

791 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
bô
,
NULL
Ë!
VR_OK
)

793 i‡(
bô
 != 0 && bit != 1) {

794 
	`addRïlyEº‹
(
c
, "The bitárgument must be 1 or 0.");

798 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

799 
	`lockDbRód
(
c
->
db
);

803 i‡((
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1])Ë=
NULL
) {

804 
	`u∆ockDb
(
c
->
db
);

805 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

806 
	`addRïlyL⁄gL⁄g
(
c
, 
bô
 ? -1 : 0);

809 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

810 
	`u∆ockDb
(
c
->
db
);

811 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

817 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

818 
p
 = (*Ë
Œbuf
;

819 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

821 
p
 = (*Ë
o
->
±r
;

822 
°æí
 = 
	`sd¶í
(
o
->
±r
);

826 i‡(
c
->
¨gc
 == 4 || c->argc == 5) {

827 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
°¨t
,
NULL
Ë!
VR_OK
) {

828 
	`u∆ockDb
(
c
->
db
);

829 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

832 i‡(
c
->
¨gc
 == 5) {

833 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[4],&
íd
,
NULL
Ë!
VR_OK
) {

834 
	`u∆ockDb
(
c
->
db
);

835 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

838 
íd_giví
 = 1;

840 
íd
 = 
°æí
-1;

843 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

844 i‡(
íd
 < 0Ëíd = 
°æí
+end;

845 i‡(
°¨t
 < 0) start = 0;

846 i‡(
íd
 < 0)Énd = 0;

847 i‡(
íd
 >
°æí
)Énd = strlen-1;

848 } i‡(
c
->
¨gc
 == 3) {

850 
°¨t
 = 0;

851 
íd
 = 
°æí
-1;

853 
	`u∆ockDb
(
c
->
db
);

854 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

856 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

862 i‡(
°¨t
 > 
íd
) {

863 
	`addRïlyL⁄gL⁄g
(
c
, -1);

865 
byãs
 = 
íd
-
°¨t
+1;

866 
pos
 = 
	`ªdisBôpos
(
p
+
°¨t
,
byãs
,
bô
);

875 i‡(
íd_giví
 && 
bô
 =0 && 
pos
 =
byãs
*8) {

876 
	`u∆ockDb
(
c
->
db
);

877 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

878 
	`addRïlyL⁄gL⁄g
(
c
,-1);

881 i‡(
pos
 !-1Ëpo†+
°¨t
*8;

882 
	`addRïlyL⁄gL⁄g
(
c
,
pos
);

884 
	`u∆ockDb
(
c
->
db
);

885 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

886 
	}
}

898 
	sbôfõldOp
 {

899 
uöt64_t
 
	moff£t
;

900 
öt64_t
 
	mi64
;

901 
	m›code
;

902 
	mowty≥
;

903 
	mbôs
;

904 
	msign
;

907 
	$bôfõldComm™d
(
˛õ¡
 *
c
) {

908 
robj
 *
o
;

909 
size_t
 
bôoff£t
;

910 
j
, 
num›s
 = 0, 
ch™ges
 = 0;

911 
bôfõldOp
 *
›s
 = 
NULL
;

912 
owty≥
 = 
BFOVERFLOW_WRAP
;

914 
j
 = 2; j < 
c
->
¨gc
; j++) {

915 
ªm¨gs
 = 
c
->
¨gc
-
j
-1;

916 *
subcmd
 = 
c
->
¨gv
[
j
]->
±r
;

917 
›code
;

918 
i64
 = 0;

919 
sign
 = 0;

920 
bôs
 = 0;

922 i‡(!
	`°rˇ£cmp
(
subcmd
,"gë"Ë&& 
ªm¨gs
 >= 2)

923 
›code
 = 
BITFIELDOP_GET
;

924 i‡(!
	`°rˇ£cmp
(
subcmd
,"£t"Ë&& 
ªm¨gs
 >= 3)

925 
›code
 = 
BITFIELDOP_SET
;

926 i‡(!
	`°rˇ£cmp
(
subcmd
,"ö¸by"Ë&& 
ªm¨gs
 >= 3)

927 
›code
 = 
BITFIELDOP_INCRBY
;

928 i‡(!
	`°rˇ£cmp
(
subcmd
,"ovîÊow"Ë&& 
ªm¨gs
 >= 1) {

929 *
owty≥«me
 = 
c
->
¨gv
[
j
+1]->
±r
;

930 
j
++;

931 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"wrap"))

932 
owty≥
 = 
BFOVERFLOW_WRAP
;

933 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"sat"))

934 
owty≥
 = 
BFOVERFLOW_SAT
;

935 i‡(!
	`°rˇ£cmp
(
owty≥«me
,"fail"))

936 
owty≥
 = 
BFOVERFLOW_FAIL
;

938 
	`addRïlyEº‹
(
c
,"Invalid OVERFLOWÅype specified");

939 
	`d‰ì
(
›s
);

944 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

945 
	`d‰ì
(
›s
);

950 i‡(
	`gëBôfõldTy≥FromArgumít
(
c
,c->
¨gv
[
j
+1],&
sign
,&
bôs
Ë!
VR_OK
) {

951 
	`d‰ì
(
›s
);

955 i‡(
	`gëBôOff£tFromArgumít
(
c
,c->
¨gv
[
j
+2],&
bôoff£t
,1,
bôs
Ë!
VR_OK
){

956 
	`d‰ì
(
›s
);

961 i‡(
›code
 !
BITFIELDOP_GET
) {

962 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
j
+3],&
i64
,
NULL
Ë!
VR_OK
){

963 
	`d‰ì
(
›s
);

969 
›s
 = 
	`dªÆloc
(›s,(*›s)*(
num›s
+1));

970 
›s
[
num›s
].
off£t
 = 
bôoff£t
;

971 
›s
[
num›s
].
i64
 = i64;

972 
›s
[
num›s
].
›code
 = opcode;

973 
›s
[
num›s
].
owty≥
 = owtype;

974 
›s
[
num›s
].
bôs
 = bits;

975 
›s
[
num›s
].
sign
 = sign;

976 
num›s
++;

978 
j
 +3 - (
›code
 =
BITFIELDOP_GET
);

981 
	`addRïlyMu…iBulkLí
(
c
,
num›s
);

984 
j
 = 0; j < 
num›s
; j++) {

985 
bôfõldOp
 *
this›
 = 
›s
+
j
;

988 i‡(
this›
->
›code
 =
BITFIELDOP_SET
 ||

989 
this›
->
›code
 =
BITFIELDOP_INCRBY
)

997 i‡((
o
 = 
	`lookupSåögF‹BôComm™d
(
c
,

998 
this›
->
off£t
 + (this›->
bôs
-1), 
NULL
)) == NULL) ;

1003 i‡(
this›
->
sign
) {

1004 
öt64_t
 
ﬁdvÆ
, 
√wvÆ
, 
wøµed
, 
ªtvÆ
;

1005 
ovîÊow
;

1007 
ﬁdvÆ
 = 
	`gëSig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1008 
this›
->
bôs
);

1010 i‡(
this›
->
›code
 =
BITFIELDOP_INCRBY
) {

1011 
√wvÆ
 = 
ﬁdvÆ
 + 
this›
->
i64
;

1012 
ovîÊow
 = 
	`checkSig√dBôfõldOvîÊow
(
ﬁdvÆ
,

1013 
this›
->
i64
,this›->
bôs
,this›->
owty≥
,&
wøµed
);

1014 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1015 
ªtvÆ
 = 
√wvÆ
;

1017 
√wvÆ
 = 
this›
->
i64
;

1018 
ovîÊow
 = 
	`checkSig√dBôfõldOvîÊow
(
√wvÆ
,

1019 0,
this›
->
bôs
,this›->
owty≥
,&
wøµed
);

1020 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1021 
ªtvÆ
 = 
ﬁdvÆ
;

1026 i‡(!(
ovîÊow
 && 
this›
->
owty≥
 =
BFOVERFLOW_FAIL
)) {

1027 
	`addRïlyL⁄gL⁄g
(
c
,
ªtvÆ
);

1028 
	`£tSig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1029 
this›
->
bôs
,
√wvÆ
);

1031 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1034 
uöt64_t
 
ﬁdvÆ
, 
√wvÆ
, 
wøµed
, 
ªtvÆ
;

1035 
ovîÊow
;

1037 
ﬁdvÆ
 = 
	`gëUnsig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1038 
this›
->
bôs
);

1040 i‡(
this›
->
›code
 =
BITFIELDOP_INCRBY
) {

1041 
√wvÆ
 = 
ﬁdvÆ
 + 
this›
->
i64
;

1042 
ovîÊow
 = 
	`checkUnsig√dBôfõldOvîÊow
(
ﬁdvÆ
,

1043 
this›
->
i64
,this›->
bôs
,this›->
owty≥
,&
wøµed
);

1044 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1045 
ªtvÆ
 = 
√wvÆ
;

1047 
√wvÆ
 = 
this›
->
i64
;

1048 
ovîÊow
 = 
	`checkUnsig√dBôfõldOvîÊow
(
√wvÆ
,

1049 0,
this›
->
bôs
,this›->
owty≥
,&
wøµed
);

1050 i‡(
ovîÊow
Ë
√wvÆ
 = 
wøµed
;

1051 
ªtvÆ
 = 
ﬁdvÆ
;

1055 i‡(!(
ovîÊow
 && 
this›
->
owty≥
 =
BFOVERFLOW_FAIL
)) {

1056 
	`addRïlyL⁄gL⁄g
(
c
,
ªtvÆ
);

1057 
	`£tUnsig√dBôfõld
(
o
->
±r
,
this›
->
off£t
,

1058 
this›
->
bôs
,
√wvÆ
);

1060 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1063 
ch™ges
++;

1066 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]);

1067 
size_t
 
ﬁí
 = (
o
 =
NULL
Ë? 0 : 
	`sd¶í
(o->
±r
);

1068 
buf
[9];

1074 
	`mem£t
(
buf
,0,9);

1075 *
§c
 = 
o
 ? o->
±r
 : 
NULL
;

1076 
i
;

1077 
size_t
 
byã
 = 
this›
->
off£t
 >> 3;

1078 
i
 = 0; i < 9; i++) {

1079 i‡(
§c
 =
NULL
 || 
i
+
byã
 >
ﬁí
) ;

1080 
buf
[
i
] = 
§c
[i+
byã
];

1085 i‡(
this›
->
sign
) {

1086 
öt64_t
 
vÆ
 = 
	`gëSig√dBôfõld
(
buf
,
this›
->
off£t
-(
byã
*8),

1087 
this›
->
bôs
);

1088 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1090 
uöt64_t
 
vÆ
 = 
	`gëUnsig√dBôfõld
(
buf
,
this›
->
off£t
-(
byã
*8),

1091 
this›
->
bôs
);

1092 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1097 i‡(
ch™ges
) {

1098 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1099 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£tbô",
c
->
¨gv
[1],c->
db
->
id
);

1100 
£rvî
.
dúty
 +
ch™ges
;

1102 
	`d‰ì
(
›s
);

1103 
	}
}

	@src/vr_bitops.h

1 #i‚de‡
_VR_BITOPS_H_


2 
	#_VR_BITOPS_H_


	)

4 
size_t
 
ªdisP›cou¡
(*
s
, 
cou¡
);

5 
ªdisBôpos
(*
s
, 
cou¡
, 
bô
);

6 
£tUnsig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, uöt64_à
vÆue
);

7 
£tSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
, 
öt64_t
 
vÆue
);

8 
uöt64_t
 
gëUnsig√dBôfõld
(*
p
, uöt64_à
off£t
, uöt64_à
bôs
);

9 
öt64_t
 
gëSig√dBôfõld
(*
p
, 
uöt64_t
 
off£t
, uöt64_à
bôs
);

10 
checkUnsig√dBôfõldOvîÊow
(
uöt64_t
 
vÆue
, 
öt64_t
 
ö¸
, uöt64_à
bôs
, 
owty≥
, uöt64_à*
limô
);

11 
checkSig√dBôfõldOvîÊow
(
öt64_t
 
vÆue
, i¡64_à
ö¸
, 
uöt64_t
 
bôs
, 
owty≥
, i¡64_à*
limô
);

12 
¥ötBôs
(*
p
, 
cou¡
);

13 
gëBôOff£tFromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, 
size_t
 *
off£t
, 
hash
, 
bôs
);

14 
gëBôfõldTy≥FromArgumít
(
˛õ¡
 *
c
, 
robj
 *
o
, *
sign
, *
bôs
);

15 
robj
 *
lookupSåögF‹BôComm™d
(
˛õ¡
 *
c
, 
size_t
 
maxbô
, *
expúed
);

16 
£tbôComm™d
(
˛õ¡
 *
c
);

17 
gëbôComm™d
(
˛õ¡
 *
c
);

18 
bô›Comm™d
(
˛õ¡
 *
c
);

19 
bôcou¡Comm™d
(
˛õ¡
 *
c
);

20 
bôposComm™d
(
˛õ¡
 *
c
);

21 
bôfõldComm™d
(
˛õ¡
 *
c
);

	@src/vr_block.c

1 
	~<vr_c‹e.h
>

6 
	$unblockClõ¡
(
˛õ¡
 *
c
) {

7 i‡(
c
->
bty≥
 =
BLOCKED_LIST
) {

8 
	`unblockClõ¡WaôögD©a
(
c
);

9 } i‡(
c
->
bty≥
 =
BLOCKED_WAIT
) {

10 
	`unblockClõ¡WaôögRïliˇs
(
c
);

12 
	`£rvîP™ic
("Unknown btype in unblockClient().");

16 
c
->
Êags
 &~
CLIENT_BLOCKED
;

17 
c
->
bty≥
 = 
BLOCKED_NONE
;

18 
c
->
vñ
->
bp›_blocked_˛õ¡s
--;

21 i‡(!(
c
->
Êags
 & 
CLIENT_UNBLOCKED
)) {

22 
c
->
Êags
 |
CLIENT_UNBLOCKED
;

23 
	`dli°AddNodeTaû
(
c
->
vñ
->
unblocked_˛õ¡s
,c);

25 
	}
}

35 
	$gëTimeoutFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
obje˘
, *
timeout
, 
unô
) {

36 
tvÆ
;

38 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
obje˘
,&
tvÆ
,

39 "timeouài†nŸá¿öãgî o∏ouào‡ønge"Ë!
VR_OK
)

40  
VR_ERROR
;

42 i‡(
tvÆ
 < 0) {

43 
	`addRïlyEº‹
(
c
,"timeout isÇegative");

44  
VR_ERROR
;

47 i‡(
tvÆ
 > 0) {

48 i‡(
unô
 =
UNIT_SECONDS
Ë
tvÆ
 *= 1000;

49 
tvÆ
 +
	`vr_m£c_now
();

51 *
timeout
 = 
tvÆ
;

53  
VR_OK
;

54 
	}
}

59 
	$blockClõ¡
(
˛õ¡
 *
c
, 
bty≥
) {

60 
c
->
Êags
 |
CLIENT_BLOCKED
;

61 
c
->
bty≥
 = btype;

62 
c
->
vñ
->
bp›_blocked_˛õ¡s
++;

63 
	}
}

	@src/vr_block.h

1 #i‚de‡
_VR_BLOCK_H_


2 
	#_VR_BLOCK_H_


	)

6 
	sblockögSèã
 {

8 
	mtimeout
;

12 
di˘
 *
	mkeys
;

14 
robj
 *
	mèrgë
;

18 
	mnumª∂iˇs
;

19 
	mª∂off£t
;

20 } 
	tblockögSèã
;

22 
blockClõ¡
(
˛õ¡
 *
c
, 
bty≥
);

23 
unblockClõ¡
(
˛õ¡
 *
c
);

24 
gëTimeoutFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
obje˘
, *
timeout
, 
unô
);

	@src/vr_client.c

1 
	~<vr_c‹e.h
>

3 
	gncuº_cc⁄n
 = 0;

5 
£tPrŸocﬁEº‹
(
˛õ¡
 *
c
, 
pos
);

10 
size_t
 
	$sdsZmÆlocSize
(
sds
 
s
) {

11 *
sh
 = 
	`sdsAŒocPå
(
s
);

12  
	`dmÆloc_size
(
sh
);

13 
	}
}

15 *
	$dupClõ¡RïlyVÆue
(*
o
) {

16  
o
;

17 
	}
}

19 
	$‰ìClõ¡RïlyVÆue
(*
o
) {

20 
	`‰ìObje˘
(
o
);

21 
	}
}

23 
	$li°M©chObje˘s
(*
a
, *
b
) {

24  
	`equÆSåögObje˘s
(
a
,
b
);

25 
	}
}

27 
˛õ¡
 *
	$¸óãClõ¡
(
vr_evíéo›
 *
vñ
, 
c⁄n
 *conn) {

28 
˛õ¡
 *
c
 = 
	`dÆloc
((client));

34 i‡(
c⁄n
->
sd
 != -1) {

35 
	`vr_£t_n⁄blockög
(
c⁄n
->
sd
);

36 
	`vr_£t_t˝nodñay
(
c⁄n
->
sd
);

37 i‡(
£rvî
.
t˝kì∑live
)

38 
	`vr_£t_t˝kì∑live
(
c⁄n
->
sd
,
£rvî
.
t˝kì∑live
,0,0);

39 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
,
c⁄n
->
sd
,
AE_READABLE
,

40 
ªadQuîyFromClõ¡
, 
c
Ë=
AE_ERR
)

42 
	`log_îr‹
("UnrecoverableÉrror creating client ipfd fileÉvent.");

43 
	`d‰ì
(
c
);

44  
NULL
;

48 
	`£À˘Db
(
c
,0);

49 
c
->
id
 = 
vñ
->
√xt_˛õ¡_id
++;

50 
c
->
c⁄n
 = conn;

51 
c
->
vñ
 = vel;

52 
c
->
sˇnid
 = -1;

53 
c
->
«me
 = 
NULL
;

54 
c
->
buÂos
 = 0;

55 
c
->
quîybuf
 = 
	`sd£m±y
();

56 
c
->
quîybuf_≥ak
 = 0;

57 
c
->
ªqty≥
 = 0;

58 
c
->
¨gc
 = 0;

59 
c
->
¨gv
 = 
NULL
;

60 
c
->
cmd
 = c->
œ°cmd
 = 
NULL
;

61 
c
->
mu…ibulkÀn
 = 0;

62 
c
->
bulkÀn
 = -1;

63 
c
->
£¡Àn
 = 0;

64 
c
->
Êags
 = 0;

65 
c
->
˘ime
 = c->
œ°öãø˘i⁄
 = 
vñ
->
unixtime
;

66 
c
->
authítiˇãd
 = 0;

67 
c
->
ª∂°©e
 = 
REPL_STATE_NONE
;

68 
c
->
ª∂_put_⁄löe_⁄_ack
 = 0;

69 
c
->
ª∂off
 = 0;

70 
c
->
ª∂_ack_off
 = 0;

71 
c
->
ª∂_ack_time
 = 0;

72 
c
->
¶ave_li°íög_p‹t
 = 0;

73 
c
->
¶ave_ˇ∑
 = 
SLAVE_CAPA_NONE
;

74 
c
->
ª∂y
 = 
	`dli°Cª©e
();

75 
c
->
ª∂y_byãs
 = 0;

76 
c
->
obuf_so·_limô_ªached_time
 = 0;

77 
	`dli°SëFªeMëhod
(
c
->
ª∂y
,
‰ìClõ¡RïlyVÆue
);

78 
	`dli°SëDupMëhod
(
c
->
ª∂y
,
dupClõ¡RïlyVÆue
);

79 
c
->
bty≥
 = 
BLOCKED_NONE
;

80 
c
->
bp›
.
timeout
 = 0;

81 
c
->
bp›
.
keys
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

82 
c
->
bp›
.
èrgë
 = 
NULL
;

83 
c
->
bp›
.
numª∂iˇs
 = 0;

84 
c
->
bp›
.
ª∂off£t
 = 0;

85 
c
->
woff
 = 0;

86 
c
->
w©ched_keys
 = 
	`dli°Cª©e
();

87 
c
->
pubsub_ch™√ls
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

88 
c
->
pubsub_∑âîns
 = 
	`dli°Cª©e
();

89 
c
->
≥îid
 = 
NULL
;

90 
c
->
curidx
 = -1;

91 
c
->
èridx
 = -1;

92 
c
->
°ïs
 = 0;

93 
c
->
ˇche
 = 
NULL
;

94 
	`dli°SëFªeMëhod
(
c
->
pubsub_∑âîns
,
de¸RefCou¡Void
);

95 
	`dli°SëM©chMëhod
(
c
->
pubsub_∑âîns
,
li°M©chObje˘s
);

96 i‡(
c⁄n
->
sd
 !-1Ë
	`dli°AddNodeTaû
(
vñ
->
˛õ¡s
,
c
);

97 
	`öôClõ¡Mu…iSèã
(
c
);

98  
c
;

99 
	}
}

123 
	$¥ï¨eClõ¡ToWrôe
(
˛õ¡
 *
c
) {

126 i‡(
c
->
Êags
 & 
CLIENT_LUA
Ë 
VR_OK
;

129 i‡(
c
->
Êags
 & (
CLIENT_REPLY_OFF
|
CLIENT_REPLY_SKIP
)Ë 
VR_ERROR
;

133 i‡((
c
->
Êags
 & 
CLIENT_MASTER
) &&

134 !(
c
->
Êags
 & 
CLIENT_MASTER_FORCE_REPLY
)Ë 
VR_ERROR
;

136 i‡(
c
->
c⁄n
->
sd
 <0Ë 
VR_ERROR
;

142 i‡(!
	`˛õ¡HasPídögRïlõs
(
c
) &&

143 !(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) &&

144 (
c
->
ª∂°©e
 =
REPL_STATE_NONE
 ||

145 (
c
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 && !c->
ª∂_put_⁄löe_⁄_ack
)))

153 
c
->
Êags
 |
CLIENT_PENDING_WRITE
;

154 
	`dli°AddNodeHód
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,c);

158  
VR_OK
;

159 
	}
}

163 
robj
 *
	$dupLa°Obje˘IfNìded
(
dli°
 *
ª∂y
) {

164 
robj
 *
√w
, *
cur
;

165 
dli°Node
 *
 
;

166 
	`ASSERT
(
	`dli°Lígth
(
ª∂y
) > 0);

167 
 
 = 
	`dli°La°
(
ª∂y
);

168 
cur
 = 
	`dli°NodeVÆue
(
 
);

169 i‡(
cur
->
c⁄°™t
) {

170 
√w
 = 
	`dupSåögObje˘
(
cur
);

171 
	`dli°NodeVÆue
(
 
Ë
√w
;

173  
	`dli°NodeVÆue
(
 
);

174 
	}
}

180 
	$_addRïlyToBuf„r
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

181 
size_t
 
avaûabÀ
 = (
c
->
buf
)-c->
buÂos
;

183 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
Ë 
VR_OK
;

187 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë> 0Ë 
VR_ERROR
;

190 i‡(
Àn
 > 
avaûabÀ
Ë 
VR_ERROR
;

192 
	`mem˝y
(
c
->
buf
+c->
buÂos
,
s
,
Àn
);

193 
c
->
buÂos
+=
Àn
;

194  
VR_OK
;

195 
	}
}

197 
	$_addRïlyObje˘ToLi°
(
˛õ¡
 *
c
, 
robj
 *
o
) {

198 
robj
 *
èû
, *
obj
;

200 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

202 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

203 i‡(
o
->
c⁄°™t
)

204 
obj
 = 
o
;

206 
obj
 = 
	`dupSåögObje˘
(
o
);

207 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
obj
);

208 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
obj
);

210 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

213 i‡(
èû
->
±r
 !
NULL
 &&

214 
èû
->
ícodög
 =
OBJ_ENCODING_RAW
 &&

215 
	`sd¶í
(
èû
->
±r
)+sd¶í(
o
->±rË<
PROTO_REPLY_CHUNK_BYTES
)

217 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

218 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

219 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
o
->±r,
	`sd¶í
(o->ptr));

220 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

222 i‡(
o
->
c⁄°™t
)

223 
obj
 = 
o
;

225 
obj
 = 
	`dupSåögObje˘
(
o
);

226 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
obj
);

227 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
obj
);

230 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

231 
	}
}

235 
	$_addRïlySdsToLi°
(
˛õ¡
 *
c
, 
sds
 
s
) {

236 
robj
 *
èû
;

238 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) {

239 
	`sds‰ì
(
s
);

243 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

244 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
s
));

245 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
s
);

247 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

250 i‡(
èû
->
±r
 !
NULL
 &&Åaû->
ícodög
 =
OBJ_ENCODING_RAW
 &&

251 
	`sd¶í
(
èû
->
±r
)+sd¶í(
s
Ë<
PROTO_REPLY_CHUNK_BYTES
)

253 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

254 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

255 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
s
,
	`sd¶í
(s));

256 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

257 
	`sds‰ì
(
s
);

259 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
s
));

260 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
s
);

263 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

264 
	}
}

266 
	$_addRïlySåögToLi°
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

267 
robj
 *
èû
;

269 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

271 i‡(
	`dli°Lígth
(
c
->
ª∂y
) == 0) {

272 
robj
 *
o
 = 
	`¸óãSåögObje˘
(
s
,
Àn
);

274 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
o
);

275 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

277 
èû
 = 
	`dli°NodeVÆue
(
	`dli°La°
(
c
->
ª∂y
));

280 i‡(
èû
->
±r
 !
NULL
 &&Åaû->
ícodög
 =
OBJ_ENCODING_RAW
 &&

281 
	`sd¶í
(
èû
->
±r
)+
Àn
 <
PROTO_REPLY_CHUNK_BYTES
)

283 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
èû
->
±r
);

284 
èû
 = 
	`dupLa°Obje˘IfNìded
(
c
->
ª∂y
);

285 
èû
->
±r
 = 
	`sdsˇéí
—aû->±r,
s
,
Àn
);

286 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
èû
->
±r
);

288 
robj
 *
o
 = 
	`¸óãSåögObje˘
(
s
,
Àn
);

290 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
o
);

291 
c
->
ª∂y_byãs
 +
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

294 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

295 
	}
}

302 
	$addRïly
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

303 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) ;

312 i‡(
	`sdsEncodedObje˘
(
obj
)) {

313 i‡(
	`_addRïlyToBuf„r
(
c
,
obj
->
±r
,
	`sd¶í
(obj->±r)Ë!
VR_OK
)

314 
	`_addRïlyObje˘ToLi°
(
c
,
obj
);

315 } i‡(
obj
->
ícodög
 =
OBJ_ENCODING_INT
) {

316 
robj
 *
obj_√w
;

320 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë=0 && ((c->
buf
Ë- c->
buÂos
) >= 32) {

321 
buf
[32];

322 
Àn
;

324 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),()
obj
->
±r
);

325 i‡(
	`_addRïlyToBuf„r
(
c
,
buf
,
Àn
Ë=
VR_OK
)

330 
obj_√w
 = 
	`gëDecodedObje˘
(
obj
);

331 i‡(
	`_addRïlyToBuf„r
(
c
,
obj_√w
->
±r
,
	`sd¶í
(obj_√w->±r)Ë!
VR_OK
)

332 
	`_addRïlyObje˘ToLi°
(
c
,
obj_√w
);

333 i‡(
obj_√w
 !
obj
Ë
	`‰ìObje˘
(obj_new);

335 
	`£rvîP™ic
("Wrong obj->encoding ináddReply()");

337 
	}
}

339 
	$addRïlySds
(
˛õ¡
 *
c
, 
sds
 
s
) {

340 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) {

342 
	`sds‰ì
(
s
);

345 i‡(
	`_addRïlyToBuf„r
(
c
,
s
,
	`sd¶í
(s)Ë=
VR_OK
) {

346 
	`sds‰ì
(
s
);

349 
	`_addRïlySdsToLi°
(
c
,
s
);

351 
	}
}

353 
	$addRïlySåög
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

354 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
) ;

355 i‡(
	`_addRïlyToBuf„r
(
c
,
s
,
Àn
Ë!
VR_OK
)

356 
	`_addRïlySåögToLi°
(
c
,
s
,
Àn
);

357 
	}
}

359 
	$addRïlyEº‹Lígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

360 
	`addRïlySåög
(
c
,"-ERR ",5);

361 
	`addRïlySåög
(
c
,
s
,
Àn
);

362 
	`addRïlySåög
(
c
,"\r\n",2);

363 
	}
}

365 
	$addRïlyEº‹
(
˛õ¡
 *
c
, c⁄° *
îr
) {

366 
	`addRïlyEº‹Lígth
(
c
,
îr
,
	`°æí
(err));

367 
	}
}

369 
	$addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...) {

370 
size_t
 
l
, 
j
;

371 
va_li°
 
≠
;

372 
	`va_°¨t
(
≠
,
fmt
);

373 
sds
 
s
 = 
	`sdsˇtv¥ötf
(
	`sd£m±y
(),
fmt
,
≠
);

374 
	`va_íd
(
≠
);

377 
l
 = 
	`sd¶í
(
s
);

378 
j
 = 0; j < 
l
; j++) {

379 i‡(
s
[
j
] == '\r' || s[j] == '\n') s[j] = ' ';

381 
	`addRïlyEº‹Lígth
(
c
,
s
,
	`sd¶í
(s));

382 
	`sds‰ì
(
s
);

383 
	}
}

385 
	$addRïlySètusLígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
) {

386 
	`addRïlySåög
(
c
,"+",1);

387 
	`addRïlySåög
(
c
,
s
,
Àn
);

388 
	`addRïlySåög
(
c
,"\r\n",2);

389 
	}
}

391 
	$addRïlySètus
(
˛õ¡
 *
c
, c⁄° *
°©us
) {

392 
	`addRïlySètusLígth
(
c
,
°©us
,
	`°æí
(status));

393 
	}
}

395 
	$addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...) {

396 
va_li°
 
≠
;

397 
	`va_°¨t
(
≠
,
fmt
);

398 
sds
 
s
 = 
	`sdsˇtv¥ötf
(
	`sd£m±y
(),
fmt
,
≠
);

399 
	`va_íd
(
≠
);

400 
	`addRïlySètusLígth
(
c
,
s
,
	`sd¶í
(s));

401 
	`sds‰ì
(
s
);

402 
	}
}

406 *
	$addDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
) {

410 i‡(
	`¥ï¨eClõ¡ToWrôe
(
c
Ë!
VR_OK
Ë 
NULL
;

411 
	`dli°AddNodeTaû
(
c
->
ª∂y
,
	`¸óãObje˘
(
OBJ_STRING
,
NULL
));

412  
	`dli°La°
(
c
->
ª∂y
);

413 
	}
}

416 
	$£tDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
, *
node
, 
Àngth
) {

417 
dli°Node
 *
 
 = (dli°Node*)
node
;

418 
robj
 *
Àn
, *
√xt
;

421 i‡(
node
 =
NULL
) ;

423 
Àn
 = 
	`dli°NodeVÆue
(
 
);

424 
Àn
->
±r
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"*%ld\r\n",
Àngth
);

425 
Àn
->
ícodög
 = 
OBJ_ENCODING_RAW
;

426 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
Àn
->
±r
);

427 i‡(
 
->
√xt
 !
NULL
) {

428 
√xt
 = 
	`dli°NodeVÆue
(
 
->next);

431 i‡(
√xt
->
±r
 !
NULL
) {

432 
c
->
ª∂y_byãs
 -
	`sdsZmÆlocSize
(
Àn
->
±r
);

433 
c
->
ª∂y_byãs
 -
	`gëSåögObje˘SdsU£dMem‹y
(
√xt
);

434 
Àn
->
±r
 = 
	`sdsˇéí
÷í->±r,
√xt
->±r,
	`sd¶í
(next->ptr));

435 
c
->
ª∂y_byãs
 +
	`sdsZmÆlocSize
(
Àn
->
±r
);

436 
	`dli°DñNode
(
c
->
ª∂y
,
 
->
√xt
);

439 
	`asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
c
);

440 
	}
}

443 
	$addRïlyDoubÀ
(
˛õ¡
 *
c
, 
d
) {

444 
dbuf
[128], 
sbuf
[128];

445 
dÀn
, 
¶í
;

446 i‡(
	`isöf
(
d
)) {

449 
	`addRïlyBulkCSåög
(
c
, 
d
 > 0 ? "inf" : "-inf");

451 
dÀn
 = 
	`¢¥ötf
(
dbuf
,(dbuf),"%.17g",
d
);

452 
¶í
 = 
	`¢¥ötf
(
sbuf
,(sbuf),"$%d\r\n%s\r\n",
dÀn
,
dbuf
);

453 
	`addRïlySåög
(
c
,
sbuf
,
¶í
);

455 
	}
}

460 
	$addRïlyHum™L⁄gDoubÀ
(
˛õ¡
 *
c
, 
d
) {

461 
robj
 *
o
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
d
,1);

462 
	`addRïlyBulk
(
c
,
o
);

463 
	`de¸RefCou¡
(
o
);

464 
	}
}

468 
	$addRïlyL⁄gL⁄gWôhPªfix
(
˛õ¡
 *
c
, 
Œ
, 
¥efix
) {

469 
buf
[128];

470 
Àn
;

475 i‡(
¥efix
 ='*' && 
Œ
 < 
OBJ_SHARED_BULKHDR_LEN
 &&Ül >= 0) {

476 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[
Œ
]);

478 } i‡(
¥efix
 ='$' && 
Œ
 < 
OBJ_SHARED_BULKHDR_LEN
 &&Ül >= 0) {

479 
	`addRïly
(
c
,
sh¨ed
.
bulkhdr
[
Œ
]);

483 
buf
[0] = 
¥efix
;

484 
Àn
 = 
	`Œ2°rög
(
buf
+1,(buf)-1,
Œ
);

485 
buf
[
Àn
+1] = '\r';

486 
buf
[
Àn
+2] = '\n';

487 
	`addRïlySåög
(
c
,
buf
,
Àn
+3);

488 
	}
}

490 
	$addRïlyL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
) {

491 i‡(
Œ
 == 0)

492 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

493 i‡(
Œ
 == 1)

494 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

496 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Œ
,':');

497 
	}
}

499 
	$addRïlyMu…iBulkLí
(
˛õ¡
 *
c
, 
Àngth
) {

500 i‡(
Àngth
 < 
OBJ_SHARED_BULKHDR_LEN
)

501 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[
Àngth
]);

503 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àngth
,'*');

504 
	}
}

507 
	$addRïlyBulkLí
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

508 
size_t
 
Àn
;

510 i‡(
	`sdsEncodedObje˘
(
obj
)) {

511 
Àn
 = 
	`sd¶í
(
obj
->
±r
);

513 
n
 = ()
obj
->
±r
;

516 
Àn
 = 1;

517 i‡(
n
 < 0) {

518 
Àn
++;

519 
n
 = -n;

521 (
n
 =Ç/10) != 0) {

522 
Àn
++;

526 i‡(
Àn
 < 
OBJ_SHARED_BULKHDR_LEN
)

527 
	`addRïly
(
c
,
sh¨ed
.
bulkhdr
[
Àn
]);

529 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àn
,'$');

530 
	}
}

533 
	$addRïlyBulk
(
˛õ¡
 *
c
, 
robj
 *
obj
) {

534 
	`addRïlyBulkLí
(
c
,
obj
);

535 
	`addRïly
(
c
,
obj
);

536 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

537 
	}
}

540 
	$addRïlyBulkCBuf„r
(
˛õ¡
 *
c
, c⁄° *
p
, 
size_t
 
Àn
) {

541 
	`addRïlyL⁄gL⁄gWôhPªfix
(
c
,
Àn
,'$');

542 
	`addRïlySåög
(
c
,
p
,
Àn
);

543 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

544 
	}
}

547 
	$addRïlyBulkSds
(
˛õ¡
 *
c
, 
sds
 
s
) {

548 
	`addRïlySds
(
c
,
	`sdsˇtfmt
(
	`sd£m±y
(),"$%u\r\n",

549 ()
	`sd¶í
(
s
)));

550 
	`addRïlySds
(
c
,
s
);

551 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

552 
	}
}

555 
	$addRïlyBulkCSåög
(
˛õ¡
 *
c
, c⁄° *
s
) {

556 i‡(
s
 =
NULL
) {

557 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

559 
	`addRïlyBulkCBuf„r
(
c
,
s
,
	`°æí
(s));

561 
	}
}

564 
	$addRïlyBulkL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
) {

565 
buf
[64];

566 
Àn
;

568 
Àn
 = 
	`Œ2°rög
(
buf
,64,
Œ
);

569 
	`addRïlyBulkCBuf„r
(
c
,
buf
,
Àn
);

570 
	}
}

575 
	$c›yClõ¡OuçutBuf„r
(
˛õ¡
 *
d°
, clõ¡ *
§c
) {

576 
	`dli°Rñó£
(
d°
->
ª∂y
);

577 
d°
->
ª∂y
 = 
	`dli°Dup
(
§c
->reply);

578 
	`mem˝y
(
d°
->
buf
,
§c
->buf,§c->
buÂos
);

579 
d°
->
buÂos
 = 
§c
->bufpos;

580 
d°
->
ª∂y_byãs
 = 
§c
->reply_bytes;

581 
	}
}

585 
	$˛õ¡HasPídögRïlõs
(
˛õ¡
 *
c
) {

586  
c
->
buÂos
 || 
	`dli°Lígth
(c->
ª∂y
);

587 
	}
}

589 
	$‰ìClõ¡Argv
(
˛õ¡
 *
c
) {

590 
j
;

591 
j
 = 0; j < 
c
->
¨gc
; j++)

592 
	`‰ìObje˘
(
c
->
¨gv
[
j
]);

593 
c
->
¨gc
 = 0;

594 
c
->
cmd
 = 
NULL
;

595 
	}
}

600 
	$disc⁄√˘Sœves
() {

601 
	`dli°Lígth
(
ª∂
.
¶aves
)) {

602 
dli°Node
 *
 
 = 
	`dli°Fú°
(
ª∂
.
¶aves
);

603 
	`‰ìClõ¡
((
˛õ¡
*)
 
->
vÆue
);

605 
	}
}

610 
	$u∆ökClõ¡FromEvíéo›
(
˛õ¡
 *
c
) {

611 
dli°Node
 *
 
;

612 
vr_evíéo›
 *
vñ
 = 
c
->vel;

614 
c
->
vñ
 = 
NULL
;

616 i‡(
c
->
°ïs
 >= 1) ;

619 i‡(
vñ
->
cuºít_˛õ¡
 =
c
Ëvñ->cuºít_˛õ¡ = 
NULL
;

624 i‡(
c
->
c⁄n
->
sd
 != -1) {

626 
 
 = 
	`dli°SórchKey
(
vñ
->
˛õ¡s
,
c
);

627 
	`ASSERT
(
 
 !
NULL
);

628 
	`dli°DñNode
(
vñ
->
˛õ¡s
,
 
);

631 
	`´DñëeFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_READABLE
);

632 
	`´DñëeFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_WRITABLE
);

636 i‡(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) {

637 
 
 = 
	`dli°SórchKey
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
c
);

638 
	`ASSERT
(
 
 !
NULL
);

639 
	`dli°DñNode
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

640 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

645 i‡(
c
->
Êags
 & 
CLIENT_UNBLOCKED
) {

646 
 
 = 
	`dli°SórchKey
(
vñ
->
unblocked_˛õ¡s
,
c
);

647 
	`ASSERT
(
 
 !
NULL
);

648 
	`dli°DñNode
(
vñ
->
unblocked_˛õ¡s
,
 
);

649 
c
->
Êags
 &~
CLIENT_UNBLOCKED
;

651 
	}
}

653 
	$lökClõ¡ToEvíéo›
(
˛õ¡
 *
c
,
vr_evíéo›
 *
vñ
) {

654 
	`dli°Push
(
vñ
->
˛õ¡s
,
c
);

655 
c
->
vñ
 = vel;

656 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
,
c
->
c⁄n
->
sd
,
AE_READABLE
,

657 
ªadQuîyFromClõ¡
,
c
Ë=
AE_ERR
)

659 
	`‰ìClõ¡
(
c
);

664 
	`¥o˚ssI≈utBuf„r
(
c
);

665 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

666 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

668 i‡(
	`˛õ¡HasPídögRïlõs
(
c
) &&

669 !(
c
->
Êags
&
CLIENT_PENDING_WRITE
)) {

670 i‡(
	`´Cª©eFûeEvít
(
vñ
->
ñ
, 
c
->
c⁄n
->
sd
, 
AE_WRITABLE
,

671 
£ndRïlyToClõ¡
, 
c
Ë=
AE_ERR
)

673 
	`‰ìClõ¡Async
(
c
);

677 
	}
}

682 
	$u∆ökClõ¡
(
˛õ¡
 *
c
) {

683 
dli°Node
 *
 
;

686 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =cËc->vñ->cuºít_˛õ¡ = 
NULL
;

691 i‡(
c
->
c⁄n
->
sd
 != -1) {

693 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s
,c);

694 
	`ASSERT
(
 
 !
NULL
);

695 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s
,
 
);

698 
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_READABLE
);

699 
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_WRITABLE
);

700 
	`c⁄n_put
(
c
->
c⁄n
);

701 
c
->
c⁄n
 = 
NULL
;

705 i‡(
c
->
Êags
 & 
CLIENT_PENDING_WRITE
) {

706 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,c);

707 
	`ASSERT
(
 
 !
NULL
);

708 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

709 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

714 i‡(
c
->
Êags
 & 
CLIENT_UNBLOCKED
) {

715 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
unblocked_˛õ¡s
,c);

716 
	`ASSERT
(
 
 !
NULL
);

717 
	`dli°DñNode
(
c
->
vñ
->
unblocked_˛õ¡s
,
 
);

718 
c
->
Êags
 &~
CLIENT_UNBLOCKED
;

720 
	}
}

722 
	$‰ìClõ¡
(
˛õ¡
 *
c
) {

723 
dli°Node
 *
 
;

730 i‡(
ª∂
.
rﬁe
 =
REPLICATION_ROLE_MASTER
 && 
c
->
Êags
 & 
CLIENT_MASTER
) {

731 
	`log_w¨n
("connection with masterÜost.");

732 i‡(!(
c
->
Êags
 & (
CLIENT_CLOSE_AFTER_REPLY
|

733 
CLIENT_CLOSE_ASAP
|

734 
CLIENT_BLOCKED
|

735 
CLIENT_UNBLOCKED
)))

737 
	`ª∂iˇti⁄CacheMa°î
(
c
);

743 i‡((
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& !(c->Êag†& 
CLIENT_MONITOR
)) {

744 
	`log_w¨n
("connection with slave %sÜost.",

745 
	`ª∂iˇti⁄GëSœveName
(
c
));

749 
	`sds‰ì
(
c
->
quîybuf
);

750 
c
->
quîybuf
 = 
NULL
;

753 i‡(
c
->
Êags
 & 
CLIENT_BLOCKED
Ë
	`unblockClõ¡
(c);

754 
	`di˘Rñó£
(
c
->
bp›
.
keys
);

757 
	`unw©chAŒKeys
(
c
);

758 
	`dli°Rñó£
(
c
->
w©ched_keys
);

761 
	`pubsubUnsubs¸ibeAŒCh™√ls
(
c
,0);

762 
	`pubsubUnsubs¸ibeAŒP©ã∫s
(
c
,0);

763 
	`di˘Rñó£
(
c
->
pubsub_ch™√ls
);

764 
	`dli°Rñó£
(
c
->
pubsub_∑âîns
);

767 
	`dli°Rñó£
(
c
->
ª∂y
);

768 
	`‰ìClõ¡Argv
(
c
);

773 
	`u∆ökClõ¡
(
c
);

777 i‡(
c
->
Êags
 & 
CLIENT_SLAVE
) {

778 i‡(
c
->
ª∂°©e
 =
SLAVE_STATE_SEND_BULK
) {

779 i‡(
c
->
ª∂dbfd
 !-1Ë
	`˛o£
(c->repldbfd);

780 i‡(
c
->
ª∂¥ómbÀ
Ë
	`sds‰ì
(c->replpreamble);

782 
dli°
 *
l
 = (
c
->
Êags
 & 
CLIENT_MONITOR
Ë? 
£rvî
.
m⁄ô‹s
 : 
ª∂
.
¶aves
;

783 
 
 = 
	`dli°SórchKey
(
l
,
c
);

784 
	`ASSERT
(
 
 !
NULL
);

785 
	`dli°DñNode
(
l
,
 
);

789 i‡(
c
->
Êags
 & 
CLIENT_SLAVE
 && 
	`dli°Lígth
(
ª∂
.
¶aves
) == 0)

790 
ª∂
.
ª∂_no_¶aves_sö˚
 = 
c
->
vñ
->
unixtime
;

791 
	`ª‰eshGoodSœvesCou¡
();

796 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ë
	`ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

800 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_ASAP
) {

801 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_to_˛o£
,c);

802 
	`ASSERT
(
 
 !
NULL
);

803 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_to_˛o£
,
 
);

808 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

809 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

810 
	`‰ìClõ¡Mu…iSèã
(
c
);

811 
	`sds‰ì
(
c
->
≥îid
);

812 
	`d‰ì
(
c
);

813 
	}
}

819 
	$‰ìClõ¡Async
(
˛õ¡
 *
c
) {

820 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_ASAP
 || c->Êag†& 
CLIENT_LUA
) ;

821 
c
->
Êags
 |
CLIENT_CLOSE_ASAP
;

822 
	`dli°AddNodeTaû
(
c
->
vñ
->
˛õ¡s_to_˛o£
,c);

823 
	}
}

825 
	$‰ìClõ¡sInAsyncFªeQueue
(
vr_evíéo›
 *
vñ
) {

826 
	`dli°Lígth
(
vñ
->
˛õ¡s_to_˛o£
)) {

827 
dli°Node
 *
 
 = 
	`dli°Fú°
(
vñ
->
˛õ¡s_to_˛o£
);

828 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

830 
c
->
Êags
 &~
CLIENT_CLOSE_ASAP
;

831 
	`‰ìClõ¡
(
c
);

832 
	`dli°DñNode
(
vñ
->
˛õ¡s_to_˛o£
,
 
);

834 
	}
}

838 
	$wrôeToClõ¡
(
fd
, 
˛õ¡
 *
c
, 
h™dÀr_ö°ÆÀd
) {

839 
ssize_t
 
nwrôãn
 = 0, 
tŸwrôãn
 = 0;

840 
size_t
 
objÀn
;

841 
size_t
 
objmem
;

842 
robj
 *
o
;

843 
maxmem‹y
;

845 
maxmem‹y
 = 
c
->
vñ
->
cc
.maxmemory;

846 
	`˛õ¡HasPídögRïlõs
(
c
)) {

847 i‡(
c
->
buÂos
 > 0) {

848 
nwrôãn
 = 
	`vr_wrôe
(
fd
,
c
->
buf
+c->
£¡Àn
,c->
buÂos
-c->sentlen);

849 i‡(
nwrôãn
 <= 0) ;

850 
c
->
£¡Àn
 +
nwrôãn
;

851 
tŸwrôãn
 +
nwrôãn
;

855 i‡(()
c
->
£¡Àn
 =c->
buÂos
) {

856 
c
->
buÂos
 = 0;

857 
c
->
£¡Àn
 = 0;

860 
o
 = 
	`dli°NodeVÆue
(
	`dli°Fú°
(
c
->
ª∂y
));

861 
objÀn
 = 
	`sd¶í
(
o
->
±r
);

862 
objmem
 = 
	`gëSåögObje˘SdsU£dMem‹y
(
o
);

864 i‡(
objÀn
 == 0) {

865 
	`dli°DñNode
(
c
->
ª∂y
,
	`dli°Fú°
(c->reply));

866 
c
->
ª∂y_byãs
 -
objmem
;

870 
nwrôãn
 = 
	`vr_wrôe
(
fd
, ((*)
o
->
±r
)+
c
->
£¡Àn
,
objÀn
-c->sentlen);

871 i‡(
nwrôãn
 <= 0) ;

872 
c
->
£¡Àn
 +
nwrôãn
;

873 
tŸwrôãn
 +
nwrôãn
;

876 i‡(
c
->
£¡Àn
 =
objÀn
) {

877 
	`dli°DñNode
(
c
->
ª∂y
,
	`dli°Fú°
(c->reply));

878 
c
->
£¡Àn
 = 0;

879 
c
->
ª∂y_byãs
 -
objmem
;

890 i‡(
tŸwrôãn
 > 
NET_MAX_WRITES_PER_EVENT
 &&

891 (
maxmem‹y
 =0 || 
	`dÆloc_u£d_mem‹y
() < maxmemory))

894 i‡(
nwrôãn
 == -1) {

895 i‡(
î∫o
 =
EAGAIN
) {

896 
nwrôãn
 = 0;

898 
	`log_debug
(
LOG_VERB
,

899 "îr‹ wrôögÅÿ˛õ¡: %s", 
	`°ªº‹
(
î∫o
));

900 
	`‰ìClõ¡
(
c
);

901  
VR_ERROR
;

904 i‡(
tŸwrôãn
 > 0) {

905 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
√t_ouçut_byãs
, ()
tŸwrôãn
);

910 i‡(!(
c
->
Êags
 & 
CLIENT_MASTER
)Ëc->
œ°öãø˘i⁄
 = c->
vñ
->
unixtime
;

912 i‡(!
	`˛õ¡HasPídögRïlõs
(
c
)) {

913 
c
->
£¡Àn
 = 0;

914 i‡(
h™dÀr_ö°ÆÀd
Ë
	`´DñëeFûeEvít
(
c
->
vñ
->
ñ
,c->
c⁄n
->
sd
,
AE_WRITABLE
);

917 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) {

918 
	`‰ìClõ¡
(
c
);

919  
VR_ERROR
;

922  
VR_OK
;

923 
	}
}

926 
	$£ndRïlyToClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

927 
	`UNUSED
(
ñ
);

928 
	`UNUSED
(
mask
);

929 
	`wrôeToClõ¡
(
fd
,
¥ivd©a
,1);

930 
	}
}

936 
	$h™dÀClõ¡sWôhPídögWrôes
(
vr_evíéo›
 *
vñ
) {

937 
dli°Iãr
 
li
;

938 
dli°Node
 *
 
;

939 
¥o˚s£d
 = 
	`dli°Lígth
(
vñ
->
˛õ¡s_≥ndög_wrôe
);

941 
	`dli°Rewöd
(
vñ
->
˛õ¡s_≥ndög_wrôe
,&
li
);

942 (
 
 = 
	`dli°Next
(&
li
))) {

943 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

944 
c
->
Êags
 &~
CLIENT_PENDING_WRITE
;

945 
	`dli°DñNode
(
vñ
->
˛õ¡s_≥ndög_wrôe
,
 
);

948 i‡(
	`wrôeToClõ¡
(
c
->
c⁄n
->
sd
,c,0Ë=
VR_ERROR
) ;

952 i‡(
	`˛õ¡HasPídögRïlõs
(
c
) &&

953 
	`´Cª©eFûeEvít
(
vñ
->
ñ
, 
c
->
c⁄n
->
sd
, 
AE_WRITABLE
,

954 
£ndRïlyToClõ¡
, 
c
Ë=
AE_ERR
)

956 
	`‰ìClõ¡Async
(
c
);

959  
¥o˚s£d
;

960 
	}
}

963 
	$ª£tClõ¡
(
˛õ¡
 *
c
) {

964 
ªdisComm™dProc
 *
¥evcmd
 = 
c
->
cmd
 ? c->cmd->
¥oc
 : 
NULL
;

966 i‡(
c
->
Êags
&
CLIENT_JUMP
)

969 
	`‰ìClõ¡Argv
(
c
);

970 
c
->
ªqty≥
 = 0;

971 
c
->
mu…ibulkÀn
 = 0;

972 
c
->
bulkÀn
 = -1;

977 
c
->
Êags
 &~
CLIENT_REPLY_SKIP
;

978 i‡(
c
->
Êags
 & 
CLIENT_REPLY_SKIP_NEXT
) {

979 
c
->
Êags
 |
CLIENT_REPLY_SKIP
;

980 
c
->
Êags
 &~
CLIENT_REPLY_SKIP_NEXT
;

982 
	}
}

984 
	$¥o˚ssI∆öeBuf„r
(
˛õ¡
 *
c
) {

985 *
√wlöe
;

986 
¨gc
, 
j
;

987 
sds
 *
¨gv
, 
aux
;

988 
size_t
 
quîyÀn
;

991 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
,'\n');

994 i‡(
√wlöe
 =
NULL
) {

995 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

996 
	`addRïlyEº‹
(
c
,"ProtocolÉrror:Åoo big inlineÑequest");

997 
	`£tPrŸocﬁEº‹
(
c
,0);

999  
VR_ERROR
;

1003 i‡(
√wlöe
 &&Çewlöê!
c
->
quîybuf
 && *(newline-1) == '\r')

1004 
√wlöe
--;

1007 
quîyÀn
 = 
√wlöe
-(
c
->
quîybuf
);

1008 
aux
 = 
	`sd¢ewÀn
(
c
->
quîybuf
,
quîyÀn
);

1009 
¨gv
 = 
	`sds•lô¨gs
(
aux
,&
¨gc
);

1010 
	`sds‰ì
(
aux
);

1011 i‡(
¨gv
 =
NULL
) {

1012 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: unbalanced quotes inÑequest");

1013 
	`£tPrŸocﬁEº‹
(
c
,0);

1014  
VR_ERROR
;

1020 i‡(
quîyÀn
 =0 && 
c
->
Êags
 & 
CLIENT_SLAVE
)

1021 
c
->
ª∂_ack_time
 = c->
vñ
->
unixtime
;

1024 
	`sd§™ge
(
c
->
quîybuf
,
quîyÀn
+2,-1);

1027 i‡(
¨gc
) {

1028 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

1029 
c
->
¨gv
 = 
	`dÆloc
((
robj
*)*
¨gc
);

1033 
c
->
¨gc
 = 0, 
j
 = 0; j <árgc; j++) {

1034 i‡(
	`sd¶í
(
¨gv
[
j
])) {

1035 
c
->
¨gv
[c->
¨gc
] = 
	`¸óãObje˘
(
OBJ_STRING
,¨gv[
j
]);

1036 
c
->
¨gc
++;

1038 
	`sds‰ì
(
¨gv
[
j
]);

1041 
	`d‰ì
(
¨gv
);

1042  
VR_OK
;

1043 
	}
}

1047 
	$£tPrŸocﬁEº‹
(
˛õ¡
 *
c
, 
pos
) {

1048 i‡(
	`log_loggabÀ
(
LOG_VERB
)) {

1049 
sds
 
˛õ¡
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
);

1050 
	`log_debug
(
LOG_VERB
,

1051 "PrŸocﬁÉº‹ from clõ¡: %s", 
˛õ¡
);

1052 
	`sds‰ì
(
˛õ¡
);

1054 
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

1055 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1056 
	}
}

1058 
	$¥o˚ssMu…ibulkBuf„r
(
˛õ¡
 *
c
) {

1059 *
√wlöe
 = 
NULL
;

1060 
pos
 = 0, 
ok
;

1061 
Œ
;

1063 i‡(
c
->
mu…ibulkÀn
 == 0) {

1065 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
¨gc
 == 0);

1068 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
,'\r');

1069 i‡(
√wlöe
 =
NULL
) {

1070 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1071 
	`addRïlyEº‹
(
c
,"ProtocolÉrror:Åoo big mbulk count string");

1072 
	`£tPrŸocﬁEº‹
(
c
,0);

1074  
VR_ERROR
;

1078 i‡(
√wlöe
-(
c
->
quîybuf
Ë> ((sig√d)
	`sd¶í
(c->querybuf)-2))

1079  
VR_ERROR
;

1083 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
quîybuf
[0] == '*');

1084 
ok
 = 
	`°rög2Œ
(
c
->
quîybuf
+1,
√wlöe
-(c->quîybuf+1),&
Œ
);

1085 i‡(!
ok
 || 
Œ
 > 1024*1024) {

1086 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: invalid multibulkÜength");

1087 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1088  
VR_ERROR
;

1091 
pos
 = (
√wlöe
-
c
->
quîybuf
)+2;

1092 i‡(
Œ
 <= 0) {

1093 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1094  
VR_OK
;

1097 
c
->
mu…ibulkÀn
 = 
Œ
;

1100 i‡(
c
->
¨gv
Ë
	`d‰ì
(c->argv);

1101 
c
->
¨gv
 = 
	`dÆloc
((
robj
*)*c->
mu…ibulkÀn
);

1104 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
mu…ibulkÀn
 > 0);

1105 
c
->
mu…ibulkÀn
) {

1107 i‡(
c
->
bulkÀn
 == -1) {

1108 
√wlöe
 = 
	`°rchr
(
c
->
quîybuf
+
pos
,'\r');

1109 i‡(
√wlöe
 =
NULL
) {

1110 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
PROTO_INLINE_MAX_SIZE
) {

1111 
	`addRïlyEº‹
(
c
,

1113 
	`£tPrŸocﬁEº‹
(
c
,0);

1114  
VR_ERROR
;

1120 i‡(
√wlöe
-(
c
->
quîybuf
Ë> ((sig√d)
	`sd¶í
(c->querybuf)-2))

1123 i‡(
c
->
quîybuf
[
pos
] != '$') {

1124 
	`addRïlyEº‹F‹m©
(
c
,

1126 
c
->
quîybuf
[
pos
]);

1127 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1128  
VR_ERROR
;

1131 
ok
 = 
	`°rög2Œ
(
c
->
quîybuf
+
pos
+1,
√wlöe
-(c->quîybuf+pos+1),&
Œ
);

1132 i‡(!
ok
 || 
Œ
 < 0 ||Ül > 512*1024*1024) {

1133 
	`addRïlyEº‹
(
c
,"ProtocolÉrror: invalid bulkÜength");

1134 
	`£tPrŸocﬁEº‹
(
c
,
pos
);

1135  
VR_ERROR
;

1138 
pos
 +
√wlöe
-(
c
->
quîybuf
+pos)+2;

1139 i‡(
Œ
 >
PROTO_MBULK_BIG_ARG
) {

1140 
size_t
 
qbÀn
;

1146 
	`sd§™ge
(
c
->
quîybuf
,
pos
,-1);

1147 
pos
 = 0;

1148 
qbÀn
 = 
	`sd¶í
(
c
->
quîybuf
);

1151 i‡(
qbÀn
 < (
size_t
)
Œ
+2)

1152 
c
->
quîybuf
 = 
	`sdsMakeRoomF‹
(c->quîybuf,
Œ
+2-
qbÀn
);

1154 
c
->
bulkÀn
 = 
Œ
;

1158 i‡(
	`sd¶í
(
c
->
quîybuf
)-
pos
 < ()(c->
bulkÀn
+2)) {

1165 i‡(
pos
 == 0 &&

1166 
c
->
bulkÀn
 >
PROTO_MBULK_BIG_ARG
 &&

1167 (sig√dË
	`sd¶í
(
c
->
quîybuf
Ë=c->
bulkÀn
+2)

1169 
c
->
¨gv
[c->
¨gc
++] = 
	`¸óãObje˘
(
OBJ_STRING
,c->
quîybuf
);

1170 
	`sdsIn¸Lí
(
c
->
quîybuf
,-2);

1173 
c
->
quîybuf
 = 
	`sd¢ewÀn
(
NULL
,c->
bulkÀn
+2);

1174 
	`sds˛ór
(
c
->
quîybuf
);

1175 
pos
 = 0;

1177 
c
->
¨gv
[c->
¨gc
++] =

1178 
	`¸óãSåögObje˘
(
c
->
quîybuf
+
pos
,c->
bulkÀn
);

1179 
pos
 +
c
->
bulkÀn
+2;

1181 
c
->
bulkÀn
 = -1;

1182 
c
->
mu…ibulkÀn
--;

1187 i‡(
pos
Ë
	`sd§™ge
(
c
->
quîybuf
,pos,-1);

1190 i‡(
c
->
mu…ibulkÀn
 =0Ë 
VR_OK
;

1193  
VR_ERROR
;

1194 
	}
}

1196 
	$¥o˚ssI≈utBuf„r
(
˛õ¡
 *
c
) {

1197 
c
->
vñ
->
cuºít_˛õ¡
 = c;

1199 
	`sd¶í
(
c
->
quîybuf
)) {

1201 i‡(!(
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& 
	`˛õ¡sAªPau£d
(c->
vñ
)) ;

1204 i‡(
c
->
Êags
 & 
CLIENT_BLOCKED
) ;

1209 i‡(
c
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
) ;

1212 i‡(!
c
->
ªqty≥
) {

1213 i‡(
c
->
quîybuf
[0] == '*') {

1214 
c
->
ªqty≥
 = 
PROTO_REQ_MULTIBULK
;

1216 
c
->
ªqty≥
 = 
PROTO_REQ_INLINE
;

1220 i‡(
c
->
ªqty≥
 =
PROTO_REQ_INLINE
) {

1221 i‡(
	`¥o˚ssI∆öeBuf„r
(
c
Ë!
VR_OK
) ;

1222 } i‡(
c
->
ªqty≥
 =
PROTO_REQ_MULTIBULK
) {

1223 i‡(
	`¥o˚ssMu…ibulkBuf„r
(
c
Ë!
VR_OK
) ;

1225 
	`£rvîP™ic
("UnknownÑequestÅype");

1229 i‡(
c
->
¨gc
 == 0) {

1230 
	`ª£tClõ¡
(
c
);

1233 i‡(
	`¥o˚ssComm™d
(
c
Ë=
VR_OK
)

1234 
	`ª£tClõ¡
(
c
);

1237 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =
NULL
) ;

1242 i‡(
c
->
Êags
&
CLIENT_JUMP
) ;

1245 
c
->
vñ
->
cuºít_˛õ¡
 = 
NULL
;

1246 
	}
}

1248 
	$ªadQuîyFromClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

1249 
˛õ¡
 *
c
 = (˛õ¡*Ë
¥ivd©a
;

1250 
ƒód
, 
ªadÀn
;

1251 
size_t
 
qbÀn
;

1252 
	`UNUSED
(
ñ
);

1253 
	`UNUSED
(
mask
);

1255 
ªadÀn
 = 
PROTO_IOBUF_LEN
;

1262 i‡(
c
->
ªqty≥
 =
PROTO_REQ_MULTIBULK
 && c->
mu…ibulkÀn
 && c->
bulkÀn
 != -1

1263 && 
c
->
bulkÀn
 >
PROTO_MBULK_BIG_ARG
)

1265 
ªmaöög
 = ()(
c
->
bulkÀn
+2)-
	`sd¶í
(c->
quîybuf
);

1267 i‡(
ªmaöög
 < 
ªadÀn
)Ñeadlen =Ñemaining;

1270 
qbÀn
 = 
	`sd¶í
(
c
->
quîybuf
);

1271 i‡(
c
->
quîybuf_≥ak
 < 
qbÀn
) c->querybuf_peak = qblen;

1272 
c
->
quîybuf
 = 
	`sdsMakeRoomF‹
(c->quîybuf, 
ªadÀn
);

1273 
ƒód
 = 
	`vr_ªad
(
fd
, 
c
->
quîybuf
+
qbÀn
, 
ªadÀn
);

1274 i‡(
ƒód
 == -1) {

1275 i‡(
î∫o
 =
EAGAIN
) {

1278 
	`log_debug
(
LOG_VERB
, "ªadög from clõ¡: %s",
	`°ªº‹
(
î∫o
));

1279 
	`‰ìClõ¡
(
c
);

1282 } i‡(
ƒód
 == 0) {

1283 
	`log_debug
(
LOG_VERB
, "client closed connection");

1284 
	`‰ìClõ¡
(
c
);

1288 
	`sdsIn¸Lí
(
c
->
quîybuf
,
ƒód
);

1289 
c
->
œ°öãø˘i⁄
 = c->
vñ
->
unixtime
;

1290 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ëc->
ª∂off
 +
ƒód
;

1291 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
√t_öput_byãs
, 
ƒód
);

1292 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
£rvî
.
˛õ¡_max_quîybuf_Àn
) {

1293 
sds
 
ci
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
), 
byãs
 = sdsempty();

1295 
byãs
 = 
	`sdsˇåïr
(byãs,
c
->
quîybuf
,64);

1296 
	`log_w¨n
("˛osög clõ¡Åh©Ñóched max quîy buf„∏Àngth: %†(qbu‡öôü»byãs: %s)", 
ci
, 
byãs
);

1297 
	`sds‰ì
(
ci
);

1298 
	`sds‰ì
(
byãs
);

1299 
	`‰ìClõ¡
(
c
);

1302 
	`¥o˚ssI≈utBuf„r
(
c
);

1304 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

1305 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

1307 
	}
}

1309 
	$gëClõ¡sMaxBuf„rs
(
vr_evíéo›
 *
vñ
, *
l⁄ge°_ouçut_li°
,

1310 *
bigge°_öput_buf„r
) {

1311 
˛õ¡
 *
c
;

1312 
dli°Node
 *
 
;

1313 
dli°Iãr
 
li
;

1314 
lﬁ
 = 0, 
bib
 = 0;

1316 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1317 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1318 
c
 = 
	`dli°NodeVÆue
(
 
);

1320 i‡(
	`dli°Lígth
(
c
->
ª∂y
Ë> 
lﬁ
)Üol = dlistLength(c->reply);

1321 i‡(
	`sd¶í
(
c
->
quîybuf
Ë> 
bib
) bib = sdslen(c->querybuf);

1323 *
l⁄ge°_ouçut_li°
 = 
lﬁ
;

1324 *
bigge°_öput_buf„r
 = 
bib
;

1325 
	}
}

1338 
	$gíClõ¡PìrId
(
˛õ¡
 *˛õ¡, *
≥îid
,

1339 
size_t
 
≥îid_Àn
) {

1340 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNIX_SOCKET
) {

1342 
	`¢¥ötf
(
≥îid
,
≥îid_Àn
,"%s:0",
£rvî
.
unixsockë
);

1345 
	`vr_√t_f‹m©_≥î
(
˛õ¡
->
c⁄n
->
sd
,
≥îid
,
≥îid_Àn
);

1347 
	}
}

1353 *
	$gëClõ¡PìrId
(
˛õ¡
 *
c
) {

1354 
≥îid
[
VR_INET_PEER_ID_LEN
];

1356 i‡(
c
->
≥îid
 =
NULL
) {

1357 
	`gíClõ¡PìrId
(
c
,
≥îid
,(peerid));

1358 
c
->
≥îid
 = 
	`sd¢ew
(peerid);

1360  
c
->
≥îid
;

1361 
	}
}

1365 
sds
 
	$ˇtClõ¡InfoSåög
(
sds
 
s
, 
˛õ¡
 *client) {

1366 
Êags
[16], 
evíts
[3], *
p
;

1367 
emask
;

1369 
p
 = 
Êags
;

1370 i‡(
˛õ¡
->
Êags
 & 
CLIENT_SLAVE
) {

1371 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MONITOR
)

1372 *
p
++ = 'O';

1374 *
p
++ = 'S';

1376 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MASTER
Ë*
p
++ = 'M';

1377 i‡(
˛õ¡
->
Êags
 & 
CLIENT_MULTI
Ë*
p
++ = 'x';

1378 i‡(
˛õ¡
->
Êags
 & 
CLIENT_BLOCKED
Ë*
p
++ = 'b';

1379 i‡(
˛õ¡
->
Êags
 & 
CLIENT_DIRTY_CAS
Ë*
p
++ = 'd';

1380 i‡(
˛õ¡
->
Êags
 & 
CLIENT_CLOSE_AFTER_REPLY
Ë*
p
++ = 'c';

1381 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNBLOCKED
Ë*
p
++ = 'u';

1382 i‡(
˛õ¡
->
Êags
 & 
CLIENT_CLOSE_ASAP
Ë*
p
++ = 'A';

1383 i‡(
˛õ¡
->
Êags
 & 
CLIENT_UNIX_SOCKET
Ë*
p
++ = 'U';

1384 i‡(
˛õ¡
->
Êags
 & 
CLIENT_READONLY
Ë*
p
++ = 'r';

1385 i‡(
p
 =
Êags
) *p++ = 'N';

1386 *
p
++ = '\0';

1388 
emask
 = 
˛õ¡
->
c⁄n
->
sd
 =-1 ? 0 : 
	`´GëFûeEvíts
(˛õ¡->
vñ
->
ñ
,client->conn->sd);

1389 
p
 = 
evíts
;

1390 i‡(
emask
 & 
AE_READABLE
Ë*
p
++ = 'r';

1391 i‡(
emask
 & 
AE_WRITABLE
Ë*
p
++ = 'w';

1392 *
p
 = '\0';

1394  
	`sdsˇtfmt
(
s
,

1396 
˛õ¡
->
curidx
,

1397 (Ë
˛õ¡
->
id
,

1398 
	`gëClõ¡PìrId
(
˛õ¡
),

1399 
˛õ¡
->
c⁄n
->
sd
,

1400 
˛õ¡
->
«me
 ? (*)˛õ¡->«me->
±r
 : "",

1401 ()(
˛õ¡
->
vñ
->
unixtime
 - clõ¡->
˘ime
),

1402 ()(
˛õ¡
->
vñ
->
unixtime
 - clõ¡->
œ°öãø˘i⁄
),

1403 
Êags
,

1404 
˛õ¡
->
di˘id
,

1405 (Ë
	`di˘Size
(
˛õ¡
->
pubsub_ch™√ls
),

1406 (Ë
	`dli°Lígth
(
˛õ¡
->
pubsub_∑âîns
),

1407 (
˛õ¡
->
Êags
 & 
CLIENT_MULTI
Ë? clõ¡->
m°©e
.
cou¡
 : -1,

1408 (Ë
	`sd¶í
(
˛õ¡
->
quîybuf
),

1409 (Ë
	`sdßvaû
(
˛õ¡
->
quîybuf
),

1410 (Ë
˛õ¡
->
buÂos
,

1411 (Ë
	`dli°Lígth
(
˛õ¡
->
ª∂y
),

1412 (Ë
	`gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
),

1413 
evíts
,

1414 
˛õ¡
->
œ°cmd
 ? clõ¡->œ°cmd->
«me
 : "NULL");

1415 
	}
}

1417 
sds
 
	$gëAŒClõ¡sInfoSåög
(
vr_evíéo›
 *
vñ
) {

1418 
dli°Node
 *
 
;

1419 
dli°Iãr
 
li
;

1420 
˛õ¡
 *client;

1421 
sds
 
o
 = 
	`sd¢ewÀn
(
NULL
,200*
	`dli°Lígth
(
vñ
->
˛õ¡s
));

1422 
	`sds˛ór
(
o
);

1423 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1424 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1425 
˛õ¡
 = 
	`dli°NodeVÆue
(
 
);

1426 
o
 = 
	`ˇtClõ¡InfoSåög
(o,
˛õ¡
);

1427 
o
 = 
	`sdsˇéí
(o,"\n",1);

1429  
o
;

1430 
	}
}

1432 
	s˛õ¡kûld©a
 {

1433 
sds
 
	maddr
;

1434 
	mty≥
;

1435 
uöt64_t
 
	mid
;

1436 
	mskùme
;

1437 
	mkûÀd
;

1438 
	m˛o£_this_˛õ¡
;

1441 
	$˛õ¡Comm™d
(
˛õ¡
 *
c
) {

1442 
dli°Node
 *
 
;

1443 
dli°Iãr
 
li
;

1444 
˛õ¡
 *client;

1446 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"li°"Ë&& c->
¨gc
 == 2) {

1448 
sds
 
°r
 = 
c
->
ˇche
;

1449 
sds
 
o
 = 
	`gëAŒClõ¡sInfoSåög
(
c
->
vñ
);

1451 
°r
 = 
	`sdsˇtsds
(°r?°r:
	`sd£m±y
(),
o
);

1453 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

1454 
	`addRïlyBulkCBuf„r
(
c
,
°r
,
	`sd¶í
(str));

1455 
c
->
°ïs
 = 0;

1456 
c
->
èridx
 = -1;

1457 
	`sds‰ì
(
°r
);

1458 
c
->
ˇche
 = 
NULL
;

1459 
c
->
Êags
 &~
CLIENT_JUMP
;

1461 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

1462 
c
->
Êags
 |
CLIENT_JUMP
;

1463 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1464 
c
->
ˇche
 = 
°r
;

1466 
	`sds‰ì
(
o
);

1468 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"kill")) {

1471 
˛õ¡kûld©a
 *
ckd
;

1473 i‡(
c
->
°ïs
 == 0) {

1474 
ckd
 = 
	`dÆloc
((
˛õ¡kûld©a
));

1475 
ckd
->
addr
 = 
NULL
;

1476 
ckd
->
ty≥
 = -1;

1477 
ckd
->
id
 = 0;

1478 
ckd
->
skùme
 = 1;

1479 
ckd
->
kûÀd
 = 0;

1480 
ckd
->
˛o£_this_˛õ¡
 = 0;

1482 i‡(
c
->
¨gc
 == 3) {

1484 
ckd
->
addr
 = 
	`sd¢ew
(
c
->
¨gv
[2]->
±r
);

1485 
ckd
->
skùme
 = 0;

1486 } i‡(
c
->
¨gc
 > 3) {

1487 
i
 = 2;

1490 
i
 < 
c
->
¨gc
) {

1491 
m‹órgs
 = 
c
->
¨gc
 > 
i
+1;

1493 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"id"Ë&& 
m‹órgs
) {

1494 
tmp
;

1496 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
i
+1],&
tmp
,
NULL
)

1497 !
VR_OK
) {

1498 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1499 
	`d‰ì
(
ckd
);

1502 
ckd
->
id
 = 
tmp
;

1503 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"ty≥"Ë&& 
m‹órgs
) {

1504 
ckd
->
ty≥
 = 
	`gëClõ¡Ty≥ByName
(
c
->
¨gv
[
i
+1]->
±r
);

1505 i‡(
ckd
->
ty≥
 == -1) {

1506 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1507 
	`d‰ì
(
ckd
);

1508 
	`addRïlyEº‹F‹m©
(
c
,"Unknown clientÅype '%s'",

1509 (*Ë
c
->
¨gv
[
i
+1]->
±r
);

1512 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"addr"Ë&& 
m‹órgs
) {

1513 
ckd
->
addr
 = 
	`sd¢ew
(
c
->
¨gv
[
i
+1]->
±r
);

1514 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
,"skùme"Ë&& 
m‹órgs
) {

1515 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
+1]->
±r
,"yes")) {

1516 
ckd
->
skùme
 = 1;

1517 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
+1]->
±r
,"no")) {

1518 
ckd
->
skùme
 = 0;

1520 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1521 
	`d‰ì
(
ckd
);

1522 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1526 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1527 
	`d‰ì
(
ckd
);

1528 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1531 
i
 += 2;

1534 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1535 
	`d‰ì
(
ckd
);

1536 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1540 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

1541 
c
->
Êags
 |
CLIENT_JUMP
;

1542 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1543 
c
->
ˇche
 = 
ckd
;

1545 
ckd
 = 
c
->
ˇche
;

1546 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

1550 
	`dli°Rewöd
(
c
->
vñ
->
˛õ¡s
,&
li
);

1551 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1552 
˛õ¡
 = 
	`dli°NodeVÆue
(
 
);

1553 i‡(
ckd
->
addr
 && 
	`°rcmp
(
	`gëClõ¡PìrId
(
˛õ¡
),ckd->addr) != 0) ;

1554 i‡(
ckd
->
ty≥
 !-1 && 
	`gëClõ¡Ty≥
(
˛õ¡
) != ckd->type) ;

1555 i‡(
ckd
->
id
 !0 && 
˛õ¡
->id != ckd->id) ;

1556 i‡(
c
 =
˛õ¡
 && 
ckd
->
skùme
) ;

1559 i‡(
c
 =
˛õ¡
) {

1560 
ckd
->
˛o£_this_˛õ¡
 = 1;

1562 
	`‰ìClõ¡
(
˛õ¡
);

1564 
ckd
->
kûÀd
++;

1567 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

1569 i‡(
c
->
¨gc
 == 3) {

1570 i‡(
ckd
->
kûÀd
 == 0)

1571 
	`addRïlyEº‹
(
c
,"No such client");

1573 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1575 
	`addRïlyL⁄gL⁄g
(
c
,
ckd
->
kûÀd
);

1578 
c
->
°ïs
 = 0;

1579 
c
->
èridx
 = -1;

1580 
c
->
ˇche
 = 
NULL
;

1581 
c
->
Êags
 &~
CLIENT_JUMP
;

1585 i‡(
ckd
->
˛o£_this_˛õ¡
Ë
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

1587 i‡(
ckd
->
addr
Ë
	`sds‰ì
(ckd->addr);

1588 
	`d‰ì
(
ckd
);

1592 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"£äame"Ë&& c->
¨gc
 == 3) {

1593 
j
, 
Àn
 = 
	`sd¶í
(
c
->
¨gv
[2]->
±r
);

1594 *
p
 = 
c
->
¨gv
[2]->
±r
;

1598 i‡(
Àn
 == 0) {

1599 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

1600 
c
->
«me
 = 
NULL
;

1601 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1608 
j
 = 0; j < 
Àn
; j++) {

1609 i‡(
p
[
j
] < '!' ||Ö[j] > '~') {

1610 
	`addRïlyEº‹
(
c
,

1616 i‡(
c
->
«me
Ë
	`‰ìObje˘
(c->name);

1617 
c
->
«me
 = 
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]);

1618 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1620 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"gë«me"Ë&& c->
¨gc
 == 2) {

1621 i‡(
c
->
«me
)

1622 
	`addRïlyBulk
(
c
,c->
«me
);

1624 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1627 
	`addRïlyEº‹
(
c
, "SyntaxÉrror,Åry CLIENT (LIST | KILL ip:port | SETNAME connection-name)");

1631 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"ª∂y"Ë&& c->
¨gc
 == 3) {

1633 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"on")) {

1634 
c
->
Êags
 &~(
CLIENT_REPLY_SKIP
|
CLIENT_REPLY_OFF
);

1635 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1636 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"off")) {

1637 
c
->
Êags
 |
CLIENT_REPLY_OFF
;

1638 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"skip")) {

1639 i‡(!(
c
->
Êags
 & 
CLIENT_REPLY_OFF
))

1640 
c
->
Êags
 |
CLIENT_REPLY_SKIP_NEXT
;

1642 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1645 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"∑u£"Ë&& c->
¨gc
 == 3) {

1646 
duøti⁄
;

1648 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
duøti⁄
,
UNIT_MILLISECONDS
)

1649 !
VR_OK
) ;

1650 
	`∑u£Clõ¡s
(
NULL
, 
duøti⁄
);

1651 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1653 
	`addRïlyEº‹
(
c
, "SyntaxÉrror,Åry CLIENT (LIST | KILL ip:port | GETNAME | SETNAME connection-name)");

1655 
	}
}

1659 
	$ªwrôeClõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, ...) {

1660 
va_li°
 
≠
;

1661 
j
;

1662 
robj
 **
¨gv
;

1664 
¨gv
 = 
	`dÆloc
((
robj
*)*
¨gc
);

1665 
	`va_°¨t
(
≠
,
¨gc
);

1666 
j
 = 0; j < 
¨gc
; j++) {

1667 
robj
 *
a
;

1668 
a
 = 
	`va_¨g
(
≠
, 
robj
*);

1669 
¨gv
[
j
] = 
a
;

1672 
j
 = 0; j < 
c
->
¨gc
; j++Ë
	`‰ìObje˘
(c->
¨gv
[j]);

1673 
	`d‰ì
(
c
->
¨gv
);

1675 
c
->
¨gv
 =árgv;

1676 
c
->
¨gc
 =árgc;

1677 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1678 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1679 
	`va_íd
(
≠
);

1680 
	}
}

1683 
	$ª∂a˚Clõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, 
robj
 **
¨gv
) {

1684 
	`‰ìClõ¡Argv
(
c
);

1685 
	`d‰ì
(
c
->
¨gv
);

1686 
c
->
¨gv
 =árgv;

1687 
c
->
¨gc
 =árgc;

1688 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1689 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1690 
	}
}

1703 
	$ªwrôeClõ¡Comm™dArgumít
(
˛õ¡
 *
c
, 
i
, 
robj
 *
√wvÆ
) {

1704 
robj
 *
ﬁdvÆ
;

1706 i‡(
i
 >
c
->
¨gc
) {

1707 
c
->
¨gv
 = 
	`dªÆloc
(c->¨gv,(
robj
*)*(
i
+1));

1708 
c
->
¨gc
 = 
i
+1;

1709 
c
->
¨gv
[
i
] = 
NULL
;

1711 
ﬁdvÆ
 = 
c
->
¨gv
[
i
];

1712 
c
->
¨gv
[
i
] = 
√wvÆ
;

1713 i‡(
ﬁdvÆ
Ë
	`‰ìObje˘
(oldval);

1716 i‡(
i
 == 0) {

1717 
c
->
cmd
 = 
	`lookupComm™dOrOrigöÆ
(c->
¨gv
[0]->
±r
);

1718 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,c->
cmd
 != NULL);

1720 
	}
}

1735 
	$gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
 *
c
) {

1736 
li°_ôem_size
 = (
dli°Node
)+(
robj
);

1738  
c
->
ª∂y_byãs
 + (
li°_ôem_size
*
	`dli°Lígth
(c->
ª∂y
));

1739 
	}
}

1750 
	$gëClõ¡Ty≥
(
˛õ¡
 *
c
) {

1751 i‡(
c
->
Êags
 & 
CLIENT_MASTER
Ë 
CLIENT_TYPE_MASTER
;

1752 i‡((
c
->
Êags
 & 
CLIENT_SLAVE
Ë&& !(c->Êag†& 
CLIENT_MONITOR
))

1753  
CLIENT_TYPE_SLAVE
;

1754 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
Ë 
CLIENT_TYPE_PUBSUB
;

1755  
CLIENT_TYPE_NORMAL
;

1756 
	}
}

1758 
	$gëClõ¡Ty≥ByName
(*
«me
) {

1759 i‡(!
	`°rˇ£cmp
(
«me
,"n‹mÆ")Ë 
CLIENT_TYPE_NORMAL
;

1760 i‡(!
	`°rˇ£cmp
(
«me
,"¶ave")Ë 
CLIENT_TYPE_SLAVE
;

1761 i‡(!
	`°rˇ£cmp
(
«me
,"pubsub")Ë 
CLIENT_TYPE_PUBSUB
;

1762 i‡(!
	`°rˇ£cmp
(
«me
,"ma°î")Ë 
CLIENT_TYPE_MASTER
;

1764 
	}
}

1766 *
	$gëClõ¡Ty≥Name
(
˛ass
) {

1767 
˛ass
) {

1768 
CLIENT_TYPE_NORMAL
:  "normal";

1769 
CLIENT_TYPE_SLAVE
:  "slave";

1770 
CLIENT_TYPE_PUBSUB
:  "pubsub";

1771 
CLIENT_TYPE_MASTER
:  "master";

1772 :  
NULL
;

1774 
	}
}

1782 
	$checkClõ¡OuçutBuf„rLimôs
(
˛õ¡
 *
c
) {

1783 
so·
 = 0, 
h¨d
 = 0, 
˛ass
;

1784 
u£d_mem
 = 
	`gëClõ¡OuçutBuf„rMem‹yUßge
(
c
);

1786 
˛ass
 = 
	`gëClõ¡Ty≥
(
c
);

1789 i‡(
˛ass
 =
CLIENT_TYPE_MASTER
Ë˛as†
CLIENT_TYPE_NORMAL
;

1791 i‡(
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
h¨d_limô_byãs
 &&

1792 
u£d_mem
 >
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
h¨d_limô_byãs
)

1793 
h¨d
 = 1;

1794 i‡(
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_byãs
 &&

1795 
u£d_mem
 >
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_byãs
)

1796 
so·
 = 1;

1800 i‡(
so·
) {

1801 i‡(
c
->
obuf_so·_limô_ªached_time
 == 0) {

1802 
c
->
obuf_so·_limô_ªached_time
 = c->
vñ
->
unixtime
;

1803 
so·
 = 0;

1805 
time_t
 
ñ≠£d
 = 
c
->
vñ
->
unixtime
 - c->
obuf_so·_limô_ªached_time
;

1807 i‡(
ñ≠£d
 <=

1808 
£rvî
.
˛õ¡_obuf_limôs
[
˛ass
].
so·_limô_£c⁄ds
) {

1809 
so·
 = 0;

1815 
c
->
obuf_so·_limô_ªached_time
 = 0;

1817  
so·
 || 
h¨d
;

1818 
	}
}

1827 
	$asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
˛õ¡
 *
c
) {

1828 
	`ASSERT
(
c
->
ª∂y_byãs
 < 
SIZE_MAX
-(1024*64));

1829 i‡(
c
->
ª∂y_byãs
 =0 || c->
Êags
 & 
CLIENT_CLOSE_ASAP
) ;

1830 i‡(
	`checkClõ¡OuçutBuf„rLimôs
(
c
)) {

1831 
sds
 
˛õ¡
 = 
	`ˇtClõ¡InfoSåög
(
	`sd£m±y
(),
c
);

1833 
	`‰ìClõ¡Async
(
c
);

1834 
	`log_w¨n
("Clõ¡ %†scheduÀdÅÿbê˛o£d ASAP f‹ ovîcomög o‡ouçuàbuf„∏limôs.", 
˛õ¡
);

1835 
	`sds‰ì
(
˛õ¡
);

1837 
	}
}

1843 
	$ÊushSœvesOuçutBuf„rs
() {

1844 
dli°Iãr
 
li
;

1845 
dli°Node
 *
 
;

1847 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

1848 (
 
 = 
	`dli°Next
(&
li
))) {

1849 
˛õ¡
 *
¶ave
 = 
	`dli°NodeVÆue
(
 
);

1850 
evíts
;

1858 
evíts
 = 
	`´GëFûeEvíts
(
ª∂
.
vñ
.
ñ
,
¶ave
->
c⁄n
->
sd
);

1859 i‡(
evíts
 & 
AE_WRITABLE
 &&

1860 
¶ave
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 &&

1861 
	`˛õ¡HasPídögRïlõs
(
¶ave
))

1863 
	`wrôeToClõ¡
(
¶ave
->
c⁄n
->
sd
,slave,0);

1866 
	}
}

1885 
	$∑u£Clõ¡s
(
vr_evíéo›
 *
vñ
, 
íd
) {

1886 i‡(
vñ
 =
NULL
) ;

1888 i‡(!
vñ
->
˛õ¡s_∑u£d
 || 
íd
 > vñ->
˛õ¡s_∑u£_íd_time
)

1889 
vñ
->
˛õ¡s_∑u£_íd_time
 = 
íd
;

1890 
vñ
->
˛õ¡s_∑u£d
 = 1;

1891 
	}
}

1895 
	$˛õ¡sAªPau£d
(
vr_evíéo›
 *
vñ
) {

1896 i‡(
vñ
->
˛õ¡s_∑u£d
 &&

1897 
vñ
->
˛õ¡s_∑u£_íd_time
 < vñ->
m°ime
)

1899 
dli°Node
 *
 
;

1900 
dli°Iãr
 
li
;

1901 
˛õ¡
 *
c
;

1903 
vñ
->
˛õ¡s_∑u£d
 = 0;

1907 
	`dli°Rewöd
(
vñ
->
˛õ¡s
,&
li
);

1908 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

1909 
c
 = 
	`dli°NodeVÆue
(
 
);

1913 i‡(
c
->
Êags
 & (
CLIENT_SLAVE
|
CLIENT_BLOCKED
)) ;

1914 
c
->
Êags
 |
CLIENT_UNBLOCKED
;

1915 
	`dli°AddNodeTaû
(
vñ
->
unblocked_˛õ¡s
,
c
);

1918  
vñ
->
˛õ¡s_∑u£d
;

1919 
	}
}

1933 
	$¥o˚ssEvítsWhûeBlocked
(
vr_evíéo›
 *
vñ
) {

1934 
ôî©i⁄s
 = 4;

1935 
cou¡
 = 0;

1936 
ôî©i⁄s
--) {

1937 
evíts
 = 0;

1938 
evíts
 +
	`´Pro˚ssEvíts
(
vñ
->
ñ
, 
AE_FILE_EVENTS
|
AE_DONT_WAIT
);

1939 
evíts
 +
	`h™dÀClõ¡sWôhPídögWrôes
(
vñ
);

1940 i‡(!
evíts
) ;

1941 
cou¡
 +
evíts
;

1943  
cou¡
;

1944 
	}
}

1947 
	$cuºít_˛õ¡s
()

1949 
ccs
;

1951 #i‡
	`deföed
(
__ATOMIC_RELAXED
Ë|| deföed(
HAVE_ATOMIC
)

1952 
ccs
 = 
	`upd©e_cuº_˛õ¡s_add
(0);

1954 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
);

1955 
ccs
 = 
ncuº_cc⁄n
;

1956 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
);

1959  
ccs
;

1960 
	}
}

	@src/vr_client.h

1 #i‚de‡
_VR_CLIENT_H_


2 
	#_VR_CLIENT_H_


	)

4 
	#NET_MAX_WRITES_PER_EVENT
 (1024*64)

	)

6 
	#PROTO_MAX_QUERYBUF_LEN
 (1024*1024*1024Ë

	)

7 
	#PROTO_IOBUF_LEN
 (1024*16Ë

	)

8 
	#PROTO_REPLY_CHUNK_BYTES
 (16*1024Ë

	)

9 
	#PROTO_INLINE_MAX_SIZE
 (1024*64Ë

	)

10 
	#PROTO_MBULK_BIG_ARG
 (1024*32)

	)

13 
	#CLIENT_SLAVE
 (1<<0Ë

	)

14 
	#CLIENT_MASTER
 (1<<1Ë

	)

15 
	#CLIENT_MONITOR
 (1<<2Ë

	)

16 
	#CLIENT_MULTI
 (1<<3Ë

	)

17 
	#CLIENT_BLOCKED
 (1<<4Ë

	)

18 
	#CLIENT_DIRTY_CAS
 (1<<5Ë

	)

19 
	#CLIENT_CLOSE_AFTER_REPLY
 (1<<6Ë

	)

20 
	#CLIENT_UNBLOCKED
 (1<<7Ë

	)

22 
	#CLIENT_LUA
 (1<<8Ë

	)

23 
	#CLIENT_ASKING
 (1<<9Ë

	)

24 
	#CLIENT_CLOSE_ASAP
 (1<<10)

	)

25 
	#CLIENT_UNIX_SOCKET
 (1<<11Ë

	)

26 
	#CLIENT_DIRTY_EXEC
 (1<<12Ë

	)

27 
	#CLIENT_MASTER_FORCE_REPLY
 (1<<13Ë

	)

28 
	#CLIENT_FORCE_AOF
 (1<<14Ë

	)

29 
	#CLIENT_FORCE_REPL
 (1<<15Ë

	)

30 
	#CLIENT_PRE_PSYNC
 (1<<16Ë

	)

31 
	#CLIENT_READONLY
 (1<<17Ë

	)

32 
	#CLIENT_PUBSUB
 (1<<18Ë

	)

33 
	#CLIENT_PREVENT_AOF_PROP
 (1<<19Ë

	)

34 
	#CLIENT_PREVENT_REPL_PROP
 (1<<20Ë

	)

35 
	#CLIENT_PREVENT_PROP
 (
CLIENT_PREVENT_AOF_PROP
|
CLIENT_PREVENT_REPL_PROP
)

	)

36 
	#CLIENT_PENDING_WRITE
 (1<<21Ë

	)

38 
	#CLIENT_REPLY_OFF
 (1<<22Ë

	)

39 
	#CLIENT_REPLY_SKIP_NEXT
 (1<<23Ë

	)

40 
	#CLIENT_REPLY_SKIP
 (1<<24Ë

	)

41 
	#CLIENT_LUA_DEBUG
 (1<<25Ë

	)

42 
	#CLIENT_LUA_DEBUG_SYNC
 (1<<26Ë

	)

43 
	#CLIENT_JUMP
 (1<<27)

	)

45 
	#REDIS_REPLY_CHUNK_BYTES
 (16*1024Ë

	)

48 
	#PROTO_REQ_INLINE
 1

	)

49 
	#PROTO_REQ_MULTIBULK
 2

	)

53 
	#CLIENT_TYPE_NORMAL
 0

	)

54 
	#CLIENT_TYPE_SLAVE
 1

	)

55 
	#CLIENT_TYPE_PUBSUB
 2

	)

56 
	#CLIENT_TYPE_MASTER
 3

	)

57 
	#CLIENT_TYPE_OBUF_COUNT
 3

	)

63 
	#BLOCKED_NONE
 0

	)

64 
	#BLOCKED_LIST
 1

	)

65 
	#BLOCKED_WAIT
 2

	)

69 
	s˛õ¡
 {

70 
uöt64_t
 
	mid
;

72 
c⁄n
 *
	mc⁄n
;

73 
vr_evíéo›
 *
	mvñ
;

75 
ªdisDb
 *
	mdb
;

76 
	mdi˘id
;

77 
	msˇnid
;

78 
robj
 *
	m«me
;

79 
sds
 
	mquîybuf
;

80 
size_t
 
	mquîybuf_≥ak
;

81 
	m¨gc
;

82 
robj
 **
	m¨gv
;

83 
ªdisComm™d
 *
	mcmd
, *
	mœ°cmd
;

84 
	mªqty≥
;

85 
	mmu…ibulkÀn
;

86 
	mbulkÀn
;

87 
dli°
 *
	mª∂y
;

88 
	mª∂y_byãs
;

89 
size_t
 
	m£¡Àn
;

91 
time_t
 
	m˘ime
;

92 
time_t
 
	mœ°öãø˘i⁄
;

93 
time_t
 
	mobuf_so·_limô_ªached_time
;

94 
	mÊags
;

95 
	mauthítiˇãd
;

96 
	mª∂°©e
;

97 
	mª∂_put_⁄löe_⁄_ack
;

98 
	mª∂dbfd
;

99 
off_t
 
	mª∂dboff
;

100 
off_t
 
	mª∂dbsize
;

101 
sds
 
	mª∂¥ómbÀ
;

102 
	mª∂off
;

103 
	mª∂_ack_off
;

104 
	mª∂_ack_time
;

105 
	mpsync_öôül_off£t
;

108 
	mª∂runid
[
CONFIG_RUN_ID_SIZE
+1];

109 
	m¶ave_li°íög_p‹t
;

110 
	m¶ave_ˇ∑
;

111 
mu…iSèã
 
	mm°©e
;

112 
	mbty≥
;

113 
blockögSèã
 
	mbp›
;

114 
	mwoff
;

115 
dli°
 *
	mw©ched_keys
;

116 
di˘
 *
	mpubsub_ch™√ls
;

117 
dli°
 *
	mpubsub_∑âîns
;

118 
sds
 
	m≥îid
;

120 
	mcuridx
;

121 
	mèridx
;

122 
	m°ïs
;

123 *
	mˇche
;

126 
	mbuÂos
;

127 
	mbuf
[
PROTO_REPLY_CHUNK_BYTES
];

128 } 
	t˛õ¡
;

130 
	s˛õ¡Buf„rLimôsC⁄fig
 {

131 
	mh¨d_limô_byãs
;

132 
	mso·_limô_byãs
;

133 
time_t
 
	mso·_limô_£c⁄ds
;

134 } 
	t˛õ¡Buf„rLimôsC⁄fig
;

137 
˛õ¡
 *
¸óãClõ¡
(
vr_evíéo›
 *
vñ
, 
c⁄n
 *conn);

138 
˛o£TimedoutClõ¡s
();

139 
‰ìClõ¡
(
˛õ¡
 *
c
);

140 
‰ìClõ¡Async
(
˛õ¡
 *
c
);

141 
ª£tClõ¡
(
˛õ¡
 *
c
);

142 
£ndRïlyToClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

143 *
addDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
);

144 
£tDe„ºedMu…iBulkLígth
(
˛õ¡
 *
c
, *
node
, 
Àngth
);

145 
¥o˚ssI≈utBuf„r
(
˛õ¡
 *
c
);

146 
ªadQuîyFromClõ¡
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

147 
addRïlyBulk
(
˛õ¡
 *
c
, 
robj
 *
obj
);

148 
addRïlyBulkCSåög
(
˛õ¡
 *
c
, c⁄° *
s
);

149 
addRïlyBulkCBuf„r
(
˛õ¡
 *
c
, c⁄° *
p
, 
size_t
 
Àn
);

150 
addRïlyBulkL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
);

151 
addRïly
(
˛õ¡
 *
c
, 
robj
 *
obj
);

152 
addRïlySds
(
˛õ¡
 *
c
, 
sds
 
s
);

153 
addRïlySåög
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

154 
addRïlyEº‹Lígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

155 
addRïlyBulkSds
(
˛õ¡
 *
c
, 
sds
 
s
);

156 
addRïlyEº‹
(
˛õ¡
 *
c
, c⁄° *
îr
);

157 
addRïlySètusLígth
(
˛õ¡
 *
c
, c⁄° *
s
, 
size_t
 
Àn
);

158 
addRïlySètus
(
˛õ¡
 *
c
, c⁄° *
°©us
);

159 
addRïlyDoubÀ
(
˛õ¡
 *
c
, 
d
);

160 
addRïlyHum™L⁄gDoubÀ
(
˛õ¡
 *
c
, 
d
);

161 
addRïlyL⁄gL⁄g
(
˛õ¡
 *
c
, 
Œ
);

162 
addRïlyMu…iBulkLí
(
˛õ¡
 *
c
, 
Àngth
);

163 
c›yClõ¡OuçutBuf„r
(
˛õ¡
 *
d°
, clõ¡ *
§c
);

164 *
dupClõ¡RïlyVÆue
(*
o
);

165 
‰ìClõ¡RïlyVÆue
(*
o
);

166 
gëClõ¡sMaxBuf„rs
(
vr_evíéo›
 *
vñ
, *
l⁄ge°_ouçut_li°
,

167 *
bigge°_öput_buf„r
);

168 *
gëClõ¡PìrId
(
˛õ¡
 *client);

169 
sds
 
ˇtClõ¡InfoSåög
(sd†
s
, 
˛õ¡
 *client);

170 
sds
 
gëAŒClõ¡sInfoSåög
(
vr_evíéo›
 *
vñ
);

171 
˛õ¡Comm™d
(
˛õ¡
 *
c
);

172 
ªwrôeClõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, ...);

173 
ªwrôeClõ¡Comm™dArgumít
(
˛õ¡
 *
c
, 
i
, 
robj
 *
√wvÆ
);

174 
ª∂a˚Clõ¡Comm™dVe˘‹
(
˛õ¡
 *
c
, 
¨gc
, 
robj
 **
¨gv
);

175 
gëClõ¡OuçutBuf„rMem‹yUßge
(
˛õ¡
 *
c
);

176 
‰ìClõ¡sInAsyncFªeQueue
(
vr_evíéo›
 *
vñ
);

177 
asyncClo£Clõ¡OnOuçutBuf„rLimôRóched
(
˛õ¡
 *
c
);

178 
gëClõ¡Ty≥
(
˛õ¡
 *
c
);

179 
gëClõ¡Ty≥ByName
(*
«me
);

180 *
gëClõ¡Ty≥Name
(
˛ass
);

181 
ÊushSœvesOuçutBuf„rs
();

182 
disc⁄√˘Sœves
();

183 
li°íToP‹t
(
p‹t
, *
fds
, *
cou¡
);

184 
∑u£Clõ¡s
(
vr_evíéo›
 *
vñ
, 
duøti⁄
);

185 
˛õ¡sAªPau£d
(
vr_evíéo›
 *
vñ
);

186 
¥o˚ssEvítsWhûeBlocked
(
vr_evíéo›
 *
vñ
);

187 
h™dÀClõ¡sWôhPídögWrôes
(
vr_evíéo›
 *
vñ
);

188 
˛õ¡HasPídögRïlõs
(
˛õ¡
 *
c
);

189 
u∆ökClõ¡FromEvíéo›
(
˛õ¡
 *
c
);

190 
lökClõ¡ToEvíéo›
(
˛õ¡
 *
c
,
vr_evíéo›
 *
vñ
);

191 
u∆ökClõ¡
(
˛õ¡
 *
c
);

192 
wrôeToClõ¡
(
fd
, 
˛õ¡
 *
c
, 
h™dÀr_ö°ÆÀd
);

194 #ifde‡
__GNUC__


195 
	$addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...)

196 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

197 
	$addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...)

198 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 2, 3)));

200 
	`addRïlyEº‹F‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...);

201 
	`addRïlySètusF‹m©
(
˛õ¡
 *
c
, c⁄° *
fmt
, ...);

204 
ncuº_cc⁄n
;

206 #i‡
	`deföed
(
__ATOMIC_RELAXED
)

207 
	#upd©e_cuº_˛õ¡s_add
(
__n
Ë
	`__©omic_add_„tch
(&
ncuº_cc⁄n
, (__n), 
__ATOMIC_RELAXED
)

	)

208 
	#upd©e_cuº_˛õ¡s_sub
(
__n
Ë
	`__©omic_sub_„tch
(&
ncuº_cc⁄n
, (__n), 
__ATOMIC_RELAXED
)

	)

209 #ñi‡
	`deföed
(
HAVE_ATOMIC
)

210 
	#upd©e_cuº_˛õ¡s_add
(
__n
Ë
	`__sync_add_™d_„tch
(&
ncuº_cc⁄n
, (__n))

	)

211 
	#upd©e_cuº_˛õ¡s_sub
(
__n
Ë
	`__sync_sub_™d_„tch
(&
ncuº_cc⁄n
, (__n))

	)

213 
±hªad_muãx_t
 
cuº_˛õ¡s_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

215 
	#upd©e_cuº_˛õ¡s_add
(
__n
) do { \

216 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
); \

217 
ncuº_cc⁄n
 +(
__n
); \

218 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
); \

219 
	}
} 0)

	)

221 
	#upd©e_cuº_˛õ¡s_sub
(
__n
) do { \

222 
	`±hªad_muãx_lock
(&
cuº_˛õ¡s_muãx
); \

223 
ncuº_cc⁄n
 -(
__n
); \

224 
	`±hªad_muãx_u∆ock
(&
cuº_˛õ¡s_muãx
); \

225 } 0)

	)

228 
cuºít_˛õ¡s
();

	@src/vr_command.c

1 
	~<vr_c‹e.h
>

4 
di˘Ty≥
 
	gcomm™dTabÀDi˘Ty≥
 = {

5 
di˘SdsCa£Hash
,

6 
NULL
,

7 
NULL
,

8 
di˘SdsKeyCa£Com∑ª
,

9 
di˘SdsDe°ru˘‹
,

10 
NULL


65 
ªdisComm™d
 
	gªdisComm™dTabÀ
[] = {

67 {"pög",
pögComm™d
,-1,"tF",0,
NULL
,0,0,0,0,0},

68 {"echo",
echoComm™d
,2,"F",0,
NULL
,0,0,0,0,0},

69 {"£À˘",
£À˘Comm™d
,2,"lF",0,
NULL
,0,0,0,0,0},

70 {"auth",
authComm™d
,2,"¶tF",0,
NULL
,0,0,0,0,0},

71 {"admö",
admöComm™d
,2,"¶tF",0,
NULL
,0,0,0,0,0},

73 {"öfo",
öfoComm™d
,-1,"…",0,
NULL
,0,0,0,0,0},

74 {"Êushdb",
ÊushdbComm™d
,1,"w",0,
NULL
,0,0,0,0,0},

75 {"ÊushÆl",
ÊushÆlComm™d
,1,"w",0,
NULL
,0,0,0,0,0},

76 {"time",
timeComm™d
,1,"RF",0,
NULL
,0,0,0,0,0},

77 {"dbsize",
dbsizeComm™d
,1,"rF",0,
NULL
,0,0,0,0,0},

78 {"comm™d",
comm™dComm™d
,0,"…",0,
NULL
,0,0,0,0,0},

79 {"c⁄fig",
c⁄figComm™d
,-2,"œt",0,
NULL
,0,0,0,0,0},

80 {"˛õ¡",
˛õ¡Comm™d
,-2,"as",0,
NULL
,0,0,0,0,0},

81 {"¶owlog",
¶owlogComm™d
,-2,"a",0,
NULL
,0,0,0,0,0},

83 {"dñ",
dñComm™d
,-2,"w",0,
NULL
,1,-1,1,0,0},

84 {"exi°s",
exi°sComm™d
,-2,"rF",0,
NULL
,1,-1,1,0,0},

85 {"âl",
âlComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

86 {"±é",
±éComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

87 {"expúe",
expúeComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

88 {"expúót",
expúótComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

89 {"≥xpúe",
≥xpúeComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

90 {"≥xpúót",
≥xpúótComm™d
,3,"wF",0,
NULL
,1,1,1,0,0},

91 {"≥rsi°",
≥rsi°Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

92 {"øndomkey",
øndomkeyComm™d
,1,"rR",0,
NULL
,0,0,0,0,0},

93 {"ty≥",
ty≥Comm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

94 {"keys",
keysComm™d
,2,"rS",0,
NULL
,0,0,0,0,0},

95 {"sˇn",
sˇnComm™d
,-2,"rR",0,
NULL
,0,0,0,0,0},

96 {"obje˘",
obje˘Comm™d
,3,"r",0,
NULL
,2,2,2,0,0},

98 {"gë",
gëComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

99 {"£t",
£tComm™d
,-3,"wm",0,
NULL
,1,1,1,0,0},

100 {"£äx",
£äxComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

101 {"£ãx",
£ãxComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

102 {"p£ãx",
p£ãxComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

103 {"ö¸",
ö¸Comm™d
,2,"wmF",0,
NULL
,1,1,1,0,0},

104 {"de¸",
de¸Comm™d
,2,"wmF",0,
NULL
,1,1,1,0,0},

105 {"ö¸by",
ö¸byComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

106 {"de¸by",
de¸byComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

107 {"≠≥nd",
≠≥ndComm™d
,3,"wm",0,
NULL
,1,1,1,0,0},

108 {"°æí",
°æíComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

109 {"gë£t",
gë£tComm™d
,3,"wm",0,
NULL
,1,1,1,0,0},

110 {"ö¸byÊﬂt",
ö¸byÊﬂtComm™d
,3,"wmF",0,
NULL
,1,1,1,0,0},

111 {"£tbô",
£tbôComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

112 {"gëbô",
gëbôComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

113 {"£å™ge",
£å™geComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

114 {"gëønge",
gëøngeComm™d
,4,"r",0,
NULL
,1,1,1,0,0},

115 {"bôcou¡",
bôcou¡Comm™d
,-2,"r",0,
NULL
,1,1,1,0,0},

116 {"bôpos",
bôposComm™d
,-3,"r",0,
NULL
,1,1,1,0,0},

117 {"mgë",
mgëComm™d
,-2,"r",0,
NULL
,1,-1,1,0,0},

118 {"m£t",
m£tComm™d
,-3,"wm",0,
NULL
,1,-1,2,0,0},

120 {"h£t",
h£tComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

121 {"hgë",
hgëComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

122 {"hÀn",
hÀnComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

123 {"hdñ",
hdñComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

124 {"hexi°s",
hexi°sComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

125 {"hkeys",
hkeysComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

126 {"hvÆs",
hvÆsComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

127 {"hgëÆl",
hgëÆlComm™d
,2,"r",0,
NULL
,1,1,1,0,0},

128 {"hö¸by",
hö¸byComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

129 {"hö¸byÊﬂt",
hö¸byÊﬂtComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

130 {"hmgë",
hmgëComm™d
,-3,"r",0,
NULL
,1,1,1,0,0},

131 {"hm£t",
hm£tComm™d
,-4,"wm",0,
NULL
,1,1,1,0,0},

132 {"h£äx",
h£äxComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

133 {"h°æí",
h°æíComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

134 {"hsˇn",
hsˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

136 {"Ωush",
ΩushComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

137 {"Õush",
ÕushComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

138 {"Ã™ge",
Ã™geComm™d
,4,"r",0,
NULL
,1,1,1,0,0},

139 {"Ω›",
Ω›Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

140 {"Õ›",
Õ›Comm™d
,2,"wF",0,
NULL
,1,1,1,0,0},

141 {"Œí",
ŒíComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

142 {"Ãem",
ÃemComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

143 {"…rim",
…rimComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

144 {"lödex",
lödexComm™d
,3,"r",0,
NULL
,1,1,1,0,0},

145 {"l£t",
l£tComm™d
,4,"wm",0,
NULL
,1,1,1,0,0},

147 {"ßdd",
ßddComm™d
,-3,"wmF",0,
NULL
,1,1,1,0,0},

148 {"smembîs",
smembîsComm™d
,2,"rS",0,
NULL
,1,1,1,0,0},

149 {"sˇrd",
sˇrdComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

150 {"§em",
§emComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

151 {"•›",
•›Comm™d
,-2,"wRsF",0,
NULL
,1,1,1,0,0},

152 {"sismembî",
sismembîComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

153 {"ssˇn",
ssˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

154 {"suni⁄",
suni⁄Comm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

155 {"suni⁄°‹e",
suni⁄°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

156 {"sdiff",
sdiffComm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

157 {"sdiff°‹e",
sdiff°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

158 {"söãr",
söãrComm™d
,-2,"rS",0,
NULL
,1,-1,1,0,0},

159 {"söãr°‹e",
söãr°‹eComm™d
,-3,"wm",0,
NULL
,1,-1,1,0,0},

161 {"zadd",
zaddComm™d
,-4,"wmF",0,
NULL
,1,1,1,0,0},

162 {"zö¸by",
zö¸byComm™d
,4,"wmF",0,
NULL
,1,1,1,0,0},

163 {"zønge",
zøngeComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

164 {"zªvønge",
zªvøngeComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

165 {"zªm",
zªmComm™d
,-3,"wF",0,
NULL
,1,1,1,0,0},

166 {"zˇrd",
zˇrdComm™d
,2,"rF",0,
NULL
,1,1,1,0,0},

167 {"zcou¡",
zcou¡Comm™d
,4,"rF",0,
NULL
,1,1,1,0,0},

168 {"zøngebysc‹e",
zøngebysc‹eComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

169 {"zªvøngebysc‹e",
zªvøngebysc‹eComm™d
,-4,"r",0,
NULL
,1,1,1,0,0},

170 {"zønk",
zønkComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

171 {"zªvønk",
zªvønkComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

172 {"zsc‹e",
zsc‹eComm™d
,3,"rF",0,
NULL
,1,1,1,0,0},

173 {"zªmøngebysc‹e",
zªmøngebysc‹eComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

174 {"zªmøngebyønk",
zªmøngebyønkComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

175 {"zªmøngebyÀx",
zªmøngebyÀxComm™d
,4,"w",0,
NULL
,1,1,1,0,0},

176 {"zsˇn",
zsˇnComm™d
,-3,"rR",0,
NULL
,1,1,1,0,0},

178 {"pÁdd",
pÁddComm™d
,-2,"wmF",0,
NULL
,1,1,1,0,0},

179 {"pfcou¡",
pfcou¡Comm™d
,-2,"r",0,
NULL
,1,-1,1,0,0}

184 
	$p›uœãComm™dTabÀ
() {

185 
j
;

186 
numcomm™ds
 = (
ªdisComm™dTabÀ
)/(
ªdisComm™d
);

188 
j
 = 0; j < 
numcomm™ds
; j++) {

189 
ªdisComm™d
 *
c
 = 
ªdisComm™dTabÀ
+
j
;

190 *
f
 = 
c
->
sÊags
;

191 
ªtvÆ1
;

193 *
f
 != '\0') {

194 *
f
) {

195 'w': 
c
->
Êags
 |
CMD_WRITE
; ;

196 'r': 
c
->
Êags
 |
CMD_READONLY
; ;

197 'm': 
c
->
Êags
 |
CMD_DENYOOM
; ;

198 'a': 
c
->
Êags
 |
CMD_ADMIN
; ;

199 'p': 
c
->
Êags
 |
CMD_PUBSUB
; ;

200 's': 
c
->
Êags
 |
CMD_NOSCRIPT
; ;

201 'R': 
c
->
Êags
 |
CMD_RANDOM
; ;

202 'S': 
c
->
Êags
 |
CMD_SORT_FOR_SCRIPT
; ;

203 'l': 
c
->
Êags
 |
CMD_LOADING
; ;

204 't': 
c
->
Êags
 |
CMD_STALE
; ;

205 'M': 
c
->
Êags
 |
CMD_SKIP_MONITOR
; ;

206 'k': 
c
->
Êags
 |
CMD_ASKING
; ;

207 'F': 
c
->
Êags
 |
CMD_FAST
; ;

208 : 
	`£rvîP™ic
("Unsupported command flag"); ;

210 
f
++;

213 
ªtvÆ1
 = 
	`di˘Add
(
£rvî
.
comm™ds
, 
	`sd¢ew
(
c
->
«me
), c);

214 
	`ASSERT
(
ªtvÆ1
 =
DICT_OK
);

216 
c
->
idx
 = 
j
;

218 
	}
}

220 
	$p›uœãComm™dsNìdAdmö∑ss
() {

221 
d¨øy
 
comm™ds_√ed_admö∑ss
;

222 
sds
 *
comm™d_«me
;

223 
ªdisComm™d
 *
comm™d
;

225 
	`d¨øy_öô
(&
comm™ds_√ed_admö∑ss
,1,(
sds
));

226 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_COMMANDSNAP
,&
comm™ds_√ed_admö∑ss
);

227 
	`d¨øy_n
(&
comm™ds_√ed_admö∑ss
)) {

228 
comm™d_«me
 = 
	`d¨øy_p›
(&
comm™ds_√ed_admö∑ss
);

229 
comm™d
 = 
	`lookupComm™d
(*
comm™d_«me
);

230 i‡(
comm™d
 =
NULL
) {

231 
	`log_îr‹
("Unknow command %s for commands-need-amdminpass",

232 
comm™d_«me
);

233  
VR_ERROR
;

235 
comm™d
->
√edadmö
 = 1;

236 
	`sds‰ì
(*
comm™d_«me
);

238 
	`d¨øy_deöô
(&
comm™ds_√ed_admö∑ss
);

240  
VR_OK
;

241 
	}
}

243 
ªdisComm™d
 *
	$lookupComm™d
(
sds
 
«me
) {

244  
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

245 
	}
}

254 
ªdisComm™d
 *
	$lookupComm™dOrOrigöÆ
(
sds
 
«me
) {

255 
ªdisComm™d
 *
cmd
 = 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

257 i‡(!
cmd
Ëcmd = 
	`di˘FëchVÆue
(
£rvî
.
‹ig_comm™ds
,
«me
);

258  
cmd
;

259 
	}
}

261 
ªdisComm™d
 *
	$lookupComm™dByCSåög
(*
s
) {

262 
ªdisComm™d
 *
cmd
;

263 
sds
 
«me
 = 
	`sd¢ew
(
s
);

265 
cmd
 = 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, 
«me
);

266 
	`sds‰ì
(
«me
);

267  
cmd
;

268 
	}
}

308 
	$ˇŒ
(
˛õ¡
 *
c
, 
Êags
) {

309 
dúty
, 
°¨t
, 
duøti⁄
;

310 
˛õ¡_ﬁd_Êags
 = 
c
->
Êags
;

314 i‡(
	`dli°Lígth
(
£rvî
.
m⁄ô‹s
) &&

315 !
£rvî
.
lﬂdög
 &&

316 !(
c
->
cmd
->
Êags
 & (
CMD_SKIP_MONITOR
|
CMD_ADMIN
)))

318 
	`ª∂iˇti⁄FìdM⁄ô‹s
(
c
,
£rvî
.
m⁄ô‹s
,c->
db
->
id
,c->
¨gv
,c->
¨gc
);

323 
c
->
Êags
 &~(
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

324 
	`ªdisOpAºayInô
(&
£rvî
.
Æso_¥›ag©e
);

327 
dúty
 = 
c
->
vñ
->dirty;

328 
°¨t
 = 
	`vr_u£c_now
();

329 
c
->
cmd
->
	`¥oc
(c);

330 
duøti⁄
 = 
	`vr_u£c_now
()-
°¨t
;

331 
dúty
 = 
c
->
vñ
->dirty-dirty;

332 i‡(
dúty
 < 0) dirty = 0;

336 i‡(
£rvî
.
lﬂdög
 && 
c
->
Êags
 & 
CLIENT_LUA
)

337 
Êags
 &~(
CMD_CALL_SLOWLOG
 | 
CMD_CALL_STATS
);

342 i‡(
c
->
Êags
 & 
CLIENT_LUA
 && 
£rvî
.
lua_ˇŒî
) {

343 i‡(
c
->
Êags
 & 
CLIENT_FORCE_REPL
)

344 
£rvî
.
lua_ˇŒî
->
Êags
 |
CLIENT_FORCE_REPL
;

345 i‡(
c
->
Êags
 & 
CLIENT_FORCE_AOF
)

346 
£rvî
.
lua_ˇŒî
->
Êags
 |
CLIENT_FORCE_AOF
;

351 i‡(
Êags
 & 
CMD_CALL_SLOWLOG
 && 
c
->
cmd
->
¥oc
 !
execComm™d
) {

355 
	`¶owlogPushE¡ryIfNìded
(
c
->
vñ
,c->
¨gv
,c->
¨gc
,
duøti⁄
);

357 i‡(
Êags
 & 
CMD_CALL_STATS
) {

358 
comm™dSèts
 *
c°©s
 = 
	`d¨øy_gë
(
c
->
vñ
->
c°abÀ
,c->
œ°cmd
->
idx
);

359 
c°©s
->
mi¸o£c⁄ds
 +
duøti⁄
;

360 
c°©s
->
ˇŒs
++;

364 i‡(
Êags
 & 
CMD_CALL_PROPAGATE
 &&

365 (
c
->
Êags
 & 
CLIENT_PREVENT_PROP
) != CLIENT_PREVENT_PROP)

367 
¥›ag©e_Êags
 = 
PROPAGATE_NONE
;

371 i‡(
dúty
Ë
¥›ag©e_Êags
 |(
PROPAGATE_AOF
|
PROPAGATE_REPL
);

375 i‡(
c
->
Êags
 & 
CLIENT_FORCE_REPL
Ë
¥›ag©e_Êags
 |
PROPAGATE_REPL
;

376 i‡(
c
->
Êags
 & 
CLIENT_FORCE_AOF
Ë
¥›ag©e_Êags
 |
PROPAGATE_AOF
;

381 i‡(
c
->
Êags
 & 
CLIENT_PREVENT_REPL_PROP
 ||

382 !(
Êags
 & 
CMD_CALL_PROPAGATE_REPL
))

383 
¥›ag©e_Êags
 &~
PROPAGATE_REPL
;

384 i‡(
c
->
Êags
 & 
CLIENT_PREVENT_AOF_PROP
 ||

385 !(
Êags
 & 
CMD_CALL_PROPAGATE_AOF
))

386 
¥›ag©e_Êags
 &~
PROPAGATE_AOF
;

390 i‡(
¥›ag©e_Êags
 !
PROPAGATE_NONE
)

391 
	`¥›ag©e
(
c
->
cmd
,c->
db
->
id
,c->
¨gv
,c->
¨gc
,
¥›ag©e_Êags
);

396 
c
->
Êags
 &~(
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

397 
c
->
Êags
 |
˛õ¡_ﬁd_Êags
 &

398 (
CLIENT_FORCE_AOF
|
CLIENT_FORCE_REPL
|
CLIENT_PREVENT_PROP
);

403 i‡(
£rvî
.
Æso_¥›ag©e
.
num›s
) {

404 
j
;

405 
ªdisOp
 *
r›
;

407 i‡(
Êags
 & 
CMD_CALL_PROPAGATE
) {

408 
j
 = 0; j < 
£rvî
.
Æso_¥›ag©e
.
num›s
; j++) {

409 
r›
 = &
£rvî
.
Æso_¥›ag©e
.
›s
[
j
];

410 
èrgë
 = 
r›
->target;

412 i‡(!(
Êags
&
CMD_CALL_PROPAGATE_AOF
)Ë
èrgë
 &~
PROPAGATE_AOF
;

413 i‡(!(
Êags
&
CMD_CALL_PROPAGATE_REPL
)Ë
èrgë
 &~
PROPAGATE_REPL
;

414 i‡(
èrgë
)

415 
	`¥›ag©e
(
r›
->
cmd
,r›->
dbid
,r›->
¨gv
,r›->
¨gc
,
èrgë
);

418 
	`ªdisOpAºayFªe
(&
£rvî
.
Æso_¥›ag©e
);

420 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
numcomm™ds
, 1);

421 
	}
}

431 
	$¥o˚ssComm™d
(
˛õ¡
 *
c
) {

432 
maxmem‹y
;

438 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[0]->
±r
,"quit")) {

439 
	`addRïly
(
c
,
sh¨ed
.
ok
);

440 
c
->
Êags
 |
CLIENT_CLOSE_AFTER_REPLY
;

441  
VR_ERROR
;

446 
c
->
cmd
 = c->
œ°cmd
 = 
	`lookupComm™d
(c->
¨gv
[0]->
±r
);

447 i‡(!
c
->
cmd
) {

448 
	`ÊagTønß˘i⁄
(
c
);

449 
	`addRïlyEº‹F‹m©
(
c
,"unknown command '%s'",

450 (*)
c
->
¨gv
[0]->
±r
);

451  
VR_OK
;

452 } i‡((
c
->
cmd
->
¨ôy
 > 0 && c->cmd->¨ôy !c->
¨gc
) ||

453 (
c
->
¨gc
 < -c->
cmd
->
¨ôy
)) {

454 
	`ÊagTønß˘i⁄
(
c
);

455 
	`addRïlyEº‹F‹m©
(
c
,"wrongÇumber ofárguments for '%s' command",

456 
c
->
cmd
->
«me
);

457  
VR_OK
;

461 i‡(
c
->
vñ
->
cc
.
ªquúïass
 && !c->
authítiˇãd
 &&

462 
c
->
cmd
->
¥oc
 !
authComm™d
 && c->cmd->¥o¯!
admöComm™d
)

464 
	`ÊagTønß˘i⁄
(
c
);

465 
	`addRïly
(
c
,
sh¨ed
.
nﬂuthîr
);

466  
VR_OK
;

469 i‡(
c
->
cmd
->
√edadmö
 && c->
vñ
->
cc
.
admö∑ss
 &&

470 
c
->
authítiˇãd
 < 2 && c->
cmd
->
¥oc
 !
admöComm™d
)

472 
	`ÊagTønß˘i⁄
(
c
);

473 
	`addRïly
(
c
,
sh¨ed
.
nﬂdmöîr
);

474  
VR_OK
;

482 
maxmem‹y
 = 
c
->
vñ
->
cc
.maxmemory;

483 i‡(
maxmem‹y
) {

484 
ªtvÆ
 = 
	`‰ìMem‹yIfNìded
(
c
->
vñ
);

487 i‡(
c
->
vñ
->
cuºít_˛õ¡
 =
NULL
Ë 
VR_ERROR
;

491 i‡((
c
->
cmd
->
Êags
 & 
CMD_DENYOOM
Ë&& 
ªtvÆ
 =
VR_ERROR
) {

492 
	`ÊagTønß˘i⁄
(
c
);

493 
	`addRïly
(
c
, 
sh¨ed
.
oomîr
);

494  
VR_OK
;

500 i‡(((
£rvî
.
°›_wrôes_⁄_bgßve_îr
 &&

501 
£rvî
.
ßvï¨am¶í
 > 0 &&

502 
£rvî
.
œ°bgßve_°©us
 =
VR_ERROR
) ||

503 
£rvî
.
aof_œ°_wrôe_°©us
 =
VR_ERROR
) &&

504 
ª∂
.
ma°îho°
 =
NULL
 &&

505 (
c
->
cmd
->
Êags
 & 
CMD_WRITE
 ||

506 
c
->
cmd
->
¥oc
 =
pögComm™d
))

508 
	`ÊagTønß˘i⁄
(
c
);

509 i‡(
£rvî
.
aof_œ°_wrôe_°©us
 =
VR_OK
)

510 
	`addRïly
(
c
, 
sh¨ed
.
bgßvìº
);

512 
	`addRïlySds
(
c
,

513 
	`sdsˇçrötf
(
	`sd£m±y
(),

515 
	`°ªº‹
(
£rvî
.
aof_œ°_wrôe_î∫o
)));

516  
VR_OK
;

521 i‡(
ª∂
.
ma°îho°
 =
NULL
 &&

522 
ª∂
.
ª∂_mö_¶aves_to_wrôe
 &&

523 
ª∂
.
ª∂_mö_¶aves_max_œg
 &&

524 
c
->
cmd
->
Êags
 & 
CMD_WRITE
 &&

525 
ª∂
.
ª∂_good_¶aves_cou¡
 <Ñïl.
ª∂_mö_¶aves_to_wrôe
)

527 
	`ÊagTønß˘i⁄
(
c
);

528 
	`addRïly
(
c
, 
sh¨ed
.
n‹ïliˇ£º
);

529  
VR_OK
;

534 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ª∂_¶ave_ro
 &&

535 !(
c
->
Êags
 & 
CLIENT_MASTER
) &&

536 
c
->
cmd
->
Êags
 & 
CMD_WRITE
)

538 
	`addRïly
(
c
, 
sh¨ed
.
ro¶avìº
);

539  
VR_OK
;

543 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
 &&

544 
c
->
cmd
->
¥oc
 !
pögComm™d
 &&

545 
c
->
cmd
->
¥oc
 !
subs¸ibeComm™d
 &&

546 
c
->
cmd
->
¥oc
 !
unsubs¸ibeComm™d
 &&

547 
c
->
cmd
->
¥oc
 !
psubs¸ibeComm™d
 &&

548 
c
->
cmd
->
¥oc
 !
punsubs¸ibeComm™d
) {

549 
	`addRïlyEº‹
(
c
,"only (P)SUBSCRIBE / (P)UNSUBSCRIBE / PING / QUITállowed inÅhis context");

550  
VR_OK
;

555 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ª∂_°©e
 !
REPL_STATE_CONNECTED
 &&

556 
ª∂
.
ª∂_£rve_°Æe_d©a
 == 0 &&

557 !(
c
->
cmd
->
Êags
 & 
CMD_STALE
))

559 
	`ÊagTønß˘i⁄
(
c
);

560 
	`addRïly
(
c
, 
sh¨ed
.
ma°îdow√º
);

561  
VR_OK
;

566 i‡(
£rvî
.
lﬂdög
 && !(
c
->
cmd
->
Êags
 & 
CMD_LOADING
)) {

567 
	`addRïly
(
c
, 
sh¨ed
.
lﬂdögîr
);

568  
VR_OK
;

572 i‡(
£rvî
.
lua_timedout
 &&

573 
c
->
cmd
->
¥oc
 !
authComm™d
 &&

574 
c
->
cmd
->
¥oc
 !
ª∂c⁄fComm™d
 &&

575 !(
c
->
cmd
->
¥oc
 =
shutdownComm™d
 &&

576 
c
->
¨gc
 == 2 &&

577 
	`tﬁowî
(((*)
c
->
¨gv
[1]->
±r
)[0]) == 'n') &&

578 !(
c
->
cmd
->
¥oc
 =
s¸ùtComm™d
 &&

579 
c
->
¨gc
 == 2 &&

580 
	`tﬁowî
(((*)
c
->
¨gv
[1]->
±r
)[0]) == 'k'))

582 
	`ÊagTønß˘i⁄
(
c
);

583 
	`addRïly
(
c
, 
sh¨ed
.
¶ows¸ùãº
);

584  
VR_OK
;

588 i‡(
c
->
Êags
 & 
CLIENT_MULTI
 &&

589 
c
->
cmd
->
¥oc
 !
execComm™d
 && c->cmd->¥o¯!
disˇrdComm™d
 &&

590 
c
->
cmd
->
¥oc
 !
mu…iComm™d
 && c->cmd->¥o¯!
w©chComm™d
)

592 
	`queueMu…iComm™d
(
c
);

593 
	`addRïly
(
c
,
sh¨ed
.
queued
);

595 
	`ˇŒ
(
c
,
CMD_CALL_FULL
);

596 
c
->
woff
 = 
ª∂
.
ma°î_ª∂_off£t
;

597 i‡(
	`dli°Lígth
(
£rvî
.
ªady_keys
))

598 
	`h™dÀClõ¡sBlockedOnLi°s
();

601  
VR_OK
;

602 
	}
}

606 
	$ªdisOpAºayInô
(
ªdisOpAºay
 *
ﬂ
) {

607 
ﬂ
->
›s
 = 
NULL
;

608 
ﬂ
->
num›s
 = 0;

609 
	}
}

611 
	$ªdisOpAºayAµíd
(
ªdisOpAºay
 *
ﬂ
, 
ªdisComm™d
 *
cmd
, 
dbid
,

612 
robj
 **
¨gv
, 
¨gc
, 
èrgë
)

614 
ªdisOp
 *
›
;

616 
ﬂ
->
›s
 = 
	`dªÆloc
(ﬂ->›s,(
ªdisOp
)*((
size_t
)ﬂ->
num›s
+1));

617 
›
 = 
ﬂ
->
›s
+ﬂ->
num›s
;

618 
›
->
cmd
 = cmd;

619 
›
->
dbid
 = dbid;

620 
›
->
¨gv
 =árgv;

621 
›
->
¨gc
 =árgc;

622 
›
->
èrgë
 =Åarget;

623 
ﬂ
->
num›s
++;

624  
ﬂ
->
num›s
;

625 
	}
}

627 
	$ªdisOpAºayFªe
(
ªdisOpAºay
 *
ﬂ
) {

628 
ﬂ
->
num›s
) {

629 
j
;

630 
ªdisOp
 *
›
;

632 
ﬂ
->
num›s
--;

633 
›
 = 
ﬂ
->
›s
+ﬂ->
num›s
;

634 
j
 = 0; j < 
›
->
¨gc
; j++)

635 
	`de¸RefCou¡
(
›
->
¨gv
[
j
]);

636 
	`d‰ì
(
›
->
¨gv
);

638 
	`d‰ì
(
ﬂ
->
›s
);

639 
	}
}

652 
	$¥›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
,

653 
Êags
)

655 i‡(
£rvî
.
aof_°©e
 !
AOF_OFF
 && 
Êags
 & 
PROPAGATE_AOF
)

656 
	`„edAµídO∆yFûe
(
cmd
,
dbid
,
¨gv
,
¨gc
);

657 i‡(
Êags
 & 
PROPAGATE_REPL
)

658 
	`ª∂iˇti⁄FìdSœves
(
ª∂
.
¶aves
,
dbid
,
¨gv
,
¨gc
);

659 
	}
}

673 
	$ÆsoPr›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
,

674 
èrgë
)

676 
robj
 **
¨gvc›y
;

677 
j
;

679 i‡(
£rvî
.
lﬂdög
) ;

681 
¨gvc›y
 = 
	`dÆloc
((
robj
*)*(
size_t
)
¨gc
);

682 
j
 = 0; j < 
¨gc
; j++) {

683 
¨gvc›y
[
j
] = 
	`dupSåögObje˘Unc⁄°™t
(
¨gv
[j]);

685 
	`ªdisOpAºayAµíd
(&
£rvî
.
Æso_¥›ag©e
,
cmd
,
dbid
,
¨gvc›y
,
¨gc
,
èrgë
);

686 
	}
}

691 
	$f‹˚Comm™dPr›ag©i⁄
(
˛õ¡
 *
c
, 
Êags
) {

692 i‡(
Êags
 & 
PROPAGATE_REPL
Ë
c
->Êag†|
CLIENT_FORCE_REPL
;

693 i‡(
Êags
 & 
PROPAGATE_AOF
Ë
c
->Êag†|
CLIENT_FORCE_AOF
;

694 
	}
}

699 
	$¥evítComm™dPr›ag©i⁄
(
˛õ¡
 *
c
) {

700 
c
->
Êags
 |
CLIENT_PREVENT_PROP
;

701 
	}
}

704 
	$¥evítComm™dAOF
(
˛õ¡
 *
c
) {

705 
c
->
Êags
 |
CLIENT_PREVENT_AOF_PROP
;

706 
	}
}

709 
	$¥evítComm™dRïliˇti⁄
(
˛õ¡
 *
c
) {

710 
c
->
Êags
 |
CLIENT_PREVENT_REPL_PROP
;

711 
	}
}

714 
	$addRïlyComm™dFœg
(
˛õ¡
 *
c
, 
ªdisComm™d
 *
cmd
, 
f
, *
ª∂y
) {

715 i‡(
cmd
->
Êags
 & 
f
) {

716 
	`addRïlySètus
(
c
, 
ª∂y
);

720 
	}
}

723 
	$addRïlyComm™d
(
˛õ¡
 *
c
, 
ªdisComm™d
 *
cmd
) {

724 i‡(!
cmd
) {

725 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

728 
	`addRïlyMu…iBulkLí
(
c
, 6);

729 
	`addRïlyBulkCSåög
(
c
, 
cmd
->
«me
);

730 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
¨ôy
);

732 
Êagcou¡
 = 0;

733 *
ÊagÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

734 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_WRITE
, "write");

735 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_READONLY
, "readonly");

736 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_DENYOOM
, "denyoom");

737 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_ADMIN
, "admin");

738 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_PUBSUB
, "pubsub");

739 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_NOSCRIPT
, "noscript");

740 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_RANDOM
, "random");

741 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_SORT_FOR_SCRIPT
,"sort_for_script");

742 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_LOADING
, "loading");

743 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_STALE
, "stale");

744 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_SKIP_MONITOR
, "skip_monitor");

745 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_ASKING
, "asking");

746 
Êagcou¡
 +
	`addRïlyComm™dFœg
(
c
,
cmd
,
CMD_FAST
, "fast");

747 i‡(
cmd
->
gëkeys_¥oc
) {

748 
	`addRïlySètus
(
c
, "movablekeys");

749 
Êagcou¡
 += 1;

751 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ÊagÀn
, 
Êagcou¡
);

753 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
fú°key
);

754 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
œ°key
);

755 
	`addRïlyL⁄gL⁄g
(
c
, 
cmd
->
key°ï
);

757 
	}
}

760 
	$comm™dComm™d
(
˛õ¡
 *
c
) {

761 i‡(
c
->
¨gc
 == 1) {

762 
di˘Iãøt‹
 *
di
;

763 
di˘E¡ry
 *
de
;

765 
	`addRïlyMu…iBulkLí
(
c
, 
	`di˘Size
(
£rvî
.
comm™ds
));

766 
di
 = 
	`di˘GëIãøt‹
(
£rvî
.
comm™ds
);

767 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

768 
	`addRïlyComm™d
(
c
, 
	`di˘GëVÆ
(
de
));

770 
	`di˘Rñó£Iãøt‹
(
di
);

771 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "info")) {

772 
i
;

773 
	`addRïlyMu…iBulkLí
(
c
, c->
¨gc
-2);

774 
i
 = 2; i < 
c
->
¨gc
; i++) {

775 
	`addRïlyComm™d
(
c
, 
	`di˘FëchVÆue
(
£rvî
.
comm™ds
, c->
¨gv
[
i
]->
±r
));

777 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "cou¡"Ë&& c->
¨gc
 == 2) {

778 
	`addRïlyL⁄gL⁄g
(
c
, 
	`di˘Size
(
£rvî
.
comm™ds
));

779 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"gëkeys"Ë&& c->
¨gc
 >= 3) {

780 
ªdisComm™d
 *
cmd
 = 
	`lookupComm™d
(
c
->
¨gv
[2]->
±r
);

781 *
keys
, 
numkeys
, 
j
;

783 i‡(!
cmd
) {

784 
	`addRïlyEº‹F‹m©
(
c
,"Invalid command specified");

786 } i‡((
cmd
->
¨ôy
 > 0 && cmd->¨ôy !
c
->
¨gc
-2) ||

787 ((
c
->
¨gc
-2Ë< -
cmd
->
¨ôy
))

789 
	`addRïlyEº‹
(
c
,"InvalidÇumber ofárguments specified for command");

793 
keys
 = 
	`gëKeysFromComm™d
(
cmd
,
c
->
¨gv
+2,c->
¨gc
-2,&
numkeys
);

794 
	`addRïlyMu…iBulkLí
(
c
,
numkeys
);

795 
j
 = 0; j < 
numkeys
; j++Ë
	`addRïlyBulk
(
c
,c->
¨gv
[
keys
[j]+2]);

796 
	`gëKeysFªeResu…
(
keys
);

797 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
, "°©s"Ë&& c->
¨gc
 == 2) {

798 
j
;

799 
d¨øy
 *
c°abÀÆl
;

800 
¨øy
 *
c°abÀ
 = 
c
->
vñ
->cstable;

801 
comm™dSèts
 *
c°©s
, *
c°©ßŒ
;

803 i‡(
c
->
°ïs
 == 0) {

804 
c°abÀÆl
 = 
	`comm™dSètsTabÀCª©e
();

805 i‡(!(
c
->
Êags
&
CLIENT_JUMP
))

806 
c
->
Êags
 |
CLIENT_JUMP
;

807 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

808 
c
->
ˇche
 = 
c°abÀÆl
;

810 
c°abÀÆl
 = 
c
->
ˇche
;

811 
c
->
èridx
 = 
	`w‹kî_gë_√xt_idx
(c->
curidx
);

814 
j
 = 0; j < 
	`d¨øy_n
(
c°abÀ
); j ++) {

815 
c°©s
 = 
	`d¨øy_gë
(
c°abÀ
, 
j
);

816 i‡(!
c°©s
->
ˇŒs
) ;

818 
c°©ßŒ
 = 
	`d¨øy_gë
(
c°abÀÆl
, 
j
);

819 
c°©ßŒ
->
mi¸o£c⁄ds
 +
c°©s
->microseconds;

820 
c°©ßŒ
->
ˇŒs
 +
c°©s
->calls;

823 i‡(
c
->
°ïs
 >(
	`d¨øy_n
(&
w‹kîs
) - 1)) {

824 
sds
 
comm™d_°©s_öfo
;

825 *
ª∂yÀn_node
;

826 
ª∂yÀn
 = 0;

828 
c
->
°ïs
 = 0;

829 
c
->
èridx
 = -1;

830 
c
->
ˇche
 = 
NULL
;

831 
c
->
Êags
 &~
CLIENT_JUMP
;

833 
ª∂yÀn_node
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

834 
j
 = 0; j < 
	`d¨øy_n
(
c°abÀÆl
); j ++) {

835 
c°©ßŒ
 = 
	`d¨øy_gë
(
c°abÀÆl
, 
j
);

836 i‡(!
c°©ßŒ
->
ˇŒs
) ;

838 
comm™d_°©s_öfo
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),

840 
c°©ßŒ
->
«me
, c°©ßŒ->
ˇŒs
, c°©ßŒ->
mi¸o£c⁄ds
,

841 ()
c°©ßŒ
->
mi¸o£c⁄ds
/c°©ßŒ->
ˇŒs
);

842 
	`addRïlyBulkSds
(
c
,
comm™d_°©s_öfo
);

843 
ª∂yÀn
 ++;

846 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn_node
,
ª∂yÀn
);

848 
	`comm™dSètsTabÀDe°roy
(
c°abÀÆl
);

851 
	`addRïlyEº‹
(
c
, "Unknown subcommand or wrongÇumber ofárguments.");

854 
	}
}

856 
d¨øy
 *

857 
	$comm™dSètsTabÀCª©e
()

859 
j
;

860 
comm™dSèts
 *
c°©s
;

861 
d¨øy
 *
c°©°abÀ
;

862 
numcomm™ds
 = (
ªdisComm™dTabÀ
)/(
ªdisComm™d
);

865 
c°©°abÀ
 = 
	`d¨øy_¸óã
(
numcomm™ds
,(
comm™dSèts
));

866 i‡(
c°©°abÀ
 =
NULL
)  NULL;

867 
j
 = 0; j < 
numcomm™ds
; j ++) {

868 
ªdisComm™d
 *
c
 = 
ªdisComm™dTabÀ
+
j
;

869 
c°©s
 = 
	`d¨øy_push
(
c°©°abÀ
);

870 
c°©s
->
«me
 = 
c
->name;

871 
c°©s
->
mi¸o£c⁄ds
 = 0;

872 
c°©s
->
ˇŒs
 = 0;

873 
	`ASSERT
(
j
 =
c
->
idx
);

876  
c°©°abÀ
;

877 
	}
}

880 
	$comm™dSètsTabÀDe°roy
(
d¨øy
 *
c°©°abÀ
)

882 
c°©°abÀ
->
√Àm
 = 0;

883 
	`d¨øy_de°roy
(
c°©°abÀ
);

884 
	}
}

	@src/vr_command.h

1 #i‚de‡
_VR_COMMAND_H_


2 
	#_VR_COMMAND_H_


	)

6 
	#CMD_WRITE
 1

	)

7 
	#CMD_READONLY
 2

	)

8 
	#CMD_DENYOOM
 4

	)

9 
	#CMD_NOT_USED_1
 8

	)

10 
	#CMD_ADMIN
 16

	)

11 
	#CMD_PUBSUB
 32

	)

12 
	#CMD_NOSCRIPT
 64

	)

13 
	#CMD_RANDOM
 128

	)

14 
	#CMD_SORT_FOR_SCRIPT
 256

	)

15 
	#CMD_LOADING
 512

	)

16 
	#CMD_STALE
 1024

	)

17 
	#CMD_SKIP_MONITOR
 2048

	)

18 
	#CMD_ASKING
 4096

	)

19 
	#CMD_FAST
 8192

	)

22 
	#CMD_CALL_NONE
 0

	)

23 
	#CMD_CALL_SLOWLOG
 (1<<0)

	)

24 
	#CMD_CALL_STATS
 (1<<1)

	)

25 
	#CMD_CALL_PROPAGATE_AOF
 (1<<2)

	)

26 
	#CMD_CALL_PROPAGATE_REPL
 (1<<3)

	)

27 
	#CMD_CALL_PROPAGATE
 (
CMD_CALL_PROPAGATE_AOF
|
CMD_CALL_PROPAGATE_REPL
)

	)

28 
	#CMD_CALL_FULL
 (
CMD_CALL_SLOWLOG
 | 
CMD_CALL_STATS
 | 
CMD_CALL_PROPAGATE
)

	)

31 
	#PROPAGATE_NONE
 0

	)

32 
	#PROPAGATE_AOF
 1

	)

33 
	#PROPAGATE_REPL
 2

	)

36 
	#SHUTDOWN_NOFLAGS
 0

	)

37 
	#SHUTDOWN_SAVE
 1

	)

39 
	#SHUTDOWN_NOSAVE
 2

	)

41 
	tªdisComm™dProc
(
	t˛õ¡
 *
	tc
);

42 *
	tªdisGëKeysProc
(
	tªdisComm™d
 *
	tcmd
, 
	trobj
 **
	t¨gv
, 
	t¨gc
, *
	tnumkeys
);

43 
	sªdisComm™d
 {

44 *
	m«me
;

45 
ªdisComm™dProc
 *
	m¥oc
;

46 
	m¨ôy
;

47 *
	msÊags
;

48 
	mÊags
;

51 
ªdisGëKeysProc
 *
	mgëkeys_¥oc
;

53 
	mfú°key
;

54 
	mœ°key
;

55 
	mkey°ï
;

56 
	midx
;

57 
	m√edadmö
;

60 
	scomm™dSèts
 {

61 *
	m«me
;

62 
	mmi¸o£c⁄ds
;

63 
	mˇŒs
;

64 }
	tcomm™dSèts
;

72 
	sªdisOp
 {

73 
robj
 **
	m¨gv
;

74 
	m¨gc
, 
	mdbid
, 
	mèrgë
;

75 
ªdisComm™d
 *
	mcmd
;

76 } 
	tªdisOp
;

85 
	sªdisOpAºay
 {

86 
ªdisOp
 *
	m›s
;

87 
	mnum›s
;

88 } 
	tªdisOpAºay
;

90 
di˘Ty≥
 
comm™dTabÀDi˘Ty≥
;

92 
p›uœãComm™dTabÀ
();

93 
p›uœãComm™dsNìdAdmö∑ss
();

95 
ªdisComm™d
 *
lookupComm™d
(
sds
 
«me
);

96 
ªdisComm™d
 *
lookupComm™dOrOrigöÆ
(
sds
 
«me
);

97 
ªdisComm™d
 *
lookupComm™dByCSåög
(*
s
);

99 
ˇŒ
(
˛õ¡
 *
c
, 
Êags
);

100 
¥o˚ssComm™d
(
˛õ¡
 *
c
);

102 
ªdisOpAºayInô
(
ªdisOpAºay
 *
ﬂ
);

103 
ªdisOpAºayAµíd
(
ªdisOpAºay
 *
ﬂ
, 
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
èrgë
);

104 
ªdisOpAºayFªe
(
ªdisOpAºay
 *
ﬂ
);

106 
¥›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
Êags
);

107 
ÆsoPr›ag©e
(
ªdisComm™d
 *
cmd
, 
dbid
, 
robj
 **
¨gv
, 
¨gc
, 
èrgë
);

108 
f‹˚Comm™dPr›ag©i⁄
(
˛õ¡
 *
c
, 
Êags
);

109 
¥evítComm™dPr›ag©i⁄
(
˛õ¡
 *
c
);

110 
¥evítComm™dAOF
(
˛õ¡
 *
c
);

111 
¥evítComm™dRïliˇti⁄
(
˛õ¡
 *
c
);

113 
comm™dComm™d
(
˛õ¡
 *
c
);

115 
d¨øy
 *
comm™dSètsTabÀCª©e
();

116 
comm™dSètsTabÀDe°roy
(
d¨øy
 *
c°©°abÀ
);

	@src/vr_conf.c

1 
	~<f˙é.h
>

3 
	~<vr_c‹e.h
>

5 c⁄° *(*
	tc⁄figEnumGëSåFun
)(
	tty≥
);

7 
	#CONF_TOKEN_ORGANIZATION_START
 "["

	)

8 
	#CONF_TOKEN_ORGANIZATION_END
 "]"

	)

9 
	#CONF_TOKEN_KEY_VALUE_BETWEEN
 ":"

	)

10 
	#CONF_TOKEN_ARRAY_START
 "-"

	)

12 
	#CONF_ORGANIZATION_NAME_COMMAN
 "comm⁄"

	)

13 
	#CONF_ORGANIZATION_NAME_SERVER
 "£rvî"

	)

15 
	#CONF_VALUE_YES
 "yes"

	)

16 
	#CONF_VALUE_NO
 "no"

	)

18 
	#CONF_MAX_LINE
 1024

	)

20 
	#CONF_TAG_DEFAULT_TYPE
 
GROUP_TYPE_SINGLE


	)

21 
	#CONF_TAG_DEFAULT_HASH
 
HASH_FNV1_64


	)

22 
	#CONF_TAG_DEFAULT_HASH_TAG
 
NULL


	)

23 
	#CONF_TAG_DEFAULT_DISTRIBUTION
 "këama"

	)

24 
	#CONF_TAG_DEFAULT_REDIS_AUTH
 
NULL


	)

25 
	#CONF_TAG_DEFAULT_REDIS_DB
 0

	)

26 
	#CONF_TAG_DEFAULT_TIMEOUT
 300

	)

27 
	#CONF_TAG_DEFAULT_SERVERS
 "127.0.0.1:6379"

	)

28 
	#CONF_TAG_DEFAULT_LISTEN
 "127.0.0.1:6380"

	)

29 
	#CONF_TAG_DEFAULT_MAXMEMORY
 1073741824

30 
	#CONF_TAG_DEFAULT_THREADS
 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)

	)

31 
	#CONF_TAG_DEFAULT_NOREPLY
 "Ál£"

	)

32 
	#CONF_TAG_DEFAULT_RDB_DISKLESS
 "Ál£"

	)

34 
	#DEFINE_ACTION
(
_hash
, 
_«me
Ë(*)(#_«me),

	)

35 * 
	ghash_°rögs
[] = {

36 
HASH_CODEC
–
DEFINE_ACTION
 )

37 
NULL


39 #unde‡
DEFINE_ACTION


41 
	#DEFINE_ACTION
(
_di°
, 
_«me
Ë(*)(#_«me),

	)

42 * 
	gdi°_°rögs
[] = {

43 
DIST_CODEC
–
DEFINE_ACTION
 )

44 
NULL


46 #unde‡
DEFINE_ACTION


48 
	#DEFINE_ACTION
(
_pﬁicy
, 
_«me
Ë(*)(#_«me),

	)

49 * 
	gevi˘pﬁicy_°rögs
[] = {

50 
EVICTPOLICY_CODEC
–
DEFINE_ACTION
 )

51 
NULL


53 #unde‡
DEFINE_ACTION


55 
c⁄f_›ti⁄
 
	gc⁄f_£rvî_›ti⁄s
[] = {

56 { (*)
CONFIG_SOPN_DATABASES
,

57 
CONF_FIELD_TYPE_INT
, 1,

58 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

59 
off£tof
(
c⁄f_£rvî
, 
d©aba£s
) },

60 { (*)
CONFIG_SOPN_IDPDATABASE
,

61 
CONF_FIELD_TYPE_INT
, 1,

62 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

63 
off£tof
(
c⁄f_£rvî
, 
öã∫Æ_dbs_≥r_d©aba£s
) },

64 { (*)
CONFIG_SOPN_MAXMEMORY
,

65 
CONF_FIELD_TYPE_LONGLONG
, 0,

66 
c⁄f_£t_maxmem‹y
, 
c⁄f_gë_l⁄gl⁄g
,

67 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y
) },

68 { (*)
CONFIG_SOPN_MAXMEMORYP
,

69 
CONF_FIELD_TYPE_INT
, 0,

70 
c⁄f_£t_maxmem‹y_pﬁicy
, 
c⁄f_gë_öt
,

71 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y_pﬁicy
) },

72 { (*)
CONFIG_SOPN_MAXMEMORYS
,

73 
CONF_FIELD_TYPE_INT
, 0,

74 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

75 
off£tof
(
c⁄f_£rvî
, 
maxmem‹y_ßm∂es
) },

76 { (*)
CONFIG_SOPN_MTCLIMIT
,

77 
CONF_FIELD_TYPE_LONGLONG
, 0,

78 
c⁄f_£t_l⁄gl⁄g
, 
c⁄f_gë_l⁄gl⁄g
,

79 
off£tof
(
c⁄f_£rvî
, 
max_time_com∂exôy_limô
) },

80 { (*)
CONFIG_SOPN_BIND
,

81 
CONF_FIELD_TYPE_ARRAYSDS
, 1,

82 
c⁄f_£t_¨øy_sds
, 
c⁄f_gë_¨øy_sds
,

83 
off£tof
(
c⁄f_£rvî
, 
böds
) },

84 { (*)
CONFIG_SOPN_PORT
,

85 
CONF_FIELD_TYPE_INT
, 1,

86 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

87 
off£tof
(
c⁄f_£rvî
, 
p‹t
) },

88 { (*)
CONFIG_SOPN_THREADS
,

89 
CONF_FIELD_TYPE_INT
, 1,

90 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

91 
off£tof
(
c⁄f_£rvî
, 
thªads
) },

92 { (*)
CONFIG_SOPN_MAXCLIENTS
,

93 
CONF_FIELD_TYPE_INT
, 0,

94 
c⁄f_£t_öt_n⁄_zîo
, 
c⁄f_gë_öt
,

95 
off£tof
(
c⁄f_£rvî
, 
max˛õ¡s
) },

96 { (*)
CONFIG_SOPN_SLOWLOGLST
,

97 
CONF_FIELD_TYPE_LONGLONG
, 0,

98 
c⁄f_£t_l⁄gl⁄g
, 
c⁄f_gë_l⁄gl⁄g
,

99 
off£tof
(
c⁄f_£rvî
, 
¶owlog_log_¶owî_th™
) },

100 { (*)
CONFIG_SOPN_SLOWLOGML
,

101 
CONF_FIELD_TYPE_INT
, 0,

102 
c⁄f_£t_öt
, 
c⁄f_gë_öt
,

103 
off£tof
(
c⁄f_£rvî
, 
¶owlog_max_Àn
) },

104 { (*)
CONFIG_SOPN_REQUIREPASS
,

105 
CONF_FIELD_TYPE_SDS
, 0,

106 
c⁄f_£t_∑ssw‹d
, 
c⁄f_gë_sds
,

107 
off£tof
(
c⁄f_£rvî
, 
ªquúïass
) },

108 { (*)
CONFIG_SOPN_ADMINPASS
,

109 
CONF_FIELD_TYPE_SDS
, 0,

110 
c⁄f_£t_∑ssw‹d
, 
c⁄f_gë_sds
,

111 
off£tof
(
c⁄f_£rvî
, 
admö∑ss
) },

112 { (*)
CONFIG_SOPN_COMMANDSNAP
,

113 
CONF_FIELD_TYPE_ARRAYSDS
, 1,

114 
c⁄f_£t_comm™ds_√ed_admö∑ss
, 
c⁄f_gë_¨øy_sds
,

115 
off£tof
(
c⁄f_£rvî
, 
comm™ds_√ed_admö∑ss
) },

116 { 
NULL
, NULL, 0 }

119 
vr_c⁄f
 *
	gc⁄f
 = 
NULL
;

120 
c⁄f_£rvî
 *
	gc£rvî
 = 
NULL
;

123 
	$c⁄f_vÆue_dump
(
c⁄f_vÆue
 *
cv
, 
log_Àvñ
)

125 
uöt32_t
 
i
;

126 
c⁄f_vÆue
 **
cv_sub
;

128 if(
cv
 =
NULL
){

132 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

133 
	`log_debug
(
log_Àvñ
, "%.*s", 
	`sd¶í
(
cv
->
vÆue
), cv->value);

134 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

135 
i
 = 0; i < 
	`d¨øy_n
(
cv
->
vÆue
); i++){

136 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
i
);

137 
	`c⁄f_vÆue_dump
(*
cv_sub
, 
log_Àvñ
);

140 
	`NOT_REACHED
();

142 
	}
}

145 
	$c⁄f_‹g™iz©i⁄_dump
(
sds
 
«me
, 
di˘
 *
‹g
, 
log_Àvñ
)

147 
di˘Iãøt‹
 *
di
;

148 
di˘E¡ry
 *
de
;

149 
sds
 
key
;

150 
c⁄f_vÆue
 *
cv
;

152 if(
«me
 =
NULL
 || 
‹g
 == NULL){

156 
	`log_debug
(
log_Àvñ
, "[%.*s]", 
	`sd¶í
(
«me
),Çame);

158 
di
 = 
	`di˘GëIãøt‹
(
‹g
);

160 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
){

161 
key
 = 
	`di˘GëKey
(
de
);

162 
cv
 = 
	`di˘GëVÆ
(
de
);

164 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

165 
	`log_debug
(
log_Àvñ
, "%.*s: %.*s",

166 
	`sd¶í
(
key
), key,

167 
	`sd¶í
(
cv
->
vÆue
), cv->value);

168 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

169 
	`log_debug
(
log_Àvñ
, "%.*s:",
	`sd¶í
(
key
), key);

170 
	`c⁄f_vÆue_dump
(
cv
, 
log_Àvñ
);

172 
	`NOT_REACHED
();

176 
	`di˘Rñó£Iãøt‹
(
di
);

177 
	}
}

180 
	$c⁄f_‹g™iz©i⁄s_dump
(
vr_c⁄f
 *
cf
)

182 
di˘
 *
‹gs
, *
‹g
;

183 
di˘Iãøt‹
 *
di
;

184 
di˘E¡ry
 *
de
;

185 
sds
 
«me
;

186 
log_Àvñ
 = 
LOG_VERB
;

188 if(
cf
 =
NULL
){

192 
‹gs
 = 
cf
->
‹g™iz©i⁄s
;

193 if(
‹gs
 =
NULL
){

194 
	`log_debug
(
log_Àvñ
, "organization is NULL");

198 
di
 = 
	`di˘GëIãøt‹
(
‹gs
);

200 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
){

201 
«me
 = 
	`di˘GëKey
(
de
);

202 
‹g
 = 
	`di˘GëVÆ
(
de
);

204 
	`c⁄f_‹g™iz©i⁄_dump
(
«me
, 
‹g
, 
log_Àvñ
);

205 
	`log_debug
(
log_Àvñ
, "");

208 
	`di˘Rñó£Iãøt‹
(
di
);

209 
	}
}

212 
	$c⁄f_£t_maxmem‹y
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

214 
uöt8_t
 *
p
;

215 
c⁄f_vÆue
 *
cv
 = 
d©a
;

216 
vÆue
;

217 *
gt
;

218 
îr
;

220 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

221 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

222 
›t
->
«me
);

223  
VR_ERROR
;

226 
	`CONF_WLOCK
();

228 
p
 = 
obj
;

229 
gt
 = (*)(
p
 + 
›t
->
off£t
);

231 
vÆue
 = 
	`memtﬁl
(
cv
->vÆue, &
îr
);

232 if(
îr
 !0 || 
vÆue
 < 0){

233 
	`CONF_UNLOCK
();

234 
	`log_îr‹
("value forÅhe key %s in conf file is invalid",

235 
›t
->
«me
);

236  
VR_ERROR
;

239 *
gt
 = 
vÆue
;

240 
c⁄f
->
vîsi⁄
 ++;

241 
	`CONF_UNLOCK
();

242  
VR_OK
;

243 
	}
}

246 
	$c⁄f_£t_maxmem‹y_pﬁicy
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

248 
uöt8_t
 *
p
;

249 
c⁄f_vÆue
 *
cv
 = 
d©a
;

250 *
gt
;

251 **
pﬁicy
;

253 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

254 
	`log_îr‹
("conf server inÅhe conf file isÇotá string");

255  
VR_ERROR
;

258 
	`CONF_WLOCK
();

260 
p
 = 
obj
;

261 
gt
 = (*)(
p
 + 
›t
->
off£t
);

263 
pﬁicy
 = 
evi˘pﬁicy_°rögs
; *policy;Öolicy ++) {

264 i‡(
	`°rcmp
(
cv
->
vÆue
, *
pﬁicy
) == 0) {

265 *
gt
 = 
pﬁicy
 - 
evi˘pﬁicy_°rögs
;

270 i‡(*
pﬁicy
 =
NULL
) {

271 
	`CONF_UNLOCK
();

272 
	`log_îr‹
("ERROR: Conf maxmemoryÖolicy '%s' is invalid",

273 
cv
->
vÆue
);

274  
VR_ERROR
;

277 i‡(*
gt
 =
MAXMEMORY_VOLATILE_LRU
 || *gà=
MAXMEMORY_ALLKEYS_LRU
) {

278 
	`CONF_UNLOCK
();

279 
	`log_îr‹
("ERROR: Conf maxmemoryÖolicyÇow isÇot support %sánd %s",

280 
evi˘pﬁicy_°rögs
[
MAXMEMORY_VOLATILE_LRU
],

281 
evi˘pﬁicy_°rögs
[
MAXMEMORY_ALLKEYS_LRU
]);

282  
VR_ERROR
;

285 
	`CONF_UNLOCK
();

286  
VR_OK
;

287 
	}
}

290 
	$c⁄f_£t_öt_n⁄_zîo
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

292 
uöt8_t
 *
p
;

293 
c⁄f_vÆue
 *
cv
 = 
d©a
;

294 *
gt
;

296 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

297 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

298 
›t
->
«me
);

299  
VR_ERROR
;

302 
	`CONF_WLOCK
();

304 
p
 = 
obj
;

305 
gt
 = (*)(
p
 + 
›t
->
off£t
);

307 if(!
	`sdsIsNum
(
cv
->
vÆue
)){

308 
	`CONF_UNLOCK
();

309 
	`log_îr‹
("value ofÅhe key %s in conf file isÇotáÇumber",

310 
›t
->
«me
);

311  
VR_ERROR
;

314 *
gt
 = 
	`vr_©oi
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

316 i‡(*
gt
 < 0) {

317 
	`CONF_UNLOCK
();

318 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

319 
›t
->
«me
);

320  
VR_ERROR
;

321 } i‡(*
gt
 < 1) {

322 
	`CONF_UNLOCK
();

323 
	`log_îr‹
("value ofÅhe key %s in conf file must be 1 or greater",

324 
›t
->
«me
);

325  
VR_ERROR
;

327 
c⁄f
->
vîsi⁄
 ++;

328 
	`CONF_UNLOCK
();

329  
VR_OK
;

330 
	}
}

334 
	$c⁄f_gë_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

336 
uöt8_t
 *
p
;

337 
sds
 *
°r
 = 
d©a
;

338 
sds
 *
gt
;

340 i‡(
d©a
 =
NULL
)

341  
VR_ERROR
;

343 
	`CONF_RLOCK
();

344 
p
 = 
obj
;

345 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

346 i‡(*
gt
 =
NULL
Ë*
°r
 = NULL;

347 *
°r
 = 
	`sdsdup
(*
gt
);

348 
	`CONF_UNLOCK
();

349  
VR_OK
;

350 
	}
}

353 
	$c⁄f_£t_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

355 
uöt8_t
 *
p
;

356 
c⁄f_vÆue
 *
cv
 = 
d©a
;

357 
sds
 *
gt
;

359 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

360 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string",

361 
›t
->
«me
);

362  
VR_ERROR
;

365 
	`CONF_WLOCK
();

366 
p
 = 
obj
;

367 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

369 *
gt
 = 
	`sd¢ewÀn
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

370 
c⁄f
->
vîsi⁄
 ++;

371 
	`CONF_UNLOCK
();

372  
VR_OK
;

373 
	}
}

376 
	$c⁄f_£t_∑ssw‹d
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

378 
uöt8_t
 *
p
;

379 
c⁄f_vÆue
 *
cv
 = 
d©a
;

380 
sds
 *
gt
;

382 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

383 
	`log_îr‹
("ConfÖool %s inÅhe conf file isÇotá string",

384 
›t
->
«me
);

385  
VR_ERROR
;

386 } i‡(
	`sd¶í
(
cv
->
vÆue
Ë> 
CONFIG_AUTHPASS_MAX_LEN
) {

387 
	`log_îr‹
("Password isÜongerÅhan CONFIG_AUTHPASS_MAX_LEN");

388  
VR_ERROR
;

391 
	`CONF_WLOCK
();

392 
p
 = 
obj
;

393 
gt
 = (
sds
*)(
p
 + 
›t
->
off£t
);

395 i‡(*
gt
 !
NULL
Ë
	`sds‰ì
(*gt);

396 i‡(
	`sd¶í
(
cv
->
vÆue
Ë=0Ë*
gt
 = 
NULL
;

397 *
gt
 = 
	`sd¢ewÀn
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

398 
c⁄f
->
vîsi⁄
 ++;

399 
	`CONF_UNLOCK
();

400  
VR_OK
;

401 
	}
}

404 
	$c⁄f_gë_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

406 
uöt8_t
 *
p
;

407 *
öãgî
 = 
d©a
;

408 *
gt
;

410 i‡(
d©a
 =
NULL
)

411  
VR_ERROR
;

413 
	`CONF_RLOCK
();

414 
p
 = 
obj
;

415 
gt
 = (*)(
p
 + 
›t
->
off£t
);

416 *
öãgî
 = *
gt
;

417 
	`CONF_UNLOCK
();

418  
VR_OK
;

419 
	}
}

422 
	$c⁄f_£t_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

424 
uöt8_t
 *
p
;

425 
c⁄f_vÆue
 *
cv
 = 
d©a
;

426 *
gt
;

428 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

429 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

430 
›t
->
«me
);

431  
VR_ERROR
;

434 
	`CONF_WLOCK
();

436 
p
 = 
obj
;

437 
gt
 = (*)(
p
 + 
›t
->
off£t
);

439 if(!
	`sdsIsNum
(
cv
->
vÆue
)){

440 
	`CONF_UNLOCK
();

441 
	`log_îr‹
("value ofÅhe key %s in conf file isÇotáÇumber",

442 
›t
->
«me
);

443  
VR_ERROR
;

446 *
gt
 = 
	`vr_©oi
(
cv
->
vÆue
, 
	`sd¶í
(cv->value));

448 i‡(*
gt
 < 0) {

449 
	`CONF_UNLOCK
();

450 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

451 
›t
->
«me
);

452  
VR_ERROR
;

454 
c⁄f
->
vîsi⁄
 ++;

455 
	`CONF_UNLOCK
();

456  
VR_OK
;

457 
	}
}

460 
	$c⁄f_gë_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

462 
uöt8_t
 *
p
;

463 *
öãgî
 = 
d©a
;

464 *
gt
;

466 i‡(
d©a
 =
NULL
)

467  
VR_ERROR
;

469 
	`CONF_RLOCK
();

470 
p
 = 
obj
;

471 
gt
 = (*)(
p
 + 
›t
->
off£t
);

472 *
öãgî
 = *
gt
;

473 
	`CONF_UNLOCK
();

474  
VR_OK
;

475 
	}
}

478 
	$c⁄f_£t_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

480 
uöt8_t
 *
p
;

481 
c⁄f_vÆue
 *
cv
 = 
d©a
;

482 *
gt
;

484 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

485 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

486 
›t
->
«me
);

487  
VR_ERROR
;

490 
	`CONF_WLOCK
();

492 
p
 = 
obj
;

493 
gt
 = (*)(
p
 + 
›t
->
off£t
);

495 i‡(!
	`°rög2Œ
(
cv
->
vÆue
, 
	`sd¶í
(cv->vÆue), 
gt
)) {

496 
	`CONF_UNLOCK
();

497 
	`log_îr‹
("value ofÅhe key %s in conf file is invalid",

498 
›t
->
«me
);

499  
VR_ERROR
;

501 
c⁄f
->
vîsi⁄
 ++;

502 
	`CONF_UNLOCK
();

503  
VR_OK
;

504 
	}
}

507 
	$c⁄f_£t_yes‹no
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

509 
uöt8_t
 *
p
;

510 
c⁄f_vÆue
 *
cv
 = 
d©a
;

511 *
gt
;

513 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
){

514 
	`log_îr‹
("confÖool %s inÅhe conf fileÉrror",

515 
›t
->
«me
);

516  
VR_ERROR
;

519 
	`CONF_WLOCK
();

521 
p
 = 
obj
;

522 
gt
 = (*)(
p
 + 
›t
->
off£t
);

524 if(!
	`°rˇ£cmp
(
cv
->
vÆue
, 
CONF_VALUE_YES
)){

525 *
gt
 = 1;

526 }if(!
	`°rˇ£cmp
(
cv
->
vÆue
, 
CONF_VALUE_NO
)){

527 *
gt
 = 0;

529 
	`CONF_UNLOCK
();

530 
	`log_îr‹
("key %s in conf file must be %s or %s",

531 
›t
->
«me
, 
CONF_VALUE_YES
, 
CONF_VALUE_NO
);

532  
VR_ERROR
;

534 
c⁄f
->
vîsi⁄
 ++;

535 
	`CONF_UNLOCK
();

536  
VR_OK
;

537 
	}
}

540 
	$c⁄f_£t_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

542 
uöt8_t
 *
p
;

543 
uöt32_t
 
j
;

544 
c⁄f_vÆue
 **
cv_sub
, *
cv
 = 
d©a
;

545 
d¨øy
 *
gt
;

546 
sds
 *
°r
;

548 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
 &&

549 
cv
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
){

550 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string orárray",

551 
›t
->
«me
);

552  
VR_ERROR
;

553 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

554 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

555 i‡((*
cv_sub
)->
ty≥
 !
CONF_VALUE_TYPE_STRING
) {

556 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá stringárray",

557 
›t
->
«me
);

558  
VR_ERROR
;

562 
	`CONF_WLOCK
();

563 
p
 = 
obj
;

564 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

566 
	`d¨øy_n
(
gt
) > 0) {

567 
°r
 = 
	`d¨øy_p›
(
gt
);

568 
	`sds‰ì
(*
°r
);

571 i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
) {

572 
°r
 = 
	`d¨øy_push
(
gt
);

573 *
°r
 = 
	`sdsdup
(
cv
->
vÆue
);

574 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

575 
j
 = 0; j < 
	`d¨øy_n
(
cv
->
vÆue
); j ++) {

576 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

577 
°r
 = 
	`d¨øy_push
(
gt
);

578 *
°r
 = 
	`sdsdup
((*
cv_sub
)->
vÆue
);

581 
c⁄f
->
vîsi⁄
 ++;

582 
	`CONF_UNLOCK
();

583  
VR_OK
;

584 
	}
}

587 
	$c⁄f_£t_comm™ds_√ed_admö∑ss
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

589 
uöt8_t
 *
p
;

590 
uöt32_t
 
j
;

591 
c⁄f_vÆue
 **
cv_sub
, *
cv
 = 
d©a
;

592 
d¨øy
 *
gt
;

593 
sds
 *
°r
;

595 if(
cv
->
ty≥
 !
CONF_VALUE_TYPE_STRING
 &&

596 
cv
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
){

597 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá string orárray",

598 
›t
->
«me
);

599  
VR_ERROR
;

600 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

601 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

602 i‡((*
cv_sub
)->
ty≥
 !
CONF_VALUE_TYPE_STRING
) {

603 
	`log_îr‹
("confÖool %s inÅhe conf file isÇotá stringárray",

604 
›t
->
«me
);

605  
VR_ERROR
;

609 
	`CONF_WLOCK
();

610 
p
 = 
obj
;

611 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

613 
	`d¨øy_n
(
gt
) > 0) {

614 
°r
 = 
	`d¨øy_p›
(
gt
);

615 
	`sds‰ì
(*
°r
);

618 i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
) {

619 
°r
 = 
	`d¨øy_push
(
gt
);

620 *
°r
 = 
	`sdsdup
(
cv
->
vÆue
);

621 } i‡(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
) {

622 
j
 = 0; j < 
	`d¨øy_n
(
cv
->
vÆue
); j ++) {

623 
cv_sub
 = 
	`d¨øy_gë
(
cv
->
vÆue
, 
j
);

624 
°r
 = 
	`d¨øy_push
(
gt
);

625 *
°r
 = 
	`sdsdup
((*
cv_sub
)->
vÆue
);

628 
c⁄f
->
vîsi⁄
 ++;

629 
	`CONF_UNLOCK
();

630  
VR_OK
;

631 
	}
}

634 
	$c⁄f_gë_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
)

636 
uöt8_t
 *
p
;

637 
uöt32_t
 
j
;

638 
d¨øy
 *
°rs
 = 
d©a
;

639 
¨øy
 *
gt
;

640 
sds
 *
°r1
, *
°r2
;

642 i‡(
d©a
 =
NULL
) {

643  
VR_ERROR
;

646 
	`CONF_RLOCK
();

647 
p
 = 
obj
;

648 
gt
 = (
d¨øy
*)(
p
 + 
›t
->
off£t
);

650 
	`ASSERT
(
	`d¨øy_n
(
°rs
) == 0);

652 
j
 = 0; j < 
	`d¨øy_n
(
gt
); j ++) {

653 
°r1
 = 
	`d¨øy_gë
(
gt
, 
j
);

654 
°r2
 = 
	`d¨øy_push
(
°rs
);

655 *
°r2
 = 
	`sdsdup
(*
°r1
);

658 
	`CONF_UNLOCK
();

659  
VR_OK
;

660 
	}
}

662 
	$di˘C⁄fVÆueDe°ru˘‹
(*
¥ivd©a
, *
vÆ
)

664 
	`DICT_NOTUSED
(
¥ivd©a
);

666 
	`c⁄f_vÆue_de°roy
(
vÆ
);

667 
	}
}

669 
	$di˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

671 
	`DICT_NOTUSED
(
¥ivd©a
);

673 
	`di˘Rñó£
(
vÆ
);

674 
	}
}

676 
di˘Ty≥
 
	gOrg™iz©i⁄Di˘Ty≥
 = {

677 
di˘SdsHash
,

678 
NULL
,

679 
NULL
,

680 
di˘SdsKeyCom∑ª
,

681 
di˘SdsDe°ru˘‹
,

682 
di˘De°ru˘‹


685 
di˘Ty≥
 
	gKeyVÆueDi˘Ty≥
 = {

686 
di˘SdsHash
,

687 
NULL
,

688 
NULL
,

689 
di˘SdsKeyCom∑ª
,

690 
di˘SdsDe°ru˘‹
,

691 
di˘C⁄fVÆueDe°ru˘‹


694 
di˘Ty≥
 
	gC⁄fTabÀDi˘Ty≥
 = {

695 
di˘SåCa£Hash
,

696 
NULL
,

697 
NULL
,

698 
di˘SåKeyCa£Com∑ª
,

699 
NULL
,

700 
NULL


703 
c⁄f_vÆue
 *
	$c⁄f_vÆue_¸óã
(
ty≥
)

705 
c⁄f_vÆue
 *
cv
;

707 
cv
 = 
	`dÆloc
((*cv));

708 if(
cv
 =
NULL
){

709  
NULL
;

712 
cv
->
ty≥
 =Åype;

713 
cv
->
vÆue
 = 
NULL
;

715 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

716 
cv
->
vÆue
 = 
	`d¨øy_¸óã
(3, (
c⁄f_vÆue
*));

717 if(
cv
->
vÆue
 =
NULL
){

718 
	`d‰ì
(
cv
);

719  
NULL
;

723  
cv
;

724 
	}
}

726 
	$c⁄f_vÆue_de°roy
(
c⁄f_vÆue
 *
cv
)

728 
c⁄f_vÆue
 **
cv_sub
;

730 if(
cv
 =
NULL
){

734 if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_UNKNOW
){

735 
	`d‰ì
(
cv
);

737 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_STRING
){

738 if(
cv
->
vÆue
 !
NULL
){

739 
	`sds‰ì
(
cv
->
vÆue
);

741 }if(
cv
->
ty≥
 =
CONF_VALUE_TYPE_ARRAY
){

742 if(
cv
->
vÆue
 !
NULL
){

743 
	`d¨øy_n
(
cv
->
vÆue
) > 0){

744 
cv_sub
 = 
	`d¨øy_p›
(
cv
->
vÆue
);

745 
	`c⁄f_vÆue_de°roy
(*
cv_sub
);

748 
	`d¨øy_de°roy
(
cv
->
vÆue
);

751 
	`NOT_REACHED
();

754 
	`d‰ì
(
cv
);

755 
	}
}

757 
	$c⁄f_£rvî_öô
(
c⁄f_£rvî
 *
cs
)

759 if(
cs
 =
NULL
){

760  
VR_ERROR
;

763 
cs
->
˘abÀ
 = 
	`di˘Cª©e
(&
C⁄fTabÀDi˘Ty≥
,
NULL
);

765 
cs
->
d©aba£s
 = 
CONF_UNSET_NUM
;

766 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONF_UNSET_NUM
;

767 
cs
->
max_time_com∂exôy_limô
 = 
CONF_UNSET_NUM
;

768 
cs
->
maxmem‹y
 = 
CONF_UNSET_NUM
;

769 
cs
->
maxmem‹y_pﬁicy
 = 
CONF_UNSET_NUM
;

770 
cs
->
maxmem‹y_ßm∂es
 = 
CONF_UNSET_NUM
;

771 
cs
->
max˛õ¡s
 = 
CONF_UNSET_NUM
;

772 
cs
->
thªads
 = 
CONF_UNSET_NUM
;

773 
	`d¨øy_öô
(&
cs
->
böds
,1,(
sds
));

774 
cs
->
p‹t
 = 
CONF_UNSET_NUM
;

775 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

776 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

777 
cs
->
dú
 = 
CONF_UNSET_PTR
;

778 
	`d¨øy_öô
(&
cs
->
comm™ds_√ed_admö∑ss
,1,(
sds
));

780  
VR_OK
;

781 
	}
}

783 
	$c⁄f_£rvî_£t_deÁu…
(
c⁄f_£rvî
 *
cs
)

785 
sds
 *
°r
;

786 
c⁄f_›ti⁄
 *
›t
;

788 if(
cs
 =
NULL
){

789  
VR_ERROR
;

792 
›t
 = 
c⁄f_£rvî_›ti⁄s
; o±&&›t->
«me
; opt++) {

793 
	`di˘Add
(
cs
->
˘abÀ
,
›t
->
«me
,opt);

796 
cs
->
d©aba£s
 = 
CONFIG_DEFAULT_LOGICAL_DBNUM
;

797 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONFIG_DEFAULT_INTERNAL_DBNUM
;

798 
cs
->
max_time_com∂exôy_limô
 = 
CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
;

799 
cs
->
maxmem‹y
 = 
CONFIG_DEFAULT_MAXMEMORY
;

800 
cs
->
maxmem‹y_pﬁicy
 = 
CONFIG_DEFAULT_MAXMEMORY_POLICY
;

801 
cs
->
maxmem‹y_ßm∂es
 = 
CONFIG_DEFAULT_MAXMEMORY_SAMPLES
;

802 
cs
->
max˛õ¡s
 = 
CONFIG_DEFAULT_MAX_CLIENTS
;

803 
cs
->
thªads
 = 
CONFIG_DEFAULT_THREADS_NUM
;

804 
cs
->
¶owlog_log_¶owî_th™
 = 
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
;

805 
cs
->
¶owlog_max_Àn
 = 
CONFIG_DEFAULT_SLOWLOG_MAX_LEN
;

806 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

807 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

809 
	`d¨øy_n
(&
cs
->
böds
) > 0) {

810 
°r
 = 
	`d¨øy_p›
(&
cs
->
böds
);

811 
	`sds‰ì
(*
°r
);

813 
°r
 = 
	`d¨øy_push
(&
cs
->
böds
);

814 *
°r
 = 
	`sd¢ew
(
CONFIG_DEFAULT_HOST
);

816 
cs
->
p‹t
 = 
CONFIG_DEFAULT_SERVER_PORT
;

818 i‡(
cs
->
dú
 !
CONF_UNSET_PTR
) {

819 
	`sds‰ì
(
cs
->
dú
);

821 
cs
->
dú
 = 
	`sd¢ew
(
CONFIG_DEFAULT_DATA_DIR
);

823 
	`d¨øy_n
(&
cs
->
comm™ds_√ed_admö∑ss
) > 0) {

824 
°r
 = 
	`d¨øy_p›
(&
cs
->
comm™ds_√ed_admö∑ss
);

825 
	`sds‰ì
(*
°r
);

828  
VR_OK
;

829 
	}
}

831 
	$c⁄f_£rvî_deöô
(
c⁄f_£rvî
 *
cs
)

833 
sds
 *
°r
;

835 if(
cs
 =
NULL
){

839 
cs
->
d©aba£s
 = 
CONF_UNSET_NUM
;

840 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
 = 
CONF_UNSET_NUM
;

841 
cs
->
maxmem‹y
 = 
CONF_UNSET_NUM
;

842 
cs
->
maxmem‹y_pﬁicy
 = 
CONF_UNSET_NUM
;

843 
cs
->
maxmem‹y_ßm∂es
 = 
CONF_UNSET_NUM
;

844 
cs
->
max_time_com∂exôy_limô
 = 
CONF_UNSET_NUM
;

845 
cs
->
max˛õ¡s
 = 
CONF_UNSET_NUM
;

846 
cs
->
thªads
 = 
CONF_UNSET_NUM
;

848 
	`d¨øy_n
(&
cs
->
böds
) > 0) {

849 
°r
 = 
	`d¨øy_p›
(&
cs
->
böds
);

850 
	`sds‰ì
(*
°r
);

852 
	`d¨øy_deöô
(&
cs
->
böds
);

854 
cs
->
p‹t
 = 
CONF_UNSET_NUM
;

856 i‡(
cs
->
dú
 !
CONF_UNSET_PTR
) {

857 
	`sds‰ì
(
cs
->
dú
);

858 
cs
->
dú
 = 
CONF_UNSET_PTR
;

861 i‡(
cs
->
ªquúïass
 !
CONF_UNSET_PTR
) {

862 
	`sds‰ì
(
cs
->
ªquúïass
);

863 
cs
->
ªquúïass
 = 
CONF_UNSET_PTR
;

865 i‡(
cs
->
admö∑ss
 !
CONF_UNSET_PTR
) {

866 
	`sds‰ì
(
cs
->
admö∑ss
);

867 
cs
->
admö∑ss
 = 
CONF_UNSET_PTR
;

870 
	`d¨øy_n
(&
cs
->
comm™ds_√ed_admö∑ss
) > 0) {

871 
°r
 = 
	`d¨øy_p›
(&
cs
->
comm™ds_√ed_admö∑ss
);

872 
	`sds‰ì
(*
°r
);

874 
	`d¨øy_deöô
(&
cs
->
comm™ds_√ed_admö∑ss
);

875 
	}
}

878 
	$c⁄f_£rvî_gë
(c⁄° *
›ti⁄_«me
, *
vÆue
)

880 
c⁄f_›ti⁄
 *
›t
;

882 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
›ti⁄_«me
);

883 i‡(
›t
 =
NULL
)

884  
VR_ERROR
;

886  
›t
->
	`gë
(
c£rvî
, o±, 
vÆue
);

887 
	}
}

890 
	$c⁄f_£rvî_£t
(c⁄° *
›ti⁄_«me
, 
c⁄f_vÆue
 *
vÆue
)

892 
c⁄f_›ti⁄
 *
›t
;

894 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
›ti⁄_«me
);

895 i‡(
›t
 =
NULL
 || o±->
Êags
&
CONF_FIELD_FLAGS_NO_MODIFY
)

896  
VR_ERROR
;

898  
›t
->
	`£t
(
c£rvî
, o±, 
vÆue
);

899 
	}
}

901 
	$c⁄f_öô
(
vr_c⁄f
 *
cf
)

903 
ªt
;

905 if(
cf
 =
NULL
){

906  
VR_ERROR
;

909 
cf
->
‚ame
 = 
NULL
;

910 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

911 
cf
->
vîsi⁄
 = 0;

912 
	`±hªad_rwlock_öô
(&
cf
->
rwl
, 
NULL
);

913 
	`±hªad_muãx_öô
(&
cf
->
Êock
, 
NULL
);

915 
cf
->
‹g™iz©i⁄s
 = 
	`di˘Cª©e
(&
Org™iz©i⁄Di˘Ty≥
, 
NULL
);

916 i‡(
cf
->
‹g™iz©i⁄s
 =
NULL
) {

917  
VR_ERROR
;

920 
	`c⁄f_£rvî_öô
(&
cf
->
c£rvî
);

922 
c⁄f
 = 
cf
;

924  
VR_OK
;

925 
	}
}

927 
	$c⁄f_£t_deÁu…
(
vr_c⁄f
 *
cf
)

929 
	`CONF_WLOCK
();

930 
	`c⁄f_£rvî_£t_deÁu…
(&
cf
->
c£rvî
);

931 
	`CONF_UNLOCK
();

932  
VR_OK
;

933 
	}
}

935 
	$c⁄f_deöô
(
vr_c⁄f
 *
cf
)

937 if(
cf
 =
NULL
){

941 i‡(
cf
->
‚ame
 !
NULL
) {

942 
	`sds‰ì
(
cf
->
‚ame
);

943 
cf
->
‚ame
 = 
NULL
;

946 if(
cf
->
‹g™iz©i⁄s
 !
NULL
){

947 
	`di˘Rñó£
(
cf
->
‹g™iz©i⁄s
);

948 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

951 
	`c⁄f_£rvî_deöô
(&
cf
->
c£rvî
);

953 
cf
->
vîsi⁄
 = 0;

954 
	`±hªad_rwlock_de°roy
(&
cf
->
rwl
);

955 
	`±hªad_muãx_de°roy
(&
cf
->
Êock
);

956 
	}
}

959 
	$c⁄f_£rvî_dump
(
c⁄f_£rvî
 *
cs
, 
log_Àvñ
)

961 if(
cs
 =
NULL
){

965 
	`log_debug
(
log_Àvñ
, " d©aba£†: %d", 
cs
->
d©aba£s
);

966 
	`log_debug
(
log_Àvñ
, " i¡î«l_dbs_≥r_d©aba£†: %d", 
cs
->
öã∫Æ_dbs_≥r_d©aba£s
);

967 
	`log_debug
(
log_Àvñ
, " maxmem‹y : %Œd", 
cs
->
maxmem‹y
);

968 
	`log_debug
(
log_Àvñ
, " maxmem‹y_pﬁicy : %d", 
cs
->
maxmem‹y_pﬁicy
);

969 
	`log_debug
(
log_Àvñ
, " maxmem‹y_ßm∂e†: %d", 
cs
->
maxmem‹y_ßm∂es
);

970 
	`log_debug
(
log_Àvñ
, " max_time_com∂exôy_limô : %Œd", 
cs
->
max_time_com∂exôy_limô
);

971 
	}
}

974 
	$c⁄f_dump
(
vr_c⁄f
 *
cf
)

976 
log_Àvñ
 = 
LOG_VERB
;

977 
c⁄f_£rvî
 *
cs
;

979 if(
cf
 =
NULL
){

983 
cs
 = &
cf
->
c£rvî
;

984 
	`log_debug
(
log_Àvñ
, "server in conf file");

985 
	`c⁄f_£rvî_dump
(
cs
, 
log_Àvñ
);

986 
	`log_debug
(
log_Àvñ
, "");

987 
	}
}

993 
	$c⁄f_key_vÆue_ö£π
(
di˘
 *
‹g
, 
sds
 
key
, 
c⁄f_vÆue
 *
cv
)

995 i‡(
key
 =
NULL
) {

996 
	`log_îr‹
("value in conf file hasÇo key");

1000 i‡(
cv
 =
NULL
) {

1001 
	`log_îr‹
("key %†ö c⁄‡fûêha†nÿvÆue", 
key
);

1005 i‡(
‹g
 =
NULL
) {

1006 
	`log_îr‹
("key %s in conf file hasÇo organization",

1007 
key
);

1011 i‡(
	`di˘Add
(
‹g
,
key
,
cv
Ë!
DICT_OK
) {

1012 
di˘E¡ry
 *
de
;

1013 
c⁄f_vÆue
 *
cv_ﬁd
, *
cv_√w
, **
cv_sub
;

1014 
de
 = 
	`di˘Föd
(
‹g
,
key
);

1015 
cv_ﬁd
 = 
	`di˘GëVÆ
(
de
);

1016 i‡(
cv_ﬁd
->
ty≥
 !
CONF_VALUE_TYPE_ARRAY
) {

1017 
cv_√w
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_ARRAY
);

1018 
cv_sub
 = 
	`d¨øy_push
(
cv_√w
->
vÆue
);

1019 *
cv_sub
 = 
cv_ﬁd
;

1020 
cv_sub
 = 
	`d¨øy_push
(
cv_√w
->
vÆue
);

1021 *
cv_sub
 = 
cv
;

1022 
	`di˘SëVÆ
(
‹g
,
de
,
cv_√w
);

1024 
cv_sub
 = 
	`d¨øy_push
(
cv_ﬁd
->
vÆue
);

1025 *
cv_sub
 = 
cv
;

1031 
	}
}

1034 
	$c⁄f_¥e_lﬂd_‰om_°rög
(
vr_c⁄f
 *
cf
, *
c⁄fig
)

1036 
ªt
;

1037 
löíum
 = 0, 
tŸlöes
, 
i
, 
j
;

1038 
¶aveof_löíum
 = 0;

1039 
sds
 *
löes
 = 
NULL
;

1040 
di˘
 *
‹g
 = 
NULL
;

1041 
sds
 
‹g_«me
 = 
NULL
;

1042 
di˘E¡ry
 *
de
;

1043 
sds
 
key
 = 
NULL
;

1044 
c⁄f_vÆue
 *
cv
 = 
NULL
;

1046 
löes
 = 
	`sds•lôÀn
(
c⁄fig
,
	`°æí
(c⁄fig),"\n",1,&
tŸlöes
);

1048 
i
 = 0; i < 
tŸlöes
; i++) {

1049 
sds
 *
¨gv
;

1050 
¨gc
;

1052 
löíum
 = 
i
+1;

1053 
löes
[
i
] = 
	`sd°rim
(lines[i]," \t\r\n");

1056 i‡(
löes
[
i
][0] == '#' ||Üines[i][0] == '\0') ;

1058 i‡(
löes
[
i
][0] == '[') {

1059 i‡(
	`sd¶í
(
löes
[
i
]) <= 2 ||Üines[i][sdslen(lines[i])-1] == ']') {

1060 
	`log_îr‹
("OrganizationÇame %s in conf file %sÉrror",

1061 
löes
[
i
], 
cf
->
‚ame
);

1062 
lﬂdîr
;

1064 
‹g_«me
 = 
	`sd¢ewÀn
(
löes
[
i
]+1,
	`sd¶í
(lines[i])-2);

1065 
de
 = 
	`di˘Föd
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
);

1066 i‡(
de
 =
NULL
) {

1067 
‹g
 = 
	`di˘Cª©e
(&
KeyVÆueDi˘Ty≥
, 
NULL
);

1068 
	`di˘Add
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
,
‹g
);

1070 
‹g
 = 
	`di˘GëVÆ
(
de
);

1071 
	`sds‰ì
(
‹g_«me
);

1078 
¨gv
 = 
	`sds•lô¨gs
(
löes
[
i
],&
¨gc
);

1079 i‡(
¨gv
 =
NULL
) {

1080 
	`log_îr‹
("Unbalanced quotes in configurationÜine");

1081 
lﬂdîr
;

1085 i‡(
¨gc
 == 0) {

1086 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1089 
	`sd°ﬁowî
(
¨gv
[0]);

1091 i‡(
‹g
 =
NULL
) {

1092 
‹g_«me
 = 
	`sd¢ew
("server");

1093 
‹g
 = 
	`di˘Cª©e
(&
KeyVÆueDi˘Ty≥
, 
NULL
);

1094 
	`di˘Add
(
cf
->
‹g™iz©i⁄s
,
‹g_«me
,
‹g
);

1097 
key
 = 
¨gv
[0];

1098 
¨gv
[0] = 
NULL
;

1099 
j
 = 1; j < 
¨gc
; j ++) {

1100 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1101 
cv
->
vÆue
 = 
¨gv
[
j
];

1102 
¨gv
[
j
] = 
NULL
;

1103 
ªt
 = 
	`c⁄f_key_vÆue_ö£π
(
‹g
, 
key
, 
cv
);

1104 if(
ªt
 == -1){

1105 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1106 
	`sds‰ì
(
key
);

1107 
	`c⁄f_vÆue_de°roy
(
cv
);

1108 
	`log_îr‹
("key value insert into organization failed");

1109 
lﬂdîr
;

1110 } i‡(
j
 =1 && 
ªt
 == 0) {

1111 
	`sds‰ì
(
key
);

1115 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1118 i‡(
löes
) {

1119 
	`sds‰ì•lôªs
(
löes
,
löíum
);

1121  
VR_OK
;

1123 
lﬂdîr
:

1124 i‡(
löes
) {

1125 
	`sds‰ì•lôªs
(
löes
,
löíum
);

1127  
VR_ERROR
;

1128 
	}
}

1131 
	$c⁄f_¥e_vÆid©e
(
vr_c⁄f
 *
cf
)

1133 
ªt
;

1134 
sds
 
c⁄fig
 = 
	`sd£m±y
();

1135 
buf
[
CONF_MAX_LINE
+1];

1138 i‡(
cf
->
‚ame
) {

1139 
FILE
 *
Â
;

1141 i‡(
cf
->
‚ame
[0] == '-' && cf->fname[1] == '\0') {

1142 
Â
 = 
°dö
;

1144 i‡((
Â
 = 
	`f›í
(
cf
->
‚ame
,"r")Ë=
NULL
) {

1145 
	`log_îr‹
("O≥¿c⁄fig fûê'%s' faûed: %s", 
cf
->
‚ame
, 
	`°ªº‹
(
î∫o
));

1146 
	`sds‰ì
(
c⁄fig
);

1147  
VR_ERROR
;

1150 
	`fgës
(
buf
,
CONF_MAX_LINE
+1,
Â
Ë!
NULL
)

1151 
c⁄fig
 = 
	`sdsˇt
(c⁄fig,
buf
);

1152 i‡(
Â
 !
°dö
Ë
	`f˛o£
(fp);

1155 
ªt
 = 
	`c⁄f_¥e_lﬂd_‰om_°rög
(
cf
,
c⁄fig
);

1156 i‡(
ªt
 !
VR_OK
) {

1157 
	`sds‰ì
(
c⁄fig
);

1158  
VR_ERROR
;

1161 
	`sds‰ì
(
c⁄fig
);

1162  
VR_OK
;

1163 
	}
}

1166 
	$c⁄f_∑r£_c⁄f_£rvî
(
c⁄f_£rvî
 *
cs
, 
di˘
 *
‹g
)

1168 
ªt
;

1169 
c⁄f_›ti⁄
 *
›t
;

1170 
di˘E¡ry
 *
de
;

1171 
sds
 
key
;

1173 if(
cs
 =
NULL
 || 
‹g
 == NULL){

1174  
VR_ERROR
;

1177 
key
 = 
	`sd£m±y
();

1178 
›t
 = 
c⁄f_£rvî_›ti⁄s
; o±&&›t->
«me
; opt++) {

1179 
key
 = 
	`sds˝y
(key,
›t
->
«me
);

1180 
de
 = 
	`di˘Föd
(
‹g
,
key
);

1181 i‡(
de
 !
NULL
) {

1182 
ªt
 = 
›t
->
	`£t
(
cs
, o±, 
	`di˘GëVÆ
(
de
));

1183 if(
ªt
 !
VR_OK
){

1184 
	`log_îr‹
("∑r£ key %†ö c⁄‡fûêîr‹", 
key
);

1185 
	`sds‰ì
(
key
);

1186  
VR_ERROR
;

1191 
	`sds‰ì
(
key
);

1192  
VR_OK
;

1193 
	}
}

1196 
	$c⁄f_∑r£
(
vr_c⁄f
 *
cf
)

1198 
ªt
;

1199 
di˘
 *
‹gs
, *
‹g
;

1200 
di˘E¡ry
 *
de
;

1201 
sds
 
key
;

1203 i‡(
cf
 =
NULL
) {

1204  
VR_ERROR
;

1207 
‹gs
 = 
cf
->
‹g™iz©i⁄s
;

1208 i‡(
‹gs
 =
NULL
) {

1209  
VR_ERROR
;

1213 
key
 = 
	`sd¢ew
(
CONF_ORGANIZATION_NAME_SERVER
);

1214 
de
 = 
	`di˘Föd
(
‹gs
, 
key
);

1215 i‡(
de
 =
NULL
) {

1216 
	`log_îr‹
("canÇot find %s organization in conf file %s",

1217 
CONF_ORGANIZATION_NAME_SERVER
, 
cf
->
‚ame
);

1218 
	`sds‰ì
(
key
);

1219  
VR_ERROR
;

1222 
‹g
 = 
	`di˘GëVÆ
(
de
);

1223 i‡(
‹g
 =
NULL
) {

1224 
	`log_îr‹
("di˘ %†íåy vÆuêi†NULL", 
	`di˘GëKey
(
de
));

1225 
	`sds‰ì
(
key
);

1226  
VR_ERROR
;

1229 
ªt
 = 
	`c⁄f_∑r£_c⁄f_£rvî
(&
cf
->
c£rvî
, 
‹g
);

1230 if–
ªt
 !
VR_OK
) {

1231 
	`log_îr‹
("common confÖarseÉrror");

1232 
	`sds‰ì
(
key
);

1233  
VR_ERROR
;

1236 
	`sds‰ì
(
key
);

1238  
VR_OK
;

1239 
	}
}

1242 
	$c⁄f_po°_vÆid©e
(
vr_c⁄f
 *
cf
)

1244 if(
cf
 =
NULL
){

1245  
VR_ERROR
;

1248 if(
cf
->
‹g™iz©i⁄s
 !
NULL
){

1249 
	`di˘Rñó£
(
cf
->
‹g™iz©i⁄s
);

1250 
cf
->
‹g™iz©i⁄s
 = 
NULL
;

1253  
VR_OK
;

1254 
	}
}

1256 
vr_c⁄f
 *

1257 
	$c⁄f_›í
(*
fûíame
)

1259 
ªt
;

1260 
vr_c⁄f
 *
cf
 = 
NULL
;

1261 
sds
 
∑th
 = 
NULL
;

1263 i‡(
fûíame
 =
NULL
) {

1264 
	`log_îr‹
("configuration fileÇame is NULL.");

1265  
NULL
;

1268 
∑th
 = 
	`gëAbsﬁuãP©h
(
fûíame
);

1269 i‡(
∑th
 =
NULL
) {

1270 
	`log_îr‹
("c⁄figuøti⁄ fûê«mê'%s' i†îr‹.", 
fûíame
);

1271 
îr‹
;

1274 
cf
 = 
	`dÆloc
((*cf));

1275 i‡(
cf
 =
NULL
) {

1276 
îr‹
;

1279 
ªt
 = 
	`c⁄f_öô
(
cf
);

1280 if(
ªt
 !
VR_OK
){

1281 
îr‹
;

1284 
ªt
 = 
	`c⁄f_£t_deÁu…
(
cf
);

1285 i‡(
ªt
 !
VR_OK
) {

1286 
îr‹
;

1289 
cf
->
‚ame
 = 
∑th
;

1291  
cf
;

1293 
îr‹
:

1295 i‡(
cf
 !
NULL
) {

1296 
	`c⁄f_de°roy
(
cf
);

1299 i‡(
∑th
 !
NULL
) {

1300 
	`sds‰ì
(
∑th
);

1303  
NULL
;

1304 
	}
}

1306 
vr_c⁄f
 *

1307 
	$c⁄f_¸óã
(*
fûíame
)

1309 
ªt
;

1310 
vr_c⁄f
 *
cf
;

1312 
cf
 = 
	`c⁄f_›í
(
fûíame
);

1313 i‡(
cf
 =
NULL
) {

1314  
NULL
;

1318 
ªt
 = 
	`c⁄f_¥e_vÆid©e
(
cf
);

1319 i‡(
ªt
 !
VR_OK
) {

1320 
îr‹
;

1323 
	`c⁄f_‹g™iz©i⁄s_dump
(
cf
);

1326 
ªt
 = 
	`c⁄f_∑r£
(
cf
);

1327 i‡(
ªt
 !
VR_OK
) {

1328 
îr‹
;

1332 
ªt
 = 
	`c⁄f_po°_vÆid©e
(
cf
);

1333 i‡(
ªt
 !
VR_OK
) {

1334 
îr‹
;

1337 
	`c⁄f_dump
(
cf
);

1339 
c£rvî
 = &
cf
->cserver;

1341  
cf
;

1343 
îr‹
:

1344 
	`c⁄f_de°roy
(
cf
);

1345  
NULL
;

1346 
	}
}

1349 
	$c⁄f_de°roy
(
vr_c⁄f
 *
cf
)

1351 i‡(
cf
 =
NULL
) {

1355 
	`c⁄f_deöô
(
cf
);

1357 
	`d‰ì
(
cf
);

1358 
	}
}

1361 
	$c⁄f_vîsi⁄_gë
()

1363 
vîsi⁄
;

1365 
	`CONF_RLOCK
();

1366 
vîsi⁄
 = 
c⁄f
->version;

1367 
	`CONF_UNLOCK
();

1369  
vîsi⁄
;

1370 
	}
}

1373 
	$CONF_RLOCK
()

1375  
	`±hªad_rwlock_rdlock
(&
c⁄f
->
rwl
);

1376 
	}
}

1379 
	$CONF_WLOCK
()

1381  
	`±hªad_rwlock_wæock
(&
c⁄f
->
rwl
);

1382 
	}
}

1385 
	$CONF_UNLOCK
()

1387  
	`±hªad_rwlock_u∆ock
(&
c⁄f
->
rwl
);

1388 
	}
}

1391 
	$CONFF_LOCK
()

1393  
	`±hªad_muãx_lock
(&
c⁄f
->
Êock
);

1394 
	}
}

1397 
	$CONFF_UNLOCK
()

1399  
	`±hªad_muãx_u∆ock
(&
c⁄f
->
Êock
);

1400 
	}
}

1403 
	$gë_evi˘pﬁicy_°rögs
(
evi˘pﬁicy_ty≥
)

1405  
evi˘pﬁicy_°rögs
[
evi˘pﬁicy_ty≥
];

1406 
	}
}

1412 
	$c⁄figSëComm™d
(
˛õ¡
 *
c
) {

1413 
ªt
;

1414 
sds
 
vÆue
;

1415 
sds
 *
fõlds
;

1416 
fõlds_cou¡
 = 0;

1417 
c⁄f_›ti⁄
 *
›t
;

1418 
c⁄f_vÆue
 *
cv
;

1420 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[2],
	`sdsEncodedObje˘
(c->argv[2]));

1421 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[3],
	`sdsEncodedObje˘
(c->argv[3]));

1423 
›t
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
c
->
¨gv
[2]->
±r
);

1425 i‡(
›t
 =
NULL
) {

1426 
	`addRïlyEº‹F‹m©
(
c
,"Unsupported CONFIGÖarameter: %s",

1427 (*)
c
->
¨gv
[2]->
±r
);

1429 } i‡(
›t
->
Êags
&
CONF_FIELD_FLAGS_NO_MODIFY
) {

1430 
	`addRïlyEº‹F‹m©
(
c
,"Unsupported modifyÅhis CONFIGÖarameter: %s",

1431 (*)
c
->
¨gv
[2]->
±r
);

1435 
vÆue
 = 
c
->
¨gv
[3]->
±r
;

1438 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,
CONFIG_SOPN_MAXCLIENTS
)) {

1439 
max˛õ¡s
;

1440 
fûñimô
, 
thªads
;

1441 i‡(
	`°rög2l
(
vÆue
,
	`sd¶í
(vÆue),&
max˛õ¡s
Ë=0 || max˛õ¡†< 1Ë
badfmt
;

1442 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads
);

1444 
fûñimô
 = 
	`adju°O≥nFûesLimô
(()
max˛õ¡s
);

1445 i‡((
fûñimô
-
thªads
*2-
CONFIG_MIN_RESERVED_FDS
Ë!
max˛õ¡s
) {

1446 
	`addRïlyEº‹F‹m©
(
c
,"The operating system isÇotábleÅo handleÅhe specifiedÇumber of clients");

1449 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,
CONFIG_SOPN_ADMINPASS
)) {

1450 i‡(
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2) {

1451 
	`addRïlyEº‹F‹m©
(
c
,"YouÇeedádminpassÅo setÅhis CONFIGÖarameter: %s",

1452 (*)
c
->
¨gv
[2]->
±r
);

1457 
fõlds
 = 
	`sds•lôÀn
(
vÆue
,
	`sd¶í
(vÆue)," ",1,&
fõlds_cou¡
);

1458 i‡(
fõlds
 =
NULL
) {

1459 
badfmt
;

1460 } i‡(
fõlds_cou¡
 == 0) {

1461 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1462 
cv
->
vÆue
 = 
	`sd£m±y
();

1463 } i‡(
fõlds_cou¡
 == 1) {

1464 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1465 
cv
->
vÆue
 = 
fõlds
[0];

1466 
fõlds
[0] = 
NULL
;

1467 } i‡(
fõlds_cou¡
 > 1) {

1468 
c⁄f_vÆue
 **
cv_sub
;

1469 
uöt32_t
 
i
;

1471 
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_ARRAY
);

1472 
i
 = 0; i < 
fõlds_cou¡
; i ++) {

1473 
cv_sub
 = 
	`d¨øy_push
(
cv
->
vÆue
);

1474 *
cv_sub
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1475 (*
cv_sub
)->
vÆue
 = 
fõlds
[
i
];

1476 
fõlds
[
i
] = 
NULL
;

1479 
	`log_debug
(
LOG_NOTICE
, "fõlds_cou¡: %d", 
fõlds_cou¡
);

1480 
	`£rvîP™ic
("Error config set value");

1482 
	`sds‰ì•lôªs
(
fõlds
,
fõlds_cou¡
);

1484 
ªt
 = 
›t
->
	`£t
(
c£rvî
, o±, 
cv
);

1485 
	`c⁄f_vÆue_de°roy
(
cv
);

1486 i‡(
ªt
 !
VR_OK
) {

1487 
badfmt
;

1491 i‡(!
	`°rcmp
(
›t
->
«me
,
CONFIG_SOPN_MAXMEMORY
)) {

1492 
maxmem‹y
;

1493 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
maxmem‹y
);

1494 i‡(
maxmem‹y
) {

1495 i‡(
maxmem‹y
 < 
	`dÆloc_u£d_mem‹y
()) {

1496 
	`log_w¨n
("WARNING:ÅheÇew maxmemory value set via CONFIG SET is smallerÅhanÅhe current memory usage. This willÑesult in keysÉvictionánd/or inabilityÅoácceptÇew write commands depending onÅhe maxmemory-policy.");

1497 
	`‰ìMem‹yIfNìded
(
c
->
vñ
);

1503 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1506 
badfmt
:

1507 
	`addRïlyEº‹F‹m©
(
c
,"Invalidárgument '%s' for CONFIG SET '%s'",

1508 (*)
vÆue
,

1509 (*)
c
->
¨gv
[2]->
±r
);

1510 
	}
}

1516 
	$addRïlyC⁄fO±i⁄
(
˛õ¡
 *
c
,
c⁄f_›ti⁄
 *
c›
)

1518 
	`addRïlyBulkCSåög
(
c
,
c›
->
«me
);

1519 i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_INT
) {

1520 
vÆue
;

1521 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1523 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_MAXMEMORYP
)) {

1524 
	`addRïlyBulkCSåög
(
c
,
	`gë_evi˘pﬁicy_°rögs
(
vÆue
));

1526 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vÆue
);

1528 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_LONGLONG
) {

1529 
vÆue
;

1530 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1531 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vÆue
);

1532 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_SDS
) {

1533 
sds
 
vÆue
;

1534 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆue
);

1535 i‡(
vÆue
 =
NULL
) {

1536 
	`addRïlyBulkCSåög
(
c
,"");

1538 
	`addRïlyBulkSds
(
c
,
vÆue
);

1540 } i‡(
c›
->
ty≥
 =
CONF_FIELD_TYPE_ARRAYSDS
) {

1541 
d¨øy
 
vÆues
;

1542 
sds
 
vÆue
 = 
	`sd£m±y
();

1543 
sds
 *
ñem
;

1545 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

1546 
	`c⁄f_£rvî_gë
(
c›
->
«me
,&
vÆues
);

1547 
	`d¨øy_n
(&
vÆues
) > 0) {

1548 
ñem
 = 
	`d¨øy_p›
(&
vÆues
);

1549 
vÆue
 = 
	`sdsˇtsds
(vÆue,*
ñem
);

1550 
vÆue
 = 
	`sdsˇt
(value," ");

1551 
	`sds‰ì
(*
ñem
);

1553 
	`d¨øy_deöô
(&
vÆues
);

1554 i‡(
	`sd¶í
(
vÆue
Ë> 0Ë
	`sd§™ge
(value,0,-2);

1555 
	`addRïlyBulkSds
(
c
,
vÆue
);

1557 
	`£rvîP™ic
("Error conf fieldÅype");

1559 
	}
}

1561 
	$c⁄figGëComm™d
(
˛õ¡
 *
c
) {

1562 
robj
 *
o
 = 
c
->
¨gv
[2];

1563 *
∑âîn
 = 
o
->
±r
;

1564 
c⁄f_›ti⁄
 *
c›
;

1565 
	`£rvîAs£πWôhInfo
(
c
,
o
,
	`sdsEncodedObje˘
(o));

1567 
c›
 = 
	`di˘FëchVÆue
(
c£rvî
->
˘abÀ
, 
∑âîn
);

1568 i‡(
c›
 !
NULL
) {

1570 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_ADMINPASS
) &&

1571 
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2) {

1572 
	`addRïly
(
c
,
sh¨ed
.
nﬂdmöîr
);

1574 
	`addRïlyMu…iBulkLí
(
c
,2);

1575 
	`addRïlyC⁄fO±i⁄
(
c
,
c›
);

1578 
m©ches
 = 0;

1579 * 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

1580 
c›
 = 
c⁄f_£rvî_›ti⁄s
; c›&&c›->
«me
; cop++) {

1581 i‡(
	`°rögm©ch
(
∑âîn
,
c›
->
«me
,1)) {

1583 i‡(!
	`°rcmp
(
c›
->
«me
,
CONFIG_SOPN_ADMINPASS
) &&

1584 
c
->
vñ
->
cc
.
admö∑ss
 && c->
authítiˇãd
 < 2)

1587 
	`addRïlyC⁄fO±i⁄
(
c
,
c›
);

1588 
m©ches
 ++;

1591 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn
,
m©ches
*2);

1593 
	}
}

1600 
	sªwrôeC⁄figSèã
 {

1601 
di˘
 *
	m›ti⁄_to_löe
;

1602 
di˘
 *
	mªwrôãn
;

1603 
	mnumlöes
;

1604 
sds
 *
	mlöes
;

1605 
	mhas_èû
;

1610 
	$ªwrôeC⁄figAµídLöe
(
ªwrôeC⁄figSèã
 *
°©e
, 
sds
 
löe
) {

1611 
°©e
->
löes
 = 
	`dªÆloc
(°©e->löes, (*Ë* (°©e->
numlöes
+1));

1612 
°©e
->
löes
[°©e->
numlöes
++] = 
löe
;

1613 
	}
}

1616 
	$ªwrôeC⁄figAddLöeNumbîToO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, 
sds
 
›ti⁄
, 
löíum
) {

1617 
dli°
 *
l
 = 
	`di˘FëchVÆue
(
°©e
->
›ti⁄_to_löe
,
›ti⁄
);

1619 i‡(
l
 =
NULL
) {

1620 
l
 = 
	`dli°Cª©e
();

1621 
	`di˘Add
(
°©e
->
›ti⁄_to_löe
,
	`sdsdup
(
›ti⁄
),
l
);

1623 
	`dli°AddNodeTaû
(
l
,(*)()
löíum
);

1624 
	}
}

1626 
di˘Ty≥
 
	g›ti⁄ToLöeDi˘Ty≥
 = {

1627 
di˘SdsCa£Hash
,

1628 
NULL
,

1629 
NULL
,

1630 
di˘SdsKeyCa£Com∑ª
,

1631 
di˘SdsDe°ru˘‹
,

1632 
di˘Li°De°ru˘‹


1635 
di˘Ty≥
 
	g›ti⁄SëDi˘Ty≥
 = {

1636 
di˘SdsCa£Hash
,

1637 
NULL
,

1638 
NULL
,

1639 
di˘SdsKeyCa£Com∑ª
,

1640 
di˘SdsDe°ru˘‹
,

1641 
NULL


1644 
	#CONFIG_MAX_LINE
 1024

	)

1645 
	#REDIS_CONFIG_REWRITE_SIGNATURE
 "# Gíî©ed by CONFIG REWRITE"

	)

1651 
ªwrôeC⁄figSèã
 *
	$ªwrôeC⁄figRódOldFûe
(*
∑th
) {

1652 
FILE
 *
Â
 = 
	`f›í
(
∑th
,"r");

1653 
ªwrôeC⁄figSèã
 *
°©e
 = 
	`dÆloc
((*state));

1654 
buf
[
CONFIG_MAX_LINE
+1];

1655 
löíum
 = -1;

1657 i‡(
Â
 =
NULL
 && 
î∫o
 !
ENOENT
)  NULL;

1659 
°©e
->
›ti⁄_to_löe
 = 
	`di˘Cª©e
(&
›ti⁄ToLöeDi˘Ty≥
,
NULL
);

1660 
°©e
->
ªwrôãn
 = 
	`di˘Cª©e
(&
›ti⁄SëDi˘Ty≥
,
NULL
);

1661 
°©e
->
numlöes
 = 0;

1662 
°©e
->
löes
 = 
NULL
;

1663 
°©e
->
has_èû
 = 0;

1664 i‡(
Â
 =
NULL
Ë 
°©e
;

1667 
	`fgës
(
buf
,
CONFIG_MAX_LINE
+1,
Â
Ë!
NULL
) {

1668 
¨gc
;

1669 
sds
 *
¨gv
;

1670 
sds
 
löe
 = 
	`sd°rim
(
	`sd¢ew
(
buf
),"\r\n\t ");

1672 
löíum
++;

1675 i‡(
löe
[0] == '#' ||Üine[0] == '\0') {

1676 i‡(!
°©e
->
has_èû
 && !
	`°rcmp
(
löe
,
REDIS_CONFIG_REWRITE_SIGNATURE
))

1677 
°©e
->
has_èû
 = 1;

1678 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1683 
¨gv
 = 
	`sds•lô¨gs
(
löe
,&
¨gc
);

1684 i‡(
¨gv
 =
NULL
) {

1688 
sds
 
aux
 = 
	`sd¢ew
("# ??? ");

1689 
aux
 = 
	`sdsˇtsds
◊ux,
löe
);

1690 
	`sds‰ì
(
löe
);

1691 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
aux
);

1695 
	`sd°ﬁowî
(
¨gv
[0]);

1699 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1700 
	`ªwrôeC⁄figAddLöeNumbîToO±i⁄
(
°©e
,
¨gv
[0],
löíum
);

1702 
	`sds‰ì•lôªs
(
¨gv
,
¨gc
);

1704 
	`f˛o£
(
Â
);

1705  
°©e
;

1706 
	}
}

1712 
	$ªwrôeC⁄figM¨kAsPro˚s£d
(
ªwrôeC⁄figSèã
 *
°©e
, c⁄° *
›ti⁄
) {

1713 
sds
 
›t
 = 
	`sd¢ew
(
›ti⁄
);

1715 i‡(
	`di˘Add
(
°©e
->
ªwrôãn
,
›t
,
NULL
Ë!
DICT_OK
Ë
	`sds‰ì
(opt);

1716 
	}
}

1734 
	$ªwrôeC⁄figRewrôeLöe
(
ªwrôeC⁄figSèã
 *
°©e
, c⁄° *
›ti⁄
, 
sds
 
löe
, 
f‹˚
) {

1735 
sds
 
o
 = 
	`sd¢ew
(
›ti⁄
);

1736 
dli°
 *
l
 = 
	`di˘FëchVÆue
(
°©e
->
›ti⁄_to_löe
,
o
);

1738 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

1740 i‡(!
l
 && !
f‹˚
) {

1742 
	`sds‰ì
(
löe
);

1743 
	`sds‰ì
(
o
);

1747 i‡(
l
) {

1748 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

1749 
löíum
 = (Ë
 
->
vÆue
;

1753 
	`dli°DñNode
(
l
,
 
);

1754 i‡(
	`dli°Lígth
(
l
Ë=0Ë
	`di˘Dñëe
(
°©e
->
›ti⁄_to_löe
,
o
);

1755 
	`sds‰ì
(
°©e
->
löes
[
löíum
]);

1756 
°©e
->
löes
[
löíum
] = 
löe
;

1759 i‡(!
°©e
->
has_èû
) {

1760 
	`ªwrôeC⁄figAµídLöe
(
°©e
,

1761 
	`sd¢ew
(
REDIS_CONFIG_REWRITE_SIGNATURE
));

1762 
°©e
->
has_èû
 = 1;

1764 
	`ªwrôeC⁄figAµídLöe
(
°©e
,
löe
);

1766 
	`sds‰ì
(
o
);

1767 
	}
}

1770 
	$ªwrôeC⁄figRñó£Sèã
(
ªwrôeC⁄figSèã
 *
°©e
) {

1771 
	`sds‰ì•lôªs
(
°©e
->
löes
,°©e->
numlöes
);

1772 
	`di˘Rñó£
(
°©e
->
›ti⁄_to_löe
);

1773 
	`di˘Rñó£
(
°©e
->
ªwrôãn
);

1774 
	`d‰ì
(
°©e
);

1775 
	}
}

1785 
	$ªwrôeC⁄figRemoveOΩh™ed
(
ªwrôeC⁄figSèã
 *
°©e
) {

1786 
di˘Iãøt‹
 *
di
 = 
	`di˘GëIãøt‹
(
°©e
->
›ti⁄_to_löe
);

1787 
di˘E¡ry
 *
de
;

1789 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

1790 
dli°
 *
l
 = 
	`di˘GëVÆ
(
de
);

1791 
sds
 
›ti⁄
 = 
	`di˘GëKey
(
de
);

1795 i‡(
	`di˘Föd
(
°©e
->
ªwrôãn
,
›ti⁄
Ë=
NULL
) {

1796 
	`log_debug
(
LOG_DEBUG
,"NŸÑewrôã¿›ti⁄: %s", 
›ti⁄
);

1800 
	`dli°Lígth
(
l
)) {

1801 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

1802 
löíum
 = (Ë
 
->
vÆue
;

1804 
	`sds‰ì
(
°©e
->
löes
[
löíum
]);

1805 
°©e
->
löes
[
löíum
] = 
	`sd£m±y
();

1806 
	`dli°DñNode
(
l
,
 
);

1809 
	`di˘Rñó£Iãøt‹
(
di
);

1810 
	}
}

1814 
sds
 
	$ªwrôeC⁄figGëC⁄ã¡FromSèã
(
ªwrôeC⁄figSèã
 *
°©e
) {

1815 
sds
 
c⁄ã¡
 = 
	`sd£m±y
();

1816 
j
, 
was_em±y
 = 0;

1818 
j
 = 0; j < 
°©e
->
numlöes
; j++) {

1820 i‡(
	`sd¶í
(
°©e
->
löes
[
j
]) == 0) {

1821 i‡(
was_em±y
) ;

1822 
was_em±y
 = 1;

1824 
was_em±y
 = 0;

1826 
c⁄ã¡
 = 
	`sdsˇtsds
(c⁄ã¡,
°©e
->
löes
[
j
]);

1827 
c⁄ã¡
 = 
	`sdsˇéí
(content,"\n",1);

1829  
c⁄ã¡
;

1830 
	}
}

1844 
	$ªwrôeC⁄figOvîwrôeFûe
(*
c⁄figfûe
, 
sds
 
c⁄ã¡
) {

1845 
ªtvÆ
 = 0;

1846 
fd
 = 
	`›í
(
c⁄figfûe
,
O_RDWR
|
O_CREAT
,0644);

1847 
c⁄ã¡_size
 = 
	`sd¶í
(
c⁄ã¡
), 
∑ddög
 = 0;

1848 
°©
 
sb
;

1849 
sds
 
c⁄ã¡_∑dded
;

1853 i‡(
fd
 == -1)  -1;

1854 i‡(
	`f°©
(
fd
,&
sb
) == -1) {

1855 
	`˛o£
(
fd
);

1860 
c⁄ã¡_∑dded
 = 
	`sdsdup
(
c⁄ã¡
);

1861 i‡(
c⁄ã¡_size
 < 
sb
.
°_size
) {

1864 
∑ddög
 = 
sb
.
°_size
 - 
c⁄ã¡_size
;

1865 
c⁄ã¡_∑dded
 = 
	`sdsgrowzîo
(c⁄ã¡_∑dded,
sb
.
°_size
);

1866 
c⁄ã¡_∑dded
[
c⁄ã¡_size
] = '\n';

1867 
	`mem£t
(
c⁄ã¡_∑dded
+
c⁄ã¡_size
+1,'#',
∑ddög
-1);

1871 i‡(
	`wrôe
(
fd
,
c⁄ã¡_∑dded
,
	`°æí
(content_padded)) == -1) {

1872 
ªtvÆ
 = -1;

1873 
˛ónup
;

1877 i‡(
∑ddög
) {

1878 i‡(
	`·runˇã
(
fd
,
c⁄ã¡_size
) == -1) {

1883 
˛ónup
:

1884 
	`sds‰ì
(
c⁄ã¡_∑dded
);

1885 
	`˛o£
(
fd
);

1886  
ªtvÆ
;

1887 
	}
}

1890 
	$ªwrôeC⁄figI¡O±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1891 
vÆue
;

1892 
f‹˚
;

1893 
sds
 
löe
;

1895 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1896 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%d",
›ti⁄
,
vÆue
);

1897 
f‹˚
 = 
vÆue
 !
defvÆue
;

1899 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1900 
	}
}

1903 
	$ªwrôeC⁄figSdsO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
sds
 
defvÆue
) {

1904 
sds
 
vÆue
;

1905 
f‹˚
;

1906 
sds
 
löe
;

1908 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1909 i‡(
defvÆue
 =
NULL
 && 
vÆue
 == NULL) {

1910 
f‹˚
 = 0;

1911 } i‡(
defvÆue
 !
NULL
 && 
vÆue
 !NULL && !
	`sdscmp
(value,defvalue)) {

1912 
f‹˚
 = 0;

1914 
f‹˚
 = 1;

1917 i‡(
vÆue
 =
NULL
) {

1918 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†\"\"",
›ti⁄
);

1920 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
vÆue
);

1921 
	`sds‰ì
(
vÆue
);

1924 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1925 
	}
}

1928 
	$ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1929 
vÆue
;

1930 
f‹˚
;

1931 
sds
 
löe
;

1933 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1934 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%Œd",
›ti⁄
,
vÆue
);

1935 
f‹˚
 = 
vÆue
 !
defvÆue
;

1937 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1938 
	}
}

1942 
	$ªwrôeC⁄figF‹m©Mem‹y
(*
buf
, 
size_t
 
Àn
, 
byãs
) {

1943 
gb
 = 1024*1024*1024;

1944 
mb
 = 1024*1024;

1945 
kb
 = 1024;

1947 i‡(
byãs
 && (byã†% 
gb
) == 0) {

1948  
	`¢¥ötf
(
buf
,
Àn
,"%Œdgb",
byãs
/
gb
);

1949 } i‡(
byãs
 && (byã†% 
mb
) == 0) {

1950  
	`¢¥ötf
(
buf
,
Àn
,"%Œdmb",
byãs
/
mb
);

1951 } i‡(
byãs
 && (byã†% 
kb
) == 0) {

1952  
	`¢¥ötf
(
buf
,
Àn
,"%Œdkb",
byãs
/
kb
);

1954  
	`¢¥ötf
(
buf
,
Àn
,"%Œd",
byãs
);

1956 
	}
}

1959 
	$ªwrôeC⁄figByãsO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
defvÆue
) {

1960 
vÆue
;

1961 
buf
[64];

1962 
f‹˚
;

1963 
sds
 
löe
;

1965 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1966 
f‹˚
 = 
vÆue
 !
defvÆue
;

1968 
	`ªwrôeC⁄figF‹m©Mem‹y
(
buf
,(buf),
vÆue
);

1969 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
buf
);

1970 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1971 
	}
}

1976 
	$ªwrôeC⁄figEnumO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
, *
›ti⁄
, 
c⁄figEnumGëSåFun
 
fun
, 
defvÆ
) {

1977 
vÆue
;

1978 
sds
 
löe
;

1979 c⁄° *
«me
;

1980 
f‹˚
;

1982 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆue
);

1983 
f‹˚
 = 
vÆue
 !
defvÆ
;

1984 
«me
 = 
	`fun
(
vÆue
);

1985 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,
«me
);

1986 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

1987 
	}
}

1990 
	$ªwrôeC⁄figBödO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
) {

1991 
d¨øy
 
vÆues
;

1992 
sds
 *
vÆue
, 
löe
;

1993 
f‹˚
 = 1;

1994 *
›ti⁄
 = 
CONFIG_SOPN_BIND
;

1996 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

1997 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆues
);

1999 i‡(
	`d¨øy_n
(&
vÆues
) == 0) {

2000 
	`d¨øy_deöô
(&
vÆues
);

2001 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2006 
löe
 = 
	`sd¢ew
(
›ti⁄
);

2007 
	`d¨øy_n
(&
vÆues
) > 0) {

2008 
löe
 = 
	`sdsˇt
(line," ");

2009 
vÆue
 = 
	`d¨øy_p›
(&
vÆues
);

2010 
löe
 = 
	`sdsˇtsds
÷öe,*
vÆue
);

2011 
	`sds‰ì
(*
vÆue
);

2013 
	`d¨øy_deöô
(&
vÆues
);

2015 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2016 
	}
}

2019 
	$ªwrôeC⁄figComm™dsNAPO±i⁄
(
ªwrôeC⁄figSèã
 *
°©e
) {

2020 
d¨øy
 
vÆues
;

2021 
sds
 *
vÆue
, 
löe
;

2022 
f‹˚
 = 1;

2023 *
›ti⁄
 = 
CONFIG_SOPN_COMMANDSNAP
;

2025 
	`d¨øy_öô
(&
vÆues
,1,(
sds
));

2026 
	`c⁄f_£rvî_gë
(
›ti⁄
,&
vÆues
);

2028 i‡(
	`d¨øy_n
(&
vÆues
) == 0) {

2029 
	`d¨øy_deöô
(&
vÆues
);

2030 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2034 
	`d¨øy_n
(&
vÆues
) > 0) {

2035 
vÆue
 = 
	`d¨øy_p›
(&
vÆues
);

2036 
löe
 = 
	`sdsˇçrötf
(
	`sd£m±y
(),"%†%s",
›ti⁄
,*
vÆue
);

2037 
	`ªwrôeC⁄figRewrôeLöe
(
°©e
,
›ti⁄
,
löe
,
f‹˚
);

2038 
	`sds‰ì
(*
vÆue
);

2040 
	`d¨øy_deöô
(&
vÆues
);

2041 
	`ªwrôeC⁄figM¨kAsPro˚s£d
(
°©e
,
›ti⁄
);

2042 
	}
}

2052 
	$ªwrôeC⁄fig
(*
∑th
) {

2053 
ªwrôeC⁄figSèã
 *
°©e
;

2054 
sds
 
√wc⁄ã¡
;

2055 
ªtvÆ
;

2056 
c⁄f_›ti⁄
 *
c›
;

2058 
	`CONFF_LOCK
();

2060 i‡((
°©e
 = 
	`ªwrôeC⁄figRódOldFûe
(
∑th
)Ë=
NULL
) {

2061 
	`CONFF_UNLOCK
();

2067 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_DATABASES
,
CONFIG_DEFAULT_LOGICAL_DBNUM
);

2068 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_IDPDATABASE
,
CONFIG_DEFAULT_INTERNAL_DBNUM
);

2069 
	`ªwrôeC⁄figByãsO±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORY
,
CONFIG_DEFAULT_MAXMEMORY
);

2070 
	`ªwrôeC⁄figEnumO±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORYP
,
gë_evi˘pﬁicy_°rögs
,
CONFIG_DEFAULT_MAXMEMORY_POLICY
);

2071 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_MAXMEMORYS
,
CONFIG_DEFAULT_MAXMEMORY_SAMPLES
);

2072 
	`ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
°©e
,
CONFIG_SOPN_MTCLIMIT
,
CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
);

2073 
	`ªwrôeC⁄figBödO±i⁄
(
°©e
);

2074 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_PORT
,
CONFIG_DEFAULT_SERVER_PORT
);

2075 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_THREADS
,
CONFIG_DEFAULT_THREADS_NUM
);

2076 
	`ªwrôeC⁄figL⁄gL⁄gO±i⁄
(
°©e
,
CONFIG_SOPN_SLOWLOGLST
,
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
);

2077 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_SLOWLOGML
,
CONFIG_DEFAULT_SLOWLOG_MAX_LEN
);

2078 
	`ªwrôeC⁄figI¡O±i⁄
(
°©e
,
CONFIG_SOPN_MAXCLIENTS
,
CONFIG_DEFAULT_MAX_CLIENTS
);

2079 
	`ªwrôeC⁄figSdsO±i⁄
(
°©e
,
CONFIG_SOPN_REQUIREPASS
,
NULL
);

2080 
	`ªwrôeC⁄figSdsO±i⁄
(
°©e
,
CONFIG_SOPN_ADMINPASS
,
NULL
);

2081 
	`ªwrôeC⁄figComm™dsNAPO±i⁄
(
°©e
);

2086 
	`ªwrôeC⁄figRemoveOΩh™ed
(
°©e
);

2090 
√wc⁄ã¡
 = 
	`ªwrôeC⁄figGëC⁄ã¡FromSèã
(
°©e
);

2091 
ªtvÆ
 = 
	`ªwrôeC⁄figOvîwrôeFûe
(
£rvî
.
c⁄figfûe
,
√wc⁄ã¡
);

2092 
	`CONFF_UNLOCK
();

2094 
	`sds‰ì
(
√wc⁄ã¡
);

2095 
	`ªwrôeC⁄figRñó£Sèã
(
°©e
);

2096  
ªtvÆ
;

2097 
	}
}

2103 
	$c⁄figComm™d
(
˛õ¡
 *
c
) {

2105 i‡(
£rvî
.
lﬂdög
 && 
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get")) {

2106 
	`addRïlyEº‹
(
c
,"Only CONFIG GET isállowed duringÜoading");

2110 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"set")) {

2111 i‡(
c
->
¨gc
 !4Ë
bad¨ôy
;

2112 
	`c⁄figSëComm™d
(
c
);

2113 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get")) {

2114 i‡(
c
->
¨gc
 !3Ë
bad¨ôy
;

2115 
	`c⁄figGëComm™d
(
c
);

2121  i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"rewrite")) {

2122 i‡(
c
->
¨gc
 !2Ë
bad¨ôy
;

2123 i‡(
£rvî
.
c⁄figfûe
 =
NULL
) {

2124 
	`addRïlyEº‹
(
c
,"The server isÑunning withoutá config file");

2127 i‡(
	`ªwrôeC⁄fig
(
£rvî
.
c⁄figfûe
) == -1) {

2128 
	`log_w¨n
("CONFIG REWRITE faûed: %s", 
	`°ªº‹
(
î∫o
));

2129 
	`addRïlyEº‹F‹m©
(
c
,"Rewrôög c⁄fig fûe: %s", 
	`°ªº‹
(
î∫o
));

2131 
	`log_w¨n
("CONFIG REWRITEÉxecuted with success.");

2132 
	`addRïly
(
c
,
sh¨ed
.
ok
);

2135 
	`addRïlyEº‹
(
c
,

2141 
bad¨ôy
:

2142 
	`addRïlyEº‹F‹m©
(
c
,"WrongÇumber ofárguments for CONFIG %s",

2143 (*Ë
c
->
¨gv
[1]->
±r
);

2144 
	}
}

2147 
	$c⁄f_ˇche_öô
(
c⁄f_ˇche
 *
cc
)

2149 
cc
->
ˇche_vîsi⁄
 = 0;

2150 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
cc
->
max˛õ¡s
);

2151 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
cc
->
ªquúïass
);

2152 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
cc
->
admö∑ss
);

2153 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
cc
->
maxmem‹y
);

2154 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MTCLIMIT
,&
cc
->
max_time_com∂exôy_limô
);

2155 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGLST
,&
cc
->
¶owlog_log_¶owî_th™
);

2157  
VR_OK
;

2158 
	}
}

2161 
	$c⁄f_ˇche_deöô
(
c⁄f_ˇche
 *
cc
)

2163 
cc
->
ˇche_vîsi⁄
 = 0;

2164 i‡(
cc
->
ªquúïass
 !
NULL
) {

2165 
	`sds‰ì
(
cc
->
ªquúïass
);

2166 
cc
->
ªquúïass
 = 
NULL
;

2168 i‡(
cc
->
admö∑ss
 !
NULL
) {

2169 
	`sds‰ì
(
cc
->
admö∑ss
);

2170 
cc
->
admö∑ss
 = 
NULL
;

2173  
VR_OK
;

2174 
	}
}

2177 
	$c⁄f_ˇche_upd©e
(
c⁄f_ˇche
 *
cc
)

2179 
cvîsi⁄
 = 
	`c⁄f_vîsi⁄_gë
();

2182 i‡(
cvîsi⁄
 <
cc
->
ˇche_vîsi⁄
) {

2186 i‡(
cc
->
ªquúïass
 !
NULL
) {

2187 
	`sds‰ì
(
cc
->
ªquúïass
);

2188 
cc
->
ªquúïass
 = 
NULL
;

2190 i‡(
cc
->
admö∑ss
 !
NULL
) {

2191 
	`sds‰ì
(
cc
->
admö∑ss
);

2192 
cc
->
admö∑ss
 = 
NULL
;

2195 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
cc
->
max˛õ¡s
);

2196 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
cc
->
ªquúïass
);

2197 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
cc
->
admö∑ss
);

2198 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
cc
->
maxmem‹y
);

2199 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MTCLIMIT
,&
cc
->
max_time_com∂exôy_limô
);

2200 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGLST
,&
cc
->
¶owlog_log_¶owî_th™
);

2202 
cc
->
ˇche_vîsi⁄
 = 
cvîsi⁄
;

2204  
VR_OK
;

2205 
	}
}

	@src/vr_conf.h

1 #i‚de‡
_VR_CONF_H_


2 
	#_VR_CONF_H_


	)

5 
	#CONFIG_SOPN_DATABASES
 "d©aba£s"

	)

6 
	#CONFIG_SOPN_IDPDATABASE
 "öã∫Æ-dbs-≥r-d©aba£s"

	)

7 
	#CONFIG_SOPN_MAXMEMORY
 "maxmem‹y"

	)

8 
	#CONFIG_SOPN_MAXMEMORYP
 "maxmem‹y-pﬁicy"

	)

9 
	#CONFIG_SOPN_MAXMEMORYS
 "maxmem‹y-ßm∂es"

	)

10 
	#CONFIG_SOPN_MTCLIMIT
 "max-time-com∂exôy-limô"

	)

11 
	#CONFIG_SOPN_BIND
 "böd"

	)

12 
	#CONFIG_SOPN_PORT
 "p‹t"

	)

13 
	#CONFIG_SOPN_THREADS
 "thªads"

	)

14 
	#CONFIG_SOPN_DIR
 "dú"

	)

15 
	#CONFIG_SOPN_MAXCLIENTS
 "max˛õ¡s"

	)

16 
	#CONFIG_SOPN_SLOWLOGLST
 "¶owlog-log-¶owî-th™"

	)

17 
	#CONFIG_SOPN_SLOWLOGML
 "¶owlog-max-Àn"

	)

18 
	#CONFIG_SOPN_REQUIREPASS
 "ªquúïass"

	)

19 
	#CONFIG_SOPN_ADMINPASS
 "admö∑ss"

	)

20 
	#CONFIG_SOPN_COMMANDSNAP
 "comm™ds-√ed-admö∑ss"

	)

22 
	#CONFIG_RUN_ID_SIZE
 40

	)

23 
	#CONFIG_DEFAULT_ACTIVE_REHASHING
 1

	)

25 
	#CONFIG_DEFAULT_LOGICAL_DBNUM
 6

	)

26 
	#CONFIG_DEFAULT_INTERNAL_DBNUM
 6

	)

28 
	#CONFIG_DEFAULT_MAXMEMORY
 0

	)

29 
	#CONFIG_DEFAULT_MAXMEMORY_SAMPLES
 5

	)

30 
	#CONFIG_DEFAULT_MAX_CLIENTS
 10000

	)

32 
	#CONFIG_DEFAULT_MAX_CLIENTS
 10000

	)

34 
	#CONFIG_DEFAULT_THREADS_NUM
 (
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
)>6?6:sysc⁄f(_SC_NPROCESSORS_ONLN))

	)

36 
	#CONFIG_DEFAULT_HOST
 "0.0.0.0"

	)

38 
	#CONFIG_DEFAULT_SERVER_PORT
 55555

	)

40 
	#CONFIG_DEFAULT_DATA_DIR
 "vúed©a"

	)

42 
	#CONFIG_DEFAULT_MAX_TIME_COMPLEXITY_LIMIT
 0

	)

44 
	#CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN
 10000

	)

45 
	#CONFIG_DEFAULT_SLOWLOG_MAX_LEN
 128

	)

47 
	#CONFIG_AUTHPASS_MAX_LEN
 512

	)

49 
	#CONFIG_BINDADDR_MAX
 16

	)

51 
	#CONF_UNSET_NUM
 -1

	)

52 
	#CONF_UNSET_PTR
 
NULL


	)

53 
	#CONF_UNSET_GROUP
 (
group_ty≥_t
Ë-1

	)

54 
	#CONF_UNSET_HASH
 (
hash_ty≥_t
Ë-1

	)

55 
	#CONF_UNSET_DIST
 (
di°_ty≥_t
Ë-1

	)

58 
	#CONF_FIELD_TYPE_INT
 0

	)

59 
	#CONF_FIELD_TYPE_LONGLONG
 1

	)

60 
	#CONF_FIELD_TYPE_SDS
 2

	)

61 
	#CONF_FIELD_TYPE_ARRAYSDS
 3

	)

64 
	#CONF_FIELD_FLAGS_NO_MODIFY
 (1<<0)

	)

66 
	sc⁄f_›ti⁄
 {

67 *
	m«me
;

68 
	mty≥
;

69 
	mÊags
;

70 (*
	m£t
)(*
	mcf
, 
c⁄f_›ti⁄
 *
	m›t
, *
	md©a
);

71 (*
	mgë
)(*
	mcf
, 
c⁄f_›ti⁄
 *
	m›t
, *
	md©a
);

72 
	moff£t
;

73 }
	tc⁄f_›ti⁄
;

75 
	#EVICTPOLICY_CODEC
(
ACTION
) \

76 
	`ACTION
–
MAXMEMORY_VOLATILE_LRU
, vﬁ©ûe-
Ãu
) \

77 
	`ACTION
–
MAXMEMORY_VOLATILE_RANDOM
, vﬁ©ûe-
øndom
) \

78 
	`ACTION
–
MAXMEMORY_VOLATILE_TTL
, vﬁ©ûe-
âl
) \

79 
	`ACTION
–
MAXMEMORY_ALLKEYS_LRU
, 
Ælkeys
-
Ãu
) \

80 
	`ACTION
–
MAXMEMORY_ALLKEYS_RANDOM
, 
Ælkeys
-
øndom
) \

81 
	`ACTION
–
MAXMEMORY_NO_EVICTION
, 
n€vi˘i⁄
) \

82 

	)

83 
	#DEFINE_ACTION
(
_pﬁicy
, 
_«me
Ë_pﬁicy,

	)

84 
	eevi˘pﬁicy_ty≥
 {

85 
EVICTPOLICY_CODEC
–
DEFINE_ACTION
 )

86 
	mEVICTPOLICY_SENTINEL


87 } 
	tevi˘pﬁicy_ty≥_t
;

88 #unde‡
DEFINE_ACTION


90 
	sc⁄f_£rvî
 {

91 
di˘
 *
	m˘abÀ
;

93 
	md©aba£s
;

94 
	möã∫Æ_dbs_≥r_d©aba£s
;

97 
	mmax_time_com∂exôy_limô
;

98 
	mmaxmem‹y
;

99 
	mmaxmem‹y_pﬁicy
;

100 
	mmaxmem‹y_ßm∂es
;

101 
	mmax˛õ¡s
;

103 
	mthªads
;

105 
d¨øy
 
	mböds
;

106 
	mp‹t
;

108 
sds
 
	mdú
;

110 
	m¶owlog_log_¶owî_th™
;

111 
	m¶owlog_max_Àn
;

113 
sds
 
	mªquúïass
;

114 
sds
 
	madmö∑ss
;

115 
d¨øy
 
	mcomm™ds_√ed_admö∑ss
;

116 } 
	tc⁄f_£rvî
;

118 
	svr_c⁄f
 {

119 
sds
 
	m‚ame
;

121 
di˘
 *
	m‹g™iz©i⁄s
;

123 
c⁄f_£rvî
 
	mc£rvî
;

125 
	mvîsi⁄
;

126 
±hªad_rwlock_t
 
	mrwl
;

127 
±hªad_muãx_t
 
	mÊock
;

128 }
	tvr_c⁄f
;

130 
	#CONF_VALUE_TYPE_UNKNOW
 0

	)

131 
	#CONF_VALUE_TYPE_STRING
 1

	)

132 
	#CONF_VALUE_TYPE_ARRAY
 2

	)

134 
	sc⁄f_vÆue
{

135 
	mty≥
;

136 *
	mvÆue
;

137 }
	tc⁄f_vÆue
;

141 
	sc⁄f_ˇche
 {

142 
	mˇche_vîsi⁄
;

144 
	mmax˛õ¡s
;

145 
sds
 
	mªquúïass
;

146 
sds
 
	madmö∑ss
;

147 
	mmaxmem‹y
;

148 
	mmax_time_com∂exôy_limô
;

149 
	m¶owlog_log_¶owî_th™
;

150 }
	tc⁄f_ˇche
;

152 
vr_c⁄f
 *
c⁄f
;

153 
c⁄f_£rvî
 *
c£rvî
;

155 
c⁄f_vÆue
 *
c⁄f_vÆue_¸óã
(
ty≥
);

156 
c⁄f_vÆue_de°roy
(
c⁄f_vÆue
 *
cv
);

158 
vr_c⁄f
 *
c⁄f_¸óã
(*
fûíame
);

159 
c⁄f_de°roy
(
vr_c⁄f
 *
cf
);

161 
c⁄f_vîsi⁄_gë
();

163 
c⁄f_£rvî_gë
(c⁄° *
›ti⁄_«me
, *
vÆue
);

164 
c⁄f_£rvî_£t
(c⁄° *
›ti⁄_«me
, 
c⁄f_vÆue
 *
vÆue
);

166 
c⁄f_£t_maxmem‹y
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

167 
c⁄f_£t_maxmem‹y_pﬁicy
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

168 
c⁄f_£t_öt_n⁄_zîo
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

170 
c⁄f_gë_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

171 
c⁄f_gë_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

172 
c⁄f_gë_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

173 
c⁄f_gë_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

175 
c⁄f_£t_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

176 
c⁄f_£t_∑ssw‹d
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

177 
c⁄f_£t_öt
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

178 
c⁄f_£t_l⁄gl⁄g
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

179 
c⁄f_£t_yes‹no
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

180 
c⁄f_£t_¨øy_sds
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

181 
c⁄f_£t_comm™ds_√ed_admö∑ss
(*
obj
, 
c⁄f_›ti⁄
 *
›t
, *
d©a
);

183 
CONF_RLOCK
();

184 
CONF_WLOCK
();

185 
CONF_UNLOCK
();

187 
CONFF_LOCK
();

188 
CONFF_UNLOCK
();

190 c⁄° *
gë_evi˘pﬁicy_°rögs
(
evi˘pﬁicy_ty≥
);

192 
c⁄figComm™d
(
˛õ¡
 *
c
);

194 
c⁄f_ˇche_öô
(
c⁄f_ˇche
 *
cc
);

195 
c⁄f_ˇche_deöô
(
c⁄f_ˇche
 *
cc
);

196 
c⁄f_ˇche_upd©e
(
c⁄f_ˇche
 *
cc
);

	@src/vr_connection.c

1 
	~<sys/uio.h
>

3 
	~<vr_c‹e.h
>

5 
c⁄n_‰ì
(
c⁄n
 *conn);

7 
c⁄n
 *

8 
	$_c⁄n_gë
(
c⁄n_ba£
 *
cb
)

10 
c⁄n
 *conn;

12 i‡(
cb
 !
NULL
 && 
	`dli°Lígth
(cb->
‰ì_c⁄nq
) > 0) {

13 
c⁄n
 = 
	`dli°P›
(
cb
->
‰ì_c⁄nq
);

15 
c⁄n
 = 
	`dÆloc
((*conn));

16 i‡(
c⁄n
 =
NULL
) {

17  
NULL
;

19 
c⁄n
->
cb
 = cb;

21 
c⁄n
->
öqueue
 = 
NULL
;

22 
c⁄n
->
outqueue
 = 
NULL
;

25 
c⁄n
->
ow√r
 = 
NULL
;

27 
c⁄n
->
sd
 = -1;

29 
c⁄n
->
£nd_byãs
 = 0;

30 
c⁄n
->
ªcv_byãs
 = 0;

32 
c⁄n
->
îr
 = 0;

33 
c⁄n
->
ªcv_a˘ive
 = 0;

34 
c⁄n
->
ªcv_ªady
 = 0;

35 
c⁄n
->
£nd_a˘ive
 = 0;

36 
c⁄n
->
£nd_ªady
 = 0;

38 
c⁄n
->
c⁄√˘ög
 = 0;

39 
c⁄n
->
c⁄√˘ed
 = 0;

40 
c⁄n
->
eof
 = 0;

41 
c⁄n
->
d⁄e
 = 0;

43 i‡(
c⁄n
->
öqueue
 =
NULL
) {

44 
c⁄n
->
öqueue
 = 
	`dli°Cª©e
();

45 i‡(
c⁄n
->
öqueue
 =
NULL
) {

46 
	`c⁄n_‰ì
(
c⁄n
);

47  
NULL
;

51 i‡(
c⁄n
->
outqueue
 =
NULL
) {

52 
c⁄n
->
outqueue
 = 
	`dli°Cª©e
();

53 i‡(
c⁄n
->
outqueue
 =
NULL
) {

54 
	`c⁄n_‰ì
(
c⁄n
);

55  
NULL
;

59 i‡(
cb
 !
NULL
) {

60 
cb
->
¡ŸÆ_c⁄n
++;

61 
cb
->
ncuº_c⁄n
++;

64  
c⁄n
;

65 
	}
}

67 
c⁄n
 *

68 
	$c⁄n_gë
(
c⁄n_ba£
 *
cb
)

70 
c⁄n
 *conn;

72 
c⁄n
 = 
	`_c⁄n_gë
(
cb
);

73 i‡(
c⁄n
 =
NULL
) {

74  
NULL
;

77 
	`log_debug
(
LOG_VVERB
, "gë c⁄¿%∞˛õ¡ %d", 
c⁄n
, c⁄n->
sd
);

79  
c⁄n
;

80 
	}
}

83 
	$c⁄n_‰ì
(
c⁄n
 *conn)

85 
	`log_debug
(
LOG_VVERB
, "‰ì c⁄¿%p", 
c⁄n
);

87 i‡(
c⁄n
 =
NULL
) {

91 i‡(
c⁄n
->
sd
 > 0) {

92 
	`˛o£
(
c⁄n
->
sd
);

93 
c⁄n
->
sd
 = -1;

94 
	`upd©e_cuº_˛õ¡s_sub
(1);

97 i‡(
c⁄n
->
öqueue
) {

98 
sds
 
buf
;

99 
buf
 = 
	`dli°P›
(
c⁄n
->
öqueue
)) {

100 
	`sds‰ì
(
buf
);

102 
	`dli°Rñó£
(
c⁄n
->
öqueue
);

103 
c⁄n
->
öqueue
 = 
NULL
;

106 i‡(
c⁄n
->
outqueue
) {

107 
sds
 
buf
;

108 
buf
 = 
	`dli°P›
(
c⁄n
->
outqueue
)) {

109 
	`sds‰ì
(
buf
);

111 
	`dli°Rñó£
(
c⁄n
->
outqueue
);

112 
c⁄n
->
outqueue
 = 
NULL
;

115 
	`d‰ì
(
c⁄n
);

116 
	}
}

119 
	$c⁄n_put
(
c⁄n
 *conn)

121 
c⁄n_ba£
 *
cb
 = 
c⁄n
->cb;

123 
	`ASSERT
(
c⁄n
->
ow√r
 =
NULL
);

125 
	`log_debug
(
LOG_VVERB
, "puàc⁄¿%p", 
c⁄n
);

127 i‡(
c⁄n
->
sd
 > 0) {

128 
	`˛o£
(
c⁄n
->
sd
);

129 
c⁄n
->
sd
 = -1;

130 
	`upd©e_cuº_˛õ¡s_sub
(1);

133 i‡(
cb
 =
NULL
) {

134 
	`c⁄n_‰ì
(
c⁄n
);

138 i‡(
c⁄n
->
öqueue
) {

139 
sds
 
buf
;

140 
buf
 = 
	`dli°P›
(
c⁄n
->
öqueue
)) {

141 
	`sds‰ì
(
buf
);

145 i‡(
c⁄n
->
outqueue
) {

146 
sds
 
buf
;

147 
buf
 = 
	`dli°P›
(
c⁄n
->
outqueue
)) {

148 
	`sds‰ì
(
buf
);

152 
	`dli°Push
(
cb
->
‰ì_c⁄nq
, 
c⁄n
);

153 
cb
->
ncuº_cc⁄n
--;

154 
cb
->
ncuº_c⁄n
--;

155 
	}
}

158 
	$c⁄n_öô
(
c⁄n_ba£
 *
cb
)

160 
	`log_debug
(
LOG_DEBUG
, "c⁄¿sizê%d", (
c⁄n
));

162 
cb
->
‰ì_c⁄nq
 = 
NULL
;

163 
cb
->
¡ŸÆ_c⁄n
 = 0;

164 
cb
->
ncuº_cc⁄n
 = 0;

165 
cb
->
ncuº_cc⁄n
 = 0;

167 
cb
->
‰ì_c⁄nq
 = 
	`dli°Cª©e
();

168 i‡(
cb
->
‰ì_c⁄nq
 =
NULL
) {

169  
VR_ENOMEM
;

172  
VR_OK
;

173 
	}
}

176 
	$c⁄n_deöô
(
c⁄n_ba£
 *
cb
)

178 
c⁄n
 *conn;

180 i‡(
cb
->
‰ì_c⁄nq
) {

181 
c⁄n
 = 
	`dli°P›
(
cb
->
‰ì_c⁄nq
)) {

182 
	`c⁄n_‰ì
(
c⁄n
);

184 
	`ASSERT
(
	`dli°Lígth
(
cb
->
‰ì_c⁄nq
) == 0);

185 
	`dli°Rñó£
(
cb
->
‰ì_c⁄nq
);

187 
	}
}

189 
ssize_t


190 
	$c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
)

192 
ssize_t
 
n
;

194 
	`ASSERT
(
buf
 !
NULL
);

195 
	`ASSERT
(
size
 > 0);

196 
	`ASSERT
(
c⁄n
->
ªcv_ªady
);

199 
n
 = 
	`vr_ªad
(
c⁄n
->
sd
, 
buf
, 
size
);

201 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %d %zd o‡%zu", 
c⁄n
->
sd
, 
n
, 
size
);

203 i‡(
n
 > 0) {

204 i‡(
n
 < (
ssize_t
Ë
size
) {

205 
c⁄n
->
ªcv_ªady
 = 0;

207 
c⁄n
->
ªcv_byãs
 +(
size_t
)
n
;

208  
n
;

211 i‡(
n
 == 0) {

212 
c⁄n
->
ªcv_ªady
 = 0;

213 
c⁄n
->
eof
 = 1;

214 
	`log_debug
(
LOG_INFO
, "ªcv o¿sd %dÉo‡rb %zu sb %zu", 
c⁄n
->
sd
,

215 
c⁄n
->
ªcv_byãs
, c⁄n->
£nd_byãs
);

216  
n
;

219 i‡(
î∫o
 =
EINTR
) {

220 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

222 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

223 
c⁄n
->
ªcv_ªady
 = 0;

224 
	`log_debug
(
LOG_VERB
, "ªcv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

225  
VR_EAGAIN
;

227 
c⁄n
->
ªcv_ªady
 = 0;

228 
c⁄n
->
îr
 = 
î∫o
;

229 
	`log_îr‹
("ªcv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

230  
VR_ERROR
;

234 
	`NOT_REACHED
();

236  
VR_ERROR
;

237 
	}
}

239 
ssize_t


240 
	$c⁄n_£nd
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
n£nd
)

242 
ssize_t
 
n
;

244 
	`ASSERT
(
n£nd
 != 0);

245 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

248 
n
 = 
	`vr_wrôe
(
c⁄n
->
sd
, 
buf
, 
n£nd
);

250 
	`log_debug
(
LOG_VERB
, "send on sd %d %zd of %zu",

251 
c⁄n
->
sd
, 
n
, 
n£nd
);

253 i‡(
n
 > 0) {

254 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

255 
c⁄n
->
£nd_ªady
 = 0;

257 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

258  
n
;

261 i‡(
n
 == 0) {

262 
	`log_w¨n
("£nd o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

263 
c⁄n
->
£nd_ªady
 = 0;

267 i‡(
î∫o
 =
EINTR
) {

268 
	`log_debug
(
LOG_VERB
, "£nd o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

270 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

271 
c⁄n
->
£nd_ªady
 = 0;

272 
	`log_debug
(
LOG_VERB
, "£nd o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

273  
VR_EAGAIN
;

275 
c⁄n
->
£nd_ªady
 = 0;

276 
c⁄n
->
îr
 = 
î∫o
;

277 
	`log_îr‹
("£nd o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

278  
VR_ERROR
;

282 
	`NOT_REACHED
();

284  
VR_ERROR
;

285 
	}
}

287 
ssize_t


288 
	$c⁄n_£ndv
(
c⁄n
 *c⁄n, 
d¨øy
 *
£ndv
, 
size_t
 
n£nd
)

290 
ssize_t
 
n
;

292 
	`ASSERT
(
	`d¨øy_n
(
£ndv
) > 0);

293 
	`ASSERT
(
n£nd
 != 0);

294 
	`ASSERT
(
c⁄n
->
£nd_ªady
);

297 
n
 = 
	`vr_wrôev
(
c⁄n
->
sd
, 
£ndv
->
ñem
, sídv->
√Àm
);

299 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %d %zd o‡%zu i¿%"
PRIu32
" buffers",

300 
c⁄n
->
sd
, 
n
, 
n£nd
, 
£ndv
->
√Àm
);

302 i‡(
n
 > 0) {

303 i‡(
n
 < (
ssize_t
Ë
n£nd
) {

304 
c⁄n
->
£nd_ªady
 = 0;

306 
c⁄n
->
£nd_byãs
 +(
size_t
)
n
;

307  
n
;

310 i‡(
n
 == 0) {

311 
	`log_w¨n
("£ndv o¿sd %dÑëu∫ed zîo", 
c⁄n
->
sd
);

312 
c⁄n
->
£nd_ªady
 = 0;

316 i‡(
î∫o
 =
EINTR
) {

317 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éöå", 
c⁄n
->
sd
);

319 } i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

320 
c⁄n
->
£nd_ªady
 = 0;

321 
	`log_debug
(
LOG_VERB
, "£ndv o¿sd %dÇŸÑódy -Éagaö", 
c⁄n
->
sd
);

322  
VR_EAGAIN
;

324 
c⁄n
->
£nd_ªady
 = 0;

325 
c⁄n
->
îr
 = 
î∫o
;

326 
	`log_îr‹
("£ndv o¿sd %d faûed: %s", 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

327  
VR_ERROR
;

331 
	`NOT_REACHED
();

333  
VR_ERROR
;

334 
	}
}

	@src/vr_connection.h

1 #i‚de‡
_VR_CONNECTION_H_


2 
	#_VR_CONNECTION_H_


	)

4 
	sc⁄n_ba£
 {

5 
dli°
 *
	m‰ì_c⁄nq
;

6 
uöt64_t
 
	m¡ŸÆ_c⁄n
;

7 
uöt32_t
 
	mncuº_c⁄n
;

8 
uöt32_t
 
	mncuº_cc⁄n
;

9 }
	tc⁄n_ba£
;

11 
	sc⁄n
 {

12 *
	mow√r
;

14 
c⁄n_ba£
 *
	mcb
;

16 
	msd
;

18 
size_t
 
	mªcv_byãs
;

19 
size_t
 
	m£nd_byãs
;

21 
îr_t
 
	mîr
;

22 
	mªcv_a˘ive
:1;

23 
	mªcv_ªady
:1;

24 
	m£nd_a˘ive
:1;

25 
	m£nd_ªady
:1;

27 
	mc⁄√˘ög
:1;

28 
	mc⁄√˘ed
:1;

29 
	meof
:1;

30 
	md⁄e
:1;

32 
dli°
 *
	möqueue
;

33 
dli°
 *
	moutqueue
;

36 
c⁄n
 *
c⁄n_gë
(
c⁄n_ba£
 *
cb
);

37 
c⁄n_put
(
c⁄n
 *conn);

39 
c⁄n_öô
(
c⁄n_ba£
 *
cb
);

40 
c⁄n_deöô
(
c⁄n_ba£
 *
cb
);

42 
ssize_t
 
c⁄n_ªcv
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
size
);

43 
ssize_t
 
c⁄n_£nd
(
c⁄n
 *c⁄n, *
buf
, 
size_t
 
n£nd
);

44 
ssize_t
 
c⁄n_£ndv
(
c⁄n
 *c⁄n, 
d¨øy
 *
£ndv
, 
size_t
 
n£nd
);

	@src/vr_core.c

1 
	~<°dlib.h
>

2 
	~<uni°d.h
>

4 
	~<vr_c‹e.h
>

6 
uöt32_t
 
	gª£rved_fds
 = 0;

	@src/vr_core.h

1 #i‚de‡
_VR_CORE_H_


2 
	#_VR_CORE_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 #ifde‡
HAVE_STATS


11 
	#VR_STATS
 1

	)

13 
	#VR_STATS
 0

	)

16 #ifde‡
HAVE_LITTLE_ENDIAN


17 
	#VR_LITTLE_ENDIAN
 1

	)

20 #ifde‡
HAVE_BACKTRACE


21 
	#VR_HAVE_BACKTRACE
 1

	)

24 #ifde‡
HAVE_SPINLOCK


25 
	#VR_USE_SPINLOCK
 1

	)

28 
	#VR_OK
 0

	)

29 
	#VR_ERROR
 -1

	)

30 
	#VR_EAGAIN
 -2

	)

31 
	#VR_ENOMEM
 -3

	)

34 
	#RESERVED_FDS
 32

	)

36 
	tr°©us_t
;

37 
	tîr_t
;

39 
	tm°ime_t
;

41 
	gö°™˚
;

42 
	gd¨øy
;

43 
	gc⁄n
;

44 
	g˛õ¡
;

45 
	g˛õ¡Buf„rLimôsC⁄fig
;

46 
	gªdisComm™d
;

47 
	gvr_w‹kî
;

49 
	~<°ddef.h
>

50 
	~<°döt.h
>

51 
	~<öây≥s.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<˘y≥.h
>

55 
	~<î∫o.h
>

56 
	~<limôs.h
>

57 
	~<time.h
>

58 
	~<uni°d.h
>

59 
	~<±hªad.h
>

61 
	~<sys/ty≥s.h
>

62 
	~<sys/sockë.h
>

63 
	~<sys/un.h
>

64 
	~<sys/time.h
>

65 
	~<sys/ªsour˚.h
>

66 
	~<√töë/ö.h
>

68 
	~<´.h
>

69 
	~<sds.h
>

70 
	~<dutû.h
>

71 
	~<dlog.h
>

72 
	~<dhashkô.h
>

73 
	~<dmÆloc.h
>

74 
	~<d¨øy.h
>

75 
	~<dli°.h
>

77 
	~<vr_utû.h
>

78 
	~<vr_sig«l.h
>

80 
	~<vr_zùli°.h
>

81 
	~<vr_zùm≠.h
>

82 
	~<vr_di˘.h
>

83 
	~<vr_rbåì.h
>

84 
	~<vr_öt£t.h
>

85 
	~<vr_quickli°.h
>

87 
	~<vr_lzf.h
>

88 
	~<vr_lzfP.h
>

90 
	~<vr_obje˘.h
>

92 
	~<vr_li°í.h
>

93 
	~<vr_c⁄√˘i⁄.h
>

95 
	~<vr_°©s.h
>

96 
	~<vr_c⁄f.h
>

98 
	~<vr_thªad.h
>

99 
	~<vr_evíéo›.h
>

100 
	~<vr_ma°î.h
>

101 
	~<vr_w‹kî.h
>

102 
	~<vr_backíd.h
>

104 
	~<vr_db.h
>

105 
	~<vr_mu…i.h
>

107 
	~<vr_comm™d.h
>

108 
	~<vr_block.h
>

109 
	~<vr_˛õ¡.h
>

110 
	~<vr_£rvî.h
>

112 
	~<vr_nŸify.h
>

113 
	~<vr_pubsub.h
>

115 
	~<vr_rdb.h
>

116 
	~<vr_aof.h
>

117 
	~<vr_ª∂iˇti⁄.h
>

118 
	~<vr_s¸ùtög.h
>

120 
	~<vr_t_hash.h
>

121 
	~<vr_t_li°.h
>

122 
	~<vr_t_£t.h
>

123 
	~<vr_t_°rög.h
>

124 
	~<vr_t_z£t.h
>

126 
	~<vr_bô›s.h
>

128 
	~<vr_hy≥æoglog.h
>

130 
	~<vr_¶owlog.h
>

132 
	sö°™˚
 {

133 
	mlog_Àvñ
;

134 *
	mlog_fûíame
;

135 *
	mc⁄f_fûíame
;

136 
	mho°«me
[
VR_MAXHOSTNAMELEN
];

137 
size_t
 
	mmbuf_chunk_size
;

138 
pid_t
 
	mpid
;

139 *
	mpid_fûíame
;

140 
	mpidfûe
:1;

141 
	mthªad_num
;

	@src/vr_db.c

1 
	~<sig«l.h
>

2 
	~<˘y≥.h
>

4 
	~<vr_c‹e.h
>

7 
di˘Ty≥
 
	gdbDi˘Ty≥
 = {

8 
di˘SdsHash
,

9 
NULL
,

10 
NULL
,

11 
di˘SdsKeyCom∑ª
,

12 
di˘SdsDe°ru˘‹
,

13 
di˘Obje˘De°ru˘‹


17 
di˘Ty≥
 
	gkey±rDi˘Ty≥
 = {

18 
di˘SdsHash
,

19 
NULL
,

20 
NULL
,

21 
di˘SdsKeyCom∑ª
,

22 
NULL
,

23 
NULL


29 
di˘Ty≥
 
	gkeyli°Di˘Ty≥
 = {

30 
di˘ObjHash
,

31 
NULL
,

32 
NULL
,

33 
di˘ObjKeyCom∑ª
,

34 
di˘Obje˘De°ru˘‹
,

35 
di˘Li°De°ru˘‹


39 
evi˘i⁄PoﬁE¡ry
 *
	$evi˘i⁄PoﬁAŒoc
() {

40 
evi˘i⁄PoﬁE¡ry
 *
ï
;

41 
j
;

43 
ï
 = 
	`dÆloc
((*ï)*
MAXMEMORY_EVICTION_POOL_SIZE
);

44 
j
 = 0; j < 
MAXMEMORY_EVICTION_POOL_SIZE
; j++) {

45 
ï
[
j
].
idÀ
 = 0;

46 
ï
[
j
].
key
 = 
NULL
;

48  
ï
;

49 
	}
}

55 
	$ªdisDbInô
(
ªdisDb
 *
db
)

57 
db
->
di˘
 = 
	`di˘Cª©e
(&
dbDi˘Ty≥
,
NULL
);

58 
db
->
expúes
 = 
	`di˘Cª©e
(&
key±rDi˘Ty≥
,
NULL
);

59 
db
->
blockög_keys
 = 
	`di˘Cª©e
(&
keyli°Di˘Ty≥
,
NULL
);

60 
db
->
ªady_keys
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

61 
db
->
w©ched_keys
 = 
	`di˘Cª©e
(&
keyli°Di˘Ty≥
,
NULL
);

62 
db
->
evi˘i⁄_poﬁ
 = 
	`evi˘i⁄PoﬁAŒoc
();

63 
db
->
avg_âl
 = 0;

65 
	`±hªad_rwlock_öô
(&
db
->
rwl
, 
NULL
);

67  
VR_OK
;

68 
	}
}

71 
	$ªdisDbDeöô
(
ªdisDb
 *
db
)

73 
	`±hªad_rwlock_de°roy
(&
db
->
rwl
);

74  
VR_OK
;

75 
	}
}

78 
	$lockDbRód
(
ªdisDb
 *
db
)

80 
	`±hªad_rwlock_rdlock
(&
db
->
rwl
);

81  
VR_OK
;

82 
	}
}

85 
	$lockDbWrôe
(
ªdisDb
 *
db
)

87 
	`±hªad_rwlock_wæock
(&
db
->
rwl
);

88  
VR_OK
;

89 
	}
}

92 
	$u∆ockDb
(
ªdisDb
 *
db
)

94 
	`±hªad_rwlock_u∆ock
(&
db
->
rwl
);

95  
VR_OK
;

96 
	}
}

98 
robj
 *
	$lookupKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

99 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

100 i‡(
de
) {

101 
robj
 *
vÆ
 = 
	`di˘GëVÆ
(
de
);

106 i‡(
£rvî
.
rdb_chûd_pid
 =-1 && sîvî.
aof_chûd_pid
 == -1)

108 
vÆ
->
Ãu
 = 0;

109  
vÆ
;

111  
NULL
;

113 
	}
}

115 
robj
 *
	$lookupKeyRód
(
ªdisDb
 *
db
, 
robj
 *
key
) {

116 i‡(
	`checkIfExpúed
(
db
, 
key
)Ë 
NULL
;

117  
	`lookupKey
(
db
,
key
);

118 
	}
}

120 
robj
 *
	$lookupKeyWrôe
(
ªdisDb
 *
db
, 
robj
 *
key
, *
expúed
) {

121 i‡(
expúed
Ë*expúed = 
	`expúeIfNìded
(
db
,
key
);

122  
	`lookupKey
(
db
,
key
);

123 
	}
}

125 
robj
 *
	$lookupKeyRódOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
) {

126 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
, 
key
);

127 i‡(!
o
Ë
	`addRïly
(
c
,
ª∂y
);

128  
o
;

129 
	}
}

131 
robj
 *
	$lookupKeyWrôeOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
, *
expúed
) {

132 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
, 
key
, 
expúed
);

133 i‡(!
o
Ë
	`addRïly
(
c
,
ª∂y
);

134  
o
;

135 
	}
}

142 
	$dbAdd
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
) {

143 
sds
 
c›y
 = 
	`sdsdup
(
key
->
±r
);

144 
ªtvÆ
 = 
	`di˘Add
(
db
->
di˘
, 
c›y
, 
vÆ
);

145 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
ªtvÆ
 =
DICT_OK
);

146 i‡(
vÆ
->
ty≥
 =
OBJ_LIST
Ë
	`sig«lLi°AsRódy
(
db
, 
key
);

147 
	}
}

155 
	$dbOvîwrôe
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
) {

156 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

158 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
de
 != NULL);

159 
	`di˘Rïœ˚
(
db
->
di˘
, 
key
->
±r
, 
vÆ
);

160 
	}
}

168 
	$£tKey
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
, *
expúed
) {

169 i‡(
	`lookupKeyWrôe
(
db
,
key
,
expúed
Ë=
NULL
) {

170 
	`dbAdd
(
db
,
key
,
vÆ
);

172 
	`dbOvîwrôe
(
db
,
key
,
vÆ
);

175 
	`ªmoveExpúe
(
db
,
key
);

176 
	}
}

178 
	$dbExi°s
(
ªdisDb
 *
db
, 
robj
 *
key
) {

179  
	`di˘Föd
(
db
->
di˘
,
key
->
±r
Ë!
NULL
;

180 
	}
}

186 
robj
 *
	$dbR™domKey
(
ªdisDb
 *
db
) {

187 
di˘E¡ry
 *
de
;

190 
sds
 
key
;

191 
robj
 *
keyobj
;

193 
	`lockDbRód
(
db
);

194 
de
 = 
	`di˘GëR™domKey
(
db
->
di˘
);

195 i‡(
de
 =
NULL
) {

196 
	`u∆ockDb
(
db
);

197  
NULL
;

200 
key
 = 
	`di˘GëKey
(
de
);

201 
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

202 i‡(
	`di˘Föd
(
db
->
expúes
,
key
)) {

203 i‡(
	`checkIfExpúed
(
db
,
keyobj
)) {

204 
	`u∆ockDb
(
db
);

205 
	`‰ìObje˘
(
keyobj
);

209 
	`u∆ockDb
(
db
);

210  
keyobj
;

212 
	}
}

215 
	$dbDñëe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

218 i‡(
	`di˘Size
(
db
->
expúes
Ë> 0Ë
	`di˘Dñëe
(db->expúes,
key
->
±r
);

219 i‡(
	`di˘Dñëe
(
db
->
di˘
,
key
->
±r
Ë=
DICT_OK
) {

224 
	}
}

226 
robj
 *
	$dbUnsh¨eSåögVÆue
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
o
) {

227 
	`ASSERT
(
o
->
ty≥
 =
OBJ_STRING
);

228 i‡(
o
->
c⁄°™t
 || o->
ícodög
 !
OBJ_ENCODING_RAW
) {

229 
robj
 *
decoded
, *
√w
;

230 
decoded
 = 
	`gëDecodedObje˘
(
o
);

231 
√w
 = 
	`¸óãRawSåögObje˘
(
decoded
->
±r
, 
	`sd¶í
(decoded->ptr));

232 i‡(
decoded
 !
o
Ë
	`‰ìObje˘
(decoded);

233 
	`dbOvîwrôe
(
db
,
key
,
√w
);

234  
√w
;

236  
o
;

237 
	}
}

239 
em±yDb
((
ˇŒback
)(*)) {

240 
j
;

241 
ªmoved
 = 0;

242 
ªdisDb
 *
db
;

244 
j
 = 0; j < 
£rvî
.
dbnum
; j++) {

245 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)
j
);

246 
ªmoved
 +
	`di˘Size
(
db
->
di˘
);

247 
	`di˘Em±y
(
db
->
di˘
,
ˇŒback
);

248 
	`di˘Em±y
(
db
->
expúes
,
ˇŒback
);

251  
ªmoved
;

252 
	}
}

254 
	$£À˘Db
(
˛õ¡
 *
c
, 
id
) {

255 
ªdisDb
 *
db
;

257 i‡(
id
 < 0 || id >
£rvî
.
db um
)

258  
VR_ERROR
;

260 
c
->
di˘id
 = 
id
;

261  
VR_OK
;

262 
	}
}

273 
	$sig«lModifõdKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

274 
	`touchW©chedKey
(
db
,
key
);

275 
	}
}

277 
	$sig«lFlushedDb
(
dbid
) {

278 
	`touchW©chedKeysOnFlush
(
dbid
);

279 
	}
}

285 
	$ÊushdbComm™d
(
˛õ¡
 *
c
) {

286 
idx
;

288 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

289 
	`„tchI¡î«lDbById
(
c
, 
idx
);

290 
	`lockDbWrôe
(
c
->
db
);

291 
c
->
vñ
->
dúty
 +
	`di˘Size
(c->
db
->
di˘
);

292 
	`sig«lFlushedDb
(
c
->
db
->
id
);

293 
	`di˘Em±y
(
c
->
db
->
di˘
,
NULL
);

294 
	`di˘Em±y
(
c
->
db
->
expúes
,
NULL
);

295 
	`u∆ockDb
(
c
->
db
);

298 
	`addRïly
(
c
,
sh¨ed
.
ok
);

299 
	}
}

301 
	$ÊushÆlComm™d
(
˛õ¡
 *
c
) {

302 
idx
;

303 
ªdisDb
 *
db
;

305 
idx
 = 0; idx < 
£rvî
.
dbnum
; idx ++) {

306 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)
idx
);

307 
	`lockDbWrôe
(
db
);

308 
	`di˘Em±y
(
db
->
di˘
,
NULL
);

309 
	`di˘Em±y
(
db
->
expúes
,
NULL
);

310 
	`u∆ockDb
(
db
);

313 
	`addRïly
(
c
,
sh¨ed
.
ok
);

314 
	}
}

316 
	$dñComm™d
(
˛õ¡
 *
c
) {

317 
dñëed
 = 0, 
j
;

318 
expúed
 = 0;

320 
j
 = 1; j < 
c
->
¨gc
; j++) {

321 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[
j
]);

322 
	`lockDbWrôe
(
c
->
db
);

323 
expúed
 +
	`expúeIfNìded
(
c
->
db
,c->
¨gv
[
j
]);

324 i‡(
	`dbDñëe
(
c
->
db
,c->
¨gv
[
j
])) {

325 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[
j
]);

326 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,

327 "dñ",
c
->
¨gv
[
j
],c->
db
->
id
);

328 
c
->
vñ
->
dúty
++;

329 
dñëed
++;

331 
	`u∆ockDb
(
c
->
db
);

333 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

335 i‡(
expúed
 > 0) {

336 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 
expúed
);

338 
	}
}

342 
	$exi°sComm™d
(
˛õ¡
 *
c
) {

343 
cou¡
 = 0;

344 
j
;

346 
j
 = 1; j < 
c
->
¨gc
; j++) {

347 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

348 
	`lockDbRód
(
c
->
db
);

349 i‡(
	`checkIfExpúed
(
c
->
db
,c->
¨gv
[
j
])) {

350 
	`u∆ockDb
(
c
->
db
);

353 i‡(
	`dbExi°s
(
c
->
db
,c->
¨gv
[
j
])Ë
cou¡
++;

354 
	`u∆ockDb
(
c
->
db
);

356 
	`addRïlyL⁄gL⁄g
(
c
,
cou¡
);

358 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 
cou¡
);

359 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, c->
¨gc
-1-
cou¡
);

360 
	}
}

362 
	$£À˘Comm™d
(
˛õ¡
 *
c
) {

363 
id
;

365 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[1], &
id
,

366 "övÆid DB index"Ë!
VR_OK
)

369 i‡(
	`£À˘Db
(
c
,
id
Ë=
VR_ERROR
) {

370 
	`addRïlyEº‹
(
c
,"invalid DB index");

372 
	`addRïly
(
c
,
sh¨ed
.
ok
);

374 
	}
}

376 
	$øndomkeyComm™d
(
˛õ¡
 *
c
) {

377 
robj
 *
key
;

378 
idx
, 
ªåy_cou¡
 = 0;

380 
idx
 = 
	`øndom
()%
£rvî
.
dböum
;

382 
ªåy
:

383 
	`„tchI¡î«lDbById
(
c
, 
idx
);

384 i‡((
key
 = 
	`dbR™domKey
(
c
->
db
)Ë=
NULL
) {

385 i‡(
ªåy_cou¡
++ < 
£rvî
.
dböum
) {

386 i‡(++
idx
 >
£rvî
.
dböum
) {

387 
idx
 = 0;

389 
ªåy
;

392 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

396 
	`addRïlyBulk
(
c
,
key
);

397 
	`‰ìObje˘
(
key
);

398 
	}
}

400 
	$keysComm™d
(
˛õ¡
 *
c
) {

401 
di˘Iãøt‹
 *
di
;

402 
di˘E¡ry
 *
de
;

403 
sds
 
∑âîn
 = 
c
->
¨gv
[1]->
±r
;

404 
∂í
 = 
	`sd¶í
(
∑âîn
), 
Ælkeys
;

405 
numkeys
 = 0;

406 *
ª∂yÀn
;

407 
idx
;

408 
keys_cou¡
 = 0;

409 
expúed
 = 0;

410 
max_time_com∂exôy_limô
;

413 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

414 
	`„tchI¡î«lDbById
(
c
, 
idx
);

415 
	`lockDbWrôe
(
c
->
db
);

416 
keys_cou¡
 +
	`di˘Size
(
c
->
db
->
di˘
);

417 
	`u∆ockDb
(
c
->
db
);

420 
max_time_com∂exôy_limô
 = 
c
->
vñ
->
cc
.max_time_complexity_limit;

421 i‡(
max_time_com∂exôy_limô
 &&

422 
keys_cou¡
 > 
max_time_com∂exôy_limô
) {

423 
	`addRïly
(
c
,
sh¨ed
.
outofcom∂exôylimô
);

427 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

428 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

429 
	`„tchI¡î«lDbById
(
c
,
idx
);

430 
	`lockDbWrôe
(
c
->
db
);

431 
di
 = 
	`di˘GëSa„Iãøt‹
(
c
->
db
->
di˘
);

432 
Ælkeys
 = (
∑âîn
[0] == '*' &&Öattern[1] == '\0');

433 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

434 
sds
 
key
 = 
	`di˘GëKey
(
de
);

435 
robj
 *
keyobj
;

437 i‡(
Ælkeys
 || 
	`°rögm©chÀn
(
∑âîn
,
∂í
,
key
,
	`sd¶í
(key),0)) {

438 
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

439 i‡(
	`expúeIfNìded
(
c
->
db
,
keyobj
) == 0) {

440 
	`addRïlyBulk
(
c
,
keyobj
);

441 
numkeys
++;

443 
expúed
 ++;

445 
	`‰ìObje˘
(
keyobj
);

448 
	`di˘Rñó£Iãøt‹
(
di
);

449 
	`u∆ockDb
(
c
->
db
);

451 
	`£tDe„ºedMu…iBulkLígth
(
c
,
ª∂yÀn
,
numkeys
);

452 
	}
}

456 
	$sˇnCÆlback
(*
¥ivd©a
, c⁄° 
di˘E¡ry
 *
de
) {

457 **
pd
 = (**Ë
¥ivd©a
;

458 
dli°
 *
keys
 = 
pd
[0];

459 
robj
 *
o
 = 
pd
[1];

460 
robj
 *
key
, *
vÆ
 = 
NULL
;

462 i‡(
o
 =
NULL
) {

463 
sds
 
sdskey
 = 
	`di˘GëKey
(
de
);

464 
key
 = 
	`¸óãSåögObje˘
(
sdskey
, 
	`sd¶í
(sdskey));

465 } i‡(
o
->
ty≥
 =
OBJ_SET
) {

466 
key
 = 
	`di˘GëKey
(
de
);

467 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

468 } i‡(
o
->
ty≥
 =
OBJ_HASH
) {

469 
key
 = 
	`di˘GëKey
(
de
);

470 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

471 
vÆ
 = 
	`di˘GëVÆ
(
de
);

472 
vÆ
 = 
	`dupSåögObje˘Unc⁄°™t
(val);

473 } i‡(
o
->
ty≥
 =
OBJ_ZSET
) {

474 
key
 = 
	`di˘GëKey
(
de
);

475 
key
 = 
	`dupSåögObje˘Unc⁄°™t
(key);

476 
vÆ
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(*(*)
	`di˘GëVÆ
(
de
),0);

478 
	`£rvîP™ic
("TypeÇot handled in SCAN callback.");

481 
	`dli°AddNodeTaû
(
keys
, 
key
);

482 i‡(
vÆ
Ë
	`dli°AddNodeTaû
(
keys
, val);

483 
	}
}

489 
	$∑r£SˇnCurs‹OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
curs‹
) {

490 *
ïå
;

494 
î∫o
 = 0;

495 *
curs‹
 = 
	`°πoul
(
o
->
±r
, &
ïå
, 10);

496 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] !'\0' || 
î∫o
 =
ERANGE
)

498 
	`addRïlyEº‹
(
c
, "invalid cursor");

499  
VR_ERROR
;

501  
VR_OK
;

502 
	}
}

515 
	$sˇnGíîicComm™d
(
˛õ¡
 *
c
, 
sˇ¡y≥
) {

516 
i
, 
j
;

517 
dli°
 *
keys
 = 
	`dli°Cª©e
();

518 
dli°Node
 *
node
, *
√xäode
;

519 
cou¡
 = 10;

520 
sds
 
∑t
 = 
NULL
;

521 
∑éí
 = 0, 
u£_∑âîn
 = 0;

522 
curs‹
;

523 
robj
 *
o
;

524 
di˘
 *
ht
;

527 
i
 = (
sˇ¡y≥
 =
SCAN_TYPE_KEY
) ? 2 : 3;

528 i‡(
	`∑r£SˇnCurs‹OrRïly
(
c
,c->
¨gv
[
i
-1],&
curs‹
Ë=
VR_ERROR
) ;

531 
i
 < 
c
->
¨gc
) {

532 
j
 = 
c
->
¨gc
 - 
i
;

533 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
, "cou¡"Ë&& 
j
 >= 2) {

534 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
i
+1], &
cou¡
, 
NULL
)

535 !
VR_OK
)

537 
˛ónup
;

540 i‡(
cou¡
 < 1) {

541 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

542 
˛ónup
;

545 
i
 += 2;

546 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
i
]->
±r
, "m©ch"Ë&& 
j
 >= 2) {

547 
∑t
 = 
c
->
¨gv
[
i
+1]->
±r
;

548 
∑éí
 = 
	`sd¶í
(
∑t
);

552 
u£_∑âîn
 = !(
∑t
[0] ='*' && 
∑éí
 == 1);

554 
i
 += 2;

556 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

557 
˛ónup
;

561 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

562 
o
 = 
NULL
;

563 i‡(
c
->
sˇnid
 =-1 || 
curs‹
 == 0) c->scanid = 0;

564 
	`„tchI¡î«lDbById
(
c
, c->
sˇnid
);

565 
	`lockDbRód
(
c
->
db
);

566 } i‡(
sˇ¡y≥
 =
SCAN_TYPE_HASH
 ||

567 
sˇ¡y≥
 =
SCAN_TYPE_SET
 ||

568 
sˇ¡y≥
 =
SCAN_TYPE_ZSET
) {

569 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

570 
	`lockDbRód
(
c
->
db
);

571 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ysˇn
)Ë=
NULL
) {

572 
	`u∆ockDb
(
c
->
db
);

573 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

578 
sˇ¡y≥
) {

579 
SCAN_TYPE_KEY
:

580 
	`ASSERT
(
o
 =
NULL
);

582 
SCAN_TYPE_HASH
:

583 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

584 
	`u∆ockDb
(
c
->
db
);

585 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

589 
SCAN_TYPE_SET
:

590 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_SET
)) {

591 
	`u∆ockDb
(
c
->
db
);

592 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

596 
SCAN_TYPE_ZSET
:

597 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_ZSET
)) {

598 
	`u∆ockDb
(
c
->
db
);

599 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

607 
	`ASSERT
(
o
 =
NULL
 || o->
ty≥
 =
OBJ_SET
 || o->ty≥ =
OBJ_HASH
 ||

608 
o
->
ty≥
 =
OBJ_ZSET
);

610 
sˇn_ªåy
:

621 
ht
 = 
NULL
;

622 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

623 
ht
 = 
c
->
db
->
di˘
;

624 } i‡(
o
->
ty≥
 =
OBJ_SET
 && o->
ícodög
 =
OBJ_ENCODING_HT
) {

625 
ht
 = 
o
->
±r
;

626 } i‡(
o
->
ty≥
 =
OBJ_HASH
 && o->
ícodög
 =
OBJ_ENCODING_HT
) {

627 
ht
 = 
o
->
±r
;

628 
cou¡
 *= 2;

629 } i‡(
o
->
ty≥
 =
OBJ_ZSET
 && o->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

630 
z£t
 *
zs
 = 
o
->
±r
;

631 
ht
 = 
zs
->
di˘
;

632 
cou¡
 *= 2;

635 i‡(
ht
) {

636 *
¥ivd©a
[2];

641 
maxôî©i⁄s
 = 
cou¡
*10;

646 
¥ivd©a
[0] = 
keys
;

647 
¥ivd©a
[1] = 
o
;

649 
curs‹
 = 
	`di˘Sˇn
(
ht
, curs‹, 
sˇnCÆlback
, 
¥ivd©a
);

650 } 
curs‹
 &&

651 
maxôî©i⁄s
-- &&

652 
	`dli°Lígth
(
keys
Ë< ()
cou¡
);

653 } i‡(
o
->
ty≥
 =
OBJ_SET
) {

654 
pos
 = 0;

655 
öt64_t
 
Œ
;

657 
	`öt£tGë
(
o
->
±r
,
pos
++,&
Œ
))

658 
	`dli°AddNodeTaû
(
keys
,
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œ
));

659 
curs‹
 = 0;

660 } i‡(
o
->
ty≥
 =
OBJ_HASH
 || o->ty≥ =
OBJ_ZSET
) {

661 *
p
 = 
	`zùli°Index
(
o
->
±r
,0);

662 *
v°r
;

663 
vÀn
;

664 
vŒ
;

666 
p
) {

667 
	`zùli°Gë
(
p
,&
v°r
,&
vÀn
,&
vŒ
);

668 
	`dli°AddNodeTaû
(
keys
,

669 (
v°r
 !
NULL
Ë? 
	`¸óãSåögObje˘
((*)v°r,
vÀn
) :

670 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
));

671 
p
 = 
	`zùli°Next
(
o
->
±r
,p);

673 
curs‹
 = 0;

675 
	`£rvîP™ic
("Not handledÉncoding in SCAN.");

678 
	`u∆ockDb
(
c
->
db
);

679 i‡(
sˇ¡y≥
 =
SCAN_TYPE_KEY
) {

680 i‡(
curs‹
 == 0) {

681 i‡(
c
->
sˇnid
 < (
£rvî
.
dböum
 - 1)) {

682 
c
->
sˇnid
 ++;

683 
	`„tchI¡î«lDbById
(
c
, c->
sˇnid
);

684 
	`lockDbRód
(
c
->
db
);

685 
sˇn_ªåy
;

687 
c
->
sˇnid
 = -1;

690 } i‡(
sˇ¡y≥
 =
SCAN_TYPE_HASH
 ||

691 
sˇ¡y≥
 =
SCAN_TYPE_SET
 ||

692 
sˇ¡y≥
 =
SCAN_TYPE_ZSET
) {

693 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

697 
node
 = 
	`dli°Fú°
(
keys
);

698 
node
) {

699 
robj
 *
kobj
 = 
	`dli°NodeVÆue
(
node
);

700 
√xäode
 = 
	`dli°NextNode
(
node
);

701 
fûãr
 = 0;

704 i‡(!
fûãr
 && 
u£_∑âîn
) {

705 i‡(
	`sdsEncodedObje˘
(
kobj
)) {

706 i‡(!
	`°rögm©chÀn
(
∑t
, 
∑éí
, 
kobj
->
±r
, 
	`sd¶í
(kobj->ptr), 0))

707 
fûãr
 = 1;

709 
buf
[
LONG_STR_SIZE
];

710 
Àn
;

712 
	`ASSERT
(
kobj
->
ícodög
 =
OBJ_ENCODING_INT
);

713 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),()
kobj
->
±r
);

714 i‡(!
	`°rögm©chÀn
(
∑t
, 
∑éí
, 
buf
, 
Àn
, 0)Ë
fûãr
 = 1;

719 i‡(!
fûãr
 && 
o
 =
NULL
 && 
	`checkIfExpúed
(
c
->
db
,
kobj
)) filter = 1;

722 i‡(
fûãr
) {

723 
	`‰ìObje˘
(
kobj
);

724 
	`dli°DñNode
(
keys
, 
node
);

730 i‡(
o
 && (o->
ty≥
 =
OBJ_ZSET
 || o->ty≥ =
OBJ_HASH
)) {

731 
node
 = 
√xäode
;

732 
√xäode
 = 
	`dli°NextNode
(
node
);

733 i‡(
fûãr
) {

734 
kobj
 = 
	`dli°NodeVÆue
(
node
);

735 
	`‰ìObje˘
(
kobj
);

736 
	`dli°DñNode
(
keys
, 
node
);

739 
node
 = 
√xäode
;

743 
	`addRïlyMu…iBulkLí
(
c
, 2);

744 
	`addRïlyBulkL⁄gL⁄g
(
c
,
curs‹
);

746 
	`addRïlyMu…iBulkLí
(
c
, 
	`dli°Lígth
(
keys
));

747 (
node
 = 
	`dli°Fú°
(
keys
)Ë!
NULL
) {

748 
robj
 *
kobj
 = 
	`dli°NodeVÆue
(
node
);

749 
	`addRïlyBulk
(
c
, 
kobj
);

750 
	`‰ìObje˘
(
kobj
);

751 
	`dli°DñNode
(
keys
, 
node
);

754 
˛ónup
:

755 
	`dli°SëFªeMëhod
(
keys
,
‰ìObje˘Void
);

756 
	`dli°Rñó£
(
keys
);

757 
	}
}

760 
	$sˇnComm™d
(
˛õ¡
 *
c
) {

761 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_KEY
);

762 
	}
}

764 
	$dbsizeComm™d
(
˛õ¡
 *
c
) {

765 
idx
;

766 
cou¡
 = 0;

768 
idx
 = 0; idx < 
£rvî
.
dböum
; idx ++) {

769 
	`„tchI¡î«lDbById
(
c
, 
idx
);

770 
	`lockDbRód
(
c
->
db
);

771 
cou¡
 +
	`di˘Size
(
c
->
db
->
di˘
);

772 
	`u∆ockDb
(
c
->
db
);

775 
	`addRïlyL⁄gL⁄g
(
c
,
cou¡
);

776 
	}
}

778 
	$œ°ßveComm™d
(
˛õ¡
 *
c
) {

779 
	`addRïlyL⁄gL⁄g
(
c
,
£rvî
.
œ°ßve
);

780 
	}
}

782 
	$ty≥Comm™d
(
˛õ¡
 *
c
) {

783 
robj
 *
o
;

784 *
ty≥
;

786 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

787 
	`lockDbRód
(
c
->
db
);

788 
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]);

789 i‡(
o
 =
NULL
) {

790 
ty≥
 = "none";

791 
	`u∆ockDb
(
c
->
db
);

792 
	`addRïlySètus
(
c
,
ty≥
);

793 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

796 
o
->
ty≥
) {

797 
OBJ_STRING
: 
ty≥
 = "string"; ;

798 
OBJ_LIST
: 
ty≥
 = "list"; ;

799 
OBJ_SET
: 
ty≥
 = "set"; ;

800 
OBJ_ZSET
: 
ty≥
 = "zset"; ;

801 
OBJ_HASH
: 
ty≥
 = "hash"; ;

802 : 
ty≥
 = "unknown"; ;

806 
	`u∆ockDb
(
c
->
db
);

807 
	`addRïlySètus
(
c
,
ty≥
);

808 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

809 
	}
}

811 
	$shutdownComm™d
(
˛õ¡
 *
c
) {

812 
Êags
 = 0;

814 i‡(
c
->
¨gc
 > 2) {

815 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

817 } i‡(
c
->
¨gc
 == 2) {

818 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"nosave")) {

819 
Êags
 |
SHUTDOWN_NOSAVE
;

820 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"save")) {

821 
Êags
 |
SHUTDOWN_SAVE
;

823 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

833 i‡(
£rvî
.
lﬂdög
)

834 
Êags
 = (Êag†& ~
SHUTDOWN_SAVE
Ë| 
SHUTDOWN_NOSAVE
;

836 
	`addRïlyEº‹
(
c
,"ErrorsÅryingÅo SHUTDOWN. CheckÜogs.");

837 
	}
}

839 
	$ª«meGíîicComm™d
(
˛õ¡
 *
c
, 
nx
) {

840 
robj
 *
o
;

841 
expúe
;

842 
ßmekey
 = 0;

846 i‡(
	`sdscmp
(
c
->
¨gv
[1]->
±r
,c->¨gv[2]->±rË=0Ë
ßmekey
 = 1;

848 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nokeyîr
,
NULL
)) == NULL)

851 i‡(
ßmekey
) {

852 
	`addRïly
(
c
,
nx
 ? 
sh¨ed
.
czîo
 : sh¨ed.
ok
);

856 
	`ö¸RefCou¡
(
o
);

857 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

858 i‡(
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
) != NULL) {

859 i‡(
nx
) {

860 
	`de¸RefCou¡
(
o
);

861 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

866 
	`dbDñëe
(
c
->
db
,c->
¨gv
[2]);

868 
	`dbAdd
(
c
->
db
,c->
¨gv
[2],
o
);

869 i‡(
expúe
 !-1Ë
	`£tExpúe
(
c
->
db
,c->
¨gv
[2],expire);

870 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

871 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

872 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[2]);

873 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"rename_from",

874 
c
->
¨gv
[1],c->
db
->
id
);

875 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"rename_to",

876 
c
->
¨gv
[2],c->
db
->
id
);

877 
£rvî
.
dúty
++;

878 
	`addRïly
(
c
,
nx
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
ok
);

879 
	}
}

881 
	$ª«meComm™d
(
˛õ¡
 *
c
) {

882 
	`ª«meGíîicComm™d
(
c
,0);

883 
	}
}

885 
	$ª«míxComm™d
(
˛õ¡
 *
c
) {

886 
	`ª«meGíîicComm™d
(
c
,1);

887 
	}
}

889 
	$moveComm™d
(
˛õ¡
 *
c
) {

890 
robj
 *
o
;

891 
ªdisDb
 *
§c
, *
d°
;

892 
§cid
;

893 
dbid
, 
expúe
;

896 
§c
 = 
c
->
db
;

897 
§cid
 = 
c
->
db
->
id
;

899 i‡(
	`gëL⁄gL⁄gFromObje˘
(
c
->
¨gv
[2],&
dbid
Ë=
VR_ERROR
 ||

900 
dbid
 < 
INT_MIN
 || dbid > 
INT_MAX
 ||

901 
	`£À˘Db
(
c
,
dbid
Ë=
VR_ERROR
)

903 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

906 
d°
 = 
c
->
db
;

907 
	`£À˘Db
(
c
,
§cid
);

911 i‡(
§c
 =
d°
) {

912 
	`addRïly
(
c
,
sh¨ed
.
ßmeobje˘îr
);

917 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

918 i‡(!
o
) {

919 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

922 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

925 i‡(
	`lookupKeyWrôe
(
d°
,
c
->
¨gv
[1],
NULL
) != NULL) {

926 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

929 
	`dbAdd
(
d°
,
c
->
¨gv
[1],
o
);

930 i‡(
expúe
 !-1Ë
	`£tExpúe
(
d°
,
c
->
¨gv
[1],expire);

931 
	`ö¸RefCou¡
(
o
);

934 
	`dbDñëe
(
§c
,
c
->
¨gv
[1]);

935 
£rvî
.
dúty
++;

936 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

937 
	}
}

943 
	$ªmoveExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

946 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
	`di˘Föd
(
db
->
di˘
,key->
±r
) != NULL);

947  
	`di˘Dñëe
(
db
->
expúes
,
key
->
±r
Ë=
DICT_OK
;

948 
	}
}

950 
	$£tExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
, 
whí
) {

951 
di˘E¡ry
 *
kde
, *
de
;

954 
kde
 = 
	`di˘Föd
(
db
->
di˘
,
key
->
±r
);

955 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
kde
 != NULL);

956 
de
 = 
	`di˘Rïœ˚Raw
(
db
->
expúes
,
	`di˘GëKey
(
kde
));

957 
	`di˘SëSig√dI¡egîVÆ
(
de
,
whí
);

958 
	}
}

962 
	$gëExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

963 
di˘E¡ry
 *
de
;

966 i‡(
	`di˘Size
(
db
->
expúes
) == 0 ||

967 (
de
 = 
	`di˘Föd
(
db
->
expúes
,
key
->
±r
)Ë=
NULL
)  -1;

971 
	`£rvîAs£πWôhInfo
(
NULL
,
key
,
	`di˘Föd
(
db
->
di˘
,key->
±r
) != NULL);

972  
	`di˘GëSig√dI¡egîVÆ
(
de
);

973 
	}
}

983 
	$¥›ag©eExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
) {

984 
robj
 *
¨gv
[2];

986 
¨gv
[0] = 
sh¨ed
.
dñ
;

987 
¨gv
[1] = 
key
;

988 
	`ö¸RefCou¡
(
¨gv
[0]);

989 
	`ö¸RefCou¡
(
¨gv
[1]);

991 i‡(
£rvî
.
aof_°©e
 !
AOF_OFF
)

992 
	`„edAµídO∆yFûe
(
£rvî
.
dñComm™d
,
db
->
id
,
¨gv
,2);

993 
	`ª∂iˇti⁄FìdSœves
(
ª∂
.
¶aves
,
db
->
id
,
¨gv
,2);

995 
	`de¸RefCou¡
(
¨gv
[0]);

996 
	`de¸RefCou¡
(
¨gv
[1]);

997 
	}
}

1000 
	$checkIfExpúed
(
ªdisDb
 *
db
, 
robj
 *
key
) {

1001 
whí
;

1003 
whí
 = 
	`gëExpúe
(
db
,
key
);

1004 i‡(
whí
 > 0 && 
	`vr_m£c_now
() > when) {

1009 
	}
}

1011 
	$expúeIfNìded
(
ªdisDb
 *
db
, 
robj
 *
key
) {

1012 
whí
 = 
	`gëExpúe
(
db
,
key
);

1013 
now
;

1015 i‡(
whí
 < 0)  0;

1018 i‡(
£rvî
.
lﬂdög
)  0;

1025 
now
 = 
£rvî
.
lua_ˇŒî
 ? sîvî.
lua_time_°¨t
 : 
	`vr_m£c_now
();

1034 i‡(
ª∂
.
ma°îho°
 !
NULL
Ë 
now
 > 
whí
;

1037 i‡(
now
 <
whí
)  0;

1041 
	`nŸifyKey•a˚Evít
(
NOTIFY_EXPIRED
,

1042 "expúed",
key
,
db
->
id
);

1043  
	`dbDñëe
(
db
,
key
);

1044 
	}
}

1057 
	$expúeGíîicComm™d
(
˛õ¡
 *
c
, 
ba£time
, 
unô
) {

1058 
robj
 *
key
 = 
c
->
¨gv
[1], *
∑øm
 = c->argv[2];

1059 
whí
;

1060 
expúed
 = 0;

1062 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
∑øm
, &
whí
, 
NULL
Ë!
VR_OK
)

1065 i‡(
unô
 =
UNIT_SECONDS
Ë
whí
 *= 1000;

1066 
whí
 +
ba£time
;

1068 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1069 
	`lockDbWrôe
(
c
->
db
);

1071 i‡(
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
Ë=
NULL
) {

1072 
	`u∆ockDb
(
c
->
db
);

1073 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1074 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1084 i‡(
whí
 <
	`vr_m£c_now
(Ë&& !
£rvî
.
lﬂdög
 && !
ª∂
.
ma°îho°
) {

1085 
robj
 *
aux
;

1087 
	`£rvîAs£πWôhInfo
(
c
,
key
,
	`dbDñëe
(c->
db
,key));

1088 
c
->
vñ
->
dúty
++;

1091 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
key
);

1092 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,
sh¨ed
.
dñ
,
aux
);

1093 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1094 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1095 
	`u∆ockDb
(
c
->
db
);

1096 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1097 
	`addRïly
(
c
, 
sh¨ed
.
c⁄e
);

1100 
	`£tExpúe
(
c
->
db
,
key
,
whí
);

1101 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

1102 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1103 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"expúe",
key
,
c
->
db
->
id
);

1104 
	`u∆ockDb
(
c
->
db
);

1105 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1106 
c
->
vñ
->
dúty
++;

1109 
	}
}

1111 
	$expúeComm™d
(
˛õ¡
 *
c
) {

1112 
	`expúeGíîicComm™d
(
c
,
	`vr_m£c_now
(),
UNIT_SECONDS
);

1113 
	}
}

1115 
	$expúótComm™d
(
˛õ¡
 *
c
) {

1116 
	`expúeGíîicComm™d
(
c
,0,
UNIT_SECONDS
);

1117 
	}
}

1119 
	$≥xpúeComm™d
(
˛õ¡
 *
c
) {

1120 
	`expúeGíîicComm™d
(
c
,
	`vr_m£c_now
(),
UNIT_MILLISECONDS
);

1121 
	}
}

1123 
	$≥xpúótComm™d
(
˛õ¡
 *
c
) {

1124 
	`expúeGíîicComm™d
(
c
,0,
UNIT_MILLISECONDS
);

1125 
	}
}

1127 
	$âlGíîicComm™d
(
˛õ¡
 *
c
, 
ouçut_ms
) {

1128 
expúe
, 
âl
 = -1;

1130 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1131 
	`lockDbRód
(
c
->
db
);

1133 i‡(
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[1]Ë=
NULL
) {

1134 
	`u∆ockDb
(
c
->
db
);

1135 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

1136 
	`addRïlyL⁄gL⁄g
(
c
,-2);

1141 
expúe
 = 
	`gëExpúe
(
c
->
db
,c->
¨gv
[1]);

1142 
	`u∆ockDb
(
c
->
db
);

1143 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

1145 i‡(
expúe
 != -1) {

1146 
âl
 = 
expúe
-
	`vr_m£c_now
();

1147 i‡(
âl
 < 0)Åtl = 0;

1149 i‡(
âl
 == -1) {

1150 
	`addRïlyL⁄gL⁄g
(
c
,-1);

1152 
	`addRïlyL⁄gL⁄g
(
c
,
ouçut_ms
 ? 
âl
 : ((ttl+500)/1000));

1154 
	}
}

1156 
	$âlComm™d
(
˛õ¡
 *
c
) {

1157 
	`âlGíîicComm™d
(
c
, 0);

1158 
	}
}

1160 
	$±éComm™d
(
˛õ¡
 *
c
) {

1161 
	`âlGíîicComm™d
(
c
, 1);

1162 
	}
}

1164 
	$≥rsi°Comm™d
(
˛õ¡
 *
c
) {

1165 
di˘E¡ry
 *
de
;

1167 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1168 
	`lockDbWrôe
(
c
->
db
);

1169 
de
 = 
	`di˘Föd
(
c
->
db
->
di˘
,c->
¨gv
[1]->
±r
);

1170 i‡(
de
 =
NULL
) {

1171 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1173 i‡(
	`ªmoveExpúe
(
c
->
db
,c->
¨gv
[1])) {

1174 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

1175 
c
->
vñ
->
dúty
++;

1177 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1180 
	`u∆ockDb
(
c
->
db
);

1181 
	}
}

1189 *
	$gëKeysUsögComm™dTabÀ
(
ªdisComm™d
 *
cmd
,
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1190 
j
, 
i
 = 0, 
œ°
, *
keys
;

1191 
	`UNUSED
(
¨gv
);

1193 i‡(
cmd
->
fú°key
 == 0) {

1194 *
numkeys
 = 0;

1195  
NULL
;

1197 
œ°
 = 
cmd
->
œ°key
;

1198 i‡(
œ°
 < 0Ëœ° = 
¨gc
+last;

1199 
keys
 = 
	`dÆloc
(()*((
œ°
 - 
cmd
->
fú°key
)+1));

1200 
j
 = 
cmd
->
fú°key
; j <
œ°
; j +cmd->
key°ï
) {

1201 
	`ASSERT
(
j
 < 
¨gc
);

1202 
keys
[
i
++] = 
j
;

1204 *
numkeys
 = 
i
;

1205  
keys
;

1206 
	}
}

1219 *
	$gëKeysFromComm™d
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1220 i‡(
cmd
->
gëkeys_¥oc
) {

1221  
cmd
->
	`gëkeys_¥oc
(cmd,
¨gv
,
¨gc
,
numkeys
);

1223  
	`gëKeysUsögComm™dTabÀ
(
cmd
,
¨gv
,
¨gc
,
numkeys
);

1225 
	}
}

1228 
	$gëKeysFªeResu…
(*
ªsu…
) {

1229 
	`d‰ì
(
ªsu…
);

1230 
	}
}

1235 *
	$zuni⁄I¡îGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1236 
i
, 
num
, *
keys
;

1237 
	`UNUSED
(
cmd
);

1239 
num
 = 
	`©oi
(
¨gv
[2]->
±r
);

1242 i‡(
num
 > (
¨gc
-3)) {

1243 *
numkeys
 = 0;

1244  
NULL
;

1250 
keys
 = 
	`dÆloc
(()*(
num
+1));

1253 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 3+i;

1256 
keys
[
num
] = 1;

1257 *
numkeys
 = 
num
+1;

1258  
keys
;

1259 
	}
}

1264 *
	$evÆGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1265 
i
, 
num
, *
keys
;

1266 
	`UNUSED
(
cmd
);

1268 
num
 = 
	`©oi
(
¨gv
[2]->
±r
);

1271 i‡(
num
 > (
¨gc
-3)) {

1272 *
numkeys
 = 0;

1273  
NULL
;

1276 
keys
 = 
	`dÆloc
(()*
num
);

1277 *
numkeys
 = 
num
;

1280 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 3+i;

1282  
keys
;

1283 
	}
}

1292 *
	$s‹tGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1293 
i
, 
j
, 
num
, *
keys
, 
found_°‹e
 = 0;

1294 
	`UNUSED
(
cmd
);

1296 
num
 = 0;

1297 
keys
 = 
	`dÆloc
(()*2);

1299 
keys
[
num
++] = 1;

1306 *
«me
;

1307 
skù
;

1308 } 
skùli°
[] = {

1312 {
NULL
, 0}

1315 
i
 = 2; i < 
¨gc
; i++) {

1316 
j
 = 0; 
skùli°
[j].
«me
 !
NULL
; j++) {

1317 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,
skùli°
[
j
].
«me
)) {

1318 
i
 +
skùli°
[
j
].
skù
;

1320 } i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,"°‹e"Ë&& i+1 < 
¨gc
) {

1324 
found_°‹e
 = 1;

1325 
keys
[
num
] = 
i
+1;

1330 *
numkeys
 = 
num
 + 
found_°‹e
;

1331  
keys
;

1332 
	}
}

1334 *
	$migøãGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
) {

1335 
i
, 
num
, 
fú°
, *
keys
;

1336 
	`UNUSED
(
cmd
);

1339 
fú°
 = 3;

1340 
num
 = 1;

1343 i‡(
¨gc
 > 6) {

1344 
i
 = 6; i < 
¨gc
; i++) {

1345 i‡(!
	`°rˇ£cmp
(
¨gv
[
i
]->
±r
,"keys") &&

1346 
	`sd¶í
(
¨gv
[3]->
±r
) == 0)

1348 
fú°
 = 
i
+1;

1349 
num
 = 
¨gc
-
fú°
;

1355 
keys
 = 
	`dÆloc
(()*
num
);

1356 
i
 = 0; i < 
num
; i++Ë
keys
[i] = 
fú°
+i;

1357 *
numkeys
 = 
num
;

1358  
keys
;

1359 
	}
}

1361 
	$„tchI¡î«lDbByKey
(
˛õ¡
 *
c
, 
robj
 *
key
) {

1362 
c
->
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
	`hash_¸c16
(
key
->
±r
,
	`°rögObje˘Lí
(key))&0x3FFF)%£rvî.
dböum
+c->
di˘id
*server.dbinum);

1363  
VR_OK
;

1364 
	}
}

1366 
	$„tchI¡î«lDbById
(
˛õ¡
 *
c
, 
idx
) {

1367 
c
->
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
idx
+c->
di˘id
*£rvî.
dböum
);

1368  
VR_OK
;

1369 
	}
}

1373 
	$åyResizeHashTabÀsF‹Db
(
dbid
) {

1374 
ªdisDb
 *
db
;

1376 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
dbid
);

1377 
	`lockDbWrôe
(
db
);

1378 i‡(
	`htNìdsResize
(
db
->
di˘
))

1379 
	`di˘Resize
(
db
->
di˘
);

1380 i‡(
	`htNìdsResize
(
db
->
expúes
))

1381 
	`di˘Resize
(
db
->
expúes
);

1382 
	`u∆ockDb
(
db
);

1383 
	}
}

1392 
	$ö¸emíèŒyRehashF‹Db
(
dbid
) {

1393 
ªdisDb
 *
db
;

1395 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
dbid
);

1396 
	`lockDbWrôe
(
db
);

1399 i‡(
	`di˘IsRehashög
(
db
->
di˘
)) {

1400 
	`di˘RehashMûli£c⁄ds
(
db
->
di˘
,1);

1401 
	`u∆ockDb
(
db
);

1405 i‡(
	`di˘IsRehashög
(
db
->
expúes
)) {

1406 
	`di˘RehashMûli£c⁄ds
(
db
->
expúes
,1);

1407 
	`u∆ockDb
(
db
);

1411 
	`u∆ockDb
(
db
);

1413 
	}
}

1437 
	$a˘iveExpúeCy˛e
(
vr_backíd
 *
backíd
, 
ty≥
) {

1438 
j
, 
ôî©i⁄
 = 0;

1439 
dbs_≥r_ˇŒ
 = 
CRON_DBS_PER_CALL
;

1440 
°¨t
 = 
	`vr_u£c_now
(), 
timñimô
;

1441 
expúed_tŸÆ
 = 0;

1443 i‡(
ty≥
 =
ACTIVE_EXPIRE_CYCLE_FAST
) {

1447 i‡(!
backíd
->
timñimô_exô
) ;

1448 i‡(
°¨t
 < 
backíd
->
œ°_Á°_cy˛e
 + 
ACTIVE_EXPIRE_CYCLE_FAST_DURATION
*2) ;

1449 
backíd
->
œ°_Á°_cy˛e
 = 
°¨t
;

1459 i‡(
dbs_≥r_ˇŒ
 > 
£rvî
.
dbnum
 || 
backíd
->
timñimô_exô
)

1460 
dbs_≥r_ˇŒ
 = 
£rvî
.
dbnum
;

1466 
timñimô
 = 1000000*
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC
/
£rvî
.
hz
/100;

1467 
backíd
->
timñimô_exô
 = 0;

1468 i‡(
timñimô
 <= 0)Åimelimit = 1;

1470 i‡(
ty≥
 =
ACTIVE_EXPIRE_CYCLE_FAST
)

1471 
timñimô
 = 
ACTIVE_EXPIRE_CYCLE_FAST_DURATION
;

1473 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1474 
expúed
;

1475 
ªdisDb
 *
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
backíd
->
cuºít_db
%£rvî.
dbnum
);

1480 
backíd
->
cuºít_db
++;

1482 
	`lockDbWrôe
(
db
);

1486 
num
, 
¶Ÿs
;

1487 
now
, 
âl_sum
;

1488 
âl_ßm∂es
;

1490 i‡((
num
 = 
	`di˘Size
(
db
->
expúes
)) == 0) {

1491 
db
->
avg_âl
 = 0;

1494 
¶Ÿs
 = 
	`di˘SlŸs
(
db
->
expúes
);

1495 
now
 = 
	`vr_m£c_now
();

1500 i‡(
num
 && 
¶Ÿs
 > 
DICT_HT_INITIAL_SIZE
 &&

1501 (
num
*100/
¶Ÿs
 < 1)) ;

1505 
expúed
 = 0;

1506 
âl_sum
 = 0;

1507 
âl_ßm∂es
 = 0;

1509 i‡(
num
 > 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
)

1510 
num
 = 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
;

1512 
num
--) {

1513 
di˘E¡ry
 *
de
;

1514 
âl
;

1516 i‡((
de
 = 
	`di˘GëR™domKey
(
db
->
expúes
)Ë=
NULL
) ;

1517 
âl
 = 
	`di˘GëSig√dI¡egîVÆ
(
de
)-
now
;

1518 i‡(
	`a˘iveExpúeCy˛eTryExpúe
(
db
,
de
,
now
)Ë
expúed
++;

1519 i‡(
âl
 > 0) {

1521 
âl_sum
 +
âl
;

1522 
âl_ßm∂es
++;

1526 
expúed_tŸÆ
 +
expúed
;

1529 i‡(
âl_ßm∂es
) {

1530 
avg_âl
 = 
âl_sum
/
âl_ßm∂es
;

1535 i‡(
db
->
avg_âl
 == 0) db->avg_ttl =ávg_ttl;

1536 
db
->
avg_âl
 = (db->avg_ttl/50)*49 + (avg_ttl/50);

1542 
ôî©i⁄
++;

1543 i‡((
ôî©i⁄
 & 0xf) == 0) {

1544 
ñ≠£d
 = 
	`vr_u£c_now
()-
°¨t
;

1547 i‡(
ñ≠£d
 > 
timñimô
Ë
backíd
->
timñimô_exô
 = 1;

1549 i‡(
backíd
->
timñimô_exô
) {

1550 
	`u∆ockDb
(
db
);

1552 i‡(
expúed_tŸÆ
 > 0) {

1553 
	`upd©e_°©s_add
(
backíd
->
vñ
.
°©s
, 
expúedkeys
, 
expúed_tŸÆ
);

1559 } 
expúed
 > 
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
/4);

1560 
	`u∆ockDb
(
db
);

1563 i‡(
expúed_tŸÆ
 > 0) {

1564 
	`upd©e_°©s_add
(
backíd
->
vñ
.
°©s
, 
expúedkeys
, 
expúed_tŸÆ
);

1566 
	}
}

1568 
	$a˘iveExpúeCy˛eTryExpúe
(
ªdisDb
 *
db
, 
di˘E¡ry
 *
de
, 
now
) {

1569 
t
 = 
	`di˘GëSig√dI¡egîVÆ
(
de
);

1570 i‡(
now
 > 
t
) {

1571 
sds
 
key
 = 
	`di˘GëKey
(
de
);

1572 
robj
 *
keyobj
 = 
	`¸óãSåögObje˘
(
key
,
	`sd¶í
(key));

1573 
	`dbDñëe
(
db
,
keyobj
);

1574 
	`‰ìObje˘
(
keyobj
);

1579 
	}
}

1584 
	$d©aba£sCr⁄
(
vr_backíd
 *
backíd
) {

1587 i‡(
ª∂
.
ma°îho°
 =
NULL
)

1588 
	`a˘iveExpúeCy˛e
(
backíd
, 
ACTIVE_EXPIRE_CYCLE_SLOW
);

1593 i‡(
£rvî
.
rdb_chûd_pid
 =-1 && sîvî.
aof_chûd_pid
 == -1) {

1594 
dbs_≥r_ˇŒ
 = 
CRON_DBS_PER_CALL
;

1595 
j
;

1598 i‡(
dbs_≥r_ˇŒ
 > 
£rvî
.
dbnum
) dbs_per_call = server.dbnum;

1601 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1602 
	`åyResizeHashTabÀsF‹Db
(
backíd
->
ªsize_db
%
£rvî
.
dbnum
);

1603 
backíd
->
ªsize_db
++;

1607 i‡(
£rvî
.
a˘ivîehashög
) {

1608 
j
 = 0; j < 
dbs_≥r_ˇŒ
; j++) {

1609 
w‹k_d⁄e
 = 
	`ö¸emíèŒyRehashF‹Db
(
backíd
->
ªhash_db
%
£rvî
.
dbnum
);

1610 
backíd
->
ªhash_db
++;

1611 i‡(
w‹k_d⁄e
) {

1619 
	}
}

	@src/vr_db.h

1 #i‚de‡
_VR_DB_H_


2 
	#_VR_DB_H_


	)

11 
	#MAXMEMORY_EVICTION_POOL_SIZE
 16

	)

12 
	sevi˘i⁄PoﬁE¡ry
 {

13 
	midÀ
;

14 
sds
 
	mkey
;

20 
	sªdisDb
 {

21 
di˘
 *
	mdi˘
;

22 
di˘
 *
	mexpúes
;

23 
di˘
 *
	mblockög_keys
;

24 
di˘
 *
	mªady_keys
;

25 
di˘
 *
	mw©ched_keys
;

26 
evi˘i⁄PoﬁE¡ry
 *
	mevi˘i⁄_poﬁ
;

27 
	mid
;

28 
	mavg_âl
;

30 
±hªad_rwlock_t
 
	mrwl
;

31 } 
	tªdisDb
;

33 
di˘Ty≥
 
dbDi˘Ty≥
;

34 
di˘Ty≥
 
key±rDi˘Ty≥
;

35 
di˘Ty≥
 
keyli°Di˘Ty≥
;

37 
ªdisDbInô
(
ªdisDb
 *
db
);

38 
ªdisDbDeöô
(
ªdisDb
 *
db
);

40 
lockDbRód
(
ªdisDb
 *
db
);

41 
lockDbWrôe
(
ªdisDb
 *
db
);

42 
u∆ockDb
(
ªdisDb
 *
db
);

44 
robj
 *
lookupKey
(
ªdisDb
 *
db
,Ñobj *
key
);

45 
robj
 *
lookupKeyRód
(
ªdisDb
 *
db
,Ñobj *
key
);

46 
robj
 *
lookupKeyWrôe
(
ªdisDb
 *
db
,Ñobj *
key
, *
expúed
);

47 
robj
 *
lookupKeyRódOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
);

48 
robj
 *
lookupKeyWrôeOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
, *
expúed
);

49 
dbAdd
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
);

50 
dbOvîwrôe
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
);

51 
£tKey
(
ªdisDb
 *
db
, 
robj
 *
key
,Ñobj *
vÆ
, *
expúed
);

52 
dbExi°s
(
ªdisDb
 *
db
, 
robj
 *
key
);

53 
robj
 *
dbR™domKey
(
ªdisDb
 *
db
);

54 
dbDñëe
(
ªdisDb
 *
db
, 
robj
 *
key
);

55 
robj
 *
dbUnsh¨eSåögVÆue
(
ªdisDb
 *
db
,Ñobj *
key
,Ñobj *
o
);

56 
em±yDb
((
ˇŒback
)(*));

57 
	`£À˘Db
(
˛õ¡
 *
c
, 
id
);

58 
	`sig«lModifõdKey
(
ªdisDb
 *
db
, 
robj
 *
key
);

59 
	`sig«lFlushedDb
(
dbid
);

60 
	`ÊushdbComm™d
(
˛õ¡
 *
c
);

61 
	`ÊushÆlComm™d
(
˛õ¡
 *
c
);

62 
	`dñComm™d
(
˛õ¡
 *
c
);

63 
	`exi°sComm™d
(
˛õ¡
 *
c
);

64 
	`£À˘Comm™d
(
˛õ¡
 *
c
);

65 
	`øndomkeyComm™d
(
˛õ¡
 *
c
);

66 
	`keysComm™d
(
˛õ¡
 *
c
);

67 
	`sˇnCÆlback
(*
¥ivd©a
, c⁄° 
di˘E¡ry
 *
de
);

68 
	`∑r£SˇnCurs‹OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
curs‹
);

69 
	`sˇnGíîicComm™d
(
˛õ¡
 *
c
, 
sˇ¡y≥
);

70 
	`sˇnComm™d
(
˛õ¡
 *
c
);

71 
	`dbsizeComm™d
(
˛õ¡
 *
c
);

72 
	`œ°ßveComm™d
(
˛õ¡
 *
c
);

73 
	`ty≥Comm™d
(
˛õ¡
 *
c
);

74 
	`shutdownComm™d
(
˛õ¡
 *
c
);

75 
	`ª«meGíîicComm™d
(
˛õ¡
 *
c
, 
nx
);

76 
	`ª«meComm™d
(
˛õ¡
 *
c
);

77 
	`ª«míxComm™d
(
˛õ¡
 *
c
);

78 
	`moveComm™d
(
˛õ¡
 *
c
);

79 
	`ªmoveExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

80 
	`£tExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
, 
whí
);

81 
	`gëExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

82 
	`¥›ag©eExpúe
(
ªdisDb
 *
db
, 
robj
 *
key
);

83 
	`checkIfExpúed
(
ªdisDb
 *
db
, 
robj
 *
key
);

84 
	`expúeIfNìded
(
ªdisDb
 *
db
, 
robj
 *
key
);

85 
	`expúeGíîicComm™d
(
˛õ¡
 *
c
, 
ba£time
, 
unô
);

86 
	`expúeComm™d
(
˛õ¡
 *
c
);

87 
	`expúótComm™d
(
˛õ¡
 *
c
);

88 
	`≥xpúeComm™d
(
˛õ¡
 *
c
);

89 
	`≥xpúótComm™d
(
˛õ¡
 *
c
);

90 
	`âlGíîicComm™d
(
˛õ¡
 *
c
, 
ouçut_ms
);

91 
	`âlComm™d
(
˛õ¡
 *
c
);

92 
	`±éComm™d
(
˛õ¡
 *
c
);

93 
	`≥rsi°Comm™d
(
˛õ¡
 *
c
);

94 *
	`gëKeysUsögComm™dTabÀ
(
ªdisComm™d
 *
cmd
,
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

95 *
	`gëKeysFromComm™d
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

96 
	`gëKeysFªeResu…
(*
ªsu…
);

97 *
	`zuni⁄I¡îGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

98 *
	`evÆGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

99 *
	`s‹tGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

100 *
	`migøãGëKeys
(
ªdisComm™d
 *
cmd
, 
robj
 **
¨gv
, 
¨gc
, *
numkeys
);

102 
	`„tchI¡î«lDbByKey
(
˛õ¡
 *
c
, 
robj
 *
key
);

103 
	`„tchI¡î«lDbById
(
˛õ¡
 *
c
, 
idx
);

105 
	`åyResizeHashTabÀsF‹Db
(
dbid
);

106 
	`ö¸emíèŒyRehashF‹Db
(
dbid
);

107 
	`a˘iveExpúeCy˛e
(
vr_backíd
 *
backíd
, 
ty≥
);

108 
	`a˘iveExpúeCy˛eTryExpúe
(
ªdisDb
 *
db
, 
di˘E¡ry
 *
de
, 
now
);

109 
	`d©aba£sCr⁄
(
vr_backíd
 *
backíd
);

	@src/vr_dict.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

5 
	~<limôs.h
>

6 
	~<sys/time.h
>

7 
	~<˘y≥.h
>

9 
	~<vr_c‹e.h
>

19 
	gdi˘_ˇn_ªsize
 = 1;

20 
	gdi˘_f‹˚_ªsize_øtio
 = 5;

24 
_di˘Ex∑ndIfNìded
(
di˘
 *
ht
);

25 
_di˘NextPowî
(
size
);

26 
_di˘KeyIndex
(
di˘
 *
ht
, c⁄° *
key
);

27 
_di˘Inô
(
di˘
 *
ht
, 
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

32 
	$di˘I¡HashFun˘i⁄
(
key
)

34 
key
 += ~(key << 15);

35 
key
 ^= (key >> 10);

36 
key
 += (key << 3);

37 
key
 ^= (key >> 6);

38 
key
 += ~(key << 11);

39 
key
 ^= (key >> 16);

40  
key
;

41 
	}
}

43 
uöt32_t
 
	gdi˘_hash_fun˘i⁄_£ed
 = 5381;

45 
	$di˘SëHashFun˘i⁄Sìd
(
uöt32_t
 
£ed
) {

46 
di˘_hash_fun˘i⁄_£ed
 = 
£ed
;

47 
	}
}

49 
uöt32_t
 
	$di˘GëHashFun˘i⁄Sìd
() {

50  
di˘_hash_fun˘i⁄_£ed
;

51 
	}
}

64 
	$di˘GíHashFun˘i⁄
(c⁄° *
key
, 
Àn
) {

67 
uöt32_t
 
£ed
 = 
di˘_hash_fun˘i⁄_£ed
;

68 c⁄° 
uöt32_t
 
m
 = 0x5bd1e995;

69 c⁄° 
r
 = 24;

72 
uöt32_t
 
h
 = 
£ed
 ^ 
Àn
;

75 c⁄° *
d©a
 = (c⁄° *)
key
;

77 
Àn
 >= 4) {

78 
uöt32_t
 
k
 = *(uöt32_t*)
d©a
;

80 
k
 *
m
;

81 
k
 ^k >> 
r
;

82 
k
 *
m
;

84 
h
 *
m
;

85 
h
 ^
k
;

87 
d©a
 += 4;

88 
Àn
 -= 4;

92 
Àn
) {

93 3: 
h
 ^
d©a
[2] << 16;

94 2: 
h
 ^
d©a
[1] << 8;

95 1: 
h
 ^
d©a
[0]; h *
m
;

100 
h
 ^= h >> 13;

101 
h
 *
m
;

102 
h
 ^= h >> 15;

104  ()
h
;

105 
	}
}

108 
	$di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
) {

109 
hash
 = ()
di˘_hash_fun˘i⁄_£ed
;

111 
Àn
--)

112 
hash
 = ((hash << 5Ë+ hashË+ (
	`tﬁowî
(*
buf
++));

113  
hash
;

114 
	}
}

120 
	$_di˘Re£t
(
di˘ht
 *
ht
)

122 
ht
->
èbÀ
 = 
NULL
;

123 
ht
->
size
 = 0;

124 
ht
->
sizemask
 = 0;

125 
ht
->
u£d
 = 0;

126 
	}
}

129 
di˘
 *
	$di˘Cª©e
(
di˘Ty≥
 *
ty≥
,

130 *
¥ivD©aPå
)

132 
di˘
 *
d
 = 
	`dÆloc
((*d));

134 
	`_di˘Inô
(
d
,
ty≥
,
¥ivD©aPå
);

135  
d
;

136 
	}
}

139 
	$_di˘Inô
(
di˘
 *
d
, 
di˘Ty≥
 *
ty≥
,

140 *
¥ivD©aPå
)

142 
	`_di˘Re£t
(&
d
->
ht
[0]);

143 
	`_di˘Re£t
(&
d
->
ht
[1]);

144 
d
->
ty≥
 =Åype;

145 
d
->
¥ivd©a
 = 
¥ivD©aPå
;

146 
d
->
ªhashidx
 = -1;

147 
d
->
ôî©‹s
 = 0;

148  
DICT_OK
;

149 
	}
}

153 
	$di˘Resize
(
di˘
 *
d
)

155 
möimÆ
;

157 i‡(!
di˘_ˇn_ªsize
 || 
	`di˘IsRehashög
(
d
)Ë 
DICT_ERR
;

158 
möimÆ
 = 
d
->
ht
[0].
u£d
;

159 i‡(
möimÆ
 < 
DICT_HT_INITIAL_SIZE
)

160 
möimÆ
 = 
DICT_HT_INITIAL_SIZE
;

161  
	`di˘Ex∑nd
(
d
, 
möimÆ
);

162 
	}
}

165 
	$di˘Ex∑nd
(
di˘
 *
d
, 
size
)

167 
di˘ht
 
n
;

168 
ªÆsize
 = 
	`_di˘NextPowî
(
size
);

172 i‡(
	`di˘IsRehashög
(
d
Ë|| d->
ht
[0].
u£d
 > 
size
)

173  
DICT_ERR
;

176 i‡(
ªÆsize
 =
d
->
ht
[0].
size
Ë 
DICT_ERR
;

179 
n
.
size
 = 
ªÆsize
;

180 
n
.
sizemask
 = 
ªÆsize
-1;

181 
n
.
èbÀ
 = 
	`dˇŒoc
(
ªÆsize
, (
di˘E¡ry
*));

182 
n
.
u£d
 = 0;

186 i‡(
d
->
ht
[0].
èbÀ
 =
NULL
) {

187 
d
->
ht
[0] = 
n
;

188  
DICT_OK
;

192 
d
->
ht
[1] = 
n
;

193 
d
->
ªhashidx
 = 0;

194  
DICT_OK
;

195 
	}
}

206 
	$di˘Rehash
(
di˘
 *
d
, 
n
) {

207 
em±y_visôs
 = 
n
*10;

208 i‡(!
	`di˘IsRehashög
(
d
))  0;

210 
n
-- && 
d
->
ht
[0].
u£d
 != 0) {

211 
di˘E¡ry
 *
de
, *
√xtde
;

215 
	`ASSERT
(
d
->
ht
[0].
size
 > ()d->
ªhashidx
);

216 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] =
NULL
) {

217 
d
->
ªhashidx
++;

218 i‡(--
em±y_visôs
 == 0)  1;

220 
de
 = 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
];

222 
de
) {

223 
h
;

225 
√xtde
 = 
de
->
√xt
;

227 
h
 = 
	`di˘HashKey
(
d
, 
de
->
key
Ë& d->
ht
[1].
sizemask
;

228 
de
->
√xt
 = 
d
->
ht
[1].
èbÀ
[
h
];

229 
d
->
ht
[1].
èbÀ
[
h
] = 
de
;

230 
d
->
ht
[0].
u£d
--;

231 
d
->
ht
[1].
u£d
++;

232 
de
 = 
√xtde
;

234 
d
->
ht
[0].
èbÀ
[d->
ªhashidx
] = 
NULL
;

235 
d
->
ªhashidx
++;

239 i‡(
d
->
ht
[0].
u£d
 == 0) {

240 
	`d‰ì
(
d
->
ht
[0].
èbÀ
);

241 
d
->
ht
[0] = d->ht[1];

242 
	`_di˘Re£t
(&
d
->
ht
[1]);

243 
d
->
ªhashidx
 = -1;

249 
	}
}

251 
	$timeInMûli£c⁄ds
() {

252 
timevÆ
 
tv
;

254 
	`gëtimeofday
(&
tv
,
NULL
);

255  ((()
tv
.
tv_£c
)*1000)+—v.
tv_u£c
/1000);

256 
	}
}

259 
	$di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
) {

260 
°¨t
 = 
	`timeInMûli£c⁄ds
();

261 
ªhashes
 = 0;

263 
	`di˘Rehash
(
d
,100)) {

264 
ªhashes
 += 100;

265 i‡(
	`timeInMûli£c⁄ds
()-
°¨t
 > 
ms
) ;

267  
ªhashes
;

268 
	}
}

278 
	$_di˘RehashSãp
(
di˘
 *
d
) {

279 i‡(
d
->
ôî©‹s
 =0Ë
	`di˘Rehash
(d,1);

280 
	}
}

283 
	$di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
)

285 
di˘E¡ry
 *
íåy
 = 
	`di˘AddRaw
(
d
,
key
);

287 i‡(!
íåy
Ë 
DICT_ERR
;

288 
	`di˘SëVÆ
(
d
, 
íåy
, 
vÆ
);

289  
DICT_OK
;

290 
	}
}

307 
di˘E¡ry
 *
	$di˘AddRaw
(
di˘
 *
d
, *
key
)

309 
ödex
;

310 
di˘E¡ry
 *
íåy
;

311 
di˘ht
 *
ht
;

313 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

317 i‡((
ödex
 = 
	`_di˘KeyIndex
(
d
, 
key
)) == -1)

318  
NULL
;

324 
ht
 = 
	`di˘IsRehashög
(
d
) ? &d->ht[1] : &d->ht[0];

325 
íåy
 = 
	`dÆloc
((*entry));

326 
íåy
->
√xt
 = 
ht
->
èbÀ
[
ödex
];

327 
ht
->
èbÀ
[
ödex
] = 
íåy
;

328 
ht
->
u£d
++;

331 
	`di˘SëKey
(
d
, 
íåy
, 
key
);

332  
íåy
;

333 
	}
}

339 
	$di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
)

341 
di˘E¡ry
 *
íåy
, 
auxíåy
;

345 i‡(
	`di˘Add
(
d
, 
key
, 
vÆ
Ë=
DICT_OK
)

348 
íåy
 = 
	`di˘Föd
(
d
, 
key
);

354 
auxíåy
 = *
íåy
;

355 
	`di˘SëVÆ
(
d
, 
íåy
, 
vÆ
);

356 
	`di˘FªeVÆ
(
d
, &
auxíåy
);

358 
	}
}

366 
di˘E¡ry
 *
	$di˘Rïœ˚Raw
(
di˘
 *
d
, *
key
) {

367 
di˘E¡ry
 *
íåy
 = 
	`di˘Föd
(
d
,
key
);

369  
íåy
 ?É¡ry : 
	`di˘AddRaw
(
d
,
key
);

370 
	}
}

373 
	$di˘GíîicDñëe
(
di˘
 *
d
, c⁄° *
key
, 
no‰ì
)

375 
h
, 
idx
;

376 
di˘E¡ry
 *
he
, *
¥evHe
;

377 
èbÀ
;

379 i‡(
d
->
ht
[0].
size
 =0Ë 
DICT_ERR
;

380 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

381 
h
 = 
	`di˘HashKey
(
d
, 
key
);

383 
èbÀ
 = 0;Åable <= 1;Åable++) {

384 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

385 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

386 
¥evHe
 = 
NULL
;

387 
he
) {

388 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key)) {

390 i‡(
¥evHe
)

391 
¥evHe
->
√xt
 = 
he
->next;

393 
d
->
ht
[
èbÀ
].èbÀ[
idx
] = 
he
->
√xt
;

394 i‡(!
no‰ì
) {

395 
	`di˘FªeKey
(
d
, 
he
);

396 
	`di˘FªeVÆ
(
d
, 
he
);

398 
	`d‰ì
(
he
);

399 
d
->
ht
[
èbÀ
].
u£d
--;

400  
DICT_OK
;

402 
¥evHe
 = 
he
;

403 
he
 = he->
√xt
;

405 i‡(!
	`di˘IsRehashög
(
d
)) ;

407  
DICT_ERR
;

408 
	}
}

410 
	$di˘Dñëe
(
di˘
 *
ht
, c⁄° *
key
) {

411  
	`di˘GíîicDñëe
(
ht
,
key
,0);

412 
	}
}

414 
	$di˘DñëeNoFªe
(
di˘
 *
ht
, c⁄° *
key
) {

415  
	`di˘GíîicDñëe
(
ht
,
key
,1);

416 
	}
}

419 
_di˘CÀ¨
(
di˘
 *
d
, 
di˘ht
 *
ht
, (
ˇŒback
)(*)) {

420 
i
;

423 
i
 = 0; i < 
ht
->
size
 && ht->
u£d
 > 0; i++) {

424 
di˘E¡ry
 *
he
, *
√xtHe
;

426 i‡(
ˇŒback
 && (
i
 & 65535Ë=0Ë
	`ˇŒback
(
d
->
¥ivd©a
);

428 i‡((
he
 = 
ht
->
èbÀ
[
i
]Ë=
NULL
) ;

429 
he
) {

430 
√xtHe
 = 
he
->
√xt
;

431 
	`di˘FªeKey
(
d
, 
he
);

432 
	`di˘FªeVÆ
(
d
, 
he
);

433 
	`d‰ì
(
he
);

434 
ht
->
u£d
--;

435 
he
 = 
√xtHe
;

439 if(
ht
->
èbÀ
Ë
	`d‰ì
(ht->table);

441 
	`_di˘Re£t
(
ht
);

442  
DICT_OK
;

443 
	}
}

446 
	$di˘Rñó£
(
di˘
 *
d
)

448 
	`_di˘CÀ¨
(
d
,&d->
ht
[0],
NULL
);

449 
	`_di˘CÀ¨
(
d
,&d->
ht
[1],
NULL
);

450 
	`d‰ì
(
d
);

451 
	}
}

453 
di˘E¡ry
 *
	$di˘Föd
(
di˘
 *
d
, c⁄° *
key
)

455 
di˘E¡ry
 *
he
;

456 
h
, 
idx
, 
èbÀ
;

458 i‡(
d
->
ht
[0].
u£d
 + d->ht[1].u£d =0Ë 
NULL
;

460 
h
 = 
	`di˘HashKey
(
d
, 
key
);

461 
èbÀ
 = 0;Åable <= 1;Åable++) {

462 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

463 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

464 
he
) {

465 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key))

466  
he
;

467 
he
 = he->
√xt
;

469 i‡(!
	`di˘IsRehashög
(
d
)Ë 
NULL
;

471  
NULL
;

472 
	}
}

474 *
	$di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
) {

475 
di˘E¡ry
 *
he
;

477 
he
 = 
	`di˘Föd
(
d
,
key
);

478  
he
 ? 
	`di˘GëVÆ
(heË: 
NULL
;

479 
	}
}

487 
	$di˘Fögî¥öt
(
di˘
 *
d
) {

488 
öãgîs
[6], 
hash
 = 0;

489 
j
;

491 
öãgîs
[0] = (Ë
d
->
ht
[0].
èbÀ
;

492 
öãgîs
[1] = 
d
->
ht
[0].
size
;

493 
öãgîs
[2] = 
d
->
ht
[0].
u£d
;

494 
öãgîs
[3] = (Ë
d
->
ht
[1].
èbÀ
;

495 
öãgîs
[4] = 
d
->
ht
[1].
size
;

496 
öãgîs
[5] = 
d
->
ht
[1].
u£d
;

505 
j
 = 0; j < 6; j++) {

506 
hash
 +
öãgîs
[
j
];

508 
hash
 = (~hash) + (hash << 21);

509 
hash
 = hash ^ (hash >> 24);

510 
hash
 = (hash + (hash << 3)) + (hash << 8);

511 
hash
 = hash ^ (hash >> 14);

512 
hash
 = (hash + (hash << 2)) + (hash << 4);

513 
hash
 = hash ^ (hash >> 28);

514 
hash
 = hash + (hash << 31);

516  
hash
;

517 
	}
}

519 
di˘Iãøt‹
 *
	$di˘GëIãøt‹
(
di˘
 *
d
)

521 
di˘Iãøt‹
 *
ôî
 = 
	`dÆloc
((*iter));

523 
ôî
->
d
 = d;

524 
ôî
->
èbÀ
 = 0;

525 
ôî
->
ödex
 = -1;

526 
ôî
->
ß„
 = 0;

527 
ôî
->
íåy
 = 
NULL
;

528 
ôî
->
√xtE¡ry
 = 
NULL
;

529  
ôî
;

530 
	}
}

532 
di˘Iãøt‹
 *
	$di˘GëSa„Iãøt‹
(
di˘
 *
d
) {

533 
di˘Iãøt‹
 *
i
 = 
	`di˘GëIãøt‹
(
d
);

535 
i
->
ß„
 = 1;

536  
i
;

537 
	}
}

539 
di˘E¡ry
 *
	$di˘Next
(
di˘Iãøt‹
 *
ôî
)

542 i‡(
ôî
->
íåy
 =
NULL
) {

543 
di˘ht
 *
ht
 = &
ôî
->
d
->ht[ôî->
èbÀ
];

544 i‡(
ôî
->
ödex
 =-1 && iãr->
èbÀ
 == 0) {

545 i‡(
ôî
->
ß„
)

546 
ôî
->
d
->
ôî©‹s
++;

548 
ôî
->
fögî¥öt
 = 
	`di˘Fögî¥öt
(ôî->
d
);

550 
ôî
->
ödex
++;

551 i‡(
ôî
->
ödex
 >(Ë
ht
->
size
) {

552 i‡(
	`di˘IsRehashög
(
ôî
->
d
Ë&& iãr->
èbÀ
 == 0) {

553 
ôî
->
èbÀ
++;

554 
ôî
->
ödex
 = 0;

555 
ht
 = &
ôî
->
d
->ht[1];

560 
ôî
->
íåy
 = 
ht
->
èbÀ
[ôî->
ödex
];

562 
ôî
->
íåy
 = iãr->
√xtE¡ry
;

564 i‡(
ôî
->
íåy
) {

567 
ôî
->
√xtE¡ry
 = iãr->
íåy
->
√xt
;

568  
ôî
->
íåy
;

571  
NULL
;

572 
	}
}

574 
	$di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
)

576 i‡(!(
ôî
->
ödex
 =-1 && iãr->
èbÀ
 == 0)) {

577 i‡(
ôî
->
ß„
) {

578 
ôî
->
d
->
ôî©‹s
--;

580 
hv
 = 
	`di˘Fögî¥öt
(
ôî
->
d
);

581 
	`ASSERT
(
ôî
->
fögî¥öt
 =
hv
);

584 
	`d‰ì
(
ôî
);

585 
	}
}

589 
di˘E¡ry
 *
	$di˘GëR™domKey
(
di˘
 *
d
)

591 
di˘E¡ry
 *
he
, *
‹ighe
;

592 
h
;

593 
li°Àn
, 
li°ñe
;

595 i‡(
	`di˘Size
(
d
Ë=0Ë 
NULL
;

596 i‡(
	`di˘IsRehashög
(
d
)Ë
	`_di˘RehashSãp
(d);

597 i‡(
	`di˘IsRehashög
(
d
)) {

601 
h
 = 
d
->
ªhashidx
 + (
	`øndom
(Ë% (d->
ht
[0].
size
 +

602 
d
->
ht
[1].
size
 -

603 
d
->
ªhashidx
));

604 
he
 = (
h
 >
d
->
ht
[0].
size
Ë? d->ht[1].
èbÀ
[h - d->ht[0].size] :

605 
d
->
ht
[0].
èbÀ
[
h
];

606 } 
he
 =
NULL
);

609 
h
 = 
	`øndom
(Ë& 
d
->
ht
[0].
sizemask
;

610 
he
 = 
d
->
ht
[0].
èbÀ
[
h
];

611 } 
he
 =
NULL
);

618 
li°Àn
 = 0;

619 
‹ighe
 = 
he
;

620 
he
) {

621 
he
 = he->
√xt
;

622 
li°Àn
++;

624 
li°ñe
 = 
	`øndom
(Ë% 
li°Àn
;

625 
he
 = 
‹ighe
;

626 
li°ñe
--Ë
he
 = he->
√xt
;

627  
he
;

628 
	}
}

652 
	$di˘GëSomeKeys
(
di˘
 *
d
, 
di˘E¡ry
 **
des
, 
cou¡
) {

653 
j
;

654 
èbÀs
;

655 
°‹ed
 = 0, 
maxsizemask
;

656 
max°ïs
;

658 i‡(
	`di˘Size
(
d
Ë< 
cou¡
) count = dictSize(d);

659 
max°ïs
 = 
cou¡
*10;

662 
j
 = 0; j < 
cou¡
; j++) {

663 i‡(
	`di˘IsRehashög
(
d
))

664 
	`_di˘RehashSãp
(
d
);

669 
èbÀs
 = 
	`di˘IsRehashög
(
d
) ? 2 : 1;

670 
maxsizemask
 = 
d
->
ht
[0].
sizemask
;

671 i‡(
èbÀs
 > 1 && 
maxsizemask
 < 
d
->
ht
[1].
sizemask
)

672 
maxsizemask
 = 
d
->
ht
[1].
sizemask
;

675 
i
 = 
	`øndom
(Ë& 
maxsizemask
;

676 
em±yÀn
 = 0;

677 
°‹ed
 < 
cou¡
 && 
max°ïs
--) {

678 
j
 = 0; j < 
èbÀs
; j++) {

682 i‡(
èbÀs
 =2 && 
j
 =0 && 
i
 < (Ë
d
->
ªhashidx
) {

687 i‡(
i
 >
d
->
ht
[1].
size
Ëòd->
ªhashidx
;

690 i‡(
i
 >
d
->
ht
[
j
].
size
) ;

691 
di˘E¡ry
 *
he
 = 
d
->
ht
[
j
].
èbÀ
[
i
];

695 i‡(
he
 =
NULL
) {

696 
em±yÀn
++;

697 i‡(
em±yÀn
 >5 &&Ém±yÀ¿> 
cou¡
) {

698 
i
 = 
	`øndom
(Ë& 
maxsizemask
;

699 
em±yÀn
 = 0;

702 
em±yÀn
 = 0;

703 
he
) {

706 *
des
 = 
he
;

707 
des
++;

708 
he
 = he->
√xt
;

709 
°‹ed
++;

710 i‡(
°‹ed
 =
cou¡
)  stored;

714 
i
 = (i+1Ë& 
maxsizemask
;

716  
°‹ed
;

717 
	}
}

721 
	$ªv
(
v
) {

722 
s
 = 8 * (
v
);

723 
mask
 = ~0;

724 (
s
 >>= 1) > 0) {

725 
mask
 ^(mask << 
s
);

726 
v
 = ((v >> 
s
Ë& 
mask
) | ((v << s) & ~mask);

728  
v
;

729 
	}
}

815 
	$di˘Sˇn
(
di˘
 *
d
,

816 
v
,

817 
di˘SˇnFun˘i⁄
 *
‚
,

818 *
¥ivd©a
)

820 
di˘ht
 *
t0
, *
t1
;

821 c⁄° 
di˘E¡ry
 *
de
;

822 
m0
, 
m1
;

824 i‡(
	`di˘Size
(
d
) == 0)  0;

826 i‡(!
	`di˘IsRehashög
(
d
)) {

827 
t0
 = &(
d
->
ht
[0]);

828 
m0
 = 
t0
->
sizemask
;

831 
de
 = 
t0
->
èbÀ
[
v
 & 
m0
];

832 
de
) {

833 
	`‚
(
¥ivd©a
, 
de
);

834 
de
 = de->
√xt
;

838 
t0
 = &
d
->
ht
[0];

839 
t1
 = &
d
->
ht
[1];

842 i‡(
t0
->
size
 > 
t1
->size) {

843 
t0
 = &
d
->
ht
[1];

844 
t1
 = &
d
->
ht
[0];

847 
m0
 = 
t0
->
sizemask
;

848 
m1
 = 
t1
->
sizemask
;

851 
de
 = 
t0
->
èbÀ
[
v
 & 
m0
];

852 
de
) {

853 
	`‚
(
¥ivd©a
, 
de
);

854 
de
 = de->
√xt
;

861 
de
 = 
t1
->
èbÀ
[
v
 & 
m1
];

862 
de
) {

863 
	`‚
(
¥ivd©a
, 
de
);

864 
de
 = de->
√xt
;

868 
v
 = (((v | 
m0
) + 1) & ~m0) | (v & m0);

871 } 
v
 & (
m0
 ^ 
m1
));

876 
v
 |~
m0
;

879 
v
 = 
	`ªv
(v);

880 
v
++;

881 
v
 = 
	`ªv
(v);

883  
v
;

884 
	}
}

889 
	$_di˘Ex∑ndIfNìded
(
di˘
 *
d
)

892 i‡(
	`di˘IsRehashög
(
d
)Ë 
DICT_OK
;

895 i‡(
d
->
ht
[0].
size
 =0Ë 
	`di˘Ex∑nd
(d, 
DICT_HT_INITIAL_SIZE
);

901 i‡(
d
->
ht
[0].
u£d
 >d->ht[0].
size
 &&

902 (
di˘_ˇn_ªsize
 ||

903 
d
->
ht
[0].
u£d
/d->ht[0].
size
 > 
di˘_f‹˚_ªsize_øtio
))

905  
	`di˘Ex∑nd
(
d
, d->
ht
[0].
u£d
*2);

907  
DICT_OK
;

908 
	}
}

911 
	$_di˘NextPowî
(
size
)

913 
i
 = 
DICT_HT_INITIAL_SIZE
;

915 i‡(
size
 >
LONG_MAX
)  LONG_MAX;

917 i‡(
i
 >
size
)

918  
i
;

919 
i
 *= 2;

921 
	}
}

929 
	$_di˘KeyIndex
(
di˘
 *
d
, c⁄° *
key
)

931 
h
, 
idx
, 
èbÀ
;

932 
di˘E¡ry
 *
he
;

935 i‡(
	`_di˘Ex∑ndIfNìded
(
d
Ë=
DICT_ERR
)

938 
h
 = 
	`di˘HashKey
(
d
, 
key
);

939 
èbÀ
 = 0;Åable <= 1;Åable++) {

940 
idx
 = 
h
 & 
d
->
ht
[
èbÀ
].
sizemask
;

942 
he
 = 
d
->
ht
[
èbÀ
].èbÀ[
idx
];

943 
he
) {

944 i‡(
key
==
he
->key || 
	`di˘Com∑ªKeys
(
d
, key, he->key))

946 
he
 = he->
√xt
;

948 i‡(!
	`di˘IsRehashög
(
d
)) ;

950  
idx
;

951 
	}
}

953 
di˘Em±y
(
di˘
 *
d
, (
ˇŒback
)(*)) {

954 
	`_di˘CÀ¨
(
d
,&d->
ht
[0],
ˇŒback
);

955 
	`_di˘CÀ¨
(
d
,&d->
ht
[1],
ˇŒback
);

956 
d
->
ªhashidx
 = -1;

957 
d
->
ôî©‹s
 = 0;

958 
	}
}

960 
	$di˘E«bÀResize
() {

961 
di˘_ˇn_ªsize
 = 1;

962 
	}
}

964 
	$di˘DißbÀResize
() {

965 
di˘_ˇn_ªsize
 = 0;

966 
	}
}

970 
	#DICT_STATS_VECTLEN
 50

	)

971 
size_t
 
	$_di˘GëSètsHt
(*
buf
, 
size_t
 
bufsize
, 
di˘ht
 *
ht
, 
èbÀid
) {

972 
i
, 
¶Ÿs
 = 0, 
chaöÀn
, 
maxchaöÀn
 = 0;

973 
tŸchaöÀn
 = 0;

974 
˛ve˘‹
[
DICT_STATS_VECTLEN
];

975 
size_t
 
l
 = 0;

977 i‡(
ht
->
u£d
 == 0) {

978  
	`¢¥ötf
(
buf
,
bufsize
,

983 
i
 = 0; i < 
DICT_STATS_VECTLEN
; i++Ë
˛ve˘‹
[i] = 0;

984 
i
 = 0; i < 
ht
->
size
; i++) {

985 
di˘E¡ry
 *
he
;

987 i‡(
ht
->
èbÀ
[
i
] =
NULL
) {

988 
˛ve˘‹
[0]++;

991 
¶Ÿs
++;

993 
chaöÀn
 = 0;

994 
he
 = 
ht
->
èbÀ
[
i
];

995 
he
) {

996 
chaöÀn
++;

997 
he
 = he->
√xt
;

999 
˛ve˘‹
[(
chaöÀn
 < 
DICT_STATS_VECTLEN
) ? chainlen : (DICT_STATS_VECTLEN-1)]++;

1000 i‡(
chaöÀn
 > 
maxchaöÀn
) maxchainlen = chainlen;

1001 
tŸchaöÀn
 +
chaöÀn
;

1005 
l
 +
	`¢¥ötf
(
buf
+l,
bufsize
-l,

1014 
èbÀid
, (tableid == 0) ? "main hashÅable" : "rehashingÅarget",

1015 
ht
->
size
, ht->
u£d
, 
¶Ÿs
, 
maxchaöÀn
,

1016 ()
tŸchaöÀn
/
¶Ÿs
, ()
ht
->
u£d
/slots);

1018 
i
 = 0; i < 
DICT_STATS_VECTLEN
-1; i++) {

1019 i‡(
˛ve˘‹
[
i
] == 0) ;

1020 i‡(
l
 >
bufsize
) ;

1021 
l
 +
	`¢¥ötf
(
buf
+l,
bufsize
-l,

1023 (
i
 =
DICT_STATS_VECTLEN
-1)?">= ":"",

1024 
i
, 
˛ve˘‹
[i], (()˛ve˘‹[i]/
ht
->
size
)*100);

1028 i‡(
bufsize
Ë
buf
[bufsize-1] = '\0';

1029  
	`°æí
(
buf
);

1030 
	}
}

1032 
	$di˘GëSèts
(*
buf
, 
size_t
 
bufsize
, 
di˘
 *
d
) {

1033 
size_t
 
l
;

1034 *
‹ig_buf
 = 
buf
;

1035 
size_t
 
‹ig_bufsize
 = 
bufsize
;

1037 
l
 = 
	`_di˘GëSètsHt
(
buf
,
bufsize
,&
d
->
ht
[0],0);

1038 
buf
 +
l
;

1039 
bufsize
 -
l
;

1040 i‡(
	`di˘IsRehashög
(
d
Ë&& 
bufsize
 > 0) {

1041 
	`_di˘GëSètsHt
(
buf
,
bufsize
,&
d
->
ht
[1],1);

1044 i‡(
‹ig_bufsize
Ë
‹ig_buf
[orig_bufsize-1] = '\0';

1045 
	}
}

	@src/vr_dict.h

1 #i‚de‡
_VR_DICT_H_


2 
	#_VR_DICT_H_


	)

4 
	~<°döt.h
>

6 
	#DICT_OK
 0

	)

7 
	#DICT_ERR
 1

	)

10 
	#DICT_NOTUSED
(
V
Ë((ËV)

	)

12 
	sdi˘E¡ry
 {

13 *
	mkey
;

15 *
	mvÆ
;

16 
uöt64_t
 
	mu64
;

17 
öt64_t
 
	ms64
;

18 
	md
;

19 } 
	mv
;

20 
di˘E¡ry
 *
	m√xt
;

21 } 
	tdi˘E¡ry
;

23 
	sdi˘Ty≥
 {

24 (*
	mhashFun˘i⁄
)(c⁄° *
	mkey
);

25 *(*
	mkeyDup
)(*
	m¥ivd©a
, c⁄° *
	mkey
);

26 *(*
	mvÆDup
)(*
	m¥ivd©a
, c⁄° *
	mobj
);

27 (*
	mkeyCom∑ª
)(*
	m¥ivd©a
, c⁄° *
	mkey1
, c⁄° *
	mkey2
);

28 (*
	mkeyDe°ru˘‹
)(*
	m¥ivd©a
, *
	mkey
);

29 (*
	mvÆDe°ru˘‹
)(*
	m¥ivd©a
, *
	mobj
);

30 } 
	tdi˘Ty≥
;

34 
	sdi˘ht
 {

35 
di˘E¡ry
 **
	mèbÀ
;

36 
	msize
;

37 
	msizemask
;

38 
	mu£d
;

39 } 
	tdi˘ht
;

41 
	sdi˘
 {

42 
di˘Ty≥
 *
	mty≥
;

43 *
	m¥ivd©a
;

44 
di˘ht
 
	mht
[2];

45 
	mªhashidx
;

46 
	môî©‹s
;

47 } 
	tdi˘
;

53 
	sdi˘Iãøt‹
 {

54 
di˘
 *
	md
;

55 
	mödex
;

56 
	mèbÀ
, 
	mß„
;

57 
di˘E¡ry
 *
	míåy
, *
	m√xtE¡ry
;

59 
	mfögî¥öt
;

60 } 
	tdi˘Iãøt‹
;

62 (
	tdi˘SˇnFun˘i⁄
)(*
	t¥ivd©a
, c⁄° 
	tdi˘E¡ry
 *
	tde
);

65 
	#DICT_HT_INITIAL_SIZE
 4

	)

68 
	#di˘FªeVÆ
(
d
, 
íåy
) \

69 i‡((
d
)->
ty≥
->
vÆDe°ru˘‹
) \

70 (
d
)->
ty≥
->
	`vÆDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
v
.
vÆ
)

	)

72 
	#di˘SëVÆ
(
d
, 
íåy
, 
_vÆ_
) do { \

73 i‡((
d
)->
ty≥
->
vÆDup
) \

74 
íåy
->
v
.
vÆ
 = (
d
)->
ty≥
->
	`vÆDup
((d)->
¥ivd©a
, 
_vÆ_
); \

76 
íåy
->
v
.
vÆ
 = (
_vÆ_
); \

77 
	}
} 0)

	)

79 
	#di˘SëSig√dI¡egîVÆ
(
íåy
, 
_vÆ_
) \

80 dÿ{ 
íåy
->
v
.
s64
 = 
_vÆ_
; } 0)

	)

82 
	#di˘SëUnsig√dI¡egîVÆ
(
íåy
, 
_vÆ_
) \

83 dÿ{ 
íåy
->
v
.
u64
 = 
_vÆ_
; } 0)

	)

85 
	#di˘SëDoubÀVÆ
(
íåy
, 
_vÆ_
) \

86 dÿ{ 
íåy
->
v
.
d
 = 
_vÆ_
; } 0)

	)

88 
	#di˘FªeKey
(
d
, 
íåy
) \

89 i‡((
d
)->
ty≥
->
keyDe°ru˘‹
) \

90 (
d
)->
ty≥
->
	`keyDe°ru˘‹
((d)->
¥ivd©a
, (
íåy
)->
key
)

	)

92 
	#di˘SëKey
(
d
, 
íåy
, 
_key_
) do { \

93 i‡((
d
)->
ty≥
->
keyDup
) \

94 
íåy
->
key
 = (
d
)->
ty≥
->
	`keyDup
((d)->
¥ivd©a
, 
_key_
); \

96 
íåy
->
key
 = (
_key_
); \

97 } 0)

	)

99 
	#di˘Com∑ªKeys
(
d
, 
key1
, 
key2
) \

100 (((
d
)->
ty≥
->
keyCom∑ª
) ? \

101 (
d
)->
ty≥
->
	`keyCom∑ª
((d)->
¥ivd©a
, 
key1
, 
key2
) : \

102 (
key1
Ë=(
key2
))

	)

104 
	#di˘HashKey
(
d
, 
key
Ë(d)->
ty≥
->
	`hashFun˘i⁄
(key)

	)

105 
	#di˘GëKey
(
he
Ë((he)->
key
)

	)

106 
	#di˘GëVÆ
(
he
Ë((he)->
v
.
vÆ
)

	)

107 
	#di˘GëSig√dI¡egîVÆ
(
he
Ë((he)->
v
.
s64
)

	)

108 
	#di˘GëUnsig√dI¡egîVÆ
(
he
Ë((he)->
v
.
u64
)

	)

109 
	#di˘GëDoubÀVÆ
(
he
Ë((he)->
v
.
d
)

	)

110 
	#di˘SlŸs
(
d
Ë((d)->
ht
[0].
size
+(d)->ht[1].size)

	)

111 
	#di˘Size
(
d
Ë((d)->
ht
[0].
u£d
+(d)->ht[1].u£d)

	)

112 
	#di˘IsRehashög
(
d
Ë((d)->
ªhashidx
 !-1)

	)

115 
di˘
 *
di˘Cª©e
(
di˘Ty≥
 *
ty≥
, *
¥ivD©aPå
);

116 
di˘Ex∑nd
(
di˘
 *
d
, 
size
);

117 
di˘Add
(
di˘
 *
d
, *
key
, *
vÆ
);

118 
di˘E¡ry
 *
di˘AddRaw
(
di˘
 *
d
, *
key
);

119 
di˘Rïœ˚
(
di˘
 *
d
, *
key
, *
vÆ
);

120 
di˘E¡ry
 *
di˘Rïœ˚Raw
(
di˘
 *
d
, *
key
);

121 
di˘Dñëe
(
di˘
 *
d
, c⁄° *
key
);

122 
di˘DñëeNoFªe
(
di˘
 *
d
, c⁄° *
key
);

123 
di˘Rñó£
(
di˘
 *
d
);

124 
di˘E¡ry
 * 
di˘Föd
(
di˘
 *
d
, c⁄° *
key
);

125 *
di˘FëchVÆue
(
di˘
 *
d
, c⁄° *
key
);

126 
di˘Resize
(
di˘
 *
d
);

127 
di˘Iãøt‹
 *
di˘GëIãøt‹
(
di˘
 *
d
);

128 
di˘Iãøt‹
 *
di˘GëSa„Iãøt‹
(
di˘
 *
d
);

129 
di˘E¡ry
 *
di˘Next
(
di˘Iãøt‹
 *
ôî
);

130 
di˘Rñó£Iãøt‹
(
di˘Iãøt‹
 *
ôî
);

131 
di˘E¡ry
 *
di˘GëR™domKey
(
di˘
 *
d
);

132 
di˘GëSomeKeys
(
di˘
 *
d
, 
di˘E¡ry
 **
des
, 
cou¡
);

133 
di˘GëSèts
(*
buf
, 
size_t
 
bufsize
, 
di˘
 *
d
);

134 
di˘GíHashFun˘i⁄
(c⁄° *
key
, 
Àn
);

135 
di˘GíCa£HashFun˘i⁄
(c⁄° *
buf
, 
Àn
);

136 
di˘Em±y
(
di˘
 *
d
, (
ˇŒback
)(*));

137 
	`di˘E«bÀResize
();

138 
	`di˘DißbÀResize
();

139 
	`di˘Rehash
(
di˘
 *
d
, 
n
);

140 
	`di˘RehashMûli£c⁄ds
(
di˘
 *
d
, 
ms
);

141 
	`di˘SëHashFun˘i⁄Sìd
(
öôvÆ
);

142 
	`di˘GëHashFun˘i⁄Sìd
();

143 
	`di˘Sˇn
(
di˘
 *
d
, 
v
, 
di˘SˇnFun˘i⁄
 *
‚
, *
¥ivd©a
);

146 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKey
;

147 
di˘Ty≥
 
di˘Ty≥HópSåögs
;

148 
di˘Ty≥
 
di˘Ty≥HópSåögC›yKeyVÆue
;

	@src/vr_eventloop.c

1 
	~<vr_c‹e.h
>

4 
	$vr_evíéo›_öô
(
vr_evíéo›
 *
vñ
, 
fûñimô
)

6 
r°©us_t
 
°©us
;

7 
max˛õ¡s
, 
thªads_num
;

9 i‡(
vñ
 =
NULL
 || 
fûñimô
 <= 0) {

10  
VR_ERROR
;

13 
	`vr_thªad_öô
(&
vñ
->
thªad
);

14 
vñ
->
ñ
 = 
NULL
;

15 
vñ
->
hz
 = 10;

16 
vñ
->
¸⁄lo›s
 = 0;

17 
vñ
->
unixtime
 = 
	`time
(
NULL
);

18 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

19 
vñ
->
Ãu˛ock
 = 
	`gëLRUClock
();

20 
vñ
->
cb
 = 
NULL
;

21 
vñ
->
√xt_˛õ¡_id
 = 1;

22 
vñ
->
cuºít_˛õ¡
 = 
NULL
;

23 
vñ
->
˛õ¡s
 = 
NULL
;

24 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
NULL
;

25 
vñ
->
˛õ¡s_to_˛o£
 = 
NULL
;

26 
vñ
->
˛õ¡s_∑u£d
 = 0;

27 
vñ
->
˛õ¡s_∑u£_íd_time
 = 0;

28 
vñ
->
°©s
 = 
NULL
;

29 
vñ
->
ªsidít_£t_size
 = 0;

30 
vñ
->
dúty
 = 0;

31 
vñ
->
bp›_blocked_˛õ¡s
 = 0;

32 
vñ
->
unblocked_˛õ¡s
 = 
NULL
;

33 
vñ
->
˛õ¡s_waôög_acks
 = 
NULL
;

34 
vñ
->
pubsub_ch™√ls
 = 
NULL
;

35 
vñ
->
pubsub_∑âîns
 = 
NULL
;

36 
vñ
->
nŸify_key•a˚_evíts
 = 0;

37 
vñ
->
c°abÀ
 = 
NULL
;

39 
vñ
->
ñ
 = 
	`´Cª©eEvítLo›
(
fûñimô
);

40 i‡(
vñ
->
ñ
 =
NULL
) {

41 
	`log_îr‹
("createÉventloop failed.");

42  
VR_ERROR
;

45 
vñ
->
cb
 = 
	`dÆloc
((
c⁄n_ba£
));

46 i‡(
vñ
->
cb
 =
NULL
) {

47 
	`log_îr‹
("create conn_base failed: out of memory");

48  
VR_ENOMEM
;

50 
°©us
 = 
	`c⁄n_öô
(
vñ
->
cb
);

51 i‡(
°©us
 !
VR_OK
) {

52 
	`log_îr‹
("init conn_base failed");

53  
VR_ERROR
;

56 
vñ
->
˛õ¡s
 = 
	`dli°Cª©e
();

57 i‡(
vñ
->
˛õ¡s
 =
NULL
) {

58 
	`log_îr‹
("createÜist failed: out of memory");

59  
VR_ENOMEM
;

62 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
	`dli°Cª©e
();

63 i‡(
vñ
->
˛õ¡s_≥ndög_wrôe
 =
NULL
) {

64 
	`log_îr‹
("createÜist failed: out of memory");

65  
VR_ENOMEM
;

68 
vñ
->
˛õ¡s_to_˛o£
 = 
	`dli°Cª©e
();

69 i‡(
vñ
->
˛õ¡s_to_˛o£
 =
NULL
) {

70 
	`log_îr‹
("createÜist failed: out of memory");

71  
VR_ENOMEM
;

74 
vñ
->
unblocked_˛õ¡s
 = 
	`dli°Cª©e
();

75 i‡(
vñ
->
unblocked_˛õ¡s
 =
NULL
) {

76 
	`log_îr‹
("createÜist failed: out of memory");

77  
VR_ENOMEM
;

80 
vñ
->
°©s
 = 
	`dÆloc
((
vr_°©s
));

81 i‡(
vñ
->
°©s
 =
NULL
) {

82 
	`log_îr‹
("out of memory");

83  
VR_ENOMEM
;

86 
	`vr_°©s_öô
(
vñ
->
°©s
);

88 
	`c⁄f_ˇche_öô
(&
vñ
->
cc
);

90  
VR_OK
;

91 
	}
}

94 
	$vr_evíéo›_deöô
(
vr_evíéo›
 *
vñ
)

96 i‡(
vñ
 =
NULL
) {

100 
	`vr_thªad_deöô
(&
vñ
->
thªad
);

102 i‡(
vñ
->
ñ
 !
NULL
) {

103 
	`´DñëeEvítLo›
(
vñ
->
ñ
);

104 
vñ
->
ñ
 = 
NULL
;

107 i‡(
vñ
->
˛õ¡s
 !
NULL
) {

108 
˛õ¡
 *
c
;

109 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s
)) {

110 
	`‰ìClõ¡
(
c
);

112 
	`dli°Rñó£
(
vñ
->
˛õ¡s
);

113 
vñ
->
˛õ¡s
 = 
NULL
;

116 i‡(
vñ
->
˛õ¡s_≥ndög_wrôe
 !
NULL
) {

117 
˛õ¡
 *
c
;

118 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s_≥ndög_wrôe
)) {}

119 
	`dli°Rñó£
(
vñ
->
˛õ¡s_≥ndög_wrôe
);

120 
vñ
->
˛õ¡s_≥ndög_wrôe
 = 
NULL
;

123 i‡(
vñ
->
˛õ¡s_to_˛o£
 !
NULL
) {

124 
˛õ¡
 *
c
;

125 
c
 = 
	`dli°P›
(
vñ
->
˛õ¡s_to_˛o£
)) {

126 
	`‰ìClõ¡
(
c
);

128 
	`dli°Rñó£
(
vñ
->
˛õ¡s_to_˛o£
);

129 
vñ
->
˛õ¡s_to_˛o£
 = 
NULL
;

132 i‡(
vñ
->
unblocked_˛õ¡s
 !
NULL
) {

133 
˛õ¡
 *
c
;

134 
c
 = 
	`dli°P›
(
vñ
->
unblocked_˛õ¡s
)) {}

135 
	`dli°Rñó£
(
vñ
->
unblocked_˛õ¡s
);

136 
vñ
->
unblocked_˛õ¡s
 = 
NULL
;

139 i‡(
vñ
->
cb
 !
NULL
) {

140 
	`c⁄n_deöô
(
vñ
->
cb
);

141 
	`d‰ì
(
vñ
->
cb
);

142 
vñ
->
cb
 = 
NULL
;

145 i‡(
vñ
->
°©s
 !
NULL
) {

146 
	`vr_°©s_deöô
(
vñ
->
°©s
);

147 
	`d‰ì
(
vñ
->
°©s
);

148 
vñ
->
°©s
 = 
NULL
;

151 i‡(
vñ
->
c°abÀ
 !
NULL
) {

152 
	`comm™dSètsTabÀDe°roy
(
vñ
->
c°abÀ
);

153 
vñ
->
c°abÀ
 = 
NULL
;

156 
	`c⁄f_ˇche_deöô
(&
vñ
->
cc
);

157 
	}
}

	@src/vr_eventloop.h

1 #i‚de‡
_VR_EVENTLOOP_H_


2 
	#_VR_EVENTLOOP_H_


	)

4 
	svr_evíéo›
 {

5 
vr_thªad
 
	mthªad
;

7 
´EvítLo›
 *
	mñ
;

8 
	mhz
;

9 
	m¸⁄lo›s
;

12 
time_t
 
	munixtime
;

13 
	mm°ime
;

15 
	mÃu˛ock
:
LRU_BITS
;

17 
c⁄n_ba£
 *
	mcb
;

19 
uöt64_t
 
	m√xt_˛õ¡_id
;

20 
˛õ¡
 *
	mcuºít_˛õ¡
;

21 
dli°
 *
	m˛õ¡s
;

22 
dli°
 *
	m˛õ¡s_≥ndög_wrôe
;

23 
dli°
 *
	m˛õ¡s_to_˛o£
;

25 
	m˛õ¡s_∑u£d
;

26 
	m˛õ¡s_∑u£_íd_time
;

28 
vr_°©s
 *
	m°©s
;

29 
size_t
 
	mªsidít_£t_size
;

31 
	mdúty
;

34 
	mbp›_blocked_˛õ¡s
;

35 
dli°
 *
	munblocked_˛õ¡s
;

38 
dli°
 *
	m˛õ¡s_waôög_acks
;

41 
di˘
 *
	mpubsub_ch™√ls
;

42 
dli°
 *
	mpubsub_∑âîns
;

43 
	mnŸify_key•a˚_evíts
;

46 
c⁄f_ˇche
 
	mcc
;

48 
d¨øy
 *
	mc°abÀ
;

49 }
	tvr_evíéo›
;

51 
vr_evíéo›_öô
(
vr_evíéo›
 *
vñ
, 
fûñimô
);

52 
vr_evíéo›_deöô
(
vr_evíéo›
 *
vñ
);

	@src/vr_hyperloglog.c

1 
	~<vr_c‹e.h
>

3 
	~<°döt.h
>

4 
	~<m©h.h
>

151 
	shŒhdr
 {

152 
	mmagic
[4];

153 
uöt8_t
 
	mícodög
;

154 
uöt8_t
 
	mnŸu£d
[3];

155 
uöt8_t
 
	mˇrd
[8];

156 
uöt8_t
 
	mªgi°îs
[];

160 
	#HLL_INVALIDATE_CACHE
(
hdr
Ë(hdr)->
ˇrd
[7] |(1<<7)

	)

161 
	#HLL_VALID_CACHE
(
hdr
Ë(((hdr)->
ˇrd
[7] & (1<<7)Ë=0)

	)

163 
	#HLL_P
 14

	)

164 
	#HLL_REGISTERS
 (1<<
HLL_P
Ë

	)

165 
	#HLL_P_MASK
 (
HLL_REGISTERS
-1Ë

	)

166 
	#HLL_BITS
 6

	)

167 
	#HLL_REGISTER_MAX
 ((1<<
HLL_BITS
)-1)

	)

168 
	#HLL_HDR_SIZE
 (
hŒhdr
)

	)

169 
	#HLL_DENSE_SIZE
 (
HLL_HDR_SIZE
+((
HLL_REGISTERS
*
HLL_BITS
+7)/8))

	)

170 
	#HLL_DENSE
 0

	)

171 
	#HLL_SPARSE
 1

	)

172 
	#HLL_RAW
 255

	)

173 
	#HLL_MAX_ENCODING
 1

	)

175 *
	gövÆid_hŒ_îr
 = "-INVALIDOBJ Corrupted HLL object detected\r\n";

306 
	#HLL_DENSE_GET_REGISTER
(
èrgë
,
p
,
ªgnum
) do { \

307 
uöt8_t
 *
_p
 = (uöt8_t*Ë
p
; \

308 
_byã
 = 
ªgnum
*
HLL_BITS
/8; \

309 
_fb
 = 
ªgnum
*
HLL_BITS
&7; \

310 
_fb8
 = 8 - 
_fb
; \

311 
b0
 = 
_p
[
_byã
]; \

312 
b1
 = 
_p
[
_byã
+1]; \

313 
èrgë
 = ((
b0
 >> 
_fb
Ë| (
b1
 << 
_fb8
)Ë& 
HLL_REGISTER_MAX
; \

314 } 0)

	)

318 
	#HLL_DENSE_SET_REGISTER
(
p
,
ªgnum
,
vÆ
) do { \

319 
uöt8_t
 *
_p
 = (uöt8_t*Ë
p
; \

320 
_byã
 = 
ªgnum
*
HLL_BITS
/8; \

321 
_fb
 = 
ªgnum
*
HLL_BITS
&7; \

322 
_fb8
 = 8 - 
_fb
; \

323 
_v
 = 
vÆ
; \

324 
_p
[
_byã
] &~(
HLL_REGISTER_MAX
 << 
_fb
); \

325 
_p
[
_byã
] |
_v
 << 
_fb
; \

326 
_p
[
_byã
+1] &~(
HLL_REGISTER_MAX
 >> 
_fb8
); \

327 
_p
[
_byã
+1] |
_v
 >> 
_fb8
; \

328 } 0)

	)

332 
	#HLL_SPARSE_XZERO_BIT
 0x40

	)

333 
	#HLL_SPARSE_VAL_BIT
 0x80

	)

334 
	#HLL_SPARSE_IS_ZERO
(
p
Ë(((*’)Ë& 0xc0Ë=0Ë

	)

335 
	#HLL_SPARSE_IS_XZERO
(
p
Ë(((*’)Ë& 0xc0Ë=
HLL_SPARSE_XZERO_BIT
)

	)

336 
	#HLL_SPARSE_IS_VAL
(
p
Ë((*’)Ë& 
HLL_SPARSE_VAL_BIT
)

	)

337 
	#HLL_SPARSE_ZERO_LEN
(
p
Ë(((*’)Ë& 0x3f)+1)

	)

338 
	#HLL_SPARSE_XZERO_LEN
(
p
Ë(((((*’)Ë& 0x3fË<< 8Ë| (*(’)+1)))+1)

	)

339 
	#HLL_SPARSE_VAL_VALUE
(
p
Ë((((*’)Ë>> 2Ë& 0x1f)+1)

	)

340 
	#HLL_SPARSE_VAL_LEN
(
p
Ë(((*’)Ë& 0x3)+1)

	)

341 
	#HLL_SPARSE_VAL_MAX_VALUE
 32

	)

342 
	#HLL_SPARSE_VAL_MAX_LEN
 4

	)

343 
	#HLL_SPARSE_ZERO_MAX_LEN
 64

	)

344 
	#HLL_SPARSE_XZERO_MAX_LEN
 16384

	)

345 
	#HLL_SPARSE_VAL_SET
(
p
,
vÆ
,
Àn
) do { \

346 *(
p
Ë(((
vÆ
)-1)<<2|((
Àn
)-1))|
HLL_SPARSE_VAL_BIT
; \

347 } 0)

	)

348 
	#HLL_SPARSE_ZERO_SET
(
p
,
Àn
) do { \

349 *(
p
Ë(
Àn
)-1; \

350 } 0)

	)

351 
	#HLL_SPARSE_XZERO_SET
(
p
,
Àn
) do { \

352 
_l
 = (
Àn
)-1; \

353 *(
p
Ë(
_l
>>8Ë| 
HLL_SPARSE_XZERO_BIT
; \

354 *((
p
)+1Ë(
_l
&0xff); \

355 } 0)

	)

362 
uöt64_t
 
	$MurmurHash64A
 (c⁄° * 
key
, 
Àn
, 
£ed
) {

363 c⁄° 
uöt64_t
 
m
 = 0xc6a4a7935bd1e995;

364 c⁄° 
r
 = 47;

365 
uöt64_t
 
h
 = 
£ed
 ^ (
Àn
 * 
m
);

366 c⁄° 
uöt8_t
 *
d©a
 = (c⁄° uöt8_à*)
key
;

367 c⁄° 
uöt8_t
 *
íd
 = 
d©a
 + (
Àn
-(len&7));

369 
d©a
 !
íd
) {

370 
uöt64_t
 
k
;

372 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

373 
k
 = *((
uöt64_t
*)
d©a
);

375 
k
 = (
uöt64_t
Ë
d©a
[0];

376 
k
 |(
uöt64_t
Ë
d©a
[1] << 8;

377 
k
 |(
uöt64_t
Ë
d©a
[2] << 16;

378 
k
 |(
uöt64_t
Ë
d©a
[3] << 24;

379 
k
 |(
uöt64_t
Ë
d©a
[4] << 32;

380 
k
 |(
uöt64_t
Ë
d©a
[5] << 40;

381 
k
 |(
uöt64_t
Ë
d©a
[6] << 48;

382 
k
 |(
uöt64_t
Ë
d©a
[7] << 56;

385 
k
 *
m
;

386 
k
 ^k >> 
r
;

387 
k
 *
m
;

388 
h
 ^
k
;

389 
h
 *
m
;

390 
d©a
 += 8;

393 
Àn
 & 7) {

394 7: 
h
 ^(
uöt64_t
)
d©a
[6] << 48;

395 6: 
h
 ^(
uöt64_t
)
d©a
[5] << 40;

396 5: 
h
 ^(
uöt64_t
)
d©a
[4] << 32;

397 4: 
h
 ^(
uöt64_t
)
d©a
[3] << 24;

398 3: 
h
 ^(
uöt64_t
)
d©a
[2] << 16;

399 2: 
h
 ^(
uöt64_t
)
d©a
[1] << 8;

400 1: 
h
 ^(
uöt64_t
)
d©a
[0];

401 
h
 *
m
;

404 
h
 ^h >> 
r
;

405 
h
 *
m
;

406 
h
 ^h >> 
r
;

407  
h
;

408 
	}
}

413 
	$hŒP©Lí
(*
ñe
, 
size_t
 
ñesize
, *
ªgp
) {

414 
uöt64_t
 
hash
, 
bô
, 
ödex
;

415 
cou¡
;

428 
hash
 = 
	`MurmurHash64A
(
ñe
,
ñesize
,0xadc83b19ULL);

429 
ödex
 = 
hash
 & 
HLL_P_MASK
;

430 
hash
 |((
uöt64_t
)1<<63);

431 
bô
 = 
HLL_REGISTERS
;

432 
cou¡
 = 1;

433 (
hash
 & 
bô
) == 0) {

434 
cou¡
++;

435 
bô
 <<= 1;

437 *
ªgp
 = (Ë
ödex
;

438  
cou¡
;

439 
	}
}

454 
	$hŒDí£Add
(
uöt8_t
 *
ªgi°îs
, *
ñe
, 
size_t
 
ñesize
) {

455 
uöt8_t
 
ﬁdcou¡
, 
cou¡
;

456 
ödex
;

459 
cou¡
 = 
	`hŒP©Lí
(
ñe
,
ñesize
,&
ödex
);

460 
	`HLL_DENSE_GET_REGISTER
(
ﬁdcou¡
,
ªgi°îs
,
ödex
);

461 i‡(
cou¡
 > 
ﬁdcou¡
) {

462 
	`HLL_DENSE_SET_REGISTER
(
ªgi°îs
,
ödex
,
cou¡
);

467 
	}
}

473 
	$hŒDí£Sum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
) {

474 
E
 = 0;

475 
j
, 
ez
 = 0;

480 i‡(
HLL_REGISTERS
 =16384 && 
HLL_BITS
 == 6) {

481 
uöt8_t
 *
r
 = 
ªgi°îs
;

482 
r0
, 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
, 
r9
,

483 
r10
, 
r11
, 
r12
, 
r13
, 
r14
, 
r15
;

484 
j
 = 0; j < 1024; j++) {

486 
r0
 = 
r
[0] & 63; i‡‘0 =0Ë
ez
++;

487 
r1
 = (
r
[0] >> 6 |Ñ[1] << 2Ë& 63; i‡‘1 =0Ë
ez
++;

488 
r2
 = (
r
[1] >> 4 |Ñ[2] << 4Ë& 63; i‡‘2 =0Ë
ez
++;

489 
r3
 = (
r
[2] >> 2Ë& 63; i‡‘3 =0Ë
ez
++;

490 
r4
 = 
r
[3] & 63; i‡‘4 =0Ë
ez
++;

491 
r5
 = (
r
[3] >> 6 |Ñ[4] << 2Ë& 63; i‡‘5 =0Ë
ez
++;

492 
r6
 = (
r
[4] >> 4 |Ñ[5] << 4Ë& 63; i‡‘6 =0Ë
ez
++;

493 
r7
 = (
r
[5] >> 2Ë& 63; i‡‘7 =0Ë
ez
++;

494 
r8
 = 
r
[6] & 63; i‡‘8 =0Ë
ez
++;

495 
r9
 = (
r
[6] >> 6 |Ñ[7] << 2Ë& 63; i‡‘9 =0Ë
ez
++;

496 
r10
 = (
r
[7] >> 4 |Ñ[8] << 4Ë& 63; i‡‘10 =0Ë
ez
++;

497 
r11
 = (
r
[8] >> 2Ë& 63; i‡‘11 =0Ë
ez
++;

498 
r12
 = 
r
[9] & 63; i‡‘12 =0Ë
ez
++;

499 
r13
 = (
r
[9] >> 6 |Ñ[10] << 2Ë& 63; i‡‘13 =0Ë
ez
++;

500 
r14
 = (
r
[10] >> 4 |Ñ[11] << 4Ë& 63; i‡‘14 =0Ë
ez
++;

501 
r15
 = (
r
[11] >> 2Ë& 63; i‡‘15 =0Ë
ez
++;

506 
E
 +(
PE
[
r0
] + PE[
r1
]Ë+ (PE[
r2
] + PE[
r3
]Ë+ (PE[
r4
] + PE[
r5
]) +

507 (
PE
[
r6
] + PE[
r7
]Ë+ (PE[
r8
] + PE[
r9
]Ë+ (PE[
r10
] + PE[
r11
]) +

508 (
PE
[
r12
] + PE[
r13
]Ë+ (PE[
r14
] + PE[
r15
]);

509 
r
 += 12;

512 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

513 
ªg
;

515 
	`HLL_DENSE_GET_REGISTER
(
ªg
,
ªgi°îs
,
j
);

516 i‡(
ªg
 == 0) {

517 
ez
++;

520 
E
 +
PE
[
ªg
];

523 
E
 +
ez
;

525 *
ezp
 = 
ez
;

526  
E
;

527 
	}
}

537 
	$hŒS∑r£ToDí£
(
robj
 *
o
) {

538 
sds
 
•¨£
 = 
o
->
±r
, 
dí£
;

539 
hŒhdr
 *
hdr
, *
ﬁdhdr
 = (hŒhdr*)
•¨£
;

540 
idx
 = 0, 
ru∆í
, 
ªgvÆ
;

541 
uöt8_t
 *
p
 = (uöt8_t*)
•¨£
, *
íd
 =Ö+
	`sd¶í
(sparse);

544 
hdr
 = (
hŒhdr
*Ë
•¨£
;

545 i‡(
hdr
->
ícodög
 =
HLL_DENSE
Ë 
VR_OK
;

550 
dí£
 = 
	`sd¢ewÀn
(
NULL
,
HLL_DENSE_SIZE
);

551 
hdr
 = (
hŒhdr
*Ë
dí£
;

552 *
hdr
 = *
ﬁdhdr
;

553 
hdr
->
ícodög
 = 
HLL_DENSE
;

557 
p
 +
HLL_HDR_SIZE
;

558 
p
 < 
íd
) {

559 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

560 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

561 
idx
 +
ru∆í
;

562 
p
++;

563 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

564 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

565 
idx
 +
ru∆í
;

566 
p
 += 2;

568 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

569 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

570 
ru∆í
--) {

571 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
idx
,
ªgvÆ
);

572 
idx
++;

574 
p
++;

580 i‡(
idx
 !
HLL_REGISTERS
) {

581 
	`sds‰ì
(
dí£
);

582  
VR_ERROR
;

586 
	`sds‰ì
(
o
->
±r
);

587 
o
->
±r
 = 
dí£
;

588  
VR_OK
;

589 
	}
}

607 
	$hŒS∑r£Add
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
) {

608 
hŒhdr
 *
hdr
;

609 
uöt8_t
 
ﬁdcou¡
, 
cou¡
, *
•¨£
, *
íd
, *
p
, *
¥ev
, *
√xt
;

610 
ödex
, 
fú°
, 
•™
;

611 
is_zîo
 = 0, 
is_xzîo
 = 0, 
is_vÆ
 = 0, 
ru∆í
 = 0;

614 
cou¡
 = 
	`hŒP©Lí
(
ñe
,
ñesize
,&
ödex
);

618 i‡(
cou¡
 > 
HLL_SPARSE_VAL_MAX_VALUE
Ë
¥omŸe
;

625 
o
->
±r
 = 
	`sdsMakeRoomF‹
(o->ptr,3);

629 
•¨£
 = 
p
 = ((
uöt8_t
*)
o
->
±r
Ë+ 
HLL_HDR_SIZE
;

630 
íd
 = 
p
 + 
	`sd¶í
(
o
->
±r
Ë- 
HLL_HDR_SIZE
;

632 
fú°
 = 0;

633 
¥ev
 = 
NULL
;

634 
√xt
 = 
NULL
;

635 
•™
 = 0;

636 
p
 < 
íd
) {

637 
›Àn
;

644 
›Àn
 = 1;

645 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

646 
•™
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

647 } i‡(
	`HLL_SPARSE_IS_VAL
(
p
)) {

648 
•™
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

650 
•™
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

651 
›Àn
 = 2;

654 i‡(
ödex
 <
fú°
+
•™
-1) ;

655 
¥ev
 = 
p
;

656 
p
 +
›Àn
;

657 
fú°
 +
•™
;

659 i‡(
•™
 == 0)  -1;

661 
√xt
 = 
	`HLL_SPARSE_IS_XZERO
(
p
) ?Ö+2 :Ö+1;

662 i‡(
√xt
 >
íd
Ë√xà
NULL
;

667 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

668 
is_zîo
 = 1;

669 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

670 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

671 
is_xzîo
 = 1;

672 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

674 
is_vÆ
 = 1;

675 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

699 i‡(
is_vÆ
) {

700 
ﬁdcou¡
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

702 i‡(
ﬁdcou¡
 >
cou¡
)  0;

705 i‡(
ru∆í
 == 1) {

706 
	`HLL_SPARSE_VAL_SET
(
p
,
cou¡
,1);

707 
upd©ed
;

713 i‡(
is_zîo
 && 
ru∆í
 == 1) {

714 
	`HLL_SPARSE_VAL_SET
(
p
,
cou¡
,1);

715 
upd©ed
;

733 
uöt8_t
 
£q
[5], *
n
 = seq;

734 
œ°
 = 
fú°
+
•™
-1;

735 
Àn
;

737 i‡(
is_zîo
 || 
is_xzîo
) {

739 i‡(
ödex
 !
fú°
) {

740 
Àn
 = 
ödex
-
fú°
;

741 i‡(
Àn
 > 
HLL_SPARSE_ZERO_MAX_LEN
) {

742 
	`HLL_SPARSE_XZERO_SET
(
n
,
Àn
);

743 
n
 += 2;

745 
	`HLL_SPARSE_ZERO_SET
(
n
,
Àn
);

746 
n
++;

749 
	`HLL_SPARSE_VAL_SET
(
n
,
cou¡
,1);

750 
n
++;

751 i‡(
ödex
 !
œ°
) {

752 
Àn
 = 
œ°
-
ödex
;

753 i‡(
Àn
 > 
HLL_SPARSE_ZERO_MAX_LEN
) {

754 
	`HLL_SPARSE_XZERO_SET
(
n
,
Àn
);

755 
n
 += 2;

757 
	`HLL_SPARSE_ZERO_SET
(
n
,
Àn
);

758 
n
++;

763 
curvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

765 i‡(
ödex
 !
fú°
) {

766 
Àn
 = 
ödex
-
fú°
;

767 
	`HLL_SPARSE_VAL_SET
(
n
,
curvÆ
,
Àn
);

768 
n
++;

770 
	`HLL_SPARSE_VAL_SET
(
n
,
cou¡
,1);

771 
n
++;

772 i‡(
ödex
 !
œ°
) {

773 
Àn
 = 
œ°
-
ödex
;

774 
	`HLL_SPARSE_VAL_SET
(
n
,
curvÆ
,
Àn
);

775 
n
++;

783 
£qÀn
 = 
n
-
£q
;

784 
ﬁdÀn
 = 
is_xzîo
 ? 2 : 1;

785 
dñèÀn
 = 
£qÀn
-
ﬁdÀn
;

787 i‡(
dñèÀn
 > 0 &&

788 
	`sd¶í
(
o
->
±r
)+
dñèÀn
 > 
£rvî
.
hŒ_•¨£_max_byãs
Ë
¥omŸe
;

789 i‡(
dñèÀn
 && 
√xt
Ë
	`memmove
“ext+dñèÀn,√xt,
íd
-next);

790 
	`sdsIn¸Lí
(
o
->
±r
,
dñèÀn
);

791 
	`mem˝y
(
p
,
£q
,
£qÀn
);

792 
íd
 +
dñèÀn
;

794 
upd©ed
:

800 
p
 = 
¥ev
 ?Öªv : 
•¨£
;

801 
sˇ∆í
 = 5;

802 
p
 < 
íd
 && 
sˇ∆í
--) {

803 i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

804 
p
 += 2;

806 } i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

807 
p
++;

812 i‡(
p
+1 < 
íd
 && 
	`HLL_SPARSE_IS_VAL
(p+1)) {

813 
v1
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

814 
v2
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
+1);

815 i‡(
v1
 =
v2
) {

816 
Àn
 = 
	`HLL_SPARSE_VAL_LEN
(
p
)+HLL_SPARSE_VAL_LEN(p+1);

817 i‡(
Àn
 <
HLL_SPARSE_VAL_MAX_LEN
) {

818 
	`HLL_SPARSE_VAL_SET
(
p
+1,
v1
,
Àn
);

819 
	`memmove
(
p
,p+1,
íd
-p);

820 
	`sdsIn¸Lí
(
o
->
±r
,-1);

821 
íd
--;

829 
p
++;

833 
hdr
 = 
o
->
±r
;

834 
	`HLL_INVALIDATE_CACHE
(
hdr
);

837 
¥omŸe
:

838 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
)  -1;

839 
hdr
 = 
o
->
±r
;

848 
dí£_ªtvÆ
 = 
	`hŒDí£Add
(
hdr
->
ªgi°îs
, 
ñe
, 
ñesize
);

849 
	`ASSERT
(
dí£_ªtvÆ
 == 1);

850  
dí£_ªtvÆ
;

851 
	}
}

857 
	$hŒS∑r£Sum
(
uöt8_t
 *
•¨£
, 
•¨£Àn
, *
PE
, *
ezp
, *
övÆid
) {

858 
E
 = 0;

859 
ez
 = 0, 
idx
 = 0, 
ru∆í
, 
ªgvÆ
;

860 
uöt8_t
 *
íd
 = 
•¨£
+
•¨£Àn
, *
p
 = sparse;

862 
p
 < 
íd
) {

863 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

864 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

865 
idx
 +
ru∆í
;

866 
ez
 +
ru∆í
;

868 
p
++;

869 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

870 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

871 
idx
 +
ru∆í
;

872 
ez
 +
ru∆í
;

874 
p
 += 2;

876 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

877 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

878 
idx
 +
ru∆í
;

879 
E
 +
PE
[
ªgvÆ
]*
ru∆í
;

880 
p
++;

883 i‡(
idx
 !
HLL_REGISTERS
 && 
övÆid
) *invalid = 1;

884 
E
 +
ez
;

885 *
ezp
 = 
ez
;

886  
E
;

887 
	}
}

897 
	$hŒRawSum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
) {

898 
E
 = 0;

899 
j
, 
ez
 = 0;

900 
uöt64_t
 *
w‹d
 = (uöt64_t*Ë
ªgi°îs
;

901 
uöt8_t
 *
byãs
;

903 
j
 = 0; j < 
HLL_REGISTERS
/8; j++) {

904 i‡(*
w‹d
 == 0) {

905 
ez
 += 8;

907 
byãs
 = (
uöt8_t
*Ë
w‹d
;

908 i‡(
byãs
[0]Ë
E
 +
PE
[byãs[0]]; 
ez
++;

909 i‡(
byãs
[1]Ë
E
 +
PE
[byãs[1]]; 
ez
++;

910 i‡(
byãs
[2]Ë
E
 +
PE
[byãs[2]]; 
ez
++;

911 i‡(
byãs
[3]Ë
E
 +
PE
[byãs[3]]; 
ez
++;

912 i‡(
byãs
[4]Ë
E
 +
PE
[byãs[4]]; 
ez
++;

913 i‡(
byãs
[5]Ë
E
 +
PE
[byãs[5]]; 
ez
++;

914 i‡(
byãs
[6]Ë
E
 +
PE
[byãs[6]]; 
ez
++;

915 i‡(
byãs
[7]Ë
E
 +
PE
[byãs[7]]; 
ez
++;

917 
w‹d
++;

919 
E
 +
ez
;

921 *
ezp
 = 
ez
;

922  
E
;

923 
	}
}

936 
uöt64_t
 
	$hŒCou¡
(
hŒhdr
 *
hdr
, *
övÆid
) {

937 
m
 = 
HLL_REGISTERS
;

938 
E
, 
Æpha
 = 0.7213/(1+1.079/
m
);

939 
j
, 
ez
;

943 
öôülized
 = 0;

944 
PE
[64];

945 i‡(!
öôülized
) {

946 
PE
[0] = 1;

947 
j
 = 1; j < 64; j++) {

949 
PE
[
j
] = 1.0/(1ULL << j);

951 
öôülized
 = 1;

955 i‡(
hdr
->
ícodög
 =
HLL_DENSE
) {

956 
E
 = 
	`hŒDí£Sum
(
hdr
->
ªgi°îs
,
PE
,&
ez
);

957 } i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

958 
E
 = 
	`hŒS∑r£Sum
(
hdr
->
ªgi°îs
,

959 
	`sd¶í
((
sds
)
hdr
)-
HLL_HDR_SIZE
,
PE
,&
ez
,
övÆid
);

960 } i‡(
hdr
->
ícodög
 =
HLL_RAW
) {

961 
E
 = 
	`hŒRawSum
(
hdr
->
ªgi°îs
,
PE
,&
ez
);

963 
	`£rvîP™ic
("Unknown HyperLogLogÉncoding in hllCount()");

967 
E
 = (1/E)*
Æpha
*
m
*m;

974 i‡(
E
 < 
m
*2.5 && 
ez
 != 0) {

975 
E
 = 
m
*
	`log
(m/
ez
);

976 } i‡(
m
 =16384 && 
E
 < 72000) {

981 
büs
 = 5.9119*1.0e-18*(
E
*E*E*E)

982 -1.4253*1.0e-12*(
E
*E*E)+

983 1.2940*1.0e-7*(
E
*E)

984 -5.2921*1.0e-3*
E
+

986 
E
 -E*(
büs
/100);

992  (
uöt64_t
Ë
E
;

993 
	}
}

996 
	$hŒAdd
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
) {

997 
hŒhdr
 *
hdr
 = 
o
->
±r
;

998 
hdr
->
ícodög
) {

999 
HLL_DENSE
:  
	`hŒDí£Add
(
hdr
->
ªgi°îs
,
ñe
,
ñesize
);

1000 
HLL_SPARSE
:  
	`hŒS∑r£Add
(
o
,
ñe
,
ñesize
);

1003 
	}
}

1013 
	$hŒMîge
(
uöt8_t
 *
max
, 
robj
 *
hŒ
) {

1014 
hŒhdr
 *
hdr
 = 
hŒ
->
±r
;

1015 
i
;

1017 i‡(
hdr
->
ícodög
 =
HLL_DENSE
) {

1018 
uöt8_t
 
vÆ
;

1020 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1021 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
i
);

1022 i‡(
vÆ
 > 
max
[
i
]) max[i] = val;

1025 
uöt8_t
 *
p
 = 
hŒ
->
±r
, *
íd
 =Ö + 
	`sd¶í
(hll->ptr);

1026 
ru∆í
, 
ªgvÆ
;

1028 
p
 +
HLL_HDR_SIZE
;

1029 
i
 = 0;

1030 
p
 < 
íd
) {

1031 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

1032 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

1033 
i
 +
ru∆í
;

1034 
p
++;

1035 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

1036 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

1037 
i
 +
ru∆í
;

1038 
p
 += 2;

1040 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

1041 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

1042 
ru∆í
--) {

1043 i‡(
ªgvÆ
 > 
max
[
i
]) max[i] =Ñegval;

1044 
i
++;

1046 
p
++;

1049 i‡(
i
 !
HLL_REGISTERS
Ë 
VR_ERROR
;

1051  
VR_OK
;

1052 
	}
}

1058 
robj
 *
	$¸óãHLLObje˘
() {

1059 
robj
 *
o
;

1060 
hŒhdr
 *
hdr
;

1061 
sds
 
s
;

1062 
uöt8_t
 *
p
;

1063 
•¨£Àn
 = 
HLL_HDR_SIZE
 +

1064 (((
HLL_REGISTERS
+(
HLL_SPARSE_XZERO_MAX_LEN
-1)) /

1065 
HLL_SPARSE_XZERO_MAX_LEN
)*2);

1066 
aux
;

1070 
aux
 = 
HLL_REGISTERS
;

1071 
s
 = 
	`sd¢ewÀn
(
NULL
,
•¨£Àn
);

1072 
p
 = (
uöt8_t
*)
s
 + 
HLL_HDR_SIZE
;

1073 
aux
) {

1074 
xzîo
 = 
HLL_SPARSE_XZERO_MAX_LEN
;

1075 i‡(
xzîo
 > 
aux
) xzero =áux;

1076 
	`HLL_SPARSE_XZERO_SET
(
p
,
xzîo
);

1077 
p
 += 2;

1078 
aux
 -
xzîo
;

1080 
	`ASSERT
((
p
-(
uöt8_t
*)
s
Ë=
•¨£Àn
);

1083 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
s
);

1084 
hdr
 = 
o
->
±r
;

1085 
	`mem˝y
(
hdr
->
magic
,"HYLL",4);

1086 
hdr
->
ícodög
 = 
HLL_SPARSE
;

1087  
o
;

1088 
	}
}

1093 
	$isHLLObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
) {

1094 
hŒhdr
 *
hdr
;

1097 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
))

1098  
VR_ERROR
;

1100 i‡(
	`°rögObje˘Lí
(
o
Ë< (*
hdr
)Ë
övÆid
;

1101 
hdr
 = 
o
->
±r
;

1104 i‡(
hdr
->
magic
[0] != 'H' || hdr->magic[1] != 'Y' ||

1105 
hdr
->
magic
[2] !'L' || hdr->magic[3] !'L'Ë
övÆid
;

1107 i‡(
hdr
->
ícodög
 > 
HLL_MAX_ENCODING
Ë
övÆid
;

1110 i‡(
hdr
->
ícodög
 =
HLL_DENSE
 &&

1111 
	`°rögObje˘Lí
(
o
Ë!
HLL_DENSE_SIZE
Ë
övÆid
;

1114  
VR_OK
;

1116 
övÆid
:

1117 
	`addRïlySds
(
c
,

1118 
	`sd¢ew
("-WRONGTYPE Key isÇotá valid "

1120  
VR_ERROR
;

1121 
	}
}

1124 
	$pÁddComm™d
(
˛õ¡
 *
c
) {

1125 
robj
 *
o
;

1126 
hŒhdr
 *
hdr
;

1127 
upd©ed
 = 0, 
j
;

1128 
expúed
 = 0;

1130 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

1131 
	`lockDbWrôe
(
c
->
db
);

1132 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

1133 i‡(
o
 =
NULL
) {

1137 
o
 = 
	`¸óãHLLObje˘
();

1138 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

1139 
upd©ed
++;

1141 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1142 
	`u∆ockDb
(
c
->
db
);

1143 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1146 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1149 
j
 = 2; j < 
c
->
¨gc
; j++) {

1150 
ªtvÆ
 = 
	`hŒAdd
(
o
, (*)
c
->
¨gv
[
j
]->
±r
,

1151 
	`sd¶í
(
c
->
¨gv
[
j
]->
±r
));

1152 
ªtvÆ
) {

1154 
upd©ed
++;

1157 
	`u∆ockDb
(
c
->
db
);

1158 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1159 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1163 
hdr
 = 
o
->
±r
;

1164 i‡(
upd©ed
) {

1165 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1166 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"pÁdd",
c
->
¨gv
[1],c->
db
->
id
);

1167 
c
->
vñ
->
dúty
++;

1168 
	`HLL_INVALIDATE_CACHE
(
hdr
);

1170 
	`addRïly
(
c
, 
upd©ed
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

1171 
	`u∆ockDb
(
c
->
db
);

1172 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1173 
	}
}

1176 
	$pfcou¡Comm™d
(
˛õ¡
 *
c
) {

1177 
robj
 *
o
;

1178 
hŒhdr
 *
hdr
;

1179 
uöt64_t
 
ˇrd
;

1180 
expúed
;

1186 i‡(
c
->
¨gc
 > 2) {

1187 
uöt8_t
 
max
[
HLL_HDR_SIZE
+
HLL_REGISTERS
], *
ªgi°îs
;

1188 
j
;

1191 
	`mem£t
(
max
,0,(max));

1192 
hdr
 = (
hŒhdr
*Ë
max
;

1193 
hdr
->
ícodög
 = 
HLL_RAW
;

1194 
ªgi°îs
 = 
max
 + 
HLL_HDR_SIZE
;

1195 
j
 = 1; j < 
c
->
¨gc
; j++) {

1197 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

1198 
	`lockDbRód
(
c
->
db
);

1199 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

1200 i‡(
o
 =
NULL
) {

1201 
	`u∆ockDb
(
c
->
db
);

1204 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1205 
	`u∆ockDb
(
c
->
db
);

1210 i‡(
	`hŒMîge
(
ªgi°îs
,
o
Ë=
VR_ERROR
) {

1211 
	`u∆ockDb
(
c
->
db
);

1212 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1216 
	`u∆ockDb
(
c
->
db
);

1220 
	`addRïlyL⁄gL⁄g
(
c
,
	`hŒCou¡
(
hdr
,
NULL
));

1228 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

1229 
	`lockDbWrôe
(
c
->
db
);

1230 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

1231 i‡(
o
 =
NULL
) {

1234 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1236 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) {

1237 
	`u∆ockDb
(
c
->
db
);

1238 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1241 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1244 
hdr
 = 
o
->
±r
;

1245 i‡(
	`HLL_VALID_CACHE
(
hdr
)) {

1247 
ˇrd
 = (
uöt64_t
)
hdr
->card[0];

1248 
ˇrd
 |(
uöt64_t
)
hdr
->card[1] << 8;

1249 
ˇrd
 |(
uöt64_t
)
hdr
->card[2] << 16;

1250 
ˇrd
 |(
uöt64_t
)
hdr
->card[3] << 24;

1251 
ˇrd
 |(
uöt64_t
)
hdr
->card[4] << 32;

1252 
ˇrd
 |(
uöt64_t
)
hdr
->card[5] << 40;

1253 
ˇrd
 |(
uöt64_t
)
hdr
->card[6] << 48;

1254 
ˇrd
 |(
uöt64_t
)
hdr
->card[7] << 56;

1256 
övÆid
 = 0;

1258 
ˇrd
 = 
	`hŒCou¡
(
hdr
,&
övÆid
);

1259 i‡(
övÆid
) {

1260 
	`u∆ockDb
(
c
->
db
);

1261 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1262 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1265 
hdr
->
ˇrd
[0] = card & 0xff;

1266 
hdr
->
ˇrd
[1] = (card >> 8) & 0xff;

1267 
hdr
->
ˇrd
[2] = (card >> 16) & 0xff;

1268 
hdr
->
ˇrd
[3] = (card >> 24) & 0xff;

1269 
hdr
->
ˇrd
[4] = (card >> 32) & 0xff;

1270 
hdr
->
ˇrd
[5] = (card >> 40) & 0xff;

1271 
hdr
->
ˇrd
[6] = (card >> 48) & 0xff;

1272 
hdr
->
ˇrd
[7] = (card >> 56) & 0xff;

1277 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1278 
£rvî
.
dúty
++;

1279 
c
->
vñ
->
dúty
++;

1281 
	`addRïlyL⁄gL⁄g
(
c
,
ˇrd
);

1284 
	`u∆ockDb
(
c
->
db
);

1285 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1286 
	}
}

1289 
	$pfmîgeComm™d
(
˛õ¡
 *
c
) {

1290 
uöt8_t
 
max
[
HLL_REGISTERS
];

1291 
hŒhdr
 *
hdr
;

1292 
j
;

1297 
	`mem£t
(
max
,0,(max));

1298 
j
 = 1; j < 
c
->
¨gc
; j++) {

1300 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

1301 i‡(
o
 =
NULL
) ;

1302 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) ;

1306 i‡(
	`hŒMîge
(
max
,
o
Ë=
VR_ERROR
) {

1307 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1313 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

1314 i‡(
o
 =
NULL
) {

1318 
o
 = 
	`¸óãHLLObje˘
();

1319 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

1324 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

1328 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1329 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1335 
hdr
 = 
o
->
±r
;

1336 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

1337 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
j
,
max
[j]);

1339 
	`HLL_INVALIDATE_CACHE
(
hdr
);

1341 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

1344 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"pÁdd",
c
->
¨gv
[1],c->
db
->
id
);

1345 
£rvî
.
dúty
++;

1346 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1347 
	}
}

1354 
	#HLL_TEST_CYCLES
 1000

	)

1355 
	$pf£l·e°Comm™d
(
˛õ¡
 *
c
) {

1356 
j
, 
i
;

1357 
sds
 
bôcou¡îs
 = 
	`sd¢ewÀn
(
NULL
,
HLL_DENSE_SIZE
);

1358 
hŒhdr
 *
hdr
 = (hŒhdr*Ë
bôcou¡îs
, *
hdr2
;

1359 
robj
 *
o
 = 
NULL
;

1360 
uöt8_t
 
byãcou¡îs
[
HLL_REGISTERS
];

1366 
j
 = 0; j < 
HLL_TEST_CYCLES
; j++) {

1369 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1370 
r
 = 
	`ønd
(Ë& 
HLL_REGISTER_MAX
;

1372 
byãcou¡îs
[
i
] = 
r
;

1373 
	`HLL_DENSE_SET_REGISTER
(
hdr
->
ªgi°îs
,
i
,
r
);

1376 
i
 = 0; i < 
HLL_REGISTERS
; i++) {

1377 
vÆ
;

1379 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
i
);

1380 i‡(
vÆ
 !
byãcou¡îs
[
i
]) {

1381 
	`addRïlyEº‹F‹m©
(
c
,

1383 
i
, (Ë
byãcou¡îs
[i], (Ë
vÆ
);

1384 
˛ónup
;

1399 
	`mem£t
(
hdr
->
ªgi°îs
,0,
HLL_DENSE_SIZE
-
HLL_HDR_SIZE
);

1400 
o
 = 
	`¸óãHLLObje˘
();

1401 
ªÀº
 = 1.04/
	`sqπ
(
HLL_REGISTERS
);

1402 
öt64_t
 
checkpoöt
 = 1;

1403 
uöt64_t
 
£ed
 = (uöt64_t)
	`ønd
() | (uint64_t)rand() << 32;

1404 
uöt64_t
 
ñe
;

1405 
j
 = 1; j <= 10000000; j++) {

1406 
ñe
 = 
j
 ^ 
£ed
;

1407 
	`hŒDí£Add
(
hdr
->
ªgi°îs
,(*)&
ñe
,(ele));

1408 
	`hŒAdd
(
o
,(*)&
ñe
,(ele));

1412 i‡(
j
 =
checkpoöt
 && j < 
£rvî
.
hŒ_•¨£_max_byãs
/2) {

1413 
hdr2
 = 
o
->
±r
;

1414 i‡(
hdr2
->
ícodög
 !
HLL_SPARSE
) {

1415 
	`addRïlyEº‹
(
c
, "TESTFAILED sparseÉncodingÇot used");

1416 
˛ónup
;

1421 i‡(
j
 =
checkpoöt
 && 
	`hŒCou¡
(
hdr
,
NULL
Ë!hŒCou¡(
o
->
±r
,NULL)) {

1422 
	`addRïlyEº‹
(
c
, "TESTFAILED dense/sparse disagree");

1423 
˛ónup
;

1427 i‡(
j
 =
checkpoöt
) {

1428 
öt64_t
 
ab£º
 = 
checkpoöt
 - (öt64_t)
	`hŒCou¡
(
hdr
,
NULL
);

1429 
uöt64_t
 
maxîr
 = 
	`˚û
(
ªÀº
*6*
checkpoöt
);

1435 i‡(
j
 =10Ë
maxîr
 = 1;

1437 i‡(
ab£º
 < 0)ábserr = -abserr;

1438 i‡(
ab£º
 > (
öt64_t
)
maxîr
) {

1439 
	`addRïlyEº‹F‹m©
(
c
,

1441 (Ë
checkpoöt
,

1442 (Ë
ab£º
);

1443 
˛ónup
;

1445 
checkpoöt
 *= 10;

1450 
	`addRïly
(
c
,
sh¨ed
.
ok
);

1452 
˛ónup
:

1453 
	`sds‰ì
(
bôcou¡îs
);

1454 i‡(
o
Ë
	`de¸RefCou¡
(o);

1455 
	}
}

1459 
	$pfdebugComm™d
(
˛õ¡
 *
c
) {

1460 *
cmd
 = 
c
->
¨gv
[1]->
±r
;

1461 
hŒhdr
 *
hdr
;

1462 
robj
 *
o
;

1463 
j
;

1465 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

1466 i‡(
o
 =
NULL
) {

1467 
	`addRïlyEº‹
(
c
,"The specified key doesÇotÉxist");

1470 i‡(
	`isHLLObje˘OrRïly
(
c
,
o
Ë!
VR_OK
) ;

1471 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[2],o);

1472 
hdr
 = 
o
->
±r
;

1475 i‡(!
	`°rˇ£cmp
(
cmd
,"getreg")) {

1476 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1478 i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

1479 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1480 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1483 
£rvî
.
dúty
++;

1486 
hdr
 = 
o
->
±r
;

1487 
	`addRïlyMu…iBulkLí
(
c
,
HLL_REGISTERS
);

1488 
j
 = 0; j < 
HLL_REGISTERS
; j++) {

1489 
uöt8_t
 
vÆ
;

1491 
	`HLL_DENSE_GET_REGISTER
(
vÆ
,
hdr
->
ªgi°îs
,
j
);

1492 
	`addRïlyL⁄gL⁄g
(
c
,
vÆ
);

1496 i‡(!
	`°rˇ£cmp
(
cmd
,"decode")) {

1497 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1499 
uöt8_t
 *
p
 = 
o
->
±r
, *
íd
 =Ö+
	`sd¶í
(o->ptr);

1500 
sds
 
decoded
 = 
	`sd£m±y
();

1502 i‡(
hdr
->
ícodög
 !
HLL_SPARSE
) {

1503 
	`addRïlyEº‹
(
c
,"HLLÉncoding isÇot sparse");

1507 
p
 +
HLL_HDR_SIZE
;

1508 
p
 < 
íd
) {

1509 
ru∆í
, 
ªgvÆ
;

1511 i‡(
	`HLL_SPARSE_IS_ZERO
(
p
)) {

1512 
ru∆í
 = 
	`HLL_SPARSE_ZERO_LEN
(
p
);

1513 
p
++;

1514 
decoded
 = 
	`sdsˇçrötf
(decoded,"z:%d ",
ru∆í
);

1515 } i‡(
	`HLL_SPARSE_IS_XZERO
(
p
)) {

1516 
ru∆í
 = 
	`HLL_SPARSE_XZERO_LEN
(
p
);

1517 
p
 += 2;

1518 
decoded
 = 
	`sdsˇçrötf
(decoded,"Z:%d ",
ru∆í
);

1520 
ru∆í
 = 
	`HLL_SPARSE_VAL_LEN
(
p
);

1521 
ªgvÆ
 = 
	`HLL_SPARSE_VAL_VALUE
(
p
);

1522 
p
++;

1523 
decoded
 = 
	`sdsˇçrötf
(decoded,"v:%d,%d ",
ªgvÆ
,
ru∆í
);

1526 
decoded
 = 
	`sd°rim
(decoded," ");

1527 
	`addRïlyBulkCBuf„r
(
c
,
decoded
,
	`sd¶í
(decoded));

1528 
	`sds‰ì
(
decoded
);

1531 i‡(!
	`°rˇ£cmp
(
cmd
,"encoding")) {

1532 *
ícodög°r
[2] = {"dense","sparse"};

1533 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1535 
	`addRïlySètus
(
c
,
ícodög°r
[
hdr
->
ícodög
]);

1538 i‡(!
	`°rˇ£cmp
(
cmd
,"todense")) {

1539 
c⁄v
 = 0;

1540 i‡(
c
->
¨gc
 !3Ë
¨ôyîr
;

1542 i‡(
hdr
->
ícodög
 =
HLL_SPARSE
) {

1543 i‡(
	`hŒS∑r£ToDí£
(
o
Ë=
VR_ERROR
) {

1544 
	`addRïlySds
(
c
,
	`sd¢ew
(
övÆid_hŒ_îr
));

1547 
c⁄v
 = 1;

1548 
£rvî
.
dúty
++;

1550 
	`addRïly
(
c
,
c⁄v
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

1552 
	`addRïlyEº‹F‹m©
(
c
,"Unknow¿PFDEBUG subcomm™d '%s'", 
cmd
);

1556 
¨ôyîr
:

1557 
	`addRïlyEº‹F‹m©
(
c
,

1558 "Wr⁄gÇumbî o‡¨gumít†f‹Åhê'%s' subcomm™d",
cmd
);

1559 
	}
}

	@src/vr_hyperloglog.h

1 #i‚de‡
_VR_HYPERLOGLOG_H_


2 
	#_VR_HYPERLOGLOG_H_


	)

4 
uöt64_t
 
MurmurHash64A
 (c⁄° * 
key
, 
Àn
, 
£ed
);

5 
hŒP©Lí
(*
ñe
, 
size_t
 
ñesize
, *
ªgp
);

6 
hŒDí£Add
(
uöt8_t
 *
ªgi°îs
, *
ñe
, 
size_t
 
ñesize
);

7 
hŒDí£Sum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
);

8 
hŒS∑r£ToDí£
(
robj
 *
o
);

9 
hŒS∑r£Add
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
);

10 
hŒS∑r£Sum
(
uöt8_t
 *
•¨£
, 
•¨£Àn
, *
PE
, *
ezp
, *
övÆid
);

11 
hŒRawSum
(
uöt8_t
 *
ªgi°îs
, *
PE
, *
ezp
);

12 
hŒAdd
(
robj
 *
o
, *
ñe
, 
size_t
 
ñesize
);

13 
hŒMîge
(
uöt8_t
 *
max
, 
robj
 *
hŒ
);

14 
robj
 *
¸óãHLLObje˘
();

15 
isHLLObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
);

16 
pÁddComm™d
(
˛õ¡
 *
c
);

17 
pfcou¡Comm™d
(
˛õ¡
 *
c
);

18 
pfmîgeComm™d
(
˛õ¡
 *
c
);

19 
pf£l·e°Comm™d
(
˛õ¡
 *
c
);

20 
pfdebugComm™d
(
˛õ¡
 *
c
);

	@src/vr_intset.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<vr_c‹e.h
>

9 
	#INTSET_ENC_INT16
 ((
öt16_t
))

	)

10 
	#INTSET_ENC_INT32
 ((
öt32_t
))

	)

11 
	#INTSET_ENC_INT64
 ((
öt64_t
))

	)

14 
uöt8_t
 
	$_öt£tVÆueEncodög
(
öt64_t
 
v
) {

15 i‡(
v
 < 
INT32_MIN
 || v > 
INT32_MAX
)

16  
INTSET_ENC_INT64
;

17 i‡(
v
 < 
INT16_MIN
 || v > 
INT16_MAX
)

18  
INTSET_ENC_INT32
;

20  
INTSET_ENC_INT16
;

21 
	}
}

24 
öt64_t
 
	$_öt£tGëEncoded
(
öt£t
 *
is
, 
pos
, 
uöt8_t
 
íc
) {

25 
öt64_t
 
v64
;

26 
öt32_t
 
v32
;

27 
öt16_t
 
v16
;

29 i‡(
íc
 =
INTSET_ENC_INT64
) {

30 
	`mem˝y
(&
v64
,((
öt64_t
*)
is
->
c⁄ã¡s
)+
pos
,(v64));

31 
	`memªv64ifbe
(&
v64
);

32  
v64
;

33 } i‡(
íc
 =
INTSET_ENC_INT32
) {

34 
	`mem˝y
(&
v32
,((
öt32_t
*)
is
->
c⁄ã¡s
)+
pos
,(v32));

35 
	`memªv32ifbe
(&
v32
);

36  
v32
;

38 
	`mem˝y
(&
v16
,((
öt16_t
*)
is
->
c⁄ã¡s
)+
pos
,(v16));

39 
	`memªv16ifbe
(&
v16
);

40  
v16
;

42 
	}
}

45 
öt64_t
 
	$_öt£tGë
(
öt£t
 *
is
, 
pos
) {

46  
	`_öt£tGëEncoded
(
is
,
pos
,
	`öåev32ifbe
(is->
ícodög
));

47 
	}
}

50 
	$_öt£tSë
(
öt£t
 *
is
, 
pos
, 
öt64_t
 
vÆue
) {

51 
uöt32_t
 
ícodög
 = 
	`öåev32ifbe
(
is
->encoding);

53 i‡(
ícodög
 =
INTSET_ENC_INT64
) {

54 ((
öt64_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

55 
	`memªv64ifbe
(((
öt64_t
*)
is
->
c⁄ã¡s
)+
pos
);

56 } i‡(
ícodög
 =
INTSET_ENC_INT32
) {

57 ((
öt32_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

58 
	`memªv32ifbe
(((
öt32_t
*)
is
->
c⁄ã¡s
)+
pos
);

60 ((
öt16_t
*)
is
->
c⁄ã¡s
)[
pos
] = 
vÆue
;

61 
	`memªv16ifbe
(((
öt16_t
*)
is
->
c⁄ã¡s
)+
pos
);

63 
	}
}

66 
öt£t
 *
	$öt£tNew
() {

67 
öt£t
 *
is
 = 
	`dÆloc
((intset));

68 
is
->
ícodög
 = 
	`öåev32ifbe
(
INTSET_ENC_INT16
);

69 
is
->
Àngth
 = 0;

70  
is
;

71 
	}
}

74 
öt£t
 *
	$öt£tResize
(
öt£t
 *
is
, 
uöt32_t
 
Àn
) {

75 
uöt32_t
 
size
 = 
Àn
*
	`öåev32ifbe
(
is
->
ícodög
);

76 
is
 = 
	`dªÆloc
(is,(
öt£t
)+
size
);

77  
is
;

78 
	}
}

84 
uöt8_t
 
	$öt£tSórch
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, 
uöt32_t
 *
pos
) {

85 
mö
 = 0, 
max
 = 
	`öåev32ifbe
(
is
->
Àngth
)-1, 
mid
 = -1;

86 
öt64_t
 
cur
 = -1;

89 i‡(
	`öåev32ifbe
(
is
->
Àngth
) == 0) {

90 i‡(
pos
) *pos = 0;

95 i‡(
vÆue
 > 
	`_öt£tGë
(
is
,
	`öåev32ifbe
(is->
Àngth
)-1)) {

96 i‡(
pos
Ë*po†
	`öåev32ifbe
(
is
->
Àngth
);

98 } i‡(
vÆue
 < 
	`_öt£tGë
(
is
,0)) {

99 i‡(
pos
) *pos = 0;

104 
max
 >
mö
) {

105 
mid
 = (()
mö
 + ()
max
) >> 1;

106 
cur
 = 
	`_öt£tGë
(
is
,
mid
);

107 i‡(
vÆue
 > 
cur
) {

108 
mö
 = 
mid
+1;

109 } i‡(
vÆue
 < 
cur
) {

110 
max
 = 
mid
-1;

116 i‡(
vÆue
 =
cur
) {

117 i‡(
pos
Ë*po†
mid
;

120 i‡(
pos
Ë*po†
mö
;

123 
	}
}

126 
öt£t
 *
	$öt£tUpgødeAndAdd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
) {

127 
uöt8_t
 
cuªnc
 = 
	`öåev32ifbe
(
is
->
ícodög
);

128 
uöt8_t
 
√wíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

129 
Àngth
 = 
	`öåev32ifbe
(
is
->length);

130 
¥ïíd
 = 
vÆue
 < 0 ? 1 : 0;

133 
is
->
ícodög
 = 
	`öåev32ifbe
(
√wíc
);

134 
is
 = 
	`öt£tResize
(is,
	`öåev32ifbe
(is->
Àngth
)+1);

139 
Àngth
--)

140 
	`_öt£tSë
(
is
,
Àngth
+
¥ïíd
,
	`_öt£tGëEncoded
(is,Àngth,
cuªnc
));

143 i‡(
¥ïíd
)

144 
	`_öt£tSë
(
is
,0,
vÆue
);

146 
	`_öt£tSë
(
is
,
	`öåev32ifbe
(is->
Àngth
),
vÆue
);

147 
is
->
Àngth
 = 
	`öåev32ifbe
(intrev32ifbe(is->length)+1);

148  
is
;

149 
	}
}

151 
	$öt£tMoveTaû
(
öt£t
 *
is
, 
uöt32_t
 
‰om
, uöt32_à
to
) {

152 *
§c
, *
d°
;

153 
uöt32_t
 
byãs
 = 
	`öåev32ifbe
(
is
->
Àngth
)-
‰om
;

154 
uöt32_t
 
ícodög
 = 
	`öåev32ifbe
(
is
->encoding);

156 i‡(
ícodög
 =
INTSET_ENC_INT64
) {

157 
§c
 = (
öt64_t
*)
is
->
c⁄ã¡s
+
‰om
;

158 
d°
 = (
öt64_t
*)
is
->
c⁄ã¡s
+
to
;

159 
byãs
 *(
öt64_t
);

160 } i‡(
ícodög
 =
INTSET_ENC_INT32
) {

161 
§c
 = (
öt32_t
*)
is
->
c⁄ã¡s
+
‰om
;

162 
d°
 = (
öt32_t
*)
is
->
c⁄ã¡s
+
to
;

163 
byãs
 *(
öt32_t
);

165 
§c
 = (
öt16_t
*)
is
->
c⁄ã¡s
+
‰om
;

166 
d°
 = (
öt16_t
*)
is
->
c⁄ã¡s
+
to
;

167 
byãs
 *(
öt16_t
);

169 
	`memmove
(
d°
,
§c
,
byãs
);

170 
	}
}

173 
öt£t
 *
	$öt£tAdd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, 
uöt8_t
 *
suc˚ss
) {

174 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

175 
uöt32_t
 
pos
;

176 i‡(
suc˚ss
) *success = 1;

181 i‡(
vÆíc
 > 
	`öåev32ifbe
(
is
->
ícodög
)) {

183  
	`öt£tUpgødeAndAdd
(
is
,
vÆue
);

188 i‡(
	`öt£tSórch
(
is
,
vÆue
,&
pos
)) {

189 i‡(
suc˚ss
) *success = 0;

190  
is
;

193 
is
 = 
	`öt£tResize
(is,
	`öåev32ifbe
(is->
Àngth
)+1);

194 i‡(
pos
 < 
	`öåev32ifbe
(
is
->
Àngth
)Ë
	`öt£tMoveTaû
(is,pos,pos+1);

197 
	`_öt£tSë
(
is
,
pos
,
vÆue
);

198 
is
->
Àngth
 = 
	`öåev32ifbe
(intrev32ifbe(is->length)+1);

199  
is
;

200 
	}
}

203 
öt£t
 *
	$öt£tRemove
(
öt£t
 *
is
, 
öt64_t
 
vÆue
, *
suc˚ss
) {

204 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

205 
uöt32_t
 
pos
;

206 i‡(
suc˚ss
) *success = 0;

208 i‡(
vÆíc
 <
	`öåev32ifbe
(
is
->
ícodög
Ë&& 
	`öt£tSórch
(is,
vÆue
,&
pos
)) {

209 
uöt32_t
 
Àn
 = 
	`öåev32ifbe
(
is
->
Àngth
);

212 i‡(
suc˚ss
) *success = 1;

215 i‡(
pos
 < (
Àn
-1)Ë
	`öt£tMoveTaû
(
is
,pos+1,pos);

216 
is
 = 
	`öt£tResize
(is,
Àn
-1);

217 
is
->
Àngth
 = 
	`öåev32ifbe
(
Àn
-1);

219  
is
;

220 
	}
}

223 
uöt8_t
 
	$öt£tFöd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
) {

224 
uöt8_t
 
vÆíc
 = 
	`_öt£tVÆueEncodög
(
vÆue
);

225  
vÆíc
 <
	`öåev32ifbe
(
is
->
ícodög
Ë&& 
	`öt£tSórch
(is,
vÆue
,
NULL
);

226 
	}
}

229 
öt64_t
 
	$öt£tR™dom
(
öt£t
 *
is
) {

230  
	`_öt£tGë
(
is
,
	`ønd
()%
	`öåev32ifbe
(is->
Àngth
));

231 
	}
}

235 
uöt8_t
 
	$öt£tGë
(
öt£t
 *
is
, 
uöt32_t
 
pos
, 
öt64_t
 *
vÆue
) {

236 i‡(
pos
 < 
	`öåev32ifbe
(
is
->
Àngth
)) {

237 *
vÆue
 = 
	`_öt£tGë
(
is
,
pos
);

241 
	}
}

244 
uöt32_t
 
	$öt£tLí
(
öt£t
 *
is
) {

245  
	`öåev32ifbe
(
is
->
Àngth
);

246 
	}
}

249 
size_t
 
	$öt£tBlobLí
(
öt£t
 *
is
) {

250  (
öt£t
)+
	`öåev32ifbe
(
is
->
Àngth
)*öåev32ifbe(is->
ícodög
);

251 
	}
}

	@src/vr_intset.h

1 #i‚de‡
_VR_INTSET_H_


2 
	#_VR_INTSET_H_


	)

4 
	~<°döt.h
>

6 
	söt£t
 {

7 
uöt32_t
 
	mícodög
;

8 
uöt32_t
 
	mÀngth
;

9 
öt8_t
 
	mc⁄ã¡s
[];

10 } 
	töt£t
;

12 
öt£t
 *
öt£tNew
();

13 
öt£t
 *
öt£tAdd
(öt£à*
is
, 
öt64_t
 
vÆue
, 
uöt8_t
 *
suc˚ss
);

14 
öt£t
 *
öt£tRemove
(öt£à*
is
, 
öt64_t
 
vÆue
, *
suc˚ss
);

15 
uöt8_t
 
öt£tFöd
(
öt£t
 *
is
, 
öt64_t
 
vÆue
);

16 
öt64_t
 
öt£tR™dom
(
öt£t
 *
is
);

17 
uöt8_t
 
öt£tGë
(
öt£t
 *
is
, 
uöt32_t
 
pos
, 
öt64_t
 *
vÆue
);

18 
uöt32_t
 
öt£tLí
(
öt£t
 *
is
);

19 
size_t
 
öt£tBlobLí
(
öt£t
 *
is
);

	@src/vr_listen.c

1 
	~<sys/°©.h
>

2 
	~<sys/un.h
>

4 
	~<vr_c‹e.h
>

6 
vr_li°í
 *

7 
	$vr_li°í_¸óã
(
sds
 
li°í_°r
)

9 
r°©us_t
 
°©us
;

10 
vr_li°í
 *
vli°í
;

11 
uöt8_t
 *
p
, *
«me
;

12 
uöt32_t
 
«mñí
;

14 i‡(
li°í_°r
 =
NULL
) {

15  
NULL
;

18 
vli°í
 = 
	`dÆloc
((
vr_li°í
));

19 i‡(
vli°í
 =
NULL
) {

20  
NULL
;

23 
vli°í
->
«me
 = 
NULL
;

24 
vli°í
->
p‹t
 = 0;

25 
	`mem£t
(&
vli°í
->
öfo
, 0, (vlisten->info));

26 
vli°í
->
sd
 = -1;

28 i‡(
li°í_°r
 == '/') {

29 
uöt8_t
 *
q
, *
°¨t
, *
≥rm
;

30 
uöt32_t
 
≥rmÀn
;

33 
p
 = 
li°í_°r
 + 
	`sd¶í
(listen_str) - 1;

34 
°¨t
 = 
li°í_°r
;

35 
q
 = 
	`vr_°ºchr
(
p
, 
°¨t
, ' ');

36 i‡(
q
 =
NULL
) {

38 
«me
 = 
li°í_°r
;

39 
«mñí
 = 
	`sd¶í
(
li°í_°r
);

41 
≥rm
 = 
q
 + 1;

42 
≥rmÀn
 = (
uöt32_t
)(
p
 - 
≥rm
 + 1);

44 
p
 = 
q
 - 1;

45 
«me
 = 
°¨t
;

46 
«mñí
 = (
uöt32_t
)(
p
 - 
°¨t
 + 1);

48 
î∫o
 = 0;

49 
vli°í
->
≥rm
 = (
mode_t
)
	`°πﬁ
((*Ìîm, 
NULL
, 8);

50 i‡(
î∫o
 || 
vli°í
->
≥rm
 > 0777) {

51 
	`log_îr‹
("config file hasán invalid fileÖermission in \"socket_pathÖermission\" format string");

52 
	`vr_li°í_de°roy
(
vli°í
);

53  
NULL
;

57 
uöt8_t
 *
q
, *
°¨t
, *
p‹t
;

58 
uöt32_t
 
p‹éí
;

61 
p
 = 
li°í_°r
 + 
	`sd¶í
(listen_str) - 1;

62 
°¨t
 = 
li°í_°r
;

63 
q
 = 
	`vr_°ºchr
(
p
, 
°¨t
, ':');

64 i‡(
q
 =
NULL
) {

65 
	`log_îr‹
("config file hasán invalid \"hostname:port\" format string");

66 
	`vr_li°í_de°roy
(
vli°í
);

67  
NULL
;

70 
p‹t
 = 
q
 + 1;

71 
p‹éí
 = (
uöt32_t
)(
p
 - 
p‹t
 + 1);

73 
p
 = 
q
 - 1;

75 
«me
 = 
°¨t
;

76 
«mñí
 = (
uöt32_t
)(
p
 - 
°¨t
 + 1);

78 
vli°í
->
p‹t
 = 
	`vr_©oi
’‹t, 
p‹éí
);

79 i‡(
vli°í
->
p‹t
 < 0 || !
	`vr_vÆid_p‹t
(vlisten->port)) {

80 
	`log_îr‹
("config file hasán invalidÖort in \"hostname:port\" format string");

81 
	`vr_li°í_de°roy
(
vli°í
);

82  
NULL
;

86 
vli°í
->
«me
 = 
	`sd¢ewÀn
“ame, 
«mñí
);

87 i‡(
vli°í
->
«me
 =
NULL
) {

88 
	`log_îr‹
("createá sds string failed: out of memory.");

89 
	`vr_li°í_de°roy
(
vli°í
);

90  
NULL
;

93 
°©us
 = 
	`vr_ªsﬁve
(
vli°í
->
«me
, vli°í->
p‹t
, &vli°í->
öfo
);

94 i‡(
°©us
 !
VR_OK
) {

95 
	`vr_li°í_de°roy
(
vli°í
);

96  
NULL
;

99  
vli°í
;

100 
	}
}

103 
	$vr_li°í_de°roy
(
vr_li°í
 *
vli°⁄
)

105 i‡(
vli°⁄
 =
NULL
) {

109 i‡(
vli°⁄
->
«me
) {

110 
	`sds‰ì
(
vli°⁄
->
«me
);

111 
vli°⁄
->
«me
 = 
NULL
;

114 i‡(
vli°⁄
->
sd
 > 0) {

115 
	`˛o£
(
vli°⁄
->
sd
);

116 
vli°⁄
->
sd
 = -1;

119 
	`d‰ì
(
vli°⁄
);

120 
	}
}

122 
r°©us_t


123 
	$vr_li°í_ªu£
(
vr_li°í
 *
p
)

125 
r°©us_t
 
°©us
;

126 
sockaddr_un
 *
un
;

128 
p
->
öfo
.
Ámûy
) {

129 
AF_INET
:

130 
AF_INET6
:

131 
°©us
 = 
	`vr_£t_ªu£addr
(
p
->
sd
);

134 
AF_UNIX
:

140 
un
 = (
sockaddr_un
 *Ë&
p
->
öfo
.
addr
;

141 
	`u∆ök
(
un
->
sun_∑th
);

142 
°©us
 = 
VR_OK
;

146 
	`NOT_REACHED
();

147 
°©us
 = 
VR_ERROR
;

150  
°©us
;

151 
	}
}

153 
r°©us_t


154 
	$vr_li°í_begö
(
vr_li°í
 *
vli°í
)

156 
r°©us_t
 
°©us
;

158 
vli°í
->
sd
 = 
	`sockë
(vli°í->
öfo
.
Ámûy
, 
SOCK_STREAM
, 0);

159 i‡(
vli°í
->
sd
 < 0) {

160 
	`log_îr‹
("sockë faûed: %s", 
	`°ªº‹
(
î∫o
));

161  
VR_ERROR
;

164 
°©us
 = 
	`vr_li°í_ªu£
(
vli°í
);

165 i‡(
°©us
 < 0) {

166 
	`log_îr‹
("reuse ofáddr %s forÜistening onÖ %d failed: %s",

167 
vli°í
->
«me
, vli°í->
sd
, 
	`°ªº‹
(
î∫o
));

168  
VR_ERROR
;

171 
°©us
 = 
	`böd
(
vli°í
->
sd
, (
sockaddr
 *)&vli°í->
öfo
.
addr
, vli°í->öfo.
addæí
);

172 i‡(
°©us
 < 0) {

173 
	`log_îr‹
("böd o¿∞%dÅÿadd∏%†Áûed: %s", 
vli°í
->
sd
,

174 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

175  
VR_ERROR
;

178 i‡(
vli°í
->
öfo
.
Ámûy
 =
AF_UNIX
 && vli°í->
≥rm
) {

179 
sockaddr_un
 *
un
 = (sockaddr_u¿*)&
vli°í
->
öfo
.
addr
;

180 
°©us
 = 
	`chmod
(
un
->
sun_∑th
, 
vli°í
->
≥rm
);

181 i‡(
°©us
 < 0) {

182 
	`log_îr‹
("chmod o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

183 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

184  
VR_ERROR
;

188 
°©us
 = 
	`li°í
(
vli°í
->
sd
, 512);

189 i‡(
°©us
 < 0) {

190 
	`log_îr‹
("li°í o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

191 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

192  
VR_ERROR
;

195 
°©us
 = 
	`vr_£t_n⁄blockög
(
vli°í
->
sd
);

196 i‡(
°©us
 < 0) {

197 
	`log_îr‹
("£àn⁄block o¿∞%d o¿add∏%†Áûed: %s", 
vli°í
->
sd
,

198 
vli°í
->
«me
, 
	`°ªº‹
(
î∫o
));

199  
VR_ERROR
;

202  
VR_OK
;

203 
	}
}

206 
	$vr_li°í_ac˚±
(
vr_li°í
 *
vli°í
)

208 
r°©us_t
 
°©us
;

209 
sd
;

210 
max˛õ¡s
;

212 
	`ASSERT
(
vli°í
->
sd
 > 0);

214 
	`log_debug
(
LOG_DEBUG
,"client_accept");

216 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
max˛õ¡s
);

218 
sd
 = 
	`ac˚±
(
vli°í
->sd, 
NULL
, NULL);

219 i‡(
sd
 < 0) {

220 i‡(
î∫o
 =
EINTR
) {

221 
	`log_debug
(
LOG_VERB
, "ac˚± o¿∞%dÇŸÑódy -Éöå", 
vli°í
->
sd
);

225 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||Éºnÿ=
ECONNABORTED
) {

226 
	`log_debug
(
LOG_VERB
, "ac˚± o¿∞%dÇŸÑódy -Éagaö", 
vli°í
->
sd
);

230 i‡(
î∫o
 =
EMFILE
 ||Éºnÿ=
ENFILE
) {

231 
	`log_debug
(
LOG_CRIT
, "accept onÖ %d "

234 
vli°í
->
sd
, 
max˛õ¡s
,

235 
	`cuºít_˛õ¡s
(), 
	`°ªº‹
(
î∫o
));

239 
	`log_w¨n
("ac˚± o¿∞%d faûed: %s", 
vli°í
->
sd
, 
	`°ªº‹
(
î∫o
));

247 i‡(
	`cuºít_˛õ¡s
(Ë>
max˛õ¡s
) {

248 
	`log_debug
(
LOG_CRIT
, "client connections %dÉxceedÜimit %d",

249 
	`cuºít_˛õ¡s
(), 
max˛õ¡s
);

250 
°©us
 = 
	`˛o£
(
sd
);

251 i‡(
°©us
 < 0) {

252 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

255 
	`upd©e_°©s_add
(
ma°î
.
vñ
.
°©s
, 
ªje˘ed_c⁄n
, 1);

260  
sd
;

261 
	}
}

	@src/vr_listen.h

1 #i‚de‡
_VR_LISTEN_H_


2 
	#_VR_LISTEN_H_


	)

4 
	svr_li°í
 {

5 
sds
 
	m«me
;

6 
	mp‹t
;

7 
mode_t
 
	m≥rm
;

8 
socköfo
 
	möfo
;

9 
	msd
;

10 }
	tvr_li°í
;

12 
vr_li°í
 *
vr_li°í_¸óã
(
sds
 
löãn_°r
);

13 
vr_li°í_de°roy
(
vr_li°í
 *
vli°⁄
);

14 
r°©us_t
 
vr_li°í_begö
(
vr_li°í
 *
vli°í
);

15 
vr_li°í_ac˚±
(
vr_li°í
 *
vli°í
);

	@src/vr_lzf.h

1 #i‚de‡
_VR_LZF_H_


2 
	#_VR_LZF_H_


	)

13 
	#LZF_VERSION
 0x0105

	)

41 
lzf_com¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

42 *
out_d©a
, 
out_Àn
);

60 
lzf_decom¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

61 *
out_d©a
, 
out_Àn
);

	@src/vr_lzfP.h

1 #i‚de‡
_VR_LZFP_H_


2 
	#_VR_LZFP_H_


	)

4 
	#STANDALONE
 1

	)

6 #i‚de‡
STANDALONE


7 
	~<vr_lzf.h
>

18 #i‚de‡
HLOG


19 
	#HLOG
 16

	)

27 #i‚de‡
VERY_FAST


28 
	#VERY_FAST
 1

	)

38 #i‚de‡
ULTRA_FAST


39 
	#ULTRA_FAST
 0

	)

45 #i‚de‡
STRICT_ALIGN


46 
	#STRICT_ALIGN
 !(
	`deföed
(
__i386
Ë|| deföed (
__amd64
))

	)

54 #i‚de‡
INIT_HTAB


55 
	#INIT_HTAB
 0

	)

63 #i‚de‡
AVOID_ERRNO


64 
	#AVOID_ERRNO
 0

	)

72 #i‚de‡
LZF_STATE_ARG


73 
	#LZF_STATE_ARG
 0

	)

84 #i‚de‡
CHECK_INPUT


85 
	#CHECK_INPUT
 1

	)

98 #ifde‡
__˝lu•lus


99 
	~<c°rög
>

100 
	~<˛imôs
>

101 
usög
 
«me•a˚
 
	g°d
;

103 
	~<°rög.h
>

104 
	~<limôs.h
>

107 #i‚de‡
LZF_USE_OFFSETS


108 #i‡
deföed
 (
WIN32
)

109 
	#LZF_USE_OFFSETS
 
	`deföed
(
_M_X64
)

	)

111 #i‡
__˝lu•lus
 > 199711L

112 
	~<c°döt
>

114 
	~<°döt.h
>

116 
	#LZF_USE_OFFSETS
 (
UINTPTR_MAX
 > 0xffffffffU)

	)

120 
	tu8
;

122 #i‡
LZF_USE_OFFSETS


123 
	#LZF_HSLOT_BIAS
 ((c⁄° 
u8
 *)
ö_d©a
)

	)

124 
	tLZF_HSLOT
;

126 
	#LZF_HSLOT_BIAS
 0

	)

127 c⁄° 
	tu8
 *
	tLZF_HSLOT
;

130 
LZF_HSLOT
 
	tLZF_STATE
[1 << (
HLOG
)];

132 #i‡!
STRICT_ALIGN


134 #i‡
USHRT_MAX
 == 65535

135 
	tu16
;

136 #ñi‡
UINT_MAX
 == 65535

137 
	tu16
;

139 #unde‡
STRICT_ALIGN


140 
	#STRICT_ALIGN
 1

	)

144 #i‡
ULTRA_FAST


145 #unde‡
VERY_FAST


	@src/vr_lzf_c.c

1 
	~<vr_lzfP.h
>

3 
	#HSIZE
 (1 << (
HLOG
))

	)

11 #i‚de‡
FRST


12 
	#FRST
(
p
Ë((’[0]Ë<< 8Ë|Ö[1])

	)

13 
	#NEXT
(
v
,
p
Ë(((vË<< 8Ë|Ö[2])

	)

14 #i‡
ULTRA_FAST


15 
	#IDX
(
h
Ë((–h >> (3*8 - 
HLOG
)Ë- h ) & (
HSIZE
 - 1))

	)

16 #ñi‡
VERY_FAST


17 
	#IDX
(
h
Ë((–h >> (3*8 - 
HLOG
)Ë- h*5Ë& (
HSIZE
 - 1))

	)

19 
	#IDX
(
h
Ë((((h ^ (h << 5)Ë>> (3*8 - 
HLOG
)Ë- h*5Ë& (
HSIZE
 - 1))

	)

33 
	#FRST
(
p
Ë’[0] << 5Ë^Ö[1]

	)

34 
	#NEXT
(
v
,
p
Ë((vË<< 5Ë^Ö[2]

	)

35 
	#IDX
(
h
Ë((hË& (
HSIZE
 - 1))

	)

38 
	#MAX_LIT
 (1 << 5)

	)

39 
	#MAX_OFF
 (1 << 13)

	)

40 
	#MAX_REF
 ((1 << 8Ë+ (1 << 3))

	)

42 #i‡
__GNUC__
 >= 3

43 
	#ex≥˘
(
ex¥
,
vÆue
Ë
	`__buûtö_ex≥˘
 (”x¥),(vÆue))

	)

44 
	#ölöe
 
ölöe


	)

46 
	#ex≥˘
(
ex¥
,
vÆue
Ë”x¥)

	)

47 
	#ölöe
 

	)

50 
	#ex≥˘_Ál£
(
ex¥
Ë
	`ex≥˘
 (”x¥Ë!0, 0)

	)

51 
	#ex≥˘_åue
(
ex¥
Ë
	`ex≥˘
 (”x¥Ë!0, 1)

	)

63 
lzf_com¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

64 *
out_d©a
, 
out_Àn


65 #i‡
LZF_STATE_ARG


66 , 
LZF_STATE
 
hèb


70 #i‡!
LZF_STATE_ARG


71 
LZF_STATE
 
	ghèb
;

73 c⁄° 
u8
 *
	gù
 = (c⁄° u8 *)
ö_d©a
;

74 
u8
 *
	g›
 = (u8 *)
out_d©a
;

75 c⁄° 
u8
 *
	gö_íd
 = 
ù
 + 
ö_Àn
;

76 
u8
 *
	gout_íd
 = 
›
 + 
out_Àn
;

77 c⁄° 
u8
 *
	gªf
;

86 #i‡
deföed
 (
WIN32
Ë&& deföed (
_M_X64
)

87 
_öt64
 
	goff
;

89 
	goff
;

91 
	ghvÆ
;

92 
	glô
;

94 i‡(!
	gö_Àn
 || !
	gout_Àn
)

97 #i‡
INIT_HTAB


98 
mem£t
 (
hèb
, 0,  (htab));

101 
	glô
 = 0; 
	g›
++;

103 
	ghvÆ
 = 
FRST
 (
ù
);

104 
	gù
 < 
	gö_íd
 - 2)

106 
LZF_HSLOT
 *
	gh¶Ÿ
;

108 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

109 
	gh¶Ÿ
 = 
hèb
 + 
IDX
 (
hvÆ
);

110 
	gªf
 = *
h¶Ÿ
 + 
LZF_HSLOT_BIAS
; *
	gh¶Ÿ
 = 
ù
 - LZF_HSLOT_BIAS;

113 #i‡
INIT_HTAB


114 && 
	gªf
 < 
	gù


116 && (
	goff
 = 
ù
 - 
ªf
 - 1Ë< 
MAX_OFF


117 && 
ªf
 > (
u8
 *)
ö_d©a


118 && 
ªf
[2] =
ù
[2]

119 #i‡
STRICT_ALIGN


120 && ((
ªf
[1] << 8Ë|Ñef[0]Ë=((
ù
[1] << 8) | ip[0])

122 && *(
u16
 *)
ªf
 =*(u16 *)
ù


127 
Àn
 = 2;

128 
	gmaxÀn
 = 
ö_íd
 - 
ù
 - 
Àn
;

129 
	gmaxÀn
 = 
maxÀn
 > 
MAX_REF
 ? MAX_REF : maxlen;

131 i‡(
ex≥˘_Ál£
 (
›
 + 3 + 1 >
out_íd
))

132 i‡(
›
 - !
lô
 + 3 + 1 >
out_íd
)

135 
	g›
 [- 
lô
 - 1] =Üit - 1;

136 
	g›
 -!
lô
;

140 i‡(
ex≥˘_åue
 (
maxÀn
 > 16))

142 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

143 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

144 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

145 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

147 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

148 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

149 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

150 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

152 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

153 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

154 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

155 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

157 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

158 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

159 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

160 
	gÀn
++; i‡(
	gªf
 [
Àn
] !
ù
 [len]) ;

164 
	gÀn
++;

165 
	gÀn
 < 
	gmaxÀn
 && 
	gªf
[
Àn
] =
ù
[len]);

170 
	gÀn
 -= 2;

171 
	gù
++;

173 i‡(
	gÀn
 < 7)

175 *
	g›
++ = (
off
 >> 8Ë+ (
Àn
 << 5);

179 *
	g›
++ = (
off
 >> 8) + ( 7 << 5);

180 *
	g›
++ = 
Àn
 - 7;

183 *
	g›
++ = 
off
;

185 
	glô
 = 0; 
	g›
++;

187 
	gù
 +
Àn
 + 1;

189 i‡(
ex≥˘_Ál£
 (
ù
 >
ö_íd
 - 2))

192 #i‡
ULTRA_FAST
 || 
VERY_FAST


193 --
	gù
;

194 #i‡
VERY_FAST
 && !
ULTRA_FAST


195 --
	gù
;

197 
	ghvÆ
 = 
FRST
 (
ù
);

199 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

200 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

201 
	gù
++;

203 #i‡
VERY_FAST
 && !
ULTRA_FAST


204 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

205 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

206 
	gù
++;

209 
	gù
 -
Àn
 + 1;

213 
	ghvÆ
 = 
NEXT
 (
hvÆ
, 
ù
);

214 
	ghèb
[
IDX
 (
hvÆ
)] = 
ù
 - 
LZF_HSLOT_BIAS
;

215 
	gù
++;

217 
	gÀn
--);

223 i‡(
ex≥˘_Ál£
 (
›
 >
out_íd
))

226 
	glô
++; *
	g›
++ = *
ù
++;

228 i‡(
ex≥˘_Ál£
 (
lô
 =
MAX_LIT
))

230 
›
 [- 
lô
 - 1] =Üit - 1;

231 
	glô
 = 0; 
	g›
++;

236 i‡(
	g›
 + 3 > 
	gout_íd
)

239 
	gù
 < 
	gö_íd
)

241 
	glô
++; *
	g›
++ = *
ù
++;

243 i‡(
ex≥˘_Ál£
 (
lô
 =
MAX_LIT
))

245 
›
 [- 
lô
 - 1] =Üit - 1;

246 
	glô
 = 0; 
	g›
++;

250 
	g›
 [- 
lô
 - 1] =Üit - 1;

251 
	g›
 -!
lô
;

253  
	g›
 - (
	gu8
 *)
	gout_d©a
;

	@src/vr_lzf_d.c

1 
	~<vr_lzfP.h
>

3 #i‡
AVOID_ERRNO


4 
	#SET_ERRNO
(
n
)

	)

6 
	~<î∫o.h
>

7 
	#SET_ERRNO
(
n
Ë
î∫o
 = (n)

	)

10 #i‡
USE_REP_MOVSB


11 #i‡(
__i386
 || 
__amd64
Ë&& 
__GNUC__
 >= 3

12 
	#lzf_movsb
(
d°
, 
§c
, 
Àn
) \

13 
	`asm
 ("rep movsb" \

14 : "=D" (
d°
), "=S" (
§c
), "=c" (
Àn
) \

15 : "0" (
d°
), "1" (
§c
), "2" (
Àn
));

	)

20 
	$lzf_decom¥ess
 (c⁄° *c⁄° 
ö_d©a
, 
ö_Àn
,

21 *
out_d©a
, 
out_Àn
)

23 
u8
 c⁄° *
ù
 = (c⁄° u8 *)
ö_d©a
;

24 
u8
 *
›
 = (u8 *)
out_d©a
;

25 
u8
 c⁄° *c⁄° 
ö_íd
 = 
ù
 + 
ö_Àn
;

26 
u8
 *c⁄° 
out_íd
 = 
›
 + 
out_Àn
;

30 
˘æ
 = *
ù
++;

32 i‡(
˘æ
 < (1 << 5))

34 
˘æ
++;

36 i‡(
›
 + 
˘æ
 > 
out_íd
)

38 
	`SET_ERRNO
 (
E2BIG
);

42 #i‡
CHECK_INPUT


43 i‡(
ù
 + 
˘æ
 > 
ö_íd
)

45 
	`SET_ERRNO
 (
EINVAL
);

50 #ifde‡
lzf_movsb


51 
	`lzf_movsb
 (
›
, 
ù
, 
˘æ
);

53 
˘æ
)

55 32: *
›
++ = *
ù
++; 31: *op++ = *ip++; 30: *op++ = *ip++; 29: *op++ = *ip++;

56 28: *
›
++ = *
ù
++; 27: *op++ = *ip++; 26: *op++ = *ip++; 25: *op++ = *ip++;

57 24: *
›
++ = *
ù
++; 23: *op++ = *ip++; 22: *op++ = *ip++; 21: *op++ = *ip++;

58 20: *
›
++ = *
ù
++; 19: *op++ = *ip++; 18: *op++ = *ip++; 17: *op++ = *ip++;

59 16: *
›
++ = *
ù
++; 15: *op++ = *ip++; 14: *op++ = *ip++; 13: *op++ = *ip++;

60 12: *
›
++ = *
ù
++; 11: *op++ = *ip++; 10: *op++ = *ip++; 9: *op++ = *ip++;

61 8: *
›
++ = *
ù
++; 7: *op++ = *ip++; 6: *op++ = *ip++; 5: *op++ = *ip++;

62 4: *
›
++ = *
ù
++; 3: *op++ = *ip++; 2: *op++ = *ip++; 1: *op++ = *ip++;

68 
Àn
 = 
˘æ
 >> 5;

70 
u8
 *
ªf
 = 
›
 - ((
˘æ
 & 0x1f) << 8) - 1;

72 #i‡
CHECK_INPUT


73 i‡(
ù
 >
ö_íd
)

75 
	`SET_ERRNO
 (
EINVAL
);

79 i‡(
Àn
 == 7)

81 
Àn
 +*
ù
++;

82 #i‡
CHECK_INPUT


83 i‡(
ù
 >
ö_íd
)

85 
	`SET_ERRNO
 (
EINVAL
);

91 
ªf
 -*
ù
++;

93 i‡(
›
 + 
Àn
 + 2 > 
out_íd
)

95 
	`SET_ERRNO
 (
E2BIG
);

99 i‡(
ªf
 < (
u8
 *)
out_d©a
)

101 
	`SET_ERRNO
 (
EINVAL
);

105 #ifde‡
lzf_movsb


106 
Àn
 += 2;

107 
	`lzf_movsb
 (
›
, 
ªf
, 
Àn
);

109 
Àn
)

112 
Àn
 += 2;

114 i‡(
›
 >
ªf
 + 
Àn
)

117 
	`mem˝y
 (
›
, 
ªf
, 
Àn
);

118 
›
 +
Àn
;

124 *
›
++ = *
ªf
++;

125 --
Àn
);

130 9: *
›
++ = *
ªf
++;

131 8: *
›
++ = *
ªf
++;

132 7: *
›
++ = *
ªf
++;

133 6: *
›
++ = *
ªf
++;

134 5: *
›
++ = *
ªf
++;

135 4: *
›
++ = *
ªf
++;

136 3: *
›
++ = *
ªf
++;

137 2: *
›
++ = *
ªf
++;

138 1: *
›
++ = *
ªf
++;

139 0: *
›
++ = *
ªf
++;

140 *
›
++ = *
ªf
++;

145 
ù
 < 
ö_íd
);

147  
›
 - (
u8
 *)
out_d©a
;

148 
	}
}

	@src/vr_master.c

1 
	~<vr_c‹e.h
>

3 
vr_ma°î
 
	gma°î
;

5 
£tup_ma°î
();

6 *
ma°î_thªad_run
(*
¨gs
);

9 
	$ma°î_öô
(
vr_c⁄f
 *
c⁄f
)

11 
r°©us_t
 
°©us
;

12 
uöt32_t
 
j
;

13 
sds
 *
ho°
, 
li°í_°r
;

14 
vr_li°í
 **
vli°í
;

15 
thªads_num
;

16 
fûñimô
;

18 
ma°î
.
cbsul
 = 
NULL
;

19 
	`±hªad_muãx_öô
(&
ma°î
.
cbsuŒock
, 
NULL
);

21 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads_num
);

22 
fûñimô
 = 
thªads_num
*2+
CONFIG_MIN_RESERVED_FDS
;

23 
	`vr_evíéo›_öô
(&
ma°î
.
vñ
,
fûñimô
);

24 
ma°î
.
vñ
.
thªad
.
fun_run
 = 
ma°î_thªad_run
;

26 
	`d¨øy_öô
(&
ma°î
.
li°ís
,
	`d¨øy_n
(&
c£rvî
->
böds
),(
vr_li°í
*));

28 
j
 = 0; j < 
	`d¨øy_n
(&
c£rvî
->
böds
); j ++) {

29 
ho°
 = 
	`d¨øy_gë
(&
c£rvî
->
böds
,
j
);

30 
li°í_°r
 = 
	`sdsdup
(*
ho°
);

31 
li°í_°r
 = 
	`sdsˇtfmt
÷i°í_°r, ":%i", 
c£rvî
->
p‹t
);

32 
vli°í
 = 
	`d¨øy_push
(&
ma°î
.
li°ís
);

33 *
vli°í
 = 
	`vr_li°í_¸óã
(
li°í_°r
);

34 i‡(*
vli°í
 =
NULL
) {

35 
	`d¨øy_p›
(&
ma°î
.
li°ís
);

36 
	`log_îr‹
("Cª©êli°í %†Áûed", 
li°í_°r
);

37 
	`sds‰ì
(
li°í_°r
);

38  
VR_ERROR
;

40 
	`sds‰ì
(
li°í_°r
);

43 
j
 = 0; j < 
	`d¨øy_n
(&
ma°î
.
li°ís
); j ++) {

44 
vli°í
 = 
	`d¨øy_gë
(&
ma°î
.
li°ís
, 
j
);

45 
°©us
 = 
	`vr_li°í_begö
(*
vli°í
);

46 i‡(
°©us
 !
VR_OK
) {

47 
	`log_îr‹
("BegöÜi°íÅÿ%†Áûed", (*
vli°í
)->
«me
);

48  
VR_ERROR
;

52 
ma°î
.
cbsul
 = 
	`dli°Cª©e
();

53 i‡(
ma°î
.
cbsul
 =
NULL
) {

54 
	`log_îr‹
("CreateÜist failed: out of memory");

55  
VR_ENOMEM
;

58 
	`£tup_ma°î
();

60  
VR_OK
;

61 
	}
}

64 
	$ma°î_deöô
()

66 
vr_li°í
 **
vli°í
;

68 
	`vr_evíéo›_deöô
(&
ma°î
.
vñ
);

70 
	`d¨øy_n
(&
ma°î
.
li°ís
) > 0) {

71 
vli°í
 = 
	`d¨øy_p›
(&
ma°î
.
li°ís
);

72 
	`vr_li°í_de°roy
(*
vli°í
);

74 
	`d¨øy_deöô
(&
ma°î
.
li°ís
);

76 
	}
}

79 
	$˛õ¡_ac˚±
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

80 
sd
;

81 
vr_li°í
 *
vli°í
 = 
¥ivd©a
;

83 (
sd
 = 
	`vr_li°í_ac˚±
(
vli°í
)) > 0) {

84 
	`di•©ch_c⁄n_√w
(
vli°í
, 
sd
);

86 
	}
}

89 
	$cbsul_push
(
c⁄nsw≠unô
 *
su
)

91 
	`±hªad_muãx_lock
(&
ma°î
.
cbsuŒock
);

92 
	`dli°Push
(
ma°î
.
cbsul
, 
su
);

93 
	`±hªad_muãx_u∆ock
(&
ma°î
.
cbsuŒock
);

94 
	}
}

96 
c⁄nsw≠unô
 *

97 
	$cbsul_p›
()

99 
c⁄nsw≠unô
 *
su
 = 
NULL
;

101 
	`±hªad_muãx_lock
(&
ma°î
.
cbsuŒock
);

102 
su
 = 
	`dli°P›
(
ma°î
.
cbsul
);

103 
	`±hªad_muãx_u∆ock
(&
ma°î
.
cbsuŒock
);

105  
su
;

106 
	}
}

109 
	$di•©ch_c⁄n_exi°
(
˛õ¡
 *
c
, 
tid
)

111 
c⁄nsw≠unô
 *
su
 = 
	`csui_√w
();

112 
buf
[1];

113 
vr_w‹kî
 *
w‹kî
;

115 i‡(
su
 =
NULL
) {

116 
	`‰ìClõ¡
(
c
);

118 
	`log_îr‹
("FailedÅoállocate memory for connection swap object\n");

122 
su
->
num
 = 
tid
;

123 
su
->
d©a
 = 
c
;

125 
	`u∆ökClõ¡FromEvíéo›
(
c
);

127 
	`cbsul_push
(
su
);

129 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
c
->
curidx
);

132 
buf
[0] = 'b';

133 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[1], 
buf
, 1) != 1) {

134 
	`log_îr‹
("NoticeÅhe worker failed.");

136 
	}
}

139 
	$thªad_evít_¥o˚ss
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

141 
r°©us_t
 
°©us
;

142 
vr_w‹kî
 *
w‹kî
 = 
¥ivd©a
;

143 
buf
[1];

144 
idx
;

145 
˛õ¡
 *
c
;

146 
c⁄nsw≠unô
 *
su
;

148 
	`ASSERT
(
ñ
 =
ma°î
.
vñ
.el);

149 
	`ASSERT
(
fd
 =
w‹kî
->
sockë∑ús
[0]);

151 i‡(
	`vr_ªad
(
fd
, 
buf
, 1) != 1) {

152 
	`log_w¨n
("Can'tÑead for worker(id:%d) socketpairs[1](%d)",

153 
w‹kî
->
vñ
.
thªad
.
id
, 
fd
);

154 
buf
[0] = 'b';

157 
buf
[0]) {

159 
su
 = 
	`cbsul_p›
();

160 i‡(
su
 =
NULL
) {

161 
	`log_w¨n
("Pop from connection back swapÜist isÇull");

165 
idx
 = 
su
->
num
;

166 
su
->
num
 = 
w‹kî
->
id
;

167 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
idx
);

168 
	`csul_push
(
w‹kî
, 
su
);

171 
buf
[0] = 'j';

172 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[0], 
buf
, 1) != 1) {

173 
	`log_îr‹
("NoticeÅhe worker failed.");

177 
	`log_îr‹
("readÉrror char '%c' for worker(id:%d) socketpairs[0](%d)",

178 
buf
[0], 
w‹kî
->
vñ
.
thªad
.
id
, w‹kî->
sockë∑ús
[1]);

181 
	}
}

184 
	$£tup_ma°î
()

186 
r°©us_t
 
°©us
;

187 
uöt32_t
 
j
;

188 
vr_li°í
 **
vli°í
;

189 
vr_w‹kî
 *
w‹kî
;

191 
j
 = 0; j < 
	`d¨øy_n
(&
w‹kîs
); j ++) {

192 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
j
);

193 
°©us
 = 
	`´Cª©eFûeEvít
(
ma°î
.
vñ
.
ñ
, 
w‹kî
->
sockë∑ús
[0],

194 
AE_READABLE
, 
thªad_evít_¥o˚ss
, 
w‹kî
);

195 i‡(
°©us
 =
AE_ERR
) {

196 
	`log_îr‹
("UnrecoverableÉrror creating master ipfd fileÉvent.");

197  
VR_ERROR
;

201 
j
 = 0; j < 
	`d¨øy_n
(&
ma°î
.
li°ís
); j ++) {

202 
vli°í
 = 
	`d¨øy_gë
(&
ma°î
.
li°ís
,
j
);

203 
°©us
 = 
	`´Cª©eFûeEvít
(
ma°î
.
vñ
.
ñ
, (*
vli°í
)->
sd
, 
AE_READABLE
,

204 
˛õ¡_ac˚±
, *
vli°í
);

205 i‡(
°©us
 =
AE_ERR
) {

206 
	`log_îr‹
("UnrecoverableÉrror creating master ipfd fileÉvent.");

207  
VR_ERROR
;

211  
VR_OK
;

212 
	}
}

215 
	$ma°î_thªad_run
(*
¨gs
)

218 
	`´Maö
(
ma°î
.
vñ
.
ñ
);

220  
NULL
;

221 
	}
}

224 
	$ma°î_run
()

226 
	`vr_thªad_°¨t
(&
ma°î
.
vñ
.
thªad
);

227  
VR_OK
;

228 
	}
}

	@src/vr_master.h

1 #i‚de‡
_VR_MASTER_H_


2 
	#_VR_MASTER_H_


	)

4 
	svr_ma°î
 {

6 
vr_evíéo›
 
	mvñ
;

8 
d¨øy
 
	mli°ís
;

10 
dli°
 *
	mcbsul
;

11 
±hªad_muãx_t
 
	mcbsuŒock
;

12 }
	tvr_ma°î
;

14 
vr_ma°î
 
ma°î
;

16 
ma°î_öô
(
vr_c⁄f
 *
c⁄f
);

17 
ma°î_deöô
();

19 
di•©ch_c⁄n_exi°
(
˛õ¡
 *
c
, 
tid
);

21 
ma°î_run
();

	@src/vr_multi.c

1 
	~<vr_c‹e.h
>

15 
	sw©chedKey
 {

16 
robj
 *
	mkey
;

17 
ªdisDb
 *
	mdb
;

18 } 
	tw©chedKey
;

22 
	$unw©chAŒKeys
(
˛õ¡
 *
c
) {

23 
dli°Iãr
 
li
;

24 
dli°Node
 *
 
;

26 i‡(
	`dli°Lígth
(
c
->
w©ched_keys
) == 0) ;

27 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li
);

28 (
 
 = 
	`dli°Next
(&
li
))) {

29 
dli°
 *
˛õ¡s
;

30 
w©chedKey
 *
wk
;

34 
wk
 = 
	`dli°NodeVÆue
(
 
);

35 
˛õ¡s
 = 
	`di˘FëchVÆue
(
wk
->
db
->
w©ched_keys
, wk->
key
);

36 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
˛õ¡s
 != NULL);

37 
	`dli°DñNode
(
˛õ¡s
,
	`dli°SórchKey
(˛õ¡s,
c
));

39 i‡(
	`dli°Lígth
(
˛õ¡s
) == 0)

40 
	`di˘Dñëe
(
wk
->
db
->
w©ched_keys
, wk->
key
);

42 
	`dli°DñNode
(
c
->
w©ched_keys
,
 
);

43 
	`de¸RefCou¡
(
wk
->
key
);

44 
	`d‰ì
(
wk
);

46 
	}
}

49 
	$öôClõ¡Mu…iSèã
(
˛õ¡
 *
c
) {

50 
c
->
m°©e
.
comm™ds
 = 
NULL
;

51 
c
->
m°©e
.
cou¡
 = 0;

52 
	}
}

55 
	$‰ìClõ¡Mu…iSèã
(
˛õ¡
 *
c
) {

56 
j
;

58 
j
 = 0; j < 
c
->
m°©e
.
cou¡
; j++) {

59 
i
;

60 
mu…iCmd
 *
mc
 = 
c
->
m°©e
.
comm™ds
+
j
;

62 
i
 = 0; i < 
mc
->
¨gc
; i++)

63 
	`de¸RefCou¡
(
mc
->
¨gv
[
i
]);

64 
	`d‰ì
(
mc
->
¨gv
);

66 i‡(
c
->
m°©e
.
comm™ds
Ë
	`d‰ì
(c->mstate.commands);

67 
	}
}

70 
	$queueMu…iComm™d
(
˛õ¡
 *
c
) {

71 
mu…iCmd
 *
mc
;

72 
j
;

74 
c
->
m°©e
.
comm™ds
 = 
	`dªÆloc
(c->mstate.commands,

75 (
mu…iCmd
)*(
c
->
m°©e
.
cou¡
+1));

76 
mc
 = 
c
->
m°©e
.
comm™ds
+c->m°©e.
cou¡
;

77 
mc
->
cmd
 = 
c
->cmd;

78 
mc
->
¨gc
 = 
c
->argc;

79 
mc
->
¨gv
 = 
	`dÆloc
((
robj
*)*
c
->
¨gc
);

80 
	`mem˝y
(
mc
->
¨gv
,
c
->¨gv,(
robj
*)*c->
¨gc
);

81 
j
 = 0; j < 
c
->
¨gc
; j++)

82 
	`ö¸RefCou¡
(
mc
->
¨gv
[
j
]);

83 
c
->
m°©e
.
cou¡
++;

84 
	}
}

88 
	$ÊagTønß˘i⁄
(
˛õ¡
 *
c
) {

89 i‡(
c
->
Êags
 & 
CLIENT_MULTI
)

90 
c
->
Êags
 |
CLIENT_DIRTY_EXEC
;

91 
	}
}

93 
	$execComm™d
(
˛õ¡
 *
c
) {

94 
	`addRïly
(
c
,
sh¨ed
.
ok
);

95 
	}
}

97 
	$disˇrdComm™d
(
˛õ¡
 *
c
) {

98 i‡(!(
c
->
Êags
 & 
CLIENT_MULTI
)) {

99 
	`addRïlyEº‹
(
c
,"DISCARD without MULTI");

102 
	`disˇrdTønß˘i⁄
(
c
);

103 
	`addRïly
(
c
,
sh¨ed
.
ok
);

104 
	}
}

106 
	$disˇrdTønß˘i⁄
(
˛õ¡
 *
c
) {

107 
	`‰ìClõ¡Mu…iSèã
(
c
);

108 
	`öôClõ¡Mu…iSèã
(
c
);

109 
c
->
Êags
 &~(
CLIENT_MULTI
|
CLIENT_DIRTY_CAS
|
CLIENT_DIRTY_EXEC
);

110 
	`unw©chAŒKeys
(
c
);

111 
	}
}

113 
	$mu…iComm™d
(
˛õ¡
 *
c
) {

114 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

115 
	`addRïlyEº‹
(
c
,"MULTI calls canÇot beÇested");

118 
c
->
Êags
 |
CLIENT_MULTI
;

119 
	`addRïly
(
c
,
sh¨ed
.
ok
);

120 
	}
}

123 
	$w©chF‹Key
(
˛õ¡
 *
c
, 
robj
 *
key
) {

124 
dli°
 *
˛õ¡s
 = 
NULL
;

125 
dli°Iãr
 
li
;

126 
dli°Node
 *
 
;

127 
w©chedKey
 *
wk
;

130 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li
);

131 (
 
 = 
	`dli°Next
(&
li
))) {

132 
wk
 = 
	`dli°NodeVÆue
(
 
);

133 i‡(
wk
->
db
 =
c
->db && 
	`equÆSåögObje˘s
(
key
,wk->key))

137 
˛õ¡s
 = 
	`di˘FëchVÆue
(
c
->
db
->
w©ched_keys
,
key
);

138 i‡(!
˛õ¡s
) {

139 
˛õ¡s
 = 
	`dli°Cª©e
();

140 
	`di˘Add
(
c
->
db
->
w©ched_keys
,
key
,
˛õ¡s
);

141 
	`ö¸RefCou¡
(
key
);

143 
	`dli°AddNodeTaû
(
˛õ¡s
,
c
);

145 
wk
 = 
	`dÆloc
((*wk));

146 
wk
->
key
 = key;

147 
wk
->
db
 = 
c
->db;

148 
	`ö¸RefCou¡
(
key
);

149 
	`dli°AddNodeTaû
(
c
->
w©ched_keys
,
wk
);

150 
	}
}

152 
	$w©chComm™d
(
˛õ¡
 *
c
) {

153 
j
;

155 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

156 
	`addRïlyEº‹
(
c
,"WATCH inside MULTI isÇotállowed");

159 
j
 = 1; j < 
c
->
¨gc
; j++)

160 
	`w©chF‹Key
(
c
,c->
¨gv
[
j
]);

161 
	`addRïly
(
c
,
sh¨ed
.
ok
);

162 
	}
}

166 
	$touchW©chedKey
(
ªdisDb
 *
db
, 
robj
 *
key
) {

167 
dli°
 *
˛õ¡s
;

168 
dli°Iãr
 
li
;

169 
dli°Node
 *
 
;

171 i‡(
	`di˘Size
(
db
->
w©ched_keys
) == 0) ;

172 
˛õ¡s
 = 
	`di˘FëchVÆue
(
db
->
w©ched_keys
, 
key
);

173 i‡(!
˛õ¡s
) ;

177 
	`dli°Rewöd
(
˛õ¡s
,&
li
);

178 (
 
 = 
	`dli°Next
(&
li
))) {

179 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

181 
c
->
Êags
 |
CLIENT_DIRTY_CAS
;

183 
	}
}

189 
	$touchW©chedKeysOnFlush
(
dbid
) {

190 
dli°Iãr
 
li1
, 
li2
;

191 
dli°Node
 *
 
;

194 
	`dli°Rewöd
(
£rvî
.
˛õ¡s
,&
li1
);

195 (
 
 = 
	`dli°Next
(&
li1
))) {

196 
˛õ¡
 *
c
 = 
	`dli°NodeVÆue
(
 
);

197 
	`dli°Rewöd
(
c
->
w©ched_keys
,&
li2
);

198 (
 
 = 
	`dli°Next
(&
li2
))) {

199 
w©chedKey
 *
wk
 = 
	`dli°NodeVÆue
(
 
);

204 i‡(
dbid
 =-1 || 
wk
->
db
->
id
 == dbid) {

205 i‡(
	`di˘Föd
(
wk
->
db
->
di˘
, wk->
key
->
±r
Ë!
NULL
)

206 
c
->
Êags
 |
CLIENT_DIRTY_CAS
;

210 
	}
}

	@src/vr_multi.h

1 #i‚de‡
_VR_MULTI_H_


2 
	#_VR_MULTI_H_


	)

5 
	smu…iCmd
 {

6 
robj
 **
	m¨gv
;

7 
	m¨gc
;

8 
ªdisComm™d
 *
	mcmd
;

9 } 
	tmu…iCmd
;

11 
	smu…iSèã
 {

12 
mu…iCmd
 *
	mcomm™ds
;

13 
	mcou¡
;

14 
	mmöª∂iˇs
;

15 
time_t
 
	mmöª∂iˇs_timeout
;

16 } 
	tmu…iSèã
;

18 
unw©chAŒKeys
(
˛õ¡
 *
c
);

19 
öôClõ¡Mu…iSèã
(
˛õ¡
 *
c
);

20 
‰ìClõ¡Mu…iSèã
(
˛õ¡
 *
c
);

21 
queueMu…iComm™d
(
˛õ¡
 *
c
);

23 
ÊagTønß˘i⁄
(
˛õ¡
 *
c
);

24 
execComm™d
(
˛õ¡
 *
c
);

25 
disˇrdComm™d
(
˛õ¡
 *
c
);

26 
disˇrdTønß˘i⁄
(
˛õ¡
 *
c
);

27 
mu…iComm™d
(
˛õ¡
 *
c
);

28 
w©chF‹Key
(
˛õ¡
 *
c
, 
robj
 *
key
);

29 
w©chComm™d
(
˛õ¡
 *
c
);

30 
touchW©chedKey
(
ªdisDb
 *
db
, 
robj
 *
key
);

31 
touchW©chedKeysOnFlush
(
dbid
) ;

	@src/vr_notify.c

1 
	~<vr_c‹e.h
>

11 
	$key•a˚EvítsSåögToFœgs
(*
˛as£s
) {

12 *
p
 = 
˛as£s
;

13 
c
, 
Êags
 = 0;

15 (
c
 = *
p
++) != '\0') {

16 
c
) {

17 'A': 
Êags
 |
NOTIFY_ALL
; ;

18 'g': 
Êags
 |
NOTIFY_GENERIC
; ;

19 '$': 
Êags
 |
NOTIFY_STRING
; ;

20 'l': 
Êags
 |
NOTIFY_LIST
; ;

21 's': 
Êags
 |
NOTIFY_SET
; ;

22 'h': 
Êags
 |
NOTIFY_HASH
; ;

23 'z': 
Êags
 |
NOTIFY_ZSET
; ;

24 'x': 
Êags
 |
NOTIFY_EXPIRED
; ;

25 'e': 
Êags
 |
NOTIFY_EVICTED
; ;

26 'K': 
Êags
 |
NOTIFY_KEYSPACE
; ;

27 'E': 
Êags
 |
NOTIFY_KEYEVENT
; ;

31  
Êags
;

32 
	}
}

38 
sds
 
	$key•a˚EvítsFœgsToSåög
(
Êags
) {

39 
sds
 
ªs
;

41 
ªs
 = 
	`sd£m±y
();

42 i‡((
Êags
 & 
NOTIFY_ALL
) == NOTIFY_ALL) {

43 
ªs
 = 
	`sdsˇéí
(res,"A",1);

45 i‡(
Êags
 & 
NOTIFY_GENERIC
Ë
ªs
 = 
	`sdsˇéí
(res,"g",1);

46 i‡(
Êags
 & 
NOTIFY_STRING
Ë
ªs
 = 
	`sdsˇéí
(res,"$",1);

47 i‡(
Êags
 & 
NOTIFY_LIST
Ë
ªs
 = 
	`sdsˇéí
(res,"l",1);

48 i‡(
Êags
 & 
NOTIFY_SET
Ë
ªs
 = 
	`sdsˇéí
(res,"s",1);

49 i‡(
Êags
 & 
NOTIFY_HASH
Ë
ªs
 = 
	`sdsˇéí
(res,"h",1);

50 i‡(
Êags
 & 
NOTIFY_ZSET
Ë
ªs
 = 
	`sdsˇéí
(res,"z",1);

51 i‡(
Êags
 & 
NOTIFY_EXPIRED
Ë
ªs
 = 
	`sdsˇéí
(res,"x",1);

52 i‡(
Êags
 & 
NOTIFY_EVICTED
Ë
ªs
 = 
	`sdsˇéí
(res,"e",1);

54 i‡(
Êags
 & 
NOTIFY_KEYSPACE
Ë
ªs
 = 
	`sdsˇéí
(res,"K",1);

55 i‡(
Êags
 & 
NOTIFY_KEYEVENT
Ë
ªs
 = 
	`sdsˇéí
(res,"E",1);

56  
ªs
;

57 
	}
}

66 
	$nŸifyKey•a˚Evít
(
ty≥
, *
evít
, 
robj
 *
key
, 
dbid
) {

67 
sds
 
ch™
;

68 
robj
 *
ch™obj
, *
evítobj
;

69 
Àn
 = -1;

70 
buf
[24];

73 i‡(!(
£rvî
.
nŸify_key•a˚_evíts
 & 
ty≥
)) ;

75 
evítobj
 = 
	`¸óãSåögObje˘
(
evít
,
	`°æí
(event));

78 i‡(
£rvî
.
nŸify_key•a˚_evíts
 & 
NOTIFY_KEYSPACE
) {

79 
ch™
 = 
	`sd¢ewÀn
("__keyspace@",11);

80 
Àn
 = 
	`Œ2°rög
(
buf
,(buf),
dbid
);

81 
ch™
 = 
	`sdsˇéí
(ch™, 
buf
, 
Àn
);

82 
ch™
 = 
	`sdsˇéí
(chan, "__:", 3);

83 
ch™
 = 
	`sdsˇtsds
(ch™, 
key
->
±r
);

84 
ch™obj
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
ch™
);

85 
	`pubsubPublishMesßge
(
ch™obj
, 
evítobj
);

86 
	`de¸RefCou¡
(
ch™obj
);

90 i‡(
£rvî
.
nŸify_key•a˚_evíts
 & 
NOTIFY_KEYEVENT
) {

91 
ch™
 = 
	`sd¢ewÀn
("__keyevent@",11);

92 i‡(
Àn
 =-1ËÀ¿
	`Œ2°rög
(
buf
,(buf),
dbid
);

93 
ch™
 = 
	`sdsˇéí
(ch™, 
buf
, 
Àn
);

94 
ch™
 = 
	`sdsˇéí
(chan, "__:", 3);

95 
ch™
 = 
	`sdsˇtsds
(ch™, 
evítobj
->
±r
);

96 
ch™obj
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
ch™
);

97 
	`pubsubPublishMesßge
(
ch™obj
, 
key
);

98 
	`de¸RefCou¡
(
ch™obj
);

100 
	`de¸RefCou¡
(
evítobj
);

101 
	}
}

	@src/vr_notify.h

1 #i‚de‡
_VR_NOTIFY_H_


2 
	#_VR_NOTIFY_H_


	)

6 
	#NOTIFY_KEYSPACE
 (1<<0Ë

	)

7 
	#NOTIFY_KEYEVENT
 (1<<1Ë

	)

8 
	#NOTIFY_GENERIC
 (1<<2Ë

	)

9 
	#NOTIFY_STRING
 (1<<3Ë

	)

10 
	#NOTIFY_LIST
 (1<<4Ë

	)

11 
	#NOTIFY_SET
 (1<<5Ë

	)

12 
	#NOTIFY_HASH
 (1<<6Ë

	)

13 
	#NOTIFY_ZSET
 (1<<7Ë

	)

14 
	#NOTIFY_EXPIRED
 (1<<8Ë

	)

15 
	#NOTIFY_EVICTED
 (1<<9Ë

	)

16 
	#NOTIFY_ALL
 (
NOTIFY_GENERIC
 | 
NOTIFY_STRING
 | 
NOTIFY_LIST
 | 
NOTIFY_SET
 | 
NOTIFY_HASH
 | 
NOTIFY_ZSET
 | 
NOTIFY_EXPIRED
 | 
NOTIFY_EVICTED
Ë

	)

	@src/vr_object.c

1 
	~<m©h.h
>

2 
	~<˘y≥.h
>

4 
	~<vr_c‹e.h
>

6 #ifde‡
__CYGWIN__


7 
	#°πﬁd
(
a
,
b
Ë(()
	`°πod
(◊),(b)))

	)

10 
robj
 *
	$¸óãObje˘
(
ty≥
, *
±r
) {

11 
robj
 *
o
 = 
	`dÆloc
((*o));

12 
o
->
ty≥
 =Åype;

13 
o
->
ícodög
 = 
OBJ_ENCODING_RAW
;

14 
o
->
±r
 =Ötr;

15 
o
->
c⁄°™t
 = 0;

16 
o
->
ªfcou¡
 = -1;

17 
o
->
Ãu
 = 0;

18  
o
;

19 
	}
}

23 
robj
 *
	$¸óãRawSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

24  
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
±r
,
Àn
));

25 
	}
}

30 
robj
 *
	$¸óãEmbeddedSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

31 
robj
 *
o
 = 
	`dÆloc
(‘obj)+(
sdshdr8
)+
Àn
+1);

32 
sdshdr8
 *
sh
 = (*)(
o
+1);

34 
o
->
ty≥
 = 
OBJ_STRING
;

35 
o
->
ícodög
 = 
OBJ_ENCODING_EMBSTR
;

36 
o
->
±r
 = 
sh
+1;

37 
o
->
c⁄°™t
 = 0;

38 
o
->
ªfcou¡
 = -1;

39 
o
->
Ãu
 = 0;

41 
sh
->
Àn
 =Üen;

42 
sh
->
Æloc
 = 
Àn
;

43 
sh
->
Êags
 = 
SDS_TYPE_8
;

44 i‡(
±r
) {

45 
	`mem˝y
(
sh
->
buf
,
±r
,
Àn
);

46 
sh
->
buf
[
Àn
] = '\0';

48 
	`mem£t
(
sh
->
buf
,0,
Àn
+1);

50  
o
;

51 
	}
}

59 
	#OBJ_ENCODING_EMBSTR_SIZE_LIMIT
 44

	)

60 
robj
 *
	$¸óãSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
) {

61 i‡(
Àn
 <
OBJ_ENCODING_EMBSTR_SIZE_LIMIT
)

62  
	`¸óãEmbeddedSåögObje˘
(
±r
,
Àn
);

64  
	`¸óãRawSåögObje˘
(
±r
,
Àn
);

65 
	}
}

67 
robj
 *
	$¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
) {

68 
robj
 *
o
;

69 i‡(
vÆue
 >0 && vÆuê< 
OBJ_SHARED_INTEGERS
) {

70 
o
 = 
sh¨ed
.
öãgîs
[
vÆue
];

72 i‡(
vÆue
 >
LONG_MIN
 && vÆuê<
LONG_MAX
) {

73 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
NULL
);

74 
o
->
ícodög
 = 
OBJ_ENCODING_INT
;

75 
o
->
±r
 = (*)(()
vÆue
);

77 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sds‰oml⁄gl⁄g
(
vÆue
));

80  
o
;

81 
	}
}

89 
robj
 *
	$¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
, 
hum™‰õndly
) {

90 
buf
[256];

91 
Àn
;

93 i‡(
	`isöf
(
vÆue
)) {

96 i‡(
vÆue
 > 0) {

97 
	`mem˝y
(
buf
,"inf",3);

98 
Àn
 = 3;

100 
	`mem˝y
(
buf
,"-inf",4);

101 
Àn
 = 4;

103 } i‡(
hum™‰õndly
) {

109 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%.17Lf", 
vÆue
);

111 i‡(
	`°rchr
(
buf
,'.'Ë!
NULL
) {

112 *
p
 = 
buf
+
Àn
-1;

113 *
p
 == '0') {

114 
p
--;

115 
Àn
--;

117 i‡(*
p
 ='.'Ë
Àn
--;

120 
Àn
 = 
	`¢¥ötf
(
buf
,(buf),"%.17Lg", 
vÆue
);

122  
	`¸óãSåögObje˘
(
buf
,
Àn
);

123 
	}
}

133 
robj
 *
	$dupSåögObje˘
(
robj
 *
o
) {

134 
robj
 *
d
;

136 
	`ASSERT
(
o
->
ty≥
 =
OBJ_STRING
);

138 
o
->
ícodög
) {

139 
OBJ_ENCODING_RAW
:

140  
	`¸óãRawSåögObje˘
(
o
->
±r
,
	`sd¶í
(o->ptr));

141 
OBJ_ENCODING_EMBSTR
:

142  
	`¸óãEmbeddedSåögObje˘
(
o
->
±r
,
	`sd¶í
(o->ptr));

143 
OBJ_ENCODING_INT
:

144 
d
 = 
	`¸óãObje˘
(
OBJ_STRING
, 
NULL
);

145 
d
->
ícodög
 = 
OBJ_ENCODING_INT
;

146 
d
->
±r
 = 
o
->ptr;

147  
d
;

149 
	`£rvîP™ic
("WrongÉncoding.");

152 
	}
}

154 
robj
 *
	$dupSåögObje˘Unc⁄°™t
(
robj
 *
o
) {

155 i‡(
o
->
c⁄°™t
)  o;

156  
	`dupSåögObje˘
(
o
);

157 
	}
}

159 
robj
 *
	$¸óãQuickli°Obje˘
() {

160 
quickli°
 *
l
 = 
	`quickli°Cª©e
();

161 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_LIST
,
l
);

162 
o
->
ícodög
 = 
OBJ_ENCODING_QUICKLIST
;

163  
o
;

164 
	}
}

166 
robj
 *
	$¸óãZùli°Obje˘
() {

167 *
zl
 = 
	`zùli°New
();

168 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_LIST
,
zl
);

169 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

170  
o
;

171 
	}
}

173 
robj
 *
	$¸óãSëObje˘
() {

174 
di˘
 *
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

175 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_SET
,
d
);

176 
o
->
ícodög
 = 
OBJ_ENCODING_HT
;

177  
o
;

178 
	}
}

180 
robj
 *
	$¸óãI¡£tObje˘
() {

181 
öt£t
 *
is
 = 
	`öt£tNew
();

182 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_SET
,
is
);

183 
o
->
ícodög
 = 
OBJ_ENCODING_INTSET
;

184  
o
;

185 
	}
}

187 
robj
 *
	$¸óãHashObje˘
() {

188 *
zl
 = 
	`zùli°New
();

189 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_HASH
, 
zl
);

190 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

191  
o
;

192 
	}
}

198 
robj
 *
	$¸óãZ£tObje˘
() {

199 
z£t
 *
zs
 = 
	`dÆloc
((*zs));

200 
robj
 *
o
;

202 
zs
->
di˘
 = 
	`di˘Cª©e
(&
z£tDi˘Ty≥
,
NULL
);

203 
zs
->
z¶
 = 
	`z¶Cª©e
();

204 
o
 = 
	`¸óãObje˘
(
OBJ_ZSET
,
zs
);

205 
o
->
ícodög
 = 
OBJ_ENCODING_SKIPLIST
;

206  
o
;

207 
	}
}

209 
robj
 *
	$¸óãZ£tZùli°Obje˘
() {

210 *
zl
 = 
	`zùli°New
();

211 
robj
 *
o
 = 
	`¸óãObje˘
(
OBJ_ZSET
,
zl
);

212 
o
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

213  
o
;

214 
	}
}

216 
	$‰ìSåögObje˘
(
robj
 *
o
) {

217 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
) {

218 
	`sds‰ì
(
o
->
±r
);

220 
	}
}

222 
	$‰ìLi°Obje˘
(
robj
 *
o
) {

223 
o
->
ícodög
) {

224 
OBJ_ENCODING_QUICKLIST
:

225 
	`quickli°Rñó£
(
o
->
±r
);

228 
	`£rvîP™ic
("UnknownÜistÉncodingÅype");

230 
	}
}

232 
	$‰ìSëObje˘
(
robj
 *
o
) {

233 
o
->
ícodög
) {

234 
OBJ_ENCODING_HT
:

235 
	`di˘Rñó£
((
di˘
*Ë
o
->
±r
);

237 
OBJ_ENCODING_INTSET
:

238 
	`d‰ì
(
o
->
±r
);

241 
	`£rvîP™ic
("Unknown setÉncodingÅype");

243 
	}
}

245 
	$‰ìZ£tObje˘
(
robj
 *
o
) {

246 
z£t
 *
zs
;

247 
o
->
ícodög
) {

248 
OBJ_ENCODING_SKIPLIST
:

249 
zs
 = 
o
->
±r
;

250 
	`di˘Rñó£
(
zs
->
di˘
);

251 
	`z¶Fªe
(
zs
->
z¶
);

252 
	`d‰ì
(
zs
);

254 
OBJ_ENCODING_ZIPLIST
:

255 
	`d‰ì
(
o
->
±r
);

258 
	`£rvîP™ic
("Unknown sorted setÉncoding");

260 
	}
}

262 
	$‰ìHashObje˘
(
robj
 *
o
) {

263 
o
->
ícodög
) {

264 
OBJ_ENCODING_HT
:

265 
	`di˘Rñó£
((
di˘
*Ë
o
->
±r
);

267 
OBJ_ENCODING_ZIPLIST
:

268 
	`d‰ì
(
o
->
±r
);

271 
	`£rvîP™ic
("Unknown hashÉncodingÅype");

274 
	}
}

276 
	$ö¸RefCou¡
(
robj
 *
o
) {

277 
o
->
ªfcou¡
++;

278 
	}
}

280 
	$de¸RefCou¡
(
robj
 *
o
) {

281 i‡(
o
->
ªfcou¡
 <0Ë
	`£rvîP™ic
("decrRefCountágainstÑefcount <= 0");

282 i‡(
o
->
ªfcou¡
 == 1) {

283 
o
->
ty≥
) {

284 
OBJ_STRING
: 
	`‰ìSåögObje˘
(
o
); ;

285 
OBJ_LIST
: 
	`‰ìLi°Obje˘
(
o
); ;

286 
OBJ_SET
: 
	`‰ìSëObje˘
(
o
); ;

287 
OBJ_ZSET
: 
	`‰ìZ£tObje˘
(
o
); ;

288 
OBJ_HASH
: 
	`‰ìHashObje˘
(
o
); ;

289 : 
	`£rvîP™ic
("Unknown objectÅype"); ;

291 
	`d‰ì
(
o
);

293 
o
->
ªfcou¡
--;

295 
	}
}

300 
	$de¸RefCou¡Void
(*
o
) {

301 
	`de¸RefCou¡
(
o
);

302 
	}
}

304 
	$‰ìObje˘
(
robj
 *
o
) {

305 i‡(
o
->
c⁄°™t
) ;

307 
o
->
ty≥
) {

308 
OBJ_STRING
: 
	`‰ìSåögObje˘
(
o
); ;

309 
OBJ_LIST
: 
	`‰ìLi°Obje˘
(
o
); ;

310 
OBJ_SET
: 
	`‰ìSëObje˘
(
o
); ;

311 
OBJ_ZSET
: 
	`‰ìZ£tObje˘
(
o
); ;

312 
OBJ_HASH
: 
	`‰ìHashObje˘
(
o
); ;

313 : 
	`£rvîP™ic
("Unknown objectÅype"); ;

315 
	`d‰ì
(
o
);

316 
	}
}

318 
	$‰ìObje˘Void
(*
o
) {

319 
	`‰ìObje˘
(
o
);

320 
	}
}

334 
robj
 *
	$ª£tRefCou¡
(
robj
 *
obj
) {

335 
obj
->
ªfcou¡
 = 0;

336  
obj
;

337 
	}
}

339 
	$checkTy≥
(
˛õ¡
 *
c
, 
robj
 *
o
, 
ty≥
) {

340 i‡(
o
->
ty≥
 !=Åype) {

341 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

345 
	}
}

347 
	$isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
robj
 *
o
, *
ŒvÆ
) {

348 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

349 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

350 i‡(
ŒvÆ
Ë*ŒvÆ = (Ë
o
->
±r
;

351  
VR_OK
;

353  
	`°rög2Œ
(
o
->
±r
,
	`sd¶í
(o->±r),
ŒvÆ
Ë? 
VR_OK
 : 
VR_ERROR
;

355 
	}
}

358 
robj
 *
	$åyObje˘Encodög
(
robj
 *
o
) {

359 
vÆue
;

360 
sds
 
s
 = 
o
->
±r
;

361 
size_t
 
Àn
;

367 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

372 i‡(!
	`sdsEncodedObje˘
(
o
))  o;

375 i‡(
o
->
c⁄°™t
)  o;

380 
Àn
 = 
	`sd¶í
(
s
);

381 i‡(
Àn
 <21 && 
	`°rög2l
(
s
,Àn,&
vÆue
)) {

390 
vÆue
 >= 0 &&

391 
vÆue
 < 
OBJ_SHARED_INTEGERS
)

393 
	`‰ìObje˘
(
o
);

394  
sh¨ed
.
öãgîs
[
vÆue
];

396 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
Ë
	`sds‰ì
(o->
±r
);

397 
o
->
ícodög
 = 
OBJ_ENCODING_INT
;

398 
o
->
±r
 = (*Ë
vÆue
;

399  
o
;

407 i‡(
Àn
 <
OBJ_ENCODING_EMBSTR_SIZE_LIMIT
) {

408 
robj
 *
emb
;

410 i‡(
o
->
ícodög
 =
OBJ_ENCODING_EMBSTR
)  o;

411 
emb
 = 
	`¸óãEmbeddedSåögObje˘
(
s
,
	`sd¶í
(s));

412 
	`‰ìObje˘
(
o
);

413  
emb
;

425 i‡(
o
->
ícodög
 =
OBJ_ENCODING_RAW
 &&

426 
	`sdßvaû
(
s
Ë> 
Àn
/10)

428 
o
->
±r
 = 
	`sdsRemoveFªeS∑˚
(o->ptr);

432  
o
;

433 
	}
}

437 
robj
 *
	$gëDecodedObje˘
(
robj
 *
o
) {

438 
robj
 *
dec
;

440 i‡(
	`sdsEncodedObje˘
(
o
)) {

441  
o
;

443 i‡(
o
->
ty≥
 =
OBJ_STRING
 && o->
ícodög
 =
OBJ_ENCODING_INT
) {

444 
buf
[32];

446 
	`Œ2°rög
(
buf
,32,()
o
->
±r
);

447 
dec
 = 
	`¸óãSåögObje˘
(
buf
,
	`°æí
(buf));

448  
dec
;

450 
	`£rvîP™ic
("UnknownÉncodingÅype");

452 
	}
}

462 
	#REDIS_COMPARE_BINARY
 (1<<0)

	)

463 
	#REDIS_COMPARE_COLL
 (1<<1)

	)

465 
	$com∑ªSåögObje˘sWôhFœgs
(
robj
 *
a
,Ñobj *
b
, 
Êags
) {

466 
	`£rvîAs£πWôhInfo
(
NULL
,
a
,a->
ty≥
 =
OBJ_STRING
 && 
b
->type == OBJ_STRING);

467 
buÁ
[128], 
bufb
[128], *
a°r
, *
b°r
;

468 
size_t
 
Æí
, 
bÀn
, 
möÀn
;

470 i‡(
a
 =
b
)  0;

471 i‡(
	`sdsEncodedObje˘
(
a
)) {

472 
a°r
 = 
a
->
±r
;

473 
Æí
 = 
	`sd¶í
(
a°r
);

475 
Æí
 = 
	`Œ2°rög
(
buÁ
,(buÁ),(Ë
a
->
±r
);

476 
a°r
 = 
buÁ
;

478 i‡(
	`sdsEncodedObje˘
(
b
)) {

479 
b°r
 = 
b
->
±r
;

480 
bÀn
 = 
	`sd¶í
(
b°r
);

482 
bÀn
 = 
	`Œ2°rög
(
bufb
,(bufb),(Ë
b
->
±r
);

483 
b°r
 = 
bufb
;

485 i‡(
Êags
 & 
REDIS_COMPARE_COLL
) {

486  
	`°rcﬁl
(
a°r
,
b°r
);

488 
cmp
;

490 
möÀn
 = (
Æí
 < 
bÀn
) ?álen : blen;

491 
cmp
 = 
	`memcmp
(
a°r
,
b°r
,
möÀn
);

492 i‡(
cmp
 =0Ë 
Æí
-
bÀn
;

493  
cmp
;

495 
	}
}

498 
	$com∑ªSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

499  
	`com∑ªSåögObje˘sWôhFœgs
(
a
,
b
,
REDIS_COMPARE_BINARY
);

500 
	}
}

503 
	$cﬁœãSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

504  
	`com∑ªSåögObje˘sWôhFœgs
(
a
,
b
,
REDIS_COMPARE_COLL
);

505 
	}
}

511 
	$equÆSåögObje˘s
(
robj
 *
a
,Ñobj *
b
) {

512 i‡(
a
->
ícodög
 =
OBJ_ENCODING_INT
 &&

513 
b
->
ícodög
 =
OBJ_ENCODING_INT
){

516  
a
->
±r
 =
b
->ptr;

518  
	`com∑ªSåögObje˘s
(
a
,
b
) == 0;

520 
	}
}

522 
size_t
 
	$°rögObje˘Lí
(
robj
 *
o
) {

523 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

524 i‡(
	`sdsEncodedObje˘
(
o
)) {

525  
	`sd¶í
(
o
->
±r
);

527  
	`sdigôs10
(()
o
->
±r
);

529 
	}
}

531 
	$gëDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
) {

532 
vÆue
;

533 *
ïå
;

535 i‡(
o
 =
NULL
) {

536 
vÆue
 = 0;

538 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

539 i‡(
	`sdsEncodedObje˘
(
o
)) {

540 
î∫o
 = 0;

541 
vÆue
 = 
	`°πod
(
o
->
±r
, &
ïå
);

542 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]) ||

543 
ïå
[0] != '\0' ||

544 (
î∫o
 =
ERANGE
 &&

545 (
vÆue
 =
HUGE_VAL
 || value == -HUGE_VAL || value == 0)) ||

546 
î∫o
 =
EINVAL
 ||

547 
	`i¢™
(
vÆue
))

548  
VR_ERROR
;

549 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

550 
vÆue
 = ()
o
->
±r
;

552 
	`£rvîP™ic
("Unknown stringÉncoding");

555 *
èrgë
 = 
vÆue
;

556  
VR_OK
;

557 
	}
}

559 
	$gëDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

560 
vÆue
;

561 i‡(
	`gëDoubÀFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

562 i‡(
msg
 !
NULL
) {

563 
	`addRïlyEº‹
(
c
,(*)
msg
);

565 
	`addRïlyEº‹
(
c
,"value isÇotá valid float");

567  
VR_ERROR
;

569 *
èrgë
 = 
vÆue
;

570  
VR_OK
;

571 
	}
}

573 
	$gëL⁄gDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
) {

574 
vÆue
;

575 *
ïå
;

577 i‡(
o
 =
NULL
) {

578 
vÆue
 = 0;

580 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

581 i‡(
	`sdsEncodedObje˘
(
o
)) {

582 
î∫o
 = 0;

583 
vÆue
 = 
	`°πﬁd
(
o
->
±r
, &
ïå
);

584 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] != '\0' ||

585 
î∫o
 =
ERANGE
 || 
	`i¢™
(
vÆue
))

586  
VR_ERROR
;

587 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

588 
vÆue
 = ()
o
->
±r
;

590 
	`£rvîP™ic
("Unknown stringÉncoding");

593 *
èrgë
 = 
vÆue
;

594  
VR_OK
;

595 
	}
}

597 
	$gëL⁄gDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

598 
vÆue
;

599 i‡(
	`gëL⁄gDoubÀFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

600 i‡(
msg
 !
NULL
) {

601 
	`addRïlyEº‹
(
c
,(*)
msg
);

603 
	`addRïlyEº‹
(
c
,"value isÇotá valid float");

605  
VR_ERROR
;

607 *
èrgë
 = 
vÆue
;

608  
VR_OK
;

609 
	}
}

611 
	$gëL⁄gL⁄gFromObje˘
(
robj
 *
o
, *
èrgë
) {

612 
vÆue
;

613 *
ïå
;

615 i‡(
o
 =
NULL
) {

616 
vÆue
 = 0;

618 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

619 i‡(
	`sdsEncodedObje˘
(
o
)) {

620 
î∫o
 = 0;

621 
vÆue
 = 
	`°πﬁl
(
o
->
±r
, &
ïå
, 10);

622 i‡(
	`is•a˚
(((*)
o
->
±r
)[0]Ë|| 
ïå
[0] != '\0' ||

623 
î∫o
 =
ERANGE
)

624  
VR_ERROR
;

625 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

626 
vÆue
 = ()
o
->
±r
;

628 
	`£rvîP™ic
("Unknown stringÉncoding");

631 i‡(
èrgë
Ë*èrgë = 
vÆue
;

632  
VR_OK
;

633 
	}
}

635 
	$gëL⁄gL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

636 
vÆue
;

637 i‡(
	`gëL⁄gL⁄gFromObje˘
(
o
, &
vÆue
Ë!
VR_OK
) {

638 i‡(
msg
 !
NULL
) {

639 
	`addRïlyEº‹
(
c
,(*)
msg
);

641 
	`addRïlyEº‹
(
c
,"value isÇotán integer or out ofÑange");

643  
VR_ERROR
;

645 *
èrgë
 = 
vÆue
;

646  
VR_OK
;

647 
	}
}

649 
	$gëL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
) {

650 
vÆue
;

652 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
o
, &
vÆue
, 
msg
Ë!
VR_OK
Ë 
VR_ERROR
;

653 i‡(
vÆue
 < 
LONG_MIN
 || vÆuê> 
LONG_MAX
) {

654 i‡(
msg
 !
NULL
) {

655 
	`addRïlyEº‹
(
c
,(*)
msg
);

657 
	`addRïlyEº‹
(
c
,"value is out ofÑange");

659  
VR_ERROR
;

661 *
èrgë
 = 
vÆue
;

662  
VR_OK
;

663 
	}
}

665 *
	$°rEncodög
(
ícodög
) {

666 
ícodög
) {

667 
OBJ_ENCODING_RAW
:  "raw";

668 
OBJ_ENCODING_INT
:  "int";

669 
OBJ_ENCODING_HT
:  "hashtable";

670 
OBJ_ENCODING_QUICKLIST
:  "quicklist";

671 
OBJ_ENCODING_ZIPLIST
:  "ziplist";

672 
OBJ_ENCODING_INTSET
:  "intset";

673 
OBJ_ENCODING_SKIPLIST
:  "skiplist";

674 
OBJ_ENCODING_EMBSTR
:  "embstr";

677 
	}
}

681 
	$e°im©eObje˘IdÀTime
(
robj
 *
o
) {

682 
Ãu˛ock
 = 
	`LRU_CLOCK
();

683 i‡(
Ãu˛ock
 >
o
->
Ãu
) {

684  (
Ãu˛ock
 - 
o
->
Ãu
Ë* 
LRU_CLOCK_RESOLUTION
;

686  (
Ãu˛ock
 + (
LRU_CLOCK_MAX
 - 
o
->
Ãu
)) *

687 
LRU_CLOCK_RESOLUTION
;

689 
	}
}

693 
size_t
 
	$gëSåögObje˘SdsU£dMem‹y
(
robj
 *
o
) {

694 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,o->
ty≥
 =
OBJ_STRING
);

695 
o
->
ícodög
) {

696 
OBJ_ENCODING_RAW
:  
	`sdsZmÆlocSize
(
o
->
±r
);

697 
OBJ_ENCODING_EMBSTR
:  
	`dmÆloc_size
(
o
)-(
robj
);

700 
	}
}

704 
robj
 *
	$obje˘Comm™dLookup
(
˛õ¡
 *
c
, 
robj
 *
key
) {

705 
di˘E¡ry
 *
de
;

707 i‡((
de
 = 
	`di˘Föd
(
c
->
db
->
di˘
,
key
->
±r
)Ë=
NULL
)  NULL;

708  (
robj
*Ë
	`di˘GëVÆ
(
de
);

709 
	}
}

711 
robj
 *
	$obje˘Comm™dLookupOrRïly
(
˛õ¡
 *
c
, 
robj
 *
key
,Ñobj *
ª∂y
) {

712 
robj
 *
o
 = 
	`obje˘Comm™dLookup
(
c
,
key
);

714 i‡(!
o
Ë
	`addRïly
(
c
, 
ª∂y
);

715  
o
;

716 
	}
}

720 
	$obje˘Comm™d
(
˛õ¡
 *
c
) {

721 
robj
 *
o
;

723 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"ícodög"Ë&& c->
¨gc
 == 3) {

724 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[2]);

725 
	`lockDbRód
(
c
->
db
);

726 i‡((
o
 = 
	`obje˘Comm™dLookupOrRïly
(
c
,c->
¨gv
[2],
sh¨ed
.
nuŒbulk
))

727 =
NULL
) {

728 
	`u∆ockDb
(
c
->
db
);

731 
	`addRïlyBulkCSåög
(
c
,
	`°rEncodög
(
o
->
ícodög
));

732 
	`u∆ockDb
(
c
->
db
);

733 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"idÀtime"Ë&& c->
¨gc
 == 3) {

734 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[2]);

735 
	`lockDbRód
(
c
->
db
);

736 i‡((
o
 = 
	`obje˘Comm™dLookupOrRïly
(
c
,c->
¨gv
[2],
sh¨ed
.
nuŒbulk
))

737 =
NULL
) {

738 
	`u∆ockDb
(
c
->
db
);

741 
	`addRïlyL⁄gL⁄g
(
c
,
	`e°im©eObje˘IdÀTime
(
o
)/1000);

742 
	`u∆ockDb
(
c
->
db
);

744 
	`addRïlyEº‹
(
c
,"SyntaxÉrror. Try OBJECT (encoding|idletime)");

746 
	}
}

	@src/vr_object.h

1 #i‚de‡
_VR_OBJECT_H_


2 
	#_VR_OBJECT_H_


	)

4 
	#OBJ_SHARED_INTEGERS
 10000

	)

5 
	#OBJ_SHARED_BULKHDR_LEN
 32

	)

8 
	#OBJ_STRING
 0

	)

9 
	#OBJ_LIST
 1

	)

10 
	#OBJ_SET
 2

	)

11 
	#OBJ_ZSET
 3

	)

12 
	#OBJ_HASH
 4

	)

17 
	#OBJ_ENCODING_RAW
 0

	)

18 
	#OBJ_ENCODING_INT
 1

	)

19 
	#OBJ_ENCODING_HT
 2

	)

20 
	#OBJ_ENCODING_ZIPMAP
 3

	)

21 
	#OBJ_ENCODING_LINKEDLIST
 4

	)

22 
	#OBJ_ENCODING_ZIPLIST
 5

	)

23 
	#OBJ_ENCODING_INTSET
 6

	)

24 
	#OBJ_ENCODING_SKIPLIST
 7

	)

25 
	#OBJ_ENCODING_EMBSTR
 8

	)

26 
	#OBJ_ENCODING_QUICKLIST
 9

	)

28 
	#OBJ_HASH_KEY
 1

	)

29 
	#OBJ_HASH_VALUE
 2

	)

31 
	#sdsEncodedObje˘
(
obj±r
Ë(obj±r->
ícodög
 =
OBJ_ENCODING_RAW
 || obj±r->ícodög =
OBJ_ENCODING_EMBSTR
)

	)

34 
	#LRU_BITS
 24

	)

35 
	#LRU_CLOCK_MAX
 ((1<<
LRU_BITS
)-1Ë

	)

36 
	#LRU_CLOCK_RESOLUTION
 1000

	)

37 
	svr_obje˘
 {

38 
	mty≥
:4;

39 
	mícodög
:4;

40 
	mÃu
:
LRU_BITS
;

41 
	mc⁄°™t
:1;

42 
	mªfcou¡
;

43 *
	m±r
;

44 } 
	trobj
;

46 
de¸RefCou¡
(
robj
 *
o
);

47 
de¸RefCou¡Void
(*
o
);

48 
ö¸RefCou¡
(
robj
 *
o
);

49 
robj
 *
ª£tRefCou¡
‘obj *
obj
);

50 
‰ìObje˘
(
robj
 *
o
);

51 
‰ìObje˘Void
(*
o
);

52 
‰ìSåögObje˘
(
robj
 *
o
);

53 
‰ìLi°Obje˘
(
robj
 *
o
);

54 
‰ìSëObje˘
(
robj
 *
o
);

55 
‰ìZ£tObje˘
(
robj
 *
o
);

56 
‰ìHashObje˘
(
robj
 *
o
);

57 
robj
 *
¸óãObje˘
(
ty≥
, *
±r
);

58 
robj
 *
¸óãSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

59 
robj
 *
¸óãRawSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

60 
robj
 *
¸óãEmbeddedSåögObje˘
(c⁄° *
±r
, 
size_t
 
Àn
);

61 
robj
 *
dupSåögObje˘
‘obj *
o
);

62 
robj
 *
dupSåögObje˘Unc⁄°™t
‘obj *
o
);

63 
isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
robj
 *
o
, *
Œ⁄gvÆ
);

64 
robj
 *
åyObje˘Encodög
‘obj *
o
);

65 
robj
 *
gëDecodedObje˘
‘obj *
o
);

66 
size_t
 
°rögObje˘Lí
(
robj
 *
o
);

67 
robj
 *
¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

68 
robj
 *
¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
, 
hum™‰õndly
);

69 
robj
 *
¸óãQuickli°Obje˘
();

70 
robj
 *
¸óãZùli°Obje˘
();

71 
robj
 *
¸óãSëObje˘
();

72 
robj
 *
¸óãI¡£tObje˘
();

73 
robj
 *
¸óãHashObje˘
();

74 
robj
 *
¸óãZ£tObje˘
();

75 
robj
 *
¸óãZ£tZùli°Obje˘
();

76 
gëL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

77 
checkTy≥
(
˛õ¡
 *
c
, 
robj
 *
o
, 
ty≥
);

78 
gëL⁄gL⁄gFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

79 
gëDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

80 
gëL⁄gL⁄gFromObje˘
(
robj
 *
o
, *
èrgë
);

81 
gëL⁄gDoubÀFromObje˘
(
robj
 *
o
, *
èrgë
);

82 
gëL⁄gDoubÀFromObje˘OrRïly
(
˛õ¡
 *
c
, 
robj
 *
o
, *
èrgë
, c⁄° *
msg
);

83 *
°rEncodög
(
ícodög
);

84 
com∑ªSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

85 
cﬁœãSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

86 
equÆSåögObje˘s
(
robj
 *
a
,Ñobj *
b
);

87 
e°im©eObje˘IdÀTime
(
robj
 *
o
);

89 
size_t
 
gëSåögObje˘SdsU£dMem‹y
(
robj
 *
o
);

91 
robj
 *
obje˘Comm™dLookup
(
˛õ¡
 *
c
,Ñobj *
key
);

92 
robj
 *
obje˘Comm™dLookupOrRïly
(
˛õ¡
 *
c
,Ñobj *
key
,Ñobj *
ª∂y
);

93 
obje˘Comm™d
(
˛õ¡
 *
c
);

	@src/vr_pubsub.c

1 
	~<vr_c‹e.h
>

5 
	$pubsubUnsubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
, 
nŸify
) {

6 
di˘E¡ry
 *
de
;

7 
dli°
 *
˛õ¡s
;

8 
dli°Node
 *
 
;

9 
ªtvÆ
 = 0;

12 
	`ö¸RefCou¡
(
ch™√l
);

14 i‡(
	`di˘Dñëe
(
c
->
pubsub_ch™√ls
,
ch™√l
Ë=
DICT_OK
) {

15 
ªtvÆ
 = 1;

17 
de
 = 
	`di˘Föd
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

18 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
de
 != NULL);

19 
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

20 
 
 = 
	`dli°SórchKey
(
˛õ¡s
,
c
);

21 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
 
 != NULL);

22 
	`dli°DñNode
(
˛õ¡s
,
 
);

23 i‡(
	`dli°Lígth
(
˛õ¡s
) == 0) {

27 
	`di˘Dñëe
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

31 i‡(
nŸify
) {

32 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

33 
	`addRïly
(
c
,
sh¨ed
.
unsubs¸ibebulk
);

34 
	`addRïlyBulk
(
c
,
ch™√l
);

35 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

36 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

39 
	`de¸RefCou¡
(
ch™√l
);

40  
ªtvÆ
;

41 
	}
}

45 
	$pubsubUnsubs¸ibeAŒCh™√ls
(
˛õ¡
 *
c
, 
nŸify
) {

46 
di˘Iãøt‹
 *
di
 = 
	`di˘GëSa„Iãøt‹
(
c
->
pubsub_ch™√ls
);

47 
di˘E¡ry
 *
de
;

48 
cou¡
 = 0;

50 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

51 
robj
 *
ch™√l
 = 
	`di˘GëKey
(
de
);

53 
cou¡
 +
	`pubsubUnsubs¸ibeCh™√l
(
c
,
ch™√l
,
nŸify
);

56 i‡(
nŸify
 && 
cou¡
 == 0) {

57 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

58 
	`addRïly
(
c
,
sh¨ed
.
unsubs¸ibebulk
);

59 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

60 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

61 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

63 
	`di˘Rñó£Iãøt‹
(
di
);

64  
cou¡
;

65 
	}
}

69 
	$pubsubUnsubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
, 
nŸify
) {

70 
dli°Node
 *
 
;

71 
pubsubP©ã∫
 
∑t
;

72 
ªtvÆ
 = 0;

74 
	`ö¸RefCou¡
(
∑âîn
);

75 i‡((
 
 = 
	`dli°SórchKey
(
c
->
pubsub_∑âîns
,
∑âîn
)Ë!
NULL
) {

76 
ªtvÆ
 = 1;

77 
	`dli°DñNode
(
c
->
pubsub_∑âîns
,
 
);

78 
∑t
.
˛õ¡
 = 
c
;

79 
∑t
.
∑âîn
 =Öattern;

80 
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
pubsub_∑âîns
,&
∑t
);

81 
	`dli°DñNode
(
c
->
vñ
->
pubsub_∑âîns
,
 
);

84 i‡(
nŸify
) {

85 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

86 
	`addRïly
(
c
,
sh¨ed
.
punsubs¸ibebulk
);

87 
	`addRïlyBulk
(
c
,
∑âîn
);

88 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

89 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

91 
	`de¸RefCou¡
(
∑âîn
);

92  
ªtvÆ
;

93 
	}
}

97 
	$pubsubUnsubs¸ibeAŒP©ã∫s
(
˛õ¡
 *
c
, 
nŸify
) {

98 
dli°Node
 *
 
;

99 
dli°Iãr
 
li
;

100 
cou¡
 = 0;

102 
	`dli°Rewöd
(
c
->
pubsub_∑âîns
,&
li
);

103 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

104 
robj
 *
∑âîn
 = 
 
->
vÆue
;

106 
cou¡
 +
	`pubsubUnsubs¸ibeP©ã∫
(
c
,
∑âîn
,
nŸify
);

108 i‡(
nŸify
 && 
cou¡
 == 0) {

110 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

111 
	`addRïly
(
c
,
sh¨ed
.
punsubs¸ibebulk
);

112 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

113 
	`addRïlyL⁄gL⁄g
(
c
,
	`di˘Size
(c->
pubsub_ch™√ls
)+

114 
	`dli°Lígth
(
c
->
pubsub_∑âîns
));

116  
cou¡
;

117 
	}
}

126 
	$pubsubSubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
) {

127 
di˘E¡ry
 *
de
;

128 
dli°
 *
˛õ¡s
 = 
NULL
;

129 
ªtvÆ
 = 0;

132 i‡(
	`di˘Add
(
c
->
pubsub_ch™√ls
,
ch™√l
,
NULL
Ë=
DICT_OK
) {

133 
ªtvÆ
 = 1;

134 
	`ö¸RefCou¡
(
ch™√l
);

136 
de
 = 
	`di˘Föd
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
);

137 i‡(
de
 =
NULL
) {

138 
˛õ¡s
 = 
	`dli°Cª©e
();

139 
	`di˘Add
(
c
->
vñ
->
pubsub_ch™√ls
,
ch™√l
,
˛õ¡s
);

140 
	`ö¸RefCou¡
(
ch™√l
);

142 
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

144 
	`dli°AddNodeTaû
(
˛õ¡s
,
c
);

147 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

148 
	`addRïly
(
c
,
sh¨ed
.
subs¸ibebulk
);

149 
	`addRïlyBulk
(
c
,
ch™√l
);

150 
	`addRïlyL⁄gL⁄g
(
c
,
	`˛õ¡Subs¸ùti⁄sCou¡
(c));

151  
ªtvÆ
;

152 
	}
}

154 
	$subs¸ibeComm™d
(
˛õ¡
 *
c
) {

155 
j
;

157 
j
 = 1; j < 
c
->
¨gc
; j++)

158 
	`pubsubSubs¸ibeCh™√l
(
c
,c->
¨gv
[
j
]);

159 
c
->
Êags
 |
CLIENT_PUBSUB
;

160 
	}
}

163 
	$˛õ¡Subs¸ùti⁄sCou¡
(
˛õ¡
 *
c
) {

164  
	`di˘Size
(
c
->
pubsub_ch™√ls
)+

165 
	`dli°Lígth
(
c
->
pubsub_∑âîns
);

166 
	}
}

168 
	$unsubs¸ibeComm™d
(
˛õ¡
 *
c
) {

169 i‡(
c
->
¨gc
 == 1) {

170 
	`pubsubUnsubs¸ibeAŒCh™√ls
(
c
,1);

172 
j
;

174 
j
 = 1; j < 
c
->
¨gc
; j++)

175 
	`pubsubUnsubs¸ibeCh™√l
(
c
,c->
¨gv
[
j
],1);

177 i‡(
	`˛õ¡Subs¸ùti⁄sCou¡
(
c
Ë=0Ëc->
Êags
 &~
CLIENT_PUBSUB
;

178 
	}
}

181 
	$pubsubSubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
) {

182 
ªtvÆ
 = 0;

184 i‡(
	`dli°SórchKey
(
c
->
pubsub_∑âîns
,
∑âîn
Ë=
NULL
) {

185 
ªtvÆ
 = 1;

186 
pubsubP©ã∫
 *
∑t
;

187 
	`dli°AddNodeTaû
(
c
->
pubsub_∑âîns
,
∑âîn
);

188 
	`ö¸RefCou¡
(
∑âîn
);

189 
∑t
 = 
	`dÆloc
((*pat));

190 
∑t
->
∑âîn
 = 
	`gëDecodedObje˘
(pattern);

191 
∑t
->
˛õ¡
 = 
c
;

192 
	`dli°AddNodeTaû
(
c
->
vñ
->
pubsub_∑âîns
,
∑t
);

195 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

196 
	`addRïly
(
c
,
sh¨ed
.
psubs¸ibebulk
);

197 
	`addRïlyBulk
(
c
,
∑âîn
);

198 
	`addRïlyL⁄gL⁄g
(
c
,
	`˛õ¡Subs¸ùti⁄sCou¡
(c));

199  
ªtvÆ
;

200 
	}
}

202 
	$psubs¸ibeComm™d
(
˛õ¡
 *
c
) {

203 
j
;

205 
j
 = 1; j < 
c
->
¨gc
; j++)

206 
	`pubsubSubs¸ibeP©ã∫
(
c
,c->
¨gv
[
j
]);

207 
c
->
Êags
 |
CLIENT_PUBSUB
;

208 
	}
}

210 
	$punsubs¸ibeComm™d
(
˛õ¡
 *
c
) {

211 i‡(
c
->
¨gc
 == 1) {

212 
	`pubsubUnsubs¸ibeAŒP©ã∫s
(
c
,1);

214 
j
;

216 
j
 = 1; j < 
c
->
¨gc
; j++)

217 
	`pubsubUnsubs¸ibeP©ã∫
(
c
,c->
¨gv
[
j
],1);

219 i‡(
	`˛õ¡Subs¸ùti⁄sCou¡
(
c
Ë=0Ëc->
Êags
 &~
CLIENT_PUBSUB
;

220 
	}
}

223 
	$pubsubPublishMesßge
(
robj
 *
ch™√l
,Ñobj *
mesßge
) {

224 
ª˚ivîs
 = 0;

225 
di˘E¡ry
 *
de
;

226 
dli°Node
 *
 
;

227 
dli°Iãr
 
li
;

230 
de
 = 
	`di˘Föd
(
£rvî
.
pubsub_ch™√ls
,
ch™√l
);

231 i‡(
de
) {

232 
dli°
 *
li°
 = 
	`di˘GëVÆ
(
de
);

233 
dli°Node
 *
 
;

234 
dli°Iãr
 
li
;

236 
	`dli°Rewöd
(
li°
,&
li
);

237 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

238 
˛õ¡
 *
c
 = 
 
->
vÆue
;

240 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[3]);

241 
	`addRïly
(
c
,
sh¨ed
.
mesßgebulk
);

242 
	`addRïlyBulk
(
c
,
ch™√l
);

243 
	`addRïlyBulk
(
c
,
mesßge
);

244 
ª˚ivîs
++;

248 i‡(
	`dli°Lígth
(
£rvî
.
pubsub_∑âîns
)) {

249 
	`dli°Rewöd
(
£rvî
.
pubsub_∑âîns
,&
li
);

250 
ch™√l
 = 
	`gëDecodedObje˘
(channel);

251 (
 
 = 
	`dli°Next
(&
li
)Ë!
NULL
) {

252 
pubsubP©ã∫
 *
∑t
 = 
 
->
vÆue
;

254 i‡(
	`°rögm©chÀn
((*)
∑t
->
∑âîn
->
±r
,

255 
	`sd¶í
(
∑t
->
∑âîn
->
±r
),

256 (*)
ch™√l
->
±r
,

257 
	`sd¶í
(
ch™√l
->
±r
),0)) {

258 
	`addRïly
(
∑t
->
˛õ¡
,
sh¨ed
.
mbulkhdr
[4]);

259 
	`addRïly
(
∑t
->
˛õ¡
,
sh¨ed
.
pmesßgebulk
);

260 
	`addRïlyBulk
(
∑t
->
˛õ¡
,∑t->
∑âîn
);

261 
	`addRïlyBulk
(
∑t
->
˛õ¡
,
ch™√l
);

262 
	`addRïlyBulk
(
∑t
->
˛õ¡
,
mesßge
);

263 
ª˚ivîs
++;

266 
	`de¸RefCou¡
(
ch™√l
);

268  
ª˚ivîs
;

269 
	}
}

	@src/vr_pubsub.h

1 #i‚de‡
_VR_PUBSUB_H_


2 
	#_VR_PUBSUB_H_


	)

4 
	spubsubP©ã∫
 {

5 
˛õ¡
 *
	m˛õ¡
;

6 
robj
 *
	m∑âîn
;

7 } 
	tpubsubP©ã∫
;

9 
pubsubUnsubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
, 
nŸify
);

10 
pubsubUnsubs¸ibeAŒCh™√ls
(
˛õ¡
 *
c
, 
nŸify
);

11 
pubsubUnsubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
, 
nŸify
);

12 
pubsubUnsubs¸ibeAŒP©ã∫s
(
˛õ¡
 *
c
, 
nŸify
);

13 
pubsubSubs¸ibeCh™√l
(
˛õ¡
 *
c
, 
robj
 *
ch™√l
);

14 
˛õ¡Subs¸ùti⁄sCou¡
(
˛õ¡
 *
c
);

15 
subs¸ibeComm™d
(
˛õ¡
 *
c
);

16 
unsubs¸ibeComm™d
(
˛õ¡
 *
c
);

17 
psubs¸ibeComm™d
(
˛õ¡
 *
c
);

18 
punsubs¸ibeComm™d
(
˛õ¡
 *
c
);

19 
pubsubSubs¸ibeP©ã∫
(
˛õ¡
 *
c
, 
robj
 *
∑âîn
);

20 
pubsubPublishMesßge
(
robj
 *
ch™√l
,Ñobj *
mesßge
);

	@src/vr_quicklist.c

1 
	~<°rög.h
>

3 
	~<vr_c‹e.h
>

5 #i‡
deföed
(
REDIS_TEST
Ë|| deföed(
REDIS_TEST_VERBOSE
)

6 
	~<°dio.h
>

9 #i‚de‡
REDIS_STATIC


10 
	#REDIS_STATIC
 

	)

14 c⁄° 
size_t
 
	g›timiz©i⁄_Àvñ
[] = {4096, 8192, 16384, 32768, 65536};

18 
	#SIZE_SAFETY_LIMIT
 8192

	)

21 
	#MIN_COMPRESS_BYTES
 48

	)

26 
	#MIN_COMPRESS_IMPROVE
 8

	)

29 #i‚de‡
REDIS_TEST_VERBOSE


30 
	#D
(...)

	)

32 
	#D
(...) \

34 
	`¥ötf
("%s:%s:%d:\t", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

35 
	`¥ötf
(
__VA_ARGS__
); \

36 
	`¥ötf
("\n"); \

37 } 0);

	)

41 
	#öôE¡ry
(
e
) \

43 (
e
)->
zi
 = (e)->
vÆue
 = 
NULL
; \

44 (
e
)->
l⁄gvÆ
 = -123456789; \

45 (
e
)->
quickli°
 = 
NULL
; \

46 (
e
)->
node
 = 
NULL
; \

47 (
e
)->
off£t
 = 123456789; \

48 (
e
)->
sz
 = 0; \

49 } 0)

	)

51 #i‡
__GNUC__
 >= 3

52 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

53 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

55 
	#likñy
(
x
Ë(x)

	)

56 
	#u∆ikñy
(
x
Ë(x)

	)

61 
quickli°
 *
	$quickli°Cª©e
() {

62 
quickli°
 *quicklist;

64 
quickli°
 = 
	`dÆloc
((*quicklist));

65 
quickli°
->
hód
 = quickli°->
èû
 = 
NULL
;

66 
quickli°
->
Àn
 = 0;

67 
quickli°
->
cou¡
 = 0;

68 
quickli°
->
com¥ess
 = 0;

69 
quickli°
->
fûl
 = -2;

70  
quickli°
;

71 
	}
}

73 
	#COMPRESS_MAX
 (1 << 16)

	)

74 
	$quickli°SëCom¥essDïth
(
quickli°
 *quickli°, 
com¥ess
) {

75 i‡(
com¥ess
 > 
COMPRESS_MAX
) {

76 
com¥ess
 = 
COMPRESS_MAX
;

77 } i‡(
com¥ess
 < 0) {

78 
com¥ess
 = 0;

80 
quickli°
->
com¥ess
 = compress;

81 
	}
}

83 
	#FILL_MAX
 (1 << 15)

	)

84 
	$quickli°SëFûl
(
quickli°
 *quickli°, 
fûl
) {

85 i‡(
fûl
 > 
FILL_MAX
) {

86 
fûl
 = 
FILL_MAX
;

87 } i‡(
fûl
 < -5) {

88 
fûl
 = -5;

90 
quickli°
->
fûl
 = fill;

91 
	}
}

93 
	$quickli°SëO±i⁄s
(
quickli°
 *quickli°, 
fûl
, 
dïth
) {

94 
	`quickli°SëFûl
(
quickli°
, 
fûl
);

95 
	`quickli°SëCom¥essDïth
(
quickli°
, 
dïth
);

96 
	}
}

99 
quickli°
 *
	$quickli°New
(
fûl
, 
com¥ess
) {

100 
quickli°
 *quickli° = 
	`quickli°Cª©e
();

101 
	`quickli°SëO±i⁄s
(
quickli°
, 
fûl
, 
com¥ess
);

102  
quickli°
;

103 
	}
}

105 
REDIS_STATIC
 
quickli°Node
 *
	$quickli°Cª©eNode
() {

106 
quickli°Node
 *
node
;

107 
node
 = 
	`dÆloc
((*node));

108 
node
->
zl
 = 
NULL
;

109 
node
->
cou¡
 = 0;

110 
node
->
sz
 = 0;

111 
node
->
√xt
 =Çode->
¥ev
 = 
NULL
;

112 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_RAW
;

113 
node
->
c⁄èöî
 = 
QUICKLIST_NODE_CONTAINER_ZIPLIST
;

114 
node
->
ªcom¥ess
 = 0;

115  
node
;

116 
	}
}

119 
	$quickli°Cou¡
(
quickli°
 *
ql
Ë{  ql->
cou¡
; 
	}
}

122 
	$quickli°Rñó£
(
quickli°
 *quicklist) {

123 
Àn
;

124 
quickli°Node
 *
cuºít
, *
√xt
;

126 
cuºít
 = 
quickli°
->
hód
;

127 
Àn
 = 
quickli°
->len;

128 
Àn
--) {

129 
√xt
 = 
cuºít
->next;

131 
	`d‰ì
(
cuºít
->
zl
);

132 
quickli°
->
cou¡
 -
cuºít
->count;

134 
	`d‰ì
(
cuºít
);

136 
quickli°
->
Àn
--;

137 
cuºít
 = 
√xt
;

139 
	`d‰ì
(
quickli°
);

140 
	}
}

145 
REDIS_STATIC
 
	$__quickli°Com¥essNode
(
quickli°Node
 *
node
) {

146 #ifde‡
REDIS_TEST


147 
node
->
©ãm±ed_com¥ess
 = 1;

151 i‡(
node
->
sz
 < 
MIN_COMPRESS_BYTES
)

154 
quickli°LZF
 *
lzf
 = 
	`dÆloc
((*lzfË+ 
node
->
sz
);

157 i‡(((
lzf
->
sz
 = 
	`lzf_com¥ess
(
node
->
zl
,Çode->sz,Üzf->
com¥es£d
,

158 
node
->
sz
)) == 0) ||

159 
lzf
->
sz
 + 
MIN_COMPRESS_IMPROVE
 >
node
->sz) {

161 
	`d‰ì
(
lzf
);

164 
lzf
 = 
	`dªÆloc
÷zf, (*lzfË+Üzf->
sz
);

165 
	`d‰ì
(
node
->
zl
);

166 
node
->
zl
 = (*)
lzf
;

167 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_LZF
;

168 
node
->
ªcom¥ess
 = 0;

170 
	}
}

173 
	#quickli°Com¥essNode
(
_node
) \

175 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_RAW
) { \

176 
	`__quickli°Com¥essNode
((
_node
)); \

178 } 0)

	)

182 
REDIS_STATIC
 
	$__quickli°Decom¥essNode
(
quickli°Node
 *
node
) {

183 #ifde‡
REDIS_TEST


184 
node
->
©ãm±ed_com¥ess
 = 0;

187 *
decom¥es£d
 = 
	`dÆloc
(
node
->
sz
);

188 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

189 i‡(
	`lzf_decom¥ess
(
lzf
->
com¥es£d
,Üzf->
sz
, 
decom¥es£d
, 
node
->sz) == 0) {

191 
	`d‰ì
(
decom¥es£d
);

194 
	`d‰ì
(
lzf
);

195 
node
->
zl
 = 
decom¥es£d
;

196 
node
->
ícodög
 = 
QUICKLIST_NODE_ENCODING_RAW
;

198 
	}
}

201 
	#quickli°Decom¥essNode
(
_node
) \

203 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) { \

204 
	`__quickli°Decom¥essNode
((
_node
)); \

206 } 0)

	)

209 
	#quickli°Decom¥essNodeF‹U£
(
_node
) \

211 i‡((
_node
Ë&& (_node)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) { \

212 
	`__quickli°Decom¥essNode
((
_node
)); \

213 (
_node
)->
ªcom¥ess
 = 1; \

215 } 0)

	)

220 
size_t
 
	$quickli°GëLzf
(c⁄° 
quickli°Node
 *
node
, **
d©a
) {

221 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

222 *
d©a
 = 
lzf
->
com¥es£d
;

223  
lzf
->
sz
;

224 
	}
}

226 
	#quickli°AŒowsCom¥essi⁄
(
_ql
Ë((_ql)->
com¥ess
 !0)

	)

232 
REDIS_STATIC
 
	$__quickli°Com¥ess
(c⁄° 
quickli°
 *quicklist,

233 
quickli°Node
 *
node
) {

236 i‡(!
	`quickli°AŒowsCom¥essi⁄
(
quickli°
) ||

237 
quickli°
->
Àn
 < ()(quickli°->
com¥ess
 * 2))

242 i‡(
quickli°
->
com¥ess
 == 1) {

243 
quickli°Node
 *
h
 = 
quickli°
->
hód
, *
t
 = quickli°->
èû
;

244 
	`quickli°Decom¥essNode
(
h
);

245 
	`quickli°Decom¥essNode
(
t
);

246 i‡(
h
 !
node
 && 
t
 !=Çode)

247 
	`quickli°Com¥essNode
(
node
);

249 } i‡(
quickli°
->
com¥ess
 == 2) {

250 
quickli°Node
 *
h
 = 
quickli°
->
hód
, *
hn
 = h->
√xt
, *
h¬
 = hn->next;

251 
quickli°Node
 *
t
 = 
quickli°
->
èû
, *
ç
 =Å->
¥ev
, *
çp
 =Åp->prev;

252 
	`quickli°Decom¥essNode
(
h
);

253 
	`quickli°Decom¥essNode
(
hn
);

254 
	`quickli°Decom¥essNode
(
t
);

255 
	`quickli°Decom¥essNode
(
ç
);

256 i‡(
h
 !
node
 && 
hn
 !nodê&& 
t
 !nodê&& 
ç
 !=Çode) {

257 
	`quickli°Com¥essNode
(
node
);

259 i‡(
h¬
 !
t
) {

260 
	`quickli°Com¥essNode
(
h¬
);

262 i‡(
çp
 !
h
) {

263 
	`quickli°Com¥essNode
(
çp
);

272 
quickli°Node
 *
f‹w¨d
 = 
quickli°
->
hód
;

273 
quickli°Node
 *
ªvî£
 = 
quickli°
->
èû
;

274 
dïth
 = 0;

275 
ö_dïth
 = 0;

276 
dïth
++ < 
quickli°
->
com¥ess
) {

277 
	`quickli°Decom¥essNode
(
f‹w¨d
);

278 
	`quickli°Decom¥essNode
(
ªvî£
);

280 i‡(
f‹w¨d
 =
node
 || 
ªvî£
 ==Çode)

281 
ö_dïth
 = 1;

283 i‡(
f‹w¨d
 =
ªvî£
)

286 
f‹w¨d
 = f‹w¨d->
√xt
;

287 
ªvî£
 =Ñevî£->
¥ev
;

290 i‡(!
ö_dïth
)

291 
	`quickli°Com¥essNode
(
node
);

293 i‡(
dïth
 > 2) {

295 
	`quickli°Com¥essNode
(
f‹w¨d
);

296 
	`quickli°Com¥essNode
(
ªvî£
);

298 
	}
}

300 
	#quickli°Com¥ess
(
_ql
, 
_node
) \

302 i‡((
_node
)->
ªcom¥ess
) \

303 
	`quickli°Com¥essNode
((
_node
)); \

305 
	`__quickli°Com¥ess
((
_ql
), (
_node
)); \

306 } 0)

	)

309 
	#quickli°Recom¥essO∆y
(
_ql
, 
_node
) \

311 i‡((
_node
)->
ªcom¥ess
) \

312 
	`quickli°Com¥essNode
((
_node
)); \

313 } 0)

	)

319 
REDIS_STATIC
 
	$__quickli°In£πNode
(
quickli°
 *quicklist,

320 
quickli°Node
 *
ﬁd_node
,

321 
quickli°Node
 *
√w_node
, 
a·î
) {

322 i‡(
a·î
) {

323 
√w_node
->
¥ev
 = 
ﬁd_node
;

324 i‡(
ﬁd_node
) {

325 
√w_node
->
√xt
 = 
ﬁd_node
->next;

326 i‡(
ﬁd_node
->
√xt
)

327 
ﬁd_node
->
√xt
->
¥ev
 = 
√w_node
;

328 
ﬁd_node
->
√xt
 = 
√w_node
;

330 i‡(
quickli°
->
èû
 =
ﬁd_node
)

331 
quickli°
->
èû
 = 
√w_node
;

333 
√w_node
->
√xt
 = 
ﬁd_node
;

334 i‡(
ﬁd_node
) {

335 
√w_node
->
¥ev
 = 
ﬁd_node
->prev;

336 i‡(
ﬁd_node
->
¥ev
)

337 
ﬁd_node
->
¥ev
->
√xt
 = 
√w_node
;

338 
ﬁd_node
->
¥ev
 = 
√w_node
;

340 i‡(
quickli°
->
hód
 =
ﬁd_node
)

341 
quickli°
->
hód
 = 
√w_node
;

344 i‡(
quickli°
->
Àn
 == 0) {

345 
quickli°
->
hód
 = quickli°->
èû
 = 
√w_node
;

348 i‡(
ﬁd_node
)

349 
	`quickli°Com¥ess
(
quickli°
, 
ﬁd_node
);

351 
quickli°
->
Àn
++;

352 
	}
}

355 
REDIS_STATIC
 
	$_quickli°In£πNodeBef‹e
(
quickli°
 *quicklist,

356 
quickli°Node
 *
ﬁd_node
,

357 
quickli°Node
 *
√w_node
) {

358 
	`__quickli°In£πNode
(
quickli°
, 
ﬁd_node
, 
√w_node
, 0);

359 
	}
}

361 
REDIS_STATIC
 
	$_quickli°In£πNodeA·î
(
quickli°
 *quicklist,

362 
quickli°Node
 *
ﬁd_node
,

363 
quickli°Node
 *
√w_node
) {

364 
	`__quickli°In£πNode
(
quickli°
, 
ﬁd_node
, 
√w_node
, 1);

365 
	}
}

367 
REDIS_STATIC
 

368 
	$_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(c⁄° 
size_t
 
sz
,

369 c⁄° 
fûl
) {

370 i‡(
fûl
 >= 0)

373 
size_t
 
off£t
 = (-
fûl
) - 1;

374 i‡(
off£t
 < ((
›timiz©i⁄_Àvñ
) / (*optimization_level))) {

375 i‡(
sz
 <
›timiz©i⁄_Àvñ
[
off£t
]) {

383 
	}
}

385 
	#sizeMìtsSa„tyLimô
(
sz
Ë((szË<
SIZE_SAFETY_LIMIT
)

	)

387 
REDIS_STATIC
 
	$_quickli°NodeAŒowIn£π
(c⁄° 
quickli°Node
 *
node
,

388 c⁄° 
fûl
, c⁄° 
size_t
 
sz
) {

389 i‡(
	`u∆ikñy
(!
node
))

392 
zùli°_ovîhód
;

394 i‡(
sz
 < 254)

395 
zùli°_ovîhód
 = 1;

397 
zùli°_ovîhód
 = 5;

400 i‡(
sz
 < 64)

401 
zùli°_ovîhód
 += 1;

402 i‡(
	`likñy
(
sz
 < 16384))

403 
zùli°_ovîhód
 += 2;

405 
zùli°_ovîhód
 += 5;

408 
√w_sz
 = 
node
->
sz
 + sz + 
zùli°_ovîhód
;

409 i‡(
	`likñy
(
	`_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(
√w_sz
, 
fûl
)))

411 i‡(!
	`sizeMìtsSa„tyLimô
(
√w_sz
))

413 i‡(()
node
->
cou¡
 < 
fûl
)

417 
	}
}

419 
REDIS_STATIC
 
	$_quickli°NodeAŒowMîge
(c⁄° 
quickli°Node
 *
a
,

420 c⁄° 
quickli°Node
 *
b
,

421 c⁄° 
fûl
) {

422 i‡(!
a
 || !
b
)

427 
mîge_sz
 = 
a
->
sz
 + 
b
->sz - 11;

428 i‡(
	`likñy
(
	`_quickli°NodeSizeMìtsO±imiz©i⁄Requúemít
(
mîge_sz
, 
fûl
)))

430 i‡(!
	`sizeMìtsSa„tyLimô
(
mîge_sz
))

432 i‡(()(
a
->
cou¡
 + 
b
->cou¡Ë<
fûl
)

436 
	}
}

438 
	#quickli°NodeUpd©eSz
(
node
) \

440 (
node
)->
sz
 = 
	`zùli°BlobLí
(“ode)->
zl
); \

441 } 0)

	)

447 
	$quickli°PushHód
(
quickli°
 *quickli°, *
vÆue
, 
size_t
 
sz
) {

448 
quickli°Node
 *
‹ig_hód
 = 
quickli°
->
hód
;

449 i‡(
	`likñy
(

450 
	`_quickli°NodeAŒowIn£π
(
quickli°
->
hód
, quickli°->
fûl
, 
sz
))) {

451 
quickli°
->
hód
->
zl
 =

452 
	`zùli°Push
(
quickli°
->
hód
->
zl
, 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

453 
	`quickli°NodeUpd©eSz
(
quickli°
->
hód
);

455 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

456 
node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

458 
	`quickli°NodeUpd©eSz
(
node
);

459 
	`_quickli°In£πNodeBef‹e
(
quickli°
, quickli°->
hód
, 
node
);

461 
quickli°
->
cou¡
++;

462 
quickli°
->
hód
->
cou¡
++;

463  (
‹ig_hód
 !
quickli°
->
hód
);

464 
	}
}

470 
	$quickli°PushTaû
(
quickli°
 *quickli°, *
vÆue
, 
size_t
 
sz
) {

471 
quickli°Node
 *
‹ig_èû
 = 
quickli°
->
èû
;

472 i‡(
	`likñy
(

473 
	`_quickli°NodeAŒowIn£π
(
quickli°
->
èû
, quickli°->
fûl
, 
sz
))) {

474 
quickli°
->
èû
->
zl
 =

475 
	`zùli°Push
(
quickli°
->
èû
->
zl
, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

476 
	`quickli°NodeUpd©eSz
(
quickli°
->
èû
);

478 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

479 
node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

481 
	`quickli°NodeUpd©eSz
(
node
);

482 
	`_quickli°In£πNodeA·î
(
quickli°
, quickli°->
èû
, 
node
);

484 
quickli°
->
cou¡
++;

485 
quickli°
->
èû
->
cou¡
++;

486  (
‹ig_èû
 !
quickli°
->
èû
);

487 
	}
}

492 
	$quickli°AµídZùli°
(
quickli°
 *quickli°, *
zl
) {

493 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

495 
node
->
zl
 = zl;

496 
node
->
cou¡
 = 
	`zùli°Lí
“ode->
zl
);

497 
node
->
sz
 = 
	`zùli°BlobLí
(
zl
);

499 
	`_quickli°In£πNodeA·î
(
quickli°
, quickli°->
èû
, 
node
);

500 
quickli°
->
cou¡
 +
node
->count;

501 
	}
}

509 
quickli°
 *
	$quickli°AµídVÆuesFromZùli°
(
quickli°
 *quicklist,

510 *
zl
) {

511 *
vÆue
;

512 
sz
;

513 
l⁄gvÆ
;

514 
l⁄g°r
[32] = {0};

516 *
p
 = 
	`zùli°Index
(
zl
, 0);

517 
	`zùli°Gë
(
p
, &
vÆue
, &
sz
, &
l⁄gvÆ
)) {

518 i‡(!
vÆue
) {

520 
sz
 = 
	`Œ2°rög
(
l⁄g°r
, ÷⁄g°r), 
l⁄gvÆ
);

521 
vÆue
 = (*)
l⁄g°r
;

523 
	`quickli°PushTaû
(
quickli°
, 
vÆue
, 
sz
);

524 
p
 = 
	`zùli°Next
(
zl
,Ö);

526 
	`d‰ì
(
zl
);

527  
quickli°
;

528 
	}
}

533 
quickli°
 *
	$quickli°Cª©eFromZùli°
(
fûl
, 
com¥ess
,

534 *
zl
) {

535  
	`quickli°AµídVÆuesFromZùli°
(
	`quickli°New
(
fûl
, 
com¥ess
), 
zl
);

536 
	}
}

538 
	#quickli°DñëeIfEm±y
(
ql
, 
n
) \

540 i‡((
n
)->
cou¡
 == 0) { \

541 
	`__quickli°DñNode
((
ql
), (
n
)); \

542 (
n
Ë
NULL
; \

544 } 0)

	)

546 
REDIS_STATIC
 
	$__quickli°DñNode
(
quickli°
 *quicklist,

547 
quickli°Node
 *
node
) {

548 i‡(
node
->
√xt
)

549 
node
->
√xt
->
¥ev
 =Çode->prev;

550 i‡(
node
->
¥ev
)

551 
node
->
¥ev
->
√xt
 =Çode->next;

553 i‡(
node
 =
quickli°
->
èû
) {

554 
quickli°
->
èû
 = 
node
->
¥ev
;

557 i‡(
node
 =
quickli°
->
hód
) {

558 
quickli°
->
hód
 = 
node
->
√xt
;

563 
	`__quickli°Com¥ess
(
quickli°
, 
NULL
);

565 
quickli°
->
cou¡
 -
node
->count;

567 
	`d‰ì
(
node
->
zl
);

568 
	`d‰ì
(
node
);

569 
quickli°
->
Àn
--;

570 
	}
}

580 
REDIS_STATIC
 
	$quickli°DñIndex
(
quickli°
 *quickli°, 
quickli°Node
 *
node
,

581 **
p
) {

582 
g⁄e
 = 0;

584 
node
->
zl
 = 
	`zùli°Dñëe
“ode->zl, 
p
);

585 
node
->
cou¡
--;

586 i‡(
node
->
cou¡
 == 0) {

587 
g⁄e
 = 1;

588 
	`__quickli°DñNode
(
quickli°
, 
node
);

590 
	`quickli°NodeUpd©eSz
(
node
);

592 
quickli°
->
cou¡
--;

594  
g⁄e
 ? 1 : 0;

595 
	}
}

601 
	$quickli°DñE¡ry
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
) {

602 
quickli°Node
 *
¥ev
 = 
íåy
->
node
->prev;

603 
quickli°Node
 *
√xt
 = 
íåy
->
node
->next;

604 
dñëed_node
 = 
	`quickli°DñIndex
((
quickli°
 *)
íåy
->quicklist,

605 
íåy
->
node
, &íåy->
zi
);

608 
ôî
->
zi
 = 
NULL
;

611 i‡(
dñëed_node
) {

612 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

613 
ôî
->
cuºít
 = 
√xt
;

614 
ôî
->
off£t
 = 0;

615 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

616 
ôî
->
cuºít
 = 
¥ev
;

617 
ôî
->
off£t
 = -1;

628 
	}
}

634 
	$quickli°Rïœ˚AtIndex
(
quickli°
 *quickli°, 
ödex
, *
d©a
,

635 
sz
) {

636 
quickli°E¡ry
 
íåy
;

637 i‡(
	`likñy
(
	`quickli°Index
(
quickli°
, 
ödex
, &
íåy
))) {

639 
íåy
.
node
->
zl
 = 
	`zùli°Dñëe
”¡ry.node->zl, &íåy.
zi
);

640 
íåy
.
node
->
zl
 = 
	`zùli°In£π
”¡ry.node->zl,É¡ry.
zi
, 
d©a
, 
sz
);

641 
	`quickli°Com¥ess
(
quickli°
, 
íåy
.
node
);

646 
	}
}

661 
REDIS_STATIC
 
quickli°Node
 *
	$_quickli°Zùli°Mîge
(
quickli°
 *quicklist,

662 
quickli°Node
 *
a
,

663 
quickli°Node
 *
b
) {

664 
	`D
("Reque°ed mîgê◊,bË(%u, %u)", 
a
->
cou¡
, 
b
->count);

666 
	`quickli°Decom¥essNode
(
a
);

667 
	`quickli°Decom¥essNode
(
b
);

668 i‡((
	`zùli°Mîge
(&
a
->
zl
, &
b
->zl))) {

670 
quickli°Node
 *
kìp
 = 
NULL
, *
nokìp
 = NULL;

671 i‡(!
a
->
zl
) {

672 
nokìp
 = 
a
;

673 
kìp
 = 
b
;

674 } i‡(!
b
->
zl
) {

675 
nokìp
 = 
b
;

676 
kìp
 = 
a
;

678 
kìp
->
cou¡
 = 
	`zùli°Lí
(kìp->
zl
);

679 
	`quickli°NodeUpd©eSz
(
kìp
);

681 
nokìp
->
cou¡
 = 0;

682 
	`__quickli°DñNode
(
quickli°
, 
nokìp
);

683 
	`quickli°Com¥ess
(
quickli°
, 
kìp
);

684  
kìp
;

687  
NULL
;

689 
	}
}

699 
REDIS_STATIC
 
	$_quickli°MîgeNodes
(
quickli°
 *quicklist,

700 
quickli°Node
 *
˚¡î
) {

701 
fûl
 = 
quickli°
->fill;

702 
quickli°Node
 *
¥ev
, *
¥ev_¥ev
, *
√xt
, *
√xt_√xt
, *
èrgë
;

703 
¥ev
 = 
¥ev_¥ev
 = 
√xt
 = 
√xt_√xt
 = 
èrgë
 = 
NULL
;

705 i‡(
˚¡î
->
¥ev
) {

706 
¥ev
 = 
˚¡î
->prev;

707 i‡(
˚¡î
->
¥ev
->prev)

708 
¥ev_¥ev
 = 
˚¡î
->
¥ev
->prev;

711 i‡(
˚¡î
->
√xt
) {

712 
√xt
 = 
˚¡î
->next;

713 i‡(
˚¡î
->
√xt
->next)

714 
√xt_√xt
 = 
˚¡î
->
√xt
->next;

718 i‡(
	`_quickli°NodeAŒowMîge
(
¥ev
, 
¥ev_¥ev
, 
fûl
)) {

719 
	`_quickli°Zùli°Mîge
(
quickli°
, 
¥ev_¥ev
, 
¥ev
);

720 
¥ev_¥ev
 = 
¥ev
 = 
NULL
;

724 i‡(
	`_quickli°NodeAŒowMîge
(
√xt
, 
√xt_√xt
, 
fûl
)) {

725 
	`_quickli°Zùli°Mîge
(
quickli°
, 
√xt
, 
√xt_√xt
);

726 
√xt
 = 
√xt_√xt
 = 
NULL
;

730 i‡(
	`_quickli°NodeAŒowMîge
(
˚¡î
, cíãr->
¥ev
, 
fûl
)) {

731 
èrgë
 = 
	`_quickli°Zùli°Mîge
(
quickli°
, 
˚¡î
->
¥ev
, center);

732 
˚¡î
 = 
NULL
;

735 
èrgë
 = 
˚¡î
;

739 i‡(
	`_quickli°NodeAŒowMîge
(
èrgë
,Å¨gë->
√xt
, 
fûl
)) {

740 
	`_quickli°Zùli°Mîge
(
quickli°
, 
èrgë
,Å¨gë->
√xt
);

742 
	}
}

763 
REDIS_STATIC
 
quickli°Node
 *
	$_quickli°S∂ôNode
(
quickli°Node
 *
node
, 
off£t
,

764 
a·î
) {

765 
size_t
 
zl_sz
 = 
node
->
sz
;

767 
quickli°Node
 *
√w_node
 = 
	`quickli°Cª©eNode
();

768 
√w_node
->
zl
 = 
	`dÆloc
(
zl_sz
);

771 
	`mem˝y
(
√w_node
->
zl
, 
node
->zl, 
zl_sz
);

774 
‹ig_°¨t
 = 
a·î
 ? 
off£t
 + 1 : 0;

775 
‹ig_exã¡
 = 
a·î
 ? -1 : 
off£t
;

776 
√w_°¨t
 = 
a·î
 ? 0 : 
off£t
;

777 
√w_exã¡
 = 
a·î
 ? 
off£t
 + 1 : -1;

779 
	`D
("A·î %d (%d);Ñ™ges: [%d, %d], [%d, %d]", 
a·î
, 
off£t
, 
‹ig_°¨t
,

780 
‹ig_exã¡
, 
√w_°¨t
, 
√w_exã¡
);

782 
node
->
zl
 = 
	`zùli°DñëeR™ge
“ode->zl, 
‹ig_°¨t
, 
‹ig_exã¡
);

783 
node
->
cou¡
 = 
	`zùli°Lí
“ode->
zl
);

784 
	`quickli°NodeUpd©eSz
(
node
);

786 
√w_node
->
zl
 = 
	`zùli°DñëeR™ge
“ew_node->zl, 
√w_°¨t
, 
√w_exã¡
);

787 
√w_node
->
cou¡
 = 
	`zùli°Lí
“ew_node->
zl
);

788 
	`quickli°NodeUpd©eSz
(
√w_node
);

790 
	`D
("A·î s∂ôÜígths: orig (%d),Çew (%d)", 
node
->
cou¡
, 
√w_node
->count);

791  
√w_node
;

792 
	}
}

798 
REDIS_STATIC
 
	$_quickli°In£π
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

799 *
vÆue
, c⁄° 
size_t
 
sz
, 
a·î
) {

800 
fuŒ
 = 0, 
©_èû
 = 0, 
©_hód
 = 0, 
fuŒ_√xt
 = 0, 
fuŒ_¥ev
 = 0;

801 
fûl
 = 
quickli°
->fill;

802 
quickli°Node
 *
node
 = 
íåy
->node;

803 
quickli°Node
 *
√w_node
 = 
NULL
;

805 i‡(!
node
) {

807 
	`D
("NoÇode given!");

808 
√w_node
 = 
	`quickli°Cª©eNode
();

809 
√w_node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

810 
	`__quickli°In£πNode
(
quickli°
, 
NULL
, 
√w_node
, 
a·î
);

811 
√w_node
->
cou¡
++;

812 
quickli°
->
cou¡
++;

817 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
, 
fûl
, 
sz
)) {

818 
	`D
("CurrentÇode is full with count %d withÑequested fill %lu",

819 
node
->
cou¡
, 
fûl
);

820 
fuŒ
 = 1;

823 i‡(
a·î
 && (
íåy
->
off£t
 =
node
->
cou¡
)) {

824 
	`D
("At Tail of current ziplist");

825 
©_èû
 = 1;

826 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
->
√xt
, 
fûl
, 
sz
)) {

827 
	`D
("NextÇode is fullÅoo.");

828 
fuŒ_√xt
 = 1;

832 i‡(!
a·î
 && (
íåy
->
off£t
 == 0)) {

833 
	`D
("At Head");

834 
©_hód
 = 1;

835 i‡(!
	`_quickli°NodeAŒowIn£π
(
node
->
¥ev
, 
fûl
, 
sz
)) {

836 
	`D
("PrevÇode is fullÅoo.");

837 
fuŒ_¥ev
 = 1;

842 i‡(!
fuŒ
 && 
a·î
) {

843 
	`D
("Not full, insertingáfter currentÖosition.");

844 
	`quickli°Decom¥essNodeF‹U£
(
node
);

845 *
√xt
 = 
	`zùli°Next
(
node
->
zl
, 
íåy
->
zi
);

846 i‡(
√xt
 =
NULL
) {

847 
node
->
zl
 = 
	`zùli°Push
“ode->zl, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

849 
node
->
zl
 = 
	`zùli°In£π
“ode->zl, 
√xt
, 
vÆue
, 
sz
);

851 
node
->
cou¡
++;

852 
	`quickli°NodeUpd©eSz
(
node
);

853 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

854 } i‡(!
fuŒ
 && !
a·î
) {

855 
	`D
("Not full, inserting before currentÖosition.");

856 
	`quickli°Decom¥essNodeF‹U£
(
node
);

857 
node
->
zl
 = 
	`zùli°In£π
“ode->zl, 
íåy
->
zi
, 
vÆue
, 
sz
);

858 
node
->
cou¡
++;

859 
	`quickli°NodeUpd©eSz
(
node
);

860 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

861 } i‡(
fuŒ
 && 
©_èû
 && 
node
->
√xt
 && !
fuŒ_√xt
 && 
a·î
) {

864 
	`D
("FullándÅail, butÇext isn't full; insertingÇextÇode head");

865 
√w_node
 = 
node
->
√xt
;

866 
	`quickli°Decom¥essNodeF‹U£
(
√w_node
);

867 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

868 
√w_node
->
cou¡
++;

869 
	`quickli°NodeUpd©eSz
(
√w_node
);

870 
	`quickli°Recom¥essO∆y
(
quickli°
, 
√w_node
);

871 } i‡(
fuŒ
 && 
©_hód
 && 
node
->
¥ev
 && !
fuŒ_¥ev
 && !
a·î
) {

874 
	`D
("Fullánd head, butÖrev isn't full, insertingÖrevÇodeÅail");

875 
√w_node
 = 
node
->
¥ev
;

876 
	`quickli°Decom¥essNodeF‹U£
(
√w_node
);

877 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
, 
ZIPLIST_TAIL
);

878 
√w_node
->
cou¡
++;

879 
	`quickli°NodeUpd©eSz
(
√w_node
);

880 
	`quickli°Recom¥essO∆y
(
quickli°
, 
√w_node
);

881 } i‡(
fuŒ
 && ((
©_èû
 && 
node
->
√xt
 && 
fuŒ_√xt
 && 
a·î
) ||

882 (
©_hód
 && 
node
->
¥ev
 && 
fuŒ_¥ev
 && !
a·î
))) {

885 
	`D
("\tprovisioningÇewÇode...");

886 
√w_node
 = 
	`quickli°Cª©eNode
();

887 
√w_node
->
zl
 = 
	`zùli°Push
(
	`zùli°New
(), 
vÆue
, 
sz
, 
ZIPLIST_HEAD
);

888 
√w_node
->
cou¡
++;

889 
	`quickli°NodeUpd©eSz
(
√w_node
);

890 
	`__quickli°In£πNode
(
quickli°
, 
node
, 
√w_node
, 
a·î
);

891 } i‡(
fuŒ
) {

894 
	`D
("\tsplittingÇode...");

895 
	`quickli°Decom¥essNodeF‹U£
(
node
);

896 
√w_node
 = 
	`_quickli°S∂ôNode
(
node
, 
íåy
->
off£t
, 
a·î
);

897 
√w_node
->
zl
 = 
	`zùli°Push
“ew_node->zl, 
vÆue
, 
sz
,

898 
a·î
 ? 
ZIPLIST_HEAD
 : 
ZIPLIST_TAIL
);

899 
√w_node
->
cou¡
++;

900 
	`quickli°NodeUpd©eSz
(
√w_node
);

901 
	`__quickli°In£πNode
(
quickli°
, 
node
, 
√w_node
, 
a·î
);

902 
	`_quickli°MîgeNodes
(
quickli°
, 
node
);

905 
quickli°
->
cou¡
++;

906 
	}
}

908 
	$quickli°In£πBef‹e
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

909 *
vÆue
, c⁄° 
size_t
 
sz
) {

910 
	`_quickli°In£π
(
quickli°
, 
íåy
, 
vÆue
, 
sz
, 0);

911 
	}
}

913 
	$quickli°In£πA·î
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
íåy
,

914 *
vÆue
, c⁄° 
size_t
 
sz
) {

915 
	`_quickli°In£π
(
quickli°
, 
íåy
, 
vÆue
, 
sz
, 1);

916 
	}
}

924 
	$quickli°DñR™ge
(
quickli°
 *quickli°, c⁄° 
°¨t
,

925 c⁄° 
cou¡
) {

926 i‡(
cou¡
 <= 0)

929 
exã¡
 = 
cou¡
;

931 i‡(
°¨t
 >0 && 
exã¡
 > (
quickli°
->
cou¡
 - start)) {

933 
exã¡
 = 
quickli°
->
cou¡
 - 
°¨t
;

934 } i‡(
°¨t
 < 0 && 
exã¡
 > ()(-start)) {

936 
exã¡
 = -
°¨t
;

939 
quickli°E¡ry
 
íåy
;

940 i‡(!
	`quickli°Index
(
quickli°
, 
°¨t
, &
íåy
))

943 
	`D
("Quickli° dñëêªque° f‹ sèπ %ld, cou¡ %ld,Éxã¡: %ld", 
°¨t
,

944 
cou¡
, 
exã¡
);

945 
quickli°Node
 *
node
 = 
íåy
.node;

948 
exã¡
) {

949 
quickli°Node
 *
√xt
 = 
node
->next;

951 
dñ
;

952 
dñëe_ítúe_node
 = 0;

953 i‡(
íåy
.
off£t
 =0 && 
exã¡
 >
node
->
cou¡
) {

956 
dñëe_ítúe_node
 = 1;

957 
dñ
 = 
node
->
cou¡
;

958 } i‡(
íåy
.
off£t
 >0 && 
exã¡
 >
node
->
cou¡
) {

961 
dñ
 = 
node
->
cou¡
 - 
íåy
.
off£t
;

962 } i‡(
íåy
.
off£t
 < 0) {

968 
dñ
 = -
íåy
.
off£t
;

973 i‡(
dñ
 > 
exã¡
)

974 
dñ
 = 
exã¡
;

978 
dñ
 = 
exã¡
;

981 
	`D
("[%ld]:áskingÅo del: %ld because offset: %d; (ENTIRE NODE: %d), "

983 
exã¡
, 
dñ
, 
íåy
.
off£t
, 
dñëe_ítúe_node
, 
node
->
cou¡
);

985 i‡(
dñëe_ítúe_node
) {

986 
	`__quickli°DñNode
(
quickli°
, 
node
);

988 
	`quickli°Decom¥essNodeF‹U£
(
node
);

989 
node
->
zl
 = 
	`zùli°DñëeR™ge
“ode->zl, 
íåy
.
off£t
, 
dñ
);

990 
	`quickli°NodeUpd©eSz
(
node
);

991 
node
->
cou¡
 -
dñ
;

992 
quickli°
->
cou¡
 -
dñ
;

993 
	`quickli°DñëeIfEm±y
(
quickli°
, 
node
);

994 i‡(
node
)

995 
	`quickli°Recom¥essO∆y
(
quickli°
, 
node
);

998 
exã¡
 -
dñ
;

1000 
node
 = 
√xt
;

1002 
íåy
.
off£t
 = 0;

1005 
	}
}

1008 
	$quickli°Com∑ª
(*
p1
, *
p2
, 
p2_Àn
) {

1009  
	`zùli°Com∑ª
(
p1
, 
p2
, 
p2_Àn
);

1010 
	}
}

1014 
quickli°Iãr
 *
	$quickli°GëIãøt‹
(c⁄° 
quickli°
 *quickli°, 
dúe˘i⁄
) {

1015 
quickli°Iãr
 *
ôî
;

1017 
ôî
 = 
	`dÆloc
((*iter));

1019 i‡(
dúe˘i⁄
 =
AL_START_HEAD
) {

1020 
ôî
->
cuºít
 = 
quickli°
->
hód
;

1021 
ôî
->
off£t
 = 0;

1022 } i‡(
dúe˘i⁄
 =
AL_START_TAIL
) {

1023 
ôî
->
cuºít
 = 
quickli°
->
èû
;

1024 
ôî
->
off£t
 = -1;

1027 
ôî
->
dúe˘i⁄
 = direction;

1028 
ôî
->
quickli°
 = quicklist;

1030 
ôî
->
zi
 = 
NULL
;

1032  
ôî
;

1033 
	}
}

1037 
quickli°Iãr
 *
	$quickli°GëIãøt‹AtIdx
(c⁄° 
quickli°
 *quicklist,

1038 c⁄° 
dúe˘i⁄
,

1039 c⁄° 
idx
) {

1040 
quickli°E¡ry
 
íåy
;

1042 i‡(
	`quickli°Index
(
quickli°
, 
idx
, &
íåy
)) {

1043 
quickli°Iãr
 *
ba£
 = 
	`quickli°GëIãøt‹
(
quickli°
, 
dúe˘i⁄
);

1044 
ba£
->
zi
 = 
NULL
;

1045 
ba£
->
cuºít
 = 
íåy
.
node
;

1046 
ba£
->
off£t
 = 
íåy
.offset;

1047  
ba£
;

1049  
NULL
;

1051 
	}
}

1055 
	$quickli°Rñó£Iãøt‹
(
quickli°Iãr
 *
ôî
) {

1056 i‡(
ôî
->
cuºít
)

1057 
	`quickli°Com¥ess
(
ôî
->
quickli°
, iãr->
cuºít
);

1059 
	`d‰ì
(
ôî
);

1060 
	}
}

1083 
	$quickli°Next
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
) {

1084 
	`öôE¡ry
(
íåy
);

1086 i‡(!
ôî
) {

1087 
	`D
("Returning becauseÇo iter!");

1091 
íåy
->
quickli°
 = 
ôî
->quicklist;

1092 
íåy
->
node
 = 
ôî
->
cuºít
;

1094 i‡(!
ôî
->
cuºít
) {

1095 
	`D
("Returning because currentÇode is NULL")

1099 *(*
√xtFn
)(*, *Ë
NULL
;

1100 
off£t_upd©e
 = 0;

1102 i‡(!
ôî
->
zi
) {

1104 
	`quickli°Decom¥essNodeF‹U£
(
ôî
->
cuºít
);

1105 
ôî
->
zi
 = 
	`zùli°Index
(ôî->
cuºít
->
zl
, iãr->
off£t
);

1108 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

1109 
√xtFn
 = 
zùli°Next
;

1110 
off£t_upd©e
 = 1;

1111 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

1112 
√xtFn
 = 
zùli°Pªv
;

1113 
off£t_upd©e
 = -1;

1115 
ôî
->
zi
 = 
	`√xtFn
(ôî->
cuºít
->
zl
, iter->zi);

1116 
ôî
->
off£t
 +
off£t_upd©e
;

1119 
íåy
->
zi
 = 
ôî
->zi;

1120 
íåy
->
off£t
 = 
ôî
->offset;

1122 i‡(
ôî
->
zi
) {

1124 
	`zùli°Gë
(
íåy
->
zi
, &íåy->
vÆue
, &íåy->
sz
, &íåy->
l⁄gvÆ
);

1129 
	`quickli°Com¥ess
(
ôî
->
quickli°
, iãr->
cuºít
);

1130 i‡(
ôî
->
dúe˘i⁄
 =
AL_START_HEAD
) {

1132 
	`D
("JumpingÅo start ofÇextÇode");

1133 
ôî
->
cuºít
 = iãr->cuºít->
√xt
;

1134 
ôî
->
off£t
 = 0;

1135 } i‡(
ôî
->
dúe˘i⁄
 =
AL_START_TAIL
) {

1137 
	`D
("JumpingÅoÉnd ofÖreviousÇode");

1138 
ôî
->
cuºít
 = iãr->cuºít->
¥ev
;

1139 
ôî
->
off£t
 = -1;

1141 
ôî
->
zi
 = 
NULL
;

1142  
	`quickli°Next
(
ôî
, 
íåy
);

1144 
	}
}

1152 
quickli°
 *
	$quickli°Dup
(
quickli°
 *
‹ig
) {

1153 
quickli°
 *
c›y
;

1154 
quickli°Node
 *
cuºít
;

1156 
c›y
 = 
	`quickli°New
(
‹ig
->
fûl
, orig->
com¥ess
);

1158 
cuºít
 = 
‹ig
->
hód
; current;

1159 
cuºít
 = cuºít->
√xt
) {

1160 
quickli°Node
 *
node
 = 
	`quickli°Cª©eNode
();

1162 i‡(
node
->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
) {

1163 
quickli°LZF
 *
lzf
 = (quickli°LZF *)
node
->
zl
;

1164 
size_t
 
lzf_sz
 = (*
lzf
Ë+Üzf->
sz
;

1165 
node
->
zl
 = 
	`dÆloc
(
lzf_sz
);

1166 
	`mem˝y
(
node
->
zl
, 
cuºít
->zl, 
lzf_sz
);

1167 } i‡(
node
->
ícodög
 =
QUICKLIST_NODE_ENCODING_RAW
) {

1168 
node
->
zl
 = 
	`dÆloc
(
cuºít
->
sz
);

1169 
	`mem˝y
(
node
->
zl
, 
cuºít
->zl, cuºít->
sz
);

1172 
node
->
cou¡
 = 
cuºít
->count;

1173 
c›y
->
cou¡
 +
node
->count;

1174 
node
->
sz
 = 
cuºít
->sz;

1175 
node
->
ícodög
 = 
cuºít
->encoding;

1177 
	`_quickli°In£πNodeA·î
(
c›y
, c›y->
èû
, 
node
);

1181  
c›y
;

1182 
	}
}

1192 
	$quickli°Index
(c⁄° 
quickli°
 *quickli°, c⁄° 
idx
,

1193 
quickli°E¡ry
 *
íåy
) {

1194 
quickli°Node
 *
n
;

1195 
accum
 = 0;

1196 
ödex
;

1197 
f‹w¨d
 = 
idx
 < 0 ? 0 : 1;

1199 
	`öôE¡ry
(
íåy
);

1200 
íåy
->
quickli°
 = quicklist;

1202 i‡(!
f‹w¨d
) {

1203 
ödex
 = (-
idx
) - 1;

1204 
n
 = 
quickli°
->
èû
;

1206 
ödex
 = 
idx
;

1207 
n
 = 
quickli°
->
hód
;

1210 i‡(
ödex
 >
quickli°
->
cou¡
)

1213 
	`likñy
(
n
)) {

1214 i‡((
accum
 + 
n
->
cou¡
Ë> 
ödex
) {

1217 
	`D
("Skùpög ovî (%pË%uáàaccum %Œd", (*)
n
,Ç->
cou¡
,

1218 
accum
);

1219 
accum
 +
n
->
cou¡
;

1220 
n
 = 
f‹w¨d
 ?Ç->
√xt
 :Ç->
¥ev
;

1224 i‡(!
n
)

1227 
	`D
("FoundÇode: %∞©áccum %Œu, idx %Œu, sub+ %Œu, sub- %Œu", (*)
n
,

1228 
accum
, 
ödex
, index -áccum, (-index) - 1 +áccum);

1230 
íåy
->
node
 = 
n
;

1231 i‡(
f‹w¨d
) {

1233 
íåy
->
off£t
 = 
ödex
 - 
accum
;

1237 
íåy
->
off£t
 = (-
ödex
Ë- 1 + 
accum
;

1240 
	`quickli°Decom¥essNodeF‹U£
(
íåy
->
node
);

1241 
íåy
->
zi
 = 
	`zùli°Index
”¡ry->
node
->
zl
,É¡ry->
off£t
);

1242 
	`zùli°Gë
(
íåy
->
zi
, &íåy->
vÆue
, &íåy->
sz
, &íåy->
l⁄gvÆ
);

1246 
	}
}

1249 
	$quickli°RŸ©e
(
quickli°
 *quicklist) {

1250 i‡(
quickli°
->
cou¡
 <= 1)

1254 *
p
 = 
	`zùli°Index
(
quickli°
->
èû
->
zl
, -1);

1255 *
vÆue
;

1256 
l⁄gvÆ
;

1257 
sz
;

1258 
l⁄g°r
[32] = {0};

1259 
	`zùli°Gë
(
p
, &
vÆue
, &
sz
, &
l⁄gvÆ
);

1262 i‡(!
vÆue
) {

1264 
sz
 = 
	`Œ2°rög
(
l⁄g°r
, ÷⁄g°r), 
l⁄gvÆ
);

1265 
vÆue
 = (*)
l⁄g°r
;

1269 
	`quickli°PushHód
(
quickli°
, 
vÆue
, 
sz
);

1274 i‡(
quickli°
->
Àn
 == 1) {

1275 
p
 = 
	`zùli°Index
(
quickli°
->
èû
->
zl
, -1);

1279 
	`quickli°DñIndex
(
quickli°
, quickli°->
èû
, &
p
);

1280 
	}
}

1291 
	$quickli°P›Cu°om
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

1292 *
sz
, *
svÆ
,

1293 *(*
ßvî
)(*
d©a
, 
sz
)) {

1294 *
p
;

1295 *
v°r
;

1296 
vÀn
;

1297 
vl⁄g
;

1298 
pos
 = (
whîe
 =
QUICKLIST_HEAD
) ? 0 : -1;

1300 i‡(
quickli°
->
cou¡
 == 0)

1303 i‡(
d©a
)

1304 *
d©a
 = 
NULL
;

1305 i‡(
sz
)

1306 *
sz
 = 0;

1307 i‡(
svÆ
)

1308 *
svÆ
 = -123456789;

1310 
quickli°Node
 *
node
;

1311 i‡(
whîe
 =
QUICKLIST_HEAD
 && 
quickli°
->
hód
) {

1312 
node
 = 
quickli°
->
hód
;

1313 } i‡(
whîe
 =
QUICKLIST_TAIL
 && 
quickli°
->
èû
) {

1314 
node
 = 
quickli°
->
èû
;

1319 
p
 = 
	`zùli°Index
(
node
->
zl
, 
pos
);

1320 i‡(
	`zùli°Gë
(
p
, &
v°r
, &
vÀn
, &
vl⁄g
)) {

1321 i‡(
v°r
) {

1322 i‡(
d©a
)

1323 *
d©a
 = 
	`ßvî
(
v°r
, 
vÀn
);

1324 i‡(
sz
)

1325 *
sz
 = 
vÀn
;

1327 i‡(
d©a
)

1328 *
d©a
 = 
NULL
;

1329 i‡(
svÆ
)

1330 *
svÆ
 = 
vl⁄g
;

1332 
	`quickli°DñIndex
(
quickli°
, 
node
, &
p
);

1336 
	}
}

1339 
REDIS_STATIC
 *
	$_quickli°Savî
(*
d©a
, 
sz
) {

1340 *
v°r
;

1341 i‡(
d©a
) {

1342 
v°r
 = 
	`dÆloc
(
sz
);

1343 
	`mem˝y
(
v°r
, 
d©a
, 
sz
);

1344  
v°r
;

1346  
NULL
;

1347 
	}
}

1352 
	$quickli°P›
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

1353 *
sz
, *
¶⁄g
) {

1354 *
v°r
;

1355 
vÀn
;

1356 
vl⁄g
;

1357 i‡(
quickli°
->
cou¡
 == 0)

1359 
ªt
 = 
	`quickli°P›Cu°om
(
quickli°
, 
whîe
, &
v°r
, &
vÀn
, &
vl⁄g
,

1360 
_quickli°Savî
);

1361 i‡(
d©a
)

1362 *
d©a
 = 
v°r
;

1363 i‡(
¶⁄g
)

1364 *
¶⁄g
 = 
vl⁄g
;

1365 i‡(
sz
)

1366 *
sz
 = 
vÀn
;

1367  
ªt
;

1368 
	}
}

1371 
	$quickli°Push
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
,

1372 
whîe
) {

1373 i‡(
whîe
 =
QUICKLIST_HEAD
) {

1374 
	`quickli°PushHód
(
quickli°
, 
vÆue
, 
sz
);

1375 } i‡(
whîe
 =
QUICKLIST_TAIL
) {

1376 
	`quickli°PushTaû
(
quickli°
, 
vÆue
, 
sz
);

1378 
	}
}

	@src/vr_quicklist.h

1 #i‚de‡
_VR_QUICKLIST_H_


2 
	#_VR_QUICKLIST_H_


	)

14 
	squickli°Node
 {

15 
quickli°Node
 *
	m¥ev
;

16 
quickli°Node
 *
	m√xt
;

17 *
	mzl
;

18 
	msz
;

19 
	mcou¡
 : 16;

20 
	mícodög
 : 2;

21 
	mc⁄èöî
 : 2;

22 
	mªcom¥ess
 : 1;

23 
	m©ãm±ed_com¥ess
 : 1;

24 
	mexåa
 : 10;

25 } 
	tquickli°Node
;

32 
	squickli°LZF
 {

33 
	msz
;

34 
	mcom¥es£d
[];

35 } 
	tquickli°LZF
;

43 
	squickli°
 {

44 
quickli°Node
 *
	mhód
;

45 
quickli°Node
 *
	mèû
;

46 
	mcou¡
;

47 
	mÀn
;

48 
	mfûl
 : 16;

49 
	mcom¥ess
 : 16;

50 } 
	tquickli°
;

52 
	squickli°Iãr
 {

53 c⁄° 
quickli°
 *
	mquickli°
;

54 
quickli°Node
 *
	mcuºít
;

55 *
	mzi
;

56 
	moff£t
;

57 
	mdúe˘i⁄
;

58 } 
	tquickli°Iãr
;

60 
	squickli°E¡ry
 {

61 c⁄° 
quickli°
 *
	mquickli°
;

62 
quickli°Node
 *
	mnode
;

63 *
	mzi
;

64 *
	mvÆue
;

65 
	msz
;

66 
	ml⁄gvÆ
;

67 
	moff£t
;

68 } 
	tquickli°E¡ry
;

70 
	#QUICKLIST_HEAD
 0

	)

71 
	#QUICKLIST_TAIL
 -1

	)

74 
	#QUICKLIST_NODE_ENCODING_RAW
 1

	)

75 
	#QUICKLIST_NODE_ENCODING_LZF
 2

	)

78 
	#QUICKLIST_NOCOMPRESS
 0

	)

81 
	#QUICKLIST_NODE_CONTAINER_NONE
 1

	)

82 
	#QUICKLIST_NODE_CONTAINER_ZIPLIST
 2

	)

84 
	#quickli°NodeIsCom¥es£d
(
node
) \

85 ((
node
)->
ícodög
 =
QUICKLIST_NODE_ENCODING_LZF
)

	)

88 
quickli°
 *
quickli°Cª©e
();

89 
quickli°
 *
quickli°New
(
fûl
, 
com¥ess
);

90 
quickli°SëCom¥essDïth
(
quickli°
 *quickli°, 
dïth
);

91 
quickli°SëFûl
(
quickli°
 *quickli°, 
fûl
);

92 
quickli°SëO±i⁄s
(
quickli°
 *quickli°, 
fûl
, 
dïth
);

93 
quickli°Rñó£
(
quickli°
 *quicklist);

94 
quickli°PushHód
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
);

95 
quickli°PushTaû
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
);

96 
quickli°Push
(
quickli°
 *quickli°, *
vÆue
, c⁄° 
size_t
 
sz
,

97 
whîe
);

98 
quickli°AµídZùli°
(
quickli°
 *quickli°, *
zl
);

99 
quickli°
 *
quickli°AµídVÆuesFromZùli°
(quicklist *quicklist,

100 *
zl
);

101 
quickli°
 *
quickli°Cª©eFromZùli°
(
fûl
, 
com¥ess
,

102 *
zl
);

103 
quickli°In£πA·î
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
node
,

104 *
vÆue
, c⁄° 
size_t
 
sz
);

105 
quickli°In£πBef‹e
(
quickli°
 *quickli°, 
quickli°E¡ry
 *
node
,

106 *
vÆue
, c⁄° 
size_t
 
sz
);

107 
quickli°DñE¡ry
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
íåy
);

108 
quickli°Rïœ˚AtIndex
(
quickli°
 *quickli°, 
ödex
, *
d©a
,

109 
sz
);

110 
quickli°DñR™ge
(
quickli°
 *quickli°, c⁄° 
°¨t
, c⁄° 
°›
);

111 
quickli°Iãr
 *
quickli°GëIãøt‹
(c⁄° 
quickli°
 *quickli°, 
dúe˘i⁄
);

112 
quickli°Iãr
 *
quickli°GëIãøt‹AtIdx
(c⁄° 
quickli°
 *quicklist,

113 
dúe˘i⁄
, c⁄° 
idx
);

114 
quickli°Next
(
quickli°Iãr
 *
ôî
, 
quickli°E¡ry
 *
node
);

115 
quickli°Rñó£Iãøt‹
(
quickli°Iãr
 *
ôî
);

116 
quickli°
 *
quickli°Dup
(quickli° *
‹ig
);

117 
quickli°Index
(c⁄° 
quickli°
 *quickli°, c⁄° 
ödex
,

118 
quickli°E¡ry
 *
íåy
);

119 
quickli°Rewöd
(
quickli°
 *quickli°, 
quickli°Iãr
 *
li
);

120 
quickli°RewödTaû
(
quickli°
 *quickli°, 
quickli°Iãr
 *
li
);

121 
quickli°RŸ©e
(
quickli°
 *quicklist);

122 
quickli°P›Cu°om
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

123 *
sz
, *
svÆ
,

124 *(*
ßvî
)(*
d©a
, 
sz
));

125 
quickli°P›
(
quickli°
 *quickli°, 
whîe
, **
d©a
,

126 *
sz
, *
¶⁄g
);

127 
quickli°Cou¡
(
quickli°
 *
ql
);

128 
quickli°Com∑ª
(*
p1
, *
p2
, 
p2_Àn
);

129 
size_t
 
quickli°GëLzf
(c⁄° 
quickli°Node
 *
node
, **
d©a
);

132 
	#AL_START_HEAD
 0

	)

133 
	#AL_START_TAIL
 1

	)

	@src/vr_rbtree.c

1 
	~<vr_c‹e.h
>

4 
	$rbåì_node_öô
(
rbnode
 *
node
)

6 
node
->
À·
 = 
NULL
;

7 
node
->
right
 = 
NULL
;

8 
node
->
∑ª¡
 = 
NULL
;

9 
node
->
key
 = 0ULL;

10 
node
->
d©a
 = 
NULL
;

12 
	}
}

15 
	$rbåì_öô
(
rbåì
 *
åì
, 
rbnode
 *
node
)

17 
	`rbåì_node_öô
(
node
);

18 
	`rbåì_bœck
(
node
);

19 
åì
->
roŸ
 = 
node
;

20 
åì
->
£¡öñ
 = 
node
;

21 
	}
}

23 
rbnode
 *

24 
	$rbåì_node_mö
(
rbnode
 *
node
, rbnodê*
£¡öñ
)

28 
node
->
À·
 !
£¡öñ
) {

29 
node
 =Çode->
À·
;

32  
node
;

33 
	}
}

35 
rbnode
 *

36 
	$rbåì_mö
(
rbåì
 *
åì
)

38 
rbnode
 *
node
 = 
åì
->
roŸ
;

39 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

43 i‡(
node
 =
£¡öñ
) {

44  
NULL
;

47  
	`rbåì_node_mö
(
node
, 
£¡öñ
);

48 
	}
}

51 
	$rbåì_À·_rŸ©e
(
rbnode
 **
roŸ
, rbnodê*
£¡öñ
,

52 
rbnode
 *
node
)

54 
rbnode
 *
ãmp
;

56 
ãmp
 = 
node
->
right
;

57 
node
->
right
 = 
ãmp
->
À·
;

59 i‡(
ãmp
->
À·
 !
£¡öñ
) {

60 
ãmp
->
À·
->
∑ª¡
 = 
node
;

63 
ãmp
->
∑ª¡
 = 
node
->parent;

65 i‡(
node
 =*
roŸ
) {

66 *
roŸ
 = 
ãmp
;

67 } i‡(
node
 =node->
∑ª¡
->
À·
) {

68 
node
->
∑ª¡
->
À·
 = 
ãmp
;

70 
node
->
∑ª¡
->
right
 = 
ãmp
;

73 
ãmp
->
À·
 = 
node
;

74 
node
->
∑ª¡
 = 
ãmp
;

75 
	}
}

78 
	$rbåì_right_rŸ©e
(
rbnode
 **
roŸ
, rbnodê*
£¡öñ
,

79 
rbnode
 *
node
)

81 
rbnode
 *
ãmp
;

83 
ãmp
 = 
node
->
À·
;

84 
node
->
À·
 = 
ãmp
->
right
;

86 i‡(
ãmp
->
right
 !
£¡öñ
) {

87 
ãmp
->
right
->
∑ª¡
 = 
node
;

90 
ãmp
->
∑ª¡
 = 
node
->parent;

92 i‡(
node
 =*
roŸ
) {

93 *
roŸ
 = 
ãmp
;

94 } i‡(
node
 =node->
∑ª¡
->
right
) {

95 
node
->
∑ª¡
->
right
 = 
ãmp
;

97 
node
->
∑ª¡
->
À·
 = 
ãmp
;

100 
ãmp
->
right
 = 
node
;

101 
node
->
∑ª¡
 = 
ãmp
;

102 
	}
}

105 
	$rbåì_ö£π
(
rbåì
 *
åì
, 
rbnode
 *
node
)

107 
rbnode
 **
roŸ
 = &
åì
->root;

108 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

109 
rbnode
 *
ãmp
, **
p
;

113 i‡(*
roŸ
 =
£¡öñ
) {

114 
node
->
∑ª¡
 = 
NULL
;

115 
node
->
À·
 = 
£¡öñ
;

116 
node
->
right
 = 
£¡öñ
;

117 
	`rbåì_bœck
(
node
);

118 *
roŸ
 = 
node
;

124 
ãmp
 = *
roŸ
;

127 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

128 i‡(*
p
 =
£¡öñ
) {

131 
ãmp
 = *
p
;

134 *
p
 = 
node
;

135 
node
->
∑ª¡
 = 
ãmp
;

136 
node
->
À·
 = 
£¡öñ
;

137 
node
->
right
 = 
£¡öñ
;

138 
	`rbåì_ªd
(
node
);

142 
node
 !*
roŸ
 && 
	`rbåì_is_ªd
“ode->
∑ª¡
)) {

144 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

145 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

147 i‡(
	`rbåì_is_ªd
(
ãmp
)) {

148 
	`rbåì_bœck
(
node
->
∑ª¡
);

149 
	`rbåì_bœck
(
ãmp
);

150 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

151 
node
 =Çode->
∑ª¡
->parent;

153 i‡(
node
 =node->
∑ª¡
->
right
) {

154 
node
 =Çode->
∑ª¡
;

155 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

158 
	`rbåì_bœck
(
node
->
∑ª¡
);

159 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

160 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

163 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

165 i‡(
	`rbåì_is_ªd
(
ãmp
)) {

166 
	`rbåì_bœck
(
node
->
∑ª¡
);

167 
	`rbåì_bœck
(
ãmp
);

168 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

169 
node
 =Çode->
∑ª¡
->parent;

171 i‡(
node
 =node->
∑ª¡
->
À·
) {

172 
node
 =Çode->
∑ª¡
;

173 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

176 
	`rbåì_bœck
(
node
->
∑ª¡
);

177 
	`rbåì_ªd
(
node
->
∑ª¡
->parent);

178 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

183 
	`rbåì_bœck
(*
roŸ
);

184 
	}
}

187 
	$rbåì_dñëe
(
rbåì
 *
åì
, 
rbnode
 *
node
)

189 
rbnode
 **
roŸ
 = &
åì
->root;

190 
rbnode
 *
£¡öñ
 = 
åì
->sentinel;

191 
rbnode
 *
sub°
, *
ãmp
, *
w
;

192 
uöt8_t
 
ªd
;

196 i‡(
node
->
À·
 =
£¡öñ
) {

197 
ãmp
 = 
node
->
right
;

198 
sub°
 = 
node
;

199 } i‡(
node
->
right
 =
£¡öñ
) {

200 
ãmp
 = 
node
->
À·
;

201 
sub°
 = 
node
;

203 
sub°
 = 
	`rbåì_node_mö
(
node
->
right
, 
£¡öñ
);

204 
ãmp
 = 
sub°
->
right
;

207 i‡(
sub°
 =*
roŸ
) {

208 *
roŸ
 = 
ãmp
;

209 
	`rbåì_bœck
(
ãmp
);

211 
	`rbåì_node_öô
(
node
);

216 
ªd
 = 
	`rbåì_is_ªd
(
sub°
);

218 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

219 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

221 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

224 i‡(
sub°
 =
node
) {

225 
ãmp
->
∑ª¡
 = 
sub°
->parent;

228 i‡(
sub°
->
∑ª¡
 =
node
) {

229 
ãmp
->
∑ª¡
 = 
sub°
;

231 
ãmp
->
∑ª¡
 = 
sub°
->parent;

234 
sub°
->
À·
 = 
node
->left;

235 
sub°
->
right
 = 
node
->right;

236 
sub°
->
∑ª¡
 = 
node
->parent;

237 
	`rbåì_c›y_cﬁ‹
(
sub°
, 
node
);

239 i‡(
node
 =*
roŸ
) {

240 *
roŸ
 = 
sub°
;

242 i‡(
node
 =node->
∑ª¡
->
À·
) {

243 
node
->
∑ª¡
->
À·
 = 
sub°
;

245 
node
->
∑ª¡
->
right
 = 
sub°
;

249 i‡(
sub°
->
À·
 !
£¡öñ
) {

250 
sub°
->
À·
->
∑ª¡
 = subst;

253 i‡(
sub°
->
right
 !
£¡öñ
) {

254 
sub°
->
right
->
∑ª¡
 = subst;

258 
	`rbåì_node_öô
(
node
);

260 i‡(
ªd
) {

266 
ãmp
 !*
roŸ
 && 
	`rbåì_is_bœck
(temp)) {

268 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

269 
w
 = 
ãmp
->
∑ª¡
->
right
;

271 i‡(
	`rbåì_is_ªd
(
w
)) {

272 
	`rbåì_bœck
(
w
);

273 
	`rbåì_ªd
(
ãmp
->
∑ª¡
);

274 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

275 
w
 = 
ãmp
->
∑ª¡
->
right
;

278 i‡(
	`rbåì_is_bœck
(
w
->
À·
Ë&&Ñbåì_is_bœck(w->
right
)) {

279 
	`rbåì_ªd
(
w
);

280 
ãmp
 =Åemp->
∑ª¡
;

282 i‡(
	`rbåì_is_bœck
(
w
->
right
)) {

283 
	`rbåì_bœck
(
w
->
À·
);

284 
	`rbåì_ªd
(
w
);

285 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

286 
w
 = 
ãmp
->
∑ª¡
->
right
;

289 
	`rbåì_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

290 
	`rbåì_bœck
(
ãmp
->
∑ª¡
);

291 
	`rbåì_bœck
(
w
->
right
);

292 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

293 
ãmp
 = *
roŸ
;

297 
w
 = 
ãmp
->
∑ª¡
->
À·
;

299 i‡(
	`rbåì_is_ªd
(
w
)) {

300 
	`rbåì_bœck
(
w
);

301 
	`rbåì_ªd
(
ãmp
->
∑ª¡
);

302 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

303 
w
 = 
ãmp
->
∑ª¡
->
À·
;

306 i‡(
	`rbåì_is_bœck
(
w
->
À·
Ë&&Ñbåì_is_bœck(w->
right
)) {

307 
	`rbåì_ªd
(
w
);

308 
ãmp
 =Åemp->
∑ª¡
;

310 i‡(
	`rbåì_is_bœck
(
w
->
À·
)) {

311 
	`rbåì_bœck
(
w
->
right
);

312 
	`rbåì_ªd
(
w
);

313 
	`rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

314 
w
 = 
ãmp
->
∑ª¡
->
À·
;

317 
	`rbåì_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

318 
	`rbåì_bœck
(
ãmp
->
∑ª¡
);

319 
	`rbåì_bœck
(
w
->
À·
);

320 
	`rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

321 
ãmp
 = *
roŸ
;

326 
	`rbåì_bœck
(
ãmp
);

327 
	}
}

	@src/vr_rbtree.h

1 #i‚de‡
_VR_RBTREE_


2 
	#_VR_RBTREE_


	)

4 
	#rbåì_ªd
(
_node
Ë((_node)->
cﬁ‹
 = 1)

	)

5 
	#rbåì_bœck
(
_node
Ë((_node)->
cﬁ‹
 = 0)

	)

6 
	#rbåì_is_ªd
(
_node
Ë((_node)->
cﬁ‹
)

	)

7 
	#rbåì_is_bœck
(
_node
Ë(!
	`rbåì_is_ªd
(_node))

	)

8 
	#rbåì_c›y_cﬁ‹
(
_n1
, 
_n2
Ë((_n1)->
cﬁ‹
 = (_n2)->cﬁ‹)

	)

10 
	srbnode
 {

11 
rbnode
 *
	mÀ·
;

12 
rbnode
 *
	mright
;

13 
rbnode
 *
	m∑ª¡
;

14 
öt64_t
 
	mkey
;

15 *
	md©a
;

16 
uöt8_t
 
	mcﬁ‹
;

19 
	srbåì
 {

20 
rbnode
 *
	mroŸ
;

21 
rbnode
 *
	m£¡öñ
;

24 
rbåì_node_öô
(
rbnode
 *
node
);

25 
rbåì_öô
(
rbåì
 *
åì
, 
rbnode
 *
node
);

26 
rbnode
 *
rbåì_mö
(
rbåì
 *
åì
);

27 
rbåì_ö£π
(
rbåì
 *
åì
, 
rbnode
 *
node
);

28 
rbåì_dñëe
(
rbåì
 *
åì
, 
rbnode
 *
node
);

	@src/vr_rdb.c

1 
	~<vr_c‹e.h
>

4 
	$rdbSave
(*
fûíame
) {

5  
VR_OK
;

6 
	}
}

8 
	$rdbRemoveTempFûe
(
pid_t
 
chûdpid
) {

9 
tmpfûe
[256];

11 
	`¢¥ötf
(
tmpfûe
,—mpfûe),"ãmp-%d.rdb", (Ë
chûdpid
);

12 
	`u∆ök
(
tmpfûe
);

13 
	}
}

	@src/vr_rdb.h

1 #i‚de‡
_VR_RDB_H_


2 
	#_VR_RDB_H_


	)

17 
	#RDB_6BITLEN
 0

	)

18 
	#RDB_14BITLEN
 1

	)

19 
	#RDB_32BITLEN
 2

	)

20 
	#RDB_ENCVAL
 3

	)

21 
	#RDB_LENERR
 
UINT_MAX


	)

26 
	#RDB_ENC_INT8
 0

	)

27 
	#RDB_ENC_INT16
 1

	)

28 
	#RDB_ENC_INT32
 2

	)

29 
	#RDB_ENC_LZF
 3

	)

31 
	sßvï¨am
 {

32 
time_t
 
	m£c⁄ds
;

33 
	mch™ges
;

36 
rdbSave
(*
fûíame
);

37 
rdbRemoveTempFûe
(
pid_t
 
chûdpid
);

	@src/vr_replication.c

1 
	~<vr_c‹e.h
>

3 
vr_ª∂iˇti⁄
 
	gª∂
;

5 
	$vr_ª∂iˇti⁄_öô
()

7 
	`vr_evíéo›_öô
(&
ª∂
.
vñ
,1000);

9 
ª∂
.
rﬁe
 = 
REPLICATION_ROLE_MASTER
;

10 
ª∂
.
ma°î
 = 
NULL
;

11 
ª∂
.
ˇched_ma°î
 = 
NULL
;

12 
ª∂
.
¶aves
 = 
NULL
;

13 
ª∂
.
ª∂_no_¶aves_sö˚
 = 0;

14 
ª∂
.
ª∂_mö_¶aves_to_wrôe
 = 0;

15 
ª∂
.
ª∂_mö_¶aves_max_œg
 = 0;

16 
ª∂
.
ª∂_good_¶aves_cou¡
 = 0;

17 
ª∂
.
ª∂_°©e
 = 
REPL_STATE_NONE
;

18 
ª∂
.
ª∂_down_sö˚
 = 0;

21 
ª∂
.
ª∂_backlog
 = 
NULL
;

22 
ª∂
.
ª∂_backlog_size
 = 
CONFIG_DEFAULT_REPL_BACKLOG_SIZE
;

23 
ª∂
.
ª∂_backlog_hi°Àn
 = 0;

24 
ª∂
.
ª∂_backlog_idx
 = 0;

25 
ª∂
.
ª∂_backlog_off
 = 0;

26 
ª∂
.
ª∂_backlog_time_limô
 = 
CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT
;

27 
ª∂
.
ª∂_no_¶aves_sö˚
 = 
	`time
(
NULL
);

29 
ª∂
.
¶aves
 = 
	`dli°Cª©e
();

31  
VR_OK
;

32 
	}
}

34 
	$vr_ª∂iˇti⁄_deöô
()

36 
	`vr_evíéo›_deöô
(&
ª∂
.
vñ
);

38 i‡(
ª∂
.
ma°î
 !
NULL
) {

39 
	`‰ìClõ¡
(
ª∂
.
ma°î
);

40 
ª∂
.
ma°î
 = 
NULL
;

43 i‡(
ª∂
.
ˇched_ma°î
 !
NULL
) {

44 
	`‰ìClõ¡
(
ª∂
.
ˇched_ma°î
);

45 
ª∂
.
ˇched_ma°î
 = 
NULL
;

48 i‡(
ª∂
.
ª∂_backlog
 !
NULL
) {

49 
	`d‰ì
(
ª∂
.
ª∂_backlog
);

50 
ª∂
.
ª∂_backlog
 = 
NULL
;

53 i‡(
ª∂
.
¶aves
 !
NULL
) {

54 
˛õ¡
 *
¶ave
;

55 
¶ave
 = 
	`dli°P›
(
ª∂
.
¶aves
)) {

56 
	`‰ìClõ¡
(
¶ave
);

58 
	`dli°Rñó£
(
ª∂
.
¶aves
);

59 
ª∂
.
¶aves
 = 
NULL
;

61 
	}
}

67 
	$unblockClõ¡WaôögRïliˇs
(
˛õ¡
 *
c
) {

68 
dli°Node
 *
 
 = 
	`dli°SórchKey
(
c
->
vñ
->
˛õ¡s_waôög_acks
,c);

69 
	`ASSERT
(
 
 !
NULL
);

70 
	`dli°DñNode
(
c
->
vñ
->
˛õ¡s_waôög_acks
,
 
);

71 
	}
}

78 
	$ª‰eshGoodSœvesCou¡
() {

79 
dli°Iãr
 
li
;

80 
dli°Node
 *
 
;

81 
good
 = 0;

83 i‡(!
ª∂
.
ª∂_mö_¶aves_to_wrôe
 ||

84 !
ª∂
.
ª∂_mö_¶aves_max_œg
) ;

86 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

87 (
 
 = 
	`dli°Next
(&
li
))) {

88 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

89 
time_t
 
œg
 = 
ª∂
.
vñ
.
unixtime
 - 
¶ave
->
ª∂_ack_time
;

91 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_ONLINE
 &&

92 
œg
 <
ª∂
.
ª∂_mö_¶aves_max_œg
Ë
good
++;

94 
ª∂
.
ª∂_good_¶aves_cou¡
 = 
good
;

95 
	}
}

99 
	$ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
() {

100 
ª∂
.
ma°î
 = 
NULL
;

101 
ª∂
.
ª∂_°©e
 = 
REPL_STATE_CONNECT
;

102 
ª∂
.
ª∂_down_sö˚
 =Ñïl.
vñ
.
unixtime
;

106 
	}
}

129 
	$ª∂iˇti⁄CacheMa°î
(
˛õ¡
 *
c
) {

130 
	`ASSERT
(
ª∂
.
ma°î
 !
NULL
 &&Ñïl.
ˇched_ma°î
 == NULL);

131 
	`log_debug
(
LOG_NOTICE
,"CachingÅhe disconnected master state.");

134 
	`u∆ökClõ¡
(
c
);

138 
ª∂
.
ˇched_ma°î
 =Ñïl.
ma°î
;

141 i‡(
c
->
≥îid
) {

142 
	`sds‰ì
(
c
->
≥îid
);

143 
c
->
≥îid
 = 
NULL
;

149 
	`ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

150 
	}
}

156 *
	$ª∂iˇti⁄GëSœveName
(
˛õ¡
 *
c
) {

157 
buf
[
VR_INET_PEER_ID_LEN
];

158 
ù
[
VR_INET_ADDRSTRLEN
];

160 
ù
[0] = '\0';

161 
buf
[0] = '\0';

163  
buf
;

164 
	}
}

178 
	$ª∂c⁄fComm™d
(
˛õ¡
 *
c
) {

179 
j
;

181 i‡((
c
->
¨gc
 % 2) == 0) {

184 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

189 
j
 = 1; j < 
c
->
¨gc
; j+=2) {

190 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"listening-port")) {

191 
p‹t
;

193 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[
j
+1],

194 &
p‹t
,
NULL
Ë!
VR_OK
))

196 
c
->
¶ave_li°íög_p‹t
 = 
p‹t
;

197 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"capa")) {

199 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
+1]->
±r
,"eof"))

200 
c
->
¶ave_ˇ∑
 |
SLAVE_CAPA_EOF
;

201 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"ack")) {

205 
off£t
;

207 i‡(!(
c
->
Êags
 & 
CLIENT_SLAVE
)) ;

208 i‡((
	`gëL⁄gL⁄gFromObje˘
(
c
->
¨gv
[
j
+1], &
off£t
Ë!
VR_OK
))

210 i‡(
off£t
 > 
c
->
ª∂_ack_off
)

211 
c
->
ª∂_ack_off
 = 
off£t
;

212 
c
->
ª∂_ack_time
 = c->
vñ
->
unixtime
;

216 i‡(
c
->
ª∂_put_⁄löe_⁄_ack
 && c->
ª∂°©e
 =
SLAVE_STATE_ONLINE
)

217 
	`putSœveO∆öe
(
c
);

220 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"getack")) {

223 i‡(
ª∂
.
ma°îho°
 &&Ñïl.
ma°î
Ë
	`ª∂iˇti⁄SídAck
();

226 
	`addRïlyEº‹F‹m©
(
c
,"Unrecognized REPLCONF option: %s",

227 (*)
c
->
¨gv
[
j
]->
±r
);

231 
	`addRïly
(
c
,
sh¨ed
.
ok
);

232 
	}
}

246 
	$putSœveO∆öe
(
˛õ¡
 *
¶ave
) {

247 
¶ave
->
ª∂°©e
 = 
SLAVE_STATE_ONLINE
;

248 
¶ave
->
ª∂_put_⁄löe_⁄_ack
 = 0;

249 
¶ave
->
ª∂_ack_time
 = sœve->
vñ
->
unixtime
;

250 i‡(
	`´Cª©eFûeEvít
(
¶ave
->
vñ
->
ñ
, sœve->
c⁄n
->
sd
, 
AE_WRITABLE
,

251 
£ndRïlyToClõ¡
, 
¶ave
Ë=
AE_ERR
) {

252 
	`log_w¨n
("u«bÀÅÿªgi°î wrôabÀÉvíàf‹ sœvêbulkÅøns„r: %s", 
	`°ªº‹
(
î∫o
));

253 
	`‰ìClõ¡
(
¶ave
);

256 
	`ª‰eshGoodSœvesCou¡
();

257 
	`log_debug
(
LOG_NOTICE
,"Synchronization with slave %s succeeded",

258 
	`ª∂iˇti⁄GëSœveName
(
¶ave
));

259 
	}
}

264 
	$ª∂iˇti⁄SídAck
() {

265 
˛õ¡
 *
c
 = 
ª∂
.
ma°î
;

267 i‡(
c
 !
NULL
) {

268 
c
->
Êags
 |
CLIENT_MASTER_FORCE_REPLY
;

269 
	`addRïlyMu…iBulkLí
(
c
,3);

270 
	`addRïlyBulkCSåög
(
c
,"REPLCONF");

271 
	`addRïlyBulkCSåög
(
c
,"ACK");

272 
	`addRïlyBulkL⁄gL⁄g
(
c
,c->
ª∂off
);

273 
c
->
Êags
 &~
CLIENT_MASTER_FORCE_REPLY
;

275 
	}
}

277 
	$ª∂iˇti⁄FìdM⁄ô‹s
(
˛õ¡
 *
c
, 
dli°
 *
m⁄ô‹s
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

278 
dli°Node
 *
 
;

279 
dli°Iãr
 
li
;

280 
j
;

281 
sds
 
cmdª¥
 = 
	`sd¢ew
("+");

282 
robj
 *
cmdobj
;

283 
timevÆ
 
tv
;

285 
	`gëtimeofday
(&
tv
,
NULL
);

286 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"%ld.%06ld ",()
tv
.
tv_£c
,(Èv.
tv_u£c
);

287 i‡(
c
->
Êags
 & 
CLIENT_LUA
) {

288 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%dÜua] ",
di˘id
);

289 } i‡(
c
->
Êags
 & 
CLIENT_UNIX_SOCKET
) {

290 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%d unix:%s] ",
di˘id
,
£rvî
.
unixsockë
);

292 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥,"[%d %s] ",
di˘id
,
	`gëClõ¡PìrId
(
c
));

295 
j
 = 0; j < 
¨gc
; j++) {

296 i‡(
¨gv
[
j
]->
ícodög
 =
OBJ_ENCODING_INT
) {

297 
cmdª¥
 = 
	`sdsˇçrötf
(cmdª¥, "\"%ld\"", ()
¨gv
[
j
]->
±r
);

299 
cmdª¥
 = 
	`sdsˇåïr
(cmdª¥,(*)
¨gv
[
j
]->
±r
,

300 
	`sd¶í
(
¨gv
[
j
]->
±r
));

302 i‡(
j
 !
¨gc
-1)

303 
cmdª¥
 = 
	`sdsˇéí
(cmdrepr," ",1);

305 
cmdª¥
 = 
	`sdsˇéí
(cmdrepr,"\r\n",2);

306 
cmdobj
 = 
	`¸óãObje˘
(
OBJ_STRING
,
cmdª¥
);

308 
	`dli°Rewöd
(
m⁄ô‹s
,&
li
);

309 (
 
 = 
	`dli°Next
(&
li
))) {

310 
˛õ¡
 *
m⁄ô‹
 = 
 
->
vÆue
;

311 
	`addRïly
(
m⁄ô‹
,
cmdobj
);

313 
	`de¸RefCou¡
(
cmdobj
);

314 
	}
}

320 
	$„edRïliˇti⁄Backlog
(*
±r
, 
size_t
 
Àn
) {

321 *
p
 = 
±r
;

323 
ª∂
.
ma°î_ª∂_off£t
 +
Àn
;

327 
Àn
) {

328 
size_t
 
thi¶í
 = 
ª∂
.
ª∂_backlog_size
 -Ñïl.
ª∂_backlog_idx
;

329 i‡(
thi¶í
 > 
Àn
)Åhislen =Üen;

330 
	`mem˝y
(
ª∂
.
ª∂_backlog
+ª∂.
ª∂_backlog_idx
,
p
,
thi¶í
);

331 
ª∂
.
ª∂_backlog_idx
 +
thi¶í
;

332 i‡(
ª∂
.
ª∂_backlog_idx
 =ª∂.
ª∂_backlog_size
)

333 
ª∂
.
ª∂_backlog_idx
 = 0;

334 
Àn
 -
thi¶í
;

335 
p
 +
thi¶í
;

336 
ª∂
.
ª∂_backlog_hi°Àn
 +
thi¶í
;

338 i‡(
ª∂
.
ª∂_backlog_hi°Àn
 >Ñïl.
ª∂_backlog_size
)

339 
ª∂
.
ª∂_backlog_hi°Àn
 =Ñïl.
ª∂_backlog_size
;

341 
ª∂
.
ª∂_backlog_off
 =Ñïl.
ma°î_ª∂_off£t
 -

342 
ª∂
.
ª∂_backlog_hi°Àn
 + 1;

343 
	}
}

347 
	$„edRïliˇti⁄BacklogWôhObje˘
(
robj
 *
o
) {

348 
Œ°r
[
LONG_STR_SIZE
];

349 *
p
;

350 
size_t
 
Àn
;

352 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

353 
Àn
 = 
	`Œ2°rög
(
Œ°r
,÷l°r),()
o
->
±r
);

354 
p
 = 
Œ°r
;

356 
Àn
 = 
	`sd¶í
(
o
->
±r
);

357 
p
 = 
o
->
±r
;

359 
	`„edRïliˇti⁄Backlog
(
p
,
Àn
);

360 
	}
}

362 
	$ª∂iˇti⁄FìdSœves
(
dli°
 *
¶aves
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
) {

363 
dli°Node
 *
 
;

364 
dli°Iãr
 
li
;

365 
j
, 
Àn
;

366 
Œ°r
[
LONG_STR_SIZE
];

370 i‡(
ª∂
.
ª∂_backlog
 =
NULL
 && 
	`dli°Lígth
(
¶aves
) == 0) ;

373 
	`ASSERT
(!(
	`dli°Lígth
(
¶aves
Ë!0 && 
ª∂
.
ª∂_backlog
 =
NULL
));

376 i‡(
ª∂
.
¶ave£ldb
 !
di˘id
) {

377 
robj
 *
£À˘cmd
;

380 i‡(
di˘id
 >0 && di˘id < 
PROTO_SHARED_SELECT_CMDS
) {

381 
£À˘cmd
 = 
sh¨ed
.
£À˘
[
di˘id
];

383 
di˘id_Àn
;

385 
di˘id_Àn
 = 
	`Œ2°rög
(
Œ°r
,÷l°r),
di˘id
);

386 
£À˘cmd
 = 
	`¸óãObje˘
(
OBJ_STRING
,

387 
	`sdsˇçrötf
(
	`sd£m±y
(),

389 
di˘id_Àn
, 
Œ°r
));

393 i‡(
ª∂
.
ª∂_backlog
Ë
	`„edRïliˇti⁄BacklogWôhObje˘
(
£À˘cmd
);

396 
	`dli°Rewöd
(
¶aves
,&
li
);

397 (
 
 = 
	`dli°Next
(&
li
))) {

398 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

399 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_WAIT_BGSAVE_START
) ;

400 
	`addRïly
(
¶ave
,
£À˘cmd
);

403 i‡(
di˘id
 < 0 || di˘id >
PROTO_SHARED_SELECT_CMDS
)

404 
	`de¸RefCou¡
(
£À˘cmd
);

406 
ª∂
.
¶ave£ldb
 = 
di˘id
;

409 i‡(
ª∂
.
ª∂_backlog
) {

410 
aux
[
LONG_STR_SIZE
+3];

413 
aux
[0] = '*';

414 
Àn
 = 
	`Œ2°rög
(
aux
+1,◊ux)-1,
¨gc
);

415 
aux
[
Àn
+1] = '\r';

416 
aux
[
Àn
+2] = '\n';

417 
	`„edRïliˇti⁄Backlog
(
aux
,
Àn
+3);

419 
j
 = 0; j < 
¨gc
; j++) {

420 
objÀn
 = 
	`°rögObje˘Lí
(
¨gv
[
j
]);

425 
aux
[0] = '$';

426 
Àn
 = 
	`Œ2°rög
(
aux
+1,◊ux)-1,
objÀn
);

427 
aux
[
Àn
+1] = '\r';

428 
aux
[
Àn
+2] = '\n';

429 
	`„edRïliˇti⁄Backlog
(
aux
,
Àn
+3);

430 
	`„edRïliˇti⁄BacklogWôhObje˘
(
¨gv
[
j
]);

431 
	`„edRïliˇti⁄Backlog
(
aux
+
Àn
+1,2);

436 
	`dli°Rewöd
(
ª∂
.
¶aves
,&
li
);

437 (
 
 = 
	`dli°Next
(&
li
))) {

438 
˛õ¡
 *
¶ave
 = 
 
->
vÆue
;

441 i‡(
¶ave
->
ª∂°©e
 =
SLAVE_STATE_WAIT_BGSAVE_START
) ;

448 
	`addRïlyMu…iBulkLí
(
¶ave
,
¨gc
);

452 
j
 = 0; j < 
¨gc
; j++)

453 
	`addRïlyBulk
(
¶ave
,
¨gv
[
j
]);

455 
	}
}

	@src/vr_replication.h

1 #i‚de‡
_VR_REPLICATION_H_


2 
	#_VR_REPLICATION_H_


	)

6 
	#REPL_STATE_NONE
 0

	)

7 
	#REPL_STATE_CONNECT
 1

	)

8 
	#REPL_STATE_CONNECTING
 2

	)

10 
	#REPL_STATE_RECEIVE_PONG
 3

	)

11 
	#REPL_STATE_SEND_AUTH
 4

	)

12 
	#REPL_STATE_RECEIVE_AUTH
 5

	)

13 
	#REPL_STATE_SEND_PORT
 6

	)

14 
	#REPL_STATE_RECEIVE_PORT
 7

	)

15 
	#REPL_STATE_SEND_CAPA
 8

	)

16 
	#REPL_STATE_RECEIVE_CAPA
 9

	)

17 
	#REPL_STATE_SEND_PSYNC
 10

	)

18 
	#REPL_STATE_RECEIVE_PSYNC
 11

	)

20 
	#REPL_STATE_TRANSFER
 12

	)

21 
	#REPL_STATE_CONNECTED
 13

	)

27 
	#SLAVE_STATE_WAIT_BGSAVE_START
 6

	)

28 
	#SLAVE_STATE_WAIT_BGSAVE_END
 7

	)

29 
	#SLAVE_STATE_SEND_BULK
 8

	)

30 
	#SLAVE_STATE_ONLINE
 9

	)

33 
	#SLAVE_CAPA_NONE
 0

	)

34 
	#SLAVE_CAPA_EOF
 (1<<0Ë

	)

37 
	#CONFIG_REPL_SYNCIO_TIMEOUT
 5

	)

39 
	#REPLICATION_ROLE_MASTER
 0

	)

40 
	#REPLICATION_ROLE_SLAVE
 1

	)

42 
	#CONFIG_DEFAULT_REPL_BACKLOG_SIZE
 (1024*1024Ë

	)

43 
	#CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT
 (60*60Ë

	)

44 
	#CONFIG_REPL_BACKLOG_MIN_SIZE
 (1024*16Ë

	)

46 
	svr_ª∂iˇti⁄
 {

47 
vr_evíéo›
 
	mvñ
;

49 
	mrﬁe
;

52 
dli°
 *
	m¶aves
;

53 
	m¶ave£ldb
;

54 
	mma°î_ª∂_off£t
;

55 
	mª∂_pög_¶ave_≥riod
;

56 *
	mª∂_backlog
;

57 
	mª∂_backlog_size
;

58 
	mª∂_backlog_hi°Àn
;

59 
	mª∂_backlog_idx
;

60 
	mª∂_backlog_off
;

62 
time_t
 
	mª∂_backlog_time_limô
;

64 
time_t
 
	mª∂_no_¶aves_sö˚
;

66 
	mª∂_mö_¶aves_to_wrôe
;

67 
	mª∂_mö_¶aves_max_œg
;

68 
	mª∂_good_¶aves_cou¡
;

69 
	mª∂_diskÀss_sync
;

70 
	mª∂_diskÀss_sync_dñay
;

73 *
	mma°îauth
;

74 *
	mma°îho°
;

75 
	mma°îp‹t
;

76 
	mª∂_timeout
;

77 
˛õ¡
 *
	mma°î
;

78 
˛õ¡
 *
	mˇched_ma°î
;

79 
	mª∂_syncio_timeout
;

80 
	mª∂_°©e
;

81 
off_t
 
	mª∂_å™s„r_size
;

82 
off_t
 
	mª∂_å™s„r_ªad
;

83 
off_t
 
	mª∂_å™s„r_œ°_fsync_off
;

84 
	mª∂_å™s„r_s
;

85 
	mª∂_å™s„r_fd
;

86 *
	mª∂_å™s„r_tmpfûe
;

87 
time_t
 
	mª∂_å™s„r_œ°io
;

88 
	mª∂_£rve_°Æe_d©a
;

89 
	mª∂_¶ave_ro
;

90 
time_t
 
	mª∂_down_sö˚
;

91 
	mª∂_dißbÀ_t˝_nodñay
;

92 
	m¶ave_¥i‹ôy
;

93 
	mª∂_ma°î_runid
[
CONFIG_RUN_ID_SIZE
+1];

94 
	mª∂_ma°î_öôül_off£t
;

97 
vr_ª∂iˇti⁄
 
ª∂
;

99 
vr_ª∂iˇti⁄_öô
();

100 
vr_ª∂iˇti⁄_deöô
();

102 
unblockClõ¡WaôögRïliˇs
(
˛õ¡
 *
c
);

103 
ª‰eshGoodSœvesCou¡
();

104 
ª∂iˇti⁄H™dÀMa°îDisc⁄√˘i⁄
();

105 
ª∂iˇti⁄CacheMa°î
(
˛õ¡
 *
c
);

106 *
ª∂iˇti⁄GëSœveName
(
˛õ¡
 *
c
);

107 
ª∂c⁄fComm™d
(
˛õ¡
 *
c
);

108 
putSœveO∆öe
(
˛õ¡
 *
¶ave
);

109 
ª∂iˇti⁄SídAck
();

110 
ª∂iˇti⁄FìdM⁄ô‹s
(
˛õ¡
 *
c
, 
dli°
 *
m⁄ô‹s
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

111 
ª∂iˇti⁄FìdSœves
(
dli°
 *
¶aves
, 
di˘id
, 
robj
 **
¨gv
, 
¨gc
);

112 
„edRïliˇti⁄BacklogWôhObje˘
(
robj
 *
o
);

113 
„edRïliˇti⁄Backlog
(*
±r
, 
size_t
 
Àn
);

	@src/vr_scripting.c

1 
	~<vr_c‹e.h
>

3 
	$s¸ùtComm™d
(
˛õ¡
 *
c
) {

4 
	`addRïly
(
c
,
sh¨ed
.
ok
);

5 
	}
}

	@src/vr_scripting.h

1 #i‚de‡
_VR_SCRIPTING_H_


2 
	#_VR_SCRIPTING_H_


	)

4 
s¸ùtComm™d
(
˛õ¡
 *
c
);

	@src/vr_server.c

1 
	~<sys/ut¢ame.h
>

3 
	~<vr_c‹e.h
>

6 
vr_£rvî
 
	g£rvî
;

9 
sh¨edObje˘sSåu˘
 
	gsh¨ed
;

12 
	$di˘SåHash
(c⁄° *
key
) {

13  
	`di˘GíHashFun˘i⁄
((*)
key
, 
	`°æí
((*)key));

14 
	}
}

17 
	$di˘SåCa£Hash
(c⁄° *
key
) {

18  
	`di˘GíCa£HashFun˘i⁄
((*)
key
, 
	`°æí
((*)key));

19 
	}
}

22 
	$di˘SdsHash
(c⁄° *
key
) {

23  
	`di˘GíHashFun˘i⁄
((*)
key
, 
	`sd¶í
((*)key));

24 
	}
}

27 
	$di˘SdsCa£Hash
(c⁄° *
key
) {

28  
	`di˘GíCa£HashFun˘i⁄
((*)
key
, 
	`sd¶í
((*)key));

29 
	}
}

32 
	$di˘SåKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

33 c⁄° *
key2
)

35 
l1
,
l2
;

36 
	`DICT_NOTUSED
(
¥ivd©a
);

38 
l1
 = 
	`°æí
((*)
key1
);

39 
l2
 = 
	`°æí
((*)
key2
);

40 i‡(
l1
 !
l2
)  0;

41  
	`memcmp
(
key1
, 
key2
, 
l1
) == 0;

42 
	}
}

47 
	$di˘SåKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
,

48 c⁄° *
key2
)

50 
	`DICT_NOTUSED
(
¥ivd©a
);

52  
	`°rˇ£cmp
(
key1
, 
key2
) == 0;

53 
	}
}

56 
	$di˘SdsKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

57 c⁄° *
key2
)

59 
l1
,
l2
;

60 
	`DICT_NOTUSED
(
¥ivd©a
);

62 
l1
 = 
	`sd¶í
((
sds
)
key1
);

63 
l2
 = 
	`sd¶í
((
sds
)
key2
);

64 i‡(
l1
 !
l2
)  0;

65  
	`memcmp
(
key1
, 
key2
, 
l1
) == 0;

66 
	}
}

71 
	$di˘SdsKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
,

72 c⁄° *
key2
)

74 
	`DICT_NOTUSED
(
¥ivd©a
);

76  
	`°rˇ£cmp
(
key1
, 
key2
) == 0;

77 
	}
}

80 
	$di˘SdsKeyDupFromSå
(*
¥ivd©a
, c⁄° *
key
)

82 
	`DICT_NOTUSED
(
¥ivd©a
);

84  
	`sd¢ew
(
key
);

85 
	}
}

88 
	$di˘SdsDe°ru˘‹
(*
¥ivd©a
, *
vÆ
)

90 
	`DICT_NOTUSED
(
¥ivd©a
);

92 
	`sds‰ì
(
vÆ
);

93 
	}
}

96 
	$di˘Obje˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

98 
	`DICT_NOTUSED
(
¥ivd©a
);

100 i‡(
vÆ
 =
NULL
) ;

101 
	`‰ìObje˘
(
vÆ
);

102 
	}
}

105 
	$di˘EncObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

106 c⁄° *
key2
)

108 
robj
 *
o1
 = (robj*Ë
key1
, *
o2
 = (robj*Ë
key2
;

109 
robj
 *
o1_√w
, *
o2_√w
;

110 
cmp
;

112 i‡(
o1
->
ícodög
 =
OBJ_ENCODING_INT
 &&

113 
o2
->
ícodög
 =
OBJ_ENCODING_INT
)

114  
o1
->
±r
 =
o2
->ptr;

116 
o1_√w
 = 
	`gëDecodedObje˘
(
o1
);

117 
o2_√w
 = 
	`gëDecodedObje˘
(
o2
);

118 
cmp
 = 
	`di˘SdsKeyCom∑ª
(
¥ivd©a
,
o1_√w
->
±r
,
o2_√w
->ptr);

119 i‡(
o1_√w
 !
o1
Ë
	`‰ìObje˘
(o1_new);

120 i‡(
o2_√w
 !
o2
Ë
	`‰ìObje˘
(o2_new);

121  
cmp
;

122 
	}
}

125 
	$di˘EncObjHash
(c⁄° *
key
) {

126 
robj
 *
o
 = (robj*Ë
key
;

128 i‡(
	`sdsEncodedObje˘
(
o
)) {

129  
	`di˘GíHashFun˘i⁄
(
o
->
±r
, 
	`sd¶í
((
sds
)o->ptr));

131 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

132 
buf
[32];

133 
Àn
;

135 
Àn
 = 
	`Œ2°rög
(
buf
,32,()
o
->
±r
);

136  
	`di˘GíHashFun˘i⁄
((*)
buf
, 
Àn
);

138 
hash
;

139 
robj
 *
o_√w
;

141 
o_√w
 = 
	`gëDecodedObje˘
(
o
);

142 
hash
 = 
	`di˘GíHashFun˘i⁄
(
o_√w
->
±r
, 
	`sd¶í
((
sds
)o_new->ptr));

143 i‡(
o_√w
!
o
Ë
	`‰ìObje˘
(o_new);

144  
hash
;

147 
	}
}

150 
	$di˘ObjHash
(c⁄° *
key
) {

151 c⁄° 
robj
 *
o
 = 
key
;

152  
	`di˘GíHashFun˘i⁄
(
o
->
±r
, 
	`sd¶í
((
sds
)o->ptr));

153 
	}
}

156 
	$di˘ObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
,

157 c⁄° *
key2
)

159 c⁄° 
robj
 *
o1
 = 
key1
, *
o2
 = 
key2
;

160  
	`di˘SdsKeyCom∑ª
(
¥ivd©a
,
o1
->
±r
,
o2
->ptr);

161 
	}
}

164 
	$di˘Li°De°ru˘‹
(*
¥ivd©a
, *
vÆ
)

166 
	`DICT_NOTUSED
(
¥ivd©a
);

167 
	`dli°Rñó£
((
dli°
*)
vÆ
);

168 
	}
}

171 
di˘Ty≥
 
	ghashDi˘Ty≥
 = {

172 
di˘EncObjHash
,

173 
NULL
,

174 
NULL
,

175 
di˘EncObjKeyCom∑ª
,

176 
di˘Obje˘De°ru˘‹
,

177 
di˘Obje˘De°ru˘‹


181 
di˘Ty≥
 
	g£tDi˘Ty≥
 = {

182 
di˘EncObjHash
,

183 
NULL
,

184 
NULL
,

185 
di˘EncObjKeyCom∑ª
,

186 
di˘Obje˘De°ru˘‹
,

187 
NULL


191 
di˘Ty≥
 
	gz£tDi˘Ty≥
 = {

192 
di˘EncObjHash
,

193 
NULL
,

194 
NULL
,

195 
di˘EncObjKeyCom∑ª
,

196 
di˘Obje˘De°ru˘‹
,

197 
NULL


202 
	$¸óãSh¨edObje˘s
() {

203 
j
;

204 
robj
 **
obj
;

206 
sh¨ed
.
¸lf
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("\r\n"));

207 
sh¨ed
.
ok
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+OK\r\n"));

208 
sh¨ed
.
îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("-ERR\r\n"));

209 
sh¨ed
.
em±ybulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("$0\r\n\r\n"));

210 
sh¨ed
.
czîo
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":0\r\n"));

211 
sh¨ed
.
c⁄e
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":1\r\n"));

212 
sh¨ed
.
˙eg⁄e
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":-1\r\n"));

213 
sh¨ed
.
nuŒbulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("$-1\r\n"));

214 
sh¨ed
.
nuŒmu…ibulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*-1\r\n"));

215 
sh¨ed
.
em±ymu…ibulk
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*0\r\n"));

216 
sh¨ed
.
p⁄g
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+PONG\r\n"));

217 
sh¨ed
.
queued
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+QUEUED\r\n"));

218 
sh¨ed
.
em±ysˇn
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("*2\r\n$1\r\n0\r\n*0\r\n"));

219 
sh¨ed
.
wr⁄gty≥îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

221 
sh¨ed
.
nokeyîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

223 
sh¨ed
.
sy¡axîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

225 
sh¨ed
.
ßmeobje˘îr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

227 
sh¨ed
.
outo‰™gìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

229 
sh¨ed
.
nos¸ùãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

231 
sh¨ed
.
lﬂdögîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

233 
sh¨ed
.
¶ows¸ùãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

235 
sh¨ed
.
ma°îdow√º
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

237 
sh¨ed
.
bgßvìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

239 
sh¨ed
.
ro¶avìº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

241 
sh¨ed
.
nﬂuthîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

243 
sh¨ed
.
nﬂdmöîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

245 
sh¨ed
.
oomîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

247 
sh¨ed
.
exeˇb‹ãº
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

249 
sh¨ed
.
n‹ïliˇ£º
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

251 
sh¨ed
.
busykeyîr
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

253 
sh¨ed
.
•a˚
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(" "));

254 
sh¨ed
.
cﬁ⁄
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(":"));

255 
sh¨ed
.
∂us
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
("+"));

257 
j
 = 0; j < 
PROTO_SHARED_SELECT_CMDS
; j++) {

258 
di˘id_°r
[64];

259 
di˘id_Àn
;

261 
di˘id_Àn
 = 
	`Œ2°rög
(
di˘id_°r
,(di˘id_°r),
j
);

262 
sh¨ed
.
£À˘
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

263 
	`sdsˇçrötf
(
	`sd£m±y
(),

265 
di˘id_Àn
, 
di˘id_°r
));

267 
sh¨ed
.
mesßgebulk
 = 
	`¸óãSåögObje˘
("$7\r\nmessage\r\n",13);

268 
sh¨ed
.
pmesßgebulk
 = 
	`¸óãSåögObje˘
("$8\r\npmessage\r\n",14);

269 
sh¨ed
.
subs¸ibebulk
 = 
	`¸óãSåögObje˘
("$9\r\nsubscribe\r\n",15);

270 
sh¨ed
.
unsubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$11\r\nunsubscribe\r\n",18);

271 
sh¨ed
.
psubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$10\r\npsubscribe\r\n",17);

272 
sh¨ed
.
punsubs¸ibebulk
 = 
	`¸óãSåögObje˘
("$12\r\npunsubscribe\r\n",19);

273 
sh¨ed
.
dñ
 = 
	`¸óãSåögObje˘
("DEL",3);

274 
sh¨ed
.
Ω›
 = 
	`¸óãSåögObje˘
("RPOP",4);

275 
sh¨ed
.
Õ›
 = 
	`¸óãSåögObje˘
("LPOP",4);

276 
sh¨ed
.
Õush
 = 
	`¸óãSåögObje˘
("LPUSH",5);

277 
j
 = 0; j < 
OBJ_SHARED_INTEGERS
; j++) {

278 
sh¨ed
.
öãgîs
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,(*)()j);

279 
sh¨ed
.
öãgîs
[
j
]->
ícodög
 = 
OBJ_ENCODING_INT
;

281 
j
 = 0; j < 
OBJ_SHARED_BULKHDR_LEN
; j++) {

282 
sh¨ed
.
mbulkhdr
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

283 
	`sdsˇçrötf
(
	`sd£m±y
(),"*%d\r\n",
j
));

284 
sh¨ed
.
bulkhdr
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

285 
	`sdsˇçrötf
(
	`sd£m±y
(),"$%d\r\n",
j
));

291 
sh¨ed
.
mö°rög
 = 
	`¸óãSåögObje˘
("minstring",9);

292 
sh¨ed
.
max°rög
 = 
	`¸óãSåögObje˘
("maxstring",9);

294 
sh¨ed
.
outofcom∂exôylimô
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ew
(

298 
obj
 = &
sh¨ed
; *obj !
NULL
; obj ++) {

299 (*
obj
)->
c⁄°™t
 = 1;

301 
	}
}

304 
	$öô_£rvî
(
ö°™˚
 *
nci
)

306 
ªt
;

307 
uöt32_t
 
i
;

308 
ªdisDb
 *
db
;

310 
£rvî
.
pid
 = 
	`gëpid
();

311 
£rvî
.
¨ch_bôs
 = (() == 8) ? 64 : 32;

312 
£rvî
.
°¨âime
 = 
	`time
(
NULL
);

313 
	`gë_øndom_hex_ch¨s
(
£rvî
.
runid
, 
CONFIG_RUN_ID_SIZE
);

315 
£rvî
.
comm™ds
 = 
	`di˘Cª©e
(&
comm™dTabÀDi˘Ty≥
,
NULL
);

316 
	`p›uœãComm™dTabÀ
();

317 
£rvî
.
dñComm™d
 = 
	`lookupComm™dByCSåög
("del");

318 
£rvî
.
mu…iComm™d
 = 
	`lookupComm™dByCSåög
("multi");

319 
£rvî
.
ÕushComm™d
 = 
	`lookupComm™dByCSåög
("lpush");

320 
£rvî
.
Õ›Comm™d
 = 
	`lookupComm™dByCSåög
("lpop");

321 
£rvî
.
Ω›Comm™d
 = 
	`lookupComm™dByCSåög
("rpop");

322 
£rvî
.
§emComm™d
 = 
	`lookupComm™dByCSåög
("srem");

323 
£rvî
.
execComm™d
 = 
	`lookupComm™dByCSåög
("exec");

325 
c⁄f
 = 
	`c⁄f_¸óã
(
nci
->
c⁄f_fûíame
);

327 
ªt
 = 
	`p›uœãComm™dsNìdAdmö∑ss
();

328 i‡(
ªt
 !
VR_OK
) {

329 
	`log_îr‹
("PopulateÇeedádminpass commands failed");

330  
VR_ERROR
;

333 
£rvî
.
c⁄figfûe
 = 
	`gëAbsﬁuãP©h
(
nci
->
c⁄f_fûíame
);

334 
£rvî
.
hz
 = 10;

335 
£rvî
.
db um
 = 
c£rvî
->
d©aba£s
;

336 
£rvî
.
dböum
 = 
c£rvî
->
öã∫Æ_dbs_≥r_d©aba£s
;

337 
£rvî
.
dbnum
 = sîvî.
db um
*£rvî.
dböum
;

338 
	`d¨øy_öô
(&
£rvî
.
dbs
, sîvî.
dbnum
, (
ªdisDb
));

339 
£rvî
.
pidfûe
 = 
nci
->
pid_fûíame
;

340 
£rvî
.
execuèbÀ
 = 
NULL
;

341 
£rvî
.
a˘ivîehashög
 = 
CONFIG_DEFAULT_ACTIVE_REHASHING
;

343 
£rvî
.
˛õ¡_max_quîybuf_Àn
 = 
PROTO_MAX_QUERYBUF_LEN
;

345 
i
 = 0; i < 
£rvî
.
dbnum
; i ++) {

346 
db
 = 
	`d¨øy_push
(&
£rvî
.
dbs
);

347 
	`ªdisDbInô
(
db
);

350 
£rvî
.
˛õ¡s
 = 
	`dli°Cª©e
();

352 
£rvî
.
m⁄ô‹s
 = 
	`dli°Cª©e
();

354 
£rvî
.
lﬂdög
 = 0;

356 
£rvî
.
lua_timedout
 = 0;

358 
£rvî
.
aof_°©e
 = 
AOF_OFF
;

360 
£rvî
.
°›_wrôes_⁄_bgßve_îr
 = 0;

362 
£rvî
.
ªady_keys
 = 
	`dli°Cª©e
();

364 
£rvî
.
sy°em_mem‹y_size
 = 
	`dÆloc_gë_mem‹y_size
();

366 
£rvî
.
rdb_chûd_pid
 = -1;

367 
£rvî
.
aof_chûd_pid
 = -1;

369 
£rvî
.
hash_max_zùli°_íåõs
 = 
OBJ_HASH_MAX_ZIPLIST_ENTRIES
;

370 
£rvî
.
hash_max_zùli°_vÆue
 = 
OBJ_HASH_MAX_ZIPLIST_VALUE
;

371 
£rvî
.
li°_max_zùli°_size
 = 
OBJ_LIST_MAX_ZIPLIST_SIZE
;

372 
£rvî
.
li°_com¥ess_dïth
 = 
OBJ_LIST_COMPRESS_DEPTH
;

373 
£rvî
.
£t_max_öt£t_íåõs
 = 
OBJ_SET_MAX_INTSET_ENTRIES
;

374 
£rvî
.
z£t_max_zùli°_íåõs
 = 
OBJ_ZSET_MAX_ZIPLIST_ENTRIES
;

375 
£rvî
.
z£t_max_zùli°_vÆue
 = 
OBJ_ZSET_MAX_ZIPLIST_VALUE
;

376 
£rvî
.
hŒ_•¨£_max_byãs
 = 
CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES
;

378 
£rvî
.
nŸify_key•a˚_evíts
 = 0;

380 
	`¶owlogInô
();

381 
	`vr_ª∂iˇti⁄_öô
();

383 
	`¸óãSh¨edObje˘s
();

385 
£rvî
.
p‹t
 = 
c£rvî
->port;

388 
ªt
 = 
	`w‹kîs_öô
(
nci
->
thªad_num
);

389 i‡(
ªt
 !
VR_OK
) {

390 
	`log_îr‹
("Init workerÅhreads failed");

391  
VR_ERROR
;

395 
ªt
 = 
	`ma°î_öô
(
c⁄f
);

396 i‡(
ªt
 !
VR_OK
) {

397 
	`log_îr‹
("Init masterÅhread failed");

398  
VR_ERROR
;

401 
ªt
 = 
	`backíds_öô
(1);

402 i‡(
ªt
 !
VR_OK
) {

403 
	`log_îr‹
("Init backendÅhreads failed");

404  
VR_ERROR
;

407 
	`log_debug
(
LOG_NOTICE
, "mem‹yáŒo¯lockÅy≥: %s", 
	`mÆloc_lock_ty≥
());

408 
	`log_debug
(
LOG_NOTICE
, "mÆlo¯lib: %s", 
DMALLOC_LIB
);

410 
	`log_debug
(
LOG_NOTICE
, "°©†lockÅy≥: %s", 
STATS_LOCK_TYPE
);

412  
VR_OK
;

413 
	}
}

415 
	$gëLRUClock
() {

416  (
	`vr_m£c_now
()/
LRU_CLOCK_RESOLUTION
Ë& 
LRU_CLOCK_MAX
;

417 
	}
}

428 
	#EVICTION_SAMPLES_ARRAY_SIZE
 16

	)

429 
	$evi˘i⁄PoﬁP›uœã
(
di˘
 *
ßm∂edi˘
, di˘ *
keydi˘
,

430 
evi˘i⁄PoﬁE¡ry
 *
poﬁ
, 
maxmem‹y_ßm∂es
) {

431 
j
, 
k
, 
cou¡
;

432 
di˘E¡ry
 *
_ßm∂es
[
EVICTION_SAMPLES_ARRAY_SIZE
];

433 
di˘E¡ry
 **
ßm∂es
;

437 i‡(
maxmem‹y_ßm∂es
 <
EVICTION_SAMPLES_ARRAY_SIZE
) {

438 
ßm∂es
 = 
_ßm∂es
;

440 
ßm∂es
 = 
	`dÆloc
((ßm∂es[0])*
maxmem‹y_ßm∂es
);

443 
cou¡
 = 
	`di˘GëSomeKeys
(
ßm∂edi˘
,
ßm∂es
,
maxmem‹y_ßm∂es
);

444 
j
 = 0; j < 
cou¡
; j++) {

445 
idÀ
;

446 
sds
 
key
;

447 
robj
 *
o
;

448 
di˘E¡ry
 *
de
;

450 
de
 = 
ßm∂es
[
j
];

451 
key
 = 
	`di˘GëKey
(
de
);

455 i‡(
ßm∂edi˘
 !
keydi˘
Ë
de
 = 
	`di˘Föd
(keydi˘, 
key
);

456 
o
 = 
	`di˘GëVÆ
(
de
);

457 
idÀ
 = 
	`e°im©eObje˘IdÀTime
(
o
);

462 
k
 = 0;

463 
k
 < 
MAXMEMORY_EVICTION_POOL_SIZE
 &&

464 
poﬁ
[
k
].
key
 &&

465 
poﬁ
[
k
].
idÀ
 < idle) k++;

466 i‡(
k
 =0 && 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 !
NULL
) {

470 } i‡(
k
 < 
MAXMEMORY_EVICTION_POOL_SIZE
 && 
poﬁ
[k].
key
 =
NULL
) {

475 i‡(
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 =
NULL
) {

478 
	`memmove
(
poﬁ
+
k
+1,pool+k,

479 (
poﬁ
[0])*(
MAXMEMORY_EVICTION_POOL_SIZE
-
k
-1));

482 
k
--;

485 
	`sds‰ì
(
poﬁ
[0].
key
);

486 
	`memmove
(
poﬁ
,poﬁ+1,’oﬁ[0])*
k
);

489 
poﬁ
[
k
].
key
 = 
	`sdsdup
(key);

490 
poﬁ
[
k
].
idÀ
 = idle;

492 i‡(
ßm∂es
 !
_ßm∂es
Ë
	`d‰ì
(samples);

493 
	}
}

495 
	$‰ìMem‹yIfNìded
(
vr_evíéo›
 *
vñ
) {

496 
size_t
 
mem_u£d
, 
mem_to‰ì
, 
mem_‰ìd
;

497 
m°ime_t
 
œãncy
, 
evi˘i⁄_œãncy
;

498 
keys_‰ìd
 = 0;

499 
maxmem‹y
;

500 
maxmem‹y_pﬁicy
, 
maxmem‹y_ßm∂es
;

501 
ªt
;

503 
maxmem‹y
 = 
vñ
->
cc
.maxmemory;

504 i‡(
	`dÆloc_u£d_mem‹y
(Ë<
maxmem‹y
)

505  
VR_OK
;

507 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYP
, &
maxmem‹y_pﬁicy
);

508 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_NO_EVICTION
)

509  
VR_ERROR
;

511 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYS
, &
maxmem‹y_ßm∂es
);

513 
j
, 
k
;

515 
j
 = 0; j < 
£rvî
.
dbnum
; j++) {

516 
be°vÆ
 = 0;

517 
sds
 
be°key
 = 
NULL
;

518 
di˘E¡ry
 *
de
;

519 
ªdisDb
 *
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, 
j
);

520 
di˘
 *dict;

522 
	`lockDbWrôe
(
db
);

523 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_LRU
 ||

524 
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_RANDOM
)

526 
di˘
 = 
db
->dict;

528 
di˘
 = 
db
->
expúes
;

530 i‡(
	`di˘Size
(
di˘
) == 0) {

531 
	`u∆ockDb
(
db
);

536 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_RANDOM
 ||

537 
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_RANDOM
)

539 
de
 = 
	`di˘GëR™domKey
(
di˘
);

540 
be°key
 = 
	`di˘GëKey
(
de
);

544 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_ALLKEYS_LRU
 ||

545 
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_LRU
)

547 
evi˘i⁄PoﬁE¡ry
 *
poﬁ
 = 
db
->
evi˘i⁄_poﬁ
;

549 
be°key
 =
NULL
) {

550 
	`evi˘i⁄PoﬁP›uœã
(
di˘
, 
db
->di˘, db->
evi˘i⁄_poﬁ
, 
maxmem‹y_ßm∂es
);

552 
k
 = 
MAXMEMORY_EVICTION_POOL_SIZE
-1; k >= 0; k--) {

553 i‡(
poﬁ
[
k
].
key
 =
NULL
) ;

554 
de
 = 
	`di˘Föd
(
di˘
,
poﬁ
[
k
].
key
);

557 
	`sds‰ì
(
poﬁ
[
k
].
key
);

559 
	`memmove
(
poﬁ
+
k
,pool+k+1,

560 (
poﬁ
[0])*(
MAXMEMORY_EVICTION_POOL_SIZE
-
k
-1));

563 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
key
 = 
NULL
;

564 
poﬁ
[
MAXMEMORY_EVICTION_POOL_SIZE
-1].
idÀ
 = 0;

568 i‡(
de
) {

569 
be°key
 = 
	`di˘GëKey
(
de
);

580 i‡(
maxmem‹y_pﬁicy
 =
MAXMEMORY_VOLATILE_TTL
) {

581 
k
 = 0; k < 
maxmem‹y_ßm∂es
; k++) {

582 
sds
 
thiskey
;

583 
thisvÆ
;

585 
de
 = 
	`di˘GëR™domKey
(
di˘
);

586 
thiskey
 = 
	`di˘GëKey
(
de
);

587 
thisvÆ
 = (Ë
	`di˘GëVÆ
(
de
);

591 i‡(
be°key
 =
NULL
 || 
thisvÆ
 < 
be°vÆ
) {

592 
be°key
 = 
thiskey
;

593 
be°vÆ
 = 
thisvÆ
;

599 i‡(
be°key
) {

600 
robj
 *
keyobj
 = 
	`¸óãSåögObje˘
(
be°key
,
	`sd¶í
(bestkey));

601 
	`dbDñëe
(
db
,
keyobj
);

602 
	`‰ìObje˘
(
keyobj
);

603 
keys_‰ìd
++;

606 
	`u∆ockDb
(
db
);

608 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
, &
maxmem‹y
);

609 i‡(
	`dÆloc_u£d_mem‹y
(Ë<
maxmem‹y
) {

610 
°›
;

614 i‡(!
keys_‰ìd
) {

615  
VR_ERROR
;

618 
	`upd©e_°©s_add
(
vñ
->
°©s
, 
evi˘edkeys
, 
keys_‰ìd
);

619 
keys_‰ìd
 = 0;

622 
°›
:

623 
	`upd©e_°©s_add
(
vñ
->
°©s
, 
evi˘edkeys
, 
keys_‰ìd
);

624  
VR_OK
;

625 
	}
}

629 
	$pögComm™d
(
˛õ¡
 *
c
) {

631 i‡(
c
->
¨gc
 > 2) {

632 
	`addRïlyEº‹F‹m©
(
c
,"wrongÇumber ofárguments for '%s' command",

633 
c
->
cmd
->
«me
);

637 i‡(
c
->
Êags
 & 
CLIENT_PUBSUB
) {

638 
	`addRïly
(
c
,
sh¨ed
.
mbulkhdr
[2]);

639 
	`addRïlyBulkCBuf„r
(
c
,"pong",4);

640 i‡(
c
->
¨gc
 == 1)

641 
	`addRïlyBulkCBuf„r
(
c
,"",0);

643 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

645 i‡(
c
->
¨gc
 == 1)

646 
	`addRïly
(
c
,
sh¨ed
.
p⁄g
);

648 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

650 
	}
}

661 
	$time_ödïídít_°rcmp
(*
a
, *
b
) {

662 
buÁ
[
CONFIG_AUTHPASS_MAX_LEN
], 
bufb
[CONFIG_AUTHPASS_MAX_LEN];

667 
Æí
 = 
	`°æí
(
a
);

668 
bÀn
 = 
	`°æí
(
b
);

669 
j
;

670 
diff
 = 0;

675 i‡(
Æí
 > (
buÁ
Ë|| 
bÀn
 > (
bufb
))  1;

677 
	`mem£t
(
buÁ
,0,(bufa));

678 
	`mem£t
(
bufb
,0,(bufb));

681 
	`mem˝y
(
buÁ
,
a
,
Æí
);

682 
	`mem˝y
(
bufb
,
b
,
bÀn
);

686 
j
 = 0; j < (
buÁ
); j++) {

687 
diff
 |(
buÁ
[
j
] ^ 
bufb
[j]);

690 
diff
 |
Æí
 ^ 
bÀn
;

691  
diff
;

692 
	}
}

694 
	$authComm™d
(
˛õ¡
 *
c
) {

695 
sds
 
ªquúïass
;

697 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_REQUIREPASS
,&
ªquúïass
);

698 i‡(!
ªquúïass
) {

699 
	`addRïlyEº‹
(
c
,"Client sent AUTH, butÇoÖassword is set");

701 } i‡(!
	`time_ödïídít_°rcmp
(
c
->
¨gv
[1]->
±r
, 
ªquúïass
)) {

702 i‡(!
c
->
authítiˇãd
)

703 
c
->
authítiˇãd
 = 1;

704 
	`addRïly
(
c
,
sh¨ed
.
ok
);

706 
c
->
authítiˇãd
 = 0;

707 
	`addRïlyEº‹
(
c
,"invalidÖassword");

709 
	`sds‰ì
(
ªquúïass
);

710 
	}
}

712 
	$admöComm™d
(
˛õ¡
 *
c
) {

713 
sds
 
admö∑ss
;

715 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_ADMINPASS
,&
admö∑ss
);

716 i‡(!
admö∑ss
) {

717 
	`addRïlyEº‹
(
c
,"Client sent ADMIN, butÇoÖassword is set");

719 } i‡(!
	`time_ödïídít_°rcmp
(
c
->
¨gv
[1]->
±r
, 
admö∑ss
)) {

720 
c
->
authítiˇãd
 = 2;

721 
	`addRïly
(
c
,
sh¨ed
.
ok
);

723 
c
->
authítiˇãd
 = 0;

724 
	`addRïlyEº‹
(
c
,"invalidÖassword");

726 
	`sds‰ì
(
admö∑ss
);

727 
	}
}

729 
	$htNìdsResize
(
di˘
 *dict) {

730 
size
, 
u£d
;

732 
size
 = 
	`di˘SlŸs
(
di˘
);

733 
u£d
 = 
	`di˘Size
(
di˘
);

734  (
size
 && 
u£d
 && sizê> 
DICT_HT_INITIAL_SIZE
 &&

735 (
u£d
*100/
size
 < 
HASHTABLE_MIN_FILL
));

736 
	}
}

738 
	skeys_°©i°ics
 {

739 
	mkeys_Æl
;

740 
	mvkeys_Æl
;

741 
	mavg_âl_Æl
;

742 
	m√xi°
;

748 
sds
 
	$gíVúeInfoSåög
(
vr_evíéo›
 *
vñ
, *
£˘i⁄
) {

749 
sds
 
öfo
 = 
	`sd£m±y
();

750 
time_t
 
u±ime
 = 
	`time
(
NULL
)-
£rvî
.
°¨âime
;

751 
j
, 
k
, 
numcomm™ds
;

752 
rußge
 
£lf_ru
;

753 
lﬁ
, 
bib
;

754 
Æl£˘i⁄s
 = 0, 
def£˘i⁄s
 = 0;

755 
£˘i⁄s
 = 0;

756 
d¨øy
 *
kss
 = 
NULL
;

758 i‡(
£˘i⁄
 =
NULL
) section = "default";

759 
Æl£˘i⁄s
 = 
	`°rˇ£cmp
(
£˘i⁄
,"all") == 0;

760 
def£˘i⁄s
 = 
	`°rˇ£cmp
(
£˘i⁄
,"default") == 0;

762 
	`gërußge
(
RUSAGE_SELF
, &
£lf_ru
);

765 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"server")) {

766 
ˇŒ_u«me
 = 1;

767 
ut¢ame
 
«me
;

768 *
mode
;

770 
mode
 = "standalone";

772 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

774 i‡(
ˇŒ_u«me
) {

776 
	`u«me
(&
«me
);

777 
ˇŒ_u«me
 = 0;

780 
öfo
 = 
	`sdsˇçrötf
(info,

798 
VR_VERSION_STRING
,

799 
mode
,

800 
«me
.
sy¢ame
,Çame.
ªÀa£
,Çame.
machöe
,

801 
£rvî
.
¨ch_bôs
,

802 
	`´GëApiName
(),

803 #ifde‡
__GNUC__


804 
__GNUC__
,
__GNUC_MINOR__
,
__GNUC_PATCHLEVEL__
,

808 (Ë
	`gëpid
(),

809 
£rvî
.
runid
,

810 
£rvî
.
p‹t
,

811 (
ötmax_t
)
u±ime
,

812 (
ötmax_t
)(
u±ime
/(3600*24)),

813 
£rvî
.
hz
,

814 
£rvî
.
execuèbÀ
 ? server.executable : "",

815 
£rvî
.
c⁄figfûe
 ? server.configfile : "",

816 
£rvî
.
db um
,

817 
£rvî
.
dböum
);

821 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"clients")) {

822 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

823 
öfo
 = 
	`sdsˇçrötf
(info,

826 
	`cuºít_˛õ¡s
());

830 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"memory")) {

831 
uöt32_t
 
idx
;

832 
vr_w‹kî
 *
w‹kî
;

833 
hmem
[64];

834 
≥ak_hmem
[64];

835 
tŸÆ_sy°em_hmem
[64];

836 
u£d_mem‹y_lua_hmem
[64];

837 
u£d_mem‹y_rss_hmem
[64];

838 
maxmem‹y_hmem
[64];

839 
size_t
 
vr_u£d_mem‹y
 = 
	`dÆloc_u£d_mem‹y
();

840 
size_t
 
tŸÆ_sy°em_mem
 = 
£rvî
.
sy°em_mem‹y_size
;

841 c⁄° *
evi˘_pﬁicy
;

842 
size_t
 
≥ak_mem‹y
 = 0, 
≥ak_mem‹y_f‹_⁄e_w‹kî
;

843 
maxmem‹y
;

844 
maxmem‹y_pﬁicy
;

850 
idx
 = 0; idx < 
	`d¨øy_n
(&
w‹kîs
); idx ++) {

851 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
idx
);

852 
	`upd©e_°©s_gë
(
w‹kî
->
vñ
.
°©s
, 
≥ak_mem‹y
,

853 &
≥ak_mem‹y_f‹_⁄e_w‹kî
);

854 i‡(
≥ak_mem‹y
 < 
≥ak_mem‹y_f‹_⁄e_w‹kî
)

855 
≥ak_mem‹y
 = 
≥ak_mem‹y_f‹_⁄e_w‹kî
;

857 i‡(
vr_u£d_mem‹y
 > 
≥ak_mem‹y
) {

858 
≥ak_mem‹y
 = 
vr_u£d_mem‹y
;

859 
	`upd©e_°©s_£t
(
vñ
->
°©s
, 
≥ak_mem‹y
, 
vr_u£d_mem‹y
);

862 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORY
,&
maxmem‹y
);

863 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXMEMORYP
,&
maxmem‹y_pﬁicy
);

864 
evi˘_pﬁicy
 = 
	`gë_evi˘pﬁicy_°rögs
(
maxmem‹y_pﬁicy
);

866 
	`byãsToHum™
(
hmem
,
vr_u£d_mem‹y
);

867 
	`byãsToHum™
(
≥ak_hmem
,
≥ak_mem‹y
);

868 
	`byãsToHum™
(
tŸÆ_sy°em_hmem
,
tŸÆ_sy°em_mem
);

869 
	`byãsToHum™
(
u£d_mem‹y_rss_hmem
,
vñ
->
ªsidít_£t_size
);

870 
	`byãsToHum™
(
maxmem‹y_hmem
,
maxmem‹y
);

872 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

873 
öfo
 = 
	`sdsˇçrötf
(info,

888 
vr_u£d_mem‹y
,

889 
hmem
,

890 
vñ
->
ªsidít_£t_size
,

891 
u£d_mem‹y_rss_hmem
,

892 
≥ak_mem‹y
,

893 
≥ak_hmem
,

894 ()
tŸÆ_sy°em_mem
,

895 
tŸÆ_sy°em_hmem
,

896 
maxmem‹y
,

897 
maxmem‹y_hmem
,

898 
evi˘_pﬁicy
,

899 ()
vñ
->
ªsidít_£t_size
/
vr_u£d_mem‹y
,

900 
DMALLOC_LIB


905 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"stats")) {

906 
uöt32_t
 
idx
;

907 
vr_°©s
 *
°©s
;

908 
°©_numc⁄√˘i⁄s
=0, 
°©_numcomm™ds
=0;

909 
°©_√t_öput_byãs
=0, 
°©_√t_ouçut_byãs
=0;

910 
°©_ªje˘ed_c⁄n
=0;

911 
°©_expúedkeys
=0;

912 
°©_evi˘edkeys
=0;

913 
°©_key•a˚_hôs
=0, 
°©_key•a˚_mis£s
=0;

914 
°©_numcomm™ds_›s
=0;

915 
°©_√t_öput_byãs_›s
=0, 
°©_√t_ouçut_byãs_›s
=0;

917 
idx
 = 0; idx < 
	`d¨øy_n
(&
w‹kîs
); idx ++) {

918 
°©s_vÆue
;

919 
vr_w‹kî
 *
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
idx
);

920 
°©s
 = 
w‹kî
->
vñ
.stats;

922 
	`upd©e_°©s_gë
(
°©s
, 
numcomm™ds
, &
°©s_vÆue
);

923 
°©_numcomm™ds
 +
°©s_vÆue
;

924 
	`upd©e_°©s_gë
(
°©s
, 
numc⁄√˘i⁄s
, &
°©s_vÆue
);

925 
°©_numc⁄√˘i⁄s
 +
°©s_vÆue
;

926 
	`upd©e_°©s_gë
(
°©s
, 
expúedkeys
, &
°©s_vÆue
);

927 
°©_expúedkeys
 +
°©s_vÆue
;

928 
	`upd©e_°©s_gë
(
°©s
, 
evi˘edkeys
, &
°©s_vÆue
);

929 
°©_evi˘edkeys
 +
°©s_vÆue
;

930 
	`upd©e_°©s_gë
(
°©s
, 
√t_öput_byãs
, &
°©s_vÆue
);

931 
°©_√t_öput_byãs
 +
°©s_vÆue
;

932 
	`upd©e_°©s_gë
(
°©s
, 
√t_ouçut_byãs
, &
°©s_vÆue
);

933 
°©_√t_ouçut_byãs
 +
°©s_vÆue
;

934 
	`upd©e_°©s_gë
(
°©s
, 
key•a˚_hôs
, &
°©s_vÆue
);

935 
°©_key•a˚_hôs
 +
°©s_vÆue
;

936 
	`upd©e_°©s_gë
(
°©s
, 
key•a˚_mis£s
, &
°©s_vÆue
);

937 
°©_key•a˚_mis£s
 +
°©s_vÆue
;

939 
°©_numcomm™ds_›s
 +
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_COMMAND
);

940 
°©_√t_öput_byãs_›s
 +()
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_NET_INPUT
)/1024;

941 
°©_√t_ouçut_byãs_›s
 +()
	`gëIn°™è√ousMëric
(
°©s
, 
STATS_METRIC_NET_OUTPUT
)/1024;

943 
idx
 = 0; idx < 
	`d¨øy_n
(&
backíds
); idx ++) {

944 
°©s_vÆue
;

945 
vr_backíd
 *
backíd
 = 
	`d¨øy_gë
(&
backíds
, 
idx
);

946 
°©s
 = 
backíd
->
vñ
.stats;

948 
	`upd©e_°©s_gë
(
°©s
, 
expúedkeys
, &
°©s_vÆue
);

949 
°©_expúedkeys
 +
°©s_vÆue
;

951 
	`upd©e_°©s_gë
(
ma°î
.
vñ
.
°©s
, 
ªje˘ed_c⁄n
, &
°©_ªje˘ed_c⁄n
);

953 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

954 
öfo
 = 
	`sdsˇçrötf
(info,

968 
°©_numc⁄√˘i⁄s
,

969 
°©_numcomm™ds
,

970 
°©_numcomm™ds_›s
,

971 
°©_√t_öput_byãs
,

972 
°©_√t_ouçut_byãs
,

973 
°©_√t_öput_byãs_›s
,

974 
°©_√t_ouçut_byãs_›s
,

975 
°©_ªje˘ed_c⁄n
,

976 
°©_expúedkeys
,

977 
°©_evi˘edkeys
,

978 
°©_key•a˚_hôs
,

979 
°©_key•a˚_mis£s
);

983 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"cpu")) {

984 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

985 
öfo
 = 
	`sdsˇçrötf
(info,

989 ()
£lf_ru
.
ru_°ime
.
tv_£c
+()£lf_ru.ru_°ime.
tv_u£c
/1000000,

990 ()
£lf_ru
.
ru_utime
.
tv_£c
+()£lf_ru.ru_utime.
tv_u£c
/1000000);

994 i‡(
Æl£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"internal")) {

995 
ªdisDb
 *
db
;

996 
keys_°©i°ics
 *
ks
;

997 
keys
, 
vkeys
, 
avg_âl
;

999 
kss
 = 
	`d¨øy_¸óã
(
£rvî
.
db um
, (
keys_°©i°ics
));

1001 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1002 
öfo
 = 
	`sdsˇçrötf
(info, "# Internal\r\n");

1003 
j
 = 0; j < 
£rvî
.
db um
; j++) {

1004 
ks
 = 
	`d¨øy_push
(
kss
);

1005 
ks
->
keys_Æl
 = ks->
vkeys_Æl
 = ks->
avg_âl_Æl
 = 0;

1006 
ks
->
√xi°
 = 0;

1007 
k
 = 0; k < 
£rvî
.
dböum
; k ++) {

1008 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)(
j
*£rvî.
dböum
+
k
));

1009 
	`lockDbRód
(
db
);

1010 
keys
 = 
	`di˘Size
(
db
->
di˘
);

1011 
vkeys
 = 
	`di˘Size
(
db
->
expúes
);

1012 
avg_âl
 = 
db
->avg_ttl;

1013 
	`u∆ockDb
(
db
);

1014 i‡(
keys
 || 
vkeys
) {

1015 
öfo
 = 
	`sdsˇçrötf
(info,

1017 
j
, 
k
, 
keys
, 
vkeys
, 
db
->
avg_âl
);

1019 
ks
->
keys_Æl
 +
keys
;

1020 
ks
->
vkeys_Æl
 +
vkeys
;

1021 
ks
->
avg_âl_Æl
 +
avg_âl
;

1022 i‡(
avg_âl
 > 0Ë
ks
->
√xi°
 ++;

1028 i‡(
Æl£˘i⁄s
 || 
def£˘i⁄s
 || !
	`°rˇ£cmp
(
£˘i⁄
,"keyspace")) {

1029 
ªdisDb
 *
db
;

1030 
keys_°©i°ics
 *
ks
;

1031 
keys_Æl
, 
vkeys_Æl
, 
avg_âl_Æl
;

1032 
√xi°
;

1034 i‡(
£˘i⁄s
++Ë
öfo
 = 
	`sdsˇt
(info,"\r\n");

1035 
öfo
 = 
	`sdsˇçrötf
(info, "# Keyspace\r\n");

1036 i‡(
kss
 =
NULL
) {

1037 
j
 = 0; j < 
£rvî
.
db um
; j++) {

1038 
keys_Æl
 = 
vkeys_Æl
 = 
avg_âl_Æl
 = 0;

1039 
√xi°
 = 0;

1040 
k
 = 0; k < 
£rvî
.
dböum
; k ++) {

1041 
db
 = 
	`d¨øy_gë
(&
£rvî
.
dbs
, (
uöt32_t
)(
j
*£rvî.
dböum
+
k
));

1042 
	`lockDbRód
(
db
);

1043 
keys_Æl
 +
	`di˘Size
(
db
->
di˘
);

1044 
vkeys_Æl
 +
	`di˘Size
(
db
->
expúes
);

1045 
avg_âl_Æl
 +
db
->
avg_âl
;

1046 i‡(
db
->
avg_âl
 > 0Ë
√xi°
 ++;

1047 
	`u∆ockDb
(
db
);

1049 i‡(
keys_Æl
 || 
vkeys_Æl
) {

1050 
öfo
 = 
	`sdsˇçrötf
(info,

1052 
j
, 
keys_Æl
, 
vkeys_Æl
, 
√xi°
>0?(
avg_âl_Æl
/nexist):0);

1056 
j
 = 0; j < 
£rvî
.
db um
; j ++) {

1057 
ks
 = 
	`d¨øy_gë
(
kss
, 
j
);

1058 i‡(
ks
->
keys_Æl
 || ks->
vkeys_Æl
) {

1059 
öfo
 = 
	`sdsˇçrötf
(info,

1061 
j
, 
ks
->
keys_Æl
, ks->
vkeys_Æl
,

1062 
ks
->
√xi°
>0?(ks->
avg_âl_Æl
/ks->nexist):0);

1068 i‡(
kss
 !
NULL
) {

1069 
kss
->
√Àm
 = 0;

1070 
	`d¨øy_de°roy
(
kss
);

1071 
kss
 = 
NULL
;

1074  
öfo
;

1075 
	}
}

1077 
	$öfoComm™d
(
˛õ¡
 *
c
) {

1078 *
£˘i⁄
 = 
c
->
¨gc
 =2 ? c->
¨gv
[1]->
±r
 : "default";

1080 i‡(
c
->
¨gc
 > 2) {

1081 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1084 
	`addRïlyBulkSds
(
c
, 
	`gíVúeInfoSåög
(c->
vñ
, 
£˘i⁄
));

1085 
	}
}

1087 
	$echoComm™d
(
˛õ¡
 *
c
) {

1088 
	`addRïlyBulk
(
c
,c->
¨gv
[1]);

1089 
	}
}

1091 
	$timeComm™d
(
˛õ¡
 *
c
) {

1092 
timevÆ
 
tv
;

1096 
	`gëtimeofday
(&
tv
,
NULL
);

1097 
	`addRïlyMu…iBulkLí
(
c
,2);

1098 
	`addRïlyBulkL⁄gL⁄g
(
c
,
tv
.
tv_£c
);

1099 
	`addRïlyBulkL⁄gL⁄g
(
c
,
tv
.
tv_u£c
);

1100 
	}
}

1110 
	$adju°O≥nFûesLimô
(
max˛õ¡s
) {

1111 
æim_t
 
maxfûes
, 
föÆlimô
 = 0;

1112 
æim_t
 
ﬁdlimô
;

1113 
föÆmax˛õ¡s
;

1114 
æimô
 
limô
;

1115 
thªads
;

1117 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_THREADS
,&
thªads
);

1118 
maxfûes
 = 
max˛õ¡s
+
thªads
*2+
CONFIG_MIN_RESERVED_FDS
;

1119 i‡(
	`gëæimô
(
RLIMIT_NOFILE
,&
limô
) == -1) {

1120 
	`log_w¨n
("UnableÅo obtainÅhe current NOFILEÜimit (%s),ássuming 1024ánd settingÅhe max clients configurationáccordingly.",

1121 
	`°ªº‹
(
î∫o
));

1122 
ﬁdlimô
 = 1024;

1123 
föÆlimô
 = 
ﬁdlimô
;

1125 
ﬁdlimô
 = 
limô
.
æim_cur
;

1129 i‡(
ﬁdlimô
 < 
maxfûes
) {

1130 
æim_t
 
be°limô
;

1131 
£ålimô_îr‹
 = 0;

1135 
be°limô
 = 
maxfûes
;

1136 
be°limô
 > 
ﬁdlimô
) {

1137 
æim_t
 
de¸_°ï
 = 16;

1139 
limô
.
æim_cur
 = 
be°limô
;

1140 
limô
.
æim_max
 = 
be°limô
;

1141 i‡(
	`£ålimô
(
RLIMIT_NOFILE
,&
limô
) != -1) ;

1142 
£ålimô_îr‹
 = 
î∫o
;

1146 i‡(
be°limô
 < 
de¸_°ï
) ;

1147 
be°limô
 -
de¸_°ï
;

1152 i‡(
be°limô
 < 
ﬁdlimô
) bestlimit = oldlimit;

1154 
föÆlimô
 = 
be°limô
;

1155 i‡(
be°limô
 < 
maxfûes
) {

1156 
	`log_w¨n
("YouÑequested maxclients of %d "

1158 
max˛õ¡s
,

1159 (Ë
maxfûes
);

1160 
	`log_w¨n
("Server can't set maximum open files "

1162 (Ë
maxfûes
, 
	`°ªº‹
(
£ålimô_îr‹
));

1163 
	`log_w¨n
("Current maximum open files is %llu. ",

1164 (Ë
be°limô
);

1166 
	`log_w¨n
("Increased maximumÇumber of open files "

1168 (Ë
maxfûes
,

1169 (Ë
ﬁdlimô
);

1172 
föÆlimô
 = 
maxfûes
;

1176 
föÆmax˛õ¡s
 = 
föÆlimô
-
thªads
*2-
CONFIG_MIN_RESERVED_FDS
;

1177 i‡(
föÆmax˛õ¡s
 < 1) {

1178 
	`log_w¨n
("Your current 'ulimit -n' "

1182 (Ë
ﬁdlimô
,

1183 (Ë
maxfûes
);

1187 i‡(
föÆlimô
 < 
maxfûes
) {

1188 
c⁄f_vÆue
 *
cv
 = 
	`c⁄f_vÆue_¸óã
(
CONF_VALUE_TYPE_STRING
);

1189 
cv
->
vÆue
 = 
	`sds‰oml⁄gl⁄g
(()
föÆmax˛õ¡s
);

1190 
	`c⁄f_£rvî_£t
(
CONFIG_SOPN_MAXCLIENTS
,
cv
);

1191 
	`c⁄f_vÆue_de°roy
(
cv
);

1192 
	`log_w¨n
("maxclients has beenÑeducedÅo %dÅo compensate for "

1195 
föÆmax˛õ¡s
);

1198  ()
föÆlimô
;

1199 
	}
}

	@src/vr_server.h

1 #i‚de‡
_VR_SERVER_H_


2 
	#_VR_SERVER_H_


	)

4 
	#CONFIG_MIN_RESERVED_FDS
 32

	)

7 
	#CONFIG_AUTHPASS_MAX_LEN
 512

	)

8 
	#PROTO_SHARED_SELECT_CMDS
 10

	)

9 
	#CRON_DBS_PER_CALL
 16

	)

11 
	#ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP
 20

	)

12 
	#ACTIVE_EXPIRE_CYCLE_FAST_DURATION
 1000

	)

13 
	#ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC
 25

	)

14 
	#ACTIVE_EXPIRE_CYCLE_SLOW
 0

	)

15 
	#ACTIVE_EXPIRE_CYCLE_FAST
 1

	)

17 
	#SCAN_TYPE_KEY
 0

	)

18 
	#SCAN_TYPE_HASH
 1

	)

19 
	#SCAN_TYPE_SET
 2

	)

20 
	#SCAN_TYPE_ZSET
 3

	)

23 
	#CONFIG_DEFAULT_MAXMEMORY_POLICY
 
MAXMEMORY_NO_EVICTION


	)

26 
	#OBJ_HASH_MAX_ZIPLIST_ENTRIES
 512

	)

27 
	#OBJ_HASH_MAX_ZIPLIST_VALUE
 64

	)

28 
	#OBJ_SET_MAX_INTSET_ENTRIES
 512

	)

29 
	#OBJ_ZSET_MAX_ZIPLIST_ENTRIES
 128

	)

30 
	#OBJ_ZSET_MAX_ZIPLIST_VALUE
 64

	)

33 
	#OBJ_LIST_MAX_ZIPLIST_SIZE
 -2

	)

34 
	#OBJ_LIST_COMPRESS_DEPTH
 0

	)

37 
	#CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES
 3000

	)

40 
	#LIST_HEAD
 0

	)

41 
	#LIST_TAIL
 1

	)

43 
	#ZSKIPLIST_MAXLEVEL
 32

	)

44 
	#ZSKIPLIST_P
 0.25

	)

47 
	#UNIT_SECONDS
 0

	)

48 
	#UNIT_MILLISECONDS
 1

	)

51 
	#HASHTABLE_MIN_FILL
 10

	)

56 
	#run_wôh_≥riod
(
_ms_
, 
¸⁄lo›s
Ëi‡((_ms_ <1000/
£rvî
.
hz
Ë|| !(¸⁄lo›s%((_ms_)/(1000/£rvî.hz))))

	)

62 
	#LRU_CLOCK
(Ë((1000/
£rvî
.
hz
 <
LRU_CLOCK_RESOLUTION
Ë? sîvî.
Ãu˛ock
 : 
	`gëLRUClock
())

	)

75 
	sªadyLi°
 {

76 
ªdisDb
 *
	mdb
;

77 
robj
 *
	mkey
;

78 } 
	tªadyLi°
;

80 
	svr_£rvî
 {

81 
´EvítLo›
 *
	mñ
;

82 
dli°
 *
	m˛õ¡s
;

85 
pid_t
 
	mpid
;

86 *
	mexecuèbÀ
;

87 *
	mc⁄figfûe
;

88 
	mhz
;

90 
d¨øy
 
	mdbs
;

91 
	mdbnum
;

92 
	mdb um
;

93 
	mdböum
;

95 
di˘
 *
	mcomm™ds
;

96 
di˘
 *
	m‹ig_comm™ds
;

98 
	mÃu˛ock
:
LRU_BITS
;

99 
	ma˘ivîehashög
;

101 *
	mpidfûe
;

102 
	m¨ch_bôs
;

103 
	mrunid
[
CONFIG_RUN_ID_SIZE
+1];

106 
	mp‹t
;

107 
	mt˝_backlog
;

109 
	mt˝kì∑live
;

110 
size_t
 
	m˛õ¡_max_quîybuf_Àn
;

113 
size_t
 
	mhash_max_zùli°_íåõs
;

114 
size_t
 
	mhash_max_zùli°_vÆue
;

115 
size_t
 
	m£t_max_öt£t_íåõs
;

116 
size_t
 
	mz£t_max_zùli°_íåõs
;

117 
size_t
 
	mz£t_max_zùli°_vÆue
;

118 
size_t
 
	mhŒ_•¨£_max_byãs
;

120 
	mli°_max_zùli°_size
;

121 
	mli°_com¥ess_dïth
;

123 
˛õ¡Buf„rLimôsC⁄fig
 
	m˛õ¡_obuf_limôs
[
CLIENT_TYPE_OBUF_COUNT
];

125 
dli°
 *
	mm⁄ô‹s
;

127 
time_t
 
	m°¨âime
;

130 
time_t
 
	munixtime
;

131 
	mm°ime
;

133 *
	munixsockë
;

136 
	mlﬂdög
;

137 
off_t
 
	mlﬂdög_tŸÆ_byãs
;

138 
off_t
 
	mlﬂdög_lﬂded_byãs
;

139 
time_t
 
	mlﬂdög_°¨t_time
;

140 
off_t
 
	mlﬂdög_¥o˚ss_evíts_öãrvÆ_byãs
;

143 
	maof_°©e
;

144 
	maof_fsync
;

145 *
	maof_fûíame
;

146 
	maof_no_fsync_⁄_ªwrôe
;

147 
	maof_ªwrôe_≥rc
;

148 
off_t
 
	maof_ªwrôe_mö_size
;

149 
off_t
 
	maof_ªwrôe_ba£_size
;

150 
off_t
 
	maof_cuºít_size
;

151 
	maof_ªwrôe_scheduÀd
;

152 
pid_t
 
	maof_chûd_pid
;

153 
dli°
 *
	maof_ªwrôe_buf_blocks
;

154 
sds
 
	maof_buf
;

155 
	maof_fd
;

156 
	maof_£À˘ed_db
;

157 
time_t
 
	maof_Êush_po°p⁄ed_°¨t
;

158 
time_t
 
	maof_œ°_fsync
;

159 
time_t
 
	maof_ªwrôe_time_œ°
;

160 
time_t
 
	maof_ªwrôe_time_°¨t
;

161 
	maof_œ°bgªwrôe_°©us
;

162 
	maof_dñayed_fsync
;

163 
	maof_ªwrôe_ö¸emíèl_fsync
;

164 
	maof_œ°_wrôe_°©us
;

165 
	maof_œ°_wrôe_î∫o
;

166 
	maof_lﬂd_åunˇãd
;

168 
	maof_pùe_wrôe_d©a_to_chûd
;

169 
	maof_pùe_ªad_d©a_‰om_∑ª¡
;

170 
	maof_pùe_wrôe_ack_to_∑ª¡
;

171 
	maof_pùe_ªad_ack_‰om_chûd
;

172 
	maof_pùe_wrôe_ack_to_chûd
;

173 
	maof_pùe_ªad_ack_‰om_∑ª¡
;

174 
	maof_°›_£ndög_diff
;

176 
sds
 
	maof_chûd_diff
;

179 
	mdúty
;

180 
	mdúty_bef‹e_bgßve
;

181 
pid_t
 
	mrdb_chûd_pid
;

182 
ßvï¨am
 *
	mßvï¨ams
;

183 
	mßvï¨am¶í
;

184 *
	mrdb_fûíame
;

185 
	mrdb_com¥essi⁄
;

186 
	mrdb_checksum
;

187 
time_t
 
	mœ°ßve
;

188 
time_t
 
	mœ°bgßve_åy
;

189 
time_t
 
	mrdb_ßve_time_œ°
;

190 
time_t
 
	mrdb_ßve_time_°¨t
;

191 
	mrdb_chûd_ty≥
;

192 
	mœ°bgßve_°©us
;

193 
	m°›_wrôes_⁄_bgßve_îr
;

194 
	mrdb_pùe_wrôe_ªsu…_to_∑ª¡
;

195 
	mrdb_pùe_ªad_ªsu…_‰om_chûd
;

199 
˛õ¡
 *
	mlua_˛õ¡
;

200 
˛õ¡
 *
	mlua_ˇŒî
;

201 
di˘
 *
	mlua_s¸ùts
;

202 
m°ime_t
 
	mlua_time_limô
;

203 
m°ime_t
 
	mlua_time_°¨t
;

204 
	mlua_wrôe_dúty
;

206 
	mlua_øndom_dúty
;

208 
	mlua_ª∂iˇã_comm™ds
;

209 
	mlua_mu…i_emôãd
;

210 
	mlua_ª∂
;

211 
	mlua_timedout
;

213 
	mlua_kûl
;

214 
	mlua_Æways_ª∂iˇã_comm™ds
;

217 
dli°
 *
	mªady_keys
;

220 
ªdisOpAºay
 
	mÆso_¥›ag©e
;

223 
di˘
 *
	mpubsub_ch™√ls
;

224 
dli°
 *
	mpubsub_∑âîns
;

225 
	mnŸify_key•a˚_evíts
;

229 
ªdisComm™d
 *
	mdñComm™d
, *
	mmu…iComm™d
, *
	mÕushComm™d
, *
	mÕ›Comm™d
,

230 *
	mΩ›Comm™d
, *
	m§emComm™d
, *
	mexecComm™d
;

233 
size_t
 
	msy°em_mem‹y_size
;

237 
	szskùli°Node
 {

238 
robj
 *
	mobj
;

239 
	msc‹e
;

240 
zskùli°Node
 *
	mbackw¨d
;

241 
	szskùli°Levñ
 {

242 
zskùli°Node
 *
	mf‹w¨d
;

243 
	m•™
;

244 } 
	mÀvñ
[];

245 } 
	tzskùli°Node
;

247 
	szskùli°
 {

248 
zskùli°Node
 *
	mhódî
, *
	mèû
;

249 
	mÀngth
;

250 
	mÀvñ
;

251 } 
	tzskùli°
;

253 
	sz£t
 {

254 
di˘
 *
	mdi˘
;

255 
zskùli°
 *
	mz¶
;

256 } 
	tz£t
;

260 
robj
 *
	msubje˘
;

261 
	mícodög
;

262 
	mdúe˘i⁄
;

263 
quickli°Iãr
 *
	môî
;

264 } 
	tli°Ty≥Iãøt‹
;

268 
li°Ty≥Iãøt‹
 *
	mli
;

269 
quickli°E¡ry
 
	míåy
;

270 } 
	tli°Ty≥E¡ry
;

274 
robj
 *
	msubje˘
;

275 
	mícodög
;

276 
	mii
;

277 
di˘Iãøt‹
 *
	mdi
;

278 } 
	t£tTy≥Iãøt‹
;

285 
robj
 *
	msubje˘
;

286 
	mícodög
;

288 *
	mÂå
, *
	mv±r
;

290 
di˘Iãøt‹
 *
	mdi
;

291 
di˘E¡ry
 *
	mde
;

292 } 
	thashTy≥Iãøt‹
;

294 
	ssh¨edObje˘sSåu˘
 {

295 
robj
 *
	m¸lf
, *
	mok
, *
	mîr
, *
	mem±ybulk
, *
	mczîo
, *
	mc⁄e
, *
	m˙eg⁄e
, *
	mp⁄g
, *
	m•a˚
,

296 *
	mcﬁ⁄
, *
	mnuŒbulk
, *
	mnuŒmu…ibulk
, *
	mqueued
,

297 *
	mem±ymu…ibulk
, *
	mwr⁄gty≥îr
, *
	mnokeyîr
, *
	msy¡axîr
, *
	mßmeobje˘îr
,

298 *
	mouto‰™gìº
, *
	mnos¸ùãº
, *
	mlﬂdögîr
, *
	m¶ows¸ùãº
, *
	mbgßvìº
,

299 *
	mma°îdow√º
, *
	mro¶avìº
, *
	mexeˇb‹ãº
, *
	mnﬂuthîr
, *
	mnﬂdmöîr
, *
	mn‹ïliˇ£º
,

300 *
	mbusykeyîr
, *
	moomîr
, *
	m∂us
, *
	mmesßgebulk
, *
	mpmesßgebulk
, *
	msubs¸ibebulk
,

301 *
	munsubs¸ibebulk
, *
	mpsubs¸ibebulk
, *
	mpunsubs¸ibebulk
, *
	mdñ
, *
	mΩ›
, *
	mÕ›
,

302 *
	mÕush
, *
	mem±ysˇn
, *
	mmö°rög
, *
	mmax°rög
,

303 *
	m£À˘
[
PROTO_SHARED_SELECT_CMDS
],

304 *
	möãgîs
[
OBJ_SHARED_INTEGERS
],

305 *
	mmbulkhdr
[
OBJ_SHARED_BULKHDR_LEN
],

306 *
	mbulkhdr
[
OBJ_SHARED_BULKHDR_LEN
],

307 *
	moutofcom∂exôylimô
,

308 *
	m£¡öñ
;

312 
vr_£rvî
 
£rvî
;

313 
sh¨edObje˘sSåu˘
 
sh¨ed
;;

314 
di˘Ty≥
 
hashDi˘Ty≥
;

315 
di˘Ty≥
 
£tDi˘Ty≥
;

316 
di˘Ty≥
 
z£tDi˘Ty≥
;

318 
	#£rvîP™ic
(
_e
Ë
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, "as£π faûd: %s", #_e)

	)

319 
	#£rvîAs£πWôhInfo
(
_c
,
_o
,
_e
Ë((_e)?()0 : (
	`_log
(
__FILE__
, 
__LINE__
, 
LOG_EMERG
, 1, "as£π faûd: %s", #_e)))

	)

321 
di˘SåHash
(c⁄° *
key
);

322 
di˘SåCa£Hash
(c⁄° *
key
);

323 
di˘SdsHash
(c⁄° *
key
);

324 
di˘SdsCa£Hash
(c⁄° *
key
);

325 
di˘SåKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

326 
di˘SåKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

327 
di˘SdsKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

328 
di˘SdsKeyCa£Com∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

329 *
di˘SdsKeyDupFromSå
(*
¥ivd©a
, c⁄° *
key
);

330 
di˘SdsDe°ru˘‹
(*
¥ivd©a
, *
vÆ
);

331 
di˘Obje˘De°ru˘‹
(*
¥ivd©a
, *
vÆ
);

332 
di˘EncObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

333 
di˘EncObjHash
(c⁄° *
key
);

334 
di˘ObjHash
(c⁄° *
key
);

335 
di˘ObjKeyCom∑ª
(*
¥ivd©a
, c⁄° *
key1
, c⁄° *
key2
);

336 
di˘Li°De°ru˘‹
(*
¥ivd©a
, *
vÆ
);

338 
öô_£rvî
(
ö°™˚
 *
nci
);

340 
gëLRUClock
();

342 
‰ìMem‹yIfNìded
(
vr_evíéo›
 *
vñ
);

343 
pögComm™d
(
˛õ¡
 *
c
);

344 
time_ödïídít_°rcmp
(*
a
, *
b
);

345 
authComm™d
(
˛õ¡
 *
c
) ;

346 
admöComm™d
(
˛õ¡
 *
c
) ;

348 
htNìdsResize
(
di˘
 *dict);

350 
sds
 
gíVúeInfoSåög
(
vr_evíéo›
 *
vñ
, *
£˘i⁄
);

351 
öfoComm™d
(
˛õ¡
 *
c
);

352 
echoComm™d
(
˛õ¡
 *
c
);

353 
timeComm™d
(
˛õ¡
 *
c
);

355 
adju°O≥nFûesLimô
(
max˛õ¡s
);

	@src/vr_signal.c

1 
	~<°dlib.h
>

2 
	~<sig«l.h
>

4 
	~<vr_c‹e.h
>

5 
	~<vr_sig«l.h
>

7 
sig«l
 
	gsig«ls
[] = {

8 { 
SIGUSR1
, "SIGUSR1", 0, 
sig«l_h™dÀr
 },

9 { 
SIGUSR2
, "SIGUSR2", 0, 
sig«l_h™dÀr
 },

10 { 
SIGTTIN
, "SIGTTIN", 0, 
sig«l_h™dÀr
 },

11 { 
SIGTTOU
, "SIGTTOU", 0, 
sig«l_h™dÀr
 },

12 { 
SIGHUP
, "SIGHUP", 0, 
sig«l_h™dÀr
 },

13 { 
SIGINT
, "SIGINT", 0, 
sig«l_h™dÀr
 },

14 { 
SIGSEGV
, "SIGSEGV", ()
SA_RESETHAND
, 
sig«l_h™dÀr
 },

15 { 
SIGPIPE
, "SIGPIPE", 0, 
SIG_IGN
 },

16 { 0, 
NULL
, 0, NULL }

19 
r°©us_t


20 
	$sig«l_öô
()

22 
sig«l
 *
sig
;

24 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

25 
r°©us_t
 
°©us
;

26 
siga˘i⁄
 
ß
;

28 
	`mem£t
(&
ß
, 0, (sa));

29 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

30 
ß
.
ß_Êags
 = 
sig
->
Êags
;

31 
	`sigem±y£t
(&
ß
.
ß_mask
);

33 
°©us
 = 
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
);

34 i‡(
°©us
 < 0) {

35 
	`log_îr‹
("siga˘i⁄(%sËÁûed: %s", 
sig
->
sig«me
,

36 
	`°ªº‹
(
î∫o
));

37  
VR_ERROR
;

41  
VR_OK
;

42 
	}
}

45 
	$sig«l_deöô
()

47 
	}
}

50 
	$sig«l_h™dÀr
(
signo
)

52 
sig«l
 *
sig
;

53 (*
a˘i⁄
)();

54 *
a˘i⁄°r
;

55 
boﬁ
 
d⁄e
;

57 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

58 i‡(
sig
->
signo
 == signo) {

62 
	`ASSERT
(
sig
->
signo
 != 0);

64 
a˘i⁄°r
 = "";

65 
a˘i⁄
 = 
NULL
;

66 
d⁄e
 = 
Ál£
;

68 
signo
) {

69 
SIGUSR1
:

72 
SIGUSR2
:

75 
SIGTTIN
:

76 
a˘i⁄°r
 = ", upÜoggingÜevel";

77 
a˘i⁄
 = 
log_Àvñ_up
;

80 
SIGTTOU
:

81 
a˘i⁄°r
 = ", downÜoggingÜevel";

82 
a˘i⁄
 = 
log_Àvñ_down
;

85 
SIGHUP
:

86 
a˘i⁄°r
 = ",ÑeopeningÜog file";

87 
a˘i⁄
 = 
log_ª›í
;

90 
SIGINT
:

91 
d⁄e
 = 
åue
;

92 
a˘i⁄°r
 = ",Éxiting";

95 
SIGSEGV
:

96 
	`log_°ackåa˚
();

97 
a˘i⁄°r
 = ", core dumping";

98 
	`øi£
(
SIGSEGV
);

102 
	`NOT_REACHED
();

105 
	`log_ß„
("sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄°r
);

107 i‡(
a˘i⁄
 !
NULL
) {

108 
	`a˘i⁄
();

111 i‡(
d⁄e
) {

112 
	`exô
(1);

114 
	}
}

	@src/vr_signal.h

1 #i‚de‡
_VR_SIGNAL_H_


2 
	#_VR_SIGNAL_H_


	)

4 
	ssig«l
 {

5 
	msigno
;

6 *
	msig«me
;

7 
	mÊags
;

8 (*
	mh™dÀr
)(
	msigno
);

11 
r°©us_t
 
sig«l_öô
();

12 
sig«l_deöô
();

13 
sig«l_h™dÀr
(
signo
);

	@src/vr_slowlog.c

1 
	~<vr_c‹e.h
>

3 
±hªad_rwlock_t
 
	grwlockî
;

4 
dli°
 *
	g¶owlog
;

5 
	g¶owlog_íåy_id
;

10 
¶owlogE¡ry
 *
	$¶owlogCª©eE¡ry
(
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
) {

11 
¶owlogE¡ry
 *
£
 = 
	`dÆloc
((*se));

12 
j
, 
¶¨gc
 = 
¨gc
;

14 i‡(
¶¨gc
 > 
SLOWLOG_ENTRY_MAX_ARGC
) slargc = SLOWLOG_ENTRY_MAX_ARGC;

15 
£
->
¨gc
 = 
¶¨gc
;

16 
£
->
¨gv
 = 
	`dÆloc
((
robj
*)*
¶¨gc
);

17 
j
 = 0; j < 
¶¨gc
; j++) {

21 i‡(
¶¨gc
 !
¨gc
 && 
j
 == slargc-1) {

22 
£
->
¨gv
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,

23 
	`sdsˇçrötf
(
	`sd£m±y
(),"... (%d moreárguments)",

24 
¨gc
-
¶¨gc
+1));

27 i‡(
¨gv
[
j
]->
ty≥
 =
OBJ_STRING
 &&

28 
	`sdsEncodedObje˘
(
¨gv
[
j
]) &&

29 
	`sd¶í
(
¨gv
[
j
]->
±r
Ë> 
SLOWLOG_ENTRY_MAX_STRING
)

31 
sds
 
s
 = 
	`sd¢ewÀn
(
¨gv
[
j
]->
±r
, 
SLOWLOG_ENTRY_MAX_STRING
);

33 
s
 = 
	`sdsˇçrötf
(s,"... (%lu more bytes)",

35 
	`sd¶í
(
¨gv
[
j
]->
±r
Ë- 
SLOWLOG_ENTRY_MAX_STRING
);

36 
£
->
¨gv
[
j
] = 
	`¸óãObje˘
(
OBJ_STRING
,
s
);

38 
£
->
¨gv
[
j
] = 
	`dupSåögObje˘Unc⁄°™t
(argv[j]);

42 
£
->
time
 = 
	`time
(
NULL
);

43 
£
->
duøti⁄
 = duration;

44  
£
;

45 
	}
}

51 
	$¶owlogFªeE¡ry
(*
£±r
) {

52 
¶owlogE¡ry
 *
£
 = 
£±r
;

53 
j
;

55 
j
 = 0; j < 
£
->
¨gc
; j++)

56 
	`‰ìObje˘
(
£
->
¨gv
[
j
]);

57 
	`d‰ì
(
£
->
¨gv
);

58 
	`d‰ì
(
£
);

59 
	}
}

63 
	$¶owlogInô
() {

64 
	`±hªad_rwlock_öô
(&
rwlockî
,
NULL
);

65 
¶owlog
 = 
	`dli°Cª©e
();

66 
¶owlog_íåy_id
 = 0;

67 
	`dli°SëFªeMëhod
(
¶owlog
,
¶owlogFªeE¡ry
);

68 
	}
}

73 
	$¶owlogPushE¡ryIfNìded
(
vr_evíéo›
 *
vñ
, 
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
) {

74 
¶owlog_log_¶owî_th™
;

75 
¶owlog_max_Àn
;

77 
¶owlog_log_¶owî_th™
 = 
vñ
->
cc
.slowlog_log_slower_than;

78 i‡(
¶owlog_log_¶owî_th™
 < 0) ;

79 i‡(
duøti⁄
 >
¶owlog_log_¶owî_th™
) {

80 
¶owlogE¡ry
 *
£
 = 
	`¶owlogCª©eE¡ry
(
¨gv
,
¨gc
,
duøti⁄
);

81 
	`±hªad_rwlock_wæock
(&
rwlockî
);

82 
£
->
id
 = 
¶owlog_íåy_id
++;

83 
	`dli°AddNodeHód
(
¶owlog
,
£
);

84 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

87 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_SLOWLOGML
,&
¶owlog_max_Àn
);

89 
	`±hªad_rwlock_wæock
(&
rwlockî
);

90 
	`dli°Lígth
(
¶owlog
Ë> 
¶owlog_max_Àn
)

91 
	`dli°DñNode
(
¶owlog
,
	`dli°La°
(slowlog));

92 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

93 
	}
}

96 
	$¶owlogRe£t
() {

97 
	`±hªad_rwlock_wæock
(&
rwlockî
);

98 
	`dli°Lígth
(
¶owlog
) > 0)

99 
	`dli°DñNode
(
¶owlog
,
	`dli°La°
(slowlog));

100 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

101 
	}
}

105 
	$¶owlogComm™d
(
˛õ¡
 *
c
) {

106 i‡(
c
->
¨gc
 =2 && !
	`°rˇ£cmp
(c->
¨gv
[1]->
±r
,"reset")) {

107 
	`¶owlogRe£t
();

108 
	`addRïly
(
c
,
sh¨ed
.
ok
);

109 } i‡(
c
->
¨gc
 =2 && !
	`°rˇ£cmp
(c->
¨gv
[1]->
±r
,"len")) {

110 
Àn
;

111 
	`±hªad_rwlock_rdlock
(&
rwlockî
);

112 
Àn
 = 
	`dli°Lígth
(
¶owlog
);

113 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

114 
	`addRïlyL⁄gL⁄g
(
c
,
Àn
);

115 } i‡((
c
->
¨gc
 == 2 || c->argc == 3) &&

116 !
	`°rˇ£cmp
(
c
->
¨gv
[1]->
±r
,"get"))

118 
cou¡
 = 10, 
£¡
 = 0;

119 
dli°Iãr
 
li
;

120 *
tŸíåõs
;

121 
dli°Node
 *
 
;

122 
¶owlogE¡ry
 *
£
;

124 i‡(
c
->
¨gc
 == 3 &&

125 
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
cou¡
,
NULL
Ë!
VR_OK
)

128 
	`±hªad_rwlock_rdlock
(&
rwlockî
);

129 
	`dli°Rewöd
(
¶owlog
,&
li
);

130 
tŸíåõs
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

131 
cou¡
-- && (
 
 = 
	`dli°Next
(&
li
))) {

132 
j
;

134 
£
 = 
 
->
vÆue
;

135 
	`addRïlyMu…iBulkLí
(
c
,4);

136 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
id
);

137 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
time
);

138 
	`addRïlyL⁄gL⁄g
(
c
,
£
->
duøti⁄
);

139 
	`addRïlyMu…iBulkLí
(
c
,
£
->
¨gc
);

140 
j
 = 0; j < 
£
->
¨gc
; j++)

141 
	`addRïlyBulk
(
c
,
£
->
¨gv
[
j
]);

142 
£¡
++;

144 
	`±hªad_rwlock_u∆ock
(&
rwlockî
);

145 
	`£tDe„ºedMu…iBulkLígth
(
c
,
tŸíåõs
,
£¡
);

147 
	`addRïlyEº‹
(
c
,

150 
	}
}

	@src/vr_slowlog.h

1 #i‚de‡
_VR_SLOWLOG_H_


2 
	#_VR_SLOWLOG_H_


	)

4 
	#SLOWLOG_ENTRY_MAX_ARGC
 32

	)

5 
	#SLOWLOG_ENTRY_MAX_STRING
 128

	)

8 
	s¶owlogE¡ry
 {

9 
robj
 **
	m¨gv
;

10 
	m¨gc
;

11 
	mid
;

12 
	mduøti⁄
;

13 
time_t
 
	mtime
;

14 } 
	t¶owlogE¡ry
;

17 
¶owlogInô
();

18 
¶owlogPushE¡ryIfNìded
(
vr_evíéo›
 *
vñ
, 
robj
 **
¨gv
, 
¨gc
, 
duøti⁄
);

21 
¶owlogComm™d
(
˛õ¡
 *
c
);

	@src/vr_stats.c

1 
	~<vr_c‹e.h
>

4 
	$vr_°©s_öô
(
vr_°©s
 *
°©s
)

6 
r°©us_t
 
ªt
;

8 i‡(
°©s
 =
NULL
) {

9  
VR_ERROR
;

12 
°©s
->
°¨âime
 = 0;

13 
°©s
->
numcomm™ds
 = 0;

14 
°©s
->
numc⁄√˘i⁄s
 = 0;

15 
°©s
->
expúedkeys
 = 0;

16 
°©s
->
evi˘edkeys
 = 0;

17 
°©s
->
key•a˚_hôs
 = 0;

18 
°©s
->
key•a˚_mis£s
 = 0;

19 
°©s
->
ªje˘ed_c⁄n
 = 0;

20 
°©s
->
sync_fuŒ
 = 0;

21 
°©s
->
sync_∑πül_ok
 = 0;

22 
°©s
->
sync_∑πül_îr
 = 0;

23 
°©s
->
√t_öput_byãs
 = 0;

24 
°©s
->
√t_ouçut_byãs
 = 0;

25 
°©s
->
≥ak_mem‹y
 = 0;

27 #i‡!
	`deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

28 
ªt
 = 
	`±hªad_•ö_öô
(&
°©s
->
°©¶ock
, 0);

29 i‡(
ªt
 != 0) {

30  
VR_ERROR
;

34 
°©s
->
°¨âime
 = 
	`time
(
NULL
);

36  
VR_OK
;

37 
	}
}

40 
	$vr_°©s_deöô
(
vr_°©s
 *
°©s
)

42 i‡(
°©s
 =
NULL
) {

46 
°©s
->
°¨âime
 = 0;

47 
°©s
->
numcomm™ds
 = 0;

48 
°©s
->
numc⁄√˘i⁄s
 = 0;

49 
°©s
->
expúedkeys
 = 0;

50 
°©s
->
evi˘edkeys
 = 0;

51 
°©s
->
key•a˚_hôs
 = 0;

52 
°©s
->
key•a˚_mis£s
 = 0;

53 
°©s
->
ªje˘ed_c⁄n
 = 0;

54 
°©s
->
sync_fuŒ
 = 0;

55 
°©s
->
sync_∑πül_ok
 = 0;

56 
°©s
->
sync_∑πül_îr
 = 0;

57 
°©s
->
√t_öput_byãs
 = 0;

58 
°©s
->
√t_ouçut_byãs
 = 0;

60 #i‡!
	`deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

61 
	`±hªad_•ö_de°roy
(&
°©s
->
°©¶ock
);

63 
	}
}

66 
	$åackIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
, 
cuºít_ªadög
) {

67 
t
 = 
	`vr_m£c_now
(Ë- 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_time
;

68 
›s
 = 
cuºít_ªadög
 -

69 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_cou¡
;

70 
›s_£c
;

72 
›s_£c
 = 
t
 > 0 ? (
›s
*1000/t) : 0;

74 
	`upd©e_°©s_£t
(
°©s
,
ö°_mëric
[
mëric
].
ßm∂es
[°©s->ö°_mëric[mëric].
idx
],
›s_£c
);

75 
°©s
->
ö°_mëric
[
mëric
].
idx
++;

76 
°©s
->
ö°_mëric
[
mëric
].
idx
 %
STATS_METRIC_SAMPLES
;

77 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_time
 = 
	`vr_m£c_now
();

78 
°©s
->
ö°_mëric
[
mëric
].
œ°_ßm∂e_cou¡
 = 
cuºít_ªadög
;

79 
	}
}

82 
	$gëIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
) {

83 
j
;

84 
sum
 = 0;

86 
j
 = 0; j < 
STATS_METRIC_SAMPLES
; j++) {

87 
vÆue
;

88 
	`upd©e_°©s_gë
(
°©s
, 
ö°_mëric
[
mëric
].
ßm∂es
[
j
], &
vÆue
);

89 
sum
 +
vÆue
;

91  
sum
 / 
STATS_METRIC_SAMPLES
;

92 
	}
}

	@src/vr_stats.h

1 #i‚de‡
_VR_STATS_H_


2 
	#_VR_STATS_H_


	)

5 
	#STATS_ATOMIC_FIRST
 1

	)

9 
	#STATS_METRIC_SAMPLES
 16

	)

10 
	#STATS_METRIC_COMMAND
 0

	)

11 
	#STATS_METRIC_NET_INPUT
 1

	)

12 
	#STATS_METRIC_NET_OUTPUT
 2

	)

13 
	#STATS_METRIC_COUNT
 3

	)

15 
	svr_°©s
 {

17 
time_t
 
	m°¨âime
;

18 
	mnumcomm™ds
;

19 
	mnumc⁄√˘i⁄s
;

20 
	mexpúedkeys
;

21 
	mevi˘edkeys
;

22 
	mkey•a˚_hôs
;

23 
	mkey•a˚_mis£s
;

24 
	mªje˘ed_c⁄n
;

25 
	msync_fuŒ
;

26 
	msync_∑πül_ok
;

27 
	msync_∑πül_îr
;

28 
	m√t_öput_byãs
;

29 
	m√t_ouçut_byãs
;

30 
size_t
 
	m≥ak_mem‹y
;

35 
	mœ°_ßm∂e_time
;

36 
	mœ°_ßm∂e_cou¡
;

37 
	mßm∂es
[
STATS_METRIC_SAMPLES
];

38 
	midx
;

39 } 
	mö°_mëric
[
STATS_METRIC_COUNT
];

41 #i‡!
deföed
(
STATS_ATOMIC_FIRST
Ë|| (!deföed(
__ATOMIC_RELAXED
Ë&& !deföed(
HAVE_ATOMIC
))

42 
±hªad_•ölock_t
 
	m°©¶ock
;

44 }
	tvr_°©s
;

47 #i‡
deföed
(
__ATOMIC_RELAXED
Ë&& deföed(
STATS_ATOMIC_FIRST
)

48 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_add_„tch
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

49 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_sub_„tch
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

50 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
Ë
	`__©omic_°‹e_n
(&(_°©s)->_fõld, (_n), 
__ATOMIC_RELAXED
)

	)

51 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

52 
	`__©omic_lﬂd
(&(
_°©s
)->
_fõld
, 
_v
, 
__ATOMIC_RELAXED
); \

53 } 0)

	)

55 
	#STATS_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

57 #ñi‡
deföed
(
HAVE_ATOMIC
Ë&& deföed(
STATS_ATOMIC_FIRST
)

58 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_add_™d_„tch
(&(_°©s)->_fõld, (_n))

	)

59 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_sub_™d_„tch
(&(_°©s)->_fõld, (_n))

	)

60 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&(_°©s)->_fõld, (_n))

	)

61 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

62 (*
_v
Ë
	`__sync_add_™d_„tch
(&(
_°©s
)->
_fõld
, 0); \

63 } 0)

	)

65 
	#STATS_LOCK_TYPE
 "HAVE_ATOMIC"

	)

67 
	#upd©e_°©s_add
(
_°©s
, 
_fõld
, 
_n
) do { \

68 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

69 (
_°©s
)->
_fõld
 +(
_n
); \

70 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

71 } 0)

	)

73 
	#upd©e_°©s_sub
(
_°©s
, 
_fõld
, 
_n
) do { \

74 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

75 (
_°©s
)->
_fõld
 -(
_n
); \

76 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

77 } 0)

	)

79 
	#upd©e_°©s_£t
(
_°©s
, 
_fõld
, 
_n
) do { \

80 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

81 (
_°©s
)->
_fõld
 = (
_n
); \

82 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

83 } 0)

	)

85 
	#upd©e_°©s_gë
(
_°©s
, 
_fõld
, 
_v
) do { \

86 
	`±hªad_•ö_lock
(&(
_°©s
)->
°©¶ock
); \

87 (*
_v
Ë(
_°©s
)->
_fõld
; \

88 
	`±hªad_•ö_u∆ock
(&(
_°©s
)->
°©¶ock
); \

89 } 0)

	)

91 
	#STATS_LOCK_TYPE
 "±hªad_•ö_lock"

	)

94 
vr_°©s_öô
(
vr_°©s
 *
°©s
);

95 
vr_°©s_deöô
(
vr_°©s
 *
°©s
);

97 
åackIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
, 
cuºít_ªadög
);

98 
gëIn°™è√ousMëric
(
vr_°©s
 *
°©s
, 
mëric
);

	@src/vr_t_hash.c

1 
	~<m©h.h
>

3 
	~<vr_c‹e.h
>

12 
	$hashTy≥TryC⁄vîsi⁄
(
robj
 *
o
,Ñobj **
¨gv
, 
°¨t
, 
íd
) {

13 
i
;

15 i‡(
o
->
ícodög
 !
OBJ_ENCODING_ZIPLIST
) ;

17 
i
 = 
°¨t
; i <
íd
; i++) {

18 i‡(
	`sdsEncodedObje˘
(
¨gv
[
i
]) &&

19 
	`sd¶í
(
¨gv
[
i
]->
±r
Ë> 
£rvî
.
hash_max_zùli°_vÆue
)

21 
	`hashTy≥C⁄vît
(
o
, 
OBJ_ENCODING_HT
);

25 
	}
}

28 
	$hashTy≥TryObje˘Encodög
(
robj
 *
subje˘
,Ñobj **
o1
,Ñobj **
o2
) {

29 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

30 i‡(
o1
Ë*o1 = 
	`åyObje˘Encodög
(*o1);

31 i‡(
o2
Ë*o2 = 
	`åyObje˘Encodög
(*o2);

33 
	}
}

37 
	$hashTy≥GëFromZùli°
(
robj
 *
o
,Ñobj *
fõld
,

38 **
v°r
,

39 *
vÀn
,

40 *
vŒ
)

42 *
zl
, *
Âå
 = 
NULL
, *
v±r
 = NULL;

43 
ªt
;

44 
robj
 *
fõld_√w
;

46 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

48 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

50 
zl
 = 
o
->
±r
;

51 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

52 i‡(
Âå
 !
NULL
) {

53 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

54 i‡(
Âå
 !
NULL
) {

56 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

57 
	`ASSERT
(
v±r
 !
NULL
);

61 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

63 i‡(
v±r
 !
NULL
) {

64 
ªt
 = 
	`zùli°Gë
(
v±r
, 
v°r
, 
vÀn
, 
vŒ
);

65 
	`ASSERT
(
ªt
);

70 
	}
}

74 
	$hashTy≥GëFromHashTabÀ
(
robj
 *
o
,Ñobj *
fõld
,Ñobj **
vÆue
) {

75 
di˘E¡ry
 *
de
;

77 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_HT
);

79 
de
 = 
	`di˘Föd
(
o
->
±r
, 
fõld
);

80 i‡(
de
 =
NULL
)  -1;

81 *
vÆue
 = 
	`di˘GëVÆ
(
de
);

83 
	}
}

91 
robj
 *
	$hashTy≥GëObje˘
(
robj
 *
o
,Ñobj *
fõld
) {

92 
robj
 *
vÆue
 = 
NULL
;

94 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

95 *
v°r
 = 
NULL
;

96 
vÀn
 = 
UINT_MAX
;

97 
vŒ
 = 
LLONG_MAX
;

99 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0) {

100 i‡(
v°r
) {

101 
vÆue
 = 
	`¸óãSåögObje˘
((*)
v°r
, 
vÀn
);

103 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
);

106 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

107 
robj
 *
aux
;

109 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0) {

110 
vÆue
 = 
aux
;

113 
	`£rvîP™ic
("Unknown hashÉncoding");

115  
vÆue
;

116 
	}
}

121 
size_t
 
	$hashTy≥GëVÆueLígth
(
robj
 *
o
,Ñobj *
fõld
) {

122 
size_t
 
Àn
 = 0;

123 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

124 *
v°r
 = 
NULL
;

125 
vÀn
 = 
UINT_MAX
;

126 
vŒ
 = 
LLONG_MAX
;

128 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0)

129 
Àn
 = 
v°r
 ? 
vÀn
 : 
	`sdigôs10
(
vŒ
);

130 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

131 
robj
 *
aux
;

133 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0)

134 
Àn
 = 
	`°rögObje˘Lí
(
aux
);

136 
	`£rvîP™ic
("Unknown hashÉncoding");

138  
Àn
;

139 
	}
}

143 
	$hashTy≥Exi°s
(
robj
 *
o
,Ñobj *
fõld
) {

144 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

145 *
v°r
 = 
NULL
;

146 
vÀn
 = 
UINT_MAX
;

147 
vŒ
 = 
LLONG_MAX
;

149 i‡(
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
) == 0)  1;

150 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

151 
robj
 *
aux
;

153 i‡(
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
aux
) == 0)  1;

155 
	`£rvîP™ic
("Unknown hashÉncoding");

158 
	}
}

165 
	$hashTy≥Së
(
robj
 *
o
,Ñobj *
fõld
,Ñobj *
vÆue
) {

166 
upd©e
 = 0;

167 
robj
 *
fõld_√w
, *
vÆue_√w
;

169 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

170 *
zl
, *
Âå
, *
v±r
;

172 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

173 
vÆue_√w
 = 
	`gëDecodedObje˘
(
vÆue
);

175 
zl
 = 
o
->
±r
;

176 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

177 i‡(
Âå
 !
NULL
) {

178 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

179 i‡(
Âå
 !
NULL
) {

181 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

182 
	`ASSERT
(
v±r
 !
NULL
);

183 
upd©e
 = 1;

186 
zl
 = 
	`zùli°Dñëe
(zl, &
v±r
);

189 
zl
 = 
	`zùli°In£π
(zl, 
v±r
, 
vÆue_√w
->
±r
, 
	`sd¶í
(value_new->ptr));

193 i‡(!
upd©e
) {

195 
zl
 = 
	`zùli°Push
(zl, 
fõld_√w
->
±r
, 
	`sd¶í
(fõld_√w->±r), 
ZIPLIST_TAIL
);

196 
zl
 = 
	`zùli°Push
(zl, 
vÆue_√w
->
±r
, 
	`sd¶í
(vÆue_√w->±r), 
ZIPLIST_TAIL
);

198 
o
->
±r
 = 
zl
;

199 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

200 i‡(
vÆue_√w
 !
vÆue
Ë
	`‰ìObje˘
(value_new);

203 i‡(
	`hashTy≥Lígth
(
o
Ë> 
£rvî
.
hash_max_zùli°_íåõs
)

204 
	`hashTy≥C⁄vît
(
o
, 
OBJ_ENCODING_HT
);

205 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

206 
fõld_√w
 = 
	`dupSåögObje˘Unc⁄°™t
(
fõld
);

207 
vÆue_√w
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

208 i‡(
	`di˘Rïœ˚
(
o
->
±r
, 
fõld_√w
, 
vÆue_√w
)) {

211 
upd©e
 = 1;

212 
	`‰ìObje˘
(
fõld_√w
);

215 
	`£rvîP™ic
("Unknown hashÉncoding");

217  
upd©e
;

218 
	}
}

222 
	$hashTy≥Dñëe
(
robj
 *
o
,Ñobj *
fõld
) {

223 
dñëed
 = 0;

225 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

226 *
zl
, *
Âå
;

227 
robj
 *
fõld_√w
;

229 
fõld_√w
 = 
	`gëDecodedObje˘
(
fõld
);

231 
zl
 = 
o
->
±r
;

232 
Âå
 = 
	`zùli°Index
(
zl
, 
ZIPLIST_HEAD
);

233 i‡(
Âå
 !
NULL
) {

234 
Âå
 = 
	`zùli°Föd
(Âå, 
fõld_√w
->
±r
, 
	`sd¶í
(field_new->ptr), 1);

235 i‡(
Âå
 !
NULL
) {

236 
zl
 = 
	`zùli°Dñëe
(zl,&
Âå
);

237 
zl
 = 
	`zùli°Dñëe
(zl,&
Âå
);

238 
o
->
±r
 = 
zl
;

239 
dñëed
 = 1;

243 i‡(
fõld_√w
 !
fõld
Ë
	`‰ìObje˘
(field_new);

244 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

245 i‡(
	`di˘Dñëe
((
di˘
*)
o
->
±r
, 
fõld
Ë=
VR_OK
) {

246 
dñëed
 = 1;

249 i‡(
	`htNìdsResize
(
o
->
±r
)Ë
	`di˘Resize
(o->ptr);

253 
	`£rvîP™ic
("Unknown hashÉncoding");

256  
dñëed
;

257 
	}
}

260 
	$hashTy≥Lígth
(
robj
 *
o
) {

261 
Àngth
 = 
ULONG_MAX
;

263 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

264 
Àngth
 = 
	`zùli°Lí
(
o
->
±r
) / 2;

265 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

266 
Àngth
 = 
	`di˘Size
((
di˘
*)
o
->
±r
);

268 
	`£rvîP™ic
("Unknown hashÉncoding");

271  
Àngth
;

272 
	}
}

274 
hashTy≥Iãøt‹
 *
	$hashTy≥InôIãøt‹
(
robj
 *
subje˘
) {

275 
hashTy≥Iãøt‹
 *
hi
 = 
	`dÆloc
((hashTypeIterator));

276 
hi
->
subje˘
 = subject;

277 
hi
->
ícodög
 = 
subje˘
->encoding;

279 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

280 
hi
->
Âå
 = 
NULL
;

281 
hi
->
v±r
 = 
NULL
;

282 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

283 
hi
->
di
 = 
	`di˘GëIãøt‹
(
subje˘
->
±r
);

285 
	`£rvîP™ic
("Unknown hashÉncoding");

288  
hi
;

289 
	}
}

291 
	$hashTy≥Rñó£Iãøt‹
(
hashTy≥Iãøt‹
 *
hi
) {

292 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

293 
	`di˘Rñó£Iãøt‹
(
hi
->
di
);

296 
	`d‰ì
(
hi
);

297 
	}
}

301 
	$hashTy≥Next
(
hashTy≥Iãøt‹
 *
hi
) {

302 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

303 *
zl
;

304 *
Âå
, *
v±r
;

306 
zl
 = 
hi
->
subje˘
->
±r
;

307 
Âå
 = 
hi
->fptr;

308 
v±r
 = 
hi
->vptr;

310 i‡(
Âå
 =
NULL
) {

312 
	`ASSERT
(
v±r
 =
NULL
);

313 
Âå
 = 
	`zùli°Index
(
zl
, 0);

316 
	`ASSERT
(
v±r
 !
NULL
);

317 
Âå
 = 
	`zùli°Next
(
zl
, 
v±r
);

319 i‡(
Âå
 =
NULL
Ë 
VR_ERROR
;

322 
v±r
 = 
	`zùli°Next
(
zl
, 
Âå
);

323 
	`ASSERT
(
v±r
 !
NULL
);

326 
hi
->
Âå
 = fptr;

327 
hi
->
v±r
 = vptr;

328 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

329 i‡((
hi
->
de
 = 
	`di˘Next
(hi->
di
)Ë=
NULL
Ë 
VR_ERROR
;

331 
	`£rvîP™ic
("Unknown hashÉncoding");

333  
VR_OK
;

334 
	}
}

338 
	$hashTy≥CuºítFromZùli°
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
,

339 **
v°r
,

340 *
vÀn
,

341 *
vŒ
)

343 
ªt
;

345 
	`ASSERT
(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

347 i‡(
wh©
 & 
OBJ_HASH_KEY
) {

348 
ªt
 = 
	`zùli°Gë
(
hi
->
Âå
, 
v°r
, 
vÀn
, 
vŒ
);

349 
	`ASSERT
(
ªt
);

351 
ªt
 = 
	`zùli°Gë
(
hi
->
v±r
, 
v°r
, 
vÀn
, 
vŒ
);

352 
	`ASSERT
(
ªt
);

354 
	}
}

358 
	$hashTy≥CuºítFromHashTabÀ
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, 
robj
 **
d°
) {

359 
	`ASSERT
(
hi
->
ícodög
 =
OBJ_ENCODING_HT
);

361 i‡(
wh©
 & 
OBJ_HASH_KEY
) {

362 *
d°
 = 
	`di˘GëKey
(
hi
->
de
);

364 *
d°
 = 
	`di˘GëVÆ
(
hi
->
de
);

366 
	}
}

371 
robj
 *
	$hashTy≥CuºítObje˘
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
) {

372 
robj
 *
d°
;

374 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

375 *
v°r
 = 
NULL
;

376 
vÀn
 = 
UINT_MAX
;

377 
vŒ
 = 
LLONG_MAX
;

379 
	`hashTy≥CuºítFromZùli°
(
hi
, 
wh©
, &
v°r
, &
vÀn
, &
vŒ
);

380 i‡(
v°r
) {

381 
d°
 = 
	`¸óãSåögObje˘
((*)
v°r
, 
vÀn
);

383 
d°
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vŒ
);

385 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

386 
	`hashTy≥CuºítFromHashTabÀ
(
hi
, 
wh©
, &
d°
);

388 
	`£rvîP™ic
("Unknown hashÉncoding");

390  
d°
;

391 
	}
}

393 
robj
 *
	$hashTy≥LookupWrôeOrCª©e
(
˛õ¡
 *
c
, 
robj
 *
key
, *
expúed
) {

394 
robj
 *
o
 = 
	`lookupKeyWrôe
(
c
->
db
,
key
,
expúed
);

395 i‡(
o
 =
NULL
) {

396 
o
 = 
	`¸óãHashObje˘
();

397 
	`dbAdd
(
c
->
db
,
key
,
o
);

399 i‡(
o
->
ty≥
 !
OBJ_HASH
) {

400 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

401  
NULL
;

404  
o
;

405 
	}
}

407 
	$hashTy≥C⁄vîtZùli°
(
robj
 *
o
, 
íc
) {

408 
	`ASSERT
(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
);

410 i‡(
íc
 =
OBJ_ENCODING_ZIPLIST
) {

413 } i‡(
íc
 =
OBJ_ENCODING_HT
) {

414 
hashTy≥Iãøt‹
 *
hi
;

415 
di˘
 *
d
;

416 
ªt
;

418 
hi
 = 
	`hashTy≥InôIãøt‹
(
o
);

419 
d
 = 
	`di˘Cª©e
(&
hashDi˘Ty≥
, 
NULL
);

421 
	`hashTy≥Next
(
hi
Ë!
VR_ERROR
) {

422 
robj
 *
fõld
, *
vÆue
;

424 
fõld
 = 
	`hashTy≥CuºítObje˘
(
hi
, 
OBJ_HASH_KEY
);

425 
fõld
 = 
	`åyObje˘Encodög
(field);

426 
vÆue
 = 
	`hashTy≥CuºítObje˘
(
hi
, 
OBJ_HASH_VALUE
);

427 
vÆue
 = 
	`åyObje˘Encodög
(value);

428 
ªt
 = 
	`di˘Add
(
d
, 
fõld
, 
vÆue
);

429 i‡(
ªt
 !
DICT_OK
) {

432 
	`ASSERT
(
ªt
 =
DICT_OK
);

436 
	`hashTy≥Rñó£Iãøt‹
(
hi
);

437 
	`d‰ì
(
o
->
±r
);

439 
o
->
ícodög
 = 
OBJ_ENCODING_HT
;

440 
o
->
±r
 = 
d
;

443 
	`£rvîP™ic
("Unknown hashÉncoding");

445 
	}
}

447 
	$hashTy≥C⁄vît
(
robj
 *
o
, 
íc
) {

448 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

449 
	`hashTy≥C⁄vîtZùli°
(
o
, 
íc
);

450 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

451 
	`£rvîP™ic
("Not implemented");

453 
	`£rvîP™ic
("Unknown hashÉncoding");

455 
	}
}

461 
	$h£tComm™d
(
˛õ¡
 *
c
) {

462 
upd©e
;

463 
robj
 *
o
;

464 
expúed
 = 0;

466 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

467 
	`lockDbWrôe
(
c
->
db
);

468 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

469 
	`u∆ockDb
(
c
->
db
);

470 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

473 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,3);

474 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2], &c->argv[3]);

475 
upd©e
 = 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],c->argv[3]);

476 
	`addRïly
(
c
, 
upd©e
 ? 
sh¨ed
.
czîo
 : sh¨ed.
c⁄e
);

477 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

478 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

479 
c
->
vñ
->
dúty
++;

480 
	`u∆ockDb
(
c
->
db
);

481 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

482 
	}
}

484 
	$h£äxComm™d
(
˛õ¡
 *
c
) {

485 
robj
 *
o
;

486 
expúed
 = 0;

488 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

489 
	`lockDbWrôe
(
c
->
db
);

490 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

491 
	`u∆ockDb
(
c
->
db
);

492 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

495 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,3);

497 i‡(
	`hashTy≥Exi°s
(
o
, 
c
->
¨gv
[2])) {

498 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

500 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2], &c->argv[3]);

501 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],c->argv[3]);

502 
	`addRïly
(
c
, 
sh¨ed
.
c⁄e
);

503 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

504 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

505 
£rvî
.
dúty
++;

508 
	`u∆ockDb
(
c
->
db
);

509 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

510 
	}
}

512 
	$hm£tComm™d
(
˛õ¡
 *
c
) {

513 
i
;

514 
robj
 *
o
;

515 
expúed
 = 0;

517 i‡((
c
->
¨gc
 % 2) == 1) {

518 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for HMSET");

522 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

523 
	`lockDbWrôe
(
c
->
db
);

524 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

525 
	`u∆ockDb
(
c
->
db
);

526 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

529 
	`hashTy≥TryC⁄vîsi⁄
(
o
,
c
->
¨gv
,2,c->
¨gc
-1);

530 
i
 = 2; i < 
c
->
¨gc
; i += 2) {

531 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[
i
], &c->argv[i+1]);

532 
	`hashTy≥Së
(
o
,
c
->
¨gv
[
i
],c->argv[i+1]);

534 
	`addRïly
(
c
, 
sh¨ed
.
ok
);

535 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

536 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"h£t",
c
->
¨gv
[1],c->
db
->
id
);

537 
c
->
vñ
->
dúty
++;

539 
	`u∆ockDb
(
c
->
db
);

540 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

541 
	}
}

543 
	$hö¸byComm™d
(
˛õ¡
 *
c
) {

544 
vÆue
, 
ö¸
, 
ﬁdvÆue
;

545 
robj
 *
o
, *
cuºít
, *
√w
;

546 
expúed
 = 0;

548 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
ö¸
,
NULL
Ë!
VR_OK
) ;

550 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

551 
	`lockDbWrôe
(
c
->
db
);

552 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
Ë
íd
;

553 i‡((
cuºít
 = 
	`hashTy≥GëObje˘
(
o
,
c
->
¨gv
[2])Ë!
NULL
) {

554 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
cuºít
,&
vÆue
,

555 "hash vÆuêi†nŸá¿öãgî"Ë!
VR_OK
) {

556 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

557 
íd
;

559 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

561 
vÆue
 = 0;

564 
ﬁdvÆue
 = 
vÆue
;

565 i‡((
ö¸
 < 0 && 
ﬁdvÆue
 < 0 && in¸ < (
LLONG_MIN
-oldvalue)) ||

566 (
ö¸
 > 0 && 
ﬁdvÆue
 > 0 && in¸ > (
LLONG_MAX
-oldvalue))) {

567 
	`addRïlyEº‹
(
c
,"increment or decrement would overflow");

568 
íd
;

570 
vÆue
 +
ö¸
;

571 
√w
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

572 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2],
NULL
);

573 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],
√w
);

574 
	`‰ìObje˘
(
√w
);

575 
	`addRïlyL⁄gL⁄g
(
c
,
vÆue
);

576 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

577 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hö¸by",
c
->
¨gv
[1],c->
db
->
id
);

578 
c
->
vñ
->
dúty
++;

580 
íd
:

581 
	`u∆ockDb
(
c
->
db
);

582 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

583 
	}
}

585 
	$hö¸byÊﬂtComm™d
(
˛õ¡
 *
c
) {

586 
vÆue
, 
ö¸
;

587 
robj
 *
o
, *
cuºít
, *
√w
, *
aux
;

588 
expúed
 = 0;

590 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
ö¸
,
NULL
Ë!
VR_OK
) ;

592 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

593 
	`lockDbWrôe
(
c
->
db
);

594 i‡((
o
 = 
	`hashTy≥LookupWrôeOrCª©e
(
c
,c->
¨gv
[1],&
expúed
)Ë=
NULL
) {

595 
	`u∆ockDb
(
c
->
db
);

596 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

599 i‡((
cuºít
 = 
	`hashTy≥GëObje˘
(
o
,
c
->
¨gv
[2])Ë!
NULL
) {

600 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,
cuºít
,&
vÆue
,

601 "hash vÆuêi†nŸá vÆid flﬂt"Ë!
VR_OK
) {

602 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

603 
	`u∆ockDb
(
c
->
db
);

604 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

607 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
Ë
	`‰ìObje˘
(
cuºít
);

609 
vÆue
 = 0;

612 
vÆue
 +
ö¸
;

613 
√w
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
,1);

614 
	`hashTy≥TryObje˘Encodög
(
o
,&
c
->
¨gv
[2],
NULL
);

615 
	`hashTy≥Së
(
o
,
c
->
¨gv
[2],
√w
);

616 
	`addRïlyBulk
(
c
,
√w
);

617 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

618 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hö¸byÊﬂt",
c
->
¨gv
[1],c->
db
->
id
);

619 
c
->
vñ
->
dúty
++;

621 
	`u∆ockDb
(
c
->
db
);

622 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

627 
aux
 = 
	`¸óãSåögObje˘
("HSET",4);

628 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,0,
aux
);

629 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,3,
√w
);

630 
	}
}

632 
	$addHashFõldToRïly
(
˛õ¡
 *
c
, 
robj
 *
o
,Ñobj *
fõld
) {

633 
ªt
;

635 i‡(
o
 =
NULL
) {

636 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

640 i‡(
o
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

641 *
v°r
 = 
NULL
;

642 
vÀn
 = 
UINT_MAX
;

643 
vŒ
 = 
LLONG_MAX
;

645 
ªt
 = 
	`hashTy≥GëFromZùli°
(
o
, 
fõld
, &
v°r
, &
vÀn
, &
vŒ
);

646 i‡(
ªt
 < 0) {

647 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

649 i‡(
v°r
) {

650 
	`addRïlyBulkCBuf„r
(
c
, 
v°r
, 
vÀn
);

652 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
vŒ
);

656 } i‡(
o
->
ícodög
 =
OBJ_ENCODING_HT
) {

657 
robj
 *
vÆue
;

659 
ªt
 = 
	`hashTy≥GëFromHashTabÀ
(
o
, 
fõld
, &
vÆue
);

660 i‡(
ªt
 < 0) {

661 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

663 
	`addRïlyBulk
(
c
, 
vÆue
);

667 
	`£rvîP™ic
("Unknown hashÉncoding");

669 
	}
}

671 
	$hgëComm™d
(
˛õ¡
 *
c
) {

672 
robj
 *
o
;

674 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

675 
	`lockDbRód
(
c
->
db
);

676 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

677 
	`u∆ockDb
(
c
->
db
);

678 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

680 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

681 
	`u∆ockDb
(
c
->
db
);

682 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

686 
	`addHashFõldToRïly
(
c
, 
o
, c->
¨gv
[2]);

687 
	`u∆ockDb
(
c
->
db
);

688 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

689 
	}
}

691 
	$hmgëComm™d
(
˛õ¡
 *
c
) {

692 
robj
 *
o
;

693 
i
;

695 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

696 
	`lockDbRód
(
c
->
db
);

699 
o
 = 
	`lookupKeyRód
(
c
->
db
, c->
¨gv
[1]);

700 i‡(
o
 !
NULL
 && o->
ty≥
 !
OBJ_HASH
) {

701 
	`u∆ockDb
(
c
->
db
);

702 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

703 
	`addRïly
(
c
, 
sh¨ed
.
wr⁄gty≥îr
);

707 
	`addRïlyMu…iBulkLí
(
c
, c->
¨gc
-2);

708 
i
 = 2; i < 
c
->
¨gc
; i++) {

709 
	`addHashFõldToRïly
(
c
, 
o
, c->
¨gv
[
i
]);

712 i‡(
o
 =
NULL
) {

713 
	`u∆ockDb
(
c
->
db
);

714 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

718 
	`u∆ockDb
(
c
->
db
);

719 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

720 
	}
}

722 
	$hdñComm™d
(
˛õ¡
 *
c
) {

723 
robj
 *
o
;

724 
j
, 
dñëed
 = 0, 
keyªmoved
 = 0;

725 
expúed
 = 0;

727 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

728 
	`lockDbWrôe
(
c
->
db
);

729 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

730 
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

731 
	`u∆ockDb
(
c
->
db
);

732 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

736 
j
 = 2; j < 
c
->
¨gc
; j++) {

737 i‡(
	`hashTy≥Dñëe
(
o
,
c
->
¨gv
[
j
])) {

738 
dñëed
++;

739 i‡(
	`hashTy≥Lígth
(
o
) == 0) {

740 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

741 
keyªmoved
 = 1;

747 
	`u∆ockDb
(
c
->
db
);

748 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

750 i‡(
dñëed
) {

751 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

752 
	`nŸifyKey•a˚Evít
(
NOTIFY_HASH
,"hdñ",
c
->
¨gv
[1],c->
db
->
id
);

753 i‡(
keyªmoved
)

754 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],

755 
c
->
db
->
id
);

756 
£rvî
.
dúty
 +
dñëed
;

758 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

759 
	}
}

761 
	$hÀnComm™d
(
˛õ¡
 *
c
) {

762 
robj
 *
o
;

764 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

765 
	`lockDbRód
(
c
->
db
);

766 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

767 
	`u∆ockDb
(
c
->
db
);

768 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

770 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

771 
	`u∆ockDb
(
c
->
db
);

772 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

776 
	`addRïlyL⁄gL⁄g
(
c
,
	`hashTy≥Lígth
(
o
));

777 
	`u∆ockDb
(
c
->
db
);

778 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

779 
	}
}

781 
	$h°æíComm™d
(
˛õ¡
 *
c
) {

782 
robj
 *
o
;

784 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

785 
	`lockDbRód
(
c
->
db
);

786 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

787 
	`u∆ockDb
(
c
->
db
);

788 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

790 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

791 
	`u∆ockDb
(
c
->
db
);

792 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

796 
	`addRïlyL⁄gL⁄g
(
c
,
	`hashTy≥GëVÆueLígth
(
o
,c->
¨gv
[2]));

798 
	`u∆ockDb
(
c
->
db
);

799 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

800 
	}
}

802 
	$addHashIãøt‹Curs‹ToRïly
(
˛õ¡
 *
c
, 
hashTy≥Iãøt‹
 *
hi
, 
wh©
) {

803 i‡(
hi
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

804 *
v°r
 = 
NULL
;

805 
vÀn
 = 
UINT_MAX
;

806 
vŒ
 = 
LLONG_MAX
;

808 
	`hashTy≥CuºítFromZùli°
(
hi
, 
wh©
, &
v°r
, &
vÀn
, &
vŒ
);

809 i‡(
v°r
) {

810 
	`addRïlyBulkCBuf„r
(
c
, 
v°r
, 
vÀn
);

812 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
vŒ
);

815 } i‡(
hi
->
ícodög
 =
OBJ_ENCODING_HT
) {

816 
robj
 *
vÆue
;

818 
	`hashTy≥CuºítFromHashTabÀ
(
hi
, 
wh©
, &
vÆue
);

819 
	`addRïlyBulk
(
c
, 
vÆue
);

822 
	`£rvîP™ic
("Unknown hashÉncoding");

824 
	}
}

826 
	$gíîicHgëÆlComm™d
(
˛õ¡
 *
c
, 
Êags
) {

827 
robj
 *
o
;

828 
hashTy≥Iãøt‹
 *
hi
;

829 
mu…ùlõr
 = 0;

830 
Àngth
, 
cou¡
 = 0;

832 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

833 
	`lockDbRód
(
c
->
db
);

834 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

835 
	`u∆ockDb
(
c
->
db
);

836 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

838 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

839 
	`u∆ockDb
(
c
->
db
);

840 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

843 i‡(
Êags
 & 
OBJ_HASH_KEY
Ë
mu…ùlõr
++;

844 i‡(
Êags
 & 
OBJ_HASH_VALUE
Ë
mu…ùlõr
++;

846 
Àngth
 = 
	`hashTy≥Lígth
(
o
Ë* 
mu…ùlõr
;

847 
	`addRïlyMu…iBulkLí
(
c
, 
Àngth
);

849 
hi
 = 
	`hashTy≥InôIãøt‹
(
o
);

850 
	`hashTy≥Next
(
hi
Ë!
VR_ERROR
) {

851 i‡(
Êags
 & 
OBJ_HASH_KEY
) {

852 
	`addHashIãøt‹Curs‹ToRïly
(
c
, 
hi
, 
OBJ_HASH_KEY
);

853 
cou¡
++;

855 i‡(
Êags
 & 
OBJ_HASH_VALUE
) {

856 
	`addHashIãøt‹Curs‹ToRïly
(
c
, 
hi
, 
OBJ_HASH_VALUE
);

857 
cou¡
++;

861 
	`hashTy≥Rñó£Iãøt‹
(
hi
);

862 
	`ASSERT
(
cou¡
 =
Àngth
);

864 
	`u∆ockDb
(
c
->
db
);

865 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

866 
	}
}

868 
	$hkeysComm™d
(
˛õ¡
 *
c
) {

869 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_KEY
);

870 
	}
}

872 
	$hvÆsComm™d
(
˛õ¡
 *
c
) {

873 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_VALUE
);

874 
	}
}

876 
	$hgëÆlComm™d
(
˛õ¡
 *
c
) {

877 
	`gíîicHgëÆlComm™d
(
c
,
OBJ_HASH_KEY
|
OBJ_HASH_VALUE
);

878 
	}
}

880 
	$hexi°sComm™d
(
˛õ¡
 *
c
) {

881 
robj
 *
o
;

883 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

884 
	`lockDbRód
(
c
->
db
);

885 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

886 
	`u∆ockDb
(
c
->
db
);

887 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

889 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_HASH
)) {

890 
	`u∆ockDb
(
c
->
db
);

891 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

895 
	`addRïly
(
c
, 
	`hashTy≥Exi°s
(
o
,c->
¨gv
[2]Ë? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

896 
	`u∆ockDb
(
c
->
db
);

897 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

898 
	}
}

900 
	$hsˇnComm™d
(
˛õ¡
 *
c
) {

901 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_HASH
);

902 
	}
}

	@src/vr_t_hash.h

1 #i‚de‡
_VR_T_HASH_H_


2 
	#_VR_T_HASH_H_


	)

4 
hashTy≥TryC⁄vîsi⁄
(
robj
 *
o
,Ñobj **
¨gv
, 
°¨t
, 
íd
);

5 
hashTy≥TryObje˘Encodög
(
robj
 *
subje˘
,Ñobj **
o1
,Ñobj **
o2
);

6 
hashTy≥GëFromZùli°
(
robj
 *
o
,Ñobj *
fõld
, **
v°r
, *
vÀn
, *
vŒ
);

7 
hashTy≥GëFromHashTabÀ
(
robj
 *
o
,Ñobj *
fõld
,Ñobj **
vÆue
);

8 
robj
 *
hashTy≥GëObje˘
‘obj *
o
,Ñobj *
fõld
);

9 
size_t
 
hashTy≥GëVÆueLígth
(
robj
 *
o
,Ñobj *
fõld
);

10 
hashTy≥Exi°s
(
robj
 *
o
,Ñobj *
fõld
);

11 
hashTy≥Së
(
robj
 *
o
,Ñobj *
fõld
,Ñobj *
vÆue
);

12 
hashTy≥Dñëe
(
robj
 *
o
,Ñobj *
fõld
);

13 
hashTy≥Lígth
(
robj
 *
o
);

14 
hashTy≥Iãøt‹
 *
hashTy≥InôIãøt‹
(
robj
 *
subje˘
);

15 
hashTy≥Rñó£Iãøt‹
(
hashTy≥Iãøt‹
 *
hi
);

16 
hashTy≥Next
(
hashTy≥Iãøt‹
 *
hi
);

17 
hashTy≥CuºítFromZùli°
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, **
v°r
, *
vÀn
, *
vŒ
);

18 
hashTy≥CuºítFromHashTabÀ
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
, 
robj
 **
d°
);

19 
robj
 *
hashTy≥CuºítObje˘
(
hashTy≥Iãøt‹
 *
hi
, 
wh©
);

20 
robj
 *
hashTy≥LookupWrôeOrCª©e
(
˛õ¡
 *
c
,Ñobj *
key
, *
expúed
);

21 
hashTy≥C⁄vîtZùli°
(
robj
 *
o
, 
íc
);

22 
hashTy≥C⁄vît
(
robj
 *
o
, 
íc
);

23 
h£tComm™d
(
˛õ¡
 *
c
);

24 
h£äxComm™d
(
˛õ¡
 *
c
);

25 
hm£tComm™d
(
˛õ¡
 *
c
);

26 
hö¸byComm™d
(
˛õ¡
 *
c
);

27 
hö¸byÊﬂtComm™d
(
˛õ¡
 *
c
);

28 
hgëComm™d
(
˛õ¡
 *
c
);

29 
hmgëComm™d
(
˛õ¡
 *
c
);

30 
hdñComm™d
(
˛õ¡
 *
c
);

31 
hÀnComm™d
(
˛õ¡
 *
c
);

32 
h°æíComm™d
(
˛õ¡
 *
c
);

33 
gíîicHgëÆlComm™d
(
˛õ¡
 *
c
, 
Êags
);

34 
hkeysComm™d
(
˛õ¡
 *
c
);

35 
hvÆsComm™d
(
˛õ¡
 *
c
);

36 
hgëÆlComm™d
(
˛õ¡
 *
c
);

37 
hexi°sComm™d
(
˛õ¡
 *
c
);

38 
hsˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_list.c

1 
	~<vr_c‹e.h
>

12 
	$li°Ty≥Push
(
robj
 *
subje˘
,Ñobj *
vÆue
, 
whîe
) {

13 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

14 
robj
 *
vÆue_√w
;

15 
pos
 = (
whîe
 =
LIST_HEAD
Ë? 
QUICKLIST_HEAD
 : 
QUICKLIST_TAIL
;

16 
vÆue_√w
 = 
	`gëDecodedObje˘
(
vÆue
);

17 
size_t
 
Àn
 = 
	`sd¶í
(
vÆue_√w
->
±r
);

18 
	`quickli°Push
(
subje˘
->
±r
, 
vÆue_√w
->±r, 
Àn
, 
pos
);

19 i‡(
vÆue_√w
 !
vÆue
Ë
	`‰ìObje˘
(value_new);

21 
	`£rvîP™ic
("UnknownÜistÉncoding");

23 
	}
}

25 *
	$li°P›Savî
(*
d©a
, 
sz
) {

26  
	`¸óãSåögObje˘
((*)
d©a
,
sz
);

27 
	}
}

29 
robj
 *
	$li°Ty≥P›
(
robj
 *
subje˘
, 
whîe
) {

30 
vl⁄g
;

31 
robj
 *
vÆue
 = 
NULL
;

33 
ql_whîe
 = 
whîe
 =
LIST_HEAD
 ? 
QUICKLIST_HEAD
 : 
QUICKLIST_TAIL
;

34 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

35 i‡(
	`quickli°P›Cu°om
(
subje˘
->
±r
, 
ql_whîe
, (**)&
vÆue
,

36 
NULL
, &
vl⁄g
, 
li°P›Savî
)) {

37 i‡(!
vÆue
)

38 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

41 
	`£rvîP™ic
("UnknownÜistÉncoding");

43  
vÆue
;

44 
	}
}

46 
	$li°Ty≥Lígth
(
robj
 *
subje˘
) {

47 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

48  
	`quickli°Cou¡
(
subje˘
->
±r
);

50 
	`£rvîP™ic
("UnknownÜistÉncoding");

52 
	}
}

55 
li°Ty≥Iãøt‹
 *
	$li°Ty≥InôIãøt‹
(
robj
 *
subje˘
, 
ödex
,

56 
dúe˘i⁄
) {

57 
li°Ty≥Iãøt‹
 *
li
 = 
	`dÆloc
((listTypeIterator));

58 
li
->
subje˘
 = subject;

59 
li
->
ícodög
 = 
subje˘
->encoding;

60 
li
->
dúe˘i⁄
 = direction;

61 
li
->
ôî
 = 
NULL
;

64 
ôî_dúe˘i⁄
 =

65 
dúe˘i⁄
 =
LIST_HEAD
 ? 
AL_START_TAIL
 : 
AL_START_HEAD
;

66 i‡(
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

67 
li
->
ôî
 = 
	`quickli°GëIãøt‹AtIdx
÷i->
subje˘
->
±r
,

68 
ôî_dúe˘i⁄
, 
ödex
);

70 
	`£rvîP™ic
("UnknownÜistÉncoding");

72  
li
;

73 
	}
}

76 
	$li°Ty≥Rñó£Iãøt‹
(
li°Ty≥Iãøt‹
 *
li
) {

77 
	`d‰ì
(
li
->
ôî
);

78 
	`d‰ì
(
li
);

79 
	}
}

84 
	$li°Ty≥Next
(
li°Ty≥Iãøt‹
 *
li
, 
li°Ty≥E¡ry
 *
íåy
) {

86 
	`ASSERT
(
li
->
subje˘
->
ícodög
 ==Üi->encoding);

88 
íåy
->
li
 =Üi;

89 i‡(
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

90  
	`quickli°Next
(
li
->
ôî
, &
íåy
->entry);

92 
	`£rvîP™ic
("UnknownÜistÉncoding");

95 
	}
}

98 
robj
 *
	$li°Ty≥Gë
(
li°Ty≥E¡ry
 *
íåy
) {

99 
robj
 *
vÆue
 = 
NULL
;

100 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

101 i‡(
íåy
->íåy.
vÆue
) {

102 
vÆue
 = 
	`¸óãSåögObje˘
((*)
íåy
->entry.value,

103 
íåy
->íåy.
sz
);

105 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
íåy
->íåy.
l⁄gvÆ
);

108 
	`£rvîP™ic
("UnknownÜistÉncoding");

110  
vÆue
;

111 
	}
}

113 
	$li°Ty≥In£π
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
vÆue
, 
whîe
) {

114 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

115 
vÆue
 = 
	`gëDecodedObje˘
(value);

116 
sds
 
°r
 = 
vÆue
->
±r
;

117 
size_t
 
Àn
 = 
	`sd¶í
(
°r
);

118 i‡(
whîe
 =
LIST_TAIL
) {

119 
	`quickli°In£πA·î
((
quickli°
 *)
íåy
->entry.quicklist,

120 &
íåy
->íåy, 
°r
, 
Àn
);

121 } i‡(
whîe
 =
LIST_HEAD
) {

122 
	`quickli°In£πBef‹e
((
quickli°
 *)
íåy
->entry.quicklist,

123 &
íåy
->íåy, 
°r
, 
Àn
);

125 
	`de¸RefCou¡
(
vÆue
);

127 
	`£rvîP™ic
("UnknownÜistÉncoding");

129 
	}
}

132 
	$li°Ty≥EquÆ
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
o
) {

133 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

134 
	`£rvîAs£πWôhInfo
(
NULL
,
o
,
	`sdsEncodedObje˘
(o));

135  
	`quickli°Com∑ª
(
íåy
->íåy.
zi
,
o
->
±r
,
	`sd¶í
(o->ptr));

137 
	`£rvîP™ic
("UnknownÜistÉncoding");

139 
	}
}

142 
	$li°Ty≥Dñëe
(
li°Ty≥Iãøt‹
 *
ôî
, 
li°Ty≥E¡ry
 *
íåy
) {

143 i‡(
íåy
->
li
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

144 
	`quickli°DñE¡ry
(
ôî
->ôî, &
íåy
->entry);

146 
	`£rvîP™ic
("UnknownÜistÉncoding");

148 
	}
}

151 
	$li°Ty≥C⁄vît
(
robj
 *
subje˘
, 
íc
) {

152 
	`£rvîAs£πWôhInfo
(
NULL
,
subje˘
,subje˘->
ty≥
==
OBJ_LIST
);

153 
	`£rvîAs£πWôhInfo
(
NULL
,
subje˘
,subje˘->
ícodög
==
OBJ_ENCODING_ZIPLIST
);

155 i‡(
íc
 =
OBJ_ENCODING_QUICKLIST
) {

156 
size_t
 
zÀn
 = 
£rvî
.
li°_max_zùli°_size
;

157 
dïth
 = 
£rvî
.
li°_com¥ess_dïth
;

158 
subje˘
->
±r
 = 
	`quickli°Cª©eFromZùli°
(
zÀn
, 
dïth
, subject->ptr);

159 
subje˘
->
ícodög
 = 
OBJ_ENCODING_QUICKLIST
;

161 
	`£rvîP™ic
("UnsupportedÜist conversion");

163 
	}
}

169 
	$pushGíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

170 
j
, 
waôög
 = 0, 
pushed
 = 0;

171 
robj
 *
lobj
;

172 
expúed
 = 0;

174 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

175 
	`lockDbWrôe
(
c
->
db
);

176 
lobj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

177 i‡(
lobj
 &&Üobj->
ty≥
 !
OBJ_LIST
) {

178 
	`u∆ockDb
(
c
->
db
);

179 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

180 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

184 
j
 = 2; j < 
c
->
¨gc
; j++) {

185 
c
->
¨gv
[
j
] = 
	`åyObje˘Encodög
(c->argv[j]);

186 i‡(!
lobj
) {

187 
lobj
 = 
	`¸óãQuickli°Obje˘
();

188 
	`quickli°SëO±i⁄s
(
lobj
->
±r
, 
£rvî
.
li°_max_zùli°_size
,

189 
£rvî
.
li°_com¥ess_dïth
);

190 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
lobj
);

192 
	`li°Ty≥Push
(
lobj
,
c
->
¨gv
[
j
],
whîe
);

193 
pushed
++;

195 
	`addRïlyL⁄gL⁄g
(
c
, 
waôög
 + (
lobj
 ? 
	`li°Ty≥Lígth
(lobj) : 0));

196 i‡(
pushed
) {

197 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpush" : "rpush";

199 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

200 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

202 
c
->
vñ
->
dúty
 +
pushed
;

204 
	`u∆ockDb
(
c
->
db
);

205 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

206 
	}
}

208 
	$ÕushComm™d
(
˛õ¡
 *
c
) {

209 
	`pushGíîicComm™d
(
c
,
LIST_HEAD
);

210 
	}
}

212 
	$ΩushComm™d
(
˛õ¡
 *
c
) {

213 
	`pushGíîicComm™d
(
c
,
LIST_TAIL
);

214 
	}
}

216 
	$pushxGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
ªfvÆ
,Ñobj *
vÆ
, 
whîe
) {

217 
robj
 *
subje˘
;

218 
li°Ty≥Iãøt‹
 *
ôî
;

219 
li°Ty≥E¡ry
 
íåy
;

220 
ö£πed
 = 0;

222 i‡((
subje˘
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,
NULL
)) == NULL ||

223 
	`checkTy≥
(
c
,
subje˘
,
OBJ_LIST
)) ;

225 i‡(
ªfvÆ
 !
NULL
) {

227 
ôî
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,0,
LIST_TAIL
);

228 
	`li°Ty≥Next
(
ôî
,&
íåy
)) {

229 i‡(
	`li°Ty≥EquÆ
(&
íåy
,
ªfvÆ
)) {

230 
	`li°Ty≥In£π
(&
íåy
,
vÆ
,
whîe
);

231 
ö£πed
 = 1;

235 
	`li°Ty≥Rñó£Iãøt‹
(
ôî
);

237 i‡(
ö£πed
) {

238 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

239 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"linsert",

240 
c
->
¨gv
[1],c->
db
->
id
);

241 
£rvî
.
dúty
++;

244 
	`addRïly
(
c
,
sh¨ed
.
˙eg⁄e
);

248 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpush" : "rpush";

250 
	`li°Ty≥Push
(
subje˘
,
vÆ
,
whîe
);

251 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

252 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

253 
£rvî
.
dúty
++;

256 
	`addRïlyL⁄gL⁄g
(
c
,
	`li°Ty≥Lígth
(
subje˘
));

257 
	}
}

259 
	$ÕushxComm™d
(
˛õ¡
 *
c
) {

260 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

261 
	`pushxGíîicComm™d
(
c
,
NULL
,c->
¨gv
[2],
LIST_HEAD
);

262 
	}
}

264 
	$ΩushxComm™d
(
˛õ¡
 *
c
) {

265 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

266 
	`pushxGíîicComm™d
(
c
,
NULL
,c->
¨gv
[2],
LIST_TAIL
);

267 
	}
}

269 
	$lö£πComm™d
(
˛õ¡
 *
c
) {

270 
c
->
¨gv
[4] = 
	`åyObje˘Encodög
(c->argv[4]);

271 i‡(
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"after") == 0) {

272 
	`pushxGíîicComm™d
(
c
,c->
¨gv
[3],c->¨gv[4],
LIST_TAIL
);

273 } i‡(
	`°rˇ£cmp
(
c
->
¨gv
[2]->
±r
,"before") == 0) {

274 
	`pushxGíîicComm™d
(
c
,c->
¨gv
[3],c->¨gv[4],
LIST_HEAD
);

276 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

278 
	}
}

280 
	$ŒíComm™d
(
˛õ¡
 *
c
) {

281 
robj
 *
o
;

283 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

284 
	`lockDbRód
(
c
->
db
);

285 
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
);

286 i‡(
o
 =
NULL
) {

287 
	`u∆ockDb
(
c
->
db
);

288 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

290 } if(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

291 
	`u∆ockDb
(
c
->
db
);

292 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

296 
	`addRïlyL⁄gL⁄g
(
c
,
	`li°Ty≥Lígth
(
o
));

297 
	`u∆ockDb
(
c
->
db
);

298 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

299 
	}
}

301 
	$lödexComm™d
(
˛õ¡
 *
c
) {

302 
robj
 *
o
;

303 
ödex
;

304 
robj
 *
vÆue
 = 
NULL
;

306 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ödex
, 
NULL
Ë!
VR_OK
))

309 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

310 
	`lockDbRód
(
c
->
db
);

311 
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
);

312 i‡(
o
 =
NULL
) {

313 
	`u∆ockDb
(
c
->
db
);

314 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

316 } if(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

317 
	`u∆ockDb
(
c
->
db
);

318 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

321 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

322 
quickli°E¡ry
 
íåy
;

323 i‡(
	`quickli°Index
(
o
->
±r
, 
ödex
, &
íåy
)) {

324 i‡(
íåy
.
vÆue
) {

325 
vÆue
 = 
	`¸óãSåögObje˘
((*)
íåy
.vÆue,íåy.
sz
);

327 
vÆue
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
íåy
.
l⁄gvÆ
);

329 
	`addRïlyBulk
(
c
,
vÆue
);

330 
	`‰ìObje˘
(
vÆue
);

332 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

335 
	`£rvîP™ic
("UnknownÜistÉncoding");

337 
	`u∆ockDb
(
c
->
db
);

338 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

339 
	}
}

341 
	$l£tComm™d
(
˛õ¡
 *
c
) {

342 
robj
 *
o
;

343 
ödex
;

344 
robj
 *
vÆue
 = 
c
->
¨gv
[3];

345 
expúed
 = 0;

347 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ödex
, 
NULL
Ë!
VR_OK
))

350 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

351 
	`lockDbWrôe
(
c
->
db
);

352 
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nokeyîr
,&
expúed
);

353 i‡(
o
 =
NULL
 || 
	`checkTy≥
(
c
,o,
OBJ_LIST
)) {

354 
	`u∆ockDb
(
c
->
db
);

355 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

358 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

359 
quickli°
 *
ql
 = 
o
->
±r
;

360 
ª∂a˚d
 = 
	`quickli°Rïœ˚AtIndex
(
ql
, 
ödex
,

361 
vÆue
->
±r
, 
	`sd¶í
(value->ptr));

362 i‡(!
ª∂a˚d
) {

363 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

365 
	`addRïly
(
c
,
sh¨ed
.
ok
);

366 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

367 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"l£t",
c
->
¨gv
[1],c->
db
->
id
);

368 
c
->
vñ
->
dúty
++;

371 
	`£rvîP™ic
("UnknownÜistÉncoding");

374 
	`u∆ockDb
(
c
->
db
);

375 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

376 
	}
}

378 
	$p›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

379 
robj
 *
o
, *
vÆue
;

380 
expúed
 = 0;

382 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

383 
	`lockDbWrôe
(
c
->
db
);

384 
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,&
expúed
);

385 i‡(
o
 =
NULL
 || 
	`checkTy≥
(
c
,o,
OBJ_LIST
)) {

386 
	`u∆ockDb
(
c
->
db
);

387 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

391 
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

392 i‡(
vÆue
 =
NULL
) {

393 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

395 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpop" : "rpop";

397 
	`addRïlyBulk
(
c
,
vÆue
);

398 
	`‰ìObje˘
(
vÆue
);

399 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,
c
->
¨gv
[1],c->
db
->
id
);

400 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

401 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

402 
c
->
¨gv
[1],c->
db
->
id
);

403 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

405 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

406 
c
->
vñ
->
dúty
++;

408 
	`u∆ockDb
(
c
->
db
);

409 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

410 
	}
}

412 
	$Õ›Comm™d
(
˛õ¡
 *
c
) {

413 
	`p›GíîicComm™d
(
c
,
LIST_HEAD
);

414 
	}
}

416 
	$Ω›Comm™d
(
˛õ¡
 *
c
) {

417 
	`p›GíîicComm™d
(
c
,
LIST_TAIL
);

418 
	}
}

420 
	$Ã™geComm™d
(
˛õ¡
 *
c
) {

421 
robj
 *
o
;

422 
°¨t
, 
íd
, 
Œí
, 
øngñí
;

424 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

425 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

427 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

428 
	`lockDbRód
(
c
->
db
);

429 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

430 
	`u∆ockDb
(
c
->
db
);

431 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

433 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

434 
	`u∆ockDb
(
c
->
db
);

435 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

439 
Œí
 = 
	`li°Ty≥Lígth
(
o
);

442 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

443 i‡(
íd
 < 0Ëíd = 
Œí
+end;

444 i‡(
°¨t
 < 0) start = 0;

448 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

449 
	`u∆ockDb
(
c
->
db
);

450 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

451 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

454 i‡(
íd
 >
Œí
)Énd =Ülen-1;

455 
øngñí
 = (
íd
-
°¨t
)+1;

458 
	`addRïlyMu…iBulkLí
(
c
,
øngñí
);

459 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

460 
li°Ty≥Iãøt‹
 *
ôî
 = 
	`li°Ty≥InôIãøt‹
(
o
, 
°¨t
, 
LIST_TAIL
);

462 
øngñí
--) {

463 
li°Ty≥E¡ry
 
íåy
;

464 
	`li°Ty≥Next
(
ôî
, &
íåy
);

465 
quickli°E¡ry
 *
qe
 = &
íåy
.entry;

466 i‡(
qe
->
vÆue
) {

467 
	`addRïlyBulkCBuf„r
(
c
,
qe
->
vÆue
,qe->
sz
);

469 
	`addRïlyBulkL⁄gL⁄g
(
c
,
qe
->
l⁄gvÆ
);

472 
	`li°Ty≥Rñó£Iãøt‹
(
ôî
);

474 
	`£rvîP™ic
("ListÉncoding isÇot QUICKLIST!");

477 
	`u∆ockDb
(
c
->
db
);

478 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

479 
	}
}

481 
	$…rimComm™d
(
˛õ¡
 *
c
) {

482 
robj
 *
o
;

483 
°¨t
, 
íd
, 
Œí
, 
…rim
, 
πrim
;

484 
expúed
 = 0;

486 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

487 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

489 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

490 
	`lockDbWrôe
(
c
->
db
);

491 i‡((
o
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
ok
,&
expúed
)Ë=
NULL
 ||

492 
	`checkTy≥
(
c
,
o
,
OBJ_LIST
)) {

493 
	`u∆ockDb
(
c
->
db
);

494 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

497 
Œí
 = 
	`li°Ty≥Lígth
(
o
);

500 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

501 i‡(
íd
 < 0Ëíd = 
Œí
+end;

502 i‡(
°¨t
 < 0) start = 0;

506 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

508 
…rim
 = 
Œí
;

509 
πrim
 = 0;

511 i‡(
íd
 >
Œí
)Énd =Ülen-1;

512 
…rim
 = 
°¨t
;

513 
πrim
 = 
Œí
-
íd
-1;

517 i‡(
o
->
ícodög
 =
OBJ_ENCODING_QUICKLIST
) {

518 
	`quickli°DñR™ge
(
o
->
±r
,0,
…rim
);

519 
	`quickli°DñR™ge
(
o
->
±r
,-
πrim
,rtrim);

521 
	`£rvîP™ic
("UnknownÜistÉncoding");

524 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"…rim",
c
->
¨gv
[1],c->
db
->
id
);

525 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

526 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

527 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

529 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

530 
c
->
vñ
->
dúty
++;

531 
	`addRïly
(
c
,
sh¨ed
.
ok
);

532 
	`u∆ockDb
(
c
->
db
);

533 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

534 
	}
}

536 
	$ÃemComm™d
(
˛õ¡
 *
c
) {

537 
robj
 *
subje˘
, *
obj
;

538 
obj
 = 
c
->
¨gv
[3];

539 
t‹emove
;

540 
ªmoved
 = 0;

541 
expúed
 = 0;

543 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
t‹emove
, 
NULL
Ë!
VR_OK
))

546 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

547 
	`lockDbWrôe
(
c
->
db
);

548 
subje˘
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
);

549 i‡(
subje˘
 =
NULL
 || 
	`checkTy≥
(
c
,subje˘,
OBJ_LIST
)) {

550 
	`u∆ockDb
(
c
->
db
);

551 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

554 
li°Ty≥Iãøt‹
 *
li
;

555 i‡(
t‹emove
 < 0) {

556 
t‹emove
 = -toremove;

557 
li
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,-1,
LIST_HEAD
);

559 
li
 = 
	`li°Ty≥InôIãøt‹
(
subje˘
,0,
LIST_TAIL
);

562 
li°Ty≥E¡ry
 
íåy
;

563 
	`li°Ty≥Next
(
li
,&
íåy
)) {

564 i‡(
	`li°Ty≥EquÆ
(&
íåy
,
obj
)) {

565 
	`li°Ty≥Dñëe
(
li
, &
íåy
);

566 
c
->
vñ
->
dúty
++;

567 
ªmoved
++;

568 i‡(
t‹emove
 && 
ªmoved
 ==Åoremove) ;

571 
	`li°Ty≥Rñó£Iãøt‹
(
li
);

573 i‡(
ªmoved
) {

574 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

575 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"Ãem",
c
->
¨gv
[1],c->
db
->
id
);

578 i‡(
	`li°Ty≥Lígth
(
subje˘
) == 0) {

579 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

580 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

583 
	`addRïlyL⁄gL⁄g
(
c
,
ªmoved
);

584 
	`u∆ockDb
(
c
->
db
);

585 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

586 
	}
}

604 
	$Ω›ÕushH™dÀPush
(
˛õ¡
 *
c
, 
robj
 *
d°key
,Ñobj *
d°obj
,Ñobj *
vÆue
) {

606 i‡(!
d°obj
) {

607 
d°obj
 = 
	`¸óãQuickli°Obje˘
();

608 
	`quickli°SëO±i⁄s
(
d°obj
->
±r
, 
£rvî
.
li°_max_zùli°_size
,

609 
£rvî
.
li°_com¥ess_dïth
);

610 
	`dbAdd
(
c
->
db
,
d°key
,
d°obj
);

612 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

613 
	`li°Ty≥Push
(
d°obj
,
vÆue
,
LIST_HEAD
);

614 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"Õush",
d°key
,
c
->
db
->
id
);

616 
	`addRïlyBulk
(
c
,
vÆue
);

617 
	}
}

619 
	$Ω›ÕushComm™d
(
˛õ¡
 *
c
) {

620 
robj
 *
sobj
, *
vÆue
;

621 i‡((
sobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,
NULL
)) == NULL ||

622 
	`checkTy≥
(
c
,
sobj
,
OBJ_LIST
)) ;

624 i‡(
	`li°Ty≥Lígth
(
sobj
) == 0) {

627 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

629 
robj
 *
dobj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

630 
robj
 *
touchedkey
 = 
c
->
¨gv
[1];

632 i‡(
dobj
 && 
	`checkTy≥
(
c
,dobj,
OBJ_LIST
)) ;

633 
vÆue
 = 
	`li°Ty≥P›
(
sobj
,
LIST_TAIL
);

637 
	`ö¸RefCou¡
(
touchedkey
);

638 
	`Ω›ÕushH™dÀPush
(
c
,c->
¨gv
[2],
dobj
,
vÆue
);

641 
	`de¸RefCou¡
(
vÆue
);

644 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,"Ω›",
touchedkey
,
c
->
db
->
id
);

645 i‡(
	`li°Ty≥Lígth
(
sobj
) == 0) {

646 
	`dbDñëe
(
c
->
db
,
touchedkey
);

647 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

648 
touchedkey
,
c
->
db
->
id
);

650 
	`sig«lModifõdKey
(
c
->
db
,
touchedkey
);

651 
	`de¸RefCou¡
(
touchedkey
);

652 
£rvî
.
dúty
++;

654 
	}
}

679 
	$blockF‹Keys
(
˛õ¡
 *
c
, 
robj
 **
keys
, 
numkeys
, 
m°ime_t
 
timeout
,Ñobj *
èrgë
) {

680 
di˘E¡ry
 *
de
;

681 
dli°
 *
l
;

682 
j
;

684 
c
->
bp›
.
timeout
 =Åimeout;

685 
c
->
bp›
.
èrgë
 =Åarget;

687 i‡(
èrgë
 !
NULL
Ë
	`ö¸RefCou¡
(target);

689 
j
 = 0; j < 
numkeys
; j++) {

691 i‡(
	`di˘Add
(
c
->
bp›
.
keys
,keys[
j
],
NULL
Ë!
DICT_OK
) ;

692 
	`ö¸RefCou¡
(
keys
[
j
]);

695 
de
 = 
	`di˘Föd
(
c
->
db
->
blockög_keys
,
keys
[
j
]);

696 i‡(
de
 =
NULL
) {

697 
ªtvÆ
;

700 
l
 = 
	`dli°Cª©e
();

701 
ªtvÆ
 = 
	`di˘Add
(
c
->
db
->
blockög_keys
,
keys
[
j
],
l
);

702 
	`ö¸RefCou¡
(
keys
[
j
]);

703 
	`£rvîAs£πWôhInfo
(
c
,
keys
[
j
],
ªtvÆ
 =
DICT_OK
);

705 
l
 = 
	`di˘GëVÆ
(
de
);

707 
	`dli°AddNodeTaû
(
l
,
c
);

709 
	`blockClõ¡
(
c
,
BLOCKED_LIST
);

710 
	}
}

714 
	$unblockClõ¡WaôögD©a
(
˛õ¡
 *
c
) {

715 
di˘E¡ry
 *
de
;

716 
di˘Iãøt‹
 *
di
;

717 
dli°
 *
l
;

719 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
	`di˘Size
(c->
bp›
.
keys
) != 0);

720 
di
 = 
	`di˘GëIãøt‹
(
c
->
bp›
.
keys
);

722 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

723 
robj
 *
key
 = 
	`di˘GëKey
(
de
);

726 
l
 = 
	`di˘FëchVÆue
(
c
->
db
->
blockög_keys
,
key
);

727 
	`£rvîAs£πWôhInfo
(
c
,
key
,
l
 !
NULL
);

728 
	`dli°DñNode
(
l
,
	`dli°SórchKey
÷,
c
));

730 i‡(
	`dli°Lígth
(
l
) == 0)

731 
	`di˘Dñëe
(
c
->
db
->
blockög_keys
,
key
);

733 
	`di˘Rñó£Iãøt‹
(
di
);

736 
	`di˘Em±y
(
c
->
bp›
.
keys
,
NULL
);

737 i‡(
c
->
bp›
.
èrgë
) {

738 
	`de¸RefCou¡
(
c
->
bp›
.
èrgë
);

739 
c
->
bp›
.
èrgë
 = 
NULL
;

741 
	}
}

750 
	$sig«lLi°AsRódy
(
ªdisDb
 *
db
, 
robj
 *
key
) {

751 
ªt
;

752 
ªadyLi°
 *
æ
;

755 i‡(
	`di˘Föd
(
db
->
blockög_keys
,
key
Ë=
NULL
) ;

758 i‡(
	`di˘Föd
(
db
->
ªady_keys
,
key
Ë!
NULL
) ;

761 
æ
 = 
	`dÆloc
((*rl));

762 
æ
->
key
 = key;

763 
æ
->
db
 = db;

764 
	`ö¸RefCou¡
(
key
);

765 
	`dli°AddNodeTaû
(
£rvî
.
ªady_keys
,
æ
);

770 
	`ö¸RefCou¡
(
key
);

771 
ªt
 = 
	`di˘Add
(
db
->
ªady_keys
,
key
,
NULL
);

772 
	`ASSERT
(
ªt
 =
DICT_OK
);

773 
	}
}

794 
	$£rveClõ¡BlockedOnLi°
(
˛õ¡
 *
ª˚ivî
, 
robj
 *
key
,Ñobj *
d°key
, 
ªdisDb
 *
db
,Ñobj *
vÆue
, 
whîe
)

796 
robj
 *
¨gv
[3];

798 i‡(
d°key
 =
NULL
) {

800 
¨gv
[0] = (
whîe
 =
LIST_HEAD
Ë? 
sh¨ed
.
Õ›
 :

801 
sh¨ed
.
Ω›
;

802 
¨gv
[1] = 
key
;

803 
	`¥›ag©e
((
whîe
 =
LIST_HEAD
) ?

804 
£rvî
.
Õ›Comm™d
 : sîvî.
Ω›Comm™d
,

805 
db
->
id
,
¨gv
,2,
PROPAGATE_AOF
|
PROPAGATE_REPL
);

808 
	`addRïlyMu…iBulkLí
(
ª˚ivî
,2);

809 
	`addRïlyBulk
(
ª˚ivî
,
key
);

810 
	`addRïlyBulk
(
ª˚ivî
,
vÆue
);

813 
robj
 *
d°obj
 =

814 
	`lookupKeyWrôe
(
ª˚ivî
->
db
,
d°key
,
NULL
);

815 i‡(!(
d°obj
 &&

816 
	`checkTy≥
(
ª˚ivî
,
d°obj
,
OBJ_LIST
)))

819 
¨gv
[0] = 
sh¨ed
.
Ω›
;

820 
¨gv
[1] = 
key
;

821 
	`¥›ag©e
(
£rvî
.
Ω›Comm™d
,

822 
db
->
id
,
¨gv
,2,

823 
PROPAGATE_AOF
|

824 
PROPAGATE_REPL
);

825 
	`Ω›ÕushH™dÀPush
(
ª˚ivî
,
d°key
,
d°obj
,

826 
vÆue
);

828 
¨gv
[0] = 
sh¨ed
.
Õush
;

829 
¨gv
[1] = 
d°key
;

830 
¨gv
[2] = 
vÆue
;

831 
	`¥›ag©e
(
£rvî
.
ÕushComm™d
,

832 
db
->
id
,
¨gv
,3,

833 
PROPAGATE_AOF
|

834 
PROPAGATE_REPL
);

838  
VR_ERROR
;

841  
VR_OK
;

842 
	}
}

854 
	$h™dÀClõ¡sBlockedOnLi°s
() {

855 
	`dli°Lígth
(
£rvî
.
ªady_keys
) != 0) {

856 
dli°
 *
l
;

862 
l
 = 
£rvî
.
ªady_keys
;

863 
£rvî
.
ªady_keys
 = 
	`dli°Cª©e
();

865 
	`dli°Lígth
(
l
) != 0) {

866 
dli°Node
 *
 
 = 
	`dli°Fú°
(
l
);

867 
ªadyLi°
 *
æ
 = 
 
->
vÆue
;

871 
	`di˘Dñëe
(
æ
->
db
->
ªady_keys
,æ->
key
);

875 
robj
 *
o
 = 
	`lookupKeyWrôe
(
æ
->
db
,æ->
key
,
NULL
);

876 i‡(
o
 !
NULL
 && o->
ty≥
 =
OBJ_LIST
) {

877 
di˘E¡ry
 *
de
;

881 
de
 = 
	`di˘Föd
(
æ
->
db
->
blockög_keys
,æ->
key
);

882 i‡(
de
) {

883 
dli°
 *
˛õ¡s
 = 
	`di˘GëVÆ
(
de
);

884 
num˛õ¡s
 = 
	`dli°Lígth
(
˛õ¡s
);

886 
num˛õ¡s
--) {

887 
dli°Node
 *
˛õ¡node
 = 
	`dli°Fú°
(
˛õ¡s
);

888 
˛õ¡
 *
ª˚ivî
 = 
˛õ¡node
->
vÆue
;

889 
robj
 *
d°key
 = 
ª˚ivî
->
bp›
.
èrgë
;

890 
whîe
 = (
ª˚ivî
->
œ°cmd
 &&

891 
ª˚ivî
->
œ°cmd
->
¥oc
 =
bÕ›Comm™d
) ?

892 
LIST_HEAD
 : 
LIST_TAIL
;

893 
robj
 *
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

895 i‡(
vÆue
) {

899 i‡(
d°key
Ë
	`ö¸RefCou¡
(dstkey);

900 
	`unblockClõ¡
(
ª˚ivî
);

902 i‡(
	`£rveClõ¡BlockedOnLi°
(
ª˚ivî
,

903 
æ
->
key
,
d°key
,æ->
db
,
vÆue
,

904 
whîe
Ë=
VR_ERROR
)

908 
	`li°Ty≥Push
(
o
,
vÆue
,
whîe
);

911 i‡(
d°key
Ë
	`de¸RefCou¡
(dstkey);

912 
	`de¸RefCou¡
(
vÆue
);

919 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

920 
	`dbDñëe
(
æ
->
db
,æ->
key
);

927 
	`de¸RefCou¡
(
æ
->
key
);

928 
	`d‰ì
(
æ
);

929 
	`dli°DñNode
(
l
,
 
);

931 
	`dli°Rñó£
(
l
);

933 
	}
}

936 
	$blockögP›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
) {

937 
robj
 *
o
;

938 
m°ime_t
 
timeout
;

939 
j
;

941 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[c->
¨gc
-1],&
timeout
,
UNIT_SECONDS
)

942 !
VR_OK
) ;

944 
j
 = 1; j < 
c
->
¨gc
-1; j++) {

945 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
);

946 i‡(
o
 !
NULL
) {

947 i‡(
o
->
ty≥
 !
OBJ_LIST
) {

948 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

951 i‡(
	`li°Ty≥Lígth
(
o
) != 0) {

953 *
evít
 = (
whîe
 =
LIST_HEAD
) ? "lpop" : "rpop";

954 
robj
 *
vÆue
 = 
	`li°Ty≥P›
(
o
,
whîe
);

955 
	`ASSERT
(
vÆue
 !
NULL
);

957 
	`addRïlyMu…iBulkLí
(
c
,2);

958 
	`addRïlyBulk
(
c
,c->
¨gv
[
j
]);

959 
	`addRïlyBulk
(
c
,
vÆue
);

960 
	`de¸RefCou¡
(
vÆue
);

961 
	`nŸifyKey•a˚Evít
(
NOTIFY_LIST
,
evít
,

962 
c
->
¨gv
[
j
],c->
db
->
id
);

963 i‡(
	`li°Ty≥Lígth
(
o
) == 0) {

964 
	`dbDñëe
(
c
->
db
,c->
¨gv
[
j
]);

965 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

966 
c
->
¨gv
[
j
],c->
db
->
id
);

968 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[
j
]);

969 
£rvî
.
dúty
++;

972 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,

973 (
whîe
 =
LIST_HEAD
Ë? 
sh¨ed
.
Õ›
 : sh¨ed.
Ω›
,

974 
c
->
¨gv
[
j
]);

983 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

984 
	`addRïly
(
c
,
sh¨ed
.
nuŒmu…ibulk
);

989 
	`blockF‹Keys
(
c
, c->
¨gv
 + 1, c->
¨gc
 - 2, 
timeout
, 
NULL
);

990 
	}
}

992 
	$bÕ›Comm™d
(
˛õ¡
 *
c
) {

993 
	`blockögP›GíîicComm™d
(
c
,
LIST_HEAD
);

994 
	}
}

996 
	$bΩ›Comm™d
(
˛õ¡
 *
c
) {

997 
	`blockögP›GíîicComm™d
(
c
,
LIST_TAIL
);

998 
	}
}

1000 
	$bΩ›ÕushComm™d
(
˛õ¡
 *
c
) {

1001 
m°ime_t
 
timeout
;

1003 i‡(
	`gëTimeoutFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
timeout
,
UNIT_SECONDS
)

1004 !
VR_OK
) ;

1006 
robj
 *
key
 = 
	`lookupKeyWrôe
(
c
->
db
, c->
¨gv
[1],
NULL
);

1008 i‡(
key
 =
NULL
) {

1009 i‡(
c
->
Êags
 & 
CLIENT_MULTI
) {

1012 
	`addRïly
(
c
, 
sh¨ed
.
nuŒbulk
);

1015 
	`blockF‹Keys
(
c
, c->
¨gv
 + 1, 1, 
timeout
, c->argv[2]);

1018 i‡(
key
->
ty≥
 !
OBJ_LIST
) {

1019 
	`addRïly
(
c
, 
sh¨ed
.
wr⁄gty≥îr
);

1023 
	`£rvîAs£πWôhInfo
(
c
,
key
,
	`li°Ty≥Lígth
(key) > 0);

1024 
	`Ω›ÕushComm™d
(
c
);

1027 
	}
}

	@src/vr_t_list.h

1 #i‚de‡
_VR_T_LIST_H_


2 
	#_VR_T_LIST_H_


	)

4 
li°Ty≥Push
(
robj
 *
subje˘
,Ñobj *
vÆue
, 
whîe
);

5 *
li°P›Savî
(*
d©a
, 
sz
);

6 
robj
 *
li°Ty≥P›
‘obj *
subje˘
, 
whîe
);

7 
li°Ty≥Lígth
(
robj
 *
subje˘
);

8 
li°Ty≥Iãøt‹
 *
li°Ty≥InôIãøt‹
(
robj
 *
subje˘
, 
ödex
, 
dúe˘i⁄
);

9 
li°Ty≥Rñó£Iãøt‹
(
li°Ty≥Iãøt‹
 *
li
);

10 
li°Ty≥Next
(
li°Ty≥Iãøt‹
 *
li
, 
li°Ty≥E¡ry
 *
íåy
);

11 
robj
 *
li°Ty≥Gë
(
li°Ty≥E¡ry
 *
íåy
);

12 
li°Ty≥In£π
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
vÆue
, 
whîe
);

13 
li°Ty≥EquÆ
(
li°Ty≥E¡ry
 *
íåy
, 
robj
 *
o
);

14 
li°Ty≥Dñëe
(
li°Ty≥Iãøt‹
 *
ôî
, 
li°Ty≥E¡ry
 *
íåy
);

15 
li°Ty≥C⁄vît
(
robj
 *
subje˘
, 
íc
);

16 
pushGíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

17 
ÕushComm™d
(
˛õ¡
 *
c
);

18 
ΩushComm™d
(
˛õ¡
 *
c
);

19 
pushxGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
ªfvÆ
,Ñobj *
vÆ
, 
whîe
);

20 
ÕushxComm™d
(
˛õ¡
 *
c
);

21 
ΩushxComm™d
(
˛õ¡
 *
c
);

22 
lö£πComm™d
(
˛õ¡
 *
c
);

23 
ŒíComm™d
(
˛õ¡
 *
c
);

24 
lödexComm™d
(
˛õ¡
 *
c
);

25 
l£tComm™d
(
˛õ¡
 *
c
);

26 
p›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

27 
Õ›Comm™d
(
˛õ¡
 *
c
);

28 
Ω›Comm™d
(
˛õ¡
 *
c
);

29 
Ã™geComm™d
(
˛õ¡
 *
c
);

30 
…rimComm™d
(
˛õ¡
 *
c
);

31 
ÃemComm™d
(
˛õ¡
 *
c
);

32 
Ω›ÕushH™dÀPush
(
˛õ¡
 *
c
, 
robj
 *
d°key
,Ñobj *
d°obj
,Ñobj *
vÆue
);

33 
Ω›ÕushComm™d
(
˛õ¡
 *
c
);

34 
blockF‹Keys
(
˛õ¡
 *
c
, 
robj
 **
keys
, 
numkeys
, 
m°ime_t
 
timeout
,Ñobj *
èrgë
);

35 
unblockClõ¡WaôögD©a
(
˛õ¡
 *
c
);

36 
sig«lLi°AsRódy
(
ªdisDb
 *
db
, 
robj
 *
key
);

37 
£rveClõ¡BlockedOnLi°
(
˛õ¡
 *
ª˚ivî
, 
robj
 *
key
,Ñobj *
d°key
, 
ªdisDb
 *
db
,Ñobj *
vÆue
, 
whîe
);

38 
h™dÀClõ¡sBlockedOnLi°s
();

39 
blockögP›GíîicComm™d
(
˛õ¡
 *
c
, 
whîe
);

40 
bÕ›Comm™d
(
˛õ¡
 *
c
);

41 
bΩ›Comm™d
(
˛õ¡
 *
c
);

42 
bΩ›ÕushComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_set.c

1 
	~<vr_c‹e.h
>

7 
suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,

8 
robj
 *
d°key
, 
›
);

13 
robj
 *
	$£tTy≥Cª©e
(
robj
 *
vÆue
) {

14 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,
NULL
Ë=
VR_OK
)

15  
	`¸óãI¡£tObje˘
();

16  
	`¸óãSëObje˘
();

17 
	}
}

24 
	$£tTy≥Add
(
robj
 *
subje˘
,Ñobj *
vÆue
) {

25 
ŒvÆ
;

26 
robj
 *
obj
;

27 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

28 
obj
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

29 i‡(
	`di˘Add
(
subje˘
->
±r
,
obj
,
NULL
Ë=
DICT_OK
) {

32 
	`‰ìObje˘
(
obj
);

34 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

35 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

36 
uöt8_t
 
suc˚ss
 = 0;

37 
subje˘
->
±r
 = 
	`öt£tAdd
(subje˘->±r,
ŒvÆ
,&
suc˚ss
);

38 i‡(
suc˚ss
) {

41 i‡(
	`öt£tLí
(
subje˘
->
±r
Ë> 
£rvî
.
£t_max_öt£t_íåõs
)

42 
	`£tTy≥C⁄vît
(
subje˘
,
OBJ_ENCODING_HT
);

47 
	`£tTy≥C⁄vît
(
subje˘
,
OBJ_ENCODING_HT
);

48 
obj
 = 
	`dupSåögObje˘Unc⁄°™t
(
vÆue
);

51 
	`£rvîAs£πWôhInfo
(
NULL
,
obj
,

52 
	`di˘Add
(
subje˘
->
±r
,
obj
,
NULL
Ë=
DICT_OK
);

56 
	`£rvîP™ic
("Unknown setÉncoding");

59 
	}
}

61 
	$£tTy≥Remove
(
robj
 *
£tobj
,Ñobj *
vÆue
) {

62 
ŒvÆ
;

63 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

64 i‡(
	`di˘Dñëe
(
£tobj
->
±r
,
vÆue
Ë=
DICT_OK
) {

65 i‡(
	`htNìdsResize
(
£tobj
->
±r
)Ë
	`di˘Resize
(setobj->ptr);

68 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

69 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

70 
suc˚ss
;

71 
£tobj
->
±r
 = 
	`öt£tRemove
(£tobj->±r,
ŒvÆ
,&
suc˚ss
);

72 i‡(
suc˚ss
)  1;

75 
	`£rvîP™ic
("Unknown setÉncoding");

78 
	}
}

80 
	$£tTy≥IsMembî
(
robj
 *
subje˘
,Ñobj *
vÆue
) {

81 
ŒvÆ
;

82 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

83  
	`di˘Föd
((
di˘
*)
subje˘
->
±r
,
vÆue
Ë!
NULL
;

84 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

85 i‡(
	`isObje˘Rïª£¡abÀAsL⁄gL⁄g
(
vÆue
,&
ŒvÆ
Ë=
VR_OK
) {

86  
	`öt£tFöd
((
öt£t
*)
subje˘
->
±r
,
ŒvÆ
);

89 
	`£rvîP™ic
("Unknown setÉncoding");

92 
	}
}

94 
£tTy≥Iãøt‹
 *
	$£tTy≥InôIãøt‹
(
robj
 *
subje˘
) {

95 
£tTy≥Iãøt‹
 *
si
 = 
	`dÆloc
((setTypeIterator));

96 
si
->
subje˘
 = subject;

97 
si
->
ícodög
 = 
subje˘
->encoding;

98 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
) {

99 
si
->
di
 = 
	`di˘GëIãøt‹
(
subje˘
->
±r
);

100 } i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

101 
si
->
ii
 = 0;

103 
	`£rvîP™ic
("Unknown setÉncoding");

105  
si
;

106 
	}
}

108 
	$£tTy≥Rñó£Iãøt‹
(
£tTy≥Iãøt‹
 *
si
) {

109 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
)

110 
	`di˘Rñó£Iãøt‹
(
si
->
di
);

111 
	`d‰ì
(
si
);

112 
	}
}

129 
	$£tTy≥Next
(
£tTy≥Iãøt‹
 *
si
, 
robj
 **
objñe
, 
öt64_t
 *
Œñe
) {

130 i‡(
si
->
ícodög
 =
OBJ_ENCODING_HT
) {

131 
di˘E¡ry
 *
de
 = 
	`di˘Next
(
si
->
di
);

132 i‡(
de
 =
NULL
)  -1;

133 *
objñe
 = 
	`di˘GëKey
(
de
);

134 *
Œñe
 = -123456789;

135 } i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

136 i‡(!
	`öt£tGë
(
si
->
subje˘
->
±r
,si->
ii
++,
Œñe
))

138 *
objñe
 = 
NULL
;

140 
	`£rvîP™ic
("Wrong setÉncoding in setTypeNext");

142  
si
->
ícodög
;

143 
	}
}

153 
robj
 *
	$£tTy≥NextObje˘
(
£tTy≥Iãøt‹
 *
si
) {

154 
öt64_t
 
öãÀ
;

155 
robj
 *
objñe
;

156 
ícodög
;

158 
ícodög
 = 
	`£tTy≥Next
(
si
,&
objñe
,&
öãÀ
);

159 
ícodög
) {

160 -1:  
NULL
;

161 
OBJ_ENCODING_INTSET
:

162  
	`¸óãSåögObje˘FromL⁄gL⁄g
(
öãÀ
);

163 
OBJ_ENCODING_HT
:

164  
objñe
;

166 
	`£rvîP™ic
("UnsupportedÉncoding");

168  
NULL
;

169 
	}
}

188 
	$£tTy≥R™domEÀmít
(
robj
 *
£tobj
,Ñobj **
objñe
, 
öt64_t
 *
Œñe
) {

189 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

190 
di˘E¡ry
 *
de
 = 
	`di˘GëR™domKey
(
£tobj
->
±r
);

191 *
objñe
 = 
	`di˘GëKey
(
de
);

192 *
Œñe
 = -123456789;

193 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

194 *
Œñe
 = 
	`öt£tR™dom
(
£tobj
->
±r
);

195 *
objñe
 = 
NULL
;

197 
	`£rvîP™ic
("Unknown setÉncoding");

199  
£tobj
->
ícodög
;

200 
	}
}

202 
	$£tTy≥Size
(
robj
 *
subje˘
) {

203 i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_HT
) {

204  
	`di˘Size
((
di˘
*)
subje˘
->
±r
);

205 } i‡(
subje˘
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

206  
	`öt£tLí
((
öt£t
*)
subje˘
->
±r
);

208 
	`£rvîP™ic
("Unknown setÉncoding");

210 
	}
}

215 
	$£tTy≥C⁄vît
(
robj
 *
£tobj
, 
íc
) {

216 
£tTy≥Iãøt‹
 *
si
;

217 
	`£rvîAs£πWôhInfo
(
NULL
,
£tobj
,£tobj->
ty≥
 =
OBJ_SET
 &&

218 
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
);

220 i‡(
íc
 =
OBJ_ENCODING_HT
) {

221 
öt64_t
 
öãÀ
;

222 
di˘
 *
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

223 
robj
 *
ñemít
;

226 
	`di˘Ex∑nd
(
d
,
	`öt£tLí
(
£tobj
->
±r
));

229 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

230 
	`£tTy≥Next
(
si
,&
ñemít
,&
öãÀ
) != -1) {

231 
ñemít
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
öãÀ
);

232 
	`£rvîAs£πWôhInfo
(
NULL
,
ñemít
,

233 
	`di˘Add
(
d
,
ñemít
,
NULL
Ë=
DICT_OK
);

235 
	`£tTy≥Rñó£Iãøt‹
(
si
);

237 
£tobj
->
ícodög
 = 
OBJ_ENCODING_HT
;

238 
	`d‰ì
(
£tobj
->
±r
);

239 
£tobj
->
±r
 = 
d
;

241 
	`£rvîP™ic
("Unsupported set conversion");

243 
	}
}

245 
	$ßddComm™d
(
˛õ¡
 *
c
) {

246 
robj
 *
£t
;

247 
j
, 
added
 = 0;

248 
expúed
 = 0;

250 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

251 
	`lockDbWrôe
(
c
->
db
);

252 
£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

253 i‡(
£t
 =
NULL
) {

254 
£t
 = 
	`£tTy≥Cª©e
(
c
->
¨gv
[2]);

255 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
£t
);

257 i‡(
£t
->
ty≥
 !
OBJ_SET
) {

258 
	`u∆ockDb
(
c
->
db
);

259 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

260 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

265 
j
 = 2; j < 
c
->
¨gc
; j++) {

266 
c
->
¨gv
[
j
] = 
	`åyObje˘Encodög
(c->argv[j]);

267 i‡(
	`£tTy≥Add
(
£t
,
c
->
¨gv
[
j
])Ë
added
++;

269 i‡(
added
) {

270 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

271 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"ßdd",
c
->
¨gv
[1],c->
db
->
id
);

273 
c
->
vñ
->
dúty
 +
added
;

274 
	`addRïlyL⁄gL⁄g
(
c
,
added
);

275 
	`u∆ockDb
(
c
->
db
);

276 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

277 
	}
}

279 
	$§emComm™d
(
˛õ¡
 *
c
) {

280 
robj
 *
£t
;

281 
j
, 
dñëed
 = 0, 
keyªmoved
 = 0;

282 
expúed
 = 0;

284 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

285 
	`lockDbWrôe
(
c
->
db
);

286 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

287 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

288 
	`u∆ockDb
(
c
->
db
);

289 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

293 
j
 = 2; j < 
c
->
¨gc
; j++) {

294 i‡(
	`£tTy≥Remove
(
£t
,
c
->
¨gv
[
j
])) {

295 
dñëed
++;

296 i‡(
	`£tTy≥Size
(
£t
) == 0) {

297 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

298 
keyªmoved
 = 1;

303 i‡(
dñëed
) {

304 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

305 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"§em",
c
->
¨gv
[1],c->
db
->
id
);

306 i‡(
keyªmoved
)

307 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],

308 
c
->
db
->
id
);

309 
c
->
vñ
->
dúty
 +
dñëed
;

311 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

312 
	`u∆ockDb
(
c
->
db
);

313 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

314 
	}
}

316 
	$smoveComm™d
(
˛õ¡
 *
c
) {

317 
robj
 *
§c£t
, *
d°£t
, *
ñe
;

318 
§c£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],
NULL
);

319 
d°£t
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[2],
NULL
);

320 
ñe
 = 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

323 i‡(
§c£t
 =
NULL
) {

324 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

330 i‡(
	`checkTy≥
(
c
,
§c£t
,
OBJ_SET
) ||

331 (
d°£t
 && 
	`checkTy≥
(
c
,d°£t,
OBJ_SET
))) ;

334 i‡(
§c£t
 =
d°£t
) {

335 
	`addRïly
(
c
,
	`£tTy≥IsMembî
(
§c£t
,
ñe
Ë? 
sh¨ed
.
c⁄e
 : sh¨ed.
czîo
);

340 i‡(!
	`£tTy≥Remove
(
§c£t
,
ñe
)) {

341 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

344 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"§em",
c
->
¨gv
[1],c->
db
->
id
);

347 i‡(
	`£tTy≥Size
(
§c£t
) == 0) {

348 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

349 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

351 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

352 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[2]);

353 
£rvî
.
dúty
++;

356 i‡(!
d°£t
) {

357 
d°£t
 = 
	`£tTy≥Cª©e
(
ñe
);

358 
	`dbAdd
(
c
->
db
,c->
¨gv
[2],
d°£t
);

362 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)) {

363 
£rvî
.
dúty
++;

364 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"ßdd",
c
->
¨gv
[2],c->
db
->
id
);

366 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

367 
	}
}

369 
	$sismembîComm™d
(
˛õ¡
 *
c
) {

370 
robj
 *
£t
;

372 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

373 
	`lockDbRód
(
c
->
db
);

374 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

375 
	`u∆ockDb
(
c
->
db
);

376 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

378 } i‡(
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

379 
	`u∆ockDb
(
c
->
db
);

380 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

384 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

385 i‡(
	`£tTy≥IsMembî
(
£t
,
c
->
¨gv
[2]))

386 
	`addRïly
(
c
,
sh¨ed
.
c⁄e
);

388 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

390 
	`u∆ockDb
(
c
->
db
);

391 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

392 
	}
}

394 
	$sˇrdComm™d
(
˛õ¡
 *
c
) {

395 
robj
 *
o
;

397 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

398 
	`lockDbRód
(
c
->
db
);

399 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

400 
	`u∆ockDb
(
c
->
db
);

401 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

403 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_SET
)) {

404 
	`u∆ockDb
(
c
->
db
);

405 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

409 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
o
));

410 
	`u∆ockDb
(
c
->
db
);

411 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

412 
	}
}

414 
	$smembîsGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
£t
)

416 
£tTy≥Iãøt‹
 *
si
;

417 
robj
 *
ñeobj
;

418 
öt64_t
 
ötobj
;

419 
ícodög
;

421 
	`addRïlyMu…iBulkLí
(
c
, 
	`£tTy≥Size
(
£t
));

422 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

423 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñeobj
,&
ötobj
)) != -1) {

424 i‡(
ícodög
 =
OBJ_ENCODING_HT
) {

425 
	`addRïlyBulk
(
c
, 
ñeobj
);

426 } i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

427 
	`addRïlyBulkL⁄gL⁄g
(
c
, 
ötobj
);

430 
	`£tTy≥Rñó£Iãøt‹
(
si
);

431 
	}
}

439 
	#SPOP_MOVE_STRATEGY_MUL
 5

	)

441 
	$•›WôhCou¡Comm™d
(
˛õ¡
 *
c
) {

442 
l
;

443 
cou¡
, 
size
;

444 
robj
 *
£t
;

445 
expúed
 = 0;

448 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
l
,
NULL
Ë!
VR_OK
) ;

449 i‡(
l
 >= 0) {

450 
cou¡
 = (Ë
l
;

452 
	`addRïly
(
c
,
sh¨ed
.
outo‰™gìº
);

456 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

457 
	`lockDbWrôe
(
c
->
db
);

460 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
,&
expúed
))

461 =
NULL
 || 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

462 
	`u∆ockDb
(
c
->
db
);

463 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

469 i‡(
cou¡
 == 0) {

470 
	`u∆ockDb
(
c
->
db
);

471 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

472 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

476 
size
 = 
	`£tTy≥Size
(
£t
);

479 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"•›",
c
->
¨gv
[1],c->
db
->
id
);

480 
c
->
vñ
->
dúty
 +
cou¡
;

485 i‡(
cou¡
 >
size
) {

486 
robj
 *
aux
;

489 
	`smembîsGíîicComm™d
(
c
, 
£t
);

492 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

493 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

496 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
c
->
¨gv
[1]);

497 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,2,
sh¨ed
.
dñ
,
aux
);

498 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

499 
c
->
vñ
->
dúty
++;

500 
	`u∆ockDb
(
c
->
db
);

501 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

508 
robj
 *
¥›¨gv
[3];

509 
¥›¨gv
[0] = 
	`¸óãSåögObje˘
("SREM",4);

510 
¥›¨gv
[1] = 
c
->
¨gv
[1];

511 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

514 
robj
 *
objñe
;

515 
ícodög
;

516 
öt64_t
 
Œñe
;

517 
ªmaöög
 = 
size
-
cou¡
;

526 i‡(
ªmaöög
*
SPOP_MOVE_STRATEGY_MUL
 > 
cou¡
) {

527 
cou¡
--) {

528 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
objñe
,&
Œñe
);

529 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

530 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

532 
objñe
 = 
	`dupSåögObje˘Unc⁄°™t
(objele);

536 
	`addRïlyBulk
(
c
,
objñe
);

537 
	`£tTy≥Remove
(
£t
,
objñe
);

540 
¥›¨gv
[2] = 
objñe
;

541 
	`ÆsoPr›ag©e
(
£rvî
.
§emComm™d
,
c
->
db
->
id
,
¥›¨gv
,3,

542 
PROPAGATE_AOF
|
PROPAGATE_REPL
);

543 
	`‰ìObje˘
(
objñe
);

554 
robj
 *
√w£t
 = 
NULL
;

557 
ªmaöög
--) {

558 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
objñe
,&
Œñe
);

559 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

560 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

562 i‡(!
√w£t
Ë√w£à
	`£tTy≥Cª©e
(
objñe
);

563 
	`£tTy≥Add
(
√w£t
,
objñe
);

564 
	`£tTy≥Remove
(
£t
,
objñe
);

565 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

566 
	`‰ìObje˘
(
objñe
);

570 
£tTy≥Iãøt‹
 *
si
;

571 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

572 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
objñe
,&
Œñe
)) != -1) {

573 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

574 
objñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

575 
	`addRïlyBulk
(
c
,
objñe
);

578 
¥›¨gv
[2] = 
objñe
;

579 
	`ÆsoPr›ag©e
(
£rvî
.
§emComm™d
,
c
->
db
->
id
,
¥›¨gv
,3,

580 
PROPAGATE_AOF
|
PROPAGATE_REPL
);

581 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
)

582 
	`‰ìObje˘
(
objñe
);

584 
	`£tTy≥Rñó£Iãøt‹
(
si
);

587 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w£t
);

594 
	`‰ìObje˘
(
¥›¨gv
[0]);

595 
	`¥evítComm™dPr›ag©i⁄
(
c
);

596 
	`u∆ockDb
(
c
->
db
);

597 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

598 
	}
}

600 
	$•›Comm™d
(
˛õ¡
 *
c
) {

601 
robj
 *
£t
, *
ñe
, *
aux1
, *
aux2
;

602 
öt64_t
 
Œñe
;

603 
ícodög
;

604 
expúed
 = 0;

606 i‡(
c
->
¨gc
 == 3) {

607 
	`•›WôhCou¡Comm™d
(
c
);

609 } i‡(
c
->
¨gc
 > 3) {

610 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

614 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

615 
	`lockDbWrôe
(
c
->
db
);

618 i‡((
£t
 = 
	`lookupKeyWrôeOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
,&
expúed
)Ë=
NULL
 ||

619 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

620 
	`u∆ockDb
(
c
->
db
);

621 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

626 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

629 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

630 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

631 
£t
->
±r
 = 
	`öt£tRemove
(£t->±r,
Œñe
,
NULL
);

633 
ñe
 = 
	`dupSåögObje˘Unc⁄°™t
(ele);

634 
	`£tTy≥Remove
(
£t
,
ñe
);

637 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"•›",
c
->
¨gv
[1],c->
db
->
id
);

640 
aux1
 = 
	`¸óãSåögObje˘
("SREM",4);

641 
aux2
 = 
	`dupSåögObje˘Unc⁄°™t
(
c
->
¨gv
[1]);

642 
	`ªwrôeClõ¡Comm™dVe˘‹
(
c
,3,
aux1
,
aux2
,
ñe
);

645 
	`addRïlyBulk
(
c
,
ñe
);

648 i‡(
	`£tTy≥Size
(
£t
) == 0) {

649 
	`dbDñëe
(
c
->
db
,c->
¨gv
[1]);

650 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
c
->
¨gv
[1],c->
db
->
id
);

654 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

655 
c
->
vñ
->
dúty
++;

656 
	`u∆ockDb
(
c
->
db
);

657 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

658 
	}
}

666 
	#SRANDMEMBER_SUB_STRATEGY_MUL
 3

	)

668 
	$§™dmembîWôhCou¡Comm™d
(
˛õ¡
 *
c
) {

669 
l
;

670 
cou¡
, 
size
;

671 
uniq
 = 1;

672 
robj
 *
£t
, *
ñe
;

673 
öt64_t
 
Œñe
;

674 
ícodög
;

676 
di˘
 *
d
;

678 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
l
,
NULL
Ë!
VR_OK
) ;

679 i‡(
l
 >= 0) {

680 
cou¡
 = (Ë
l
;

684 
cou¡
 = -
l
;

685 
uniq
 = 0;

688 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
))

689 =
NULL
 || 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) ;

690 
size
 = 
	`£tTy≥Size
(
£t
);

693 i‡(
cou¡
 == 0) {

694 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

702 i‡(!
uniq
) {

703 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

704 
cou¡
--) {

705 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

706 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

707 
	`addRïlyBulkL⁄gL⁄g
(
c
,
Œñe
);

709 
	`addRïlyBulk
(
c
,
ñe
);

718 i‡(
cou¡
 >
size
) {

720 
	`smembîsGíîicComm™d
(
c
, 
£t
);

725 
d
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

736 i‡(
cou¡
*
SRANDMEMBER_SUB_STRATEGY_MUL
 > 
size
) {

737 
£tTy≥Iãøt‹
 *
si
;

740 
si
 = 
	`£tTy≥InôIãøt‹
(
£t
);

741 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñe
,&
Œñe
)) != -1) {

742 
ªtvÆ
 = 
DICT_ERR
;

744 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

745 
ªtvÆ
 = 
	`di˘Add
(
d
,
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
),
NULL
);

747 
ªtvÆ
 = 
	`di˘Add
(
d
,
	`dupSåögObje˘
(
ñe
),
NULL
);

749 
	`ASSERT
(
ªtvÆ
 =
DICT_OK
);

751 
	`£tTy≥Rñó£Iãøt‹
(
si
);

752 
	`ASSERT
(
	`di˘Size
(
d
Ë=
size
);

755 
size
 > 
cou¡
) {

756 
di˘E¡ry
 *
de
;

758 
de
 = 
	`di˘GëR™domKey
(
d
);

759 
	`di˘Dñëe
(
d
,
	`di˘GëKey
(
de
));

760 
size
--;

769 
added
 = 0;

771 
added
 < 
cou¡
) {

772 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

773 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

774 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
Œñe
);

776 
ñe
 = 
	`dupSåögObje˘
(ele);

781 i‡(
	`di˘Add
(
d
,
ñe
,
NULL
Ë=
DICT_OK
)

782 
added
++;

784 
	`de¸RefCou¡
(
ñe
);

790 
di˘Iãøt‹
 *
di
;

791 
di˘E¡ry
 *
de
;

793 
	`addRïlyMu…iBulkLí
(
c
,
cou¡
);

794 
di
 = 
	`di˘GëIãøt‹
(
d
);

795 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
)

796 
	`addRïlyBulk
(
c
,
	`di˘GëKey
(
de
));

797 
	`di˘Rñó£Iãøt‹
(
di
);

798 
	`di˘Rñó£
(
d
);

800 
	}
}

802 
	$§™dmembîComm™d
(
˛õ¡
 *
c
) {

803 
robj
 *
£t
, *
ñe
;

804 
öt64_t
 
Œñe
;

805 
ícodög
;

807 i‡(
c
->
¨gc
 == 3) {

808 
	`§™dmembîWôhCou¡Comm™d
(
c
);

810 } i‡(
c
->
¨gc
 > 3) {

811 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

815 i‡((
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
 ||

816 
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) ;

818 
ícodög
 = 
	`£tTy≥R™domEÀmít
(
£t
,&
ñe
,&
Œñe
);

819 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

820 
	`addRïlyBulkL⁄gL⁄g
(
c
,
Œñe
);

822 
	`addRïlyBulk
(
c
,
ñe
);

824 
	}
}

826 
	$smembîsComm™d
(
˛õ¡
 *
c
) {

827 
robj
 *
£t
;

829 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

830 
	`lockDbRód
(
c
->
db
);

831 
£t
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ymu…ibulk
);

832 i‡(
£t
 =
NULL
) {

833 
	`u∆ockDb
(
c
->
db
);

834 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

836 } if(
	`checkTy≥
(
c
,
£t
,
OBJ_SET
)) {

837 
	`u∆ockDb
(
c
->
db
);

838 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

842 
	`smembîsGíîicComm™d
(
c
, 
£t
);

843 
	`u∆ockDb
(
c
->
db
);

844 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

845 
	}
}

847 
	$qs‹tCom∑ªSësByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

848  
	`£tTy≥Size
(*(
robj
**)
s1
)-£tTy≥Size(*‘obj**)
s2
);

849 
	}
}

853 
	$qs‹tCom∑ªSësByRevC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

854 
robj
 *
o1
 = *‘obj**)
s1
, *
o2
 = *‘obj**)
s2
;

856  (
o2
 ? 
	`£tTy≥Size
(o2Ë: 0Ë- (
o1
 ? setTypeSize(o1) : 0);

857 
	}
}

859 
	$söãrGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
,

860 
£äum
, 
robj
 *
d°key
) {

861 
£tTy≥Iãøt‹
 *
si
;

862 
robj
 *
ñeobj
, *
d°£t
 = 
NULL
;

863 
öt64_t
 
ötobj
;

864 
j
, 
ˇrdöÆôy
 = 0;

865 
ícodög
;

866 
robj
 *
£tobj
, *
mö_Àn_£t
;

867 
mö_Àn
 = -1;

868 
mö_Àn_idx
 = 0;

870 
j
 = 0; j < 
£äum
; j++) {

871 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

872 
	`lockDbRód
(
c
->
db
);

873 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

874 i‡(!
£tobj
) {

875 
	`u∆ockDb
(
c
->
db
);

876 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_mis£s
,1);

877 i‡(
d°key
) {

878 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

879 
	`lockDbWrôe
(
c
->
db
);

880 i‡(
	`dbDñëe
(
c
->
db
,
d°key
)) {

881 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

882 
c
->
vñ
->
dúty
++;

884 
	`u∆ockDb
(
c
->
db
);

885 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

887 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

891 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

892 
	`u∆ockDb
(
c
->
db
);

893 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

897 i‡(
mö_Àn
 =-1 || 
	`£tTy≥Size
(
£tobj
) < min_len) {

898 
mö_Àn
 = 
	`£tTy≥Size
(
£tobj
);

899 
mö_Àn_idx
 = 
j
;

902 
	`u∆ockDb
(
c
->
db
);

903 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

906 
mö_Àn_£t
 = 
	`¸óãI¡£tObje˘
();

907 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
mö_Àn_idx
]);

908 
	`lockDbRód
(
c
->
db
);

909 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
mö_Àn_idx
]);

910 i‡(!
£tobj
) {

911 
	`u∆ockDb
(
c
->
db
);

912 
	`‰ìObje˘
(
mö_Àn_£t
);

913 
d⁄e
;

915 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

916 
	`u∆ockDb
(
c
->
db
);

917 
	`‰ìObje˘
(
mö_Àn_£t
);

920 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

921 (
ñeobj
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

922 
	`£tTy≥Add
(
mö_Àn_£t
,
ñeobj
);

923 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

924 
	`‰ìObje˘
(
ñeobj
);

926 
	`£tTy≥Rñó£Iãøt‹
(
si
);

927 
	`u∆ockDb
(
c
->
db
);

929 
d°£t
 = 
	`¸óãI¡£tObje˘
();

934 
si
 = 
	`£tTy≥InôIãøt‹
(
mö_Àn_£t
);

935 (
ícodög
 = 
	`£tTy≥Next
(
si
,&
ñeobj
,&
ötobj
)) != -1) {

936 
j
 = 0; j < 
£äum
; j++) {

937 i‡(
j
 =
mö_Àn_idx
) ;

938 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

939 
	`lockDbRód
(
c
->
db
);

940 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

941 i‡(!
£tobj
) {

942 
	`u∆ockDb
(
c
->
db
);

943 
	`‰ìObje˘
(
mö_Àn_£t
);

944 i‡(
d°£t
) {

945 
	`‰ìObje˘
(
d°£t
);

946 
d°£t
 = 
NULL
;

948 
	`£tTy≥Rñó£Iãøt‹
(
si
);

949 
d⁄e
;

951 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

952 
	`u∆ockDb
(
c
->
db
);

953 
	`‰ìObje˘
(
mö_Àn_£t
);

954 i‡(
d°£t
) {

955 
	`‰ìObje˘
(
d°£t
);

956 
d°£t
 = 
NULL
;

958 
	`£tTy≥Rñó£Iãøt‹
(
si
);

962 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

964 i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
 &&

965 !
	`öt£tFöd
((
öt£t
*)
£tobj
->
±r
,
ötobj
))

967 
	`u∆ockDb
(
c
->
db
);

972 } i‡(
£tobj
->
ícodög
 =
OBJ_ENCODING_HT
) {

973 
ñeobj
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
ötobj
);

974 i‡(!
	`£tTy≥IsMembî
(
£tobj
,
ñeobj
)) {

975 
	`u∆ockDb
(
c
->
db
);

976 
	`‰ìObje˘
(
ñeobj
);

979 
	`‰ìObje˘
(
ñeobj
);

981 } i‡(
ícodög
 =
OBJ_ENCODING_HT
) {

985 i‡(
ñeobj
->
ícodög
 =
OBJ_ENCODING_INT
 &&

986 
£tobj
->
ícodög
 =
OBJ_ENCODING_INTSET
 &&

987 !
	`öt£tFöd
((
öt£t
*)
£tobj
->
±r
,()
ñeobj
->ptr))

989 
	`u∆ockDb
(
c
->
db
);

993 } i‡(!
	`£tTy≥IsMembî
(
£tobj
,
ñeobj
)) {

994 
	`u∆ockDb
(
c
->
db
);

998 
	`u∆ockDb
(
c
->
db
);

1002 i‡(
j
 =
£äum
) {

1003 i‡(
ícodög
 =
OBJ_ENCODING_INTSET
) {

1004 
ñeobj
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
ötobj
);

1005 
	`£tTy≥Add
(
d°£t
,
ñeobj
);

1006 
	`‰ìObje˘
(
ñeobj
);

1008 
	`£tTy≥Add
(
d°£t
,
ñeobj
);

1010 
ˇrdöÆôy
 ++;

1013 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1014 
	`‰ìObje˘
(
mö_Àn_£t
);

1016 
d⁄e
:

1017 i‡(
d°key
) {

1018 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

1019 
	`lockDbWrôe
(
c
->
db
);

1022 
dñëed
 = 
	`dbDñëe
(
c
->
db
,
d°key
);

1023 i‡(
d°£t
 && 
	`£tTy≥Size
(dstset) > 0) {

1024 
	`dbAdd
(
c
->
db
,
d°key
,
d°£t
);

1025 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
d°£t
));

1026 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,"sinterstore",

1027 
d°key
,
c
->
db
->
id
);

1029 i‡(
d°£t
) {

1030 
	`‰ìObje˘
(
d°£t
);

1031 
d°£t
 = 
NULL
;

1033 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1034 i‡(
dñëed
)

1035 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

1036 
d°key
,
c
->
db
->
id
);

1038 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

1039 
	`u∆ockDb
(
c
->
db
);

1040 
c
->
vñ
->
dúty
++;

1042 
	`addRïlyMu…iBulkLí
(
c
,
ˇrdöÆôy
);

1043 i‡(
d°£t
 && 
	`£tTy≥Size
(dstset) > 0) {

1044 
si
 = 
	`£tTy≥InôIãøt‹
(
d°£t
);

1045 (
ñeobj
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1046 
	`addRïlyBulk
(
c
,
ñeobj
);

1047 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1048 
	`‰ìObje˘
(
ñeobj
);

1050 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1052 i‡(
d°£t
Ë
	`‰ìObje˘
(dstset);

1054 
	}
}

1056 
	$söãrComm™d
(
˛õ¡
 *
c
) {

1057 
	`söãrGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
);

1058 
	}
}

1060 
	$söãr°‹eComm™d
(
˛õ¡
 *
c
) {

1061 
	`söãrGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->argv[1]);

1062 
	}
}

1064 
	#SET_OP_UNION
 0

	)

1065 
	#SET_OP_DIFF
 1

	)

1066 
	#SET_OP_INTER
 2

	)

1068 
	$suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,

1069 
robj
 *
d°key
, 
›
) {

1070 
£tTy≥Iãøt‹
 *
si
;

1071 
robj
 *
ñe
, *
d°£t
 = 
NULL
;

1072 
j
, 
ˇrdöÆôy
 = 0;

1073 
diff_Ægo
 = 1;

1074 
robj
 *
£tobj
;

1075 
Ægo_⁄e_w‹k
 = 0, 
Ægo_two_w‹k
 = 0;

1076 
fú°_Àngth
 = 0;

1078 
j
 = 0; j < 
£äum
; j++) {

1079 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1080 
	`lockDbRód
(
c
->
db
);

1081 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1082 i‡(!
£tobj
) {

1083 
	`u∆ockDb
(
c
->
db
);

1084 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_mis£s
,1);

1087 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1088 
	`u∆ockDb
(
c
->
db
);

1089 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

1093 i‡(
›
 =
SET_OP_DIFF
) {

1094 i‡(
j
 =0Ë
fú°_Àngth
 = 
	`£tTy≥Size
(
£tobj
);

1095 
Ægo_⁄e_w‹k
 +
fú°_Àngth
;

1096 
Ægo_two_w‹k
 +
	`£tTy≥Size
(
£tobj
);

1099 
	`u∆ockDb
(
c
->
db
);

1100 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
key•a˚_hôs
,1);

1112 i‡(
›
 =
SET_OP_DIFF
) {

1115 
Ægo_⁄e_w‹k
 /= 2;

1116 
diff_Ægo
 = (
Ægo_⁄e_w‹k
 <
Ægo_two_w‹k
) ? 1 : 2;

1122 
d°£t
 = 
	`¸óãI¡£tObje˘
();

1124 i‡(
›
 =
SET_OP_UNION
) {

1127 
j
 = 0; j < 
£äum
; j++) {

1128 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1129 
	`lockDbRód
(
c
->
db
);

1130 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1132 i‡(!
£tobj
) {

1133 
	`u∆ockDb
(
c
->
db
);

1136 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1137 
	`u∆ockDb
(
c
->
db
);

1138 
	`‰ìObje˘
(
d°£t
);

1142 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1143 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1144 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
++;

1145 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1146 
	`‰ìObje˘
(
ñe
);

1148 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1149 
	`u∆ockDb
(
c
->
db
);

1151 } i‡(
›
 =
SET_OP_DIFF
 && 
diff_Ægo
 == 1) {

1160 
robj
 *
fú°_£t
;

1162 
fú°_£t
 = 
	`¸óãI¡£tObje˘
();

1163 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[0]);

1164 
	`lockDbRód
(
c
->
db
);

1165 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[0]);

1166 i‡(!
£tobj
) {

1167 
	`u∆ockDb
(
c
->
db
);

1168 
	`‰ìObje˘
(
fú°_£t
);

1169 
d⁄e
;

1171 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1172 
	`u∆ockDb
(
c
->
db
);

1173 
	`‰ìObje˘
(
d°£t
);

1174 
	`‰ìObje˘
(
fú°_£t
);

1177 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1178 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1179 
	`£tTy≥Add
(
fú°_£t
,
ñe
);

1180 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1181 
	`‰ìObje˘
(
ñe
);

1183 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1184 
	`u∆ockDb
(
c
->
db
);

1186 
si
 = 
	`£tTy≥InôIãøt‹
(
fú°_£t
);

1187 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1188 
j
 = 1; j < 
£äum
; j++) {

1189 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[
j
]);

1190 
	`lockDbRód
(
c
->
db
);

1191 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[
j
]);

1192 i‡(!
£tobj
) {

1193 
	`u∆ockDb
(
c
->
db
);

1196 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1197 
	`u∆ockDb
(
c
->
db
);

1198 
	`‰ìObje˘
(
d°£t
);

1199 
	`‰ìObje˘
(
fú°_£t
);

1200 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1201 
	`‰ìObje˘
(
ñe
);

1202 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1205 i‡(
	`£tTy≥IsMembî
(
£tobj
,
ñe
)) {

1206 
	`u∆ockDb
(
c
->
db
);

1209 
	`u∆ockDb
(
c
->
db
);

1212 i‡(
j
 =
£äum
) {

1214 
	`£tTy≥Add
(
d°£t
,
ñe
);

1215 
ˇrdöÆôy
++;

1218 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1219 
	`‰ìObje˘
(
ñe
);

1221 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1222 
	`‰ìObje˘
(
fú°_£t
);

1223 } i‡(
›
 =
SET_OP_DIFF
 && 
diff_Ægo
 == 2) {

1231 
j
 = 0; j < 
£äum
; j++) {

1232 
	`„tchI¡î«lDbByKey
(
c
,
£tkeys
[0]);

1233 
	`lockDbRód
(
c
->
db
);

1234 
£tobj
 = 
	`lookupKeyRód
(
c
->
db
,
£tkeys
[0]);

1235 i‡(!
£tobj
) {

1236 i‡(
j
 == 0) {

1237 
	`u∆ockDb
(
c
->
db
);

1238 
d⁄e
;

1241 
	`u∆ockDb
(
c
->
db
);

1244 i‡(
	`checkTy≥
(
c
,
£tobj
,
OBJ_SET
)) {

1245 
	`u∆ockDb
(
c
->
db
);

1246 
	`‰ìObje˘
(
d°£t
);

1250 
si
 = 
	`£tTy≥InôIãøt‹
(
£tobj
);

1251 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1252 i‡(
j
 == 0) {

1253 i‡(
	`£tTy≥Add
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
++;

1255 i‡(
	`£tTy≥Remove
(
d°£t
,
ñe
)Ë
ˇrdöÆôy
--;

1257 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1258 
	`‰ìObje˘
(
ñe
);

1260 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1264 i‡(
ˇrdöÆôy
 == 0) {

1265 
	`u∆ockDb
(
c
->
db
);

1268 
	`u∆ockDb
(
c
->
db
);

1272 
d⁄e
:

1274 i‡(!
d°key
) {

1275 
	`addRïlyMu…iBulkLí
(
c
,
ˇrdöÆôy
);

1276 
si
 = 
	`£tTy≥InôIãøt‹
(
d°£t
);

1277 (
ñe
 = 
	`£tTy≥NextObje˘
(
si
)Ë!
NULL
) {

1278 
	`addRïlyBulk
(
c
,
ñe
);

1279 i‡(
si
->
ícodög
 =
OBJ_ENCODING_INTSET
)

1280 
	`‰ìObje˘
(
ñe
);

1282 
	`£tTy≥Rñó£Iãøt‹
(
si
);

1283 
	`‰ìObje˘
(
d°£t
);

1285 
	`„tchI¡î«lDbByKey
(
c
,
d°key
);

1286 
	`lockDbWrôe
(
c
->
db
);

1289 
dñëed
 = 
	`dbDñëe
(
c
->
db
,
d°key
);

1290 i‡(
	`£tTy≥Size
(
d°£t
) > 0) {

1291 
	`dbAdd
(
c
->
db
,
d°key
,
d°£t
);

1292 
	`addRïlyL⁄gL⁄g
(
c
,
	`£tTy≥Size
(
d°£t
));

1293 
	`nŸifyKey•a˚Evít
(
NOTIFY_SET
,

1294 
›
 =
SET_OP_UNION
 ? "sunionstore" : "sdiffstore",

1295 
d°key
,
c
->
db
->
id
);

1297 
	`‰ìObje˘
(
d°£t
);

1298 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1299 i‡(
dñëed
)

1300 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"del",

1301 
d°key
,
c
->
db
->
id
);

1303 
	`u∆ockDb
(
c
->
db
);

1304 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

1305 
c
->
vñ
->
dúty
++;

1307 
	}
}

1309 
	$suni⁄Comm™d
(
˛õ¡
 *
c
) {

1310 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
,
SET_OP_UNION
);

1311 
	}
}

1313 
	$suni⁄°‹eComm™d
(
˛õ¡
 *
c
) {

1314 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->¨gv[1],
SET_OP_UNION
);

1315 
	}
}

1317 
	$sdiffComm™d
(
˛õ¡
 *
c
) {

1318 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+1,c->
¨gc
-1,
NULL
,
SET_OP_DIFF
);

1319 
	}
}

1321 
	$sdiff°‹eComm™d
(
˛õ¡
 *
c
) {

1322 
	`suni⁄DiffGíîicComm™d
(
c
,c->
¨gv
+2,c->
¨gc
-2,c->¨gv[1],
SET_OP_DIFF
);

1323 
	}
}

1325 
	$ssˇnComm™d
(
˛õ¡
 *
c
) {

1326 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_SET
);

1327 
	}
}

	@src/vr_t_set.h

1 #i‚de‡
_VR_T_SET_H_


2 
	#_VR_T_SET_H_


	)

4 
robj
 *
£tTy≥Cª©e
‘obj *
vÆue
);

5 
£tTy≥Add
(
robj
 *
subje˘
,Ñobj *
vÆue
);

6 
£tTy≥Remove
(
robj
 *
£tobj
,Ñobj *
vÆue
);

7 
£tTy≥IsMembî
(
robj
 *
subje˘
,Ñobj *
vÆue
);

8 
£tTy≥Iãøt‹
 *
£tTy≥InôIãøt‹
(
robj
 *
subje˘
);

9 
£tTy≥Rñó£Iãøt‹
(
£tTy≥Iãøt‹
 *
si
);

10 
£tTy≥Next
(
£tTy≥Iãøt‹
 *
si
, 
robj
 **
objñe
, 
öt64_t
 *
Œñe
);

11 
robj
 *
£tTy≥NextObje˘
(
£tTy≥Iãøt‹
 *
si
);

12 
£tTy≥R™domEÀmít
(
robj
 *
£tobj
,Ñobj **
objñe
, 
öt64_t
 *
Œñe
);

14 
£tTy≥Size
(
robj
 *
subje˘
);

15 
£tTy≥C⁄vît
(
robj
 *
£tobj
, 
íc
);

16 
ßddComm™d
(
˛õ¡
 *
c
);

17 
§emComm™d
(
˛õ¡
 *
c
);

18 
smoveComm™d
(
˛õ¡
 *
c
);

19 
sismembîComm™d
(
˛õ¡
 *
c
);

20 
sˇrdComm™d
(
˛õ¡
 *
c
);

21 
•›WôhCou¡Comm™d
(
˛õ¡
 *
c
);

22 
•›Comm™d
(
˛õ¡
 *
c
);

23 
§™dmembîWôhCou¡Comm™d
(
˛õ¡
 *
c
);

24 
§™dmembîComm™d
(
˛õ¡
 *
c
);

25 
smembîsComm™d
(
˛õ¡
 *
c
);

26 
qs‹tCom∑ªSësByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

27 
qs‹tCom∑ªSësByRevC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

28 
söãrGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,Ñobj *
d°key
);

29 
söãrComm™d
(
˛õ¡
 *
c
);

30 
söãr°‹eComm™d
(
˛õ¡
 *
c
);

31 
suni⁄DiffGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 **
£tkeys
, 
£äum
,Ñobj *
d°key
, 
›
);

32 
suni⁄Comm™d
(
˛õ¡
 *
c
);

33 
suni⁄°‹eComm™d
(
˛õ¡
 *
c
);

34 
sdiffComm™d
(
˛õ¡
 *
c
);

35 
sdiff°‹eComm™d
(
˛õ¡
 *
c
);

36 
ssˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_string.c

1 
	~<vr_c‹e.h
>

7 
	$checkSåögLígth
(
˛õ¡
 *
c
, 
size
) {

8 i‡(
size
 > 512*1024*1024) {

9 
	`addRïlyEº‹
(
c
,"stringÉxceeds maximumállowed size (512MB)");

10  
VR_ERROR
;

12  
VR_OK
;

13 
	}
}

31 
	#OBJ_SET_NO_FLAGS
 0

	)

32 
	#OBJ_SET_NX
 (1<<0Ë

	)

33 
	#OBJ_SET_XX
 (1<<1Ë

	)

34 
	#OBJ_SET_EX
 (1<<2Ë

	)

35 
	#OBJ_SET_PX
 (1<<3Ë

	)

37 
	$£tGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
, 
robj
 *
key
,Ñobj *
vÆ
,Ñobj *
expúe
, 
unô
,Ñobj *
ok_ª∂y
,Ñobj *
ab‹t_ª∂y
) {

38 
mûli£c⁄ds
 = 0;

39 
expúed
 = 0;

40 
exi°
;

42 i‡(
expúe
) {

43 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, 
expúe
, &
mûli£c⁄ds
, 
NULL
Ë!
VR_OK
)

45 i‡(
mûli£c⁄ds
 <= 0) {

46 
	`addRïlyEº‹F‹m©
(
c
,"övÆidÉxpúêtimêö %s",c->
cmd
->
«me
);

49 i‡(
unô
 =
UNIT_SECONDS
Ë
mûli£c⁄ds
 *= 1000;

52 
	`„tchI¡î«lDbByKey
(
c
,
key
);

53 
	`lockDbWrôe
(
c
->
db
);

54 i‡(
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
Ë=
NULL
)

55 
exi°
 = 0;

57 
exi°
 = 1;

59 i‡((
Êags
 & 
OBJ_SET_NX
 && 
exi°
) ||

60 (
Êags
 & 
OBJ_SET_XX
 && !
exi°
))

62 
	`u∆ockDb
(
c
->
db
);

63 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

64 
	`addRïly
(
c
, 
ab‹t_ª∂y
 ?áb‹t_ª∂y : 
sh¨ed
.
nuŒbulk
);

68 
	`£tKey
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(
vÆ
),
NULL
);

69 
c
->
vñ
->
dúty
++;

70 i‡(
expúe
Ë
	`£tExpúe
(
c
->
db
,
key
,
	`vr_m£c_now
()+
mûli£c⁄ds
);

71 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
key
,
c
->
db
->
id
);

72 i‡(
expúe
Ë
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,

73 "expúe",
key
,
c
->
db
->
id
);

74 
	`addRïly
(
c
, 
ok_ª∂y
 ? ok_ª∂y : 
sh¨ed
.
ok
);

75 
	`u∆ockDb
(
c
->
db
);

76 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

77 
	}
}

80 
	$£tComm™d
(
˛õ¡
 *
c
) {

81 
j
;

82 
robj
 *
expúe
 = 
NULL
;

83 
unô
 = 
UNIT_SECONDS
;

84 
Êags
 = 
OBJ_SET_NO_FLAGS
;

86 
j
 = 3; j < 
c
->
¨gc
; j++) {

87 *
a
 = 
c
->
¨gv
[
j
]->
±r
;

88 
robj
 *
√xt
 = (
j
 =
c
->
¨gc
-1Ë? 
NULL
 : c->
¨gv
[j+1];

90 i‡((
a
[0] == 'n' ||á[0] == 'N') &&

91 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

92 !(
Êags
 & 
OBJ_SET_XX
))

94 
Êags
 |
OBJ_SET_NX
;

95 } i‡((
a
[0] == 'x' ||á[0] == 'X') &&

96 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

97 !(
Êags
 & 
OBJ_SET_NX
))

99 
Êags
 |
OBJ_SET_XX
;

100 } i‡((
a
[0] == 'e' ||á[0] == 'E') &&

101 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

102 !(
Êags
 & 
OBJ_SET_PX
Ë&& 
√xt
)

104 
Êags
 |
OBJ_SET_EX
;

105 
unô
 = 
UNIT_SECONDS
;

106 
expúe
 = 
√xt
;

107 
j
++;

108 } i‡((
a
[0] == 'p' ||á[0] == 'P') &&

109 (
a
[1] == 'x' ||á[1] == 'X') &&á[2] == '\0' &&

110 !(
Êags
 & 
OBJ_SET_EX
Ë&& 
√xt
)

112 
Êags
 |
OBJ_SET_PX
;

113 
unô
 = 
UNIT_MILLISECONDS
;

114 
expúe
 = 
√xt
;

115 
j
++;

117 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

122 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

123 
	`£tGíîicComm™d
(
c
,
Êags
,c->
¨gv
[1],c->¨gv[2],
expúe
,
unô
,
NULL
,NULL);

124 
	}
}

126 
	$£äxComm™d
(
˛õ¡
 *
c
) {

127 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

128 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NX
,c->
¨gv
[1],c->¨gv[2],
NULL
,0,
sh¨ed
.
c⁄e
,sh¨ed.
czîo
);

129 
	}
}

131 
	$£ãxComm™d
(
˛õ¡
 *
c
) {

132 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

133 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NO_FLAGS
,c->
¨gv
[1],c->¨gv[3],c->¨gv[2],
UNIT_SECONDS
,
NULL
,NULL);

134 
	}
}

136 
	$p£ãxComm™d
(
˛õ¡
 *
c
) {

137 
c
->
¨gv
[3] = 
	`åyObje˘Encodög
(c->argv[3]);

138 
	`£tGíîicComm™d
(
c
,
OBJ_SET_NO_FLAGS
,c->
¨gv
[1],c->¨gv[3],c->¨gv[2],
UNIT_MILLISECONDS
,
NULL
,NULL);

139 
	}
}

141 
	$gëGíîicComm™d
(
˛õ¡
 *
c
) {

142 
robj
 *
o
;

144 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

145  
VR_OK
;

148 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

149 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

150  
VR_ERROR
;

152 
	`addRïlyBulk
(
c
,
o
);

153  
VR_OK
;

155 
	}
}

157 
	$gëComm™d
(
˛õ¡
 *
c
) {

158 
robj
 *
o
;

160 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[1]);

161 
	`lockDbRód
(
c
->
db
);

162 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

163 
	`u∆ockDb
(
c
->
db
);

164 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

168 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

169 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

171 
	`addRïlyBulk
(
c
,
o
);

174 
	`u∆ockDb
(
c
->
db
);

175 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

176 
	}
}

178 
	$gë£tComm™d
(
˛õ¡
 *
c
) {

179 
robj
 *
key
, *
vÆ
;

180 
expúed
 = 0;

181 
exi°
;

183 
key
 = 
c
->
¨gv
[1];

184 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

186 
	`„tchI¡î«lDbByKey
(
c
,
key
);

187 
	`lockDbWrôe
(
c
->
db
);

188 
vÆ
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
,&
expúed
);

189 i‡(
vÆ
 =
NULL
) {

190 
exi°
 = 0;

191 
	`dbAdd
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]));

193 
exi°
 = 1;

194 i‡(
vÆ
->
ty≥
 !
OBJ_STRING
) {

195 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

196 
íd
;

199 
	`addRïlyBulk
(
c
,
vÆ
);

200 
	`dbOvîwrôe
(
c
->
db
,
key
,
	`dupSåögObje˘Unc⁄°™t
(c->
¨gv
[2]));

201 
	`ªmoveExpúe
(
c
->
db
,
key
);

204 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[1],c->
db
->
id
);

205 
c
->
vñ
->
dúty
++;

207 
íd
:

208 
	`u∆ockDb
(
c
->
db
);

209 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

210 i‡(
exi°
)

211 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

213 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

214 
	}
}

216 
	$£å™geComm™d
(
˛õ¡
 *
c
) {

217 
robj
 *
o
;

218 
off£t
;

219 
sds
 
vÆue
 = 
c
->
¨gv
[3]->
±r
;

220 
expúed
 = 0;

222 i‡(
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
off£t
,
NULL
Ë!
VR_OK
)

225 i‡(
off£t
 < 0) {

226 
	`addRïlyEº‹
(
c
,"offset is out ofÑange");

230 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

231 
	`lockDbWrôe
(
c
->
db
);

232 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

233 i‡(
o
 =
NULL
) {

235 i‡(
	`sd¶í
(
vÆue
) == 0) {

236 
	`u∆ockDb
(
c
->
db
);

237 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

238 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

243 i‡(
	`checkSåögLígth
(
c
,
off£t
+
	`sd¶í
(
vÆue
)Ë!
VR_OK
) {

244 
	`u∆ockDb
(
c
->
db
);

245 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

249 
o
 = 
	`¸óãObje˘
(
OBJ_STRING
,
	`sd¢ewÀn
(
NULL
, 
off£t
+
	`sd¶í
(
vÆue
)));

250 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
o
);

252 
size_t
 
ﬁí
;

255 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

256 
	`u∆ockDb
(
c
->
db
);

257 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

262 
ﬁí
 = 
	`°rögObje˘Lí
(
o
);

263 i‡(
	`sd¶í
(
vÆue
) == 0) {

264 
	`u∆ockDb
(
c
->
db
);

265 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

266 
	`addRïlyL⁄gL⁄g
(
c
,
ﬁí
);

271 i‡(
	`checkSåögLígth
(
c
,
off£t
+
	`sd¶í
(
vÆue
)Ë!
VR_OK
) {

272 
	`u∆ockDb
(
c
->
db
);

273 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

278 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

281 i‡(
	`sd¶í
(
vÆue
) > 0) {

282 
o
->
±r
 = 
	`sdsgrowzîo
(o->±r,
off£t
+
	`sd¶í
(
vÆue
));

283 
	`mem˝y
((*)
o
->
±r
+
off£t
,
vÆue
,
	`sd¶í
(value));

284 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

285 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,

286 "£å™ge",
c
->
¨gv
[1],c->
db
->
id
);

287 
c
->
vñ
->
dúty
++;

289 
	`addRïlyL⁄gL⁄g
(
c
,
	`sd¶í
(
o
->
±r
));

290 
	`u∆ockDb
(
c
->
db
);

291 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

292 
	}
}

294 
	$gëøngeComm™d
(
˛õ¡
 *
c
) {

295 
robj
 *
o
;

296 
°¨t
, 
íd
;

297 *
°r
, 
Œbuf
[32];

298 
size_t
 
°æí
;

300 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
)

302 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
)

305 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

306 
	`lockDbRód
(
c
->
db
);

307 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
em±ybulk
)Ë=
NULL
) {

308 
	`u∆ockDb
(
c
->
db
);

309 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

311 } i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

312 
	`u∆ockDb
(
c
->
db
);

313 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

317 i‡(
o
->
ícodög
 =
OBJ_ENCODING_INT
) {

318 
°r
 = 
Œbuf
;

319 
°æí
 = 
	`Œ2°rög
(
Œbuf
,÷lbuf),()
o
->
±r
);

321 
°r
 = 
o
->
±r
;

322 
°æí
 = 
	`sd¶í
(
°r
);

326 i‡(
°¨t
 < 0Ë°¨à
°æí
+start;

327 i‡(
íd
 < 0Ëíd = 
°æí
+end;

328 i‡(
°¨t
 < 0) start = 0;

329 i‡(
íd
 < 0)Énd = 0;

330 i‡(()
íd
 >
°æí
)Énd = strlen-1;

334 i‡(
°¨t
 > 
íd
 || 
°æí
 == 0) {

335 
	`addRïly
(
c
,
sh¨ed
.
em±ybulk
);

337 
	`addRïlyBulkCBuf„r
(
c
,(*)
°r
+
°¨t
,
íd
-start+1);

339 
	`u∆ockDb
(
c
->
db
);

340 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

341 
	}
}

343 
	$mgëComm™d
(
˛õ¡
 *
c
) {

344 
j
;

346 
	`addRïlyMu…iBulkLí
(
c
,c->
¨gc
-1);

347 
j
 = 1; j < 
c
->
¨gc
; j++) {

348 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

349 
	`lockDbRód
(
c
->
db
);

350 
robj
 *
o
 = 
	`lookupKeyRód
(
c
->
db
,c->
¨gv
[
j
]);

351 i‡(
o
 =
NULL
) {

352 
	`u∆ockDb
(
c
->
db
);

353 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

354 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

356 i‡(
o
->
ty≥
 !
OBJ_STRING
) {

357 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

359 
	`addRïlyBulk
(
c
,
o
);

361 
	`u∆ockDb
(
c
->
db
);

362 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

365 
	}
}

367 
	$m£tGíîicComm™d
(
˛õ¡
 *
c
, 
nx
) {

368 
j
, 
busykeys
 = 0;

370 i‡((
c
->
¨gc
 % 2) == 0) {

371 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for MSET");

376 i‡(
nx
) {

377 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

378 i‡(
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
) != NULL) {

379 
busykeys
++;

382 i‡(
busykeys
) {

383 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

388 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

389 
c
->
¨gv
[
j
+1] = 
	`åyObje˘Encodög
(c->argv[j+1]);

390 
	`£tKey
(
c
->
db
,c->
¨gv
[
j
],c->¨gv[j+1],
NULL
);

391 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[
j
],c->
db
->
id
);

393 
£rvî
.
dúty
 +(
c
->
¨gc
-1)/2;

394 
	`addRïly
(
c
, 
nx
 ? 
sh¨ed
.
c⁄e
 : sh¨ed.
ok
);

395 
	}
}

397 
	$m£tComm™d
(
˛õ¡
 *
c
) {

398 
j
;

399 
expúed
 = 0, 
expúed_tŸÆ
 = 0;

401 i‡((
c
->
¨gc
 % 2) == 0) {

402 
	`addRïlyEº‹
(
c
,"wrongÇumber ofárguments for MSET");

406 
j
 = 1; j < 
c
->
¨gc
; j += 2) {

407 
c
->
¨gv
[
j
+1] = 
	`åyObje˘Encodög
(c->argv[j+1]);

408 
	`„tchI¡î«lDbByKey
(
c
,c->
¨gv
[
j
]);

409 
	`lockDbWrôe
(
c
->
db
);

410 
	`£tKey
(
c
->
db
,c->
¨gv
[
j
],
	`dupSåögObje˘Unc⁄°™t
(c->¨gv[j+1]),&
expúed
);

411 
	`u∆ockDb
(
c
->
db
);

412 i‡(
expúed
Ë
expúed_tŸÆ
 ++;

413 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"£t",
c
->
¨gv
[
j
],c->
db
->
id
);

416 i‡(
expúed_tŸÆ
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,expired_total);

417 
c
->
vñ
->
dúty
 +(c->
¨gc
-1)/2;

418 
	`addRïly
(
c
, 
sh¨ed
.
ok
);

419 
	}
}

421 
	$m£äxComm™d
(
˛õ¡
 *
c
) {

422 
	`m£tGíîicComm™d
(
c
,1);

423 
	}
}

425 
	$ö¸De¸Comm™d
(
˛õ¡
 *
c
, 
ö¸
) {

426 
vÆue
, 
ﬁdvÆue
;

427 
robj
 *
o
, *
√w
;

428 
expúed
 = 0;

430 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

431 
	`lockDbWrôe
(
c
->
db
);

432 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

433 i‡(
o
 !
NULL
 && 
	`checkTy≥
(
c
,o,
OBJ_STRING
)Ë
íd
;

434 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
,
o
,&
vÆue
,
NULL
Ë!
VR_OK
Ë
íd
;

436 
ﬁdvÆue
 = 
vÆue
;

437 i‡((
ö¸
 < 0 && 
ﬁdvÆue
 < 0 && in¸ < (
LLONG_MIN
-oldvalue)) ||

438 (
ö¸
 > 0 && 
ﬁdvÆue
 > 0 && in¸ > (
LLONG_MAX
-oldvalue))) {

439 
	`addRïlyEº‹
(
c
,"increment or decrement would overflow");

440 
íd
;

442 
vÆue
 +
ö¸
;

444 i‡(
o
 && o->
ªfcou¡
 =1 && o->
ícodög
 =
OBJ_ENCODING_INT
 &&

445 (
vÆue
 < 0 || vÆuê>
OBJ_SHARED_INTEGERS
) &&

446 
vÆue
 >
LONG_MIN
 && vÆuê<
LONG_MAX
)

448 
√w
 = 
o
;

449 
o
->
±r
 = (*)(()
vÆue
);

451 
√w
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vÆue
);

452 i‡(
o
) {

453 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w
);

455 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
√w
);

458 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

459 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"ö¸by",
c
->
¨gv
[1],c->
db
->
id
);

460 
c
->
vñ
->
dúty
++;

461 
	`addRïly
(
c
,
sh¨ed
.
cﬁ⁄
);

462 
	`addRïly
(
c
,
√w
);

463 
	`addRïly
(
c
,
sh¨ed
.
¸lf
);

465 
íd
:

466 
	`u∆ockDb
(
c
->
db
);

467 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
expúedkeys
, 1);

468 
	}
}

470 
	$ö¸Comm™d
(
˛õ¡
 *
c
) {

471 
	`ö¸De¸Comm™d
(
c
,1);

472 
	}
}

474 
	$de¸Comm™d
(
˛õ¡
 *
c
) {

475 
	`ö¸De¸Comm™d
(
c
,-1);

476 
	}
}

478 
	$ö¸byComm™d
(
˛õ¡
 *
c
) {

479 
ö¸
;

481 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ö¸
, 
NULL
Ë!
VR_OK
) ;

482 
	`ö¸De¸Comm™d
(
c
,
ö¸
);

483 
	}
}

485 
	$de¸byComm™d
(
˛õ¡
 *
c
) {

486 
ö¸
;

488 i‡(
	`gëL⁄gL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
ö¸
, 
NULL
Ë!
VR_OK
) ;

489 
	`ö¸De¸Comm™d
(
c
,-
ö¸
);

490 
	}
}

492 
	$ö¸byÊﬂtComm™d
(
˛õ¡
 *
c
) {

493 
ö¸
, 
vÆue
;

494 
robj
 *
o
, *
√w
, *
aux
;

495 
expúed
 = 0;

497 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

498 
	`lockDbWrôe
(
c
->
db
);

499 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

500 i‡(
o
 !
NULL
 && 
	`checkTy≥
(
c
,o,
OBJ_STRING
)Ë
íd
;

501 i‡(
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,
o
,&
vÆue
,
NULL
Ë!
VR_OK
 ||

502 
	`gëL⁄gDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
ö¸
,
NULL
Ë!
VR_OK
)

503 
íd
;

505 
vÆue
 +
ö¸
;

506 i‡(
	`i¢™
(
vÆue
Ë|| 
	`isöf
(value)) {

507 
	`addRïlyEº‹
(
c
,"increment wouldÖroduce NaN or Infinity");

508 
íd
;

510 
√w
 = 
	`¸óãSåögObje˘FromL⁄gDoubÀ
(
vÆue
,1);

511 i‡(
o
)

512 
	`dbOvîwrôe
(
c
->
db
,c->
¨gv
[1],
√w
);

514 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
√w
);

515 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

516 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"ö¸byÊﬂt",
c
->
¨gv
[1],c->
db
->
id
);

517 
c
->
vñ
->
dúty
++;

518 
	`addRïlyBulk
(
c
,
√w
);

523 
aux
 = 
	`¸óãSåögObje˘
("SET",3);

524 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,0,
aux
);

525 
aux
 = 
	`dupSåögObje˘Unc⁄°™t
(
√w
);

526 
	`ªwrôeClõ¡Comm™dArgumít
(
c
,2,
aux
);

528 
íd
:

529 
	`u∆ockDb
(
c
->
db
);

530 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

531 
	}
}

533 
	$≠≥ndComm™d
(
˛õ¡
 *
c
) {

534 
size_t
 
tŸÀn
;

535 
robj
 *
o
, *
≠≥nd
;

536 
expúed
 = 0;

538 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

539 
	`lockDbWrôe
(
c
->
db
);

540 
o
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[1],&
expúed
);

541 i‡(
o
 =
NULL
) {

543 
c
->
¨gv
[2] = 
	`åyObje˘Encodög
(c->argv[2]);

544 
	`dbAdd
(
c
->
db
,c->
¨gv
[1],
	`dupSåögObje˘Unc⁄°™t
(c->argv[2]));

545 
tŸÀn
 = 
	`°rögObje˘Lí
(
c
->
¨gv
[2]);

548 i‡(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
))

549 
íd
;

552 
≠≥nd
 = 
c
->
¨gv
[2];

553 
tŸÀn
 = 
	`°rögObje˘Lí
(
o
)+
	`sd¶í
(
≠≥nd
->
±r
);

554 i‡(
	`checkSåögLígth
(
c
,
tŸÀn
Ë!
VR_OK
)

555 
íd
;

558 
o
 = 
	`dbUnsh¨eSåögVÆue
(
c
->
db
,c->
¨gv
[1],o);

559 
o
->
±r
 = 
	`sdsˇéí
(o->±r,
≠≥nd
->±r,
	`sd¶í
(append->ptr));

560 
tŸÀn
 = 
	`sd¶í
(
o
->
±r
);

562 
	`sig«lModifõdKey
(
c
->
db
,c->
¨gv
[1]);

563 
	`nŸifyKey•a˚Evít
(
NOTIFY_STRING
,"≠≥nd",
c
->
¨gv
[1],c->
db
->
id
);

564 
c
->
vñ
->
dúty
++;

565 
	`addRïlyL⁄gL⁄g
(
c
,
tŸÀn
);

567 
íd
:

568 
	`u∆ockDb
(
c
->
db
);

569 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

570 
	}
}

572 
	$°æíComm™d
(
˛õ¡
 *
c
) {

573 
robj
 *
o
;

575 
	`„tchI¡î«lDbByKey
(
c
, c->
¨gv
[1]);

576 
	`lockDbRód
(
c
->
db
);

577 i‡((
o
 = 
	`lookupKeyRódOrRïly
(
c
,c->
¨gv
[1],
sh¨ed
.
czîo
)Ë=
NULL
) {

578 
	`u∆ockDb
(
c
->
db
);

579 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

581 } if(
	`checkTy≥
(
c
,
o
,
OBJ_STRING
)) {

582 
	`u∆ockDb
(
c
->
db
);

583 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

587 
	`addRïlyL⁄gL⁄g
(
c
,
	`°rögObje˘Lí
(
o
));

588 
	`u∆ockDb
(
c
->
db
);

589 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

590 
	}
}

	@src/vr_t_string.h

1 #i‚de‡
_VR_T_STRING_H_


2 
	#_VR_T_STRING_H_


	)

4 
£tGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
, 
robj
 *
key
,Ñobj *
vÆ
,Ñobj *
expúe
, 
unô
,Ñobj *
ok_ª∂y
,Ñobj *
ab‹t_ª∂y
);

5 
£tComm™d
(
˛õ¡
 *
c
);

6 
£äxComm™d
(
˛õ¡
 *
c
);

7 
£ãxComm™d
(
˛õ¡
 *
c
);

8 
p£ãxComm™d
(
˛õ¡
 *
c
);

9 
gëGíîicComm™d
(
˛õ¡
 *
c
);

10 
gëComm™d
(
˛õ¡
 *
c
);

11 
gë£tComm™d
(
˛õ¡
 *
c
);

12 
£å™geComm™d
(
˛õ¡
 *
c
);

13 
gëøngeComm™d
(
˛õ¡
 *
c
);

14 
mgëComm™d
(
˛õ¡
 *
c
);

15 
m£tGíîicComm™d
(
˛õ¡
 *
c
, 
nx
);

16 
m£tComm™d
(
˛õ¡
 *
c
);

17 
m£äxComm™d
(
˛õ¡
 *
c
);

18 
ö¸De¸Comm™d
(
˛õ¡
 *
c
, 
ö¸
);

19 
ö¸Comm™d
(
˛õ¡
 *
c
);

20 
de¸Comm™d
(
˛õ¡
 *
c
);

21 
ö¸byComm™d
(
˛õ¡
 *
c
);

22 
de¸byComm™d
(
˛õ¡
 *
c
);

23 
ö¸byÊﬂtComm™d
(
˛õ¡
 *
c
);

24 
≠≥ndComm™d
(
˛õ¡
 *
c
);

25 
°æíComm™d
(
˛õ¡
 *
c
);

	@src/vr_t_zset.c

1 
	~<vr_c‹e.h
>

3 
z¶LexVÆueGãMö
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
);

4 
z¶LexVÆueLãMax
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
);

6 
zskùli°Node
 *
	$z¶Cª©eNode
(
Àvñ
, 
sc‹e
, 
robj
 *
obj
) {

7 
zskùli°Node
 *
zn
 = 
	`dÆloc
((*zn)+
Àvñ
*(
zskùli°Levñ
));

8 
zn
->
sc‹e
 = score;

9 
zn
->
obj
 = obj;

10  
zn
;

11 
	}
}

13 
zskùli°
 *
	$z¶Cª©e
() {

14 
j
;

15 
zskùli°
 *
z¶
;

17 
z¶
 = 
	`dÆloc
((*zsl));

18 
z¶
->
Àvñ
 = 1;

19 
z¶
->
Àngth
 = 0;

20 
z¶
->
hódî
 = 
	`z¶Cª©eNode
(
ZSKIPLIST_MAXLEVEL
,0,
NULL
);

21 
j
 = 0; j < 
ZSKIPLIST_MAXLEVEL
; j++) {

22 
z¶
->
hódî
->
Àvñ
[
j
].
f‹w¨d
 = 
NULL
;

23 
z¶
->
hódî
->
Àvñ
[
j
].
•™
 = 0;

25 
z¶
->
hódî
->
backw¨d
 = 
NULL
;

26 
z¶
->
èû
 = 
NULL
;

27  
z¶
;

28 
	}
}

30 
	$z¶FªeNode
(
zskùli°Node
 *
node
) {

32 
	`d‰ì
(
node
);

33 
	}
}

35 
	$z¶Fªe
(
zskùli°
 *
z¶
) {

36 
zskùli°Node
 *
node
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
, *
√xt
;

38 
	`d‰ì
(
z¶
->
hódî
);

39 
node
) {

40 
√xt
 = 
node
->
Àvñ
[0].
f‹w¨d
;

41 
	`z¶FªeNode
(
node
);

42 
node
 = 
√xt
;

44 
	`d‰ì
(
z¶
);

45 
	}
}

51 
	$z¶R™domLevñ
() {

52 
Àvñ
 = 1;

53 (
	`øndom
()&0xFFFFË< (
ZSKIPLIST_P
 * 0xFFFF))

54 
Àvñ
 += 1;

55  (
Àvñ
<
ZSKIPLIST_MAXLEVEL
) ?Üevel : ZSKIPLIST_MAXLEVEL;

56 
	}
}

58 
zskùli°Node
 *
	$z¶In£π
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
) {

59 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

60 
ønk
[
ZSKIPLIST_MAXLEVEL
];

61 
i
, 
Àvñ
;

63 
	`ASSERT
(!
	`i¢™
(
sc‹e
));

64 
x
 = 
z¶
->
hódî
;

65 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

67 
ønk
[
i
] = i =(
z¶
->
Àvñ
-1) ? 0 :Ñank[i+1];

68 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

69 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

70 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

71 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,obj) < 0))) {

72 
ønk
[
i
] +
x
->
Àvñ
[i].
•™
;

73 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

75 
upd©e
[
i
] = 
x
;

81 
Àvñ
 = 
	`z¶R™domLevñ
();

82 i‡(
Àvñ
 > 
z¶
->level) {

83 
i
 = 
z¶
->
Àvñ
; i <Üevel; i++) {

84 
ønk
[
i
] = 0;

85 
upd©e
[
i
] = 
z¶
->
hódî
;

86 
upd©e
[
i
]->
Àvñ
[i].
•™
 = 
z¶
->
Àngth
;

88 
z¶
->
Àvñ
 =Üevel;

90 
x
 = 
	`z¶Cª©eNode
(
Àvñ
,
sc‹e
,
obj
);

91 
i
 = 0; i < 
Àvñ
; i++) {

92 
x
->
Àvñ
[
i
].
f‹w¨d
 = 
upd©e
[i]->level[i].forward;

93 
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 = 
x
;

96 
x
->
Àvñ
[
i
].
•™
 = 
upd©e
[i]->Àvñ[i].•™ - (
ønk
[0] -Ñank[i]);

97 
upd©e
[
i
]->
Àvñ
[i].
•™
 = (
ønk
[0] -Ñank[i]) + 1;

101 
i
 = 
Àvñ
; i < 
z¶
->level; i++) {

102 
upd©e
[
i
]->
Àvñ
[i].
•™
++;

105 
x
->
backw¨d
 = (
upd©e
[0] =
z¶
->
hódî
Ë? 
NULL
 : update[0];

106 i‡(
x
->
Àvñ
[0].
f‹w¨d
)

107 
x
->
Àvñ
[0].
f‹w¨d
->
backw¨d
 = x;

109 
z¶
->
èû
 = 
x
;

110 
z¶
->
Àngth
++;

111  
x
;

112 
	}
}

115 
	$z¶DñëeNode
(
zskùli°
 *
z¶
, 
zskùli°Node
 *
x
, zskùli°Nodê**
upd©e
) {

116 
i
;

117 
i
 = 0; i < 
z¶
->
Àvñ
; i++) {

118 i‡(
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 =
x
) {

119 
upd©e
[
i
]->
Àvñ
[i].
•™
 +
x
->level[i].span - 1;

120 
upd©e
[
i
]->
Àvñ
[i].
f‹w¨d
 = 
x
->level[i].forward;

122 
upd©e
[
i
]->
Àvñ
[i].
•™
 -= 1;

125 i‡(
x
->
Àvñ
[0].
f‹w¨d
) {

126 
x
->
Àvñ
[0].
f‹w¨d
->
backw¨d
 = x->backward;

128 
z¶
->
èû
 = 
x
->
backw¨d
;

130 
z¶
->
Àvñ
 > 1 && z¶->
hódî
->Àvñ[z¶->Àvñ-1].
f‹w¨d
 =
NULL
)

131 
z¶
->
Àvñ
--;

132 
z¶
->
Àngth
--;

133 
	}
}

136 
	$z¶Dñëe
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
) {

137 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

138 
i
;

140 
x
 = 
z¶
->
hódî
;

141 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

142 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

143 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

144 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

145 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,obj) < 0)))

146 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

147 
upd©e
[
i
] = 
x
;

151 
x
 = x->
Àvñ
[0].
f‹w¨d
;

152 i‡(
x
 && 
sc‹e
 =x->sc‹ê&& 
	`equÆSåögObje˘s
(x->
obj
,obj)) {

153 
	`z¶DñëeNode
(
z¶
, 
x
, 
upd©e
);

154 
	`z¶FªeNode
(
x
);

158 
	}
}

160 
	$z¶VÆueGãMö
(
vÆue
, 
zønge•ec
 *
•ec
) {

161  
•ec
->
möex
 ? (
vÆue
 > s≥c->
mö
) : (value >= spec->min);

162 
	}
}

164 
	$z¶VÆueLãMax
(
vÆue
, 
zønge•ec
 *
•ec
) {

165  
•ec
->
maxex
 ? (
vÆue
 < s≥c->
max
) : (value <= spec->max);

166 
	}
}

169 
	$z¶IsInR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

170 
zskùli°Node
 *
x
;

173 i‡(
ønge
->
mö
 >Ñ™ge->
max
 ||

174 (
ønge
->
mö
 =ønge->
max
 && (ønge->
möex
 ||Ñ™ge->
maxex
)))

176 
x
 = 
z¶
->
èû
;

177 i‡(
x
 =
NULL
 || !
	`z¶VÆueGãMö
(x->
sc‹e
,
ønge
))

179 
x
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

180 i‡(
x
 =
NULL
 || !
	`z¶VÆueLãMax
(x->
sc‹e
,
ønge
))

183 
	}
}

187 
zskùli°Node
 *
	$z¶Fú°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

188 
zskùli°Node
 *
x
;

189 
i
;

192 i‡(!
	`z¶IsInR™ge
(
z¶
,
ønge
)Ë 
NULL
;

194 
x
 = 
z¶
->
hódî
;

195 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

197 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

198 !
	`z¶VÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
,
ønge
))

199 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

203 
x
 = x->
Àvñ
[0].
f‹w¨d
;

204 
	`ASSERT
(
x
 !
NULL
);

207 i‡(!
	`z¶VÆueLãMax
(
x
->
sc‹e
,
ønge
)Ë 
NULL
;

208  
x
;

209 
	}
}

213 
zskùli°Node
 *
	$z¶La°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
) {

214 
zskùli°Node
 *
x
;

215 
i
;

218 i‡(!
	`z¶IsInR™ge
(
z¶
,
ønge
)Ë 
NULL
;

220 
x
 = 
z¶
->
hódî
;

221 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

223 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

224 
	`z¶VÆueLãMax
(
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
,
ønge
))

225 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

229 
	`ASSERT
(
x
 !
NULL
);

232 i‡(!
	`z¶VÆueGãMö
(
x
->
sc‹e
,
ønge
)Ë 
NULL
;

233  
x
;

234 
	}
}

240 
	$z¶DñëeR™geBySc‹e
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
, 
di˘
 *dict) {

241 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

242 
ªmoved
 = 0;

243 
i
;

245 
x
 = 
z¶
->
hódî
;

246 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

247 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
ønge
->
möex
 ?

248 
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 <
ønge
->
mö
 :

249 
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < 
ønge
->
mö
))

250 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

251 
upd©e
[
i
] = 
x
;

255 
x
 = x->
Àvñ
[0].
f‹w¨d
;

258 
x
 &&

259 (
ønge
->
maxex
 ? 
x
->
sc‹e
 <Ñ™ge->
max
 : x->score <=Ñange->max))

261 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

262 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

263 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

264 
	`z¶FªeNode
(
x
);

265 
ªmoved
++;

266 
x
 = 
√xt
;

268  
ªmoved
;

269 
	}
}

271 
	$z¶DñëeR™geByLex
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
, 
di˘
 *dict) {

272 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

273 
ªmoved
 = 0;

274 
i
;

277 
x
 = 
z¶
->
hódî
;

278 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

279 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

280 !
	`z¶LexVÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

281 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

282 
upd©e
[
i
] = 
x
;

286 
x
 = x->
Àvñ
[0].
f‹w¨d
;

289 
x
 && 
	`z¶LexVÆueLãMax
(x->
obj
,
ønge
)) {

290 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

291 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

292 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

293 
	`z¶FªeNode
(
x
);

294 
ªmoved
++;

295 
x
 = 
√xt
;

297  
ªmoved
;

298 
	}
}

302 
	$z¶DñëeR™geByR™k
(
zskùli°
 *
z¶
, 
°¨t
, 
íd
, 
di˘
 *dict) {

303 
zskùli°Node
 *
upd©e
[
ZSKIPLIST_MAXLEVEL
], *
x
;

304 
åavî£d
 = 0, 
ªmoved
 = 0;

305 
i
;

307 
x
 = 
z¶
->
hódî
;

308 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

309 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
åavî£d
 + x->Àvñ[i].
•™
Ë< 
°¨t
) {

310 
åavî£d
 +
x
->
Àvñ
[
i
].
•™
;

311 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

313 
upd©e
[
i
] = 
x
;

316 
åavî£d
++;

317 
x
 = x->
Àvñ
[0].
f‹w¨d
;

318 
x
 && 
åavî£d
 <
íd
) {

319 
zskùli°Node
 *
√xt
 = 
x
->
Àvñ
[0].
f‹w¨d
;

320 
	`z¶DñëeNode
(
z¶
,
x
,
upd©e
);

321 
	`di˘Dñëe
(
di˘
,
x
->
obj
);

322 
	`z¶FªeNode
(
x
);

323 
ªmoved
++;

324 
åavî£d
++;

325 
x
 = 
√xt
;

327  
ªmoved
;

328 
	}
}

334 
	$z¶GëR™k
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
o
) {

335 
zskùli°Node
 *
x
;

336 
ønk
 = 0;

337 
i
;

339 
x
 = 
z¶
->
hódî
;

340 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

341 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

342 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 < score ||

343 (
x
->
Àvñ
[
i
].
f‹w¨d
->
sc‹e
 == score &&

344 
	`com∑ªSåögObje˘s
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
o
) <= 0))) {

345 
ønk
 +
x
->
Àvñ
[
i
].
•™
;

346 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

350 i‡(
x
->
obj
 && 
	`equÆSåögObje˘s
(x->obj,
o
)) {

351  
ønk
;

355 
	}
}

358 
zskùli°Node
* 
	$z¶GëEÀmítByR™k
(
zskùli°
 *
z¶
, 
ønk
) {

359 
zskùli°Node
 *
x
;

360 
åavî£d
 = 0;

361 
i
;

363 
x
 = 
z¶
->
hódî
;

364 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

365 
x
->
Àvñ
[
i
].
f‹w¨d
 && (
åavî£d
 + x->Àvñ[i].
•™
Ë<
ønk
)

367 
åavî£d
 +
x
->
Àvñ
[
i
].
•™
;

368 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

370 i‡(
åavî£d
 =
ønk
) {

371  
x
;

374  
NULL
;

375 
	}
}

378 
	$z¶P¨£R™ge
(
robj
 *
mö
,Ñobj *
max
, 
zønge•ec
 *
•ec
) {

379 *
ïå
;

380 
•ec
->
möex
 = s≥c->
maxex
 = 0;

386 i‡(
mö
->
ícodög
 =
OBJ_ENCODING_INT
) {

387 
•ec
->
mö
 = ()mö->
±r
;

389 i‡(((*)
mö
->
±r
)[0] == '(') {

390 
•ec
->
mö
 = 
	`°πod
((*)mö->
±r
+1,&
ïå
);

391 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
mö
)Ë 
VR_ERROR
;

392 
•ec
->
möex
 = 1;

394 
•ec
->
mö
 = 
	`°πod
((*)mö->
±r
,&
ïå
);

395 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
mö
)Ë 
VR_ERROR
;

398 i‡(
max
->
ícodög
 =
OBJ_ENCODING_INT
) {

399 
•ec
->
max
 = ()max->
±r
;

401 i‡(((*)
max
->
±r
)[0] == '(') {

402 
•ec
->
max
 = 
	`°πod
((*)max->
±r
+1,&
ïå
);

403 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
max
)Ë 
VR_ERROR
;

404 
•ec
->
maxex
 = 1;

406 
•ec
->
max
 = 
	`°πod
((*)max->
±r
,&
ïå
);

407 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
•ec
->
max
)Ë 
VR_ERROR
;

411  
VR_OK
;

412 
	}
}

429 
	$z¶P¨£LexR™geIãm
(
robj
 *
ôem
,Ñobj **
de°
, *
ex
) {

430 *
c
 = 
ôem
->
±r
;

432 
c
[0]) {

434 i‡(
c
[1] !'\0'Ë 
VR_ERROR
;

435 *
ex
 = 0;

436 *
de°
 = 
	`dupSåögObje˘Unc⁄°™t
(
sh¨ed
.
max°rög
);

437  
VR_OK
;

439 i‡(
c
[1] !'\0'Ë 
VR_ERROR
;

440 *
ex
 = 0;

441 *
de°
 = 
	`dupSåögObje˘Unc⁄°™t
(
sh¨ed
.
mö°rög
);

442  
VR_OK
;

444 *
ex
 = 1;

445 *
de°
 = 
	`¸óãSåögObje˘
(
c
+1,
	`sd¶í
(c)-1);

446  
VR_OK
;

448 *
ex
 = 0;

449 *
de°
 = 
	`¸óãSåögObje˘
(
c
+1,
	`sd¶í
(c)-1);

450  
VR_OK
;

452  
VR_ERROR
;

454 
	}
}

461 
	$z¶P¨£LexR™ge
(
robj
 *
mö
,Ñobj *
max
, 
zÀxønge•ec
 *
•ec
) {

464 i‡(
mö
->
ícodög
 =
OBJ_ENCODING_INT
 ||

465 
max
->
ícodög
 =
OBJ_ENCODING_INT
Ë 
VR_ERROR
;

467 
•ec
->
mö
 = s≥c->
max
 = 
NULL
;

468 i‡(
	`z¶P¨£LexR™geIãm
(
mö
, &
•ec
->mö, &•ec->
möex
Ë=
VR_ERROR
 ||

469 
	`z¶P¨£LexR™geIãm
(
max
, &
•ec
->max, &•ec->
maxex
Ë=
VR_ERROR
) {

470 i‡(
•ec
->
mö
Ë
	`‰ìObje˘
(spec->min);

471 i‡(
•ec
->
max
Ë
	`‰ìObje˘
(spec->max);

472  
VR_ERROR
;

474  
VR_OK
;

476 
	}
}

480 
	$z¶FªeLexR™ge
(
zÀxønge•ec
 *
•ec
) {

481 
	`‰ìObje˘
(
•ec
->
mö
);

482 
	`‰ìObje˘
(
•ec
->
max
);

483 
	}
}

488 
	$com∑ªSåögObje˘sF‹LexR™ge
(
robj
 *
a
,Ñobj *
b
) {

489 i‡(
a
 =
b
)  0;

491 i‡(
a
 =
sh¨ed
.
mö°rög
 || 
b
 =sh¨ed.
max°rög
)  -1;

492 i‡(
a
 =
sh¨ed
.
max°rög
 || 
b
 =sh¨ed.
mö°rög
)  1;

493  
	`com∑ªSåögObje˘s
(
a
,
b
);

494 
	}
}

496 
	$z¶LexVÆueGãMö
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
) {

497  
•ec
->
möex
 ?

498 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
mö
) > 0) :

499 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
mö
) >= 0);

500 
	}
}

502 
	$z¶LexVÆueLãMax
(
robj
 *
vÆue
, 
zÀxønge•ec
 *
•ec
) {

503  
•ec
->
maxex
 ?

504 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
max
) < 0) :

505 (
	`com∑ªSåögObje˘sF‹LexR™ge
(
vÆue
,
•ec
->
max
) <= 0);

506 
	}
}

509 
	$z¶IsInLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

510 
zskùli°Node
 *
x
;

513 i‡(
	`com∑ªSåögObje˘sF‹LexR™ge
(
ønge
->
mö
,ønge->
max
) > 1 ||

514 (
	`com∑ªSåögObje˘s
(
ønge
->
mö
,ønge->
max
) == 0 &&

515 (
ønge
->
möex
 ||Ñ™ge->
maxex
)))

517 
x
 = 
z¶
->
èû
;

518 i‡(
x
 =
NULL
 || !
	`z¶LexVÆueGãMö
(x->
obj
,
ønge
))

520 
x
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

521 i‡(
x
 =
NULL
 || !
	`z¶LexVÆueLãMax
(x->
obj
,
ønge
))

524 
	}
}

528 
zskùli°Node
 *
	$z¶Fú°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

529 
zskùli°Node
 *
x
;

530 
i
;

533 i‡(!
	`z¶IsInLexR™ge
(
z¶
,
ønge
)Ë 
NULL
;

535 
x
 = 
z¶
->
hódî
;

536 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

538 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

539 !
	`z¶LexVÆueGãMö
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

540 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

544 
x
 = x->
Àvñ
[0].
f‹w¨d
;

545 
	`ASSERT
(
x
 !
NULL
);

548 i‡(!
	`z¶LexVÆueLãMax
(
x
->
obj
,
ønge
)Ë 
NULL
;

549  
x
;

550 
	}
}

554 
zskùli°Node
 *
	$z¶La°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
) {

555 
zskùli°Node
 *
x
;

556 
i
;

559 i‡(!
	`z¶IsInLexR™ge
(
z¶
,
ønge
)Ë 
NULL
;

561 
x
 = 
z¶
->
hódî
;

562 
i
 = 
z¶
->
Àvñ
-1; i >= 0; i--) {

564 
x
->
Àvñ
[
i
].
f‹w¨d
 &&

565 
	`z¶LexVÆueLãMax
(
x
->
Àvñ
[
i
].
f‹w¨d
->
obj
,
ønge
))

566 
x
 = x->
Àvñ
[
i
].
f‹w¨d
;

570 
	`ASSERT
(
x
 !
NULL
);

573 i‡(!
	`z¶LexVÆueGãMö
(
x
->
obj
,
ønge
)Ë 
NULL
;

574  
x
;

575 
	}
}

581 
	$zzlGëSc‹e
(*
•å
) {

582 
ªt
;

583 *
v°r
;

584 
vÀn
;

585 
vl⁄g
;

586 
buf
[128];

587 
sc‹e
;

589 
	`ASSERT
(
•å
 !
NULL
);

591 
ªt
 = ()
	`zùli°Gë
(
•å
,&
v°r
,&
vÀn
,&
vl⁄g
);

592 
	`ASSERT
(
ªt
 > 0);

594 i‡(
v°r
) {

595 
	`mem˝y
(
buf
,
v°r
,
vÀn
);

596 
buf
[
vÀn
] = '\0';

597 
sc‹e
 = 
	`°πod
(
buf
,
NULL
);

599 
sc‹e
 = 
vl⁄g
;

602  
sc‹e
;

603 
	}
}

608 
robj
 *
	$zùli°GëObje˘
(*
•å
) {

609 
ªt
;

610 *
v°r
;

611 
vÀn
;

612 
vl⁄g
;

614 
	`ASSERT
(
•å
 !
NULL
);

616 
ªt
 = ()
	`zùli°Gë
(
•å
,&
v°r
,&
vÀn
,&
vl⁄g
);

617 
	`ASSERT
(
ªt
 > 0);

619 i‡(
v°r
) {

620  
	`¸óãSåögObje˘
((*)
v°r
,
vÀn
);

622  
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

624 
	}
}

627 
	$zzlCom∑ªEÀmíts
(*
ïå
, *
c°r
, 
˛í
) {

628 
ªt
;

629 *
v°r
;

630 
vÀn
;

631 
vl⁄g
;

632 
vbuf
[32];

633 
möÀn
, 
cmp
;

635 
ªt
 = ()
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
);

636 
	`ASSERT
(
ªt
 > 0);

637 i‡(
v°r
 =
NULL
) {

639 
vÀn
 = 
	`Œ2°rög
((*)
vbuf
,(vbuf),
vl⁄g
);

640 
v°r
 = 
vbuf
;

643 
möÀn
 = (
vÀn
 < 
˛í
) ? vlen : clen;

644 
cmp
 = 
	`memcmp
(
v°r
,
c°r
,
möÀn
);

645 i‡(
cmp
 =0Ë 
vÀn
-
˛í
;

646  
cmp
;

647 
	}
}

649 
	$zzlLígth
(*
zl
) {

650  
	`zùli°Lí
(
zl
)/2;

651 
	}
}

655 
	$zzlNext
(*
zl
, **
ïå
, **
•å
) {

656 *
_ïå
, *
_•å
;

657 
	`ASSERT
(*
ïå
 !
NULL
 && *
•å
 != NULL);

659 
_ïå
 = 
	`zùli°Next
(
zl
,*
•å
);

660 i‡(
_ïå
 !
NULL
) {

661 
_•å
 = 
	`zùli°Next
(
zl
,
_ïå
);

662 
	`ASSERT
(
_•å
 !
NULL
);

665 
_•å
 = 
NULL
;

668 *
ïå
 = 
_ïå
;

669 *
•å
 = 
_•å
;

670 
	}
}

674 
	$zzlPªv
(*
zl
, **
ïå
, **
•å
) {

675 *
_ïå
, *
_•å
;

676 
	`ASSERT
(*
ïå
 !
NULL
 && *
•å
 != NULL);

678 
_•å
 = 
	`zùli°Pªv
(
zl
,*
ïå
);

679 i‡(
_•å
 !
NULL
) {

680 
_ïå
 = 
	`zùli°Pªv
(
zl
,
_•å
);

681 
	`ASSERT
(
_ïå
 !
NULL
);

684 
_ïå
 = 
NULL
;

687 *
ïå
 = 
_ïå
;

688 *
•å
 = 
_•å
;

689 
	}
}

693 
	$zzlIsInR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

694 *
p
;

695 
sc‹e
;

698 i‡(
ønge
->
mö
 >Ñ™ge->
max
 ||

699 (
ønge
->
mö
 =ønge->
max
 && (ønge->
möex
 ||Ñ™ge->
maxex
)))

702 
p
 = 
	`zùli°Index
(
zl
,-1);

703 i‡(
p
 =
NULL
)  0;

704 
sc‹e
 = 
	`zzlGëSc‹e
(
p
);

705 i‡(!
	`z¶VÆueGãMö
(
sc‹e
,
ønge
))

708 
p
 = 
	`zùli°Index
(
zl
,1);

709 
	`ASSERT
(
p
 !
NULL
);

710 
sc‹e
 = 
	`zzlGëSc‹e
(
p
);

711 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,
ønge
))

715 
	}
}

719 *
	$zzlFú°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

720 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

721 
sc‹e
;

724 i‡(!
	`zzlIsInR™ge
(
zl
,
ønge
)Ë 
NULL
;

726 
ïå
 !
NULL
) {

727 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

728 
	`ASSERT
(
•å
 !
NULL
);

730 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

731 i‡(
	`z¶VÆueGãMö
(
sc‹e
,
ønge
)) {

733 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
))

734  
ïå
;

735  
NULL
;

739 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

742  
NULL
;

743 
	}
}

747 *
	$zzlLa°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
) {

748 *
ïå
 = 
	`zùli°Index
(
zl
,-2), *
•å
;

749 
sc‹e
;

752 i‡(!
	`zzlIsInR™ge
(
zl
,
ønge
)Ë 
NULL
;

754 
ïå
 !
NULL
) {

755 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

756 
	`ASSERT
(
•å
 !
NULL
);

758 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

759 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
)) {

761 i‡(
	`z¶VÆueGãMö
(
sc‹e
,
ønge
))

762  
ïå
;

763  
NULL
;

768 
•å
 = 
	`zùli°Pªv
(
zl
,
ïå
);

769 i‡(
•å
 !
NULL
) {

770 
ïå
 = 
	`zùli°Pªv
(
zl
,
•å
);

771 
	`ASSERT
(
ïå
 !
NULL
);

773 
ïå
 = 
NULL
;

777  
NULL
;

778 
	}
}

780 
	$zzlLexVÆueGãMö
(*
p
, 
zÀxønge•ec
 *
•ec
) {

781 
robj
 *
vÆue
 = 
	`zùli°GëObje˘
(
p
);

782 
ªs
 = 
	`z¶LexVÆueGãMö
(
vÆue
,
•ec
);

783 
	`‰ìObje˘
(
vÆue
);

784  
ªs
;

785 
	}
}

787 
	$zzlLexVÆueLãMax
(*
p
, 
zÀxønge•ec
 *
•ec
) {

788 
robj
 *
vÆue
 = 
	`zùli°GëObje˘
(
p
);

789 
ªs
 = 
	`z¶LexVÆueLãMax
(
vÆue
,
•ec
);

790 
	`‰ìObje˘
(
vÆue
);

791  
ªs
;

792 
	}
}

796 
	$zzlIsInLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

797 *
p
;

800 i‡(
	`com∑ªSåögObje˘sF‹LexR™ge
(
ønge
->
mö
,ønge->
max
) > 1 ||

801 (
	`com∑ªSåögObje˘s
(
ønge
->
mö
,ønge->
max
) == 0 &&

802 (
ønge
->
möex
 ||Ñ™ge->
maxex
)))

805 
p
 = 
	`zùli°Index
(
zl
,-2);

806 i‡(
p
 =
NULL
)  0;

807 i‡(!
	`zzlLexVÆueGãMö
(
p
,
ønge
))

810 
p
 = 
	`zùli°Index
(
zl
,0);

811 
	`ASSERT
(
p
 !
NULL
);

812 i‡(!
	`zzlLexVÆueLãMax
(
p
,
ønge
))

816 
	}
}

820 *
	$zzlFú°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

821 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

824 i‡(!
	`zzlIsInLexR™ge
(
zl
,
ønge
)Ë 
NULL
;

826 
ïå
 !
NULL
) {

827 i‡(
	`zzlLexVÆueGãMö
(
ïå
,
ønge
)) {

829 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
))

830  
ïå
;

831  
NULL
;

835 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

836 
	`ASSERT
(
•å
 !
NULL
);

837 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

840  
NULL
;

841 
	}
}

845 *
	$zzlLa°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
) {

846 *
ïå
 = 
	`zùli°Index
(
zl
,-2), *
•å
;

849 i‡(!
	`zzlIsInLexR™ge
(
zl
,
ønge
)Ë 
NULL
;

851 
ïå
 !
NULL
) {

852 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
)) {

854 i‡(
	`zzlLexVÆueGãMö
(
ïå
,
ønge
))

855  
ïå
;

856  
NULL
;

861 
•å
 = 
	`zùli°Pªv
(
zl
,
ïå
);

862 i‡(
•å
 !
NULL
) {

863 
ïå
 = 
	`zùli°Pªv
(
zl
,
•å
);

864 
	`ASSERT
(
ïå
 !
NULL
);

866 
ïå
 = 
NULL
;

870  
NULL
;

871 
	}
}

873 *
	$zzlFöd
(*
zl
, 
robj
 *
ñe
, *
sc‹e
) {

874 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

875 
robj
 *
ñe_√w
;

877 
ñe_√w
 = 
	`gëDecodedObje˘
(
ñe
);

878 
ïå
 !
NULL
) {

879 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

880 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe_√w
,
•å
 != NULL);

882 i‡(
	`zùli°Com∑ª
(
ïå
,
ñe_√w
->
±r
,
	`sd¶í
(ele_new->ptr))) {

884 i‡(
sc‹e
 !
NULL
Ë*sc‹ê
	`zzlGëSc‹e
(
•å
);

885 i‡(
ñe_√w
!
ñe
Ë
	`‰ìObje˘
(ele_new);

886  
ïå
;

890 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

893 i‡(
ñe_√w
!
ñe
Ë
	`‰ìObje˘
(ele_new);

894  
NULL
;

895 
	}
}

899 *
	$zzlDñëe
(*
zl
, *
ïå
) {

900 *
p
 = 
ïå
;

903 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

904 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

905  
zl
;

906 
	}
}

908 *
	$zzlIn£πAt
(*
zl
, *
ïå
, 
robj
 *
ñe
, 
sc‹e
) {

909 *
•å
;

910 
sc‹ebuf
[128];

911 
sc‹ñí
;

912 
size_t
 
off£t
;

914 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe
,
	`sdsEncodedObje˘
(ele));

915 
sc‹ñí
 = 
	`d2°rög
(
sc‹ebuf
,(sc‹ebuf),
sc‹e
);

916 i‡(
ïå
 =
NULL
) {

917 
zl
 = 
	`zùli°Push
(zl,
ñe
->
±r
,
	`sd¶í
”À->±r),
ZIPLIST_TAIL
);

918 
zl
 = 
	`zùli°Push
(zl,(*)
sc‹ebuf
,
sc‹ñí
,
ZIPLIST_TAIL
);

921 
off£t
 = 
ïå
-
zl
;

922 
zl
 = 
	`zùli°In£π
(zl,
ïå
,
ñe
->
±r
,
	`sd¶í
(ele->ptr));

923 
ïå
 = 
zl
+
off£t
;

926 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe
,(
•å
 = 
	`zùli°Next
(
zl
,
ïå
)) != NULL);

927 
zl
 = 
	`zùli°In£π
(zl,
•å
,(*)
sc‹ebuf
,
sc‹ñí
);

930  
zl
;

931 
	}
}

935 *
	$zzlIn£π
(*
zl
, 
robj
 *
ñe
, 
sc‹e
) {

936 *
ïå
 = 
	`zùli°Index
(
zl
,0), *
•å
;

937 
s
;

938 
robj
 *
ñe_√w
;

940 
ñe_√w
 = 
	`gëDecodedObje˘
(
ñe
);

941 
ïå
 !
NULL
) {

942 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

943 
	`£rvîAs£πWôhInfo
(
NULL
,
ñe_√w
,
•å
 != NULL);

944 
s
 = 
	`zzlGëSc‹e
(
•å
);

946 i‡(
s
 > 
sc‹e
) {

950 
zl
 = 
	`zzlIn£πAt
(zl,
ïå
,
ñe_√w
,
sc‹e
);

952 } i‡(
s
 =
sc‹e
) {

954 i‡(
	`zzlCom∑ªEÀmíts
(
ïå
,
ñe_√w
->
±r
,
	`sd¶í
(ele_new->ptr)) > 0) {

955 
zl
 = 
	`zzlIn£πAt
(zl,
ïå
,
ñe_√w
,
sc‹e
);

961 
ïå
 = 
	`zùli°Next
(
zl
,
•å
);

965 i‡(
ïå
 =
NULL
)

966 
zl
 = 
	`zzlIn£πAt
(zl,
NULL
,
ñe_√w
,
sc‹e
);

968 i‡(
ñe_√w
 !
ñe
Ë
	`‰ìObje˘
(ele_new);

969  
zl
;

970 
	}
}

972 *
	$zzlDñëeR™geBySc‹e
(*
zl
, 
zønge•ec
 *
ønge
, *
dñëed
) {

973 *
ïå
, *
•å
;

974 
sc‹e
;

975 
num
 = 0;

977 i‡(
dñëed
 !
NULL
) *deleted = 0;

979 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,
ønge
);

980 i‡(
ïå
 =
NULL
Ë 
zl
;

984 (
•å
 = 
	`zùli°Next
(
zl
,
ïå
)Ë!
NULL
) {

985 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

986 i‡(
	`z¶VÆueLãMax
(
sc‹e
,
ønge
)) {

988 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

989 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

990 
num
++;

997 i‡(
dñëed
 !
NULL
Ë*dñëed = 
num
;

998  
zl
;

999 
	}
}

1001 *
	$zzlDñëeR™geByLex
(*
zl
, 
zÀxønge•ec
 *
ønge
, *
dñëed
) {

1002 *
ïå
, *
•å
;

1003 
num
 = 0;

1005 i‡(
dñëed
 !
NULL
) *deleted = 0;

1007 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,
ønge
);

1008 i‡(
ïå
 =
NULL
Ë 
zl
;

1012 (
•å
 = 
	`zùli°Next
(
zl
,
ïå
)Ë!
NULL
) {

1013 i‡(
	`zzlLexVÆueLãMax
(
ïå
,
ønge
)) {

1015 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

1016 
zl
 = 
	`zùli°Dñëe
(zl,&
ïå
);

1017 
num
++;

1024 i‡(
dñëed
 !
NULL
Ë*dñëed = 
num
;

1025  
zl
;

1026 
	}
}

1030 *
	$zzlDñëeR™geByR™k
(*
zl
, 
°¨t
, 
íd
, *
dñëed
) {

1031 
num
 = (
íd
-
°¨t
)+1;

1032 i‡(
dñëed
Ë*dñëed = 
num
;

1033 
zl
 = 
	`zùli°DñëeR™ge
(zl,2*(
°¨t
-1),2*
num
);

1034  
zl
;

1035 
	}
}

1041 
	$z£tLígth
(
robj
 *
zobj
) {

1042 
Àngth
 = -1;

1043 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1044 
Àngth
 = 
	`zzlLígth
(
zobj
->
±r
);

1045 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1046 
Àngth
 = ((
z£t
*)
zobj
->
±r
)->
z¶
->length;

1048 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1050  
Àngth
;

1051 
	}
}

1053 
	$z£tC⁄vît
(
robj
 *
zobj
, 
ícodög
) {

1054 
z£t
 *
zs
;

1055 
zskùli°Node
 *
node
, *
√xt
;

1056 
robj
 *
ñe
;

1057 
sc‹e
;

1059 i‡(
zobj
->
ícodög
 ==Éncoding) ;

1060 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1061 *
zl
 = 
zobj
->
±r
;

1062 *
ïå
, *
•å
;

1063 *
v°r
;

1064 
vÀn
;

1065 
vl⁄g
;

1067 i‡(
ícodög
 !
OBJ_ENCODING_SKIPLIST
)

1068 
	`£rvîP™ic
("UnknownÅargetÉncoding");

1070 
zs
 = 
	`dÆloc
((*zs));

1071 
zs
->
di˘
 = 
	`di˘Cª©e
(&
z£tDi˘Ty≥
,
NULL
);

1072 
zs
->
z¶
 = 
	`z¶Cª©e
();

1074 
ïå
 = 
	`zùli°Index
(
zl
,0);

1075 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
ïå
 != NULL);

1076 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

1077 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
•å
 != NULL);

1079 
ïå
 !
NULL
) {

1080 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

1081 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

1082 i‡(
v°r
 =
NULL
)

1083 
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(
vl⁄g
);

1085 
ñe
 = 
	`¸óãSåögObje˘
((*)
v°r
,
vÀn
);

1088 
node
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
ñe
);

1089 
	`£rvîAs£πWôhInfo
(
NULL
,
zobj
,
	`di˘Add
(
zs
->
di˘
,
ñe
,&
node
->
sc‹e
Ë=
DICT_OK
);

1090 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

1093 
	`d‰ì
(
zobj
->
±r
);

1094 
zobj
->
±r
 = 
zs
;

1095 
zobj
->
ícodög
 = 
OBJ_ENCODING_SKIPLIST
;

1096 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1097 *
zl
 = 
	`zùli°New
();

1099 i‡(
ícodög
 !
OBJ_ENCODING_ZIPLIST
)

1100 
	`£rvîP™ic
("UnknownÅargetÉncoding");

1104 
zs
 = 
zobj
->
±r
;

1105 
node
 = 
zs
->
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

1106 
	`d‰ì
(
zs
->
z¶
->
hódî
);

1107 
	`d‰ì
(
zs
->
z¶
);

1109 
node
) {

1110 
ñe
 = 
	`gëDecodedObje˘
(
node
->
obj
);

1111 
zl
 = 
	`zzlIn£πAt
(zl,
NULL
,
ñe
,
node
->
sc‹e
);

1112 i‡(
ñe
 !
node
->
obj
Ë
	`‰ìObje˘
(ele);

1113 
√xt
 = 
node
->
Àvñ
[0].
f‹w¨d
;

1114 
	`z¶FªeNode
(
node
);

1115 
node
 = 
√xt
;

1118 
	`di˘Rñó£
(
zs
->
di˘
);

1119 
	`d‰ì
(
zs
);

1120 
zobj
->
±r
 = 
zl
;

1121 
zobj
->
ícodög
 = 
OBJ_ENCODING_ZIPLIST
;

1123 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1125 
	}
}

1130 
	$z£tC⁄vîtToZùli°IfNìded
(
robj
 *
zobj
, 
size_t
 
maxññí
) {

1131 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) ;

1132 
z£t
 *z£à
zobj
->
±r
;

1134 i‡(
z£t
->
z¶
->
Àngth
 <
£rvî
.
z£t_max_zùli°_íåõs
 &&

1135 
maxññí
 <
£rvî
.
z£t_max_zùli°_vÆue
)

1136 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_ZIPLIST
);

1137 
	}
}

1143 
	$z£tSc‹e
(
robj
 *
zobj
,Ñobj *
membî
, *
sc‹e
) {

1144 i‡(!
zobj
 || !
membî
Ë 
VR_ERROR
;

1146 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1147 i‡(
	`zzlFöd
(
zobj
->
±r
, 
membî
, 
sc‹e
Ë=
NULL
Ë 
VR_ERROR
;

1148 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1149 
z£t
 *
zs
 = 
zobj
->
±r
;

1150 
di˘E¡ry
 *
de
 = 
	`di˘Föd
(
zs
->
di˘
, 
membî
);

1151 i‡(
de
 =
NULL
Ë 
VR_ERROR
;

1152 *
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1154 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1156  
VR_OK
;

1157 
	}
}

1164 
	#ZADD_NONE
 0

	)

1165 
	#ZADD_INCR
 (1<<0Ë

	)

1166 
	#ZADD_NX
 (1<<1Ë

	)

1167 
	#ZADD_XX
 (1<<2Ë

	)

1168 
	#ZADD_CH
 (1<<3Ë

	)

1170 
	$zaddGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
) {

1171 *
«√º
 = "resulting score isÇotáÇumber (NaN)";

1172 
robj
 *
key
 = 
c
->
¨gv
[1];

1173 
robj
 *
ñe
;

1174 
robj
 *
zobj
;

1175 
robj
 *
curobj
;

1176 
sc‹e
 = 0, *
sc‹es
 = 
NULL
, 
cursc‹e
 = 0.0;

1177 
j
, 
ñemíts
;

1178 
sc‹eidx
 = 0;

1182 
added
 = 0;

1183 
upd©ed
 = 0;

1184 
¥o˚s£d
 = 0;

1186 
expúed
 = 0;

1190 
sc‹eidx
 = 2;

1191 
sc‹eidx
 < 
c
->
¨gc
) {

1192 *
›t
 = 
c
->
¨gv
[
sc‹eidx
]->
±r
;

1193 i‡(!
	`°rˇ£cmp
(
›t
,"nx")Ë
Êags
 |
ZADD_NX
;

1194 i‡(!
	`°rˇ£cmp
(
›t
,"xx")Ë
Êags
 |
ZADD_XX
;

1195 i‡(!
	`°rˇ£cmp
(
›t
,"ch")Ë
Êags
 |
ZADD_CH
;

1196 i‡(!
	`°rˇ£cmp
(
›t
,"ö¸")Ë
Êags
 |
ZADD_INCR
;

1198 
sc‹eidx
++;

1202 
ö¸
 = (
Êags
 & 
ZADD_INCR
) != 0;

1203 
nx
 = (
Êags
 & 
ZADD_NX
) != 0;

1204 
xx
 = (
Êags
 & 
ZADD_XX
) != 0;

1205 
ch
 = (
Êags
 & 
ZADD_CH
) != 0;

1209 
ñemíts
 = 
c
->
¨gc
-
sc‹eidx
;

1210 i‡(
ñemíts
 % 2) {

1211 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1214 
ñemíts
 /= 2;

1217 i‡(
nx
 && 
xx
) {

1218 
	`addRïlyEº‹
(
c
,

1223 i‡(
ö¸
 && 
ñemíts
 > 1) {

1224 
	`addRïlyEº‹
(
c
,

1232 
sc‹es
 = 
	`dÆloc
(()*
ñemíts
);

1233 
j
 = 0; j < 
ñemíts
; j++) {

1234 i‡(
	`gëDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[
sc‹eidx
+
j
*2],&
sc‹es
[j],
NULL
)

1235 !
VR_OK
Ë
˛ónup
;

1238 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1239 
	`lockDbWrôe
(
c
->
db
);

1241 
zobj
 = 
	`lookupKeyWrôe
(
c
->
db
,
key
,&
expúed
);

1242 i‡(
zobj
 =
NULL
) {

1243 i‡(
xx
) {

1244 
	`u∆ockDb
(
c
->
db
);

1245 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1246 
ª∂y_to_˛õ¡
;

1248 i‡(
£rvî
.
z£t_max_zùli°_íåõs
 == 0 ||

1249 
£rvî
.
z£t_max_zùli°_vÆue
 < 
	`sd¶í
(
c
->
¨gv
[
sc‹eidx
+1]->
±r
))

1251 
zobj
 = 
	`¸óãZ£tObje˘
();

1253 
zobj
 = 
	`¸óãZ£tZùli°Obje˘
();

1255 
	`dbAdd
(
c
->
db
,
key
,
zobj
);

1257 i‡(
zobj
->
ty≥
 !
OBJ_ZSET
) {

1258 
	`u∆ockDb
(
c
->
db
);

1259 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1260 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

1261 
˛ónup
;

1265 
j
 = 0; j < 
ñemíts
; j++) {

1266 
sc‹e
 = 
sc‹es
[
j
];

1268 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1269 *
ïå
;

1272 
ñe
 = 
c
->
¨gv
[
sc‹eidx
+1+
j
*2];

1273 i‡((
ïå
 = 
	`zzlFöd
(
zobj
->
±r
,
ñe
,&
cursc‹e
)Ë!
NULL
) {

1274 i‡(
nx
) ;

1275 i‡(
ö¸
) {

1276 
sc‹e
 +
cursc‹e
;

1277 i‡(
	`i¢™
(
sc‹e
)) {

1278 
	`u∆ockDb
(
c
->
db
);

1279 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1280 
	`addRïlyEº‹
(
c
,
«√º
);

1281 
˛ónup
;

1286 i‡(
sc‹e
 !
cursc‹e
) {

1287 
zobj
->
±r
 = 
	`zzlDñëe
(zobj->±r,
ïå
);

1288 
zobj
->
±r
 = 
	`zzlIn£π
(zobj->±r,
ñe
,
sc‹e
);

1289 
c
->
vñ
->
dúty
++;

1290 
upd©ed
++;

1292 
¥o˚s£d
++;

1293 } i‡(!
xx
) {

1296 
zobj
->
±r
 = 
	`zzlIn£π
(zobj->±r,
ñe
,
sc‹e
);

1297 i‡(
	`zzlLígth
(
zobj
->
±r
Ë> 
£rvî
.
z£t_max_zùli°_íåõs
)

1298 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_SKIPLIST
);

1299 i‡(
	`sd¶í
(
ñe
->
±r
Ë> 
£rvî
.
z£t_max_zùli°_vÆue
)

1300 
	`z£tC⁄vît
(
zobj
,
OBJ_ENCODING_SKIPLIST
);

1301 
c
->
vñ
->
dúty
++;

1302 
added
++;

1303 
¥o˚s£d
++;

1305 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1306 
z£t
 *
zs
 = 
zobj
->
±r
;

1307 
zskùli°Node
 *
znode
;

1308 
di˘E¡ry
 *
de
;

1310 
ñe
 = 
c
->
¨gv
[
sc‹eidx
+1+
j
*2] =

1311 
	`åyObje˘Encodög
(
c
->
¨gv
[
sc‹eidx
+1+
j
*2]);

1312 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
ñe
);

1313 i‡(
de
 !
NULL
) {

1314 i‡(
nx
) ;

1315 
curobj
 = 
	`di˘GëKey
(
de
);

1316 
cursc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1318 i‡(
ö¸
) {

1319 
sc‹e
 +
cursc‹e
;

1320 i‡(
	`i¢™
(
sc‹e
)) {

1321 
	`u∆ockDb
(
c
->
db
);

1322 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1323 
	`addRïlyEº‹
(
c
,
«√º
);

1326 
˛ónup
;

1333 i‡(
sc‹e
 !
cursc‹e
) {

1334 
	`£rvîAs£πWôhInfo
(
c
,
curobj
,
	`z¶Dñëe
(
zs
->
z¶
,
cursc‹e
,curobj));

1335 
znode
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
curobj
);

1336 
	`di˘GëVÆ
(
de
Ë&
znode
->
sc‹e
;

1337 
c
->
vñ
->
dúty
++;

1338 
upd©ed
++;

1340 
¥o˚s£d
++;

1341 } i‡(!
xx
) {

1342 
ñe
 = 
	`dupSåögObje˘Unc⁄°™t
(ele);

1343 
znode
 = 
	`z¶In£π
(
zs
->
z¶
,
sc‹e
,
ñe
);

1344 
	`£rvîAs£πWôhInfo
(
c
,
NULL
,
	`di˘Add
(
zs
->
di˘
,
ñe
,&
znode
->
sc‹e
Ë=
DICT_OK
);

1345 
c
->
vñ
->
dúty
++;

1346 
added
++;

1347 
¥o˚s£d
++;

1350 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1354 
	`u∆ockDb
(
c
->
db
);

1355 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1357 
ª∂y_to_˛õ¡
:

1358 i‡(
ö¸
) {

1359 i‡(
¥o˚s£d
)

1360 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

1362 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

1364 
	`addRïlyL⁄gL⁄g
(
c
,
ch
 ? 
added
+
upd©ed
 :ádded);

1367 
˛ónup
:

1368 
	`d‰ì
(
sc‹es
);

1369 i‡(
added
 || 
upd©ed
) {

1370 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1371 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,

1372 
ö¸
 ? "zö¸" : "zadd", 
key
, 
c
->
db
->
id
);

1374 
	}
}

1376 
	$zaddComm™d
(
˛õ¡
 *
c
) {

1377 
	`zaddGíîicComm™d
(
c
,
ZADD_NONE
);

1378 
	}
}

1380 
	$zö¸byComm™d
(
˛õ¡
 *
c
) {

1381 
	`zaddGíîicComm™d
(
c
,
ZADD_INCR
);

1382 
	}
}

1384 
	$zªmComm™d
(
˛õ¡
 *
c
) {

1385 
robj
 *
key
 = 
c
->
¨gv
[1];

1386 
robj
 *
zobj
;

1387 
dñëed
 = 0, 
keyªmoved
 = 0, 
j
;

1388 
expúed
 = 0;

1390 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1391 
	`lockDbWrôe
(
c
->
db
);

1392 i‡((
zobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

1393 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

1394 
	`u∆ockDb
(
c
->
db
);

1395 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1399 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1400 *
ïå
;

1402 
j
 = 2; j < 
c
->
¨gc
; j++) {

1403 i‡((
ïå
 = 
	`zzlFöd
(
zobj
->
±r
,
c
->
¨gv
[
j
],
NULL
)) != NULL) {

1404 
dñëed
++;

1405 
zobj
->
±r
 = 
	`zzlDñëe
(zobj->±r,
ïå
);

1406 i‡(
	`zzlLígth
(
zobj
->
±r
) == 0) {

1407 
	`dbDñëe
(
c
->
db
,
key
);

1408 
keyªmoved
 = 1;

1413 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1414 
z£t
 *
zs
 = 
zobj
->
±r
;

1415 
di˘E¡ry
 *
de
;

1416 
sc‹e
;

1418 
j
 = 2; j < 
c
->
¨gc
; j++) {

1419 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
c
->
¨gv
[
j
]);

1420 i‡(
de
 !
NULL
) {

1421 
dñëed
++;

1424 
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1425 
	`£rvîAs£πWôhInfo
(
c
,c->
¨gv
[
j
],
	`z¶Dñëe
(
zs
->
z¶
,
sc‹e
,c->argv[j]));

1428 
	`di˘Dñëe
(
zs
->
di˘
,
c
->
¨gv
[
j
]);

1429 i‡(
	`htNìdsResize
(
zs
->
di˘
)Ë
	`di˘Resize
(zs->dict);

1430 i‡(
	`di˘Size
(
zs
->
di˘
) == 0) {

1431 
	`dbDñëe
(
c
->
db
,
key
);

1432 
keyªmoved
 = 1;

1438 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1441 i‡(
dñëed
) {

1442 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,"zªm",
key
,
c
->
db
->
id
);

1443 i‡(
keyªmoved
)

1444 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1445 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1446 
c
->
vñ
->
dúty
 +
dñëed
;

1448 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

1449 
	`u∆ockDb
(
c
->
db
);

1450 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1451 
	}
}

1454 
	#ZRANGE_RANK
 0

	)

1455 
	#ZRANGE_SCORE
 1

	)

1456 
	#ZRANGE_LEX
 2

	)

1457 
	$zªmøngeGíîicComm™d
(
˛õ¡
 *
c
, 
øngëy≥
) {

1458 
robj
 *
key
 = 
c
->
¨gv
[1];

1459 
robj
 *
zobj
;

1460 
keyªmoved
 = 0;

1461 
dñëed
 = 0;

1462 
zønge•ec
 
ønge
;

1463 
zÀxønge•ec
 
Àxønge
;

1464 
°¨t
, 
íd
, 
Œí
;

1465 
expúed
 = 0;

1468 i‡(
øngëy≥
 =
ZRANGE_RANK
) {

1469 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[2],&
°¨t
,
NULL
Ë!
VR_OK
) ||

1470 (
	`gëL⁄gFromObje˘OrRïly
(
c
,c->
¨gv
[3],&
íd
,
NULL
Ë!
VR_OK
))

1472 } i‡(
øngëy≥
 =
ZRANGE_SCORE
) {

1473 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

1474 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

1477 } i‡(
øngëy≥
 =
ZRANGE_LEX
) {

1478 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[2],c->¨gv[3],&
Àxønge
Ë!
VR_OK
) {

1479 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

1484 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

1485 
	`lockDbWrôe
(
c
->
db
);

1487 i‡((
zobj
 = 
	`lookupKeyWrôeOrRïly
(
c
,
key
,
sh¨ed
.
czîo
,&
expúed
)Ë=
NULL
 ||

1488 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)Ë
˛ónup
;

1490 i‡(
øngëy≥
 =
ZRANGE_RANK
) {

1492 
Œí
 = 
	`z£tLígth
(
zobj
);

1493 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

1494 i‡(
íd
 < 0Ëíd = 
Œí
+end;

1495 i‡(
°¨t
 < 0) start = 0;

1499 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

1500 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

1501 
˛ónup
;

1503 i‡(
íd
 >
Œí
)Énd =Ülen-1;

1507 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1508 
øngëy≥
) {

1509 
ZRANGE_RANK
:

1510 
zobj
->
±r
 = 
	`zzlDñëeR™geByR™k
(zobj->±r,
°¨t
+1,
íd
+1,&
dñëed
);

1512 
ZRANGE_SCORE
:

1513 
zobj
->
±r
 = 
	`zzlDñëeR™geBySc‹e
(zobj->±r,&
ønge
,&
dñëed
);

1515 
ZRANGE_LEX
:

1516 
zobj
->
±r
 = 
	`zzlDñëeR™geByLex
(zobj->±r,&
Àxønge
,&
dñëed
);

1519 i‡(
	`zzlLígth
(
zobj
->
±r
) == 0) {

1520 
	`dbDñëe
(
c
->
db
,
key
);

1521 
keyªmoved
 = 1;

1523 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1524 
z£t
 *
zs
 = 
zobj
->
±r
;

1525 
øngëy≥
) {

1526 
ZRANGE_RANK
:

1527 
dñëed
 = 
	`z¶DñëeR™geByR™k
(
zs
->
z¶
,
°¨t
+1,
íd
+1,zs->
di˘
);

1529 
ZRANGE_SCORE
:

1530 
dñëed
 = 
	`z¶DñëeR™geBySc‹e
(
zs
->
z¶
,&
ønge
,zs->
di˘
);

1532 
ZRANGE_LEX
:

1533 
dñëed
 = 
	`z¶DñëeR™geByLex
(
zs
->
z¶
,&
Àxønge
,zs->
di˘
);

1536 i‡(
	`htNìdsResize
(
zs
->
di˘
)Ë
	`di˘Resize
(zs->dict);

1537 i‡(
	`di˘Size
(
zs
->
di˘
) == 0) {

1538 
	`dbDñëe
(
c
->
db
,
key
);

1539 
keyªmoved
 = 1;

1542 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1546 i‡(
dñëed
) {

1547 *
evít
[3] = {"zremrangebyrank","zremrangebyscore","zremrangebylex"};

1548 
	`sig«lModifõdKey
(
c
->
db
,
key
);

1549 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,
evít
[
øngëy≥
],
key
,
c
->
db
->
id
);

1550 i‡(
keyªmoved
)

1551 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
key
,
c
->
db
->
id
);

1553 
c
->
vñ
->
dúty
 +
dñëed
;

1554 
	`addRïlyL⁄gL⁄g
(
c
,
dñëed
);

1556 
˛ónup
:

1557 i‡(
øngëy≥
 =
ZRANGE_LEX
Ë
	`z¶FªeLexR™ge
(&
Àxønge
);

1558 
	`u∆ockDb
(
c
->
db
);

1559 i‡(
expúed
Ë
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
,
expúedkeys
,1);

1560 
	}
}

1562 
	$zªmøngebyønkComm™d
(
˛õ¡
 *
c
) {

1563 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_RANK
);

1564 
	}
}

1566 
	$zªmøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

1567 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_SCORE
);

1568 
	}
}

1570 
	$zªmøngebyÀxComm™d
(
˛õ¡
 *
c
) {

1571 
	`zªmøngeGíîicComm™d
(
c
,
ZRANGE_LEX
);

1572 
	}
}

1580 
	#OPVAL_DIRTY_ROBJ
 1

	)

1581 
	#OPVAL_DIRTY_LL
 2

	)

1582 
	#OPVAL_VALID_LL
 4

	)

1584 
_ôî£t
 
	tôî£t
;

1585 
_ôîz£t
 
	tôîz£t
;

1587 
	$zuiInôIãøt‹
(
z£t›§c
 *
›
) {

1588 i‡(
›
->
subje˘
 =
NULL
)

1591 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1592 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1593 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1594 
ô
->
is
.i†
›
->
subje˘
->
±r
;

1595 
ô
->
is
.
ii
 = 0;

1596 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1597 
ô
->
ht
.
di˘
 = 
›
->
subje˘
->
±r
;

1598 
ô
->
ht
.
di
 = 
	`di˘GëIãøt‹
(
›
->
subje˘
->
±r
);

1599 
ô
->
ht
.
de
 = 
	`di˘Next
(ô->ht.
di
);

1601 
	`£rvîP™ic
("Unknown setÉncoding");

1603 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1604 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1605 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1606 
ô
->
zl
.z»
›
->
subje˘
->
±r
;

1607 
ô
->
zl
.
ïå
 = 
	`zùli°Index
(it->zl.zl,0);

1608 i‡(
ô
->
zl
.
ïå
 !
NULL
) {

1609 
ô
->
zl
.
•å
 = 
	`zùli°Next
(ô->zl.zl,ô->zl.
ïå
);

1610 
	`ASSERT
(
ô
->
zl
.
•å
 !
NULL
);

1612 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1613 
ô
->
¶
.
zs
 = 
›
->
subje˘
->
±r
;

1614 
ô
->
¶
.
node
 = it->¶.
zs
->
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

1616 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1619 
	`£rvîP™ic
("UnsupportedÅype");

1621 
	}
}

1623 
	$zuiCÀ¨Iãøt‹
(
z£t›§c
 *
›
) {

1624 i‡(
›
->
subje˘
 =
NULL
)

1627 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1628 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1629 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1630 
	`UNUSED
(
ô
);

1631 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1632 
	`di˘Rñó£Iãøt‹
(
ô
->
ht
.
di
);

1634 
	`£rvîP™ic
("Unknown setÉncoding");

1636 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1637 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1638 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1639 
	`UNUSED
(
ô
);

1640 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1641 
	`UNUSED
(
ô
);

1643 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1646 
	`£rvîP™ic
("UnsupportedÅype");

1648 
	}
}

1650 
	$zuiLígth
(
z£t›§c
 *
›
) {

1651 i‡(
›
->
subje˘
 =
NULL
)

1654 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1655 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1656  
	`öt£tLí
(
›
->
subje˘
->
±r
);

1657 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1658 
di˘
 *
ht
 = 
›
->
subje˘
->
±r
;

1659  
	`di˘Size
(
ht
);

1661 
	`£rvîP™ic
("Unknown setÉncoding");

1663 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1664 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1665  
	`zzlLígth
(
›
->
subje˘
->
±r
);

1666 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1667 
z£t
 *
zs
 = 
›
->
subje˘
->
±r
;

1668  
zs
->
z¶
->
Àngth
;

1670 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1673 
	`£rvîP™ic
("UnsupportedÅype");

1675 
	}
}

1680 
	$zuiNext
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
) {

1681 
ªt
;

1683 i‡(
›
->
subje˘
 =
NULL
)

1686 i‡(
vÆ
->
Êags
 & 
OPVAL_DIRTY_ROBJ
)

1687 
	`de¸RefCou¡
(
vÆ
->
ñe
);

1689 
	`mem£t
(
vÆ
,0,(
z£t›vÆ
));

1691 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1692 
ôî£t
 *
ô
 = &
›
->
ôî
.
£t
;

1693 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1694 
öt64_t
 
ñl
;

1696 i‡(!
	`öt£tGë
(
ô
->
is
.is,ô->is.
ii
,&
ñl
))

1698 
vÆ
->
ñl
 =Éll;

1699 
vÆ
->
sc‹e
 = 1.0;

1702 
ô
->
is
.
ii
++;

1703 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1704 i‡(
ô
->
ht
.
de
 =
NULL
)

1706 
vÆ
->
ñe
 = 
	`di˘GëKey
(
ô
->
ht
.
de
);

1707 
vÆ
->
sc‹e
 = 1.0;

1710 
ô
->
ht
.
de
 = 
	`di˘Next
(ô->ht.
di
);

1712 
	`£rvîP™ic
("Unknown setÉncoding");

1714 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1715 
ôîz£t
 *
ô
 = &
›
->
ôî
.
z£t
;

1716 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1718 i‡(
ô
->
zl
.
ïå
 =
NULL
 || it->zl.
•å
 == NULL)

1720 
ªt
 = (Ë
	`zùli°Gë
(
ô
->
zl
.
ïå
,&
vÆ
->
e°r
,&vÆ->
ñí
,&vÆ->
ñl
);

1721 
	`ASSERT
(
ªt
 > 0);

1722 
vÆ
->
sc‹e
 = 
	`zzlGëSc‹e
(
ô
->
zl
.
•å
);

1725 
	`zzlNext
(
ô
->
zl
.zl,&ô->zl.
ïå
,&ô->zl.
•å
);

1726 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1727 i‡(
ô
->
¶
.
node
 =
NULL
)

1729 
vÆ
->
ñe
 = 
ô
->
¶
.
node
->
obj
;

1730 
vÆ
->
sc‹e
 = 
ô
->
¶
.
node
->score;

1733 
ô
->
¶
.
node
 = it->¶.node->
Àvñ
[0].
f‹w¨d
;

1735 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1738 
	`£rvîP™ic
("UnsupportedÅype");

1741 
	}
}

1743 
	$zuiL⁄gL⁄gFromVÆue
(
z£t›vÆ
 *
vÆ
) {

1744 i‡(!(
vÆ
->
Êags
 & 
OPVAL_DIRTY_LL
)) {

1745 
vÆ
->
Êags
 |
OPVAL_DIRTY_LL
;

1747 i‡(
vÆ
->
ñe
 !
NULL
) {

1748 i‡(
vÆ
->
ñe
->
ícodög
 =
OBJ_ENCODING_INT
) {

1749 
vÆ
->
ñl
 = ()vÆ->
ñe
->
±r
;

1750 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1751 } i‡(
	`sdsEncodedObje˘
(
vÆ
->
ñe
)) {

1752 i‡(
	`°rög2Œ
(
vÆ
->
ñe
->
±r
,
	`sd¶í
(vÆ->ñe->±r),&vÆ->
ñl
))

1753 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1755 
	`£rvîP™ic
("UnsupportedÉlementÉncoding");

1757 } i‡(
vÆ
->
e°r
 !
NULL
) {

1758 i‡(
	`°rög2Œ
((*)
vÆ
->
e°r
,vÆ->
ñí
,&vÆ->
ñl
))

1759 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1762 
vÆ
->
Êags
 |
OPVAL_VALID_LL
;

1765  
vÆ
->
Êags
 & 
OPVAL_VALID_LL
;

1766 
	}
}

1768 
robj
 *
	$zuiObje˘FromVÆue
(
z£t›vÆ
 *
vÆ
) {

1769 i‡(
vÆ
->
ñe
 =
NULL
) {

1770 i‡(
vÆ
->
e°r
 !
NULL
) {

1771 
vÆ
->
ñe
 = 
	`¸óãSåögObje˘
((*)vÆ->
e°r
,vÆ->
ñí
);

1773 
vÆ
->
ñe
 = 
	`¸óãSåögObje˘FromL⁄gL⁄g
(vÆ->
ñl
);

1775 
vÆ
->
Êags
 |
OPVAL_DIRTY_ROBJ
;

1777  
vÆ
->
ñe
;

1778 
	}
}

1780 
	$zuiBuf„rFromVÆue
(
z£t›vÆ
 *
vÆ
) {

1781 i‡(
vÆ
->
e°r
 =
NULL
) {

1782 i‡(
vÆ
->
ñe
 !
NULL
) {

1783 i‡(
vÆ
->
ñe
->
ícodög
 =
OBJ_ENCODING_INT
) {

1784 
vÆ
->
ñí
 = 
	`Œ2°rög
((*)vÆ->
_buf
,(vÆ->_buf),()vÆ->
ñe
->
±r
);

1785 
vÆ
->
e°r
 = vÆ->
_buf
;

1786 } i‡(
	`sdsEncodedObje˘
(
vÆ
->
ñe
)) {

1787 
vÆ
->
ñí
 = 
	`sd¶í
(vÆ->
ñe
->
±r
);

1788 
vÆ
->
e°r
 = vÆ->
ñe
->
±r
;

1790 
	`£rvîP™ic
("UnsupportedÉlementÉncoding");

1793 
vÆ
->
ñí
 = 
	`Œ2°rög
((*)vÆ->
_buf
,(vÆ->_buf),vÆ->
ñl
);

1794 
vÆ
->
e°r
 = vÆ->
_buf
;

1798 
	}
}

1802 
	$zuiFöd
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
, *
sc‹e
) {

1803 i‡(
›
->
subje˘
 =
NULL
)

1806 i‡(
›
->
ty≥
 =
OBJ_SET
) {

1807 i‡(
›
->
ícodög
 =
OBJ_ENCODING_INTSET
) {

1808 i‡(
	`zuiL⁄gL⁄gFromVÆue
(
vÆ
) &&

1809 
	`öt£tFöd
(
›
->
subje˘
->
±r
,
vÆ
->
ñl
))

1811 *
sc‹e
 = 1.0;

1816 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_HT
) {

1817 
di˘
 *
ht
 = 
›
->
subje˘
->
±r
;

1818 
	`zuiObje˘FromVÆue
(
vÆ
);

1819 i‡(
	`di˘Föd
(
ht
,
vÆ
->
ñe
Ë!
NULL
) {

1820 *
sc‹e
 = 1.0;

1826 
	`£rvîP™ic
("Unknown setÉncoding");

1828 } i‡(
›
->
ty≥
 =
OBJ_ZSET
) {

1829 
	`zuiObje˘FromVÆue
(
vÆ
);

1831 i‡(
›
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

1832 i‡(
	`zzlFöd
(
›
->
subje˘
->
±r
,
vÆ
->
ñe
,
sc‹e
Ë!
NULL
) {

1838 } i‡(
›
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

1839 
z£t
 *
zs
 = 
›
->
subje˘
->
±r
;

1840 
di˘E¡ry
 *
de
;

1841 i‡((
de
 = 
	`di˘Föd
(
zs
->
di˘
,
vÆ
->
ñe
)Ë!
NULL
) {

1842 *
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

1848 
	`£rvîP™ic
("Unknown sorted setÉncoding");

1851 
	`£rvîP™ic
("UnsupportedÅype");

1853 
	}
}

1855 
	$zuiCom∑ªByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
) {

1856  
	`zuiLígth
((
z£t›§c
*)
s1
Ë- zuiLígth((z£t›§c*)
s2
);

1857 
	}
}

1859 
	#REDIS_AGGR_SUM
 1

	)

1860 
	#REDIS_AGGR_MIN
 2

	)

1861 
	#REDIS_AGGR_MAX
 3

	)

1862 
	#zuni⁄I¡îDi˘VÆue
(
_e
Ë(
	`di˘GëVÆ
(_eË=
NULL
 ? 1.0 : *(*)di˘GëVÆ(_e))

	)

1864 
ölöe
 
	$zuni⁄I¡îAggªg©e
(*
èrgë
, 
vÆ
, 
aggªg©e
) {

1865 i‡(
aggªg©e
 =
REDIS_AGGR_SUM
) {

1866 *
èrgë
 = *èrgë + 
vÆ
;

1870 i‡(
	`i¢™
(*
èrgë
)) *target = 0.0;

1871 } i‡(
aggªg©e
 =
REDIS_AGGR_MIN
) {

1872 *
èrgë
 = 
vÆ
 < *target ? val : *target;

1873 } i‡(
aggªg©e
 =
REDIS_AGGR_MAX
) {

1874 *
èrgë
 = 
vÆ
 > *target ? val : *target;

1877 
	`£rvîP™ic
("Unknown ZUNION/INTERággregateÅype");

1879 
	}
}

1881 
	#SET_OP_UNION
 0

	)

1882 
	#SET_OP_DIFF
 1

	)

1883 
	#SET_OP_INTER
 2

	)

1885 
	$zuni⁄I¡îGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
d°key
, 
›
) {

1886 
i
, 
j
;

1887 
£äum
;

1888 
aggªg©e
 = 
REDIS_AGGR_SUM
;

1889 
z£t›§c
 *
§c
;

1890 
z£t›vÆ
 
zvÆ
;

1891 
robj
 *
tmp
;

1892 
maxññí
 = 0;

1893 
robj
 *
d°obj
;

1894 
z£t
 *
d°z£t
;

1895 
zskùli°Node
 *
znode
;

1896 
touched
 = 0;

1899 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
£äum
, 
NULL
Ë!
VR_OK
))

1902 i‡(
£äum
 < 1) {

1903 
	`addRïlyEº‹
(
c
,

1909 i‡(
£äum
 > 
c
->
¨gc
-3) {

1910 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1915 
§c
 = 
	`dˇŒoc
(
£äum
, (
z£t›§c
));

1916 
i
 = 0, 
j
 = 3; i < 
£äum
; i++, j++) {

1917 
robj
 *
obj
 = 
	`lookupKeyWrôe
(
c
->
db
,c->
¨gv
[
j
],
NULL
);

1918 i‡(
obj
 !
NULL
) {

1919 i‡(
obj
->
ty≥
 !
OBJ_ZSET
 && obj->ty≥ !
OBJ_SET
) {

1920 
	`d‰ì
(
§c
);

1921 
	`addRïly
(
c
,
sh¨ed
.
wr⁄gty≥îr
);

1925 
§c
[
i
].
subje˘
 = 
obj
;

1926 
§c
[
i
].
ty≥
 = 
obj
->type;

1927 
§c
[
i
].
ícodög
 = 
obj
->encoding;

1929 
§c
[
i
].
subje˘
 = 
NULL
;

1933 
§c
[
i
].
weight
 = 1.0;

1937 i‡(
j
 < 
c
->
¨gc
) {

1938 
ªmaöög
 = 
c
->
¨gc
 - 
j
;

1940 
ªmaöög
) {

1941 i‡(
ªmaöög
 >(
£äum
 + 1Ë&& !
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"weights")) {

1942 
j
++; 
ªmaöög
--;

1943 
i
 = 0; i < 
£äum
; i++, 
j
++, 
ªmaöög
--) {

1944 i‡(
	`gëDoubÀFromObje˘OrRïly
(
c
,c->
¨gv
[
j
],&
§c
[
i
].
weight
,

1945 "weighàvÆuêi†nŸá flﬂt"Ë!
VR_OK
)

1947 
	`d‰ì
(
§c
);

1951 } i‡(
ªmaöög
 >2 && !
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"aggregate")) {

1952 
j
++; 
ªmaöög
--;

1953 i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"sum")) {

1954 
aggªg©e
 = 
REDIS_AGGR_SUM
;

1955 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"min")) {

1956 
aggªg©e
 = 
REDIS_AGGR_MIN
;

1957 } i‡(!
	`°rˇ£cmp
(
c
->
¨gv
[
j
]->
±r
,"max")) {

1958 
aggªg©e
 = 
REDIS_AGGR_MAX
;

1960 
	`d‰ì
(
§c
);

1961 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1964 
j
++; 
ªmaöög
--;

1966 
	`d‰ì
(
§c
);

1967 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

1975 
	`qs‹t
(
§c
,
£äum
,(
z£t›§c
),
zuiCom∑ªByC¨döÆôy
);

1977 
d°obj
 = 
	`¸óãZ£tObje˘
();

1978 
d°z£t
 = 
d°obj
->
±r
;

1979 
	`mem£t
(&
zvÆ
, 0, (zval));

1981 i‡(
›
 =
SET_OP_INTER
) {

1983 i‡(
	`zuiLígth
(&
§c
[0]) > 0) {

1986 
	`zuiInôIãøt‹
(&
§c
[0]);

1987 
	`zuiNext
(&
§c
[0],&
zvÆ
)) {

1988 
sc‹e
, 
vÆue
;

1990 
sc‹e
 = 
§c
[0].
weight
 * 
zvÆ
.score;

1991 i‡(
	`i¢™
(
sc‹e
)) score = 0;

1993 
j
 = 1; j < 
£äum
; j++) {

1996 i‡(
§c
[
j
].
subje˘
 == src[0].subject) {

1997 
vÆue
 = 
zvÆ
.
sc‹e
*
§c
[
j
].
weight
;

1998 
	`zuni⁄I¡îAggªg©e
(&
sc‹e
,
vÆue
,
aggªg©e
);

1999 } i‡(
	`zuiFöd
(&
§c
[
j
],&
zvÆ
,&
vÆue
)) {

2000 
vÆue
 *
§c
[
j
].
weight
;

2001 
	`zuni⁄I¡îAggªg©e
(&
sc‹e
,
vÆue
,
aggªg©e
);

2008 i‡(
j
 =
£äum
) {

2009 
tmp
 = 
	`zuiObje˘FromVÆue
(&
zvÆ
);

2010 
znode
 = 
	`z¶In£π
(
d°z£t
->
z¶
,
sc‹e
,
tmp
);

2011 
	`ö¸RefCou¡
(
tmp
);

2012 
	`di˘Add
(
d°z£t
->
di˘
,
tmp
,&
znode
->
sc‹e
);

2013 
	`ö¸RefCou¡
(
tmp
);

2015 i‡(
	`sdsEncodedObje˘
(
tmp
)) {

2016 i‡(
	`sd¶í
(
tmp
->
±r
Ë> 
maxññí
)

2017 
maxññí
 = 
	`sd¶í
(
tmp
->
±r
);

2021 
	`zuiCÀ¨Iãøt‹
(&
§c
[0]);

2023 } i‡(
›
 =
SET_OP_UNION
) {

2024 
di˘
 *
accumuœt‹
 = 
	`di˘Cª©e
(&
£tDi˘Ty≥
,
NULL
);

2025 
di˘Iãøt‹
 *
di
;

2026 
di˘E¡ry
 *
de
;

2027 
sc‹e
;

2029 i‡(
£äum
) {

2032 
	`di˘Ex∑nd
(
accumuœt‹
,
	`zuiLígth
(&
§c
[
£äum
-1]));

2037 
i
 = 0; i < 
£äum
; i++) {

2038 i‡(
	`zuiLígth
(&
§c
[
i
]) == 0) ;

2040 
	`zuiInôIãøt‹
(&
§c
[
i
]);

2041 
	`zuiNext
(&
§c
[
i
],&
zvÆ
)) {

2043 
sc‹e
 = 
§c
[
i
].
weight
 * 
zvÆ
.score;

2044 i‡(
	`i¢™
(
sc‹e
)) score = 0;

2047 
de
 = 
	`di˘Föd
(
accumuœt‹
,
	`zuiObje˘FromVÆue
(&
zvÆ
));

2049 i‡(
de
 =
NULL
) {

2050 
tmp
 = 
	`zuiObje˘FromVÆue
(&
zvÆ
);

2054 i‡(
	`sdsEncodedObje˘
(
tmp
)) {

2055 i‡(
	`sd¶í
(
tmp
->
±r
Ë> 
maxññí
)

2056 
maxññí
 = 
	`sd¶í
(
tmp
->
±r
);

2059 
de
 = 
	`di˘AddRaw
(
accumuœt‹
,
tmp
);

2060 
	`ö¸RefCou¡
(
tmp
);

2061 
	`di˘SëDoubÀVÆ
(
de
,
sc‹e
);

2069 
	`zuni⁄I¡îAggªg©e
(&
de
->
v
.
d
,
sc‹e
,
aggªg©e
);

2072 
	`zuiCÀ¨Iãøt‹
(&
§c
[
i
]);

2076 
di
 = 
	`di˘GëIãøt‹
(
accumuœt‹
);

2081 
	`di˘Ex∑nd
(
d°z£t
->
di˘
,
	`di˘Size
(
accumuœt‹
));

2083 (
de
 = 
	`di˘Next
(
di
)Ë!
NULL
) {

2084 
robj
 *
ñe
 = 
	`di˘GëKey
(
de
);

2085 
sc‹e
 = 
	`di˘GëDoubÀVÆ
(
de
);

2086 
znode
 = 
	`z¶In£π
(
d°z£t
->
z¶
,
sc‹e
,
ñe
);

2087 
	`ö¸RefCou¡
(
ñe
);

2088 
	`di˘Add
(
d°z£t
->
di˘
,
ñe
,&
znode
->
sc‹e
);

2089 
	`ö¸RefCou¡
(
ñe
);

2091 
	`di˘Rñó£Iãøt‹
(
di
);

2094 
	`di˘Rñó£
(
accumuœt‹
);

2096 
	`£rvîP™ic
("Unknown operator");

2099 i‡(
	`dbDñëe
(
c
->
db
,
d°key
)) {

2100 
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

2101 
touched
 = 1;

2102 
£rvî
.
dúty
++;

2104 i‡(
d°z£t
->
z¶
->
Àngth
) {

2105 
	`z£tC⁄vîtToZùli°IfNìded
(
d°obj
,
maxññí
);

2106 
	`dbAdd
(
c
->
db
,
d°key
,
d°obj
);

2107 
	`addRïlyL⁄gL⁄g
(
c
,
	`z£tLígth
(
d°obj
));

2108 i‡(!
touched
Ë
	`sig«lModifõdKey
(
c
->
db
,
d°key
);

2109 
	`nŸifyKey•a˚Evít
(
NOTIFY_ZSET
,

2110 (
›
 =
SET_OP_UNION
) ? "zunionstore" : "zinterstore",

2111 
d°key
,
c
->
db
->
id
);

2112 
£rvî
.
dúty
++;

2114 
	`de¸RefCou¡
(
d°obj
);

2115 
	`addRïly
(
c
,
sh¨ed
.
czîo
);

2116 i‡(
touched
)

2117 
	`nŸifyKey•a˚Evít
(
NOTIFY_GENERIC
,"dñ",
d°key
,
c
->
db
->
id
);

2119 
	`d‰ì
(
§c
);

2120 
	}
}

2122 
	$zuni⁄°‹eComm™d
(
˛õ¡
 *
c
) {

2123 
	`zuni⁄I¡îGíîicComm™d
(
c
,c->
¨gv
[1], 
SET_OP_UNION
);

2124 
	}
}

2126 
	$zöãr°‹eComm™d
(
˛õ¡
 *
c
) {

2127 
	`zuni⁄I¡îGíîicComm™d
(
c
,c->
¨gv
[1], 
SET_OP_INTER
);

2128 
	}
}

2130 
	$zøngeGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2131 
robj
 *
key
 = 
c
->
¨gv
[1];

2132 
robj
 *
zobj
;

2133 
wôhsc‹es
 = 0;

2134 
°¨t
;

2135 
íd
;

2136 
Œí
;

2137 
øngñí
;

2139 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[2], &
°¨t
, 
NULL
Ë!
VR_OK
) ||

2140 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[3], &
íd
, 
NULL
Ë!
VR_OK
)) ;

2142 i‡(
c
->
¨gc
 =5 && !
	`°rˇ£cmp
(c->
¨gv
[4]->
±r
,"withscores")) {

2143 
wôhsc‹es
 = 1;

2144 } i‡(
c
->
¨gc
 >= 5) {

2145 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2149 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2150 
	`lockDbRód
(
c
->
db
);

2151 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

2152 
	`u∆ockDb
(
c
->
db
);

2153 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2155 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2156 
	`u∆ockDb
(
c
->
db
);

2157 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2162 
Œí
 = 
	`z£tLígth
(
zobj
);

2163 i‡(
°¨t
 < 0Ë°¨à
Œí
+start;

2164 i‡(
íd
 < 0Ëíd = 
Œí
+end;

2165 i‡(
°¨t
 < 0) start = 0;

2169 i‡(
°¨t
 > 
íd
 || sèπ >
Œí
) {

2170 
	`u∆ockDb
(
c
->
db
);

2171 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2172 
	`addRïly
(
c
,
sh¨ed
.
em±ymu…ibulk
);

2175 i‡(
íd
 >
Œí
)Énd =Ülen-1;

2176 
øngñí
 = (
íd
-
°¨t
)+1;

2179 
	`addRïlyMu…iBulkLí
(
c
, 
wôhsc‹es
 ? (
øngñí
*2) :Ñangelen);

2181 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2182 *
zl
 = 
zobj
->
±r
;

2183 *
ïå
, *
•å
;

2184 *
v°r
;

2185 
vÀn
;

2186 
vl⁄g
;

2188 i‡(
ªvî£
)

2189 
ïå
 = 
	`zùli°Index
(
zl
,-2-(2*
°¨t
));

2191 
ïå
 = 
	`zùli°Index
(
zl
,2*
°¨t
);

2193 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2194 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2196 
øngñí
--) {

2197 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
 && 
•å
 != NULL);

2198 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2199 i‡(
v°r
 =
NULL
)

2200 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2202 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2204 i‡(
wôhsc‹es
)

2205 
	`addRïlyDoubÀ
(
c
,
	`zzlGëSc‹e
(
•å
));

2207 i‡(
ªvî£
)

2208 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2210 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2213 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2214 
z£t
 *
zs
 = 
zobj
->
±r
;

2215 
zskùli°
 *
z¶
 = 
zs
->zsl;

2216 
zskùli°Node
 *
 
;

2217 
robj
 *
ñe
;

2220 i‡(
ªvî£
) {

2221 
 
 = 
z¶
->
èû
;

2222 i‡(
°¨t
 > 0)

2223 
 
 = 
	`z¶GëEÀmítByR™k
(
z¶
,
Œí
-
°¨t
);

2225 
 
 = 
z¶
->
hódî
->
Àvñ
[0].
f‹w¨d
;

2226 i‡(
°¨t
 > 0)

2227 
 
 = 
	`z¶GëEÀmítByR™k
(
z¶
,
°¨t
+1);

2230 
øngñí
--) {

2231 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
 
 !
NULL
);

2232 
ñe
 = 
 
->
obj
;

2233 
	`addRïlyBulk
(
c
,
ñe
);

2234 i‡(
wôhsc‹es
)

2235 
	`addRïlyDoubÀ
(
c
,
 
->
sc‹e
);

2236 
 
 = 
ªvî£
 ?Ün->
backw¨d
 :Ün->
Àvñ
[0].
f‹w¨d
;

2239 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2242 
	`u∆ockDb
(
c
->
db
);

2243 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2244 
	}
}

2246 
	$zøngeComm™d
(
˛õ¡
 *
c
) {

2247 
	`zøngeGíîicComm™d
(
c
,0);

2248 
	}
}

2250 
	$zªvøngeComm™d
(
˛õ¡
 *
c
) {

2251 
	`zøngeGíîicComm™d
(
c
,1);

2252 
	}
}

2255 
	$gíîicZøngebysc‹eComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2256 
zønge•ec
 
ønge
;

2257 
robj
 *
key
 = 
c
->
¨gv
[1];

2258 
robj
 *
zobj
;

2259 
off£t
 = 0, 
limô
 = -1;

2260 
wôhsc‹es
 = 0;

2261 
øngñí
 = 0;

2262 *
ª∂yÀn
 = 
NULL
;

2263 
möidx
, 
maxidx
;

2266 i‡(
ªvî£
) {

2268 
maxidx
 = 2; 
möidx
 = 3;

2271 
möidx
 = 2; 
maxidx
 = 3;

2274 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[
möidx
],c->¨gv[
maxidx
],&
ønge
Ë!
VR_OK
) {

2275 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

2281 i‡(
c
->
¨gc
 > 4) {

2282 
ªmaöög
 = 
c
->
¨gc
 - 4;

2283 
pos
 = 4;

2285 
ªmaöög
) {

2286 i‡(
ªmaöög
 >1 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"withscores")) {

2287 
pos
++; 
ªmaöög
--;

2288 
wôhsc‹es
 = 1;

2289 } i‡(
ªmaöög
 >3 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"limit")) {

2290 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+1], &
off£t
, 
NULL
Ë!
VR_OK
) ||

2291 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+2], &
limô
, 
NULL
Ë!
VR_OK
)) ;

2292 
pos
 +3; 
ªmaöög
 -= 3;

2294 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2300 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2301 
	`lockDbRód
(
c
->
db
);

2303 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
) {

2304 
	`u∆ockDb
(
c
->
db
);

2305 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2307 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2308 
	`u∆ockDb
(
c
->
db
);

2309 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2313 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2314 *
zl
 = 
zobj
->
±r
;

2315 *
ïå
, *
•å
;

2316 *
v°r
;

2317 
vÀn
;

2318 
vl⁄g
;

2319 
sc‹e
;

2322 i‡(
ªvî£
) {

2323 
ïå
 = 
	`zzlLa°InR™ge
(
zl
,&
ønge
);

2325 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,&
ønge
);

2329 i‡(
ïå
 =
NULL
) {

2330 
	`u∆ockDb
(
c
->
db
);

2331 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2332 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2337 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2338 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2343 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2347 
ïå
 && 
off£t
--) {

2348 i‡(
ªvî£
) {

2349 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2351 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2355 
ïå
 && 
limô
--) {

2356 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2359 i‡(
ªvî£
) {

2360 i‡(!
	`z¶VÆueGãMö
(
sc‹e
,&
ønge
)) ;

2362 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
)) ;

2366 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2368 
øngñí
++;

2369 i‡(
v°r
 =
NULL
) {

2370 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2372 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2375 i‡(
wôhsc‹es
) {

2376 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

2380 i‡(
ªvî£
) {

2381 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2383 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2386 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2387 
z£t
 *
zs
 = 
zobj
->
±r
;

2388 
zskùli°
 *
z¶
 = 
zs
->zsl;

2389 
zskùli°Node
 *
 
;

2392 i‡(
ªvî£
) {

2393 
 
 = 
	`z¶La°InR™ge
(
z¶
,&
ønge
);

2395 
 
 = 
	`z¶Fú°InR™ge
(
z¶
,&
ønge
);

2399 i‡(
 
 =
NULL
) {

2400 
	`u∆ockDb
(
c
->
db
);

2401 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2402 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2409 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2413 
 
 && 
off£t
--) {

2414 i‡(
ªvî£
) {

2415 
 
 =Ün->
backw¨d
;

2417 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2421 
 
 && 
limô
--) {

2423 i‡(
ªvî£
) {

2424 i‡(!
	`z¶VÆueGãMö
(
 
->
sc‹e
,&
ønge
)) ;

2426 i‡(!
	`z¶VÆueLãMax
(
 
->
sc‹e
,&
ønge
)) ;

2429 
øngñí
++;

2430 
	`addRïlyBulk
(
c
,
 
->
obj
);

2432 i‡(
wôhsc‹es
) {

2433 
	`addRïlyDoubÀ
(
c
,
 
->
sc‹e
);

2437 i‡(
ªvî£
) {

2438 
 
 =Ün->
backw¨d
;

2440 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2444 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2447 i‡(
wôhsc‹es
) {

2448 
øngñí
 *= 2;

2451 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ª∂yÀn
, 
øngñí
);

2452 
	`u∆ockDb
(
c
->
db
);

2453 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2454 
	}
}

2456 
	$zøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

2457 
	`gíîicZøngebysc‹eComm™d
(
c
,0);

2458 
	}
}

2460 
	$zªvøngebysc‹eComm™d
(
˛õ¡
 *
c
) {

2461 
	`gíîicZøngebysc‹eComm™d
(
c
,1);

2462 
	}
}

2464 
	$zcou¡Comm™d
(
˛õ¡
 *
c
) {

2465 
robj
 *
key
 = 
c
->
¨gv
[1];

2466 
robj
 *
zobj
;

2467 
zønge•ec
 
ønge
;

2468 
cou¡
 = 0;

2471 i‡(
	`z¶P¨£R™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

2472 
	`addRïlyEº‹
(
c
,"min or max isÇotá float");

2476 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2477 
	`lockDbRód
(
c
->
db
);

2479 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
, 
key
, 
sh¨ed
.
czîo
)Ë=
NULL
) {

2480 
	`u∆ockDb
(
c
->
db
);

2481 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2483 } i‡(
	`checkTy≥
(
c
, 
zobj
, 
OBJ_ZSET
)) {

2484 
	`u∆ockDb
(
c
->
db
);

2485 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2489 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2490 *
zl
 = 
zobj
->
±r
;

2491 *
ïå
, *
•å
;

2492 
sc‹e
;

2495 
ïå
 = 
	`zzlFú°InR™ge
(
zl
,&
ønge
);

2498 i‡(
ïå
 =
NULL
) {

2499 
	`u∆ockDb
(
c
->
db
);

2500 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2501 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

2506 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2507 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2508 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
));

2511 
ïå
) {

2512 
sc‹e
 = 
	`zzlGëSc‹e
(
•å
);

2515 i‡(!
	`z¶VÆueLãMax
(
sc‹e
,&
ønge
)) {

2518 
cou¡
++;

2519 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2522 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2523 
z£t
 *
zs
 = 
zobj
->
±r
;

2524 
zskùli°
 *
z¶
 = 
zs
->zsl;

2525 
zskùli°Node
 *
zn
;

2526 
ønk
;

2529 
zn
 = 
	`z¶Fú°InR™ge
(
z¶
, &
ønge
);

2532 i‡(
zn
 !
NULL
) {

2533 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2534 
cou¡
 = (
z¶
->
Àngth
 - (
ønk
 - 1));

2537 
zn
 = 
	`z¶La°InR™ge
(
z¶
, &
ønge
);

2540 i‡(
zn
 !
NULL
) {

2541 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2542 
cou¡
 -(
z¶
->
Àngth
 - 
ønk
);

2546 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2549 
	`addRïlyL⁄gL⁄g
(
c
, 
cou¡
);

2550 
	`u∆ockDb
(
c
->
db
);

2551 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2552 
	}
}

2554 
	$zÀxcou¡Comm™d
(
˛õ¡
 *
c
) {

2555 
robj
 *
key
 = 
c
->
¨gv
[1];

2556 
robj
 *
zobj
;

2557 
zÀxønge•ec
 
ønge
;

2558 
cou¡
 = 0;

2561 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[2],c->¨gv[3],&
ønge
Ë!
VR_OK
) {

2562 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

2567 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
, 
key
, 
sh¨ed
.
czîo
)Ë=
NULL
 ||

2568 
	`checkTy≥
(
c
, 
zobj
, 
OBJ_ZSET
))

2570 
	`z¶FªeLexR™ge
(&
ønge
);

2574 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2575 *
zl
 = 
zobj
->
±r
;

2576 *
ïå
, *
•å
;

2579 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,&
ønge
);

2582 i‡(
ïå
 =
NULL
) {

2583 
	`z¶FªeLexR™ge
(&
ønge
);

2584 
	`addRïly
(
c
, 
sh¨ed
.
czîo
);

2589 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2590 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
));

2593 
ïå
) {

2595 i‡(!
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
)) {

2598 
cou¡
++;

2599 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2602 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2603 
z£t
 *
zs
 = 
zobj
->
±r
;

2604 
zskùli°
 *
z¶
 = 
zs
->zsl;

2605 
zskùli°Node
 *
zn
;

2606 
ønk
;

2609 
zn
 = 
	`z¶Fú°InLexR™ge
(
z¶
, &
ønge
);

2612 i‡(
zn
 !
NULL
) {

2613 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2614 
cou¡
 = (
z¶
->
Àngth
 - (
ønk
 - 1));

2617 
zn
 = 
	`z¶La°InLexR™ge
(
z¶
, &
ønge
);

2620 i‡(
zn
 !
NULL
) {

2621 
ønk
 = 
	`z¶GëR™k
(
z¶
, 
zn
->
sc‹e
, zn->
obj
);

2622 
cou¡
 -(
z¶
->
Àngth
 - 
ønk
);

2626 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2629 
	`z¶FªeLexR™ge
(&
ønge
);

2630 
	`addRïlyL⁄gL⁄g
(
c
, 
cou¡
);

2631 
	}
}

2634 
	$gíîicZøngebyÀxComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2635 
zÀxønge•ec
 
ønge
;

2636 
robj
 *
key
 = 
c
->
¨gv
[1];

2637 
robj
 *
zobj
;

2638 
off£t
 = 0, 
limô
 = -1;

2639 
øngñí
 = 0;

2640 *
ª∂yÀn
 = 
NULL
;

2641 
möidx
, 
maxidx
;

2644 i‡(
ªvî£
) {

2646 
maxidx
 = 2; 
möidx
 = 3;

2649 
möidx
 = 2; 
maxidx
 = 3;

2652 i‡(
	`z¶P¨£LexR™ge
(
c
->
¨gv
[
möidx
],c->¨gv[
maxidx
],&
ønge
Ë!
VR_OK
) {

2653 
	`addRïlyEº‹
(
c
,"min or maxÇot valid stringÑange item");

2659 i‡(
c
->
¨gc
 > 4) {

2660 
ªmaöög
 = 
c
->
¨gc
 - 4;

2661 
pos
 = 4;

2663 
ªmaöög
) {

2664 i‡(
ªmaöög
 >3 && !
	`°rˇ£cmp
(
c
->
¨gv
[
pos
]->
±r
,"limit")) {

2665 i‡((
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+1], &
off£t
, 
NULL
Ë!
VR_OK
) ||

2666 (
	`gëL⁄gFromObje˘OrRïly
(
c
, c->
¨gv
[
pos
+2], &
limô
, 
NULL
Ë!
VR_OK
)) ;

2667 
pos
 +3; 
ªmaöög
 -= 3;

2669 
	`z¶FªeLexR™ge
(&
ønge
);

2670 
	`addRïly
(
c
,
sh¨ed
.
sy¡axîr
);

2677 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
em±ymu…ibulk
)Ë=
NULL
 ||

2678 
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
))

2680 
	`z¶FªeLexR™ge
(&
ønge
);

2684 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2685 *
zl
 = 
zobj
->
±r
;

2686 *
ïå
, *
•å
;

2687 *
v°r
;

2688 
vÀn
;

2689 
vl⁄g
;

2692 i‡(
ªvî£
) {

2693 
ïå
 = 
	`zzlLa°InLexR™ge
(
zl
,&
ønge
);

2695 
ïå
 = 
	`zzlFú°InLexR™ge
(
zl
,&
ønge
);

2699 i‡(
ïå
 =
NULL
) {

2700 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2701 
	`z¶FªeLexR™ge
(&
ønge
);

2706 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2707 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2712 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2716 
ïå
 && 
off£t
--) {

2717 i‡(
ªvî£
) {

2718 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2720 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2724 
ïå
 && 
limô
--) {

2726 i‡(
ªvî£
) {

2727 i‡(!
	`zzlLexVÆueGãMö
(
ïå
,&
ønge
)) ;

2729 i‡(!
	`zzlLexVÆueLãMax
(
ïå
,&
ønge
)) ;

2734 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
	`zùli°Gë
(
ïå
,&
v°r
,&
vÀn
,&
vl⁄g
));

2736 
øngñí
++;

2737 i‡(
v°r
 =
NULL
) {

2738 
	`addRïlyBulkL⁄gL⁄g
(
c
,
vl⁄g
);

2740 
	`addRïlyBulkCBuf„r
(
c
,
v°r
,
vÀn
);

2744 i‡(
ªvî£
) {

2745 
	`zzlPªv
(
zl
,&
ïå
,&
•å
);

2747 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2750 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2751 
z£t
 *
zs
 = 
zobj
->
±r
;

2752 
zskùli°
 *
z¶
 = 
zs
->zsl;

2753 
zskùli°Node
 *
 
;

2756 i‡(
ªvî£
) {

2757 
 
 = 
	`z¶La°InLexR™ge
(
z¶
,&
ønge
);

2759 
 
 = 
	`z¶Fú°InLexR™ge
(
z¶
,&
ønge
);

2763 i‡(
 
 =
NULL
) {

2764 
	`addRïly
(
c
, 
sh¨ed
.
em±ymu…ibulk
);

2765 
	`z¶FªeLexR™ge
(&
ønge
);

2772 
ª∂yÀn
 = 
	`addDe„ºedMu…iBulkLígth
(
c
);

2776 
 
 && 
off£t
--) {

2777 i‡(
ªvî£
) {

2778 
 
 =Ün->
backw¨d
;

2780 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2784 
 
 && 
limô
--) {

2786 i‡(
ªvî£
) {

2787 i‡(!
	`z¶LexVÆueGãMö
(
 
->
obj
,&
ønge
)) ;

2789 i‡(!
	`z¶LexVÆueLãMax
(
 
->
obj
,&
ønge
)) ;

2792 
øngñí
++;

2793 
	`addRïlyBulk
(
c
,
 
->
obj
);

2796 i‡(
ªvî£
) {

2797 
 
 =Ün->
backw¨d
;

2799 
 
 =Ün->
Àvñ
[0].
f‹w¨d
;

2803 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2806 
	`z¶FªeLexR™ge
(&
ønge
);

2807 
	`£tDe„ºedMu…iBulkLígth
(
c
, 
ª∂yÀn
, 
øngñí
);

2808 
	}
}

2810 
	$zøngebyÀxComm™d
(
˛õ¡
 *
c
) {

2811 
	`gíîicZøngebyÀxComm™d
(
c
,0);

2812 
	}
}

2814 
	$zªvøngebyÀxComm™d
(
˛õ¡
 *
c
) {

2815 
	`gíîicZøngebyÀxComm™d
(
c
,1);

2816 
	}
}

2818 
	$zˇrdComm™d
(
˛õ¡
 *
c
) {

2819 
robj
 *
key
 = 
c
->
¨gv
[1];

2820 
robj
 *
zobj
;

2822 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2823 
	`lockDbRód
(
c
->
db
);

2824 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
czîo
)Ë=
NULL
) {

2825 
	`u∆ockDb
(
c
->
db
);

2826 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2828 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2829 
	`u∆ockDb
(
c
->
db
);

2830 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2834 
	`addRïlyL⁄gL⁄g
(
c
,
	`z£tLígth
(
zobj
));

2836 
	`u∆ockDb
(
c
->
db
);

2837 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2838 
	}
}

2840 
	$zsc‹eComm™d
(
˛õ¡
 *
c
) {

2841 
robj
 *
key
 = 
c
->
¨gv
[1];

2842 
robj
 *
zobj
;

2843 
sc‹e
;

2845 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2846 
	`lockDbRód
(
c
->
db
);

2847 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

2848 
	`u∆ockDb
(
c
->
db
);

2849 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2851 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2852 
	`u∆ockDb
(
c
->
db
);

2853 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2857 i‡(
	`z£tSc‹e
(
zobj
,
c
->
¨gv
[2],&
sc‹e
Ë=
VR_ERROR
) {

2858 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2860 
	`addRïlyDoubÀ
(
c
,
sc‹e
);

2863 
	`u∆ockDb
(
c
->
db
);

2864 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2865 
	}
}

2867 
	$zønkGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
) {

2868 
robj
 *
key
 = 
c
->
¨gv
[1];

2869 
robj
 *
ñe
 = 
c
->
¨gv
[2];

2870 
robj
 *
zobj
;

2871 
Œí
;

2872 
ønk
;

2874 
	`„tchI¡î«lDbByKey
(
c
, 
key
);

2875 
	`lockDbRód
(
c
->
db
);

2876 i‡((
zobj
 = 
	`lookupKeyRódOrRïly
(
c
,
key
,
sh¨ed
.
nuŒbulk
)Ë=
NULL
) {

2877 
	`u∆ockDb
(
c
->
db
);

2878 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_mis£s
, 1);

2880 } i‡(
	`checkTy≥
(
c
,
zobj
,
OBJ_ZSET
)) {

2881 
	`u∆ockDb
(
c
->
db
);

2882 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2885 
Œí
 = 
	`z£tLígth
(
zobj
);

2887 
	`£rvîAs£πWôhInfo
(
c
,
ñe
,
	`sdsEncodedObje˘
(ele));

2889 i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_ZIPLIST
) {

2890 *
zl
 = 
zobj
->
±r
;

2891 *
ïå
, *
•å
;

2893 
ïå
 = 
	`zùli°Index
(
zl
,0);

2894 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
ïå
 !
NULL
);

2895 
•å
 = 
	`zùli°Next
(
zl
,
ïå
);

2896 
	`£rvîAs£πWôhInfo
(
c
,
zobj
,
•å
 !
NULL
);

2898 
ønk
 = 1;

2899 
ïå
 !
NULL
) {

2900 i‡(
	`zùli°Com∑ª
(
ïå
,
ñe
->
±r
,
	`sd¶í
(ele->ptr)))

2902 
ønk
++;

2903 
	`zzlNext
(
zl
,&
ïå
,&
•å
);

2906 i‡(
ïå
 !
NULL
) {

2907 i‡(
ªvî£
)

2908 
	`addRïlyL⁄gL⁄g
(
c
,
Œí
-
ønk
);

2910 
	`addRïlyL⁄gL⁄g
(
c
,
ønk
-1);

2912 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2914 } i‡(
zobj
->
ícodög
 =
OBJ_ENCODING_SKIPLIST
) {

2915 
z£t
 *
zs
 = 
zobj
->
±r
;

2916 
zskùli°
 *
z¶
 = 
zs
->zsl;

2917 
di˘E¡ry
 *
de
;

2918 
sc‹e
;

2920 
ñe
 = 
c
->
¨gv
[2];

2921 
de
 = 
	`di˘Föd
(
zs
->
di˘
,
ñe
);

2922 i‡(
de
 !
NULL
) {

2923 
sc‹e
 = *(*)
	`di˘GëVÆ
(
de
);

2924 
ønk
 = 
	`z¶GëR™k
(
z¶
,
sc‹e
,
ñe
);

2925 
	`£rvîAs£πWôhInfo
(
c
,
ñe
,
ønk
);

2926 i‡(
ªvî£
)

2927 
	`addRïlyL⁄gL⁄g
(
c
,
Œí
-
ønk
);

2929 
	`addRïlyL⁄gL⁄g
(
c
,
ønk
-1);

2931 
	`addRïly
(
c
,
sh¨ed
.
nuŒbulk
);

2934 
	`£rvîP™ic
("Unknown sorted setÉncoding");

2937 
	`u∆ockDb
(
c
->
db
);

2938 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
key•a˚_hôs
, 1);

2939 
	}
}

2941 
	$zønkComm™d
(
˛õ¡
 *
c
) {

2942 
	`zønkGíîicComm™d
(
c
, 0);

2943 
	}
}

2945 
	$zªvønkComm™d
(
˛õ¡
 *
c
) {

2946 
	`zønkGíîicComm™d
(
c
, 1);

2947 
	}
}

2949 
	$zsˇnComm™d
(
˛õ¡
 *
c
) {

2950 
	`sˇnGíîicComm™d
(
c
,
SCAN_TYPE_ZSET
);

2951 
	}
}

	@src/vr_t_zset.h

1 #i‚de‡
_VR_T_ZSET_H_


2 
	#_VR_T_ZSET_H_


	)

6 
	mmö
, 
	mmax
;

7 
	mmöex
, 
	mmaxex
;

8 } 
	tzønge•ec
;

12 
robj
 *
	mmö
, *
	mmax
;

13 
	mmöex
, 
	mmaxex
;

14 } 
	tzÀxønge•ec
;

17 
robj
 *
	msubje˘
;

18 
	mty≥
;

19 
	mícodög
;

20 
	mweight
;

24 
	u_ôî£t
 {

26 
öt£t
 *
	mis
;

27 
	mii
;

28 } 
	mis
;

30 
di˘
 *
	mdi˘
;

31 
di˘Iãøt‹
 *
	mdi
;

32 
di˘E¡ry
 *
	mde
;

33 } 
	mht
;

34 } 
	m£t
;

37 
	u_ôîz£t
 {

39 *
	mzl
;

40 *
	mïå
, *
	m•å
;

41 } 
	mzl
;

43 
z£t
 *
	mzs
;

44 
zskùli°Node
 *
	mnode
;

45 } 
	m¶
;

46 } 
	mz£t
;

47 } 
	môî
;

48 } 
	tz£t›§c
;

52 
	mÊags
;

53 
	m_buf
[32];

54 
robj
 *
	mñe
;

55 *
	me°r
;

56 
	mñí
;

57 
	mñl
;

58 
	msc‹e
;

59 } 
	tz£t›vÆ
;

61 
zskùli°Node
 *
z¶Cª©eNode
(
Àvñ
, 
sc‹e
, 
robj
 *
obj
);

62 
zskùli°
 *
z¶Cª©e
();

63 
z¶FªeNode
(
zskùli°Node
 *
node
);

64 
z¶Fªe
(
zskùli°
 *
z¶
);

65 
z¶R™domLevñ
();

66 
zskùli°Node
 *
z¶In£π
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
);

67 
z¶DñëeNode
(
zskùli°
 *
z¶
, 
zskùli°Node
 *
x
, zskùli°Nodê**
upd©e
);

68 
z¶Dñëe
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
obj
);

69 
z¶VÆueLãMax
(
vÆue
, 
zønge•ec
 *
•ec
);

70 
z¶IsInR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

71 
zskùli°Node
 *
z¶Fú°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

72 
zskùli°Node
 *
z¶La°InR™ge
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
);

73 
z¶DñëeR™geBySc‹e
(
zskùli°
 *
z¶
, 
zønge•ec
 *
ønge
, 
di˘
 *dict);

74 
z¶DñëeR™geByLex
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
, 
di˘
 *dict);

75 
z¶DñëeR™geByR™k
(
zskùli°
 *
z¶
, 
°¨t
, 
íd
, 
di˘
 *dict);

76 
z¶GëR™k
(
zskùli°
 *
z¶
, 
sc‹e
, 
robj
 *
o
);

77 
zskùli°Node
* 
z¶GëEÀmítByR™k
(
zskùli°
 *
z¶
, 
ønk
);

78 
z¶P¨£LexR™geIãm
(
robj
 *
ôem
,Ñobj **
de°
, *
ex
);

79 
z¶FªeLexR™ge
(
zÀxønge•ec
 *
•ec
);

80 
com∑ªSåögObje˘sF‹LexR™ge
(
robj
 *
a
,Ñobj *
b
);

81 
z¶IsInLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

82 
zskùli°Node
 *
z¶Fú°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

83 
zskùli°Node
 *
z¶La°InLexR™ge
(
zskùli°
 *
z¶
, 
zÀxønge•ec
 *
ønge
);

84 
zzlGëSc‹e
(*
•å
);

85 
robj
 *
zùli°GëObje˘
(*
•å
);

86 
zzlCom∑ªEÀmíts
(*
ïå
, *
c°r
, 
˛í
);

87 
zzlLígth
(*
zl
);

88 
zzlNext
(*
zl
, **
ïå
, **
•å
);

89 
zzlPªv
(*
zl
, **
ïå
, **
•å
);

90 
zzlIsInR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

91 *
zzlFú°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

92 *
zzlLa°InR™ge
(*
zl
, 
zønge•ec
 *
ønge
);

93 
zzlIsInLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

94 *
zzlFú°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

96 *
zzlLa°InLexR™ge
(*
zl
, 
zÀxønge•ec
 *
ønge
);

97 *
zzlFöd
(*
zl
, 
robj
 *
ñe
, *
sc‹e
);

98 *
zzlDñëe
(*
zl
, *
ïå
);

99 *
zzlIn£πAt
(*
zl
, *
ïå
, 
robj
 *
ñe
, 
sc‹e
);

100 *
zzlIn£π
(*
zl
, 
robj
 *
ñe
, 
sc‹e
);

101 *
zzlDñëeR™geBySc‹e
(*
zl
, 
zønge•ec
 *
ønge
, *
dñëed
);

102 *
zzlDñëeR™geByLex
(*
zl
, 
zÀxønge•ec
 *
ønge
, *
dñëed
);

103 *
zzlDñëeR™geByR™k
(*
zl
, 
°¨t
, 
íd
, *
dñëed
);

104 
z£tLígth
(
robj
 *
zobj
);

105 
z£tC⁄vît
(
robj
 *
zobj
, 
ícodög
);

106 
z£tC⁄vîtToZùli°IfNìded
(
robj
 *
zobj
, 
size_t
 
maxññí
);

107 
z£tSc‹e
(
robj
 *
zobj
,Ñobj *
membî
, *
sc‹e
);

109 
zaddGíîicComm™d
(
˛õ¡
 *
c
, 
Êags
);

110 
zaddComm™d
(
˛õ¡
 *
c
);

111 
zö¸byComm™d
(
˛õ¡
 *
c
);

112 
zªmComm™d
(
˛õ¡
 *
c
);

113 
zªmøngeGíîicComm™d
(
˛õ¡
 *
c
, 
øngëy≥
);

114 
zªmøngebyønkComm™d
(
˛õ¡
 *
c
);

115 
zªmøngebysc‹eComm™d
(
˛õ¡
 *
c
);

116 
zªmøngebyÀxComm™d
(
˛õ¡
 *
c
) ;

118 
zuiInôIãøt‹
(
z£t›§c
 *
›
);

119 
zuiCÀ¨Iãøt‹
(
z£t›§c
 *
›
);

120 
zuiLígth
(
z£t›§c
 *
›
);

125 
zuiNext
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
);

126 
zuiL⁄gL⁄gFromVÆue
(
z£t›vÆ
 *
vÆ
);

127 
robj
 *
zuiObje˘FromVÆue
(
z£t›vÆ
 *
vÆ
);

128 
zuiBuf„rFromVÆue
(
z£t›vÆ
 *
vÆ
);

132 
zuiFöd
(
z£t›§c
 *
›
, 
z£t›vÆ
 *
vÆ
, *
sc‹e
);

133 
zuiCom∑ªByC¨döÆôy
(c⁄° *
s1
, c⁄° *
s2
);

134 
zuni⁄I¡îGíîicComm™d
(
˛õ¡
 *
c
, 
robj
 *
d°key
, 
›
);

135 
zuni⁄°‹eComm™d
(
˛õ¡
 *
c
);

136 
zöãr°‹eComm™d
(
˛õ¡
 *
c
);

137 
zøngeGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

138 
zøngeComm™d
(
˛õ¡
 *
c
);

139 
zªvøngeComm™d
(
˛õ¡
 *
c
);

142 
gíîicZøngebysc‹eComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

143 
zøngebysc‹eComm™d
(
˛õ¡
 *
c
);

144 
zªvøngebysc‹eComm™d
(
˛õ¡
 *
c
);

145 
zcou¡Comm™d
(
˛õ¡
 *
c
);

146 
zÀxcou¡Comm™d
(
˛õ¡
 *
c
);

149 
gíîicZøngebyÀxComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

150 
zøngebyÀxComm™d
(
˛õ¡
 *
c
);

151 
zªvøngebyÀxComm™d
(
˛õ¡
 *
c
);

152 
zˇrdComm™d
(
˛õ¡
 *
c
);

153 
zsc‹eComm™d
(
˛õ¡
 *
c
);

154 
zønkGíîicComm™d
(
˛õ¡
 *
c
, 
ªvî£
);

155 
zønkComm™d
(
˛õ¡
 *
c
);

156 
zªvønkComm™d
(
˛õ¡
 *
c
);

157 
zsˇnComm™d
(
˛õ¡
 *
c
);

	@src/vr_thread.c

1 
	~<vr_c‹e.h
>

4 
	$vr_thªad_öô
(
vr_thªad
 *
thªad
)

6 i‡(
thªad
 =
NULL
) {

7  
VR_ERROR
;

10 
thªad
->
id
 = 0;

11 
thªad
->
thªad_id
 = 0;

12 
thªad
->
fun_run
 = 
NULL
;

13 
thªad
->
d©a
 = 
NULL
;

15  
VR_OK
;

16 
	}
}

19 
	$vr_thªad_deöô
(
vr_thªad
 *
thªad
)

21 i‡(
thªad
 =
NULL
) {

25 
thªad
->
id
 = 0;

26 
thªad
->
thªad_id
 = 0;

27 
thªad
->
fun_run
 = 
NULL
;

28 
thªad
->
d©a
 = 
NULL
;

29 
	}
}

31 *
	$vr_thªad_run
(*
d©a
)

33 
vr_thªad
 *
thªad
 = 
d©a
;

34 
	`§™d
(
	`vr_u£c_now
()^()
	`±hªad_£lf
());

36 
thªad
->
	`fun_run
—hªad->
d©a
);

37 
	}
}

39 
	$vr_thªad_°¨t
(
vr_thªad
 *
thªad
)

41 
±hªad_©å_t
 
©å
;

42 
	`±hªad_©å_öô
(&
©å
);

44 i‡(
thªad
 =
NULL
 ||Åhªad->
fun_run
 == NULL) {

45  
VR_ERROR
;

48 
	`±hªad_¸óã
(&
thªad
->
thªad_id
,

49 &
©å
, 
vr_thªad_run
, 
thªad
);

51  
VR_OK
;

52 
	}
}

	@src/vr_thread.h

1 #i‚de‡
_VR_THREAD_H_


2 
	#_VR_THREAD_H_


	)

4 *(*
	tvr_thªad_func_t
)(*
	td©a
);

6 
	svr_thªad
 {

7 
	mid
;

8 
±hªad_t
 
	mthªad_id
;

10 
vr_thªad_func_t
 
	mfun_run
;

11 *
	md©a
;

12 }
	tvr_thªad
;

14 
vr_thªad_öô
(
vr_thªad
 *
thªad
);

15 
vr_thªad_deöô
(
vr_thªad
 *
thªad
);

16 
vr_thªad_°¨t
(
vr_thªad
 *
thªad
);

	@src/vr_util.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<f˙é.h
>

7 
	~<√tdb.h
>

9 
	~<sys/time.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/io˘l.h
>

14 
	~<√töë/ö.h
>

15 
	~<√töë/t˝.h
>

17 
	~<vr_c‹e.h
>

19 #ifde‡
VR_HAVE_BACKTRACE


20 
	~<execöfo.h
>

24 
	$vr_£t_blockög
(
sd
)

26 
Êags
;

28 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

29 i‡(
Êags
 < 0) {

30  
Êags
;

33  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
);

34 
	}
}

37 
	$vr_£t_n⁄blockög
(
sd
)

39 
Êags
;

41 
Êags
 = 
	`f˙é
(
sd
, 
F_GETFL
, 0);

42 i‡(
Êags
 < 0) {

43  
Êags
;

46  
	`f˙é
(
sd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

47 
	}
}

50 
	$vr_£t_ªu£addr
(
sd
)

52 
ªu£
;

53 
sockÀn_t
 
Àn
;

55 
ªu£
 = 1;

56 
Àn
 = (
ªu£
);

58  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
ªu£
, 
Àn
);

59 
	}
}

70 
	$vr_£t_t˝nodñay
(
sd
)

72 
nodñay
;

73 
sockÀn_t
 
Àn
;

75 
nodñay
 = 1;

76 
Àn
 = (
nodñay
);

78  
	`£tsock›t
(
sd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
nodñay
, 
Àn
);

79 
	}
}

82 
	$vr_£t_lögî
(
sd
, 
timeout
)

84 
lögî
Üinger;

85 
sockÀn_t
 
Àn
;

87 
lögî
.
l_⁄off
 = 1;

88 
lögî
.
l_lögî
 = 
timeout
;

90 
Àn
 = (
lögî
);

92  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_LINGER
, &
lögî
, 
Àn
);

93 
	}
}

96 
	$vr_£t_¢dbuf
(
sd
, 
size
)

98 
sockÀn_t
 
Àn
;

100 
Àn
 = (
size
);

102  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, 
Àn
);

103 
	}
}

106 
	$vr_£t_rcvbuf
(
sd
, 
size
)

108 
sockÀn_t
 
Àn
;

110 
Àn
 = (
size
);

112  
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, 
Àn
);

113 
	}
}

116 
	$vr_gë_s€º‹
(
sd
)

118 
°©us
, 
îr
;

119 
sockÀn_t
 
Àn
;

121 
îr
 = 0;

122 
Àn
 = (
îr
);

124 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
Àn
);

125 i‡(
°©us
 == 0) {

126 
î∫o
 = 
îr
;

129  
°©us
;

130 
	}
}

133 
	$vr_gë_¢dbuf
(
sd
)

135 
°©us
, 
size
;

136 
sockÀn_t
 
Àn
;

138 
size
 = 0;

139 
Àn
 = (
size
);

141 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
size
, &
Àn
);

142 i‡(
°©us
 < 0) {

143  
°©us
;

146  
size
;

147 
	}
}

150 
	$vr_gë_rcvbuf
(
sd
)

152 
°©us
, 
size
;

153 
sockÀn_t
 
Àn
;

155 
size
 = 0;

156 
Àn
 = (
size
);

158 
°©us
 = 
	`gësock›t
(
sd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
, &
Àn
);

159 i‡(
°©us
 < 0) {

160  
°©us
;

163  
size
;

164 
	}
}

167 
	$vr_£t_t˝kì∑live
(
sd
, 
kìpidÀ
, 
kìpöãrvÆ
, 
kìpcou¡
)

169 
r°©us_t
 
°©us
;

170 
t˝kì∑live
;

171 
sockÀn_t
 
Àn
;

173 
t˝kì∑live
 = 1;

174 
Àn
 = (
t˝kì∑live
);

176 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, &
t˝kì∑live
, 
Àn
);

177 i‡(
°©us
 < 0) {

178 
	`log_îr‹
("£tsock›àSO_KEEPALIVE cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

179  
VR_ERROR
;

182 #ifde‡
SOL_TCP


183 i‡(
kìpidÀ
 > 0) {

184 
Àn
 = (
kìpidÀ
);

185 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
kìpidÀ
, 
Àn
);

186 i‡(
°©us
 < 0) {

187 
	`log_îr‹
("£tsock›àTCP_KEEPIDLE cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

188  
VR_ERROR
;

192 i‡(
kìpöãrvÆ
 > 0) {

193 
Àn
 = (
kìpöãrvÆ
);

194 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
kìpöãrvÆ
, 
Àn
);

195 i‡(
°©us
 < 0) {

196 
	`log_îr‹
("£tsock›àTCP_KEEPINTVL cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

197  
VR_ERROR
;

201 i‡(
kìpcou¡
 > 0) {

202 
Àn
 = (
kìpcou¡
);

203 
°©us
 = 
	`£tsock›t
(
sd
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
kìpcou¡
, 
Àn
);

204 i‡(
°©us
 < 0) {

205 
	`log_îr‹
("£tsock›àTCP_KEEPCNT cÆ»îr‹(%s)", 
	`°ªº‹
(
î∫o
));

206  
VR_ERROR
;

211  
VR_OK
;

212 
	}
}

215 
	$_vr_©oi
(*
löe
, 
size_t
 
n
)

217 
vÆue
;

219 i‡(
n
 == 0) {

223 
vÆue
 = 0; 
n
--; 
löe
++) {

224 i‡(*
löe
 < '0' || *line > '9') {

228 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

231 i‡(
vÆue
 < 0) {

235  
vÆue
;

236 
	}
}

240 
uöt32_t
 
	$digôs10
(
uöt64_t
 
v
) {

241 i‡(
v
 < 10)  1;

242 i‡(
v
 < 100)  2;

243 i‡(
v
 < 1000)  3;

244 i‡(
v
 < 1000000000000UL) {

245 i‡(
v
 < 100000000UL) {

246 i‡(
v
 < 1000000) {

247 i‡(
v
 < 10000)  4;

248  5 + (
v
 >= 100000);

250  7 + (
v
 >= 10000000UL);

252 i‡(
v
 < 10000000000UL) {

253  9 + (
v
 >= 1000000000UL);

255  11 + (
v
 >= 100000000000UL);

257  12 + 
	`digôs10
(
v
 / 1000000000000UL);

258 
	}
}

261 
uöt32_t
 
	$sdigôs10
(
öt64_t
 
v
) {

262 i‡(
v
 < 0) {

264 
uöt64_t
 
uv
 = (
v
 !
LLONG_MIN
) ?

265 (
uöt64_t
)-
v
 : ((uöt64_tË
LLONG_MAX
)+1;

266  
	`digôs10
(
uv
)+1;

268  
	`digôs10
(
v
);

270 
	}
}

284 
	$Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
) {

285 c⁄° 
digôs
[201] =

291 
√g©ive
;

292 
vÆue
;

296 i‡(
svÆue
 < 0) {

297 i‡(
svÆue
 !
LLONG_MIN
) {

298 
vÆue
 = -
svÆue
;

300 
vÆue
 = ((Ë
LLONG_MAX
)+1;

302 
√g©ive
 = 1;

304 
vÆue
 = 
svÆue
;

305 
√g©ive
 = 0;

309 
uöt32_t
 c⁄° 
Àngth
 = 
	`digôs10
(
vÆue
)+
√g©ive
;

310 i‡(
Àngth
 >
d°Àn
)  0;

313 
uöt32_t
 
√xt
 = 
Àngth
;

314 
d°
[
√xt
] = '\0';

315 
√xt
--;

316 
vÆue
 >= 100) {

317 c⁄° 
i
 = (
vÆue
 % 100) * 2;

318 
vÆue
 /= 100;

319 
d°
[
√xt
] = 
digôs
[
i
 + 1];

320 
d°
[
√xt
 - 1] = 
digôs
[
i
];

321 
√xt
 -= 2;

325 i‡(
vÆue
 < 10) {

326 
d°
[
√xt
] = '0' + (
uöt32_t
Ë
vÆue
;

328 
i
 = (
uöt32_t
Ë
vÆue
 * 2;

329 
d°
[
√xt
] = 
digôs
[
i
 + 1];

330 
d°
[
√xt
 - 1] = 
digôs
[
i
];

334 i‡(
√g©ive
Ë
d°
[0] = '-';

335  
Àngth
;

336 
	}
}

342 
	$°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
) {

343 c⁄° *
p
 = 
s
;

344 
size_t
 
∂í
 = 0;

345 
√g©ive
 = 0;

346 
v
;

348 i‡(
∂í
 =
¶í
)

352 i‡(
¶í
 =1 && 
p
[0] == '0') {

353 i‡(
vÆue
 !
NULL
) *value = 0;

357 i‡(
p
[0] == '-') {

358 
√g©ive
 = 1;

359 
p
++; 
∂í
++;

362 i‡(
∂í
 =
¶í
)

367 i‡(
p
[0] >= '1' &&Ö[0] <= '9') {

368 
v
 = 
p
[0]-'0';

369 
p
++; 
∂í
++;

370 } i‡(
p
[0] ='0' && 
¶í
 == 1) {

371 *
vÆue
 = 0;

377 
∂í
 < 
¶í
 && 
p
[0] >= '0' &&Ö[0] <= '9') {

378 i‡(
v
 > (
ULLONG_MAX
 / 10))

380 
v
 *= 10;

382 i‡(
v
 > (
ULLONG_MAX
 - (
p
[0]-'0')))

384 
v
 +
p
[0]-'0';

386 
p
++; 
∂í
++;

390 i‡(
∂í
 < 
¶í
)

393 i‡(
√g©ive
) {

394 i‡(
v
 > (()(-(
LLONG_MIN
+1))+1))

396 i‡(
vÆue
 !
NULL
Ë*vÆuê-
v
;

398 i‡(
v
 > 
LLONG_MAX
)

400 i‡(
vÆue
 !
NULL
Ë*vÆuê
v
;

403 
	}
}

408 
	$°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
) {

409 
ŒvÆ
;

411 i‡(!
	`°rög2Œ
(
s
,
¶í
,&
ŒvÆ
))

414 i‡(
ŒvÆ
 < 
LONG_MIN
 ||ÜlvÆ > 
LONG_MAX
)

417 *
lvÆ
 = ()
ŒvÆ
;

419 
	}
}

423 
	$d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
) {

424 i‡(
	`i¢™
(
vÆue
)) {

425 
Àn
 = 
	`¢¥ötf
(
buf
,len,"nan");

426 } i‡(
	`isöf
(
vÆue
)) {

427 i‡(
vÆue
 < 0)

428 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-inf");

430 
Àn
 = 
	`¢¥ötf
(
buf
,len,"inf");

431 } i‡(
vÆue
 == 0) {

433 i‡(1.0/
vÆue
 < 0)

434 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-0");

436 
Àn
 = 
	`¢¥ötf
(
buf
,len,"0");

438 #i‡(
DBL_MANT_DIG
 >52Ë&& (
LLONG_MAX
 == 0x7fffffffffffffffLL)

448 
mö
 = -4503599627370495;

449 
max
 = 4503599627370496;

450 i‡(
vÆue
 > 
mö
 && vÆuê< 
max
 && value == (()(()value)))

451 
Àn
 = 
	`Œ2°rög
(
buf
,Àn,()
vÆue
);

454 
Àn
 = 
	`¢¥ötf
(
buf
,Àn,"%.17g",
vÆue
);

457  
Àn
;

458 
	}
}

460 
boﬁ


461 
	$vr_vÆid_p‹t
(
n
)

463 i‡(
n
 < 1 ||Ç > 
UINT16_MAX
) {

464  
Ál£
;

467  
åue
;

468 
	}
}

473 
ssize_t


474 
	$_vr_£ndn
(
sd
, c⁄° *
v±r
, 
size_t
 
n
)

476 
size_t
 
∆e·
;

477 
ssize_t
 
n£nd
;

478 c⁄° *
±r
;

480 
±r
 = 
v±r
;

481 
∆e·
 = 
n
;

482 
∆e·
 > 0) {

483 
n£nd
 = 
	`£nd
(
sd
, 
±r
, 
∆e·
, 0);

484 i‡(
n£nd
 < 0) {

485 i‡(
î∫o
 =
EINTR
) {

488  
n£nd
;

490 i‡(
n£nd
 == 0) {

494 
∆e·
 -(
size_t
)
n£nd
;

495 
±r
 +
n£nd
;

498  (
ssize_t
)
n
;

499 
	}
}

504 
ssize_t


505 
	$_vr_ªcvn
(
sd
, *
v±r
, 
size_t
 
n
)

507 
size_t
 
∆e·
;

508 
ssize_t
 
ƒecv
;

509 *
±r
;

511 
±r
 = 
v±r
;

512 
∆e·
 = 
n
;

513 
∆e·
 > 0) {

514 
ƒecv
 = 
	`ªcv
(
sd
, 
±r
, 
∆e·
, 0);

515 i‡(
ƒecv
 < 0) {

516 i‡(
î∫o
 =
EINTR
) {

519  
ƒecv
;

521 i‡(
ƒecv
 == 0) {

525 
∆e·
 -(
size_t
)
ƒecv
;

526 
±r
 +
ƒecv
;

529  (
ssize_t
)(
n
 - 
∆e·
);

530 
	}
}

535 
öt64_t


536 
	$vr_u£c_now
()

538 
timevÆ
 
now
;

539 
öt64_t
 
u£c
;

540 
°©us
;

542 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

543 i‡(
°©us
 < 0) {

544 
	`log_îr‹
("gëtimeofday faûed: %s", 
	`°ªº‹
(
î∫o
));

548 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

550  
u£c
;

551 
	}
}

556 
öt64_t


557 
	$vr_m£c_now
()

559  
	`vr_u£c_now
() / 1000LL;

560 
	}
}

563 
	$vr_ªsﬁve_öë
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
)

565 
°©us
;

566 
addröfo
 *
ai
, *
ˇi
;

567 
addröfo
 
höts
;

568 *
node
, 
£rvi˚
[
VR_UINTMAX_MAXLEN
];

569 
boﬁ
 
found
;

571 
	`ASSERT
(
	`vr_vÆid_p‹t
(
p‹t
));

573 
	`mem£t
(&
höts
, 0, (hints));

574 
höts
.
ai_Êags
 = 
AI_NUMERICSERV
;

575 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

576 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

577 
höts
.
ai_¥Ÿocﬁ
 = 0;

578 
höts
.
ai_addæí
 = 0;

579 
höts
.
ai_addr
 = 
NULL
;

580 
höts
.
ai_ˇn⁄«me
 = 
NULL
;

582 i‡(
«me
 !
NULL
) {

583 
node
 = (*)
«me
;

591 
node
 = 
NULL
;

592 
höts
.
ai_Êags
 |
AI_PASSIVE
;

595 
	`d¢¥ötf
(
£rvi˚
, 
VR_UINTMAX_MAXLEN
, "%d", 
p‹t
);

601 
°©us
 = 
	`gëaddröfo
(
node
, 
£rvi˚
, &
höts
, &
ai
);

602 i‡(
°©us
 != 0) {

603 
	`log_îr‹
("addressÑesolution ofÇode '%s' service '%s' failed: %s",

604 
node
, 
£rvi˚
, 
	`gai_°ªº‹
(
°©us
));

619 
ˇi
 = 
ai
, 
found
 = 
Ál£
; caò!
NULL
; caòˇi->
ai_√xt
) {

620 
si
->
Ámûy
 = 
ˇi
->
ai_Ámûy
;

621 
si
->
addæí
 = 
ˇi
->
ai_addæí
;

622 
	`vr_mem˝y
(&
si
->
addr
, 
ˇi
->
ai_addr
, si->
addæí
);

623 
found
 = 
åue
;

627 
	`‰ìaddröfo
(
ai
);

629  !
found
 ? -1 : 0;

630 
	}
}

633 
	$vr_ªsﬁve_unix
(
sds
 
«me
, 
socköfo
 *
si
)

635 
sockaddr_un
 *
un
;

637 i‡(
	`sd¶í
(
«me
Ë>
VR_UNIX_ADDRSTRLEN
) {

641 
un
 = &
si
->
addr
.un;

643 
un
->
sun_Ámûy
 = 
AF_UNIX
;

644 
	`vr_mem˝y
(
un
->
sun_∑th
, 
«me
, 
	`sd¶í
(name));

645 
un
->
sun_∑th
[
	`sd¶í
(
«me
)] = '\0';

647 
si
->
Ámûy
 = 
AF_UNIX
;

648 
si
->
addæí
 = (*
un
);

652 
	}
}

661 
	$vr_ªsﬁve
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
)

663 i‡(
«me
 !
NULL
 &&Çame[0] == '/') {

664  
	`vr_ªsﬁve_unix
(
«me
, 
si
);

667  
	`vr_ªsﬁve_öë
(
«me
, 
p‹t
, 
si
);

668 
	}
}

670 
	$vr_√t_≥î_to_°rög
(
fd
, *
ù
, 
size_t
 
ù_Àn
, *
p‹t
) {

671 
sockaddr_°‹age
 
ß
;

672 
sockÀn_t
 
ßÀn
 = (
ß
);

674 i‡(
	`gë≥î«me
(
fd
,(
sockaddr
*)&
ß
,&
ßÀn
Ë=-1Ë
îr‹
;

675 i‡(
ù_Àn
 =0Ë
îr‹
;

677 i‡(
ß
.
ss_Ámûy
 =
AF_INET
) {

678 
sockaddr_ö
 *
s
 = (sockaddr_ö *)&
ß
;

679 i‡(
ù
Ë
	`öë_¡›
(
AF_INET
,(*)&(
s
->
sö_addr
),ù,
ù_Àn
);

680 i‡(
p‹t
Ë*p‹à
	`¡ohs
(
s
->
sö_p‹t
);

681 } i‡(
ß
.
ss_Ámûy
 =
AF_INET6
) {

682 
sockaddr_ö6
 *
s
 = (sockaddr_ö6 *)&
ß
;

683 i‡(
ù
Ë
	`öë_¡›
(
AF_INET6
,(*)&(
s
->
sö6_addr
),ù,
ù_Àn
);

684 i‡(
p‹t
Ë*p‹à
	`¡ohs
(
s
->
sö6_p‹t
);

685 } i‡(
ß
.
ss_Ámûy
 =
AF_UNIX
) {

686 i‡(
ù
Ë
	`°∫˝y
(ù,"/unixsockë",
ù_Àn
);

687 i‡(
p‹t
) *port = 0;

689 
îr‹
;

693 
îr‹
:

694 i‡(
ù
) {

695 i‡(
ù_Àn
 >= 2) {

696 
ù
[0] = '?';

697 
ù
[1] = '\0';

698 } i‡(
ù_Àn
 == 1) {

699 
ù
[0] = '\0';

702 i‡(
p‹t
) *port = 0;

704 
	}
}

709 
	$vr_√t_f‹m©_addr
(*
buf
, 
size_t
 
buf_Àn
, *
ù
, 
p‹t
) {

710  
	`¢¥ötf
(
buf
,
buf_Àn
, 
	`°rchr
(
ù
,':') ?

711 "[%s]:%d" : "%s:%d", 
ù
, 
p‹t
);

712 
	}
}

715 
	$vr_√t_f‹m©_≥î
(
fd
, *
buf
, 
size_t
 
buf_Àn
) {

716 
ù
[
VR_INET6_ADDRSTRLEN
];

717 
p‹t
;

719 
	`vr_√t_≥î_to_°rög
(
fd
,
ù
,(ù),&
p‹t
);

720  
	`vr_√t_f‹m©_addr
(
buf
, 
buf_Àn
, 
ù
, 
p‹t
);

721 
	}
}

728 
	$gë_øndom_hex_ch¨s
(*
p
, 
Àn
) {

729 *
ch¨£t
 = "0123456789abcdef";

730 
j
;

733 
£ed_öôülized
 = 0;

734 
£ed
[20];

735 
uöt64_t
 
cou¡î
 = 0;

737 i‡(!
£ed_öôülized
) {

742 
FILE
 *
Â
 = 
	`f›í
("/dev/urandom","r");

743 i‡(
Â
 && 
	`‰ód
(
£ed
,(seed),1,fp) == 1)

744 
£ed_öôülized
 = 1;

745 i‡(
Â
Ë
	`f˛o£
(fp);

748 i‡(
£ed_öôülized
) {

749 
Àn
) {

750 
dige°
[20];

751 
SHA1_CTX
 
˘x
;

752 
c›yÀn
 = 
Àn
 > 20 ? 20 :Üen;

754 
	`SHA1Inô
(&
˘x
);

755 
	`SHA1Upd©e
(&
˘x
, 
£ed
, (seed));

756 
	`SHA1Upd©e
(&
˘x
, (*)&
cou¡î
,(counter));

757 
	`SHA1FöÆ
(
dige°
, &
˘x
);

758 
cou¡î
++;

760 
	`mem˝y
(
p
,
dige°
,
c›yÀn
);

762 
j
 = 0; j < 
c›yÀn
; j++Ë
p
[j] = 
ch¨£t
[p[j] & 0x0F];

763 
Àn
 -
c›yÀn
;

764 
p
 +
c›yÀn
;

770 *
x
 = 
p
;

771 
l
 = 
Àn
;

772 
timevÆ
 
tv
;

773 
pid_t
 
pid
 = 
	`gëpid
();

776 
	`gëtimeofday
(&
tv
,
NULL
);

777 i‡(
l
 >(
tv
.
tv_u£c
)) {

778 
	`mem˝y
(
x
,&
tv
.
tv_u£c
,(tv.tv_usec));

779 
l
 -(
tv
.
tv_u£c
);

780 
x
 +(
tv
.
tv_u£c
);

782 i‡(
l
 >(
tv
.
tv_£c
)) {

783 
	`mem˝y
(
x
,&
tv
.
tv_£c
,(tv.tv_sec));

784 
l
 -(
tv
.
tv_£c
);

785 
x
 +(
tv
.
tv_£c
);

787 i‡(
l
 >(
pid
)) {

788 
	`mem˝y
(
x
,&
pid
,(pid));

789 
l
 -(
pid
);

790 
x
 +(
pid
);

794 
j
 = 0; j < 
Àn
; j++) {

795 
p
[
j
] ^
	`ønd
();

796 
p
[
j
] = 
ch¨£t
[p[j] & 0x0F];

799 
	}
}

802 
	$°rögm©chÀn
(c⁄° *
∑âîn
, 
∑âînLí
,

803 c⁄° *
°rög
, 
°rögLí
, 
noˇ£
)

805 
∑âînLí
) {

806 
∑âîn
[0]) {

808 
∑âîn
[1] == '*') {

809 
∑âîn
++;

810 
∑âînLí
--;

812 i‡(
∑âînLí
 == 1)

814 
°rögLí
) {

815 i‡(
	`°rögm©chÀn
(
∑âîn
+1, 
∑âînLí
-1,

816 
°rög
, 
°rögLí
, 
noˇ£
))

818 
°rög
++;

819 
°rögLí
--;

824 i‡(
°rögLí
 == 0)

826 
°rög
++;

827 
°rögLí
--;

831 
nŸ
, 
m©ch
;

833 
∑âîn
++;

834 
∑âînLí
--;

835 
nŸ
 = 
∑âîn
[0] == '^';

836 i‡(
nŸ
) {

837 
∑âîn
++;

838 
∑âînLí
--;

840 
m©ch
 = 0;

842 i‡(
∑âîn
[0] == '\\') {

843 
∑âîn
++;

844 
∑âînLí
--;

845 i‡(
∑âîn
[0] =
°rög
[0])

846 
m©ch
 = 1;

847 } i‡(
∑âîn
[0] == ']') {

849 } i‡(
∑âînLí
 == 0) {

850 
∑âîn
--;

851 
∑âînLí
++;

853 } i‡(
∑âîn
[1] ='-' && 
∑âînLí
 >= 3) {

854 
°¨t
 = 
∑âîn
[0];

855 
íd
 = 
∑âîn
[2];

856 
c
 = 
°rög
[0];

857 i‡(
°¨t
 > 
íd
) {

858 
t
 = 
°¨t
;

859 
°¨t
 = 
íd
;

860 
íd
 = 
t
;

862 i‡(
noˇ£
) {

863 
°¨t
 = 
	`tﬁowî
(start);

864 
íd
 = 
	`tﬁowî
(end);

865 
c
 = 
	`tﬁowî
(c);

867 
∑âîn
 += 2;

868 
∑âînLí
 -= 2;

869 i‡(
c
 >
°¨t
 && c <
íd
)

870 
m©ch
 = 1;

872 i‡(!
noˇ£
) {

873 i‡(
∑âîn
[0] =
°rög
[0])

874 
m©ch
 = 1;

876 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë=tﬁowî(()
°rög
[0]))

877 
m©ch
 = 1;

880 
∑âîn
++;

881 
∑âînLí
--;

883 i‡(
nŸ
)

884 
m©ch
 = !match;

885 i‡(!
m©ch
)

887 
°rög
++;

888 
°rögLí
--;

892 i‡(
∑âînLí
 >= 2) {

893 
∑âîn
++;

894 
∑âînLí
--;

898 i‡(!
noˇ£
) {

899 i‡(
∑âîn
[0] !
°rög
[0])

902 i‡(
	`tﬁowî
(()
∑âîn
[0]Ë!tﬁowî(()
°rög
[0]))

905 
°rög
++;

906 
°rögLí
--;

909 
∑âîn
++;

910 
∑âînLí
--;

911 i‡(
°rögLí
 == 0) {

912 *
∑âîn
 == '*') {

913 
∑âîn
++;

914 
∑âînLí
--;

919 i‡(
∑âînLí
 =0 && 
°rögLí
 == 0)

922 
	}
}

924 
	$°rögm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
) {

925  
	`°rögm©chÀn
(
∑âîn
,
	`°æí
’©ã∫),
°rög
,°æí(°rög),
noˇ£
);

926 
	}
}

930 
	$memªv16
(*
p
) {

931 *
x
 = 
p
, 
t
;

933 
t
 = 
x
[0];

934 
x
[0] = x[1];

935 
x
[1] = 
t
;

936 
	}
}

940 
	$memªv32
(*
p
) {

941 *
x
 = 
p
, 
t
;

943 
t
 = 
x
[0];

944 
x
[0] = x[3];

945 
x
[3] = 
t
;

946 
t
 = 
x
[1];

947 
x
[1] = x[2];

948 
x
[2] = 
t
;

949 
	}
}

953 
	$memªv64
(*
p
) {

954 *
x
 = 
p
, 
t
;

956 
t
 = 
x
[0];

957 
x
[0] = x[7];

958 
x
[7] = 
t
;

959 
t
 = 
x
[1];

960 
x
[1] = x[6];

961 
x
[6] = 
t
;

962 
t
 = 
x
[2];

963 
x
[2] = x[5];

964 
x
[5] = 
t
;

965 
t
 = 
x
[3];

966 
x
[3] = x[4];

967 
x
[4] = 
t
;

968 
	}
}

970 
uöt16_t
 
	$öåev16
(
uöt16_t
 
v
) {

971 
	`memªv16
(&
v
);

972  
v
;

973 
	}
}

975 
uöt32_t
 
	$öåev32
(
uöt32_t
 
v
) {

976 
	`memªv32
(&
v
);

977  
v
;

978 
	}
}

980 
uöt64_t
 
	$öåev64
(
uöt64_t
 
v
) {

981 
	`memªv64
(&
v
);

982  
v
;

983 
	}
}

992 
	$memtﬁl
(c⁄° *
p
, *
îr
) {

993 c⁄° *
u
;

994 
buf
[128];

995 
mul
;

996 
vÆ
;

997 
digôs
;

999 i‡(
îr
) *err = 0;

1002 
u
 = 
p
;

1003 i‡(*
u
 == '-') u++;

1004 *
u
 && 
	`isdigô
(*u)) u++;

1005 i‡(*
u
 ='\0' || !
	`°rˇ£cmp
(u,"b")) {

1006 
mul
 = 1;

1007 } i‡(!
	`°rˇ£cmp
(
u
,"k")) {

1008 
mul
 = 1000;

1009 } i‡(!
	`°rˇ£cmp
(
u
,"kb")) {

1010 
mul
 = 1024;

1011 } i‡(!
	`°rˇ£cmp
(
u
,"m")) {

1012 
mul
 = 1000*1000;

1013 } i‡(!
	`°rˇ£cmp
(
u
,"mb")) {

1014 
mul
 = 1024*1024;

1015 } i‡(!
	`°rˇ£cmp
(
u
,"g")) {

1016 
mul
 = 1000L*1000*1000;

1017 } i‡(!
	`°rˇ£cmp
(
u
,"gb")) {

1018 
mul
 = 1024L*1024*1024;

1020 i‡(
îr
) *err = 1;

1026 
digôs
 = 
u
-
p
;

1027 i‡(
digôs
 >(
buf
)) {

1028 i‡(
îr
) *err = 1;

1031 
	`mem˝y
(
buf
,
p
,
digôs
);

1032 
buf
[
digôs
] = '\0';

1034 *
íd±r
;

1035 
î∫o
 = 0;

1036 
vÆ
 = 
	`°πﬁl
(
buf
,&
íd±r
,10);

1037 i‡((
vÆ
 =0 && 
î∫o
 =
EINVAL
Ë|| *
íd±r
 != '\0') {

1038 i‡(
îr
) *err = 1;

1041  
vÆ
*
mul
;

1042 
	}
}

1046 
	$byãsToHum™
(*
s
, 
n
) {

1047 
d
;

1049 i‡(
n
 < 1024) {

1051 
	`•rötf
(
s
,"%ŒuB",
n
);

1053 } i‡(
n
 < (1024*1024)) {

1054 
d
 = ()
n
/(1024);

1055 
	`•rötf
(
s
,"%.2fK",
d
);

1056 } i‡(
n
 < (1024LL*1024*1024)) {

1057 
d
 = ()
n
/(1024*1024);

1058 
	`•rötf
(
s
,"%.2fM",
d
);

1059 } i‡(
n
 < (1024LL*1024*1024*1024)) {

1060 
d
 = ()
n
/(1024LL*1024*1024);

1061 
	`•rötf
(
s
,"%.2fG",
d
);

1062 } i‡(
n
 < (1024LL*1024*1024*1024*1024)) {

1063 
d
 = ()
n
/(1024LL*1024*1024*1024);

1064 
	`•rötf
(
s
,"%.2fT",
d
);

1065 } i‡(
n
 < (1024LL*1024*1024*1024*1024*1024)) {

1066 
d
 = ()
n
/(1024LL*1024*1024*1024*1024);

1067 
	`•rötf
(
s
,"%.2fP",
d
);

1070 
	`•rötf
(
s
,"%ŒuB",
n
);

1072 
	}
}

1081 
sds
 
	$gëAbsﬁuãP©h
(*
fûíame
) {

1082 
cwd
[1024];

1083 
sds
 
ab•©h
;

1084 
sds
 
ªÕ©h
 = 
	`sd¢ew
(
fûíame
);

1086 
ªÕ©h
 = 
	`sd°rim
(relpath," \r\n\t");

1087 i‡(
ªÕ©h
[0] == '/') Ñelpath;

1090 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

1091 
	`sds‰ì
(
ªÕ©h
);

1092  
NULL
;

1094 
ab•©h
 = 
	`sd¢ew
(
cwd
);

1095 i‡(
	`sd¶í
(
ab•©h
) &&ábspath[sdslen(abspath)-1] != '/')

1096 
ab•©h
 = 
	`sdsˇt
(abspath,"/");

1104 
	`sd¶í
(
ªÕ©h
) >= 3 &&

1105 
ªÕ©h
[0] == '.' &&Ñelpath[1] == '.' &&Ñelpath[2] == '/')

1107 
	`sd§™ge
(
ªÕ©h
,3,-1);

1108 i‡(
	`sd¶í
(
ab•©h
) > 1) {

1109 *
p
 = 
ab•©h
 + 
	`sd¶í
(abspath)-2;

1110 
åimÀn
 = 1;

1112 *
p
 != '/') {

1113 
p
--;

1114 
åimÀn
++;

1116 
	`sd§™ge
(
ab•©h
,0,-(
åimÀn
+1));

1121 
ab•©h
 = 
	`sdsˇtsds
◊b•©h,
ªÕ©h
);

1122 
	`sds‰ì
(
ªÕ©h
);

1123  
ab•©h
;

1124 
	}
}

	@src/vr_util.h

1 #i‚de‡
_VR_UTIL_H_


2 
	#_VR_UTIL_H_


	)

4 
	~<°d¨g.h
>

5 
	~<°döt.h
>

6 
	~<°dboﬁ.h
>

8 
	~<√töë/ö.h
>

9 
	~<sys/un.h
>

12 
	#__x°r
(
s
Ë
	`__°r
(s)

	)

13 
	#__°r
(
s
Ë#s

	)

15 
	#VR_INET4_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

16 
	#VR_INET6_ADDRSTRLEN
 \

17 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

18 
	#VR_INET_ADDRSTRLEN
 
	`MAX
(
VR_INET4_ADDRSTRLEN
, 
VR_INET6_ADDRSTRLEN
)

	)

19 
	#VR_UNIX_ADDRSTRLEN
 \

20 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

22 
	#VR_INET_PEER_ID_LEN
 (
VR_INET_ADDRSTRLEN
+32Ë

	)

24 
	#VR_MAXHOSTNAMELEN
 256

	)

36 
	#VR_UINT8_MAXLEN
 (3 + 1)

	)

37 
	#VR_UINT16_MAXLEN
 (5 + 1)

	)

38 
	#VR_UINT32_MAXLEN
 (10 + 1)

	)

39 
	#VR_UINT64_MAXLEN
 (20 + 1)

	)

40 
	#VR_UINTMAX_MAXLEN
 
VR_UINT64_MAXLEN


	)

42 
	#LONG_STR_SIZE
 21

	)

48 
	#VR_ALIGNMENT
 (Ë

	)

49 
	#VR_ALIGN
(
d
, 
n
Ë(((dË+ (¿- 1)Ë& ~“ - 1))

	)

50 
	#VR_ALIGN_PTR
(
p
, 
n
) \

51 (*Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
n
 - 1)Ë& ~((uöçå_tË¿- 1))

	)

57 
	#vr_gëho°«me
(
_«me
, 
_Àn
) \

58 
	`gëho°«me
((*)
_«me
, (
size_t
)
_Àn
)

	)

60 
	#vr_©oi
(
_löe
, 
_n
) \

61 
	`_vr_©oi
((*)
_löe
, (
size_t
)
_n
)

	)

63 
vr_£t_blockög
(
sd
);

64 
vr_£t_n⁄blockög
(
sd
);

65 
vr_£t_ªu£addr
(
sd
);

66 
vr_£t_t˝nodñay
(
sd
);

67 
vr_£t_lögî
(
sd
, 
timeout
);

68 
vr_£t_¢dbuf
(
sd
, 
size
);

69 
vr_£t_rcvbuf
(
sd
, 
size
);

70 
vr_gë_s€º‹
(
sd
);

71 
vr_gë_¢dbuf
(
sd
);

72 
vr_gë_rcvbuf
(
sd
);

73 
vr_£t_t˝kì∑live
(
sd
, 
kìpidÀ
, 
kìpöãrvÆ
, 
kìpcou¡
);

75 
_vr_©oi
(*
löe
, 
size_t
 
n
);

76 
uöt32_t
 
digôs10
(
uöt64_t
 
v
);

77 
uöt32_t
 
sdigôs10
(
öt64_t
 
v
);

78 
Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
);

79 
°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
);

80 
°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
);

81 
d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
);

83 
boﬁ
 
vr_vÆid_p‹t
(
n
);

89 
	#vr_£ndn
(
_s
, 
_b
, 
_n
) \

90 
	`_vr_£ndn
(
_s
, 
_b
, (
size_t
)(
_n
))

	)

92 
	#vr_ªcvn
(
_s
, 
_b
, 
_n
) \

93 
	`_vr_ªcvn
(
_s
, 
_b
, (
size_t
)(
_n
))

	)

99 
	#vr_ªad
(
_d
, 
_b
, 
_n
) \

100 
	`ªad
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

102 
	#vr_ªadv
(
_d
, 
_b
, 
_n
) \

103 
	`ªadv
(
_d
, 
_b
, ()(
_n
))

	)

105 
	#vr_wrôe
(
_d
, 
_b
, 
_n
) \

106 
	`wrôe
(
_d
, 
_b
, (
size_t
)(
_n
))

	)

108 
	#vr_wrôev
(
_d
, 
_b
, 
_n
) \

109 
	`wrôev
(
_d
, 
_b
, ()(
_n
))

	)

111 
ssize_t
 
_vr_£ndn
(
sd
, c⁄° *
v±r
, 
size_t
 
n
);

112 
ssize_t
 
_vr_ªcvn
(
sd
, *
v±r
, 
size_t
 
n
);

114 
öt64_t
 
vr_u£c_now
();

115 
öt64_t
 
vr_m£c_now
();

122 
	ssocköfo
 {

123 
	mÁmûy
;

124 
sockÀn_t
 
	maddæí
;

126 
sockaddr_ö
 
	mö
;

127 
sockaddr_ö6
 
	mö6
;

128 
sockaddr_un
 
	mun
;

129 } 
	maddr
;

132 
vr_ªsﬁve
(
sds
 
«me
, 
p‹t
, 
socköfo
 *
si
);

133 
vr_√t_f‹m©_≥î
(
fd
, *
buf
, 
size_t
 
buf_Àn
);

135 
gë_øndom_hex_ch¨s
(*
p
, 
Àn
);

137 
°rögm©chÀn
(c⁄° *
∑âîn
, 
∑âînLí
, c⁄° *
°rög
, 
°rögLí
, 
noˇ£
);

138 
°rögm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
noˇ£
);

144 
	#vr_mem˝y
(
_d
, 
_c
, 
_n
) \

145 
	`mem˝y
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

147 
	#vr_memmove
(
_d
, 
_c
, 
_n
) \

148 
	`memmove
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

150 
	#vr_memchr
(
_d
, 
_c
, 
_n
) \

151 
	`memchr
(
_d
, 
_c
, (
size_t
)(
_n
))

	)

153 
	#vr_°æí
(
_s
) \

154 
	`°æí
((*)(
_s
))

	)

156 
	#vr_°∫cmp
(
_s1
, 
_s2
, 
_n
) \

157 
	`°∫cmp
((*)(
_s1
), (*)(
_s2
), (
size_t
)(
_n
))

	)

159 
	#vr_°rchr
(
_p
, 
_l
, 
_c
) \

160 
	`_vr_°rchr
((
uöt8_t
 *)(
_p
), (uöt8_à*)(
_l
), (uöt8_t)(
_c
))

	)

162 
	#vr_°ºchr
(
_p
, 
_s
, 
_c
) \

163 
	`_vr_°ºchr
((
uöt8_t
 *)(
_p
),(uöt8_à*)(
_s
), (uöt8_t)(
_c
))

	)

165 
	#vr_°∫dup
(
_s
, 
_n
) \

166 (
uöt8_t
 *)
	`°∫dup
((*)(
_s
), (
size_t
)(
_n
));

	)

168 
ölöe
 
uöt8_t
 *

169 
	$_vr_°rchr
(
uöt8_t
 *
p
, uöt8_à*
œ°
, uöt8_à
c
)

171 
p
 < 
œ°
) {

172 i‡(*
p
 =
c
) {

173  
p
;

175 
p
++;

178  
NULL
;

179 
	}
}

181 
ölöe
 
uöt8_t
 *

182 
	$_vr_°ºchr
(
uöt8_t
 *
p
, uöt8_à*
°¨t
, uöt8_à
c
)

184 
p
 >
°¨t
) {

185 i‡(*
p
 =
c
) {

186  
p
;

188 
p
--;

191  
NULL
;

192 
	}
}

194 
memªv16
(*
p
);

195 
memªv32
(*
p
);

196 
memªv64
(*
p
);

197 
uöt16_t
 
öåev16
(uöt16_à
v
);

198 
uöt32_t
 
öåev32
(uöt32_à
v
);

199 
uöt64_t
 
öåev64
(uöt64_à
v
);

203 #ifde‡
VR_LITTLE_ENDIAN


204 
	#memªv16ifbe
(
p
)

	)

205 
	#memªv32ifbe
(
p
)

	)

206 
	#memªv64ifbe
(
p
)

	)

207 
	#öåev16ifbe
(
v
Ë(v)

	)

208 
	#öåev32ifbe
(
v
Ë(v)

	)

209 
	#öåev64ifbe
(
v
Ë(v)

	)

211 
	#memªv16ifbe
(
p
Ë
	`memªv16
’)

	)

212 
	#memªv32ifbe
(
p
Ë
	`memªv32
’)

	)

213 
	#memªv64ifbe
(
p
Ë
	`memªv64
’)

	)

214 
	#öåev16ifbe
(
v
Ë
	`öåev16
(v)

	)

215 
	#öåev32ifbe
(
v
Ë
	`öåev32
(v)

	)

216 
	#öåev64ifbe
(
v
Ë
	`öåev64
(v)

	)

219 
memtﬁl
(c⁄° *
p
, *
îr
);

220 
byãsToHum™
(*
s
, 
n
);

222 
sds
 
gëAbsﬁuãP©h
(*
fûíame
);

	@src/vr_worker.c

1 
	~<vr_c‹e.h
>

4 
	gœ°_w‹kî_thªad
 = -1;

5 
	gnum_w‹kî_thªads
;

7 
d¨øy
 
	gw‹kîs
;

9 *
w‹kî_thªad_run
(*
¨gs
);

11 
	#SU_PER_ALLOC
 64

	)

14 
c⁄nsw≠unô
 *
	gcsui_‰ìli°
;

15 
±hªad_muãx_t
 
	gcsui_‰ìli°_lock
;

20 
c⁄nsw≠unô
 *

21 
	$csui_√w
() {

22 
c⁄nsw≠unô
 *
ôem
 = 
NULL
;

23 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

24 i‡(
csui_‰ìli°
) {

25 
ôem
 = 
csui_‰ìli°
;

26 
csui_‰ìli°
 = 
ôem
->
√xt
;

28 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

30 i‡(
NULL
 =
ôem
) {

31 
i
;

34 
ôem
 = 
	`dÆloc
((
c⁄nsw≠unô
Ë* 
SU_PER_ALLOC
);

35 i‡(
NULL
 =
ôem
) {

36  
NULL
;

44 
i
 = 2; i < 
SU_PER_ALLOC
; i++)

45 
ôem
[
i
 - 1].
√xt
 = &item[i];

47 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

48 
ôem
[
SU_PER_ALLOC
 - 1].
√xt
 = 
csui_‰ìli°
;

49 
csui_‰ìli°
 = &
ôem
[1];

50 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

53  
ôem
;

54 
	}
}

60 
	$csui_‰ì
(
c⁄nsw≠unô
 *
ôem
) {

61 
	`±hªad_muãx_lock
(&
csui_‰ìli°_lock
);

62 
ôem
->
√xt
 = 
csui_‰ìli°
;

63 
csui_‰ìli°
 = 
ôem
;

64 
	`±hªad_muãx_u∆ock
(&
csui_‰ìli°_lock
);

65 
	}
}

68 
	$csul_push
(
vr_w‹kî
 *
w‹kî
, 
c⁄nsw≠unô
 *
su
)

70 
	`±hªad_muãx_lock
(&
w‹kî
->
csuŒock
);

71 
	`dli°Push
(
w‹kî
->
csul
, 
su
);

72 
	`±hªad_muãx_u∆ock
(&
w‹kî
->
csuŒock
);

73 
	}
}

75 
c⁄nsw≠unô
 *

76 
	$csul_p›
(
vr_w‹kî
 *
w‹kî
)

78 
c⁄nsw≠unô
 *
su
 = 
NULL
;

80 
	`±hªad_muãx_lock
(&
w‹kî
->
csuŒock
);

81 
su
 = 
	`dli°P›
(
w‹kî
->
csul
);

82 
	`±hªad_muãx_u∆ock
(&
w‹kî
->
csuŒock
);

84  
su
;

85 
	}
}

88 
	$vr_w‹kî_öô
(
vr_w‹kî
 *
w‹kî
)

90 
r°©us_t
 
°©us
;

91 
max˛õ¡s
, 
thªads_num
;

92 
fûñimô
;

94 i‡(
w‹kî
 =
NULL
) {

95  
VR_ERROR
;

98 
w‹kî
->
id
 = 0;

99 
w‹kî
->
sockë∑ús
[0] = -1;

100 
w‹kî
->
sockë∑ús
[1] = -1;

101 
w‹kî
->
csul
 = 
NULL
;

102 
	`±hªad_muãx_öô
(&
w‹kî
->
csuŒock
, 
NULL
);

103 
w‹kî
->
cuºít_db
 = 0;

104 
w‹kî
->
timñimô_exô
 = 0;

105 
w‹kî
->
œ°_Á°_cy˛e
 = 0;

106 
w‹kî
->
ªsize_db
 = 0;

107 
w‹kî
->
ªhash_db
 = 0;

109 
	`c⁄f_£rvî_gë
(
CONFIG_SOPN_MAXCLIENTS
,&
max˛õ¡s
);

110 
fûñimô
 = 
	`adju°O≥nFûesLimô
(
max˛õ¡s
);

111 i‡(
fûñimô
 <= 0) {

112  
VR_ERROR
;

114 
	`vr_evíéo›_öô
(&
w‹kî
->
vñ
, 
fûñimô
);

115 
w‹kî
->
vñ
.
thªad
.
fun_run
 = 
w‹kî_thªad_run
;

116 
w‹kî
->
vñ
.
thªad
.
d©a
 = worker;

117 
w‹kî
->
vñ
.
c°abÀ
 = 
	`comm™dSètsTabÀCª©e
();

119 
°©us
 = 
	`sockë∑ú
(
AF_LOCAL
, 
SOCK_STREAM
, 0, 
w‹kî
->
sockë∑ús
);

120 i‡(
°©us
 < 0) {

121 
	`log_îr‹
("¸óã sockë∑ú†Áûed: %s", 
	`°ªº‹
(
î∫o
));

122  
VR_ERROR
;

124 
°©us
 = 
	`vr_£t_n⁄blockög
(
w‹kî
->
sockë∑ús
[0]);

125 i‡(
°©us
 < 0) {

126 
	`log_îr‹
("set socketpairs[0] %dÇonblocking failed: %s",

127 
w‹kî
->
sockë∑ús
[0], 
	`°ªº‹
(
î∫o
));

128 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

129 
w‹kî
->
sockë∑ús
[0] = -1;

130 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

131 
w‹kî
->
sockë∑ús
[1] = -1;

132  
VR_ERROR
;

134 
°©us
 = 
	`vr_£t_n⁄blockög
(
w‹kî
->
sockë∑ús
[1]);

135 i‡(
°©us
 < 0) {

136 
	`log_îr‹
("set socketpairs[1] %dÇonblocking failed: %s",

137 
w‹kî
->
sockë∑ús
[1], 
	`°ªº‹
(
î∫o
));

138 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

139 
w‹kî
->
sockë∑ús
[0] = -1;

140 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

141 
w‹kî
->
sockë∑ús
[1] = -1;

142  
VR_ERROR
;

145 
w‹kî
->
csul
 = 
	`dli°Cª©e
();

146 i‡(
w‹kî
->
csul
 =
NULL
) {

147 
	`log_îr‹
("createÜist failed: out of memory");

148  
VR_ENOMEM
;

151  
VR_OK
;

152 
	}
}

155 
	$vr_w‹kî_deöô
(
vr_w‹kî
 *
w‹kî
)

157 i‡(
w‹kî
 =
NULL
) {

161 
	`vr_evíéo›_deöô
(&
w‹kî
->
vñ
);

163 i‡(
w‹kî
->
sockë∑ús
[0] > 0){

164 
	`˛o£
(
w‹kî
->
sockë∑ús
[0]);

165 
w‹kî
->
sockë∑ús
[0] = -1;

167 i‡(
w‹kî
->
sockë∑ús
[1] > 0){

168 
	`˛o£
(
w‹kî
->
sockë∑ús
[1]);

169 
w‹kî
->
sockë∑ús
[1] = -1;

172 i‡(
w‹kî
->
csul
 !
NULL
) {

173 
	`dli°Rñó£
(
w‹kî
->
csul
);

174 
w‹kî
->
csul
 = 
NULL
;

176 
	}
}

179 
	$w‹kî_gë_√xt_idx
(
curidx
)

181 
idx
 = 
curidx
 + 1;

182  
idx
>=
num_w‹kî_thªads
?0:idx;

183 
	}
}

186 
	$di•©ch_c⁄n_√w
(
vr_li°í
 *
vli°í
, 
sd
)

188 
c⁄nsw≠unô
 *
su
 = 
	`csui_√w
();

189 
buf
[1];

190 
vr_w‹kî
 *
w‹kî
;

192 i‡(
su
 =
NULL
) {

193 
	`˛o£
(
sd
);

195 
	`log_îr‹
("FailedÅoállocate memory for connection swap object\n");

199 
tid
 = (
œ°_w‹kî_thªad
 + 1Ë% 
num_w‹kî_thªads
;

200 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, (
uöt32_t
)
tid
);

202 
œ°_w‹kî_thªad
 = 
tid
;

204 
su
->
num
 = 
sd
;

205 
su
->
d©a
 = 
vli°í
;

207 
	`csul_push
(
w‹kî
, 
su
);

209 
buf
[0] = 'c';

210 i‡(
	`vr_wrôe
(
w‹kî
->
sockë∑ús
[0], 
buf
, 1) != 1) {

211 
	`log_îr‹
("NoticeÅhe worker failed.");

214 
	`upd©e_cuº_˛õ¡s_add
(1);

215 
	}
}

218 
	$thªad_evít_¥o˚ss
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

220 
r°©us_t
 
°©us
;

221 
vr_w‹kî
 *
w‹kî
 = 
¥ivd©a
;

222 
buf
[1];

223 
sd
;

224 
vr_li°í
 *
vli°í
;

225 
c⁄n
 *conn;

226 
c⁄nsw≠unô
 *
csu
;

227 
˛õ¡
 *
c
;

229 
	`ASSERT
(
ñ
 =
w‹kî
->
vñ
.el);

230 
	`ASSERT
(
fd
 =
w‹kî
->
sockë∑ús
[1]);

232 i‡(
	`vr_ªad
(
fd
, 
buf
, 1) != 1) {

233 
	`log_w¨n
("Can'tÑead for worker(id:%d) socketpairs[1](%d)",

234 
w‹kî
->
vñ
.
thªad
.
id
, 
fd
);

235 
buf
[0] = 'c';

238 
buf
[0]) {

240 
csu
 = 
	`csul_p›
(
w‹kî
);

241 i‡(
csu
 =
NULL
) {

244 
sd
 = 
csu
->
num
;

245 
vli°í
 = 
csu
->
d©a
;

246 
	`csui_‰ì
(
csu
);

247 
c⁄n
 = 
	`c⁄n_gë
(
w‹kî
->
vñ
.
cb
);

248 i‡(
c⁄n
 =
NULL
) {

249 
	`log_îr‹
("get conn for c %d failed: %s",

250 
sd
, 
	`°ªº‹
(
î∫o
));

251 
°©us
 = 
	`˛o£
(
sd
);

252 i‡(
°©us
 < 0) {

253 
	`log_îr‹
("˛o£ c %d faûed, ign‹ed: %s", 
sd
, 
	`°ªº‹
(
î∫o
));

257 
c⁄n
->
sd
 = sd;

259 
°©us
 = 
	`vr_£t_n⁄blockög
(
c⁄n
->
sd
);

260 i‡(
°©us
 < 0) {

261 
	`log_îr‹
("setÇonblock on c %d failed: %s",

262 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

263 
	`c⁄n_put
(
c⁄n
);

267 i‡(
vli°í
->
öfo
.
Ámûy
 =
AF_INET
 || vli°í->öfo.Ámûy =
AF_INET6
) {

268 
°©us
 = 
	`vr_£t_t˝nodñay
(
c⁄n
->
sd
);

269 i‡(
°©us
 < 0) {

270 
	`log_w¨n
("setÅcpnodelay on c %d failed, ignored: %s",

271 
c⁄n
->
sd
, 
	`°ªº‹
(
î∫o
));

275 
c
 = 
	`¸óãClõ¡
(&
w‹kî
->
vñ
, 
c⁄n
);

276 i‡(
c
 =
NULL
) {

277 
	`log_îr‹
("Create client failed");

278 
	`c⁄n_put
(
c⁄n
);

281 
c
->
curidx
 = 
w‹kî
->
id
;

282 
°©us
 = 
	`´Cª©eFûeEvít
(
w‹kî
->
vñ
.
ñ
, 
c⁄n
->
sd
, 
AE_READABLE
,

283 
ªadQuîyFromClõ¡
, 
c
);

284 i‡(
°©us
 =
AE_ERR
) {

285 
	`log_îr‹
("UnrecoverableÉrror creating worker ipfd fileÉvent.");

289 
	`upd©e_°©s_add
(
c
->
vñ
->
°©s
, 
numc⁄√˘i⁄s
, 1);

293 
csu
 = 
	`csul_p›
(
w‹kî
);

294 i‡(
csu
 =
NULL
) {

297 
c
 = 
csu
->
d©a
;

298 
	`csui_‰ì
(
csu
);

299 
c
->
vñ
 = &
w‹kî
->vel;

300 
c
->
curidx
 = 
w‹kî
->
id
;

301 
c
->
°ïs
 ++;

302 
c
->
cmd
->
	`¥oc
(c);

304 i‡(
c
->
Êags
&
CLIENT_JUMP
) {

305 
	`di•©ch_c⁄n_exi°
(
c
,c->
èridx
);

307 
	`ª£tClõ¡
(
c
);

308 
	`lökClõ¡ToEvíéo›
(
c
,c->
vñ
);

312 
	`log_îr‹
("readÉrror char '%c' for worker(id:%d) socketpairs[1](%d)",

313 
buf
[0], 
w‹kî
->
vñ
.
thªad
.
id
, w‹kî->
sockë∑ús
[1]);

316 
	}
}

319 
	$£tup_w‹kî
(
vr_w‹kî
 *
w‹kî
)

321 
r°©us_t
 
°©us
;

323 
°©us
 = 
	`´Cª©eFûeEvít
(
w‹kî
->
vñ
.
ñ
, w‹kî->
sockë∑ús
[1], 
AE_READABLE
,

324 
thªad_evít_¥o˚ss
, 
w‹kî
);

325 i‡(
°©us
 =
AE_ERR
) {

326 
	`log_îr‹
("UnrecoverableÉrror creating worker ipfd fileÉvent.");

327  
VR_ERROR
;

330 
	`´SëBef‹eSÀïProc
(
w‹kî
->
vñ
.
ñ
, 
w‹kî_bef‹e_¶ìp
, worker);

334 if(
	`´Cª©eTimeEvít
(
w‹kî
->
vñ
.
ñ
, 1, 
w‹kî_¸⁄
, w‹kî, 
NULL
Ë=
AE_ERR
) {

335 
	`£rvîP™ic
("Can't createÅhe serverCronÅimeÉvent.");

336  
VR_ERROR
;

339  
VR_OK
;

340 
	}
}

343 
	$w‹kî_thªad_run
(*
¨gs
)

345 
vr_w‹kî
 *
w‹kî
 = 
¨gs
;

348 
	`´Maö
(
w‹kî
->
vñ
.
ñ
);

350  
NULL
;

351 
	}
}

354 
	$w‹kîs_öô
(
uöt32_t
 
w‹kî_cou¡
)

356 
r°©us_t
 
°©us
;

357 
uöt32_t
 
idx
;

358 
vr_w‹kî
 *
w‹kî
;

360 
csui_‰ìli°
 = 
NULL
;

361 
	`±hªad_muãx_öô
(&
csui_‰ìli°_lock
, 
NULL
);

363 
	`d¨øy_öô
(&
w‹kîs
, 
w‹kî_cou¡
, (
vr_w‹kî
));

365 
idx
 = 0; idx < 
w‹kî_cou¡
; idx ++) {

366 
w‹kî
 = 
	`d¨øy_push
(&
w‹kîs
);

367 
	`vr_w‹kî_öô
(
w‹kî
);

368 
w‹kî
->
id
 = 
idx
;

369 
°©us
 = 
	`£tup_w‹kî
(
w‹kî
);

370 i‡(
°©us
 !
VR_OK
) {

371 
	`exô
(1);

375 
num_w‹kî_thªads
 = ()
	`d¨øy_n
(&
w‹kîs
);

377  
VR_OK
;

378 
	}
}

381 
	$w‹kîs_run
()

383 
uöt32_t
 
i
, 
thªad_cou¡
;

384 
vr_w‹kî
 *
w‹kî
;

386 
thªad_cou¡
 = (
uöt32_t
)
num_w‹kî_thªads
;

388 
i
 = 0; i < 
thªad_cou¡
; i ++) {

389 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
i
);

390 
	`vr_thªad_°¨t
(&
w‹kî
->
vñ
.
thªad
);

393  
VR_OK
;

394 
	}
}

397 
	$w‹kîs_waô
()

399 
uöt32_t
 
i
, 
thªad_cou¡
;

400 
vr_w‹kî
 *
w‹kî
;

402 
thªad_cou¡
 = (
uöt32_t
)
num_w‹kî_thªads
;

404 
i
 = 0; i < 
thªad_cou¡
; i ++) {

405 
w‹kî
 = 
	`d¨øy_gë
(&
w‹kîs
, 
i
);

406 
	`±hªad_joö
(
w‹kî
->
vñ
.
thªad
.
thªad_id
, 
NULL
);

409  
VR_OK
;

410 
	}
}

413 
	$w‹kîs_deöô
()

415 
vr_w‹kî
 *
w‹kî
;

417 
	`d¨øy_n
(&
w‹kîs
)) {

418 
w‹kî
 = 
	`d¨øy_p›
(&
w‹kîs
);

419 
	`vr_w‹kî_deöô
(
w‹kî
);

421 
	}
}

427 
	$w‹kî_bef‹e_¶ìp
(
´EvítLo›
 *
evítLo›
, *
¥iv©e_d©a
) {

428 
vr_w‹kî
 *
w‹kî
 = 
¥iv©e_d©a
;

430 
	`UNUSED
(
evítLo›
);

431 
	`UNUSED
(
¥iv©e_d©a
);

433 
	`ASSERT
(
evítLo›
 =
w‹kî
->
vñ
.
ñ
);

436 
	`h™dÀClõ¡sWôhPídögWrôes
(&
w‹kî
->
vñ
);

439 
	}
}

442 
	$w‹kî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

443 
vr_w‹kî
 *
w‹kî
 = 
˛õ¡D©a
;

444 
vr_evíéo›
 *
vñ
 = &
w‹kî
->vel;

445 
size_t
 
°©_u£d_mem‹y
, 
°©s_≥ak_mem‹y
;

447 
	`UNUSED
(
evítLo›
);

448 
	`UNUSED
(
id
);

449 
	`UNUSED
(
˛õ¡D©a
);

451 
	`ASSERT
(
evítLo›
 =
vñ
->
ñ
);

453 
vñ
->
unixtime
 = 
	`time
(
NULL
);

454 
vñ
->
m°ime
 = 
	`vr_m£c_now
();

456 
	`run_wôh_≥riod
(100, 
vñ
->
¸⁄lo›s
) {

457 
°©s_vÆue
;

458 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
numcomm™ds
,&
°©s_vÆue
);

459 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_COMMAND
,
°©s_vÆue
);

460 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
√t_öput_byãs
,&
°©s_vÆue
);

461 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_NET_INPUT
,
°©s_vÆue
);

462 
	`upd©e_°©s_gë
(
vñ
->
°©s
,
√t_ouçut_byãs
,&
°©s_vÆue
);

463 
	`åackIn°™è√ousMëric
(
vñ
->
°©s
,
STATS_METRIC_NET_OUTPUT
,
°©s_vÆue
);

467 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

468 
vñ
->
ªsidít_£t_size
 = 
	`dÆloc_gë_rss
();

479 
	`‰ìClõ¡sInAsyncFªeQueue
(
vñ
);

484 
	`run_wôh_≥riod
(1000, 
vñ
->
¸⁄lo›s
) {

485 
	`c⁄f_ˇche_upd©e
(&
vñ
->
cc
);

488 
vñ
->
¸⁄lo›s
 ++;

489  1000/
vñ
->
hz
;

490 
	}
}

	@src/vr_worker.h

1 #i‚de‡
_VR_WORKER_H_


2 
	#_VR_WORKER_H_


	)

4 
	svr_w‹kî
 {

6 
	mid
;

7 
vr_evíéo›
 
	mvñ
;

9 
	msockë∑ús
[2];

11 
dli°
 *
	mcsul
;

12 
±hªad_muãx_t
 
	mcsuŒock
;

16 
	mcuºít_db
;

17 
	mtimñimô_exô
;

18 
	mœ°_Á°_cy˛e
;

23 
	mªsize_db
;

24 
	mªhash_db
;

25 }
	tvr_w‹kî
;

27 
	sc⁄nsw≠unô
 {

28 
	mnum
;

29 *
	md©a
;

30 
c⁄nsw≠unô
 *
	m√xt
;

33 
d¨øy
 
w‹kîs
;

35 
w‹kîs_öô
(
uöt32_t
 
w‹kî_cou¡
);

36 
w‹kîs_run
();

37 
w‹kîs_waô
();

38 
w‹kîs_deöô
();

40 
c⁄nsw≠unô
 *
csui_√w
();

41 
csui_‰ì
(
c⁄nsw≠unô
 *
ôem
);

43 
csul_push
(
vr_w‹kî
 *
w‹kî
, 
c⁄nsw≠unô
 *
su
);

44 
c⁄nsw≠unô
 *
csul_p›
(
vr_w‹kî
 *
w‹kî
);

46 
w‹kî_gë_√xt_idx
(
curidx
);

48 
di•©ch_c⁄n_√w
(
vr_li°í
 *
vli°í
, 
sd
);

50 
w‹kî_bef‹e_¶ìp
(
´EvítLo›
 *
evítLo›
, *
¥iv©e_d©a
);

51 
w‹kî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
);

	@src/vr_ziplist.c

104 
	~<°dio.h
>

105 
	~<°dlib.h
>

106 
	~<°rög.h
>

107 
	~<°döt.h
>

108 
	~<limôs.h
>

110 
	~<vr_c‹e.h
>

112 
	#ZIP_END
 255

	)

113 
	#ZIP_BIGLEN
 254

	)

116 
	#ZIP_STR_MASK
 0xc0

	)

117 
	#ZIP_INT_MASK
 0x30

	)

118 
	#ZIP_STR_06B
 (0 << 6)

	)

119 
	#ZIP_STR_14B
 (1 << 6)

	)

120 
	#ZIP_STR_32B
 (2 << 6)

	)

121 
	#ZIP_INT_16B
 (0xc0 | 0<<4)

	)

122 
	#ZIP_INT_32B
 (0xc0 | 1<<4)

	)

123 
	#ZIP_INT_64B
 (0xc0 | 2<<4)

	)

124 
	#ZIP_INT_24B
 (0xc0 | 3<<4)

	)

125 
	#ZIP_INT_8B
 0x„

	)

127 
	#ZIP_INT_IMM_MASK
 0x0f

	)

128 
	#ZIP_INT_IMM_MIN
 0xf1

	)

129 
	#ZIP_INT_IMM_MAX
 0xfd

	)

130 
	#ZIP_INT_IMM_VAL
(
v
Ë(v & 
ZIP_INT_IMM_MASK
)

	)

132 
	#INT24_MAX
 0x7fffff

	)

133 
	#INT24_MIN
 (-
INT24_MAX
 - 1)

	)

136 
	#ZIP_IS_STR
(
íc
Ë((”ncË& 
ZIP_STR_MASK
Ë< ZIP_STR_MASK)

	)

139 
	#ZIPLIST_BYTES
(
zl
Ë(*((
uöt32_t
*)(zl)))

	)

140 
	#ZIPLIST_TAIL_OFFSET
(
zl
Ë(*((
uöt32_t
*)((zl)+(uöt32_t))))

	)

141 
	#ZIPLIST_LENGTH
(
zl
Ë(*((
uöt16_t
*)((zl)+(
uöt32_t
)*2)))

	)

142 
	#ZIPLIST_HEADER_SIZE
 ((
uöt32_t
)*2+(
uöt16_t
))

	)

143 
	#ZIPLIST_END_SIZE
 ((
uöt8_t
))

	)

144 
	#ZIPLIST_ENTRY_HEAD
(
zl
Ë((zl)+
ZIPLIST_HEADER_SIZE
)

	)

145 
	#ZIPLIST_ENTRY_TAIL
(
zl
Ë((zl)+
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(zl)))

	)

146 
	#ZIPLIST_ENTRY_END
(
zl
Ë((zl)+
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(zl))-1)

	)

150 
	#ZIPLIST_INCR_LENGTH
(
zl
,
ö¸
) { \

151 i‡(
	`ZIPLIST_LENGTH
(
zl
Ë< 
UINT16_MAX
) \

152 
	`ZIPLIST_LENGTH
(
zl
Ë
	`öåev16ifbe
(öåev16ifbe(ZIPLIST_LENGTH(zl))+
ö¸
); \

153 }

	)

155 
	szÀ¡ry
 {

156 
	m¥evøwÀnsize
, 
	m¥evøwÀn
;

157 
	mÀnsize
, 
	mÀn
;

158 
	mhódîsize
;

159 
	mícodög
;

160 *
	mp
;

161 } 
	tzÀ¡ry
;

163 
	#ZIPLIST_ENTRY_ZERO
(
zÀ
) { \

164 (
zÀ
)->
¥evøwÀnsize
 = (zÀ)->
¥evøwÀn
 = 0; \

165 (
zÀ
)->
Ànsize
 = (zÀ)->
Àn
 = (zÀ)->
hódîsize
 = 0; \

166 (
zÀ
)->
ícodög
 = 0; \

167 (
zÀ
)->
p
 = 
NULL
; \

168 }

	)

172 
	#ZIP_ENTRY_ENCODING
(
±r
, 
ícodög
) do { \

173 (
ícodög
Ë(
±r
[0]); \

174 i‡((
ícodög
Ë< 
ZIP_STR_MASK
) (encoding) &= ZIP_STR_MASK; \

175 } 0)

	)

177 
zùli°Rïr
(*
zl
);

180 
	$zùI¡Size
(
ícodög
) {

181 
ícodög
) {

182 
ZIP_INT_8B
:  1;

183 
ZIP_INT_16B
:  2;

184 
ZIP_INT_24B
:  3;

185 
ZIP_INT_32B
:  4;

186 
ZIP_INT_64B
:  8;

189 
	`ASSERT
(
NULL
);

191 
	}
}

195 
	$zùEncodeLígth
(*
p
, 
ícodög
, 
øwÀn
) {

196 
Àn
 = 1, 
buf
[5];

198 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

201 i‡(
øwÀn
 <= 0x3f) {

202 i‡(!
p
Ë 
Àn
;

203 
buf
[0] = 
ZIP_STR_06B
 | 
øwÀn
;

204 } i‡(
øwÀn
 <= 0x3fff) {

205 
Àn
 += 1;

206 i‡(!
p
Ë 
Àn
;

207 
buf
[0] = 
ZIP_STR_14B
 | ((
øwÀn
 >> 8) & 0x3f);

208 
buf
[1] = 
øwÀn
 & 0xff;

210 
Àn
 += 4;

211 i‡(!
p
Ë 
Àn
;

212 
buf
[0] = 
ZIP_STR_32B
;

213 
buf
[1] = (
øwÀn
 >> 24) & 0xff;

214 
buf
[2] = (
øwÀn
 >> 16) & 0xff;

215 
buf
[3] = (
øwÀn
 >> 8) & 0xff;

216 
buf
[4] = 
øwÀn
 & 0xff;

220 i‡(!
p
Ë 
Àn
;

221 
buf
[0] = 
ícodög
;

225 
	`mem˝y
(
p
,
buf
,
Àn
);

226  
Àn
;

227 
	}
}

233 
	#ZIP_DECODE_LENGTH
(
±r
, 
ícodög
, 
Ànsize
, 
Àn
) do { \

234 
	`ZIP_ENTRY_ENCODING
((
±r
), (
ícodög
)); \

235 i‡((
ícodög
Ë< 
ZIP_STR_MASK
) { \

236 i‡((
ícodög
Ë=
ZIP_STR_06B
) { \

237 (
Ànsize
) = 1; \

238 (
Àn
Ë(
±r
)[0] & 0x3f; \

239 } i‡((
ícodög
Ë=
ZIP_STR_14B
) { \

240 (
Ànsize
) = 2; \

241 (
Àn
Ë(((
±r
)[0] & 0x3f) << 8) | (ptr)[1]; \

242 } i‡(
ícodög
 =
ZIP_STR_32B
) { \

243 (
Ànsize
) = 5; \

244 (
Àn
Ë((
±r
)[1] << 24) | \

245 ((
±r
)[2] << 16) | \

246 ((
±r
)[3] << 8) | \

247 ((
±r
)[4]); \

249 
	`ASSERT
(
NULL
); \

252 (
Ànsize
) = 1; \

253 (
Àn
Ë
	`zùI¡Size
(
ícodög
); \

255 } 0);

	)

259 
	$zùPªvEncodeLígth
(*
p
, 
Àn
) {

260 i‡(
p
 =
NULL
) {

261  (
Àn
 < 
ZIP_BIGLEN
) ? 1 : (len)+1;

263 i‡(
Àn
 < 
ZIP_BIGLEN
) {

264 
p
[0] = 
Àn
;

267 
p
[0] = 
ZIP_BIGLEN
;

268 
	`mem˝y
(
p
+1,&
Àn
,(len));

269 
	`memªv32ifbe
(
p
+1);

270  1+(
Àn
);

273 
	}
}

277 
	$zùPªvEncodeLígthF‹˚L¨ge
(*
p
, 
Àn
) {

278 i‡(
p
 =
NULL
) ;

279 
p
[0] = 
ZIP_BIGLEN
;

280 
	`mem˝y
(
p
+1,&
Àn
,(len));

281 
	`memªv32ifbe
(
p
+1);

282 
	}
}

286 
	#ZIP_DECODE_PREVLENSIZE
(
±r
, 
¥evÀnsize
) do { \

287 i‡((
±r
)[0] < 
ZIP_BIGLEN
) { \

288 (
¥evÀnsize
) = 1; \

290 (
¥evÀnsize
) = 5; \

292 } 0);

	)

296 
	#ZIP_DECODE_PREVLEN
(
±r
, 
¥evÀnsize
, 
¥evÀn
) do { \

297 
	`ZIP_DECODE_PREVLENSIZE
(
±r
, 
¥evÀnsize
); \

298 i‡((
¥evÀnsize
) == 1) { \

299 (
¥evÀn
Ë(
±r
)[0]; \

300 } i‡((
¥evÀnsize
) == 5) { \

301 
	`ASSERT
(((
¥evÀnsize
)) == 4); \

302 
	`mem˝y
(&(
¥evÀn
), ((*)(
±r
)) + 1, 4); \

303 
	`memªv32ifbe
(&
¥evÀn
); \

305 } 0);

	)

309 
	$zùPªvLíByãDiff
(*
p
, 
Àn
) {

310 
¥evÀnsize
;

311 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

312  
	`zùPªvEncodeLígth
(
NULL
, 
Àn
Ë- 
¥evÀnsize
;

313 
	}
}

316 
	$zùRawE¡ryLígth
(*
p
) {

317 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
;

318 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

319 
	`ZIP_DECODE_LENGTH
(
p
 + 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
);

320  
¥evÀnsize
 + 
Ànsize
 + 
Àn
;

321 
	}
}

325 
	$zùTryEncodög
(*
íåy
, 
íåyÀn
, *
v
, *
ícodög
) {

326 
vÆue
;

328 i‡(
íåyÀn
 >= 32 ||Éntrylen == 0)  0;

329 i‡(
	`°rög2Œ
((*)
íåy
,
íåyÀn
,&
vÆue
)) {

332 i‡(
vÆue
 >= 0 && value <= 12) {

333 *
ícodög
 = 
ZIP_INT_IMM_MIN
+
vÆue
;

334 } i‡(
vÆue
 >
INT8_MIN
 && vÆuê<
INT8_MAX
) {

335 *
ícodög
 = 
ZIP_INT_8B
;

336 } i‡(
vÆue
 >
INT16_MIN
 && vÆuê<
INT16_MAX
) {

337 *
ícodög
 = 
ZIP_INT_16B
;

338 } i‡(
vÆue
 >
INT24_MIN
 && vÆuê<
INT24_MAX
) {

339 *
ícodög
 = 
ZIP_INT_24B
;

340 } i‡(
vÆue
 >
INT32_MIN
 && vÆuê<
INT32_MAX
) {

341 *
ícodög
 = 
ZIP_INT_32B
;

343 *
ícodög
 = 
ZIP_INT_64B
;

345 *
v
 = 
vÆue
;

349 
	}
}

352 
	$zùSaveI¡egî
(*
p
, 
öt64_t
 
vÆue
, 
ícodög
) {

353 
öt16_t
 
i16
;

354 
öt32_t
 
i32
;

355 
öt64_t
 
i64
;

356 i‡(
ícodög
 =
ZIP_INT_8B
) {

357 ((
öt8_t
*)
p
)[0] = (öt8_t)
vÆue
;

358 } i‡(
ícodög
 =
ZIP_INT_16B
) {

359 
i16
 = 
vÆue
;

360 
	`mem˝y
(
p
,&
i16
,(i16));

361 
	`memªv16ifbe
(
p
);

362 } i‡(
ícodög
 =
ZIP_INT_24B
) {

363 
i32
 = 
vÆue
<<8;

364 
	`memªv32ifbe
(&
i32
);

365 
	`mem˝y
(
p
,((
uöt8_t
*)&
i32
)+1,(i32)-(uint8_t));

366 } i‡(
ícodög
 =
ZIP_INT_32B
) {

367 
i32
 = 
vÆue
;

368 
	`mem˝y
(
p
,&
i32
,(i32));

369 
	`memªv32ifbe
(
p
);

370 } i‡(
ícodög
 =
ZIP_INT_64B
) {

371 
i64
 = 
vÆue
;

372 
	`mem˝y
(
p
,&
i64
,(i64));

373 
	`memªv64ifbe
(
p
);

374 } i‡(
ícodög
 >
ZIP_INT_IMM_MIN
 &&Éncodög <
ZIP_INT_IMM_MAX
) {

377 
	`ASSERT
(
NULL
);

379 
	}
}

382 
öt64_t
 
	$zùLﬂdI¡egî
(*
p
, 
ícodög
) {

383 
öt16_t
 
i16
;

384 
öt32_t
 
i32
;

385 
öt64_t
 
i64
, 
ªt
 = 0;

386 i‡(
ícodög
 =
ZIP_INT_8B
) {

387 
ªt
 = ((
öt8_t
*)
p
)[0];

388 } i‡(
ícodög
 =
ZIP_INT_16B
) {

389 
	`mem˝y
(&
i16
,
p
,(i16));

390 
	`memªv16ifbe
(&
i16
);

391 
ªt
 = 
i16
;

392 } i‡(
ícodög
 =
ZIP_INT_32B
) {

393 
	`mem˝y
(&
i32
,
p
,(i32));

394 
	`memªv32ifbe
(&
i32
);

395 
ªt
 = 
i32
;

396 } i‡(
ícodög
 =
ZIP_INT_24B
) {

397 
i32
 = 0;

398 
	`mem˝y
(((
uöt8_t
*)&
i32
)+1,
p
,(i32)-(uint8_t));

399 
	`memªv32ifbe
(&
i32
);

400 
ªt
 = 
i32
>>8;

401 } i‡(
ícodög
 =
ZIP_INT_64B
) {

402 
	`mem˝y
(&
i64
,
p
,(i64));

403 
	`memªv64ifbe
(&
i64
);

404 
ªt
 = 
i64
;

405 } i‡(
ícodög
 >
ZIP_INT_IMM_MIN
 &&Éncodög <
ZIP_INT_IMM_MAX
) {

406 
ªt
 = (
ícodög
 & 
ZIP_INT_IMM_MASK
)-1;

408 
	`ASSERT
(
NULL
);

410  
ªt
;

411 
	}
}

414 
	$zùE¡ry
(*
p
, 
zÀ¡ry
 *
e
) {

416 
	`ZIP_DECODE_PREVLEN
(
p
, 
e
->
¥evøwÀnsize
,É->
¥evøwÀn
);

417 
	`ZIP_DECODE_LENGTH
(
p
 + 
e
->
¥evøwÀnsize
,É->
ícodög
,É->
Ànsize
,É->
Àn
);

418 
e
->
hódîsize
 =É->
¥evøwÀnsize
 +É->
Ànsize
;

419 
e
->
p
 =Ö;

420 
	}
}

423 *
	$zùli°New
() {

424 
byãs
 = 
ZIPLIST_HEADER_SIZE
+1;

425 *
zl
 = 
	`dÆloc
(
byãs
);

426 
	`ZIPLIST_BYTES
(
zl
Ë
	`öåev32ifbe
(
byãs
);

427 
	`ZIPLIST_TAIL_OFFSET
(
zl
Ë
	`öåev32ifbe
(
ZIPLIST_HEADER_SIZE
);

428 
	`ZIPLIST_LENGTH
(
zl
) = 0;

429 
zl
[
byãs
-1] = 
ZIP_END
;

430  
zl
;

431 
	}
}

434 *
	$zùli°Resize
(*
zl
, 
Àn
) {

435 
zl
 = 
	`dªÆloc
(zl,
Àn
);

436 
	`ZIPLIST_BYTES
(
zl
Ë
	`öåev32ifbe
(
Àn
);

437 
zl
[
Àn
-1] = 
ZIP_END
;

438  
zl
;

439 
	}
}

461 *
	$__zùli°CasˇdeUpd©e
(*
zl
, *
p
) {

462 
size_t
 
cuæí
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)), 
øwÀn
, 
øwÀnsize
;

463 
size_t
 
off£t
, 
noff£t
, 
exåa
;

464 *
≈
;

465 
zÀ¡ry
 
cur
, 
√xt
;

467 
p
[0] !
ZIP_END
) {

468 
	`zùE¡ry
(
p
, &
cur
);

469 
øwÀn
 = 
cur
.
hódîsize
 + cur.
Àn
;

470 
øwÀnsize
 = 
	`zùPªvEncodeLígth
(
NULL
,
øwÀn
);

473 i‡(
p
[
øwÀn
] =
ZIP_END
) ;

474 
	`zùE¡ry
(
p
+
øwÀn
, &
√xt
);

477 i‡(
√xt
.
¥evøwÀn
 =
øwÀn
) ;

479 i‡(
√xt
.
¥evøwÀnsize
 < 
øwÀnsize
) {

482 
off£t
 = 
p
-
zl
;

483 
exåa
 = 
øwÀnsize
-
√xt
.
¥evøwÀnsize
;

484 
zl
 = 
	`zùli°Resize
(zl,
cuæí
+
exåa
);

485 
p
 = 
zl
+
off£t
;

488 
≈
 = 
p
+
øwÀn
;

489 
noff£t
 = 
≈
-
zl
;

492 i‡((
zl
+
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(zl))Ë!
≈
) {

493 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

494 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
exåa
);

498 
	`memmove
(
≈
+
øwÀnsize
,

499 
≈
+
√xt
.
¥evøwÀnsize
,

500 
cuæí
-
noff£t
-
√xt
.
¥evøwÀnsize
-1);

501 
	`zùPªvEncodeLígth
(
≈
,
øwÀn
);

504 
p
 +
øwÀn
;

505 
cuæí
 +
exåa
;

507 i‡(
√xt
.
¥evøwÀnsize
 > 
øwÀnsize
) {

510 
	`zùPªvEncodeLígthF‹˚L¨ge
(
p
+
øwÀn
,rawlen);

512 
	`zùPªvEncodeLígth
(
p
+
øwÀn
,rawlen);

519  
zl
;

520 
	}
}

523 *
	$__zùli°Dñëe
(*
zl
, *
p
, 
num
) {

524 
i
, 
tŸÀn
, 
dñëed
 = 0;

525 
size_t
 
off£t
;

526 
√xtdiff
 = 0;

527 
zÀ¡ry
 
fú°
, 
èû
;

529 
	`zùE¡ry
(
p
, &
fú°
);

530 
i
 = 0; 
p
[0] !
ZIP_END
 && i < 
num
; i++) {

531 
p
 +
	`zùRawE¡ryLígth
(p);

532 
dñëed
++;

535 
tŸÀn
 = 
p
-
fú°
.p;

536 i‡(
tŸÀn
 > 0) {

537 i‡(
p
[0] !
ZIP_END
) {

542 
√xtdiff
 = 
	`zùPªvLíByãDiff
(
p
,
fú°
.
¥evøwÀn
);

543 
p
 -
√xtdiff
;

544 
	`zùPªvEncodeLígth
(
p
,
fú°
.
¥evøwÀn
);

547 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

548 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))-
tŸÀn
);

553 
	`zùE¡ry
(
p
, &
èû
);

554 i‡(
p
[
èû
.
hódîsize
+èû.
Àn
] !
ZIP_END
) {

555 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

556 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
√xtdiff
);

560 
	`memmove
(
fú°
.
p
,p,

561 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
))-(
p
-zl)-1);

564 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

565 
	`öåev32ifbe
((
fú°
.
p
-
zl
)-fú°.
¥evøwÀn
);

569 
off£t
 = 
fú°
.
p
-
zl
;

570 
zl
 = 
	`zùli°Resize
(zl, 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(zl))-
tŸÀn
+
√xtdiff
);

571 
	`ZIPLIST_INCR_LENGTH
(
zl
,-
dñëed
);

572 
p
 = 
zl
+
off£t
;

576 i‡(
√xtdiff
 != 0)

577 
zl
 = 
	`__zùli°CasˇdeUpd©e
(zl,
p
);

579  
zl
;

580 
	}
}

583 *
	$__zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
) {

584 
size_t
 
cuæí
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)), 
ªqÀn
;

585 
¥evÀnsize
, 
¥evÀn
 = 0;

586 
size_t
 
off£t
;

587 
√xtdiff
 = 0;

588 
ícodög
 = 0;

589 
vÆue
 = 123456789;

592 
zÀ¡ry
 
èû
;

595 i‡(
p
[0] !
ZIP_END
) {

596 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

598 *
±aû
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

599 i‡(
±aû
[0] !
ZIP_END
) {

600 
¥evÀn
 = 
	`zùRawE¡ryLígth
(
±aû
);

605 i‡(
	`zùTryEncodög
(
s
,
¶í
,&
vÆue
,&
ícodög
)) {

607 
ªqÀn
 = 
	`zùI¡Size
(
ícodög
);

611 
ªqÀn
 = 
¶í
;

615 
ªqÀn
 +
	`zùPªvEncodeLígth
(
NULL
,
¥evÀn
);

616 
ªqÀn
 +
	`zùEncodeLígth
(
NULL
,
ícodög
,
¶í
);

621 
√xtdiff
 = (
p
[0] !
ZIP_END
Ë? 
	`zùPªvLíByãDiff
’,
ªqÀn
) : 0;

624 
off£t
 = 
p
-
zl
;

625 
zl
 = 
	`zùli°Resize
(zl,
cuæí
+
ªqÀn
+
√xtdiff
);

626 
p
 = 
zl
+
off£t
;

629 i‡(
p
[0] !
ZIP_END
) {

631 
	`memmove
(
p
+
ªqÀn
,p-
√xtdiff
,
cuæí
-
off£t
-1+nextdiff);

634 
	`zùPªvEncodeLígth
(
p
+
ªqÀn
,reqlen);

637 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

638 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
ªqÀn
);

643 
	`zùE¡ry
(
p
+
ªqÀn
, &
èû
);

644 i‡(
p
[
ªqÀn
+
èû
.
hódîsize
+èû.
Àn
] !
ZIP_END
) {

645 
	`ZIPLIST_TAIL_OFFSET
(
zl
) =

646 
	`öåev32ifbe
(öåev32ifbe(
	`ZIPLIST_TAIL_OFFSET
(
zl
))+
√xtdiff
);

650 
	`ZIPLIST_TAIL_OFFSET
(
zl
Ë
	`öåev32ifbe
(
p
-zl);

655 i‡(
√xtdiff
 != 0) {

656 
off£t
 = 
p
-
zl
;

657 
zl
 = 
	`__zùli°CasˇdeUpd©e
(zl,
p
+
ªqÀn
);

658 
p
 = 
zl
+
off£t
;

662 
p
 +
	`zùPªvEncodeLígth
’,
¥evÀn
);

663 
p
 +
	`zùEncodeLígth
’,
ícodög
,
¶í
);

664 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

665 
	`mem˝y
(
p
,
s
,
¶í
);

667 
	`zùSaveI¡egî
(
p
,
vÆue
,
ícodög
);

669 
	`ZIPLIST_INCR_LENGTH
(
zl
,1);

670  
zl
;

671 
	}
}

688 *
	$zùli°Mîge
(**
fú°
, **
£c⁄d
) {

690 i‡(
fú°
 =
NULL
 || *fú° =NULL || 
£c⁄d
 == NULL || *second == NULL)

691  
NULL
;

694 i‡(*
fú°
 =*
£c⁄d
)

695  
NULL
;

697 
size_t
 
fú°_byãs
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(*
fú°
));

698 
size_t
 
fú°_Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(*
fú°
));

700 
size_t
 
£c⁄d_byãs
 = 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(*
£c⁄d
));

701 
size_t
 
£c⁄d_Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(*
£c⁄d
));

703 
≠≥nd
;

704 *
sour˚
, *
èrgë
;

705 
size_t
 
èrgë_byãs
, 
sour˚_byãs
;

709 i‡(
fú°_Àn
 >
£c⁄d_Àn
) {

711 
èrgë
 = *
fú°
;

712 
èrgë_byãs
 = 
fú°_byãs
;

713 
sour˚
 = *
£c⁄d
;

714 
sour˚_byãs
 = 
£c⁄d_byãs
;

715 
≠≥nd
 = 1;

718 
èrgë
 = *
£c⁄d
;

719 
èrgë_byãs
 = 
£c⁄d_byãs
;

720 
sour˚
 = *
fú°
;

721 
sour˚_byãs
 = 
fú°_byãs
;

722 
≠≥nd
 = 0;

726 
size_t
 
zlbyãs
 = 
fú°_byãs
 + 
£c⁄d_byãs
 -

727 
ZIPLIST_HEADER_SIZE
 - 
ZIPLIST_END_SIZE
;

728 
size_t
 
zŒígth
 = 
fú°_Àn
 + 
£c⁄d_Àn
;

731 
zŒígth
 = zŒígth < 
UINT16_MAX
 ? zllength : UINT16_MAX;

734 
size_t
 
fú°_off£t
 = 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(*
fú°
));

735 
size_t
 
£c⁄d_off£t
 = 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(*
£c⁄d
));

738 
èrgë
 = 
	`dªÆloc
—¨gë, 
zlbyãs
);

739 i‡(
≠≥nd
) {

743 
	`mem˝y
(
èrgë
 + 
èrgë_byãs
 - 
ZIPLIST_END_SIZE
,

744 
sour˚
 + 
ZIPLIST_HEADER_SIZE
,

745 
sour˚_byãs
 - 
ZIPLIST_HEADER_SIZE
);

751 
	`memmove
(
èrgë
 + 
sour˚_byãs
 - 
ZIPLIST_END_SIZE
,

752 
èrgë
 + 
ZIPLIST_HEADER_SIZE
,

753 
èrgë_byãs
 - 
ZIPLIST_HEADER_SIZE
);

754 
	`mem˝y
(
èrgë
, 
sour˚
, 
sour˚_byãs
 - 
ZIPLIST_END_SIZE
);

758 
	`ZIPLIST_BYTES
(
èrgë
Ë
	`öåev32ifbe
(
zlbyãs
);

759 
	`ZIPLIST_LENGTH
(
èrgë
Ë
	`öåev16ifbe
(
zŒígth
);

765 
	`ZIPLIST_TAIL_OFFSET
(
èrgë
Ë
	`öåev32ifbe
(

766 (
fú°_byãs
 - 
ZIPLIST_END_SIZE
) +

767 (
£c⁄d_off£t
 - 
ZIPLIST_HEADER_SIZE
));

773 
èrgë
 = 
	`__zùli°CasˇdeUpd©e
—¨gë,Å¨gë+
fú°_off£t
);

776 i‡(
≠≥nd
) {

777 
	`d‰ì
(*
£c⁄d
);

778 *
£c⁄d
 = 
NULL
;

779 *
fú°
 = 
èrgë
;

781 
	`d‰ì
(*
fú°
);

782 *
fú°
 = 
NULL
;

783 *
£c⁄d
 = 
èrgë
;

785  
èrgë
;

786 
	}
}

788 *
	$zùli°Push
(*
zl
, *
s
, 
¶í
, 
whîe
) {

789 *
p
;

790 
p
 = (
whîe
 =
ZIPLIST_HEAD
Ë? 
	`ZIPLIST_ENTRY_HEAD
(
zl
Ë: 
	`ZIPLIST_ENTRY_END
(zl);

791  
	`__zùli°In£π
(
zl
,
p
,
s
,
¶í
);

792 
	}
}

797 *
	$zùli°Index
(*
zl
, 
ödex
) {

798 *
p
;

799 
¥evÀnsize
, 
¥evÀn
 = 0;

800 i‡(
ödex
 < 0) {

801 
ödex
 = (-index)-1;

802 
p
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

803 i‡(
p
[0] !
ZIP_END
) {

804 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

805 
¥evÀn
 > 0 && 
ödex
--) {

806 
p
 -
¥evÀn
;

807 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

811 
p
 = 
	`ZIPLIST_ENTRY_HEAD
(
zl
);

812 
p
[0] !
ZIP_END
 && 
ödex
--) {

813 
p
 +
	`zùRawE¡ryLígth
(p);

816  (
p
[0] =
ZIP_END
 || 
ödex
 > 0Ë? 
NULL
 :Ö;

817 
	}
}

825 *
	$zùli°Next
(*
zl
, *
p
) {

826 ((Ë
zl
);

831 i‡(
p
[0] =
ZIP_END
) {

832  
NULL
;

835 
p
 +
	`zùRawE¡ryLígth
(p);

836 i‡(
p
[0] =
ZIP_END
) {

837  
NULL
;

840  
p
;

841 
	}
}

844 *
	$zùli°Pªv
(*
zl
, *
p
) {

845 
¥evÀnsize
, 
¥evÀn
 = 0;

850 i‡(
p
[0] =
ZIP_END
) {

851 
p
 = 
	`ZIPLIST_ENTRY_TAIL
(
zl
);

852  (
p
[0] =
ZIP_END
Ë? 
NULL
 :Ö;

853 } i‡(
p
 =
	`ZIPLIST_ENTRY_HEAD
(
zl
)) {

854  
NULL
;

856 
	`ZIP_DECODE_PREVLEN
(
p
, 
¥evÀnsize
, 
¥evÀn
);

857 
	`ASSERT
(
¥evÀn
 > 0);

858  
p
-
¥evÀn
;

860 
	}
}

866 
	$zùli°Gë
(*
p
, **
s°r
, *
¶í
, *
svÆ
) {

867 
zÀ¡ry
 
íåy
;

868 i‡(
p
 =
NULL
 ||Ö[0] =
ZIP_END
)  0;

869 i‡(
s°r
Ë*s°∏
NULL
;

871 
	`zùE¡ry
(
p
, &
íåy
);

872 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

873 i‡(
s°r
) {

874 *
¶í
 = 
íåy
.
Àn
;

875 *
s°r
 = 
p
+
íåy
.
hódîsize
;

878 i‡(
svÆ
) {

879 *
svÆ
 = 
	`zùLﬂdI¡egî
(
p
+
íåy
.
hódîsize
,íåy.
ícodög
);

883 
	}
}

886 *
	$zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
) {

887  
	`__zùli°In£π
(
zl
,
p
,
s
,
¶í
);

888 
	}
}

893 *
	$zùli°Dñëe
(*
zl
, **
p
) {

894 
size_t
 
off£t
 = *
p
-
zl
;

895 
zl
 = 
	`__zùli°Dñëe
(zl,*
p
,1);

901 *
p
 = 
zl
+
off£t
;

902  
zl
;

903 
	}
}

906 *
	$zùli°DñëeR™ge
(*
zl
, 
ödex
, 
num
) {

907 *
p
 = 
	`zùli°Index
(
zl
,
ödex
);

908  (
p
 =
NULL
Ë? 
zl
 : 
	`__zùli°Dñëe
(zl,p,
num
);

909 
	}
}

913 
	$zùli°Com∑ª
(*
p
, *
s°r
, 
¶í
) {

914 
zÀ¡ry
 
íåy
;

915 
£ncodög
;

916 
zvÆ
, 
svÆ
;

917 i‡(
p
[0] =
ZIP_END
)  0;

919 
	`zùE¡ry
(
p
, &
íåy
);

920 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

922 i‡(
íåy
.
Àn
 =
¶í
) {

923  
	`memcmp
(
p
+
íåy
.
hódîsize
,
s°r
,
¶í
) == 0;

930 i‡(
	`zùTryEncodög
(
s°r
,
¶í
,&
svÆ
,&
£ncodög
)) {

931 
zvÆ
 = 
	`zùLﬂdI¡egî
(
p
+
íåy
.
hódîsize
,íåy.
ícodög
);

932  
zvÆ
 =
svÆ
;

936 
	}
}

940 *
	$zùli°Föd
(*
p
, *
v°r
, 
vÀn
, 
skù
) {

941 
skù˙t
 = 0;

942 
vícodög
 = 0;

943 
vŒ
 = 0;

945 
p
[0] !
ZIP_END
) {

946 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
;

947 *
q
;

949 
	`ZIP_DECODE_PREVLENSIZE
(
p
, 
¥evÀnsize
);

950 
	`ZIP_DECODE_LENGTH
(
p
 + 
¥evÀnsize
, 
ícodög
, 
Ànsize
, 
Àn
);

951 
q
 = 
p
 + 
¥evÀnsize
 + 
Ànsize
;

953 i‡(
skù˙t
 == 0) {

955 i‡(
	`ZIP_IS_STR
(
ícodög
)) {

956 i‡(
Àn
 =
vÀn
 && 
	`memcmp
(
q
, 
v°r
, vlen) == 0) {

957  
p
;

963 i‡(
vícodög
 == 0) {

964 i‡(!
	`zùTryEncodög
(
v°r
, 
vÀn
, &
vŒ
, &
vícodög
)) {

968 
vícodög
 = 
UCHAR_MAX
;

971 
	`ASSERT
(
vícodög
);

977 i‡(
vícodög
 !
UCHAR_MAX
) {

978 
Œ
 = 
	`zùLﬂdI¡egî
(
q
, 
ícodög
);

979 i‡(
Œ
 =
vŒ
) {

980  
p
;

986 
skù˙t
 = 
skù
;

989 
skù˙t
--;

993 
p
 = 
q
 + 
Àn
;

996  
NULL
;

997 
	}
}

1000 
	$zùli°Lí
(*
zl
) {

1001 
Àn
 = 0;

1002 i‡(
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
)Ë< 
UINT16_MAX
) {

1003 
Àn
 = 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
));

1005 *
p
 = 
zl
+
ZIPLIST_HEADER_SIZE
;

1006 *
p
 !
ZIP_END
) {

1007 
p
 +
	`zùRawE¡ryLígth
(p);

1008 
Àn
++;

1012 i‡(
Àn
 < 
UINT16_MAX
Ë
	`ZIPLIST_LENGTH
(
zl
Ë
	`öåev16ifbe
(len);

1014  
Àn
;

1015 
	}
}

1018 
size_t
 
	$zùli°BlobLí
(*
zl
) {

1019  
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
));

1020 
	}
}

1022 
	$zùli°Rïr
(*
zl
) {

1023 *
p
;

1024 
ödex
 = 0;

1025 
zÀ¡ry
 
íåy
;

1027 
	`¥ötf
(

1031 
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)),

1032 
	`öåev16ifbe
(
	`ZIPLIST_LENGTH
(
zl
)),

1033 
	`öåev32ifbe
(
	`ZIPLIST_TAIL_OFFSET
(
zl
)));

1034 
p
 = 
	`ZIPLIST_ENTRY_HEAD
(
zl
);

1035 *
p
 !
ZIP_END
) {

1036 
	`zùE¡ry
(
p
, &
íåy
);

1037 
	`¥ötf
(

1048 ()
p
,

1049 
ödex
,

1050 (Ë(
p
-
zl
),

1051 
íåy
.
hódîsize
+íåy.
Àn
,

1052 
íåy
.
hódîsize
,

1053 
íåy
.
¥evøwÀn
,

1054 
íåy
.
¥evøwÀnsize
,

1055 
íåy
.
Àn
);

1056 
p
 +
íåy
.
hódîsize
;

1057 i‡(
	`ZIP_IS_STR
(
íåy
.
ícodög
)) {

1058 i‡(
íåy
.
Àn
 > 40) {

1059 i‡(
	`fwrôe
(
p
,40,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1060 
	`¥ötf
("...");

1062 i‡(
íåy
.
Àn
 &&

1063 
	`fwrôe
(
p
,
íåy
.
Àn
,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1066 
	`¥ötf
("%Œd", (Ë
	`zùLﬂdI¡egî
(
p
,
íåy
.
ícodög
));

1068 
	`¥ötf
("\n");

1069 
p
 +
íåy
.
Àn
;

1070 
ödex
++;

1072 
	`¥ötf
("{end}\n\n");

1073 
	}
}

1075 #ifde‡
REDIS_TEST


1076 
	~<sys/time.h
>

1077 
	~"adli°.h
"

1078 
	~"sds.h
"

1080 
	#debug
(
f
, ...Ë{ i‡(
DEBUG
Ë
	`¥ötf
(f, 
__VA_ARGS__
); }

	)

1082 *
	$¸óãLi°
() {

1083 *
zl
 = 
	`zùli°New
();

1084 
zl
 = 
	`zùli°Push
(zl, (*)"foo", 3, 
ZIPLIST_TAIL
);

1085 
zl
 = 
	`zùli°Push
(zl, (*)"quux", 4, 
ZIPLIST_TAIL
);

1086 
zl
 = 
	`zùli°Push
(zl, (*)"hñlo", 5, 
ZIPLIST_HEAD
);

1087 
zl
 = 
	`zùli°Push
(zl, (*)"1024", 4, 
ZIPLIST_TAIL
);

1088  
zl
;

1089 
	}
}

1091 *
	$¸óãI¡Li°
() {

1092 *
zl
 = 
	`zùli°New
();

1093 
buf
[32];

1095 
	`•rötf
(
buf
, "100");

1096 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1097 
	`•rötf
(
buf
, "128000");

1098 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1099 
	`•rötf
(
buf
, "-100");

1100 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_HEAD
);

1101 
	`•rötf
(
buf
, "4294967296");

1102 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_HEAD
);

1103 
	`•rötf
(
buf
, "non integer");

1104 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1105 
	`•rötf
(
buf
, "much muchÜongerÇon integer");

1106 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
	`°æí
(buf), 
ZIPLIST_TAIL
);

1107  
zl
;

1108 
	}
}

1110 
	$u£c
() {

1111 
timevÆ
 
tv
;

1112 
	`gëtimeofday
(&
tv
,
NULL
);

1113  ((()
tv
.
tv_£c
)*1000000)+tv.
tv_u£c
;

1114 
	}
}

1116 
	$°ªss
(
pos
, 
num
, 
maxsize
, 
dnum
) {

1117 
i
,
j
,
k
;

1118 *
zl
;

1119 
pos°r
[2][5] = { "HEAD", "TAIL" };

1120 
°¨t
;

1121 
i
 = 0; i < 
maxsize
; i+=
dnum
) {

1122 
zl
 = 
	`zùli°New
();

1123 
j
 = 0; j < 
i
; j++) {

1124 
zl
 = 
	`zùli°Push
(zl,(*)"quux",4,
ZIPLIST_TAIL
);

1128 
°¨t
 = 
	`u£c
();

1129 
k
 = 0; k < 
num
; k++) {

1130 
zl
 = 
	`zùli°Push
(zl,(*)"quux",4,
pos
);

1131 
zl
 = 
	`zùli°DñëeR™ge
(zl,0,1);

1133 
	`¥ötf
("List size: %8d, bytes: %8d, %dxÖush+pop (%s): %6lld usec\n",

1134 
i
,
	`öåev32ifbe
(
	`ZIPLIST_BYTES
(
zl
)),
num
,
pos°r
[
pos
],
	`u£c
()-
°¨t
);

1135 
	`d‰ì
(
zl
);

1137 
	}
}

1139 *
	$p›
(*
zl
, 
whîe
) {

1140 *
p
, *
v°r
;

1141 
vÀn
;

1142 
vl⁄g
;

1144 
p
 = 
	`zùli°Index
(
zl
,
whîe
 =
ZIPLIST_HEAD
 ? 0 : -1);

1145 i‡(
	`zùli°Gë
(
p
,&
v°r
,&
vÀn
,&
vl⁄g
)) {

1146 i‡(
whîe
 =
ZIPLIST_HEAD
)

1147 
	`¥ötf
("Pop head: ");

1149 
	`¥ötf
("PopÅail: ");

1151 i‡(
v°r
) {

1152 i‡(
vÀn
 && 
	`fwrôe
(
v°r
,vÀn,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1155 
	`¥ötf
("%Œd", 
vl⁄g
);

1158 
	`¥ötf
("\n");

1159  
	`zùli°Dñëe
(
zl
,&
p
);

1161 
	`¥ötf
("ERROR: CouldÇotÖop\n");

1162 
	`exô
(1);

1164 
	}
}

1166 
	$ønd°rög
(*
èrgë
, 
mö
, 
max
) {

1167 
p
 = 0;

1168 
Àn
 = 
mö
+
	`ønd
()%(
max
-min+1);

1169 
mövÆ
, 
maxvÆ
;

1170 
	`ønd
() % 3) {

1172 
mövÆ
 = 0;

1173 
maxvÆ
 = 255;

1176 
mövÆ
 = 48;

1177 
maxvÆ
 = 122;

1180 
mövÆ
 = 48;

1181 
maxvÆ
 = 52;

1184 
	`ASSERT
(
NULL
);

1187 
p
 < 
Àn
)

1188 
èrgë
[
p
++] = 
mövÆ
+
	`ønd
()%(
maxvÆ
-minval+1);

1189  
Àn
;

1190 
	}
}

1192 
	$vîify
(*
zl
, 
zÀ¡ry
 *
e
) {

1193 
Àn
 = 
	`zùli°Lí
(
zl
);

1194 
zÀ¡ry
 
_e
;

1196 
	`ZIPLIST_ENTRY_ZERO
(&
_e
);

1198 
i
 = 0; i < 
Àn
; i++) {

1199 
	`mem£t
(&
e
[
i
], 0, (
zÀ¡ry
));

1200 
	`zùE¡ry
(
	`zùli°Index
(
zl
, 
i
), &
e
[i]);

1202 
	`mem£t
(&
_e
, 0, (
zÀ¡ry
));

1203 
	`zùE¡ry
(
	`zùli°Index
(
zl
, -
Àn
+
i
), &
_e
);

1205 
	`ASSERT
(
	`memcmp
(&
e
[
i
], &
_e
, (
zÀ¡ry
)) == 0);

1207 
	}
}

1209 
	$zùli°Te°
(
¨gc
, **
¨gv
) {

1210 
ªt
;

1211 *
zl
, *
p
;

1212 *
íåy
;

1213 
ñí
;

1214 
vÆue
;

1217 i‡(
¨gc
 == 2)

1218 
	`§™d
(
	`©oi
(
¨gv
[1]));

1220 
zl
 = 
	`¸óãI¡Li°
();

1221 
	`zùli°Rïr
(
zl
);

1223 
	`d‰ì
(
zl
);

1225 
zl
 = 
	`¸óãLi°
();

1226 
	`zùli°Rïr
(
zl
);

1228 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1229 
	`zùli°Rïr
(
zl
);

1231 
zl
 = 
	`p›
(zl,
ZIPLIST_HEAD
);

1232 
	`zùli°Rïr
(
zl
);

1234 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1235 
	`zùli°Rïr
(
zl
);

1237 
zl
 = 
	`p›
(zl,
ZIPLIST_TAIL
);

1238 
	`zùli°Rïr
(
zl
);

1240 
	`d‰ì
(
zl
);

1242 
	`¥ötf
("GetÉlementát index 3:\n");

1244 
zl
 = 
	`¸óãLi°
();

1245 
p
 = 
	`zùli°Index
(
zl
, 3);

1246 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1247 
	`¥ötf
("ERROR: CouldÇotáccess index 3\n");

1250 i‡(
íåy
) {

1251 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1252 
	`¥ötf
("\n");

1254 
	`¥ötf
("%Œd\n", 
vÆue
);

1256 
	`¥ötf
("\n");

1257 
	`d‰ì
(
zl
);

1260 
	`¥ötf
("GetÉlementát index 4 (out ofÑange):\n");

1262 
zl
 = 
	`¸óãLi°
();

1263 
p
 = 
	`zùli°Index
(
zl
, 4);

1264 i‡(
p
 =
NULL
) {

1265 
	`¥ötf
("NoÉntry\n");

1267 
	`¥ötf
("ERROR: Ouào‡øngêödex shouldÑëu∫ NULL,Ñëu∫ed off£t: %ld\n", 
p
-
zl
);

1270 
	`¥ötf
("\n");

1271 
	`d‰ì
(
zl
);

1274 
	`¥ötf
("GetÉlementát index -1 (lastÉlement):\n");

1276 
zl
 = 
	`¸óãLi°
();

1277 
p
 = 
	`zùli°Index
(
zl
, -1);

1278 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1279 
	`¥ötf
("ERROR: CouldÇotáccess index -1\n");

1282 i‡(
íåy
) {

1283 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1284 
	`¥ötf
("\n");

1286 
	`¥ötf
("%Œd\n", 
vÆue
);

1288 
	`¥ötf
("\n");

1289 
	`d‰ì
(
zl
);

1292 
	`¥ötf
("GetÉlementát index -4 (firstÉlement):\n");

1294 
zl
 = 
	`¸óãLi°
();

1295 
p
 = 
	`zùli°Index
(
zl
, -4);

1296 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1297 
	`¥ötf
("ERROR: CouldÇotáccess index -4\n");

1300 i‡(
íåy
) {

1301 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1302 
	`¥ötf
("\n");

1304 
	`¥ötf
("%Œd\n", 
vÆue
);

1306 
	`¥ötf
("\n");

1307 
	`d‰ì
(
zl
);

1310 
	`¥ötf
("GetÉlementát index -5 (reverse out ofÑange):\n");

1312 
zl
 = 
	`¸óãLi°
();

1313 
p
 = 
	`zùli°Index
(
zl
, -5);

1314 i‡(
p
 =
NULL
) {

1315 
	`¥ötf
("NoÉntry\n");

1317 
	`¥ötf
("ERROR: Ouào‡øngêödex shouldÑëu∫ NULL,Ñëu∫ed off£t: %ld\n", 
p
-
zl
);

1320 
	`¥ötf
("\n");

1321 
	`d‰ì
(
zl
);

1324 
	`¥ötf
("IterateÜist from 0ÅoÉnd:\n");

1326 
zl
 = 
	`¸óãLi°
();

1327 
p
 = 
	`zùli°Index
(
zl
, 0);

1328 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1329 
	`¥ötf
("Entry: ");

1330 i‡(
íåy
) {

1331 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1333 
	`¥ötf
("%Œd", 
vÆue
);

1335 
p
 = 
	`zùli°Next
(
zl
,p);

1336 
	`¥ötf
("\n");

1338 
	`¥ötf
("\n");

1339 
	`d‰ì
(
zl
);

1342 
	`¥ötf
("IterateÜist from 1ÅoÉnd:\n");

1344 
zl
 = 
	`¸óãLi°
();

1345 
p
 = 
	`zùli°Index
(
zl
, 1);

1346 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1347 
	`¥ötf
("Entry: ");

1348 i‡(
íåy
) {

1349 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1351 
	`¥ötf
("%Œd", 
vÆue
);

1353 
p
 = 
	`zùli°Next
(
zl
,p);

1354 
	`¥ötf
("\n");

1356 
	`¥ötf
("\n");

1357 
	`d‰ì
(
zl
);

1360 
	`¥ötf
("IterateÜist from 2ÅoÉnd:\n");

1362 
zl
 = 
	`¸óãLi°
();

1363 
p
 = 
	`zùli°Index
(
zl
, 2);

1364 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1365 
	`¥ötf
("Entry: ");

1366 i‡(
íåy
) {

1367 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1369 
	`¥ötf
("%Œd", 
vÆue
);

1371 
p
 = 
	`zùli°Next
(
zl
,p);

1372 
	`¥ötf
("\n");

1374 
	`¥ötf
("\n");

1375 
	`d‰ì
(
zl
);

1378 
	`¥ötf
("Iterate starting out ofÑange:\n");

1380 
zl
 = 
	`¸óãLi°
();

1381 
p
 = 
	`zùli°Index
(
zl
, 4);

1382 i‡(!
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1383 
	`¥ötf
("NoÉntry\n");

1385 
	`¥ötf
("ERROR\n");

1387 
	`¥ötf
("\n");

1388 
	`d‰ì
(
zl
);

1391 
	`¥ötf
("Iterate from backÅo front:\n");

1393 
zl
 = 
	`¸óãLi°
();

1394 
p
 = 
	`zùli°Index
(
zl
, -1);

1395 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1396 
	`¥ötf
("Entry: ");

1397 i‡(
íåy
) {

1398 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1400 
	`¥ötf
("%Œd", 
vÆue
);

1402 
p
 = 
	`zùli°Pªv
(
zl
,p);

1403 
	`¥ötf
("\n");

1405 
	`¥ötf
("\n");

1406 
	`d‰ì
(
zl
);

1409 
	`¥ötf
("Iterate from backÅo front, deletingáll items:\n");

1411 
zl
 = 
	`¸óãLi°
();

1412 
p
 = 
	`zùli°Index
(
zl
, -1);

1413 
	`zùli°Gë
(
p
, &
íåy
, &
ñí
, &
vÆue
)) {

1414 
	`¥ötf
("Entry: ");

1415 i‡(
íåy
) {

1416 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
Ë=0Ë
	`≥º‹
("fwrite");

1418 
	`¥ötf
("%Œd", 
vÆue
);

1420 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

1421 
p
 = 
	`zùli°Pªv
(
zl
,p);

1422 
	`¥ötf
("\n");

1424 
	`¥ötf
("\n");

1425 
	`d‰ì
(
zl
);

1428 
	`¥ötf
("Delete inclusiveÑange 0,0:\n");

1430 
zl
 = 
	`¸óãLi°
();

1431 
zl
 = 
	`zùli°DñëeR™ge
(zl, 0, 1);

1432 
	`zùli°Rïr
(
zl
);

1433 
	`d‰ì
(
zl
);

1436 
	`¥ötf
("Delete inclusiveÑange 0,1:\n");

1438 
zl
 = 
	`¸óãLi°
();

1439 
zl
 = 
	`zùli°DñëeR™ge
(zl, 0, 2);

1440 
	`zùli°Rïr
(
zl
);

1441 
	`d‰ì
(
zl
);

1444 
	`¥ötf
("Delete inclusiveÑange 1,2:\n");

1446 
zl
 = 
	`¸óãLi°
();

1447 
zl
 = 
	`zùli°DñëeR™ge
(zl, 1, 2);

1448 
	`zùli°Rïr
(
zl
);

1449 
	`d‰ì
(
zl
);

1452 
	`¥ötf
("Delete with start index out ofÑange:\n");

1454 
zl
 = 
	`¸óãLi°
();

1455 
zl
 = 
	`zùli°DñëeR™ge
(zl, 5, 1);

1456 
	`zùli°Rïr
(
zl
);

1457 
	`d‰ì
(
zl
);

1460 
	`¥ötf
("Delete withÇum overflow:\n");

1462 
zl
 = 
	`¸óãLi°
();

1463 
zl
 = 
	`zùli°DñëeR™ge
(zl, 1, 5);

1464 
	`zùli°Rïr
(
zl
);

1465 
	`d‰ì
(
zl
);

1468 
	`¥ötf
("Delete foo while iterating:\n");

1470 
zl
 = 
	`¸óãLi°
();

1471 
p
 = 
	`zùli°Index
(
zl
,0);

1472 
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
)) {

1473 i‡(
íåy
 && 
	`°∫cmp
("foo",(*Î¡ry,
ñí
) == 0) {

1474 
	`¥ötf
("Delete foo\n");

1475 
zl
 = 
	`zùli°Dñëe
(zl,&
p
);

1477 
	`¥ötf
("Entry: ");

1478 i‡(
íåy
) {

1479 i‡(
ñí
 && 
	`fwrôe
(
íåy
,ñí,1,
°dout
) == 0)

1480 
	`≥º‹
("fwrite");

1482 
	`¥ötf
("%Œd",
vÆue
);

1484 
p
 = 
	`zùli°Next
(
zl
,p);

1485 
	`¥ötf
("\n");

1488 
	`¥ötf
("\n");

1489 
	`zùli°Rïr
(
zl
);

1490 
	`d‰ì
(
zl
);

1493 
	`¥ötf
("RegressionÅest for >255 byte strings:\n");

1495 
v1
[257] = {0}, 
v2
[257] = {0};

1496 
	`mem£t
(
v1
,'x',256);

1497 
	`mem£t
(
v2
,'y',256);

1498 
zl
 = 
	`zùli°New
();

1499 
zl
 = 
	`zùli°Push
(zl,(*)
v1
,
	`°æí
(v1),
ZIPLIST_TAIL
);

1500 
zl
 = 
	`zùli°Push
(zl,(*)
v2
,
	`°æí
(v2),
ZIPLIST_TAIL
);

1503 
p
 = 
	`zùli°Index
(
zl
,0);

1504 
ªt
 = ()
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
);

1505 
	`ASSERT
(
ªt
 > 0);

1506 
	`ASSERT
(
	`°∫cmp
(
v1
,(*)
íåy
,
ñí
) == 0);

1507 
p
 = 
	`zùli°Index
(
zl
,1);

1508 
ªt
 = ()
	`zùli°Gë
(
p
,&
íåy
,&
ñí
,&
vÆue
);

1509 
	`ASSERT
(
ªt
 > 0);

1510 
	`ASSERT
(
	`°∫cmp
(
v2
,(*)
íåy
,
ñí
) == 0);

1511 
	`¥ötf
("SUCCESS\n\n");

1512 
	`d‰ì
(
zl
);

1515 
	`¥ötf
("RegressionÅest deletingÇextÅoÜastÉntries:\n");

1517 
v
[3][257] = {{0}};

1518 
zÀ¡ry
 
e
[3] = {{.
¥evøwÀnsize
 = 0, .
¥evøwÀn
 = 0, .
Ànsize
 = 0,

1519 .
Àn
 = 0, .
hódîsize
 = 0, .
ícodög
 = 0, .
p
 = 
NULL
}};

1520 
size_t
 
i
;

1522 
i
 = 0; i < ((
v
)/(v[0])); i++) {

1523 
	`mem£t
(
v
[
i
], 'a' + i, (v[0]));

1526 
v
[0][256] = '\0';

1527 
v
[1][ 1] = '\0';

1528 
v
[2][256] = '\0';

1530 
zl
 = 
	`zùli°New
();

1531 
i
 = 0; i < ((
v
)/(v[0])); i++) {

1532 
zl
 = 
	`zùli°Push
(zl, (*Ë
v
[
i
], 
	`°æí
(v[i]), 
ZIPLIST_TAIL
);

1535 
	`vîify
(
zl
, 
e
);

1537 
	`ASSERT
(
e
[0].
¥evøwÀnsize
 == 1);

1538 
	`ASSERT
(
e
[1].
¥evøwÀnsize
 == 5);

1539 
	`ASSERT
(
e
[2].
¥evøwÀnsize
 == 1);

1542 *
p
 = 
e
[1].p;

1543 
zl
 = 
	`zùli°Dñëe
(zl, &
p
);

1545 
	`vîify
(
zl
, 
e
);

1547 
	`ASSERT
(
e
[0].
¥evøwÀnsize
 == 1);

1548 
	`ASSERT
(
e
[1].
¥evøwÀnsize
 == 5);

1550 
	`¥ötf
("SUCCESS\n\n");

1551 
	`d‰ì
(
zl
);

1554 
	`¥ötf
("CreateÜongÜistánd check indices:\n");

1556 
zl
 = 
	`zùli°New
();

1557 
buf
[32];

1558 
i
,
Àn
;

1559 
i
 = 0; i < 1000; i++) {

1560 
Àn
 = 
	`•rötf
(
buf
,"%d",
i
);

1561 
zl
 = 
	`zùli°Push
(zl,(*)
buf
,
Àn
,
ZIPLIST_TAIL
);

1563 
i
 = 0; i < 1000; i++) {

1564 
p
 = 
	`zùli°Index
(
zl
,
i
);

1565 
ªt
 = ()
	`zùli°Gë
(
p
,
NULL
,NULL,&
vÆue
);

1566 
	`ASSERT
(
ªt
 > 0);

1567 
	`ASSERT
(
i
 =
vÆue
);

1569 
p
 = 
	`zùli°Index
(
zl
,-
i
-1);

1570 
ªt
 = ()
	`zùli°Gë
(
p
,
NULL
,NULL,&
vÆue
);

1571 
	`ASSERT
(
ªt
 > 0);

1572 
	`ASSERT
(999-
i
 =
vÆue
);

1574 
	`¥ötf
("SUCCESS\n\n");

1575 
	`d‰ì
(
zl
);

1578 
	`¥ötf
("Compare strings with ziplistÉntries:\n");

1580 
zl
 = 
	`¸óãLi°
();

1581 
p
 = 
	`zùli°Index
(
zl
,0);

1582 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1583 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1586 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1587 
	`¥ötf
("ERROR: \"hella\"\n");

1591 
p
 = 
	`zùli°Index
(
zl
,3);

1592 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1593 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1596 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1597 
	`¥ötf
("ERROR: \"1025\"\n");

1600 
	`¥ötf
("SUCCESS\n\n");

1601 
	`d‰ì
(
zl
);

1604 
	`¥ötf
("MergeÅest:\n");

1607 
zl
 = 
	`¸óãLi°
();

1608 *
zl2
 = 
	`¸óãLi°
();

1610 *
zl3
 = 
	`zùli°New
();

1611 *
zl4
 = 
	`zùli°New
();

1613 i‡(
	`zùli°Mîge
(&
zl4
, &zl4)) {

1614 
	`¥ötf
("ERROR: Allowed merging of one ziplist into itself.\n");

1619 
zl4
 = 
	`zùli°Mîge
(&
zl3
, &zl4);

1620 
	`zùli°Rïr
(
zl4
);

1621 i‡(
	`zùli°Lí
(
zl4
)) {

1622 
	`¥ötf
("ERROR: MergingÅwoÉmpty ziplists createdÉntries.\n");

1625 
	`d‰ì
(
zl4
);

1627 
zl2
 = 
	`zùli°Mîge
(&
zl
, &zl2);

1629 
	`zùli°Rïr
(
zl2
);

1631 i‡(
	`zùli°Lí
(
zl2
) != 8) {

1632 
	`¥ötf
("ERROR: MîgedÜígthÇŸ 8, but: %u\n", 
	`zùli°Lí
(
zl2
));

1636 
p
 = 
	`zùli°Index
(
zl2
,0);

1637 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1638 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1641 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1642 
	`¥ötf
("ERROR: \"hella\"\n");

1646 
p
 = 
	`zùli°Index
(
zl2
,3);

1647 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1648 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1651 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1652 
	`¥ötf
("ERROR: \"1025\"\n");

1656 
p
 = 
	`zùli°Index
(
zl2
,4);

1657 i‡(!
	`zùli°Com∑ª
(
p
,(*)"hello",5)) {

1658 
	`¥ötf
("ERROR:Çot \"hello\"\n");

1661 i‡(
	`zùli°Com∑ª
(
p
,(*)"hella",5)) {

1662 
	`¥ötf
("ERROR: \"hella\"\n");

1666 
p
 = 
	`zùli°Index
(
zl2
,7);

1667 i‡(!
	`zùli°Com∑ª
(
p
,(*)"1024",4)) {

1668 
	`¥ötf
("ERROR:Çot \"1024\"\n");

1671 i‡(
	`zùli°Com∑ª
(
p
,(*)"1025",4)) {

1672 
	`¥ötf
("ERROR: \"1025\"\n");

1675 
	`¥ötf
("SUCCESS\n\n");

1676 
	`d‰ì
(
zl
);

1679 
	`¥ötf
("Stress withÑandomÖayloads of differentÉncoding:\n");

1681 
i
,
j
,
Àn
,
whîe
;

1682 *
p
;

1683 
buf
[1024];

1684 
buÊí
;

1685 
dli°
 *
ªf
;

1686 
dli°Node
 *
ª‚ode
;

1689 *
s°r
;

1690 
¶í
;

1691 
svÆ
;

1693 
i
 = 0; i < 20000; i++) {

1694 
zl
 = 
	`zùli°New
();

1695 
ªf
 = 
	`dli°Cª©e
();

1696 
	`dli°SëFªeMëhod
(
ªf
,((*)(*))
sds‰ì
);

1697 
Àn
 = 
	`ønd
() % 256;

1700 
j
 = 0; j < 
Àn
; j++) {

1701 
whîe
 = (
	`ønd
(Ë& 1Ë? 
ZIPLIST_HEAD
 : 
ZIPLIST_TAIL
;

1702 i‡(
	`ønd
() % 2) {

1703 
buÊí
 = 
	`ønd°rög
(
buf
,1,(buf)-1);

1705 
	`ønd
() % 3) {

1707 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()) >> 20);

1710 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()));

1713 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",(0LL + 
	`ønd
()) << 20);

1716 
	`ASSERT
(
NULL
);

1721 
zl
 = 
	`zùli°Push
(zl, (*)
buf
, 
buÊí
, 
whîe
);

1724 i‡(
whîe
 =
ZIPLIST_HEAD
) {

1725 
	`dli°AddNodeHód
(
ªf
,
	`sd¢ewÀn
(
buf
, 
buÊí
));

1726 } i‡(
whîe
 =
ZIPLIST_TAIL
) {

1727 
	`dli°AddNodeTaû
(
ªf
,
	`sd¢ewÀn
(
buf
, 
buÊí
));

1729 
	`ASSERT
(
NULL
);

1733 
	`ASSERT
(
	`dli°Lígth
(
ªf
Ë=
	`zùli°Lí
(
zl
));

1734 
j
 = 0; j < 
Àn
; j++) {

1737 
p
 = 
	`zùli°Index
(
zl
,
j
);

1738 
ª‚ode
 = 
	`dli°Index
(
ªf
,
j
);

1740 
ªt
 = ()
	`zùli°Gë
(
p
,&
s°r
,&
¶í
,&
svÆ
);

1741 
	`ASSERT
(
ªt
 > 0);

1742 i‡(
s°r
 =
NULL
) {

1743 
buÊí
 = 
	`•rötf
(
buf
,"%Œd",
svÆ
);

1745 
buÊí
 = 
¶í
;

1746 
	`mem˝y
(
buf
,
s°r
,
buÊí
);

1747 
buf
[
buÊí
] = '\0';

1749 
	`ASSERT
(
	`memcmp
(
buf
,
	`dli°NodeVÆue
(
ª‚ode
),
buÊí
) == 0);

1751 
	`d‰ì
(
zl
);

1752 
	`dli°Rñó£
(
ªf
);

1754 
	`¥ötf
("SUCCESS\n\n");

1757 
	`¥ötf
("Stress with variable ziplist size:\n");

1759 
	`°ªss
(
ZIPLIST_HEAD
,100000,16384,256);

1760 
	`°ªss
(
ZIPLIST_TAIL
,100000,16384,256);

1764 
	}
}

	@src/vr_ziplist.h

1 #i‚de‡
_ZIPLIST_H


2 
	#_ZIPLIST_H


	)

4 
	#ZIPLIST_HEAD
 0

	)

5 
	#ZIPLIST_TAIL
 1

	)

7 *
zùli°New
();

8 *
zùli°Mîge
(**
fú°
, **
£c⁄d
);

9 *
zùli°Push
(*
zl
, *
s
, 
¶í
, 
whîe
);

10 *
zùli°Index
(*
zl
, 
ödex
);

11 *
zùli°Next
(*
zl
, *
p
);

12 *
zùli°Pªv
(*
zl
, *
p
);

13 
zùli°Gë
(*
p
, **
svÆ
, *
¶í
, *
lvÆ
);

14 *
zùli°In£π
(*
zl
, *
p
, *
s
, 
¶í
);

15 *
zùli°Dñëe
(*
zl
, **
p
);

16 *
zùli°DñëeR™ge
(*
zl
, 
ödex
, 
num
);

17 
zùli°Com∑ª
(*
p
, *
s
, 
¶í
);

18 *
zùli°Föd
(*
p
, *
v°r
, 
vÀn
, 
skù
);

19 
zùli°Lí
(*
zl
);

20 
size_t
 
zùli°BlobLí
(*
zl
);

22 #ifde‡
REDIS_TEST


23 
zùli°Te°
(
¨gc
, *
¨gv
[]);

	@src/vr_zipmap.c

78 
	~<°dio.h
>

79 
	~<°rög.h
>

81 
	~<vr_c‹e.h
>

83 
	#ZIPMAP_BIGLEN
 254

	)

84 
	#ZIPMAP_END
 255

	)

88 
	#ZIPMAP_VALUE_MAX_FREE
 4

	)

93 
	#ZIPMAP_LEN_BYTES
(
_l
Ë(((_lË< 
ZIPMAP_BIGLEN
Ë? 1 : ()+1)

	)

96 *
	$zùm≠New
() {

97 *
zm
 = 
	`dÆloc
(2);

99 
zm
[0] = 0;

100 
zm
[1] = 
ZIPMAP_END
;

101  
zm
;

102 
	}
}

105 
	$zùm≠DecodeLígth
(*
p
) {

106 
Àn
 = *
p
;

108 i‡(
Àn
 < 
ZIPMAP_BIGLEN
) Üen;

109 
	`mem˝y
(&
Àn
,
p
+1,());

110 
	`memªv32ifbe
(&
Àn
);

111  
Àn
;

112 
	}
}

116 
	$zùm≠EncodeLígth
(*
p
, 
Àn
) {

117 i‡(
p
 =
NULL
) {

118  
	`ZIPMAP_LEN_BYTES
(
Àn
);

120 i‡(
Àn
 < 
ZIPMAP_BIGLEN
) {

121 
p
[0] = 
Àn
;

124 
p
[0] = 
ZIPMAP_BIGLEN
;

125 
	`mem˝y
(
p
+1,&
Àn
,(len));

126 
	`memªv32ifbe
(
p
+1);

127  1+(
Àn
);

130 
	}
}

138 *
	$zùm≠LookupRaw
(*
zm
, *
key
, 
kÀn
, *
tŸÀn
) {

139 *
p
 = 
zm
+1, *
k
 = 
NULL
;

140 
l
,
Œí
;

142 *
p
 !
ZIPMAP_END
) {

143 
‰ì
;

146 
l
 = 
	`zùm≠DecodeLígth
(
p
);

147 
Œí
 = 
	`zùm≠EncodeLígth
(
NULL
,
l
);

148 i‡(
key
 !
NULL
 && 
k
 =NULL && 
l
 =
kÀn
 && !
	`memcmp
(
p
+
Œí
,key,l)) {

151 i‡(
tŸÀn
 !
NULL
) {

152 
k
 = 
p
;

154  
p
;

157 
p
 +
Œí
+
l
;

159 
l
 = 
	`zùm≠DecodeLígth
(
p
);

160 
p
 +
	`zùm≠EncodeLígth
(
NULL
,
l
);

161 
‰ì
 = 
p
[0];

162 
p
 +
l
+1+
‰ì
;

164 i‡(
tŸÀn
 !
NULL
Ë*tŸÀ¿()(
p
-
zm
)+1;

165  
k
;

166 
	}
}

168 
	$zùm≠RequúedLígth
(
kÀn
, 
vÀn
) {

169 
l
;

171 
l
 = 
kÀn
+
vÀn
+3;

172 i‡(
kÀn
 >
ZIPMAP_BIGLEN
Ë
l
 += 4;

173 i‡(
vÀn
 >
ZIPMAP_BIGLEN
Ë
l
 += 4;

174  
l
;

175 
	}
}

178 
	$zùm≠RawKeyLígth
(*
p
) {

179 
l
 = 
	`zùm≠DecodeLígth
(
p
);

180  
	`zùm≠EncodeLígth
(
NULL
,
l
) +Ü;

181 
	}
}

185 
	$zùm≠RawVÆueLígth
(*
p
) {

186 
l
 = 
	`zùm≠DecodeLígth
(
p
);

187 
u£d
;

189 
u£d
 = 
	`zùm≠EncodeLígth
(
NULL
,
l
);

190 
u£d
 +
p
[u£d] + 1 + 
l
;

191  
u£d
;

192 
	}
}

197 
	$zùm≠RawE¡ryLígth
(*
p
) {

198 
l
 = 
	`zùm≠RawKeyLígth
(
p
);

199  
l
 + 
	`zùm≠RawVÆueLígth
(
p
+l);

200 
	}
}

202 
ölöe
 *
	$zùm≠Resize
(*
zm
, 
Àn
) {

203 
zm
 = 
	`dªÆloc
(zm, 
Àn
);

204 
zm
[
Àn
-1] = 
ZIPMAP_END
;

205  
zm
;

206 
	}
}

211 *
	$zùm≠Së
(*
zm
, *
key
, 
kÀn
, *
vÆ
, 
vÀn
, *
upd©e
) {

212 
zmÀn
, 
off£t
;

213 
‰ìÀn
, 
ªqÀn
 = 
	`zùm≠RequúedLígth
(
kÀn
,
vÀn
);

214 
em±y
, 
vem±y
;

215 *
p
;

217 
‰ìÀn
 = 
ªqÀn
;

218 i‡(
upd©e
) *update = 0;

219 
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,&
zmÀn
);

220 i‡(
p
 =
NULL
) {

222 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
+
ªqÀn
);

223 
p
 = 
zm
+
zmÀn
-1;

224 
zmÀn
 = zmÀn+
ªqÀn
;

227 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) zm[0]++;

231 i‡(
upd©e
) *update = 1;

232 
‰ìÀn
 = 
	`zùm≠RawE¡ryLígth
(
p
);

233 i‡(
‰ìÀn
 < 
ªqÀn
) {

237 
off£t
 = 
p
-
zm
;

238 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
-
‰ìÀn
+
ªqÀn
);

239 
p
 = 
zm
+
off£t
;

243 
	`memmove
(
p
+
ªqÀn
,Ö+
‰ìÀn
, 
zmÀn
-(
off£t
+freelen+1));

244 
zmÀn
 = zmÀn-
‰ìÀn
+
ªqÀn
;

245 
‰ìÀn
 = 
ªqÀn
;

253 
em±y
 = 
‰ìÀn
-
ªqÀn
;

254 i‡(
em±y
 >
ZIPMAP_VALUE_MAX_FREE
) {

257 
off£t
 = 
p
-
zm
;

258 
	`memmove
(
p
+
ªqÀn
,Ö+
‰ìÀn
, 
zmÀn
-(
off£t
+freelen+1));

259 
zmÀn
 -
em±y
;

260 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
);

261 
p
 = 
zm
+
off£t
;

262 
vem±y
 = 0;

264 
vem±y
 = 
em±y
;

269 
p
 +
	`zùm≠EncodeLígth
’,
kÀn
);

270 
	`mem˝y
(
p
,
key
,
kÀn
);

271 
p
 +
kÀn
;

273 
p
 +
	`zùm≠EncodeLígth
’,
vÀn
);

274 *
p
++ = 
vem±y
;

275 
	`mem˝y
(
p
,
vÆ
,
vÀn
);

276  
zm
;

277 
	}
}

281 *
	$zùm≠Dñ
(*
zm
, *
key
, 
kÀn
, *
dñëed
) {

282 
zmÀn
, 
‰ìÀn
;

283 *
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,&
zmÀn
);

284 i‡(
p
) {

285 
‰ìÀn
 = 
	`zùm≠RawE¡ryLígth
(
p
);

286 
	`memmove
(
p
,Ö+
‰ìÀn
, 
zmÀn
-(’-
zm
)+freelen+1));

287 
zm
 = 
	`zùm≠Resize
(zm, 
zmÀn
-
‰ìÀn
);

290 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) zm[0]--;

292 i‡(
dñëed
) *deleted = 1;

294 i‡(
dñëed
) *deleted = 0;

296  
zm
;

297 
	}
}

300 *
	$zùm≠Rewöd
(*
zm
) {

301  
zm
+1;

302 
	}
}

315 *
	$zùm≠Next
(*
zm
, **
key
, *
kÀn
, **
vÆue
, *
vÀn
) {

316 i‡(
zm
[0] =
ZIPMAP_END
Ë 
NULL
;

317 i‡(
key
) {

318 *
key
 = 
zm
;

319 *
kÀn
 = 
	`zùm≠DecodeLígth
(
zm
);

320 *
key
 +
	`ZIPMAP_LEN_BYTES
(*
kÀn
);

322 
zm
 +
	`zùm≠RawKeyLígth
(zm);

323 i‡(
vÆue
) {

324 *
vÆue
 = 
zm
+1;

325 *
vÀn
 = 
	`zùm≠DecodeLígth
(
zm
);

326 *
vÆue
 +
	`ZIPMAP_LEN_BYTES
(*
vÀn
);

328 
zm
 +
	`zùm≠RawVÆueLígth
(zm);

329  
zm
;

330 
	}
}

334 
	$zùm≠Gë
(*
zm
, *
key
, 
kÀn
, **
vÆue
, *
vÀn
) {

335 *
p
;

337 i‡((
p
 = 
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,
NULL
)) == NULL)  0;

338 
p
 +
	`zùm≠RawKeyLígth
(p);

339 *
vÀn
 = 
	`zùm≠DecodeLígth
(
p
);

340 *
vÆue
 = 
p
 + 
	`ZIPMAP_LEN_BYTES
(*
vÀn
) + 1;

342 
	}
}

345 
	$zùm≠Exi°s
(*
zm
, *
key
, 
kÀn
) {

346  
	`zùm≠LookupRaw
(
zm
,
key
,
kÀn
,
NULL
) != NULL;

347 
	}
}

350 
	$zùm≠Lí
(*
zm
) {

351 
Àn
 = 0;

352 i‡(
zm
[0] < 
ZIPMAP_BIGLEN
) {

353 
Àn
 = 
zm
[0];

355 *
p
 = 
	`zùm≠Rewöd
(
zm
);

356 (
p
 = 
	`zùm≠Next
’,
NULL
,NULL,NULL,NULL)Ë!NULLË
Àn
++;

359 i‡(
Àn
 < 
ZIPMAP_BIGLEN
Ë
zm
[0] =Üen;

361  
Àn
;

362 
	}
}

367 
size_t
 
	$zùm≠BlobLí
(*
zm
) {

368 
tŸÀn
;

369 
	`zùm≠LookupRaw
(
zm
,
NULL
,0,&
tŸÀn
);

370  
tŸÀn
;

371 
	}
}

	@src/vr_zipmap.h

1 #i‚de‡
_ZIPMAP_H


2 
	#_ZIPMAP_H


	)

4 *
zùm≠New
();

5 *
zùm≠Së
(*
zm
, *
key
, 
kÀn
, *
vÆ
, 
vÀn
, *
upd©e
);

6 *
zùm≠Dñ
(*
zm
, *
key
, 
kÀn
, *
dñëed
);

7 *
zùm≠Rewöd
(*
zm
);

8 *
zùm≠Next
(*
zm
, **
key
, *
kÀn
, **
vÆue
, *
vÀn
);

9 
zùm≠Gë
(*
zm
, *
key
, 
kÀn
, **
vÆue
, *
vÀn
);

10 
zùm≠Exi°s
(*
zm
, *
key
, 
kÀn
);

11 
zùm≠Lí
(*
zm
);

12 
size_t
 
zùm≠BlobLí
(*
zm
);

13 
zùm≠Rïr
(*
p
);

	@tests/vrabtest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<as£π.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<d¨øy.h
>

13 
	~<dlog.h
>

15 
	~<vπ_utû.h
>

16 
	~<vπ_public.h
>

17 
	~<vπ_¥odu˚_d©a.h
>

18 
	~<vπ_di•©ch_d©a.h
>

19 
	~<vπ_check_d©a.h
>

20 
	~<vπ_backíd.h
>

21 
	~<vøbã°.h
>

23 
	#CONFIG_DEFAULT_PIDFILE
 
NULL


	)

24 
	#CONFIG_DEFAULT_CHECKER
 "my£lf"

	)

25 
	#CONFIG_DEFAULT_TEST_INTERVAL
 3600

	)

26 
	#CONFIG_DEFAULT_KEY_LENGTH_RANGE_BEGIN
 0

	)

27 
	#CONFIG_DEFAULT_KEY_LENGTH_RANGE_END
 100

	)

28 
	#CONFIG_DEFAULT_STRING_MAX_LENGTH
 512

	)

29 
	#CONFIG_DEFAULT_FIELDS_MAX_COUNT
 16

	)

30 
	#CONFIG_DEFAULT_TEST_TARGET
 ""

	)

31 
	#CONFIG_DEFAULT_PRODUCE_THREADS_COUNT
 1

	)

32 
	#CONFIG_DEFAULT_CACHED_KEYS_COUNT
 10000

	)

33 
	#CONFIG_DEFAULT_HIT_RATIO
 75

	)

34 
	#CONFIG_DEFAULT_DISPATCH_THREADS_COUNT
 1

	)

35 
	#CONFIG_DEFAULT_CLIENTS_PER_DISPATCH_THREAD
 10

	)

36 
	#CONFIG_DEFAULT_LOGFILE
 
NULL


	)

38 
	#VRABTEST_GROUP_TYPE_REDIS
 0

	)

39 
	#VRABTEST_GROUP_TYPE_VIRE
 1

	)

41 
	sc⁄fig
 {

42 *
	mcheckî
;

43 
	mã°_öãrvÆ
;

44 
	mkey_Àngth_ønge_begö
;

45 
	mkey_Àngth_ønge_íd
;

46 
	m°rög_max_Àngth
;

47 
	mfõlds_max_cou¡
;

48 
	mcmd_ty≥
;

49 
d¨øy
 *
	mcmd_bœckli°
;

50 
d¨øy
 *
	mcmd_whôñi°
;

51 *
	mã°_èrgës
;

52 
	m¥odu˚_d©a_thªads
;

53 
	mˇched_keys_≥r_¥odu˚_thªad
;

54 
	mhô_øtio
;

55 
	mdi•©ch_d©a_thªads
;

56 
	m˛õ¡s_≥r_di•©ch_thªad
;

57 *
	mpid_fûíame
;

58 *
	mlog_fûíame
;

61 
c⁄fig
 
	gc⁄fig
;

63 
	gshow_hñp
;

64 
	gshow_vîsi⁄
;

65 
	gd´m⁄ize
;

70 
	gexpúe_íabÀd
;

74 
	gã°_öãrvÆ
;

78 
	gœ°_ã°_begö_time
;

80 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

81 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

82 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

83 { "d´m⁄ize", 
no_¨gumít
, 
NULL
, 'D' },

84 { "íabÀ-expúe", 
no_¨gumít
, 
NULL
, 'E' },

85 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'P' },

86 { "checkî", 
ªquúed_¨gumít
, 
NULL
, 'C' },

87 { "ã°-öãrvÆ", 
ªquúed_¨gumít
, 
NULL
, 'i' },

88 { "key-Àngth-ønge", 
ªquúed_¨gumít
, 
NULL
, 'k' },

89 { "°rög-max-Àngth", 
ªquúed_¨gumít
, 
NULL
, 's' },

90 { "fõlds-max-cou¡", 
ªquúed_¨gumít
, 
NULL
, 'f' },

91 { "comm™d-ty≥s", 
ªquúed_¨gumít
, 
NULL
, 'T' },

92 { "comm™d-bœck-li°", 
ªquúed_¨gumít
, 
NULL
, 'B' },

93 { "comm™d-whôe-li°", 
ªquúed_¨gumít
, 
NULL
, 'W' },

94 { "ã°-èrgës", 
ªquúed_¨gumít
, 
NULL
, 't' },

95 { "¥odu˚-d©a-thªads", 
ªquúed_¨gumít
, 
NULL
, 'p' },

96 { "ˇched-keys", 
ªquúed_¨gumít
, 
NULL
, 'K' },

97 { "hô-øtio", 
ªquúed_¨gumít
, 
NULL
, 'H' },

98 { "di•©ch-d©a-thªads", 
ªquúed_¨gumít
, 
NULL
, 'd' },

99 { "˛õ¡s", 
ªquúed_¨gumít
, 
NULL
, 'c' },

100 { "log-fûe", 
ªquúed_¨gumít
, 
NULL
, 'o' },

101 { 
NULL
, 0, NULL, 0 }

104 
	gsh‹t_›ti⁄s
[] = "hVDEP:C:i:k:s:f:T:B:W:t:p:K:H:d:c:o:";

107 
	$vπ_show_ußge
()

109 
	`¥ötf
(

110 "Ußge: vúóbã° [-?hVDE]" 
CRLF


111 "" 
CRLF
);

112 
	`¥ötf
(

113 "O±i⁄s:" 
CRLF


114 " -h, --hñ∞ :Åhi†hñp" 
CRLF


115 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


116 " -D, --d´m⁄izê :Ñu¿a†®d´m⁄" 
CRLF


117 " -E, --íabÀ-expúê :É«bÀÅhêexpúe" 
CRLF
);

118 
	`¥ötf
(

119 " -P, --pid-fûê :Öid fûe" 
CRLF


120 " -C, --checkî :ÅhêcheckîÅÿcheck d©®c⁄si°ícy" 
CRLF


121 " -i, --ã°-öãrvÆ :ÅhêöãrvÆ f‹ checkög d©®c⁄si°ícy, unô i†£c⁄d" 
CRLF


122 " -k, --key-Àngth-øngê :ÅhêkeyÜígthÑ™gêtÿgíî©êf‹Åe°,Üikê0-100" 
CRLF


123 " -s, --°rög-max-Àngth :Åhêmax såögÜígthÅÿgíî©êf‹Åe°, såög i†f‹ STRING/LIST... vÆuêñemít" 
CRLF


124 " -f, --fõlds-max-cou¡ :Åhêmax fõld†cou¡Åÿgíî©êf‹Åe°, fõld i†thêLIST/HASH...'†ñemít" 
CRLF


125 " -T, --comm™d-ty≥† :Åhêcomm™dÅy≥†tÿgíî©êf‹Åe°,Üikê°rög,hash,key" 
CRLF


126 " -B, --comm™d-bœck-li° :Åhêcomm™d†nŸ w™àtÿã°,Üikêdñ,Ã™ge,mgë" 
CRLF


127 " -W, --comm™d-whôe-li° :Åhêcomm™d†⁄lyáŒow†tÿã°,Üikêdñ,Ã™ge,mgë" 
CRLF


128 " -t, --ã°-èrgë† :Åhêã°Å¨gë†f‹Åe°,Üikêvúe[127.0.0.1:12301]-ªdis[127.0.0.1:12311]" 
CRLF


129 " -p, --¥odu˚-d©a-thªad† :Åhêthªad†cou¡Åÿ¥odu˚Åe° d©a" 
CRLF


130 " -K, --ˇched-key† :Åhêˇched key†cou¡ f‹ÉvîyÖrodu˚ d©®thªad" 
CRLF


131 " -H, --hô-øtiÿ :ÅhêhôÑ©iÿf‹Ñód⁄ly comm™ds, bëwì¿0ánd 100" 
CRLF


132 " -d, --di•©ch-d©a-thªad† :Åhêthªad†cou¡Åÿdi•©chÅe° d©®tÿèrgë groups" 
CRLF


133 " -c, --˛õ¡† :Åhê˛õ¡†cou¡ f‹Évîy di•©ch d©®thªad" 
CRLF


134 " -o, --log-fûê : sëÜoggög fûê(deÁu…: %s)" 
CRLF


136 
CONFIG_DEFAULT_LOGFILE
 !
NULL
 ? CONFIG_DEFAULT_LOGFILE : "stderr");

137 
	}
}

140 
	$vπ_£t_deÁu…_›ti⁄s
()

142 
c⁄fig
.
pid_fûíame
 = 
CONFIG_DEFAULT_PIDFILE
;

143 
c⁄fig
.
checkî
 = 
CONFIG_DEFAULT_CHECKER
;

144 
c⁄fig
.
ã°_öãrvÆ
 = 
CONFIG_DEFAULT_TEST_INTERVAL
;

145 
c⁄fig
.
key_Àngth_ønge_begö
 = 
CONFIG_DEFAULT_KEY_LENGTH_RANGE_BEGIN
;

146 
c⁄fig
.
key_Àngth_ønge_íd
 = 
CONFIG_DEFAULT_KEY_LENGTH_RANGE_END
;

147 
c⁄fig
.
°rög_max_Àngth
 = 
CONFIG_DEFAULT_STRING_MAX_LENGTH
;

148 
c⁄fig
.
fõlds_max_cou¡
 = 
CONFIG_DEFAULT_FIELDS_MAX_COUNT
;

149 
c⁄fig
.
cmd_ty≥
 = 
TEST_CMD_TYPE_STRING
|
TEST_CMD_TYPE_LIST
|

150 
TEST_CMD_TYPE_SET
|
TEST_CMD_TYPE_ZSET
|
TEST_CMD_TYPE_HASH
|

151 
TEST_CMD_TYPE_SERVER
|
TEST_CMD_TYPE_KEY
;

152 
c⁄fig
.
cmd_bœckli°
 = 
NULL
;

153 
c⁄fig
.
cmd_whôñi°
 = 
NULL
;

154 
c⁄fig
.
ã°_èrgës
 = 
CONFIG_DEFAULT_TEST_TARGET
;

155 
c⁄fig
.
¥odu˚_d©a_thªads
 = 
CONFIG_DEFAULT_PRODUCE_THREADS_COUNT
;

156 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
 = 
CONFIG_DEFAULT_CACHED_KEYS_COUNT
;

157 
c⁄fig
.
hô_øtio
 = 
CONFIG_DEFAULT_HIT_RATIO
;

158 
c⁄fig
.
di•©ch_d©a_thªads
 = 
CONFIG_DEFAULT_DISPATCH_THREADS_COUNT
;

159 
c⁄fig
.
˛õ¡s_≥r_di•©ch_thªad
 = 
CONFIG_DEFAULT_CLIENTS_PER_DISPATCH_THREAD
;

160 
c⁄fig
.
log_fûíame
 = 
CONFIG_DEFAULT_LOGFILE
;

162 
expúe_íabÀd
 = 0;

163 
	}
}

166 
	$vπ_˛ón_›ti⁄s
()

168 i‡(
c⁄fig
.
cmd_bœckli°
 !
NULL
) {

169 
sds
 *
comm™d
;

170 
	`d¨øy_n
(
c⁄fig
.
cmd_bœckli°
) > 0) {

171 
comm™d
 = 
	`d¨øy_p›
(
c⁄fig
.
cmd_bœckli°
);

172 
	`sds‰ì
(
comm™d
);

174 
	`d¨øy_de°roy
(
c⁄fig
.
cmd_bœckli°
);

175 
c⁄fig
.
cmd_bœckli°
 = 
NULL
;

178 i‡(
c⁄fig
.
cmd_whôñi°
 !
NULL
) {

179 
sds
 *
comm™d
;

180 
	`d¨øy_n
(
c⁄fig
.
cmd_whôñi°
) > 0) {

181 
comm™d
 = 
	`d¨øy_p›
(
c⁄fig
.
cmd_whôñi°
);

182 
	`sds‰ì
(
comm™d
);

184 
	`d¨øy_de°roy
(
c⁄fig
.
cmd_whôñi°
);

185 
c⁄fig
.
cmd_whôñi°
 = 
NULL
;

187 
	}
}

190 
	$vπ_gë_›ti⁄s
(
¨gc
, **
¨gv
)

192 
c
;

193 
lvÆue
;

194 
ŒvÆue
;

195 *
ønge
;

196 
ønge_cou¡
;

198 
›ãº
 = 0;

201 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

202 i‡(
c
 == -1) {

207 
c
) {

209 
show_vîsi⁄
 = 1;

210 
show_hñp
 = 1;

214 
show_vîsi⁄
 = 1;

218 
d´m⁄ize
 = 1;

222 
expúe_íabÀd
 = 1;

226 
c⁄fig
.
checkî
 = 
›èrg
;

230 i‡(
	`°rög2Œ
(
›èrg
,
	`°æí
(›èrg),&
ŒvÆue
) != 1) {

231 
	`log_°dîr
("vireabtest: option -iÑequiresáÇumber");

232  
VRT_ERROR
;

234 
c⁄fig
.
ã°_öãrvÆ
 = 
ŒvÆue
;

238 
ønge
 = 
	`gë_ønge_‰om_°rög
(
›èrg
,
	`°æí
(›èrg),&
ønge_cou¡
);

239 i‡(
ønge
 =
NULL
) {

240 
	`log_°dîr
("vireabtest: option -k is invalid, youÇeed inputáÑangeÜike 0-100");

241  
VRT_ERROR
;

243 
c⁄fig
.
key_Àngth_ønge_begö
 = ()
ønge
[0];

244 i‡(
ønge_cou¡
 =1Ë
c⁄fig
.
key_Àngth_ønge_íd
 = ()
ønge
[0];

245 i‡(
ønge_cou¡
 =2Ë
c⁄fig
.
key_Àngth_ønge_íd
 = ()
ønge
[1];

246 
	`as£π
(0);

248 
	`‰ì
(
ønge
);

253 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

254 
	`log_°dîr
("vireabtest: option -sÑequiresáÇumber");

255  
VRT_ERROR
;

257 
c⁄fig
.
°rög_max_Àngth
 = ()
lvÆue
;

261 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

262 
	`log_°dîr
("vireabtest: option -fÑequiresáÇumber");

263  
VRT_ERROR
;

265 
c⁄fig
.
fõlds_max_cou¡
 = ()
lvÆue
;

269 
c⁄fig
.
cmd_ty≥
 = 
	`∑r£_comm™d_ty≥s
(
›èrg
);

270 i‡(
c⁄fig
.
cmd_ty≥
 <= 0) {

271 
	`log_°dîr
("vireabtest: option -TÑequiresÅhe correct commandÅypes");

272  
VRT_ERROR
;

277 
c⁄fig
.
cmd_bœckli°
 = 
	`∑r£_comm™d_li°
(
›èrg
);

278 i‡(
c⁄fig
.
cmd_bœckli°
 =
NULL
) {

279 
	`log_°dîr
("vireabtest: option -BÑequiresÅhe correct commandÜist");

280  
VRT_ERROR
;

285 
c⁄fig
.
cmd_whôñi°
 = 
	`∑r£_comm™d_li°
(
›èrg
);

286 i‡(
c⁄fig
.
cmd_whôñi°
 =
NULL
) {

287 
	`log_°dîr
("vireabtest: option -WÑequiresÅhe correct commandÜist");

288  
VRT_ERROR
;

293 
c⁄fig
.
ã°_èrgës
 = 
›èrg
;

297 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

298 
	`log_°dîr
("vireabtest: option -pÑequiresáÇumber");

299  
VRT_ERROR
;

301 
c⁄fig
.
¥odu˚_d©a_thªads
 = ()
lvÆue
;

305 i‡(
	`°rög2Œ
(
›èrg
,
	`°æí
(›èrg),&
ŒvÆue
) != 1) {

306 
	`log_°dîr
("vireabtest: option -KÑequiresáÇumber");

307  
VRT_ERROR
;

309 i‡(
ŒvÆue
 < 1000) {

310 
	`log_°dîr
("vireabtest: option -KÑequiresáÇumberÅhat must biggerÅhan 1000");

311  
VRT_ERROR
;

314 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
 = 
ŒvÆue
;

318 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

319 
	`log_°dîr
("vireabtest: option -HÑequiresáÇumber");

320  
VRT_ERROR
;

322 i‡(
lvÆue
 < 0 ||Üvalue > 100) {

323 
	`log_°dîr
("vireabtest: option hit-ratioÇeed between 0ánd 100");

324  
VRT_ERROR
;

326 
c⁄fig
.
hô_øtio
 = ()
lvÆue
;

330 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

331 
	`log_°dîr
("vireabtest: option -dÑequiresáÇumber");

332  
VRT_ERROR
;

334 
c⁄fig
.
di•©ch_d©a_thªads
 = ()
lvÆue
;

338 i‡(
	`°rög2l
(
›èrg
,
	`°æí
(›èrg),&
lvÆue
) != 1) {

339 
	`log_°dîr
("vireabtest: option -cÑequiresáÇumber");

340  
VRT_ERROR
;

342 
c⁄fig
.
˛õ¡s_≥r_di•©ch_thªad
 = ()
lvÆue
;

346 
c⁄fig
.
pid_fûíame
 = 
›èrg
;

350 
c⁄fig
.
log_fûíame
 = 
›èrg
;

354 
›t›t
) {

363 
	`log_°dîr
("vire: option -%cÑequires string",

364 
›t›t
);

372 
	`log_°dîr
("vire: option -%cÑequiresÇumber",

373 
›t›t
);

377 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

380  
VRT_ERROR
;

383 
	`log_°dîr
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

384  
VRT_ERROR
;

389  
VRT_OK
;

390 
	}
}

392 
	$vπ_d´m⁄ize
(
dump_c‹e
)

394 
ªt
;

395 
pid_t
 
pid
, 
sid
;

396 
fd
;

398 
pid
 = 
	`f‹k
();

399 
pid
) {

401 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

402  
VRT_ERROR
;

409 
	`_exô
(0);

414 
sid
 = 
	`£tsid
();

415 i‡(
sid
 < 0) {

416 
	`log_îr‹
("£tsid(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

417  
VRT_ERROR
;

420 i‡(
	`sig«l
(
SIGHUP
, 
SIG_IGN
Ë=
SIG_ERR
) {

421 
	`log_îr‹
("sig«l(SIGHUP, SIG_IGNËÁûed: %s", 
	`°ªº‹
(
î∫o
));

422  
VRT_ERROR
;

425 
pid
 = 
	`f‹k
();

426 
pid
) {

428 
	`log_îr‹
("f‹k(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

429  
VRT_ERROR
;

436 
	`_exô
(0);

442 i‡(
dump_c‹e
 == 0) {

443 
ªt
 = 
	`chdú
("/");

444 i‡(
ªt
 < 0) {

445 
	`log_îr‹
("chdú(\"/\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

446  
VRT_ERROR
;

451 
	`umask
(0);

455 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

456 i‡(
fd
 < 0) {

457 
	`log_îr‹
("›í(\"/dev/nuŒ\"ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

458  
VRT_ERROR
;

461 
ªt
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

462 i‡(
ªt
 < 0) {

463 
	`log_îr‹
("dup2(%d, STDINËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

464 
	`˛o£
(
fd
);

465  
VRT_ERROR
;

468 
ªt
 = 
	`dup2
(
fd
, 
STDOUT_FILENO
);

469 i‡(
ªt
 < 0) {

470 
	`log_îr‹
("dup2(%d, STDOUTËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

471 
	`˛o£
(
fd
);

472  
VRT_ERROR
;

475 
ªt
 = 
	`dup2
(
fd
, 
STDERR_FILENO
);

476 i‡(
ªt
 < 0) {

477 
	`log_îr‹
("dup2(%d, STDERRËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

478 
	`˛o£
(
fd
);

479  
VRT_ERROR
;

482 i‡(
fd
 > 
STDERR_FILENO
) {

483 
ªt
 = 
	`˛o£
(
fd
);

484 i‡(
ªt
 < 0) {

485 
	`log_îr‹
("˛o£(%dËÁûed: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

486  
VRT_ERROR
;

490  
VRT_OK
;

491 
	}
}

493 
	$abã°_£rvî_öô
(
abã°_£rvî
 *
abs
, *
addªss
)

495 
sds
 *
ho°_p‹t
;

496 
cou¡
;

497 
vÆue
;

499 
abs
->
ho°
 = 
NULL
;

500 
abs
->
p‹t
 = 0;

501 
abs
->
c⁄n_c⁄ãxts
 = 
NULL
;

502 
abs
->
d©a
 = 
NULL
;

504 
ho°_p‹t
 = 
	`sds•lôÀn
(
addªss
,
	`°æí
◊ddªss),":",1,&
cou¡
);

505 i‡(
ho°_p‹t
 =
NULL
) {

506  
VRT_ERROR
;

507 } i‡(
cou¡
 != 2) {

508 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

509  
VRT_ERROR
;

512 
abs
->
ho°
 = 
ho°_p‹t
[0];

513 
ho°_p‹t
[0] = 
NULL
;

515 i‡(
	`°rög2l
(
ho°_p‹t
[1],
	`sd¶í
(ho°_p‹t[1]),&
vÆue
) != 1) {

516 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

517  
VRT_ERROR
;

520 
abs
->
p‹t
 = ()
vÆue
;

521 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

523  
VRT_OK
;

524 
	}
}

526 
	$abã°_£rvî_deöô
(
abã°_£rvî
 *
abs
)

528 i‡(
abs
->
ho°
) {

529 
	`sds‰ì
(
abs
->
ho°
);

530 
abs
->
ho°
 = 
NULL
;

533 i‡(
abs
->
p‹t
 > 0)ábs->port = 0;

535 i‡(
abs
->
c⁄n_c⁄ãxts
) {

536 
	`ASSERT
(
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) == 0);

537 
	`d¨øy_de°roy
(
abs
->
c⁄n_c⁄ãxts
);

538 
abs
->
c⁄n_c⁄ãxts
 = 
NULL
;

540 
	}
}

542 
	$gë_backíd_£rvî_idx
(
abã°_group
 *
abg
, *
key
, 
size_t
 
keyÀn
)

544 
hashvÆue
, 
£rvîs_cou¡
;

546 
£rvîs_cou¡
 = 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

547 i‡(
£rvîs_cou¡
 == 1) {

551 
hashvÆue
 = ()
	`hash_¸c32a
(
key
, 
keyÀn
);

553  
hashvÆue
%
£rvîs_cou¡
;

554 
	}
}

556 
abã°_£rvî
 *
	$gë_backíd_£rvî
(
abã°_group
 *
abg
, *
key
, 
size_t
 
keyÀn
)

558 
abã°_£rvî
 *
abs
;

559 
idx
;

561 
idx
 = 
abg
->
	`gë_backíd_£rvî_idx
◊bg,
key
,
keyÀn
);

562 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
idx
);

564  
abs
;

565 
	}
}

567 
	$abã°_group_öô
(
abã°_group
 *
abg
, *
group_°rög
)

569 
sds
 *
ty≥_addrs
, *
addrs
;

570 
ty≥_addrs_cou¡
, 
addrs_cou¡
;

571 
j
;

573 
abg
->
ty≥
 = 0;

574 
	`d¨øy_öô
(&
abg
->
abã°_£rvîs
, 1, (
abã°_£rvî
));

576 
ty≥_addrs
 = 
	`sds•lôÀn
(
group_°rög
,
	`sd¶í
(group_°rög),"[",1,&
ty≥_addrs_cou¡
);

577 i‡(
ty≥_addrs
 =
NULL
) {

578  
VRT_ERROR
;

579 } i‡(
ty≥_addrs_cou¡
 != 2) {

580 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

581  
VRT_ERROR
;

584 i‡(!
	`°rˇ£cmp
(
ty≥_addrs
[0],"vire")) {

585 
abg
->
ty≥
 = 
VRABTEST_GROUP_TYPE_VIRE
;

586 } i‡(!
	`°rˇ£cmp
(
ty≥_addrs
[0],"redis")) {

587 
abg
->
ty≥
 = 
VRABTEST_GROUP_TYPE_REDIS
;

589 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

590  
VRT_ERROR
;

593 i‡(
	`sd¶í
(
ty≥_addrs
[1]) <= 1 ||

594 
ty≥_addrs
[1][
	`sd¶í
(type_addrs[1])-1] != ']') {

595 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

596  
VRT_ERROR
;

599 
	`sd§™ge
(
ty≥_addrs
[1],0,-2);

601 
addrs
 = 
	`sds•lôÀn
(
ty≥_addrs
[1],
	`sd¶í
—y≥_addrs[1]),",",1,&
addrs_cou¡
);

602 i‡(
addrs
 =
NULL
) {

603 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

604  
VRT_ERROR
;

605 } i‡(
addrs_cou¡
 < 1) {

606 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

607 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

608  
VRT_ERROR
;

611 
j
 = 0; j < 
addrs_cou¡
; j ++) {

612 
abã°_£rvî
 *
abs
 = 
	`d¨øy_push
(&
abg
->
abã°_£rvîs
);

613 i‡(
	`abã°_£rvî_öô
(
abs
,
addrs
[
j
]Ë!
VRT_OK
) {

614 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

615 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

616  
VRT_ERROR
;

620 
	`sds‰ì•lôªs
(
addrs
,
addrs_cou¡
);

621 
	`sds‰ì•lôªs
(
ty≥_addrs
,
ty≥_addrs_cou¡
);

623 
abg
->
gë_backíd_£rvî_idx
 = get_backend_server_idx;

624 
abg
->
gë_backíd_£rvî
 = get_backend_server;

626  
VRT_OK
;

627 
	}
}

629 
	$abã°_group_deöô
(
abã°_group
 *
abg
)

631 
abã°_£rvî
 *
abs
;

633 
abg
->
ty≥
 = 0;

635 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
) > 0) {

636 
abs
 = 
	`d¨øy_p›
(&
abg
->
abã°_£rvîs
);

637 
	`abã°_£rvî_deöô
(
abs
);

639 
	`d¨øy_deöô
(&
abg
->
abã°_£rvîs
);

640 
	}
}

643 
d¨øy
 *
	$abã°_groups_¸óã
(*
groups_°rög
)

645 
d¨øy
 *
abgs
;

646 
sds
 *
group_°rögs
;

647 
group_cou¡
, 
j
;

649 
group_°rögs
 = 
	`sds•lôÀn
(
groups_°rög
,
	`°æí
(groups_°rög),"-",1,&
group_cou¡
);

650 i‡(
group_°rögs
 =
NULL
) {

651  
NULL
;

652 } i‡(
group_cou¡
 < 1) {

653 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

654  
NULL
;

657 
abgs
 = 
	`d¨øy_¸óã
(2, (
abã°_group
));

658 i‡(
abgs
 =
NULL
) {

659 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

660  
NULL
;

663 
j
 = 0; j < 
group_cou¡
; j ++) {

664 
abã°_group
 *
abg
;

665 
sds
 
group_°rög
 = 
group_°rögs
[
j
];

666 
sds
 *
ty≥_addrs
;

667 
ñem_cou¡
;

669 
abg
 = 
	`d¨øy_push
(
abgs
);

670 i‡(
	`abã°_group_öô
(
abg
,
group_°rög
Ë!
VRT_OK
) {

671 
	`sds‰ì•lôªs
(
group_°rögs
,
group_cou¡
);

672 
	`abã°_groups_de°roy
(
abgs
);

673  
NULL
;

677  
abgs
;

678 
	}
}

680 
	$abã°_groups_de°roy
(
d¨øy
 *
abgs
)

682 
	`d¨øy_n
(
abgs
) > 0) {

683 
abã°_group
 *
abg
 = 
	`d¨øy_p›
(
abgs
);

684 
	`abã°_group_deöô
(
abg
);

687 
	`d¨øy_de°roy
(
abgs
);

688 
	}
}

691 
	$maö
(
¨gc
, **
¨gv
)

693 
ªt
;

695 
	`vπ_£t_deÁu…_›ti⁄s
();

697 
ªt
 = 
	`vπ_gë_›ti⁄s
(
¨gc
, 
¨gv
);

698 i‡(
ªt
 !
VRT_OK
) {

699 
	`vπ_show_ußge
();

700 
	`exô
(1);

703 i‡(
show_vîsi⁄
) {

704 
	`log_°dout
("Thi†i†vúóbã°-%s", 
VR_VERSION_STRING
);

705 i‡(
show_hñp
) {

706 
	`vπ_show_ußge
();

708 
	`exô
(0);

711 
ªt
 = 
	`log_öô
(
LOG_INFO
, 
c⁄fig
.
log_fûíame
);

712 i‡(
ªt
 < 0) {

713 
	`exô
(1);

716 i‡(
d´m⁄ize
) {

717 
ªt
 = 
	`vπ_d´m⁄ize
(1);

718 i‡(
ªt
 !
VRT_OK
) {

719 
	`exô
(1);

723 
ã°_öãrvÆ
 = 
c⁄fig
.test_interval;

725 
ªt
 = 
	`vπ_¥odu˚_d©a_öô
(
c⁄fig
.
key_Àngth_ønge_begö
,

726 
c⁄fig
.
key_Àngth_ønge_íd
,

727 
c⁄fig
.
°rög_max_Àngth
,c⁄fig.
fõlds_max_cou¡
,

728 
c⁄fig
.
cmd_ty≥
,c⁄fig.
cmd_bœckli°
,c⁄fig.
cmd_whôñi°
,

729 
c⁄fig
.
¥odu˚_d©a_thªads
,

730 
c⁄fig
.
ˇched_keys_≥r_¥odu˚_thªad
,

731 
c⁄fig
.
hô_øtio
);

732 i‡(
ªt
 !
VRT_OK
) {

733 
	`log_îr‹
("Init dataÖroducer failed");

734 
	`exô
(1);

736 
ªt
 = 
	`vπ_di•©ch_d©a_öô
(
c⁄fig
.
di•©ch_d©a_thªads
,

737 
c⁄fig
.
ã°_èrgës
, c⁄fig.
˛õ¡s_≥r_di•©ch_thªad
);

738 i‡(
ªt
 !
VRT_OK
) {

739 
	`log_îr‹
("Init data dispatcher failed");

740 
	`exô
(1);

742 
ªt
 = 
	`vπ_backíd_öô
(
c⁄fig
.
di•©ch_d©a_thªads
,

743 
c⁄fig
.
ã°_èrgës
);

744 i‡(
ªt
 !
VRT_OK
) {

745 
	`log_îr‹
("Init backendÅhread failed");

746 
	`exô
(1);

748 
ªt
 = 
	`vπ_d©a_checkî_öô
(
c⁄fig
.
checkî
, c⁄fig.
ã°_èrgës
);

749 i‡(
ªt
 !
VRT_OK
) {

750 
	`log_îr‹
("Init check dataÅhread failed");

751 
	`exô
(1);

754 
	`log_debug
(
LOG_INFO
,"SèãÜockÅy≥: %s", 
TEST_STATE_LOCK_TYPE
);

756 
	`vπ_°¨t_¥odu˚_d©a
();

757 
	`vπ_°¨t_di•©ch_d©a
();

758 
	`vπ_°¨t_backíd
();

759 
	`vπ_°¨t_d©a_checkî
();

761 
	`vπ_waô_¥odu˚_d©a
();

762 
	`vπ_waô_di•©ch_d©a
();

763 
	`vπ_waô_backíd
();

764 
	`vπ_waô_d©a_checkî
();

766 
	`vπ_d©a_checkî_deöô
();

767 
	`vπ_backíd_deöô
();

768 
	`vπ_di•©ch_d©a_deöô
();

769 
	`vπ_¥odu˚_d©a_deöô
();

771 
	`log_deöô
();

772 
	`vπ_˛ón_›ti⁄s
();

774  
VRT_OK
;

775 
	}
}

	@tests/vrabtest.h

1 #i‚de‡
_VRABTEST_H_


2 
	#_VRABTEST_H_


	)

4 
	~<d¨øy.h
>

6 
	gªdisC⁄ãxt
;

7 
	gªdisAsyncC⁄ãxt
;

8 
	gabã°_group
;

10 
	sc⁄n_c⁄ãxt
 {

11 
ªdisC⁄ãxt
 *
	m˘x
;

12 
ªdisAsyncC⁄ãxt
 *
	ma˘x
;

13 } 
	tc⁄n_c⁄ãxt
;

15 
	sabã°_£rvî
 {

16 
sds
 
	mho°
;

17 
	mp‹t
;

19 
d¨øy
 *
	mc⁄n_c⁄ãxts
;

21 *
	md©a
;

22 } 
	tabã°_£rvî
;

24 (*
	tbackíd_£rvî_idx_t
)(
	tabã°_group
*, *, 
	tsize_t
);

25 
abã°_£rvî
 *(*
	tbackíd_£rvî_t
)(
	tabã°_group
*, *, 
	tsize_t
);

27 
	sabã°_group
 {

28 
ty≥
;

30 
d¨øy
 
abã°_£rvîs
;

32 
backíd_£rvî_idx_t
 
gë_backíd_£rvî_idx
;

33 
backíd_£rvî_t
 
gë_backíd_£rvî
;

34 } 
	tabã°_group
;

36 
expúe_íabÀd
;

37 
ã°_öãrvÆ
;

38 
œ°_ã°_begö_time
;

40 
d¨øy
 *
	`abã°_groups_¸óã
(*
groups_°rög
);

41 
	`abã°_groups_de°roy
(
d¨øy
 *
abgs
);

	@tests/vrt_backend.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<async.h
>

13 
	~<ad≠ãrs/´.h
>

15 
	~<dhashkô.h
>

16 
	~<dli°.h
>

17 
	~<dmtqueue.h
>

19 
	~<vπ_utû.h
>

20 
	~<vπ_public.h
>

21 
	~<vøbã°.h
>

22 
	~<vπ_¥odu˚_d©a.h
>

23 
	~<vπ_di•©ch_d©a.h
>

24 
	~<vπ_backíd.h
>

26 
	sèsk_d©a
 {

27 
	mmaxmem‹y
;

28 
	mu£d_mem‹y
;

29 
	mtŸÆ_sy°em_mem‹y
;

31 
	mdñëög
;

32 
	mcurs‹
;

33 } 
	tèsk_d©a
;

35 
	gbackíd_thªads_cou¡
;

36 
d¨øy
 *
	gbackíd_thªads
 = 
NULL
;

38 
	gbackíd_thªads_∑u£_föished_cou¡
;

40 
	$èsk_d©a_¸óã
()

42 
èsk_d©a
 *
td
;

44 
td
 = 
	`mÆloc
((*td));

46 
td
->
maxmem‹y
 = 0;

47 
td
->
u£d_mem‹y
 = 0;

48 
td
->
tŸÆ_sy°em_mem‹y
 = 0;

49 
td
->
dñëög
 = 0;

50 
td
->
curs‹
 = 0;

52  
td
;

53 
	}
}

55 
	$èsk_d©a_de°roy
(
èsk_d©a
 *
td
)

57 
	`‰ì
(
td
);

58 
	}
}

60 
	$backíd_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

62 
cc
->
˘x
 = 
NULL
;

63 
cc
->
a˘x
 = 
NULL
;

65 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

66 i‡(
cc
->
a˘x
 =
NULL
) {

67  
VRT_ERROR
;

70  
VRT_OK
;

71 
	}
}

73 
	$backíd_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

75 i‡(
cc
->
˘x
) {

76 
	`ªdisFªe
(
cc
->
˘x
);

77 
cc
->
˘x
 =
NULL
;

80 i‡(
cc
->
a˘x
) {

81 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

82 
cc
->
a˘x
 =
NULL
;

84 
	}
}

86 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

87 
backíd_thªad
 *
bt
 = 
c
->
d©a
;

88 i‡(
°©us
 !
REDIS_OK
) {

89 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

95 
	}
}

97 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

98 
backíd_thªad
 *
bt
 = 
c
->
d©a
;

99 i‡(
°©us
 !
REDIS_OK
) {

100 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

107 
	}
}

109 
	$sˇn_f‹_dñëe_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

110 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

111 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

112 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

113 
c⁄n_c⁄ãxt
 *
cc
;

114 
vÆue
;

115 
size_t
 
k
;

117 i‡(
ª∂y
 =
NULL
) ;

119 i‡(!
td
->
dñëög
) {

123 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

127 i‡(
ª∂y
->
ñemíts
 != 2) {

131 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

132 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

133 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

137 
td
->
curs‹
 = 
vÆue
;

139 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

140 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

144 
k
 = 0; k < 
ª∂y_sub
->
ñemíts
; k ++) {

145 
ª∂y_ñem
 = 
ª∂y_sub
->
ñemít
[
k
];

146 i‡(
ª∂y_ñem
->
ty≥
 !
REDIS_REPLY_STRING
) {

150 
d©a_unô
 *
du
 = 
	`d©a_unô_gë
();

151 
du
->
dp
 = 
dñëe_d©a_¥odu˚r
;

152 
du
->
¨gc
 = 2;

153 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

154 
du
->
¨gv
[0] = 
	`sd¢ew
(
dñëe_d©a_¥odu˚r
->
«me
);

155 
du
->
¨gv
[1] = 
	`sd¢ewÀn
(
ª∂y_ñem
->
°r
,ª∂y_ñem->
Àn
);

156 
	`d©a_di•©ch
(
du
);

159 
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

160 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_dñëe_ˇŒback
,

161 
abs
, "sˇ¿%Œd cou¡ 1000", 
td
->
curs‹
);

162 
	}
}

164 
	$upd©e_mem‹y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

165 
ªdisRïly
 *
ª∂y
 = 
r
;

166 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

167 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

169 i‡(
ª∂y
 =
NULL
) ;

171 
td
->
u£d_mem‹y
 = 
	`gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ª∂y
, "used_memory");

173 i‡(
td
->
maxmem‹y
 == 0) {

174 
td
->
tŸÆ_sy°em_mem‹y
 = 
	`gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ª∂y
, "total_system_memory");

176 
	}
}

178 
	$upd©e_maxmem‹y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

179 
ªdisRïly
 *
ª∂y
 = 
r
;

180 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

181 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

182 
ªdisRïly
 *
ª∂y_sub
;

183 
vÆue
;

185 i‡(
ª∂y
 =
NULL
) ;

187 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

191 i‡(
ª∂y
->
ñemíts
 != 2) {

195 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

196 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

197 
	`°rcmp
(
ª∂y_sub
->
°r
, "maxmemory")) {

201 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

202 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

203 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

207 
td
->
maxmem‹y
 = 
vÆue
;

208 
	}
}

210 
	$upd©e_mem‹y_öfo
(
d¨øy
 *
abgs
)

212 
i
, 
j
;

214 
i
 = 0; i < 
	`d¨øy_n
(
abgs
); i ++) {

215 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

216 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

217 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

218 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

220 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
upd©e_mem‹y_ˇŒback
, 
abs
, "info memory");

221 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
upd©e_maxmem‹y_ˇŒback
, 
abs
, "config get maxmemory");

224 
	}
}

226 
	$check_mem‹y_íough
(
backíd_thªad
 *
bt
)

228 
i
, 
j
;

229 
d¨øy
 *
abgs
 = 
bt
->abgs;

231 
i
 = 0; i < 
	`d¨øy_n
(
abgs
); i ++) {

232 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

233 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

234 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

235 
èsk_d©a
 *
td
 = 
abs
->
d©a
;

236 
max_mem‹y_Ælowed
 = 0;

238 i‡(
td
->
u£d_mem‹y
) {

239 i‡(
td
->
maxmem‹y
) {

240 
max_mem‹y_Ælowed
 = 
td
->
maxmem‹y
;

241 } i‡(
td
->
tŸÆ_sy°em_mem‹y
) {

242 
max_mem‹y_Ælowed
 = 
td
->
tŸÆ_sy°em_mem‹y
;

245 i‡(
max_mem‹y_Ælowed
) {

246 i‡(
td
->
u£d_mem‹y
*100/
max_mem‹y_Ælowed
 > 80) {

247 i‡(!
td
->
dñëög
) {

248 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

249 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_dñëe_ˇŒback
,

250 
abs
, "sˇ¿%Œd cou¡ 1000", 
td
->
curs‹
);

251 
td
->
dñëög
 = 1;

252 
bt
->
dñëög
 ++;

254 } i‡(
td
->
dñëög
) {

255 
td
->
dñëög
 = 0;

256 
bt
->
dñëög
 --;

262 
	}
}

264 
	$backíd_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

266 
backíd_thªad
 *
bt
 = 
˛õ¡D©a
;

268 
	`ASSERT
(
evítLo›
 =
bt
->
ñ
);

271 i‡(
bt
->
∑u£
) {

272 i‡(!
	`ã°_if_√ed_∑u£
()) {

273 
bt
->
∑u£
 = 0;

275 
bt
->
¸⁄lo›s
 ++;

280 
	`upd©e_mem‹y_öfo
(
bt
->
abgs
);

281 
	`check_mem‹y_íough
(
bt
);

284 i‡(!
bt
->
∑u£
 && 
	`ã°_if_√ed_∑u£
(Ë&& !bt->
dñëög
) {

285 
bt
->
∑u£
 = 1;

286 
	`⁄e_backíd_thªad_∑u£d
();

289 
bt
->
¸⁄lo›s
 ++;

290  1000/
bt
->
hz
;

291 
	}
}

293 
	$backíd_thªad_öô
(
backíd_thªad
 *
bt
, *
ã°_èrgë_groups
)

295 
i
, 
j
, 
k
;

297 
bt
->
id
 = 0;

298 
bt
->
thªad_id
 = 0;

299 
bt
->
ñ
 = 
NULL
;

300 
bt
->
hz
 = 10;

301 
bt
->
¸⁄lo›s
 = 0;

302 
bt
->
dñëög
 = 0;

303 
bt
->
∑u£
 = 0;

305 
bt
->
ñ
 = 
	`´Cª©eEvítLo›
(1);

306 i‡(
bt
->
ñ
 =
NULL
) {

307  
VRT_ERROR
;

310 
bt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

311 i‡(
bt
->
abgs
 =
NULL
) {

312  
VRT_ERROR
;

316 
i
 = 0; i < 
	`d¨øy_n
(
bt
->
abgs
); i ++) {

317 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
bt
->
abgs
, 
i
);

318 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

319 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

321 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(1, (
c⁄n_c⁄ãxt
));

322 
k
 = 0; k < 1; k ++) {

323 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

324 i‡(
	`backíd_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

325  
VRT_ERROR
;

327 
cc
->
a˘x
->
d©a
 = 
bt
;

328 
	`ªdisAeAâach
(
bt
->
ñ
, 
cc
->
a˘x
);

329 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

330 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

333 
abs
->
d©a
 = 
	`èsk_d©a_¸óã
();

337 i‡(
	`´Cª©eTimeEvít
(
bt
->
ñ
, 1, 
backíd_thªad_¸⁄
, bt, 
NULL
Ë=
AE_ERR
) {

338  
VRT_ERROR
;

341  
VRT_OK
;

342 
	}
}

344 
	$backíd_thªad_deöô
(
backíd_thªad
 *
bt
)

346 i‡(
bt
->
ñ
) {

347 
	`´DñëeEvítLo›
(
bt
->
ñ
);

348 
bt
->
ñ
 = 
NULL
;

351 i‡(
bt
->
abgs
) {

352 
i
, 
j
, 
k
;

354 
i
 = 0; i < 
	`d¨øy_n
(
bt
->
abgs
); i ++) {

355 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
bt
->
abgs
, 
i
);

356 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

357 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

358 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

359 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

360 
	`backíd_c⁄n_c⁄ãxt_deöô
(
cc
);

363 i‡(
abs
->
d©a
) {

364 
	`èsk_d©a_de°roy
(
abs
->
d©a
);

365 
abs
->
d©a
;

370 
	`abã°_groups_de°roy
(
bt
->
abgs
);

371 
bt
->
abgs
 = 
NULL
;

373 
	}
}

375 
	$vπ_backíd_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
)

377 
j
;

379 
backíd_thªads_cou¡
 = 
thªads_cou¡
;

380 
backíd_thªads
 = 
	`d¨øy_¸óã
(
thªads_cou¡
, (
backíd_thªad
));

381 i‡(
backíd_thªads
 =
NULL
) {

382  
VRT_ERROR
;

385 
j
 = 0; j < 
thªads_cou¡
; j ++) {

386 
backíd_thªad
 *
bt
 = 
	`d¨øy_push
(
backíd_thªads
);

387 i‡(
	`backíd_thªad_öô
(
bt
, 
ã°_èrgë_groups
Ë!
VRT_OK
) {

388  
VRT_ERROR
;

390 
bt
->
id
 = 
j
;

393  
VRT_OK
;

394 
	}
}

396 
	$vπ_backíd_deöô
()

398 i‡(
backíd_thªads
) {

399 
	`d¨øy_n
(
backíd_thªads
) > 0) {

400 
backíd_thªad
 *
bt
 = 
	`d¨øy_p›
(
backíd_thªads
);

401 
	`backíd_thªad_deöô
(
bt
);

403 
	`d¨øy_de°roy
(
backíd_thªads
);

404 
backíd_thªads
 = 
NULL
;

406 
	}
}

408 *
	$vπ_backíd_thªad_run
(*
¨gs
)

410 
backíd_thªad
 *
bt
 = 
¨gs
;

411 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

413 
	`´Maö
(
bt
->
ñ
);

415  
NULL
;

416 
	}
}

418 
	$vπ_°¨t_backíd
()

420 
i
;

421 
i
 = 0; i < 
	`d¨øy_n
(
backíd_thªads
); i ++) {

422 
±hªad_©å_t
 
©å
;

423 
backíd_thªad
 *
bt
;

424 
	`±hªad_©å_öô
(&
©å
);

425 
bt
 = 
	`d¨øy_gë
(
backíd_thªads
, 
i
);

426 
	`±hªad_¸óã
(&
bt
->
thªad_id
,

427 &
©å
, 
vπ_backíd_thªad_run
, 
bt
);

430  
VRT_OK
;

431 
	}
}

433 
	$vπ_waô_backíd
()

435 
i
;

437 
i
 = 0; i < 
	`d¨øy_n
(
backíd_thªads
); i ++){

438 
backíd_thªad
 *
bt
 = 
	`d¨øy_gë
(
backíd_thªads
, 
i
);

439 
	`±hªad_joö
(
bt
->
thªad_id
, 
NULL
);

442  
VRT_OK
;

443 
	}
}

	@tests/vrt_backend.h

1 #i‚de‡
_VRT_BACKEND_H_


2 
	#_VRT_BACKEND_H_


	)

4 
	~<d¨øy.h
>

6 
	gabã°_group
;

7 
	gdli°
;

8 
	gdméi°
;

9 
	gd©a_unô
;

10 
	g´EvítLo›
;

12 
	sbackíd_thªad
 {

13 
	mid
;

14 
±hªad_t
 
	mthªad_id
;

16 
´EvítLo›
 *
	mñ
;

17 
	mhz
;

18 
	m¸⁄lo›s
;

20 
d¨øy
 *
	mabgs
;

22 
	mdñëög
;

23 
	m∑u£
;

24 } 
	tbackíd_thªad
;

26 
backíd_thªads_cou¡
;

28 
backíd_thªads_∑u£_föished_cou¡
;

30 
vπ_backíd_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
);

31 
vπ_backíd_deöô
();

33 
vπ_°¨t_backíd
();

34 
vπ_waô_backíd
();

	@tests/vrt_benchmark.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<as£π.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<´.h
>

14 
	~<húedis.h
>

15 
	~<sds.h
>

17 
	~<d¨øy.h
>

18 
	~<dli°.h
>

19 
	~<dutû.h
>

20 
	~<dlog.h
>

22 
	~<vπ_utû.h
>

23 
	~<vπ_public.h
>

24 
	~<himemˇched.h
>

26 
	#TEST_CMD_PROTOCOL_REDIS
 0

	)

27 
	#TEST_CMD_PROTOCOL_MEMCACHE
 1

	)

29 
	#RANDPTR_INITIAL_SIZE
 8

	)

31 
	sc⁄fig
 {

32 c⁄° *
	mho°ù
;

33 
	mho°p‹t
;

34 c⁄° *
	mho°sockë
;

35 
	mnum˛õ¡s
;

36 
	mlive˛õ¡s
;

37 
	mªque°s
;

38 
	mªque°s_issued
;

39 
	mªque°s_föished
;

40 
	mkeysize
;

41 
	md©asize
;

42 
	møndomkeys
;

43 
	møndomkeys_key•a˚Àn
;

44 
	mkì∑live
;

45 
	mpùñöe
;

46 
	mshowîr‹s
;

47 
	m°¨t
;

48 
	mtŸœãncy
;

49 *
	mœãncy
;

50 c⁄° *
	mtôÀ
;

51 
	mquõt
;

52 
	mcsv
;

53 
	mlo›
;

54 
	midÀmode
;

55 
	mdbnum
;

56 
sds
 
	mdbnum°r
;

57 *
	mã°s
;

58 *
	mauth
;

59 
	mthªads_cou¡
;

60 
	m¥Ÿocﬁ
;

61 
	mnoölöe
;

62 } 
	gc⁄fig
;

64 
	sbíchm¨k_thªad
 {

65 
	mid
;

66 
±hªad_t
 
	mthªad_id
;

68 
´EvítLo›
 *
	mñ
;

69 
	mhz
;

70 
	m¸⁄lo›s
;

72 
dli°
 *
	m˛õ¡s
;

73 
	mnum˛õ¡s
;

74 
	mlive˛õ¡s
;

76 
	mªque°s
;

77 
	mªque°s_issued
;

78 
	mªque°s_föished
;

80 
	m°¨t
;

81 
	mtŸœãncy
;

82 *
	mœãncy
;

83 } 
	tbíchm¨k_thªad
;

85 
	s_bíchm¨k_˛õ¡
 {

86 
bíchm¨k_thªad
 *
	mbt
;

88 
ªdisC⁄ãxt
 *
	mrc
;

89 
mcC⁄ãxt
 *
	mmc
;

90 
sds
 
	mobuf
;

91 **
	mønd±r
;

92 
size_t
 
	møndÀn
;

93 
size_t
 
	mønd‰ì
;

94 
size_t
 
	mwrôãn
;

95 
	m°¨t
;

96 
	mœãncy
;

97 
	m≥ndög
;

98 
	m¥efix_≥ndög
;

101 
	m¥efixÀn
;

102 } *
	tbíchm¨k_˛õ¡
;

104 
d¨øy
 *
	gbts
;

107 
wrôeH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
);

108 
bíchm¨k_˛õ¡
 
¸óãClõ¡
(*
cmd
, 
size_t
 
Àn
, bíchm¨k_˛õ¡ 
‰om
, 
bíchm¨k_thªad
 *
thªad
);

109 
¸óãMissögClõ¡s
(
bíchm¨k_˛õ¡
 
c
);

110 
showThroughput
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
);

112 
	$‰ìClõ¡
(
bíchm¨k_˛õ¡
 
c
) {

113 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

114 
dli°Node
 *
 
;

116 i‡(
bt
->
ñ
) {

117 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

118 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
);

120 
	`ªdisFªe
(
c
->
rc
);

121 i‡(
c
->
mc
) {

122 
c
->
mc
->
fd
 = -1;

123 
	`memˇchedFªe
(
c
->
mc
);

125 
	`sds‰ì
(
c
->
obuf
);

126 
	`‰ì
(
c
->
ønd±r
);

127 
	`‰ì
(
c
);

128 
	`upd©e_°©e_sub
(
bt
->
live˛õ¡s
,1);

129 
 
 = 
	`dli°SórchKey
(
bt
->
˛õ¡s
,
c
);

130 
	`ASSERT
(
 
 !
NULL
);

131 
	`dli°DñNode
(
bt
->
˛õ¡s
,
 
);

132 
	}
}

134 
	$‰ìAŒClõ¡s
(
dli°
 *
˛õ¡s
) {

135 
dli°Node
 *
 
 = 
˛õ¡s
->
hód
, *
√xt
;

137 
 
) {

138 
√xt
 = 
 
->next;

139 
	`‰ìClõ¡
(
 
->
vÆue
);

140 
 
 = 
√xt
;

142 
	}
}

144 
	$ª£tClõ¡
(
bíchm¨k_˛õ¡
 
c
) {

145 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

147 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

148 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
);

149 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
,
wrôeH™dÀr
,c);

150 
c
->
wrôãn
 = 0;

151 
c
->
≥ndög
 = 
c⁄fig
.
pùñöe
;

152 
	}
}

154 
	$øndomizeClõ¡Key
(
bíchm¨k_˛õ¡
 
c
) {

155 
size_t
 
i
;

157 
i
 = 0; i < 
c
->
øndÀn
; i++) {

158 *
p
 = 
c
->
ønd±r
[
i
]+11;

159 
size_t
 
r
 = 
	`øndom
(Ë% 
c⁄fig
.
øndomkeys_key•a˚Àn
;

160 
size_t
 
j
;

162 
j
 = 0; j < 12; j++) {

163 *
p
 = '0'+
r
%10;

164 
r
/=10;

165 
p
--;

168 
	}
}

170 
	$˛õ¡D⁄e
(
bíchm¨k_˛õ¡
 
c
) {

171 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

172 
ªque°s_föished
;

174 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

175 i‡(
ªque°s_föished
 =
bt
->
ªque°s
) {

176 
	`‰ìClõ¡
(
c
);

177 
	`´St›
(
bt
->
ñ
);

180 i‡(
c⁄fig
.
kì∑live
) {

181 
	`ª£tClõ¡
(
c
);

183 
	`upd©e_°©e_sub
(
bt
->
live˛õ¡s
,1);

184 
	`¸óãMissögClõ¡s
(
c
);

185 
	`upd©e_°©e_add
(
bt
->
live˛õ¡s
,1);

186 
	`‰ìClõ¡
(
c
);

188 
	}
}

190 
	$bíchm¨k_thªad_öô
(
bíchm¨k_thªad
 *
bt
, 
ªque°s
, 
num˛õ¡s
, *
cmd
, 
size_t
 
Àn
)

192 
bíchm¨k_˛õ¡
 
c
;

194 
bt
->
thªad_id
 = 0;

195 
bt
->
ñ
 = 
NULL
;

196 
bt
->
hz
 = 10;

197 
bt
->
¸⁄lo›s
 = 0;

198 
bt
->
˛õ¡s
 = 
NULL
;

199 
bt
->
num˛õ¡s
 =Çumclients;

200 
bt
->
live˛õ¡s
 = 0;

201 
bt
->
ªque°s
 =Ñequests;

202 
bt
->
ªque°s_issued
 = 0;

203 
bt
->
ªque°s_föished
 = 0;

204 
bt
->
°¨t
 = 0;

205 
bt
->
tŸœãncy
 = 0;

206 
bt
->
œãncy
 = 
NULL
;

208 
bt
->
ñ
 = 
	`´Cª©eEvítLo›
(1024*10);

209 i‡(
bt
->
ñ
 =
NULL
) {

210  
VRT_ERROR
;

213 
bt
->
˛õ¡s
 = 
	`dli°Cª©e
();

214 i‡(
bt
->
˛õ¡s
 =
NULL
) {

215  
VRT_ERROR
;

218 
bt
->
œãncy
 = 
	`mÆloc
(()*bt->
ªque°s
);

220 
c
 = 
	`¸óãClõ¡
(
cmd
,
Àn
,
NULL
,
bt
);

221 
	`¸óãMissögClõ¡s
(
c
);

223 i‡(
bt
->
id
 == 0) {

224 
	`´Cª©eTimeEvít
(
bt
->
ñ
,1,
showThroughput
,
NULL
,NULL);

227  
VRT_OK
;

228 
	}
}

230 
	$bíchm¨k_thªad_deöô
(
bíchm¨k_thªad
 *
bt
)

232 i‡(
bt
->
˛õ¡s
) {

233 
	`‰ìAŒClõ¡s
(
bt
->
˛õ¡s
);

234 
	`dli°Rñó£
(
bt
->
˛õ¡s
);

235 
bt
->
˛õ¡s
 = 
NULL
;

238 i‡(
bt
->
ñ
) {

239 
	`´DñëeEvítLo›
(
bt
->
ñ
);

240 
bt
->
ñ
 = 
NULL
;

243 i‡(
bt
->
œãncy
) {

244 
	`‰ì
(
bt
->
œãncy
);

245 
bt
->
œãncy
 = 
NULL
;

247 
	}
}

249 *
	$bíchm¨k_thªad_run
(*
¨gs
)

251 
bíchm¨k_thªad
 *
bt
 = 
¨gs
;

252 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

254 
	`´Maö
(
bt
->
ñ
);

256  
NULL
;

257 
	}
}

259 
	$°¨t_bíchm¨k_thªads_u¡û_föish
()

261 
i
;

262 
bíchm¨k_thªad
 *
bt
;

264 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

265 
±hªad_©å_t
 
©å
;

266 
	`±hªad_©å_öô
(&
©å
);

267 
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

268 
	`±hªad_¸óã
(&
bt
->
thªad_id
,

269 &
©å
, 
bíchm¨k_thªad_run
, 
bt
);

272 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

273 
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

274 
	`±hªad_joö
(
bt
->
thªad_id
, 
NULL
);

277  
VRT_OK
;

278 
	}
}

280 
	$ªadH™dÀrMC
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

281 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

282 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

283 
mcC⁄ãxt
 *
mc
 = 
c
->mc;

284 
ªque°s_föished
;

285 *
ª∂y
 = 
NULL
;

286 
	`UNUSED
(
ñ
);

287 
	`UNUSED
(
fd
);

288 
	`UNUSED
(
mask
);

293 i‡(
c
->
œãncy
 < 0Ëc->œãncy = 
	`du£c_now
()-(c->
°¨t
);

295 i‡(
	`memˇchedBuf„rRód
(
mc
Ë!
MC_OK
) {

296 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
mc
->
îr°r
);

297 
	`exô
(1);

299 
c
->
≥ndög
) {

300 i‡(
	`memˇchedGëRïly
(
mc
,&
ª∂y
Ë!
MC_OK
) {

301 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
mc
->
îr°r
);

302 
	`exô
(1);

305 i‡(
ª∂y
 !
NULL
) {

306 i‡(
ª∂y
 =(*)
MC_REPLY_ERROR
) {

307 
	`Ârötf
(
°dîr
,"UnexpectedÉrrorÑeply,Éxiting...\n");

308 
	`exô
(1);

311 i‡(
c⁄fig
.
showîr‹s
) {

312 
time_t
 
œ°îr_time
 = 0;

313 
time_t
 
now
 = 
	`time
(
NULL
);

314 
mcRïly
 *
r
 = 
ª∂y
;

315 i‡(
r
->
ty≥
 =
MC_REPLY_ERROR
 && 
œ°îr_time
 !
now
) {

316 
œ°îr_time
 = 
now
;

317 
	`¥ötf
("Eº‹ from sîvî: %s\n", 
r
->
°r
);

321 
	`‰ìMcRïlyObje˘
(
ª∂y
);

323 i‡(
c
->
¥efix_≥ndög
 > 0) {

324 
c
->
¥efix_≥ndög
--;

325 
c
->
≥ndög
--;

327 i‡(
c
->
¥efixÀn
 > 0) {

328 
size_t
 
j
;

329 
	`sd§™ge
(
c
->
obuf
, c->
¥efixÀn
, -1);

332 
j
 = 0; j < 
c
->
øndÀn
; j++)

333 
c
->
ønd±r
[
j
] -c->
¥efixÀn
;

334 
c
->
¥efixÀn
 = 0;

339 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

340 i‡(
ªque°s_föished
 < 
bt
->
ªque°s
) {

341 
bt
->
œãncy
[
ªque°s_föished
] = 
c
->latency;

342 
	`upd©e_°©e_add
(
bt
->
ªque°s_föished
,1);

344 
c
->
≥ndög
--;

345 i‡(
c
->
≥ndög
 == 0) {

346 
	`˛õ¡D⁄e
(
c
);

354 
	}
}

356 
	$ªadH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

357 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

358 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

359 
ªque°s_föished
;

360 *
ª∂y
 = 
NULL
;

361 
	`UNUSED
(
ñ
);

362 
	`UNUSED
(
fd
);

363 
	`UNUSED
(
mask
);

368 i‡(
c
->
œãncy
 < 0Ëc->œãncy = 
	`du£c_now
()-(c->
°¨t
);

370 i‡(
	`ªdisBuf„rRód
(
c
->
rc
Ë!
REDIS_OK
) {

371 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
c
->
rc
->
îr°r
);

372 
	`exô
(1);

374 
c
->
≥ndög
) {

375 i‡(
	`ªdisGëRïly
(
c
->
rc
,&
ª∂y
Ë!
REDIS_OK
) {

376 
	`Ârötf
(
°dîr
,"Eº‹: %s\n",
c
->
rc
->
îr°r
);

377 
	`exô
(1);

379 i‡(
ª∂y
 !
NULL
) {

380 i‡(
ª∂y
 =(*)
REDIS_REPLY_ERROR
) {

381 
	`Ârötf
(
°dîr
,"UnexpectedÉrrorÑeply,Éxiting...\n");

382 
	`exô
(1);

385 i‡(
c⁄fig
.
showîr‹s
) {

386 
time_t
 
œ°îr_time
 = 0;

387 
time_t
 
now
 = 
	`time
(
NULL
);

388 
ªdisRïly
 *
r
 = 
ª∂y
;

389 i‡(
r
->
ty≥
 =
REDIS_REPLY_ERROR
 && 
œ°îr_time
 !
now
) {

390 
œ°îr_time
 = 
now
;

391 
	`¥ötf
("Eº‹ from sîvî: %s\n", 
r
->
°r
);

395 
	`‰ìRïlyObje˘
(
ª∂y
);

397 i‡(
c
->
¥efix_≥ndög
 > 0) {

398 
c
->
¥efix_≥ndög
--;

399 
c
->
≥ndög
--;

401 i‡(
c
->
¥efixÀn
 > 0) {

402 
size_t
 
j
;

403 
	`sd§™ge
(
c
->
obuf
, c->
¥efixÀn
, -1);

406 
j
 = 0; j < 
c
->
øndÀn
; j++)

407 
c
->
ønd±r
[
j
] -c->
¥efixÀn
;

408 
c
->
¥efixÀn
 = 0;

413 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&requests_finished);

414 i‡(
ªque°s_föished
 < 
bt
->
ªque°s
) {

415 
bt
->
œãncy
[
ªque°s_föished
] = 
c
->latency;

416 
	`upd©e_°©e_add
(
bt
->
ªque°s_föished
,1);

418 
c
->
≥ndög
--;

419 i‡(
c
->
≥ndög
 == 0) {

420 
	`˛õ¡D⁄e
(
c
);

428 
	}
}

430 
	$wrôeH™dÀr
(
´EvítLo›
 *
ñ
, 
fd
, *
¥ivd©a
, 
mask
) {

431 
bíchm¨k_˛õ¡
 
c
 = 
¥ivd©a
;

432 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

433 
	`UNUSED
(
ñ
);

434 
	`UNUSED
(
fd
);

435 
	`UNUSED
(
mask
);

438 i‡(
c
->
wrôãn
 == 0) {

440 i‡(
bt
->
ªque°s_issued
++ >bt->
ªque°s
) {

441 
	`‰ìClõ¡
(
c
);

446 i‡(
c⁄fig
.
øndomkeys
Ë
	`øndomizeClõ¡Key
(
c
);

447 
c
->
°¨t
 = 
	`du£c_now
();

448 
c
->
œãncy
 = -1;

451 i‡(
	`sd¶í
(
c
->
obuf
Ë> c->
wrôãn
) {

452 *
±r
 = 
c
->
obuf
+c->
wrôãn
;

453 
ssize_t
 
nwrôãn
 = 
	`wrôe
(
c
->
rc
->
fd
,
±r
,
	`sd¶í
(c->
obuf
)-c->
wrôãn
);

455 i‡(
nwrôãn
 == -1) {

456 i‡(
î∫o
 !
EPIPE
)

457 
	`Ârötf
(
°dîr
, "WrôögÅÿsockë: %s\n", 
	`°ªº‹
(
î∫o
));

458 
	`‰ìClõ¡
(
c
);

461 
c
->
wrôãn
 +
nwrôãn
;

462 i‡(
	`sd¶í
(
c
->
obuf
Ë=c->
wrôãn
) {

463 
	`´DñëeFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
);

464 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_REDIS
) {

465 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
,
ªadH™dÀr
,c);

466 } i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

467 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_READABLE
,
ªadH™dÀrMC
,c);

469 
	`NOT_REACHED
();

473 
	}
}

496 
bíchm¨k_˛õ¡
 
	$¸óãClõ¡
(*
cmd
, 
size_t
 
Àn
, 
bíchm¨k_˛õ¡
 
‰om
, 
bíchm¨k_thªad
 *
thªad
) {

497 
j
;

498 
bíchm¨k_thªad
 *
bt
;

499 
bíchm¨k_˛õ¡
 
c
 = 
	`mÆloc
((
_bíchm¨k_˛õ¡
));

501 
c
->
bt
 = 
NULL
;

502 
c
->
rc
 = 
NULL
;

503 
c
->
mc
 = 
NULL
;

504 
c
->
obuf
 = 
NULL
;

505 
c
->
ønd±r
 = 
NULL
;

506 
c
->
øndÀn
 = 0;

507 
c
->
ønd‰ì
 = 0;

508 
c
->
wrôãn
 = 0;

509 
c
->
°¨t
 = 0;

510 
c
->
œãncy
 = 0;

511 
c
->
≥ndög
 = 0;

512 
c
->
¥efix_≥ndög
 = 0;

513 
c
->
¥efixÀn
 = 0;

515 i‡(
‰om
 =
NULL
) {

516 
	`ASSERT
(
thªad
 !
NULL
);

517 
bt
 = 
thªad
;

519 
bt
 = 
‰om
->bt;

522 
c
->
bt
 = bt;

524 i‡(
c⁄fig
.
ho°sockë
 =
NULL
) {

525 
c
->
rc
 = 
	`ªdisC⁄√˘N⁄Block
(
c⁄fig
.
ho°ù
,c⁄fig.
ho°p‹t
);

527 
c
->
rc
 = 
	`ªdisC⁄√˘UnixN⁄Block
(
c⁄fig
.
ho°sockë
);

529 i‡(
c
->
rc
->
îr
) {

530 
	`Ârötf
(
°dîr
,"CouldÇot connectÅo Redisát ");

531 i‡(
c⁄fig
.
ho°sockë
 =
NULL
)

532 
	`Ârötf
(
°dîr
,"%s:%d: %s\n",
c⁄fig
.
ho°ù
,c⁄fig.
ho°p‹t
,
c
->
rc
->
îr°r
);

534 
	`Ârötf
(
°dîr
,"%s: %s\n",
c⁄fig
.
ho°sockë
,
c
->
rc
->
îr°r
);

535 
	`exô
(1);

538 
c
->
rc
->
ªadî
->
maxbuf
 = 0;

543 
c
->
obuf
 = 
	`sd£m±y
();

547 
c
->
¥efix_≥ndög
 = 0;

548 i‡(
c⁄fig
.
auth
) {

549 *
buf
 = 
NULL
;

550 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
buf
, "AUTH %s", 
c⁄fig
.
auth
);

551 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf, 
buf
, 
Àn
);

552 
	`‰ì
(
buf
);

553 
c
->
¥efix_≥ndög
++;

560 i‡(
c⁄fig
.
dbnum
 != 0) {

561 
c
->
obuf
 = 
	`sdsˇçrötf
(c->obuf,"*2\r\n$6\r\nSELECT\r\n$%d\r\n%s\r\n",

562 ()
	`sd¶í
(
c⁄fig
.
dbnum°r
),config.dbnumstr);

563 
c
->
¥efix_≥ndög
++;

565 
c
->
¥efixÀn
 = 
	`sd¶í
(c->
obuf
);

567 i‡(
‰om
) {

568 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf,

569 
‰om
->
obuf
+‰om->
¥efixÀn
,

570 
	`sd¶í
(
‰om
->
obuf
)-‰om->
¥efixÀn
);

572 
j
 = 0; j < 
c⁄fig
.
pùñöe
; j++)

573 
c
->
obuf
 = 
	`sdsˇéí
(c->obuf,
cmd
,
Àn
);

576 
c
->
wrôãn
 = 0;

577 
c
->
≥ndög
 = 
c⁄fig
.
pùñöe
+c->
¥efix_≥ndög
;

578 
c
->
ønd±r
 = 
NULL
;

579 
c
->
øndÀn
 = 0;

582 i‡(
c⁄fig
.
øndomkeys
) {

583 i‡(
‰om
) {

584 
c
->
øndÀn
 = 
‰om
->randlen;

585 
c
->
ønd‰ì
 = 0;

586 
c
->
ønd±r
 = 
	`mÆloc
((*)*c->
øndÀn
);

588 
j
 = 0; j < ()
c
->
øndÀn
; j++) {

589 
c
->
ønd±r
[
j
] = c->
obuf
 + (
‰om
->randptr[j]-from->obuf);

591 
c
->
ønd±r
[
j
] +c->
¥efixÀn
 - 
‰om
->prefixlen;

594 *
p
 = 
c
->
obuf
;

596 
c
->
øndÀn
 = 0;

597 
c
->
ønd‰ì
 = 
RANDPTR_INITIAL_SIZE
;

598 
c
->
ønd±r
 = 
	`mÆloc
((*)*c->
ønd‰ì
);

599 (
p
 = 
	`°r°r
’,"__ønd_öt__")Ë!
NULL
) {

600 i‡(
c
->
ønd‰ì
 == 0) {

601 
c
->
ønd±r
 = 
	`ªÆloc
(c->ønd±r,(*)*c->
øndÀn
*2);

602 
c
->
ønd‰ì
 +c->
øndÀn
;

604 
c
->
ønd±r
[c->
øndÀn
++] = 
p
;

605 
c
->
ønd‰ì
--;

606 
p
 += 12;

610 i‡(
c⁄fig
.
idÀmode
 == 0)

611 
	`´Cª©eFûeEvít
(
bt
->
ñ
,
c
->
rc
->
fd
,
AE_WRITABLE
,
wrôeH™dÀr
,c);

614 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

615 
c
->
mc
 = 
	`memˇchedC⁄ãxtInô
();

616 
c
->
mc
->
fd
 = c->
rc
->fd;

617 
c
->
mc
->
Êags
 &~
MC_BLOCK
;

620 
	`dli°AddNodeTaû
(
bt
->
˛õ¡s
,
c
);

621 
	`upd©e_°©e_add
(
bt
->
live˛õ¡s
,1);

623  
c
;

624 
	}
}

626 
	$¸óãMissögClõ¡s
(
bíchm¨k_˛õ¡
 
c
) {

627 
n
 = 0;

628 
bíchm¨k_thªad
 *
bt
 = 
c
->bt;

629 
live˛õ¡s
;

631 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&liveclients);

633 
live˛õ¡s
 < 
bt
->
num˛õ¡s
) {

634 
	`¸óãClõ¡
(
NULL
,0,
c
,NULL);

637 i‡(++
n
 > 64) {

638 
	`u¶ìp
(50000);

639 
n
 = 0;

641 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&liveclients);

643 
	}
}

645 
	$com∑ªL©ícy
(c⁄° *
a
, c⁄° *
b
) {

646  (*(*)
a
)-(*(*)
b
);

647 
	}
}

649 
	$upd©eBíchm¨kSèts
()

651 
i
;

652 
cou¡
;

654 
c⁄fig
.
live˛õ¡s
 = 0;

655 
c⁄fig
.
ªque°s_föished
 = 0;

657 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

658 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

659 
	`upd©e_°©e_gë
(
bt
->
live˛õ¡s
,&
cou¡
);

660 
c⁄fig
.
live˛õ¡s
 +
cou¡
;

661 
	`upd©e_°©e_gë
(
bt
->
ªque°s_föished
,&
cou¡
);

662 
c⁄fig
.
ªque°s_föished
 +
cou¡
;

664 
	}
}

666 
	$showL©ícyRï‹t
() {

667 
i
, 
j
, 
cuæ©
 = 0;

668 
n
 = 0;

669 
≥rc
, 
ªq≥r£c
;

671 
	`upd©eBíchm¨kSèts
();

673 
ªq≥r£c
 = ()
c⁄fig
.
ªque°s_föished
/(()c⁄fig.
tŸœãncy
/1000);

674 i‡(!
c⁄fig
.
quõt
 && !c⁄fig.
csv
) {

675 
	`¥ötf
("=====%†======\n", 
c⁄fig
.
tôÀ
);

676 
	`¥ötf
(" %dÑeque°†com∂ëed i¿%.2‡£c⁄ds\n", 
c⁄fig
.
ªque°s_föished
,

677 ()
c⁄fig
.
tŸœãncy
/1000);

678 
	`¥ötf
(" %dÖ¨ÆÀ»˛õ¡s\n", 
c⁄fig
.
num˛õ¡s
);

679 
	`¥ötf
(" %d byã†∑ylﬂd\n", 
c⁄fig
.
d©asize
);

680 
	`¥ötf
(" kì∞Æive: %d\n", 
c⁄fig
.
kì∑live
);

681 
	`¥ötf
("\n");

683 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i++) {

684 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_gë
(
bts
, 
i
);

685 
j
 = 0; j < 
bt
->
ªque°s
; j ++) {

686 
c⁄fig
.
œãncy
[
n
++] = 
bt
->œãncy[
j
];

690 
	`qs‹t
(
c⁄fig
.
œãncy
,c⁄fig.
ªque°s
,(),
com∑ªL©ícy
);

691 
i
 = 0; i < 
c⁄fig
.
ªque°s
; i++) {

692 i‡(
c⁄fig
.
œãncy
[
i
]/1000 !
cuæ©
 || i =(c⁄fig.
ªque°s
-1)) {

693 
cuæ©
 = 
c⁄fig
.
œãncy
[
i
]/1000;

694 
≥rc
 = (()(
i
+1)*100)/
c⁄fig
.
ªque°s
;

695 
	`¥ötf
("%.2f%% <%d mûli£c⁄ds\n", 
≥rc
, 
cuæ©
);

698 
	`¥ötf
("%.2‡ªque°†≥∏£c⁄d\n\n", 
ªq≥r£c
);

699 } i‡(
c⁄fig
.
csv
) {

700 
	`¥ötf
("\"%s\",\"%.2f\"\n", 
c⁄fig
.
tôÀ
, 
ªq≥r£c
);

702 
	`¥ötf
("%s: %.2‡ªque°†≥∏£c⁄d\n", 
c⁄fig
.
tôÀ
, 
ªq≥r£c
);

704 
	}
}

706 
	$bíchm¨k
(*
tôÀ
, *
cmd
, 
Àn
) {

707 
i
;

708 
ªque°s_≥r_thªad
, 
ªque°s_ªmaödî
;

709 
˛õ¡s_≥r_thªad
, 
˛õ¡s_ªmaödî
;

710 
bíchm¨k_˛õ¡
 
c
;

712 
c⁄fig
.
tôÀ
 =Åitle;

713 
c⁄fig
.
ªque°s_issued
 = 0;

714 
c⁄fig
.
ªque°s_föished
 = 0;

717 i‡(
c⁄fig
.
thªads_cou¡
 <= 0) {

718 
	`¥ötf
("ERROR:Åhreads countÇeed biggerÅhan zero\n");

720 
bts
 = 
	`d¨øy_¸óã
(
c⁄fig
.
thªads_cou¡
, (
bíchm¨k_thªad
));

721 
ªque°s_≥r_thªad
 = 
c⁄fig
.
ªque°s
/c⁄fig.
thªads_cou¡
;

722 
ªque°s_ªmaödî
 = 
c⁄fig
.
ªque°s
%c⁄fig.
thªads_cou¡
;

723 
˛õ¡s_≥r_thªad
 = 
c⁄fig
.
num˛õ¡s
/c⁄fig.
thªads_cou¡
;

724 
˛õ¡s_ªmaödî
 = 
c⁄fig
.
num˛õ¡s
%c⁄fig.
thªads_cou¡
;

725 
i
 = 0; i < 
c⁄fig
.
thªads_cou¡
; i ++) {

726 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_push
(
bts
);

727 
bt
->
id
 = 
i
;

728 
	`bíchm¨k_thªad_öô
(
bt
,

729 
ªque°s_ªmaödî
-->0?
ªque°s_≥r_thªad
+1:requests_per_thread,

730 
˛õ¡s_ªmaödî
-->0?
˛õ¡s_≥r_thªad
+1:clients_per_thread,

731 
cmd
,
Àn
);

734 
c⁄fig
.
°¨t
 = 
	`dm£c_now
();

735 
	`°¨t_bíchm¨k_thªads_u¡û_föish
();

736 
c⁄fig
.
tŸœãncy
 = 
	`dm£c_now
()-c⁄fig.
°¨t
;

738 
	`showL©ícyRï‹t
();

740 
	`d¨øy_n
(
bts
) > 0) {

741 
bíchm¨k_thªad
 *
bt
 = 
	`d¨øy_p›
(
bts
);

742 
	`bíchm¨k_thªad_deöô
(
bt
);

744 
	`d¨øy_de°roy
(
bts
);

745 
bts
 = 
NULL
;

746 
	}
}

749 
	$∑r£O±i⁄s
(
¨gc
, c⁄° **
¨gv
) {

750 
i
;

751 
œ°¨g
;

752 
exô_°©us
 = 1;

754 
i
 = 1; i < 
¨gc
; i++) {

755 
œ°¨g
 = (
i
 =(
¨gc
-1));

757 i‡(!
	`°rcmp
(
¨gv
[
i
],"-c")) {

758 i‡(
œ°¨g
Ë
övÆid
;

759 
c⁄fig
.
num˛õ¡s
 = 
	`©oi
(
¨gv
[++
i
]);

760 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-n")) {

761 i‡(
œ°¨g
Ë
övÆid
;

762 
c⁄fig
.
ªque°s
 = 
	`©oi
(
¨gv
[++
i
]);

763 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-k")) {

764 i‡(
œ°¨g
Ë
övÆid
;

765 
c⁄fig
.
kì∑live
 = 
	`©oi
(
¨gv
[++
i
]);

766 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-h")) {

767 i‡(
œ°¨g
Ë
övÆid
;

768 
c⁄fig
.
ho°ù
 = 
	`°rdup
(
¨gv
[++
i
]);

769 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-p")) {

770 i‡(
œ°¨g
Ë
övÆid
;

771 
c⁄fig
.
ho°p‹t
 = 
	`©oi
(
¨gv
[++
i
]);

772 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-s")) {

773 i‡(
œ°¨g
Ë
övÆid
;

774 
c⁄fig
.
ho°sockë
 = 
	`°rdup
(
¨gv
[++
i
]);

775 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-a") ) {

776 i‡(
œ°¨g
Ë
övÆid
;

777 
c⁄fig
.
auth
 = 
	`°rdup
(
¨gv
[++
i
]);

778 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-d")) {

779 i‡(
œ°¨g
Ë
övÆid
;

780 
c⁄fig
.
d©asize
 = 
	`©oi
(
¨gv
[++
i
]);

781 i‡(
c⁄fig
.
d©asize
 < 1) config.datasize=1;

782 i‡(
c⁄fig
.
d©asize
 > 1024*1024*1024) config.datasize = 1024*1024*1024;

783 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-P")) {

784 i‡(
œ°¨g
Ë
övÆid
;

785 
c⁄fig
.
pùñöe
 = 
	`©oi
(
¨gv
[++
i
]);

786 i‡(
c⁄fig
.
pùñöe
 <= 0) config.pipeline=1;

787 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-r")) {

788 i‡(
œ°¨g
Ë
övÆid
;

789 
c⁄fig
.
øndomkeys
 = 1;

790 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 
	`©oi
(
¨gv
[++
i
]);

791 i‡(
c⁄fig
.
øndomkeys_key•a˚Àn
 < 0)

792 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 0;

793 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-q")) {

794 
c⁄fig
.
quõt
 = 1;

795 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--csv")) {

796 
c⁄fig
.
csv
 = 1;

797 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-l")) {

798 
c⁄fig
.
lo›
 = 1;

799 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-I")) {

800 
c⁄fig
.
idÀmode
 = 1;

801 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-e")) {

802 
c⁄fig
.
showîr‹s
 = 1;

803 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-t")) {

804 i‡(
œ°¨g
Ë
övÆid
;

810 
c⁄fig
.
ã°s
 = 
	`sd¢ew
(",");

811 
c⁄fig
.
ã°s
 = 
	`sdsˇt
(c⁄fig.ã°s,(*)
¨gv
[++
i
]);

812 
c⁄fig
.
ã°s
 = 
	`sdsˇt
(config.tests,",");

813 
	`sd°ﬁowî
(
c⁄fig
.
ã°s
);

814 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--dbnum")) {

815 i‡(
œ°¨g
Ë
övÆid
;

816 
c⁄fig
.
dbnum
 = 
	`©oi
(
¨gv
[++
i
]);

817 
c⁄fig
.
dbnum°r
 = 
	`sds‰oml⁄gl⁄g
(c⁄fig.
dbnum
);

818 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-T")) {

819 i‡(
œ°¨g
Ë
övÆid
;

820 
c⁄fig
.
thªads_cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

821 } i‡(!
	`°rcmp
(
¨gv
[
i
],"-m")) {

822 
c⁄fig
.
¥Ÿocﬁ
 = 
TEST_CMD_PROTOCOL_MEMCACHE
;

823 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--noinline")) {

824 
c⁄fig
.
noölöe
 = 1;

825 } i‡(!
	`°rcmp
(
¨gv
[
i
],"--help")) {

826 
exô_°©us
 = 0;

827 
ußge
;

832 i‡(
¨gv
[
i
][0] ='-'Ë
övÆid
;

833  
i
;

837  
i
;

839 
övÆid
:

840 
	`¥ötf
("InvÆid o±i⁄ \"%s\" o∏›ti⁄árgumíàmissög\n\n",
¨gv
[
i
]);

842 
ußge
:

843 
	`¥ötf
(

888 
	`exô
(
exô_°©us
);

889 
	}
}

891 
	$showThroughput
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
) {

892 
	`UNUSED
(
evítLo›
);

893 
	`UNUSED
(
id
);

894 
	`UNUSED
(
˛õ¡D©a
);

896 
	`upd©eBíchm¨kSèts
();

898 i‡(
c⁄fig
.
live˛õ¡s
 == 0) {

899 
	`Ârötf
(
°dîr
,"All clients disconnected...áborting.\n");

900 
	`exô
(1);

902 i‡(
c⁄fig
.
csv
)  250;

903 i‡(
c⁄fig
.
idÀmode
 == 1) {

904 
	`¥ötf
("˛õ¡s: %d\r", 
c⁄fig
.
live˛õ¡s
);

905 
	`fÊush
(
°dout
);

908 
dt
 = ()(
	`dm£c_now
()-
c⁄fig
.
°¨t
)/1000.0;

909 
Ωs
 = ()
c⁄fig
.
ªque°s_föished
/
dt
;

910 
	`¥ötf
("%s: %.2f\r", 
c⁄fig
.
tôÀ
, 
Ωs
);

911 
	`fÊush
(
°dout
);

913 
	}
}

917 
	$ã°_is_£À˘ed
(*
«me
) {

918 
buf
[256];

919 
l
 = 
	`°æí
(
«me
);

921 i‡(
c⁄fig
.
ã°s
 =
NULL
)  1;

922 
buf
[0] = ',';

923 
	`mem˝y
(
buf
+1,
«me
,
l
);

924 
buf
[
l
+1] = ',';

925 
buf
[
l
+2] = '\0';

926  
	`°r°r
(
c⁄fig
.
ã°s
,
buf
Ë!
NULL
;

927 
	}
}

929 
	$ã°_ªdis
(
¨gc
, c⁄° **
¨gv
)

931 
i
;

932 *
d©a
, *
cmd
;

933 
Àn
;

936 i‡(
¨gc
) {

937 
sds
 
tôÀ
 = 
	`sd¢ew
(
¨gv
[0]);

938 
i
 = 1; i < 
¨gc
; i++) {

939 
tôÀ
 = 
	`sdsˇéí
(title, " ", 1);

940 
tôÀ
 = 
	`sdsˇéí
—ôÀ, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

944 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

945 
	`bíchm¨k
(
tôÀ
,
cmd
,
Àn
);

946 
	`‰ì
(
cmd
);

947 } 
c⁄fig
.
lo›
);

953 
d©a
 = 
	`mÆloc
(
c⁄fig
.
d©asize
+1);

955 
	`mem£t
(
d©a
,'x',
c⁄fig
.
d©asize
);

956 
d©a
[
c⁄fig
.
d©asize
] = '\0';

958 i‡(!
c⁄fig
.
noölöe
 && (
	`ã°_is_£À˘ed
("ping_inline") ||Åest_is_selected("ping")))

959 
	`bíchm¨k
("PING_INLINE","PING\r\n",6);

961 i‡(
	`ã°_is_£À˘ed
("ping_mbulk") ||Åest_is_selected("ping")) {

962 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"PING");

963 
	`bíchm¨k
("PING_BULK",
cmd
,
Àn
);

964 
	`‰ì
(
cmd
);

967 i‡(
	`ã°_is_£À˘ed
("set")) {

968 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SET key:__ønd_öt__ %s",
d©a
);

969 
	`bíchm¨k
("SET",
cmd
,
Àn
);

970 
	`‰ì
(
cmd
);

973 i‡(
	`ã°_is_£À˘ed
("get")) {

974 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"GET key:__rand_int__");

975 
	`bíchm¨k
("GET",
cmd
,
Àn
);

976 
	`‰ì
(
cmd
);

979 i‡(
	`ã°_is_£À˘ed
("incr")) {

980 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"INCR counter:__rand_int__");

981 
	`bíchm¨k
("INCR",
cmd
,
Àn
);

982 
	`‰ì
(
cmd
);

985 i‡(
	`ã°_is_£À˘ed
("lpush")) {

986 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPUSH myli° %s",
d©a
);

987 
	`bíchm¨k
("LPUSH",
cmd
,
Àn
);

988 
	`‰ì
(
cmd
);

991 i‡(
	`ã°_is_£À˘ed
("rpush")) {

992 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"RPUSH myli° %s",
d©a
);

993 
	`bíchm¨k
("RPUSH",
cmd
,
Àn
);

994 
	`‰ì
(
cmd
);

997 i‡(
	`ã°_is_£À˘ed
("lpop")) {

998 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPOP mylist");

999 
	`bíchm¨k
("LPOP",
cmd
,
Àn
);

1000 
	`‰ì
(
cmd
);

1003 i‡(
	`ã°_is_£À˘ed
("rpop")) {

1004 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"RPOP mylist");

1005 
	`bíchm¨k
("RPOP",
cmd
,
Àn
);

1006 
	`‰ì
(
cmd
);

1009 i‡(
	`ã°_is_£À˘ed
("sadd")) {

1010 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,

1012 
	`bíchm¨k
("SADD",
cmd
,
Àn
);

1013 
	`‰ì
(
cmd
);

1016 i‡(
	`ã°_is_£À˘ed
("spop")) {

1017 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"SPOP myset");

1018 
	`bíchm¨k
("SPOP",
cmd
,
Àn
);

1019 
	`‰ì
(
cmd
);

1022 i‡(
	`ã°_is_£À˘ed
("lrange") ||

1023 
	`ã°_is_£À˘ed
("lrange_100") ||

1024 
	`ã°_is_£À˘ed
("lrange_300") ||

1025 
	`ã°_is_£À˘ed
("lrange_500") ||

1026 
	`ã°_is_£À˘ed
("lrange_600"))

1028 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LPUSH myli° %s",
d©a
);

1029 
	`bíchm¨k
("LPUSH (√ededÅÿbíchm¨k LRANGE)",
cmd
,
Àn
);

1030 
	`‰ì
(
cmd
);

1033 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_100")) {

1034 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 99");

1035 
	`bíchm¨k
("LRANGE_100 (fú° 100ÉÀmíts)",
cmd
,
Àn
);

1036 
	`‰ì
(
cmd
);

1039 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_300")) {

1040 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 299");

1041 
	`bíchm¨k
("LRANGE_300 (fú° 300ÉÀmíts)",
cmd
,
Àn
);

1042 
	`‰ì
(
cmd
);

1045 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_500")) {

1046 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 449");

1047 
	`bíchm¨k
("LRANGE_500 (fú° 450ÉÀmíts)",
cmd
,
Àn
);

1048 
	`‰ì
(
cmd
);

1051 i‡(
	`ã°_is_£À˘ed
("lrange") ||Åest_is_selected("lrange_600")) {

1052 
Àn
 = 
	`ªdisF‹m©Comm™d
(&
cmd
,"LRANGE mylist 0 599");

1053 
	`bíchm¨k
("LRANGE_600 (fú° 600ÉÀmíts)",
cmd
,
Àn
);

1054 
	`‰ì
(
cmd
);

1057 i‡(
	`ã°_is_£À˘ed
("mset")) {

1058 c⁄° *
¨gv
[21];

1059 
¨gv
[0] = "MSET";

1060 
i
 = 1; i < 21; i += 2) {

1061 
¨gv
[
i
] = "key:__rand_int__";

1062 
¨gv
[
i
+1] = 
d©a
;

1064 
Àn
 = 
	`ªdisF‹m©Comm™dArgv
(&
cmd
,21,
¨gv
,
NULL
);

1065 
	`bíchm¨k
("MSET (10 keys)",
cmd
,
Àn
);

1066 
	`‰ì
(
cmd
);

1069 i‡(!
c⁄fig
.
csv
Ë
	`¥ötf
("\n");

1070 } 
c⁄fig
.
lo›
);

1072  
VRT_OK
;

1073 
	}
}

1075 
	$ã°_memˇched
(
¨gc
, c⁄° **
¨gv
)

1077 
i
;

1078 *
d©a
, *
cmd
;

1079 
Àn
;

1082 i‡(
¨gc
) {

1083 
sds
 
tôÀ
 = 
	`sd¢ew
(
¨gv
[0]);

1084 
i
 = 1; i < 
¨gc
; i++) {

1085 
tôÀ
 = 
	`sdsˇéí
(title, " ", 1);

1086 
tôÀ
 = 
	`sdsˇéí
—ôÀ, (*)
¨gv
[
i
], 
	`°æí
(argv[i]));

1090 
Àn
 = 
	`memˇchedF‹m©Comm™dArgv
(&
cmd
,
¨gc
,
¨gv
,
NULL
);

1091 i‡(
Àn
 < 0) {

1095 
	`bíchm¨k
(
tôÀ
,
cmd
,
Àn
);

1096 
	`‰ì
(
cmd
);

1097 } 
c⁄fig
.
lo›
);

1103 
d©a
 = 
	`mÆloc
(
c⁄fig
.
d©asize
+1);

1105 
	`mem£t
(
d©a
,'x',
c⁄fig
.
d©asize
);

1106 
d©a
[
c⁄fig
.
d©asize
] = '\0';

1108 i‡(
	`ã°_is_£À˘ed
("set")) {

1109 
Àn
 = 
	`memˇchedF‹m©Comm™d
(&
cmd
,"£àkey:__ønd_öt__ 0 0 %d %s", 
c⁄fig
.
d©asize
, 
d©a
);

1111 
	`bíchm¨k
("SET",
cmd
,
Àn
);

1112 
	`‰ì
(
cmd
);

1115 i‡(
	`ã°_is_£À˘ed
("get")) {

1116 
Àn
 = 
	`memˇchedF‹m©Comm™d
(&
cmd
,"get key:__rand_int__");

1117 
	`bíchm¨k
("GET",
cmd
,
Àn
);

1118 
	`‰ì
(
cmd
);

1121 i‡(!
c⁄fig
.
csv
Ë
	`¥ötf
("\n");

1122 } 
c⁄fig
.
lo›
);

1124  
VRT_OK
;

1125 
	}
}

1127 
	$maö
(
¨gc
, c⁄° **
¨gv
) {

1128 
i
;

1130 
bíchm¨k_˛õ¡
 
c
;

1132 
	`§™dom
(
	`time
(
NULL
));

1133 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

1134 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

1136 
c⁄fig
.
num˛õ¡s
 = 50;

1137 
c⁄fig
.
ªque°s
 = 100000;

1138 
c⁄fig
.
live˛õ¡s
 = 0;

1139 
c⁄fig
.
kì∑live
 = 1;

1140 
c⁄fig
.
d©asize
 = 3;

1141 
c⁄fig
.
pùñöe
 = 1;

1142 
c⁄fig
.
showîr‹s
 = 0;

1143 
c⁄fig
.
øndomkeys
 = 0;

1144 
c⁄fig
.
øndomkeys_key•a˚Àn
 = 0;

1145 
c⁄fig
.
quõt
 = 0;

1146 
c⁄fig
.
csv
 = 0;

1147 
c⁄fig
.
lo›
 = 0;

1148 
c⁄fig
.
idÀmode
 = 0;

1149 
c⁄fig
.
œãncy
 = 
NULL
;

1150 
c⁄fig
.
ho°ù
 = "127.0.0.1";

1151 
c⁄fig
.
ho°p‹t
 = 6379;

1152 
c⁄fig
.
ho°sockë
 = 
NULL
;

1153 
c⁄fig
.
ã°s
 = 
NULL
;

1154 
c⁄fig
.
dbnum
 = 0;

1155 
c⁄fig
.
auth
 = 
NULL
;

1156 
c⁄fig
.
thªads_cou¡
 = 1;

1157 
c⁄fig
.
¥Ÿocﬁ
 = 
TEST_CMD_PROTOCOL_REDIS
;

1158 
c⁄fig
.
noölöe
 = 0;

1160 
i
 = 
	`∑r£O±i⁄s
(
¨gc
,
¨gv
);

1161 
¨gc
 -
i
;

1162 
¨gv
 +
i
;

1164 
c⁄fig
.
œãncy
 = 
	`mÆloc
(()*c⁄fig.
ªque°s
);

1166 i‡(
c⁄fig
.
kì∑live
 == 0) {

1167 
	`¥ötf
("WARNING: keepalive disabled, youÖrobablyÇeed 'echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse' for Linuxánd 'sudo sysctl -wÇet.inet.tcp.msl=1000' for Mac OS X in orderÅo useáÜot of clients/requests\n");

1178 i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_REDIS
) {

1179 
	`ã°_ªdis
(
¨gc
, 
¨gv
);

1180 } i‡(
c⁄fig
.
¥Ÿocﬁ
 =
TEST_CMD_PROTOCOL_MEMCACHE
) {

1181 
	`ã°_memˇched
(
¨gc
, 
¨gv
);

1183 
	`NOT_REACHED
();

1187 
	}
}

	@tests/vrt_check_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<±hªad.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ut¢ame.h
>

12 
	~<húedis.h
>

13 
	~<async.h
>

14 
	~<ad≠ãrs/´.h
>

16 
	~<dhashkô.h
>

17 
	~<dli°.h
>

18 
	~<dmtqueue.h
>

19 
	~<dlog.h
>

21 
	~<vπ_utû.h
>

22 
	~<vπ_public.h
>

23 
	~<vøbã°.h
>

24 
	~<vπ_¥odu˚_d©a.h
>

25 
	~<vπ_di•©ch_d©a.h
>

26 
	~<vπ_backíd.h
>

27 
	~<vπ_check_d©a.h
>

29 
	#CHECK_DATA_FLAG_NONE
 (1<<0)

	)

30 
	#CHECK_DATA_FLAG_MASTER
 (1<<1)

	)

31 
	#CHECK_DATA_FLAG_SLAVE
 (1<<2)

	)

33 
	#CHECK_UNIT_STATE_NULL
 0

	)

34 
	#CHECK_UNIT_STATE_GET_EXPIRE
 1

	)

35 
	#CHECK_UNIT_STATE_GET_TYPE
 2

	)

36 
	#CHECK_UNIT_STATE_GET_VALUE
 3

	)

38 
	scheck_d©a_thªad
 {

39 
	mid
;

40 
±hªad_t
 
	mthªad_id
;

42 
´EvítLo›
 *
	mñ
;

43 
	mhz
;

44 
	m¸⁄lo›s
;

46 
d¨øy
 *
	mabgs
;

47 
	msˇn_group_idx
;

48 
d¨øy
 *
	msˇn_£rvîs
;

49 
	msˇn_föished_cou¡
;

50 
	mcurs‹
;

51 
dli°
 *
	mcheck_unôs
;

53 
	mcheck_begö_time
;

54 
	msˇn_keys_cou¡
;

55 } 
	tcheck_d©a_thªad
;

57 
	scheck_unô
 {

58 
check_d©a_thªad
 *
	mcdt
;

60 
dli°Node
 *
	m ode
;

62 
sds
 
	mkey
;

64 
	mkey_≥rsi°
;

65 
	mmö_âl
, 
	mmax_âl_g≠
;

67 
	mkey_ty≥
;

68 
	m°©e
;

70 
d¨øy
 
	m£rvîs
;

71 
d¨øy
 
	mª∂ys
;

73 
	m£rvîs_cou¡
;

74 
	mª∂ys_cou¡
;

75 
	mnŸ_exi°_cou¡
;

76 } 
	tcheck_unô
;

78 
	sd©a_checkî
 {

79 
±hªad_t
 
	mthªad_id
;

81 
´EvítLo›
 *
	mñ
;

82 
	mhz
;

83 
	m¸⁄lo›s
;

85 
sds
 
	mã°_èrgë_groups
;

87 
	mÊags
;

88 
sds
 
	mcheckî
;

89 
c⁄n_c⁄ãxt
 *
	mma°î
;

91 
	mcheck_begö_time
;

92 } 
	td©a_checkî
;

94 
d©a_checkî
 
	gdc
;

98 
	gœ°_check_begö_time
;

100 
d¨øy
 *
	gcdts
 = 
NULL
;

102 
check_unô
 *
	$check_unô_¸óã
()

104 
check_unô
 *
cunô
;

106 
cunô
 = 
	`mÆloc
((*cunit));

107 i‡(
cunô
 =
NULL
) {

108  
NULL
;

111 
cunô
->
cdt
 = 
NULL
;

113 
cunô
->
 ode
 = 
NULL
;

115 
cunô
->
key
 = 
NULL
;

116 
cunô
->
key_≥rsi°
 = 0;

117 
cunô
->
mö_âl
 = 0;

118 
cunô
->
max_âl_g≠
 = 0;

119 
cunô
->
key_ty≥
 = -1;

120 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_NULL
;

121 
	`d¨øy_öô
(&
cunô
->
£rvîs
, 2, (
abã°_£rvî
*));

122 
	`d¨øy_öô
(&
cunô
->
ª∂ys
, 2, (
ªdisRïly
*));

124 
cunô
->
£rvîs_cou¡
 = 0;

125 
cunô
->
ª∂ys_cou¡
 = 0;

126 
cunô
->
nŸ_exi°_cou¡
 = 0;

128  
cunô
;

129 
	}
}

131 
	$check_unô_de°roy
(
check_unô
 *
cunô
)

133 i‡(
cunô
->
cdt
 !
NULL
 && cunô->
 ode
 != NULL) {

134 
	`dli°DñNode
(
cunô
->
cdt
->
check_unôs
,cunô->
 ode
);

135 
cunô
->
 ode
 = 
NULL
;

138 i‡(
cunô
->
key
 !
NULL
) {

139 
	`sds‰ì
(
cunô
->
key
);

140 
cunô
->
key
 = 
NULL
;

143 
	`d¨øy_n
(&
cunô
->
£rvîs
) > 0) {

144 
	`d¨øy_p›
(&
cunô
->
£rvîs
);

146 
	`d¨øy_deöô
(&
cunô
->
£rvîs
);

148 
	`d¨øy_n
(&
cunô
->
ª∂ys
) > 0) {

149 
ªdisRïly
 **
ª∂y
 = 
	`d¨øy_p›
(&
cunô
->
ª∂ys
);

150 
	`‰ìRïlyObje˘
(*
ª∂y
);

152 
	`d¨øy_deöô
(&
cunô
->
ª∂ys
);

154 
	`‰ì
(
cunô
);

155 
	}
}

157 
	$check_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

159 
cc
->
˘x
 = 
NULL
;

160 
cc
->
a˘x
 = 
NULL
;

162 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

163 i‡(
cc
->
a˘x
 =
NULL
) {

164  
VRT_ERROR
;

167  
VRT_OK
;

168 
	}
}

170 
	$check_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

172 i‡(
cc
->
˘x
) {

173 
	`ªdisFªe
(
cc
->
˘x
);

174 
cc
->
˘x
 =
NULL
;

177 i‡(
cc
->
a˘x
) {

178 
cc
->
a˘x
->
ev
.
˛ónup
 = 
NULL
;

179 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

180 
cc
->
a˘x
 =
NULL
;

182 
	}
}

184 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

185 
check_d©a_thªad
 *
cdt
 = 
c
->
d©a
;

186 i‡(
°©us
 !
REDIS_OK
) {

187 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

193 
	}
}

195 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

196 
check_d©a_thªad
 *
cdt
 = 
c
->
d©a
;

197 i‡(
°©us
 !
REDIS_OK
) {

198 
	`ã°_log_out
("Eº‹: %s\n", 
c
->
îr°r
);

205 
	}
}

207 
	$s‹t_ª∂ys_if_√eded
(
check_unô
 *
cunô
)

209 
°ï
 = 0, 
idx_cmp
 = 0;

211 i‡(
cunô
->
key_ty≥
 =
REDIS_SET
) {

212 
°ï
 = 1;

213 } i‡(
cunô
->
key_ty≥
 =
REDIS_HASH
) {

214 
°ï
 = 2;

217 i‡(
°ï
 > 0) {

218 
i
;

219 
ªdisRïly
 **
ª∂y
;

220 
i
 = 0; i < 
	`d¨øy_n
(&
cunô
->
ª∂ys
); i ++) {

221 
ª∂y
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 
i
);

222 i‡((*
ª∂y
)->
ty≥
 !
REDIS_REPLY_ARRAY
)

224 
	`s‹t_¨øy_by_°ï
((*
ª∂y
)->
ñemít
, (*ª∂y)->
ñemíts
,

225 
°ï
, 
idx_cmp
, 
ª∂y_°rög_bö¨y_com∑ª
);

229  
VRT_OK
;

230 
	}
}

234 
	$check_ª∂ys_if_ßme
(
check_unô
 *
cunô
)

236 
j
;

237 
ªdisRïly
 **
ª∂yb
, **
ª∂y
;

239 
	`s‹t_ª∂ys_if_√eded
(
cunô
);

241 
ª∂yb
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,0);

243 
j
 = 1; j < 
cunô
->
ª∂ys_cou¡
 ; j ++) {

244 
ª∂y
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,
j
);

245 i‡(
	`check_two_ª∂ys_if_ßme
(*
ª∂yb
, *
ª∂y
)) {

251 
	}
}

253 
	#TTL_MISTAKE_CAN_BE_ACCEPT
 3

	)

254 
	$check_d©a_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

255 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

256 
ªdisRïly
 *
ª∂y_˛⁄e
, **
ñem
;

257 
check_unô
 *
cunô
 = 
¥ivd©a
;

258 
check_d©a_thªad
 *
cdt
 = 
cunô
->cdt;

259 
c⁄n_c⁄ãxt
 *
cc
;

260 
vÆue
;

261 *
îrmsg
;

262 
j
;

264 i‡(
ª∂y
 =
NULL
) ;

266 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_EXPIRE
) {

267 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

268 
îrmsg
 = "ttl commandÑeplyÅype isÇot integer";

269 
îr‹
;

272 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

273 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

274 *
ñem
 = 
ª∂y_˛⁄e
;

275 
cunô
->
ª∂ys_cou¡
 ++;

277 i‡(
cunô
->
ª∂ys_cou¡
 >cunô->
£rvîs_cou¡
) {

278 *
¨gv
[2];

279 
size_t
 
¨gvÀn
[2];

280 
mö
, 
max
;

281 
≥rsi°
;

283 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 0);

284 
ª∂y_ñem
 = *
ñem
;

285 i‡(
ª∂y_ñem
->
öãgî
 == -1) {

286 
≥rsi°
 = 1;

287 } i‡(
ª∂y_ñem
->
öãgî
 == -2) {

288 
cunô
->
nŸ_exi°_cou¡
 ++;

289 
mö
 = 
max
 = 0;

290 } i‡(
ª∂y_ñem
->
öãgî
 < -2) {

291 
îrmsg
 = "ttl commandÑeply integer isÜessÅhan -2";

292 
îr‹
;

294 
mö
 = 
max
 = 
ª∂y_ñem
->
öãgî
;

297 
j
 = 1; j < 
	`d¨øy_n
(&
cunô
->
ª∂ys
); j ++) {

298 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
, 
j
);

299 
ª∂y_ñem
 = *
ñem
;

300 i‡(
≥rsi°
 && 
ª∂y_ñem
->
öãgî
 != -1) {

301 
îrmsg
 = "key in some server isÖersist, but othersáreÇot";

302 
îr‹
;

305 i‡(
ª∂y_ñem
->
öãgî
 == -1) {

306 i‡(
≥rsi°
 != 1) {

307 
îrmsg
 = "key in some server isÖersist, but othersáreÇot";

308 
îr‹
;

310 } i‡(
ª∂y_ñem
->
öãgî
 == -2) {

311 
cunô
->
nŸ_exi°_cou¡
 ++;

312 i‡(
mö
 > 0) min = 0;

313 } i‡(
ª∂y_ñem
->
öãgî
 < -2) {

314 
îrmsg
 = "ttl commandÑeply integer isÜessÅhan -2";

315 
îr‹
;

317 i‡(
ª∂y_ñem
->
öãgî
 < 
mö
) min =Ñeply_elem->integer;

318 i‡(
ª∂y_ñem
->
öãgî
 > 
max
) max =Ñeply_elem->integer;

322 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

324 
d⁄e
;

327 i‡(
≥rsi°
) {

328 
cunô
->
key_≥rsi°
 = 1;

330 
cunô
->
mö_âl
 = 
mö
;

331 
cunô
->
max_âl_g≠
 = 
max
-
mö
;

332 i‡(
cunô
->
max_âl_g≠
 > 
TTL_MISTAKE_CAN_BE_ACCEPT
) {

333 
îrmsg
 = "ttl mistake isÅoo big between groups";

334 
îr‹
;

339 
¨gv
[0] = "type";

340 
¨gvÀn
[0] = 4;

341 
¨gv
[1] = 
cunô
->
key
;

342 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

343 
j
 = 0; j < 
	`d¨øy_n
(&
cunô
->
£rvîs
); j ++) {

344 
abã°_£rvî
 **
abs
 = 
	`d¨øy_gë
(&
cunô
->
£rvîs
,
j
);

345 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

347 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

348 
cunô
, 2, 
¨gv
, 
¨gvÀn
);

351 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_GET_TYPE
;

352 
√xt_°ï
;

358 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_TYPE
) {

359 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STATUS
) {

360 
îrmsg
 = "type commandÑeplyÅype isÇot status";

361 
îr‹
;

364 i‡(!
	`°rcmp
(
ª∂y
->
°r
, "none")) {

366 
cunô
->
nŸ_exi°_cou¡
 ++;

368 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

369 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

370 *
ñem
 = 
ª∂y_˛⁄e
;

371 
cunô
->
ª∂ys_cou¡
 ++;

374 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

376 
d⁄e
;

377 } i‡(
cunô
->
ª∂ys_cou¡
 >(cunô->
£rvîs_cou¡
-cunô->
nŸ_exi°_cou¡
)) {

378 
¨gc
;

379 **
¨gv
;

380 
size_t
 *
¨gvÀn
;

382 i‡(
cunô
->
nŸ_exi°_cou¡
 > 0 && cunô->
key_≥rsi°
) {

383 
îrmsg
 = "key isÖersist, butÇotÉxist in some servers";

384 
îr‹
;

387 i‡(
	`check_ª∂ys_if_ßme
(
cunô
) != 1) {

388 
îrmsg
 = "type commandÑeplysáreÇot same";

389 
îr‹
;

392 
ñem
 = 
	`d¨øy_gë
(&
cunô
->
ª∂ys
,0);

393 i‡(!
	`°rcmp
((*
ñem
)->
°r
,"string")) {

394 
cunô
->
key_ty≥
 = 
REDIS_STRING
;

396 
¨gc
 = 2;

397 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

398 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

400 
¨gv
[0] = "get";

401 
¨gvÀn
[0] = 3;

402 
¨gv
[1] = 
cunô
->
key
;

403 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

404 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"list")) {

405 
cunô
->
key_ty≥
 = 
REDIS_LIST
;

407 
¨gc
 = 4;

408 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

409 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

411 
¨gv
[0] = "lrange";

412 
¨gvÀn
[0] = 6;

413 
¨gv
[1] = 
cunô
->
key
;

414 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

415 
¨gv
[2] = "0";

416 
¨gvÀn
[2] = 1;

417 
¨gv
[3] = "-1";

418 
¨gvÀn
[3] = 2;

419 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"set")) {

420 
cunô
->
key_ty≥
 = 
REDIS_SET
;

422 
¨gc
 = 2;

423 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

424 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

426 
¨gv
[0] = "smembers";

427 
¨gvÀn
[0] = 8;

428 
¨gv
[1] = 
cunô
->
key
;

429 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

430 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"zset")) {

431 
cunô
->
key_ty≥
 = 
REDIS_ZSET
;

433 
¨gc
 = 4;

434 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

435 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

437 
¨gv
[0] = "zrange";

438 
¨gvÀn
[0] = 6;

439 
¨gv
[1] = 
cunô
->
key
;

440 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

441 
¨gv
[2] = "0";

442 
¨gvÀn
[2] = 1;

443 
¨gv
[3] = "-1";

444 
¨gvÀn
[3] = 2;

445 } i‡(!
	`°rcmp
((*
ñem
)->
°r
,"hash")) {

446 
cunô
->
key_ty≥
 = 
REDIS_HASH
;

448 
¨gc
 = 2;

449 
¨gv
 = 
	`mÆloc
(
¨gc
*(*));

450 
¨gvÀn
 = 
	`mÆloc
(
¨gc
*(
size_t
));

452 
¨gv
[0] = "hgetall";

453 
¨gvÀn
[0] = 7;

454 
¨gv
[1] = 
cunô
->
key
;

455 
¨gvÀn
[1] = 
	`sd¶í
(
cunô
->
key
);

457 
îrmsg
 = "not supported keyÅype";

458 
îr‹
;

462 
j
 = 0; j < 
	`d¨øy_n
(&
cunô
->
£rvîs
); j ++) {

463 
abã°_£rvî
 **
abs
 = 
	`d¨øy_gë
(&
cunô
->
£rvîs
,
j
);

464 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

466 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

467 
cunô
, 
¨gc
, 
¨gv
, 
¨gvÀn
);

469 
	`‰ì
(
¨gv
);

470 
	`‰ì
(
¨gvÀn
);

472 
cunô
->
°©e
 = 
CHECK_UNIT_STATE_GET_VALUE
;

473 
√xt_°ï
;

479 i‡(
cunô
->
°©e
 =
CHECK_UNIT_STATE_GET_VALUE
) {

480 
nŸ_exi°
 = 0;

481 i‡(
cunô
->
key_ty≥
 =
REDIS_STRING
) {

482 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_NIL
) {

483 
nŸ_exi°
 = 1;

484 } i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

485 
îrmsg
 = "get commandÑeplyÅype isÇot string";

486 
îr‹
;

488 } i‡(
cunô
->
key_ty≥
 =
REDIS_LIST
) {

489 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

490 
îrmsg
 = "lrange commandÑeplyÅype isÇotárray";

491 
îr‹
;

493 i‡(
ª∂y
->
ñemíts
 == 0) {

494 
nŸ_exi°
 = 1;

496 } i‡(
cunô
->
key_ty≥
 =
REDIS_SET
) {

497 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

498 
îrmsg
 = "smembers commandÑeplyÅype isÇotárray";

499 
îr‹
;

501 i‡(
ª∂y
->
ñemíts
 == 0) {

502 
nŸ_exi°
 = 1;

504 } i‡(
cunô
->
key_ty≥
 =
REDIS_ZSET
) {

505 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

506 
îrmsg
 = "zrange commandÑeplyÅype isÇotárray";

507 
îr‹
;

509 i‡(
ª∂y
->
ñemíts
 == 0) {

510 
nŸ_exi°
 = 1;

512 } i‡(
cunô
->
key_ty≥
 =
REDIS_HASH
) {

513 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

514 
îrmsg
 = "hgetall commandÑeplyÅype isÇotárray";

515 
îr‹
;

517 i‡(
ª∂y
->
ñemíts
 == 0) {

518 
nŸ_exi°
 = 1;

521 
îrmsg
 = "not supported keyÅype";

522 
îr‹
;

525 i‡(
nŸ_exi°
) {

526 
cunô
->
nŸ_exi°_cou¡
 ++;

528 
ª∂y_˛⁄e
 = 
	`°ól_húedis_ªdi§ïly
(
ª∂y
);

529 
ñem
 = 
	`d¨øy_push
(&
cunô
->
ª∂ys
);

530 *
ñem
 = 
ª∂y_˛⁄e
;

531 
cunô
->
ª∂ys_cou¡
 ++;

534 i‡(
cunô
->
nŸ_exi°_cou¡
 >cunô->
£rvîs_cou¡
) {

536 
d⁄e
;

537 } i‡(
cunô
->
ª∂ys_cou¡
 >(cunô->
£rvîs_cou¡
-cunô->
nŸ_exi°_cou¡
)) {

538 i‡(
cunô
->
nŸ_exi°_cou¡
 > 0 && cunô->
key_≥rsi°
) {

539 
îrmsg
 = "key isÖersist, butÇotÉxist in some servers";

540 
îr‹
;

543 i‡(
	`check_ª∂ys_if_ßme
(
cunô
) != 1) {

544 
îrmsg
 = "values forÑeplyáreÇot same";

545 
îr‹
;

548 
d⁄e
;

554 
d⁄e
:

556 
	`check_unô_de°roy
(
cunô
);

560 
√xt_°ï
:

562 
cunô
->
ª∂ys_cou¡
 = 0;

563 
cunô
->
nŸ_exi°_cou¡
 = 0;

564 
	`d¨øy_n
(&
cunô
->
ª∂ys
) > 0) {

565 
ñem
 = 
	`d¨øy_p›
(&
cunô
->
ª∂ys
);

566 
	`‰ìRïlyObje˘
(*
ñem
);

571 
îr‹
:

573 
	`log_hexdump
(
LOG_ERR
,
cunô
->
key
,
	`sd¶í
(cunit->key),

575 
îrmsg
,

576 
cdt
->
sˇn_group_idx
,

577 
	`sd¶í
(
cunô
->
key
),
	`gë_key_ty≥_°rög
(cunô->
key_ty≥
));

579 
	`check_unô_de°roy
(
cunô
);

580 
	}
}

582 
	$°¨t_check_d©a
(*
key
, 
size_t
 
keyÀn
, 
check_d©a_thªad
 *
cdt
)

584 
check_unô
 *
cu
 = 
	`check_unô_¸óã
();

585 
j
;

587 
cu
->
cdt
 = cdt;

588 
cu
->
key
 = 
	`sd¢ewÀn
(key,
keyÀn
);

589 
	`dli°Push
(
cdt
->
check_unôs
,
cu
);

590 
cu
->
 ode
 = 
	`dli°La°
(
cdt
->
check_unôs
);

592 
j
 = 0; j < 
	`d¨øy_n
(
cdt
->
abgs
); j ++) {

593 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
j
);

594 
abã°_£rvî
 *
abs
 = 
abg
->
	`gë_backíd_£rvî
◊bg,
key
,
keyÀn
);

595 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(&
cu
->
£rvîs
);

596 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
, 0);

597 *
¨gv
[2];

598 
size_t
 
¨gvÀn
[2];

600 *
ñem
 = 
abs
;

601 
cu
->
£rvîs_cou¡
 ++;

604 
¨gv
[0] = "ttl";

605 
¨gvÀn
[0] = 3;

606 
¨gv
[1] = 
key
;

607 
¨gvÀn
[1] = 
keyÀn
;

608 
	`ªdisAsyncComm™dArgv
(
cc
->
a˘x
, 
check_d©a_ˇŒback
,

609 
cu
, 2, 
¨gv
, 
¨gvÀn
);

611 
cu
->
°©e
 = 
CHECK_UNIT_STATE_GET_EXPIRE
;

613  
VRT_OK
;

614 
	}
}

616 
	$sˇn_f‹_check_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

617 
ªdisRïly
 *
ª∂y
 = 
r
, *
ª∂y_sub
, *
ª∂y_ñem
;

618 
abã°_£rvî
 *
abs
 = 
¥ivd©a
;

619 
check_d©a_thªad
 *
cdt
 = 
abs
->
d©a
;

620 
c⁄n_c⁄ãxt
 *
cc
;

621 
vÆue
;

622 
size_t
 
k
;

624 i‡(
ª∂y
 =
NULL
) ;

627 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

631 i‡(
ª∂y
->
ñemíts
 != 2) {

635 
ª∂y_sub
 = 
ª∂y
->
ñemít
[0];

636 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

637 
	`°rög2Œ
(
ª∂y_sub
->
°r
,ª∂y_sub->
Àn
,&
vÆue
) != 1) {

641 
cdt
->
curs‹
 = 
vÆue
;

643 
ª∂y_sub
 = 
ª∂y
->
ñemít
[1];

644 i‡(
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

648 
k
 = 0; k < 
ª∂y_sub
->
ñemíts
; k ++) {

649 
ª∂y_ñem
 = 
ª∂y_sub
->
ñemít
[
k
];

650 i‡(
ª∂y_ñem
->
ty≥
 !
REDIS_REPLY_STRING
) {

654 
	`°¨t_check_d©a
(
ª∂y_ñem
->
°r
,ª∂y_ñem->
Àn
,
cdt
);

657 
cdt
->
sˇn_keys_cou¡
 +
ª∂y_sub
->
ñemíts
;

659 i‡(
cdt
->
curs‹
 == 0) {

660 
cdt
->
sˇn_föished_cou¡
 ++;

662 
	}
}

664 
	gcheck_d©a_thªads_föished_cou¡
 = 0;

665 
	$⁄e_check_d©a_thªad_föished
()

667 
	`upd©e_°©e_add
(
check_d©a_thªads_föished_cou¡
,1);

668 
	}
}

670 
	$Æl_check_d©a_thªads_föished
()

672 
föished_cou¡
;

673 
	`upd©e_°©e_gë
(
check_d©a_thªads_föished_cou¡
,&
föished_cou¡
);

675 i‡(
föished_cou¡
 >
	`d¨øy_n
(
cdts
)) {

680 
	}
}

682 
	$check_d©a_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

684 
check_d©a_thªad
 *
cdt
 = 
˛õ¡D©a
;

686 
	`ASSERT
(
evítLo›
 =
cdt
->
ñ
);

688 i‡(
cdt
->
sˇn_föished_cou¡
 >
	`d¨øy_n
(cdt->
sˇn_£rvîs
)) {

689 i‡(
	`dli°Lígth
(
cdt
->
check_unôs
) == 0) {

690 
	`´St›
(
cdt
->
ñ
);

691 
	`⁄e_check_d©a_thªad_föished
();

692 
	`log_debug
(
LOG_NOTICE
, "One checkÅhread finished,scaned %lld keys",

693 
cdt
->
sˇn_keys_cou¡
);

696 } i‡(
	`dli°Lígth
(
cdt
->
check_unôs
) < 3000) {

697 
abã°_group
 *
abg
;

698 
abã°_£rvî
 **
abs
;

699 *
idx
;

700 
c⁄n_c⁄ãxt
 *
cc
;

702 
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, cdt->
sˇn_group_idx
);

703 
abs
 = 
	`d¨øy_gë
(
cdt
->
sˇn_£rvîs
, cdt->
sˇn_föished_cou¡
);

704 
cc
 = 
	`d¨øy_gë
((*
abs
)->
c⁄n_c⁄ãxts
, 0);

706 
	`ªdisAsyncComm™d
(
cc
->
a˘x
, 
sˇn_f‹_check_ˇŒback
,

707 *
abs
, "sˇ¿%Œd cou¡ 1000", 
cdt
->
curs‹
);

710 
cdt
->
¸⁄lo›s
 ++;

711  1000/
cdt
->
hz
;

712 
	}
}

714 
	$check_d©a_thªad_öô
(
check_d©a_thªad
 *
cdt
, *
ã°_èrgë_groups
)

716 
i
, 
j
, 
k
;

718 
cdt
->
id
 = 0;

719 
cdt
->
thªad_id
 = 0;

720 
cdt
->
ñ
 = 
NULL
;

721 
cdt
->
hz
 = 200;

722 
cdt
->
¸⁄lo›s
 = 0;

724 
cdt
->
abgs
 = 
NULL
;

725 
cdt
->
sˇn_group_idx
 = 0;

726 
cdt
->
sˇn_£rvîs
 = 
NULL
;

727 
cdt
->
sˇn_föished_cou¡
 = 0;

728 
cdt
->
curs‹
 = 0;

729 
cdt
->
check_unôs
 = 
NULL
;

731 
cdt
->
check_begö_time
 = 0;

732 
cdt
->
sˇn_keys_cou¡
 = 0;

734 
cdt
->
ñ
 = 
	`´Cª©eEvítLo›
(200);

735 i‡(
cdt
->
ñ
 =
NULL
) {

736  
VRT_ERROR
;

739 
cdt
->
sˇn_£rvîs
 = 
	`d¨øy_¸óã
(1,(
abã°_£rvî
*));

741 
cdt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

742 i‡(
cdt
->
abgs
 =
NULL
) {

743  
VRT_ERROR
;

747 
i
 = 0; i < 
	`d¨øy_n
(
cdt
->
abgs
); i ++) {

748 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
i
);

749 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

750 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

751 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(1, (
c⁄n_c⁄ãxt
));

752 
k
 = 0; k < 1; k ++) {

753 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

754 i‡(
	`check_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

755  
VRT_ERROR
;

757 
cc
->
a˘x
->
d©a
 = 
cdt
;

758 
	`ªdisAeAâach
(
cdt
->
ñ
, 
cc
->
a˘x
);

759 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

760 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

765 i‡(
	`´Cª©eTimeEvít
(
cdt
->
ñ
, 1, 
check_d©a_thªad_¸⁄
, cdt, 
NULL
Ë=
AE_ERR
) {

766  
VRT_ERROR
;

769 
cdt
->
check_unôs
 = 
	`dli°Cª©e
();

771  
VRT_OK
;

772 
	}
}

774 
	$check_d©a_thªad_deöô
(
check_d©a_thªad
 *
cdt
)

776 i‡(
cdt
->
ñ
) {

777 
	`´DñëeEvítLo›
(
cdt
->
ñ
);

778 
cdt
->
ñ
 = 
NULL
;

781 i‡(
cdt
->
sˇn_£rvîs
) {

782 
	`d¨øy_n
(
cdt
->
sˇn_£rvîs
) > 0) {

783 
	`d¨øy_p›
(
cdt
->
sˇn_£rvîs
);

785 
	`d¨øy_de°roy
(
cdt
->
sˇn_£rvîs
);

786 
cdt
->
sˇn_£rvîs
 = 
NULL
;

789 i‡(
cdt
->
abgs
) {

790 
i
, 
j
, 
k
;

792 
i
 = 0; i < 
	`d¨øy_n
(
cdt
->
abgs
); i ++) {

793 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, 
i
);

794 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

795 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

796 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

797 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

798 
	`check_c⁄n_c⁄ãxt_deöô
(
cc
);

803 
	`abã°_groups_de°roy
(
cdt
->
abgs
);

804 
cdt
->
abgs
 = 
NULL
;

807 i‡(
cdt
->
check_unôs
) {

808 
	`dli°Lígth
(
cdt
->
check_unôs
) > 0) {

809 
check_unô
 *
cu
 = 
	`dli°P›
(
cdt
->
check_unôs
);

810 
	`check_unô_de°roy
(
cu
);

812 
	`dli°Rñó£
(
cdt
->
check_unôs
);

813 
cdt
->
check_unôs
 = 
NULL
;

815 
	}
}

817 
	gcheckög_d©a
;

818 
	$checkög_d©a_‹_nŸ
()

820 
checkög
;

822 
	`upd©e_°©e_gë
(
checkög_d©a
,&
checkög
);

824 i‡(
checkög
)  1;

826 
	}
}

828 
	gcheck_d©a_thªads_cou¡
 = 8;

829 
de°roy_check_d©a_thªads
();

834 
	$¸óã_check_d©a_thªads
()

836 
d¨øy
 *
abgs
 = 
NULL
;

837 
abã°_group
 *
abg
;

838 
groups_cou¡
;

839 
thªads_cou¡_≥r_group
;

840 
check_thªad_id
 = 0;

841 
i
, 
j
, 
k
;

843 i‡(
cdts
 !
NULL
) {

844 
	`de°roy_check_d©a_thªads
();

847 
cdts
 = 
	`d¨øy_¸óã
(2,(
check_d©a_thªad
));

848 i‡(
cdts
 =
NULL
) {

852 
abgs
 = 
	`abã°_groups_¸óã
(
dc
.
ã°_èrgë_groups
);

853 i‡(
abgs
 =
NULL
) {

857 
groups_cou¡
 = 
	`d¨øy_n
(
abgs
);

858 i‡(
groups_cou¡
 == 1) {

859 
	`abã°_groups_de°roy
(
abgs
);

863 
thªads_cou¡_≥r_group
 = 
check_d©a_thªads_cou¡
/
groups_cou¡
;

864 i‡(
thªads_cou¡_≥r_group
 <= 0) {

865 
thªads_cou¡_≥r_group
 = 1;

868 
i
 = 0; i < 
groups_cou¡
; i ++) {

869 
£rvîs_cou¡
, 
thªads_cou¡
;

870 
£rvîs_cou¡_≥r_thªad
;

871 
£rvî_idx
 = 0;

873 
thªads_cou¡
 = 
thªads_cou¡_≥r_group
;

874 
abg
 = 
	`d¨øy_gë
(
abgs
, 
i
);

875 
£rvîs_cou¡
 = 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

876 
£rvîs_cou¡_≥r_thªad
 = 
£rvîs_cou¡
/
thªads_cou¡
;

877 i‡(
£rvîs_cou¡_≥r_thªad
 == 0) {

878 
£rvîs_cou¡_≥r_thªad
 = 1;

879 
thªads_cou¡
 = 
£rvîs_cou¡
;

881 
j
 = 0; j < 
thªads_cou¡
; j ++) {

882 
abã°_£rvî
 *
abs
;

884 
check_d©a_thªad
 *
cdt
 = 
	`d¨øy_push
(
cdts
);

885 
	`check_d©a_thªad_öô
(
cdt
,
dc
.
ã°_èrgë_groups
);

886 
cdt
->
id
 = 
check_thªad_id
++;

887 
cdt
->
sˇn_group_idx
 = 
i
;

889 
abg
 = 
	`d¨øy_gë
(
cdt
->
abgs
, cdt->
id
);

891 
k
 = 0; k < 
£rvîs_cou¡_≥r_thªad
; k ++) {

892 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(
cdt
->
sˇn_£rvîs
);

893 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
£rvî_idx
++);

894 
abs
->
d©a
 = 
cdt
;

895 *
ñem
 = 
abs
;

898 i‡(
j
 =
thªads_cou¡
-1) {

899 
£rvî_idx
 < 
£rvîs_cou¡
) {

900 
abã°_£rvî
 **
ñem
 = 
	`d¨øy_push
(
cdt
->
sˇn_£rvîs
);

901 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
£rvî_idx
++);

902 
abs
->
d©a
 = 
cdt
;

903 *
ñem
 = 
abs
;

909 
	`abã°_groups_de°roy
(
abgs
);

912 
	}
}

914 
	$de°roy_check_d©a_thªads
()

916 i‡(
cdts
 !
NULL
) {

917 
	`d¨øy_n
(
cdts
) > 0) {

918 
check_d©a_thªad
 *
cdt
 = 
	`d¨øy_p›
(
cdts
);

919 
	`check_d©a_thªad_deöô
(
cdt
);

921 
	`d¨øy_de°roy
(
cdts
);

922 
cdts
 = 
NULL
;

924 
	}
}

926 *
	$check_d©a_thªad_run
(*
¨gs
)

928 
check_d©a_thªad
 *
cdt
 = 
¨gs
;

930 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

932 
	`´Maö
(
cdt
->
ñ
);

934  
NULL
;

935 
	}
}

937 
	$°¨t_check_d©a_thªads
()

939 
j
;

940 
check_d©a_thªad
 *
cdt
;

942 i‡(
cdts
 =
NULL
Ë 
VRT_ERROR
;

944 
j
 = 0; j < 
	`d¨øy_n
(
cdts
); j ++) {

945 
±hªad_©å_t
 
©å
;

947 
cdt
 = 
	`d¨øy_gë
(
cdts
, 
j
);

948 
	`±hªad_©å_öô
(&
©å
);

949 
	`±hªad_¸óã
(&
cdt
->
thªad_id
,

950 &
©å
, 
check_d©a_thªad_run
, 
cdt
);

953  
VRT_OK
;

954 
	}
}

956 
	$begö_check_d©a
()

958 
	`¸óã_check_d©a_thªads
();

959 
	`°¨t_check_d©a_thªads
();

961 
	`upd©e_°©e_£t
(
checkög_d©a
,1);

963  
VRT_OK
;

964 
	}
}

966 
	$íd_check_d©a
()

968 
	`upd©e_°©e_£t
(
check_d©a_thªads_föished_cou¡
,0);

969 
	`upd©e_°©e_£t
(
checkög_d©a
,0);

970 
	}
}

972 
	$d©a_checkî_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

974 
	`ASSERT
(
evítLo›
 =
dc
.
ñ
);

976 i‡(!
	`ã°_if_√ed_∑u£
(Ë&& 
	`vπ_£c_now
()-
œ°_ã°_begö_time
 > 
ã°_öãrvÆ
) {

977 
	`ã°_√ed_to_∑u£
();

978 
	`log_nŸi˚
("StartÖauseÅheÅest...");

981 i‡(!
	`checkög_d©a_‹_nŸ
(Ë&& 
	`ã°_if_√ed_∑u£
() &&

982 
	`Æl_thªads_∑u£d
()) {

984 
	`log_nŸi˚
("FinishedÖauseÅheÅest. Tested %lld commands, %lldÉrrorÑeply(%.2f%%).",

985 
	`gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
(),

986 
	`gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
(),

987 ()
	`gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
()/()
	`gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
()*100);

988 
	`ª£t_tŸÆ_cou¡_≥r_cy˛e
();

989 
	`¶ìp
(1);

990 
œ°_check_begö_time
 = 
	`vπ_£c_now
();

991 
	`begö_check_d©a
();

992 
	`log_nŸi˚
("Start checkingÅhe data...");

995 i‡(
	`checkög_d©a_‹_nŸ
(Ë&& 
	`Æl_check_d©a_thªads_föished
()) {

996 
	`íd_check_d©a
();

997 
	`log_nŸi˚
("Finished checkingÅhe data\n");

998 
	`ã°_ˇn_c⁄töue
();

999 
œ°_ã°_begö_time
 = 
	`vπ_£c_now
();

1002 
dc
.
¸⁄lo›s
 ++;

1003  1000/
dc
.
hz
;

1004 
	}
}

1006 
	$vπ_d©a_checkî_öô
(*
checkî
, *
ã°_èrgë_groups
)

1008 
ªt
;

1010 
dc
.
thªad_id
 = 0;

1011 
dc
.
ñ
 = 
NULL
;

1012 
dc
.
hz
 = 10;

1013 
dc
.
¸⁄lo›s
 = 0;

1014 
dc
.
ã°_èrgë_groups
 = 
NULL
;

1015 
dc
.
Êags
 = 
CHECK_DATA_FLAG_NONE
;

1016 
dc
.
checkî
 = 
NULL
;

1017 
dc
.
ma°î
 = 
NULL
;

1018 
dc
.
check_begö_time
 = 0;

1020 
dc
.
ñ
 = 
	`´Cª©eEvítLo›
(10);

1021 i‡(
dc
.
ñ
 =
NULL
) {

1022  
VRT_ERROR
;

1025 i‡(
	`´Cª©eTimeEvít
(
dc
.
ñ
, 1, 
d©a_checkî_¸⁄
, 
NULL
, NULLË=
AE_ERR
) {

1026  
VRT_ERROR
;

1029 
dc
.
ã°_èrgë_groups
 = 
	`sd¢ew
(test_target_groups);

1031 
dc
.
checkî
 = 
	`sd¢ew
(checker);

1033 i‡(!
	`°rˇ£cmp
(
checkî
,"myself")) {

1034 
dc
.
Êags
 |
CHECK_DATA_FLAG_MASTER
;

1036 
sds
 
ho°
;

1037 
p‹t
;

1038 
dc
.
Êags
 |
CHECK_DATA_FLAG_SLAVE
;

1039 
ho°
 = 
	`gë_ho°_p‹t_‰om_addªss_°rög
(
checkî
, &
p‹t
);

1040 i‡(
ho°
 =
NULL
) {

1041  
VRT_ERROR
;

1043 
dc
.
ma°î
 = 
	`mÆloc
((
c⁄n_c⁄ãxt
));

1044 
ªt
 = 
	`check_c⁄n_c⁄ãxt_öô
(
dc
.
ma°î
, 
ho°
, 
p‹t
);

1045 
	`sds‰ì
(
ho°
);

1046 i‡(
ªt
 !
VRT_OK
) {

1047  
VRT_ERROR
;

1051  
VRT_OK
;

1052 
	}
}

1054 
	$vπ_d©a_checkî_deöô
()

1056 i‡(
dc
.
ñ
) {

1057 
	`´DñëeEvítLo›
(
dc
.
ñ
);

1058 
dc
.
ñ
 = 
NULL
;

1061 i‡(
dc
.
ã°_èrgë_groups
) {

1062 
	`sds‰ì
(
dc
.
ã°_èrgë_groups
);

1063 
dc
.
ã°_èrgë_groups
 = 
NULL
;

1066 i‡(
dc
.
checkî
) {

1067 
	`sds‰ì
(
dc
.
checkî
);

1068 
dc
.
checkî
 = 
NULL
;

1071 i‡(
dc
.
ma°î
) {

1072 
	`check_c⁄n_c⁄ãxt_deöô
(
dc
.
ma°î
);

1073 
	`‰ì
(
dc
.
ma°î
);

1074 
dc
.
ma°î
 = 
NULL
;

1077 
	`de°roy_check_d©a_thªads
();

1078 
	}
}

1080 *
	$vπ_d©a_checkî_run
(*
¨gs
)

1082 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

1084 
	`´Maö
(
dc
.
ñ
);

1086  
NULL
;

1087 
	}
}

1089 
	$vπ_°¨t_d©a_checkî
()

1091 
±hªad_©å_t
 
©å
;

1092 
	`±hªad_©å_öô
(&
©å
);

1093 
	`±hªad_¸óã
(&
dc
.
thªad_id
,

1094 &
©å
, 
vπ_d©a_checkî_run
, 
NULL
);

1095  
VRT_OK
;

1096 
	}
}

1098 
	$vπ_waô_d©a_checkî
()

1100 
	`±hªad_joö
(
dc
.
thªad_id
, 
NULL
);

1102  
VRT_OK
;

1103 
	}
}

1105 
	gã°_√ed_∑u£
 = 0;

1107 
	$ã°_if_√ed_∑u£
()

1109 
√ed_∑u£
;

1111 
	`upd©e_°©e_gë
(
ã°_√ed_∑u£
,&
√ed_∑u£
);

1113 i‡(
√ed_∑u£
)  1;

1115 
	}
}

1117 
	$ã°_ˇn_c⁄töue
()

1119 
	`upd©e_°©e_£t
(
ã°_√ed_∑u£
,0);

1120 
	`upd©e_°©e_£t
(
¥odu˚_thªads_∑u£_föished_cou¡
,0);

1121 
	`upd©e_°©e_£t
(
di•©ch_thªads_∑u£_föished_cou¡
,0);

1122 
	`upd©e_°©e_£t
(
backíd_thªads_∑u£_föished_cou¡
,0);

1123 
	}
}

1125 
	$ã°_√ed_to_∑u£
()

1127 
	`upd©e_°©e_£t
(
ã°_√ed_∑u£
,1);

1128 
	}
}

1130 
	$⁄e_¥odu˚_thªad_∑u£d
()

1132 
	`upd©e_°©e_add
(
¥odu˚_thªads_∑u£_föished_cou¡
,1);

1133 
	}
}

1135 
	$⁄e_di•©ch_thªad_∑u£d
()

1137 
	`upd©e_°©e_add
(
di•©ch_thªads_∑u£_föished_cou¡
,1);

1138 
	}
}

1140 
	$⁄e_backíd_thªad_∑u£d
()

1142 
	`upd©e_°©e_add
(
backíd_thªads_∑u£_föished_cou¡
,1);

1143 
	}
}

1145 
	$Æl_¥odu˚_thªads_∑u£d
()

1147 
∑u£d_thªads
;

1149 
	`upd©e_°©e_gë
(
¥odu˚_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1150 i‡(
∑u£d_thªads
 < 
¥odu˚_d©a_thªads_cou¡
) {

1155 
	}
}

1157 
	$Æl_di•©ch_thªads_∑u£d
()

1159 
∑u£d_thªads
;

1161 
	`upd©e_°©e_gë
(
di•©ch_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1162 i‡(
∑u£d_thªads
 < 
di•©ch_d©a_thªads_cou¡
) {

1167 
	}
}

1169 
	$Æl_backíd_thªads_∑u£d
()

1171 
∑u£d_thªads
;

1173 
	`upd©e_°©e_gë
(
backíd_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1174 i‡(
∑u£d_thªads
 < 
backíd_thªads_cou¡
) {

1179 
	}
}

1181 
	$Æl_thªads_∑u£d
()

1183 
∑u£d_thªads
;

1185 
	`upd©e_°©e_gë
(
¥odu˚_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1186 i‡(
∑u£d_thªads
 < 
¥odu˚_d©a_thªads_cou¡
) {

1190 
	`upd©e_°©e_gë
(
di•©ch_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1191 i‡(
∑u£d_thªads
 < 
di•©ch_d©a_thªads_cou¡
) {

1195 
	`upd©e_°©e_gë
(
backíd_thªads_∑u£_föished_cou¡
,&
∑u£d_thªads
);

1196 i‡(
∑u£d_thªads
 < 
backíd_thªads_cou¡
) {

1201 
	}
}

	@tests/vrt_check_data.h

1 #i‚de‡
_VRT_CHECK_DATA_H_


2 
	#_VRT_CHECK_DATA_H_


	)

4 
vπ_d©a_checkî_öô
(*
checkî
, *
ã°_èrgë_groups
);

5 
vπ_d©a_checkî_deöô
();

7 
vπ_°¨t_d©a_checkî
();

8 
vπ_waô_d©a_checkî
();

10 
ã°_if_√ed_∑u£
();

11 
ã°_ˇn_c⁄töue
();

12 
ã°_√ed_to_∑u£
();

14 
⁄e_¥odu˚_thªad_∑u£d
();

15 
⁄e_di•©ch_thªad_∑u£d
();

16 
⁄e_backíd_thªad_∑u£d
();

18 
Æl_¥odu˚_thªads_∑u£d
();

19 
Æl_di•©ch_thªads_∑u£d
();

20 
Æl_backíd_thªads_∑u£d
();

21 
Æl_thªads_∑u£d
();

	@tests/vrt_dispatch_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

12 
	~<async.h
>

13 
	~<ad≠ãrs/´.h
>

15 
	~<dhashkô.h
>

16 
	~<dli°.h
>

17 
	~<dmtqueue.h
>

18 
	~<dlog.h
>

20 
	~<vπ_utû.h
>

21 
	~<vπ_public.h
>

22 
	~<vøbã°.h
>

23 
	~<vπ_di•©ch_d©a.h
>

24 
	~<vπ_¥odu˚_d©a.h
>

26 
	gdi•©ch_d©a_thªads_cou¡
;

27 
d¨øy
 *
	gdi•©ch_d©a_thªads
 = 
NULL
;

29 
	gdi•©ch_thªads_∑u£_föished_cou¡
;

31 
	gtŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
 = 0;

32 
	gtŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
 = 0;

33 
	gtŸÆ_ã°ed_comm™ds_cou¡
 = 0;

34 
	gtŸÆ_ª∂y_îr_cou¡
 = 0;

36 
	$gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
()

38 
cou¡
;

39 
	`upd©e_°©e_gë
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,&
cou¡
);

40  
cou¡
;

41 
	}
}

43 
	$gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
()

45 
cou¡
;

46 
	`upd©e_°©e_gë
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,&
cou¡
);

47  
cou¡
;

48 
	}
}

50 
	$ª£t_tŸÆ_cou¡_≥r_cy˛e
()

52 
	`upd©e_°©e_£t
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,0);

53 
	`upd©e_°©e_£t
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,0);

54 
	}
}

56 
	sª∂y_unô
 {

57 
	mtŸÆ_cou¡
;

58 
	mª˚ived_cou¡
;

59 
ªdisRïly
 **
	mª∂ys
;

60 
d©a_unô
 *
	mdu
;

61 } 
	tª∂y_unô
;

63 
	$show_ª∂ys_öc⁄si°ícy_msg
(
d©a_unô
 *
du
, 
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
)

65 *
keyödex
, 
numkeys
;

66 
sds
 
key
 = 
NULL
;

68 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

69 i‡(
numkeys
 > 0) {

70 
key
 = 
du
->
¨gv
[
keyödex
[0]];

72 
	`‰ì
(
keyödex
);

74 i‡(
key
) {

75 
	`log_hexdump
(
LOG_ERR
,
key
,
	`sd¶í
(key),

83 
du
->
dp
->
«me
,

84 
ª∂y1
->
ty≥
, 
ª∂y2
->type,

85 
ª∂y1
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y1->
°r
:"NULL",

86 
ª∂y2
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y2->
°r
:"NULL",

87 
ª∂y1
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y1->
°r
:"NULL",

88 
ª∂y2
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y2->
°r
:"NULL",

89 
ª∂y1
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y1->
öãgî
:0,

90 
ª∂y2
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y2->
öãgî
:0,

91 
ª∂y1
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y1->
ñemíts
:0,

92 
ª∂y2
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y2->
ñemíts
:0,

93 
	`sd¶í
(
key
));

95 
	`log_îr‹
("%s commandÑeplysáre inconsistency, "

101 
du
->
dp
->
«me
,

102 
ª∂y1
->
ty≥
, 
ª∂y2
->type,

103 
ª∂y1
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y1->
°r
:"NULL",

104 
ª∂y2
->
ty≥
==
REDIS_REPLY_STATUS
?ª∂y2->
°r
:"NULL",

105 
ª∂y1
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y1->
°r
:"NULL",

106 
ª∂y2
->
ty≥
==
REDIS_REPLY_ERROR
?ª∂y2->
°r
:"NULL",

107 
ª∂y1
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y1->
öãgî
:0,

108 
ª∂y2
->
ty≥
==
REDIS_REPLY_INTEGER
?ª∂y2->
öãgî
:0,

109 
ª∂y1
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y1->
ñemíts
:0,

110 
ª∂y2
->
ty≥
==
REDIS_REPLY_ARRAY
?ª∂y2->
ñemíts
:0);

113 
	}
}

115 
	$s‹t_ª∂ys_if_√eded
(
ª∂y_unô
 *
ru
)

117 
d©a_unô
 *
du
 = 
ru
->du;

118 
d©a_¥odu˚r
 *
dp
 = 
du
->dp;

119 
°ï
 = 0, 
idx_cmp
 = 0;

121 i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_SET
) {

122 i‡(!
	`°rcmp
(
dp
->
«me
,"smembers") ||

123 !
	`°rcmp
(
dp
->
«me
,"sunion") ||

124 !
	`°rcmp
(
dp
->
«me
,"sdiff") ||

125 !
	`°rcmp
(
dp
->
«me
,"sinter")) {

126 
°ï
 = 1;

128 } i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_HASH
) {

129 i‡(!
	`°rcmp
(
dp
->
«me
,"hkeys") ||

130 !
	`°rcmp
(
dp
->
«me
,"hvals")) {

131 
°ï
 = 1;

132 } i‡(!
	`°rcmp
(
dp
->
«me
,"hgetall")) {

133 
°ï
 = 2;

134 
idx_cmp
 = 0;

138 i‡(
°ï
 > 0) {

139 
i
;

140 
ªdisRïly
 *
ª∂y
;

141 
i
 = 0; i < 
ru
->
ª˚ived_cou¡
; i ++) {

142 
ª∂y
 = 
ru
->
ª∂ys
[
i
];

143 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
)

145 
	`s‹t_¨øy_by_°ï
(
ª∂y
->
ñemít
,Ñïly->
ñemíts
,

146 
°ï
, 
idx_cmp
, 
ª∂y_°rög_bö¨y_com∑ª
);

150  
VRT_OK
;

151 
	}
}

153 
	$check_ª∂ys_if_ßme
(
ª∂y_unô
 *
ru
)

155 
j
;

156 
ªdisRïly
 **
ª∂ys
 = 
ru
->replys;

157 
ªdisRïly
 *
ª∂yb
, *
ª∂y
;

159 
	`s‹t_ª∂ys_if_√eded
(
ru
);

161 
ª∂yb
 = 
ª∂ys
[0];

163 
j
 = 1; j < 
ru
->
tŸÆ_cou¡
 ; j ++) {

164 
ª∂y
 = 
ª∂ys
[
j
];

165 i‡(
	`check_two_ª∂ys_if_ßme
(
ª∂yb
, 
ª∂y
)) {

166 
	`show_ª∂ys_öc⁄si°ícy_msg
(
ru
->
du
, 
ª∂yb
, 
ª∂y
);

172 
	}
}

174 
	sˇŒback_d©a
 {

175 
di•©ch_d©a_thªad
 *
	mddt
;

176 
ª∂y_unô
 *
	mru
;

177 
	midx
;

180 
	$ª∂y_ˇŒback
(
ªdisAsyncC⁄ãxt
 *
c
, *
r
, *
¥ivd©a
) {

181 
ªt
;

182 
ªdisRïly
 *
ª∂y
;

183 
ˇŒback_d©a
 *
cbd
 = 
¥ivd©a
;

184 
di•©ch_d©a_thªad
 *
ddt
 = 
cbd
->ddt;

185 
ª∂y_unô
 *
ru
 = 
cbd
->ru;

187 i‡(
r
 =
NULL
) {

188 
ª∂y
 = 
NULL
;

191 
ª∂y
 = 
	`°ól_húedis_ªdi§ïly
(
r
);

194 
ru
->
ª∂ys
[
cbd
->
idx
] = 
ª∂y
;

195 
ru
->
ª˚ived_cou¡
 ++;

196 
	`‰ì
(
cbd
);

198 i‡(
ru
->
ª˚ived_cou¡
 >ru->
tŸÆ_cou¡
) {

199 
j
;

201 
ªt
 = 
	`check_ª∂ys_if_ßme
(
ru
);

202 i‡(
ªt
 =1 && 
ª∂y
 !
NULL
) {

203 
d©a_unô
 *
du
 = 
ru
->du;

204 
d©a_¥odu˚r
 *
dp
 = 
du
->dp;

205 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_ERROR
) {

206 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
++;

210 i‡(
dp
->
√ed_ˇche_key_¥oc
 !
NULL
) {

211 
¥odu˚_scheme
 *
ps
 = 
du
->
d©a
;

212 i‡(
dp
->
	`√ed_ˇche_key_¥oc
(
ª∂y
)) {

213 
key_ˇche_¨øy
 *
k˝
 = 
	`k˝_gë_‰om_ps
(
ps
, 
dp
);

214 
sds
 
key
 = 
	`gë_⁄e_key_‰om_d©a_unô
(
du
);

215 
	`key_ˇche_¨øy_öput
(
k˝
,
key
,
	`sd¶í
(key));

221 
j
 = 0; j < 
ru
->
tŸÆ_cou¡
; j ++) {

222 
	`‰ìRïlyObje˘
(
ru
->
ª∂ys
[
j
]);

223 
ru
->
ª∂ys
[
j
] = 
NULL
;

225 
	`‰ì
(
ru
->
ª∂ys
);

226 
	`d©a_unô_put
(
ru
->
du
);

227 
	`‰ì
(
ru
);

229 
ddt
->
cou¡_waô_f‹_ª∂y
 --;

230 
	`ASSERT
(
ddt
->
cou¡_waô_f‹_ª∂y
 >= 0);

232 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
++;

234 
	}
}

236 
	$di•©ch_thªad_£nd_d©a
(
di•©ch_d©a_thªad
 *
ddt
)

238 
cou¡_≥r_time
 = 1000;

239 
d©a_unô
 *
du
;

241 (
du
 = 
	`dmtqueue_p›
(
ddt
->
d©as
)Ë!
NULL
) {

242 
ªdisAsyncC⁄ãxt
 *
a˘x
;

243 
j
;

245 
size_t
 *
¨gvÀn
 = 
	`mÆloc
(
du
->
¨gc
*(size_t));

246 
ª∂y_unô
 *
ru
 = 
	`mÆloc
((reply_unit));

247 
ru
->
du
 = du;

248 
ru
->
tŸÆ_cou¡
 = 
	`d¨øy_n
(
ddt
->
abgs
);

249 
ru
->
ª˚ived_cou¡
 = 0;

250 
ru
->
ª∂ys
 = 
	`mÆloc
‘u->
tŸÆ_cou¡
*(
ªdisRïly
 *));

251 
j
 = 0; j < 
du
->
¨gc
; j ++) {

252 
¨gvÀn
[
j
] = 
	`sd¶í
(
du
->
¨gv
[j]);

254 
j
 = 0; j < 
	`d¨øy_n
(
ddt
->
abgs
); j ++) {

255 
ˇŒback_d©a
 *
cbd
;

256 *
keyödex
, 
numkeys
;

257 
abã°_£rvî
 *
abs
;

259 
cbd
 = 
	`mÆloc
((
ˇŒback_d©a
));

260 
cbd
->
ddt
 = ddt;

261 
cbd
->
ru
 =Ñu;

262 
cbd
->
idx
 = 
j
;

263 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
j
);

265 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

266 i‡(
numkeys
 == 0) {

267 
idx
;

268 
idx
 = ()
	`ønd
()%
	`d¨øy_n
(&
abg
->
abã°_£rvîs
);

269 
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
,
idx
);

271 
sds
 
key
 = 
du
->
¨gv
[
keyödex
[0]];

272 
abs
 = 
abg
->
	`gë_backíd_£rvî
◊bg,
key
,
	`sd¶í
(key));

274 
	`‰ì
(
keyödex
);

276 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_gë
(
abs
->
c⁄n_c⁄ãxts
,

277 
du
->
hashvÆue
%
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
));

278 
a˘x
 = 
cc
->actx;

279 
	`ªdisAsyncComm™dArgv
(
a˘x
, 
ª∂y_ˇŒback
, 
cbd
, 
du
->
¨gc
, du->
¨gv
, 
¨gvÀn
);

281 
	`‰ì
(
¨gvÀn
);

283 
ddt
->
cou¡_waô_f‹_ª∂y
 ++;

285 i‡(
cou¡_≥r_time
-- <= 0) ;

288  
VRT_OK
;

289 
	}
}

291 
	$di•©ch_d©a_thªad_¸⁄
(
´EvítLo›
 *
evítLo›
, 
id
, *
˛õ¡D©a
)

293 
di•©ch_d©a_thªad
 *
ddt
 = 
˛õ¡D©a
;

295 
	`ASSERT
(
evítLo›
 =
ddt
->
ñ
);

298 i‡(
ddt
->
∑u£
) {

299 i‡(!
	`ã°_if_√ed_∑u£
()) {

300 
ddt
->
∑u£
 = 0;

302 
ddt
->
¸⁄lo›s
 ++;

307 i‡(
ddt
->
cou¡_waô_f‹_ª∂y
 < 4000 &&

308 !
	`dmtqueue_em±y
(
ddt
->
d©as
)) {

309 
	`di•©ch_thªad_£nd_d©a
(
ddt
);

313 i‡(
	`ã°_if_√ed_∑u£
() &&

314 
	`Æl_¥odu˚_thªads_∑u£d
() &&

315 
	`Æl_backíd_thªads_∑u£d
() &&

316 
	`dmtqueue_em±y
(
ddt
->
d©as
) &&

317 
	`dli°Lígth
(
ddt
->
rd©as
) == 0) {

319 
ddt
->
∑u£
 = 1;

322 
	`upd©e_°©e_add
(
tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
,

323 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
);

324 
	`upd©e_°©e_add
(
tŸÆ_ã°ed_comm™ds_cou¡
,

325 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
);

326 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
 = 0;

327 
	`upd©e_°©e_add
(
tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
,

328 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
);

329 
	`upd©e_°©e_add
(
tŸÆ_ª∂y_îr_cou¡
,

330 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
);

331 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
 = 0;

333 
	`⁄e_di•©ch_thªad_∑u£d
();

336 
ddt
->
¸⁄lo›s
 ++;

337  1000/
ddt
->
hz
;

338 
	}
}

340 
	$c⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

341 
di•©ch_d©a_thªad
 *
ddt
 = 
c
->
d©a
;

342 i‡(
°©us
 !
REDIS_OK
) {

343 
	`log_îr‹
("Eº‹: %s\n", 
c
->
îr°r
);

349 
	}
}

351 
	$disc⁄√˘_ˇŒback
(c⁄° 
ªdisAsyncC⁄ãxt
 *
c
, 
°©us
) {

352 
di•©ch_d©a_thªad
 *
ddt
 = 
c
->
d©a
;

353 i‡(
°©us
 !
REDIS_OK
) {

354 
	`log_îr‹
("Eº‹: %s\n", 
c
->
îr°r
);

361 
	}
}

363 
	$di•©ch_c⁄n_c⁄ãxt_öô
(
c⁄n_c⁄ãxt
 *
cc
, *
ho°
, 
p‹t
)

365 
cc
->
˘x
 = 
NULL
;

366 
cc
->
a˘x
 = 
NULL
;

368 
cc
->
a˘x
 = 
	`ªdisAsyncC⁄√˘
(
ho°
, 
p‹t
);

369 i‡(
cc
->
a˘x
 =
NULL
) {

370  
VRT_ERROR
;

373  
VRT_OK
;

374 
	}
}

376 
	$di•©ch_c⁄n_c⁄ãxt_deöô
(
c⁄n_c⁄ãxt
 *
cc
)

378 i‡(
cc
->
˘x
) {

379 
	`ªdisFªe
(
cc
->
˘x
);

380 
cc
->
˘x
 =
NULL
;

383 i‡(
cc
->
a˘x
) {

384 
	`ªdisAsyncFªe
(
cc
->
a˘x
);

385 
cc
->
a˘x
 =
NULL
;

387 
	}
}

389 
	$di•©ch_d©a_thªad_öô
(
di•©ch_d©a_thªad
 *
ddt
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
)

391 
i
, 
j
, 
k
;

393 
ddt
->
id
 = 0;

394 
ddt
->
thªad_id
 = 0;

395 
ddt
->
ñ
 = 
NULL
;

396 
ddt
->
hz
 = 10;

397 
ddt
->
¸⁄lo›s
 = 0;

398 
ddt
->
d©as
 = 
NULL
;

399 
ddt
->
rd©as
 = 
NULL
;

400 
ddt
->
abgs
 = 
NULL
;

401 
ddt
->
∑u£
 = 0;

402 
ddt
->
cou¡_waô_f‹_ª∂y
 = 0;

403 
ddt
->
ª∂y_tŸÆ_cou¡_≥r_cy˛e
 = 0;

404 
ddt
->
ª∂y_ty≥_îr_cou¡_≥r_cy˛e
 = 0;

406 
ddt
->
ñ
 = 
	`´Cª©eEvítLo›
(200);

407 i‡(
ddt
->
ñ
 =
NULL
) {

408  
VRT_ERROR
;

411 
ddt
->
d©as
 = 
	`dmtqueue_¸óã
();

412 i‡(
ddt
->
d©as
 =
NULL
) {

413  
VRT_ERROR
;

416 i‡(
	`dmtqueue_öô_wôh_lockqueue
(
ddt
->
d©as
, 
NULL
) != 0) {

417  
VRT_ERROR
;

420 
ddt
->
rd©as
 = 
	`dli°Cª©e
();

421 i‡(
ddt
->
rd©as
 =
NULL
) {

422  
VRT_ERROR
;

425 
ddt
->
abgs
 = 
	`abã°_groups_¸óã
(
ã°_èrgë_groups
);

426 i‡(
ddt
->
abgs
 =
NULL
) {

427  
VRT_ERROR
;

431 
i
 = 0; i < 
	`d¨øy_n
(
ddt
->
abgs
); i ++) {

432 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
i
);

433 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

434 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

435 
abs
->
c⁄n_c⁄ãxts
 = 
	`d¨øy_¸óã
(
c⁄√˘i⁄s
, (
c⁄n_c⁄ãxt
));

436 
k
 = 0; k < 
c⁄√˘i⁄s
; k ++) {

437 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_push
(
abs
->
c⁄n_c⁄ãxts
);

438 i‡(
	`di•©ch_c⁄n_c⁄ãxt_öô
(
cc
,
abs
->
ho°
,abs->
p‹t
Ë!
VRT_OK
) {

439  
VRT_ERROR
;

441 
cc
->
a˘x
->
d©a
 = 
ddt
;

442 
	`ªdisAeAâach
(
ddt
->
ñ
, 
cc
->
a˘x
);

443 
	`ªdisAsyncSëC⁄√˘CÆlback
(
cc
->
a˘x
,
c⁄√˘_ˇŒback
);

444 
	`ªdisAsyncSëDisc⁄√˘CÆlback
(
cc
->
a˘x
,
disc⁄√˘_ˇŒback
);

449 i‡(
	`´Cª©eTimeEvít
(
ddt
->
ñ
, 1, 
di•©ch_d©a_thªad_¸⁄
, ddt, 
NULL
Ë=
AE_ERR
) {

450  
VRT_ERROR
;

453  
VRT_OK
;

454 
	}
}

456 
	$di•©ch_d©a_thªad_deöô
(
di•©ch_d©a_thªad
 *
ddt
)

458 i‡(
ddt
->
ñ
) {

459 
	`´DñëeEvítLo›
(
ddt
->
ñ
);

460 
ddt
->
ñ
 = 
NULL
;

463 i‡(
ddt
->
d©as
) {

464 
	`dmtqueue_de°roy
(
ddt
->
d©as
);

465 
ddt
->
d©as
 = 
NULL
;

468 i‡(
ddt
->
abgs
) {

469 
i
, 
j
, 
k
;

471 
i
 = 0; i < 
	`d¨øy_n
(
ddt
->
abgs
); i ++) {

472 
abã°_group
 *
abg
 = 
	`d¨øy_gë
(
ddt
->
abgs
, 
i
);

473 
j
 = 0; j < 
	`d¨øy_n
(&
abg
->
abã°_£rvîs
); j ++) {

474 
abã°_£rvî
 *
abs
 = 
	`d¨øy_gë
(&
abg
->
abã°_£rvîs
, 
j
);

475 
	`d¨øy_n
(
abs
->
c⁄n_c⁄ãxts
) > 0) {

476 
c⁄n_c⁄ãxt
 *
cc
 = 
	`d¨øy_p›
(
abs
->
c⁄n_c⁄ãxts
);

477 
	`di•©ch_c⁄n_c⁄ãxt_deöô
(
cc
);

482 
	`abã°_groups_de°roy
(
ddt
->
abgs
);

483 
ddt
->
abgs
 = 
NULL
;

485 
	}
}

487 
	$vπ_di•©ch_d©a_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
)

489 
j
;

491 
di•©ch_d©a_thªads_cou¡
 = 
thªads_cou¡
;

492 
di•©ch_d©a_thªads
 = 
	`d¨øy_¸óã
(
thªads_cou¡
, (
di•©ch_d©a_thªad
));

493 i‡(
di•©ch_d©a_thªads
 =
NULL
) {

494  
VRT_ERROR
;

497 
j
 = 0; j < 
thªads_cou¡
; j ++) {

498 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_push
(
di•©ch_d©a_thªads
);

499 i‡(
	`di•©ch_d©a_thªad_öô
(
ddt
, 
ã°_èrgë_groups
, 
c⁄√˘i⁄s
Ë!
VRT_OK
) {

500  
VRT_ERROR
;

502 
ddt
->
id
 = 
j
;

505  
VRT_OK
;

506 
	}
}

508 
	$vπ_di•©ch_d©a_deöô
()

510 i‡(
di•©ch_d©a_thªads
) {

511 
	`d¨øy_n
(
di•©ch_d©a_thªads
) > 0) {

512 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_p›
(
di•©ch_d©a_thªads
);

513 
	`di•©ch_d©a_thªad_deöô
(
ddt
);

515 
	`d¨øy_de°roy
(
di•©ch_d©a_thªads
);

516 
di•©ch_d©a_thªads
 = 
NULL
;

518 
	}
}

520 *
	$vπ_di•©ch_d©a_thªad_run
(*
¨gs
)

522 
di•©ch_d©a_thªad
 *
ddt
 = 
¨gs
;

523 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

525 
	`´Maö
(
ddt
->
ñ
);

527  
NULL
;

528 
	}
}

530 
	$vπ_°¨t_di•©ch_d©a
()

532 
i
;

533 
i
 = 0; i < 
	`d¨øy_n
(
di•©ch_d©a_thªads
); i ++) {

534 
±hªad_©å_t
 
©å
;

535 
di•©ch_d©a_thªad
 *
ddt
;

536 
	`±hªad_©å_öô
(&
©å
);

537 
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
i
);

538 
	`±hªad_¸óã
(&
ddt
->
thªad_id
,

539 &
©å
, 
vπ_di•©ch_d©a_thªad_run
, 
ddt
);

542  
VRT_OK
;

543 
	}
}

545 
	$vπ_waô_di•©ch_d©a
()

547 
i
;

549 
i
 = 0; i < 
	`d¨øy_n
(
di•©ch_d©a_thªads
); i ++){

550 
di•©ch_d©a_thªad
 *
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
i
);

551 
	`±hªad_joö
(
ddt
->
thªad_id
, 
NULL
);

554  
VRT_OK
;

555 
	}
}

561 
	$d©a_di•©ch
(
d©a_unô
 *
du
)

563 
thªad_idx
;

564 
di•©ch_d©a_thªad
 *
ddt
;

565 
Àngth
;

566 *
keyödex
, 
numkeys
;

568 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
, du->
¨gv
, du->
¨gc
, &
numkeys
);

570 i‡(
numkeys
 == 0) {

571 
du
->
hashvÆue
 = ()
	`ønd
();

573 
sds
 
key
 = 
du
->
¨gv
[
keyödex
[0]];

574 
du
->
hashvÆue
 = ()
	`hash_¸c32a
(
key
, 
	`sd¶í
(key));

576 
	`‰ì
(
keyödex
);

578 
thªad_idx
 = 
du
->
hashvÆue
%
di•©ch_d©a_thªads_cou¡
;

579 
ddt
 = 
	`d¨øy_gë
(
di•©ch_d©a_thªads
, 
thªad_idx
);

580 
Àngth
 = 
	`dmtqueue_push
(
ddt
->
d©as
, 
du
);

581 i‡(
Àngth
 <= 0) {

582 
	`ã°_log_îr‹
("D©®unôÖushÅÿdi•©chÅhªad %d faûed", 
ddt
->
id
);

584 } i‡(
Àngth
 > 2000) {

589 
	}
}

	@tests/vrt_dispatch_data.h

1 #i‚de‡
_VRT_DISPATCH_DATA_H_


2 
	#_VRT_DISPATCH_DATA_H_


	)

4 
	~<d¨øy.h
>

6 
	gabã°_group
;

7 
	gdli°
;

8 
	gdmtqueue
;

9 
	gd©a_unô
;

10 
	g´EvítLo›
;

12 
	sdi•©ch_d©a_thªad
 {

13 
	mid
;

14 
±hªad_t
 
	mthªad_id
;

16 
´EvítLo›
 *
	mñ
;

17 
	mhz
;

18 
	m¸⁄lo›s
;

20 
dmtqueue
 *
	md©as
;

22 
dli°
 *
	mrd©as
;

25 
d¨øy
 *
	mabgs
;

27 
	m∑u£
;

29 
	mcou¡_waô_f‹_ª∂y
;

31 
	mª∂y_tŸÆ_cou¡_≥r_cy˛e
;

32 
	mª∂y_ty≥_îr_cou¡_≥r_cy˛e
;

33 } 
	tdi•©ch_d©a_thªad
;

35 
di•©ch_d©a_thªads_cou¡
;

37 
di•©ch_thªads_∑u£_föished_cou¡
;

39 
gë_tŸÆ_ã°ed_comm™ds_cou¡_≥r_cy˛e
();

40 
gë_tŸÆ_ª∂y_îr_cou¡_≥r_cy˛e
();

41 
ª£t_tŸÆ_cou¡_≥r_cy˛e
();

43 
vπ_di•©ch_d©a_öô
(
thªads_cou¡
, *
ã°_èrgë_groups
, 
c⁄√˘i⁄s
);

44 
vπ_di•©ch_d©a_deöô
();

46 
vπ_°¨t_di•©ch_d©a
();

47 
vπ_waô_di•©ch_d©a
();

49 
d©a_di•©ch
(
d©a_unô
 *
du
);

	@tests/vrt_produce_data.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<as£π.h
>

9 
	~<m©h.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/ut¢ame.h
>

13 
	~<d•ecülc⁄fig.h
>

15 
	~<húedis.h
>

16 
	~<d¨øy.h
>

17 
	~<dutû.h
>

18 
	~<dlog.h
>

20 
	~<vπ_utû.h
>

21 
	~<vπ_public.h
>

22 
	~<vøbã°.h
>

23 
	~<vπ_¥odu˚_d©a.h
>

25 
	#PRODUCE_KEY_CACHE_POOL_COUNT
 5

	)

27 
	s¥odu˚_thªad
 {

28 
	mid
;

29 
±hªad_t
 
	mthªad_id
;

31 
¥odu˚_scheme
 *
	mps
;

33 
	m∑u£
;

34 
	mlo›times
;

35 } 
	t¥odu˚_thªad
;

37 
d©a_¥odu˚r
 *
	gdñëe_d©a_¥odu˚r
 = 
NULL
;

39 
	gkey_Àngth_mö
;

40 
	gkey_Àngth_max
;

41 
	gkey_Àngth_ønge_g≠
;

42 
	gfõld_Àngth_max
;

43 
	g°rög_Àngth_max
;

45 
	gcmd_ty≥
;

47 
	gkey_ˇche_poﬁs_cou¡
 = 0;

49 
d¨øy
 
	g√eded_cmd_ty≥_¥odu˚r
;

50 
	g√eded_cmd_ty≥_¥odu˚r_cou¡
;

52 
	g¥odu˚_d©a_thªads_cou¡
;

53 
d¨øy
 
	g¥odu˚_thªads
;

55 
	g¥odu˚_thªads_∑u£_föished_cou¡
;

57 
	gn⁄_em±y_k˝s_cou¡
 = 0;

58 
	gn⁄_em±y_k˝s_idx
[
PRODUCE_KEY_CACHE_POOL_COUNT
] = {-1};

60 
sds
 
	$gë_øndom_ˇched_key
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

62 
key_ˇche_¨øy
 *
k˝
 = 
	`k˝_gë_‰om_ps
(
ps
,
dp
);

63  
	`key_ˇche_¨øy_øndom
(
k˝
);

64 
	}
}

66 
	$gë_øndom_öt
()

68 i‡(
	`ønd
()%2 == 1) {

69  0 - ()
	`ønd
();

71  ()
	`ønd
();

73 
	}
}

75 
	$gë_øndom_unsig√d_öt
()

77  ()
	`ønd
();

78 
	}
}

80 
	$gë_øndom_ch¨
()

82  ()
	`ønd
()%250 + 5;

84 
	}
}

86 
sds
 
	$gë_øndom_key
()

88 
i
, 
Àn
;

89 
sds
 
°r
 = 
	`sd£m±y
();

91 
Àn
 = 
key_Àngth_ønge_g≠
==0?
key_Àngth_mö
:

92 (
	`gë_øndom_unsig√d_öt
()%
key_Àngth_ønge_g≠
+
key_Àngth_mö
);

93 i‡(
Àn
 == 0)Üen ++;

94 
°r
 = 
	`sdsMakeRoomF‹
(°r,(
size_t
)
Àn
);

95 
	`sdsIn¸Lí
(
°r
, ()
Àn
);

97 
i
 = 0; i < 
Àn
; i ++) {

98 
°r
[
i
] = ()
	`gë_øndom_ch¨
();

101  
°r
;

102 
	}
}

104 
sds
 
	$gë_øndom_°rög
()

106 
i
, 
Àn
;

107 
sds
 
°r
 = 
	`sd£m±y
();

109 
Àn
 = 
	`gë_øndom_unsig√d_öt
()%
°rög_Àngth_max
;

110 
°r
 = 
	`sdsMakeRoomF‹
(°r,(
size_t
)
Àn
);

111 
	`sdsIn¸Lí
(
°r
, ()
Àn
);

113 
i
 = 0; i < 
Àn
; i ++) {

114 
°r
[
i
] = 
	`gë_øndom_ch¨
();

117  
°r
;

118 
	}
}

120 
sds
 
	$gë_øndom_Êﬂt_°r
()

122 
decimÆ_Àn
;

123 
sds
 
°r
;

125 i‡(
	`ønd
()%2 == 1) {

126 
°r
 = 
	`sd¢ew
("-");

128 
°r
 = 
	`sd£m±y
();

131 i‡(
	`ønd
()%2 == 1) {

132 
°r
 = 
	`sdsˇtfmt
(str,"%u.%u",

133 
	`gë_øndom_unsig√d_öt
(),

134 
	`gë_øndom_unsig√d_öt
());

136 
°r
 = 
	`sdsˇtfmt
(str,"%u",

137 
	`gë_øndom_unsig√d_öt
());

140  
°r
;

141 
	}
}

143 
	#ZSET_RANGE_MIN_MAX_TYPE_RANK
 0

	)

144 
	#ZSET_RANGE_MIN_MAX_TYPE_SCORE
 1

	)

145 
	#ZSET_RANGE_MIN_MAX_TYPE_LEX
 2

	)

146 
sds
 *
	$gë_øndom_z£t_ønge_mö_max_°r
(
ønge_ty≥
)

148 
sds
 *
ønge
;

149 
¥obabûôy
 = 
	`ønd
()%100;

151 
ønge
 = 
	`mÆloc
(2*(
sds
));

152 i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_RANK
) {

153 
mö
 = 
	`gë_øndom_unsig√d_öt
();

154 
max
 = 
	`gë_øndom_unsig√d_öt
();

156 i‡(
¥obabûôy
 >95 && 
mö
 <
max
 ||

157 
¥obabûôy
 < 95 && 
mö
 > 
max
) {

158 
ønge
[0] = 
	`sds‰oml⁄gl⁄g
(()
max
);

159 
ønge
[1] = 
	`sds‰oml⁄gl⁄g
(()
mö
);

161 
ønge
[0] = 
	`sds‰oml⁄gl⁄g
(()
mö
);

162 
ønge
[1] = 
	`sds‰oml⁄gl⁄g
(()
max
);

164 } i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_SCORE
) {

165 
sds
 
mö_°r
 = 
	`gë_øndom_Êﬂt_°r
();

166 
sds
 
max_°r
 = 
	`gë_øndom_Êﬂt_°r
();

167 
mö
, 
max
;

168 *
ïå
;

169 
sds
 
sw≠
;

170 
mö_¥obabûôy
 = 
	`ønd
()%3;

171 
max_¥obabûôy
 = 
	`ønd
()%3;

173 
mö
 = 
	`°πod
(
mö_°r
,&
ïå
);

174 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
mö
)) {

175 
	`sds‰ì
(
mö_°r
);

176 
	`sds‰ì
(
max_°r
);

177 
	`‰ì
(
ønge
);

178  
NULL
;

180 
max
 = 
	`°πod
(
max_°r
,&
ïå
);

181 i‡(
ïå
[0] !'\0' || 
	`i¢™
(
max
)) {

182 
	`sds‰ì
(
mö_°r
);

183 
	`sds‰ì
(
max_°r
);

184 
	`‰ì
(
ønge
);

185  
NULL
;

187 i‡(
¥obabûôy
 >95 && 
mö
 <
max
 ||

188 
¥obabûôy
 < 95 && 
mö
 > 
max
) {

189 
sw≠
 = 
mö_°r
;

190 
mö_°r
 = 
max_°r
;

191 
max_°r
 = 
sw≠
;

194 i‡(
mö_¥obabûôy
 == 0) {

195 
ønge
[0] = 
	`sd¢ew
("-inf");

196 } i‡(
mö_¥obabûôy
 == 1) {

197 
ønge
[0] = 
	`sd¢ew
("(");

198 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

199 
	`sds‰ì
(
mö_°r
);

201 
ønge
[0] = 
mö_°r
;

203 i‡(
max_¥obabûôy
 == 0) {

204 
ønge
[1] = 
	`sd¢ew
("+inf");

205 } i‡(
max_¥obabûôy
 == 1) {

206 
ønge
[1] = 
	`sd¢ew
("(");

207 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

208 
	`sds‰ì
(
max_°r
);

210 
ønge
[1] = 
max_°r
;

212 } i‡(
ønge_ty≥
 =
ZSET_RANGE_MIN_MAX_TYPE_LEX
) {

213 
sds
 
mö_°r
 = 
	`gë_øndom_°rög
();

214 
sds
 
max_°r
 = 
	`gë_øndom_°rög
();

215 
sds
 
sw≠
;

216 
mö_¥obabûôy
 = 
	`ønd
()%3;

217 
max_¥obabûôy
 = 
	`ønd
()%3;

219 i‡(
¥obabûôy
 >95 && 
	`sdscmp
(
mö_°r
,
max_°r
) < 0 ||

220 
¥obabûôy
 < 95 && 
	`sdscmp
(
mö_°r
,
max_°r
) > 0) {

221 
sw≠
 = 
mö_°r
;

222 
mö_°r
 = 
max_°r
;

223 
max_°r
 = 
sw≠
;

226 i‡(
mö_¥obabûôy
 == 0) {

227 
ønge
[0] = 
	`sd¢ew
("-");

228 } i‡(
mö_¥obabûôy
 == 1) {

229 
ønge
[0] = 
	`sd¢ew
("(");

230 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

231 
	`sds‰ì
(
mö_°r
);

233 
ønge
[0] = 
	`sd¢ew
("[");

234 
ønge
[0] = 
	`sdsˇtfmt
‘™ge[0],"%S",
mö_°r
);

235 
	`sds‰ì
(
mö_°r
);

237 i‡(
max_¥obabûôy
 == 0) {

238 
ønge
[1] = 
	`sd¢ew
("+");

239 } i‡(
max_¥obabûôy
 == 1) {

240 
ønge
[1] = 
	`sd¢ew
("(");

241 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

242 
	`sds‰ì
(
max_°r
);

244 
ønge
[1] = 
	`sd¢ew
("[");

245 
ønge
[1] = 
	`sdsˇtfmt
‘™ge[1],"%S",
max_°r
);

246 
	`sds‰ì
(
max_°r
);

249 
	`‰ì
(
ønge
);

250 
ønge
 = 
NULL
;

253  
ønge
;

254 
	}
}

256 
	$gë_øndom_fõld_Àn
()

258  
	`gë_øndom_unsig√d_öt
()%
fõld_Àngth_max
 + 1;

259 
	}
}

261 
sds
 
	$gë_øndom_key_wôh_hô_øtio
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

263 
sds
 
key
;

264 i‡(
ps
->
hô_øtio_¨øy
[ps->
hô_øtio_idx
++] == 0) {

265 
key
 = 
	`gë_øndom_key
();

267 
key
 = 
	`gë_øndom_ˇched_key
(
ps
,
dp
);

268 i‡(
key
 =
NULL
Ëkey = 
	`gë_øndom_key
();

270 i‡(
ps
->
hô_øtio_idx
 >ps->
hô_øtio_¨øy_Àn
) {

271 
ps
->
hô_øtio_idx
 = 0;

273  
key
;

274 
	}
}

277 
	$nck_whí_n€º‹
(
ªdisRïly
 *
ª∂y
)

279 i‡(
ª∂y
 =
NULL
)  0;

281 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ERROR
) {

286 
	}
}

288 
	$nck_whí_ok
(
ªdisRïly
 *
ª∂y
)

290 i‡(
ª∂y
 =
NULL
)  0;

292 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_STATUS
 &&

293 !
	`°rcmp
(
ª∂y
->
°r
, "OK")) {

298 
	}
}

300 
	$nck_whí_°r
(
ªdisRïly
 *
ª∂y
)

302 i‡(
ª∂y
 =
NULL
)  0;

304 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_STRING
) {

309 
	}
}

311 
	$nck_whí_unsig√d_öãgî
(
ªdisRïly
 *
ª∂y
)

313 i‡(
ª∂y
 =
NULL
)  0;

315 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

316 
ª∂y
->
öãgî
 >= 0) {

321 
	}
}

323 
	$nck_whí_n⁄zîo_unsig√d_öãgî
(
ªdisRïly
 *
ª∂y
)

325 i‡(
ª∂y
 =
NULL
)  0;

327 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

328 
ª∂y
->
öãgî
 > 0) {

333 
	}
}

335 
	$nck_whí_zîo_‹_⁄e
(
ªdisRïly
 *
ª∂y
)

337 i‡(
ª∂y
 =
NULL
)  0;

339 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

340 (
ª∂y
->
öãgî
 == 0 ||Ñeply->integer == 1)) {

345 
	}
}

347 
	$nck_whí_⁄e
(
ªdisRïly
 *
ª∂y
)

349 i‡(
ª∂y
 =
NULL
)  0;

351 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

352 
ª∂y
->
öãgî
 == 1) {

357 
	}
}

361 
d©a_unô
 *
	$gë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

363 
d©a_unô
 *
du
;

365 
du
 = 
	`d©a_unô_gë
();

366 
du
->
dp
 = dp;

367 
du
->
¨gc
 = 2;

368 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

369 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

370 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

372  
du
;

373 
	}
}

375 
d©a_unô
 *
	$£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

377 
d©a_unô
 *
du
;

379 
du
 = 
	`d©a_unô_gë
();

380 
du
->
dp
 = dp;

381 
du
->
¨gc
 = 3;

382 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

383 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

384 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

385 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

387  
du
;

388 
	}
}

390 
d©a_unô
 *
	$£äx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

392 
d©a_unô
 *
du
;

394 
du
 = 
	`d©a_unô_gë
();

395 
du
->
dp
 = dp;

396 
du
->
¨gc
 = 3;

397 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

398 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

399 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

400 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

402  
du
;

403 
	}
}

406 
	$£äx_cmd_nck
(
ªdisRïly
 *
ª∂y
)

408 i‡(
ª∂y
 =
NULL
)  0;

410 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
 &&

411 
ª∂y
->
öãgî
 == 1) {

416 
	}
}

418 
d©a_unô
 *
	$£ãx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

420 
d©a_unô
 *
du
;

422 
du
 = 
	`d©a_unô_gë
();

423 
du
->
dp
 = dp;

424 
du
->
¨gc
 = 4;

425 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

426 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

427 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

428 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

429 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

431  
du
;

432 
	}
}

434 
d©a_unô
 *
	$p£ãx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

436 
d©a_unô
 *
du
;

438 
du
 = 
	`d©a_unô_gë
();

439 
du
->
dp
 = dp;

440 
du
->
¨gc
 = 4;

441 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

442 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

443 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

444 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

445 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

447  
du
;

448 
	}
}

450 
d©a_unô
 *
	$dñ_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

452 
d©a_unô
 *
du
;

454 
du
 = 
	`d©a_unô_gë
();

455 
du
->
dp
 = dp;

456 
du
->
¨gc
 = 2;

457 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

458 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

459 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

461  
du
;

462 
	}
}

464 
d©a_unô
 *
	$expúe_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

466 
d©a_unô
 *
du
;

468 
du
 = 
	`d©a_unô_gë
();

469 
du
->
dp
 = dp;

470 
du
->
¨gc
 = 3;

471 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

472 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

473 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

474 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

476  
du
;

477 
	}
}

479 
d©a_unô
 *
	$expúót_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

481 
d©a_unô
 *
du
;

483 
du
 = 
	`d©a_unô_gë
();

484 
du
->
dp
 = dp;

485 
du
->
¨gc
 = 3;

486 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

487 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

488 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

489 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`vπ_m£c_now
()/1000LL+
	`ønd
()%10000);

491  
du
;

492 
	}
}

494 
d©a_unô
 *
	$exi°s_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

496 
d©a_unô
 *
du
;

498 
du
 = 
	`d©a_unô_gë
();

499 
du
->
dp
 = dp;

500 
du
->
¨gc
 = 2;

501 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

502 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

503 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

505  
du
;

506 
	}
}

508 
d©a_unô
 *
	$âl_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

510 
d©a_unô
 *
du
;

512 
du
 = 
	`d©a_unô_gë
();

513 
du
->
dp
 = dp;

514 
du
->
¨gc
 = 2;

515 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

516 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

517 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

519  
du
;

520 
	}
}

522 
d©a_unô
 *
	$±é_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

524 
d©a_unô
 *
du
;

526 
du
 = 
	`d©a_unô_gë
();

527 
du
->
dp
 = dp;

528 
du
->
¨gc
 = 2;

529 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

530 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

531 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

533  
du
;

534 
	}
}

536 
d©a_unô
 *
	$ö¸_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

538 
d©a_unô
 *
du
;

540 
du
 = 
	`d©a_unô_gë
();

541 
du
->
dp
 = dp;

542 
du
->
¨gc
 = 2;

543 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

544 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

545 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

547  
du
;

548 
	}
}

550 
d©a_unô
 *
	$de¸_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

552 
d©a_unô
 *
du
;

554 
du
 = 
	`d©a_unô_gë
();

555 
du
->
dp
 = dp;

556 
du
->
¨gc
 = 2;

557 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

558 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

559 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

561  
du
;

562 
	}
}

564 
d©a_unô
 *
	$ö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

566 
d©a_unô
 *
du
;

568 
du
 = 
	`d©a_unô_gë
();

569 
du
->
dp
 = dp;

570 
du
->
¨gc
 = 3;

571 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

572 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

573 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

574 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

576  
du
;

577 
	}
}

579 
d©a_unô
 *
	$de¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

581 
d©a_unô
 *
du
;

583 
du
 = 
	`d©a_unô_gë
();

584 
du
->
dp
 = dp;

585 
du
->
¨gc
 = 3;

586 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

587 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

588 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

589 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`ønd
()%10000);

591  
du
;

592 
	}
}

594 
d©a_unô
 *
	$≠≥nd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

596 
d©a_unô
 *
du
;

598 
du
 = 
	`d©a_unô_gë
();

599 
du
->
dp
 = dp;

600 
du
->
¨gc
 = 3;

601 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

602 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

603 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

604 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

606  
du
;

607 
	}
}

610 
	$≠≥nd_cmd_nck
(
ªdisRïly
 *
ª∂y
)

612 i‡(
ª∂y
 =
NULL
)  0;

614 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

619 
	}
}

621 
d©a_unô
 *
	$°æí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

623 
d©a_unô
 *
du
;

625 
du
 = 
	`d©a_unô_gë
();

626 
du
->
dp
 = dp;

627 
du
->
¨gc
 = 2;

628 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

629 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

630 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

632  
du
;

633 
	}
}

635 
d©a_unô
 *
	$gë£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

637 
d©a_unô
 *
du
;

639 
du
 = 
	`d©a_unô_gë
();

640 
du
->
dp
 = dp;

641 
du
->
¨gc
 = 3;

642 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

643 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

644 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

645 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

647  
du
;

648 
	}
}

650 
d©a_unô
 *
	$ö¸byÊﬂt_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

652 
d©a_unô
 *
du
;

654 
du
 = 
	`d©a_unô_gë
();

655 
du
->
dp
 = dp;

656 
du
->
¨gc
 = 3;

657 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

658 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

659 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

660 
du
->
¨gv
[2] = 
	`gë_øndom_Êﬂt_°r
();

662  
du
;

663 
	}
}

665 
d©a_unô
 *
	$£tbô_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

667 
d©a_unô
 *
du
;

669 
du
 = 
	`d©a_unô_gë
();

670 
du
->
dp
 = dp;

671 
du
->
¨gc
 = 4;

672 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

673 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

674 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

675 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

676 i‡(
	`ønd
()%2) {

677 
du
->
¨gv
[3] = 
	`sd¢ew
("1");

679 
du
->
¨gv
[3] = 
	`sd¢ew
("0");

682  
du
;

683 
	}
}

685 
d©a_unô
 *
	$gëbô_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

687 
d©a_unô
 *
du
;

689 
du
 = 
	`d©a_unô_gë
();

690 
du
->
dp
 = dp;

691 
du
->
¨gc
 = 3;

692 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

693 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

694 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

695 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

697  
du
;

698 
	}
}

700 
d©a_unô
 *
	$£å™ge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

702 
d©a_unô
 *
du
;

704 
du
 = 
	`d©a_unô_gë
();

705 
du
->
dp
 = dp;

706 
du
->
¨gc
 = 4;

707 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

708 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

709 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

710 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
()%30000);

711 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

713  
du
;

714 
	}
}

716 
d©a_unô
 *
	$gëønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

718 
d©a_unô
 *
du
;

720 
du
 = 
	`d©a_unô_gë
();

721 
du
->
dp
 = dp;

722 
du
->
¨gc
 = 4;

723 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

724 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

725 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

726 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

727 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

729  
du
;

730 
	}
}

732 
d©a_unô
 *
	$bôcou¡_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

734 
d©a_unô
 *
du
;

735 
wôh_ønge
 = 0;

737 i‡(
	`ønd
()%2)

738 
wôh_ønge
 = 1;

740 
du
 = 
	`d©a_unô_gë
();

741 
du
->
dp
 = dp;

742 
du
->
¨gc
 = 
wôh_ønge
?4:2;

743 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

744 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

745 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

746 i‡(
wôh_ønge
) {

747 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

748 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

750  
du
;

751 
	}
}

753 
d©a_unô
 *
	$bôpos_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

755 
d©a_unô
 *
du
;

756 
wôh_ønge
 = 0;

757 
¥obabûôy
 = 
	`ønd
()%3;

759 i‡(
¥obabûôy
 == 0)

760 
wôh_ønge
 = 0;

761 i‡(
¥obabûôy
 == 1)

762 
wôh_ønge
 = 1;

763 i‡(
¥obabûôy
 == 2)

764 
wôh_ønge
 = 2;

766 
du
 = 
	`d©a_unô_gë
();

767 
du
->
dp
 = dp;

768 
du
->
¨gc
 = 
wôh_ønge
==0?3:(with_range==1?4:5);

769 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

770 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

771 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

772 i‡(
	`ønd
()%2)

773 
du
->
¨gv
[2] = 
	`sd¢ew
("0");

775 
du
->
¨gv
[2] = 
	`sd¢ew
("1");

776 i‡(
wôh_ønge
 > 0)

777 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

778 i‡(
wôh_ønge
 == 2)

779 
du
->
¨gv
[4] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%30000);

781  
du
;

782 
	}
}

784 
d©a_unô
 *
	$mgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

786 
d©a_unô
 *
du
;

788 
du
 = 
	`d©a_unô_gë
();

789 
du
->
dp
 = dp;

790 
du
->
¨gc
 = 2;

791 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

792 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

793 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

795  
du
;

796 
	}
}

798 
d©a_unô
 *
	$m£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

800 
d©a_unô
 *
du
;

802 
du
 = 
	`d©a_unô_gë
();

803 
du
->
dp
 = dp;

804 
du
->
¨gc
 = 3;

805 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

806 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

807 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

808 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

810  
du
;

811 
	}
}

813 
d©a_unô
 *
	$h£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

815 
d©a_unô
 *
du
;

817 
du
 = 
	`d©a_unô_gë
();

818 
du
->
dp
 = dp;

819 
du
->
¨gc
 = 4;

820 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

821 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

822 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

823 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

824 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

826  
du
;

827 
	}
}

829 
d©a_unô
 *
	$hgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

831 
d©a_unô
 *
du
;

833 
du
 = 
	`d©a_unô_gë
();

834 
du
->
dp
 = dp;

835 
du
->
¨gc
 = 3;

836 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

837 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

838 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

839 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

841  
du
;

842 
	}
}

844 
d©a_unô
 *
	$hÀn_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

846 
d©a_unô
 *
du
;

848 
du
 = 
	`d©a_unô_gë
();

849 
du
->
dp
 = dp;

850 
du
->
¨gc
 = 2;

851 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

852 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

853 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

855  
du
;

856 
	}
}

858 
d©a_unô
 *
	$hdñ_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

860 
d©a_unô
 *
du
;

861 
j
, 
fõld_Àngth
;

863 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

865 
du
 = 
	`d©a_unô_gë
();

866 
du
->
dp
 = dp;

867 
du
->
¨gc
 = 2 + 
fõld_Àngth
;

868 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

869 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

870 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

871 
j
 = 0; j < 
fõld_Àngth
; j ++) {

872 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

875  
du
;

876 
	}
}

878 
d©a_unô
 *
	$hexi°s_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

880 
d©a_unô
 *
du
;

882 
du
 = 
	`d©a_unô_gë
();

883 
du
->
dp
 = dp;

884 
du
->
¨gc
 = 3;

885 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

886 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

887 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

888 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

890  
du
;

891 
	}
}

893 
d©a_unô
 *
	$hkeys_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

895 
d©a_unô
 *
du
;

897 
du
 = 
	`d©a_unô_gë
();

898 
du
->
dp
 = dp;

899 
du
->
¨gc
 = 2;

900 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

901 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

902 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

904  
du
;

905 
	}
}

907 
d©a_unô
 *
	$hvÆs_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

909 
d©a_unô
 *
du
;

911 
du
 = 
	`d©a_unô_gë
();

912 
du
->
dp
 = dp;

913 
du
->
¨gc
 = 2;

914 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

915 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

916 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

918  
du
;

919 
	}
}

921 
d©a_unô
 *
	$hgëÆl_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

923 
d©a_unô
 *
du
;

925 
du
 = 
	`d©a_unô_gë
();

926 
du
->
dp
 = dp;

927 
du
->
¨gc
 = 2;

928 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

929 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

930 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

932  
du
;

933 
	}
}

935 
d©a_unô
 *
	$hö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

937 
d©a_unô
 *
du
;

939 
du
 = 
	`d©a_unô_gë
();

940 
du
->
dp
 = dp;

941 
du
->
¨gc
 = 4;

942 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

943 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

944 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

945 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

946 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
());

948  
du
;

949 
	}
}

951 
d©a_unô
 *
	$hö¸byÊﬂt_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

953 
d©a_unô
 *
du
;

955 
du
 = 
	`d©a_unô_gë
();

956 
du
->
dp
 = dp;

957 
du
->
¨gc
 = 4;

958 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

959 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

960 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

961 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

962 
du
->
¨gv
[3] = 
	`gë_øndom_Êﬂt_°r
();

964  
du
;

965 
	}
}

967 
d©a_unô
 *
	$hmgë_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

969 
d©a_unô
 *
du
;

970 
j
, 
fõld_Àngth
;

972 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

974 
du
 = 
	`d©a_unô_gë
();

975 
du
->
dp
 = dp;

976 
du
->
¨gc
 = 2+
fõld_Àngth
;

977 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

978 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

979 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

980 
j
 = 0; j < 
fõld_Àngth
; j ++) {

981 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

984  
du
;

985 
	}
}

987 
d©a_unô
 *
	$hm£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

989 
d©a_unô
 *
du
;

990 
j
, 
fõld_Àngth
;

992 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

994 
du
 = 
	`d©a_unô_gë
();

995 
du
->
dp
 = dp;

996 
du
->
¨gc
 = 2+
fõld_Àngth
*2;

997 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

998 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

999 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1000 
j
 = 2; j < 2+
fõld_Àngth
*2; j += 2) {

1001 
du
->
¨gv
[
j
] = 
	`gë_øndom_°rög
();

1002 
du
->
¨gv
[
j
+1] = 
	`gë_øndom_°rög
();

1005  
du
;

1006 
	}
}

1008 
d©a_unô
 *
	$h£äx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1010 
d©a_unô
 *
du
;

1012 
du
 = 
	`d©a_unô_gë
();

1013 
du
->
dp
 = dp;

1014 
du
->
¨gc
 = 4;

1015 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1016 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1017 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1018 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1019 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1021  
du
;

1022 
	}
}

1024 
d©a_unô
 *
	$h°æí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1026 
d©a_unô
 *
du
;

1028 
du
 = 
	`d©a_unô_gë
();

1029 
du
->
dp
 = dp;

1030 
du
->
¨gc
 = 3;

1031 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1032 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1033 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1034 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1036  
du
;

1037 
	}
}

1039 
d©a_unô
 *
	$Ωush_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1041 
d©a_unô
 *
du
;

1042 
j
, 
fõld_Àngth
;

1044 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1046 
du
 = 
	`d©a_unô_gë
();

1047 
du
->
dp
 = dp;

1048 
du
->
¨gc
 = 2+
fõld_Àngth
;

1049 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1050 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1051 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1052 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1053 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1056  
du
;

1057 
	}
}

1060 
	$Ωush_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1062 i‡(
ª∂y
 =
NULL
)  0;

1064 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1069 
	}
}

1071 
d©a_unô
 *
	$Õush_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1073 
d©a_unô
 *
du
;

1074 
j
, 
fõld_Àngth
;

1076 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1078 
du
 = 
	`d©a_unô_gë
();

1079 
du
->
dp
 = dp;

1080 
du
->
¨gc
 = 2+
fõld_Àngth
;

1081 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1082 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1083 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1085 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1086 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1089  
du
;

1090 
	}
}

1092 
d©a_unô
 *
	$Ã™ge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1094 
d©a_unô
 *
du
;

1096 
du
 = 
	`d©a_unô_gë
();

1097 
du
->
dp
 = dp;

1098 
du
->
¨gc
 = 4;

1099 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1100 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1101 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1102 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1103 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1105  
du
;

1106 
	}
}

1108 
d©a_unô
 *
	$Ω›_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1110 
d©a_unô
 *
du
;

1112 
du
 = 
	`d©a_unô_gë
();

1113 
du
->
dp
 = dp;

1114 
du
->
¨gc
 = 2;

1115 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1116 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1117 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1119  
du
;

1120 
	}
}

1122 
d©a_unô
 *
	$Õ›_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1124 
d©a_unô
 *
du
;

1126 
du
 = 
	`d©a_unô_gë
();

1127 
du
->
dp
 = dp;

1128 
du
->
¨gc
 = 2;

1129 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1130 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1131 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1133  
du
;

1134 
	}
}

1136 
d©a_unô
 *
	$Œí_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1138 
d©a_unô
 *
du
;

1140 
du
 = 
	`d©a_unô_gë
();

1141 
du
->
dp
 = dp;

1142 
du
->
¨gc
 = 2;

1143 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1144 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1145 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1147  
du
;

1148 
	}
}

1150 
d©a_unô
 *
	$Ãem_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1152 
d©a_unô
 *
du
;

1154 
du
 = 
	`d©a_unô_gë
();

1155 
du
->
dp
 = dp;

1156 
du
->
¨gc
 = 4;

1157 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1158 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1159 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1160 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1161 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1163  
du
;

1164 
	}
}

1166 
d©a_unô
 *
	$…rim_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1168 
d©a_unô
 *
du
;

1170 
du
 = 
	`d©a_unô_gë
();

1171 
du
->
dp
 = dp;

1172 
du
->
¨gc
 = 4;

1173 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1174 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1175 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1176 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1177 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1179  
du
;

1180 
	}
}

1182 
d©a_unô
 *
	$lödex_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1184 
d©a_unô
 *
du
;

1186 
du
 = 
	`d©a_unô_gë
();

1187 
du
->
dp
 = dp;

1188 
du
->
¨gc
 = 3;

1189 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1190 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1191 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1192 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1194  
du
;

1195 
	}
}

1197 
d©a_unô
 *
	$l£t_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1199 
d©a_unô
 *
du
;

1201 
du
 = 
	`d©a_unô_gë
();

1202 
du
->
dp
 = dp;

1203 
du
->
¨gc
 = 4;

1204 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1205 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1206 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1207 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(()
	`gë_øndom_öt
()%(
fõld_Àngth_max
+1));

1208 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1210  
du
;

1211 
	}
}

1213 
d©a_unô
 *
	$ßdd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1215 
d©a_unô
 *
du
;

1216 
j
, 
fõld_Àngth
;

1218 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1220 
du
 = 
	`d©a_unô_gë
();

1221 
du
->
dp
 = dp;

1222 
du
->
¨gc
 = 2 + 
fõld_Àngth
;

1223 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1224 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1225 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1226 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1227 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1230  
du
;

1231 
	}
}

1233 
d©a_unô
 *
	$smembîs_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1235 
d©a_unô
 *
du
;

1237 
du
 = 
	`d©a_unô_gë
();

1238 
du
->
dp
 = dp;

1239 
du
->
¨gc
 = 2;

1240 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1241 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1242 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1244  
du
;

1245 
	}
}

1247 
d©a_unô
 *
	$sˇrd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1249 
d©a_unô
 *
du
;

1251 
du
 = 
	`d©a_unô_gë
();

1252 
du
->
dp
 = dp;

1253 
du
->
¨gc
 = 2;

1254 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1255 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1256 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1258  
du
;

1259 
	}
}

1261 
d©a_unô
 *
	$§em_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1263 
d©a_unô
 *
du
;

1264 
j
, 
fõld_Àngth
;

1266 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1268 
du
 = 
	`d©a_unô_gë
();

1269 
du
->
dp
 = dp;

1270 
du
->
¨gc
 = 2+
fõld_Àngth
;

1271 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1272 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1273 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1274 
j
 = 0; j < 
fõld_Àngth
; j ++) {

1275 
du
->
¨gv
[2+
j
] = 
	`gë_øndom_°rög
();

1278  
du
;

1279 
	}
}

1281 
d©a_unô
 *
	$sismembî_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1283 
d©a_unô
 *
du
;

1285 
du
 = 
	`d©a_unô_gë
();

1286 
du
->
dp
 = dp;

1287 
du
->
¨gc
 = 3;

1288 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1289 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1290 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1291 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1293  
du
;

1294 
	}
}

1296 
d©a_unô
 *
	$suni⁄_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1298 
d©a_unô
 *
du
;

1300 
du
 = 
	`d©a_unô_gë
();

1301 
du
->
dp
 = dp;

1302 
du
->
¨gc
 = 2;

1303 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1304 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1305 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1307  
du
;

1308 
	}
}

1310 
d©a_unô
 *
	$sdiff_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1312 
d©a_unô
 *
du
;

1314 
du
 = 
	`d©a_unô_gë
();

1315 
du
->
dp
 = dp;

1316 
du
->
¨gc
 = 2;

1317 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1318 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1319 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1321  
du
;

1322 
	}
}

1324 
d©a_unô
 *
	$söãr_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1326 
d©a_unô
 *
du
;

1328 
du
 = 
	`d©a_unô_gë
();

1329 
du
->
dp
 = dp;

1330 
du
->
¨gc
 = 2;

1331 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1332 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1333 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1335  
du
;

1336 
	}
}

1339 
	$Õush_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1341 i‡(
ª∂y
 =
NULL
)  0;

1343 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1348 
	}
}

1350 
d©a_unô
 *
	$zadd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1352 
d©a_unô
 *
du
;

1353 
j
, 
fõld_Àngth
;

1355 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1357 
du
 = 
	`d©a_unô_gë
();

1358 
du
->
dp
 = dp;

1359 
du
->
¨gc
 = 2+
fõld_Àngth
*2;

1360 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1361 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1362 
du
->
¨gv
[1] = 
	`gë_øndom_key
();

1364 
j
 = 2; j < 2+
fõld_Àngth
*2; j += 2) {

1365 
du
->
¨gv
[
j
] = 
	`gë_øndom_Êﬂt_°r
();

1366 
du
->
¨gv
[
j
+1] = 
	`gë_øndom_°rög
();

1369  
du
;

1370 
	}
}

1373 
	$zadd_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1375 i‡(
ª∂y
 =
NULL
)  0;

1377 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1382 
	}
}

1384 
d©a_unô
 *
	$zö¸by_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1386 
d©a_unô
 *
du
;

1387 
j
, 
fõld_Àngth
;

1389 
du
 = 
	`d©a_unô_gë
();

1390 
du
->
dp
 = dp;

1391 
du
->
¨gc
 = 4;

1392 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1393 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1394 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1395 
du
->
¨gv
[2] = 
	`gë_øndom_Êﬂt_°r
();;

1396 
du
->
¨gv
[3] = 
	`gë_øndom_°rög
();

1398  
du
;

1399 
	}
}

1402 
	$zö¸by_cmd_nck
(
ªdisRïly
 *
ª∂y
)

1404 i‡(
ª∂y
 =
NULL
)  0;

1406 i‡(
ª∂y
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

1411 
	}
}

1413 
d©a_unô
 *
	$zønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1415 
d©a_unô
 *
du
;

1416 
j
, 
fõld_Àngth
;

1417 
wôhsc‹es
;

1419 i‡(
	`ønd
()%2 == 1) {

1420 
wôhsc‹es
 = 1;

1422 
wôhsc‹es
 = 0;

1425 
du
 = 
	`d©a_unô_gë
();

1426 
du
->
dp
 = dp;

1427 
du
->
¨gc
 = 
wôhsc‹es
?5:4;

1428 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1429 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1430 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1431 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(0);

1432 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%10000);

1433 i‡(
wôhsc‹es
Ë
du
->
¨gv
[4] = 
	`sd¢ew
("withscores");

1435  
du
;

1436 
	}
}

1438 
d©a_unô
 *
	$zªvønge_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1440 
d©a_unô
 *
du
;

1441 
j
, 
fõld_Àngth
;

1442 
wôhsc‹es
;

1444 i‡(
	`ønd
()%2 == 1) {

1445 
wôhsc‹es
 = 1;

1447 
wôhsc‹es
 = 0;

1450 
du
 = 
	`d©a_unô_gë
();

1451 
du
->
dp
 = dp;

1452 
du
->
¨gc
 = 
wôhsc‹es
?5:4;

1453 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1454 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1455 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1456 
du
->
¨gv
[2] = 
	`sds‰oml⁄gl⁄g
(0);

1457 
du
->
¨gv
[3] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_öt
()%10000);

1458 i‡(
wôhsc‹es
Ë
du
->
¨gv
[4] = 
	`sd¢ew
("withscores");

1460  
du
;

1461 
	}
}

1463 
d©a_unô
 *
	$zªm_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1465 
d©a_unô
 *
du
;

1466 
j
, 
fõld_Àngth
;

1468 
fõld_Àngth
 = 
	`gë_øndom_fõld_Àn
();

1470 
du
 = 
	`d©a_unô_gë
();

1471 
du
->
dp
 = dp;

1472 
du
->
¨gc
 = 2+
fõld_Àngth
;

1473 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1474 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1475 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1477 
j
 = 2; j < 2+
fõld_Àngth
; j ++) {

1478 
du
->
¨gv
[
j
] = 
	`gë_øndom_°rög
();

1481  
du
;

1482 
	}
}

1484 
d©a_unô
 *
	$zˇrd_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1486 
d©a_unô
 *
du
;

1488 
du
 = 
	`d©a_unô_gë
();

1489 
du
->
dp
 = dp;

1490 
du
->
¨gc
 = 2;

1491 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1492 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1493 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1495  
du
;

1496 
	}
}

1498 
d©a_unô
 *
	$zcou¡_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1500 
d©a_unô
 *
du
;

1501 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1503 
du
 = 
	`d©a_unô_gë
();

1504 
du
->
dp
 = dp;

1505 
du
->
¨gc
 = 4;

1506 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1507 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1508 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1509 
du
->
¨gv
[2] = 
ønge
[0];

1510 
du
->
¨gv
[3] = 
ønge
[1];

1512 
	`‰ì
(
ønge
);

1513  
du
;

1514 
	}
}

1516 
d©a_unô
 *
	$zøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1518 
d©a_unô
 *
du
;

1519 
idx
 = 0, 
¨g_cou¡
 = 0;

1520 
wôhsc‹es
,
limô
;

1521 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1523 
¨g_cou¡
 = 4;

1524 i‡(
	`ønd
()%2 == 1) {

1525 
wôhsc‹es
 = 1;

1526 
¨g_cou¡
 ++;

1528 
wôhsc‹es
 = 0;

1530 i‡(
	`ønd
()%2 == 1) {

1531 
limô
 = 1;

1532 
¨g_cou¡
 += 3;

1534 
limô
 = 0;

1537 
du
 = 
	`d©a_unô_gë
();

1538 
du
->
dp
 = dp;

1539 
du
->
¨gc
 = 
¨g_cou¡
;

1540 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1541 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
(
dp
->
«me
);

1542 
du
->
¨gv
[
idx
++] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1543 
du
->
¨gv
[
idx
++] = 
ønge
[0];

1544 
du
->
¨gv
[
idx
++] = 
ønge
[1];

1545 i‡(
wôhsc‹es
Ë
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("withscores");

1546 i‡(
limô
) {

1547 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("limit");

1548 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1549 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1552 
	`ASSERT
(
¨g_cou¡
 =
idx
);

1554 
	`‰ì
(
ønge
);

1555  
du
;

1556 
	}
}

1558 
d©a_unô
 *
	$zªvøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1560 
d©a_unô
 *
du
;

1561 
idx
 = 0, 
¨g_cou¡
 = 0;

1562 
wôhsc‹es
,
limô
;

1563 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1565 
¨g_cou¡
 = 4;

1566 i‡(
	`ønd
()%2 == 1) {

1567 
wôhsc‹es
 = 1;

1568 
¨g_cou¡
 ++;

1570 
wôhsc‹es
 = 0;

1572 i‡(
	`ønd
()%2 == 1) {

1573 
limô
 = 1;

1574 
¨g_cou¡
 += 3;

1576 
limô
 = 0;

1579 
du
 = 
	`d©a_unô_gë
();

1580 
du
->
dp
 = dp;

1581 
du
->
¨gc
 = 
¨g_cou¡
;

1582 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1583 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
(
dp
->
«me
);

1584 
du
->
¨gv
[
idx
++] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1585 
du
->
¨gv
[
idx
++] = 
ønge
[0];

1586 
du
->
¨gv
[
idx
++] = 
ønge
[1];

1587 i‡(
wôhsc‹es
Ë
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("withscores");

1588 i‡(
limô
) {

1589 
du
->
¨gv
[
idx
++] = 
	`sd¢ew
("limit");

1590 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1591 
du
->
¨gv
[
idx
++] = 
	`sds‰oml⁄gl⁄g
(
	`gë_øndom_unsig√d_öt
());

1594 
	`ASSERT
(
¨g_cou¡
 =
idx
);

1596 
	`‰ì
(
ønge
);

1597  
du
;

1598 
	}
}

1600 
d©a_unô
 *
	$zønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1602 
d©a_unô
 *
du
;

1604 
du
 = 
	`d©a_unô_gë
();

1605 
du
->
dp
 = dp;

1606 
du
->
¨gc
 = 3;

1607 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1608 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1609 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1610 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1612  
du
;

1613 
	}
}

1615 
d©a_unô
 *
	$zªvønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1617 
d©a_unô
 *
du
;

1619 
du
 = 
	`d©a_unô_gë
();

1620 
du
->
dp
 = dp;

1621 
du
->
¨gc
 = 3;

1622 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1623 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1624 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1625 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1627  
du
;

1628 
	}
}

1630 
d©a_unô
 *
	$zsc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1632 
d©a_unô
 *
du
;

1634 
du
 = 
	`d©a_unô_gë
();

1635 
du
->
dp
 = dp;

1636 
du
->
¨gc
 = 3;

1637 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1638 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1639 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1640 
du
->
¨gv
[2] = 
	`gë_øndom_°rög
();

1642  
du
;

1643 
	}
}

1645 
d©a_unô
 *
	$zªmøngebysc‹e_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1647 
d©a_unô
 *
du
;

1648 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_SCORE
);

1650 
du
 = 
	`d©a_unô_gë
();

1651 
du
->
dp
 = dp;

1652 
du
->
¨gc
 = 4;

1653 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1654 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1655 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1656 
du
->
¨gv
[2] = 
ønge
[0];

1657 
du
->
¨gv
[3] = 
ønge
[1];

1659 
	`‰ì
(
ønge
);

1660  
du
;

1661 
	}
}

1663 
d©a_unô
 *
	$zªmøngebyønk_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1665 
d©a_unô
 *
du
;

1666 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_RANK
);

1668 
du
 = 
	`d©a_unô_gë
();

1669 
du
->
dp
 = dp;

1670 
du
->
¨gc
 = 4;

1671 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1672 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1673 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1674 
du
->
¨gv
[2] = 
ønge
[0];

1675 
du
->
¨gv
[3] = 
ønge
[1];

1677 
	`‰ì
(
ønge
);

1678  
du
;

1679 
	}
}

1681 
d©a_unô
 *
	$zªmøngebyÀx_cmd_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
¥odu˚_scheme
 *
ps
)

1683 
d©a_unô
 *
du
;

1684 
sds
 *
ønge
 = 
	`gë_øndom_z£t_ønge_mö_max_°r
(
ZSET_RANGE_MIN_MAX_TYPE_LEX
);

1686 
du
 = 
	`d©a_unô_gë
();

1687 
du
->
dp
 = dp;

1688 
du
->
¨gc
 = 4;

1689 
du
->
¨gv
 = 
	`mÆloc
(du->
¨gc
*(
sds
));

1690 
du
->
¨gv
[0] = 
	`sd¢ew
(
dp
->
«me
);

1691 
du
->
¨gv
[1] = 
	`gë_øndom_key_wôh_hô_øtio
(
ps
,
dp
);

1692 
du
->
¨gv
[2] = 
ønge
[0];

1693 
du
->
¨gv
[3] = 
ønge
[1];

1695 
	`‰ì
(
ønge
);

1696  
du
;

1697 
	}
}

1699 
	g¥odu˚rs_cou¡
;

1700 
d©a_¥odu˚r
 
	gªdis_d©a_¥odu˚r_èbÀ
[] = {

1702 {"dñ",
dñ_cmd_¥odu˚r
,-2,"w",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_KEY
,NULL},

1703 {"exi°s",
exi°s_cmd_¥odu˚r
,-2,"rF",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_KEY
,NULL},

1704 {"âl",
âl_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1705 {"±é",
±é_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1706 {"expúe",
expúe_cmd_¥odu˚r
,3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1707 {"expúót",
expúót_cmd_¥odu˚r
,3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,NULL},

1709 {"gë",
gë_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1710 {"£t",
£t_cmd_¥odu˚r
,-3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_ok
},

1711 {"£äx",
£äx_cmd_¥odu˚r
,3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
£äx_cmd_nck
},

1712 {"£ãx",
£ãx_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,
nck_whí_ok
},

1713 {"p£ãx",
p£ãx_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_EXPIRE
,
nck_whí_ok
},

1714 {"ö¸",
ö¸_cmd_¥odu˚r
,2,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1715 {"de¸",
de¸_cmd_¥odu˚r
,2,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1716 {"ö¸by",
ö¸by_cmd_¥odu˚r
,3,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1717 {"de¸by",
de¸by_cmd_¥odu˚r
,3,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1718 {"≠≥nd",
≠≥nd_cmd_¥odu˚r
,3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
≠≥nd_cmd_nck
},

1719 {"°æí",
°æí_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1720 {"gë£t",
gë£t_cmd_¥odu˚r
,3,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_n€º‹
},

1721 {"ö¸byÊﬂt",
ö¸byÊﬂt_cmd_¥odu˚r
,3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_°r
},

1722 {"£tbô",
£tbô_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_zîo_‹_⁄e
},

1723 {"gëbô",
gëbô_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1724 {"£å™ge",
£å™ge_cmd_¥odu˚r
,4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,
nck_whí_n⁄zîo_unsig√d_öãgî
},

1725 {"gëønge",
gëønge_cmd_¥odu˚r
,4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1726 {"bôcou¡",
bôcou¡_cmd_¥odu˚r
,-2,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1727 {"bôpos",
bôpos_cmd_¥odu˚r
,-3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_STRING
,NULL},

1728 {"mgë",
mgë_cmd_¥odu˚r
,-2,"r",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_STRING
,NULL},

1729 {"m£t",
m£t_cmd_¥odu˚r
,-3,"wmA",0,
NULL
,1,-1,2,
TEST_CMD_TYPE_STRING
,
nck_whí_ok
},

1731 {"h£t",
h£t_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_⁄e
},

1732 {"hgë",
hgë_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1733 {"hÀn",
hÀn_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1734 {"hdñ",
hdñ_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1735 {"hexi°s",
hexi°s_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1736 {"hkeys",
hkeys_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1737 {"hvÆs",
hvÆs_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1738 {"hgëÆl",
hgëÆl_cmd_¥odu˚r
,2,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1739 {"hö¸by",
hö¸by_cmd_¥odu˚r
,4,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1740 {"hö¸byÊﬂt",
hö¸byÊﬂt_cmd_¥odu˚r
,4,"wmF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1741 {"hmgë",
hmgë_cmd_¥odu˚r
,-3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1742 {"hm£t",
hm£t_cmd_¥odu˚r
,-4,"wmA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_ok
},

1743 {"h£äx",
h£äx_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,
nck_whí_⁄e
},

1744 {"h°æí",
h°æí_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_HASH
,NULL},

1746 {"Ωush",
Ωush_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,
Ωush_cmd_nck
},

1747 {"Õush",
Õush_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,
Õush_cmd_nck
},

1748 {"Ã™ge",
Ã™ge_cmd_¥odu˚r
,4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1749 {"Ω›",
Ω›_cmd_¥odu˚r
,2,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1750 {"Õ›",
Õ›_cmd_¥odu˚r
,2,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1751 {"Œí",
Œí_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1752 {"Ãem",
Ãem_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1753 {"…rim",
…rim_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1754 {"lödex",
lödex_cmd_¥odu˚r
,3,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1755 {"l£t",
l£t_cmd_¥odu˚r
,4,"wm",0,
NULL
,1,1,1,
TEST_CMD_TYPE_LIST
,NULL},

1757 {"ßdd",
ßdd_cmd_¥odu˚r
,-3,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,
nck_whí_unsig√d_öãgî
},

1758 {"smembîs",
smembîs_cmd_¥odu˚r
,2,"rS",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1759 {"sˇrd",
sˇrd_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1760 {"§em",
§em_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1761 {"sismembî",
sismembî_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_SET
,NULL},

1762 {"suni⁄",
suni⁄_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1763 {"sdiff",
sdiff_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1764 {"söãr",
söãr_cmd_¥odu˚r
,-2,"rS",0,
NULL
,1,-1,1,
TEST_CMD_TYPE_SET
,NULL},

1766 {"zadd",
zadd_cmd_¥odu˚r
,-4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,
zadd_cmd_nck
},

1767 {"zö¸by",
zö¸by_cmd_¥odu˚r
,4,"wmFA",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,
zö¸by_cmd_nck
},

1768 {"zønge",
zønge_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1769 {"zªvønge",
zªvønge_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1770 {"zªm",
zªm_cmd_¥odu˚r
,-3,"wF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1771 {"zˇrd",
zˇrd_cmd_¥odu˚r
,2,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1772 {"zcou¡",
zcou¡_cmd_¥odu˚r
,4,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1773 {"zøngebysc‹e",
zøngebysc‹e_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1774 {"zªvøngebysc‹e",
zªvøngebysc‹e_cmd_¥odu˚r
,-4,"r",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1775 {"zønk",
zønk_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1776 {"zªvønk",
zªvønk_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1777 {"zsc‹e",
zsc‹e_cmd_¥odu˚r
,3,"rF",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1778 {"zªmøngebysc‹e",
zªmøngebysc‹e_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL},

1779 {"zªmøngebyønk",
zªmøngebyønk_cmd_¥odu˚r
,4,"w",0,
NULL
,1,1,1,
TEST_CMD_TYPE_ZSET
,NULL}

1782 
d©a_unô
 *
	$d©a_unô_gë
()

1784 
d©a_unô
 *
du
 = 
	`mÆloc
((data_unit));

1785 
du
->
dp
 = 
NULL
;

1786 
du
->
¨gc
 = 0;

1787 
du
->
¨gv
 = 
NULL
;

1788 
du
->
hashvÆue
 = 0;

1789 
du
->
d©a
 = 
NULL
;

1790  
du
;

1791 
	}
}

1793 
	$d©a_unô_put
(
d©a_unô
 *
du
)

1795 
idx
;

1797 
idx
 = 0; idx < 
du
->
¨gc
; idx ++) {

1798 i‡(
du
->
¨gv
[
idx
])

1799 
	`sds‰ì
(
du
->
¨gv
[
idx
]);

1801 
	`‰ì
(
du
->
¨gv
);

1802 
	`‰ì
(
du
);

1803 
	}
}

1805 
¥odu˚_scheme
 *
	$¥odu˚_scheme_¸óã
(
max_ˇched_keys
, 
hô_øtio
)

1807 
¥odu˚_scheme
 *
ps
;

1808 
cou¡
, 
idx
;

1809 
øtio
;

1811 
ps
 = 
	`mÆloc
((*ps));

1812 i‡(
ps
 =
NULL
)  NULL;

1813 
ps
->
k˝s
 = 
NULL
;

1814 
ps
->
hô_øtio_¨øy
 = 
NULL
;

1816 
ps
->
k˝s
 = 
	`d¨øy_¸óã
(
PRODUCE_KEY_CACHE_POOL_COUNT
,(
key_ˇche_¨øy
 *));

1817 
idx
 = 0; idx < 
PRODUCE_KEY_CACHE_POOL_COUNT
; idx ++) {

1818 
key_ˇche_¨øy
 **
k˝
 = 
	`d¨øy_push
(
ps
->
k˝s
);

1819 *
k˝
 = 
	`key_ˇche_¨øy_¸óã
(
max_ˇched_keys
/
PRODUCE_KEY_CACHE_POOL_COUNT
);

1820 i‡(*
k˝
 =
NULL
) {

1821  
NULL
;

1826 
ps
->
hô_øtio_¨øy_Àn
 = 100;

1827 
ps
->
hô_øtio
 = hit_ratio;

1828 
ps
->
hô_øtio_idx
 = 0;

1829 
ps
->
hô_øtio_¨øy
 = 
	`mÆloc
’s->
hô_øtio_¨øy_Àn
*());

1830 
øtio
 = 
ps
->
hô_øtio_¨øy_Àn
/ps->
hô_øtio
;

1831 i‡(
øtio
 > 1) {

1832 
cou¡
 = 
ps
->
hô_øtio
;

1833 
idx
 = 0; idx < 
ps
->
hô_øtio_¨øy_Àn
; idx ++) {

1834 
ps
->
hô_øtio_¨øy
[
idx
] = 0;

1837 
cou¡
 = 
ps
->
hô_øtio_¨øy_Àn
 -Ös->
hô_øtio
;

1838 
idx
 = 0; idx < 
ps
->
hô_øtio_¨øy_Àn
; idx ++) {

1839 
ps
->
hô_øtio_¨øy
[
idx
] = 1;

1842 
cou¡
 > 0) {

1843 
idx
 = 
	`ønd
()%
ps
->
hô_øtio_¨øy_Àn
;

1844 i‡(
øtio
 > 1) {

1845 i‡(
ps
->
hô_øtio_¨øy
[
idx
] == 0) {

1846 
cou¡
 --;

1847 
ps
->
hô_øtio_¨øy
[
idx
] = 1;

1850 i‡(
ps
->
hô_øtio_¨øy
[
idx
] == 1) {

1851 
cou¡
 --;

1852 
ps
->
hô_øtio_¨øy
[
idx
] = 0;

1857  
ps
;

1858 
	}
}

1860 
	$¥odu˚_scheme_de°roy
(
¥odu˚_scheme
 *
ps
)

1862 
j
;

1863 i‡(
ps
->
k˝s
) {

1864 
j
 = 0; j < 
PRODUCE_KEY_CACHE_POOL_COUNT
; j ++) {

1865 
key_ˇche_¨øy
 **
k˝
 = 
	`d¨øy_p›
(
ps
->
k˝s
);

1866 i‡(*
k˝
)
	`key_ˇche_¨øy_de°roy
(*kcp);

1868 
	`d¨øy_de°roy
(
ps
->
k˝s
);

1871 
	`‰ì
(
ps
->
hô_øtio_¨øy
);

1873 
	`‰ì
(
ps
);

1874 
	}
}

1876 
	$gë_k˝_idx
(
ty≥
)

1878 
idx
;

1880 
ty≥
)

1882 
TEST_CMD_TYPE_STRING
:

1883 
idx
 = 0;

1886 
TEST_CMD_TYPE_LIST
:

1887 
idx
 = 1;

1890 
TEST_CMD_TYPE_SET
:

1891 
idx
 = 2;

1894 
TEST_CMD_TYPE_ZSET
:

1895 
idx
 = 3;

1898 
TEST_CMD_TYPE_HASH
:

1899 
idx
 = 4;

1903 
idx
 = -1;

1907  
idx
;

1908 
	}
}

1910 
	$£t_n⁄_em±y_k˝s_idx
()

1912 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_STRING
) {

1913 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1914 
	`gë_k˝_idx
(
TEST_CMD_TYPE_STRING
);

1916 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_LIST
) {

1917 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1918 
	`gë_k˝_idx
(
TEST_CMD_TYPE_LIST
);

1920 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_SET
) {

1921 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1922 
	`gë_k˝_idx
(
TEST_CMD_TYPE_SET
);

1924 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_ZSET
) {

1925 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1926 
	`gë_k˝_idx
(
TEST_CMD_TYPE_ZSET
);

1928 i‡(
cmd_ty≥
&
TEST_CMD_TYPE_HASH
) {

1929 
n⁄_em±y_k˝s_idx
[
n⁄_em±y_k˝s_cou¡
++] =

1930 
	`gë_k˝_idx
(
TEST_CMD_TYPE_HASH
);

1932 
	}
}

1935 
key_ˇche_¨øy
 *
	$k˝_gë_‰om_ps
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
)

1937 
idx
;

1938 
key_ˇche_¨øy
 **
k˝
;

1940 i‡(
ps
 =
NULL
 ||Ös->
k˝s
 =NULL || 
dp
 == NULL)  NULL;

1942 i‡(
dp
->
cmd_ty≥
 =
TEST_CMD_TYPE_KEY
) {

1943 i‡(
n⁄_em±y_k˝s_cou¡
==0) {

1944 
idx
 = -1;

1946 
idx
 = 
	`ønd
()%
n⁄_em±y_k˝s_cou¡
;

1947 
idx
 = 
n⁄_em±y_k˝s_idx
[idx];

1948 
	`ASSERT
(
idx
 >= 0);

1951 
idx
 = 
	`gë_k˝_idx
(
dp
->
cmd_ty≥
);

1954 i‡(
idx
 >
PRODUCE_KEY_CACHE_POOL_COUNT
 || idx < 0) {

1955  
NULL
;

1958 
k˝
 = 
	`d¨øy_gë
(
ps
->
k˝s
, 
idx
);

1960  *
k˝
;

1961 
	}
}

1963 
	$vπ_¥odu˚_thªads_öô
(
¥odu˚_thªads_cou¡
,

1964 
ˇched_keys
, 
hô_øtio
)

1966 
idx
;

1967 
	`d¨øy_öô
(&
¥odu˚_thªads
, 
¥odu˚_thªads_cou¡
, (
¥odu˚_thªad
));

1968 
¥odu˚_d©a_thªads_cou¡
 = 
¥odu˚_thªads_cou¡
;

1969 
idx
 = 0; idx < 
¥odu˚_thªads_cou¡
; idx ++) {

1970 
¥odu˚_thªad
 *
±
 = 
	`d¨øy_push
(&
¥odu˚_thªads
);

1971 
±
->
id
 = 
idx
;

1972 
±
->
thªad_id
 = 0;

1973 
±
->
ps
 = 
	`¥odu˚_scheme_¸óã
(
ˇched_keys
, 
hô_øtio
);

1974 
±
->
∑u£
 = 0;

1975 
±
->
lo›times
 = 0;

1978  
VRT_OK
;

1979 
	}
}

1981 
	$vπ_¥odu˚_thªads_deöô
()

1983 
¥odu˚_thªad
 *
±
;

1984 
	`d¨øy_n
(&
¥odu˚_thªads
) > 0) {

1985 
±
 = 
	`d¨øy_p›
(&
¥odu˚_thªads
);

1986 i‡(
±
->
ps
) {

1987 
	`¥odu˚_scheme_de°roy
(
±
->
ps
);

1988 
±
->
ps
 = 
NULL
;

1991 
	`d¨øy_deöô
(&
¥odu˚_thªads
);

1992 
	}
}

1994 *
	$vπ_¥odu˚_thªad_run
(*
¨gs
)

1996 
ªt
;

1997 
¥odu˚_thªad
 *
±
 = 
¨gs
;

1998 
idx
, 
j
;

1999 
d©a_¥odu˚r
 **
dp
;

2000 
d©a_unô
 *
du
;

2002 
	`§™d
(
	`vπ_u£c_now
()^()
	`±hªad_£lf
());

2006 i‡(
±
->
∑u£
) {

2007 
	`u¶ìp
(1000000);

2008 i‡(!
	`ã°_if_√ed_∑u£
()) {

2009 
±
->
∑u£
 = 0;

2013 } i‡(
±
->
lo›times
%10000 == 0) {

2014 i‡(
	`ã°_if_√ed_∑u£
()) {

2015 
±
->
∑u£
 = 1;

2016 
	`⁄e_¥odu˚_thªad_∑u£d
();

2021 
idx
 = 
	`ønd
()%
√eded_cmd_ty≥_¥odu˚r_cou¡
;

2022 
dp
 = 
	`d¨øy_gë
(&
√eded_cmd_ty≥_¥odu˚r
,
idx
);

2023 
du
 = (*
dp
)->
	`¥oc
(*dp,
±
->
ps
);

2025 
du
->
d©a
 = 
±
->
ps
;

2028 
ªt
 = 
	`d©a_di•©ch
(
du
);

2029 i‡(
ªt
 == -1) {

2030 
	`d©a_unô_put
(
du
);

2031 } i‡(
ªt
 == 1) {

2032 
	`u¶ìp
(100000);

2035 
±
->
lo›times
 ++;

2038  
NULL
;

2039 
	}
}

2041 
	$add_to_√eded_cmd_ty≥_¥odu˚r
(
d©a_¥odu˚r
 *
dp
)

2043 
d©a_¥odu˚r
 **
dp_ñem
 = 
	`d¨øy_push
(&
√eded_cmd_ty≥_¥odu˚r
);

2045 *
dp_ñem
 = 
dp
;

2046 
√eded_cmd_ty≥_¥odu˚r_cou¡
 ++;

2048  
VRT_OK
;

2049 
	}
}

2051 
	$vπ_¥odu˚_d©a_öô
(
key_Àngth_ønge_mö
,
key_Àngth_ønge_max
,

2052 
°rög_max_Àngth
,
fõlds_max_cou¡
,

2053 
¥odu˚_cmd_ty≥s
,
d¨øy
 *
¥odu˚_cmd_bœckli°
,d¨øy *
¥odu˚_cmd_whôñi°
,

2054 
¥odu˚_thªads_cou¡
,
ˇched_keys
,

2055 
hô_øtio
)

2057 
j
, 
k
;

2059 
key_Àngth_mö
 = 
key_Àngth_ønge_mö
;

2060 
key_Àngth_max
 = 
key_Àngth_ønge_max
;

2061 i‡(
key_Àngth_max
 < 
key_Àngth_mö
Ë 
VRT_ERROR
;

2062 
key_Àngth_ønge_g≠
 = 
key_Àngth_max
-
key_Àngth_mö
;

2063 
fõld_Àngth_max
 = 
fõlds_max_cou¡
;

2064 
°rög_Àngth_max
 = 
°rög_max_Àngth
;

2065 
cmd_ty≥
 = 
¥odu˚_cmd_ty≥s
;

2066 
	`d¨øy_öô
(&
√eded_cmd_ty≥_¥odu˚r
, 100, (
d©a_¥odu˚r
*));

2068 
¥odu˚rs_cou¡
 = (
ªdis_d©a_¥odu˚r_èbÀ
)/(
d©a_¥odu˚r
);

2069 
j
 = 0; j < 
¥odu˚rs_cou¡
; j++) {

2070 
d©a_¥odu˚r
 *
dp
 = 
ªdis_d©a_¥odu˚r_èbÀ
+
j
;

2071 *
f
 = 
dp
->
sÊags
;

2073 *
f
 != '\0') {

2074 *
f
) {

2075 'w': 
dp
->
Êags
 |
PRO_WRITE
; ;

2076 'r': 
dp
->
Êags
 |
PRO_READONLY
; ;

2077 'm': 
dp
->
Êags
 |
PRO_DENYOOM
; ;

2078 'a': 
dp
->
Êags
 |
PRO_ADMIN
; ;

2079 'p': 
dp
->
Êags
 |
PRO_PUBSUB
; ;

2080 's': 
dp
->
Êags
 |
PRO_NOSCRIPT
; ;

2081 'R': 
dp
->
Êags
 |
PRO_RANDOM
; ;

2082 'S': 
dp
->
Êags
 |
PRO_SORT_FOR_SCRIPT
; ;

2083 'l': 
dp
->
Êags
 |
PRO_LOADING
; ;

2084 't': 
dp
->
Êags
 |
PRO_STALE
; ;

2085 'M': 
dp
->
Êags
 |
PRO_SKIP_MONITOR
; ;

2086 'k': 
dp
->
Êags
 |
PRO_ASKING
; ;

2087 'F': 
dp
->
Êags
 |
PRO_FAST
; ;

2088 'A': 
dp
->
Êags
 |
PRO_ADD
; ;

2089 :  
VRT_ERROR
;

2091 
f
++;

2094 i‡(
dñëe_d©a_¥odu˚r
 =
NULL
 &&

2095 !
	`°rcmp
(
dp
->
«me
,"del")) {

2096 
dñëe_d©a_¥odu˚r
 = 
dp
;

2099 i‡(
¥odu˚_cmd_whôñi°
 !
NULL
) {

2100 
k
 = 0; k < 
	`d¨øy_n
(
¥odu˚_cmd_whôñi°
); k ++) {

2101 
sds
 *
cmd«me
 = 
	`d¨øy_gë
(
¥odu˚_cmd_whôñi°
, 
k
);

2102 i‡(!
	`°rˇ£cmp
(
dp
->
«me
,*
cmd«me
)) {

2103 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2111 i‡(
¥odu˚_cmd_bœckli°
 !
NULL
) {

2112 
is_ö_bœckli°
 = 0;

2113 
k
 = 0; k < 
	`d¨øy_n
(
¥odu˚_cmd_bœckli°
); k ++) {

2114 
sds
 *
cmd«me
 = 
	`d¨øy_gë
(
¥odu˚_cmd_bœckli°
, 
k
);

2115 i‡(!
	`°rˇ£cmp
(
dp
->
«me
,*
cmd«me
)) {

2116 
is_ö_bœckli°
 = 1;

2121 i‡(
is_ö_bœckli°
) {

2127 i‡(
dp
->
cmd_ty≥
&cmd_type) {

2128 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2130 i‡(
dp
->
cmd_ty≥
&
TEST_CMD_TYPE_EXPIRE
 && 
expúe_íabÀd
) {

2131 
	`add_to_√eded_cmd_ty≥_¥odu˚r
(
dp
);

2135 
	`£t_n⁄_em±y_k˝s_idx
();

2137 i‡(
	`d¨øy_n
(&
√eded_cmd_ty≥_¥odu˚r
) == 0) {

2138 
	`log_îr‹
("No commandÇeedÅoÅest");

2139  
VRT_ERROR
;

2142 i‡(
dñëe_d©a_¥odu˚r
 =
NULL
) {

2143  
VRT_ERROR
;

2146 i‡(
√eded_cmd_ty≥_¥odu˚r_cou¡
 == 0) {

2147  
VRT_ERROR
;

2150 
j
 = 0; j < 
√eded_cmd_ty≥_¥odu˚r_cou¡
; j ++) {

2151 
d©a_¥odu˚r
 **
dp_ñem
 = 
	`d¨øy_gë
(&
√eded_cmd_ty≥_¥odu˚r
,
j
);

2152 
	`log_debug
(
LOG_INFO
, "√ededÅe° comm™d[%d]: %s", 
j
, (*
dp_ñem
)->
«me
);

2155 
	`vπ_¥odu˚_thªads_öô
(
¥odu˚_thªads_cou¡
, 
ˇched_keys
, 
hô_øtio
);

2157  
VRT_OK
;

2158 
	}
}

2160 
	$vπ_¥odu˚_d©a_deöô
()

2162 
	`vπ_¥odu˚_thªads_deöô
();

2164 
√eded_cmd_ty≥_¥odu˚r
.
√Àm
 = 0;

2165 
	`d¨øy_deöô
(&
√eded_cmd_ty≥_¥odu˚r
);

2166 
	}
}

2168 
	$vπ_°¨t_¥odu˚_d©a
()

2170 
i
;

2171 
i
 = 0; i < 
	`d¨øy_n
(&
¥odu˚_thªads
); i ++) {

2172 
±hªad_©å_t
 
©å
;

2173 
¥odu˚_thªad
 *
±
;

2174 
	`±hªad_©å_öô
(&
©å
);

2175 
±
 = 
	`d¨øy_gë
(&
¥odu˚_thªads
, 
i
);

2176 
	`±hªad_¸óã
(&
±
->
thªad_id
,

2177 &
©å
, 
vπ_¥odu˚_thªad_run
, 
±
);

2180 
œ°_ã°_begö_time
 = 
	`vπ_£c_now
();

2181  
VRT_OK
;

2182 
	}
}

2184 
	$vπ_waô_¥odu˚_d©a
()

2186 
i
;

2188 
i
 = 0; i < 
	`d¨øy_n
(&
¥odu˚_thªads
); i ++){

2189 
¥odu˚_thªad
 *
±
 = 
	`d¨øy_gë
(&
¥odu˚_thªads
, 
i
);

2190 
	`±hªad_joö
(
±
->
thªad_id
, 
NULL
);

2193  
VRT_OK
;

2194 
	}
}

2202 *
	$gë_keys_usög_d©a_¥odu˚r_èbÀ
(
d©a_¥odu˚r
 *
dp
,
sds
 *
¨gv
, 
¨gc
, *
numkeys
) {

2203 
j
, 
i
 = 0, 
œ°
, *
keys
;

2205 i‡(
dp
->
fú°key
 == 0) {

2206 *
numkeys
 = 0;

2207  
NULL
;

2209 
œ°
 = 
dp
->
œ°key
;

2210 i‡(
œ°
 < 0Ëœ° = 
¨gc
+last;

2211 
keys
 = 
	`mÆloc
(()*((
œ°
 - 
dp
->
fú°key
)+1));

2212 
j
 = 
dp
->
fú°key
; j <
œ°
; j +dp->
key°ï
) {

2213 
keys
[
i
++] = 
j
;

2215 *
numkeys
 = 
i
;

2216  
keys
;

2217 
	}
}

2230 *
	$gë_keys_‰om_d©a_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
sds
 *
¨gv
, 
¨gc
, *
numkeys
) {

2231 i‡(
dp
->
gëkeys_¥oc
) {

2232  
dp
->
	`gëkeys_¥oc
(dp,
¨gv
,
¨gc
,
numkeys
);

2234  
	`gë_keys_usög_d©a_¥odu˚r_èbÀ
(
dp
,
¨gv
,
¨gc
,
numkeys
);

2236 
	}
}

2238 
sds
 
	$gë_⁄e_key_‰om_d©a_unô
(
d©a_unô
 *
du
)

2240 
numkeys
;

2241 *
keyödex
;

2242 
sds
 
key
;

2244 
keyödex
 = 
	`gë_keys_‰om_d©a_¥odu˚r
(
du
->
dp
,du->
¨gv
,du->
¨gc
,&
numkeys
);

2245 i‡(
numkeys
 <= 0) {

2246 
	`NOT_REACHED
();

2247  
NULL
;

2250 
key
 = 
du
->
¨gv
[
keyödex
[0]];

2251 
	`‰ì
(
keyödex
);

2253  
key
;

2254 
	}
}

2256 
	$¥öt_¥odu˚r_comm™d
(
d©a_unô
 *
du
)

2258 
j
;

2259 
sds
 
cmd
 = 
	`sd£m±y
();

2261 
j
 = 0; j < 
du
->
¨gc
; j ++) {

2262 
cmd
 = 
	`sdsˇtsds
(cmd,
du
->
¨gv
[
j
]);

2263 
cmd
 = 
	`sdsˇt
(cmd," ");

2265 
cmd
 = 
	`sdsˇt
(cmd,"\n");

2266 
	`log_wrôe_Àn
(
cmd
,
	`sd¶í
(cmd));

2267 
	`sds‰ì
(
cmd
);

2268 
	}
}

	@tests/vrt_produce_data.h

1 #i‚de‡
_VRT_PRODUCE_DATA_H_


2 
	#_VRT_PRODUCE_DATA_H_


	)

34 
	#PRO_WRITE
 1

	)

35 
	#PRO_READONLY
 2

	)

36 
	#PRO_DENYOOM
 4

	)

37 
	#PRO_NOT_USED_1
 8

	)

38 
	#PRO_ADMIN
 16

	)

39 
	#PRO_PUBSUB
 32

	)

40 
	#PRO_NOSCRIPT
 64

	)

41 
	#PRO_RANDOM
 128

	)

42 
	#PRO_SORT_FOR_SCRIPT
 256

	)

43 
	#PRO_LOADING
 512

	)

44 
	#PRO_STALE
 1024

	)

45 
	#PRO_SKIP_MONITOR
 2048

	)

46 
	#PRO_ASKING
 4096

	)

47 
	#PRO_FAST
 8192

	)

48 
	#PRO_ADD
 16384

	)

50 
	gd©a_¥odu˚r
;

51 
	g¥odu˚_scheme
;

52 
	gkey_ˇche_¨øy
;

54 
d©a_unô
 *
	tªdis_comm™d_¥oc
(
	td©a_¥odu˚r
 *
	tdp
, 
	t¥odu˚_scheme
 *
	tps
);

55 *
	tªdis_gë_keys_¥oc
(
	td©a_¥odu˚r
 *
	tdp
, 
	tsds
 *
	t¨gv
, 
	t¨gc
, *
	tnumkeys
);

56 
	t¥odu˚_√ed_ˇche_key_¥oc
(
	tªdisRïly
 *
	tª∂y
);

57 
	sd©a_¥odu˚r
 {

58 *
	m«me
;

59 
ªdis_comm™d_¥oc
 *
	m¥oc
;

60 
	m¨ôy
;

62 *
	msÊags
;

63 
	mÊags
;

66 
ªdis_gë_keys_¥oc
 *
	mgëkeys_¥oc
;

68 
	mfú°key
;

69 
	mœ°key
;

70 
	mkey°ï
;

71 
	mcmd_ty≥
;

72 
¥odu˚_√ed_ˇche_key_¥oc
 *
	m√ed_ˇche_key_¥oc
;

73 } 
	td©a_¥odu˚r
;

75 
	sd©a_unô
 {

76 
d©a_¥odu˚r
 *
	mdp
;

77 
	m¨gc
;

78 
sds
 *
	m¨gv
;

80 
	mhashvÆue
;

82 *
	md©a
;

83 } 
	td©a_unô
;

85 
	s¥odu˚_scheme
 {

86 
d¨øy
 *
	mk˝s
;

88 
	mhô_øtio
;

89 
	mhô_øtio_idx
;

90 
	mhô_øtio_¨øy_Àn
;

91 *
	mhô_øtio_¨øy
;

92 } 
	t¥odu˚_scheme
;

94 
d©a_¥odu˚r
 *
dñëe_d©a_¥odu˚r
;

96 
¥odu˚_d©a_thªads_cou¡
;

98 
¥odu˚_thªads_∑u£_föished_cou¡
;

100 
key_ˇche_¨øy
 *
k˝_gë_‰om_ps
(
¥odu˚_scheme
 *
ps
, 
d©a_¥odu˚r
 *
dp
);

102 
d©a_unô
 *
d©a_unô_gë
();

103 
d©a_unô_put
(
d©a_unô
 *
du
);

105 
vπ_¥odu˚_d©a_öô
(
key_Àngth_ønge_mö
, 
key_Àngth_ønge_max
,

106 
°rög_max_Àngth
,
fõlds_max_cou¡
,

107 
¥odu˚_cmd_ty≥s
,
d¨øy
 *
¥odu˚_cmd_bœckli°
,d¨øy *
¥odu˚_cmd_whôñi°
,

108 
¥odu˚_thªads_cou¡
, 
ˇched_keys
,

109 
hô_øtio
);

110 
vπ_¥odu˚_d©a_deöô
();

112 
vπ_°¨t_¥odu˚_d©a
();

113 
vπ_waô_¥odu˚_d©a
();

115 *
gë_keys_‰om_d©a_¥odu˚r
(
d©a_¥odu˚r
 *
dp
, 
sds
 *
¨gv
, 
¨gc
, *
numkeys
);

117 
sds
 
gë_⁄e_key_‰om_d©a_unô
(
d©a_unô
 *
du
);

119 
¥öt_¥odu˚r_comm™d
(
d©a_unô
 *
du
);

	@tests/vrt_public.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<±hªad.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

13 
	~<d¨øy.h
>

14 
	~<dlog.h
>

16 
	~<vπ_utû.h
>

17 
	~<vπ_public.h
>

20 #i‡
deföed
(
__ATOMIC_RELAXED
)

22 #ñi‡
deföed
(
HAVE_ATOMIC
)

24 
±hªad_muãx_t
 
	g°©e_lockî
 = 
PTHREAD_MUTEX_INITIALIZER
;

27 
	#VIRE_TEST_CONFIG_DEFAULT_EXECUTE_FILE
 "§c/vúe"

	)

29 *
	gexecuã_fûe
 = 
VIRE_TEST_CONFIG_DEFAULT_EXECUTE_FILE
;

31 
sds
 
	gw‹kdú
 = 
NULL
;

33 
	gvúï‹t
 = 55556;

35 
	$£t_execuã_fûe
(*
fûe
)

37 
execuã_fûe
 = 
fûe
;

38 
	}
}

40 
sds
 
	$vúe_c⁄f_¸óã
(*
dú
, 
p‹t
)

42 
sds
 
c⁄f_fûe
;

43 
fd
;

44 
sds
 
löe
;

46 
c⁄f_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.c⁄f",
dú
);

48 
fd
 = 
	`›í
(
c⁄f_fûe
,
O_WRONLY
|
O_CREAT
|
O_TRUNC
,0644);

49 i‡(
fd
 < 0) {

50 
	`ã°_log_îr‹
("O≥¿c⁄‡fûê%†Áûed: %s", 
c⁄f_fûe
, 
	`°ªº‹
(
î∫o
));

51 
	`sds‰ì
(
c⁄f_fûe
);

52  
NULL
;

55 
löe
 = 
	`sd£m±y
();

57 
löe
 = 
	`sdsˇtfmt
÷öe,"p‹à%i\n",
p‹t
);

58 
	`wrôe
(
fd
, 
löe
, 
	`sd¶í
(line));

60 
	`sds˛ór
(
löe
);

61 
löe
 = 
	`sdsˇtfmt
(line,"\n");

62 
	`wrôe
(
fd
, 
löe
, 
	`sd¶í
(line));

64 
	`˛o£
(
fd
);

65 
	`sds‰ì
(
löe
);

66  
c⁄f_fûe
;

67 
	}
}

69 
vúe_ö°™˚
 *
	$vúe_ö°™˚_¸óã
(
p‹t
)

71 
vúe_ö°™˚
 *
vi
;

73 
vi
 = 
	`mÆloc
((
vúe_ö°™˚
));

74 
vi
->
ho°
 = 
NULL
;

75 
vi
->
p‹t
 = 0;

76 
vi
->
dú
 = 
NULL
;

77 
vi
->
c⁄f_fûe
 = 
NULL
;

78 
vi
->
pid_fûe
 = 
NULL
;

79 
vi
->
log_fûe
 = 
NULL
;

80 
vi
->
ru¬ög
 = 0;

81 
vi
->
pid
 = -1;

82 
vi
->
˘x
 = 
NULL
;

84 
vi
->
ho°
 = 
	`sd¢ew
("127.0.0.1");

85 
vi
->
p‹t
 =Öort;

86 
vi
->
dú
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/%i",
w‹kdú
,
p‹t
);

88 i‡(
	`mkdú
(
vi
->
dú
,0755) < 0) {

89 
	`vúe_ö°™˚_de°roy
(
vi
);

90  
NULL
;

93 
vi
->
c⁄f_fûe
 = 
	`vúe_c⁄f_¸óã
(vi->
dú
, 
p‹t
);

94 i‡(
vi
->
c⁄f_fûe
 =
NULL
) {

95 
	`vúe_ö°™˚_de°roy
(
vi
);

96  
NULL
;

99 
vi
->
pid_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.pid",vi->
dú
);

100 
vi
->
log_fûe
 = 
	`sdsˇtfmt
(
	`sd£m±y
(),"%s\/vúe.log",vi->
dú
);

102 
	`ã°_log_debug
("vúêho°: %s", 
vi
->
ho°
);

103 
	`ã°_log_debug
("vúêp‹t: %d", 
vi
->
p‹t
);

104 
	`ã°_log_debug
("vúêdú: %s", 
vi
->
dú
);

105 
	`ã°_log_debug
("vúêc⁄f_fûe: %s", 
vi
->
c⁄f_fûe
);

106 
	`ã°_log_debug
("vúêpid_fûe: %s", 
vi
->
pid_fûe
);

107 
	`ã°_log_debug
("vúêlog_fûe: %s", 
vi
->
log_fûe
);

109  
vi
;

110 
	}
}

112 
	$vúe_ö°™˚_de°roy
(
vúe_ö°™˚
 *
vi
)

114 i‡(
vi
->
ru¬ög
) {

115 
	`vúe_£rvî_°›
(
vi
);

118 i‡(
vi
->
dú
) {

119 
	`de°roy_dú
(
vi
->
dú
);

120 
	`sds‰ì
(
vi
->
dú
);

123 i‡(
vi
->
c⁄f_fûe
) {

124 
	`sds‰ì
(
vi
->
c⁄f_fûe
);

127 i‡(
vi
->
pid_fûe
) {

128 
	`sds‰ì
(
vi
->
pid_fûe
);

131 i‡(
vi
->
log_fûe
) {

132 
	`sds‰ì
(
vi
->
log_fûe
);

135 i‡(
vi
->
˘x
) {

136 
	`ªdisFªe
(
vi
->
˘x
);

139 i‡(
vi
->
ho°
) {

140 
	`sds‰ì
(
vi
->
ho°
);

143 
	`‰ì
(
vi
);

144 
	}
}

146 
	$vúe_£rvî_run
(
vúe_ö°™˚
 *
vi
)

148 
ªt
;

149 
pid_t
 
pid
;

150 
°©us
;

151 
timevÆ
 
timeout
 = { 3, 500000 };

153 i‡((
pid
 = 
	`f‹k
()) < 0) {

154 
	`ã°_log_îr‹
("F‹ká chöd faûed: %s", 
	`°ªº‹
(
î∫o
));

155  
VRT_ERROR
;

156 } i‡(
pid
 == 0) {

157 
ªt
 = 
	`exe˛
(
execuã_fûe
,"vúe","-c",
vi
->
c⁄f_fûe
,

158 "-p",
vi
->
pid_fûe
,"-o",vi->
log_fûe
,"-v","8",
NULL
);

159 i‡(
ªt
 < 0) {

160 
	`ã°_log_îr‹
("Exe˛Åhêvúê£rvî faûed: %s", 
	`°ªº‹
(
î∫o
));

161  
VRT_ERROR
;

166 
	`¶ìp
(1);

168 
ªt
 = 
	`waôpid
(
pid
,
NULL
,
WNOHANG
);

169 i‡(
ªt
 != 0) {

170 
	`ã°_log_debug
("Ru¿vúê£rvî’‹à%dËÁûed",
vi
->
p‹t
);

171  
VRT_ERROR
;

174 
vi
->
˘x
 = 
	`ªdisC⁄√˘WôhTimeout
(vi->
ho°
,vi->
p‹t
,
timeout
);

175 i‡(
vi
->
˘x
 =
NULL
 || vi->˘x->
îr
) {

176 
	`ã°_log_îr‹
("ConnectÅo %s:%d failed: %s",

177 
vi
->
ho°
, vi->
p‹t
, vi->
˘x
?vi->˘x->
îr°r
:"out of memory");

178 i‡(
vi
->
˘x
) {

179 
	`ªdisFªe
(
vi
->
˘x
);

180 
vi
->
˘x
 = 
NULL
;

182  
VRT_ERROR
;

185 
vi
->
pid
 = 
	`gë_pid_‰om_ª∂y
(vi->
˘x
,vi->
ho°
,vi->
p‹t
);

186 i‡(
vi
->
pid
 < 0) {

187 
	`ã°_log_îr‹
("GëÖid from %s:%dÑïlyÉº‹", 
vi
->
ho°
, vi->
p‹t
);

188  
VRT_ERROR
;

189 } i‡(
vi
->
pid
 !=Öid) {

190 
	`ã°_log_îr‹
("Gë wr⁄gÖid from %s:%dÑïly", 
vi
->
ho°
, vi->
p‹t
);

191  
VRT_ERROR
;

194 
	`ã°_log_debug
("Ru¿vúê£rvî’‹à%dËsuc˚ss",
vi
->
p‹t
);

196 
vi
->
ru¬ög
 = 1;

198  
VRT_OK
;

199 
	}
}

201 
	$vúe_£rvî_°›
(
vúe_ö°™˚
 *
vi
)

203 
pid
;

205 i‡(!
vi
->
ru¬ög
) ;

207 i‡(
vi
->
pid
 > 0) {

208 
pid
 = 
vi
->pid;

209 } i‡(
vi
->
pid_fûe
) {

210 
fd
;

211 
pid_°r
[20];

212 
size_t
 
ƒód
;

213 
fd
 = 
	`›í
(
vi
->
pid_fûe
, 
O_RDONLY
);

214 i‡(
fd
 < 0) {

215 
	`ã°_log_îr‹
("O≥¿pid fûê%†Áûed", 
vi
->
pid_fûe
);

218 
ƒód
 = 
	`ªad
(
fd
,
pid_°r
,20);

219 i‡(
	`°rög2l
(
pid_°r
,
ƒód
,&
pid
) == 0) {

220 
	`ã°_log_îr‹
("C⁄vîàpid såög %.*†tÿl⁄g faûed",
ƒód
,
pid_°r
);

224 
pid
 = 
	`gë_pid_‰om_ª∂y
(
vi
->
˘x
, vi->
ho°
, vi->
p‹t
);

227 i‡(
pid
 < 0) {

228 
	`ã°_log_îr‹
("GetÖid failed");

232 
	`kûl
(
pid
,9);

234 
vi
->
ru¬ög
 = 0;

235 
vi
->
pid
 = -1;

236 i‡(
vi
->
˘x
) {

237 
	`ªdisFªe
(
vi
->
˘x
);

238 
vi
->
˘x
 = 
NULL
;

240 
	}
}

242 
	$¸óã_w‹k_dú
()

244 
sds
 
dú«me
;

245 
dú«me
 = 
	`sdsˇtfmt
(
	`sd£m±y
(), "tmp_ã°_%I", 
	`vπ_u£c_now
());

246 
w‹kdú
 = 
	`gëAbsﬁuãP©h
(
dú«me
);

247 
	`sds‰ì
(
dú«me
);

249 i‡(
	`¸óã_dú
(
w‹kdú
Ë!
VRT_OK
) {

250 
	`ã°_log_îr‹
("Cª©êw‹kdú %†Áûed",
w‹kdú
);

251  
VRT_ERROR
;

254 
	`ã°_log_debug
("Cª©êw‹kdú: %s",
w‹kdú
);

256  
VRT_OK
;

257 
	}
}

259 
	$de°roy_w‹k_dú
()

261 i‡(
w‹kdú
 =
NULL
Ë 
VRT_OK
;

263 i‡(
	`de°roy_dú
(
w‹kdú
Ë!
VRT_OK
) {

264 
	`ã°_log_îr‹
("Dñëêthêw‹kdú %†Áûed",
w‹kdú
);

266 
	`ã°_log_debug
("Dñëêthêw‹kdú: %s",
w‹kdú
);

269 
	`sds‰ì
(
w‹kdú
);

270 
w‹kdú
 = 
NULL
;

272  
VRT_OK
;

273 
	}
}

275 
	$gë_√xt_p‹t
()

277 
p‹t
 = 
vúï‹t
;

278 
vúï‹t
 += 11;

280  
p‹t
;

281 
	}
}

283 
vúe_ö°™˚
 *
	$°¨t_⁄e_vúe_ö°™˚
()

285 
ªt
;

286 
ªåy
 = 0;

287 
vúe_ö°™˚
 *
vi
;

289 
vi
 = 
	`vúe_ö°™˚_¸óã
(
	`gë_√xt_p‹t
());

290 i‡(
vi
 =
NULL
) {

291  
NULL
;

294 
ªt
 = 
	`vúe_£rvî_run
(
vi
);

295 
ªt
 !
VRT_OK
 && 
ªåy
++ < 10) {

296 
	`vúe_ö°™˚_de°roy
(
vi
);

297 
vi
 = 
	`vúe_ö°™˚_¸óã
(
	`gë_√xt_p‹t
());

298 i‡(
vi
 =
NULL
) {

299  
NULL
;

301 
ªt
 = 
	`vúe_£rvî_run
(
vi
);

304 i‡(
ªt
 !
VRT_OK
) {

305 
	`vúe_ö°™˚_de°roy
(
vi
);

306  
NULL
;

309  
vi
;

310 
	}
}

312 
	$show_ã°_ªsu…
(
ªsu…
,*
ã°_c⁄ã¡
,*
îrmsg
)

314 i‡(
ªsu…
 =
VRT_TEST_OK
) {

315 
	`ã°_log_out
("[\033[32mOK\033[0m]: %s", 
ã°_c⁄ã¡
);

316 } i‡(
ªsu…
 =
VRT_TEST_ERR
) {

317 
	`ã°_log_out
("[\033[31mERR\033[0m]: %s, \033[33mÁû cau£: %s\033[0m", 
ã°_c⁄ã¡
,

318 (
îrmsg
==
NULL
||
	`°æí
(errmsg)==0)?"unknown":errmsg);

320 
	}
}

323 
key_ˇche_¨øy
 *
	$key_ˇche_¨øy_¸óã
(
max_poﬁ_size
)

325 
idx
;

326 
key_ˇche_¨øy
 *
kˇ
;

329 i‡(
max_poﬁ_size
 < 10Ë 
NULL
;

331 
kˇ
 = 
	`mÆloc
((*kca));

332 i‡(
kˇ
 =
NULL
)  NULL;

334 
kˇ
->
ˇched_keys_cou¡
 = 0;

335 
kˇ
->
ckeys_wrôe_idx
 = 0;

336 
kˇ
->
max_poﬁ_size
 = max_pool_size;

337 
kˇ
->
ckeys
 = 
NULL
;

338 
	`±hªad_muãx_öô
(&
kˇ
->
pmuãx
,
NULL
);

340 
kˇ
->
ckeys
 = 
	`mÆloc
(
max_poﬁ_size
*(
sds
));

341 
idx
 = 0; idx < 
max_poﬁ_size
; idx ++) {

342 
kˇ
->
ckeys
[
idx
] = 
	`sd£m±y
();

345  
kˇ
;

346 
	}
}

348 
	$key_ˇche_¨øy_de°roy
(
key_ˇche_¨øy
 *
kˇ
)

350 
idx
;

352 i‡(
kˇ
 =
NULL
) ;

354 
	`±hªad_muãx_de°roy
(&
kˇ
->
pmuãx
);

356 i‡(
kˇ
->
ckeys
) {

357 
idx
 = 0; idx < 
kˇ
->
max_poﬁ_size
; idx ++) {

358 
	`sds‰ì
(
kˇ
->
ckeys
[
idx
]);

360 
	`‰ì
(
kˇ
->
ckeys
);

363 
	`‰ì
(
kˇ
);

364 
	}
}

366 
	$key_ˇche_¨øy_öput
(
key_ˇche_¨øy
 *
kˇ
, *
key
, 
size_t
 
keyÀn
)

368 i‡(
kˇ
 =
NULL
 || 
key
 =NULL || 
keyÀn
 =0Ë 
VRT_ERROR
;

370 
	`±hªad_muãx_lock
(&
kˇ
->
pmuãx
);

371 
kˇ
->
ckeys
[kˇ->
ckeys_wrôe_idx
]=
	`sds˝yÀn
(kˇ->ckeys[kˇ->ckeys_wrôe_idx],
key
,
keyÀn
);

372 
kˇ
->
ckeys_wrôe_idx
++;

373 i‡(
kˇ
->
ckeys_wrôe_idx
 >kˇ->
max_poﬁ_size
) {

374 
kˇ
->
ckeys_wrôe_idx
 = 0;

377 i‡(
kˇ
->
ˇched_keys_cou¡
 < kˇ->
max_poﬁ_size
) {

378 
kˇ
->
ˇched_keys_cou¡
++;

380 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

382  
VRT_OK
;

383 
	}
}

385 
sds
 
	$key_ˇche_¨øy_øndom
(
key_ˇche_¨øy
 *
kˇ
)

387 
idx
, 
øndomvÆ
;

388 
sds
 
key
;

390 i‡(
kˇ
 =
NULL
) {

391  
NULL
;

394 
øndomvÆ
 = ()
	`ønd
();

396 
	`±hªad_muãx_lock
(&
kˇ
->
pmuãx
);

397 i‡(
kˇ
->
ˇched_keys_cou¡
 == 0) {

398 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

399  
NULL
;

402 
idx
 = 
øndomvÆ
%()
kˇ
->
ˇched_keys_cou¡
;

404 
key
 = 
	`sdsdup
(
kˇ
->
ckeys
[
idx
]);

405 
	`±hªad_muãx_u∆ock
(&
kˇ
->
pmuãx
);

407  
key
;

408 
	}
}

412 
	$gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ªdisRïly
 *
ª∂y
, *
«me
)

414 
sds
 *
löes
;

415 
size_t
 
löe_Àn
, 
Àn
;

416 
cou¡
, 
j
;

417 
vÆue
 = -1;

419 
Àn
 = 
	`°æí
(
«me
);

421 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

422 
	`ã°_log_îr‹
("Reply for 'info' command from vireÅype %d isÉrror",

423 
ª∂y
->
ty≥
);

427 
löes
 = 
	`sds•lôÀn
(
ª∂y
->
°r
,ª∂y->
Àn
,"\r\n",2,&
cou¡
);

428 i‡(
löes
 =
NULL
) {

429 
	`ã°_log_îr‹
("Reply for 'info server' command from vire isÉrror");

433 
j
 = 0; j < 
cou¡
; j ++) {

434 
löe_Àn
 = 
	`sd¶í
(
löes
[
j
]);

435 i‡(
löe_Àn
 > 
Àn
+1 && !
	`°∫cmp
(
«me
, 
löes
[
j
],Üen)) {

436 i‡(
	`°rög2Œ
(
löes
[
j
]+
Àn
+1,
löe_Àn
-Àn-1,&
vÆue
) == 0) {

437 
	`ã°_log_îr‹
("ConvertÖid string %.*sÅoÜong failed",

438 
löe_Àn
-
Àn
-1,
löes
[
j
]+len+1);

439 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

446 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

447  
vÆue
;

448 
	}
}

450 
ªdisRïly
 *
	$°ól_húedis_ªdi§ïly
(
ªdisRïly
 *
r
)

452 
ªdisRïly
 *
ª∂y
;

454 
ª∂y
 = 
	`ˇŒoc
(1,(*reply));

455 i‡(
ª∂y
 =
NULL
) {

456  
NULL
;

459 
ª∂y
->
ty≥
 = 
r
->type;

460 
ª∂y
->
öãgî
 = 
r
->integer;

461 
ª∂y
->
Àn
 = 
r
->len;

462 
ª∂y
->
°r
 = 
r
->str;

463 
ª∂y
->
ñemíts
 = 
r
->elements;

464 
ª∂y
->
ñemít
 = 
r
->element;

466 
r
->
Àn
 = 0;

467 
r
->
°r
 = 
NULL
;

468 
r
->
ñemíts
 = 0;

469 
r
->
ñemít
 = 
NULL
;

471  
ª∂y
;

472 
	}
}

474 
	$check_two_ª∂ys_if_ßme
(
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
)

476 i‡(
ª∂y1
 =
NULL
 || 
ª∂y2
 == NULL) {

480 i‡(
ª∂y1
->
ty≥
 !
ª∂y2
->type) {

484 i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_STRING
 ||

485 
ª∂y1
->
ty≥
 =
REDIS_REPLY_STATUS
 ||

486 
ª∂y1
->
ty≥
 =
REDIS_REPLY_ERROR
) {

487 i‡(
ª∂y1
->
Àn
 !
ª∂y2
->len) {

488  
ª∂y1
->
Àn
-
ª∂y2
->len;

491  
	`memcmp
(
ª∂y1
->
°r
, 
ª∂y2
->°r,Ñïly1->
Àn
);

492 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_ARRAY
) {

493 
size_t
 
j
;

494 i‡(
ª∂y1
->
ñemíts
 !
ª∂y2
->elements) {

495  (
ª∂y1
->
ñemíts
-
ª∂y2
->elements);

498 
j
 = 0; j < 
ª∂y1
->
ñemíts
; j ++) {

499 
ªt
 = 
	`check_two_ª∂ys_if_ßme
(
ª∂y1
->
ñemít
[
j
], 
ª∂y2
->element[j]);

500 i‡(
ªt
 != 0) Ñet;

503 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_INTEGER
) {

504  (
ª∂y1
->
öãgî
-
ª∂y2
->integer);

505 } i‡(
ª∂y1
->
ty≥
 =
REDIS_REPLY_NIL
) {

508 
	`ã°_log_îr‹
("ª∂yÅy≥ %d i†îr‹", 
ª∂y1
->
ty≥
);

512 
	}
}

514 
	ss‹t_unô
 {

515 
size_t
 
	mnfõld
;

516 **
	mfõlds
;

517 
	midx_cmp
;

518 (*
	mfcmp
)(const *,const *);

521 
	$ñemít_cmp_mu…i_°ï
(c⁄° *
ñe1
,c⁄° *
ñe2
)

523 
s‹t_unô
 *
su1
 = (s‹t_unô *)
ñe1
, *
su2
 = (s‹t_unô *)
ñe2
;

525 
	`ASSERT
(
su1
->
fcmp
 =
su2
->fcmp);

526 
	`ASSERT
(
su1
->
nfõld
 =
su2
->nfield);

527 
	`ASSERT
(
su1
->
idx_cmp
 =
su2
->idx_cmp);

528 
	`ASSERT
(
su1
->
idx_cmp
 < su1->
nfõld
);

530  
su1
->
	`fcmp
(&(su1->
fõlds
[su1->
idx_cmp
]),&(
su2
->fields[su2->idx_cmp]));

531 
	}
}

534 
	$s‹t_¨øy_by_°ï
(**
ñemít
, 
size_t
 
ñemíts
,

535 
°ï
, 
idx_cmp
, (*
fcmp
)(const *,const *))

537 
s‹t_unô
 *
sus
;

538 
size_t
 
cou¡
, 
j
, 
k
;

540 i‡(
ñemíts
 <= 1)

541  
VRT_OK
;

543 i‡(
°ï
 <= 0)

544  
VRT_ERROR
;

546 i‡(
°ï
 == 1) {

547 
	`qs‹t
(
ñemít
, 
ñemíts
, (*), 
fcmp
);

548  
VRT_OK
;

551 i‡(
ñemíts
%
°ï
 != 0)

552  
VRT_ERROR
;

554 
cou¡
 = 
ñemíts
/
°ï
;

555 i‡(
cou¡
 == 0)

556  
VRT_ERROR
;

557 
sus
 = 
	`ˇŒoc
(
cou¡
,(
s‹t_unô
));

558 
j
 = 0; j < 
cou¡
; j ++) {

559 
sus
[
j
].
nfõld
 = 
°ï
;

560 
sus
[
j
].
idx_cmp
 = idx_cmp;

561 
sus
[
j
].
fcmp
 = fcmp;

562 
sus
[
j
].
fõlds
 = 
	`mÆloc
(
°ï
*(*));

563 
k
 = 0; k < 
°ï
; k ++) {

564 
sus
[
j
].
fõlds
[
k
] = 
ñemít
[j*
°ï
+k];

568 
	`qs‹t
(
sus
, 
cou¡
, (
s‹t_unô
), 
ñemít_cmp_mu…i_°ï
);

570 
j
 = 0; j < 
cou¡
; j ++) {

571 
k
 = 0; k < 
°ï
; k ++) {

572 
ñemít
[
j
*
°ï
+
k
] = 
sus
[j].
fõlds
[k];

574 
	`‰ì
(
sus
[
j
].
fõlds
);

576 
	`‰ì
(
sus
);

577  
VRT_OK
;

578 
	}
}

581 
	$ª∂y_°rög_bö¨y_com∑ª
(c⁄° *
r1
,c⁄° *
r2
)

583 
ªdisRïly
 *
ª∂y1
 = *‘edisRïly **)
r1
, *
ª∂y2
 = *‘edisRïly **)
r2
;

584 
möÀn
;

585 
cmp
;

587 
möÀn
 = (
ª∂y1
->
Àn
 < 
ª∂y2
->len) ?Ñeply1->len:reply2->len;

588 
cmp
 = 
	`memcmp
(
ª∂y1
->
°r
,
ª∂y2
->°r,
möÀn
);

589 i‡(
cmp
 =0Ë 
ª∂y1
->
Àn
 - 
ª∂y2
->len;

590  
cmp
;

591 
	}
}

594 
	$∑r£_comm™d_ty≥s
(*
comm™d_ty≥s_°r
)

596 
ty≥s
 = 0;

597 
sds
 *
ty≥s_°rs
;

598 
ty≥s_cou¡
, 
j
;

600 
ty≥s_°rs
 = 
	`sds•lôÀn
(
comm™d_ty≥s_°r
,
	`°æí
(comm™d_ty≥s_°r),",",1,&
ty≥s_cou¡
);

601 i‡(
ty≥s_°rs
 =
NULL
) {

603 } i‡(
ty≥s_cou¡
 <= 0) {

604 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

608 
j
 = 0; j < 
ty≥s_cou¡
; j ++) {

609 i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"string")) {

610 
ty≥s
 |
TEST_CMD_TYPE_STRING
;

611 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"list")) {

612 
ty≥s
 |
TEST_CMD_TYPE_LIST
;

613 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"set")) {

614 
ty≥s
 |
TEST_CMD_TYPE_SET
;

615 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"zset")) {

616 
ty≥s
 |
TEST_CMD_TYPE_ZSET
;

617 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"hash")) {

618 
ty≥s
 |
TEST_CMD_TYPE_HASH
;

619 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"server")) {

620 
ty≥s
 |
TEST_CMD_TYPE_SERVER
;

621 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"key")) {

622 
ty≥s
 |
TEST_CMD_TYPE_KEY
;

623 } i‡(!
	`°rˇ£cmp
(
ty≥s_°rs
[
j
],"expire")) {

624 
ty≥s
 |
TEST_CMD_TYPE_EXPIRE
;

626 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

631 
	`sds‰ì•lôªs
(
ty≥s_°rs
,
ty≥s_cou¡
);

633  
ty≥s
;

634 
	}
}

637 
d¨øy
 *
	$∑r£_comm™d_li°
(*
comm™d_li°_°r
)

639 
d¨øy
 *
comm™ds
;

640 
sds
 *
comm™d_ñem
;

641 
sds
 *
comm™d_°rs
;

642 
comm™d_cou¡
, 
j
;

644 
comm™d_°rs
 = 
	`sds•lôÀn
(
comm™d_li°_°r
,
	`°æí
(comm™d_li°_°r),",",1,&
comm™d_cou¡
);

645 i‡(
comm™d_°rs
 =
NULL
) {

647 } i‡(
comm™d_cou¡
 <= 0) {

648 
	`sds‰ì•lôªs
(
comm™d_°rs
,
comm™d_cou¡
);

652 
comm™ds
 = 
	`d¨øy_¸óã
(
comm™d_cou¡
, (
sds
));

653 
j
 = 0; j < 
comm™d_cou¡
; j ++) {

654 
comm™d_ñem
 = 
	`d¨øy_push
(
comm™ds
);

655 *
comm™d_ñem
 = 
comm™d_°rs
[
j
];

656 
comm™d_°rs
[
j
] = 
NULL
;

659 
	`sds‰ì•lôªs
(
comm™d_°rs
,
comm™d_cou¡
);

661  
comm™ds
;

662 
	}
}

665 
	$gë_key_ty≥_°rög
(
keyty≥
)

667 
keyty≥
) {

668 
REDIS_STRING
:

671 
REDIS_LIST
:

674 
REDIS_SET
:

677 
REDIS_ZSET
:

680 
REDIS_HASH
:

689 
	}
}

	@tests/vrt_public.h

1 #i‚de‡
_VRT_PUBLIC_H_


2 
	#_VRT_PUBLIC_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 
	~<d•ecülc⁄fig.h
>

10 
	~<uni°d.h
>

12 
	~<húedis.h
>

14 
	gd¨øy
;

15 
	gkey_ˇche_poﬁ
;

17 
	#VRT_TEST_OK
 0

	)

18 
	#VRT_TEST_ERR
 1

	)

20 
	#TEST_CMD_TYPE_STRING
 (1<<0)

	)

21 
	#TEST_CMD_TYPE_LIST
 (1<<1)

	)

22 
	#TEST_CMD_TYPE_SET
 (1<<2)

	)

23 
	#TEST_CMD_TYPE_ZSET
 (1<<3)

	)

24 
	#TEST_CMD_TYPE_HASH
 (1<<4)

	)

25 
	#TEST_CMD_TYPE_SERVER
 (1<<5)

	)

26 
	#TEST_CMD_TYPE_KEY
 (1<<6)

	)

27 
	#TEST_CMD_TYPE_EXPIRE
 (1<<7)

	)

30 
	#REDIS_STRING
 0

	)

31 
	#REDIS_LIST
 1

	)

32 
	#REDIS_SET
 2

	)

33 
	#REDIS_ZSET
 3

	)

34 
	#REDIS_HASH
 4

	)

38 #i‡
deföed
(
__ATOMIC_RELAXED
)

39 
	#upd©e_°©e_add
(
_vÆue
, 
_n
Ë
	`__©omic_add_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

40 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
Ë
	`__©omic_sub_„tch
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

41 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
Ë
	`__©omic_°‹e_n
(&_vÆue, (_n), 
__ATOMIC_RELAXED
)

	)

42 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

43 
	`__©omic_lﬂd
(&
_vÆue
, 
_v
, 
__ATOMIC_RELAXED
); \

44 } 0)

	)

46 
	#TEST_STATE_LOCK_TYPE
 "__ATOMIC_RELAXED"

	)

48 #ñi‡
deföed
(
HAVE_ATOMIC
)

49 
	#upd©e_°©e_add
(
_vÆue
, 
_n
Ë
	`__sync_add_™d_„tch
(&_vÆue, (_n))

	)

50 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
Ë
	`__sync_sub_™d_„tch
(&_vÆue, (_n))

	)

51 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
Ë
	`__sync_lock_ã°_™d_£t
(&_vÆue, (_n))

	)

52 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

53 (*
_v
Ë
	`__sync_add_™d_„tch
(&
_vÆue
, 0); \

54 } 0)

	)

56 
	#TEST_STATE_LOCK_TYPE
 "HAVE_ATOMIC"

	)

58 
±hªad_muãx_t
 
°©e_lockî
;

60 
	#upd©e_°©e_add
(
_vÆue
, 
_n
) do { \

61 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

62 
_vÆue
 +(
_n
); \

63 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

64 } 0)

	)

66 
	#upd©e_°©e_sub
(
_vÆue
, 
_n
) do { \

67 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

68 
_vÆue
 -(
_n
); \

69 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

70 } 0)

	)

72 
	#upd©e_°©e_£t
(
_vÆue
, 
_n
) do { \

73 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

74 
_vÆue
 = (
_n
); \

75 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

76 } 0)

	)

78 
	#upd©e_°©e_gë
(
_vÆue
, 
_v
) do { \

79 
	`±hªad_muãx_lock
(&
°©e_lockî
); \

80 (*
_v
Ë
_vÆue
; \

81 
	`±hªad_muãx_u∆ock
(&
°©e_lockî
); \

82 } 0)

	)

84 
	#TEST_STATE_LOCK_TYPE
 "±hªad_muãx_lock"

	)

87 
	svúe_ö°™˚
 {

88 
sds
 
	mho°
;

89 
	mp‹t
;

91 
sds
 
	mdú
;

92 
sds
 
	mc⁄f_fûe
;

93 
sds
 
	mpid_fûe
;

94 
sds
 
	mlog_fûe
;

96 
	mru¬ög
;

97 
	mpid
;

98 
ªdisC⁄ãxt
 *
	m˘x
;

99 } 
	tvúe_ö°™˚
;

101 
£t_execuã_fûe
(*
fûe
);

103 
vúe_ö°™˚
 *
vúe_ö°™˚_¸óã
(
p‹t
);

104 
vúe_ö°™˚_de°roy
(
vúe_ö°™˚
 *
vi
);

106 
vúe_£rvî_run
(
vúe_ö°™˚
 *
vi
);

107 
vúe_£rvî_°›
(
vúe_ö°™˚
 *
vi
);

109 
¸óã_w‹k_dú
();

110 
de°roy_w‹k_dú
();

112 
vúe_ö°™˚
 *
°¨t_⁄e_vúe_ö°™˚
();

114 
show_ã°_ªsu…
(
ªsu…
,*
ã°_c⁄ã¡
,*
îrmsg
);

116 
	skey_ˇche_¨øy
 {

117 
	mˇched_keys_cou¡
;

118 
	mckeys_wrôe_idx
;

119 
	mmax_poﬁ_size
;

120 
sds
 *
	mckeys
;

121 
±hªad_muãx_t
 
	mpmuãx
;

122 } 
	tkey_ˇche_¨øy
;

124 
key_ˇche_¨øy
 *
key_ˇche_¨øy_¸óã
(
max_poﬁ_size
);

125 
key_ˇche_¨øy_de°roy
(
key_ˇche_¨øy
 *
kˇ
);

126 
key_ˇche_¨øy_öput
(
key_ˇche_¨øy
 *
kˇ
, *
key
, 
size_t
 
keyÀn
);

127 
sds
 
key_ˇche_¨øy_øndom
(
key_ˇche_¨øy
 *
kˇ
);

129 
gë_l⁄gl⁄g_‰om_öfo_ª∂y
(
ªdisRïly
 *
ª∂y
, *
«me
);

131 
ªdisRïly
 *
°ól_húedis_ªdi§ïly
‘edisRïly *
r
);

132 
check_two_ª∂ys_if_ßme
(
ªdisRïly
 *
ª∂y1
,ÑedisRïly *
ª∂y2
);

133 
s‹t_¨øy_by_°ï
(**
ñemít
, 
size_t
 
ñemíts
, 
°ï
, 
idx_cmp
, (*
fcmp
)(const *,const *));

134 
	`ª∂y_°rög_bö¨y_com∑ª
(c⁄° *
r1
,c⁄° *
r2
);

136 
	`∑r£_comm™d_ty≥s
(*
comm™d_ty≥s_°r
);

137 
d¨øy
 *
	`∑r£_comm™d_li°
(*
comm™d_li°_°r
);

139 *
	`gë_key_ty≥_°rög
(
keyty≥
);

	@tests/vrt_simple.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<gë›t.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<sys/°©.h
>

9 
	~<sys/ut¢ame.h
>

11 
	~<húedis.h
>

13 
	~<vπ_utû.h
>

14 
	~<vπ_public.h
>

15 
	~<vπ_sim∂e.h
>

17 
	#ERRMSG_MAX_LEN
 
LOG_MAX_LEN
-100

	)

18 
	gîrmsg
[
ERRMSG_MAX_LEN
];

20 
	$sim∂e_ã°_cmd_gë_£t
(
vúe_ö°™˚
 *
vi
)

22 *
key
 = "test_cmd_get_set-key";

23 *
vÆue
 = "test_cmd_get_set-value";

24 *
MESSAGE
 = "GET/SET simpleÅest";

25 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

27 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
vÆue
);

28 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

29 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

30 
îr‹
;

32 
	`‰ìRïlyObje˘
(
ª∂y
);

34 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

35 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

36 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

37 
îr‹
;

39 
	`‰ìRïlyObje˘
(
ª∂y
);

40 
ª∂y
 = 
NULL
;

42 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

46 
îr‹
:

48 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

50 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

51 
îrmsg
[0] = '\0';

54 
	}
}

56 
	$sim∂e_ã°_cmd_£äx
(
vúe_ö°™˚
 *
vi
)

58 *
key
 = "test_cmd_setnx-key";

59 *
vÆue
 = "test_cmd_setnx-value";

60 *
MESSAGE
 = "SETNX simpleÅest";

61 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

63 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

64 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

65 
îr‹
;

67 
	`‰ìRïlyObje˘
(
ª∂y
);

69 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£äx %†%s", 
key
, 
vÆue
);

70 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

71 
ª∂y
->
öãgî
 != 1) {

72 
îr‹
;

74 
	`‰ìRïlyObje˘
(
ª∂y
);

76 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

77 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

78 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

79 
îr‹
;

81 
	`‰ìRïlyObje˘
(
ª∂y
);

83 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£äx %†%s", 
key
, 
vÆue
);

84 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

85 
ª∂y
->
öãgî
 != 0) {

86 
îr‹
;

88 
	`‰ìRïlyObje˘
(
ª∂y
);

90 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

94 
îr‹
:

96 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

98 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

99 
îrmsg
[0] = '\0';

102 
	}
}

104 
	$sim∂e_ã°_cmd_£ãx
(
vúe_ö°™˚
 *
vi
)

106 *
key
 = "test_cmd_setex-key";

107 *
vÆue
 = "test_cmd_setex-value";

108 
£c⁄ds
 = 100;

109 *
MESSAGE
 = "SETEX simpleÅest";

110 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

112 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£ãx %†%Œd %s", 
key
, 
£c⁄ds
, 
vÆue
);

113 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

114 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

115 
îr‹
;

117 
	`‰ìRïlyObje˘
(
ª∂y
);

119 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

120 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

121 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

122 
îr‹
;

124 
	`‰ìRïlyObje˘
(
ª∂y
);

126 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "â»%s", 
key
);

127 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

128 
ª∂y
->
öãgî
 > 
£c⁄ds
 ||Ñeply->integer < seconds - 2) {

129 
îr‹
;

131 
	`‰ìRïlyObje˘
(
ª∂y
);

133 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

137 
îr‹
:

139 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

141 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

142 
îrmsg
[0] = '\0';

145 
	}
}

147 
	$sim∂e_ã°_cmd_p£ãx
(
vúe_ö°™˚
 *
vi
)

149 *
key
 = "test_cmd_psetex-key";

150 *
vÆue
 = "test_cmd_psetex-value";

151 
mûli£c⁄ds
 = 100000;

152 *
MESSAGE
 = "PSETEX simpleÅest";

153 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

155 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "p£ãx %†%Œd %s", 
key
, 
mûli£c⁄ds
, 
vÆue
);

156 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

157 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

158 
îr‹
;

160 
	`‰ìRïlyObje˘
(
ª∂y
);

162 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

163 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

164 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

165 
îr‹
;

167 
	`‰ìRïlyObje˘
(
ª∂y
);

169 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "±é %s", 
key
);

170 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

171 
ª∂y
->
öãgî
 > 
mûli£c⁄ds
 ||Ñeply->integer < milliseconds - 2000) {

172 
îr‹
;

174 
	`‰ìRïlyObje˘
(
ª∂y
);

176 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

180 
îr‹
:

182 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

184 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

185 
îrmsg
[0] = '\0';

188 
	}
}

190 
	$sim∂e_ã°_cmd_ö¸
(
vúe_ö°™˚
 *
vi
)

192 *
key
 = "test_cmd_incr-key";

193 
n
 = 0, 
ö¸_times
 = 100;

194 *
MESSAGE
 = "INCR simpleÅest";

195 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

197 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

198 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

199 
îr‹
;

201 
	`‰ìRïlyObje˘
(
ª∂y
);

203 
n
 < 
ö¸_times
) {

204 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

205 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

206 
ª∂y
->
öãgî
 !
n
+1) {

207 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸ %ŒdÅime†îr‹", 
n
+1);

208 
îr‹
;

210 
	`‰ìRïlyObje˘
(
ª∂y
);

212 
n
 ++;

215 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

216 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

217 
îr‹
;

219 
vÆue
;

220 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
Ë|| vÆuê!
ö¸_times
) {

221 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrÅo %lldÉrror, %s in fact",

222 
ö¸_times
, 
ª∂y
->
°r
);

223 
îr‹
;

226 
	`‰ìRïlyObje˘
(
ª∂y
);

228 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

229 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

230 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

231 
îr‹
;

233 
	`‰ìRïlyObje˘
(
ª∂y
);

235 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

236 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

237 
îr‹
;

239 
	`‰ìRïlyObje˘
(
ª∂y
);

241 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

245 
îr‹
:

247 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

249 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

250 
îrmsg
[0] = '\0';

253 
	}
}

255 
	$sim∂e_ã°_cmd_de¸
(
vúe_ö°™˚
 *
vi
)

257 *
key
 = "test_cmd_decr-key";

258 
n
 = 0, 
de¸_times
 = 100;

259 *
MESSAGE
 = "DECR simpleÅest";

260 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

262 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

263 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

264 
îr‹
;

266 
	`‰ìRïlyObje˘
(
ª∂y
);

268 
n
 < 
de¸_times
) {

269 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸ %s", 
key
);

270 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

271 
ª∂y
->
öãgî
 + 
n
 != -1) {

272 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸ %ŒdÅime†îr‹", 
n
+1);

273 
îr‹
;

275 
	`‰ìRïlyObje˘
(
ª∂y
);

277 
n
 ++;

280 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

281 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

282 
îr‹
;

284 
vÆue
;

285 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
Ë|| vÆuê+ 
de¸_times
 != 0) {

286 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrÅo -%lldÉrror, %s in fact",

287 
de¸_times
, 
ª∂y
->
°r
);

288 
îr‹
;

291 
	`‰ìRïlyObje˘
(
ª∂y
);

293 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

294 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

295 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

296 
îr‹
;

298 
	`‰ìRïlyObje˘
(
ª∂y
);

300 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸ %s", 
key
);

301 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

302 
îr‹
;

304 
	`‰ìRïlyObje˘
(
ª∂y
);

306 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

310 
îr‹
:

312 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

314 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

315 
îrmsg
[0] = '\0';

318 
	}
}

320 
	$sim∂e_ã°_cmd_ö¸by
(
vúe_ö°™˚
 *
vi
)

322 *
key
 = "test_cmd_incrby-key";

323 
n
 = 0, 
ö¸by_times
 = 100, 
ö¸by_°ï
 = 3;

324 *
MESSAGE
 = "INCRBY simpleÅest";

325 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

327 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

328 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

329 
îr‹
;

331 
	`‰ìRïlyObje˘
(
ª∂y
);

333 
n
 < 
ö¸by_times
) {

334 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸by %†%Œd", 
key
, 
ö¸by_°ï
);

335 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

336 
ª∂y
->
öãgî
 !(
n
+1)*
ö¸by_°ï
) {

337 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrby %lld %lldÅimesÉrror",

338 
ö¸by_°ï
, 
n
+1);

339 
îr‹
;

341 
	`‰ìRïlyObje˘
(
ª∂y
);

343 
n
 ++;

346 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

347 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

348 
îr‹
;

350 
vÆue
;

351 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
) ||

352 
vÆue
 !
ö¸by_times
*
ö¸by_°ï
) {

353 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrbyÅo %lldÉrror, %s in fact",

354 
ö¸by_times
*
ö¸by_°ï
, 
ª∂y
->
°r
);

355 
îr‹
;

358 
	`‰ìRïlyObje˘
(
ª∂y
);

360 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

361 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

362 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

363 
îr‹
;

365 
	`‰ìRïlyObje˘
(
ª∂y
);

367 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸by %†%Œd", 
key
, 
ö¸by_°ï
);

368 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

369 
îr‹
;

371 
	`‰ìRïlyObje˘
(
ª∂y
);

373 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

377 
îr‹
:

379 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

381 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

382 
îrmsg
[0] = '\0';

385 
	}
}

387 
	$sim∂e_ã°_cmd_de¸by
(
vúe_ö°™˚
 *
vi
)

389 *
key
 = "test_cmd_decrby-key";

390 
n
 = 0, 
de¸by_times
 = 100, 
de¸by_°ï
 = 3;

391 *
MESSAGE
 = "DECRBY simpleÅest";

392 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

394 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

395 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

396 
îr‹
;

398 
	`‰ìRïlyObje˘
(
ª∂y
);

400 
n
 < 
de¸by_times
) {

401 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸by %†%Œd", 
key
, 
de¸by_°ï
);

402 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

403 
ª∂y
->
öãgî
 + (
n
+1)*
de¸by_°ï
 != 0) {

404 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrby %lld %lldÅimesÉrror",

405 
de¸by_°ï
, 
n
+1);

406 
îr‹
;

408 
	`‰ìRïlyObje˘
(
ª∂y
);

410 
n
 ++;

413 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

414 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

415 
îr‹
;

417 
vÆue
;

418 i‡(!
	`°rög2Œ
(
ª∂y
->
°r
,ª∂y->
Àn
,&
vÆue
) ||

419 
vÆue
 + 
de¸by_times
*
de¸by_°ï
 != 0) {

420 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "decrbyÅo -%lldÉrror, %s in fact",

421 
de¸by_times
*
de¸by_°ï
, 
ª∂y
->
°r
);

422 
îr‹
;

425 
	`‰ìRïlyObje˘
(
ª∂y
);

427 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

428 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

429 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

430 
îr‹
;

432 
	`‰ìRïlyObje˘
(
ª∂y
);

434 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "de¸by %†%Œd", 
key
, 
de¸by_°ï
);

435 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

436 
îr‹
;

438 
	`‰ìRïlyObje˘
(
ª∂y
);

440 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

444 
îr‹
:

446 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

448 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

449 
îrmsg
[0] = '\0';

452 
	}
}

454 
	$sim∂e_ã°_cmd_≠≥nd
(
vúe_ö°™˚
 *
vi
)

456 *
key
 = "test_cmd_append-key";

457 *
föÆ_vÆue
 = "pqwpioqjqwoiuqiorueljsakhdflkqueuquewqwei[oqfiqpq-0ewrq0hdalkjz.zhjaidhfioahd";

458 *
°¨t
 = 
föÆ_vÆue
, *
pos
 = sèπ, *
íd
 = föÆ_vÆue+
	`°æí
(final_value);

459 
°ï
 = 3, 
Àn
;

460 
buf
[20];

461 *
MESSAGE
 = "APPEND simpleÅest";

462 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

464 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

465 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

466 
îr‹
;

468 
	`‰ìRïlyObje˘
(
ª∂y
);

470 
pos
 < 
íd
) {

471 
Àn
 = (
íd
-
pos
 >
°ï
) ? step : (end-pos);

472 
	`mem˝y
(
buf
,
pos
,
Àn
);

473 
buf
[
Àn
] = '\0';

474 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "≠≥nd %†%s", 
key
, 
buf
);

475 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

476 
îr‹
;

477 } i‡(
ª∂y
->
öãgî
 !
pos
-
°¨t
+
Àn
) {

478 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "append %s %sÉrror",

479 
key
, 
buf
);

480 
îr‹
;

482 
	`‰ìRïlyObje˘
(
ª∂y
);

484 
pos
 +
Àn
;

487 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

488 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

489 
ª∂y
->
Àn
 !
	`°æí
(
föÆ_vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,final_value)) {

490 
îr‹
;

492 
	`‰ìRïlyObje˘
(
ª∂y
);

494 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

498 
îr‹
:

500 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

502 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

503 
îrmsg
[0] = '\0';

506 
	}
}

508 
	$sim∂e_ã°_cmd_°æí
(
vúe_ö°™˚
 *
vi
)

510 *
key
 = "test_cmd_strlen-key";

511 *
vÆue
 = "test_cmd_strlen-value";

512 *
MESSAGE
 = "STRLEN simpleÅest";

513 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

515 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
vÆue
);

516 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

517 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

518 
îr‹
;

520 
	`‰ìRïlyObje˘
(
ª∂y
);

522 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "°æí %s", 
key
);

523 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

524 
ª∂y
->
öãgî
 !
	`°æí
(
vÆue
)) {

525 
îr‹
;

527 
	`‰ìRïlyObje˘
(
ª∂y
);

528 
ª∂y
 = 
NULL
;

530 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

534 
îr‹
:

536 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

538 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

539 
îrmsg
[0] = '\0';

542 
	}
}

544 
	$sim∂e_ã°_cmd_gë£t
(
vúe_ö°™˚
 *
vi
)

546 *
key
 = "test_cmd_getset-key";

547 *
ﬁdvÆue
 = "test_cmd_getset-oldvalue";

548 *
√wvÆue
 = "test_cmd_getset-newvalue";

549 *
MESSAGE
 = "GETSET simpleÅest";

550 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

552 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, 
ﬁdvÆue
);

553 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

554 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

555 
îr‹
;

557 
	`‰ìRïlyObje˘
(
ª∂y
);

559 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë£à%†%s", 
key
, 
√wvÆue
);

560 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

561 
ª∂y
->
Àn
 !
	`°æí
(
ﬁdvÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,oldvalue)) {

562 
îr‹
;

564 
	`‰ìRïlyObje˘
(
ª∂y
);

566 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

567 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

568 
ª∂y
->
Àn
 !
	`°æí
(
√wvÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,newvalue)) {

569 
îr‹
;

571 
	`‰ìRïlyObje˘
(
ª∂y
);

573 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

577 
îr‹
:

579 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

581 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

582 
îrmsg
[0] = '\0';

585 
	}
}

587 
	$sim∂e_ã°_cmd_ö¸byÊﬂt
(
vúe_ö°™˚
 *
vi
)

589 *
key
 = "test_cmd_incrbyfloat-key";

590 *
föÆ_vÆue
 = "314.00000000000000022";

591 
n
 = 0, 
ö¸by_times
 = 100;

592 
ö¸byÊﬂt_°ï
 = 3.14;

593 *
MESSAGE
 = "INCRBYFLOAT simpleÅest";

594 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

596 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

597 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

598 
îr‹
;

600 
	`‰ìRïlyObje˘
(
ª∂y
);

602 
n
 < 
ö¸by_times
) {

603 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸byÊﬂà%†%f", 
key
, 
ö¸byÊﬂt_°ï
);

604 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

605 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "incrbyfloat %f %lldÅimesÉrror",

606 
ö¸byÊﬂt_°ï
, 
n
+1);

607 
îr‹
;

609 
	`‰ìRïlyObje˘
(
ª∂y
);

611 
n
 ++;

614 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gë %s", 
key
);

615 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

616 
	`°rcmp
(
ª∂y
->
°r
,
föÆ_vÆue
)) {

617 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "ö¸byÊﬂàtÿ%†îr‹", 
föÆ_vÆue
);

618 
îr‹
;

620 
	`‰ìRïlyObje˘
(
ª∂y
);

622 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£à%†%s", 
key
, "a");

623 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

624 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

625 
îr‹
;

627 
	`‰ìRïlyObje˘
(
ª∂y
);

629 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "ö¸byÊﬂà%†%f", 
key
, 
ö¸byÊﬂt_°ï
);

630 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ERROR
) {

631 
îr‹
;

633 
	`‰ìRïlyObje˘
(
ª∂y
);

635 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

639 
îr‹
:

641 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

643 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

644 
îrmsg
[0] = '\0';

647 
	}
}

649 
	$sim∂e_ã°_cmd_gëbô_£tbô_bôcou¡
(
vúe_ö°™˚
 *
vi
)

651 *
key
 = "test_cmd_getbit_setbit_bitcount-key";

652 *
MESSAGE
 = "GETBIT/SETBIT/BITCOUNT simpleÅest";

653 
begö
 = 11, 
°ï
 = 3, 
times
 = 79, 
n
;

654 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

656 
n
 = 0;

657 
n
 < 
times
) {

658 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†%d 1", 
key
, 
begö
+
n
*
°ï
);

659 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

660 
ª∂y
->
öãgî
 != 0) {

661 
îr‹
;

663 
	`‰ìRïlyObje˘
(
ª∂y
);

665 
n
 ++;

668 
n
 = 0;

669 
n
 < 
times
) {

670 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gëbô %†%d", 
key
, 
begö
+
n
*
°ï
);

671 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

672 
ª∂y
->
öãgî
 != 1) {

673 
îr‹
;

675 
	`‰ìRïlyObje˘
(
ª∂y
);

677 
n
 ++;

680 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôcou¡ %s", 
key
);

681 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

682 
ª∂y
->
öãgî
 !
times
) {

683 
îr‹
;

685 
	`‰ìRïlyObje˘
(
ª∂y
);

687 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

691 
îr‹
:

693 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

695 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

696 
îrmsg
[0] = '\0';

699 
	}
}

701 
	$sim∂e_ã°_cmd_gëønge_£å™ge
(
vúe_ö°™˚
 *
vi
)

703 *
key
 = "test_cmd_getrange_setrange-key";

704 *
MESSAGE
 = "GETRANGE/SETRANGE simpleÅest";

705 *
ønge_vÆue
 = "o090pl[]m,187h";

706 
begö
 = 11, 
°ï
 = 53, 
times
 = 79, 
n
;

707 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

709 
n
 = 0;

710 
n
 < 
times
) {

711 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "setrange %s %d %s",

712 
key
, 
begö
+
n
*
°ï
, 
ønge_vÆue
);

713 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

714 
ª∂y
->
öãgî
 !
begö
+
n
*
°ï
+
	`°æí
(
ønge_vÆue
)) {

715 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setrange %s %d %sÉrror",

716 
key
, 
begö
+
n
*
°ï
, 
ønge_vÆue
);

717 
îr‹
;

719 
	`‰ìRïlyObje˘
(
ª∂y
);

721 
n
 ++;

724 
n
 = 0;

725 
n
 < 
times
) {

726 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "gëøngê%†%d %d", 
key
,

727 
begö
+
n
*
°ï
, begö+n*°ï+
	`°æí
(
ønge_vÆue
)-1);

728 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

729 
ª∂y
->
Àn
 !
	`°æí
(
ønge_vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,Ñange_value)) {

730 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "getrange %s %d %dÉrror",

731 
key
, 
begö
+
n
*
°ï
, begö+n*°ï+
	`°æí
(
ønge_vÆue
)-1);

732 
îr‹
;

734 
	`‰ìRïlyObje˘
(
ª∂y
);

736 
n
 ++;

739 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

743 
îr‹
:

745 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

747 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

748 
îrmsg
[0] = '\0';

751 
	}
}

753 
	$sim∂e_ã°_cmd_bôpos
(
vúe_ö°™˚
 *
vi
)

755 *
key
 = "test_cmd_bitpos-key";

756 *
MESSAGE
 = "BITPOS simpleÅest";

757 
pos
 = 11;

758 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

760 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

761 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

762 
îr‹
;

764 
	`‰ìRïlyObje˘
(
ª∂y
);

766 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

767 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

768 
ª∂y
->
öãgî
 != -1) {

769 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1 firstÅimeÉrror",

770 
key
);

771 
îr‹
;

773 
	`‰ìRïlyObje˘
(
ª∂y
);

775 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†1 0", 
key
);

776 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

777 
ª∂y
->
öãgî
 != 0) {

778 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setbit %s 1 0Érror",

779 
key
);

780 
îr‹
;

782 
	`‰ìRïlyObje˘
(
ª∂y
);

784 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

785 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

786 
ª∂y
->
öãgî
 != -1) {

787 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1 secondÅimeÉrror",

788 
key
);

789 
îr‹
;

791 
	`‰ìRïlyObje˘
(
ª∂y
);

793 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "£tbô %†%d 1", 
key
, 
pos
);

794 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

795 
ª∂y
->
öãgî
 != 0) {

796 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "setbit %s %d 1Érror",

797 
key
, 
pos
);

798 
îr‹
;

800 
	`‰ìRïlyObje˘
(
ª∂y
);

802 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "bôpo†%†1", 
key
);

803 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

804 
ª∂y
->
öãgî
 !
pos
) {

805 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "bitpos %s 1ÅhirdÅimeÉrror",

806 
key
);

807 
îr‹
;

809 
	`‰ìRïlyObje˘
(
ª∂y
);

811 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

815 
îr‹
:

817 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

819 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

820 
îrmsg
[0] = '\0';

823 
	}
}

825 
	#MGET_MSET_KEYS_COUNT
 333

	)

826 
	$sim∂e_ã°_cmd_mgë_m£t
(
vúe_ö°™˚
 *
vi
)

828 *
key
 = "test_cmd_mget_mset-key";

829 *
vÆue
 = "test_cmd_mget_mset-value";

830 *
MESSAGE
 = "MGET/MSET simpleÅest";

831 
keys
[
MGET_MSET_KEYS_COUNT
][30];

832 
vÆues
[
MGET_MSET_KEYS_COUNT
][30];

833 *
¨gv
[1+2*
MGET_MSET_KEYS_COUNT
];

834 
size_t
 
¨gvÀn
[1+2*
MGET_MSET_KEYS_COUNT
];

835 
j
, 
idx
;

836 
ªdisRïly
 *
ª∂y
 = 
NULL
;

838 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

839 
	`vπ_s˙¥ötf
(
keys
[
j
], 30,"%s%d", 
key
, j);

840 
	`vπ_s˙¥ötf
(
vÆues
[
j
], 30,"%s%d", 
vÆue
, j);

843 
¨gv
[0] = "mset";

844 
¨gvÀn
[0] = 
	`°æí
(
¨gv
[0]);

845 
idx
 = 1;

846 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

847 
¨gv
[
idx
] = 
keys
[
j
];

848 
¨gvÀn
[
idx
++] = 
	`°æí
(
keys
[
j
]);

849 
¨gv
[
idx
] = 
vÆues
[
j
];

850 
¨gvÀn
[
idx
++] = 
	`°æí
(
vÆues
[
j
]);

853 
ª∂y
 = 
	`ªdisComm™dArgv
(
vi
->
˘x
, 1+2*
MGET_MSET_KEYS_COUNT
, 
¨gv
, 
¨gvÀn
);

854 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STATUS
 ||

855 
ª∂y
->
Àn
 !2 || 
	`°rcmp
‘ïly->
°r
,"OK")) {

856 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "mset %d keysÉrror",

857 
MGET_MSET_KEYS_COUNT
);

858 
îr‹
;

860 
	`‰ìRïlyObje˘
(
ª∂y
);

862 
¨gv
[0] = "mget";

863 
¨gvÀn
[0] = 
	`°æí
(
¨gv
[0]);

864 
j
 = 1; j < 1+
MGET_MSET_KEYS_COUNT
; j ++) {

865 
¨gv
[
j
] = 
keys
[j-1];

866 
¨gvÀn
[
j
] = 
	`°æí
(
¨gv
[j]);

869 
ª∂y
 = 
	`ªdisComm™dArgv
(
vi
->
˘x
, 1+
MGET_MSET_KEYS_COUNT
, 
¨gv
, 
¨gvÀn
);

870 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_ARRAY
 ||

871 
ª∂y
->
ñemíts
 !
MGET_MSET_KEYS_COUNT
) {

872 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "mget %d keysÉrror",

873 
MGET_MSET_KEYS_COUNT
);

874 
îr‹
;

876 
j
 = 0; j < 
MGET_MSET_KEYS_COUNT
; j ++) {

877 
ªdisRïly
 *
ª∂y_sub
 = 
ª∂y
->
ñemít
[
j
];

878 i‡(
ª∂y_sub
 =
NULL
 ||

879 
ª∂y_sub
->
ty≥
 !
REDIS_REPLY_STRING
 ||

880 
ª∂y_sub
->
Àn
 !
	`°æí
(
vÆues
[
j
]) ||

881 
	`°rcmp
(
ª∂y_sub
->
°r
, 
vÆues
[
j
]))

882 
îr‹
;

884 
	`‰ìRïlyObje˘
(
ª∂y
);

885 
ª∂y
 = 
NULL
;

887 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

891 
îr‹
:

893 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

895 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

896 
îrmsg
[0] = '\0';

899 
	}
}

901 
	#TEST_HASH_ENCODED_ZIPLIST
 0

	)

902 
	#TEST_HASH_ENCODED_HT
 1

	)

903 
	#TEST_HASH_ENCODED_CAUSED_BY_FILED
 0

	)

904 
	#TEST_HASH_ENCODED_CAUSED_BY_VALUE
 1

	)

905 
	#TEST_HASH_ENCODED_CAUSED_BY_ALL
 2

	)

906 
	#TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
 56

	)

907 
	#TEST_HASH_ENCODED_HT_FIELD_COUNT
 678

	)

908 
	#TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
 21

	)

909 
	#TEST_HASH_ENCODED_HT_VALUE_LEN
 111

	)

911 
	sã°_hash_membî
 {

912 *
	mfõld
;

913 *
	mvÆue
;

916 
	$ã°_hash_membî_Àngth
(
ã°_hash_membî
 **
thms
)

918 
j
 = 0;

919 
thms
[
j
]) {

920 
j
 ++;

922  
j
;

923 
	}
}

925 
	$ã°_hash_membîs_de°roy
(
ã°_hash_membî
 **
thms
)

927 
j
 = 0;

928 
thms
[
j
]) {

929 
	`‰ì
(
thms
[
j
]->
fõld
);

930 
	`‰ì
(
thms
[
j
]->
vÆue
);

931 
	`‰ì
(
thms
[
j
]);

932 
j
 ++;

934 
	`‰ì
(
thms
);

935 
	}
}

937 
ã°_hash_membî
 **
	$sim∂e_ã°_hash_öô
(
vúe_ö°™˚
 *
vi
, *
key
, 
hash_ícode
, 
ícode_ˇu£
)

939 *
fõld
 = "test_hash-field";

940 *
vÆue
 = "test_hash-value";

941 
fõld_cou¡
, 
vÆue_Àn
;

942 
j
,
n
;

943 
ã°_hash_membî
 **
thms
 = 
NULL
;

944 
ªdisRïly
 *
ª∂y
 = 
NULL
;

946 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

947 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

948 
îr‹
;

950 
	`‰ìRïlyObje˘
(
ª∂y
);

952 i‡(
hash_ícode
 =
TEST_HASH_ENCODED_ZIPLIST
) {

953 
fõld_cou¡
 = 
TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
;

954 
vÆue_Àn
 = 
TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
;

955 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_FILED
) {

956 
fõld_cou¡
 = 
TEST_HASH_ENCODED_HT_FIELD_COUNT
;

957 
vÆue_Àn
 = 
TEST_HASH_ENCODED_ZIPLIST_VALUE_LEN
;

958 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_VALUE
) {

959 
fõld_cou¡
 = 
TEST_HASH_ENCODED_ZIPLIST_FIELD_COUNT
;

960 
vÆue_Àn
 = 
TEST_HASH_ENCODED_HT_VALUE_LEN
;

961 } i‡(
ícode_ˇu£
 =
TEST_HASH_ENCODED_CAUSED_BY_ALL
) {

962 
fõld_cou¡
 = 
TEST_HASH_ENCODED_HT_FIELD_COUNT
;

963 
vÆue_Àn
 = 
TEST_HASH_ENCODED_HT_VALUE_LEN
;

966 
thms
 = 
	`mÆloc
((
fõld_cou¡
+1)*(
ã°_hash_membî
*));

967 
j
 = 0; j < 
fõld_cou¡
; j ++) {

968 
thms
[
j
] = 
	`mÆloc
((
ã°_hash_membî
));

969 
thms
[
j
]->
fõld
 = 
	`mÆloc
(30*());

970 
thms
[
j
]->
vÆue
 = 
	`mÆloc
((
vÆue_Àn
+1)*());

971 
	`vπ_s˙¥ötf
(
thms
[
j
]->
fõld
, 30, "%s%d", field, j);

972 
n
 = 
	`vπ_s˙¥ötf
(
thms
[
j
]->
vÆue
, 
vÆue_Àn
, "%s%d", value, j);

973 i‡(
n
 < 
vÆue_Àn
) {

974 
	`mem£t
(
thms
[
j
]->
vÆue
,'x',
vÆue_Àn
-
n
);

975 
thms
[
j
]->
vÆue
[
vÆue_Àn
] = '\0';

978 
thms
[
fõld_cou¡
] = 
NULL
;

980 
j
 = 0; j < 
fõld_cou¡
; j ++) {

981 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hset %s %s %s",

982 
key
, 
thms
[
j
]->
fõld
,Åhms[j]->
vÆue
);

983 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

984 
ª∂y
->
öãgî
 != 1) {

985 
îr‹
;

987 
	`‰ìRïlyObje˘
(
ª∂y
);

990 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

991 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

992 
ª∂y
->
öãgî
 !
fõld_cou¡
) {

993 
îr‹
;

995 
	`‰ìRïlyObje˘
(
ª∂y
);

997 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "obje˘Éncodög %s", 
key
);

998 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
) {

999 
îr‹
;

1001 i‡(
hash_ícode
 =
TEST_HASH_ENCODED_ZIPLIST
) {

1002 if(
ª∂y
->
Àn
 !7 || 
	`°rcmp
‘ïly->
°r
, "ziplist")) {

1003 
îr‹
;

1006 if(
ª∂y
->
Àn
 !9 || 
	`°rcmp
‘ïly->
°r
, "hashtable")) {

1007 
îr‹
;

1011 
	`‰ìRïlyObje˘
(
ª∂y
);

1013  
thms
;

1015 
îr‹
:

1017 i‡(
thms
) {

1018 
	`ã°_hash_membîs_de°roy
(
thms
);

1019 
thms
 = 
NULL
;

1022 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1024  
NULL
;

1025 
	}
}

1027 
	$sim∂e_ã°_hash_ícode
(
vúe_ö°™˚
 *
vi
)

1029 *
key
 = "test_hash_encode";

1030 *
MESSAGE
 = "HASH ENCODE simpleÅest";

1031 
ã°_hash_membî
 **
thms
;

1033 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_ZIPLIST
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1034 i‡(
thms
 =
NULL
) {

1035 
îr‹
;

1037 
	`ã°_hash_membîs_de°roy
(
thms
);

1038 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_ZIPLIST
,
TEST_HASH_ENCODED_CAUSED_BY_VALUE
);

1039 i‡(
thms
 =
NULL
) {

1040 
îr‹
;

1042 
	`ã°_hash_membîs_de°roy
(
thms
);

1043 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1044 i‡(
thms
 =
NULL
) {

1045 
îr‹
;

1047 
	`ã°_hash_membîs_de°roy
(
thms
);

1048 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_VALUE
);

1049 i‡(
thms
 =
NULL
) {

1050 
îr‹
;

1052 
	`ã°_hash_membîs_de°roy
(
thms
);

1053 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_ALL
);

1054 i‡(
thms
 =
NULL
) {

1055 
îr‹
;

1057 
	`ã°_hash_membîs_de°roy
(
thms
);

1059 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1063 
îr‹
:

1065 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1066 
îrmsg
[0] = '\0';

1069 
	}
}

1071 
	$sim∂e_ã°_cmd_hgë_h£t
(
vúe_ö°™˚
 *
vi
)

1073 *
key
 = "test_cmd_hget_hset-key";

1074 *
fõld
 = "test_cmd_hget_hset-field";

1075 *
vÆue
 = "test_cmd_hget_hset-value";

1076 *
MESSAGE
 = "HGET/HSET simpleÅest";

1077 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1078 
ã°_hash_membî
 **
thms
 = 
NULL
;

1079 
idx
;

1081 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1082 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1083 
îr‹
;

1085 
	`‰ìRïlyObje˘
(
ª∂y
);

1087 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%†%s", 
key
, 
fõld
, 
vÆue
);

1088 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1089 
ª∂y
->
öãgî
 != 1) {

1090 
îr‹
;

1092 
	`‰ìRïlyObje˘
(
ª∂y
);

1094 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
fõld
);

1095 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1096 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

1097 
îr‹
;

1099 
	`‰ìRïlyObje˘
(
ª∂y
);

1101 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1102 i‡(
thms
 =
NULL
) {

1103 
îr‹
;

1105 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%†%s", 
key
, 
fõld
, 
vÆue
);

1106 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1107 
ª∂y
->
öãgî
 != 1) {

1108 
îr‹
;

1110 
	`‰ìRïlyObje˘
(
ª∂y
);

1111 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
fõld
);

1112 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1113 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,value)) {

1114 
îr‹
;

1116 
	`‰ìRïlyObje˘
(
ª∂y
);

1117 
idx
 = 
	`ã°_hash_membî_Àngth
(
thms
)/2;

1118 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1119 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1120 
ª∂y
->
Àn
 !
	`°æí
(
thms
[
idx
]->
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
,thms[idx]->value)) {

1121 
îr‹
;

1123 
	`‰ìRïlyObje˘
(
ª∂y
);

1124 
	`ã°_hash_membîs_de°roy
(
thms
);

1126 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1130 
îr‹
:

1132 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1133 i‡(
thms
Ë
	`ã°_hash_membîs_de°roy
(thms);

1135 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1136 
îrmsg
[0] = '\0';

1139 
	}
}

1141 
	$sim∂e_ã°_cmd_hÀn
(
vúe_ö°™˚
 *
vi
)

1143 *
key
 = "test_cmd_hlen-key";

1144 *
fõld
 = "test_cmd_hlen-field";

1145 *
vÆue
 = "test_cmd_hlen-value";

1146 *
MESSAGE
 = "HLEN simpleÅest";

1147 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1148 
hash_Àn
, 
j
;

1150 
hash_Àn
 = 51;

1151 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1152 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1153 
îr‹
;

1155 
	`‰ìRïlyObje˘
(
ª∂y
);

1156 
j
 = 0; j < 
hash_Àn
; j ++) {

1157 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 
j
, 
vÆue
);

1158 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1159 
ª∂y
->
öãgî
 != 1) {

1160 
îr‹
;

1162 
	`‰ìRïlyObje˘
(
ª∂y
);

1164 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

1165 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1166 
ª∂y
->
öãgî
 !
hash_Àn
) {

1167 
îr‹
;

1169 
	`‰ìRïlyObje˘
(
ª∂y
);

1171 
hash_Àn
 = 5111;

1172 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1173 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1174 
îr‹
;

1176 
	`‰ìRïlyObje˘
(
ª∂y
);

1177 
j
 = 0; j < 
hash_Àn
; j ++) {

1178 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 
j
, 
vÆue
);

1179 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1180 
ª∂y
->
öãgî
 != 1) {

1181 
îr‹
;

1183 
	`‰ìRïlyObje˘
(
ª∂y
);

1185 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hÀ¿%s", 
key
);

1186 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1187 
ª∂y
->
öãgî
 !
hash_Àn
) {

1188 
îr‹
;

1190 
	`‰ìRïlyObje˘
(
ª∂y
);

1192 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1196 
îr‹
:

1198 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1200 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1201 
îrmsg
[0] = '\0';

1204 
	}
}

1206 
	$sim∂e_ã°_cmd_hdñ
(
vúe_ö°™˚
 *
vi
)

1208 *
key
 = "test_cmd_hdel-key";

1209 *
fõld
 = "test_cmd_hdel-field";

1210 *
vÆue
 = "test_cmd_hdel-value";

1211 *
MESSAGE
 = "HDEL simpleÅest";

1212 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1213 
ã°_hash_membî
 **
thms
 = 
NULL
;

1214 
idx
;

1216 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "dñ %s", 
key
);

1217 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 =
REDIS_REPLY_ERROR
) {

1218 
îr‹
;

1220 
	`‰ìRïlyObje˘
(
ª∂y
);

1222 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 1, 
vÆue
);

1223 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1224 
ª∂y
->
öãgî
 != 1) {

1225 
îr‹
;

1227 
	`‰ìRïlyObje˘
(
ª∂y
);

1228 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "h£à%†%s%d %s", 
key
, 
fõld
, 2, 
vÆue
);

1229 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1230 
ª∂y
->
öãgî
 != 1) {

1231 
îr‹
;

1233 
	`‰ìRïlyObje˘
(
ª∂y
);

1235 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s%d", 
key
, 
fõld
, 1);

1236 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_STRING
 ||

1237 
ª∂y
->
Àn
 !
	`°æí
(
vÆue
Ë|| 
	`°rcmp
‘ïly->
°r
, value)) {

1238 
îr‹
;

1240 
	`‰ìRïlyObje˘
(
ª∂y
);

1241 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s%d", 
key
, 
fõld
, 1);

1242 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1243 
ª∂y
->
öãgî
 != 1) {

1244 
îr‹
;

1246 
	`‰ìRïlyObje˘
(
ª∂y
);

1247 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s%d", 
key
, 
fõld
, 1);

1248 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_NIL
) {

1249 
îr‹
;

1251 
	`‰ìRïlyObje˘
(
ª∂y
);

1253 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s%d", 
key
, 
fõld
, 2);

1254 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1255 
ª∂y
->
öãgî
 != 1) {

1256 
îr‹
;

1258 
	`‰ìRïlyObje˘
(
ª∂y
);

1259 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "exi°†%s", 
key
);

1260 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1261 
ª∂y
->
öãgî
 != 0) {

1262 
îr‹
;

1264 
	`‰ìRïlyObje˘
(
ª∂y
);

1266 
thms
 = 
	`sim∂e_ã°_hash_öô
(
vi
,
key
,
TEST_HASH_ENCODED_HT
,
TEST_HASH_ENCODED_CAUSED_BY_FILED
);

1267 i‡(
thms
 =
NULL
) {

1268 
îr‹
;

1270 
idx
 = 
	`ã°_hash_membî_Àngth
(
thms
)/2;

1271 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hdñ %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1272 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
 ||

1273 
ª∂y
->
öãgî
 != 1) {

1274 
îr‹
;

1276 
	`‰ìRïlyObje˘
(
ª∂y
);

1277 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "hgë %†%s", 
key
, 
thms
[
idx
]->
fõld
);

1278 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_NIL
) {

1279 
îr‹
;

1281 
	`‰ìRïlyObje˘
(
ª∂y
);

1282 
	`ã°_hash_membîs_de°roy
(
thms
);

1284 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1288 
îr‹
:

1290 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1291 i‡(
thms
Ë
	`ã°_hash_membîs_de°roy
(thms);

1293 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1294 
îrmsg
[0] = '\0';

1297 
	}
}

1299 
	$sim∂e_ã°_cmd_pÁdd_pfcou¡
(
vúe_ö°™˚
 *
vi
)

1301 *
key
 = "test_cmd_pfadd_pfcount-key";

1302 *
vÆue
 = "test_cmd_pfadd_pfcount-value";

1303 *
MESSAGE
 = "PFADD/PFCOUNT simpleÅest";

1304 
ªdisRïly
 * 
ª∂y
 = 
NULL
;

1305 
n
 = 0, 
cou¡
 = 20329, 
ª≥©
;

1307 
ª≥©
 < 2) {

1308 
ex≥˘_cou¡
;

1309 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "pÁdd %†%s%d", 
key
, 
vÆue
, 
n
++);

1310 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

1311 
îr‹
;

1313 
	`‰ìRïlyObje˘
(
ª∂y
);

1314 i‡(
n
 >
cou¡
) {

1315 
ª≥©
++;

1316 
n
 = 0;

1319 i‡(
ª≥©
 == 0) {

1320 
ex≥˘_cou¡
 = 
n
;

1322 
ex≥˘_cou¡
 = 
cou¡
;

1325 
ª∂y
 = 
	`ªdisComm™d
(
vi
->
˘x
, "pfcou¡ %s", 
key
);

1326 i‡(
ª∂y
 =
NULL
 ||Ñïly->
ty≥
 !
REDIS_REPLY_INTEGER
) {

1327 
îr‹
;

1329 i‡(
ª∂y
->
öãgî
 !()
ex≥˘_cou¡
) {

1330 
mi°ake
 = (()
ex≥˘_cou¡
-()
ª∂y
->
öãgî
)/()expect_count;

1331 i‡(
mi°ake
 < -0.02 || mistake > 0.02) {

1332 
	`vπ_s˙¥ötf
(
îrmsg
, 
LOG_MAX_LEN
, "pfadd %d differentÉlements isÇotápproximatedÖfcountÑeturned %lld, mistake %f",

1333 
ex≥˘_cou¡
, 
ª∂y
->
öãgî
, 
mi°ake
);

1334 
îr‹
;

1337 
	`‰ìRïlyObje˘
(
ª∂y
);

1340 
	`show_ã°_ªsu…
(
VRT_TEST_OK
,
MESSAGE
,
îrmsg
);

1344 
îr‹
:

1346 i‡(
ª∂y
Ë
	`‰ìRïlyObje˘
(reply);

1348 
	`show_ã°_ªsu…
(
VRT_TEST_ERR
,
MESSAGE
,
îrmsg
);

1349 
îrmsg
[0] = '\0';

1352 
	}
}

1354 
	$sim∂e_ã°
()

1356 
vúe_ö°™˚
 *
vi
;

1357 
ok_cou¡
 = 0, 
Æl_cou¡
 = 0;

1359 
vi
 = 
	`°¨t_⁄e_vúe_ö°™˚
();

1360 i‡(
vi
 =
NULL
) {

1361 
	`ã°_log_îr‹
("Run vire instance failed");

1365 
îrmsg
[0] = '\0';

1368 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gë_£t
(
vi
); 
Æl_cou¡
++;

1369 
ok_cou¡
+=
	`sim∂e_ã°_cmd_£äx
(
vi
); 
Æl_cou¡
++;

1370 
ok_cou¡
+=
	`sim∂e_ã°_cmd_£ãx
(
vi
); 
Æl_cou¡
++;

1371 
ok_cou¡
+=
	`sim∂e_ã°_cmd_p£ãx
(
vi
); 
Æl_cou¡
++;

1372 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸
(
vi
); 
Æl_cou¡
++;

1373 
ok_cou¡
+=
	`sim∂e_ã°_cmd_de¸
(
vi
); 
Æl_cou¡
++;

1374 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸by
(
vi
); 
Æl_cou¡
++;

1375 
ok_cou¡
+=
	`sim∂e_ã°_cmd_de¸by
(
vi
); 
Æl_cou¡
++;

1376 
ok_cou¡
+=
	`sim∂e_ã°_cmd_≠≥nd
(
vi
); 
Æl_cou¡
++;

1377 
ok_cou¡
+=
	`sim∂e_ã°_cmd_°æí
(
vi
); 
Æl_cou¡
++;

1378 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gë£t
(
vi
); 
Æl_cou¡
++;

1379 
ok_cou¡
+=
	`sim∂e_ã°_cmd_ö¸byÊﬂt
(
vi
); 
Æl_cou¡
++;

1380 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gëbô_£tbô_bôcou¡
(
vi
); 
Æl_cou¡
++;

1381 
ok_cou¡
+=
	`sim∂e_ã°_cmd_gëønge_£å™ge
(
vi
); 
Æl_cou¡
++;

1382 
ok_cou¡
+=
	`sim∂e_ã°_cmd_bôpos
(
vi
); 
Æl_cou¡
++;

1383 
ok_cou¡
+=
	`sim∂e_ã°_cmd_mgë_m£t
(
vi
); 
Æl_cou¡
++;

1385 
ok_cou¡
+=
	`sim∂e_ã°_hash_ícode
(
vi
); 
Æl_cou¡
++;

1386 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hgë_h£t
(
vi
); 
Æl_cou¡
++;

1387 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hÀn
(
vi
); 
Æl_cou¡
++;

1388 
ok_cou¡
+=
	`sim∂e_ã°_cmd_hdñ
(
vi
); 
Æl_cou¡
++;

1390 
ok_cou¡
+=
	`sim∂e_ã°_cmd_pÁdd_pfcou¡
(
vi
); 
Æl_cou¡
++;

1392 
	`vúe_ö°™˚_de°roy
(
vi
);

1394  
ok_cou¡
==
Æl_cou¡
?1:0;

1395 
	}
}

	@tests/vrt_simple.h

1 #i‚de‡
_VRT_SIMPLE_H_


2 
	#_VRT_SIMPLE_H_


	)

4 
sim∂e_ã°
();

	@tests/vrt_util.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°döt.h
>

4 
	~<î∫o.h
>

5 
	~<f˙é.h
>

6 
	~<uni°d.h
>

7 
	~<dúít.h
>

8 
	~<°rög.h
>

9 
	~<˘y≥.h
>

10 
	~<limôs.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/ty≥s.h
>

14 
	~<húedis.h
>

16 
	~<vπ_utû.h
>

19 
	$vπ_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
)

21 
	`ã°_log_îr‹
("as£π '%s' faûed @ (%s, %d)", 
c⁄d
, 
fûe
, 
löe
);

22 i‡(
∑nic
) {

23 
	`ab‹t
();

25 
	}
}

28 
	$vπ_vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

30 
n
;

32 
n
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

44 i‡(
n
 <= 0) {

48 i‡(
n
 < (Ë
size
) {

49  
n
;

52  ()(
size
 - 1);

53 
	}
}

56 
	$vπ_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

58 
va_li°
 
¨gs
;

59 
n
;

61 
	`va_°¨t
(
¨gs
, 
fmt
);

62 
n
 = 
	`vπ_vs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

63 
	`va_íd
(
¨gs
);

65  
n
;

66 
	}
}

69 
	$_ã°_log_îr‹
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...)

71 
Àn
, 
size
, 
î∫o_ßve
;

72 
buf
[
LOG_MAX_LEN
];

73 
va_li°
 
¨gs
;

75 
î∫o_ßve
 = 
î∫o
;

76 
Àn
 = 0;

77 
size
 = 
LOG_MAX_LEN
;

79 
Àn
 +
	`vπ_s˙¥ötf
(
buf
 +Üí, 
size
 -Üí, "%s:%d ", 
fûe
, 
löe
);

81 
	`va_°¨t
(
¨gs
, 
fmt
);

82 
Àn
 +
	`v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

83 
	`va_íd
(
¨gs
);

85 
buf
[
Àn
++] = '\n';

87 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
Àn
);

89 
î∫o
 = 
î∫o_ßve
;

90 
	}
}

93 
	$_ã°_log_out
(c⁄° *
fmt
, ...)

95 
Àn
, 
size
, 
î∫o_ßve
;

96 
buf
[
LOG_MAX_LEN
];

97 
va_li°
 
¨gs
;

99 
î∫o_ßve
 = 
î∫o
;

100 
Àn
 = 0;

101 
size
 = 
LOG_MAX_LEN
;

103 
	`va_°¨t
(
¨gs
, 
fmt
);

104 
Àn
 +
	`v¢¥ötf
(
buf
 +Üí, 
size
 -Üí, 
fmt
, 
¨gs
);

105 
	`va_íd
(
¨gs
);

107 
buf
[
Àn
++] = '\n';

109 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
Àn
);

111 
î∫o
 = 
î∫o_ßve
;

112 
	}
}

117 
öt64_t


118 
	$vπ_u£c_now
()

120 
timevÆ
 
now
;

121 
öt64_t
 
u£c
;

122 
°©us
;

124 
°©us
 = 
	`gëtimeofday
(&
now
, 
NULL
);

125 i‡(
°©us
 < 0) {

129 
u£c
 = (
öt64_t
)
now
.
tv_£c
 * 1000000LL + (öt64_tÍow.
tv_u£c
;

131  
u£c
;

132 
	}
}

137 
öt64_t


138 
	$vπ_m£c_now
()

140  
	`vπ_u£c_now
() / 1000LL;

141 
	}
}

146 
öt64_t


147 
	$vπ_£c_now
()

149  
	`vπ_u£c_now
() / 1000000LL;

150 
	}
}

159 
sds
 
	$gëAbsﬁuãP©h
(*
fûíame
) {

160 
cwd
[1024];

161 
sds
 
ab•©h
;

162 
sds
 
ªÕ©h
 = 
	`sd¢ew
(
fûíame
);

164 
	`sd°rim
(
ªÕ©h
," \r\n\t");

165 i‡(
ªÕ©h
[0] == '/') Ñelpath;

168 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

169 
	`sds‰ì
(
ªÕ©h
);

170  
NULL
;

172 
ab•©h
 = 
	`sd¢ew
(
cwd
);

173 i‡(
	`sd¶í
(
ab•©h
) &&ábspath[sdslen(abspath)-1] != '/')

174 
ab•©h
 = 
	`sdsˇt
(abspath,"/");

182 
	`sd¶í
(
ªÕ©h
) >= 3 &&

183 
ªÕ©h
[0] == '.' &&Ñelpath[1] == '.' &&Ñelpath[2] == '/')

185 
	`sd§™ge
(
ªÕ©h
,3,-1);

186 i‡(
	`sd¶í
(
ab•©h
) > 1) {

187 *
p
 = 
ab•©h
 + 
	`sd¶í
(abspath)-2;

188 
åimÀn
 = 1;

190 *
p
 != '/') {

191 
p
--;

192 
åimÀn
++;

194 
	`sd§™ge
(
ab•©h
,0,-(
åimÀn
+1));

199 
ab•©h
 = 
	`sdsˇtsds
◊b•©h,
ªÕ©h
);

200 
	`sds‰ì
(
ªÕ©h
);

201  
ab•©h
;

202 
	}
}

206 
uöt32_t
 
	$digôs10
(
uöt64_t
 
v
) {

207 i‡(
v
 < 10)  1;

208 i‡(
v
 < 100)  2;

209 i‡(
v
 < 1000)  3;

210 i‡(
v
 < 1000000000000UL) {

211 i‡(
v
 < 100000000UL) {

212 i‡(
v
 < 1000000) {

213 i‡(
v
 < 10000)  4;

214  5 + (
v
 >= 100000);

216  7 + (
v
 >= 10000000UL);

218 i‡(
v
 < 10000000000UL) {

219  9 + (
v
 >= 1000000000UL);

221  11 + (
v
 >= 100000000000UL);

223  12 + 
	`digôs10
(
v
 / 1000000000000UL);

224 
	}
}

227 
uöt32_t
 
	$sdigôs10
(
öt64_t
 
v
) {

228 i‡(
v
 < 0) {

230 
uöt64_t
 
uv
 = (
v
 !
LLONG_MIN
) ?

231 (
uöt64_t
)-
v
 : ((uöt64_tË
LLONG_MAX
)+1;

232  
	`digôs10
(
uv
)+1;

234  
	`digôs10
(
v
);

236 
	}
}

249 
	$Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
) {

250 c⁄° 
digôs
[201] =

256 
√g©ive
;

257 
vÆue
;

261 i‡(
svÆue
 < 0) {

262 i‡(
svÆue
 !
LLONG_MIN
) {

263 
vÆue
 = -
svÆue
;

265 
vÆue
 = ((Ë
LLONG_MAX
)+1;

267 
√g©ive
 = 1;

269 
vÆue
 = 
svÆue
;

270 
√g©ive
 = 0;

274 
uöt32_t
 c⁄° 
Àngth
 = 
	`digôs10
(
vÆue
)+
√g©ive
;

275 i‡(
Àngth
 >
d°Àn
)  0;

278 
uöt32_t
 
√xt
 = 
Àngth
;

279 
d°
[
√xt
] = '\0';

280 
√xt
--;

281 
vÆue
 >= 100) {

282 c⁄° 
i
 = (
vÆue
 % 100) * 2;

283 
vÆue
 /= 100;

284 
d°
[
√xt
] = 
digôs
[
i
 + 1];

285 
d°
[
√xt
 - 1] = 
digôs
[
i
];

286 
√xt
 -= 2;

290 i‡(
vÆue
 < 10) {

291 
d°
[
√xt
] = '0' + (
uöt32_t
Ë
vÆue
;

293 
i
 = (
uöt32_t
Ë
vÆue
 * 2;

294 
d°
[
√xt
] = 
digôs
[
i
 + 1];

295 
d°
[
√xt
 - 1] = 
digôs
[
i
];

299 i‡(
√g©ive
Ë
d°
[0] = '-';

300  
Àngth
;

301 
	}
}

306 
	$°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
) {

307 c⁄° *
p
 = 
s
;

308 
size_t
 
∂í
 = 0;

309 
√g©ive
 = 0;

310 
v
;

312 i‡(
∂í
 =
¶í
)

316 i‡(
¶í
 =1 && 
p
[0] == '0') {

317 i‡(
vÆue
 !
NULL
) *value = 0;

321 i‡(
p
[0] == '-') {

322 
√g©ive
 = 1;

323 
p
++; 
∂í
++;

326 i‡(
∂í
 =
¶í
)

331 i‡(
p
[0] >= '1' &&Ö[0] <= '9') {

332 
v
 = 
p
[0]-'0';

333 
p
++; 
∂í
++;

334 } i‡(
p
[0] ='0' && 
¶í
 == 1) {

335 *
vÆue
 = 0;

341 
∂í
 < 
¶í
 && 
p
[0] >= '0' &&Ö[0] <= '9') {

342 i‡(
v
 > (
ULLONG_MAX
 / 10))

344 
v
 *= 10;

346 i‡(
v
 > (
ULLONG_MAX
 - (
p
[0]-'0')))

348 
v
 +
p
[0]-'0';

350 
p
++; 
∂í
++;

354 i‡(
∂í
 < 
¶í
)

357 i‡(
√g©ive
) {

358 i‡(
v
 > (()(-(
LLONG_MIN
+1))+1))

360 i‡(
vÆue
 !
NULL
Ë*vÆuê-
v
;

362 i‡(
v
 > 
LLONG_MAX
)

364 i‡(
vÆue
 !
NULL
Ë*vÆuê
v
;

367 
	}
}

372 
	$°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
) {

373 
ŒvÆ
;

375 i‡(!
	`°rög2Œ
(
s
,
¶í
,&
ŒvÆ
))

378 i‡(
ŒvÆ
 < 
LONG_MIN
 ||ÜlvÆ > 
LONG_MAX
)

381 *
lvÆ
 = ()
ŒvÆ
;

383 
	}
}

387 
	$d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
) {

388 i‡(
	`i¢™
(
vÆue
)) {

389 
Àn
 = 
	`¢¥ötf
(
buf
,len,"nan");

390 } i‡(
	`isöf
(
vÆue
)) {

391 i‡(
vÆue
 < 0)

392 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-inf");

394 
Àn
 = 
	`¢¥ötf
(
buf
,len,"inf");

395 } i‡(
vÆue
 == 0) {

397 i‡(1.0/
vÆue
 < 0)

398 
Àn
 = 
	`¢¥ötf
(
buf
,len,"-0");

400 
Àn
 = 
	`¢¥ötf
(
buf
,len,"0");

402 #i‡(
DBL_MANT_DIG
 >52Ë&& (
LLONG_MAX
 == 0x7fffffffffffffffLL)

412 
mö
 = -4503599627370495;

413 
max
 = 4503599627370496;

414 i‡(
vÆue
 > 
mö
 && vÆuê< 
max
 && value == (()(()value)))

415 
Àn
 = 
	`Œ2°rög
(
buf
,Àn,()
vÆue
);

418 
Àn
 = 
	`¢¥ötf
(
buf
,Àn,"%.17g",
vÆue
);

421  
Àn
;

422 
	}
}

424 
	$¸óã_dú
(*
∑th
)

426 i‡(
	`mkdú
(
∑th
,0755) < 0) {

427  
VRT_ERROR
;

430  
VRT_OK
;

431 
	}
}

433 
	$de°roy_dú
(*
∑th
)

435 
DIR
 *
dp
;

436 
dúít
 *
íåy
;

437 
°©
 
°©buf
;

438 
cwd
[1024];

440 i‡(
	`gëcwd
(
cwd
,(cwd)Ë=
NULL
) {

441  
VRT_ERROR
;

444 i‡((
dp
 = 
	`›ídú
(
∑th
)Ë=
NULL
) {

445 
	`ã°_log_îr‹
("C™'à›í dú: %s", 
∑th
);

446  
VRT_ERROR
;

449 
	`chdú
 (
∑th
);

450 (
íåy
 = 
	`ªaddú
(
dp
)Ë!
NULL
) {

451 
	`l°©
(
íåy
->
d_«me
, &
°©buf
);

452 i‡(
S_IFDIR
 & 
°©buf
.
°_mode
) {

453 i‡(
	`°rcmp
(".", 
íåy
->
d_«me
) == 0 || strcmp("..",Éntry->d_name) == 0)

456 
	`de°roy_dú
(
íåy
->
d_«me
);

458 
	`ªmove
(
íåy
->
d_«me
);

462 
	`chdú
(
cwd
);

463 
	`˛o£dú
(
dp
);

465 
	`ªmove
(
∑th
);

466  
VRT_OK
;

467 
	}
}

469 
	$gë_pid_‰om_ª∂y
(
ªdisC⁄ãxt
 *
ªdis˘x
, *
ho°
, 
p‹t
)

471 
ªdisC⁄ãxt
 *
˘x
 = 
ªdis˘x
;

472 
ªdisRïly
 * 
ª∂y
;

473 
sds
 *
löes
;

474 
size_t
 
löe_Àn
;

475 
cou¡
, 
j
;

476 
pid
 = -1;

478 i‡(
˘x
 =
NULL
) {

479 
˘x
 = 
	`ªdisC⁄√˘
(
ho°
,
p‹t
);

482 i‡(
˘x
 =
NULL
) {

483 
	`ã°_log_îr‹
("GëÖid from in°™˚ faûed: c™'àc⁄√˘Åÿ%s:%d",
ho°
,
p‹t
);

487 
ª∂y
 = 
	`ªdisComm™d
(
˘x
, "info server");

488 i‡(
ª∂y
 =
NULL
) {

489 
	`ã°_log_îr‹
("Execute 'info server' command on vire failed: %s\n",

490 
˘x
->
îr
?˘x->
îr°r
:"");

491 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

495 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

496 
	`ã°_log_îr‹
("Reply for 'info server' command from vireÅype %d isÉrror",

497 
ª∂y
->
ty≥
);

498 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

499 
	`‰ìRïlyObje˘
(
ª∂y
);

503 
löes
 = 
	`sds•lôÀn
(
ª∂y
->
°r
,ª∂y->
Àn
,"\r\n",2,&
cou¡
);

504 i‡(
löes
 =
NULL
) {

505 
	`ã°_log_îr‹
("Reply for 'info server' command from vire isÉrror");

506 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

507 
	`‰ìRïlyObje˘
(
ª∂y
);

511 
j
 = 0; j < 
cou¡
; j ++) {

512 
löe_Àn
 = 
	`sd¶í
(
löes
[
j
]);

513 i‡(
löe_Àn
 > 11 && !
	`°∫cmp
("¥o˚ss_id", 
löes
[
j
], 10)) {

514 i‡(
	`°rög2l
(
löes
[
j
]+11,
löe_Àn
-11,&
pid
) == 0) {

515 
	`ã°_log_îr‹
("ConvertÖid string %.*sÅoÜong failed",

516 
löe_Àn
-11,
löes
[
j
]+11);

517 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

518 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

519 
	`‰ìRïlyObje˘
(
ª∂y
);

526 
	`sds‰ì•lôªs
(
löes
,
cou¡
);

527 i‡(
ªdis˘x
 =
NULL
Ë
	`ªdisFªe
(
˘x
);

528 
	`‰ìRïlyObje˘
(
ª∂y
);

530  
pid
;

531 
	}
}

535 *
	$gë_ønge_‰om_°rög
(*
°r
, 
size_t
 
Àn
, *
cou¡
)

537 
ñem_cou¡
;

538 
sds
 *
ñems
;

539 
vÆue
;

540 *
ønge
;

542 
ñems
 = 
	`sds•lôÀn
(
›èrg
,
	`°æí
(›èrg),"-",1,&
ñem_cou¡
);

543 i‡(
ñems
 =
NULL
) {

544 
îr‹
;

545 } i‡(
ñem_cou¡
 <= 0 ||Élem_count >= 3) {

546 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

547 
îr‹
;

550 i‡(
ñem_cou¡
 == 1) {

551 i‡(
	`°rög2Œ
(
ñems
[0],
	`sd¶í
”Àms[0]),&
vÆue
) != 1) {

552 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

553 
îr‹
;

556 
ønge
 = 
	`mÆloc
(1*(*range));

557 
ønge
[0] = 
vÆue
;

558 *
cou¡
 = 1;

559 } i‡(
ñem_cou¡
 == 2) {

560 i‡(
	`°rög2Œ
(
ñems
[0],
	`sd¶í
”Àms[0]),&
vÆue
) != 1) {

561 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

562 
îr‹
;

565 
ønge
 = 
	`mÆloc
(2*(*range));

566 
ønge
[0] = 
vÆue
;

568 i‡(
	`°rög2Œ
(
ñems
[1],
	`sd¶í
”Àms[1]),&
vÆue
) != 1) {

569 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

570 
	`‰ì
(
ønge
);

571 
îr‹
;

574 
ønge
[1] = 
vÆue
;

575 *
cou¡
 = 2;

577 i‡(
ønge
[0] >Ñange[1]) {

578 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

579 
	`‰ì
(
ønge
);

580 
îr‹
;

584 
	`sds‰ì•lôªs
(
ñems
,
ñem_cou¡
);

586  
ønge
;

588 
îr‹
:

590 *
cou¡
 = -1;

591  
NULL
;

592 
	}
}

594 
sds
 
	$gë_ho°_p‹t_‰om_addªss_°rög
(*
addªss
, *
p‹t
)

596 
sds
 *
ho°_p‹t
;

597 
cou¡
 = 0;

598 
sds
 
ho°
;

599 
vÆue
;

601 *
p‹t
 = 0;

603 
ho°_p‹t
 = 
	`sds•lôÀn
(
addªss
,
	`°æí
◊ddªss),":",1,&
cou¡
);

604 i‡(
ho°_p‹t
 =
NULL
) {

605  
NULL
;

606 } i‡(
cou¡
 != 2) {

607 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

608  
NULL
;

611 i‡(
	`°rög2l
(
ho°_p‹t
[1],
	`sd¶í
(ho°_p‹t[1]),&
vÆue
) != 1 ||

612 
vÆue
 <= 0 || value >= 65535) {

613 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

614  
NULL
;

617 *
p‹t
 = ()
vÆue
;

618 
ho°
 = 
ho°_p‹t
[0];

619 
ho°_p‹t
[0] = 
NULL
;

620 
	`sds‰ì•lôªs
(
ho°_p‹t
,
cou¡
);

622  
ho°
;

623 
	}
}

	@tests/vrt_util.h

1 #i‚de‡
_VRT_UTIL_H_


2 
	#_VRT_UTIL_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~<c⁄fig.h
>

8 #ifde‡
HAVE_DEBUG_LOG


9 
	#VRT_DEBUG_LOG
 1

	)

12 
	~<d•ecülc⁄fig.h
>

14 
	~<sds.h
>

16 
	#VRT_OK
 0

	)

17 
	#VRT_ERROR
 -1

	)

19 
	#VRT_UINT8_MAXLEN
 (3 + 1)

	)

20 
	#VRT_UINT16_MAXLEN
 (5 + 1)

	)

21 
	#VRT_UINT32_MAXLEN
 (10 + 1)

	)

22 
	#VRT_UINT64_MAXLEN
 (20 + 1)

	)

23 
	#VRT_UINTMAX_MAXLEN
 
VRT_UINT64_MAXLEN


	)

25 
	#VRT_MAXHOSTNAMELEN
 256

	)

27 
	#LF
 (
uöt8_t
Ë10

	)

28 
	#CR
 (
uöt8_t
Ë13

	)

29 
	#CRLF
 "\x0d\x0a"

	)

30 
	#CRLF_LEN
 (("\x0d\x0a"Ë- 1)

	)

32 
	#LOG_MAX_LEN
 256

	)

34 
_ã°_log_îr‹
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

35 
_ã°_log_out
(c⁄° *
fmt
, ...);

36 #i‡
deföed
(
VRT_DEBUG_LOG
)

37 
	#ã°_log_debug
(...) do { \

38 
	`_ã°_log_îr‹
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
); \

39 } 0)

	)

41 
	#ã°_log_debug
(...)

	)

43 
	#ã°_log_îr‹
(...) do { \

44 
	`_ã°_log_îr‹
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
); \

45 } 0)

	)

46 
	#ã°_log_out
(...) do { \

47 
	`_ã°_log_out
(
__VA_ARGS__
); \

48 } 0)

	)

50 
vπ_as£π
(c⁄° *
c⁄d
, c⁄° *
fûe
, 
löe
, 
∑nic
);

52 
	#ASSERT
(
_x
) do { \

53 i‡(!(
_x
)) { \

54 
	`vπ_as£π
(#_x, 
__FILE__
, 
__LINE__
, 1); \

56 } 0)

	)

58 
vπ_s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

60 
öt64_t
 
vπ_u£c_now
();

61 
öt64_t
 
vπ_m£c_now
();

62 
öt64_t
 
vπ_£c_now
();

64 
sds
 
gëAbsﬁuãP©h
(*
fûíame
);

66 
Œ2°rög
(* 
d°
, 
size_t
 
d°Àn
, 
svÆue
);

67 
°rög2Œ
(c⁄° *
s
, 
size_t
 
¶í
, *
vÆue
);

68 
°rög2l
(c⁄° *
s
, 
size_t
 
¶í
, *
lvÆ
);

69 
d2°rög
(*
buf
, 
size_t
 
Àn
, 
vÆue
);

71 
¸óã_dú
(*
∑th
);

72 
de°roy_dú
(*
dú
);

74 
gë_pid_‰om_ª∂y
(
ªdisC⁄ãxt
 *
ªdis˘x
, *
ho°
, 
p‹t
);

76 *
gë_ønge_‰om_°rög
(*
°r
, 
size_t
 
Àn
, *
cou¡
);

78 
sds
 
gë_ho°_p‹t_‰om_addªss_°rög
(*
addªss
, *
p‹t
);

	@tests/vrtest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

4 
	~<f˙é.h
>

5 
	~<î∫o.h
>

6 
	~<sig«l.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ut¢ame.h
>

10 
	~<húedis.h
>

12 
	~<vπ_utû.h
>

13 
	~<vπ_public.h
>

14 
	~<vπ_sim∂e.h
>

16 
	sc⁄fig
 {

17 *
	mpid_fûíame
;

19 
	mpidfûe
;

20 
	mpid
;

23 
c⁄fig
 
	gc⁄fig
;

25 
	gshow_hñp
;

26 
	gshow_vîsi⁄
;

28 
›ti⁄
 
	gl⁄g_›ti⁄s
[] = {

29 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

30 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

31 { "execuã-fûe", 
ªquúed_¨gumít
, 
NULL
, 'e' },

32 { "pid-fûe", 
ªquúed_¨gumít
, 
NULL
, 'p' },

33 { 
NULL
, 0, NULL, 0 }

36 
	gsh‹t_›ti⁄s
[] = "hVe:p:";

39 
	$vr_show_ußge
()

41 
	`¥ötf
(

42 "Ußge: vúëe° [-?hV] [-êexecuã-fûe] [-∞pid-fûe]" 
CRLF


43 "" 
CRLF
);

44 
	`¥ötf
(

45 "O±i⁄s:" 
CRLF


46 " -h, --hñ∞ :Åhi†hñp" 
CRLF


47 " -V, --vîsi⁄ : show vîsi⁄ándÉxô" 
CRLF


48 " -e, --execuã-fûê : vúêexecuã fûe, deÁu… i†§c/vúe" 
CRLF


49 " -p, --pid-fûê :Öid fûe" 
CRLF


50 "" 
CRLF
);

51 
	}
}

54 
	$vr_£t_deÁu…_›ti⁄s
()

56 
c⁄fig
.
pid_fûíame
 = 
NULL
;

57 
	}
}

60 
	$vr_gë_›ti⁄s
(
¨gc
, **
¨gv
)

62 
c
;

64 
›ãº
 = 0;

67 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, 
sh‹t_›ti⁄s
, 
l⁄g_›ti⁄s
, 
NULL
);

68 i‡(
c
 == -1) {

73 
c
) {

75 
show_vîsi⁄
 = 1;

76 
show_hñp
 = 1;

80 
show_vîsi⁄
 = 1;

84 
	`£t_execuã_fûe
(
›èrg
);

88 
c⁄fig
.
pid_fûíame
 = 
›èrg
;

92 
›t›t
) {

95 
	`ã°_log_îr‹
("vire: option -%cÑequires string",

96 
›t›t
);

100 
	`ã°_log_îr‹
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

103  
VRT_ERROR
;

106 
	`ã°_log_îr‹
("vúe: invÆid o±i⁄ -- '%c'", 
›t›t
);

107  
VRT_ERROR
;

112  
VRT_OK
;

113 
	}
}

116 
	$maö
(
¨gc
, **
¨gv
)

118 
ªt
;

119 
ok_cou¡
 = 0, 
Æl_cou¡
 = 0;

121 
	`vr_£t_deÁu…_›ti⁄s
();

123 
ªt
 = 
	`vr_gë_›ti⁄s
(
¨gc
, 
¨gv
);

124 i‡(
ªt
 !
VRT_OK
) {

125 
	`vr_show_ußge
();

126 
	`exô
(1);

129 i‡(
show_vîsi⁄
) {

130 
	`ã°_log_out
("Thi†i†vúëe°-%s", 
VR_VERSION_STRING
);

131 i‡(
show_hñp
) {

132 
	`vr_show_ußge
();

134 
	`exô
(0);

137 
	`¸óã_w‹k_dú
();

139 
	`ã°_log_out
("Te°ög Vúêvîsi⁄ %†\n", 
VR_VERSION_STRING
);

141 
ok_cou¡
+=
	`sim∂e_ã°
(); 
Æl_cou¡
++;

143 
˛ón
:

144 
	`de°roy_w‹k_dú
();

146 i‡(
ok_cou¡
 =
Æl_cou¡
)

147 
	`ã°_log_out
("\n\\o/ \033[32;1mAllÅestsÖassed withoutÉrrors!\033[0m\n");

148  
VRT_OK
;

149 
	}
}

	@
1
.
0
144
2650
dep/ae/ae.c
dep/ae/ae.h
dep/ae/ae_epoll.c
dep/ae/ae_evport.c
dep/ae/ae_kqueue.c
dep/ae/ae_select.c
dep/darray/darray.c
dep/darray/darray.h
dep/dhashkit/dcrc16.c
dep/dhashkit/dcrc32.c
dep/dhashkit/dfnv.c
dep/dhashkit/dhashkit.h
dep/dhashkit/dhsieh.c
dep/dhashkit/djenkins.c
dep/dhashkit/dketama.c
dep/dhashkit/dmd5.c
dep/dhashkit/dmodula.c
dep/dhashkit/dmurmur.c
dep/dhashkit/done_at_a_time.c
dep/dhashkit/drandom.c
dep/dhashkit/dsha1.c
dep/dlist/dlist.c
dep/dlist/dlist.h
dep/dlist/dlockqueue.c
dep/dlist/dlockqueue.h
dep/dlist/dmtqueue.c
dep/dlist/dmtqueue.h
dep/dmalloc/dmalloc.c
dep/dmalloc/dmalloc.h
dep/himemcached-0.1.0/himcdep/sds.c
dep/himemcached-0.1.0/himcdep/sds.h
dep/himemcached-0.1.0/himcread.c
dep/himemcached-0.1.0/himcread.h
dep/himemcached-0.1.0/himemcached.c
dep/himemcached-0.1.0/himemcached.h
dep/sds/sds.c
dep/sds/sds.h
dep/sds/sdsalloc.h
dep/util/dlog.c
dep/util/dlog.h
dep/util/dspecialconfig.h
dep/util/dutil.c
dep/util/dutil.h
src/vr.c
src/vr_aof.c
src/vr_aof.h
src/vr_backend.c
src/vr_backend.h
src/vr_bitops.c
src/vr_bitops.h
src/vr_block.c
src/vr_block.h
src/vr_client.c
src/vr_client.h
src/vr_command.c
src/vr_command.h
src/vr_conf.c
src/vr_conf.h
src/vr_connection.c
src/vr_connection.h
src/vr_core.c
src/vr_core.h
src/vr_db.c
src/vr_db.h
src/vr_dict.c
src/vr_dict.h
src/vr_eventloop.c
src/vr_eventloop.h
src/vr_hyperloglog.c
src/vr_hyperloglog.h
src/vr_intset.c
src/vr_intset.h
src/vr_listen.c
src/vr_listen.h
src/vr_lzf.h
src/vr_lzfP.h
src/vr_lzf_c.c
src/vr_lzf_d.c
src/vr_master.c
src/vr_master.h
src/vr_multi.c
src/vr_multi.h
src/vr_notify.c
src/vr_notify.h
src/vr_object.c
src/vr_object.h
src/vr_pubsub.c
src/vr_pubsub.h
src/vr_quicklist.c
src/vr_quicklist.h
src/vr_rbtree.c
src/vr_rbtree.h
src/vr_rdb.c
src/vr_rdb.h
src/vr_replication.c
src/vr_replication.h
src/vr_scripting.c
src/vr_scripting.h
src/vr_server.c
src/vr_server.h
src/vr_signal.c
src/vr_signal.h
src/vr_slowlog.c
src/vr_slowlog.h
src/vr_stats.c
src/vr_stats.h
src/vr_t_hash.c
src/vr_t_hash.h
src/vr_t_list.c
src/vr_t_list.h
src/vr_t_set.c
src/vr_t_set.h
src/vr_t_string.c
src/vr_t_string.h
src/vr_t_zset.c
src/vr_t_zset.h
src/vr_thread.c
src/vr_thread.h
src/vr_util.c
src/vr_util.h
src/vr_worker.c
src/vr_worker.h
src/vr_ziplist.c
src/vr_ziplist.h
src/vr_zipmap.c
src/vr_zipmap.h
tests/vrabtest.c
tests/vrabtest.h
tests/vrt_backend.c
tests/vrt_backend.h
tests/vrt_benchmark.c
tests/vrt_check_data.c
tests/vrt_check_data.h
tests/vrt_dispatch_data.c
tests/vrt_dispatch_data.h
tests/vrt_produce_data.c
tests/vrt_produce_data.h
tests/vrt_public.c
tests/vrt_public.h
tests/vrt_simple.c
tests/vrt_simple.h
tests/vrt_util.c
tests/vrt_util.h
tests/vrtest.c
